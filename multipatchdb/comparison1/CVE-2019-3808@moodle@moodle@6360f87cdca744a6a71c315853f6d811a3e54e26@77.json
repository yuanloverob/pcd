{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "862a9b1d605bd8155c73a48a17c41eb7bc16a8bc",
      "candidate_info": {
        "commit_hash": "862a9b1d605bd8155c73a48a17c41eb7bc16a8bc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/862a9b1d605bd8155c73a48a17c41eb7bc16a8bc",
        "files": [
          "lang/en/message.php",
          "lib/classes/message/manager.php",
          "lib/db/services.php",
          "lib/db/upgrade.php",
          "lib/messagelib.php",
          "lib/outputrenderers.php",
          "lib/tests/messagelib_test.php",
          "lib/upgrade.txt",
          "message/amd/build/message_drawer_view_conversation.min.js",
          "message/amd/build/message_drawer_view_conversation_constants.min.js",
          "message/amd/build/message_drawer_view_conversation_patcher.min.js",
          "message/amd/build/message_drawer_view_conversation_renderer.min.js",
          "message/amd/build/message_drawer_view_overview.min.js",
          "message/amd/build/message_drawer_view_overview_section.min.js",
          "message/amd/build/message_repository.min.js",
          "message/amd/src/message_drawer_view_conversation.js",
          "message/amd/src/message_drawer_view_conversation_constants.js",
          "message/amd/src/message_drawer_view_conversation_patcher.js",
          "message/amd/src/message_drawer_view_conversation_renderer.js",
          "message/amd/src/message_drawer_view_overview.js",
          "message/amd/src/message_drawer_view_overview_section.js",
          "message/amd/src/message_repository.js",
          "message/classes/api.php",
          "message/classes/privacy/provider.php",
          "message/classes/task/migrate_message_data.php",
          "message/externallib.php",
          "message/templates/message_drawer_view_conversation_body.mustache",
          "message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "message/tests/messagelib_test.php",
          "message/upgrade.txt",
          "user/lib.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-64715-master-self-starred-pr-ryan' of git://github.com/sarjona/moodle",
        "before_after_code_files": [
          "lang/en/message.php||lang/en/message.php",
          "lib/classes/message/manager.php||lib/classes/message/manager.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/messagelib.php||lib/messagelib.php",
          "lib/outputrenderers.php||lib/outputrenderers.php",
          "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php",
          "message/amd/src/message_drawer_view_conversation.js||message/amd/src/message_drawer_view_conversation.js",
          "message/amd/src/message_drawer_view_conversation_constants.js||message/amd/src/message_drawer_view_conversation_constants.js",
          "message/amd/src/message_drawer_view_conversation_patcher.js||message/amd/src/message_drawer_view_conversation_patcher.js",
          "message/amd/src/message_drawer_view_conversation_renderer.js||message/amd/src/message_drawer_view_conversation_renderer.js",
          "message/amd/src/message_drawer_view_overview.js||message/amd/src/message_drawer_view_overview.js",
          "message/amd/src/message_drawer_view_overview_section.js||message/amd/src/message_drawer_view_overview_section.js",
          "message/amd/src/message_repository.js||message/amd/src/message_repository.js",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/privacy/provider.php||message/classes/privacy/provider.php",
          "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php",
          "message/externallib.php||message/externallib.php",
          "message/templates/message_drawer_view_conversation_body.mustache||message/templates/message_drawer_view_conversation_body.mustache",
          "message/templates/message_drawer_view_conversation_header_content_type_self.mustache||message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "message/tests/messagelib_test.php||message/tests/messagelib_test.php",
          "user/lib.php||user/lib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: $string['defaults'] = 'Defaults';",
          "53: $string['deleteallconfirm'] = \"Are you sure you would like to delete this entire conversation? This will not delete it for other conversation participants.\";",
          "54: $string['deleteallmessages'] = \"Delete all messages\";",
          "55: $string['deleteconversation'] = \"Delete conversation\";",
          "56: $string['deleteselectedmessages'] = 'Delete selected messages';",
          "57: $string['deleteselectedmessagesconfirm'] = 'Are you sure you would like to delete the selected messages? This will not delete them for other conversation participants.';",
          "58: $string['disableall'] = 'Disable notifications';",
          "59: $string['disabled'] = 'Messaging is disabled on this site';",
          "60: $string['disallowed'] = 'Disallowed';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: $string['deleteallselfconfirm'] = \"Are you sure you would like to delete this entire personal conversation?\";",
          "59: $string['deleteselectedmessagesconfirmselfconversation'] = 'Are you sure you would like to delete the selected personal messages?';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211: $string['seeall'] = 'See all';",
          "212: $string['selectmessagestodelete'] = 'Select messages to delete';",
          "213: $string['selectnotificationtoview'] = 'Select from the list of notifications on the side to view more details';",
          "214: $string['send'] = 'Send';",
          "215: $string['sender'] = '{$a}:';",
          "216: $string['sendingvia'] = 'Sending \"{$a->provider}\" via \"{$a->processor}\"';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216: $string['selfconversation'] = 'Personal space';",
          "217: $string['selfconversationdefaultmessage'] = 'Save draft messages, links, notes etc. to access later.';",
          "",
          "---------------"
        ],
        "lib/classes/message/manager.php||lib/classes/message/manager.php": [
          "File: lib/classes/message/manager.php -> lib/classes/message/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $conv = $DB->get_record('message_conversations', ['id' => $eventdata->convid], 'id, type, name');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         if ($conv->type == \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "115:             return $savemessage->id;",
          "116:         }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1171:         'ajax' => true",
          "1172:     ),",
          "1173:     'core_message_get_messages' => array(",
          "1174:         'classname' => 'core_message_external',",
          "1175:         'methodname' => 'get_messages',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173:     'core_message_get_self_conversation' => array(",
          "1174:         'classname' => 'core_message_external',",
          "1175:         'methodname' => 'get_self_conversation',",
          "1176:         'classpath' => 'message/externallib.php',",
          "1177:         'description' => 'Retrieve a self-conversation for a user',",
          "1178:         'type' => 'read',",
          "1179:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1180:         'ajax' => true",
          "1181:     ),",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2996:         if (!$dbman->field_exists($table, $field)) {",
          "2997:             $dbman->add_field($table, $field);",
          "2998:         }",
          "3000:         upgrade_main_savepoint(true, 2019041300.01);",
          "3001:     }",
          "3003:     return true;",
          "3004: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3003:     if ($oldversion < 2019041800.01) {",
          "3006:         $sql = \"SELECT mcm.conversationid, mcm.userid, MAX(mcm.id) as maxid",
          "3007:                   FROM {message_conversation_members} mcm",
          "3008:               GROUP BY mcm.conversationid, mcm.userid",
          "3009:                 HAVING COUNT(*) > 1\";",
          "3010:         $selfconversationsrs = $DB->get_recordset_sql($sql);",
          "3011:         $maxids = [];",
          "3012:         foreach ($selfconversationsrs as $selfconversation) {",
          "3013:             $DB->update_record('message_conversations',",
          "3014:                 ['id' => $selfconversation->conversationid,",
          "3015:                  'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3016:                  'convhash' => \\core_message\\helper::get_conversation_hash([$selfconversation->userid])",
          "3017:                 ]",
          "3018:             );",
          "3021:             $favouriterecord = new \\stdClass();",
          "3022:             $favouriterecord->component = 'core_message';",
          "3023:             $favouriterecord->itemtype = 'message_conversations';",
          "3024:             $favouriterecord->itemid = $selfconversation->conversationid;",
          "3025:             $userctx = \\context_user::instance($selfconversation->userid);",
          "3026:             $favouriterecord->contextid = $userctx->id;",
          "3027:             $favouriterecord->userid = $selfconversation->userid;",
          "3028:             $favouriterecord->timecreated = time();",
          "3029:             $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3031:             $DB->insert_record('favourite', $favouriterecord);",
          "3034:             $maxids[] = $selfconversation->maxid;",
          "3035:         }",
          "3036:         $selfconversationsrs->close();",
          "3039:         if (!empty($maxids)) {",
          "3040:             list($insql, $inparams) = $DB->get_in_or_equal($maxids);",
          "3041:             $DB->delete_records_select('message_conversation_members', \"id $insql\", $inparams);",
          "3042:         }",
          "3049:         $select = 'useridfrom = useridto AND notification = 0';",
          "3050:         $legacyselfmessagesrs = $DB->get_recordset_select('message_read', $select);",
          "3051:         foreach ($legacyselfmessagesrs as $message) {",
          "3053:             $conditions = [",
          "3054:                 'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3055:                 'convhash' => \\core_message\\helper::get_conversation_hash([$message->useridfrom])",
          "3056:             ];",
          "3057:             $selfconversation = $DB->get_record('message_conversations', $conditions);",
          "3058:             if (empty($selfconversation)) {",
          "3060:                 $selfconversation = new \\stdClass();",
          "3061:                 $selfconversation->type = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "3062:                 $selfconversation->convhash = \\core_message\\helper::get_conversation_hash([$message->useridfrom]);",
          "3063:                 $selfconversation->enabled = 1;",
          "3064:                 $selfconversation->timecreated = time();",
          "3065:                 $selfconversation->timemodified = $selfconversation->timecreated;",
          "3067:                 $selfconversation->id = $DB->insert_record('message_conversations', $selfconversation);",
          "3070:                 $member = new \\stdClass();",
          "3071:                 $member->conversationid = $selfconversation->id;",
          "3072:                 $member->userid = $message->useridfrom;",
          "3073:                 $member->timecreated = time();",
          "3075:                 $member->id = $DB->insert_record('message_conversation_members', $member);",
          "3078:                 $favouriterecord = new \\stdClass();",
          "3079:                 $favouriterecord->component = 'core_message';",
          "3080:                 $favouriterecord->itemtype = 'message_conversations';",
          "3081:                 $favouriterecord->itemid = $selfconversation->id;",
          "3082:                 $userctx = \\context_user::instance($message->useridfrom);",
          "3083:                 $favouriterecord->contextid = $userctx->id;",
          "3084:                 $favouriterecord->userid = $message->useridfrom;",
          "3085:                 $favouriterecord->timecreated = time();",
          "3086:                 $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3088:                 $DB->insert_record('favourite', $favouriterecord);",
          "3089:             }",
          "3092:             $tabledata = new \\stdClass();",
          "3093:             $tabledata->useridfrom = $message->useridfrom;",
          "3094:             $tabledata->conversationid = $selfconversation->id;",
          "3095:             $tabledata->subject = $message->subject;",
          "3096:             $tabledata->fullmessage = $message->fullmessage;",
          "3097:             $tabledata->fullmessageformat = $message->fullmessageformat ?? FORMAT_MOODLE;",
          "3098:             $tabledata->fullmessagehtml = $message->fullmessagehtml;",
          "3099:             $tabledata->smallmessage = $message->smallmessage;",
          "3100:             $tabledata->timecreated = $message->timecreated;",
          "3102:             $messageid = $DB->insert_record('messages', $tabledata);",
          "3106:             if ($message->timeuserfromdeleted) {",
          "3107:                 $mua = new \\stdClass();",
          "3108:                 $mua->userid = $message->useridfrom;",
          "3109:                 $mua->messageid = $messageid;",
          "3110:                 $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "3111:                 $mua->timecreated = $message->timeuserfromdeleted;",
          "3113:                 $DB->insert_record('message_user_actions', $mua);",
          "3114:             }",
          "3117:             $mua = new \\stdClass();",
          "3118:             $mua->userid = $message->useridto;",
          "3119:             $mua->messageid = $messageid;",
          "3120:             $mua->action = \\core_message\\api::MESSAGE_ACTION_READ;",
          "3121:             $mua->timecreated = $message->timeread;",
          "3123:             $DB->insert_record('message_user_actions', $mua);",
          "3124:         }",
          "3125:         $legacyselfmessagesrs->close();",
          "3128:         $DB->delete_records_select('message_read', $select);",
          "3133:         $sql = \"SELECT u.id",
          "3134:                   FROM {user} u",
          "3135:                   WHERE u.id NOT IN (SELECT mcm.userid",
          "3136:                                      FROM {message_conversation_members} mcm",
          "3137:                                      INNER JOIN mdl_message_conversations mc",
          "3138:                                              ON mc.id = mcm.conversationid AND mc.type = ?",
          "3139:                                     )\";",
          "3140:         $useridsrs = $DB->get_recordset_sql($sql, [\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "3142:         foreach ($useridsrs as $user) {",
          "3143:             $conditions = [",
          "3144:                 'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3145:                 'convhash' => \\core_message\\helper::get_conversation_hash([$user->id])",
          "3146:             ];",
          "3147:             $selfconversation = $DB->get_record('message_conversations', $conditions);",
          "3148:             if (empty($selfconversation)) {",
          "3150:                 $selfconversation = new \\stdClass();",
          "3151:                 $selfconversation->type = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "3152:                 $selfconversation->convhash = \\core_message\\helper::get_conversation_hash([$user->id]);",
          "3153:                 $selfconversation->enabled = 1;",
          "3154:                 $selfconversation->timecreated = time();",
          "3155:                 $selfconversation->timemodified = $selfconversation->timecreated;",
          "3157:                 $selfconversation->id = $DB->insert_record('message_conversations', $selfconversation);",
          "3160:                 $member = new \\stdClass();",
          "3161:                 $member->conversationid = $selfconversation->id;",
          "3162:                 $member->userid = $user->id;",
          "3163:                 $member->timecreated = time();",
          "3165:                 $member->id = $DB->insert_record('message_conversation_members', $member);",
          "3168:                 $favouriterecord = new \\stdClass();",
          "3169:                 $favouriterecord->component = 'core_message';",
          "3170:                 $favouriterecord->itemtype = 'message_conversations';",
          "3171:                 $favouriterecord->itemid = $selfconversation->id;",
          "3172:                 $userctx = \\context_user::instance($user->id);",
          "3173:                 $favouriterecord->contextid = $userctx->id;",
          "3174:                 $favouriterecord->userid = $user->id;",
          "3175:                 $favouriterecord->timecreated = time();",
          "3176:                 $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3178:                 $DB->insert_record('favourite', $favouriterecord);",
          "3179:             }",
          "3180:         }",
          "3181:         $useridsrs->close();",
          "3184:         upgrade_main_savepoint(true, 2019041800.01);",
          "3185:     }",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             return false;",
          "119:         }",
          "130:         }",
          "133:         $eventdata->convid = $conversationid;",
          "134:     }",
          "",
          "[Removed Lines]",
          "121:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "122:                                                                                   $eventdata->userto->id])) {",
          "123:             $conversation = \\core_message\\api::create_conversation(",
          "124:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "125:                 [",
          "126:                     $eventdata->userfrom->id,",
          "127:                     $eventdata->userto->id",
          "128:                 ]",
          "129:             );",
          "132:         $conversationid = $conversationid ? $conversationid : $conversation->id;",
          "",
          "[Added Lines]",
          "121:         if ($eventdata->userfrom->id == $eventdata->userto->id) {",
          "123:             $conversation = \\core_message\\api::get_self_conversation($eventdata->userfrom->id);",
          "124:             if (empty($conversation)) {",
          "125:                 $conversation = \\core_message\\api::create_conversation(",
          "126:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "127:                     [$eventdata->userfrom->id]",
          "128:                 );",
          "129:             }",
          "130:         } else {",
          "131:             if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "132:                                                                                       $eventdata->userto->id])) {",
          "134:                 $conversation = \\core_message\\api::create_conversation(",
          "135:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "136:                     [",
          "137:                         $eventdata->userfrom->id,",
          "138:                         $eventdata->userto->id",
          "139:                     ]",
          "140:                 );",
          "141:             }",
          "144:         $conversationid = !empty($conversationid) ? $conversationid : $conversation->id;",
          "",
          "---------------"
        ],
        "lib/outputrenderers.php||lib/outputrenderers.php": [
          "File: lib/outputrenderers.php -> lib/outputrenderers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4090:                 $imagedata = $this->user_picture($user, array('size' => 100));",
          "4098:                     $userbuttons = array(",
          "4099:                         'messages' => array(",
          "4100:                             'buttontype' => 'message',",
          "",
          "[Removed Lines]",
          "4093:                 if (!empty($CFG->messaging) && $USER->id != $user->id && has_capability('moodle/site:sendmessage', $context)) {",
          "4094:                     $iscontact = \\core_message\\api::is_contact($USER->id, $user->id);",
          "4095:                     $contacttitle = $iscontact ? 'removefromyourcontacts' : 'addtoyourcontacts';",
          "4096:                     $contacturlaction = $iscontact ? 'removecontact' : 'addcontact';",
          "4097:                     $contactimage = $iscontact ? 'removecontact' : 'addcontact';",
          "",
          "[Added Lines]",
          "4093:                 if (!empty($CFG->messaging) && has_capability('moodle/site:sendmessage', $context)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4103:                             'image' => 'message',",
          "4104:                             'linkattributes' => \\core_message\\helper::messageuser_link_params($user->id),",
          "4105:                             'page' => $this->page",
          "4120:                     );",
          "4122:                     $this->page->requires->string_for_js('changesmadereallygoaway', 'moodle');",
          "4123:                 }",
          "4124:             } else {",
          "",
          "[Removed Lines]",
          "4106:                         ),",
          "4107:                         'togglecontact' => array(",
          "4108:                             'buttontype' => 'togglecontact',",
          "4109:                             'title' => get_string($contacttitle, 'message'),",
          "4110:                             'url' => new moodle_url('/message/index.php', array(",
          "4111:                                     'user1' => $USER->id,",
          "4112:                                     'user2' => $user->id,",
          "4113:                                     $contacturlaction => $user->id,",
          "4114:                                     'sesskey' => sesskey())",
          "4115:                             ),",
          "4116:                             'image' => $contactimage,",
          "4117:                             'linkattributes' => \\core_message\\helper::togglecontact_link_params($user, $iscontact),",
          "4118:                             'page' => $this->page",
          "4119:                         ),",
          "",
          "[Added Lines]",
          "4102:                         )",
          "4105:                     if ($USER->id != $user->id) {",
          "4106:                         $iscontact = \\core_message\\api::is_contact($USER->id, $user->id);",
          "4107:                         $contacttitle = $iscontact ? 'removefromyourcontacts' : 'addtoyourcontacts';",
          "4108:                         $contacturlaction = $iscontact ? 'removecontact' : 'addcontact';",
          "4109:                         $contactimage = $iscontact ? 'removecontact' : 'addcontact';",
          "4110:                         $userbuttons['togglecontact'] = array(",
          "4111:                                 'buttontype' => 'togglecontact',",
          "4112:                                 'title' => get_string($contacttitle, 'message'),",
          "4113:                                 'url' => new moodle_url('/message/index.php', array(",
          "4114:                                         'user1' => $USER->id,",
          "4115:                                         'user2' => $user->id,",
          "4116:                                         $contacturlaction => $user->id,",
          "4117:                                         'sesskey' => sesskey())",
          "4118:                                 ),",
          "4119:                                 'image' => $contactimage,",
          "4120:                                 'linkattributes' => \\core_message\\helper::togglecontact_link_params($user, $iscontact),",
          "4121:                                 'page' => $this->page",
          "4122:                             );",
          "4123:                     }",
          "",
          "---------------"
        ],
        "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php": [
          "File: lib/tests/messagelib_test.php -> lib/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:         $sink->clear();",
          "820:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:     public function test_message_send_to_self_conversation() {",
          "835:         global $DB;",
          "836:         $this->preventResetByRollback();",
          "837:         $this->resetAfterTest();",
          "840:         $user1 = $this->getDataGenerator()->create_user(array('maildisplay' => 1));",
          "841:         set_config('allowedemaildomains', 'example.com');",
          "842:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "843:             [$user1->id]);",
          "846:         $message = new \\core\\message\\message();",
          "847:         $message->courseid          = 1;",
          "848:         $message->component         = 'moodle';",
          "849:         $message->name              = 'instantmessage';",
          "850:         $message->userfrom          = $user1;",
          "851:         $message->convid            = $conversation->id;",
          "852:         $message->subject           = 'message subject 1';",
          "853:         $message->fullmessage       = 'message body';",
          "854:         $message->fullmessageformat = FORMAT_MARKDOWN;",
          "855:         $message->fullmessagehtml   = '<p>message body</p>';",
          "856:         $message->smallmessage      = 'small message';",
          "857:         $message->notification      = '0';",
          "860:         $content = array('*' => array('header' => ' test ', 'footer' => ' test '));",
          "861:         $message->set_additional_content('email', $content);",
          "864:         $DB->set_field_select('message_processors', 'enabled', 0, \"name <> 'email'\");",
          "865:         set_user_preference('message_provider_moodle_instantmessage_loggedoff', 'email', $user1);",
          "868:         $sink = $this->redirectEmails();",
          "869:         $messageid = message_send($message);",
          "870:         $emails = $sink->get_messages();",
          "871:         $this->assertCount(0, $emails);",
          "872:         $sink->clear();",
          "873:     }",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation.js||message/amd/src/message_drawer_view_conversation.js": [
          "File: message/amd/src/message_drawer_view_conversation.js -> message/amd/src/message_drawer_view_conversation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     var getOtherUserId = function() {",
          "124:             return null;",
          "125:         }",
          "127:         var loggedInUserId = viewState.loggedInUserId;",
          "128:         var otherUserIds = Object.keys(viewState.members).filter(function(userId) {",
          "129:             return loggedInUserId != userId;",
          "130:         });",
          "",
          "[Removed Lines]",
          "123:         if (!viewState || viewState.type != CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "123:         if (!viewState || viewState.type == CONVERSATION_TYPES.PUBLIC) {",
          "128:         if (viewState.type == CONVERSATION_TYPES.SELF) {",
          "130:             return loggedInUserId;",
          "131:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             if (!carry) {",
          "145:                 var state = stateCache[id].state;",
          "148:                     if (userId in state.members) {",
          "150:                         carry = state.id;",
          "",
          "[Removed Lines]",
          "147:                 if (state.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "152:                 if (state.type != CONVERSATION_TYPES.PUBLIC) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:     var loadEmptyPrivateConversation = function(loggedInUserProfile, otherUserId) {",
          "271:         var loggedInUserId = loggedInUserProfile.id;",
          "272:         var newState = StateManager.setLoadingMembers(viewState, true);",
          "273:         newState = StateManager.setLoadingMessages(newState, true);",
          "274:         return render(newState)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:         var conversationType = loggedInUserId == otherUserId ? CONVERSATION_TYPES.SELF : CONVERSATION_TYPES.PRIVATE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "283:                 }",
          "284:             })",
          "285:             .then(function(profile) {",
          "287:                 newState = StateManager.setLoadingMembers(newState, false);",
          "288:                 newState = StateManager.setLoadingMessages(newState, false);",
          "289:                 newState = StateManager.setName(newState, profile.fullname);",
          "291:                 newState = StateManager.setImageUrl(newState, profile.profileimageurl);",
          "293:                 return render(newState)",
          "294:                     .then(function() {",
          "295:                         return profile;",
          "",
          "[Removed Lines]",
          "286:                 var newState = StateManager.addMembers(viewState, [profile, loggedInUserProfile]);",
          "290:                 newState = StateManager.setType(newState, 1);",
          "292:                 newState = StateManager.setTotalMemberCount(newState, 2);",
          "",
          "[Added Lines]",
          "296:                 var members = conversationType == CONVERSATION_TYPES.SELF ? [profile] : [profile, loggedInUserProfile];",
          "297:                 var newState = StateManager.addMembers(viewState, members);",
          "301:                 newState = StateManager.setType(newState, conversationType);",
          "303:                 newState = StateManager.setTotalMemberCount(newState, members.length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "312:     var updateStateFromConversation = function(conversation, loggedInUserId) {",
          "317:         var name = conversation.name;",
          "318:         var imageUrl = conversation.imageurl;",
          "321:             name = name || otherUser ? otherUser.fullname : '';",
          "322:             imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';",
          "323:         }",
          "",
          "[Removed Lines]",
          "313:         var otherUsers = conversation.members.filter(function(member) {",
          "314:             return member.id != loggedInUserId;",
          "315:         });",
          "316:         var otherUser = otherUsers.length ? otherUsers[0] : null;",
          "320:         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "324:         var otherUser = null;",
          "325:         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "327:             var otherUsers = conversation.members.filter(function(member) {",
          "328:                 return member.id != loggedInUserId;",
          "329:             });",
          "330:             otherUser = otherUsers.length ? otherUsers[0] : null;",
          "331:         } else if (conversation.type == CONVERSATION_TYPES.SELF) {",
          "333:             otherUser = conversation.members[0];",
          "334:         }",
          "339:         if (conversation.type != CONVERSATION_TYPES.PUBLIC) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1019:         var newConversationId = null;",
          "1020:         return render(newState)",
          "1021:             .then(function() {",
          "1025:                     var otherUserId = getOtherUserId();",
          "",
          "[Removed Lines]",
          "1022:                 if (!conversationId && viewState.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "1042:                 if (!conversationId && (viewState.type != CONVERSATION_TYPES.PUBLIC)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1484:         return resetState(body, null, loggedInUserProfile)",
          "1485:             .then(function() {",
          "1487:                         loggedInUserProfile.id,",
          "1488:                         otherUserId,",
          "1489:                         true,",
          "",
          "[Removed Lines]",
          "1486:                 return Repository.getConversationBetweenUsers(",
          "",
          "[Added Lines]",
          "1506:                 if (loggedInUserProfile.id != otherUserId) {",
          "1508:                     return Repository.getConversationBetweenUsers(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1493:                         LOAD_MESSAGE_LIMIT,",
          "1494:                         0,",
          "1495:                         NEWEST_FIRST",
          "1505:             });",
          "1506:     };",
          "",
          "[Removed Lines]",
          "1496:                     )",
          "1497:                     .then(function(conversation) {",
          "1499:                         return resetByConversation(body, conversation, loggedInUserProfile);",
          "1500:                     })",
          "1501:                     .catch(function() {",
          "1503:                         return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);",
          "1504:                     });",
          "",
          "[Added Lines]",
          "1518:                     );",
          "1519:                 } else {",
          "1521:                     return Repository.getSelfConversation(",
          "1522:                         loggedInUserProfile.id,",
          "1523:                         LOAD_MESSAGE_LIMIT,",
          "1524:                         0,",
          "1525:                         NEWEST_FIRST",
          "1526:                     );",
          "1527:                 }",
          "1528:             })",
          "1529:             .then(function(conversation) {",
          "1531:                 return resetByConversation(body, conversation, loggedInUserProfile);",
          "1532:             })",
          "1533:             .catch(function() {",
          "1535:                 return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_constants.js||message/amd/src/message_drawer_view_conversation_constants.js": [
          "File: message/amd/src/message_drawer_view_conversation_constants.js -> message/amd/src/message_drawer_view_conversation_constants.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         MORE_MESSAGES_LOADING_ICON_CONTAINER: '[data-region=\"more-messages-loading-icon-container\"]',",
          "79:         MUTED_ICON_CONTAINER: '[data-region=\"muted-icon-container\"]',",
          "80:         PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]',",
          "81:         SEND_MESSAGE_BUTTON: '[data-action=\"send-message\"]',",
          "82:         SEND_MESSAGE_ICON_CONTAINER: '[data-region=\"send-icon-container\"]',",
          "83:         TEXT: '[data-region=\"text\"]',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         SELF_CONVERSATION_MESSAGE_CONTAINER: '[data-region=\"self-conversation-message-container\"]',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         HEADER_PRIVATE: 'core_message/message_drawer_view_conversation_header_content_type_private',",
          "89:         HEADER_PRIVATE_NO_CONTROLS: 'core_message/message_drawer_view_conversation_header_content_type_private_no_controls',",
          "90:         HEADER_PUBLIC: 'core_message/message_drawer_view_conversation_header_content_type_public',",
          "91:         DAY: 'core_message/message_drawer_view_conversation_body_day',",
          "92:         MESSAGE: 'core_message/message_drawer_view_conversation_body_message',",
          "93:         MESSAGES: 'core_message/message_drawer_view_conversation_body_messages'",
          "94:     };",
          "96:     var CONVERSATION_TYPES = {",
          "97:         PRIVATE: 1,",
          "99:     };",
          "101:     return {",
          "",
          "[Removed Lines]",
          "98:         PUBLIC: 2",
          "",
          "[Added Lines]",
          "92:         HEADER_SELF: 'core_message/message_drawer_view_conversation_header_content_type_self',",
          "101:         PUBLIC: 2,",
          "102:         SELF: 3",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_patcher.js||message/amd/src/message_drawer_view_conversation_patcher.js": [
          "File: message/amd/src/message_drawer_view_conversation_patcher.js -> message/amd/src/message_drawer_view_conversation_patcher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:         return null;",
          "314:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     var buildHeaderPatchTypeSelf = function(state, newState) {",
          "325:         var shouldRenderHeader = (state.name === null && newState.name !== null);",
          "327:         if (shouldRenderHeader) {",
          "328:             return {",
          "329:                 type: Constants.CONVERSATION_TYPES.SELF,",
          "331:                 showControls: false,",
          "332:                 context: {",
          "333:                     id: newState.id,",
          "334:                     name: newState.name,",
          "335:                     subname: newState.subname,",
          "336:                     imageurl: newState.imageUrl,",
          "337:                     isfavourite: newState.isFavourite,",
          "339:                     showfavourite: newState.id !== null,",
          "340:                     showonlinestatus: true,",
          "341:                 }",
          "342:             };",
          "343:         }",
          "345:         return null;",
          "346:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:     var buildConfirmDeleteSelectedMessages = function(state, newState) {",
          "537:         if (newState.pendingDeleteMessageIds.length) {",
          "539:         } else if (state.pendingDeleteMessageIds.length) {",
          "540:             return false;",
          "541:         }",
          "",
          "[Removed Lines]",
          "538:             return true;",
          "",
          "[Added Lines]",
          "569:             return newState.type;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:     var buildConfirmDeleteConversation = function(state, newState) {",
          "554:         if (!state.pendingDeleteConversation && newState.pendingDeleteConversation) {",
          "556:         } else if (state.pendingDeleteConversation && !newState.pendingDeleteConversation) {",
          "557:             return false;",
          "558:         }",
          "",
          "[Removed Lines]",
          "555:             return true;",
          "",
          "[Added Lines]",
          "586:             return newState.type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "948:         var oldOtherUser = getOtherUserFromState(state);",
          "949:         var newOtherUser = getOtherUserFromState(newState);",
          "951:         if (!oldOtherUser && !newOtherUser) {",
          "952:             return null;",
          "953:         } else if (oldOtherUser && !newOtherUser) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:         if (newState.type == Constants.CONVERSATION_TYPES.SELF) {",
          "984:             return null;",
          "985:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1104:         return null;",
          "1105:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     var buildSelfConversationMessage = function(state, newState) {",
          "1153:         if (state.type != newState.type) {",
          "1154:             return (newState.type == Constants.CONVERSATION_TYPES.SELF);",
          "1155:         }",
          "1157:         return null;",
          "1158:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1190:             header: buildHeaderPatchTypePublic,",
          "1191:             footer: buildFooterPatchTypePublic,",
          "1192:         };",
          "1194:         var patchConfig = $.extend({}, config.all);",
          "1195:         if (newState.type && newState.type in config) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1247:         config[Constants.CONVERSATION_TYPES.SELF] = {",
          "1248:             header: buildHeaderPatchTypeSelf,",
          "1249:             footer: buildFooterPatchTypePublic,",
          "1250:             confirmDeleteConversation: buildConfirmDeleteConversation,",
          "1251:             selfConversationMessage: buildSelfConversationMessage",
          "1252:         };",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_renderer.js||message/amd/src/message_drawer_view_conversation_renderer.js": [
          "File: message/amd/src/message_drawer_view_conversation_renderer.js -> message/amd/src/message_drawer_view_conversation_renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         getMessagesContainer(body).addClass('hidden');",
          "76:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     var getSelfConversationMessageContainer = function(body) {",
          "85:         return body.find(SELECTORS.SELF_CONVERSATION_MESSAGE_CONTAINER);",
          "86:     };",
          "94:     var hideSelfConversationMessageContainer = function(body) {",
          "95:         return getSelfConversationMessageContainer(body).addClass('hidden');",
          "96:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:         data.context.showrouteback = (header.attr('data-from-panel') === \"false\");",
          "784:         if (data.type == CONVERSATION_TYPES.PRIVATE) {",
          "785:             template = data.showControls ? TEMPLATES.HEADER_PRIVATE : TEMPLATES.HEADER_PRIVATE_NO_CONTROLS;",
          "786:         }",
          "788:         return Templates.render(template, data.context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:         } else if (data.type == CONVERSATION_TYPES.SELF) {",
          "807:             template = TEMPLATES.HEADER_SELF;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:                 .then(function(string) {",
          "1131:                     return showConfirmDialogue(",
          "1132:                         header,",
          "",
          "[Removed Lines]",
          "1127:     var renderConfirmDeleteSelectedMessages = function(header, body, footer, show) {",
          "1128:         if (show) {",
          "1129:             return Str.get_string('deleteselectedmessagesconfirm', 'core_message')",
          "",
          "[Added Lines]",
          "1149:     var renderConfirmDeleteSelectedMessages = function(header, body, footer, type) {",
          "1150:         var showmessage = null;",
          "1151:         if (type == CONVERSATION_TYPES.SELF) {",
          "1153:             showmessage = 'deleteselectedmessagesconfirmselfconversation';",
          "1154:         } else if (type) {",
          "1156:             showmessage = 'deleteselectedmessagesconfirm';",
          "1157:         }",
          "1159:         if (showmessage) {",
          "1160:             return Str.get_string(showmessage, 'core_message')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1159:                 .then(function(string) {",
          "1160:                     return showConfirmDialogue(",
          "1161:                         header,",
          "",
          "[Removed Lines]",
          "1156:     var renderConfirmDeleteConversation = function(header, body, footer, show) {",
          "1157:         if (show) {",
          "1158:             return Str.get_string('deleteallconfirm', 'core_message')",
          "",
          "[Added Lines]",
          "1187:     var renderConfirmDeleteConversation = function(header, body, footer, type) {",
          "1188:         var showmessage = null;",
          "1189:         if (type == CONVERSATION_TYPES.SELF) {",
          "1191:             showmessage = 'deleteallselfconfirm';",
          "1192:         } else if (type) {",
          "1194:             showmessage = 'deleteallconfirm';",
          "1195:         }",
          "1197:         if (showmessage) {",
          "1198:             return Str.get_string(showmessage, 'core_message')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1437:         }",
          "1438:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:     var renderSelfConversationMessage = function(header, body, footer, displayMessage) {",
          "1490:         var container = getSelfConversationMessageContainer(body);",
          "1491:         if (displayMessage) {",
          "1492:             container.removeClass('hidden');",
          "1493:         } else {",
          "1494:             container.addClass('hidden');",
          "1495:         }",
          "1496:         return true;",
          "1497:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1472:     var renderReset = function(header, body, footer) {",
          "1473:         hideConfirmDialogue(header, body, footer);",
          "1474:         hideContactRequestSentContainer(body);",
          "1475:         hideAllHeaderElements(header);",
          "1476:         showHeaderPlaceholder(header);",
          "1477:         hideAllFooterElements(footer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1534:         hideSelfConversationMessageContainer(body);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1499:                 confirmDeleteConversation: renderConfirmDeleteConversation,",
          "1500:                 confirmContactRequest: renderConfirmContactRequest,",
          "1501:                 requireAddContact: renderRequireAddContact,",
          "1502:                 contactRequestSent: renderContactRequestSent",
          "1503:             },",
          "1504:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:                 selfConversationMessage: renderSelfConversationMessage,",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_overview.js||message/amd/src/message_drawer_view_overview.js": [
          "File: message/amd/src/message_drawer_view_overview.js -> message/amd/src/message_drawer_view_overview.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     'core_message/message_drawer_routes',",
          "31:     'core_message/message_drawer_events',",
          "32:     'core_message/message_drawer_view_overview_section',",
          "34: ],",
          "35: function(",
          "36:     $,",
          "",
          "[Removed Lines]",
          "33:     'core_message/message_repository'",
          "",
          "[Added Lines]",
          "33:     'core_message/message_repository',",
          "34:     'core_message/message_drawer_view_conversation_constants'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     Routes,",
          "42:     MessageDrawerEvents,",
          "43:     Section,",
          "45: ) {",
          "47:     var SELECTORS = {",
          "",
          "[Removed Lines]",
          "44:     MessageRepository",
          "",
          "[Added Lines]",
          "45:     MessageRepository,",
          "46:     Constants",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:         SECTION_TOGGLE_BUTTON: '[data-toggle]'",
          "54:     };",
          "59:         FAVOURITE: null",
          "60:     };",
          "",
          "[Removed Lines]",
          "56:     var CONVERSATION_TYPES = {",
          "57:         PRIVATE: 1,",
          "58:         PUBLIC: 2,",
          "",
          "[Added Lines]",
          "60:     var OVERVIEW_SECTION_TYPES = {",
          "61:         PRIVATE: [Constants.CONVERSATION_TYPES.PRIVATE, Constants.CONVERSATION_TYPES.SELF],",
          "62:         PUBLIC: [Constants.CONVERSATION_TYPES.PUBLIC],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     };",
          "",
          "[Removed Lines]",
          "91:     var filterCountsByType = function(counts, type) {",
          "92:         return type === CONVERSATION_TYPES.FAVOURITE ? counts.favourites : counts.types[type];",
          "",
          "[Added Lines]",
          "96:     var filterCountsByTypes = function(counts, types, includeFavourites) {",
          "97:         var total = 0;",
          "99:         if (types && types.length) {",
          "100:             total = types.reduce(function(carry, type) {",
          "101:                 return carry + counts.types[type];",
          "102:             }, total);",
          "103:         }",
          "105:         if (includeFavourites) {",
          "106:             total += counts.favourites;",
          "107:         }",
          "109:         return total;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228:         var sections = [",
          "235:         ];",
          "237:         sections.forEach(function(args) {",
          "238:             var sectionRoot = args[0];",
          "240:             var includeFavourites = args[2];",
          "241:             var totalCountPromise = allCounts.then(function(result) {",
          "243:             });",
          "244:             var unreadCountPromise = allCounts.then(function(result) {",
          "246:             });",
          "249:                 totalCountPromise, unreadCountPromise, fromPanel);",
          "250:         });",
          "252:         return allCounts.then(function(result) {",
          "253:                 var sectionParams = sections.map(function(section) {",
          "254:                     var sectionRoot = section[0];",
          "259:                     return [sectionRoot, totalCount, unreadCount];",
          "260:                 });",
          "",
          "[Removed Lines]",
          "230:             [body.find(SELECTORS.FAVOURITES), CONVERSATION_TYPES.FAVOURITE, true],",
          "232:             [body.find(SELECTORS.GROUP_MESSAGES), CONVERSATION_TYPES.PUBLIC, false],",
          "234:             [body.find(SELECTORS.MESSAGES), CONVERSATION_TYPES.PRIVATE, false]",
          "239:             var sectionType = args[1];",
          "242:                 return filterCountsByType(result.total, sectionType);",
          "245:                 return filterCountsByType(result.unread, sectionType);",
          "248:             Section.show(namespace, null, sectionRoot, null, sectionType, includeFavourites,",
          "255:                     var sectionType = section[1];",
          "256:                     var totalCount = filterCountsByType(result.total, sectionType);",
          "257:                     var unreadCount = filterCountsByType(result.unread, sectionType);",
          "",
          "[Added Lines]",
          "247:             [body.find(SELECTORS.FAVOURITES), OVERVIEW_SECTION_TYPES.FAVOURITE, true],",
          "249:             [body.find(SELECTORS.GROUP_MESSAGES), OVERVIEW_SECTION_TYPES.PUBLIC, false],",
          "251:             [body.find(SELECTORS.MESSAGES), OVERVIEW_SECTION_TYPES.PRIVATE, false]",
          "256:             var sectionTypes = args[1];",
          "259:                 return filterCountsByTypes(result.total, sectionTypes, includeFavourites);",
          "262:                 return filterCountsByTypes(result.unread, sectionTypes, includeFavourites);",
          "265:             Section.show(namespace, null, sectionRoot, null, sectionTypes, includeFavourites,",
          "272:                     var sectionTypes = section[1];",
          "273:                     var includeFavourites = section[2];",
          "274:                     var totalCount = filterCountsByTypes(result.total, sectionTypes, includeFavourites);",
          "275:                     var unreadCount = filterCountsByTypes(result.unread, sectionTypes, includeFavourites);",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_overview_section.js||message/amd/src/message_drawer_view_overview_section.js": [
          "File: message/amd/src/message_drawer_view_overview_section.js -> message/amd/src/message_drawer_view_overview_section.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:                 lastmessage: lastMessage ? $(lastMessage.text).text() || lastMessage.text : null",
          "184:             };",
          "188:                     if (!carry && member.id != userId) {",
          "189:                         carry = member;",
          "190:                     }",
          "191:                     return carry;",
          "192:                 }, null);",
          "194:                 formattedConversation.userid = otherUser.id;",
          "195:                 formattedConversation.showonlinestatus = otherUser.showonlinestatus;",
          "196:                 formattedConversation.isonline = otherUser.isonline;",
          "",
          "[Removed Lines]",
          "186:             if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {",
          "187:                 var otherUser = conversation.members.reduce(function(carry, member) {",
          "",
          "[Added Lines]",
          "186:             var otherUser = null;",
          "187:             if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF) {",
          "189:                 otherUser = conversation.members[0];",
          "190:             } else if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {",
          "192:                 otherUser = conversation.members.reduce(function(carry, member) {",
          "198:             }",
          "200:             if (otherUser !== null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:         return function(root, userId) {",
          "236:             return MessageRepository.getConversations(",
          "237:                     userId,",
          "238:                     type,",
          "239:                     LOAD_LIMIT + 1,",
          "240:                     offset,",
          "242:                 )",
          "243:                 .then(function(response) {",
          "244:                     var conversations = response.conversations;",
          "",
          "[Removed Lines]",
          "234:     var getLoadCallback = function(type, includeFavourites, offset) {",
          "241:                     includeFavourites",
          "",
          "[Added Lines]",
          "241:     var getLoadCallback = function(types, includeFavourites, offset) {",
          "248:         var type = null;",
          "250:         var includeSelfConversations = true;",
          "251:         if (types && types.length) {",
          "253:             var nonSelfConversationTypes = types.filter(function(candidate) {",
          "254:                 return candidate != MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF;",
          "255:             });",
          "258:             includeSelfConversations = types.length != nonSelfConversationTypes.length;",
          "261:             type = nonSelfConversationTypes[0];",
          "262:         }",
          "270:                     includeFavourites,",
          "271:                     includeSelfConversations",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:         var listRoot = LazyLoadList.getRoot(root);",
          "",
          "[Removed Lines]",
          "530:     var registerEventListeners = function(namespace, root, loadCallback, type, includeFavourites, fromPanel) {",
          "",
          "[Added Lines]",
          "560:     var registerEventListeners = function(namespace, root, loadCallback, types, includeFavourites, fromPanel) {",
          "562:         var conversationBelongsToThisSection = function(conversation) {",
          "564:             var conversationType = parseInt(conversation.type, 10);",
          "565:             if (",
          "567:                 (types && types.indexOf(conversationType) < 0) ||",
          "569:                 (includeFavourites && !conversation.isFavourite) ||",
          "571:                 (!includeFavourites && conversation.isFavourite)",
          "572:             ) {",
          "573:                 return false;",
          "574:             }",
          "576:             return true;",
          "577:         };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "576:         });",
          "578:         PubSub.subscribe(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, function(conversation) {",
          "584:                 return;",
          "585:             }",
          "",
          "[Removed Lines]",
          "579:             if (",
          "580:                 (type && conversation.type != type) ||",
          "581:                 (includeFavourites && !conversation.isFavourite) ||",
          "582:                 (!includeFavourites && conversation.isFavourite)",
          "583:             ) {",
          "",
          "[Added Lines]",
          "625:             if (!conversationBelongsToThisSection(conversation)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "610:         PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_FAVOURITE, function(conversation) {",
          "611:             var conversationElement = null;",
          "613:                 conversationElement = getConversationElement(root, conversation.id);",
          "614:                 if (!conversationElement.length) {",
          "615:                     createNewConversation(root, conversation);",
          "616:                 }",
          "618:                 conversationElement = getConversationElement(root, conversation.id);",
          "619:                 if (conversationElement.length) {",
          "620:                     deleteConversation(root, conversationElement);",
          "",
          "[Removed Lines]",
          "612:             if (includeFavourites && (!type || type == conversation.type)) {",
          "617:             } else if (type == conversation.type) {",
          "",
          "[Added Lines]",
          "654:             if (conversationBelongsToThisSection(conversation)) {",
          "659:             } else {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "625:         PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE, function(conversation) {",
          "626:             var conversationElement = null;",
          "633:                 conversationElement = getConversationElement(root, conversation.id);",
          "634:                 if (!conversationElement.length) {",
          "635:                     createNewConversation(root, conversation);",
          "636:                 }",
          "637:             }",
          "638:         });",
          "",
          "[Removed Lines]",
          "627:             if (includeFavourites) {",
          "628:                 conversationElement = getConversationElement(root, conversation.id);",
          "629:                 if (conversationElement.length) {",
          "630:                     deleteConversation(root, conversationElement);",
          "631:                 }",
          "632:             } else if (type == conversation.type) {",
          "",
          "[Added Lines]",
          "669:             if (conversationBelongsToThisSection(conversation)) {",
          "674:             } else {",
          "675:                 conversationElement = getConversationElement(root, conversation.id);",
          "676:                 if (conversationElement.length) {",
          "677:                     deleteConversation(root, conversationElement);",
          "678:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "665:         fromPanel) {",
          "666:         var root = $(body);",
          "668:         if (!root.attr('data-init')) {",
          "672:             if (isVisible(root)) {",
          "673:                 setExpanded(root);",
          "",
          "[Removed Lines]",
          "664:     var show = function(namespace, header, body, footer, type, includeFavourites, totalCountPromise, unreadCountPromise,",
          "669:             var loadCallback = getLoadCallback(type, includeFavourites, 0);",
          "670:             registerEventListeners(namespace, root, loadCallback, type, includeFavourites, fromPanel);",
          "",
          "[Added Lines]",
          "706:     var show = function(namespace, header, body, footer, types, includeFavourites, totalCountPromise, unreadCountPromise,",
          "711:             var loadCallback = getLoadCallback(types, includeFavourites, 0);",
          "712:             registerEventListeners(namespace, root, loadCallback, types, includeFavourites, fromPanel);",
          "",
          "---------------"
        ],
        "message/amd/src/message_repository.js||message/amd/src/message_repository.js": [
          "File: message/amd/src/message_repository.js -> message/amd/src/message_repository.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "25: define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {",
          "27:     var CONVERSATION_TYPES = {",
          "28:         PRIVATE: 1,",
          "29:         PUBLIC: 2",
          "30:     };",
          "",
          "[Added Lines]",
          "25: define(",
          "26: [",
          "27:     'jquery',",
          "28:     'core/ajax',",
          "29:     'core/notification',",
          "30:     'core_message/message_drawer_view_conversation_constants'",
          "31: ], function(",
          "32:     $,",
          "33:     Ajax,",
          "34:     Notification,",
          "35:     Constants) {",
          "37:     var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:         return Ajax.call([request])[0];",
          "772:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:     var getSelfConversation = function(",
          "791:         loggedInUserId,",
          "792:         messageLimit,",
          "793:         messageOffset,",
          "794:         newestMessagesFirst",
          "795:     ) {",
          "796:         var args = {",
          "797:             userid: loggedInUserId",
          "798:         };",
          "800:         if (typeof messageLimit != 'undefined' && messageLimit !== null) {",
          "801:             args.messagelimit = messageLimit;",
          "802:         }",
          "804:         if (typeof messageOffset != 'undefined' && messageOffset !== null) {",
          "805:             args.messageoffset = messageOffset;",
          "806:         }",
          "808:         if (typeof newestMessagesFirst != 'undefined' && newestMessagesFirst !== null) {",
          "809:             args.newestmessagesfirst = newestMessagesFirst;",
          "810:         }",
          "812:         var request = {",
          "813:             methodname: 'core_message_get_self_conversation',",
          "814:             args: args",
          "815:         };",
          "817:         return Ajax.call([request])[0];",
          "818:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:         type,",
          "787:         limit,",
          "788:         offset,",
          "790:     ) {",
          "791:         var args = {",
          "792:             userid: userId,",
          "",
          "[Removed Lines]",
          "789:         favourites",
          "",
          "[Added Lines]",
          "835:         favourites,",
          "836:         mergeself",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:             args.favourites = favourites;",
          "806:         }",
          "808:         var request = {",
          "809:             methodname: 'core_message_get_conversations',",
          "810:             args: args",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:         if (typeof mergeself != 'undefined' && mergeself !== null) {",
          "856:             args.mergeself = mergeself;",
          "857:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "814:             .then(function(result) {",
          "815:                 if (result.conversations.length) {",
          "816:                     result.conversations = result.conversations.map(function(conversation) {",
          "818:                             var otherUser = conversation.members.length ? conversation.members[0] : null;",
          "820:                             if (otherUser) {",
          "",
          "[Removed Lines]",
          "817:                         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "868:                         if (conversation.type == CONVERSATION_TYPES.PRIVATE || conversation.type == CONVERSATION_TYPES.SELF) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1093:         declineContactRequest: declineContactRequest,",
          "1094:         getConversation: getConversation,",
          "1095:         getConversationBetweenUsers: getConversationBetweenUsers,",
          "1096:         getConversations: getConversations,",
          "1097:         getConversationMembers: getConversationMembers,",
          "1098:         setFavouriteConversations: setFavouriteConversations,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1147:         getSelfConversation: getSelfConversation,",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     const MESSAGE_CONVERSATION_TYPE_GROUP = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     const MESSAGE_CONVERSATION_TYPE_SELF = 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         $ufields = \\user_picture::fields('u', array('lastaccess'), 'userfrom_id', 'userfrom_');",
          "105:         $ufields2 = \\user_picture::fields('u2', array('lastaccess'), 'userto_id', 'userto_');",
          "110:                   FROM {messages} m",
          "111:             INNER JOIN {user} u",
          "112:                     ON u.id = m.useridfrom",
          "",
          "[Removed Lines]",
          "107:         $sql = \"SELECT m.id, m.useridfrom, mcm.userid as useridto, m.subject, m.fullmessage, m.fullmessagehtml, m.fullmessageformat,",
          "108:                        m.smallmessage, m.conversationid, m.timecreated, 0 as isread, $ufields, mub.id as userfrom_blocked,",
          "109:                        $ufields2, mub2.id as userto_blocked",
          "",
          "[Added Lines]",
          "112:         $uniqueidsql = $DB->sql_concat('m.id', \"'_'\", 'm.useridfrom', \"'_'\", 'mcm.userid');",
          "114:         $sql = \"SELECT $uniqueidsql AS uniqueid, m.id, m.useridfrom, mcm.userid as useridto, m.subject, m.fullmessage,",
          "115:                        m.fullmessagehtml, m.fullmessageformat, m.smallmessage, m.conversationid, m.timecreated, 0 as isread,",
          "116:                        $ufields, mub.id as userfrom_blocked, $ufields2, mub2.id as userto_blocked",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:              LEFT JOIN {message_user_actions} mua",
          "124:                     ON (mua.messageid = m.id AND mua.userid = ? AND mua.action = ?)",
          "125:                  WHERE (m.useridfrom = ? OR mcm.userid = ?)",
          "127:                    AND u.deleted = 0",
          "128:                    AND u2.deleted = 0",
          "129:                    AND mua.id is NULL",
          "130:                    AND \" . $DB->sql_like('smallmessage', '?', false) . \"",
          "131:               ORDER BY timecreated DESC\";",
          "136:         $conversations = array();",
          "",
          "[Removed Lines]",
          "126:                    AND m.useridfrom != mcm.userid",
          "133:         $params = array($userid, $userid, $userid, self::MESSAGE_ACTION_DELETED, $userid, $userid, '%' . $search . '%');",
          "",
          "[Added Lines]",
          "133:                    AND (m.useridfrom != mcm.userid OR mc.type = ?)",
          "140:         $params = array($userid, $userid, $userid, self::MESSAGE_ACTION_DELETED, $userid, $userid,",
          "141:             self::MESSAGE_CONVERSATION_TYPE_SELF, '%' . $search . '%');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:                 $message->blocked = $message->$blockedcol ? 1 : 0;",
          "148:                 $message->messageid = $message->id;",
          "150:             }",
          "151:         }",
          "153:         return $conversations;",
          "",
          "[Removed Lines]",
          "149:                 $conversations[] = helper::create_contact($message, $prefix);",
          "",
          "[Added Lines]",
          "158:                 if (!array_key_exists($message->messageid, $conversations)) {",
          "159:                     $conversations[$message->messageid] = helper::create_contact($message, $prefix);",
          "160:                 }",
          "163:             $conversations = array_values($conversations);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "309:         $fullname = $DB->sql_fullname();",
          "313:         list($exclude, $excludeparams) = $DB->get_in_or_equal($excludeusers, SQL_PARAMS_NAMED, 'param', false);",
          "315:         $params = array('search' => '%' . $DB->sql_like_escape($search) . '%', 'userid1' => $userid, 'userid2' => $userid);",
          "",
          "[Removed Lines]",
          "312:         $excludeusers = array($userid, $CFG->siteguest);",
          "",
          "[Added Lines]",
          "325:         $excludeusers = array($CFG->siteguest);",
          "326:         if (!$selfconversation = self::get_self_conversation($userid)) {",
          "328:             $excludeusers[] = $userid;",
          "329:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420:         if (!empty($foundusers)) {",
          "421:             $noncontacts = helper::get_member_info($userid, array_keys($foundusers));",
          "422:             foreach ($noncontacts as $memberuserid => $memberinfo) {",
          "424:             }",
          "425:         }",
          "",
          "[Removed Lines]",
          "423:                 $noncontacts[$memberuserid]->conversations = self::get_conversations_between_users($userid, $memberuserid, 0, 1000);",
          "",
          "[Added Lines]",
          "440:                 if ($memberuserid !== $userid) {",
          "441:                     $noncontacts[$memberuserid]->conversations = self::get_conversations_between_users($userid, $memberuserid, 0,",
          "442:                         1000);",
          "443:                 } else {",
          "444:                     $noncontacts[$memberuserid]->conversations[$selfconversation->id] = $selfconversation;",
          "445:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "513:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 20, int $type = null,",
          "515:         global $DB;",
          "517:         if (!is_null($type) && !in_array($type, [self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "519:             throw new \\moodle_exception(\"Invalid value ($type) for type param, please see api constants.\");",
          "520:         }",
          "",
          "[Removed Lines]",
          "514:             bool $favourites = null) {",
          "518:                 self::MESSAGE_CONVERSATION_TYPE_GROUP])) {",
          "",
          "[Added Lines]",
          "538:             bool $favourites = null, bool $mergeself = false) {",
          "542:                 self::MESSAGE_CONVERSATION_TYPE_GROUP, self::MESSAGE_CONVERSATION_TYPE_SELF])) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "546:         }",
          "551:         $sql = \"SELECT m.id as messageid, mc.id as id, mc.name as conversationname, mc.type as conversationtype, m.useridfrom,",
          "552:                        m.smallmessage, m.fullmessage, m.fullmessageformat, m.fullmessagetrust, m.fullmessagehtml, m.timecreated,",
          "",
          "[Removed Lines]",
          "549:         $typesql = !is_null($type) ? \" AND mc.type = :convtype \" : \"\";",
          "",
          "[Added Lines]",
          "573:         $typesql = \"\";",
          "574:         $typeparams = [];",
          "575:         if (!is_null($type)) {",
          "576:             if ($mergeself && $type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "578:                 $typesql = \" AND (mc.type = :convtype1 OR mc.type = :convtype2) \";",
          "579:                 $typeparams = ['convtype1' => $type, 'convtype2' => self::MESSAGE_CONVERSATION_TYPE_SELF];",
          "580:             } else {",
          "581:                 $typesql = \" AND mc.type = :convtype \";",
          "582:                 $typeparams = ['convtype' => $type];",
          "583:             }",
          "584:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "580:                   AND mc.enabled = 1 $typesql $favouritesql",
          "581:               ORDER BY (CASE WHEN m.timecreated IS NULL THEN 0 ELSE 1 END) DESC, m.timecreated DESC, id DESC\";",
          "586:         $conversationset = $DB->get_recordset_sql($sql, $params, $limitfrom, $limitnum);",
          "588:         $conversations = [];",
          "590:         $members = [];",
          "591:         $individualmembers = [];",
          "592:         $groupmembers = [];",
          "593:         foreach ($conversationset as $conversation) {",
          "594:             $conversations[$conversation->id] = $conversation;",
          "595:             $members[$conversation->id] = [];",
          "",
          "[Removed Lines]",
          "583:         $params = array_merge($favouriteparams, ['userid' => $userid, 'action' => self::MESSAGE_ACTION_DELETED,",
          "584:             'userid2' => $userid, 'userid3' => $userid, 'userid4' => $userid, 'convaction' => self::CONVERSATION_ACTION_MUTED,",
          "585:             'convtype' => $type]);",
          "589:         $selfconversations = []; // Used to track legacy conversations with one's self (both conv members the same user).",
          "",
          "[Added Lines]",
          "618:         $params = array_merge($favouriteparams, $typeparams, ['userid' => $userid, 'action' => self::MESSAGE_ACTION_DELETED,",
          "619:             'userid2' => $userid, 'userid3' => $userid, 'userid4' => $userid, 'convaction' => self::CONVERSATION_ACTION_MUTED]);",
          "623:         $selfconversations = []; // Used to track conversations with one's self.",
          "627:         $selfmembers = [];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "640:                     $members[$conversation->id][$conversation->useridfrom] = $conversation->useridfrom;",
          "641:                     $groupmembers[$conversation->useridfrom] = $conversation->useridfrom;",
          "642:                 }",
          "643:             }",
          "644:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:             } else if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "678:                 $selfconversations[$conversation->id] = $conversation->id;",
          "679:                 $members[$conversation->id][$userid] = $userid;",
          "680:                 $selfmembers[$userid] = $userid;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "658:                 $members[$member->conversationid][$member->userid] = $member->userid;",
          "659:                 $individualmembers[$member->userid] = $member->userid;",
          "660:             }",
          "678:         }",
          "",
          "[Removed Lines]",
          "668:             foreach ($individualconversations as $indconvid) {",
          "669:                 if (empty($members[$indconvid])) {",
          "671:                     $selfconversations[$indconvid] = $indconvid;",
          "674:                     $members[$indconvid][$userid] = $userid;",
          "675:                     $individualmembers[$userid] = $userid;",
          "676:                 }",
          "677:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "688:         if (!empty($individualmembers) || !empty($groupmembers)) {",
          "",
          "[Added Lines]",
          "709:         if (!empty($individualmembers) || !empty($groupmembers) || !empty($selfmembers)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "694:             $individualmemberinfo = helper::get_member_info($userid, $individualmembers, true, true);",
          "695:             $groupmemberinfo = helper::get_member_info($userid, $diffgroupmembers);",
          "700:             if (empty($memberinfo)) {",
          "701:                 return [];",
          "",
          "[Removed Lines]",
          "698:             $memberinfo = $individualmemberinfo + $groupmemberinfo;",
          "",
          "[Added Lines]",
          "717:             $selfmemberinfo = helper::get_member_info($userid, $selfmembers);",
          "720:             $memberinfo = $individualmemberinfo + $groupmemberinfo + $selfmemberinfo;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "759:         $unreadcounts = $DB->get_records_sql($unreadcountssql, [$userid, self::MESSAGE_ACTION_READ, self::MESSAGE_ACTION_DELETED,",
          "760:             $userid, $userid]);",
          "764:         \\context_helper::preload_contexts_by_id(array_column($conversations, 'contextid'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:         $selfmessagessql = \"SELECT COUNT(m.id)",
          "786:                               FROM {messages} m",
          "787:                         INNER JOIN {message_conversations} mc",
          "788:                                 ON mc.id = m.conversationid",
          "789:                              WHERE mc.type = ? AND convhash = ?\";",
          "790:         $selfmessagestotal = $DB->count_records_sql(",
          "791:             $selfmessagessql,",
          "792:             [self::MESSAGE_CONVERSATION_TYPE_SELF, helper::get_conversation_hash([$userid])]",
          "793:         );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "767:         $arrconversations = [];",
          "768:         foreach ($conversations as $conversation) {",
          "779:                 continue;",
          "780:             }",
          "",
          "[Removed Lines]",
          "772:             if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL",
          "773:                     && (empty($conversation->messageid))) {",
          "774:                 continue;",
          "775:             }",
          "778:             if (isset($selfconversations[$conversation->id])) {",
          "",
          "[Added Lines]",
          "807:             if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL && empty($conversation->messageid) ||",
          "808:                    ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_SELF && empty($conversation->messageid)",
          "809:                     && $selfmessagestotal > 0)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "916:             $memberoffset,",
          "917:             $memberlimit",
          "918:         );",
          "924:         $messages = self::get_conversation_messages(",
          "925:             $userid,",
          "",
          "[Removed Lines]",
          "920:         $members = array_filter($members, function($member) use ($userid) {",
          "921:             return $member->id != $userid;",
          "922:         });",
          "",
          "[Added Lines]",
          "950:         if ($conversation->type != self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "952:             $members = array_filter($members, function($member) use ($userid) {",
          "953:                 return $member->id != $userid;",
          "954:             });",
          "955:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1575:         $favservice = \\core_favourites\\service_factory::get_service_for_user_context($usercontext);",
          "1576:         list($favsql, $favparams) = $favservice->get_join_sql_by_type('core_message', 'message_conversations', 'fav', 'mc.id');",
          "1579:                   FROM {message_conversations} mc",
          "1580:             INNER JOIN {message_conversation_members} mcm",
          "1581:                     ON mcm.conversationid = mc.id",
          "1593:              LEFT JOIN (",
          "1594:                               SELECT m.conversationid as convid, MAX(m.timecreated) as maxtime",
          "1595:                                 FROM {messages} m",
          "",
          "[Removed Lines]",
          "1578:         $sql = \"SELECT mc.type, fav.itemtype, COUNT(DISTINCT mc.id) as count",
          "1582:             INNER JOIN (",
          "1583:                               SELECT mcm.conversationid, count(distinct mcm.userid) as membercount",
          "1584:                                 FROM {message_conversation_members} mcm",
          "1585:                                WHERE mcm.conversationid IN (",
          "1586:                                         SELECT DISTINCT conversationid",
          "1587:                                           FROM {message_conversation_members} mcm2",
          "1588:                                          WHERE userid = :userid5",
          "1589:                                      )",
          "1590:                             GROUP BY mcm.conversationid",
          "1591:                        ) uniquemembercount",
          "1592:                     ON uniquemembercount.conversationid = mc.id",
          "",
          "[Added Lines]",
          "1612:         $sql = \"SELECT mc.type, fav.itemtype, COUNT(DISTINCT mc.id) as count, MAX(maxvisibleconvmessage.convid) as maxconvidmessage",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1606:                  WHERE mcm.userid = :userid3",
          "1607:                    AND mc.enabled = :enabled",
          "1608:                    AND (",
          "1611:                        )",
          "1612:               GROUP BY mc.type, fav.itemtype",
          "1613:               ORDER BY mc.type ASC\";",
          "",
          "[Removed Lines]",
          "1609:                           (mc.type = :individualtype AND maxvisibleconvmessage.convid IS NOT NULL AND membercount > 1) OR",
          "1610:                           (mc.type = :grouptype)",
          "",
          "[Added Lines]",
          "1632:                           (mc.type = :individualtype AND maxvisibleconvmessage.convid IS NOT NULL) OR",
          "1633:                           (mc.type = :grouptype) OR",
          "1634:                           (mc.type = :selftype)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1622:             'enabled' => self::MESSAGE_CONVERSATION_ENABLED,",
          "1623:             'individualtype' => self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1624:             'grouptype' => self::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1625:         ] + $favparams;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:             'selftype' => self::MESSAGE_CONVERSATION_TYPE_SELF,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1629:             'favourites' => 0,",
          "1630:             'types' => [",
          "1631:                 self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "1633:             ]",
          "1634:         ];",
          "1636:         $countsrs = $DB->get_recordset_sql($sql, $params);",
          "1637:         foreach ($countsrs as $key => $val) {",
          "1638:             if (!empty($val->itemtype)) {",
          "1639:                 $counts['favourites'] += $val->count;",
          "1640:                 continue;",
          "",
          "[Removed Lines]",
          "1632:                 self::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "1657:                 self::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "1658:                 self::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "1663:         $selfmessagessql = \"SELECT COUNT(m.id)",
          "1664:                               FROM {messages} m",
          "1665:                         INNER JOIN {message_conversations} mc",
          "1666:                                 ON mc.id = m.conversationid",
          "1667:                              WHERE mc.type = ? AND convhash = ?\";",
          "1668:         $selfmessagestotal = $DB->count_records_sql(",
          "1669:             $selfmessagessql,",
          "1670:             [self::MESSAGE_CONVERSATION_TYPE_SELF, helper::get_conversation_hash([$userid])]",
          "1671:         );",
          "1676:             if ($val->type == self::MESSAGE_CONVERSATION_TYPE_SELF && empty($val->maxconvidmessage) && $selfmessagestotal > 0) {",
          "1677:                 continue;",
          "1678:             }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1857:         $conversation = $DB->get_record('message_conversations', ['id' => $conversationid], '*', MUST_EXIST);",
          "1859:             return true;",
          "1860:         } else if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "",
          "[Removed Lines]",
          "1858:         if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_GROUP) {",
          "",
          "[Added Lines]",
          "1899:         if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_GROUP ||",
          "1900:             $conversation->type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2375:         return $conversations;",
          "2376:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2427:     public static function get_self_conversation(int $userid) {",
          "2428:         global $DB;",
          "2430:         $conditions = [",
          "2431:             'type' => self::MESSAGE_CONVERSATION_TYPE_SELF,",
          "2432:             'convhash' => helper::get_conversation_hash([$userid])",
          "2433:         ];",
          "2434:         return $DB->get_record('message_conversations', $conditions);",
          "2435:     }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2414:         $validtypes = [",
          "2415:             self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "2417:         ];",
          "2419:         if (!in_array($type, $validtypes)) {",
          "",
          "[Removed Lines]",
          "2416:             self::MESSAGE_CONVERSATION_TYPE_GROUP",
          "",
          "[Added Lines]",
          "2475:             self::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "2476:             self::MESSAGE_CONVERSATION_TYPE_SELF",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2425:             if (count($userids) > 2) {",
          "2426:                 throw new \\moodle_exception('An individual conversation can not have more than two users.');",
          "2427:             }",
          "2428:         }",
          "2430:         $conversation = new \\stdClass();",
          "2431:         $conversation->type = $type;",
          "2432:         $conversation->name = $name;",
          "2433:         $conversation->convhash = null;",
          "2435:             $conversation->convhash = helper::get_conversation_hash($userids);",
          "2436:         }",
          "2437:         $conversation->component = $component;",
          "",
          "[Removed Lines]",
          "2434:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "",
          "[Added Lines]",
          "2488:             if ($userids[0] == $userids[1]) {",
          "2489:                 throw new \\moodle_exception('Trying to create an individual conversation instead of a self conversation.');",
          "2490:             }",
          "2491:         } else if ($type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "2492:             if (count($userids) != 1) {",
          "2493:                 throw new \\moodle_exception('A self conversation can not have more than one user.');",
          "2494:             }",
          "2501:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL || $type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2835:     protected static function can_contact_user(int $recipientid, int $senderid) : bool {",
          "2838:             return true;",
          "2839:         }",
          "",
          "[Removed Lines]",
          "2836:         if (has_capability('moodle/site:messageanyuser', \\context_system::instance(), $senderid)) {",
          "",
          "[Added Lines]",
          "2903:         if (has_capability('moodle/site:messageanyuser', \\context_system::instance(), $senderid) ||",
          "2904:             $recipientid == $senderid) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3140:         $counts = ['favourites' => 0, 'types' => [",
          "3141:             self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "3143:         ]];",
          "3144:         foreach ($unreadcounts as $convid => $info) {",
          "3145:             if (isset($favouriteconvids[$convid])) {",
          "",
          "[Removed Lines]",
          "3142:             self::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "3210:             self::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "3211:             self::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------"
        ],
        "message/classes/privacy/provider.php||message/classes/privacy/provider.php": [
          "File: message/classes/privacy/provider.php -> message/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "950:             if (empty($conversation->contextid)) {",
          "958:                 } else {",
          "960:                 }",
          "962:                 $subcontext = array_merge(",
          "",
          "[Removed Lines]",
          "952:                 $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "953:                 $members = array_filter($members, function ($member) use ($userid) {",
          "954:                     return $member->userid != $userid;",
          "955:                 });",
          "956:                 if ($otheruser = reset($members)) {",
          "957:                     $otherusertext = $otheruser->userid;",
          "959:                     $otherusertext = get_string('unknownuser', 'core_message') . '_' . $conversation->id;",
          "",
          "[Added Lines]",
          "952:                 if ($conversation->type == \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "954:                     $otherusertext = $userid;",
          "956:                     $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "957:                     $members = array_filter($members, function ($member) use ($userid) {",
          "958:                         return $member->userid != $userid;",
          "959:                     });",
          "960:                     if ($otheruser = reset($members)) {",
          "961:                         $otherusertext = $otheruser->userid;",
          "962:                     } else {",
          "963:                         $otherusertext = get_string('unknownuser', 'core_message') . '_' . $conversation->id;",
          "964:                     }",
          "",
          "---------------"
        ],
        "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php": [
          "File: message/classes/task/migrate_message_data.php -> message/classes/task/migrate_message_data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     private function migrate_data($userid, $otheruserid) {",
          "123:         global $DB;",
          "126:             $conversation = \\core_message\\api::create_conversation(",
          "127:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "128:                 [",
          "",
          "[Removed Lines]",
          "125:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "",
          "[Added Lines]",
          "125:         if ($userid == $otheruserid) {",
          "128:             $conversation = \\core_message\\api::get_self_conversation($userid);",
          "129:             if (empty($conversation)) {",
          "130:                 $conversation = \\core_message\\api::create_conversation(",
          "131:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "132:                     [$userid]",
          "133:                 );",
          "134:             }",
          "135:             $conversationid = $conversation->id;",
          "136:         } else if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1247:                 'name' => new external_value(PARAM_TEXT, 'The conversation name, if set', VALUE_DEFAULT, null),",
          "1248:                 'subname' => new external_value(PARAM_TEXT, 'A subtitle for the conversation name, if set', VALUE_DEFAULT, null),",
          "1249:                 'imageurl' => new external_value(PARAM_URL, 'A link to the conversation picture, if set', VALUE_DEFAULT, null),",
          "1251:                 'membercount' => new external_value(PARAM_INT, 'Total number of conversation members'),",
          "1252:                 'ismuted' => new external_value(PARAM_BOOL, 'If the user muted this conversation'),",
          "1253:                 'isfavourite' => new external_value(PARAM_BOOL, 'If the user marked this conversation as a favourite'),",
          "",
          "[Removed Lines]",
          "1250:                 'type' => new external_value(PARAM_INT, 'The type of the conversation (1=individual,2=group)'),",
          "",
          "[Added Lines]",
          "1250:                 'type' => new external_value(PARAM_INT, 'The type of the conversation (1=individual,2=group,3=self)'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1752:                 'favourites' => new external_value(PARAM_BOOL, 'Whether to restrict the results to contain NO favourite",
          "1753:                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null)',",
          "1754:                     VALUE_DEFAULT, null),",
          "1756:             )",
          "1757:         );",
          "1758:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1755:                 'mergeself' => new external_value(PARAM_BOOL, 'Whether to include self-conversations (true) or ONLY private",
          "1756:                     conversations (false) when private conversations are requested.',",
          "1757:                     VALUE_DEFAULT, false),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1773:         global $CFG, $USER;",
          "",
          "[Removed Lines]",
          "1772:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 0, int $type = null, bool $favourites = null) {",
          "",
          "[Added Lines]",
          "1776:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 0, int $type = null, bool $favourites = null,",
          "1777:             bool $mergeself = false) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1782:             'limitfrom' => $limitfrom,",
          "1783:             'limitnum' => $limitnum,",
          "1784:             'type' => $type,",
          "1786:         );",
          "1787:         $params = self::validate_parameters(self::get_conversations_parameters(), $params);",
          "",
          "[Removed Lines]",
          "1785:             'favourites' => $favourites",
          "",
          "[Added Lines]",
          "1790:             'favourites' => $favourites,",
          "1791:             'mergeself' => $mergeself",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1798:             $params['limitfrom'],",
          "1799:             $params['limitnum'],",
          "1800:             $params['type'],",
          "1802:         );",
          "1804:         return (object) ['conversations' => $conversations];",
          "",
          "[Removed Lines]",
          "1801:             $params['favourites']",
          "",
          "[Added Lines]",
          "1807:             $params['favourites'],",
          "1808:             $params['mergeself']",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2025:         return self::get_conversation_structure(true);",
          "2026:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2040:     public static function get_self_conversation_parameters() {",
          "2041:         return new external_function_parameters(",
          "2042:             array(",
          "2043:                 'userid' => new external_value(PARAM_INT, 'The id of the user who we are viewing self-conversations for'),",
          "2044:                 'messagelimit' => new external_value(PARAM_INT, 'Limit for number of messages', VALUE_DEFAULT, 100),",
          "2045:                 'messageoffset' => new external_value(PARAM_INT, 'Offset for messages list', VALUE_DEFAULT, 0),",
          "2046:                 'newestmessagesfirst' => new external_value(PARAM_BOOL, 'Order messages by newest first', VALUE_DEFAULT, true)",
          "2047:             )",
          "2048:         );",
          "2049:     }",
          "2062:     public static function get_self_conversation(",
          "2063:         int $userid,",
          "2064:         int $messagelimit = 0,",
          "2065:         int $messageoffset = 0,",
          "2066:         bool $newestmessagesfirst = true",
          "2067:     ) {",
          "2068:         global $CFG;",
          "2071:         if (empty($CFG->messaging)) {",
          "2072:             throw new moodle_exception('disabled', 'message');",
          "2073:         }",
          "2075:         $params = [",
          "2076:             'userid' => $userid,",
          "2077:             'messagelimit' => $messagelimit,",
          "2078:             'messageoffset' => $messageoffset,",
          "2079:             'newestmessagesfirst' => $newestmessagesfirst",
          "2080:         ];",
          "2081:         self::validate_parameters(self::get_self_conversation_parameters(), $params);",
          "2083:         $systemcontext = context_system::instance();",
          "2084:         self::validate_context($systemcontext);",
          "2086:         $conversation = \\core_message\\api::get_self_conversation($params['userid']);",
          "2088:         if ($conversation) {",
          "2089:             $conversation = \\core_message\\api::get_conversation(",
          "2090:                 $params['userid'],",
          "2091:                 $conversation->id,",
          "2092:                 false,",
          "2093:                 false,",
          "2094:                 0,",
          "2095:                 0,",
          "2096:                 $params['messagelimit'],",
          "2097:                 $params['messageoffset'],",
          "2098:                 $params['newestmessagesfirst']",
          "2099:             );",
          "2100:         }",
          "2102:         if ($conversation) {",
          "2103:             return $conversation;",
          "2104:         } else {",
          "2107:             throw new \\moodle_exception('errorconversationdoesnotexist', 'message');",
          "2108:         }",
          "2109:     }",
          "2116:     public static function get_self_conversation_returns() {",
          "2117:         return self::get_conversation_structure();",
          "2118:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4625:                             'Total number of individual conversations'),",
          "4626:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => new external_value(PARAM_INT,",
          "4627:                             'Total number of group conversations'),",
          "4628:                     ]",
          "4629:                 ),",
          "4630:             ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4720:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => new external_value(PARAM_INT,",
          "4721:                             'Total number of self conversations'),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4700:                             'Total number of unread individual conversations'),",
          "4701:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => new external_value(PARAM_INT,",
          "4702:                             'Total number of unread group conversations'),",
          "4703:                     ]",
          "4704:                 ),",
          "4705:             ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4797:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => new external_value(PARAM_INT,",
          "4798:                             'Total number of unread self conversations'),",
          "",
          "---------------"
        ],
        "message/templates/message_drawer_view_conversation_body.mustache||message/templates/message_drawer_view_conversation_body.mustache": [
          "File: message/templates/message_drawer_view_conversation_body.mustache -> message/templates/message_drawer_view_conversation_body.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     style=\"overflow-y: auto; overflow-x: hidden\"",
          "44: >",
          "45:     <div class=\"position-relative h-100\" data-region=\"content-container\" style=\"overflow-y: auto; overflow-x: hidden\">",
          "46:         <div class=\"p-3 text-center hidden\" data-region=\"contact-request-sent-message-container\">",
          "47:             <p class=\"m-0\">{{#str}} contactrequestsent, core_message {{/str}}</p>",
          "48:             <p class=\"font-italic font-weight-light\" data-region=\"text\"></p>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         <div class=\"p-3 text-center hidden\" data-region=\"self-conversation-message-container\">",
          "47:             <p class=\"m-0\">{{#str}} selfconversation, core_message {{/str}}</p>",
          "48:             <p class=\"font-italic font-weight-light\" data-region=\"text\">{{#str}} selfconversationdefaultmessage, core_message {{/str}}</p>",
          "49:         </div>",
          "",
          "---------------"
        ],
        "message/templates/message_drawer_view_conversation_header_content_type_self.mustache||message/templates/message_drawer_view_conversation_header_content_type_self.mustache": [
          "File: message/templates/message_drawer_view_conversation_header_content_type_self.mustache -> message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     @template core_message/message_drawer_view_conversation_header_content_type_self",
          "20:     This template will render the header content of the conversation page in",
          "21:     the message message drawer.",
          "23:     Classes required for JS:",
          "26:     Data attributes required for JS:",
          "29:     Context variables required for this template:",
          "38:     Example context (json):",
          "39:     {}",
          "41: }}",
          "43: <div class=\"d-flex align-items-center\">",
          "44:     <div class=\"align-self-stretch\" >",
          "45:         <a class=\"h-100 mr-2 d-flex align-items-center\" href=\"#\" data-route-back>",
          "46:             {{> core_message/message_drawer_icon_back }}",
          "47:         </a>",
          "48:     </div>",
          "49:     <div class=\"d-flex text-truncate\">",
          "50:         {{#imageurl}}",
          "51:             <div class=\"d-flex align-items-center\">",
          "52:                 <img",
          "53:                     class=\"rounded-circle\"",
          "54:                     src=\"{{{.}}}\"",
          "55:                     alt=\"{{name}}\"",
          "56:                     aria-hidden=\"true\"",
          "57:                     style=\"height: 38px\"",
          "58:                 >",
          "59:             </div>",
          "60:         {{/imageurl}}",
          "61:         <div class=\"w-100 text-truncate ml-2\">",
          "62:             <div class=\"d-flex\">",
          "63:                 <strong class=\"m-0 text-truncate\">{{name}}</strong>",
          "64:                 <span class=\"{{^isfavourite}}hidden{{/isfavourite}} ml-1 text-primary\" data-region=\"favourite-icon-container\">",
          "65:                     {{#pix}} i/star-rating, core {{/pix}}",
          "66:                 </span>",
          "67:             </div>",
          "68:             {{#showonlinestatus}}",
          "69:                 <p class=\"m-0 font-weight-light text-truncate\">",
          "70:                     {{#str}} loggedin, core_message {{/str}}",
          "71:                 </p>",
          "72:             {{/showonlinestatus}}",
          "73:         </div>",
          "74:     </div>",
          "75:     <div class=\"ml-auto dropdown\">",
          "76:         <button class=\"btn btn-link btn-icon icon-size-3\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">",
          "77:             {{#pix}} i/moremenu, core {{/pix}}",
          "78:         </button>",
          "79:         <div class=\"dropdown-menu pull-right\">",
          "80:             <a class=\"dropdown-item {{#isfavourite}}hidden{{/isfavourite}} {{^showfavourite}}hidden{{/showfavourite}}\" href=\"#\" data-action=\"confirm-favourite\">",
          "81:                 {{#str}} addtofavourites, core_message {{/str}}",
          "82:             </a>",
          "83:             <a class=\"dropdown-item {{^isfavourite}}hidden{{/isfavourite}} {{^showfavourite}}hidden{{/showfavourite}}\" href=\"#\" data-action=\"confirm-unfavourite\">",
          "84:                 {{#str}} removefromfavourites, core_message {{/str}}",
          "85:             </a>",
          "86:             <a class=\"dropdown-item\" href=\"#\" data-action=\"request-delete-conversation\">",
          "87:                 {{#str}} deleteconversation, core_message {{/str}}",
          "88:             </a>",
          "89:         </div>",
          "90:     </div>",
          "91: </div>",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP, $noncontacts[3]->conversations[$gc1->id]->type);",
          "477:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     public function test_message_search_users_self_conversations() {",
          "483:         $this->resetAfterTest();",
          "486:         $user1 = new stdClass();",
          "487:         $user1->firstname = 'User';",
          "488:         $user1->lastname = 'One';",
          "489:         $user1 = $this->getDataGenerator()->create_user($user1);",
          "490:         $user2 = new stdClass();",
          "491:         $user2->firstname = 'User';",
          "492:         $user2->lastname = 'Two';",
          "493:         $user2 = $this->getDataGenerator()->create_user($user2);",
          "496:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "497:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi myself!');",
          "500:         $this->setUser($user1);",
          "501:         $result = \\core_message\\api::message_search_users($user1->id, 'One');",
          "504:         $this->assertCount(0, $result[0]);",
          "505:         $this->assertCount(1, $result[1]);",
          "506:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:         $this->assertCount(0, \\core_message\\api::get_conversations_between_users($user6->id, $user1->id));",
          "713:     }",
          "718:     public function test_search_messages() {",
          "720:         $user1 = self::getDataGenerator()->create_user();",
          "721:         $user2 = self::getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:     public function test_get_self_conversation() {",
          "749:         $user1 = new stdClass();",
          "750:         $user1->firstname = 'User';",
          "751:         $user1->lastname = 'One';",
          "752:         $user1 = self::getDataGenerator()->create_user($user1);",
          "754:         $user2 = new stdClass();",
          "755:         $user2->firstname = 'User';",
          "756:         $user2->lastname = 'Two';",
          "757:         $user2 = self::getDataGenerator()->create_user($user2);",
          "759:         $user3 = new stdClass();",
          "760:         $user3->firstname = 'User search';",
          "761:         $user3->lastname = 'Three';",
          "762:         $user3 = self::getDataGenerator()->create_user($user3);",
          "765:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "766:         \\core_message\\api::add_contact($user3->id, $user1->id);",
          "769:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "770:             array($user1->id, $user2->id));",
          "771:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "772:             array($user3->id, $user1->id));",
          "775:         $gc = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "776:             array($user1->id, $user2->id, $user3->id),",
          "777:             'Project chat');",
          "780:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "781:             array($user1->id));",
          "782:         $sc2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "783:             array($user2->id));",
          "786:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Message to myself!');",
          "788:         $rsc1 = \\core_message\\api::get_self_conversation($user1->id);",
          "789:         $rsc2 = \\core_message\\api::get_self_conversation($user2->id);",
          "790:         $rsc3 = \\core_message\\api::get_self_conversation($user3->id);",
          "793:         $this->assertEquals($sc1->id, $rsc1->id);",
          "794:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, $sc1->type);",
          "795:         $this->assertEquals($sc2->id, $rsc2->id);",
          "796:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, $sc2->type);",
          "797:         $this->assertFalse($rsc3);",
          "798:     }",
          "804:         $this->resetAfterTest();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "725:         $this->setUser($user1);",
          "728:         $time = 1;",
          "735:         $convid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "736:         $conv2id = \\core_message\\api::get_conversation_between_users([$user1->id, $user3->id]);",
          "",
          "[Removed Lines]",
          "729:         $this->send_fake_message($user3, $user1, 'Don\\'t block me.', 0, $time);",
          "730:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "731:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "732:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "733:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "",
          "[Added Lines]",
          "815:         $sc = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "818:         $gc = \\core_message\\api::create_conversation(",
          "819:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "820:             [$user1->id, $user2->id, $user3->id]",
          "821:         );",
          "825:         testhelper::send_fake_message_to_conversation($user1, $sc->id, 'Test message to self!', $time);",
          "826:         testhelper::send_fake_message_to_conversation($user1, $gc->id, 'My hero!', $time + 1);",
          "827:         $this->send_fake_message($user3, $user1, 'Don\\'t block me.', 0, $time + 2);",
          "828:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 3);",
          "829:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 4);",
          "830:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 5);",
          "831:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 6);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "742:         $messages = \\core_message\\api::search_messages($user1->id, 'o');",
          "747:         $message1 = $messages[0];",
          "748:         $message2 = $messages[1];",
          "749:         $message3 = $messages[2];",
          "751:         $this->assertEquals($user2->id, $message1->userid);",
          "752:         $this->assertEquals($user2->id, $message1->useridfrom);",
          "",
          "[Removed Lines]",
          "745:         $this->assertEquals(3, count($messages));",
          "",
          "[Added Lines]",
          "843:         $this->assertEquals(5, count($messages));",
          "847:         $message4 = $messages[3];",
          "848:         $message5 = $messages[4];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "783:         $this->assertTrue($message3->isblocked);",
          "784:         $this->assertNull($message3->unreadcount);",
          "785:         $this->assertEquals($conv2id, $message3->conversationid);",
          "786:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:         $this->assertTrue(in_array($message4->userid, [$user2->id, $user3->id]));",
          "889:         $this->assertEquals($user1->id, $message4->useridfrom);",
          "890:         $this->assertTrue($message4->ismessaging);",
          "891:         $this->assertEquals('My hero!', $message4->lastmessage);",
          "892:         $this->assertNotEmpty($message4->messageid);",
          "893:         $this->assertNull($message4->isonline);",
          "894:         $this->assertTrue($message4->isread);",
          "895:         $this->assertNull($message4->unreadcount);",
          "896:         $this->assertEquals($gc->id, $message4->conversationid);",
          "898:         $this->assertEquals($user1->id, $message5->userid);",
          "899:         $this->assertEquals($user1->id, $message5->useridfrom);",
          "900:         $this->assertEquals(fullname($user1), $message5->fullname);",
          "901:         $this->assertTrue($message5->ismessaging);",
          "902:         $this->assertEquals('Test message to self!', $message5->lastmessage);",
          "903:         $this->assertNotEmpty($message5->messageid);",
          "904:         $this->assertFalse($message5->isonline);",
          "905:         $this->assertTrue($message5->isread);",
          "906:         $this->assertFalse($message5->isblocked);",
          "907:         $this->assertNull($message5->unreadcount);",
          "908:         $this->assertEquals($sc->id, $message5->conversationid);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1409:     }",
          "1415:         global $DB;",
          "1418:         $user1 = self::getDataGenerator()->create_user();",
          "1428:         $member = array_pop($members);",
          "1429:         $this->assertEquals($user1->id, $member->userid);",
          "1434:     }",
          "",
          "[Removed Lines]",
          "1414:     public function test_get_conversations_legacy_self_conversations() {",
          "1419:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1420:             [$user1->id, $user1->id]);",
          "1421:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Test message to self!');",
          "1424:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "1425:         $this->assertCount(2, $members);",
          "1426:         $member = array_pop($members);",
          "1427:         $this->assertEquals($user1->id, $member->userid);",
          "1432:         $conversations = \\core_message\\api::get_conversations($user1->id);",
          "1433:         $this->assertCount(0, $conversations);",
          "",
          "[Added Lines]",
          "1537:     public function test_get_conversations_self_conversations() {",
          "1542:         $user2 = self::getDataGenerator()->create_user();",
          "1543:         $user3 = self::getDataGenerator()->create_user();",
          "1544:         $user4 = self::getDataGenerator()->create_user();",
          "1547:         $ic1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1548:             [$user1->id, $user2->id]);",
          "1549:         $ic2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1550:             [$user1->id, $user3->id]);",
          "1551:         testhelper::send_fake_message_to_conversation($user1, $ic1->id, 'Message from user1 to user2');",
          "1554:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "1555:         $sc4 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user4->id]);",
          "1556:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Test message to self 1!');",
          "1559:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $sc1->id]);",
          "1560:         $this->assertCount(1, $members);",
          "1565:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20, \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF);",
          "1566:         $this->assertCount(1, $conversations);",
          "1567:         $conversation = array_pop($conversations);",
          "1568:         $this->assertEquals($conversation->id, $sc1->id);",
          "1570:         $conversations = \\core_message\\api::get_conversations($user4->id);",
          "1572:         $this->assertCount(1, $conversations);",
          "1575:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20,",
          "1576:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL);",
          "1577:         $this->assertCount(1, $conversations);",
          "1580:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20,",
          "1581:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, null, true);",
          "1582:         $this->assertCount(2, $conversations);",
          "1585:         $conversations = \\core_message\\api::get_conversations($user2->id, 0, 20,",
          "1586:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL);",
          "1587:         $this->assertCount(1, $conversations);",
          "1590:         $conversations = \\core_message\\api::get_conversations($user2->id, 0, 20,",
          "1591:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, null, true);",
          "1592:         $this->assertCount(1, $conversations);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3012:         $this->setUser($user1);",
          "3015:         $time = 1;",
          "3016:         $m1id = $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "3017:         $m2id = $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "3018:         $m3id = $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "3019:         $m4id = $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "3022:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3023:         \\core_message\\api::delete_conversation_by_id($user1->id, $conversationid);",
          "3025:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3174:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "3175:         $sc2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user2->id]);",
          "3183:         $m5id = testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi to myself!', $time + 5);",
          "3184:         $m6id = testhelper::send_fake_message_to_conversation($user2, $sc2->id, 'I am talking with myself', $time + 6);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3047:         $this->assertEquals($user1->id, $mua4->userid);",
          "3048:         $this->assertEquals($m4id, $mua4->messageid);",
          "3049:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3050:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3218:         \\core_message\\api::delete_conversation_by_id($user1->id, $sc1->id);",
          "3220:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3221:         $this->assertCount(5, $muas);",
          "3224:         ksort($muas);",
          "3226:         $mua1 = array_shift($muas);",
          "3227:         $mua2 = array_shift($muas);",
          "3228:         $mua3 = array_shift($muas);",
          "3229:         $mua4 = array_shift($muas);",
          "3230:         $mua5 = array_shift($muas);",
          "3233:         $this->assertEquals($user1->id, $mua5->userid);",
          "3234:         $this->assertEquals($m5id, $mua5->messageid);",
          "3235:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua5->action);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3364:             ]",
          "3365:         );",
          "3368:         $this->assertTrue(\\core_message\\api::can_send_message_to_conversation($user1->id, $gc1->id));",
          "3372:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user1->id, $ic1->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3554:         $sc1 = \\core_message\\api::create_conversation(",
          "3555:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3556:             [$user1->id]",
          "3557:         );",
          "3563:         $this->assertTrue(\\core_message\\api::can_send_message_to_conversation($user1->id, $sc1->id));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3516:             ]",
          "3517:         );",
          "3520:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $gc1->id));",
          "3521:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $ic1->id));",
          "3522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3715:         $sc1 = \\core_message\\api::create_conversation(",
          "3716:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3717:             [$user1->id]",
          "3718:         );",
          "3723:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $sc1->id));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5754:         $this->assertEquals($user3->id, $request1->requesteduserid);",
          "5755:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5962:     public function test_get_conversation_members_with_self_conversation() {",
          "5963:         $lastaccess = new stdClass();",
          "5964:         $lastaccess->lastaccess = time();",
          "5966:         $user1 = self::getDataGenerator()->create_user($lastaccess);",
          "5968:         $selfconversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "5969:             [$user1->id]);",
          "5970:         testhelper::send_fake_message_to_conversation($user1, $selfconversation->id, 'This is a self-message!');",
          "5973:         $members = \\core_message\\api::get_conversation_members($user1->id, $selfconversation->id);",
          "5974:         $this->assertCount(1, $members);",
          "5976:         $member1 = array_shift($members);",
          "5979:         $this->assertEquals($user1->id, $member1->id);",
          "5980:         $this->assertEquals(fullname($user1), $member1->fullname);",
          "5981:         $this->assertEquals(true, $member1->isonline);",
          "5982:         $this->assertEquals(true, $member1->showonlinestatus);",
          "5983:         $this->assertEquals(false, $member1->iscontact);",
          "5984:         $this->assertEquals(false, $member1->isblocked);",
          "5985:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5926:     public function test_get_conversation_counts_test_cases() {",
          "5927:         $typeindividual = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL;",
          "5928:         $typegroup = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP;",
          "5929:         list($user1, $user2, $user3, $user4, $user5, $user6, $user7, $user8) = [0, 1, 2, 3, 4, 5, 6, 7];",
          "5930:         $conversations = [",
          "5931:             [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6159:         $typeself = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5964:                 'enabled' => false",
          "5965:             ],",
          "5966:             [",
          "5970:                 'favourites' => [],",
          "5972:             ],",
          "5973:         ];",
          "",
          "[Removed Lines]",
          "5967:                 'type' => $typeindividual,",
          "5968:                 'users' => [$user8, $user8],",
          "5969:                 'messages' => [$user8, $user8],",
          "5971:                 'enabled' => null // Individual conversations cannot be disabled.",
          "",
          "[Added Lines]",
          "6198:                 'type' => $typeself,",
          "6199:                 'users' => [$user8],",
          "6200:                 'messages' => [$user8],",
          "6202:                 'enabled' => null // Self-conversations cannot be disabled.",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5980:                 'arguments' => [$user5],",
          "5981:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "5982:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "5984:                 ]],",
          "5985:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "5986:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "5988:                 ]],",
          "5989:                 'deletedusers' => []",
          "5990:             ],",
          "",
          "[Removed Lines]",
          "5983:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "5987:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6214:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6215:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6219:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6220:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5995:                 'arguments' => [$user4],",
          "5996:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "5997:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "5999:                 ]],",
          "6000:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6001:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6003:                 ]],",
          "6004:                 'deletedusers' => []",
          "6005:             ],",
          "",
          "[Removed Lines]",
          "5998:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6002:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6231:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6232:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6236:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6237:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6010:                 'arguments' => [$user1],",
          "6011:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6012:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6014:                 ]],",
          "6015:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6016:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6018:                 ]],",
          "6019:                 'deletedusers' => []",
          "6020:             ],",
          "",
          "[Removed Lines]",
          "6013:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6017:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6248:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6249:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6253:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6254:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6025:                 'arguments' => [$user2],",
          "6026:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6027:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6029:                 ]],",
          "6030:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6031:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6033:                 ]],",
          "6034:                 'deletedusers' => []",
          "6035:             ],",
          "",
          "[Removed Lines]",
          "6028:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6032:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6265:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6266:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6270:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6271:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6040:                 'arguments' => [$user4],",
          "6041:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6042:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6044:                 ]],",
          "6045:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6046:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6048:                 ]],",
          "6049:                 'deletedusers' => []",
          "6050:             ],",
          "",
          "[Removed Lines]",
          "6043:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6047:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6282:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6283:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6287:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6288:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6055:                 'arguments' => [$user1],",
          "6056:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6057:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6059:                 ]],",
          "6060:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6061:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6063:                 ]],",
          "6064:                 'deletedusers' => []",
          "6065:             ],",
          "",
          "[Removed Lines]",
          "6058:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6062:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6299:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6300:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6304:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6305:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6070:                 'arguments' => [$user1],",
          "6071:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6072:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6074:                 ]],",
          "6075:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6076:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6078:                 ]],",
          "6079:                 'deletedusers' => []",
          "6080:             ],",
          "",
          "[Removed Lines]",
          "6073:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6077:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6316:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6317:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6321:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6322:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6085:                 'arguments' => [$user1],",
          "6086:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6087:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6089:                 ]],",
          "6090:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6091:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6093:                 ]],",
          "6094:                 'deletedusers' => []",
          "6095:             ],",
          "",
          "[Removed Lines]",
          "6088:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6092:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6333:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6334:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6338:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6339:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6100:                 'arguments' => [$user1],",
          "6101:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6102:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6104:                 ]],",
          "6105:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6106:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6108:                 ]],",
          "6109:                 'deletedusers' => []",
          "6110:             ],",
          "",
          "[Removed Lines]",
          "6103:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6107:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6350:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6351:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6355:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6356:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6115:                 'arguments' => [$user2],",
          "6116:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6117:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6119:                 ]],",
          "6120:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6121:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6123:                 ]],",
          "6124:                 'deletedusers' => []",
          "6125:             ],",
          "",
          "[Removed Lines]",
          "6118:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6122:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6367:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6368:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6372:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6373:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6130:                 'arguments' => [$user3],",
          "6131:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6132:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6134:                 ]],",
          "6135:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6136:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6138:                 ]],",
          "6139:                 'deletedusers' => []",
          "6140:             ],",
          "",
          "[Removed Lines]",
          "6133:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6137:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6384:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6385:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6389:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6390:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6145:                 'arguments' => [$user1],",
          "6146:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6147:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6149:                 ]],",
          "6150:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6151:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6153:                 ]],",
          "6154:                 'deletedusers' => []",
          "6155:             ],",
          "",
          "[Removed Lines]",
          "6148:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6152:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6401:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6402:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6406:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6407:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6160:                 'arguments' => [$user1],",
          "6161:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6162:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6164:                 ]],",
          "6165:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6166:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6168:                 ]],",
          "6169:                 'deletedusers' => []",
          "6170:             ],",
          "",
          "[Removed Lines]",
          "6163:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6167:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6418:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6419:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6423:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6424:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6175:                 'arguments' => [$user1],",
          "6176:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6177:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6179:                 ]],",
          "6180:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6181:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6183:                 ]],",
          "6184:                 'deletedusers' => [$user2]",
          "6185:             ],",
          "",
          "[Removed Lines]",
          "6178:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6182:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6435:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6436:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6440:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6441:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6190:                 'arguments' => [$user1],",
          "6191:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6192:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6194:                 ]],",
          "6195:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6196:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6198:                 ]],",
          "6199:                 'deletedusers' => [$user2, $user3, $user4]",
          "6200:             ],",
          "",
          "[Removed Lines]",
          "6193:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6197:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6452:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6453:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6457:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6458:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6205:                 'arguments' => [$user6],",
          "6206:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6207:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6209:                 ]],",
          "6210:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6211:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6213:                 ]],",
          "6214:                 'deletedusers' => []",
          "6215:             ],",
          "",
          "[Removed Lines]",
          "6208:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6212:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6469:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6470:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6474:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6475:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6220:                 'arguments' => [$user7],",
          "6221:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6222:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6224:                 ]],",
          "6225:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6226:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6228:                 ]],",
          "6229:                 'deletedusers' => []",
          "6230:             ],",
          "",
          "[Removed Lines]",
          "6223:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6227:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6486:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6487:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6491:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6492:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6235:                 'arguments' => [$user8],",
          "6236:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6237:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6239:                 ]],",
          "6240:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6241:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6243:                 ]],",
          "6244:                 'deletedusers' => []",
          "6245:             ],",
          "",
          "[Removed Lines]",
          "6238:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6242:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6503:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6504:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 1",
          "6508:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6509:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6325:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6326:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6327:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6595:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "6596:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6437:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6438:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6439:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6440:     }",
          "6442:     public function test_delete_all_conversation_data() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6709:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "6710:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2719:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP, $noncontacts[3]['conversations'][0]['type']);",
          "2720:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2725:     public function test_message_search_users_self_conversations() {",
          "2726:         $this->resetAfterTest();",
          "2729:         $user1 = new stdClass();",
          "2730:         $user1->firstname = 'User';",
          "2731:         $user1->lastname = 'One';",
          "2732:         $user1 = $this->getDataGenerator()->create_user($user1);",
          "2733:         $user2 = new stdClass();",
          "2734:         $user2->firstname = 'User';",
          "2735:         $user2->lastname = 'Two';",
          "2736:         $user2 = $this->getDataGenerator()->create_user($user2);",
          "2739:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "2740:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi myself!');",
          "2743:         $this->setUser($user1);",
          "2744:         $result = core_message_external::message_search_users($user1->id, 'One');",
          "2745:         $result = external_api::clean_returnvalue(core_message_external::message_search_users_returns(), $result);",
          "2748:         $this->assertCount(0, $result['contacts']);",
          "2749:         $this->assertCount(1, $result['noncontacts']);",
          "2750:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5496:     }",
          "5502:         global $DB;",
          "5503:         $this->resetAfterTest();",
          "5506:         $user1 = self::getDataGenerator()->create_user();",
          "5509:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Test message to self!');",
          "5512:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "5516:         $member = array_pop($members);",
          "5517:         $this->assertEquals($user1->id, $member->userid);",
          "5520:         $this->setUser($user1);",
          "5521:         $result = core_message_external::get_conversations($user1->id, 0, 20);",
          "5522:         $result = external_api::clean_returnvalue(core_message_external::get_conversations_returns(), $result);",
          "5523:         $conversations = $result['conversations'];",
          "5525:     }",
          "",
          "[Removed Lines]",
          "5501:     public function test_get_conversations_legacy_self_conversations() {",
          "5507:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5508:             [$user1->id, $user1->id]);",
          "5513:         $this->assertCount(2, $members);",
          "5514:         $member = array_pop($members);",
          "5515:         $this->assertEquals($user1->id, $member->userid);",
          "5524:         $this->assertCount(0, $conversations);",
          "",
          "[Added Lines]",
          "5531:     public function test_get_conversations_self_conversations() {",
          "5537:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "5538:             [$user1->id]);",
          "5543:         $this->assertCount(1, $members);",
          "5552:         $this->assertCount(1, $conversations);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6531:     public function test_get_conversation_counts_test_cases() {",
          "6532:         $typeindividual = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL;",
          "6533:         $typegroup = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP;",
          "6534:         list($user1, $user2, $user3, $user4, $user5, $user6, $user7, $user8) = [0, 1, 2, 3, 4, 5, 6, 7];",
          "6535:         $conversations = [",
          "6536:             [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6562:         $typeself = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6569:                 'enabled' => false",
          "6570:             ],",
          "6571:             [",
          "6575:                 'favourites' => [],",
          "6576:                 'enabled' => null // Individual conversations cannot be disabled.",
          "6577:             ],",
          "",
          "[Removed Lines]",
          "6572:                 'type' => $typeindividual,",
          "6573:                 'users' => [$user8, $user8],",
          "6574:                 'messages' => [$user8, $user8],",
          "",
          "[Added Lines]",
          "6601:                 'type' => $typeself,",
          "6602:                 'users' => [$user8],",
          "6603:                 'messages' => [$user8],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6585:                 'arguments' => [$user5],",
          "6586:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6587:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6589:                 ]],",
          "6590:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6591:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6593:                 ]],",
          "6594:                 'deletedusers' => []",
          "6595:             ],",
          "",
          "[Removed Lines]",
          "6588:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6592:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6617:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6618:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6622:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6623:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6600:                 'arguments' => [$user4],",
          "6601:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6602:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6604:                 ]],",
          "6605:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6606:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6608:                 ]],",
          "6609:                 'deletedusers' => []",
          "6610:             ],",
          "",
          "[Removed Lines]",
          "6603:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6607:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6634:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6635:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6639:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6640:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6615:                 'arguments' => [$user1],",
          "6616:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6617:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6619:                 ]],",
          "6620:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6621:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6623:                 ]],",
          "6624:                 'deletedusers' => []",
          "6625:             ],",
          "",
          "[Removed Lines]",
          "6618:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6622:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6651:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6652:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6656:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6657:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6630:                 'arguments' => [$user2],",
          "6631:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6632:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6634:                 ]],",
          "6635:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6636:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6638:                 ]],",
          "6639:                 'deletedusers' => []",
          "6640:             ],",
          "",
          "[Removed Lines]",
          "6633:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6637:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6668:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6669:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6673:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6674:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6645:                 'arguments' => [$user4],",
          "6646:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6647:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6649:                 ]],",
          "6650:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6651:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6653:                 ]],",
          "6654:                 'deletedusers' => []",
          "6655:             ],",
          "",
          "[Removed Lines]",
          "6648:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6652:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6685:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6686:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6690:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6691:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6660:                 'arguments' => [$user1],",
          "6661:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6662:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6664:                 ]],",
          "6665:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6666:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6668:                 ]],",
          "6669:                 'deletedusers' => []",
          "6670:             ],",
          "",
          "[Removed Lines]",
          "6663:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6667:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6702:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6703:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6707:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6708:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6675:                 'arguments' => [$user1],",
          "6676:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6677:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6679:                 ]],",
          "6680:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6681:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6683:                 ]],",
          "6684:                 'deletedusers' => []",
          "6685:             ],",
          "",
          "[Removed Lines]",
          "6678:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6682:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6719:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6720:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6724:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6725:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6690:                 'arguments' => [$user1],",
          "6691:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6692:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6694:                 ]],",
          "6695:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6696:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6698:                 ]],",
          "6699:                 'deletedusers' => []",
          "6700:             ],",
          "",
          "[Removed Lines]",
          "6693:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6697:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6736:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6737:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6741:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6742:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6705:                 'arguments' => [$user1],",
          "6706:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6707:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6709:                 ]],",
          "6710:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6711:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6713:                 ]],",
          "6714:                 'deletedusers' => []",
          "6715:             ],",
          "",
          "[Removed Lines]",
          "6708:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6712:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6753:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6754:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6758:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6759:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6720:                 'arguments' => [$user2],",
          "6721:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6722:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6724:                 ]],",
          "6725:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6726:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6728:                 ]],",
          "6729:                 'deletedusers' => []",
          "6730:             ],",
          "",
          "[Removed Lines]",
          "6723:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6727:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6770:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6771:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6775:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6776:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6735:                 'arguments' => [$user3],",
          "6736:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6737:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6739:                 ]],",
          "6740:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6741:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6743:                 ]],",
          "6744:                 'deletedusers' => []",
          "6745:             ],",
          "",
          "[Removed Lines]",
          "6738:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6742:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6787:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6788:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6792:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6793:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6750:                 'arguments' => [$user1],",
          "6751:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6752:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6754:                 ]],",
          "6755:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6756:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6758:                 ]],",
          "6759:                 'deletedusers' => []",
          "6760:             ],",
          "",
          "[Removed Lines]",
          "6753:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6757:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6804:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6805:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6809:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6810:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6765:                 'arguments' => [$user1],",
          "6766:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6767:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6769:                 ]],",
          "6770:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6771:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6773:                 ]],",
          "6774:                 'deletedusers' => []",
          "6775:             ],",
          "",
          "[Removed Lines]",
          "6768:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6772:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6821:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6822:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6826:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6827:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6780:                 'arguments' => [$user1],",
          "6781:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6782:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6784:                 ]],",
          "6785:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6786:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6788:                 ]],",
          "6789:                 'deletedusers' => [$user2]",
          "6790:             ],",
          "",
          "[Removed Lines]",
          "6783:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6787:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6838:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6839:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6843:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6844:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6795:                 'arguments' => [$user1],",
          "6796:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6797:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6799:                 ]],",
          "6800:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6801:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6803:                 ]],",
          "6804:                 'deletedusers' => [$user2, $user3, $user4]",
          "6805:             ],",
          "",
          "[Removed Lines]",
          "6798:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6802:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6855:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6856:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6860:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6861:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6810:                 'arguments' => [$user6],",
          "6811:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6812:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6814:                 ]],",
          "6815:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6816:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6818:                 ]],",
          "6819:                 'deletedusers' => []",
          "6820:             ],",
          "",
          "[Removed Lines]",
          "6813:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6817:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6872:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6873:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6877:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6878:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6825:                 'arguments' => [$user7],",
          "6826:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6827:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6829:                 ]],",
          "6830:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6831:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6833:                 ]],",
          "6834:                 'deletedusers' => []",
          "6835:             ],",
          "",
          "[Removed Lines]",
          "6828:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6832:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6889:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6890:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6894:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6895:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6840:                 'arguments' => [$user8],",
          "6841:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6842:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6844:                 ]],",
          "6845:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6846:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6848:                 ]],",
          "6849:                 'deletedusers' => []",
          "6850:             ],",
          "",
          "[Removed Lines]",
          "6843:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6847:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6906:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6907:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 1",
          "6911:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6912:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6933:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6934:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6935:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6936:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7001:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "7002:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7017:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "7018:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "7019:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "7020:     }",
          "7021: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7087:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "7088:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------"
        ],
        "message/tests/messagelib_test.php||message/tests/messagelib_test.php": [
          "File: message/tests/messagelib_test.php -> message/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:             return $DB->insert_record('notifications', $record);",
          "88:         }",
          "91:             $conversation = \\core_message\\api::create_conversation(",
          "92:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "93:                 [",
          "",
          "[Removed Lines]",
          "90:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "",
          "[Added Lines]",
          "90:         if ($userfrom->id == $userto->id) {",
          "92:             $conversation = \\core_message\\api::get_self_conversation($userfrom->id);",
          "93:             if (empty($conversation)) {",
          "94:                 $conversation = \\core_message\\api::create_conversation(",
          "95:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "96:                     [$userfrom->id]",
          "97:                 );",
          "98:             }",
          "99:             $conversationid = $conversation->id;",
          "100:         } else if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "",
          "---------------"
        ],
        "user/lib.php||user/lib.php": [
          "File: user/lib.php -> user/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         \\core\\event\\user_created::create_from_userid($newuserid)->trigger();",
          "127:     }",
          "130:     $presignupcache = \\cache::make('core', 'presignup');",
          "131:     $presignupcache->purge_current_user();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     $selfconversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$newuserid]);",
          "131:     \\core_message\\api::set_favourite_conversation($selfconversation->id, $newuserid);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b40d66b6534fc0a55c35891ff1e8fc385a0ca50",
      "candidate_info": {
        "commit_hash": "2b40d66b6534fc0a55c35891ff1e8fc385a0ca50",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2b40d66b6534fc0a55c35891ff1e8fc385a0ca50",
        "files": [
          "lang/en/admin.php",
          "lib/classes/task/badges_message_task.php",
          "lib/db/tasks.php",
          "version.php"
        ],
        "message": "MDL-65191 core_badges: add badges_message_task task",
        "before_after_code_files": [
          "lang/en/admin.php||lang/en/admin.php",
          "lib/classes/task/badges_message_task.php||lib/classes/task/badges_message_task.php",
          "lib/db/tasks.php||lib/db/tasks.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1216: $string['taskautomatedbackup'] = 'Automated backups';",
          "1217: $string['taskbackupcleanup'] = 'Clean backup tables and logs';",
          "1218: $string['taskbadgescron'] = 'Award badges';",
          "1219: $string['taskblogcron'] = 'Sync external blogs';",
          "1220: $string['taskcachecleanup'] = 'Remove expired cache entries';",
          "1221: $string['taskcachecron'] = 'Background processing for caches';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1219: $string['taskbadgesmessagecron'] = 'Background processing for sending badges notifications';",
          "",
          "---------------"
        ],
        "lib/classes/task/badges_message_task.php||lib/classes/task/badges_message_task.php": [
          "File: lib/classes/task/badges_message_task.php -> lib/classes/task/badges_message_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\task;",
          "29: class badges_message_task extends scheduled_task {",
          "36:     public function get_name() {",
          "37:         return get_string('taskbadgesmessagecron', 'admin');",
          "38:     }",
          "45:     public function execute() {",
          "46:         global $CFG, $DB;",
          "48:         if (!empty($CFG->enablebadges)) {",
          "49:             require_once($CFG->libdir . '/badgeslib.php');",
          "50:             mtrace('Sending scheduled badge notifications.');",
          "52:             $scheduled = $DB->get_records_select('badge', 'notification > ? AND (status != ?) AND nextcron < ?',",
          "53:                 array(BADGE_MESSAGE_ALWAYS, BADGE_STATUS_ARCHIVED, time()),",
          "54:                 'notification ASC', 'id, name, notification, usercreated as creator, timecreated');",
          "56:             foreach ($scheduled as $sch) {",
          "58:                 badge_assemble_notification($sch);",
          "61:                 $nextcron = badges_calculate_message_schedule($sch->notification);",
          "62:                 $DB->set_field('badge', 'nextcron', $nextcron, array('id' => $sch->id));",
          "63:             }",
          "64:         }",
          "65:     }",
          "67: }",
          "",
          "---------------"
        ],
        "lib/db/tasks.php||lib/db/tasks.php": [
          "File: lib/db/tasks.php -> lib/db/tasks.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:         'dayofweek' => '*',",
          "258:         'month' => '*'",
          "259:     ),",
          "260:     array(",
          "261:         'classname' => 'core\\task\\file_temp_cleanup_task',",
          "262:         'blocking' => 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     array(",
          "261:         'classname' => 'core\\task\\badges_message_task',",
          "262:         'blocking' => 0,",
          "263:         'minute' => '*/5',",
          "264:         'hour' => '*',",
          "265:         'day' => '*',",
          "266:         'dayofweek' => '*',",
          "267:         'month' => '*'",
          "268:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019032200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019032200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f793705318bf519ebf3b15a1fdb1cf52e494647",
      "candidate_info": {
        "commit_hash": "6f793705318bf519ebf3b15a1fdb1cf52e494647",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6f793705318bf519ebf3b15a1fdb1cf52e494647",
        "files": [
          "auth/classes/external.php",
          "auth/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-63742 auth: New WS core_auth_resend_confirmation_email",
        "before_after_code_files": [
          "auth/classes/external.php||auth/classes/external.php",
          "auth/tests/external_test.php||auth/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/classes/external.php||auth/classes/external.php": [
          "File: auth/classes/external.php -> auth/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:             )",
          "337:         );",
          "338:     }",
          "339: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:     public static function resend_confirmation_email_parameters() {",
          "347:         return new external_function_parameters(",
          "348:             array(",
          "349:                 'username' => new external_value(core_user::get_property_type('username'), 'Username.'),",
          "350:                 'password' => new external_value(core_user::get_property_type('password'), 'Plain text password.'),",
          "351:                 'redirect' => new external_value(PARAM_LOCALURL, 'Redirect the user to this site url after confirmation.',",
          "352:                     VALUE_DEFAULT, ''),",
          "353:             )",
          "354:         );",
          "355:     }",
          "367:     public static function resend_confirmation_email($username, $password, $redirect = '') {",
          "368:         global $PAGE;",
          "370:         $warnings = array();",
          "371:         $params = self::validate_parameters(",
          "372:             self::resend_confirmation_email_parameters(),",
          "373:             array(",
          "374:                 'username' => $username,",
          "375:                 'password' => $password,",
          "376:                 'redirect' => $redirect,",
          "377:             )",
          "378:         );",
          "380:         $context = context_system::instance();",
          "381:         $PAGE->set_context($context);   // Need by internal APIs.",
          "382:         $username = trim(core_text::strtolower($params['username']));",
          "383:         $password = $params['password'];",
          "385:         if (is_restored_user($username)) {",
          "386:             throw new moodle_exception('restoredaccountresetpassword', 'webservice');",
          "387:         }",
          "389:         $user = authenticate_user_login($username, $password);",
          "391:         if (empty($user)) {",
          "392:             throw new moodle_exception('invalidlogin');",
          "393:         }",
          "395:         if ($user->confirmed) {",
          "396:             throw new moodle_exception('alreadyconfirmed');",
          "397:         }",
          "400:         $confirmationurl = null;",
          "401:         if (!empty($params['redirect'])) {",
          "403:             $redirect = new moodle_url($params['redirect']);",
          "405:             $confirmationurl = new moodle_url('/login/confirm.php', array('redirect' => $redirect->out()));",
          "406:         }",
          "407:         $status = send_confirmation_email($user, $confirmationurl);",
          "409:         return array(",
          "410:             'status' => $status,",
          "411:             'warnings' => $warnings,",
          "412:         );",
          "413:     }",
          "421:     public static function resend_confirmation_email_returns() {",
          "423:         return new external_single_structure(",
          "424:             array(",
          "425:                 'status' => new external_value(PARAM_BOOL, 'True if the confirmation email was sent, false otherwise.'),",
          "426:                 'warnings'  => new external_warnings(),",
          "427:             )",
          "428:         );",
          "429:     }",
          "",
          "---------------"
        ],
        "auth/tests/external_test.php||auth/tests/external_test.php": [
          "File: auth/tests/external_test.php -> auth/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: class core_auth_external_testcase extends externallib_advanced_testcase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     protected $oldlog;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         $this->resetAfterTest(true);",
          "50:         $CFG->registerauth = 'email';",
          "51:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         $this->oldlog = ini_get('error_log');",
          "57:         ini_set('error_log', \"$CFG->dataroot/testlog.log\");",
          "58:     }",
          "63:     protected function tearDown() {",
          "64:         ini_set('error_log', $this->oldlog);",
          "65:         parent::tearDown();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:             core_auth_external::is_age_digital_consent_verification_enabled_returns(), $result);",
          "116:         $this->assertTrue($result['status']);",
          "117:     }",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     public function test_resend_confirmation_email() {",
          "138:         global $DB;",
          "140:         $username = 'pepe';",
          "141:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "142:         $firstname = 'Pepe';",
          "143:         $lastname = 'P\u00e9rez';",
          "144:         $email = 'myemail@no.zbc';",
          "147:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "148:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "149:         $this->assertTrue($result['success']);",
          "150:         $this->assertEmpty($result['warnings']);",
          "152:         $result = core_auth_external::resend_confirmation_email($username, $password);",
          "153:         $result = external_api::clean_returnvalue(core_auth_external::resend_confirmation_email_returns(), $result);",
          "154:         $this->assertTrue($result['status']);",
          "155:         $this->assertEmpty($result['warnings']);",
          "156:         $confirmed = $DB->get_field('user', 'confirmed', array('username' => $username));",
          "157:         $this->assertEquals(0, $confirmed);",
          "158:     }",
          "163:     public function test_resend_confirmation_email_invalid_username() {",
          "165:         $username = 'pepe';",
          "166:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "167:         $firstname = 'Pepe';",
          "168:         $lastname = 'P\u00e9rez';",
          "169:         $email = 'myemail@no.zbc';",
          "172:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "173:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "174:         $this->assertTrue($result['success']);",
          "175:         $this->assertEmpty($result['warnings']);",
          "177:         $_SERVER['HTTP_USER_AGENT'] = 'no browser'; // Hack around missing user agent in CLI scripts.",
          "178:         $this->expectException('moodle_exception');",
          "179:         $this->expectExceptionMessage('error/invalidlogin');",
          "180:         $result = core_auth_external::resend_confirmation_email('abc', $password);",
          "181:     }",
          "186:     public function test_resend_confirmation_email_invalid_password() {",
          "188:         $username = 'pepe';",
          "189:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "190:         $firstname = 'Pepe';",
          "191:         $lastname = 'P\u00e9rez';",
          "192:         $email = 'myemail@no.zbc';",
          "195:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "196:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "197:         $this->assertTrue($result['success']);",
          "198:         $this->assertEmpty($result['warnings']);",
          "200:         $_SERVER['HTTP_USER_AGENT'] = 'no browser'; // Hack around missing user agent in CLI scripts.",
          "201:         $this->expectException('moodle_exception');",
          "202:         $this->expectExceptionMessage('error/invalidlogin');",
          "203:         $result = core_auth_external::resend_confirmation_email($username, 'abc');",
          "204:     }",
          "209:     public function test_resend_confirmation_email_already_confirmed_user() {",
          "210:         global $DB;",
          "212:         $username = 'pepe';",
          "213:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "214:         $firstname = 'Pepe';",
          "215:         $lastname = 'P\u00e9rez';",
          "216:         $email = 'myemail@no.zbc';",
          "219:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "220:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "221:         $this->assertTrue($result['success']);",
          "222:         $this->assertEmpty($result['warnings']);",
          "223:         $secret = $DB->get_field('user', 'secret', array('username' => $username));",
          "226:         $result = core_auth_external::confirm_user($username, $secret);",
          "227:         $result = external_api::clean_returnvalue(core_auth_external::confirm_user_returns(), $result);",
          "228:         $this->assertTrue($result['success']);",
          "230:         $this->expectException('moodle_exception');",
          "231:         $this->expectExceptionMessage('error/alreadyconfirmed');",
          "232:         core_auth_external::resend_confirmation_email($username, $password);",
          "233:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         'ajax'          => true,",
          "67:         'loginrequired' => false,",
          "68:     ),",
          "69:     'core_badges_get_user_badges' => array(",
          "70:         'classname'     => 'core_badges_external',",
          "71:         'methodname'    => 'get_user_badges',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     'core_auth_resend_confirmation_email' => array(",
          "70:         'classname'   => 'core_auth_external',",
          "71:         'methodname'  => 'resend_confirmation_email',",
          "72:         'description' => 'Resend confirmation email.',",
          "73:         'type'        => 'write',",
          "74:         'ajax'          => true,",
          "75:         'loginrequired' => false,",
          "76:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018102700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fda136dc832db89ae27ad1d7887fe44607fd990",
      "candidate_info": {
        "commit_hash": "8fda136dc832db89ae27ad1d7887fe44607fd990",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8fda136dc832db89ae27ad1d7887fe44607fd990",
        "files": [
          "h5p/classes/player.php",
          "lang/en/h5p.php",
          "lang/en/role.php",
          "lib/db/access.php",
          "version.php"
        ],
        "message": "MDL-66609 core_h5p: Add capability to deploy H5P content",
        "before_after_code_files": [
          "h5p/classes/player.php||h5p/classes/player.php",
          "lang/en/h5p.php||lang/en/h5p.php",
          "lang/en/role.php||lang/en/role.php",
          "lib/db/access.php||lib/db/access.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "h5p/classes/player.php||h5p/classes/player.php": [
          "File: h5p/classes/player.php -> h5p/classes/player.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:             $h5p = false;",
          "242:         }",
          "249:             $displayoptions = $this->get_display_options($config);",
          "",
          "[Removed Lines]",
          "244:         if (!$h5p) {",
          "246:             return $this->save_h5p($file, $config);",
          "247:         } else {",
          "",
          "[Added Lines]",
          "244:         if ($h5p) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:                 $this->core->h5pF->updateContentFields($h5p->id, ['displayoptions' => $displayoptions]);",
          "254:             }",
          "255:             return $h5p->id;",
          "256:         }",
          "257:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:         } else {",
          "258:             if (!has_capability('moodle/h5p:deploy', $this->context, $file->get_userid())) {",
          "259:                 $this->core->h5pF->setErrorMessage(get_string('nopermissiontodeploy', 'core_h5p'));",
          "260:                 return false;",
          "261:             }",
          "264:             return $this->save_h5p($file, $config);",
          "",
          "---------------"
        ],
        "lang/en/h5p.php||lang/en/h5p.php": [
          "File: lang/en/h5p.php -> lang/en/h5p.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: $string['missinguploadpermissions'] = 'Note that the libraries may exist in the file you uploaded, but you\\'re not allowed to upload new libraries. Contact the site administrator about this.';",
          "124: $string['nocopyright'] = 'No copyright information available for this content.';",
          "125: $string['noextension'] = 'The file you uploaded is not a valid HTML5 Package (It does not have the .h5p file extension)';",
          "126: $string['nojson'] = 'The main h5p.json file is not valid';",
          "127: $string['nounzip'] = 'The file you uploaded is not a valid HTML5 Package (We are unable to unzip it)';",
          "128: $string['offlineDialogBody'] = 'We were unable to send information about your completion of this task. Please check your internet connection.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126: $string['nopermissiontodeploy'] = 'This file can\\'t be displayed because it has been uploaded by a user without the required capability to deploy H5P content.';",
          "",
          "---------------"
        ],
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: $string['grade:view'] = 'View own grades';",
          "261: $string['grade:viewall'] = 'View grades of other users';",
          "262: $string['grade:viewhidden'] = 'View hidden grades for owner';",
          "263: $string['h5p:setdisplayoptions'] = 'Set the display options to an H5P content';",
          "264: $string['highlightedcellsshowdefault'] = 'The permissions highlighted in the table below are the defaults for the role archetype currently selected above.';",
          "265: $string['highlightedcellsshowinherit'] = 'The highlighted cells in the table below show the permission (if any) that will be inherited. Apart from the capabilities whose permission you actually want to alter, you should leave everything set to Inherit.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: $string['h5p:deploy'] = 'Allow to deploy H5P content';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2439:             'editingteacher' => CAP_ALLOW,",
          "2440:         )",
          "2441:     ),",
          "2442: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2444:     'moodle/h5p:deploy' => array(",
          "2445:         'riskbitmask' => RISK_XSS,",
          "2446:         'captype' => 'write',",
          "2447:         'contextlevel' => CONTEXT_MODULE,",
          "2448:         'archetypes' => array(",
          "2449:             'manager'        => CAP_ALLOW,",
          "2450:             'editingteacher' => CAP_ALLOW,",
          "2451:         )",
          "2452:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019102500.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019102500.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a411b499b98afc9901c24a9466c7e322946a04aa",
      "candidate_info": {
        "commit_hash": "a411b499b98afc9901c24a9466c7e322946a04aa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a411b499b98afc9901c24a9466c7e322946a04aa",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.7dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019050100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190501)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019050300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev+ (Build: 20190503)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}