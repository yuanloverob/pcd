{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "232cd94fc4df6b1a885dabed4e253ed8abb191dc",
      "candidate_info": {
        "commit_hash": "232cd94fc4df6b1a885dabed4e253ed8abb191dc",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/232cd94fc4df6b1a885dabed4e253ed8abb191dc",
        "files": [
          "drivers/docker/driver.go",
          "go.mod",
          "go.sum"
        ],
        "message": "chore(deps): bump github.com/docker/docker from 27.4.1+incompatible to 28.0.1+incompatible (#25419)\n\nbackport of commit 459f95ce3f45e8cdbc69340fec41183adae95b04\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "drivers/docker/driver.go||drivers/docker/driver.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/driver.go||drivers/docker/driver.go": [
          "File: drivers/docker/driver.go -> drivers/docker/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: }",
          "709:  archive := filepath.Join(task.TaskDir().LocalDir, driverConfig.LoadImage)",
          "710:  d.logger.Debug(\"loading image from disk\", \"archive\", archive)",
          "",
          "[Removed Lines]",
          "707: func (d *Driver) loadImage(task *drivers.TaskConfig, driverConfig *TaskConfig, client *client.Client) (id string, user string, err error) {",
          "",
          "[Added Lines]",
          "707: func (d *Driver) loadImage(task *drivers.TaskConfig, driverConfig *TaskConfig, dockerClient *client.Client) (id string, user string, err error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:   return \"\", \"\", fmt.Errorf(\"unable to open image archive: %v\", err)",
          "715:  }",
          "718:   return \"\", \"\", err",
          "719:  }",
          "720:  f.Close()",
          "723:  if err != nil {",
          "724:   return \"\", \"\", recoverableErrTimeouts(err)",
          "725:  }",
          "",
          "[Removed Lines]",
          "717:  if _, err := client.ImageLoad(d.ctx, f, true); err != nil {",
          "722:  dockerImage, _, err := client.ImageInspectWithRaw(d.ctx, driverConfig.Image)",
          "",
          "[Added Lines]",
          "717:  if _, err := dockerClient.ImageLoad(d.ctx, f, client.ImageLoadWithQuiet(true)); err != nil {",
          "722:  dockerImage, _, err := dockerClient.ImageInspectWithRaw(d.ctx, driverConfig.Image)",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  github.com/creack/pty v1.1.24",
          "31:  github.com/distribution/reference v0.6.0",
          "32:  github.com/docker/cli v27.5.1+incompatible",
          "34:  github.com/docker/go-connections v0.5.0",
          "35:  github.com/docker/go-units v0.5.0",
          "36:  github.com/dustin/go-humanize v1.0.1",
          "",
          "[Removed Lines]",
          "33:  github.com/docker/docker v27.4.1+incompatible",
          "",
          "[Added Lines]",
          "33:  github.com/docker/docker v28.0.1+incompatible",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "880: github.com/docker/cli v27.5.1+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=",
          "881: github.com/docker/distribution v2.8.3+incompatible h1:AtKxIZ36LoNK51+Z6RpzLpddBirtxJnzDrHLEKxTAYk=",
          "882: github.com/docker/distribution v2.8.3+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=",
          "885: github.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=",
          "886: github.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=",
          "887: github.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=",
          "",
          "[Removed Lines]",
          "883: github.com/docker/docker v27.4.1+incompatible h1:ZJvcY7gfwHn1JF48PfbyXg7Jyt9ZCWDW+GGXOIxEwp4=",
          "884: github.com/docker/docker v27.4.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "[Added Lines]",
          "883: github.com/docker/docker v28.0.1+incompatible h1:FCHjSRdXhNRFjlHMTv4jUNlIBbTeRjrWfeFuJp7jpo0=",
          "884: github.com/docker/docker v28.0.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e97b625486db454d46e40443a2411c54c1710d70",
      "candidate_info": {
        "commit_hash": "e97b625486db454d46e40443a2411c54c1710d70",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e97b625486db454d46e40443a2411c54c1710d70",
        "files": [
          ".changelog/24304.txt",
          "client/lib/cgroupslib/partition_linux.go",
          "nomad/structs/funcs_test.go",
          "nomad/structs/structs.go",
          "nomad/structs/structs_test.go"
        ],
        "message": "Backport of scheduler: take all assigned cpu cores into account instead of only those part of the largest lifecycle into release/1.9.x (#24530)\n\nCo-authored-by: Martijn Vegter <martijn@martijnvegter.com>",
        "before_after_code_files": [
          "client/lib/cgroupslib/partition_linux.go||client/lib/cgroupslib/partition_linux.go",
          "nomad/structs/funcs_test.go||nomad/structs/funcs_test.go",
          "nomad/structs/structs.go||nomad/structs/structs.go",
          "nomad/structs/structs_test.go||nomad/structs/structs_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ],
          "candidate": [
            "nomad/structs/structs.go||nomad/structs/structs.go"
          ]
        }
      },
      "candidate_diff": {
        "client/lib/cgroupslib/partition_linux.go||client/lib/cgroupslib/partition_linux.go": [
          "File: client/lib/cgroupslib/partition_linux.go -> client/lib/cgroupslib/partition_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  p.lock.Lock()",
          "80:  defer p.lock.Unlock()",
          "82:  p.share.RemoveSet(cores)",
          "86:  return p.write()",
          "87: }",
          "",
          "[Removed Lines]",
          "85:  p.reserve.InsertSet(p.usableCores.Intersect(cores))",
          "",
          "[Added Lines]",
          "83:  usableCores := p.usableCores.Intersect(cores)",
          "85:  overlappingCores := p.reserve.Intersect(usableCores)",
          "86:  if overlappingCores.Size() > 0 {",
          "88:   p.log.Warn(\"Unable to exclusively reserve the requested cores\", \"cores\", cores, \"overlapping_cores\", overlappingCores)",
          "89:  }",
          "92:  p.reserve.InsertSet(usableCores)",
          "",
          "---------------"
        ],
        "nomad/structs/funcs_test.go||nomad/structs/funcs_test.go": [
          "File: nomad/structs/funcs_test.go -> nomad/structs/funcs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:  must.Eq(t, 1024, used.Flattened.Memory.MemoryMB)",
          "249: }",
          "251: func TestAllocsFit_TerminalAlloc(t *testing.T) {",
          "252:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: func TestAllocsFit_Cores(t *testing.T) {",
          "252:  ci.Parallel(t)",
          "254:  n := node2k()",
          "256:  a1 := &Allocation{",
          "257:   AllocatedResources: &AllocatedResources{",
          "258:    Tasks: map[string]*AllocatedTaskResources{",
          "259:     \"web\": {",
          "260:      Cpu: AllocatedCpuResources{",
          "261:       CpuShares:     500,",
          "262:       ReservedCores: []uint16{0},",
          "263:      },",
          "264:      Memory: AllocatedMemoryResources{",
          "265:       MemoryMB: 1024,",
          "266:      },",
          "267:     },",
          "268:    },",
          "269:   },",
          "270:  }",
          "272:  a2 := &Allocation{",
          "273:   AllocatedResources: &AllocatedResources{",
          "274:    Tasks: map[string]*AllocatedTaskResources{",
          "275:     \"web-prestart\": {",
          "276:      Cpu: AllocatedCpuResources{",
          "277:       CpuShares:     500,",
          "278:       ReservedCores: []uint16{1},",
          "279:      },",
          "280:      Memory: AllocatedMemoryResources{",
          "281:       MemoryMB: 1024,",
          "282:      },",
          "283:     },",
          "284:     \"web\": {",
          "285:      Cpu: AllocatedCpuResources{",
          "286:       CpuShares:     500,",
          "287:       ReservedCores: []uint16{0},",
          "288:      },",
          "289:      Memory: AllocatedMemoryResources{",
          "290:       MemoryMB: 1024,",
          "291:      },",
          "292:     },",
          "293:    },",
          "294:    TaskLifecycles: map[string]*TaskLifecycleConfig{",
          "295:     \"web-prestart\": {",
          "296:      Hook:    TaskLifecycleHookPrestart,",
          "297:      Sidecar: false,",
          "298:     },",
          "299:    },",
          "300:   },",
          "301:  }",
          "304:  fit, dim, used, err := AllocsFit(n, []*Allocation{a1}, nil, false)",
          "305:  must.NoError(t, err)",
          "306:  must.True(t, fit, must.Sprintf(\"failed for dimension %q\", dim))",
          "307:  must.Eq(t, 500, used.Flattened.Cpu.CpuShares)",
          "308:  must.Eq(t, 1024, used.Flattened.Memory.MemoryMB)",
          "311:  fit, dim, used, err = AllocsFit(n, []*Allocation{a2}, nil, false)",
          "312:  must.NoError(t, err)",
          "313:  must.True(t, fit, must.Sprintf(\"failed for dimension %q\", dim))",
          "314:  must.Eq(t, 1000, used.Flattened.Cpu.CpuShares)",
          "315:  must.Eq(t, 1024, used.Flattened.Memory.MemoryMB)",
          "318:  fit, dim, used, err = AllocsFit(n, []*Allocation{a1, a2}, nil, false)",
          "319:  must.NoError(t, err)",
          "320:  must.False(t, fit)",
          "321:  must.Eq(t, dim, \"cores\")",
          "322: }",
          "",
          "---------------"
        ],
        "nomad/structs/structs.go||nomad/structs/structs.go": [
          "File: nomad/structs/structs.go -> nomad/structs/structs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3856:   Shared: a.Shared,",
          "3857:  }",
          "3872:    } else {",
          "3874:    }",
          "3879:   }",
          "3880:  }",
          "3890:  for _, network := range a.Shared.Networks {",
          "",
          "[Removed Lines]",
          "3859:  prestartSidecarTasks := &AllocatedTaskResources{}",
          "3860:  prestartEphemeralTasks := &AllocatedTaskResources{}",
          "3861:  main := &AllocatedTaskResources{}",
          "3862:  poststartTasks := &AllocatedTaskResources{}",
          "3863:  poststopTasks := &AllocatedTaskResources{}",
          "3865:  for taskName, r := range a.Tasks {",
          "3866:   lc := a.TaskLifecycles[taskName]",
          "3867:   if lc == nil {",
          "3868:    main.Add(r)",
          "3869:   } else if lc.Hook == TaskLifecycleHookPrestart {",
          "3870:    if lc.Sidecar {",
          "3871:     prestartSidecarTasks.Add(r)",
          "3873:     prestartEphemeralTasks.Add(r)",
          "3875:   } else if lc.Hook == TaskLifecycleHookPoststart {",
          "3876:    poststartTasks.Add(r)",
          "3877:   } else if lc.Hook == TaskLifecycleHookPoststop {",
          "3878:    poststopTasks.Add(r)",
          "3883:  main.Add(poststartTasks)",
          "3884:  prestartEphemeralTasks.Max(main)",
          "3885:  prestartEphemeralTasks.Max(poststopTasks)",
          "3886:  prestartSidecarTasks.Add(prestartEphemeralTasks)",
          "3887:  c.Flattened.Add(prestartSidecarTasks)",
          "",
          "[Added Lines]",
          "3860:  prestartLifecycle := &AllocatedTaskResources{}",
          "3861:  mainLifecycle := &AllocatedTaskResources{}",
          "3862:  stopLifecycle := &AllocatedTaskResources{}",
          "3864:  for taskName, taskResources := range a.Tasks {",
          "3865:   taskLifecycle := a.TaskLifecycles[taskName]",
          "3866:   fungibleTaskResources := taskResources.Copy()",
          "3870:   if len(fungibleTaskResources.Cpu.ReservedCores) > 0 {",
          "3871:    c.Flattened.Cpu.Add(&fungibleTaskResources.Cpu)",
          "3872:    fungibleTaskResources.Cpu = AllocatedCpuResources{}",
          "3873:   }",
          "3875:   if taskLifecycle == nil {",
          "3876:    mainLifecycle.Add(fungibleTaskResources)",
          "3877:   } else if taskLifecycle.Hook == TaskLifecycleHookPrestart {",
          "3878:    if taskLifecycle.Sidecar {",
          "3880:     prestartLifecycle.Add(fungibleTaskResources)",
          "3881:     mainLifecycle.Add(fungibleTaskResources)",
          "3883:     prestartLifecycle.Add(fungibleTaskResources)",
          "3885:   } else if taskLifecycle.Hook == TaskLifecycleHookPoststart {",
          "3886:    mainLifecycle.Add(fungibleTaskResources)",
          "3887:   } else if taskLifecycle.Hook == TaskLifecycleHookPoststop {",
          "3888:    stopLifecycle.Add(fungibleTaskResources)",
          "3893:  mainLifecycle.Max(prestartLifecycle)",
          "3894:  mainLifecycle.Max(stopLifecycle)",
          "3897:  c.Flattened.Add(mainLifecycle)",
          "",
          "---------------"
        ],
        "nomad/structs/structs_test.go||nomad/structs/structs_test.go": [
          "File: nomad/structs/structs_test.go -> nomad/structs/structs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7763:  ci.Parallel(t)",
          "7765:  allocationResources := AllocatedResources{",
          "7766:   TaskLifecycles: map[string]*TaskLifecycleConfig{",
          "7767:    \"prestart-task\": {",
          "7768:     Hook:    TaskLifecycleHookPrestart,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7766:   TaskLifecycles: map[string]*TaskLifecycleConfig{",
          "7767:    \"prestart-task\": {",
          "7768:     Hook:    TaskLifecycleHookPrestart,",
          "7769:     Sidecar: false,",
          "7770:    },",
          "7771:    \"poststop-task\": {",
          "7772:     Hook:    TaskLifecycleHookPoststop,",
          "7773:     Sidecar: false,",
          "7774:    },",
          "7775:   },",
          "7776:   Tasks: map[string]*AllocatedTaskResources{",
          "7777:    \"prestart-task\": {",
          "7778:     Cpu: AllocatedCpuResources{",
          "7779:      CpuShares: 2000,",
          "7780:     },",
          "7781:    },",
          "7782:    \"main-task\": {",
          "7783:     Cpu: AllocatedCpuResources{",
          "7784:      CpuShares: 4000,",
          "7785:     },",
          "7786:    },",
          "7787:    \"poststop-task\": {",
          "7788:     Cpu: AllocatedCpuResources{",
          "7789:      CpuShares: 1000,",
          "7790:     },",
          "7791:    },",
          "7792:   },",
          "7793:  }",
          "7796:  must.Eq(t, 4000, allocationResources.Comparable().Flattened.Cpu.CpuShares)",
          "7797:  must.Len(t, 0, allocationResources.Comparable().Flattened.Cpu.ReservedCores)",
          "7799:  allocationResources = AllocatedResources{",
          "7800:   TaskLifecycles: map[string]*TaskLifecycleConfig{",
          "7801:    \"prestart-task\": {",
          "7802:     Hook:    TaskLifecycleHookPrestart,",
          "7803:     Sidecar: false,",
          "7804:    },",
          "7805:    \"prestart-sidecar-task\": {",
          "7806:     Hook:    TaskLifecycleHookPrestart,",
          "7807:     Sidecar: true,",
          "7808:    },",
          "7809:    \"poststop-task\": {",
          "7810:     Hook:    TaskLifecycleHookPoststop,",
          "7811:     Sidecar: false,",
          "7812:    },",
          "7813:   },",
          "7814:   Tasks: map[string]*AllocatedTaskResources{",
          "7815:    \"prestart-task\": {",
          "7816:     Cpu: AllocatedCpuResources{",
          "7817:      CpuShares:     1000,",
          "7818:      ReservedCores: []uint16{0},",
          "7819:     },",
          "7820:    },",
          "7821:    \"prestart-sidecar-task\": {",
          "7822:     Cpu: AllocatedCpuResources{",
          "7823:      CpuShares:     2000,",
          "7824:      ReservedCores: []uint16{1, 2},",
          "7825:     },",
          "7826:    },",
          "7827:    \"main-task\": {",
          "7828:     Cpu: AllocatedCpuResources{",
          "7829:      CpuShares:     2000,",
          "7830:      ReservedCores: []uint16{3, 4},",
          "7831:     },",
          "7832:    },",
          "7833:    \"poststop-task\": {",
          "7834:     Cpu: AllocatedCpuResources{",
          "7835:      CpuShares:     1000,",
          "7836:      ReservedCores: []uint16{5},",
          "7837:     },",
          "7838:    },",
          "7839:   },",
          "7840:  }",
          "7843:  must.Eq(t, 6000, allocationResources.Comparable().Flattened.Cpu.CpuShares)",
          "7844:  must.Len(t, 6, allocationResources.Comparable().Flattened.Cpu.ReservedCores)",
          "7846:  allocationResources = AllocatedResources{",
          "7847:   TaskLifecycles: map[string]*TaskLifecycleConfig{",
          "7848:    \"prestart-task\": {",
          "7849:     Hook:    TaskLifecycleHookPrestart,",
          "7850:     Sidecar: false,",
          "7851:    },",
          "7852:    \"poststop-task\": {",
          "7853:     Hook:    TaskLifecycleHookPoststop,",
          "7854:     Sidecar: false,",
          "7855:    },",
          "7856:   },",
          "7857:   Tasks: map[string]*AllocatedTaskResources{",
          "7858:    \"prestart-task\": {",
          "7859:     Cpu: AllocatedCpuResources{",
          "7860:      CpuShares: 1000,",
          "7861:     },",
          "7862:    },",
          "7863:    \"main-task\": {",
          "7864:     Cpu: AllocatedCpuResources{",
          "7865:      CpuShares:     2000,",
          "7866:      ReservedCores: []uint16{1, 2},",
          "7867:     },",
          "7868:    },",
          "7869:    \"poststop-task\": {",
          "7870:     Cpu: AllocatedCpuResources{",
          "7871:      CpuShares: 1000,",
          "7872:     },",
          "7873:    },",
          "7874:   },",
          "7875:  }",
          "7880:  must.Eq(t, 3000, allocationResources.Comparable().Flattened.Cpu.CpuShares)",
          "7881:  must.Len(t, 2, allocationResources.Comparable().Flattened.Cpu.ReservedCores)",
          "7883:  allocationResources = AllocatedResources{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7816:  }",
          "7821: }",
          "7823: func requireErrors(t *testing.T, err error, expected ...string) {",
          "",
          "[Removed Lines]",
          "7819:  must.Eq(t, 5000, allocationResources.Comparable().Flattened.Cpu.CpuShares)",
          "7820:  must.Len(t, 5, allocationResources.Comparable().Flattened.Cpu.ReservedCores)",
          "",
          "[Added Lines]",
          "7937:  must.Eq(t, 9000, allocationResources.Comparable().Flattened.Cpu.CpuShares)",
          "7938:  must.Len(t, 9, allocationResources.Comparable().Flattened.Cpu.ReservedCores)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e94dd5fa99c4bccef65a502eb59c1996be7aa9e",
      "candidate_info": {
        "commit_hash": "3e94dd5fa99c4bccef65a502eb59c1996be7aa9e",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/3e94dd5fa99c4bccef65a502eb59c1996be7aa9e",
        "files": [
          ".changelog/24818.txt",
          "ui/app/styles/components/services.scss"
        ],
        "message": "ui: Fill service check background object for pending checks (#24866)\n\nbackport of commit 75d0ac657ec0f7d7782b41d4c1e0bf7925f712a6\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "ui/app/styles/components/services.scss||ui/app/styles/components/services.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/styles/components/services.scss||ui/app/styles/components/services.scss": [
          "File: ui/app/styles/components/services.scss -> ui/app/styles/components/services.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:           &.status-success {",
          "120:             background-color: $nomad-green;",
          "121:           }",
          "122:           &.status-failure {",
          "123:             background-color: $red;",
          "124:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:           &.status-pending {",
          "123:             background-color: $gray-300;",
          "124:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f5dd5c961c34debbcf4786e3e2d96bf3e3f8529",
      "candidate_info": {
        "commit_hash": "5f5dd5c961c34debbcf4786e3e2d96bf3e3f8529",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5f5dd5c961c34debbcf4786e3e2d96bf3e3f8529",
        "files": [
          ".changelog/25104.txt",
          "ui/app/models/job.js",
          "ui/app/templates/components/job-page/parts/title.hbs",
          "ui/app/templates/components/job-version.hbs",
          "ui/mirage/scenarios/default.js",
          "ui/tests/acceptance/job-detail-test.js",
          "ui/tests/acceptance/job-versions-test.js"
        ],
        "message": "backport of commit 7d08e79da309ab1ab68c07385f2a61d296006211 (#25218)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/models/job.js||ui/app/models/job.js",
          "ui/app/templates/components/job-page/parts/title.hbs||ui/app/templates/components/job-page/parts/title.hbs",
          "ui/app/templates/components/job-version.hbs||ui/app/templates/components/job-version.hbs",
          "ui/mirage/scenarios/default.js||ui/mirage/scenarios/default.js",
          "ui/tests/acceptance/job-detail-test.js||ui/tests/acceptance/job-detail-test.js",
          "ui/tests/acceptance/job-versions-test.js||ui/tests/acceptance/job-versions-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/models/job.js||ui/app/models/job.js": [
          "File: ui/app/models/job.js -> ui/app/models/job.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     return this.type === 'system' || this.type === 'sysbatch';",
          "352:   }",
          "354:   @belongsTo('job', { inverse: 'children' }) parent;",
          "355:   @hasMany('job', { inverse: 'parent' }) children;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:   @computed('type')",
          "358:   get hasVersionStability() {",
          "359:     return (",
          "360:       this.type !== 'system' &&",
          "361:       this.type !== 'sysbatch' &&",
          "362:       this.type !== 'batch'",
          "363:     );",
          "364:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:       .any((version) => version.get('stable'));",
          "456:   }",
          "459:   get latestStableVersion() {",
          "460:     return this.versions.filterBy('stable').sortBy('number').reverse().slice(1)",
          "461:       .firstObject;",
          "462:   }",
          "464:   get actions() {",
          "465:     return this.taskGroups.reduce((acc, taskGroup) => {",
          "466:       return acc.concat(",
          "",
          "[Removed Lines]",
          "458:   @computed('versions.@each.stable')",
          "",
          "[Added Lines]",
          "470:   @computed('versions.@each.stable', 'aggregateAllocStatus.label')",
          "476:   @computed('versions.[]', 'aggregateAllocStatus.label')",
          "477:   get latestVersion() {",
          "478:     return this.versions.sortBy('number').reverse().slice(1).firstObject;",
          "479:   }",
          "",
          "---------------"
        ],
        "ui/app/templates/components/job-page/parts/title.hbs||ui/app/templates/components/job-page/parts/title.hbs": [
          "File: ui/app/templates/components/job-page/parts/title.hbs -> ui/app/templates/components/job-page/parts/title.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:             @awaitingConfirmation={{this.revertTo.isRunning}}",
          "102:             @onConfirm={{perform this.revertTo this.job.latestStableVersion}}",
          "103:           />",
          "104:         {{else}}",
          "105:           <Hds::Button",
          "106:             data-test-edit-and-resubmit",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:         {{else if",
          "105:           (and",
          "106:             (not this.job.hasVersionStability)",
          "107:             this.job.latestVersion",
          "108:           )",
          "109:         }}",
          "110:           <TwoStepButton",
          "111:             data-test-revert",
          "112:             @alignRight={{true}}",
          "113:             @idleText=\"Revert to last version (v{{this.job.latestVersion.number}})\"",
          "114:             @cancelText=\"Cancel\"",
          "115:             @confirmText=\"Yes, Revert to last version\"",
          "116:             @confirmationMessage=\"Are you sure you want to revert to the last version?\"",
          "117:             @awaitingConfirmation={{this.revertTo.isRunning}}",
          "118:             @onConfirm={{perform this.revertTo this.job.latestVersion}}",
          "119:           />",
          "120:           <Hds::Button",
          "121:             data-test-edit-and-resubmit",
          "122:             @color=\"primary\" @isInline={{true}} @text=\"Edit and Resubmit job\" @route={{\"jobs.job.definition\" this.job.id}} @query={{hash isEditing=true}} />",
          "",
          "---------------"
        ],
        "ui/app/templates/components/job-version.hbs||ui/app/templates/components/job-version.hbs": [
          "File: ui/app/templates/components/job-version.hbs -> ui/app/templates/components/job-version.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   <div class=\"boxed-section {{if this.version.versionTag \"tagged\"}}\" data-test-tagged-version={{if this.version.versionTag \"true\" \"false\"}}>",
          "9:     <header class=\"boxed-section-head is-light inline-definitions\">",
          "10:       Version #{{this.version.number}}",
          "15:       <span class=\"pair is-faded\">",
          "16:         <span class=\"term\">Submitted</span>",
          "17:         <span data-test-version-submit-time class=\"submit-date\">{{format-ts this.version.submitTime}}</span>",
          "",
          "[Removed Lines]",
          "11:       <span class=\"bumper-left pair is-faded\">",
          "12:         <span class=\"term\">Stable</span>",
          "13:         <span class=\"badge is-light is-faded\" data-test-version-stability><code>{{this.version.stable}}</code></span>",
          "14:       </span>",
          "",
          "[Added Lines]",
          "12:       {{#if this.version.job.hasVersionStability}}",
          "13:         <span class=\"bumper-left pair is-faded\">",
          "14:           <span class=\"term\">Stable</span>",
          "15:           <span class=\"badge is-light is-faded\" data-test-version-stability><code>{{this.version.stable}}</code></span>",
          "16:         </span>",
          "17:       {{else}}",
          "18:         <span class=\"bumper-left\" />",
          "19:       {{/if}}",
          "",
          "---------------"
        ],
        "ui/mirage/scenarios/default.js||ui/mirage/scenarios/default.js": [
          "File: ui/mirage/scenarios/default.js -> ui/mirage/scenarios/default.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:     shallow: true,",
          "1238:     createAllocations: false,",
          "1239:     groupAllocCount: 0,",
          "1240:   });",
          "1242:   const nonRevertableJob = server.create('job', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1240:     type: 'service',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1246:     shallow: true,",
          "1247:     createAllocations: false,",
          "1248:     groupAllocCount: 0,",
          "1249:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250:     type: 'service',",
          "1251:   });",
          "1253:   const revertableBatchJob = server.create('job', {",
          "1254:     name: 'revertable-batch-job',",
          "1255:     stopped: false,",
          "1256:     status: 'dead',",
          "1257:     noDeployments: true,",
          "1258:     shallow: true,",
          "1259:     type: 'batch',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1272:     .all()",
          "1273:     .filter((v) => v.jobId === nonRevertableJob.id)",
          "1274:     .models.forEach((v) => v.destroy());",
          "1276:   server.create('job-version', {",
          "1277:     job: revertableJob,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:   server.schema.jobVersions",
          "1287:     .all()",
          "1288:     .filter((v) => v.jobId === revertableBatchJob.id)",
          "1289:     .models.forEach((v) => v.destroy());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1322:     noActiveDeployment: true,",
          "1323:   });",
          "1325:   server.schema.jobVersions",
          "1326:     .all()",
          "1327:     .filter((v) => v.jobId === revertableJob.id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1340:   server.create('job-version', {",
          "1341:     job: revertableBatchJob,",
          "1342:     namespace: revertableBatchJob.namespace,",
          "1343:     version: 0,",
          "1344:     stable: false, // <--- ignored by the UI by way of job.hasVersionStability",
          "1345:     noActiveDeployment: true,",
          "1346:   });",
          "1348:   server.create('job-version', {",
          "1349:     job: revertableBatchJob,",
          "1350:     namespace: revertableBatchJob.namespace,",
          "1351:     version: 1,",
          "1352:     stable: false, // <--- ignored by the UI by way of job.hasVersionStability",
          "1353:     noActiveDeployment: true,",
          "1354:   });",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/job-detail-test.js||ui/tests/acceptance/job-detail-test.js": [
          "File: ui/tests/acceptance/job-detail-test.js -> ui/tests/acceptance/job-detail-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:     assert.ok(JobDetail.editAndResubmit.isPresent);",
          "865:   });",
          "867:   test('Clicking the resubmit button navigates to the job definition page in edit mode', async function (assert) {",
          "868:     const job = server.db.jobs.findBy((j) => j.name === 'non-revertable-job');",
          "869:     await JobDetail.visit({ id: job.id });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:   test('A batch job with a previous version can be reverted', async function (assert) {",
          "868:     const revertableSystemJob = server.db.jobs.findBy(",
          "869:       (j) => j.name === 'revertable-batch-job'",
          "870:     );",
          "871:     await JobDetail.visit({ id: revertableSystemJob.id });",
          "872:     assert.ok(JobDetail.revert.isPresent);",
          "873:     assert.equal(JobDetail.revert.text, 'Revert to last version (v0)');",
          "874:   });",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/job-versions-test.js||ui/tests/acceptance/job-versions-test.js": [
          "File: ui/tests/acceptance/job-versions-test.js -> ui/tests/acceptance/job-versions-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:       namespaceId: namespace.id,",
          "32:       createAllocations: false,",
          "33:       noDeployments: true,",
          "34:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:       type: 'service',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85c8656eff1a115503d312b9c786e05c8b39584a",
      "candidate_info": {
        "commit_hash": "85c8656eff1a115503d312b9c786e05c8b39584a",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/85c8656eff1a115503d312b9c786e05c8b39584a",
        "files": [
          ".changelog/24622.txt",
          "ui/app/templates/components/job-editor/edit.hbs"
        ],
        "message": "backport of commit 04e930b75637f2e6cf4f80663e8c3e608f633285 (#24710)\n\nCo-authored-by: Daniel Peinhopf <84123899+sevensolutions@users.noreply.github.com>",
        "before_after_code_files": [
          "ui/app/templates/components/job-editor/edit.hbs||ui/app/templates/components/job-editor/edit.hbs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/templates/components/job-editor/edit.hbs||ui/app/templates/components/job-editor/edit.hbs": [
          "File: ui/app/templates/components/job-editor/edit.hbs -> ui/app/templates/components/job-editor/edit.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:       }}",
          "71:     ></div>",
          "72:   </div>",
          "74:     <div class=\"boxed-section\" style=\"margin-top: 10px\">",
          "75:       <div class=\"boxed-section-head\">",
          "76:         Edit HCL Variable Values",
          "77:       </div>",
          "78:       <div class=\"boxed-section-body is-full-bleed\">",
          "79:         <div",
          "",
          "[Removed Lines]",
          "73:   {{#if (eq @data.view \"job-spec\")}}",
          "",
          "[Added Lines]",
          "73:   {{#if (or (eq @data.view \"job-spec\") @data.job.isNew)}}",
          "76:         {{#if @data.job.isNew}}",
          "77:         HCL Variable Values",
          "78:         {{else}}",
          "80:         {{/if}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}