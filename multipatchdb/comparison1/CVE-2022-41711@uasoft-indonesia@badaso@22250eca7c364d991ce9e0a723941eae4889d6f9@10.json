{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee8483c9f1eae32ab864a178cfb83b9f0bf70709",
      "candidate_info": {
        "commit_hash": "ee8483c9f1eae32ab864a178cfb83b9f0bf70709",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/ee8483c9f1eae32ab864a178cfb83b9f0bf70709",
        "files": [
          "src/Helpers/GetData.php"
        ],
        "message": "fix bug permission roles",
        "before_after_code_files": [
          "src/Helpers/GetData.php||src/Helpers/GetData.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use ReflectionClass;",
          "8: use Uasoft\\Badaso\\Models\\DataType;",
          "9: use Uasoft\\Badaso\\Models\\Permission;",
          "11: class GetData",
          "12: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: use Uasoft\\Badaso\\Models\\User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:         $field_identify_related_user = $permissions ? $permissions['field_identify_related_user'] : null;",
          "336:         $roles_can_see_all_data = json_decode($permissions) ? json_decode($permissions['roles_can_see_all_data']) : [];",
          "339:         foreach ($user_roles as $key => $user_role) {",
          "340:             $is_roles = in_array($user_role->name, $roles_can_see_all_data);",
          "",
          "[Removed Lines]",
          "337:         $user_roles = auth()->user()->roles;",
          "",
          "[Added Lines]",
          "338:         $user_roles = User::with('roles')->get();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f5dba3e5aafd322a985e9ad93cfc46937c4e737",
      "candidate_info": {
        "commit_hash": "0f5dba3e5aafd322a985e9ad93cfc46937c4e737",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/0f5dba3e5aafd322a985e9ad93cfc46937c4e737",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "remove comment",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1227:     public function testAddEditEntityCrudManagement()",
          "1228:     {",
          "1229:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "1231:         $first_table = $tables[0];",
          "1233:         $response_read_table_entities = CallHelperTest::getCache($this->KEY_DATA_RESPONSE_READ_TABLE_ENTITY);",
          "",
          "[Removed Lines]",
          "1230:         dd($tables);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52f280fd023c79d003f5f3766419cf8bd3e50dec",
      "candidate_info": {
        "commit_hash": "52f280fd023c79d003f5f3766419cf8bd3e50dec",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/52f280fd023c79d003f5f3766419cf8bd3e50dec",
        "files": [
          "src/Controllers/BadasoAuthController.php",
          "src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php",
          "src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php",
          "src/Models/Permission.php",
          "src/Models/User.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoAuthController.php||src/Controllers/BadasoAuthController.php",
          "src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php||src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php",
          "src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php||src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php",
          "src/Models/Permission.php||src/Models/Permission.php",
          "src/Models/User.php||src/Models/User.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoAuthController.php||src/Controllers/BadasoAuthController.php": [
          "File: src/Controllers/BadasoAuthController.php -> src/Controllers/BadasoAuthController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use Illuminate\\Support\\Facades\\DB;",
          "9: use Illuminate\\Support\\Facades\\Hash;",
          "10: use Illuminate\\Support\\Facades\\Mail;",
          "12: use PHPOpenSourceSaver\\JWTAuth\\Exceptions\\JWTException;",
          "13: use Uasoft\\Badaso\\Exceptions\\SingleException;",
          "14: use Uasoft\\Badaso\\Facades\\Badaso;",
          "15: use Uasoft\\Badaso\\Helpers\\ApiResponse;",
          "",
          "[Removed Lines]",
          "11: use stdClass;",
          "",
          "[Added Lines]",
          "12: use stdClass;",
          "",
          "---------------"
        ],
        "src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php||src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php": [
          "File: src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php -> src/Migrations/2022_03_18_075818_add_event_column_to_activity_log_table.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "5: use Illuminate\\Database\\Migrations\\Migration;",
          "7: class AddEventColumnToActivityLogTable extends Migration",
          "8: {",
          "",
          "[Removed Lines]",
          "3: use Illuminate\\Support\\Facades\\Schema;",
          "4: use Illuminate\\Database\\Schema\\Blueprint;",
          "",
          "[Added Lines]",
          "4: use Illuminate\\Database\\Schema\\Blueprint;",
          "5: use Illuminate\\Support\\Facades\\Schema;",
          "",
          "---------------"
        ],
        "src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php||src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php": [
          "File: src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php -> src/Migrations/2022_03_18_075819_add_batch_uuid_column_to_activity_log_table.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "5: use Illuminate\\Database\\Migrations\\Migration;",
          "7: class AddBatchUuidColumnToActivityLogTable extends Migration",
          "8: {",
          "",
          "[Removed Lines]",
          "3: use Illuminate\\Support\\Facades\\Schema;",
          "4: use Illuminate\\Database\\Schema\\Blueprint;",
          "",
          "[Added Lines]",
          "4: use Illuminate\\Database\\Schema\\Blueprint;",
          "5: use Illuminate\\Support\\Facades\\Schema;",
          "",
          "---------------"
        ],
        "src/Models/Permission.php||src/Models/Permission.php": [
          "File: src/Models/Permission.php -> src/Models/Permission.php"
        ],
        "src/Models/User.php||src/Models/User.php": [
          "File: src/Models/User.php -> src/Models/User.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         return $this->belongsToMany(Role::class, config('badaso.database.prefix').'user_roles');",
          "87:     }",
          "90:         return LogOptions::defaults();",
          "91:     }",
          "",
          "[Removed Lines]",
          "89:     public function getActivitylogOptions(): LogOptions {",
          "",
          "[Added Lines]",
          "89:     public function getActivitylogOptions(): LogOptions",
          "90:     {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bfc38ca0448f1ee46e91deddfe68d4ed3bed49c",
      "candidate_info": {
        "commit_hash": "7bfc38ca0448f1ee46e91deddfe68d4ed3bed49c",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/7bfc38ca0448f1ee46e91deddfe68d4ed3bed49c",
        "files": [
          "src/Controllers/BadasoRolePermissionController.php",
          "src/Controllers/BadasoUserRoleController.php",
          "src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php",
          "tests/Feature/BadasoApiMenuItemTest.php",
          "tests/Feature/BadasoApiMenuTest.php",
          "tests/Feature/BadasoApiPermissionTest copy.php",
          "tests/Feature/BadasoApiPermissionTest.php",
          "tests/Feature/BadasoApiRolePermissionTest.php",
          "tests/Feature/BadasoApiRoleTest.php",
          "tests/Feature/BadasoApiUserRoleTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php",
          "src/Controllers/BadasoUserRoleController.php||src/Controllers/BadasoUserRoleController.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php",
          "tests/Feature/BadasoApiMenuItemTest.php||tests/Feature/BadasoApiMenuItemTest.php",
          "tests/Feature/BadasoApiMenuTest.php||tests/Feature/BadasoApiMenuTest.php",
          "tests/Feature/BadasoApiPermissionTest.php||tests/Feature/BadasoApiPermissionTest.php",
          "tests/Feature/BadasoApiRolePermissionTest.php||tests/Feature/BadasoApiRolePermissionTest.php",
          "tests/Feature/BadasoApiRoleTest.php||tests/Feature/BadasoApiRoleTest.php",
          "tests/Feature/BadasoApiUserRoleTest.php||tests/Feature/BadasoApiUserRoleTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php": [
          "File: src/Controllers/BadasoRolePermissionController.php -> src/Controllers/BadasoRolePermissionController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         try {",
          "18:             $role_permissions = RolePermission::all();",
          "19:             foreach ($role_permissions as $index => $role_permission) {",
          "21:             }",
          "",
          "[Removed Lines]",
          "20:                 $role_permissions[$index]->permission = $role_permission->permission ;",
          "",
          "[Added Lines]",
          "20:                 $role_permissions[$index]->permission = $role_permission->permission;",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoUserRoleController.php||src/Controllers/BadasoUserRoleController.php": [
          "File: src/Controllers/BadasoUserRoleController.php -> src/Controllers/BadasoUserRoleController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         try {",
          "18:             $user_roles = UserRole::all();",
          "19:             foreach ($user_roles as $index => $user_role) {",
          "22:             }",
          "24:             $data['user_roles'] = $user_roles;",
          "",
          "[Removed Lines]",
          "20:                 $user_role->role ;",
          "21:                 $user_role->user ;",
          "",
          "[Added Lines]",
          "20:                 $user_role->role;",
          "21:                 $user_role->user;",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         $test_case->assertSame($bearer_token_authorize, $bearer_cache_token_authorize);",
          "100:     }",
          "103:         $name = env('BADASO_USER_NAME', 'badaso.test');",
          "104:         $email = \"{$name}@test.com\";",
          "105:         User::where('email', $email)->first()->delete();",
          "",
          "[Removed Lines]",
          "102:     public static function handleDeleteUserAdmin(){",
          "",
          "[Added Lines]",
          "102:     public static function handleDeleteUserAdmin()",
          "103:     {",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "5: use Illuminate\\Database\\Schema\\Blueprint;",
          "6: use Illuminate\\Support\\Facades\\DB;",
          "",
          "[Removed Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "",
          "[Added Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:         $table_names = [];",
          "253:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "254:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "256:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "257:                     $table->id();",
          "",
          "[Removed Lines]",
          "255:             if (!Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "255:             if (! Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:                 }",
          "450:                 PHP;",
          "451:                 $model_path = app_path(\"Models/$model_file_name\");",
          "453:                     file_put_contents($model_path, $model_body);",
          "454:                 }",
          "",
          "[Removed Lines]",
          "452:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "452:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "470:             $controller_data = [];",
          "471:             if (rand(0, 1)) {",
          "474:                 $controller_file_name = \"{$controller_name}.php\";",
          "475:                 $controller_body = <<<PHP",
          "476:                 <?php",
          "",
          "[Removed Lines]",
          "473:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "473:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "479:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "480:                 PHP;",
          "481:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "483:                     file_put_contents($controller_path, $controller_body);",
          "484:                 }",
          "",
          "[Removed Lines]",
          "482:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "482:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "781:                 }",
          "782:                 PHP;",
          "783:                 $model_path = app_path(\"Models/$model_file_name\");",
          "785:                     file_put_contents($model_path, $model_body);",
          "786:                 }",
          "",
          "[Removed Lines]",
          "784:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "784:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "802:             $controller_data = [];",
          "803:             if (rand(0, 1)) {",
          "806:                 $controller_file_name = \"{$controller_name}.php\";",
          "807:                 $controller_body = <<<PHP",
          "808:                 <?php",
          "",
          "[Removed Lines]",
          "805:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "805:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "811:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "812:                 PHP;",
          "813:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "815:                     file_put_contents($controller_path, $controller_body);",
          "816:                 }",
          "",
          "[Removed Lines]",
          "814:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "814:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "831:             $request_body = [",
          "832:                 'name' =>  $table_name,",
          "833:                 'slug' =>  $table_name,",
          "836:                 'icon' =>  'add',",
          "837:                 'modelName' =>  $model,",
          "838:                 'policyName' =>  '',",
          "",
          "[Removed Lines]",
          "834:                 'displayNameSingular' =>  $table_label . '(update)',",
          "835:                 'displayNamePlural' =>  $table_label . '(update)',",
          "",
          "[Added Lines]",
          "834:                 'displayNameSingular' =>  $table_label.'(update)',",
          "835:                 'displayNamePlural' =>  $table_label.'(update)',",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "918:             $controller_name = \"{$name}Controller.php\";",
          "920:             if (file_exists($controller_path)) {",
          "921:                 unlink($controller_path);",
          "922:             }",
          "925:             $model_name = \"{$name}.php\";",
          "927:             if (file_exists($model_path)) {",
          "928:                 unlink($model_path);",
          "929:             }",
          "",
          "[Removed Lines]",
          "919:             $controller_path = app_path('Http/Controllers/' . $controller_name);",
          "926:             $model_path = app_path('Models/' . $model_name);",
          "",
          "[Added Lines]",
          "919:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "926:             $model_path = app_path('Models/'.$model_name);",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiMenuItemTest.php||tests/Feature/BadasoApiMenuItemTest.php": [
          "File: tests/Feature/BadasoApiMenuItemTest.php -> tests/Feature/BadasoApiMenuItemTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "7: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Models\\Menu;",
          "9: use Uasoft\\Badaso\\Models\\MenuItem;",
          "13: use Uasoft\\Badaso\\Models\\Permission;",
          "15: class BadasoApiMenuItemTest extends TestCase",
          "16: {",
          "20:     public function testStartInit()",
          "21:     {",
          "",
          "[Removed Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "5: use Tests\\TestCase;",
          "6: use Prophecy\\Call\\Call;",
          "10: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "11: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "12: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "18:     public static $KEY_DATA_CREATED_MENU_ITEMS  = 'DATA_CREATED_MENU_ITEMS';",
          "",
          "[Added Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "14:     public static $KEY_DATA_CREATED_MENU_ITEMS = 'DATA_CREATED_MENU_ITEMS';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     {",
          "28:         $menus = Menu::all();",
          "29:         foreach ($menus as $index => $menu) {",
          "31:                 'menuId' => $menu->id,",
          "32:             ]);",
          "33:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "30:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item\"), [",
          "",
          "[Added Lines]",
          "26:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus/item'), [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     {",
          "57:         $menus = Menu::all();",
          "58:         foreach ($menus as $index => $menu) {",
          "60:                 'menu_key' => $menu->key,",
          "61:             ]);",
          "62:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "59:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item-by-key\"), [",
          "",
          "[Added Lines]",
          "55:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus/item-by-key'), [",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:         $menus = Menu::all();",
          "88:         foreach ($menus as $index => $menu) {",
          "89:             $request_data = [",
          "98:             ];",
          "100:             $response->assertSuccessful();",
          "102:             $response_menu_item = $response->json('data');",
          "",
          "[Removed Lines]",
          "90:                 \"menuId\" =>  $menu->id,",
          "91:                 \"title\" =>  Str::random(10),",
          "92:                 \"url\" =>  Str::random(10),",
          "93:                 \"target\" =>  \"_self\",",
          "94:                 \"iconClass\" =>  'add',",
          "95:                 \"color\" =>  '#FFFFFF',",
          "96:                 \"parentId\" =>  null,",
          "97:                 \"order\" =>  null",
          "99:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/menus/item/add\"), $request_data);",
          "",
          "[Added Lines]",
          "86:                 'menuId' =>  $menu->id,",
          "87:                 'title' =>  Str::random(10),",
          "88:                 'url' =>  Str::random(10),",
          "89:                 'target' =>  '_self',",
          "90:                 'iconClass' =>  'add',",
          "91:                 'color' =>  '#FFFFFF',",
          "92:                 'parentId' =>  null,",
          "93:                 'order' =>  null,",
          "95:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/menus/item/add'), $request_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "129:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "130:             $request_data = [",
          "131:                 'menuItemId' => $menu_item_id,",
          "138:             ];",
          "141:             $response->assertSuccessful();",
          "143:             $menu_item = MenuItem::find($menu_item_id)->toArray();",
          "",
          "[Removed Lines]",
          "132:                 \"menuId\" =>  $menu_id,",
          "133:                 \"title\" =>  Str::random(10),",
          "134:                 \"url\" =>  \"/\" . Str::random(10),",
          "135:                 \"target\" =>  \"_self\",",
          "136:                 \"iconClass\" =>  'add',",
          "137:                 \"color\" =>  '#OOOOOO',",
          "140:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/edit\"), $request_data);",
          "",
          "[Added Lines]",
          "128:                 'menuId' =>  $menu_id,",
          "129:                 'title' =>  Str::random(10),",
          "130:                 'url' =>  '/'.Str::random(10),",
          "131:                 'target' =>  '_self',",
          "132:                 'iconClass' =>  'add',",
          "133:                 'color' =>  '#OOOOOO',",
          "136:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/menus/item/edit'), $request_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "158:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "161:                 'menu_id' => $menu_id,",
          "162:                 'menu_item_id' => $menu_item_id,",
          "163:             ]);",
          "",
          "[Removed Lines]",
          "160:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/read\"), [",
          "",
          "[Added Lines]",
          "155:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus/item/read'), [",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "191:             ];",
          "192:         })->toArray();",
          "195:             'menuId' => $menuId,",
          "196:             'menuItems' => (array) $menu_items,",
          "197:         ]);",
          "",
          "[Removed Lines]",
          "194:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/arrange-items\"), [",
          "",
          "[Added Lines]",
          "189:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/menus/arrange-items'), [",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:     {",
          "212:         $data_created_menu_items = CallHelperTest::getCache(self::$KEY_DATA_CREATED_MENU_ITEMS);",
          "213:         foreach ($data_created_menu_items as $key => ['menu_id' => $menu_id, 'menu_item_id' => $menu_item_id]) {",
          "217:             ]);",
          "218:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "214:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/delete\"), [",
          "215:                 \"menuId\" =>  $menu_id,",
          "216:                 \"menuItemId\" =>  $menu_item_id",
          "",
          "[Added Lines]",
          "209:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/menus/item/delete'), [",
          "210:                 'menuId' =>  $menu_id,",
          "211:                 'menuItemId' =>  $menu_item_id,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:     public function testMenuItemGetPermission()",
          "226:     {",
          "228:         $permission_keys = Permission::get()->map(function ($item) {",
          "229:             return $item->key;",
          "230:         })->toArray();",
          "233:         $menus = Menu::all();",
          "234:         foreach ($menus as $index => $menu) {",
          "235:             shuffle($permission_keys);",
          "236:             $permission_menu_keys = array_slice($permission_keys, 0, rand(1, 5));",
          "239:             $menu_id = $menu->id;",
          "240:             $create_data = [",
          "247:                 'order' => 1,",
          "249:             ];",
          "250:             $menu_item = MenuItem::create($create_data);",
          "253:                 'menu_id' => $menu_id,",
          "255:             ]);",
          "256:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "237:             $permissions = join(\",\", $permission_menu_keys);",
          "241:                 \"menu_id\" =>  $menu_id,",
          "242:                 \"title\" =>  Str::random(10),",
          "243:                 \"url\" =>  Str::random(10),",
          "244:                 \"target\" =>  \"_self\",",
          "245:                 \"icon_class\" =>  'add',",
          "246:                 \"color\" =>  '#FFFFFF',",
          "248:                 \"permissions\" => $permissions,",
          "252:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/permissions\"), [",
          "254:                 \"menu_item_id\" => $menu_item->id",
          "",
          "[Added Lines]",
          "230:             $permissions = join(',', $permission_menu_keys);",
          "234:                 'menu_id' =>  $menu_id,",
          "235:                 'title' =>  Str::random(10),",
          "236:                 'url' =>  Str::random(10),",
          "237:                 'target' =>  '_self',",
          "238:                 'icon_class' =>  'add',",
          "239:                 'color' =>  '#FFFFFF',",
          "241:                 'permissions' => $permissions,",
          "245:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus/item/permissions'), [",
          "247:                 'menu_item_id' => $menu_item->id,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "283:             $permission_menu_keys = collect($rand_menu_permissions)->map(function ($item) {",
          "284:                 return $item['key'];",
          "285:             })->toArray();",
          "288:             $menu_id = $menu->id;",
          "289:             $create_data = [",
          "296:                 'order' => 1,",
          "298:             ];",
          "299:             $menu_item = MenuItem::create($create_data);",
          "305:             ]);",
          "306:             $response->assertSuccessful();",
          "308:             $menu_item = MenuItem::find($menu_item->id);",
          "309:             $this->assertNotEmpty($menu_item->permissions);",
          "312:             foreach ($rand_menu_permissions as $index => $rand_menu_permission) {",
          "315:                 $this->assertTrue(in_array($menu_item_permission_key, $menu_item_permissions));",
          "316:             }",
          "",
          "[Removed Lines]",
          "286:             $permission_menu_keys = join(\",\", $permission_menu_keys);",
          "290:                 \"menu_id\" =>  $menu_id,",
          "291:                 \"title\" =>  Str::random(10),",
          "292:                 \"url\" =>  Str::random(10),",
          "293:                 \"target\" =>  \"_self\",",
          "294:                 \"icon_class\" =>  'add',",
          "295:                 \"color\" =>  '#FFFFFF',",
          "297:                 \"permissions\" => null,",
          "301:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/item/permissions\"), [",
          "302:                 \"menuId\" => $menu_id,",
          "303:                 \"menuItemId\" => $menu_item->id,",
          "304:                 \"permissions\" => (array) $permission_menu_ids,",
          "310:             $menu_item_permissions = explode(\",\", $menu_item->permissions);",
          "313:                 $menu_item_permission_key = $rand_menu_permission['key'] ;",
          "",
          "[Added Lines]",
          "279:             $permission_menu_keys = join(',', $permission_menu_keys);",
          "283:                 'menu_id' =>  $menu_id,",
          "284:                 'title' =>  Str::random(10),",
          "285:                 'url' =>  Str::random(10),",
          "286:                 'target' =>  '_self',",
          "287:                 'icon_class' =>  'add',",
          "288:                 'color' =>  '#FFFFFF',",
          "290:                 'permissions' => null,",
          "294:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/menus/item/permissions'), [",
          "295:                 'menuId' => $menu_id,",
          "296:                 'menuItemId' => $menu_item->id,",
          "297:                 'permissions' => (array) $permission_menu_ids,",
          "303:             $menu_item_permissions = explode(',', $menu_item->permissions);",
          "306:                 $menu_item_permission_key = $rand_menu_permission['key'];",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiMenuTest.php||tests/Feature/BadasoApiMenuTest.php": [
          "File: tests/Feature/BadasoApiMenuTest.php -> tests/Feature/BadasoApiMenuTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "12: class BadasoApiMenuTest extends TestCase",
          "13: {",
          "",
          "[Removed Lines]",
          "5: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Models\\Menu;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "",
          "[Added Lines]",
          "6: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Models\\Menu;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     public function testBrowseMenu()",
          "23:     {",
          "25:         $response->assertSuccessful();",
          "27:         $response_menus = $response->json('data.menus');",
          "",
          "[Removed Lines]",
          "24:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus\"));",
          "",
          "[Added Lines]",
          "22:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     {",
          "44:         $menus = Menu::all();",
          "45:         foreach ($menus as $index => $menu) {",
          "47:                 'menu_id' => $menu->id,",
          "48:             ]);",
          "49:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "46:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/menus/read\"), [",
          "",
          "[Added Lines]",
          "44:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/menus/read'), [",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "61:     public function testAddMenu()",
          "62:     {",
          "63:         $request_data = [",
          "67:         ];",
          "70:         $response->assertSuccessful();",
          "72:         $menu_id = $response->json('data.id');",
          "",
          "[Removed Lines]",
          "64:             \"key\" => Str::uuid(),",
          "65:             \"displayName\" => Str::random(20),",
          "66:             \"icon\" => 'add',",
          "69:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/menus/add\"), $request_data);",
          "",
          "[Added Lines]",
          "62:             'key' => Str::uuid(),",
          "63:             'displayName' => Str::random(20),",
          "64:             'icon' => 'add',",
          "67:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/menus/add'), $request_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:         $menu_id = CallHelperTest::getCache(self::$KEY_MENU_LAST_CREATED_ID);",
          "86:         $menu = Menu::find($menu_id);",
          "87:         $request_data = [",
          "91:             'menu_id' => $menu_id,",
          "92:         ];",
          "95:         $response->assertSuccessful();",
          "97:         $menu = Menu::find($menu_id);",
          "",
          "[Removed Lines]",
          "88:             \"key\" => $menu->key,",
          "89:             \"displayName\" => Str::random(20),",
          "90:             \"icon\" => 'add',",
          "94:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix(\"/menus/edit\"), $request_data);",
          "",
          "[Added Lines]",
          "86:             'key' => $menu->key,",
          "87:             'displayName' => Str::random(20),",
          "88:             'icon' => 'add',",
          "92:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/menus/edit'), $request_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:     {",
          "107:         $menu_id = CallHelperTest::getCache(self::$KEY_MENU_LAST_CREATED_ID);",
          "111:         ]);",
          "112:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "109:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/menus/delete\"), [",
          "110:             \"menu_id\" => $menu_id,",
          "",
          "[Added Lines]",
          "107:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/menus/delete'), [",
          "108:             'menu_id' => $menu_id,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:         $order = [];",
          "121:         for ($i = 0; $i <= 5; $i++) {",
          "122:             $request_data = [",
          "126:             ];",
          "128:             $order[] = Menu::create($request_data);",
          "",
          "[Removed Lines]",
          "123:                 \"key\" => Str::uuid(),",
          "124:                 \"display_name\" => Str::random(20),",
          "125:                 \"icon\" => 'add',",
          "",
          "[Added Lines]",
          "121:                 'key' => Str::uuid(),",
          "122:                 'display_name' => Str::random(20),",
          "123:                 'icon' => 'add',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:         })->toArray();",
          "133:         shuffle($order);",
          "136:             'order' => (array) $order,",
          "137:         ]);",
          "138:         $response->assertSuccessful();",
          "140:         foreach ($order as $index => $menu_id) {",
          "141:             $menu = Menu::find($menu_id);",
          "144:             $menu->delete();",
          "145:         }",
          "",
          "[Removed Lines]",
          "135:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/menus/menu-options\"), [",
          "142:             $this->assertTrue($menu->order == $index+1);",
          "",
          "[Added Lines]",
          "133:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/menus/menu-options'), [",
          "140:             $this->assertTrue($menu->order == $index + 1);",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiPermissionTest.php||tests/Feature/BadasoApiPermissionTest.php": [
          "File: tests/Feature/BadasoApiPermissionTest.php -> tests/Feature/BadasoApiPermissionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "10: class BadasoApiPermissionTest extends TestCase",
          "11: {",
          "",
          "[Removed Lines]",
          "5: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Models\\Permission;",
          "",
          "[Added Lines]",
          "6: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Models\\Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     public function testBrowsePermission()",
          "21:     {",
          "23:         $response->assertSuccessful();",
          "24:     }",
          "",
          "[Removed Lines]",
          "22:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/permissions\"));",
          "",
          "[Added Lines]",
          "22:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/permissions'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:     {",
          "28:         $permissions = Permission::all();",
          "29:         foreach ($permissions as $key => $permission) {",
          "31:                 'id' => $permission->id,",
          "32:             ]);",
          "33:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "30:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/permissions/read\"), [",
          "",
          "[Added Lines]",
          "30:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/permissions/read'), [",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:             'key' =>  Str::uuid(),",
          "51:         ];",
          "54:         $response->assertSuccessful();",
          "56:         $permission_id = $response->json('data.id');",
          "",
          "[Removed Lines]",
          "53:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/permissions/add\"), $request_data);",
          "",
          "[Added Lines]",
          "53:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/permissions/add'), $request_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:             'id' => $permission_id,",
          "76:         ];",
          "79:         $response->assertSuccessful();",
          "81:         $permission_id = $response->json('data.id');",
          "",
          "[Removed Lines]",
          "78:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix(\"/permissions/edit\"), $request_data);",
          "",
          "[Added Lines]",
          "78:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/permissions/edit'), $request_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "91:     {",
          "92:         $permission_id = CallHelperTest::getCache(self::$KEY_PERMISSION_LAST_CREATED_ID);",
          "95:             'id' => $permission_id,",
          "96:         ]);",
          "97:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "94:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/permissions/delete\"), [",
          "",
          "[Added Lines]",
          "94:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/permissions/delete'), [",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "103:     public function testDeleteMultiplePermission()",
          "104:     {",
          "105:         $maximal_count = 10;",
          "107:         for ($i = 1; $i <= $maximal_count; $i++) {",
          "108:             $request_data = [",
          "109:                 'always_allow' =>  true,",
          "",
          "[Removed Lines]",
          "106:         $ids = [] ;",
          "",
          "[Added Lines]",
          "106:         $ids = [];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "112:                 'key' =>  Str::uuid(),",
          "113:             ];",
          "116:             $response->assertSuccessful();",
          "118:             $ids[] = $response->json('data.id');",
          "119:         }",
          "123:         ]);",
          "124:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "115:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/permissions/add\"), $request_data);",
          "121:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/permissions/delete-multiple\"), [",
          "122:             'ids' => join(\",\", $ids),",
          "",
          "[Added Lines]",
          "115:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/permissions/add'), $request_data);",
          "121:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/permissions/delete-multiple'), [",
          "122:             'ids' => join(',', $ids),",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiRolePermissionTest.php||tests/Feature/BadasoApiRolePermissionTest.php": [
          "File: tests/Feature/BadasoApiRolePermissionTest.php -> tests/Feature/BadasoApiRolePermissionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Models\\Permission;",
          "9: use Uasoft\\Badaso\\Models\\RolePermission;",
          "14: class BadasoApiRolePermissionTest extends TestCase",
          "15: {",
          "",
          "[Removed Lines]",
          "5: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "10: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "11: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "12: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "",
          "[Added Lines]",
          "6: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "9: use Uasoft\\Badaso\\Models\\Role;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     public function testRoleInPermissions()",
          "23:     {",
          "25:         $roles = Role::all();",
          "26:         foreach ($roles as $index => $role) {",
          "27:             $role_id = $role->id;",
          "29:                 'roleId' => $role_id,",
          "30:             ]);",
          "31:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "28:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/all-permission\"), [",
          "",
          "[Added Lines]",
          "25:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/role-permissions/all-permission'), [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     public function testRolePermissionAll()",
          "49:     {",
          "51:         $response->assertSuccessful();",
          "53:         $response_data_permissions = $response->json('data.rolePermissions');",
          "",
          "[Removed Lines]",
          "50:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/all\"));",
          "",
          "[Added Lines]",
          "47:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/role-permissions/all'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:     public function testRolePermission()",
          "64:     {",
          "66:         $roles = Role::all();",
          "67:         foreach ($roles as $index => $role) {",
          "68:             $role_id = $role['id'];",
          "70:                 'roleId' => $role_id,",
          "71:             ]);",
          "72:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "69:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions\"), [",
          "",
          "[Added Lines]",
          "65:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/role-permissions'), [",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:             'roleId' => $role_id,",
          "105:             'permissions' => $request_permissions,",
          "106:         ];",
          "108:         $response->assertSuccessful();",
          "110:         foreach ($request_permissions as $index => $request_permission) {",
          "",
          "[Removed Lines]",
          "107:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/role-permissions/add-edit\"), $request_data);",
          "",
          "[Added Lines]",
          "103:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/role-permissions/add-edit'), $request_data);",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiRoleTest.php||tests/Feature/BadasoApiRoleTest.php": [
          "File: tests/Feature/BadasoApiRoleTest.php -> tests/Feature/BadasoApiRoleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "12: class BadasoApiRoleTest extends TestCase",
          "13: {",
          "16:     public function testStartInit()",
          "17:     {",
          "",
          "[Removed Lines]",
          "5: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "14:     public static $KEY_ROLE_LAST_CREATE_ID = \"ROLE_LAST_CREATE_ID\";",
          "",
          "[Added Lines]",
          "6: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Models\\Role;",
          "12:     public static $KEY_ROLE_LAST_CREATE_ID = 'ROLE_LAST_CREATE_ID';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     public function testAddRole()",
          "23:     {",
          "24:         $request_data = [",
          "28:         ];",
          "30:         $response->assertSuccessful();",
          "32:         $role_id = $response->json('data.id');",
          "",
          "[Removed Lines]",
          "25:             \"name\" => Str::uuid(),",
          "26:             \"display_name\" => \"Example Display Name\",",
          "27:             \"description\" => \"Example Description\",",
          "29:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "",
          "[Added Lines]",
          "23:             'name' => Str::uuid(),",
          "24:             'display_name' => 'Example Display Name',",
          "25:             'description' => 'Example Description',",
          "27:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/roles/add'), $request_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     public function testReadRole()",
          "44:     {",
          "45:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "47:             'id' => $role_id,",
          "48:         ]);",
          "49:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "46:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/roles/read\"), [",
          "",
          "[Added Lines]",
          "44:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/roles/read'), [",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:         $role = Role::find($role_id)->toArray();",
          "56:         $this->assertTrue($role['name'] == $response_data['name']);",
          "57:         $this->assertTrue($role['display_name'] == $response_data['displayName']);",
          "58:         $this->assertTrue($role['description'] == $response_data['description']);",
          "",
          "[Removed Lines]",
          "55:         $this->assertNotEmpty($role) ;",
          "",
          "[Added Lines]",
          "53:         $this->assertNotEmpty($role);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "63:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "64:         $request_data = [",
          "65:             'id' => $role_id,",
          "69:         ];",
          "71:         $response->assertSuccessful();",
          "73:         $response_data = $response->json('data');",
          "",
          "[Removed Lines]",
          "66:             \"name\" => Str::uuid(),",
          "67:             \"display_name\" => \"Example Display Name\",",
          "68:             \"description\" => \"Example Description\",",
          "70:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix(\"/roles/edit\"), $request_data);",
          "",
          "[Added Lines]",
          "64:             'name' => Str::uuid(),",
          "65:             'display_name' => 'Example Display Name',",
          "66:             'description' => 'Example Description',",
          "68:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/roles/edit'), $request_data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "82:     public function testBrowseRole()",
          "83:     {",
          "85:         $response->assertSuccessful();",
          "87:         $response_data = $response->json('data.roles');",
          "",
          "[Removed Lines]",
          "84:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/roles\"));",
          "",
          "[Added Lines]",
          "82:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/roles'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "98:     public function testDeleteRole()",
          "99:     {",
          "100:         $request_data = [",
          "104:         ];",
          "106:         $response->assertSuccessful();",
          "108:         $role_id = $response->json('data.id');",
          "110:             'id' => $role_id,",
          "111:         ]);",
          "112:         $response->assertSuccessful();",
          "115:         $this->assertEmpty($role);",
          "116:     }",
          "",
          "[Removed Lines]",
          "101:             \"name\" => Str::uuid(),",
          "102:             \"display_name\" => \"Example Display Name\",",
          "103:             \"description\" => \"Example Description\",",
          "105:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "109:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/roles/delete\"), [",
          "114:         $role = Role::find($role_id) ;",
          "",
          "[Added Lines]",
          "99:             'name' => Str::uuid(),",
          "100:             'display_name' => 'Example Display Name',",
          "101:             'description' => 'Example Description',",
          "103:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/roles/add'), $request_data);",
          "107:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/roles/delete'), [",
          "112:         $role = Role::find($role_id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "119:     {",
          "120:         $role_id = CallHelperTest::getCache(self::$KEY_ROLE_LAST_CREATE_ID);",
          "121:         $maximal_count = 10;",
          "124:             $request_data = [",
          "128:             ];",
          "130:             $response->assertSuccessful();",
          "132:             $role_id = $response->json('data.id');",
          "134:         }",
          "138:         ]);",
          "139:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "122:         $ids = [$role_id] ;",
          "123:         for($i=1; $i<= $maximal_count; $i++){",
          "125:                 \"name\" => Str::uuid(),",
          "126:                 \"display_name\" => \"Example Display Name $i\",",
          "127:                 \"description\" => \"Example Description\",",
          "129:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix(\"/roles/add\"), $request_data);",
          "133:             $ids[] = $role_id ;",
          "136:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/roles/delete-multiple\"), [",
          "137:             \"ids\" => join(\",\", $ids),",
          "",
          "[Added Lines]",
          "120:         $ids = [$role_id];",
          "121:         for ($i = 1; $i <= $maximal_count; $i++) {",
          "123:                 'name' => Str::uuid(),",
          "124:                 'display_name' => \"Example Display Name $i\",",
          "125:                 'description' => 'Example Description',",
          "127:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/roles/add'), $request_data);",
          "131:             $ids[] = $role_id;",
          "134:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/roles/delete-multiple'), [",
          "135:             'ids' => join(',', $ids),",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiUserRoleTest.php||tests/Feature/BadasoApiUserRoleTest.php": [
          "File: tests/Feature/BadasoApiUserRoleTest.php -> tests/Feature/BadasoApiUserRoleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "6: use Illuminate\\Support\\Str;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "12: use Uasoft\\Badaso\\Models\\User;",
          "13: use Uasoft\\Badaso\\Models\\UserRole;",
          "15: class BadasoApiUserRoleTest extends TestCase",
          "16: {",
          "18:     public function testStartInit()",
          "19:     {",
          "",
          "[Removed Lines]",
          "5: use Tests\\TestCase;",
          "7: use Uasoft\\Badaso\\Models\\Role;",
          "9: use Illuminate\\Foundation\\Testing\\WithFaker;",
          "10: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "11: use Illuminate\\Support\\Facades\\Hash;",
          "",
          "[Added Lines]",
          "5: use Illuminate\\Support\\Facades\\Hash;",
          "7: use Tests\\TestCase;",
          "9: use Uasoft\\Badaso\\Models\\Role;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         $create_user = [",
          "33:             'name' => $name,",
          "34:             'username' => $name,",
          "36:             'password' => Hash::make($name),",
          "37:         ];",
          "38:         $user = User::create($create_user);",
          "43:         ]);",
          "44:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "35:             'email' => $name . \"@gmail.com\",",
          "40:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/user-roles/add-edit\"), [",
          "41:             \"userId\" => $user->id,",
          "42:             \"roles\" => (array) $role_ids,",
          "",
          "[Added Lines]",
          "32:             'email' => $name.'@gmail.com',",
          "37:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/user-roles/add-edit'), [",
          "38:             'userId' => $user->id,",
          "39:             'roles' => (array) $role_ids,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     public function testUserRoleAll()",
          "57:     {",
          "59:         $response->assertSuccessful();",
          "61:         $response_user_roles = $response->json('data.userRoles');",
          "",
          "[Removed Lines]",
          "58:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles/all\"));",
          "",
          "[Added Lines]",
          "55:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/user-roles/all'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:         $create_user = [",
          "73:             'name' => $name,",
          "74:             'username' => $name,",
          "76:             'password' => Hash::make($name),",
          "77:         ];",
          "78:         $user = User::create($create_user);",
          "",
          "[Removed Lines]",
          "75:             'email' => $name . \"@gmail.com\",",
          "",
          "[Added Lines]",
          "72:             'email' => $name.'@gmail.com',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:             ]);",
          "86:         }",
          "89:             'userId' => $user->id,",
          "90:         ]);",
          "91:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "88:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles\"), [",
          "",
          "[Added Lines]",
          "85:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/user-roles'), [",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "111:         $create_user = [",
          "112:             'name' => $name,",
          "113:             'username' => $name,",
          "115:             'password' => Hash::make($name),",
          "116:         ];",
          "117:         $user = User::create($create_user);",
          "",
          "[Removed Lines]",
          "114:             'email' => $name . \"@gmail.com\",",
          "",
          "[Added Lines]",
          "111:             'email' => $name.'@gmail.com',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "124:             ]);",
          "125:         }",
          "128:             'userId' => $user->id,",
          "129:         ]);",
          "130:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "127:         $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/user-roles/all-role\"), [",
          "",
          "[Added Lines]",
          "124:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/user-roles/all-role'), [",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:         $response_user_roles = $response->json('data.userRoles');",
          "134:         foreach ($user_roles as $key => $user_role) {",
          "137:             $response_user_role = collect($response_user_roles)->where('id', $user_role_id)->first();",
          "138:             $this->assertNotEmpty($response_user_role);",
          "",
          "[Removed Lines]",
          "135:             $user_role_id = $user_role->role_id ;",
          "",
          "[Added Lines]",
          "132:             $user_role_id = $user_role->role_id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3725954e42e6574be7cd4fe1fdd9088c1d19e11",
      "candidate_info": {
        "commit_hash": "a3725954e42e6574be7cd4fe1fdd9088c1d19e11",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/a3725954e42e6574be7cd4fe1fdd9088c1d19e11",
        "files": [
          "src/Models/Permission.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Models/Permission.php||src/Models/Permission.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Models/Permission.php||src/Models/Permission.php": [
          "File: src/Models/Permission.php -> src/Models/Permission.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     public static function generateFor($table_name, $is_maintenance = false)",
          "28:     {",
          "30:             $permissions = [];",
          "31:             $permissions[] = self::firstOrCreate(['key' => 'browse_'.$table_name, 'description' => 'Browse '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "32:             $permissions[] = self::firstOrCreate(['key' => 'read_'.$table_name, 'description' => 'Read '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "",
          "[Removed Lines]",
          "29:         if(!Permission::where('table_name', $table_name)->first()){",
          "",
          "[Added Lines]",
          "29:         if (! Permission::where('table_name', $table_name)->first()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     {",
          "98:         return LogOptions::defaults()->dontSubmitEmptyLogs();",
          "99:     }",
          "102:         $get_all_table_name = DataType::all();",
          "103:         foreach ($get_all_table_name as $key => $table) {",
          "104:             $permission_table_name = Permission::where('table_name', $table->name)->get();",
          "105:             foreach ($permission_table_name as $key => $table_name) {",
          "107:                     $table_name->roles_can_see_all_data = '[\"administrator\"]';",
          "108:                     $table_name->field_identify_related_user = 'user_id';",
          "109:                     $table_name->save();",
          "",
          "[Removed Lines]",
          "101:     public static function generateForTableCRUD(){",
          "106:                 if ($table->roles_can_see_all_data  == NULL && $table_name->field_identify_related_user == NULL) {",
          "",
          "[Added Lines]",
          "101:     public static function generateForTableCRUD()",
          "102:     {",
          "107:                 if ($table->roles_can_see_all_data == null && $table_name->field_identify_related_user == null) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}