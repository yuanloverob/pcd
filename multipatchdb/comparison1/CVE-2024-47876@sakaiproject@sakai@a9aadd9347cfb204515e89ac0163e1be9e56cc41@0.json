{
  "cve_id": "CVE-2024-47876",
  "cve_desc": "Sakai is a Collaboration and Learning Environment. Starting in version 23.0 and prior to version 23.2, kernel users created with type roleview can log in as a normal user. This can result in illegal access being granted to the system. Version 23.3 fixes this vulnerability.",
  "repo": "sakaiproject/sakai",
  "patch_hash": "a9aadd9347cfb204515e89ac0163e1be9e56cc41",
  "patch_info": {
    "commit_hash": "a9aadd9347cfb204515e89ac0163e1be9e56cc41",
    "repo": "sakaiproject/sakai",
    "commit_url": "https://github.com/sakaiproject/sakai/commit/a9aadd9347cfb204515e89ac0163e1be9e56cc41",
    "files": [
      "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
      "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
      "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
      "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
    ],
    "message": "Merge commit from fork\n\nhttps://sakaiproject.atlassian.net/browse/SAK-50571",
    "before_after_code_files": [
      "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
      "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
      "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
      "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
    ]
  },
  "patch_diff": {
    "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java": [
      "File: kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java -> kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java"
    ],
    "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java": [
      "File: kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3006:   if (StringUtils.isNoneBlank(siteReference, eid, role)) {",
      "3007:    try {",
      "3008:     String mockUserEmail = eid + \"@\" + serverConfigurationService().getServerName();",
      "3010:     AuthzGroup realmEdit = authzGroupService().getAuthzGroup(siteReference);",
      "3011:     if (authzGroupService().allowUpdate(siteReference) || allowUpdateSiteMembership(siteId(siteReference))) {",
      "3012:      realmEdit.addMember(newUser.getId(), role, true, false);",
      "",
      "[Removed Lines]",
      "3009:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, eid, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
      "",
      "[Added Lines]",
      "3009:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, null, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
      "",
      "---------------"
    ],
    "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java": [
      "File: kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "241:   return reference.substring(lastSeparatorIndex + 1);",
      "242:  }",
      "244:  public boolean isRoleViewType(String id) {",
      "251:  }",
      "",
      "[Removed Lines]",
      "245:   try {",
      "246:    User user = getUser(id);",
      "247:    return ROLEVIEW_USER_TYPE.equals(user.getType());",
      "248:   } catch (UserNotDefinedException e) {",
      "249:    return false;",
      "250:   }",
      "",
      "[Added Lines]",
      "244:  @Override",
      "246:   if (id != null) {",
      "247:    String userId = Optional.ofNullable(m_storage.checkMapForId(id)).orElse(id);",
      "248:    User user = m_storage.getById(userId);",
      "249:    if (user != null) return ROLEVIEW_USER_TYPE.equals(user.getType());",
      "250:         }",
      "251:   return false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1691:   loginId = cleanEid(loginId);",
      "1692:   if (loginId == null) return null;",
      "1694:   UserEdit user = null;",
      "1695:   boolean authenticateWithProviderFirst = (m_provider != null) && m_provider.authenticateWithProviderFirst(loginId);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1696:   if (isRoleViewType(loginId)) {",
      "1697:    log.warn(\"SECURITY: attempted to authenticate a user with type roleview [{}]\", loginId);",
      "1698:    return null;",
      "1699:   }",
      "",
      "---------------"
    ],
    "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java": [
      "File: portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java -> portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import javax.servlet.http.HttpServletResponse;",
      "24: import org.sakaiproject.authz.api.Role;",
      "26: import org.sakaiproject.event.api.EventTrackingService;",
      "27: import org.sakaiproject.event.api.NotificationService;",
      "28: import org.sakaiproject.event.api.UsageSessionService;",
      "",
      "[Removed Lines]",
      "25: import org.sakaiproject.component.cover.ServerConfigurationService;",
      "",
      "[Added Lines]",
      "25: import org.sakaiproject.component.api.ServerConfigurationService;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:  @Autowired @Qualifier(\"org.sakaiproject.event.api.EventTrackingService\")",
      "49:  private EventTrackingService eventTrackingService;",
      "50:  @Autowired @Qualifier(\"org.sakaiproject.site.api.SiteService\")",
      "51:  private SiteService siteService;",
      "53:  public RoleSwitchHandler() {",
      "54:   SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);",
      "55:   setUrlFragment(RoleSwitchHandler.URL_FRAGMENT);",
      "56:  }",
      "58:  @Override",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50:  @Autowired @Qualifier(\"org.sakaiproject.component.api.ServerConfigurationService\")",
      "51:  private ServerConfigurationService serverConfigurationService;",
      "55:  private String portalUrl;",
      "56:  private String externalRoles;",
      "61:   portalUrl = serverConfigurationService.getPortalUrl();",
      "63:   externalRoles = serverConfigurationService.getString(\"studentview.roles\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "86:             }",
      "88:             Set<Role> roles = activeSite.getRoles(); // all the roles in our site",
      "91:          String[] svRoles = externalRoles.split(\",\");",
      "92:          boolean isRoleLegit = false;",
      "",
      "[Removed Lines]",
      "90:          String externalRoles = ServerConfigurationService.getString(\"studentview.roles\"); // get the roles that can be swapped to from sakai.properties",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "115:    try",
      "116:    {",
      "120:     activeSite.getPages().stream() // get all pages in site",
      "121:      .map(SitePage::getTools) // tools for each page",
      "",
      "[Removed Lines]",
      "117:     String siteUrl = ServerConfigurationService.getPortalUrl() + \"/site/\" + parts[2] + \"/tool/\" + parts[4] + \"/\";",
      "",
      "[Added Lines]",
      "123:     String url = portalUrl + \"/site/\" + parts[2] + \"/tool/\" + parts[4] + \"/\";",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "132:     eventTrackingService.post(eventTrackingService",
      "133:       .newEvent(UsageSessionService.EVENT_ROLEVIEW_START, parts[5], parts[2], false, NotificationService.NOTI_NONE));",
      "136:     return RESET_DONE;",
      "137:    }",
      "138:    catch(Exception ex)",
      "",
      "[Removed Lines]",
      "135:     res.sendRedirect(URLUtils.sanitisePath(siteUrl));",
      "",
      "[Added Lines]",
      "140:     res.sendRedirect(URLUtils.sanitisePath(url));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f1b076facdb23f55189f7e945a0417edc209fdef",
      "candidate_info": {
        "commit_hash": "f1b076facdb23f55189f7e945a0417edc209fdef",
        "repo": "sakaiproject/sakai",
        "commit_url": "https://github.com/sakaiproject/sakai/commit/f1b076facdb23f55189f7e945a0417edc209fdef",
        "files": [
          "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
        ],
        "message": "Merge commit from fork\n\nhttps://sakaiproject.atlassian.net/browse/SAK-50571\n(cherry picked from commit a9aadd9347cfb204515e89ac0163e1be9e56cc41)",
        "before_after_code_files": [
          "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
            "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
          ],
          "candidate": [
            "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
            "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
          ]
        }
      },
      "candidate_diff": {
        "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java -> kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2974:   if (StringUtils.isNoneBlank(siteReference, eid, role)) {",
          "2975:    try {",
          "2976:     String mockUserEmail = eid + \"@\" + serverConfigurationService().getServerName();",
          "2978:     AuthzGroup realmEdit = authzGroupService().getAuthzGroup(siteReference);",
          "2979:     if (authzGroupService().allowUpdate(siteReference) || allowUpdateSiteMembership(siteId(siteReference))) {",
          "2980:      realmEdit.addMember(newUser.getId(), role, true, false);",
          "",
          "[Removed Lines]",
          "2977:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, eid, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
          "",
          "[Added Lines]",
          "2977:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, null, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   return reference.substring(lastSeparatorIndex + 1);",
          "242:  }",
          "244:  public boolean isRoleViewType(String id) {",
          "251:  }",
          "",
          "[Removed Lines]",
          "245:   try {",
          "246:    User user = getUser(id);",
          "247:    return ROLEVIEW_USER_TYPE.equals(user.getType());",
          "248:   } catch (UserNotDefinedException e) {",
          "249:    return false;",
          "250:   }",
          "",
          "[Added Lines]",
          "244:  @Override",
          "246:   if (id != null) {",
          "247:    String userId = Optional.ofNullable(m_storage.checkMapForId(id)).orElse(id);",
          "248:    User user = m_storage.getById(userId);",
          "249:    if (user != null) return ROLEVIEW_USER_TYPE.equals(user.getType());",
          "250:         }",
          "251:   return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1691:   loginId = cleanEid(loginId);",
          "1692:   if (loginId == null) return null;",
          "1694:   UserEdit user = null;",
          "1695:   boolean authenticateWithProviderFirst = (m_provider != null) && m_provider.authenticateWithProviderFirst(loginId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1696:   if (isRoleViewType(loginId)) {",
          "1697:    log.warn(\"SECURITY: attempted to authenticate a user with type roleview [{}]\", loginId);",
          "1698:    return null;",
          "1699:   }",
          "",
          "---------------"
        ],
        "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java": [
          "File: portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java -> portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.servlet.http.HttpServletResponse;",
          "24: import org.sakaiproject.authz.api.Role;",
          "26: import org.sakaiproject.event.api.EventTrackingService;",
          "27: import org.sakaiproject.event.api.NotificationService;",
          "28: import org.sakaiproject.event.api.UsageSessionService;",
          "",
          "[Removed Lines]",
          "25: import org.sakaiproject.component.cover.ServerConfigurationService;",
          "",
          "[Added Lines]",
          "25: import org.sakaiproject.component.api.ServerConfigurationService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  @Autowired @Qualifier(\"org.sakaiproject.event.api.EventTrackingService\")",
          "49:  private EventTrackingService eventTrackingService;",
          "50:  @Autowired @Qualifier(\"org.sakaiproject.site.api.SiteService\")",
          "51:  private SiteService siteService;",
          "53:  public RoleSwitchHandler() {",
          "54:   SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);",
          "55:   setUrlFragment(RoleSwitchHandler.URL_FRAGMENT);",
          "56:  }",
          "58:  @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  @Autowired @Qualifier(\"org.sakaiproject.component.api.ServerConfigurationService\")",
          "51:  private ServerConfigurationService serverConfigurationService;",
          "55:  private String portalUrl;",
          "56:  private String externalRoles;",
          "61:   portalUrl = serverConfigurationService.getPortalUrl();",
          "63:   externalRoles = serverConfigurationService.getString(\"studentview.roles\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:             }",
          "88:             Set<Role> roles = activeSite.getRoles(); // all the roles in our site",
          "91:          String[] svRoles = externalRoles.split(\",\");",
          "92:          boolean isRoleLegit = false;",
          "",
          "[Removed Lines]",
          "90:          String externalRoles = ServerConfigurationService.getString(\"studentview.roles\"); // get the roles that can be swapped to from sakai.properties",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:    try",
          "116:    {",
          "120:     activeSite.getPages().stream() // get all pages in site",
          "121:      .map(SitePage::getTools) // tools for each page",
          "",
          "[Removed Lines]",
          "117:     String siteUrl = ServerConfigurationService.getPortalUrl() + \"/site/\" + parts[2] + \"/tool/\" + parts[4] + \"/\";",
          "",
          "[Added Lines]",
          "123:     String url = portalUrl + \"/site/\" + parts[2] + \"/tool/\" + parts[4] + \"/\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:     eventTrackingService.post(eventTrackingService",
          "133:       .newEvent(UsageSessionService.EVENT_ROLEVIEW_START, parts[5], parts[2], false, NotificationService.NOTI_NONE));",
          "136:     return RESET_DONE;",
          "137:    }",
          "138:    catch(Exception ex)",
          "",
          "[Removed Lines]",
          "135:     res.sendRedirect(URLUtils.sanitisePath(siteUrl));",
          "",
          "[Added Lines]",
          "140:     res.sendRedirect(URLUtils.sanitisePath(url));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec062bf4a739b3ab76d565ff159fa66a92df1981",
      "candidate_info": {
        "commit_hash": "ec062bf4a739b3ab76d565ff159fa66a92df1981",
        "repo": "sakaiproject/sakai",
        "commit_url": "https://github.com/sakaiproject/sakai/commit/ec062bf4a739b3ab76d565ff159fa66a92df1981",
        "files": [
          "entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java",
          "kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java",
          "kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java",
          "kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java",
          "kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java",
          "kernel/api/src/main/java/org/sakaiproject/user/api/User.java",
          "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "kernel/kernel-impl/src/main/webapp/WEB-INF/site-components.xml",
          "kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java",
          "kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java",
          "kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java"
        ],
        "message": "SAK-49726 Kernel view site as updates (#12371)",
        "before_after_code_files": [
          "entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java||entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java",
          "kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java||kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java",
          "kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java||kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java",
          "kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java||kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java",
          "kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java||kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java",
          "kernel/api/src/main/java/org/sakaiproject/user/api/User.java||kernel/api/src/main/java/org/sakaiproject/user/api/User.java",
          "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java||kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java||kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java",
          "kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java||kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java",
          "kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java||kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java",
          "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
            "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
          ],
          "candidate": [
            "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
            "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java"
          ]
        }
      },
      "candidate_diff": {
        "entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java||entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java": [
          "File: entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java -> entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/model/EntityMember.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:         }",
          "329:     }",
          "336: }",
          "",
          "[Removed Lines]",
          "331:     @Override",
          "332:     public boolean isRoleViewUser() {",
          "333:         return false;",
          "334:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java||kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java -> kernel/api/src/main/java/org/sakaiproject/authz/api/Member.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  void setActive(boolean active);",
          "89: }",
          "",
          "[Removed Lines]",
          "88:  boolean isRoleViewUser();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java||kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java -> kernel/api/src/main/java/org/sakaiproject/authz/api/SecurityService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:  public boolean isUserRoleSwapped() throws IdUnusedException;",
          "195: }",
          "",
          "[Removed Lines]",
          "193:  public void changeToRoleViewOnSite(Site site, String role) throws SakaiException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java||kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java -> kernel/api/src/main/java/org/sakaiproject/event/api/UsageSessionService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import javax.servlet.http.HttpServletRequest;",
          "29: import org.sakaiproject.user.api.Authentication;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.sakaiproject.exception.SakaiException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  public static final String USAGE_SESSION_KEY = \"org.sakaiproject.event.api.UsageSessionService\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  String ROLEVIEW_PREFIX = \"roleview\";",
          "59:  String EVENT_ROLEVIEW_BECOME = ROLEVIEW_PREFIX + \".become\";",
          "60:  String EVENT_ROLEVIEW_EXIT = ROLEVIEW_PREFIX + \".exit\";",
          "61:  String EVENT_ROLEVIEW_START = ROLEVIEW_PREFIX + \".start\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:  int closeSessionsOnInvalidServers(List<String> validServerIds);",
          "219: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:  void impersonateUser(String userId) throws SakaiException;",
          "227:  void restoreUser() throws SakaiException;",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java||kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java -> kernel/api/src/main/java/org/sakaiproject/site/api/SiteService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.sakaiproject.exception.IdUsedException;",
          "36: import org.sakaiproject.exception.InUseException;",
          "37: import org.sakaiproject.exception.PermissionException;",
          "38: import org.sakaiproject.javax.PagingPosition;",
          "39: import org.w3c.dom.Element;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.sakaiproject.exception.SakaiException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:  String merge(String toSiteId, Element e, String creatorId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1312:  void activateRoleViewOnSite(String siteReference, String role) throws SakaiException;",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/user/api/User.java||kernel/api/src/main/java/org/sakaiproject/user/api/User.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/user/api/User.java -> kernel/api/src/main/java/org/sakaiproject/user/api/User.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: public interface User extends Entity, Comparable",
          "35: {",
          "",
          "[Removed Lines]",
          "37:  public static final String ROLEVIEW_USER_TYPE = \"roleview\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java||kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java": [
          "File: kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java -> kernel/api/src/main/java/org/sakaiproject/user/api/UserDirectoryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  static final String EIDCACHE = \"eid:\";",
          "79:  static final String IDCACHE = \"id:\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  String ROLEVIEW_USER_TYPE = \"roleview\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:  String idFromReference(String reference);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:  boolean isRoleViewType(String id);",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseAuthzGroup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.util.Optional;",
          "33: import java.util.Set;",
          "34: import java.util.Stack;",
          "35: import java.util.stream.Collectors;",
          "37: import org.apache.commons.lang3.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.util.function.Predicate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  protected ResourcePropertiesEdit m_properties = null;",
          "88:  protected Map m_roles = null;",
          "",
          "[Removed Lines]",
          "85:  protected Map m_userGrants = null;",
          "",
          "[Added Lines]",
          "86:  protected Map<String, Member> m_userGrants = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "806:   return false;",
          "807:  }",
          "813:  {",
          "814:   if (m_lazy) baseAuthzGroupService.m_storage.completeGet(this);",
          "829:  }",
          "835:  {",
          "838:   if (m_lazy) baseAuthzGroupService.m_storage.completeGet(this);",
          "851:  }",
          "857:  {",
          "858:   if (m_lazy) baseAuthzGroupService.m_storage.completeGet(this);",
          "873:  }",
          "879:  {",
          "880:   if (m_lazy) baseAuthzGroupService.m_storage.completeGet(this);",
          "895:  }",
          "",
          "[Removed Lines]",
          "812:  public Set getUsers()",
          "816:   Set rv = new HashSet();",
          "817:   for (Iterator it = m_userGrants.entrySet().iterator(); it.hasNext();)",
          "818:   {",
          "819:    Map.Entry entry = (Map.Entry) it.next();",
          "820:    String user = (String) entry.getKey();",
          "821:    Member grant = (Member) entry.getValue();",
          "822:    if (grant.isActive() && !grant.isRoleViewUser())",
          "823:    {",
          "824:     rv.add(user);",
          "825:    }",
          "826:   }",
          "828:   return rv;",
          "834:  public Set getMembers()",
          "840:   Set rv = new HashSet();",
          "841:   for (Iterator it = m_userGrants.entrySet().iterator(); it.hasNext();)",
          "842:   {",
          "843:    Map.Entry entry = (Map.Entry) it.next();",
          "844:    Member grant = (Member) entry.getValue();",
          "845:    if (!grant.isRoleViewUser()) {",
          "846:     rv.add(grant);",
          "847:    }",
          "848:   }",
          "850:   return rv;",
          "856:  public Set getUsersIsAllowed(String lock)",
          "860:   Set rv = new HashSet();",
          "861:   for (Iterator it = m_userGrants.entrySet().iterator(); it.hasNext();)",
          "862:   {",
          "863:    Map.Entry entry = (Map.Entry) it.next();",
          "864:    String user = (String) entry.getKey();",
          "865:    BaseMember grant = (BaseMember) entry.getValue();",
          "866:    if (grant.active && grant.role.isAllowed(lock) && !grant.isRoleViewUser())",
          "867:    {",
          "868:     rv.add(user);",
          "869:    }",
          "870:   }",
          "872:   return rv;",
          "878:  public Set getUsersHasRole(String role)",
          "882:   Set rv = new HashSet();",
          "883:   for (Iterator it = m_userGrants.entrySet().iterator(); it.hasNext();)",
          "884:   {",
          "885:    Map.Entry entry = (Map.Entry) it.next();",
          "886:    String user = (String) entry.getKey();",
          "887:    BaseMember grant = (BaseMember) entry.getValue();",
          "888:    if (grant.active && grant.role.getId().equals(role) && !grant.isRoleViewUser())",
          "889:    {",
          "890:     rv.add(user);",
          "891:    }",
          "892:   }",
          "894:   return rv;",
          "",
          "[Added Lines]",
          "810:  @Override",
          "811:  public Set<String> getUsers()",
          "815:   return m_userGrants.entrySet().stream()",
          "816:     .filter(e -> e.getValue().isActive() && !userDirectoryService.isRoleViewType(e.getKey()))",
          "817:     .map(Map.Entry::getKey)",
          "818:     .collect(Collectors.toSet());",
          "821:  @Override",
          "822:  public Set<Member> getMembers()",
          "828:   return m_userGrants.entrySet().stream()",
          "829:     .filter(e -> !userDirectoryService.isRoleViewType(e.getKey()))",
          "830:     .map(Map.Entry::getValue)",
          "831:     .collect(Collectors.toSet());",
          "834:  @Override",
          "835:  public Set<String> getUsersIsAllowed(String lock)",
          "839:   return m_userGrants.entrySet().stream()",
          "840:     .filter(e -> e.getValue().isActive()",
          "841:       && e.getValue().getRole().isAllowed(lock)",
          "842:       && !userDirectoryService.isRoleViewType(e.getKey()))",
          "843:     .map(Map.Entry::getKey)",
          "844:     .collect(Collectors.toSet());",
          "847:  @Override",
          "848:  public Set<String> getUsersHasRole(String role)",
          "852:   return m_userGrants.entrySet().stream()",
          "853:     .filter(e -> e.getValue().isActive()",
          "854:       && e.getValue().getRole().equals(role)",
          "855:       && !userDirectoryService.isRoleViewType(e.getKey()))",
          "856:     .map(Map.Entry::getKey)",
          "857:     .collect(Collectors.toSet());",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/BaseMember.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:   return compare;",
          "144:  }",
          "157: }",
          "",
          "[Removed Lines]",
          "149:  public boolean isRoleViewUser() {",
          "150:   try {",
          "151:    User user = userDirectoryService.getUser(userId);",
          "152:    return User.ROLEVIEW_USER_TYPE.equals(user.getType());",
          "153:   } catch (UserNotDefinedException e) {",
          "154:    return false;",
          "155:   }",
          "156:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java||kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/authz/impl/SakaiSecurity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  protected final static String ADVISOR_STACK = \"SakaiSecurity.advisor.stack\";",
          "81:  protected final static String EVENT_ROLESWAP_CLEAR = \"realm.clear.cache\";",
          "",
          "[Removed Lines]",
          "76:  protected final static String ROLESWAP_PREFIX = \"roleswap\";",
          "78:  protected final static String EVENT_ROLESWAP_EXIT = \"roleswap.exit\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845:   List<User> users = userDirectoryService().getUsers(ids);",
          "847:   Collections.sort(users);",
          "849:   return users;",
          "",
          "[Removed Lines]",
          "846:   users = users.stream().filter(user -> !User.ROLEVIEW_USER_TYPE.equals(user.getType())).collect(Collectors.toList());",
          "",
          "[Added Lines]",
          "842:   users = users.stream().filter(user -> !UserDirectoryService.ROLEVIEW_USER_TYPE.equals(user.getType())).collect(Collectors.toList());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1045:     resetSecurityCache(site.getReference());",
          "1046:    }",
          "1047:   }",
          "1058:  }",
          "",
          "[Removed Lines]",
          "1049:   if (EVENT_ROLESWAP_EXIT.equals(event.getEvent()))",
          "1050:   {",
          "1051:     try {",
          "1052:       restoreUser();",
          "1053:     } catch (SakaiException e) {",
          "1054:      log.warn(\"Security invalidation error when handling an event ({}), for user {}\", event.getEvent(), event.getResource());",
          "1055:     }",
          "1056:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1065:   return StringUtils.isNotBlank(effectiveRole);",
          "1066:  }",
          "1170: }",
          "",
          "[Removed Lines]",
          "1072:  public void changeToRoleViewOnSite(Site site, String role) throws SakaiException {",
          "1073:   if (!unlock(SiteService.SITE_ROLE_SWAP, site.getReference())) {",
          "1074:    throw new SakaiException(\"User don't have permissions to swap roles.\");",
          "1075:   }",
          "1076:   User newUser = getMockupStudentInSite(site, role);",
          "1077:   impersonateUser(newUser.getId());",
          "1078:   setUserEffectiveRole(site.getReference(), role);",
          "1079:  }",
          "1081:  protected User getMockupStudentInSite(Site site, String role) throws SakaiException {",
          "1082:   String eid = site.getId() + \"#\" + role;",
          "1083:   User mockupUser = null;",
          "1084:   try {",
          "1085:    mockupUser = userDirectoryService().getUserByEid(eid);",
          "1086:   } catch (UserNotDefinedException e) {",
          "1087:    return newMockupStudentInSite(site, eid, role);",
          "1088:   }",
          "1089:   return mockupUser;",
          "1090:  }",
          "1092:  protected User newMockupStudentInSite(Site site, String eid, String role) throws SakaiException {",
          "1093:   User newUser = null;",
          "1094:   if (site != null && StringUtils.isNoneBlank(eid, role)) {",
          "1095:    try {",
          "1096:     newUser = userDirectoryService().addUser(null, eid, role, role, \"mockup@mockup.sakai.student.com\", eid, User.ROLEVIEW_USER_TYPE, null);",
          "1097:     String realmId = site.getReference();",
          "1098:     AuthzGroup realmEdit = authzGroupService().getAuthzGroup(realmId);",
          "1099:     if (authzGroupService().allowUpdate(realmId) || siteService().allowUpdateSiteMembership(site.getId())) {",
          "1100:      realmEdit.addMember(newUser.getId(), role, true, false);",
          "1101:      authzGroupService().save(realmEdit);",
          "1102:     }",
          "1103:    } catch (Exception e) {",
          "1104:     log.warn(this + \".newMockupStudentInSite: \" + e.getMessage(), e);",
          "1105:     throw new SakaiException(e);",
          "1106:    }",
          "1107:   }",
          "1108:   return newUser;",
          "1109:  }",
          "1112:  private String originalUserId;",
          "1113:  private String originalUserEid;",
          "1115:  protected void impersonateUser(String userId) throws SakaiException {",
          "1116:   Session sakaiSession = sessionManager().getCurrentSession();",
          "1119:   originalUserId = sakaiSession.getUserId();",
          "1120:   originalUserEid = sakaiSession.getUserEid();",
          "1122:   User userinfo = null;",
          "1123:   String validatedUserId = null;",
          "1124:   String validatedUserEid = null;",
          "1125:   try {",
          "1127:    userinfo = userDirectoryService().getUser(userId);",
          "1128:    validatedUserId = userinfo.getId();",
          "1129:    validatedUserEid = userinfo.getEid();",
          "1130:   } catch (UserNotDefinedException e) {",
          "1131:    log.warn(\"[Portal] Exception: \" + e.getLocalizedMessage());",
          "1132:    throw new SakaiException(e);",
          "1133:   }",
          "1137:   Event event = eventTrackingService().newEvent(\"su.become\", userDirectoryService().userReference(validatedUserId), false);",
          "1138:   eventTrackingService().post(event);",
          "1140:   Vector saveAttributes = new Vector();",
          "1141:   saveAttributes.add(UsageSessionService.USAGE_SESSION_KEY);",
          "1142:   saveAttributes.add(UsageSessionService.SAKAI_CSRF_SESSION_ATTRIBUTE);",
          "1143:   sakaiSession.clearExcept(saveAttributes);",
          "1145:   sakaiSession.setUserId(validatedUserId);",
          "1146:   sakaiSession.setUserEid(validatedUserEid);",
          "1147:   authzGroupService().refreshUser(validatedUserId);",
          "1148:   log.info(\"Enter into Role-Swap mode, user \" + validatedUserId + \" is impersonated\");",
          "1149:  }",
          "1151:  protected void restoreUser() throws SakaiException {",
          "1152:   if (originalUserId == null || originalUserEid == null) {",
          "1153:    throw new SakaiException(\"Original user session information is missing\");",
          "1154:   }",
          "1156:   Session sakaiSession = sessionManager().getCurrentSession();",
          "1159:   Vector saveAttributes = new Vector();",
          "1160:   saveAttributes.add(UsageSessionService.USAGE_SESSION_KEY);",
          "1161:   saveAttributes.add(UsageSessionService.SAKAI_CSRF_SESSION_ATTRIBUTE);",
          "1162:   sakaiSession.clearExcept(saveAttributes);",
          "1164:   sakaiSession.setUserId(originalUserId);",
          "1165:   sakaiSession.setUserEid(originalUserEid);",
          "1166:   authzGroupService().refreshUser(originalUserId);",
          "1167:   log.info(\"Exit from Role-Swap mode, user \" + originalUserId + \" is restored\");",
          "1168:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java||kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import lombok.extern.slf4j.Slf4j;",
          "39: import org.apache.commons.lang3.BooleanUtils;",
          "40: import org.sakaiproject.authz.api.AuthzGroupService;",
          "41: import org.sakaiproject.authz.api.SecurityService;",
          "42: import org.sakaiproject.component.api.ServerConfigurationService;",
          "44: import org.sakaiproject.db.api.SqlService;",
          "45: import org.sakaiproject.event.api.EventTrackingService;",
          "46: import org.sakaiproject.event.api.SessionState;",
          "47: import org.sakaiproject.event.api.SessionStateBindingListener;",
          "48: import org.sakaiproject.event.api.UsageSession;",
          "49: import org.sakaiproject.event.api.UsageSessionService;",
          "50: import org.sakaiproject.id.api.IdManager;",
          "51: import org.sakaiproject.memory.api.Cache;",
          "52: import org.sakaiproject.memory.api.MemoryService;",
          "",
          "[Removed Lines]",
          "43: import org.sakaiproject.db.api.SqlReader;",
          "",
          "[Added Lines]",
          "40: import org.apache.commons.lang3.StringUtils;",
          "50: import org.sakaiproject.exception.SakaiException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: import org.sakaiproject.tool.api.SessionManager;",
          "57: import org.sakaiproject.tool.api.ToolSession;",
          "58: import org.sakaiproject.user.api.Authentication;",
          "59: import org.sakaiproject.user.api.UserDirectoryService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: import org.sakaiproject.user.api.User;",
          "62: import org.sakaiproject.user.api.UserNotDefinedException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:  }",
          "531:  private UsageSession readSqlResultRecord(ResultSet result) {",
          "532:   try {",
          "533:    return new BaseUsageSession(UsageSessionServiceAdaptor.this, result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:  public void impersonateUser(String userId) throws SakaiException {",
          "536:   Session currentSession = sessionManager().getCurrentSession();",
          "537:   if (currentSession != null) {",
          "538:    try {",
          "539:     User mockUser = userDirectoryService().getUser(userId);",
          "540:     String mockUserId = mockUser.getId();",
          "541:     String mockUserEid = mockUser.getEid();",
          "543:     eventTrackingService().post(eventTrackingService().newEvent(UsageSessionService.EVENT_ROLEVIEW_BECOME, userDirectoryService().userReference(mockUserId), false));",
          "547:     List<String> saveAttributes = List.of(",
          "548:       UsageSessionService.USAGE_SESSION_KEY,",
          "549:       UsageSessionService.SAKAI_CSRF_SESSION_ATTRIBUTE);",
          "551:     currentSession.clearExcept(saveAttributes);",
          "553:     currentSession.setUserId(mockUserId);",
          "554:     currentSession.setUserEid(mockUserEid);",
          "555:     authzGroupService().refreshUser(mockUserId);",
          "556:     log.info(\"Entering into RoleView mode, real user [{}] is impersonated with mock user [{}]\", currentSession.getUserEid(), mockUserEid);",
          "557:    } catch (UserNotDefinedException undfe) {",
          "558:     log.warn(\"The mock user [{}] could not be found, {}\", userId, undfe.toString());",
          "559:    } catch (Exception e) {",
          "560:     log.error(\"Could not perform RoleView for user [{}], session [{}] maybe contaminated, {}\", userId, currentSession.getId(), e.toString());",
          "561:     currentSession.invalidate();",
          "562:     throw new SakaiException(e);",
          "563:    }",
          "564:   } else {",
          "565:    log.warn(\"Switch to roleview was requested for user [{}], but a session does not exist for this request, skipping\", userId);",
          "566:   }",
          "567:  }",
          "569:  public void restoreUser() throws SakaiException {",
          "570:   Session currentSession = sessionManager().getCurrentSession();",
          "571:   if (currentSession != null) {",
          "572:    UsageSession usageSession = (UsageSession) currentSession.getAttribute(USAGE_SESSION_KEY);",
          "573:    if (usageSession != null) {",
          "574:     String realUserId = usageSession.getUserId();",
          "575:     String realUserEid = usageSession.getUserEid();",
          "577:     if (StringUtils.isAnyBlank(realUserId, realUserEid)) {",
          "578:      log.error(\"Can not restore session from roleview mode, missing the real user information, session is likely corrupt\");",
          "579:      currentSession.invalidate();",
          "580:      throw new SakaiException(\"Can not restore session from roleview mode, missing the real user information\");",
          "581:     }",
          "584:     List<String> saveAttributes = List.of(",
          "585:       UsageSessionService.USAGE_SESSION_KEY,",
          "586:       UsageSessionService.SAKAI_CSRF_SESSION_ATTRIBUTE);",
          "587:     currentSession.clearExcept(saveAttributes);",
          "589:     currentSession.setUserId(realUserId);",
          "590:     currentSession.setUserEid(realUserEid);",
          "591:     authzGroupService().refreshUser(realUserId);",
          "592:     log.info(\"Exiting from roleview mode, restored real user [{}] for session [{}]\", realUserEid, currentSession.getId());",
          "593:    } else {",
          "594:     log.error(\"Can not restore session from roleview mode, missing the original session, session is likely corrupt\");",
          "595:     currentSession.invalidate();",
          "596:     throw new SakaiException(\"Can not restore session from roleview mode, missing the original session\");",
          "597:    }",
          "598:   } else {",
          "599:    log.warn(\"Restore from roleview for user, but a session does not exist for this request, skipping\");",
          "600:   }",
          "601:  }",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: import org.sakaiproject.event.api.Notification;",
          "78: import org.sakaiproject.event.api.NotificationAction;",
          "79: import org.sakaiproject.event.api.NotificationService;",
          "80: import org.sakaiproject.exception.IdInvalidException;",
          "81: import org.sakaiproject.exception.IdUnusedException;",
          "82: import org.sakaiproject.exception.IdUsedException;",
          "83: import org.sakaiproject.exception.PermissionException;",
          "84: import org.sakaiproject.id.api.IdManager;",
          "85: import org.sakaiproject.javax.PagingPosition;",
          "86: import org.sakaiproject.memory.api.Cache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: import org.sakaiproject.event.api.UsageSessionService;",
          "85: import org.sakaiproject.exception.SakaiException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:  protected abstract EntityManager entityManager();",
          "426:  protected abstract EventTrackingService eventTrackingService();",
          "436:  protected abstract SecurityService securityService();",
          "441:  protected abstract SessionManager sessionManager();",
          "446:  protected abstract TimeService timeService();",
          "461:  protected abstract UserDirectoryService userDirectoryService();",
          "",
          "[Removed Lines]",
          "416:  protected abstract ServerConfigurationService serverConfigurationService();",
          "431:  protected abstract ThreadLocalManager threadLocalManager();",
          "451:  protected abstract FunctionManager functionManager();",
          "456:  protected abstract MemoryService memoryService();",
          "466:  protected abstract AuthzGroupService authzGroupService();",
          "471:  protected abstract ActiveToolManager activeToolManager();",
          "476:  protected abstract IdManager idManager();",
          "482:  protected abstract NotificationService notificationService();",
          "488:  protected abstract MicrosoftMessagingService microsoftMessagingService();",
          "",
          "[Added Lines]",
          "415:  protected abstract ActiveToolManager activeToolManager();",
          "416:  protected abstract AuthzGroupService authzGroupService();",
          "419:  protected abstract FunctionManager functionManager();",
          "420:  protected abstract IdManager idManager();",
          "421:  protected abstract MemoryService memoryService();",
          "422:  protected abstract MicrosoftMessagingService microsoftMessagingService();",
          "423:  protected abstract NotificationService notificationService();",
          "425:  protected abstract ServerConfigurationService serverConfigurationService();",
          "427:  protected abstract ThreadLocalManager threadLocalManager();",
          "429:  protected abstract UsageSessionService usageSessionService();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3028:   }",
          "3029:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2973:  public void activateRoleViewOnSite(String siteReference, String role) throws SakaiException {",
          "2974:   if (!unlockCheck(SiteService.SITE_ROLE_SWAP, siteReference)) {",
          "2976:    throw new SakaiException(\"Can't activate roleview mode on site [\" + siteReference + \"] and role [\" + role + \"]\");",
          "2977:   }",
          "2978:   User newUser = getMockUserInSite(siteReference, role);",
          "2979:   usageSessionService().impersonateUser(newUser.getId());",
          "2980:   securityService().setUserEffectiveRole(siteReference, role);",
          "2981:  }",
          "2983:  public User getMockUserInSite(String siteReference, String role) throws SakaiException {",
          "2984:   String eid = siteId(siteReference) + \"+\" + role;",
          "2985:   User mockUser;",
          "2986:   try {",
          "2987:    mockUser = userDirectoryService().getUserByEid(eid);",
          "2988:   } catch (UserNotDefinedException e) {",
          "2989:    mockUser = addMockUserInSite(siteReference, eid, role);",
          "2990:   }",
          "2991:   return mockUser;",
          "2992:  }",
          "2994:  public User addMockUserInSite(String siteReference, String eid, String role) throws SakaiException {",
          "2995:   User newUser = null;",
          "2996:   if (StringUtils.isNoneBlank(siteReference, eid, role)) {",
          "2997:    try {",
          "2998:     String mockUserEmail = eid + \"@\" + serverConfigurationService().getServerName();",
          "2999:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, eid, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
          "3000:     AuthzGroup realmEdit = authzGroupService().getAuthzGroup(siteReference);",
          "3001:     if (authzGroupService().allowUpdate(siteReference) || allowUpdateSiteMembership(siteId(siteReference))) {",
          "3002:      realmEdit.addMember(newUser.getId(), role, true, false);",
          "3003:      authzGroupService().save(realmEdit);",
          "3004:     }",
          "3005:    } catch (Exception e) {",
          "3006:     log.warn(\"Could not add a mock user [{}] with role [{}] in site [{}], {}\", eid, role, siteReference, e.toString());",
          "3007:     throw new SakaiException(e);",
          "3008:    }",
          "3009:   }",
          "3010:   return newUser;",
          "3011:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3837:                     clearUserCacheForUser(event.getUserId());",
          "3838:                     break;",
          "3841:             }",
          "3842:         }",
          "3845:  protected Storage storage() {",
          "3846:   return m_storage;",
          "",
          "[Removed Lines]",
          "3839:                 default:",
          "3843:     }",
          "",
          "[Added Lines]",
          "3821:     case UsageSessionService.EVENT_ROLEVIEW_EXIT:",
          "3822:      try {",
          "3823:       usageSessionService().restoreUser();",
          "3824:      } catch (SakaiException e) {",
          "3825:       log.error(\"Could not restore session while handling event [{}], for user [{}}, {}\", event.getEvent(), event.getResource(), e.toString());",
          "3826:      }",
          "3827:     default:",
          "3831:  }",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   return reference.substring(lastSeparatorIndex + 1);",
          "241:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:  public boolean isRoleViewType(String id) {",
          "244:   try {",
          "245:    User user = getUser(id);",
          "246:    return ROLEVIEW_USER_TYPE.equals(user.getType());",
          "247:   } catch (UserNotDefinedException e) {",
          "248:    return false;",
          "249:   }",
          "250:  }",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java||kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java": [
          "File: kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java -> kernel/kernel-impl/src/test/java/org/sakai/memory/impl/test/MockSecurityService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   return null;",
          "160:  }",
          "168: }",
          "",
          "[Removed Lines]",
          "162:  @Override",
          "163:  public void changeToRoleViewOnSite(Site site, String role) throws SakaiException {",
          "166:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java||kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java": [
          "File: kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java -> kernel/kernel-impl/src/test/java/org/sakaiproject/authz/impl/RoleSwapMembershipTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   Assert.assertFalse(authzGroupService.isAllowed(\"maintain\", SiteService.SITE_VISIT, group2.getReference()));",
          "109:   site = siteService.getSite(site.getId());",
          "",
          "[Removed Lines]",
          "105:   securityService.changeToRoleViewOnSite(site, \"access\");",
          "106:   String mockupUserId = site.getId().toLowerCase() + \"#\" + \"access\";",
          "",
          "[Added Lines]",
          "105:   siteService.activateRoleViewOnSite(site.getReference(), \"access\");",
          "106:   String mockupUserId = site.getId().toLowerCase() + \"+\" + \"access\";",
          "",
          "---------------"
        ],
        "kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java||kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java": [
          "File: kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java -> kernel/kernel-impl/src/test/java/org/sakaiproject/site/impl/SiteServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.sakaiproject.entity.api.EntityManager;",
          "34: import org.sakaiproject.event.api.EventTrackingService;",
          "35: import org.sakaiproject.event.api.NotificationService;",
          "36: import org.sakaiproject.id.api.IdManager;",
          "37: import org.sakaiproject.javax.PagingPosition;",
          "38: import org.sakaiproject.memory.api.MemoryService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.sakaiproject.event.api.UsageSessionService;",
          "37: import org.sakaiproject.exception.SakaiException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   return null;",
          "161:  }",
          "163:  @Override",
          "164:  public List<String> getSiteIds(SelectionType type, Object ofType, String criteria, Map<String, String> propertyCriteria, SortType sort,",
          "165:          PagingPosition page) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:  @Override",
          "166:  protected UsageSessionService usageSessionService() {",
          "167:   return null;",
          "168:  }",
          "170:  @Override",
          "171:  public void activateRoleViewOnSite(String siteReference, String role) throws SakaiException {",
          "173:  }",
          "",
          "---------------"
        ],
        "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java": [
          "File: portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java -> portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package org.sakaiproject.portal.charon.handlers;",
          "18: import java.util.Set;",
          "20: import javax.servlet.http.HttpServletRequest;",
          "21: import javax.servlet.http.HttpServletResponse;",
          "24: import org.sakaiproject.authz.api.Role;",
          "27: import org.sakaiproject.component.cover.ServerConfigurationService;",
          "28: import org.sakaiproject.event.api.EventTrackingService;",
          "29: import org.sakaiproject.event.api.NotificationService;",
          "30: import org.sakaiproject.exception.IdUnusedException;",
          "31: import org.sakaiproject.exception.PermissionException;",
          "32: import org.sakaiproject.portal.api.PortalHandlerException;",
          "33: import org.sakaiproject.portal.util.URLUtils;",
          "34: import org.sakaiproject.site.api.Site;",
          "35: import org.sakaiproject.site.api.SiteService;",
          "36: import org.sakaiproject.tool.api.Session;",
          "37: import lombok.extern.slf4j.Slf4j;",
          "39: @Slf4j",
          "40: public class RoleSwitchHandler extends BasePortalHandler",
          "41: {",
          "42:  private static final String URL_FRAGMENT = \"role-switch\";",
          "49:  public RoleSwitchHandler() {",
          "53:   setUrlFragment(RoleSwitchHandler.URL_FRAGMENT);",
          "54:  }",
          "",
          "[Removed Lines]",
          "23: import org.apache.commons.lang3.StringUtils;",
          "25: import org.sakaiproject.authz.api.SecurityService;",
          "26: import org.sakaiproject.component.cover.ComponentManager;",
          "43:  public static final String EVENT_ROLESWAP_START = \"roleswap.start\";",
          "45:  final EventTrackingService eventTrackingService;",
          "46:  final SecurityService securityService;",
          "47:  final SiteService siteService;",
          "50:   eventTrackingService = ComponentManager.get(EventTrackingService.class);",
          "51:   securityService = ComponentManager.get(SecurityService.class);",
          "52:   siteService = ComponentManager.get(SiteService.class);",
          "",
          "[Added Lines]",
          "18: import java.util.Collection;",
          "28: import org.sakaiproject.event.api.UsageSessionService;",
          "34: import org.sakaiproject.site.api.SitePage;",
          "37: import org.springframework.beans.factory.annotation.Autowired;",
          "38: import org.springframework.beans.factory.annotation.Qualifier;",
          "39: import org.springframework.web.context.support.SpringBeanAutowiringSupport;",
          "48:  @Autowired @Qualifier(\"org.sakaiproject.event.api.EventTrackingService\")",
          "49:  private EventTrackingService eventTrackingService;",
          "50:  @Autowired @Qualifier(\"org.sakaiproject.site.api.SiteService\")",
          "51:  private SiteService siteService;",
          "54:   SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     activeSite.getPages().stream() // get all pages in site",
          "121:      .peek(tool -> log.debug(\"Resetting state for site: \" + activeSite.getId() + \" tool: \" + tool.getId()))",
          "122:      .forEach(tool -> session.getToolSession(tool.getId()).clearAttributes()); // reset each tool",
          "124:     portalService.setResetState(\"true\"); // flag the portal to reset",
          "132:     res.sendRedirect(URLUtils.sanitisePath(siteUrl));",
          "133:     return RESET_DONE;",
          "",
          "[Removed Lines]",
          "119:      .map(page -> page.getTools()) // tools for each page",
          "120:      .flatMap(tools -> tools.stream()) // combine all tool lists",
          "127:     securityService.changeToRoleViewOnSite(activeSite, parts[5]);",
          "130:     eventTrackingService.post(eventTrackingService.newEvent(EVENT_ROLESWAP_START, parts[5], parts[2], false, NotificationService.NOTI_NONE));",
          "",
          "[Added Lines]",
          "121:      .map(SitePage::getTools) // tools for each page",
          "122:      .flatMap(Collection::stream) // combine all tool lists",
          "129:     siteService.activateRoleViewOnSite(activeSite.getReference(), parts[5]);",
          "132:     eventTrackingService.post(eventTrackingService",
          "133:       .newEvent(UsageSessionService.EVENT_ROLEVIEW_START, parts[5], parts[2], false, NotificationService.NOTI_NONE));",
          "",
          "---------------"
        ],
        "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java||portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java": [
          "File: portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java -> portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/RoleSwitchOutHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import javax.servlet.http.HttpServletRequest;",
          "19: import javax.servlet.http.HttpServletResponse;",
          "22: import org.sakaiproject.authz.api.SecurityService;",
          "23: import org.sakaiproject.component.cover.ComponentManager;",
          "24: import org.sakaiproject.component.cover.ServerConfigurationService;",
          "25: import org.sakaiproject.event.api.EventTrackingService;",
          "26: import org.sakaiproject.event.api.NotificationService;",
          "27: import org.sakaiproject.exception.IdUnusedException;",
          "28: import org.sakaiproject.exception.PermissionException;",
          "29: import org.sakaiproject.portal.api.PortalHandlerException;",
          "",
          "[Removed Lines]",
          "21: import org.apache.commons.lang3.StringUtils;",
          "",
          "[Added Lines]",
          "26: import org.sakaiproject.event.api.UsageSessionService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: public class RoleSwitchOutHandler extends BasePortalHandler",
          "37: {",
          "38:  private static final String URL_FRAGMENT = \"role-switch-out\";",
          "41:  final EventTrackingService eventTrackingService;",
          "42:  final SecurityService securityService;",
          "",
          "[Removed Lines]",
          "39:  public static final String EVENT_ROLESWAP_EXIT = \"roleswap.exit\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:     portalService.setResetState(\"true\"); // flag the portal to reset",
          "95:     res.sendRedirect(roleExitUrl);",
          "96:     return RESET_DONE;",
          "",
          "[Removed Lines]",
          "93:     eventTrackingService.post(eventTrackingService.newEvent(EVENT_ROLESWAP_EXIT, null, parts[2], false, NotificationService.NOTI_NONE));",
          "",
          "[Added Lines]",
          "92:     eventTrackingService.post(eventTrackingService",
          "93:       .newEvent(UsageSessionService.EVENT_ROLEVIEW_EXIT, null, parts[2], false, NotificationService.NOTI_NONE));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7f6951c42f5bb1551503e1e01ba6bc2caf58cc9",
      "candidate_info": {
        "commit_hash": "e7f6951c42f5bb1551503e1e01ba6bc2caf58cc9",
        "repo": "sakaiproject/sakai",
        "commit_url": "https://github.com/sakaiproject/sakai/commit/e7f6951c42f5bb1551503e1e01ba6bc2caf58cc9",
        "files": [
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java",
          "mailsender/tool/src/webapp/content/templates/compose.html"
        ],
        "message": "SAK-50728 Mailsender optimize calls around users, roles, sections (#13077)",
        "before_after_code_files": [
          "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java||mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java",
          "mailsender/tool/src/webapp/content/templates/compose.html||mailsender/tool/src/webapp/content/templates/compose.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java"
          ],
          "candidate": [
            "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java"
          ]
        }
      },
      "candidate_diff": {
        "kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/user/impl/BaseUserDirectoryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:  @Override",
          "245:  public boolean isRoleViewType(String id) {",
          "252:  }",
          "",
          "[Removed Lines]",
          "246:   if (id != null) {",
          "247:    String userId = Optional.ofNullable(m_storage.checkMapForId(id)).orElse(id);",
          "248:    User user = m_storage.getById(userId);",
          "249:    if (user != null) return ROLEVIEW_USER_TYPE.equals(user.getType());",
          "250:         }",
          "251:   return false;",
          "",
          "[Added Lines]",
          "246:   if (id == null) return false;",
          "247:   return getOptionalUser(id).map(u -> ROLEVIEW_USER_TYPE.equals(u.getType())).orElse(false);",
          "",
          "---------------"
        ],
        "mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java||mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java": [
          "File: mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java -> mailsender/impl/src/java/org/sakaiproject/mailsender/logic/impl/ComposeLogicImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.text.Collator;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Collection;",
          "23: import java.util.Comparator;",
          "24: import java.util.HashSet;",
          "26: import java.util.List;",
          "27: import java.util.Properties;",
          "28: import java.util.Set;",
          "",
          "[Removed Lines]",
          "22: import java.util.Collections;",
          "25: import java.util.Iterator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.sakaiproject.tool.api.ToolManager;",
          "47: import org.sakaiproject.user.api.User;",
          "48: import org.sakaiproject.user.api.UserDirectoryService;",
          "50: import org.sakaiproject.util.comparator.UserSortNameComparator;",
          "52: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "49: import org.sakaiproject.user.api.UserNotDefinedException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:   String realmId = externalLogic.getSiteRealmID();",
          "79:   AuthzGroup arole = authzGroupService.getAuthzGroup(realmId);",
          "117:   return theRoles;",
          "118:  }",
          "",
          "[Removed Lines]",
          "81:   for (Iterator<?> i = arole.getRoles().iterator(); i.hasNext();)",
          "82:   {",
          "83:    Role r = (Role) i.next();",
          "84:    String rolename = r.getId();",
          "85:    if (includeRole(rolename)) {",
          "86:     String singular = null;",
          "87:     String plural = null;",
          "89:     EmailRole configRole = findConfigRole(realmId, rolename, configRoles);",
          "91:     if (configRole != null)",
          "92:     {",
          "93:      singular = configRole.getRoleSingular();",
          "94:      plural = configRole.getRolePlural();",
          "95:     }",
          "97:     else",
          "98:     {",
          "99:      singular = rolename;",
          "100:      plural = rolename;",
          "101:     }",
          "103:     EmailRole emailrole = null;",
          "104:     if (getGroupAwareRole().equals(rolename))",
          "105:     {",
          "106:      emailrole = new EmailRole(realmId, rolename, singular, plural, EmailRole.Type.ROLE,",
          "107:        true);",
          "108:     }",
          "109:     else",
          "110:     {",
          "111:      emailrole = new EmailRole(realmId, rolename, singular, plural, EmailRole.Type.ROLE);",
          "112:     }",
          "113:     theRoles.add(emailrole);",
          "114:    }",
          "115:   }",
          "116:   Collections.sort(theRoles, new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "[Added Lines]",
          "78:         for (Role r : arole.getRoles()) {",
          "79:             String rolename = r.getId();",
          "80:             if (includeRole(rolename)) {",
          "81:                 String singular = null;",
          "82:                 String plural = null;",
          "84:                 EmailRole configRole = findConfigRole(realmId, rolename, configRoles);",
          "86:                 if (configRole != null) {",
          "87:                     singular = configRole.getRoleSingular();",
          "88:                     plural = configRole.getRolePlural();",
          "89:                 }",
          "91:                 else {",
          "92:                     singular = rolename;",
          "93:                     plural = rolename;",
          "94:                 }",
          "96:                 EmailRole emailrole = null;",
          "97:                 if (getGroupAwareRole().equals(rolename)) {",
          "98:                     emailrole = new EmailRole(realmId, rolename, singular, plural, EmailRole.Type.ROLE,",
          "99:                             true);",
          "100:                 } else {",
          "101:                     emailrole = new EmailRole(realmId, rolename, singular, plural, EmailRole.Type.ROLE);",
          "102:                 }",
          "103:                 theRoles.add(emailrole);",
          "104:             }",
          "105:         }",
          "106:   theRoles.sort(new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:     }",
          "192:    }",
          "193:   }",
          "195:   return roles;",
          "196:  }",
          "",
          "[Removed Lines]",
          "194:   Collections.sort(roles, new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "[Added Lines]",
          "182:   roles.sort(new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:     }",
          "223:    }",
          "224:   }",
          "226:   return roles;",
          "227:  }",
          "",
          "[Removed Lines]",
          "225:   Collections.sort(roles, new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "[Added Lines]",
          "213:   roles.sort(new EmailRoleComparator(EmailRoleComparator.SORT_BY.PLURAL));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:    String realmId = externalLogic.getSiteRealmID();",
          "242:    AuthzGroup arole = authzGroupService.getAuthzGroup(realmId);",
          "259:   }",
          "260:   catch (GroupNotDefinedException e)",
          "261:   {",
          "",
          "[Removed Lines]",
          "244:    for (Iterator<?> i = arole.getRoles().iterator(); i.hasNext();)",
          "245:    {",
          "246:     Role r = (Role) i.next();",
          "247:     String rolename = r.getId();",
          "248:     for (int t = 0; t < gartokens.length; t++)",
          "249:     {",
          "250:      if (gartokens[t].trim().equals(rolename.trim()))",
          "251:      {",
          "252:       retval = rolename;",
          "253:       break;",
          "254:      }",
          "255:     }",
          "256:     if (retval != null)",
          "257:      break;",
          "258:    }",
          "",
          "[Added Lines]",
          "232:             for (Role r : arole.getRoles()) {",
          "233:                 String rolename = r.getId();",
          "234:                 for (String gartoken : gartokens) {",
          "235:                     if (gartoken.trim().equals(rolename.trim())) {",
          "236:                         retval = rolename;",
          "237:                         break;",
          "238:                     }",
          "239:                 }",
          "240:                 if (retval != null)",
          "241:                     break;",
          "242:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "287:   return defaultRole;",
          "288:  }",
          "291:  {",
          "293:   Set<String> userIds = getUserIds();",
          "296:  }",
          "298:  protected Set<String> getUserIds() throws IdUnusedException",
          "",
          "[Removed Lines]",
          "290:  public List<User> getUsers() throws IdUnusedException",
          "292:   ArrayList<User> users = new ArrayList<User>();",
          "294:   compileUsers(users, userIds);",
          "295:   return users;",
          "",
          "[Added Lines]",
          "274:  @Override",
          "275:     public List<User> getUsers() throws IdUnusedException",
          "278:   return getSortedUsers(userIds);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:  {",
          "317:   Set<String> userIds = getUserIdsByRole(role);",
          "320:  }",
          "322:  protected Set<String> getUserIdsByRole(String role) throws IdUnusedException",
          "",
          "[Removed Lines]",
          "314:  public List<User> getUsersByRole(String role) throws IdUnusedException",
          "316:   ArrayList<User> users = new ArrayList<User>();",
          "318:   compileUsers(users, userIds);",
          "319:   return users;",
          "",
          "[Added Lines]",
          "297:  @Override",
          "298:     public List<User> getUsersByRole(String role) throws IdUnusedException",
          "301:   return getSortedUsers(userIds);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "359:  {",
          "361:   Set<String> userIds = getUserIdsByGroup(groupId);",
          "364:  }",
          "366:  protected Set<String> getUserIdsByGroup(String groupId) throws IdUnusedException",
          "",
          "[Removed Lines]",
          "358:  public List<User> getUsersByGroup(String groupId) throws IdUnusedException",
          "360:   ArrayList<User> users = new ArrayList<User>();",
          "362:   compileUsers(users, userIds);",
          "363:   return users;",
          "",
          "[Added Lines]",
          "340:  @Override",
          "341:     public List<User> getUsersByGroup(String groupId) throws IdUnusedException",
          "344:   return getSortedUsers(userIds);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "499:  protected Site currentSite() throws IdUnusedException",
          "500:  {",
          "501:   String siteId = externalLogic.getSiteID();",
          "504:  }",
          "513:  {",
          "526:  }",
          "",
          "[Removed Lines]",
          "502:   Site currentSite = siteService.getSite(siteId);",
          "503:   return currentSite;",
          "512:  private void compileUsers(ArrayList<User> users, Set<String> userIds)",
          "514:   for (String userId : userIds)",
          "515:   {",
          "516:    try",
          "517:    {",
          "518:     users.add(userDirectoryService.getUser(userId));",
          "519:    }",
          "520:    catch (UserNotDefinedException e)",
          "521:    {",
          "522:     log.warn(\"Unable to retrieve user: \" + userId);",
          "523:    }",
          "524:   }",
          "525:   Collections.sort(users, new UserSortNameComparator());",
          "",
          "[Added Lines]",
          "483:         return siteService.getSite(siteId);",
          "489:  private List<User> getSortedUsers(Set<String> userIds)",
          "491:   List<User> users = this.userDirectoryService.getUsers(userIds);",
          "492:   users.sort(new UserSortNameComparator());",
          "493:   return users;",
          "",
          "---------------"
        ],
        "mailsender/tool/src/webapp/content/templates/compose.html||mailsender/tool/src/webapp/content/templates/compose.html": [
          "File: mailsender/tool/src/webapp/content/templates/compose.html -> mailsender/tool/src/webapp/content/templates/compose.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:                         </ul>",
          "57:                         <ul id=\"mailsender-roles\" class=\"rolesArea d-none\" role=\"tabpanel\" aria-labelledBy=\"mailsender-tab-roles\">",
          "77:                         </ul>",
          "78:                         <ul id=\"mailsender-sections\" class=\"rolesArea d-none\" role=\"tabpanel\" aria-labelledBy=\"mailsender-tab-sections\">",
          "98:                         </ul>",
          "99:                         <ul id=\"mailsender-groups\" class=\"rolesArea d-none\" role=\"tabpanel\" aria-labelledBy=\"mailsender-tab-groups\">",
          "119:                         </ul>",
          "120:                     </div>",
          "121:                 </div>",
          "",
          "[Removed Lines]",
          "58:                             <li th:if=\"${comp.getEmailRoles().size() == 0}\" class=\"not-found\">",
          "59:                                 <span th:text=\"#{no.role.found}\" aria-live=\"polite\"/>",
          "60:                             </li>",
          "61:                             <li th:unless=\"${comp.getEmailRoles().size() == 0}\" th:each=\"rol:${comp.getEmailRoles()}\" class=\"userGroupsList\">",
          "62:                                 <input th:id=\"${rol.getRoleId()}\" type=\"checkbox\" name=\"rolename\" th:value=\"${rol.getRoleId()}\" onclick=\"RcptSelect.toggleSelectAll(this.id)\" th:aria-label=\"#{a11y_rcpts_by_role(${rol.getRoleId()})}\" th:title=\"#{a11y_rcpts_by_role(${rol.getRoleId()})}\"></input>",
          "63:                                 <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\" th:aria-label=\"#{a11y_show_users(${rol.getRoleId()})}\" th:title=\"#{a11y_show_users(${rol.getRoleId()})}\" aria-expanded=\"false\">",
          "64:                                     <b th:text=\"${rol.getRoleId()} \"></b>",
          "65:                                     <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "66:                                 </button>",
          "67:                                 <ul class=\"d-none scrollable-list\" th:aria-label=\"${rol.getRoleId()}\" tabindex=\"-1\">",
          "68:                                     <li th:if=\"${comp.getUsersByRole(rol.getRoleId()).size() == 0}\" aria-live=\"polite\">",
          "69:                                         <span th:text=\"#{no.role.members.found}\"/>",
          "70:                                     </li>",
          "71:                                     <li th:unless=\"${comp.getUsersByRole(rol.getRoleId()).size() == 0}\" th:each=\"user:${comp.getUsersByRole(rol.getRoleId())}\" >",
          "72:                                         <input th:id=\"'rol-'+(${user.getId()})\" type=\"checkbox\" name=\"user\" th:value=\"${user.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${user.getEmail().isEmpty()}?@{disabled}\"/>",
          "73:                                         <label class=\"user-label\" th:text=\"${user.getDisplayName()}+' ('+ ${user.getDisplayId()}+')'\" th:for=\"'rol-'+(${user.getId()})\"/>",
          "74:                                     </li>",
          "75:                                 </ul>",
          "76:                             </li>",
          "79:                             <li th:if=\"${comp.getEmailSections().size() == 0}\" class=\"not-found\">",
          "80:                                 <span th:text=\"#{no.section.found}\" aria-live=\"polite\"/>",
          "81:                             </li>",
          "82:                             <li th:unless=\"${comp.getEmailSections().size() == 0}\" th:each=\"rolsec:${comp.getEmailSections()}\" class=\"userGroupsList\">",
          "83:                                 <input th:id=\"${rolsec.getRoleSingular()}\" type=\"checkbox\" name=\"rolesecname\" th:value=\"${rolsec.getRoleId()}\" onclick=\"RcptSelect.toggleSelectAll(this.id)\" th:aria-label=\"#{a11y_rcpts_by_section(${rolsec.getRoleSingular()})}\" th:title=\"#{a11y_rcpts_by_section(${rolsec.getRoleSingular()})}\"></input>",
          "84:                                 <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\" th:aria-label=\"#{a11y_show_users(${rolsec.getRoleSingular()})}\" th:title=\"#{a11y_show_users(${rolsec.getRoleSingular()})}\" aria-expanded=\"false\">",
          "85:                                     <b th:text=\"${rolsec.getRoleSingular()} \"></b>",
          "86:                                     <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "87:                                 </button>",
          "88:                                 <ul class=\"d-none scrollable-list\" th:aria-label=\"${rolsec.getRoleSingular()}\" tabindex=\"-1\">",
          "89:                                     <li th:if=\"${comp.countUsersByGroup(rolsec.getRoleId()) == 0}\" aria-live=\"polite\">",
          "90:                                         <span th:text=\"#{no.section.members.found}\"/>",
          "91:                                     </li>",
          "92:                                     <li th:unless=\"${comp.countUsersByGroup(rolsec.getRoleId()) == 0}\" th:each=\"usersec:${comp.getUsersByGroup(rolsec.getRoleId())}\">",
          "93:                                         <input th:id=\"'sec-'+${usersec.getId()}\" type=\"checkbox\" name=\"user\" th:value=\"${usersec.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${usersec.getEmail().isEmpty()}?@{disabled}\" />",
          "94:                                         <label class=\"user-label\" th:text=\"${usersec.getDisplayName()}+' ('+ ${usersec.getDisplayId()}+')'\" th:for=\"'sec-'+${usersec.getId()}\"/>",
          "95:                                     </li>",
          "96:                                 </ul>",
          "97:                             </li>",
          "100:                             <li th:if=\"${comp.getEmailGroups().size() == 0}\" class=\"not-found\">",
          "101:                                 <span th:text=\"#{no.group.found}\" aria-live=\"polite\"/>",
          "102:                             </li>",
          "103:                             <li th:unless=\"${comp.getEmailGroups().size() == 0}\" th:each=\"rolg:${comp.getEmailGroups()}\" class=\"userGroupsList\">",
          "104:                                 <input th:id=\"${rolg.getRoleSingular()}\" type=\"checkbox\" name=\"rolegname\" th:value=\"${rolg.getRoleId()}\" onclick=\"RcptSelect.toggleSelectAll(this.id)\" th:aria-label=\"#{a11y_rcpts_by_group(${rolg.getRoleSingular()})}\" th:title=\"#{a11y_rcpts_by_group(${rolg.getRoleSingular()})}\"></input>",
          "105:                                 <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\" th:aria-label=\"#{a11y_show_users(${rolg.getRoleSingular()})}\" th:title=\"#{a11y_show_users(${rolg.getRoleSingular()})}\" aria-expanded=\"false\">",
          "106:                                     <b th:text=\"${rolg.getRoleSingular()} \"></b>",
          "107:                                     <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "108:                                 </button>",
          "109:                                 <ul class=\"d-none scrollable-list\" th:aria-label=\"${rolg.getRoleSingular()}\" tabindex=\"-1\">",
          "110:                                     <li th:if=\"${comp.countUsersByGroup(rolg.getRoleId()) == 0}\" aria-live=\"polite\">",
          "111:                                         <span th:text=\"#{no.group.members.found}\"/>",
          "112:                                     </li>",
          "113:                                     <li th:unless=\"${comp.countUsersByGroup(rolg.getRoleId()) == 0}\" th:each=\"userg:${comp.getUsersByGroup(rolg.getRoleId())}\">",
          "114:                                         <input th:id=\"'gro-'+${userg.getId()}\" type=\"checkbox\" name=\"user\" th:value=\"${userg.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${userg.getEmail().isEmpty()}?@{disabled}\" />",
          "115:                                         <label class=\"user-label\" th:text=\"${userg.getDisplayName()}+' ('+ ${userg.getDisplayId()}+')'\" th:for=\"'gro-'+${userg.getId()}\"/>",
          "116:                                     </li>",
          "117:                                 </ul>",
          "118:                             </li>",
          "",
          "[Added Lines]",
          "58:                             <th:block th:with=\"emailRoles=${comp.getEmailRoles()}\">",
          "59:                                 <li th:if=\"${emailRoles.size() == 0}\" class=\"not-found\">",
          "60:                                     <span th:text=\"#{no.role.found}\" aria-live=\"polite\"/>",
          "61:                                 </li>",
          "62:                                 <li th:unless=\"${emailRoles.size() == 0}\" th:each=\"rol:${emailRoles}\" class=\"userGroupsList\">",
          "63:                                     <th:block th:with=\"roleUsers=${comp.getUsersByRole(rol.getRoleId())},roleId=${rol.getRoleId()}\">",
          "64:                                         <input th:id=\"${roleId}\" type=\"checkbox\" name=\"rolename\" th:value=\"${roleId}\"",
          "65:                                                onclick=\"RcptSelect.toggleSelectAll(this.id)\"",
          "66:                                                th:aria-label=\"#{a11y_rcpts_by_role(${roleId})}\"",
          "67:                                                th:title=\"#{a11y_rcpts_by_role(${roleId})}\"></input>",
          "68:                                         <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\"",
          "69:                                                 th:aria-label=\"#{a11y_show_users(${roleId})}\"",
          "70:                                                 th:title=\"#{a11y_show_users(${roleId})}\" aria-expanded=\"false\">",
          "71:                                             <b th:text=\"${roleId} \"></b>",
          "72:                                             <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "73:                                         </button>",
          "74:                                         <ul class=\"d-none scrollable-list\" th:aria-label=\"${roleId}\" tabindex=\"-1\">",
          "75:                                             <li th:if=\"${roleUsers.size() == 0}\" aria-live=\"polite\">",
          "76:                                                 <span th:text=\"#{no.role.members.found}\"/>",
          "77:                                             </li>",
          "78:                                             <li th:unless=\"${roleUsers.size() == 0}\" th:each=\"user:${roleUsers}\" >",
          "79:                                                 <input th:id=\"'rol-'+(${user.getId()})\" type=\"checkbox\" name=\"user\" th:value=\"${user.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${user.getEmail().isEmpty()}?@{disabled}\"/>",
          "80:                                                 <label class=\"user-label\" th:text=\"${user.getDisplayName()}+' ('+ ${user.getDisplayId()}+')'\" th:for=\"'rol-'+(${user.getId()})\"/>",
          "81:                                             </li>",
          "82:                                         </ul>",
          "83:                                     </th:block>",
          "84:                                 </li>",
          "85:                             </th:block>",
          "88:                             <th:block th:with=\"emailSections=${comp.getEmailSections()}\">",
          "89:                                 <li th:if=\"${emailSections.size() == 0}\" class=\"not-found\">",
          "90:                                     <span th:text=\"#{no.section.found}\" aria-live=\"polite\"/>",
          "91:                                 </li>",
          "92:                                 <li th:unless=\"${emailSections.size() == 0}\" th:each=\"rolsec:${emailSections}\" class=\"userGroupsList\">",
          "93:                                     <th:block th:with=\"sectionUsers=${comp.getUsersByGroup(rolsec.getRoleId())},",
          "94:                                                       userCount=${comp.countUsersByGroup(rolsec.getRoleId())},",
          "95:                                                       roleSingular=${rolsec.getRoleSingular()},",
          "96:                                                       roleId=${rolsec.getRoleId()}\">",
          "97:                                         <input th:id=\"${roleSingular}\" type=\"checkbox\" name=\"rolesecname\" th:value=\"${roleId}\"",
          "98:                                                onclick=\"RcptSelect.toggleSelectAll(this.id)\"",
          "99:                                                th:aria-label=\"#{a11y_rcpts_by_section(${roleSingular})}\"",
          "100:                                                th:title=\"#{a11y_rcpts_by_section(${roleSingular})}\"></input>",
          "101:                                         <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\"",
          "102:                                                 th:aria-label=\"#{a11y_show_users(${roleSingular})}\"",
          "103:                                                 th:title=\"#{a11y_show_users(${roleSingular})}\" aria-expanded=\"false\">",
          "104:                                             <b th:text=\"${roleSingular} \"></b>",
          "105:                                             <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "106:                                         </button>",
          "107:                                         <ul class=\"d-none scrollable-list\" th:aria-label=\"${roleSingular}\" tabindex=\"-1\">",
          "108:                                             <li th:if=\"${userCount == 0}\" aria-live=\"polite\">",
          "109:                                                 <span th:text=\"#{no.section.members.found}\"/>",
          "110:                                             </li>",
          "111:                                             <li th:unless=\"${userCount == 0}\" th:each=\"usersec:${sectionUsers}\">",
          "112:                                                 <input th:id=\"'sec-'+${usersec.getId()}\" type=\"checkbox\" name=\"user\" th:value=\"${usersec.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${usersec.getEmail().isEmpty()}?@{disabled}\" />",
          "113:                                                 <label class=\"user-label\" th:text=\"${usersec.getDisplayName()}+' ('+ ${usersec.getDisplayId()}+')'\" th:for=\"'sec-'+${usersec.getId()}\"/>",
          "114:                                             </li>",
          "115:                                         </ul>",
          "116:                                     </th:block>",
          "117:                                 </li>",
          "118:                             </th:block>",
          "121:                             <th:block th:with=\"emailGroups=${comp.getEmailGroups()}\">",
          "122:                                 <li th:if=\"${emailGroups.size() == 0}\" class=\"not-found\">",
          "123:                                     <span th:text=\"#{no.group.found}\" aria-live=\"polite\"/>",
          "124:                                 </li>",
          "125:                                 <li th:unless=\"${emailGroups.size() == 0}\" th:each=\"rolg:${emailGroups}\" class=\"userGroupsList\">",
          "126:                                     <th:block th:with=\"groupUsers=${comp.getUsersByGroup(rolg.getRoleId())},",
          "127:                                                               userCount=${comp.countUsersByGroup(rolg.getRoleId())},",
          "128:                                                               roleSingular=${rolg.getRoleSingular()},",
          "129:                                                               roleId=${rolg.getRoleId()}\">",
          "130:                                         <input th:id=\"${roleSingular}\" type=\"checkbox\" name=\"rolegname\" th:value=\"${roleId}\"",
          "131:                                                onclick=\"RcptSelect.toggleSelectAll(this.id)\"",
          "132:                                                th:aria-label=\"#{a11y_rcpts_by_group(${roleSingular})}\"",
          "133:                                                th:title=\"#{a11y_rcpts_by_group(${roleSingular})}\"></input>",
          "134:                                         <button type=\"button\" onclick=\"showIndividuals(this)\" class=\"btn btn-transparent\"",
          "135:                                                 th:aria-label=\"#{a11y_show_users(${roleSingular})}\"",
          "136:                                                 th:title=\"#{a11y_show_users(${roleSingular})}\" aria-expanded=\"false\">",
          "137:                                             <b th:text=\"${roleSingular} \"></b>",
          "138:                                             <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>",
          "139:                                         </button>",
          "140:                                         <ul class=\"d-none scrollable-list\" th:aria-label=\"${roleSingular}\" tabindex=\"-1\">",
          "141:                                             <li th:if=\"${userCount == 0}\" aria-live=\"polite\">",
          "142:                                                 <span th:text=\"#{no.group.members.found}\"/>",
          "143:                                             </li>",
          "144:                                             <li th:unless=\"${userCount == 0}\" th:each=\"userg:${groupUsers}\">",
          "145:                                                 <input th:id=\"'gro-'+${userg.getId()}\" type=\"checkbox\" name=\"user\" th:value=\"${userg.getId()}\" onclick=\"RcptSelect.toggleIndividual(this.id)\" th:attrappend=\"disabled=${userg.getEmail().isEmpty()}?@{disabled}\" />",
          "146:                                                 <label class=\"user-label\" th:text=\"${userg.getDisplayName()}+' ('+ ${userg.getDisplayId()}+')'\" th:for=\"'gro-'+${userg.getId()}\"/>",
          "147:                                             </li>",
          "148:                                         </ul>",
          "149:                                     </th:block>",
          "150:                                 </li>",
          "151:                             </th:block>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f523ef93647385b1900df9b9118a81a96dc24995",
      "candidate_info": {
        "commit_hash": "f523ef93647385b1900df9b9118a81a96dc24995",
        "repo": "sakaiproject/sakai",
        "commit_url": "https://github.com/sakaiproject/sakai/commit/f523ef93647385b1900df9b9118a81a96dc24995",
        "files": [
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java"
        ],
        "message": "SAK-50847 Kernel add SA when creating rolview user (#13180)",
        "before_after_code_files": [
          "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java"
          ],
          "candidate": [
            "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java"
          ]
        }
      },
      "candidate_diff": {
        "kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java||kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java": [
          "File: kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java -> kernel/kernel-impl/src/main/java/org/sakaiproject/site/impl/BaseSiteService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2974:   User mockUser;",
          "2975:   try {",
          "2976:    mockUser = userDirectoryService().getUserByEid(eid);",
          "2977:   } catch (UserNotDefinedException e) {",
          "2979:   }",
          "2980:   return mockUser;",
          "2981:  }",
          "",
          "[Removed Lines]",
          "2978:    mockUser = addMockUserInSite(siteReference, eid, role);",
          "2983:  public User addMockUserInSite(String siteReference, String eid, String role) throws SakaiException {",
          "2984:   User newUser = null;",
          "2985:   if (StringUtils.isNoneBlank(siteReference, eid, role)) {",
          "2986:    try {",
          "2987:     String mockUserEmail = eid + \"@\" + serverConfigurationService().getServerName();",
          "2988:     newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, null, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
          "2989:     AuthzGroup realmEdit = authzGroupService().getAuthzGroup(siteReference);",
          "2990:     if (authzGroupService().allowUpdate(siteReference) || allowUpdateSiteMembership(siteId(siteReference))) {",
          "2991:      realmEdit.addMember(newUser.getId(), role, true, false);",
          "2992:      authzGroupService().save(realmEdit);",
          "2993:     }",
          "2994:    } catch (Exception e) {",
          "2995:     log.warn(\"Could not add a mock user [{}] with role [{}] in site [{}], {}\", eid, role, siteReference, e.toString());",
          "2996:     throw new SakaiException(e);",
          "2997:    }",
          "2998:   }",
          "2999:   return newUser;",
          "3000:  }",
          "",
          "[Added Lines]",
          "2977:    if (authzGroupService().getUserRole(mockUser.getId(), siteReference) == null) {",
          "2978:     mockUser = addMockUserInSite(mockUser, siteReference, eid, role);",
          "2979:    }",
          "2981:    mockUser = addMockUserInSite(null, siteReference, eid, role);",
          "2986:     private User addMockUserInSite(User user, String siteReference, String eid, String role) throws SakaiException {",
          "2988:         User newUser = null;",
          "2989:         if (StringUtils.isNoneBlank(siteReference, eid, role)) {",
          "2990:             try {",
          "2991:                 AuthzGroup realm = authzGroupService().getAuthzGroup(siteReference);",
          "2992:                 if (realm != null) {",
          "2993:                     SecurityAdvisor sa = (userId, function, reference) -> {",
          "2994:                         if (reference.endsWith(siteReference)",
          "2995:                                 && (AuthzGroupService.SECURE_UPDATE_AUTHZ_GROUP.equals(function) || UserDirectoryService.SECURE_ADD_USER.equals(function))) {",
          "2996:                             return SecurityAdvisor.SecurityAdvice.ALLOWED;",
          "2997:                         }",
          "2998:                         return SecurityAdvisor.SecurityAdvice.PASS;",
          "2999:                     };",
          "3000:                     try {",
          "3001:                         securityService().pushAdvisor(sa);",
          "3002:                         if (user == null) {",
          "3003:                             String mockUserEmail = eid + \"@\" + serverConfigurationService().getServerName();",
          "3004:                             newUser = userDirectoryService().addUser(null, eid, role, role, mockUserEmail, null, UserDirectoryService.ROLEVIEW_USER_TYPE, null);",
          "3005:                         } else {",
          "3006:                             newUser = user;",
          "3007:                         }",
          "3008:                         realm.addMember(newUser.getId(), role, true, false);",
          "3009:                         authzGroupService().save(realm);",
          "3010:                     } catch (Exception e) {",
          "3011:                         log.warn(\"Can't activate roleview user [{}] in site [{}], {}\", eid, siteReference, e);",
          "3012:                     } finally {",
          "3013:                         securityService().popAdvisor(sa);",
          "3014:                     }",
          "3015:                 } else {",
          "3016:                     throw new SakaiException(\"Can't activate roleview mode on site [\" + siteReference + \"] and role [\" + role + \"]\");",
          "3017:                 }",
          "3018:             } catch (Exception e) {",
          "3019:                 log.warn(\"Could not add a mock user [{}] with role [{}] in site [{}], {}\", eid, role, siteReference, e.toString());",
          "3020:                 throw new SakaiException(e);",
          "3021:             }",
          "3022:         }",
          "3023:         return newUser;",
          "3024:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}