{
  "cve_id": "CVE-2022-45688",
  "cve_desc": "A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.",
  "repo": "stleary/JSON-java",
  "patch_hash": "a6e412bded7a0ad605adfeca029318f184c32102",
  "patch_info": {
    "commit_hash": "a6e412bded7a0ad605adfeca029318f184c32102",
    "repo": "stleary/JSON-java",
    "commit_url": "https://github.com/stleary/JSON-java/commit/a6e412bded7a0ad605adfeca029318f184c32102",
    "files": [
      "src/main/java/org/json/JSONML.java",
      "src/main/java/org/json/XMLtoJSONMLParserConfiguration.java",
      "src/test/java/org/json/junit/JSONMLTest.java"
    ],
    "message": "fix: limit the nesting depth in JSONML\n\nLimit the XML nesting depth for CVE-2022-45688 when using the JsonML transform.",
    "before_after_code_files": [
      "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
      "src/main/java/org/json/XMLtoJSONMLParserConfiguration.java||src/main/java/org/json/XMLtoJSONMLParserConfiguration.java",
      "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java": [
      "File: src/main/java/org/json/JSONML.java -> src/main/java/org/json/JSONML.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:         XMLTokener x,",
      "28:         boolean    arrayForm,",
      "29:         JSONArray  ja,",
      "31:     ) throws JSONException {",
      "32:         String     attribute;",
      "33:         char       c;",
      "",
      "[Removed Lines]",
      "30:         boolean keepStrings",
      "",
      "[Added Lines]",
      "30:         boolean keepStrings,",
      "31:         int currentNestingDepth",
      "32:     ) throws JSONException {",
      "33:         return parse(x,arrayForm, ja,",
      "34:             keepStrings ? XMLtoJSONMLParserConfiguration.KEEP_STRINGS : XMLtoJSONMLParserConfiguration.ORIGINAL,",
      "35:             currentNestingDepth);",
      "36:     }",
      "50:     private static Object parse(",
      "51:         XMLTokener x,",
      "52:         boolean    arrayForm,",
      "53:         JSONArray  ja,",
      "54:         XMLtoJSONMLParserConfiguration config,",
      "55:         int currentNestingDepth",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:                             if (!(token instanceof String)) {",
      "153:                                 throw x.syntaxError(\"Missing value\");",
      "154:                             }",
      "156:                             token = null;",
      "157:                         } else {",
      "158:                             newjo.accumulate(attribute, \"\");",
      "",
      "[Removed Lines]",
      "155:                             newjo.accumulate(attribute, keepStrings ? ((String)token) :XML.stringToValue((String)token));",
      "",
      "[Added Lines]",
      "180:                             newjo.accumulate(attribute, config.isKeepStrings() ? ((String)token) :XML.stringToValue((String)token));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "181:                         if (token != XML.GT) {",
      "182:                             throw x.syntaxError(\"Misshaped tag\");",
      "183:                         }",
      "185:                         if (closeTag != null) {",
      "186:                             if (!closeTag.equals(tagName)) {",
      "187:                                 throw x.syntaxError(\"Mismatched '\" + tagName +",
      "",
      "[Removed Lines]",
      "184:                         closeTag = (String)parse(x, arrayForm, newja, keepStrings);",
      "",
      "[Added Lines]",
      "210:                         if (currentNestingDepth == config.getMaxNestingDepth()) {",
      "211:                             throw x.syntaxError(\"Maximum nesting depth of \" + config.getMaxNestingDepth() + \" reached\");",
      "212:                         }",
      "214:                         closeTag = (String)parse(x, arrayForm, newja, config, currentNestingDepth + 1);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "203:             } else {",
      "204:                 if (ja != null) {",
      "205:                     ja.put(token instanceof String",
      "207:                         : token);",
      "208:                 }",
      "209:             }",
      "",
      "[Removed Lines]",
      "206:                         ? keepStrings ? XML.unescape((String)token) :XML.stringToValue((String)token)",
      "",
      "[Added Lines]",
      "236:                         ? (config.isKeepStrings() ? XML.unescape((String)token) : XML.stringToValue((String)token))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "226:     public static JSONArray toJSONArray(String string) throws JSONException {",
      "228:     }",
      "",
      "[Removed Lines]",
      "227:         return (JSONArray)parse(new XMLTokener(string), true, null, false);",
      "",
      "[Added Lines]",
      "257:         return (JSONArray)parse(new XMLTokener(string), true, null, XMLtoJSONMLParserConfiguration.ORIGINAL, 0);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "248:     public static JSONArray toJSONArray(String string, boolean keepStrings) throws JSONException {",
      "250:     }",
      "",
      "[Removed Lines]",
      "249:         return (JSONArray)parse(new XMLTokener(string), true, null, keepStrings);",
      "",
      "[Added Lines]",
      "279:         return (JSONArray)parse(new XMLTokener(string), true, null, keepStrings, 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "270:     public static JSONArray toJSONArray(XMLTokener x, boolean keepStrings) throws JSONException {",
      "272:     }",
      "",
      "[Removed Lines]",
      "271:         return (JSONArray)parse(x, true, null, keepStrings);",
      "",
      "[Added Lines]",
      "301:         return (JSONArray)parse(x, true, null, keepStrings, 0);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "287:     public static JSONArray toJSONArray(XMLTokener x) throws JSONException {",
      "289:     }",
      "",
      "[Removed Lines]",
      "288:         return (JSONArray)parse(x, true, null, false);",
      "",
      "[Added Lines]",
      "318:         return (JSONArray)parse(x, true, null, false, 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "305:     public static JSONObject toJSONObject(String string) throws JSONException {",
      "307:     }",
      "",
      "[Removed Lines]",
      "306:         return (JSONObject)parse(new XMLTokener(string), false, null, false);",
      "",
      "[Added Lines]",
      "336:         return (JSONObject)parse(new XMLTokener(string), false, null, false, 0);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "325:     public static JSONObject toJSONObject(String string, boolean keepStrings) throws JSONException {",
      "327:     }",
      "",
      "[Removed Lines]",
      "326:         return (JSONObject)parse(new XMLTokener(string), false, null, keepStrings);",
      "",
      "[Added Lines]",
      "356:         return (JSONObject)parse(new XMLTokener(string), false, null, keepStrings, 0);",
      "377:     public static JSONObject toJSONObject(String string, XMLtoJSONMLParserConfiguration config) throws JSONException {",
      "378:         return (JSONObject)parse(new XMLTokener(string), false, null, config, 0);",
      "379:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "343:     public static JSONObject toJSONObject(XMLTokener x) throws JSONException {",
      "345:     }",
      "",
      "[Removed Lines]",
      "344:            return (JSONObject)parse(x, false, null, false);",
      "",
      "[Added Lines]",
      "396:            return (JSONObject)parse(x, false, null, false, 0);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "363:     public static JSONObject toJSONObject(XMLTokener x, boolean keepStrings) throws JSONException {",
      "365:     }",
      "",
      "[Removed Lines]",
      "364:            return (JSONObject)parse(x, false, null, keepStrings);",
      "",
      "[Added Lines]",
      "416:            return (JSONObject)parse(x, false, null, keepStrings, 0);",
      "417:     }",
      "437:     public static JSONObject toJSONObject(XMLTokener x, XMLtoJSONMLParserConfiguration config) throws JSONException {",
      "438:         return (JSONObject)parse(x, false, null, config, 0);",
      "",
      "---------------"
    ],
    "src/main/java/org/json/XMLtoJSONMLParserConfiguration.java||src/main/java/org/json/XMLtoJSONMLParserConfiguration.java": [
      "File: src/main/java/org/json/XMLtoJSONMLParserConfiguration.java -> src/main/java/org/json/XMLtoJSONMLParserConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.json;",
      "3: Public Domain.",
      "9: @SuppressWarnings({\"\"})",
      "10: public class XMLtoJSONMLParserConfiguration {",
      "15:     public static final int UNDEFINED_MAXIMUM_NESTING_DEPTH = -1;",
      "20:     public static final int DEFAULT_MAXIMUM_NESTING_DEPTH = 512;",
      "23:     public static final XMLtoJSONMLParserConfiguration ORIGINAL",
      "24:         = new XMLtoJSONMLParserConfiguration();",
      "26:     public static final XMLtoJSONMLParserConfiguration KEEP_STRINGS",
      "27:         = new XMLtoJSONMLParserConfiguration().withKeepStrings(true);",
      "33:     private boolean keepStrings;",
      "38:     private int maxNestingDepth = DEFAULT_MAXIMUM_NESTING_DEPTH;",
      "43:     public XMLtoJSONMLParserConfiguration() {",
      "44:         this.keepStrings = false;",
      "45:     }",
      "53:     public XMLtoJSONMLParserConfiguration(final boolean keepStrings, final int maxNestingDepth) {",
      "54:         this.keepStrings = keepStrings;",
      "55:         this.maxNestingDepth = maxNestingDepth;",
      "56:     }",
      "61:     @Override",
      "62:     protected XMLtoJSONMLParserConfiguration clone() {",
      "68:         return new XMLtoJSONMLParserConfiguration(",
      "69:                 this.keepStrings,",
      "70:                 this.maxNestingDepth",
      "71:         );",
      "72:     }",
      "80:     public boolean isKeepStrings() {",
      "81:         return this.keepStrings;",
      "82:     }",
      "93:     public XMLtoJSONMLParserConfiguration withKeepStrings(final boolean newVal) {",
      "94:         XMLtoJSONMLParserConfiguration newConfig = this.clone();",
      "95:         newConfig.keepStrings = newVal;",
      "96:         return newConfig;",
      "97:     }",
      "104:     public int getMaxNestingDepth() {",
      "105:         return maxNestingDepth;",
      "106:     }",
      "117:     public XMLtoJSONMLParserConfiguration withMaxNestingDepth(int maxNestingDepth) {",
      "118:         XMLtoJSONMLParserConfiguration newConfig = this.clone();",
      "120:         if (maxNestingDepth > UNDEFINED_MAXIMUM_NESTING_DEPTH) {",
      "121:             newConfig.maxNestingDepth = maxNestingDepth;",
      "122:         } else {",
      "123:             newConfig.maxNestingDepth = UNDEFINED_MAXIMUM_NESTING_DEPTH;",
      "124:         }",
      "126:         return newConfig;",
      "127:     }",
      "128: }",
      "",
      "---------------"
    ],
    "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java": [
      "File: src/test/java/org/json/junit/JSONMLTest.java -> src/test/java/org/json/junit/JSONMLTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "195:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "196:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "197:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "194:         String xmlStr =",
      "",
      "[Added Lines]",
      "194:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     @Test",
      "218:     public void invalidBangInTagException() {",
      "220:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "221:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "222:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "219:         String xmlStr =",
      "",
      "[Added Lines]",
      "219:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "250:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "251:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "252:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "249:         String xmlStr =",
      "",
      "[Added Lines]",
      "249:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "280:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "281:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "282:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "279:         String xmlStr =",
      "",
      "[Added Lines]",
      "279:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "310:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "311:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "312:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "309:         String xmlStr =",
      "",
      "[Added Lines]",
      "309:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "340:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "341:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "342:             \"   xsi:noNamespaceSchemaLocation=\\\"test.xsd\\\">\\n\"+",
      "",
      "[Removed Lines]",
      "339:         String xmlStr =",
      "",
      "[Added Lines]",
      "339:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "370:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "371:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "372:             \"   xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "369:         String xmlStr =",
      "",
      "[Added Lines]",
      "369:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "409:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "410:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "411:                  \"xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "408:         String xmlStr =",
      "",
      "[Added Lines]",
      "408:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "414:                      \"<nocontent/>>\\n\"+",
      "415:                  \"</address>\\n\"+",
      "416:             \"</addresses>\";",
      "418:             \"[\\\"addresses\\\",\"+",
      "419:                 \"{\\\"xsi:noNamespaceSchemaLocation\\\":\\\"test.xsd\\\",\"+",
      "420:                     \"\\\"xmlns:xsi\\\":\\\"http://www.w3.org/2001/XMLSchema-instance\\\"},\"+",
      "",
      "[Removed Lines]",
      "417:         String expectedStr =",
      "",
      "[Added Lines]",
      "417:         String expectedStr =",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "472:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "473:             \"<addresses xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\"+",
      "474:                 \"xsi:noNamespaceSchemaLocation='test.xsd'>\\n\"+",
      "",
      "[Removed Lines]",
      "471:         String xmlStr =",
      "",
      "[Added Lines]",
      "471:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "585:                 \"\\\"tagName\\\":\\\"addresses\\\"\"+",
      "586:             \"}\";",
      "589:             \"[\"+",
      "590:                 \"\\\"addresses\\\",\"+",
      "591:                 \"{\"+",
      "",
      "[Removed Lines]",
      "588:         String expectedJSONArrayStr =",
      "",
      "[Added Lines]",
      "588:         String expectedJSONArrayStr =",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "675:     @Test",
      "676:     public void commentsInXML() {",
      "679:             \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+",
      "680:             \"<!-- this is a comment -->\\n\"+",
      "681:             \"<addresses>\\n\"+",
      "",
      "[Removed Lines]",
      "678:         String xmlStr =",
      "",
      "[Added Lines]",
      "678:         String xmlStr =",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "819:                     ex.getMessage());",
      "820:         }",
      "821:     }",
      "823:     @Test (timeout = 6000)",
      "824:     public void testIssue484InfinteLoop2() {",
      "825:         try {",
      "827:                     \"??|?CglR\u0006??`??>?w??PIlr\u0005??D\u0018",
      "828: ?$?-\u0012?o??O?*??{OD?\u0006Y??`2a????NM?b\u0014q?:O?>S$",
      "829: ?J?\u0006B.gUK?m\\b??zE??\u007f?!v]?\u0001???\u001b\u0001??\u0015?c??????h???s???g\u001a???`?q\u0004bi??:\u0011Zl?)?}1^??k?0??:$V?$?Ovs(}J??\u0016????2;\u0011gQ?\u001f\u0001?\u0004?\u0015?Tg?K?`?h%c?hmGA?<!C*\u0010\u0019?\u00189?~?t?)??,z\u0018A???S}?Q??.q?j????]\";",
      "830:          JSONML.toJSONObject(input);",
      "831:             fail(\"Exception expected for invalid JSON.\");",
      "",
      "[Removed Lines]",
      "826:             String input = \"??*\\n\" +",
      "",
      "[Added Lines]",
      "826:             String input = \"??*\\n\" +",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "833:             assertEquals(\"Exception string did not match: \",",
      "834:                     \"Unterminated string at 242 [character 238 line 2]\",",
      "835:                     ex.getMessage());",
      "836:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "837:     }",
      "839:     @Test",
      "840:     public void testMaxNestingDepthOf42IsRespected() {",
      "841:         final String wayTooLongMalformedXML = new String(new char[6000]).replace(\"\\0\", \"<a>\");",
      "843:         final int maxNestingDepth = 42;",
      "845:         try {",
      "846:             JSONML.toJSONObject(wayTooLongMalformedXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
      "848:             fail(\"Expecting a JSONException\");",
      "849:         } catch (JSONException e) {",
      "850:             assertTrue(\"Wrong throwable thrown: not expecting message <\" + e.getMessage() + \">\",",
      "851:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
      "852:         }",
      "853:     }",
      "855:     @Test",
      "856:     public void testMaxNestingDepthIsRespectedWithValidXML() {",
      "857:         final String perfectlyFineXML = \"<Test>\\n\" +",
      "858:             \"  <employee>\\n\" +",
      "859:             \"    <name>sonoo</name>\\n\" +",
      "860:             \"    <salary>56000</salary>\\n\" +",
      "861:             \"    <married>true</married>\\n\" +",
      "862:             \"  </employee>\\n\" +",
      "863:             \"</Test>\\n\";",
      "865:         final int maxNestingDepth = 1;",
      "867:         try {",
      "868:             JSONML.toJSONObject(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
      "870:             fail(\"Expecting a JSONException\");",
      "871:         } catch (JSONException e) {",
      "872:             assertTrue(\"Wrong throwable thrown: not expecting message <\" + e.getMessage() + \">\",",
      "873:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
      "874:         }",
      "875:     }",
      "877:     @Test",
      "878:     public void testMaxNestingDepthWithValidFittingXML() {",
      "879:         final String perfectlyFineXML = \"<Test>\\n\" +",
      "880:             \"  <employee>\\n\" +",
      "881:             \"    <name>sonoo</name>\\n\" +",
      "882:             \"    <salary>56000</salary>\\n\" +",
      "883:             \"    <married>true</married>\\n\" +",
      "884:             \"  </employee>\\n\" +",
      "885:             \"</Test>\\n\";",
      "887:         final int maxNestingDepth = 3;",
      "889:         try {",
      "890:             JSONML.toJSONObject(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
      "891:         } catch (JSONException e) {",
      "892:             e.printStackTrace();",
      "893:             fail(\"XML document should be parsed as its maximum depth fits the maxNestingDepth \" +",
      "894:                 \"parameter of the XMLtoJSONMLParserConfiguration used\");",
      "895:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9234eab00a421850a20691b04bb18c7cffe4c58a",
      "candidate_info": {
        "commit_hash": "9234eab00a421850a20691b04bb18c7cffe4c58a",
        "repo": "stleary/JSON-java",
        "commit_url": "https://github.com/stleary/JSON-java/commit/9234eab00a421850a20691b04bb18c7cffe4c58a",
        "files": [
          "src/main/java/org/json/JSONMLParserConfiguration.java"
        ],
        "message": "refactor: make JSONMLParserConfiguration all-args constructor private, enforcing the builder pattern.",
        "before_after_code_files": [
          "src/main/java/org/json/JSONMLParserConfiguration.java||src/main/java/org/json/JSONMLParserConfiguration.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/stleary/JSON-java/pull/723"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/org/json/JSONMLParserConfiguration.java||src/main/java/org/json/JSONMLParserConfiguration.java": [
          "File: src/main/java/org/json/JSONMLParserConfiguration.java -> src/main/java/org/json/JSONMLParserConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         this.keepStrings = keepStrings;",
          "55:         this.maxNestingDepth = maxNestingDepth;",
          "56:     }",
          "",
          "[Removed Lines]",
          "53:     public JSONMLParserConfiguration(final boolean keepStrings, final int maxNestingDepth) {",
          "",
          "[Added Lines]",
          "53:     private JSONMLParserConfiguration(final boolean keepStrings, final int maxNestingDepth) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2391d248cc77202eb31d0e4df0edecfbde4ab2dc",
      "candidate_info": {
        "commit_hash": "2391d248cc77202eb31d0e4df0edecfbde4ab2dc",
        "repo": "stleary/JSON-java",
        "commit_url": "https://github.com/stleary/JSON-java/commit/2391d248cc77202eb31d0e4df0edecfbde4ab2dc",
        "files": [
          "src/main/java/org/json/XML.java",
          "src/main/java/org/json/XMLParserConfiguration.java"
        ],
        "message": "fix: amend XMLParserConfiguration.clone() to include the new maxNestingDepth param.\n\nAmend Javadoc for XML and XMLParserConfiguration classes.",
        "before_after_code_files": [
          "src/main/java/org/json/XML.java||src/main/java/org/json/XML.java",
          "src/main/java/org/json/XMLParserConfiguration.java||src/main/java/org/json/XMLParserConfiguration.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/stleary/JSON-java/pull/723"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/org/json/XML.java||src/main/java/org/json/XML.java": [
          "File: src/main/java/org/json/XML.java -> src/main/java/org/json/XML.java"
        ],
        "src/main/java/org/json/XMLParserConfiguration.java||src/main/java/org/json/XMLParserConfiguration.java": [
          "File: src/main/java/org/json/XMLParserConfiguration.java -> src/main/java/org/json/XMLParserConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     private XMLParserConfiguration (final boolean keepStrings, final String cDataTagName,",
          "164:         this.keepStrings = keepStrings;",
          "165:         this.cDataTagName = cDataTagName;",
          "166:         this.convertNilAttributeToNull = convertNilAttributeToNull;",
          "167:         this.xsiTypeMap = Collections.unmodifiableMap(xsiTypeMap);",
          "168:         this.forceList = Collections.unmodifiableSet(forceList);",
          "169:     }",
          "",
          "[Removed Lines]",
          "163:             final boolean convertNilAttributeToNull, final Map<String, XMLXsiTypeConverter<?>> xsiTypeMap, final Set<String> forceList ) {",
          "",
          "[Added Lines]",
          "163:             final boolean convertNilAttributeToNull, final Map<String, XMLXsiTypeConverter<?>> xsiTypeMap, final Set<String> forceList,",
          "164:             final int maxNestingDepth) {",
          "170:         this.maxNestingDepth = maxNestingDepth;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:                 this.cDataTagName,",
          "184:                 this.convertNilAttributeToNull,",
          "185:                 this.xsiTypeMap,",
          "187:         );",
          "188:     }",
          "196:     public boolean isKeepStrings() {",
          "",
          "[Removed Lines]",
          "186:                 this.forceList",
          "",
          "[Added Lines]",
          "188:                 this.forceList,",
          "189:                 this.maxNestingDepth",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df2d6f83630df4d302b0e20c1f32d5c4d47030db",
      "candidate_info": {
        "commit_hash": "df2d6f83630df4d302b0e20c1f32d5c4d47030db",
        "repo": "stleary/JSON-java",
        "commit_url": "https://github.com/stleary/JSON-java/commit/df2d6f83630df4d302b0e20c1f32d5c4d47030db",
        "files": [
          "src/main/java/org/json/JSONML.java",
          "src/test/java/org/json/junit/JSONMLTest.java"
        ],
        "message": "fix: introduce optional XMLtoJSONMLParserConfiguration parameter for JSONML.toJSONArray(...) functions, to facilitate max nesting depth override.",
        "before_after_code_files": [
          "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
          "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
            "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
          ],
          "candidate": [
            "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
            "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java": [
          "File: src/main/java/org/json/JSONML.java -> src/main/java/org/json/JSONML.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:     public static JSONArray toJSONArray(String string, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "304:         return (JSONArray)parse(new XMLTokener(string), true, null, config, 0);",
          "305:     }",
          "327:     public static JSONArray toJSONArray(XMLTokener x, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "328:         return (JSONArray)parse(x, true, null, config, 0);",
          "329:     }",
          "",
          "---------------"
        ],
        "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java": [
          "File: src/test/java/org/json/junit/JSONMLTest.java -> src/test/java/org/json/junit/JSONMLTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:                     ex.getMessage());",
          "836:         }",
          "837:     }",
          "839:     @Test",
          "840:     public void testMaxNestingDepthOf42IsRespected() {",
          "841:         final String wayTooLongMalformedXML = new String(new char[6000]).replace(\"\\0\", \"<a>\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "839:     @Test",
          "840:     public void testToJSONArrayMaxNestingDepthOf42IsRespected() {",
          "841:         final String wayTooLongMalformedXML = new String(new char[6000]).replace(\"\\0\", \"<a>\");",
          "843:         final int maxNestingDepth = 42;",
          "845:         try {",
          "846:             JSONML.toJSONArray(wayTooLongMalformedXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "848:             fail(\"Expecting a JSONException\");",
          "849:         } catch (JSONException e) {",
          "850:             assertTrue(\"Wrong throwable thrown: not expecting message <\" + e.getMessage() + \">\",",
          "851:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
          "852:         }",
          "853:     }",
          "856:     @Test",
          "857:     public void testToJSONArrayMaxNestingDepthIsRespectedWithValidXML() {",
          "858:         final String perfectlyFineXML = \"<Test>\\n\" +",
          "859:             \"  <employee>\\n\" +",
          "860:             \"    <name>sonoo</name>\\n\" +",
          "861:             \"    <salary>56000</salary>\\n\" +",
          "862:             \"    <married>true</married>\\n\" +",
          "863:             \"  </employee>\\n\" +",
          "864:             \"</Test>\\n\";",
          "866:         final int maxNestingDepth = 1;",
          "868:         try {",
          "869:             JSONML.toJSONArray(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "871:             fail(\"Expecting a JSONException\");",
          "872:         } catch (JSONException e) {",
          "873:             assertTrue(\"Wrong throwable thrown: not expecting message <\" + e.getMessage() + \">\",",
          "874:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
          "875:         }",
          "876:     }",
          "878:     @Test",
          "879:     public void testToJSONArrayMaxNestingDepthWithValidFittingXML() {",
          "880:         final String perfectlyFineXML = \"<Test>\\n\" +",
          "881:             \"  <employee>\\n\" +",
          "882:             \"    <name>sonoo</name>\\n\" +",
          "883:             \"    <salary>56000</salary>\\n\" +",
          "884:             \"    <married>true</married>\\n\" +",
          "885:             \"  </employee>\\n\" +",
          "886:             \"</Test>\\n\";",
          "888:         final int maxNestingDepth = 3;",
          "890:         try {",
          "891:             JSONML.toJSONArray(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "892:         } catch (JSONException e) {",
          "893:             e.printStackTrace();",
          "894:             fail(\"XML document should be parsed as its maximum depth fits the maxNestingDepth \" +",
          "895:                 \"parameter of the XMLtoJSONMLParserConfiguration used\");",
          "896:         }",
          "897:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
          "852:         }",
          "853:     }",
          "855:     @Test",
          "856:     public void testMaxNestingDepthIsRespectedWithValidXML() {",
          "857:         final String perfectlyFineXML = \"<Test>\\n\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "873:                 e.getMessage().startsWith(\"Maximum nesting depth of \" + maxNestingDepth));",
          "874:         }",
          "875:     }",
          "877:     @Test",
          "878:     public void testMaxNestingDepthWithValidFittingXML() {",
          "879:         final String perfectlyFineXML = \"<Test>\\n\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72f4c3e6468c7391b34bc530c1905056fdd596e6",
      "candidate_info": {
        "commit_hash": "72f4c3e6468c7391b34bc530c1905056fdd596e6",
        "repo": "stleary/JSON-java",
        "commit_url": "https://github.com/stleary/JSON-java/commit/72f4c3e6468c7391b34bc530c1905056fdd596e6",
        "files": [
          "src/main/java/org/json/JSONML.java",
          "src/main/java/org/json/JSONMLParserConfiguration.java",
          "src/test/java/org/json/junit/JSONMLTest.java"
        ],
        "message": "refactor: rename XMLtoJSONMLParserConfiguration to JSONMLParserConfiguration",
        "before_after_code_files": [
          "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
          "src/main/java/org/json/XMLtoJSONMLParserConfiguration.java||src/main/java/org/json/JSONMLParserConfiguration.java",
          "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
            "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
          ],
          "candidate": [
            "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java",
            "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/json/JSONML.java||src/main/java/org/json/JSONML.java": [
          "File: src/main/java/org/json/JSONML.java -> src/main/java/org/json/JSONML.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         int currentNestingDepth",
          "32:     ) throws JSONException {",
          "33:         return parse(x,arrayForm, ja,",
          "35:             currentNestingDepth);",
          "36:     }",
          "",
          "[Removed Lines]",
          "34:             keepStrings ? XMLtoJSONMLParserConfiguration.KEEP_STRINGS : XMLtoJSONMLParserConfiguration.ORIGINAL,",
          "",
          "[Added Lines]",
          "34:             keepStrings ? JSONMLParserConfiguration.KEEP_STRINGS : JSONMLParserConfiguration.ORIGINAL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         XMLTokener x,",
          "52:         boolean    arrayForm,",
          "53:         JSONArray  ja,",
          "55:         int currentNestingDepth",
          "56:     ) throws JSONException {",
          "57:         String     attribute;",
          "",
          "[Removed Lines]",
          "54:         XMLtoJSONMLParserConfiguration config,",
          "",
          "[Added Lines]",
          "54:         JSONMLParserConfiguration config,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:     public static JSONArray toJSONArray(String string) throws JSONException {",
          "258:     }",
          "",
          "[Removed Lines]",
          "257:         return (JSONArray)parse(new XMLTokener(string), true, null, XMLtoJSONMLParserConfiguration.ORIGINAL, 0);",
          "",
          "[Added Lines]",
          "257:         return (JSONArray)parse(new XMLTokener(string), true, null, JSONMLParserConfiguration.ORIGINAL, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:         return (JSONArray)parse(new XMLTokener(string), true, null, config, 0);",
          "305:     }",
          "",
          "[Removed Lines]",
          "303:     public static JSONArray toJSONArray(String string, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "",
          "[Added Lines]",
          "303:     public static JSONArray toJSONArray(String string, JSONMLParserConfiguration config) throws JSONException {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:         return (JSONArray)parse(x, true, null, config, 0);",
          "329:     }",
          "",
          "[Removed Lines]",
          "327:     public static JSONArray toJSONArray(XMLTokener x, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "",
          "[Added Lines]",
          "327:     public static JSONArray toJSONArray(XMLTokener x, JSONMLParserConfiguration config) throws JSONException {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:         return (JSONObject)parse(new XMLTokener(string), false, null, config, 0);",
          "428:     }",
          "",
          "[Removed Lines]",
          "426:     public static JSONObject toJSONObject(String string, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "",
          "[Added Lines]",
          "426:     public static JSONObject toJSONObject(String string, JSONMLParserConfiguration config) throws JSONException {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "487:         return (JSONObject)parse(x, false, null, config, 0);",
          "488:     }",
          "",
          "[Removed Lines]",
          "486:     public static JSONObject toJSONObject(XMLTokener x, XMLtoJSONMLParserConfiguration config) throws JSONException {",
          "",
          "[Added Lines]",
          "486:     public static JSONObject toJSONObject(XMLTokener x, JSONMLParserConfiguration config) throws JSONException {",
          "",
          "---------------"
        ],
        "src/main/java/org/json/XMLtoJSONMLParserConfiguration.java||src/main/java/org/json/JSONMLParserConfiguration.java": [
          "File: src/main/java/org/json/XMLtoJSONMLParserConfiguration.java -> src/main/java/org/json/JSONMLParserConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: @SuppressWarnings({\"\"})",
          "",
          "[Removed Lines]",
          "10: public class XMLtoJSONMLParserConfiguration {",
          "",
          "[Added Lines]",
          "10: public class JSONMLParserConfiguration {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     public static final int DEFAULT_MAXIMUM_NESTING_DEPTH = 512;",
          "",
          "[Removed Lines]",
          "23:     public static final XMLtoJSONMLParserConfiguration ORIGINAL",
          "24:         = new XMLtoJSONMLParserConfiguration();",
          "26:     public static final XMLtoJSONMLParserConfiguration KEEP_STRINGS",
          "27:         = new XMLtoJSONMLParserConfiguration().withKeepStrings(true);",
          "",
          "[Added Lines]",
          "23:     public static final JSONMLParserConfiguration ORIGINAL",
          "24:         = new JSONMLParserConfiguration();",
          "26:     public static final JSONMLParserConfiguration KEEP_STRINGS",
          "27:         = new JSONMLParserConfiguration().withKeepStrings(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         this.keepStrings = false;",
          "45:     }",
          "",
          "[Removed Lines]",
          "43:     public XMLtoJSONMLParserConfiguration() {",
          "",
          "[Added Lines]",
          "43:     public JSONMLParserConfiguration() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:         this.keepStrings = keepStrings;",
          "55:         this.maxNestingDepth = maxNestingDepth;",
          "56:     }",
          "",
          "[Removed Lines]",
          "53:     public XMLtoJSONMLParserConfiguration(final boolean keepStrings, final int maxNestingDepth) {",
          "",
          "[Added Lines]",
          "53:     public JSONMLParserConfiguration(final boolean keepStrings, final int maxNestingDepth) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "61:     @Override",
          "69:                 this.keepStrings,",
          "70:                 this.maxNestingDepth",
          "71:         );",
          "",
          "[Removed Lines]",
          "62:     protected XMLtoJSONMLParserConfiguration clone() {",
          "68:         return new XMLtoJSONMLParserConfiguration(",
          "",
          "[Added Lines]",
          "62:     protected JSONMLParserConfiguration clone() {",
          "68:         return new JSONMLParserConfiguration(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "95:         newConfig.keepStrings = newVal;",
          "96:         return newConfig;",
          "97:     }",
          "",
          "[Removed Lines]",
          "93:     public XMLtoJSONMLParserConfiguration withKeepStrings(final boolean newVal) {",
          "94:         XMLtoJSONMLParserConfiguration newConfig = this.clone();",
          "",
          "[Added Lines]",
          "93:     public JSONMLParserConfiguration withKeepStrings(final boolean newVal) {",
          "94:         JSONMLParserConfiguration newConfig = this.clone();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:         if (maxNestingDepth > UNDEFINED_MAXIMUM_NESTING_DEPTH) {",
          "121:             newConfig.maxNestingDepth = maxNestingDepth;",
          "",
          "[Removed Lines]",
          "117:     public XMLtoJSONMLParserConfiguration withMaxNestingDepth(int maxNestingDepth) {",
          "118:         XMLtoJSONMLParserConfiguration newConfig = this.clone();",
          "",
          "[Added Lines]",
          "117:     public JSONMLParserConfiguration withMaxNestingDepth(int maxNestingDepth) {",
          "118:         JSONMLParserConfiguration newConfig = this.clone();",
          "",
          "---------------"
        ],
        "src/test/java/org/json/junit/JSONMLTest.java||src/test/java/org/json/junit/JSONMLTest.java": [
          "File: src/test/java/org/json/junit/JSONMLTest.java -> src/test/java/org/json/junit/JSONMLTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "841:         final String wayTooLongMalformedXML = new String(new char[6000]).replace(\"\\0\", \"<a>\");",
          "843:         final int maxNestingDepth = 42;",
          "845:         try {",
          "846:             JSONML.toJSONArray(wayTooLongMalformedXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "864:             \"</Test>\\n\";",
          "866:         final int maxNestingDepth = 1;",
          "868:         try {",
          "869:             JSONML.toJSONArray(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "886:             \"</Test>\\n\";",
          "888:         final int maxNestingDepth = 3;",
          "890:         try {",
          "891:             JSONML.toJSONArray(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "892:         } catch (JSONException e) {",
          "894:             fail(\"XML document should be parsed as its maximum depth fits the maxNestingDepth \" +",
          "895:                 \"parameter of the XMLtoJSONMLParserConfiguration used\");",
          "896:         }",
          "",
          "[Removed Lines]",
          "893:             e.printStackTrace();",
          "",
          "[Added Lines]",
          "893:             e.printStackTrace();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "905:         final String wayTooLongMalformedXML = new String(new char[6000]).replace(\"\\0\", \"<a>\");",
          "907:         final int maxNestingDepth = 42;",
          "909:         try {",
          "910:             JSONML.toJSONObject(wayTooLongMalformedXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "927:             \"</Test>\\n\";",
          "929:         final int maxNestingDepth = 1;",
          "931:         try {",
          "932:             JSONML.toJSONObject(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "949:             \"</Test>\\n\";",
          "951:         final int maxNestingDepth = 3;",
          "953:         try {",
          "954:             JSONML.toJSONObject(perfectlyFineXML, XMLtoJSONMLParserConfiguration.ORIGINAL.withMaxNestingDepth(maxNestingDepth));",
          "955:         } catch (JSONException e) {",
          "957:             fail(\"XML document should be parsed as its maximum depth fits the maxNestingDepth \" +",
          "958:                 \"parameter of the XMLtoJSONMLParserConfiguration used\");",
          "959:         }",
          "",
          "[Removed Lines]",
          "956:             e.printStackTrace();",
          "",
          "[Added Lines]",
          "956:             e.printStackTrace();",
          "",
          "---------------"
        ]
      }
    }
  ]
}