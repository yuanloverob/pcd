{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2cd17e6a9e6efabfea4c2b9d84ce3fa2a4948fb",
      "candidate_info": {
        "commit_hash": "b2cd17e6a9e6efabfea4c2b9d84ce3fa2a4948fb",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b2cd17e6a9e6efabfea4c2b9d84ce3fa2a4948fb",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/messagelib.php",
          "message/classes/api.php",
          "message/classes/helper.php",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "message/tests/messagelib_test.php",
          "version.php"
        ],
        "message": "MDL-36941 core: added 'convhash' field to quickly get conversations",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/messagelib.php||lib/messagelib.php",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/helper.php||message/classes/helper.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "message/tests/messagelib_test.php||message/tests/messagelib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2131:         upgrade_main_savepoint(true, 2018032200.01);",
          "2132:     }",
          "2134:     return true;",
          "2135: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2134:     if ($oldversion < 2018032200.04) {",
          "2136:         $table = new xmldb_table('message_conversations');",
          "2137:         $field = new xmldb_field('convhash', XMLDB_TYPE_CHAR, '40', null, XMLDB_NOTNULL, null, 0, 'id');",
          "2140:         if (!$dbman->field_exists($table, $field)) {",
          "2141:             $dbman->add_field($table, $field);",
          "2142:         }",
          "2145:         $index = new xmldb_index('convhash', XMLDB_INDEX_UNIQUE, array('convhash'));",
          "2146:         if (!$dbman->index_exists($table, $index)) {",
          "2147:             $dbman->add_index($table, $index);",
          "2148:         }",
          "2151:         upgrade_main_savepoint(true, 2018032200.04);",
          "2152:     }",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     } else {",
          "157:         $table = 'messages';",
          "163:         }",
          "165:         $tabledata = new stdClass();",
          "",
          "[Removed Lines]",
          "159:         if (!$conversationid = \\core_message\\api::get_conversation_between_users($eventdata->userfrom->id,",
          "160:                 $eventdata->userto->id)) {",
          "161:             $conversationid = \\core_message\\api::create_conversation_between_users($eventdata->userfrom->id,",
          "162:                 $eventdata->userto->id);",
          "",
          "[Added Lines]",
          "159:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "160:                 $eventdata->userto->id])) {",
          "161:             $conversationid = \\core_message\\api::create_conversation_between_users([$eventdata->userfrom->id,",
          "162:                 $eventdata->userto->id]);",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     public static function delete_conversation($userid, $otheruserid) {",
          "638:         global $DB, $USER;",
          "643:         if (!$conversationid) {",
          "",
          "[Removed Lines]",
          "640:         $conversationid = self::get_conversation_between_users($userid, $otheruserid);",
          "",
          "[Added Lines]",
          "640:         $conversationid = self::get_conversation_between_users([$userid, $otheruserid]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1210:         global $DB;",
          "1223:             return $conversation->id;",
          "1224:         }",
          "",
          "[Removed Lines]",
          "1209:     public static function get_conversation_between_users($userid1, $userid2) {",
          "1212:         $sql = \"SELECT DISTINCT mc.id",
          "1213:                   FROM {message_conversations} mc",
          "1214:             INNER JOIN {message_conversation_members} mcm",
          "1215:                     ON mcm.conversationid = mc.id",
          "1216:             INNER JOIN {message_conversation_members} mcm2",
          "1217:                     ON mcm2.conversationid = mc.id",
          "1218:                  WHERE mcm.userid = :userid1",
          "1219:                    AND mcm2.userid = :userid2",
          "1220:                    AND mcm.id != mcm2.id\";",
          "1222:         if ($conversation = $DB->get_record_sql($sql, ['userid1' => $userid1, 'userid2' => $userid2])) {",
          "",
          "[Added Lines]",
          "1208:     public static function get_conversation_between_users(array $userids) {",
          "1211:         $hash = helper::get_conversation_hash($userids);",
          "1213:         if ($conversation = $DB->get_record('message_conversations', ['convhash' => $hash])) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1237:         global $DB;",
          "1239:         $conversation = new \\stdClass();",
          "1240:         $conversation->timecreated = time();",
          "1241:         $conversation->id = $DB->insert_record('message_conversations', $conversation);",
          "1256:         return $conversation->id;",
          "1257:     }",
          "",
          "[Removed Lines]",
          "1236:     public static function create_conversation_between_users($userid1, $userid2) {",
          "1244:         $member = new \\stdClass();",
          "1245:         $member->conversationid = $conversation->id;",
          "1246:         $member->userid = $userid1;",
          "1247:         $member->timecreated = time();",
          "1248:         $DB->insert_record('message_conversation_members', $member);",
          "1250:         $member = new \\stdClass();",
          "1251:         $member->conversationid = $conversation->id;",
          "1252:         $member->userid = $userid2;",
          "1253:         $member->timecreated = time();",
          "1254:         $DB->insert_record('message_conversation_members', $member);",
          "",
          "[Added Lines]",
          "1226:     public static function create_conversation_between_users(array $userids) {",
          "1230:         $conversation->convhash = helper::get_conversation_hash($userids);",
          "1235:         foreach ($userids as $userid) {",
          "1236:             $member = new \\stdClass();",
          "1237:             $member->conversationid = $conversation->id;",
          "1238:             $member->userid = $userid;",
          "1239:             $member->timecreated = time();",
          "1240:             $DB->insert_record('message_conversation_members', $member);",
          "1241:         }",
          "",
          "---------------"
        ],
        "message/classes/helper.php||message/classes/helper.php": [
          "File: message/classes/helper.php -> message/classes/helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:         return $params;",
          "294:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:     public static function get_conversation_hash(array $userids) {",
          "303:         sort($userids);",
          "305:         return sha1(implode('-', $userids));",
          "306:     }",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:         $user1 = self::getDataGenerator()->create_user();",
          "1922:         $user2 = self::getDataGenerator()->create_user();",
          "1925:     }",
          "",
          "[Removed Lines]",
          "1924:         $this->assertFalse(\\core_message\\api::get_conversation_between_users($user1->id, $user2->id));",
          "",
          "[Added Lines]",
          "1924:         $this->assertFalse(\\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1931:         $user1 = self::getDataGenerator()->create_user();",
          "1932:         $user2 = self::getDataGenerator()->create_user();",
          "1936:         $this->assertEquals($conversationid,",
          "1938:     }",
          "1939: }",
          "",
          "[Removed Lines]",
          "1934:         $conversationid = \\core_message\\api::create_conversation_between_users($user1->id, $user2->id);",
          "1937:             \\core_message\\api::get_conversation_between_users($user1->id, $user2->id));",
          "",
          "[Added Lines]",
          "1934:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "1937:             \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]));",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:             return $DB->insert_record('notifications', $record);",
          "74:         }",
          "79:         }",
          "",
          "[Removed Lines]",
          "76:         if (!$conversationid = \\core_message\\api::get_conversation_between_users($userfrom->id, $userto->id)) {",
          "77:             $conversationid = \\core_message\\api::create_conversation_between_users($userfrom->id,",
          "78:                 $userto->id);",
          "",
          "[Added Lines]",
          "76:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "77:             $conversationid = \\core_message\\api::create_conversation_between_users([$userfrom->id,",
          "78:                 $userto->id]);",
          "",
          "---------------"
        ],
        "message/tests/messagelib_test.php||message/tests/messagelib_test.php": [
          "File: message/tests/messagelib_test.php -> message/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:             return $DB->insert_record('notifications', $record);",
          "86:         }",
          "91:         }",
          "",
          "[Removed Lines]",
          "88:         if (!$conversationid = \\core_message\\api::get_conversation_between_users($userfrom->id, $userto->id)) {",
          "89:             $conversationid = \\core_message\\api::create_conversation_between_users($userfrom->id,",
          "90:                 $userto->id);",
          "",
          "[Added Lines]",
          "88:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "89:             $conversationid = \\core_message\\api::create_conversation_between_users([$userfrom->id,",
          "90:                 $userto->id]);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018032200.03;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018032200.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f41207400bf8fe8f2f201d979ed725e4bda78c6c",
      "candidate_info": {
        "commit_hash": "f41207400bf8fe8f2f201d979ed725e4bda78c6c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f41207400bf8fe8f2f201d979ed725e4bda78c6c",
        "files": [
          "admin/settings/courses.php",
          "lang/en/moodle.php",
          "lib/db/upgrade.php",
          "lib/outputrenderers.php",
          "lib/templates/course_header_image.mustache",
          "theme/boost/scss/moodle/course.scss",
          "theme/boost/style/moodle.css",
          "theme/bootstrapbase/less/moodle/course.less",
          "theme/bootstrapbase/style/moodle.css",
          "version.php"
        ],
        "message": "MDL-63836 course: No course header images\n\nThis feature may be added in future, but for now we are not going to include it.",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "lang/en/moodle.php||lang/en/moodle.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/outputrenderers.php||lib/outputrenderers.php",
          "lib/templates/course_header_image.mustache||lib/templates/course_header_image.mustache",
          "theme/boost/scss/moodle/course.scss||theme/boost/scss/moodle/course.scss",
          "theme/boost/style/moodle.css||theme/boost/style/moodle.css",
          "theme/bootstrapbase/less/moodle/course.less||theme/bootstrapbase/less/moodle/course.less",
          "theme/bootstrapbase/style/moodle.css||theme/bootstrapbase/style/moodle.css",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     $temp->add(new admin_setting_configselect('moodlecourse/showreports', new lang_string('showreports'), '', 0,",
          "122:         array(0 => new lang_string('no'), 1 => new lang_string('yes'))));",
          "128:     $temp->add(new admin_setting_heading('filesanduploadshdr', new lang_string('filesanduploads'), ''));",
          "",
          "[Removed Lines]",
          "124:     $temp->add(new admin_setting_configcheckbox('moodlecourse/showcourseimages', get_string('showcourseimages'),",
          "125:         get_string('showcourseimages_desc'), 1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lang/en/moodle.php||lang/en/moodle.php": [
          "File: lang/en/moodle.php -> lang/en/moodle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: $string['courseformats'] = 'Course formats';",
          "328: $string['courseformatoptions'] = 'Formatting options for {$a}';",
          "329: $string['courseformatudpate'] = 'Update format';",
          "331: $string['courseprofiles'] = 'Course profiles';",
          "332: $string['coursepreferences'] = 'Course preferences';",
          "333: $string['coursegrades'] = 'Course grades';",
          "",
          "[Removed Lines]",
          "330: $string['courseheaderimage'] = 'Course header image';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1823: $string['showblockcourse'] = 'Show list of courses containing block';",
          "1824: $string['showcategory'] = 'Show {$a}';",
          "1825: $string['showchartdata'] = 'Show chart data';",
          "1828: $string['showcomments'] = 'Show/hide comments';",
          "1829: $string['showcommentsnonjs'] = 'Show comments';",
          "1830: $string['showdescription'] = 'Display description on course page';",
          "",
          "[Removed Lines]",
          "1826: $string['showcourseimages'] = 'Show course images';",
          "1827: $string['showcourseimages_desc'] = 'Show the course image or image placeholder in the course header.';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2666:         upgrade_main_savepoint(true, 2018102900.00);",
          "2667:     }",
          "2675:     if ($oldversion < 2018110500.01) {",
          "2677:         $tablebadge = new xmldb_table('badge');",
          "",
          "[Removed Lines]",
          "2669:     if ($oldversion < 2018102900.01) {",
          "2671:         set_config('showcourseimages', 1, 'moodlecourse');",
          "2672:         upgrade_main_savepoint(true, 2018102900.01);",
          "2673:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2769:         upgrade_main_savepoint(true, 2018110500.01);",
          "2770:     }",
          "2772:     return true;",
          "2773: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2766:     if ($oldversion < 2018110700.01) {",
          "2768:         unset_config('showcourseimages', 'moodlecourse');",
          "2771:         upgrade_main_savepoint(true, 2018110700.01);",
          "2772:     }",
          "",
          "---------------"
        ],
        "lib/outputrenderers.php||lib/outputrenderers.php": [
          "File: lib/outputrenderers.php -> lib/outputrenderers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153:     }",
          "4155:     public function context_header($headerinfo = null, $headinglevel = 1) {",
          "4157:         require_once($CFG->dirroot . '/user/lib.php');",
          "4158:         $context = $this->page->context;",
          "4159:         $heading = null;",
          "",
          "[Removed Lines]",
          "4156:         global $DB, $USER, $CFG, $COURSE;",
          "",
          "[Added Lines]",
          "4156:         global $DB, $USER, $CFG;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4165:             $heading = $headerinfo['heading'];",
          "4166:         }",
          "4176:         if (isset($headerinfo['user']) || $context->contextlevel == CONTEXT_USER) {",
          "4177:             if (isset($headerinfo['user'])) {",
          "",
          "[Removed Lines]",
          "4169:         if ($context->contextlevel == CONTEXT_COURSE && get_config('moodlecourse', 'showcourseimages')) {",
          "4170:             $exporter = new core_course\\external\\course_summary_exporter($COURSE, ['context' => $context]);",
          "4171:             $courseinfo = $exporter->export($this);",
          "4172:             $imagedata = $this->render_from_template('core/course_header_image', $courseinfo);",
          "4173:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/templates/course_header_image.mustache||lib/templates/course_header_image.mustache": [
          "File: lib/templates/course_header_image.mustache -> lib/templates/course_header_image.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "theme/boost/scss/moodle/course.scss||theme/boost/scss/moodle/course.scss": [
          "File: theme/boost/scss/moodle/course.scss -> theme/boost/scss/moodle/course.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:     opacity: 0.5;",
          "1140: }",
          "",
          "[Removed Lines]",
          "1142: .course-header-image-wrapper {",
          "1143:     width: 100px;",
          "1144:     height: 100px;",
          "1145:     .course-header-image {",
          "1146:         background-size: cover;",
          "1147:         background-position: center;",
          "1148:     }",
          "1149: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "theme/boost/style/moodle.css||theme/boost/style/moodle.css": [
          "File: theme/boost/style/moodle.css -> theme/boost/style/moodle.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "12434: .course-being-dragged {",
          "12435:   opacity: 0.5; }",
          "",
          "[Removed Lines]",
          "12437: .course-header-image-wrapper {",
          "12438:   width: 100px;",
          "12439:   height: 100px; }",
          "12440:   .course-header-image-wrapper .course-header-image {",
          "12441:     background-size: cover;",
          "12442:     background-position: center; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "theme/bootstrapbase/less/moodle/course.less||theme/bootstrapbase/less/moodle/course.less": [
          "File: theme/bootstrapbase/less/moodle/course.less -> theme/bootstrapbase/less/moodle/course.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "1124:     .opacity(50);",
          "1125: }",
          "",
          "[Removed Lines]",
          "1127: .course-header-image-wrapper {",
          "1128:     width: 100px;",
          "1129:     height: 100px;",
          "1130:     .course-header-image {",
          "1131:         width: 100%;",
          "1132:         height: 100%;",
          "1133:         background-size: cover;",
          "1134:         background-position: center;",
          "1135:     }",
          "1136: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "theme/bootstrapbase/style/moodle.css||theme/bootstrapbase/style/moodle.css": [
          "File: theme/bootstrapbase/style/moodle.css -> theme/bootstrapbase/style/moodle.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "7004:   opacity: 0.5;",
          "7005:   filter: alpha(opacity=50);",
          "7006: }",
          "",
          "[Removed Lines]",
          "7007: .course-header-image-wrapper {",
          "7008:   width: 100px;",
          "7009:   height: 100px;",
          "7010: }",
          "7011: .course-header-image-wrapper .course-header-image {",
          "7012:   width: 100%;",
          "7013:   height: 100%;",
          "7014:   background-size: cover;",
          "7015:   background-position: center;",
          "7016: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018110700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "701ae1eb4b17666a85dfd8d4035cd38e03f22917",
      "candidate_info": {
        "commit_hash": "701ae1eb4b17666a85dfd8d4035cd38e03f22917",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/701ae1eb4b17666a85dfd8d4035cd38e03f22917",
        "files": [
          "config-dist.php",
          "lang/en/question.php",
          "lib/outputcomponents.php",
          "mod/quiz/styles.css",
          "question/classes/bank/action_column_base.php",
          "question/classes/bank/checkbox_column.php",
          "question/classes/bank/column_base.php",
          "question/classes/bank/copy_action_column.php",
          "question/classes/bank/creator_name_column.php",
          "question/classes/bank/delete_action_column.php",
          "question/classes/bank/edit_action_column.php",
          "question/classes/bank/edit_menu_column.php",
          "question/classes/bank/export_xml_action_column.php",
          "question/classes/bank/menu_action_column_base.php",
          "question/classes/bank/menuable_action.php",
          "question/classes/bank/modifier_name_column.php",
          "question/classes/bank/preview_action_column.php",
          "question/classes/bank/question_name_column.php",
          "question/classes/bank/question_text_row.php",
          "question/classes/bank/question_type_column.php",
          "question/classes/bank/row_base.php",
          "question/classes/bank/tags_action_column.php",
          "question/classes/bank/view.php",
          "question/tests/behat/behat_question.php",
          "question/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-66816 question bank: replace row of edit icons with an Edit menu",
        "before_after_code_files": [
          "config-dist.php||config-dist.php",
          "lang/en/question.php||lang/en/question.php",
          "lib/outputcomponents.php||lib/outputcomponents.php",
          "mod/quiz/styles.css||mod/quiz/styles.css",
          "question/classes/bank/action_column_base.php||question/classes/bank/action_column_base.php",
          "question/classes/bank/checkbox_column.php||question/classes/bank/checkbox_column.php",
          "question/classes/bank/column_base.php||question/classes/bank/column_base.php",
          "question/classes/bank/copy_action_column.php||question/classes/bank/copy_action_column.php",
          "question/classes/bank/creator_name_column.php||question/classes/bank/creator_name_column.php",
          "question/classes/bank/delete_action_column.php||question/classes/bank/delete_action_column.php",
          "question/classes/bank/edit_action_column.php||question/classes/bank/edit_action_column.php",
          "question/classes/bank/edit_menu_column.php||question/classes/bank/edit_menu_column.php",
          "question/classes/bank/export_xml_action_column.php||question/classes/bank/export_xml_action_column.php",
          "question/classes/bank/menu_action_column_base.php||question/classes/bank/menu_action_column_base.php",
          "question/classes/bank/menuable_action.php||question/classes/bank/menuable_action.php",
          "question/classes/bank/modifier_name_column.php||question/classes/bank/modifier_name_column.php",
          "question/classes/bank/preview_action_column.php||question/classes/bank/preview_action_column.php",
          "question/classes/bank/question_name_column.php||question/classes/bank/question_name_column.php",
          "question/classes/bank/question_text_row.php||question/classes/bank/question_text_row.php",
          "question/classes/bank/question_type_column.php||question/classes/bank/question_type_column.php",
          "question/classes/bank/row_base.php||question/classes/bank/row_base.php",
          "question/classes/bank/tags_action_column.php||question/classes/bank/tags_action_column.php",
          "question/classes/bank/view.php||question/classes/bank/view.php",
          "question/tests/behat/behat_question.php||question/tests/behat/behat_question.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/question.php||lang/en/question.php": [
          "File: lang/en/question.php -> lang/en/question.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: $string['eventquestionsimported'] = 'Questions imported';",
          "158: $string['eventquestionupdated'] = 'Question updated';",
          "159: $string['export'] = 'Export';",
          "160: $string['exportcategory'] = 'Export category';",
          "161: $string['exportcategory_help'] = 'This setting determines the category from which the exported questions will be taken.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: $string['exportasxml'] = 'Export as Moodle XML';",
          "",
          "---------------"
        ],
        "lib/outputcomponents.php||lib/outputcomponents.php": [
          "File: lib/outputcomponents.php -> lib/outputcomponents.php"
        ],
        "mod/quiz/styles.css||mod/quiz/styles.css": [
          "File: mod/quiz/styles.css -> mod/quiz/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "987: table#categoryquestions {",
          "988:     width: 100%;",
          "990:     table-layout: fixed;",
          "991: }",
          "",
          "[Removed Lines]",
          "989:     overflow: hidden;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1002:     padding: 0;",
          "1003: }",
          "1005: #categoryquestions .qtype {",
          "1006:     text-align: center;",
          "1007: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1004: #categoryquestions .editmenu {",
          "1005:     width: 5em;",
          "1006: }",
          "",
          "---------------"
        ],
        "question/classes/bank/action_column_base.php||question/classes/bank/action_column_base.php": [
          "File: question/classes/bank/action_column_base.php -> question/classes/bank/action_column_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "26: abstract class action_column_base extends column_base {",
          "28:     protected function get_title() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/checkbox_column.php||question/classes/bank/checkbox_column.php": [
          "File: question/classes/bank/checkbox_column.php -> question/classes/bank/checkbox_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "19: use core\\output\\checkbox_toggleall;",
          "27: class checkbox_column extends column_base {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/column_base.php||question/classes/bank/column_base.php": [
          "File: question/classes/bank/column_base.php -> question/classes/bank/column_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: namespace core_question\\bank;",
          "35: abstract class column_base {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/copy_action_column.php||question/classes/bank/copy_action_column.php": [
          "File: question/classes/bank/copy_action_column.php -> question/classes/bank/copy_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "28:     protected $strcopy;",
          "",
          "[Removed Lines]",
          "26: class copy_action_column extends action_column_base {",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "35: class copy_action_column extends menu_action_column_base {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         return 'copyaction';",
          "37:     }",
          "43:         if (question_has_capability_on($question, 'add') &&",
          "44:                 (question_has_capability_on($question, 'edit') || question_has_capability_on($question, 'view'))) {",
          "46:         }",
          "47:     }",
          "48: }",
          "",
          "[Removed Lines]",
          "39:     protected function display_content($question, $rowclasses) {",
          "45:             $this->print_icon('t/copy', $this->strcopy, $this->qbank->copy_question_url($question->id));",
          "",
          "[Added Lines]",
          "48:     protected function get_url_icon_and_label(\\stdClass $question): array {",
          "54:             return [$this->qbank->copy_question_moodle_url($question->id), 't/copy', $this->strcopy];",
          "56:         return [null, null, null];",
          "",
          "---------------"
        ],
        "question/classes/bank/creator_name_column.php||question/classes/bank/creator_name_column.php": [
          "File: question/classes/bank/creator_name_column.php -> question/classes/bank/creator_name_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace core_question\\bank;",
          "27: class creator_name_column extends column_base {",
          "28:     public function get_name() {",
          "29:         return 'creatorname';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/delete_action_column.php||question/classes/bank/delete_action_column.php": [
          "File: question/classes/bank/delete_action_column.php -> question/classes/bank/delete_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "27:     protected $strdelete;",
          "28:     protected $strrestore;",
          "",
          "[Removed Lines]",
          "26: class delete_action_column extends action_column_base {",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "35: class delete_action_column extends menu_action_column_base {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:         return 'deleteaction';",
          "38:     }",
          "50:         }",
          "51:     }",
          "",
          "[Removed Lines]",
          "40:     protected function display_content($question, $rowclasses) {",
          "41:         if (question_has_capability_on($question, 'edit')) {",
          "42:             if ($question->hidden) {",
          "43:                 $url = new \\moodle_url($this->qbank->base_url(), array('unhide' => $question->id, 'sesskey' => sesskey()));",
          "44:                 $this->print_icon('t/restore', $this->strrestore, $url);",
          "45:             } else {",
          "46:                 $url = new \\moodle_url($this->qbank->base_url(), array('deleteselected' => $question->id, 'q' . $question->id => 1,",
          "47:                                               'sesskey' => sesskey()));",
          "48:                 $this->print_icon('t/delete', $this->strdelete, $url);",
          "49:             }",
          "",
          "[Added Lines]",
          "62:     protected function get_url_icon_and_label(\\stdClass $question): array {",
          "63:         if (!question_has_capability_on($question, 'edit')) {",
          "64:             return [null, null, null];",
          "65:         }",
          "66:         if ($question->hidden) {",
          "67:             $url = new \\moodle_url($this->qbank->base_url(), array('unhide' => $question->id, 'sesskey' => sesskey()));",
          "68:             return [$url, 't/restore', $this->strrestore];",
          "69:         } else {",
          "70:             $url = new \\moodle_url($this->qbank->base_url(), array('deleteselected' => $question->id, 'q' . $question->id => 1,",
          "71:                     'sesskey' => sesskey()));",
          "72:             return [$url, 't/delete', $this->strdelete];",
          "",
          "---------------"
        ],
        "question/classes/bank/edit_action_column.php||question/classes/bank/edit_action_column.php": [
          "File: question/classes/bank/edit_action_column.php -> question/classes/bank/edit_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "26:     protected $stredit;",
          "27:     protected $strview;",
          "29:     public function init() {",
          "30:         parent::init();",
          "32:         $this->strview = get_string('view');",
          "33:     }",
          "",
          "[Removed Lines]",
          "25: class edit_action_column extends action_column_base {",
          "31:         $this->stredit = get_string('edit');",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "35: class edit_action_column extends menu_action_column_base {",
          "41:         $this->stredit = get_string('editquestion', 'question');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:         return 'editaction';",
          "37:     }",
          "40:         if (question_has_capability_on($question, 'edit')) {",
          "42:         } else if (question_has_capability_on($question, 'view')) {",
          "44:         }",
          "45:     }",
          "46: }",
          "",
          "[Removed Lines]",
          "39:     protected function display_content($question, $rowclasses) {",
          "41:             $this->print_icon('t/edit', $this->stredit, $this->qbank->edit_question_url($question->id));",
          "43:             $this->print_icon('i/info', $this->strview, $this->qbank->edit_question_url($question->id));",
          "",
          "[Added Lines]",
          "49:     protected function get_url_icon_and_label(\\stdClass $question): array {",
          "51:             return [$this->qbank->edit_question_moodle_url($question->id), 't/edit', $this->stredit];",
          "53:             return [$this->qbank->edit_question_moodle_url($question->id), 'i/info', $this->strview];",
          "54:         } else {",
          "55:             return [null, null, null];",
          "",
          "---------------"
        ],
        "question/classes/bank/edit_menu_column.php||question/classes/bank/edit_menu_column.php": [
          "File: question/classes/bank/edit_menu_column.php -> question/classes/bank/edit_menu_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_question\\bank;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "40: class edit_menu_column extends column_base {",
          "44:     protected $actions;",
          "56:     public function claim_menuable_columns($allcolumns) {",
          "57:         $remainingcolumns = [];",
          "58:         foreach ($allcolumns as $key => $column) {",
          "59:             if ($column instanceof menuable_action) {",
          "60:                 $this->actions[$key] = $column;",
          "61:             } else {",
          "62:                 $remainingcolumns[$key] = $column;",
          "63:             }",
          "64:         }",
          "65:         return $remainingcolumns;",
          "66:     }",
          "68:     protected function get_title() {",
          "69:         return get_string('actions');",
          "70:     }",
          "72:     public function get_name() {",
          "73:         return 'editmenu';",
          "74:     }",
          "76:     protected function display_content($question, $rowclasses) {",
          "77:         global $OUTPUT;",
          "79:         $menu = new \\action_menu();",
          "80:         $menu->set_menu_trigger(get_string('edit'));",
          "81:         $menu->set_alignment(\\action_menu::TL, \\action_menu::BL);",
          "82:         foreach ($this->actions as $actioncolumn) {",
          "83:             $action = $actioncolumn->get_action_menu_link($question);",
          "84:             if ($action) {",
          "85:                 $menu->add($action);",
          "86:             }",
          "87:         }",
          "89:         echo $OUTPUT->render($menu);",
          "90:     }",
          "91: }",
          "",
          "---------------"
        ],
        "question/classes/bank/export_xml_action_column.php||question/classes/bank/export_xml_action_column.php": [
          "File: question/classes/bank/export_xml_action_column.php -> question/classes/bank/export_xml_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_question\\bank;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "35: class export_xml_action_column extends menu_action_column_base {",
          "37:     protected $strexportasxml;",
          "39:     public function init() {",
          "40:         parent::init();",
          "41:         $this->strexportasxml = get_string('exportasxml', 'question');",
          "42:     }",
          "44:     public function get_name() {",
          "45:         return 'exportasxmlaction';",
          "46:     }",
          "48:     protected function get_url_icon_and_label(\\stdClass $question): array {",
          "49:         if (!question_has_capability_on($question, 'view')) {",
          "50:             return [null, null, null];",
          "51:         }",
          "53:         return [question_get_export_single_question_url($question),",
          "54:                 't/download', $this->strexportasxml];",
          "55:     }",
          "56: }",
          "",
          "---------------"
        ],
        "question/classes/bank/menu_action_column_base.php||question/classes/bank/menu_action_column_base.php": [
          "File: question/classes/bank/menu_action_column_base.php -> question/classes/bank/menu_action_column_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_question\\bank;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "40: abstract class menu_action_column_base extends action_column_base implements menuable_action {",
          "54:     abstract protected function get_url_icon_and_label(\\stdClass $question): array;",
          "56:     protected function display_content($question, $rowclasses) {",
          "57:         [$url, $icon, $label] = $this->get_url_icon_and_label($question);",
          "58:         if ($url) {",
          "59:             $this->print_icon($icon, $label, $url);",
          "60:         }",
          "61:     }",
          "63:     public function get_action_menu_link(\\stdClass $question): ?\\action_menu_link {",
          "64:         [$url, $icon, $label] = $this->get_url_icon_and_label($question);",
          "65:         if (!$url) {",
          "66:             return null;",
          "67:         }",
          "68:         return new \\action_menu_link_secondary($url, new \\pix_icon($icon, ''), $label);",
          "69:     }",
          "70: }",
          "",
          "---------------"
        ],
        "question/classes/bank/menuable_action.php||question/classes/bank/menuable_action.php": [
          "File: question/classes/bank/menuable_action.php -> question/classes/bank/menuable_action.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_question\\bank;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "47: interface menuable_action {",
          "55:     public function get_action_menu_link(\\stdClass $question): ?\\action_menu_link;",
          "56: }",
          "",
          "---------------"
        ],
        "question/classes/bank/modifier_name_column.php||question/classes/bank/modifier_name_column.php": [
          "File: question/classes/bank/modifier_name_column.php -> question/classes/bank/modifier_name_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace core_question\\bank;",
          "26: class modifier_name_column extends column_base {",
          "27:     public function get_name() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/preview_action_column.php||question/classes/bank/preview_action_column.php": [
          "File: question/classes/bank/preview_action_column.php -> question/classes/bank/preview_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "26:     public function get_name() {",
          "27:         return 'previewaction';",
          "28:     }",
          "",
          "[Removed Lines]",
          "25: class preview_action_column extends action_column_base {",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "35: class preview_action_column extends action_column_base implements menuable_action {",
          "39:     protected $strpreview;",
          "41:     public function init() {",
          "42:         parent::init();",
          "43:         $this->strpreview = get_string('preview');",
          "44:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:                     $question->id, $this->qbank->get_most_specific_context(), false);",
          "35:         }",
          "36:     }",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     public function get_action_menu_link(\\stdClass $question): ?\\action_menu_link {",
          "59:         if (!question_has_capability_on($question, 'use')) {",
          "60:             return null;",
          "61:         }",
          "63:         $context = $this->qbank->get_most_specific_context();",
          "64:         $url = question_preview_url($question->id, null, null, null, null, $context);",
          "65:         return new \\action_menu_link_secondary($url, new \\pix_icon('t/preview', ''),",
          "66:                 $this->strpreview, ['target' => 'questionpreview']);",
          "67:     }",
          "",
          "---------------"
        ],
        "question/classes/bank/question_name_column.php||question/classes/bank/question_name_column.php": [
          "File: question/classes/bank/question_name_column.php -> question/classes/bank/question_name_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "25: class question_name_column extends column_base {",
          "26:     protected $checkboxespresent = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/question_text_row.php||question/classes/bank/question_text_row.php": [
          "File: question/classes/bank/question_text_row.php -> question/classes/bank/question_text_row.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: namespace core_question\\bank;",
          "26: class question_text_row extends row_base {",
          "27:     protected $formatoptions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/question_type_column.php||question/classes/bank/question_type_column.php": [
          "File: question/classes/bank/question_type_column.php -> question/classes/bank/question_type_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "25: class question_type_column extends column_base {",
          "26:     public function get_name() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/row_base.php||question/classes/bank/row_base.php": [
          "File: question/classes/bank/row_base.php -> question/classes/bank/row_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: namespace core_question\\bank;",
          "25: abstract class row_base extends column_base {",
          "26:     public function is_extra_row() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "---------------"
        ],
        "question/classes/bank/tags_action_column.php||question/classes/bank/tags_action_column.php": [
          "File: question/classes/bank/tags_action_column.php -> question/classes/bank/tags_action_column.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: namespace core_question\\bank;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "35: class tags_action_column extends action_column_base {",
          "",
          "[Added Lines]",
          "34: class tags_action_column extends action_column_base implements menuable_action {",
          "38:     protected $managetags;",
          "40:     public function init() {",
          "41:         parent::init();",
          "42:         $this->managetags = get_string('managetags', 'tag');",
          "43:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     protected function display_content($question, $rowclasses) {",
          "53:         if (\\core_tag_tag::is_enabled('core_question', 'question') &&",
          "54:                 question_has_capability_on($question, 'view')) {",
          "62:         }",
          "63:     }",
          "81:         ];",
          "84:     }",
          "85: }",
          "",
          "[Removed Lines]",
          "56:             $cantag = question_has_capability_on($question, 'tag');",
          "57:             $qbank = $this->qbank;",
          "58:             $url = new \\moodle_url($qbank->edit_question_url($question->id));",
          "59:             $editingcontext = $qbank->get_most_specific_context();",
          "61:             $this->print_tag_icon($question->id, $url, $cantag, $editingcontext->id);",
          "73:     protected function print_tag_icon($id, \\moodle_url $url, $cantag, $contextid) {",
          "74:         global $OUTPUT;",
          "76:         $params = [",
          "77:             'data-action' => 'edittags',",
          "78:             'data-cantag' => $cantag,",
          "79:             'data-contextid' => $contextid,",
          "80:             'data-questionid' => $id",
          "83:         echo \\html_writer::link($url, $OUTPUT->pix_icon('t/tags', get_string('managetags', 'tag')), $params);",
          "",
          "[Added Lines]",
          "61:         global $OUTPUT;",
          "66:             [$url, $attributes] = $this->get_link_url_and_attributes($question);",
          "67:             echo \\html_writer::link($url, $OUTPUT->pix_icon('t/tags',",
          "68:                     $this->managetags), $attributes);",
          "79:     protected function get_link_url_and_attributes($question) {",
          "80:         $url = new \\moodle_url($this->qbank->edit_question_url($question->id));",
          "82:         $attributes = [",
          "83:                 'data-action' => 'edittags',",
          "84:                 'data-cantag' => question_has_capability_on($question, 'tag'),",
          "85:                 'data-contextid' => $this->qbank->get_most_specific_context()->id,",
          "86:                 'data-questionid' => $question->id",
          "89:         return [$url, $attributes];",
          "90:     }",
          "92:     public function get_action_menu_link(\\stdClass $question): ?\\action_menu_link {",
          "93:         if (!\\core_tag_tag::is_enabled('core_question', 'question') ||",
          "94:                 !question_has_capability_on($question, 'view')) {",
          "95:             return null;",
          "96:         }",
          "98:         [$url, $attributes] = $this->get_link_url_and_attributes($question);",
          "99:         return new \\action_menu_link_secondary($url, new \\pix_icon('t/tags', ''),",
          "100:                 $this->managetags, $attributes);",
          "",
          "---------------"
        ],
        "question/classes/bank/view.php||question/classes/bank/view.php": [
          "File: question/classes/bank/view.php -> question/classes/bank/view.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "18: namespace core_question\\bank;",
          "20: use core_question\\bank\\search\\condition;",
          "",
          "[Added Lines]",
          "26: namespace core_question\\bank;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: use core_question\\bank\\search\\condition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:         if (empty($CFG->questionbankcolumns)) {",
          "179:             $questionbankcolumns = array('checkbox_column', 'question_type_column',",
          "183:         } else {",
          "184:              $questionbankcolumns = explode(',', $CFG->questionbankcolumns);",
          "185:         }",
          "",
          "[Removed Lines]",
          "180:                     'question_name_idnumber_tags_column', 'tags_action_column', 'edit_action_column',",
          "181:                     'copy_action_column', 'preview_action_column', 'delete_action_column',",
          "182:                     'creator_name_column', 'modifier_name_column');",
          "",
          "[Added Lines]",
          "180:                     'question_name_idnumber_tags_column',",
          "181:                     'edit_action_column', 'copy_action_column', 'tags_action_column',",
          "182:                     'preview_action_column', 'delete_action_column', 'export_xml_action_column',",
          "183:                     'creator_name_column', 'modifier_name_column', 'edit_menu_column');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "239:     protected function init_columns($wanted, $heading = '') {",
          "240:         $this->visiblecolumns = array();",
          "241:         $this->extrarows = array();",
          "242:         foreach ($wanted as $column) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:         foreach ($wanted as $column) {",
          "243:             if ($column instanceof edit_menu_column) {",
          "244:                 $wanted = $column->claim_menuable_columns($wanted);",
          "245:                 break;",
          "246:             }",
          "247:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "482:         return $this->baseurl;",
          "483:     }",
          "485:     public function edit_question_url($questionid) {",
          "487:     }",
          "",
          "[Removed Lines]",
          "486:         return $this->editquestionurl->out(true, array('id' => $questionid));",
          "",
          "[Added Lines]",
          "501:     public function edit_question_moodle_url($questionid) {",
          "502:         return new \\moodle_url($this->editquestionurl, ['id' => $questionid]);",
          "503:     }",
          "512:         return $this->edit_question_moodle_url($questionid)->out();",
          "513:     }",
          "521:     public function copy_question_moodle_url($questionid) {",
          "522:         return new \\moodle_url($this->editquestionurl, ['id' => $questionid, 'makecopy' => 1]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     public function copy_question_url($questionid) {",
          "496:     }",
          "",
          "[Removed Lines]",
          "495:         return $this->editquestionurl->out(true, array('id' => $questionid, 'makecopy' => 1));",
          "",
          "[Added Lines]",
          "531:         return $this->copy_question_moodle_url($questionid)->out();",
          "",
          "---------------"
        ],
        "question/tests/behat/behat_question.php||question/tests/behat/behat_question.php": [
          "File: question/tests/behat/behat_question.php -> question/tests/behat/behat_question.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     public function i_action_the_question($action, $questionname) {",
          "103:         $this->execute(\"behat_general::i_click_on_in_the\",",
          "",
          "[Removed Lines]",
          "98:         if ($action == 'Edit question') {",
          "99:             $action = 'Edit';",
          "100:         }",
          "",
          "[Added Lines]",
          "99:         $this->execute(\"behat_general::i_click_on_in_the\",",
          "100:                 [get_string('edit'), 'link', $questionname, 'table_row']);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019101800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019101800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "734b198fd36c273f2412bb47ffbc7c1c75079391",
      "candidate_info": {
        "commit_hash": "734b198fd36c273f2412bb47ffbc7c1c75079391",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/734b198fd36c273f2412bb47ffbc7c1c75079391",
        "files": [
          "lang/en/message.php",
          "lib/classes/message/manager.php",
          "lib/db/services.php",
          "lib/db/upgrade.php",
          "lib/messagelib.php",
          "lib/tests/messagelib_test.php",
          "lib/upgrade.txt",
          "message/amd/build/message_drawer_view_conversation.min.js",
          "message/amd/build/message_drawer_view_conversation_constants.min.js",
          "message/amd/build/message_drawer_view_conversation_patcher.min.js",
          "message/amd/build/message_drawer_view_conversation_renderer.min.js",
          "message/amd/build/message_drawer_view_overview.min.js",
          "message/amd/build/message_drawer_view_overview_section.min.js",
          "message/amd/build/message_repository.min.js",
          "message/amd/src/message_drawer_view_conversation.js",
          "message/amd/src/message_drawer_view_conversation_constants.js",
          "message/amd/src/message_drawer_view_conversation_patcher.js",
          "message/amd/src/message_drawer_view_conversation_renderer.js",
          "message/amd/src/message_drawer_view_overview.js",
          "message/amd/src/message_drawer_view_overview_section.js",
          "message/amd/src/message_repository.js",
          "message/classes/api.php",
          "message/classes/privacy/provider.php",
          "message/classes/task/migrate_message_data.php",
          "message/externallib.php",
          "message/templates/message_drawer_view_conversation_body.mustache",
          "message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "message/tests/messagelib_test.php",
          "message/upgrade.txt",
          "user/lib.php",
          "version.php"
        ],
        "message": "MDL-64715 message: add support for self conversations\n\nAdded new MESSAGE_CONVERSATION_TYPE_SELF type for self-conversations\nand upgraded legacy self-conversations to the new type, removing\nrepeated members in the message_conversation_members table.\nBesides, from now, a self-conversation will be created by default for\nall the existing users.\n\nAll the self-conversations have been also starred and a default message\nwill be displayed always to explain how to use them.",
        "before_after_code_files": [
          "lang/en/message.php||lang/en/message.php",
          "lib/classes/message/manager.php||lib/classes/message/manager.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/messagelib.php||lib/messagelib.php",
          "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php",
          "message/amd/src/message_drawer_view_conversation.js||message/amd/src/message_drawer_view_conversation.js",
          "message/amd/src/message_drawer_view_conversation_constants.js||message/amd/src/message_drawer_view_conversation_constants.js",
          "message/amd/src/message_drawer_view_conversation_patcher.js||message/amd/src/message_drawer_view_conversation_patcher.js",
          "message/amd/src/message_drawer_view_conversation_renderer.js||message/amd/src/message_drawer_view_conversation_renderer.js",
          "message/amd/src/message_drawer_view_overview.js||message/amd/src/message_drawer_view_overview.js",
          "message/amd/src/message_drawer_view_overview_section.js||message/amd/src/message_drawer_view_overview_section.js",
          "message/amd/src/message_repository.js||message/amd/src/message_repository.js",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/privacy/provider.php||message/classes/privacy/provider.php",
          "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php",
          "message/externallib.php||message/externallib.php",
          "message/templates/message_drawer_view_conversation_body.mustache||message/templates/message_drawer_view_conversation_body.mustache",
          "message/templates/message_drawer_view_conversation_header_content_type_self.mustache||message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "message/tests/messagelib_test.php||message/tests/messagelib_test.php",
          "user/lib.php||user/lib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/message.php||lang/en/message.php": [
          "File: lang/en/message.php -> lang/en/message.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: $string['defaults'] = 'Defaults';",
          "53: $string['deleteallconfirm'] = \"Are you sure you would like to delete this entire conversation? This will not delete it for other conversation participants.\";",
          "54: $string['deleteallmessages'] = \"Delete all messages\";",
          "55: $string['deleteconversation'] = \"Delete conversation\";",
          "56: $string['deleteselectedmessages'] = 'Delete selected messages';",
          "57: $string['deleteselectedmessagesconfirm'] = 'Are you sure you would like to delete the selected messages? This will not delete them for other conversation participants.';",
          "58: $string['disableall'] = 'Disable notifications';",
          "59: $string['disabled'] = 'Messaging is disabled on this site';",
          "60: $string['disallowed'] = 'Disallowed';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: $string['deleteallselfconfirm'] = \"Are you sure you would like to delete this entire personal conversation?\";",
          "59: $string['deleteselectedmessagesconfirmselfconversation'] = 'Are you sure you would like to delete the selected personal messages?';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211: $string['seeall'] = 'See all';",
          "212: $string['selectmessagestodelete'] = 'Select messages to delete';",
          "213: $string['selectnotificationtoview'] = 'Select from the list of notifications on the side to view more details';",
          "214: $string['send'] = 'Send';",
          "215: $string['sender'] = '{$a}:';",
          "216: $string['sendingvia'] = 'Sending \"{$a->provider}\" via \"{$a->processor}\"';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216: $string['selfconversation'] = 'Personal space';",
          "217: $string['selfconversationdefaultmessage'] = 'Save draft messages, links, notes etc. to access later.';",
          "",
          "---------------"
        ],
        "lib/classes/message/manager.php||lib/classes/message/manager.php": [
          "File: lib/classes/message/manager.php -> lib/classes/message/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $conv = $DB->get_record('message_conversations', ['id' => $eventdata->convid], 'id, type, name');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         if ($conv->type == \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "115:             return $savemessage->id;",
          "116:         }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1171:         'ajax' => true",
          "1172:     ),",
          "1173:     'core_message_get_messages' => array(",
          "1174:         'classname' => 'core_message_external',",
          "1175:         'methodname' => 'get_messages',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173:     'core_message_get_self_conversation' => array(",
          "1174:         'classname' => 'core_message_external',",
          "1175:         'methodname' => 'get_self_conversation',",
          "1176:         'classpath' => 'message/externallib.php',",
          "1177:         'description' => 'Retrieve a self-conversation for a user',",
          "1178:         'type' => 'read',",
          "1179:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1180:         'ajax' => true",
          "1181:     ),",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2988:         upgrade_main_savepoint(true, 2019041000.02);",
          "2989:     }",
          "2991:     return true;",
          "2992: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2991:     if ($oldversion < 2019041300.01) {",
          "2994:         $sql = \"SELECT mcm.conversationid, mcm.userid, MAX(mcm.id) as maxid",
          "2995:                   FROM {message_conversation_members} mcm",
          "2996:               GROUP BY mcm.conversationid, mcm.userid",
          "2997:                 HAVING COUNT(*) > 1\";",
          "2998:         $selfconversationsrs = $DB->get_recordset_sql($sql);",
          "2999:         $maxids = [];",
          "3000:         foreach ($selfconversationsrs as $selfconversation) {",
          "3001:             $DB->update_record('message_conversations',",
          "3002:                 ['id' => $selfconversation->conversationid,",
          "3003:                  'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3004:                  'convhash' => \\core_message\\helper::get_conversation_hash([$selfconversation->userid])",
          "3005:                 ]",
          "3006:             );",
          "3009:             $favouriterecord = new \\stdClass();",
          "3010:             $favouriterecord->component = 'core_message';",
          "3011:             $favouriterecord->itemtype = 'message_conversations';",
          "3012:             $favouriterecord->itemid = $selfconversation->conversationid;",
          "3013:             $userctx = \\context_user::instance($selfconversation->userid);",
          "3014:             $favouriterecord->contextid = $userctx->id;",
          "3015:             $favouriterecord->userid = $selfconversation->userid;",
          "3016:             $favouriterecord->timecreated = time();",
          "3017:             $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3019:             $DB->insert_record('favourite', $favouriterecord);",
          "3022:             $maxids[] = $selfconversation->maxid;",
          "3023:         }",
          "3024:         $selfconversationsrs->close();",
          "3027:         if (!empty($maxids)) {",
          "3028:             list($insql, $inparams) = $DB->get_in_or_equal($maxids);",
          "3029:             $DB->delete_records_select('message_conversation_members', \"id $insql\", $inparams);",
          "3030:         }",
          "3037:         $select = 'useridfrom = useridto AND notification = 0';",
          "3038:         $legacyselfmessagesrs = $DB->get_recordset_select('message_read', $select);",
          "3039:         foreach ($legacyselfmessagesrs as $message) {",
          "3041:             $conditions = [",
          "3042:                 'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3043:                 'convhash' => \\core_message\\helper::get_conversation_hash([$message->useridfrom])",
          "3044:             ];",
          "3045:             $selfconversation = $DB->get_record('message_conversations', $conditions);",
          "3046:             if (empty($selfconversation)) {",
          "3048:                 $selfconversation = new \\stdClass();",
          "3049:                 $selfconversation->type = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "3050:                 $selfconversation->convhash = \\core_message\\helper::get_conversation_hash([$message->useridfrom]);",
          "3051:                 $selfconversation->enabled = 1;",
          "3052:                 $selfconversation->timecreated = time();",
          "3053:                 $selfconversation->timemodified = $selfconversation->timecreated;",
          "3055:                 $selfconversation->id = $DB->insert_record('message_conversations', $selfconversation);",
          "3058:                 $member = new \\stdClass();",
          "3059:                 $member->conversationid = $selfconversation->id;",
          "3060:                 $member->userid = $message->useridfrom;",
          "3061:                 $member->timecreated = time();",
          "3063:                 $member->id = $DB->insert_record('message_conversation_members', $member);",
          "3066:                 $favouriterecord = new \\stdClass();",
          "3067:                 $favouriterecord->component = 'core_message';",
          "3068:                 $favouriterecord->itemtype = 'message_conversations';",
          "3069:                 $favouriterecord->itemid = $selfconversation->id;",
          "3070:                 $userctx = \\context_user::instance($message->useridfrom);",
          "3071:                 $favouriterecord->contextid = $userctx->id;",
          "3072:                 $favouriterecord->userid = $message->useridfrom;",
          "3073:                 $favouriterecord->timecreated = time();",
          "3074:                 $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3076:                 $DB->insert_record('favourite', $favouriterecord);",
          "3077:             }",
          "3080:             $tabledata = new \\stdClass();",
          "3081:             $tabledata->useridfrom = $message->useridfrom;",
          "3082:             $tabledata->conversationid = $selfconversation->id;",
          "3083:             $tabledata->subject = $message->subject;",
          "3084:             $tabledata->fullmessage = $message->fullmessage;",
          "3085:             $tabledata->fullmessageformat = $message->fullmessageformat ?? FORMAT_MOODLE;",
          "3086:             $tabledata->fullmessagehtml = $message->fullmessagehtml;",
          "3087:             $tabledata->smallmessage = $message->smallmessage;",
          "3088:             $tabledata->timecreated = $message->timecreated;",
          "3090:             $messageid = $DB->insert_record('messages', $tabledata);",
          "3094:             if ($message->timeuserfromdeleted) {",
          "3095:                 $mua = new \\stdClass();",
          "3096:                 $mua->userid = $message->useridfrom;",
          "3097:                 $mua->messageid = $messageid;",
          "3098:                 $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "3099:                 $mua->timecreated = $message->timeuserfromdeleted;",
          "3101:                 $DB->insert_record('message_user_actions', $mua);",
          "3102:             }",
          "3105:             $mua = new \\stdClass();",
          "3106:             $mua->userid = $message->useridto;",
          "3107:             $mua->messageid = $messageid;",
          "3108:             $mua->action = \\core_message\\api::MESSAGE_ACTION_READ;",
          "3109:             $mua->timecreated = $message->timeread;",
          "3111:             $DB->insert_record('message_user_actions', $mua);",
          "3112:         }",
          "3113:         $legacyselfmessagesrs->close();",
          "3116:         $DB->delete_records_select('message_read', $select);",
          "3121:         $sql = \"SELECT u.id",
          "3122:                   FROM {user} u",
          "3123:                   WHERE u.id NOT IN (SELECT mcm.userid",
          "3124:                                      FROM {message_conversation_members} mcm",
          "3125:                                      INNER JOIN mdl_message_conversations mc",
          "3126:                                              ON mc.id = mcm.conversationid AND mc.type = ?",
          "3127:                                     )\";",
          "3128:         $useridsrs = $DB->get_recordset_sql($sql, [\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "3130:         foreach ($useridsrs as $user) {",
          "3131:             $conditions = [",
          "3132:                 'type' => \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3133:                 'convhash' => \\core_message\\helper::get_conversation_hash([$user->id])",
          "3134:             ];",
          "3135:             $selfconversation = $DB->get_record('message_conversations', $conditions);",
          "3136:             if (empty($selfconversation)) {",
          "3138:                 $selfconversation = new \\stdClass();",
          "3139:                 $selfconversation->type = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "3140:                 $selfconversation->convhash = \\core_message\\helper::get_conversation_hash([$user->id]);",
          "3141:                 $selfconversation->enabled = 1;",
          "3142:                 $selfconversation->timecreated = time();",
          "3143:                 $selfconversation->timemodified = $selfconversation->timecreated;",
          "3145:                 $selfconversation->id = $DB->insert_record('message_conversations', $selfconversation);",
          "3148:                 $member = new \\stdClass();",
          "3149:                 $member->conversationid = $selfconversation->id;",
          "3150:                 $member->userid = $user->id;",
          "3151:                 $member->timecreated = time();",
          "3153:                 $member->id = $DB->insert_record('message_conversation_members', $member);",
          "3156:                 $favouriterecord = new \\stdClass();",
          "3157:                 $favouriterecord->component = 'core_message';",
          "3158:                 $favouriterecord->itemtype = 'message_conversations';",
          "3159:                 $favouriterecord->itemid = $selfconversation->id;",
          "3160:                 $userctx = \\context_user::instance($user->id);",
          "3161:                 $favouriterecord->contextid = $userctx->id;",
          "3162:                 $favouriterecord->userid = $user->id;",
          "3163:                 $favouriterecord->timecreated = time();",
          "3164:                 $favouriterecord->timemodified = $favouriterecord->timecreated;",
          "3166:                 $DB->insert_record('favourite', $favouriterecord);",
          "3167:             }",
          "3168:         }",
          "3169:         $useridsrs->close();",
          "3172:         upgrade_main_savepoint(true, 2019041300.01);",
          "3173:     }",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             return false;",
          "119:         }",
          "130:         }",
          "133:         $eventdata->convid = $conversationid;",
          "134:     }",
          "",
          "[Removed Lines]",
          "121:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "122:                                                                                   $eventdata->userto->id])) {",
          "123:             $conversation = \\core_message\\api::create_conversation(",
          "124:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "125:                 [",
          "126:                     $eventdata->userfrom->id,",
          "127:                     $eventdata->userto->id",
          "128:                 ]",
          "129:             );",
          "132:         $conversationid = $conversationid ? $conversationid : $conversation->id;",
          "",
          "[Added Lines]",
          "121:         if ($eventdata->userfrom->id == $eventdata->userto->id) {",
          "123:             $conversation = \\core_message\\api::get_self_conversation($eventdata->userfrom->id);",
          "124:             if (empty($conversation)) {",
          "125:                 $conversation = \\core_message\\api::create_conversation(",
          "126:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "127:                     [$eventdata->userfrom->id]",
          "128:                 );",
          "129:             }",
          "130:         } else {",
          "131:             if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "132:                                                                                       $eventdata->userto->id])) {",
          "134:                 $conversation = \\core_message\\api::create_conversation(",
          "135:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "136:                     [",
          "137:                         $eventdata->userfrom->id,",
          "138:                         $eventdata->userto->id",
          "139:                     ]",
          "140:                 );",
          "141:             }",
          "144:         $conversationid = !empty($conversationid) ? $conversationid : $conversation->id;",
          "",
          "---------------"
        ],
        "lib/tests/messagelib_test.php||lib/tests/messagelib_test.php": [
          "File: lib/tests/messagelib_test.php -> lib/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:         $sink->clear();",
          "820:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:     public function test_message_send_to_self_conversation() {",
          "835:         global $DB;",
          "836:         $this->preventResetByRollback();",
          "837:         $this->resetAfterTest();",
          "840:         $user1 = $this->getDataGenerator()->create_user(array('maildisplay' => 1));",
          "841:         set_config('allowedemaildomains', 'example.com');",
          "842:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "843:             [$user1->id]);",
          "846:         $message = new \\core\\message\\message();",
          "847:         $message->courseid          = 1;",
          "848:         $message->component         = 'moodle';",
          "849:         $message->name              = 'instantmessage';",
          "850:         $message->userfrom          = $user1;",
          "851:         $message->convid            = $conversation->id;",
          "852:         $message->subject           = 'message subject 1';",
          "853:         $message->fullmessage       = 'message body';",
          "854:         $message->fullmessageformat = FORMAT_MARKDOWN;",
          "855:         $message->fullmessagehtml   = '<p>message body</p>';",
          "856:         $message->smallmessage      = 'small message';",
          "857:         $message->notification      = '0';",
          "860:         $content = array('*' => array('header' => ' test ', 'footer' => ' test '));",
          "861:         $message->set_additional_content('email', $content);",
          "864:         $DB->set_field_select('message_processors', 'enabled', 0, \"name <> 'email'\");",
          "865:         set_user_preference('message_provider_moodle_instantmessage_loggedoff', 'email', $user1);",
          "868:         $sink = $this->redirectEmails();",
          "869:         $messageid = message_send($message);",
          "870:         $emails = $sink->get_messages();",
          "871:         $this->assertCount(0, $emails);",
          "872:         $sink->clear();",
          "873:     }",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation.js||message/amd/src/message_drawer_view_conversation.js": [
          "File: message/amd/src/message_drawer_view_conversation.js -> message/amd/src/message_drawer_view_conversation.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     var getOtherUserId = function() {",
          "124:             return null;",
          "125:         }",
          "127:         var loggedInUserId = viewState.loggedInUserId;",
          "128:         var otherUserIds = Object.keys(viewState.members).filter(function(userId) {",
          "129:             return loggedInUserId != userId;",
          "130:         });",
          "",
          "[Removed Lines]",
          "123:         if (!viewState || viewState.type != CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "123:         if (!viewState || (viewState.type != CONVERSATION_TYPES.PRIVATE && viewState.type != CONVERSATION_TYPES.SELF)) {",
          "128:         if (viewState.type == CONVERSATION_TYPES.SELF) {",
          "130:             return loggedInUserId;",
          "131:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             if (!carry) {",
          "145:                 var state = stateCache[id].state;",
          "148:                     if (userId in state.members) {",
          "150:                         carry = state.id;",
          "",
          "[Removed Lines]",
          "147:                 if (state.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "152:                 if (state.type == CONVERSATION_TYPES.PRIVATE || state.type == CONVERSATION_TYPES.SELF) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "287:                 newState = StateManager.setLoadingMembers(newState, false);",
          "288:                 newState = StateManager.setLoadingMessages(newState, false);",
          "289:                 newState = StateManager.setName(newState, profile.fullname);",
          "291:                 newState = StateManager.setImageUrl(newState, profile.profileimageurl);",
          "292:                 newState = StateManager.setTotalMemberCount(newState, 2);",
          "293:                 return render(newState)",
          "",
          "[Removed Lines]",
          "290:                 newState = StateManager.setType(newState, 1);",
          "",
          "[Added Lines]",
          "295:                 newState = StateManager.setType(newState, CONVERSATION_TYPES.PRIVATE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:             });",
          "303:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:     var loadEmptySelfConversation = function(loggedInUserProfile) {",
          "320:         var loggedInUserId = loggedInUserProfile.id;",
          "321:         var newState = StateManager.setLoadingMembers(viewState, true);",
          "322:         newState = StateManager.setLoadingMessages(newState, true);",
          "323:         return render(newState)",
          "324:             .then(function() {",
          "325:                 return Repository.getMemberInfo(loggedInUserId, [loggedInUserId], true, true);",
          "326:             })",
          "327:             .then(function(profiles) {",
          "328:                 if (profiles.length) {",
          "329:                     return profiles[0];",
          "330:                 } else {",
          "331:                     throw new Error('Unable to load other user profile');",
          "332:                 }",
          "333:             })",
          "334:             .then(function(profile) {",
          "335:                 var newState = StateManager.addMembers(viewState, [profile, loggedInUserProfile]);",
          "336:                 newState = StateManager.setLoadingMembers(newState, false);",
          "337:                 newState = StateManager.setLoadingMessages(newState, false);",
          "338:                 newState = StateManager.setName(newState, profile.fullname);",
          "339:                 newState = StateManager.setType(newState, CONVERSATION_TYPES.SELF);",
          "340:                 newState = StateManager.setImageUrl(newState, profile.profileimageurl);",
          "341:                 newState = StateManager.setTotalMemberCount(newState, 1);",
          "342:                 return render(newState)",
          "343:                     .then(function() {",
          "344:                         return profile;",
          "345:                     });",
          "346:             })",
          "347:             .catch(function(error) {",
          "348:                 var newState = StateManager.setLoadingMembers(viewState, false);",
          "349:                 render(newState);",
          "350:                 Notification.exception(error);",
          "351:             });",
          "352:     };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "312:     var updateStateFromConversation = function(conversation, loggedInUserId) {",
          "317:         var name = conversation.name;",
          "318:         var imageUrl = conversation.imageurl;",
          "321:             name = name || otherUser ? otherUser.fullname : '';",
          "322:             imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';",
          "323:         }",
          "",
          "[Removed Lines]",
          "313:         var otherUsers = conversation.members.filter(function(member) {",
          "314:             return member.id != loggedInUserId;",
          "315:         });",
          "316:         var otherUser = otherUsers.length ? otherUsers[0] : null;",
          "320:         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "362:         var otherUser = null;",
          "363:         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "365:             var otherUsers = conversation.members.filter(function(member) {",
          "366:                 return member.id != loggedInUserId;",
          "367:             });",
          "368:             otherUser = otherUsers.length ? otherUsers[0] : null;",
          "369:         } else if (conversation.type == CONVERSATION_TYPES.SELF) {",
          "371:             otherUser = conversation.members[0];",
          "372:         }",
          "376:         if (conversation.type == CONVERSATION_TYPES.PRIVATE || conversation.type == CONVERSATION_TYPES.SELF) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1019:         var newConversationId = null;",
          "1020:         return render(newState)",
          "1021:             .then(function() {",
          "1025:                     var otherUserId = getOtherUserId();",
          "",
          "[Removed Lines]",
          "1022:                 if (!conversationId && viewState.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "1079:                 if (!conversationId &&",
          "1080:                     (viewState.type == CONVERSATION_TYPES.PRIVATE || viewState.type == CONVERSATION_TYPES.SELF)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1481:     var resetNoConversation = function(body, loggedInUserProfile, otherUserId) {",
          "1506:     };",
          "",
          "[Removed Lines]",
          "1484:         return resetState(body, null, loggedInUserProfile)",
          "1485:             .then(function() {",
          "1486:                 return Repository.getConversationBetweenUsers(",
          "1487:                         loggedInUserProfile.id,",
          "1488:                         otherUserId,",
          "1489:                         true,",
          "1490:                         true,",
          "1491:                         0,",
          "1492:                         0,",
          "1493:                         LOAD_MESSAGE_LIMIT,",
          "1494:                         0,",
          "1495:                         NEWEST_FIRST",
          "1496:                     )",
          "1497:                     .then(function(conversation) {",
          "1499:                         return resetByConversation(body, conversation, loggedInUserProfile);",
          "1500:                     })",
          "1501:                     .catch(function() {",
          "1503:                         return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);",
          "1504:                     });",
          "1505:             });",
          "",
          "[Added Lines]",
          "1542:         if (loggedInUserProfile.id != otherUserId) {",
          "1544:             return resetState(body, null, loggedInUserProfile)",
          "1545:                 .then(function() {",
          "1546:                     return Repository.getConversationBetweenUsers(",
          "1547:                             loggedInUserProfile.id,",
          "1548:                             otherUserId,",
          "1549:                             true,",
          "1550:                             true,",
          "1551:                             0,",
          "1552:                             0,",
          "1553:                             LOAD_MESSAGE_LIMIT,",
          "1554:                             0,",
          "1555:                             NEWEST_FIRST",
          "1556:                         )",
          "1557:                         .then(function(conversation) {",
          "1559:                             return resetByConversation(body, conversation, loggedInUserProfile);",
          "1560:                         })",
          "1561:                         .catch(function() {",
          "1563:                             return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);",
          "1564:                         });",
          "1565:                 });",
          "1566:         } else {",
          "1568:             return resetState(body, null, loggedInUserProfile)",
          "1569:                 .then(function() {",
          "1570:                     return Repository.getSelfConversation(",
          "1571:                             loggedInUserProfile.id,",
          "1572:                             LOAD_MESSAGE_LIMIT,",
          "1573:                             0,",
          "1574:                             NEWEST_FIRST",
          "1575:                         )",
          "1576:                         .then(function(conversation) {",
          "1578:                             return resetByConversation(body, conversation, loggedInUserProfile);",
          "1579:                         })",
          "1580:                         .catch(function() {",
          "1582:                             return loadEmptySelfConversation(loggedInUserProfile);",
          "1583:                         });",
          "1584:                 });",
          "1585:         }",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_constants.js||message/amd/src/message_drawer_view_conversation_constants.js": [
          "File: message/amd/src/message_drawer_view_conversation_constants.js -> message/amd/src/message_drawer_view_conversation_constants.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         MORE_MESSAGES_LOADING_ICON_CONTAINER: '[data-region=\"more-messages-loading-icon-container\"]',",
          "79:         MUTED_ICON_CONTAINER: '[data-region=\"muted-icon-container\"]',",
          "80:         PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]',",
          "81:         SEND_MESSAGE_BUTTON: '[data-action=\"send-message\"]',",
          "82:         SEND_MESSAGE_ICON_CONTAINER: '[data-region=\"send-icon-container\"]',",
          "83:         TEXT: '[data-region=\"text\"]',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         SELF_CONVERSATION_MESSAGE_CONTAINER: '[data-region=\"self-conversation-message-container\"]',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         HEADER_PRIVATE: 'core_message/message_drawer_view_conversation_header_content_type_private',",
          "89:         HEADER_PRIVATE_NO_CONTROLS: 'core_message/message_drawer_view_conversation_header_content_type_private_no_controls',",
          "90:         HEADER_PUBLIC: 'core_message/message_drawer_view_conversation_header_content_type_public',",
          "91:         DAY: 'core_message/message_drawer_view_conversation_body_day',",
          "92:         MESSAGE: 'core_message/message_drawer_view_conversation_body_message',",
          "93:         MESSAGES: 'core_message/message_drawer_view_conversation_body_messages'",
          "94:     };",
          "96:     var CONVERSATION_TYPES = {",
          "97:         PRIVATE: 1,",
          "99:     };",
          "101:     return {",
          "102:         SELECTORS: SELECTORS,",
          "103:         TEMPLATES: TEMPLATES,",
          "104:         CONVERSATION_TYPES: CONVERSATION_TYPES,",
          "105:         NEWEST_MESSAGES_FIRST: true,",
          "106:         LOAD_MESSAGE_LIMIT: 100,",
          "107:         INITIAL_NEW_MESSAGE_POLL_TIMEOUT: 1000",
          "",
          "[Removed Lines]",
          "98:         PUBLIC: 2",
          "",
          "[Added Lines]",
          "92:         HEADER_SELF: 'core_message/message_drawer_view_conversation_header_content_type_self',",
          "101:         PUBLIC: 2,",
          "102:         SELF: 3",
          "103:     };",
          "107:     var CONVERSATION_CATEGORY_TYPES = {",
          "108:         PRIVATE: 1,",
          "109:         PUBLIC: 2,",
          "110:         FAVOURITE: null",
          "117:         CONVERSATION_CATEGORY_TYPES: CONVERSATION_CATEGORY_TYPES,",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_patcher.js||message/amd/src/message_drawer_view_conversation_patcher.js": [
          "File: message/amd/src/message_drawer_view_conversation_patcher.js -> message/amd/src/message_drawer_view_conversation_patcher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:         return null;",
          "314:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:     var buildHeaderPatchTypeSelf = function(state, newState) {",
          "325:         var shouldRenderHeader = (state.name === null);",
          "327:         if (shouldRenderHeader) {",
          "328:             return {",
          "329:                 type: Constants.CONVERSATION_TYPES.SELF,",
          "331:                 showControls: false,",
          "332:                 context: {",
          "333:                     id: newState.id,",
          "334:                     name: newState.name,",
          "335:                     subname: newState.subname,",
          "336:                     imageurl: newState.imageUrl,",
          "337:                     isfavourite: newState.isFavourite,",
          "339:                     showfavourite: newState.id !== null,",
          "340:                     showonlinestatus: true,",
          "341:                 }",
          "342:             };",
          "343:         }",
          "345:         return null;",
          "346:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:     var buildConfirmDeleteSelectedMessages = function(state, newState) {",
          "537:         if (newState.pendingDeleteMessageIds.length) {",
          "539:         } else if (state.pendingDeleteMessageIds.length) {",
          "540:             return false;",
          "541:         }",
          "",
          "[Removed Lines]",
          "538:             return true;",
          "",
          "[Added Lines]",
          "569:             return newState.type;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:     var buildConfirmDeleteConversation = function(state, newState) {",
          "554:         if (!state.pendingDeleteConversation && newState.pendingDeleteConversation) {",
          "556:         } else if (state.pendingDeleteConversation && !newState.pendingDeleteConversation) {",
          "557:             return false;",
          "558:         }",
          "",
          "[Removed Lines]",
          "555:             return true;",
          "",
          "[Added Lines]",
          "586:             return newState.type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "948:         var oldOtherUser = getOtherUserFromState(state);",
          "949:         var newOtherUser = getOtherUserFromState(newState);",
          "951:         if (!oldOtherUser && !newOtherUser) {",
          "952:             return null;",
          "953:         } else if (oldOtherUser && !newOtherUser) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:         if (newState.type == Constants.CONVERSATION_TYPES.SELF) {",
          "984:             return null;",
          "985:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1104:         return null;",
          "1105:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     var buildSelfConversationMessage = function(state, newState) {",
          "1153:         return (newState.type == Constants.CONVERSATION_TYPES.SELF);",
          "1154:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1190:             header: buildHeaderPatchTypePublic,",
          "1191:             footer: buildFooterPatchTypePublic,",
          "1192:         };",
          "1194:         var patchConfig = $.extend({}, config.all);",
          "1195:         if (newState.type && newState.type in config) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1243:         config[Constants.CONVERSATION_TYPES.SELF] = {",
          "1244:             header: buildHeaderPatchTypeSelf,",
          "1245:             footer: buildFooterPatchTypePublic,",
          "1246:             confirmDeleteConversation: buildConfirmDeleteConversation,",
          "1247:             selfConversationMessage: buildSelfConversationMessage",
          "1248:         };",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_conversation_renderer.js||message/amd/src/message_drawer_view_conversation_renderer.js": [
          "File: message/amd/src/message_drawer_view_conversation_renderer.js -> message/amd/src/message_drawer_view_conversation_renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         getMessagesContainer(body).addClass('hidden');",
          "76:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     var getSelfConversationMessageContainer = function(body) {",
          "85:         return body.find(SELECTORS.SELF_CONVERSATION_MESSAGE_CONTAINER);",
          "86:     };",
          "94:     var hideSelfConversationMessageContainer = function(body) {",
          "95:         return getSelfConversationMessageContainer(body).addClass('hidden');",
          "96:     };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "784:         if (data.type == CONVERSATION_TYPES.PRIVATE) {",
          "785:             template = data.showControls ? TEMPLATES.HEADER_PRIVATE : TEMPLATES.HEADER_PRIVATE_NO_CONTROLS;",
          "786:         }",
          "788:         return Templates.render(template, data.context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:         } else if (data.type == CONVERSATION_TYPES.SELF) {",
          "807:             template = TEMPLATES.HEADER_SELF;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1130:                 .then(function(string) {",
          "1131:                     return showConfirmDialogue(",
          "1132:                         header,",
          "",
          "[Removed Lines]",
          "1127:     var renderConfirmDeleteSelectedMessages = function(header, body, footer, show) {",
          "1128:         if (show) {",
          "1129:             return Str.get_string('deleteselectedmessagesconfirm', 'core_message')",
          "",
          "[Added Lines]",
          "1149:     var renderConfirmDeleteSelectedMessages = function(header, body, footer, type) {",
          "1150:         var showmessage = null;",
          "1151:         if (type == CONVERSATION_TYPES.SELF) {",
          "1153:             showmessage = 'deleteselectedmessagesconfirmselfconversation';",
          "1154:         } else if (type) {",
          "1156:             showmessage = 'deleteselectedmessagesconfirm';",
          "1157:         }",
          "1159:         if (showmessage) {",
          "1160:             return Str.get_string(showmessage, 'core_message')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1159:                 .then(function(string) {",
          "1160:                     return showConfirmDialogue(",
          "1161:                         header,",
          "",
          "[Removed Lines]",
          "1156:     var renderConfirmDeleteConversation = function(header, body, footer, show) {",
          "1157:         if (show) {",
          "1158:             return Str.get_string('deleteallconfirm', 'core_message')",
          "",
          "[Added Lines]",
          "1187:     var renderConfirmDeleteConversation = function(header, body, footer, type) {",
          "1188:         var showmessage = null;",
          "1189:         if (type == CONVERSATION_TYPES.SELF) {",
          "1191:             showmessage = 'deleteallselfconfirm';",
          "1192:         } else if (type) {",
          "1194:             showmessage = 'deleteallconfirm';",
          "1195:         }",
          "1197:         if (showmessage) {",
          "1198:             return Str.get_string(showmessage, 'core_message')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1437:         }",
          "1438:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:     var renderSelfConversationMessage = function(header, body, footer, displayMessage) {",
          "1490:         var container = getSelfConversationMessageContainer(body);",
          "1491:         if (displayMessage) {",
          "1492:             container.removeClass('hidden');",
          "1493:         } else {",
          "1494:             container.addClass('hidden');",
          "1495:         }",
          "1496:         return true;",
          "1497:     };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1472:     var renderReset = function(header, body, footer) {",
          "1473:         hideConfirmDialogue(header, body, footer);",
          "1474:         hideContactRequestSentContainer(body);",
          "1475:         hideAllHeaderElements(header);",
          "1476:         showHeaderPlaceholder(header);",
          "1477:         hideAllFooterElements(footer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1534:         hideSelfConversationMessageContainer(body);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1499:                 confirmDeleteConversation: renderConfirmDeleteConversation,",
          "1500:                 confirmContactRequest: renderConfirmContactRequest,",
          "1501:                 requireAddContact: renderRequireAddContact,",
          "1502:                 contactRequestSent: renderContactRequestSent",
          "1503:             },",
          "1504:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:                 selfConversationMessage: renderSelfConversationMessage,",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_overview.js||message/amd/src/message_drawer_view_overview.js": [
          "File: message/amd/src/message_drawer_view_overview.js -> message/amd/src/message_drawer_view_overview.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     'core_message/message_drawer_routes',",
          "31:     'core_message/message_drawer_events',",
          "32:     'core_message/message_drawer_view_overview_section',",
          "34: ],",
          "35: function(",
          "36:     $,",
          "",
          "[Removed Lines]",
          "33:     'core_message/message_repository'",
          "",
          "[Added Lines]",
          "33:     'core_message/message_repository',",
          "34:     'core_message/message_drawer_view_conversation_constants'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     Routes,",
          "42:     MessageDrawerEvents,",
          "43:     Section,",
          "45: ) {",
          "47:     var SELECTORS = {",
          "",
          "[Removed Lines]",
          "44:     MessageRepository",
          "",
          "[Added Lines]",
          "45:     MessageRepository,",
          "46:     Constants",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:         SECTION_TOGGLE_BUTTON: '[data-toggle]'",
          "54:     };",
          "62:     var loadAllCountsPromise = null;",
          "",
          "[Removed Lines]",
          "56:     var CONVERSATION_TYPES = {",
          "57:         PRIVATE: 1,",
          "58:         PUBLIC: 2,",
          "59:         FAVOURITE: null",
          "60:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     var filterCountsByType = function(counts, type) {",
          "93:     };",
          "",
          "[Removed Lines]",
          "92:         return type === CONVERSATION_TYPES.FAVOURITE ? counts.favourites : counts.types[type];",
          "",
          "[Added Lines]",
          "88:         var total = 0;",
          "89:         if (type === Constants.CONVERSATION_CATEGORY_TYPES.PRIVATE && counts.types[Constants.CONVERSATION_TYPES.SELF]) {",
          "92:             total = counts.types[Constants.CONVERSATION_TYPES.PRIVATE] + counts.types[Constants.CONVERSATION_TYPES.SELF];",
          "93:         } else {",
          "94:             total = type === Constants.CONVERSATION_CATEGORY_TYPES.FAVOURITE ? counts.favourites : counts.types[type];",
          "95:         }",
          "96:         return total;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:         var sections = [",
          "234:         ];",
          "236:         sections.forEach(function(args) {",
          "",
          "[Removed Lines]",
          "229:             [body.find(SELECTORS.FAVOURITES), CONVERSATION_TYPES.FAVOURITE, true],",
          "231:             [body.find(SELECTORS.GROUP_MESSAGES), CONVERSATION_TYPES.PUBLIC, false],",
          "233:             [body.find(SELECTORS.MESSAGES), CONVERSATION_TYPES.PRIVATE, false]",
          "",
          "[Added Lines]",
          "233:             [body.find(SELECTORS.FAVOURITES), Constants.CONVERSATION_CATEGORY_TYPES.FAVOURITE, true],",
          "235:             [body.find(SELECTORS.GROUP_MESSAGES), Constants.CONVERSATION_CATEGORY_TYPES.PUBLIC, false],",
          "237:             [body.find(SELECTORS.MESSAGES), Constants.CONVERSATION_CATEGORY_TYPES.PRIVATE, false]",
          "",
          "---------------"
        ],
        "message/amd/src/message_drawer_view_overview_section.js||message/amd/src/message_drawer_view_overview_section.js": [
          "File: message/amd/src/message_drawer_view_overview_section.js -> message/amd/src/message_drawer_view_overview_section.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:                 lastmessage: lastMessage ? $(lastMessage.text).text() || lastMessage.text : null",
          "184:             };",
          "188:                     if (!carry && member.id != userId) {",
          "189:                         carry = member;",
          "190:                     }",
          "191:                     return carry;",
          "192:                 }, null);",
          "194:                 formattedConversation.userid = otherUser.id;",
          "195:                 formattedConversation.showonlinestatus = otherUser.showonlinestatus;",
          "196:                 formattedConversation.isonline = otherUser.isonline;",
          "",
          "[Removed Lines]",
          "186:             if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {",
          "187:                 var otherUser = conversation.members.reduce(function(carry, member) {",
          "",
          "[Added Lines]",
          "186:             var otherUser = null;",
          "187:             if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF) {",
          "189:                 otherUser = conversation.members[0];",
          "190:             } else if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {",
          "192:                 otherUser = conversation.members.reduce(function(carry, member) {",
          "198:             }",
          "200:             if (otherUser !== null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:                     type,",
          "239:                     LOAD_LIMIT + 1,",
          "240:                     offset,",
          "242:                 )",
          "243:                 .then(function(response) {",
          "244:                     var conversations = response.conversations;",
          "",
          "[Removed Lines]",
          "241:                     includeFavourites",
          "",
          "[Added Lines]",
          "248:                     includeFavourites,",
          "249:                     true // Always merge self-conversations with private conversations, to display them together.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "575:         });",
          "577:         PubSub.subscribe(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, function(conversation) {",
          "578:             if (",
          "580:                 (includeFavourites && !conversation.isFavourite) ||",
          "581:                 (!includeFavourites && conversation.isFavourite)",
          "582:             ) {",
          "",
          "[Removed Lines]",
          "579:                 (type && conversation.type != type) ||",
          "",
          "[Added Lines]",
          "589:                 (type && conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF &&",
          "590:                 type != MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE && !conversation.isFavourite) ||",
          "591:                 (type && conversation.type != MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF &&",
          "592:                 type != conversation.type) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "613:                 if (!conversationElement.length) {",
          "614:                     createNewConversation(root, conversation);",
          "615:                 }",
          "617:                 conversationElement = getConversationElement(root, conversation.id);",
          "618:                 if (conversationElement.length) {",
          "619:                     deleteConversation(root, conversationElement);",
          "",
          "[Removed Lines]",
          "616:             } else if (type == conversation.type) {",
          "",
          "[Added Lines]",
          "629:             } else if (type == conversation.type ||",
          "630:                     (type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE &&",
          "631:                      conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:                 if (conversationElement.length) {",
          "629:                     deleteConversation(root, conversationElement);",
          "630:                 }",
          "632:                 conversationElement = getConversationElement(root, conversation.id);",
          "633:                 if (!conversationElement.length) {",
          "634:                     createNewConversation(root, conversation);",
          "",
          "[Removed Lines]",
          "631:             } else if (type == conversation.type) {",
          "",
          "[Added Lines]",
          "648:             } else if (type == conversation.type ||",
          "649:                     (type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE &&",
          "650:                      conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF)) {",
          "",
          "---------------"
        ],
        "message/amd/src/message_repository.js||message/amd/src/message_repository.js": [
          "File: message/amd/src/message_repository.js -> message/amd/src/message_repository.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "25: define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {",
          "27:     var CONVERSATION_TYPES = {",
          "28:         PRIVATE: 1,",
          "29:         PUBLIC: 2",
          "30:     };",
          "",
          "[Added Lines]",
          "25: define(",
          "26: [",
          "27:     'jquery',",
          "28:     'core/ajax',",
          "29:     'core/notification',",
          "30:     'core_message/message_drawer_view_conversation_constants'",
          "31: ], function(",
          "32:     $,",
          "33:     Ajax,",
          "34:     Notification,",
          "35:     Constants) {",
          "37:     var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:         return Ajax.call([request])[0];",
          "772:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:     var getSelfConversation = function(",
          "791:         loggedInUserId,",
          "792:         messageLimit,",
          "793:         messageOffset,",
          "794:         newestMessagesFirst",
          "795:     ) {",
          "796:         var args = {",
          "797:             userid: loggedInUserId",
          "798:         };",
          "800:         if (typeof messageLimit != 'undefined' && messageLimit !== null) {",
          "801:             args.messagelimit = messageLimit;",
          "802:         }",
          "804:         if (typeof messageOffset != 'undefined' && messageOffset !== null) {",
          "805:             args.messageoffset = messageOffset;",
          "806:         }",
          "808:         if (typeof newestMessagesFirst != 'undefined' && newestMessagesFirst !== null) {",
          "809:             args.newestmessagesfirst = newestMessagesFirst;",
          "810:         }",
          "812:         var request = {",
          "813:             methodname: 'core_message_get_self_conversation',",
          "814:             args: args",
          "815:         };",
          "817:         return Ajax.call([request])[0];",
          "818:     };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "786:         type,",
          "787:         limit,",
          "788:         offset,",
          "790:     ) {",
          "791:         var args = {",
          "792:             userid: userId,",
          "",
          "[Removed Lines]",
          "789:         favourites",
          "",
          "[Added Lines]",
          "835:         favourites,",
          "836:         mergeself",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:             args.favourites = favourites;",
          "806:         }",
          "808:         var request = {",
          "809:             methodname: 'core_message_get_conversations',",
          "810:             args: args",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:         if (typeof mergeself != 'undefined' && mergeself !== null) {",
          "856:             args.mergeself = mergeself;",
          "857:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "814:             .then(function(result) {",
          "815:                 if (result.conversations.length) {",
          "816:                     result.conversations = result.conversations.map(function(conversation) {",
          "818:                             var otherUser = conversation.members.length ? conversation.members[0] : null;",
          "820:                             if (otherUser) {",
          "",
          "[Removed Lines]",
          "817:                         if (conversation.type == CONVERSATION_TYPES.PRIVATE) {",
          "",
          "[Added Lines]",
          "868:                         if (conversation.type == CONVERSATION_TYPES.PRIVATE || conversation.type == CONVERSATION_TYPES.SELF) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1093:         declineContactRequest: declineContactRequest,",
          "1094:         getConversation: getConversation,",
          "1095:         getConversationBetweenUsers: getConversationBetweenUsers,",
          "1096:         getConversations: getConversations,",
          "1097:         getConversationMembers: getConversationMembers,",
          "1098:         setFavouriteConversations: setFavouriteConversations,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1147:         getSelfConversation: getSelfConversation,",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     const MESSAGE_CONVERSATION_TYPE_GROUP = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     const MESSAGE_CONVERSATION_TYPE_SELF = 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:              LEFT JOIN {message_user_actions} mua",
          "126:                     ON (mua.messageid = m.id AND mua.userid = ? AND mua.action = ?)",
          "127:                  WHERE (m.useridfrom = ? OR mcm.userid = ?)",
          "129:                    AND u.deleted = 0",
          "130:                    AND u2.deleted = 0",
          "131:                    AND mua.id is NULL",
          "132:                    AND \" . $DB->sql_like('smallmessage', '?', false) . \"",
          "133:               ORDER BY timecreated DESC\";",
          "138:         $conversations = array();",
          "",
          "[Removed Lines]",
          "128:                    AND m.useridfrom != mcm.userid",
          "135:         $params = array($userid, $userid, $userid, self::MESSAGE_ACTION_DELETED, $userid, $userid, '%' . $search . '%');",
          "",
          "[Added Lines]",
          "133:                    AND (m.useridfrom != mcm.userid OR mc.type = ?)",
          "140:         $params = array($userid, $userid, $userid, self::MESSAGE_ACTION_DELETED, $userid, $userid,",
          "141:             self::MESSAGE_CONVERSATION_TYPE_SELF, '%' . $search . '%');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316:         $fullname = $DB->sql_fullname();",
          "320:         list($exclude, $excludeparams) = $DB->get_in_or_equal($excludeusers, SQL_PARAMS_NAMED, 'param', false);",
          "322:         $params = array('search' => '%' . $DB->sql_like_escape($search) . '%', 'userid1' => $userid, 'userid2' => $userid);",
          "",
          "[Removed Lines]",
          "319:         $excludeusers = array($userid, $CFG->siteguest);",
          "",
          "[Added Lines]",
          "325:         $excludeusers = array($CFG->siteguest);",
          "326:         if (!$selfconversation = self::get_self_conversation($userid)) {",
          "328:             $excludeusers[] = $userid;",
          "329:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "427:         if (!empty($foundusers)) {",
          "428:             $noncontacts = helper::get_member_info($userid, array_keys($foundusers));",
          "429:             foreach ($noncontacts as $memberuserid => $memberinfo) {",
          "431:             }",
          "432:         }",
          "",
          "[Removed Lines]",
          "430:                 $noncontacts[$memberuserid]->conversations = self::get_conversations_between_users($userid, $memberuserid, 0, 1000);",
          "",
          "[Added Lines]",
          "440:                 if ($memberuserid !== $userid) {",
          "441:                     $noncontacts[$memberuserid]->conversations = self::get_conversations_between_users($userid, $memberuserid, 0,",
          "442:                         1000);",
          "443:                 } else {",
          "444:                     $noncontacts[$memberuserid]->conversations[$selfconversation->id] = $selfconversation;",
          "445:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "520:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 20, int $type = null,",
          "522:         global $DB;",
          "524:         if (!is_null($type) && !in_array($type, [self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "526:             throw new \\moodle_exception(\"Invalid value ($type) for type param, please see api constants.\");",
          "527:         }",
          "",
          "[Removed Lines]",
          "521:             bool $favourites = null) {",
          "525:                 self::MESSAGE_CONVERSATION_TYPE_GROUP])) {",
          "",
          "[Added Lines]",
          "538:             bool $favourites = null, bool $mergeself = false) {",
          "542:                 self::MESSAGE_CONVERSATION_TYPE_GROUP, self::MESSAGE_CONVERSATION_TYPE_SELF])) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "553:         }",
          "558:         $sql = \"SELECT m.id as messageid, mc.id as id, mc.name as conversationname, mc.type as conversationtype, m.useridfrom,",
          "559:                        m.smallmessage, m.fullmessage, m.fullmessageformat, m.fullmessagetrust, m.fullmessagehtml, m.timecreated,",
          "",
          "[Removed Lines]",
          "556:         $typesql = !is_null($type) ? \" AND mc.type = :convtype \" : \"\";",
          "",
          "[Added Lines]",
          "573:         $typesql = \"\";",
          "574:         $typeparams = [];",
          "575:         if (!is_null($type)) {",
          "576:             if ($mergeself && $type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "578:                 $typesql = \" AND (mc.type = :convtype1 OR mc.type = :convtype2) \";",
          "579:                 $typeparams = ['convtype1' => $type, 'convtype2' => self::MESSAGE_CONVERSATION_TYPE_SELF];",
          "580:             } else {",
          "581:                 $typesql = \" AND mc.type = :convtype \";",
          "582:                 $typeparams = ['convtype' => $type];",
          "583:             }",
          "584:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:                   AND mc.enabled = 1 $typesql $favouritesql",
          "588:               ORDER BY (CASE WHEN m.timecreated IS NULL THEN 0 ELSE 1 END) DESC, m.timecreated DESC, id DESC\";",
          "593:         $conversationset = $DB->get_recordset_sql($sql, $params, $limitfrom, $limitnum);",
          "595:         $conversations = [];",
          "597:         $members = [];",
          "598:         $individualmembers = [];",
          "599:         $groupmembers = [];",
          "600:         foreach ($conversationset as $conversation) {",
          "601:             $conversations[$conversation->id] = $conversation;",
          "602:             $members[$conversation->id] = [];",
          "",
          "[Removed Lines]",
          "590:         $params = array_merge($favouriteparams, ['userid' => $userid, 'action' => self::MESSAGE_ACTION_DELETED,",
          "591:             'userid2' => $userid, 'userid3' => $userid, 'userid4' => $userid, 'convaction' => self::CONVERSATION_ACTION_MUTED,",
          "592:             'convtype' => $type]);",
          "596:         $selfconversations = []; // Used to track legacy conversations with one's self (both conv members the same user).",
          "",
          "[Added Lines]",
          "618:         $params = array_merge($favouriteparams, $typeparams, ['userid' => $userid, 'action' => self::MESSAGE_ACTION_DELETED,",
          "619:             'userid2' => $userid, 'userid3' => $userid, 'userid4' => $userid, 'convaction' => self::CONVERSATION_ACTION_MUTED]);",
          "623:         $selfconversations = []; // Used to track conversations with one's self.",
          "627:         $selfmembers = [];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "647:                     $members[$conversation->id][$conversation->useridfrom] = $conversation->useridfrom;",
          "648:                     $groupmembers[$conversation->useridfrom] = $conversation->useridfrom;",
          "649:                 }",
          "650:             }",
          "651:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:             } else if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "678:                 $selfconversations[$conversation->id] = $conversation->id;",
          "679:                 $members[$conversation->id][$userid] = $userid;",
          "680:                 $selfmembers[$userid] = $userid;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "665:                 $members[$member->conversationid][$member->userid] = $member->userid;",
          "666:                 $individualmembers[$member->userid] = $member->userid;",
          "667:             }",
          "685:         }",
          "",
          "[Removed Lines]",
          "675:             foreach ($individualconversations as $indconvid) {",
          "676:                 if (empty($members[$indconvid])) {",
          "678:                     $selfconversations[$indconvid] = $indconvid;",
          "681:                     $members[$indconvid][$userid] = $userid;",
          "682:                     $individualmembers[$userid] = $userid;",
          "683:                 }",
          "684:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "695:         if (!empty($individualmembers) || !empty($groupmembers)) {",
          "",
          "[Added Lines]",
          "709:         if (!empty($individualmembers) || !empty($groupmembers) || !empty($selfmembers)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "701:             $individualmemberinfo = helper::get_member_info($userid, $individualmembers, true, true);",
          "702:             $groupmemberinfo = helper::get_member_info($userid, $diffgroupmembers);",
          "707:             if (empty($memberinfo)) {",
          "708:                 return [];",
          "",
          "[Removed Lines]",
          "705:             $memberinfo = $individualmemberinfo + $groupmemberinfo;",
          "",
          "[Added Lines]",
          "717:             $selfmemberinfo = helper::get_member_info($userid, $selfmembers);",
          "720:             $memberinfo = $individualmemberinfo + $groupmemberinfo + $selfmemberinfo;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "766:         $unreadcounts = $DB->get_records_sql($unreadcountssql, [$userid, self::MESSAGE_ACTION_READ, self::MESSAGE_ACTION_DELETED,",
          "767:             $userid, $userid]);",
          "771:         \\context_helper::preload_contexts_by_id(array_column($conversations, 'contextid'));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:         $selfmessagessql = \"SELECT COUNT(m.id)",
          "786:                               FROM {messages} m",
          "787:                         INNER JOIN {message_conversations} mc",
          "788:                                 ON mc.id = m.conversationid",
          "789:                              WHERE mc.type = ? AND convhash = ?\";",
          "790:         $selfmessagestotal = $DB->count_records_sql(",
          "791:             $selfmessagessql,",
          "792:             [self::MESSAGE_CONVERSATION_TYPE_SELF, helper::get_conversation_hash([$userid])]",
          "793:         );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "774:         $arrconversations = [];",
          "775:         foreach ($conversations as $conversation) {",
          "786:                 continue;",
          "787:             }",
          "",
          "[Removed Lines]",
          "779:             if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL",
          "780:                     && (empty($conversation->messageid))) {",
          "781:                 continue;",
          "782:             }",
          "785:             if (isset($selfconversations[$conversation->id])) {",
          "",
          "[Added Lines]",
          "807:             if ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL && empty($conversation->messageid) ||",
          "808:                    ($conversation->conversationtype == self::MESSAGE_CONVERSATION_TYPE_SELF && empty($conversation->messageid)",
          "809:                     && $selfmessagestotal > 0)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "923:             $memberoffset,",
          "924:             $memberlimit",
          "925:         );",
          "931:         $messages = self::get_conversation_messages(",
          "932:             $userid,",
          "",
          "[Removed Lines]",
          "927:         $members = array_filter($members, function($member) use ($userid) {",
          "928:             return $member->id != $userid;",
          "929:         });",
          "",
          "[Added Lines]",
          "950:         if ($conversation->type != self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "952:             $members = array_filter($members, function($member) use ($userid) {",
          "953:                 return $member->id != $userid;",
          "954:             });",
          "955:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1582:         $favservice = \\core_favourites\\service_factory::get_service_for_user_context($usercontext);",
          "1583:         list($favsql, $favparams) = $favservice->get_join_sql_by_type('core_message', 'message_conversations', 'fav', 'mc.id');",
          "1586:                   FROM {message_conversations} mc",
          "1587:             INNER JOIN {message_conversation_members} mcm",
          "1588:                     ON mcm.conversationid = mc.id",
          "1600:              LEFT JOIN (",
          "1601:                               SELECT m.conversationid as convid, MAX(m.timecreated) as maxtime",
          "1602:                                 FROM {messages} m",
          "",
          "[Removed Lines]",
          "1585:         $sql = \"SELECT mc.type, fav.itemtype, COUNT(DISTINCT mc.id) as count",
          "1589:             INNER JOIN (",
          "1590:                               SELECT mcm.conversationid, count(distinct mcm.userid) as membercount",
          "1591:                                 FROM {message_conversation_members} mcm",
          "1592:                                WHERE mcm.conversationid IN (",
          "1593:                                         SELECT DISTINCT conversationid",
          "1594:                                           FROM {message_conversation_members} mcm2",
          "1595:                                          WHERE userid = :userid5",
          "1596:                                      )",
          "1597:                             GROUP BY mcm.conversationid",
          "1598:                        ) uniquemembercount",
          "1599:                     ON uniquemembercount.conversationid = mc.id",
          "",
          "[Added Lines]",
          "1612:         $sql = \"SELECT mc.type, fav.itemtype, COUNT(DISTINCT mc.id) as count, MAX(maxvisibleconvmessage.convid) as maxconvidmessage",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1613:                  WHERE mcm.userid = :userid3",
          "1614:                    AND mc.enabled = :enabled",
          "1615:                    AND (",
          "1618:                        )",
          "1619:               GROUP BY mc.type, fav.itemtype",
          "1620:               ORDER BY mc.type ASC\";",
          "",
          "[Removed Lines]",
          "1616:                           (mc.type = :individualtype AND maxvisibleconvmessage.convid IS NOT NULL AND membercount > 1) OR",
          "1617:                           (mc.type = :grouptype)",
          "",
          "[Added Lines]",
          "1632:                           (mc.type = :individualtype AND maxvisibleconvmessage.convid IS NOT NULL) OR",
          "1633:                           (mc.type = :grouptype) OR",
          "1634:                           (mc.type = :selftype)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1629:             'enabled' => self::MESSAGE_CONVERSATION_ENABLED,",
          "1630:             'individualtype' => self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1631:             'grouptype' => self::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "1632:         ] + $favparams;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:             'selftype' => self::MESSAGE_CONVERSATION_TYPE_SELF,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1636:             'favourites' => 0,",
          "1637:             'types' => [",
          "1638:                 self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "1640:             ]",
          "1641:         ];",
          "1643:         $countsrs = $DB->get_recordset_sql($sql, $params);",
          "1644:         foreach ($countsrs as $key => $val) {",
          "1645:             if (!empty($val->itemtype)) {",
          "1646:                 $counts['favourites'] += $val->count;",
          "1647:                 continue;",
          "",
          "[Removed Lines]",
          "1639:                 self::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "1657:                 self::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "1658:                 self::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "1663:         $selfmessagessql = \"SELECT COUNT(m.id)",
          "1664:                               FROM {messages} m",
          "1665:                         INNER JOIN {message_conversations} mc",
          "1666:                                 ON mc.id = m.conversationid",
          "1667:                              WHERE mc.type = ? AND convhash = ?\";",
          "1668:         $selfmessagestotal = $DB->count_records_sql(",
          "1669:             $selfmessagessql,",
          "1670:             [self::MESSAGE_CONVERSATION_TYPE_SELF, helper::get_conversation_hash([$userid])]",
          "1671:         );",
          "1676:             if ($val->type == self::MESSAGE_CONVERSATION_TYPE_SELF && empty($val->maxconvidmessage) && $selfmessagestotal > 0) {",
          "1677:                 continue;",
          "1678:             }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1864:         $conversation = $DB->get_record('message_conversations', ['id' => $conversationid], '*', MUST_EXIST);",
          "1866:             return true;",
          "1867:         } else if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "",
          "[Removed Lines]",
          "1865:         if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_GROUP) {",
          "",
          "[Added Lines]",
          "1899:         if ($conversation->type == self::MESSAGE_CONVERSATION_TYPE_GROUP ||",
          "1900:             $conversation->type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2382:         return $conversations;",
          "2383:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2427:     public static function get_self_conversation(int $userid) {",
          "2428:         global $DB;",
          "2430:         $conditions = [",
          "2431:             'type' => self::MESSAGE_CONVERSATION_TYPE_SELF,",
          "2432:             'convhash' => helper::get_conversation_hash([$userid])",
          "2433:         ];",
          "2434:         return $DB->get_record('message_conversations', $conditions);",
          "2435:     }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2421:         $validtypes = [",
          "2422:             self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "2424:         ];",
          "2426:         if (!in_array($type, $validtypes)) {",
          "",
          "[Removed Lines]",
          "2423:             self::MESSAGE_CONVERSATION_TYPE_GROUP",
          "",
          "[Added Lines]",
          "2475:             self::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "2476:             self::MESSAGE_CONVERSATION_TYPE_SELF",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2432:             if (count($userids) > 2) {",
          "2433:                 throw new \\moodle_exception('An individual conversation can not have more than two users.');",
          "2434:             }",
          "2435:         }",
          "2437:         $conversation = new \\stdClass();",
          "2438:         $conversation->type = $type;",
          "2439:         $conversation->name = $name;",
          "2440:         $conversation->convhash = null;",
          "2442:             $conversation->convhash = helper::get_conversation_hash($userids);",
          "2443:         }",
          "2444:         $conversation->component = $component;",
          "",
          "[Removed Lines]",
          "2441:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "",
          "[Added Lines]",
          "2488:             if ($userids[0] == $userids[1]) {",
          "2489:                 throw new \\moodle_exception('Trying to create an individual conversation instead of a self conversation.');",
          "2490:             }",
          "2491:         } else if ($type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "2492:             if (count($userids) != 1) {",
          "2493:                 throw new \\moodle_exception('A self conversation can not have more than one user.');",
          "2494:             }",
          "2501:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL || $type == self::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2842:     protected static function can_contact_user(int $recipientid, int $senderid) : bool {",
          "2845:             return true;",
          "2846:         }",
          "",
          "[Removed Lines]",
          "2843:         if (has_capability('moodle/site:messageanyuser', \\context_system::instance(), $senderid)) {",
          "",
          "[Added Lines]",
          "2903:         if (has_capability('moodle/site:messageanyuser', \\context_system::instance(), $senderid) ||",
          "2904:             $recipientid == $senderid) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3147:         $counts = ['favourites' => 0, 'types' => [",
          "3148:             self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "3150:         ]];",
          "3151:         foreach ($unreadcounts as $convid => $info) {",
          "3152:             if (isset($favouriteconvids[$convid])) {",
          "",
          "[Removed Lines]",
          "3149:             self::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "3210:             self::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "3211:             self::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------"
        ],
        "message/classes/privacy/provider.php||message/classes/privacy/provider.php": [
          "File: message/classes/privacy/provider.php -> message/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "950:             if (empty($conversation->contextid)) {",
          "958:                 } else {",
          "960:                 }",
          "962:                 $subcontext = array_merge(",
          "",
          "[Removed Lines]",
          "952:                 $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "953:                 $members = array_filter($members, function ($member) use ($userid) {",
          "954:                     return $member->userid != $userid;",
          "955:                 });",
          "956:                 if ($otheruser = reset($members)) {",
          "957:                     $otherusertext = $otheruser->userid;",
          "959:                     $otherusertext = get_string('unknownuser', 'core_message') . '_' . $conversation->id;",
          "",
          "[Added Lines]",
          "952:                 if ($conversation->type == \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF) {",
          "954:                     $otherusertext = $userid;",
          "956:                     $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "957:                     $members = array_filter($members, function ($member) use ($userid) {",
          "958:                         return $member->userid != $userid;",
          "959:                     });",
          "960:                     if ($otheruser = reset($members)) {",
          "961:                         $otherusertext = $otheruser->userid;",
          "962:                     } else {",
          "963:                         $otherusertext = get_string('unknownuser', 'core_message') . '_' . $conversation->id;",
          "964:                     }",
          "",
          "---------------"
        ],
        "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php": [
          "File: message/classes/task/migrate_message_data.php -> message/classes/task/migrate_message_data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     private function migrate_data($userid, $otheruserid) {",
          "123:         global $DB;",
          "126:             $conversation = \\core_message\\api::create_conversation(",
          "127:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "128:                 [",
          "",
          "[Removed Lines]",
          "125:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "",
          "[Added Lines]",
          "125:         if ($userid == $otheruserid) {",
          "128:             $conversation = \\core_message\\api::get_self_conversation($userid);",
          "129:             if (empty($conversation)) {",
          "130:                 $conversation = \\core_message\\api::create_conversation(",
          "131:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "132:                     [$userid]",
          "133:                 );",
          "134:             }",
          "135:             $conversationid = $conversation->id;",
          "136:         } else if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1247:                 'name' => new external_value(PARAM_TEXT, 'The conversation name, if set', VALUE_DEFAULT, null),",
          "1248:                 'subname' => new external_value(PARAM_TEXT, 'A subtitle for the conversation name, if set', VALUE_DEFAULT, null),",
          "1249:                 'imageurl' => new external_value(PARAM_URL, 'A link to the conversation picture, if set', VALUE_DEFAULT, null),",
          "1251:                 'membercount' => new external_value(PARAM_INT, 'Total number of conversation members'),",
          "1252:                 'ismuted' => new external_value(PARAM_BOOL, 'If the user muted this conversation'),",
          "1253:                 'isfavourite' => new external_value(PARAM_BOOL, 'If the user marked this conversation as a favourite'),",
          "",
          "[Removed Lines]",
          "1250:                 'type' => new external_value(PARAM_INT, 'The type of the conversation (1=individual,2=group)'),",
          "",
          "[Added Lines]",
          "1250:                 'type' => new external_value(PARAM_INT, 'The type of the conversation (1=individual,2=group,3=self)'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1752:                 'favourites' => new external_value(PARAM_BOOL, 'Whether to restrict the results to contain NO favourite",
          "1753:                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null)',",
          "1754:                     VALUE_DEFAULT, null),",
          "1756:             )",
          "1757:         );",
          "1758:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1755:                 'mergeself' => new external_value(PARAM_BOOL, 'Whether to include self-conversations (true) or ONLY private",
          "1756:                     conversations (false) when private conversations are requested.',",
          "1757:                     VALUE_DEFAULT, false),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1773:         global $CFG, $USER;",
          "",
          "[Removed Lines]",
          "1772:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 0, int $type = null, bool $favourites = null) {",
          "",
          "[Added Lines]",
          "1776:     public static function get_conversations($userid, $limitfrom = 0, $limitnum = 0, int $type = null, bool $favourites = null,",
          "1777:             bool $mergeself = false) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1782:             'limitfrom' => $limitfrom,",
          "1783:             'limitnum' => $limitnum,",
          "1784:             'type' => $type,",
          "1786:         );",
          "1787:         $params = self::validate_parameters(self::get_conversations_parameters(), $params);",
          "",
          "[Removed Lines]",
          "1785:             'favourites' => $favourites",
          "",
          "[Added Lines]",
          "1790:             'favourites' => $favourites,",
          "1791:             'mergeself' => $mergeself",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1798:             $params['limitfrom'],",
          "1799:             $params['limitnum'],",
          "1800:             $params['type'],",
          "1802:         );",
          "1804:         return (object) ['conversations' => $conversations];",
          "",
          "[Removed Lines]",
          "1801:             $params['favourites']",
          "",
          "[Added Lines]",
          "1807:             $params['favourites'],",
          "1808:             $params['mergeself']",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2025:         return self::get_conversation_structure(true);",
          "2026:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2040:     public static function get_self_conversation_parameters() {",
          "2041:         return new external_function_parameters(",
          "2042:             array(",
          "2043:                 'userid' => new external_value(PARAM_INT, 'The id of the user who we are viewing self-conversations for'),",
          "2044:                 'messagelimit' => new external_value(PARAM_INT, 'Limit for number of messages', VALUE_DEFAULT, 100),",
          "2045:                 'messageoffset' => new external_value(PARAM_INT, 'Offset for messages list', VALUE_DEFAULT, 0),",
          "2046:                 'newestmessagesfirst' => new external_value(PARAM_BOOL, 'Order messages by newest first', VALUE_DEFAULT, true)",
          "2047:             )",
          "2048:         );",
          "2049:     }",
          "2062:     public static function get_self_conversation(",
          "2063:         int $userid,",
          "2064:         int $messagelimit = 0,",
          "2065:         int $messageoffset = 0,",
          "2066:         bool $newestmessagesfirst = true",
          "2067:     ) {",
          "2068:         global $CFG;",
          "2071:         if (empty($CFG->messaging)) {",
          "2072:             throw new moodle_exception('disabled', 'message');",
          "2073:         }",
          "2075:         $params = [",
          "2076:             'userid' => $userid,",
          "2077:             'messagelimit' => $messagelimit,",
          "2078:             'messageoffset' => $messageoffset,",
          "2079:             'newestmessagesfirst' => $newestmessagesfirst",
          "2080:         ];",
          "2081:         self::validate_parameters(self::get_self_conversation_parameters(), $params);",
          "2083:         $systemcontext = context_system::instance();",
          "2084:         self::validate_context($systemcontext);",
          "2086:         $conversation = \\core_message\\api::get_self_conversation($params['userid']);",
          "2088:         if ($conversation) {",
          "2089:             $conversation = \\core_message\\api::get_conversation(",
          "2090:                 $params['userid'],",
          "2091:                 $conversation->id,",
          "2092:                 false,",
          "2093:                 false,",
          "2094:                 0,",
          "2095:                 0,",
          "2096:                 $params['messagelimit'],",
          "2097:                 $params['messageoffset'],",
          "2098:                 $params['newestmessagesfirst']",
          "2099:             );",
          "2100:         }",
          "2102:         if ($conversation) {",
          "2103:             return $conversation;",
          "2104:         } else {",
          "2107:             throw new \\moodle_exception('errorconversationdoesnotexist', 'message');",
          "2108:         }",
          "2109:     }",
          "2116:     public static function get_self_conversation_returns() {",
          "2117:         return self::get_conversation_structure();",
          "2118:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4625:                             'Total number of individual conversations'),",
          "4626:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => new external_value(PARAM_INT,",
          "4627:                             'Total number of group conversations'),",
          "4628:                     ]",
          "4629:                 ),",
          "4630:             ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4720:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => new external_value(PARAM_INT,",
          "4721:                             'Total number of self conversations'),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4700:                             'Total number of unread individual conversations'),",
          "4701:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => new external_value(PARAM_INT,",
          "4702:                             'Total number of unread group conversations'),",
          "4703:                     ]",
          "4704:                 ),",
          "4705:             ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4797:                         \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => new external_value(PARAM_INT,",
          "4798:                             'Total number of unread self conversations'),",
          "",
          "---------------"
        ],
        "message/templates/message_drawer_view_conversation_body.mustache||message/templates/message_drawer_view_conversation_body.mustache": [
          "File: message/templates/message_drawer_view_conversation_body.mustache -> message/templates/message_drawer_view_conversation_body.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     style=\"overflow-y: auto; overflow-x: hidden\"",
          "44: >",
          "45:     <div class=\"position-relative h-100\" data-region=\"content-container\" style=\"overflow-y: auto; overflow-x: hidden\">",
          "46:         <div class=\"p-3 text-center hidden\" data-region=\"contact-request-sent-message-container\">",
          "47:             <p class=\"m-0\">{{#str}} contactrequestsent, core_message {{/str}}</p>",
          "48:             <p class=\"font-italic font-weight-light\" data-region=\"text\"></p>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         <div class=\"p-3 text-center hidden\" data-region=\"self-conversation-message-container\">",
          "47:             <p class=\"m-0\">{{#str}} selfconversation, core_message {{/str}}</p>",
          "48:             <p class=\"font-italic font-weight-light\" data-region=\"text\">{{#str}} selfconversationdefaultmessage, core_message {{/str}}</p>",
          "49:         </div>",
          "",
          "---------------"
        ],
        "message/templates/message_drawer_view_conversation_header_content_type_self.mustache||message/templates/message_drawer_view_conversation_header_content_type_self.mustache": [
          "File: message/templates/message_drawer_view_conversation_header_content_type_self.mustache -> message/templates/message_drawer_view_conversation_header_content_type_self.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     @template core_message/message_drawer_view_conversation_header_content_type_self",
          "20:     This template will render the header content of the conversation page in",
          "21:     the message message drawer.",
          "23:     Classes required for JS:",
          "26:     Data attributes required for JS:",
          "29:     Context variables required for this template:",
          "38:     Example context (json):",
          "39:     {}",
          "41: }}",
          "43: <div class=\"d-flex align-items-center\">",
          "44:     <div class=\"align-self-stretch\" >",
          "45:         <a class=\"h-100 mr-2 d-flex align-items-center\" href=\"#\" data-route-back>",
          "46:             {{> core_message/message_drawer_icon_back }}",
          "47:         </a>",
          "48:     </div>",
          "49:     <div class=\"d-flex text-truncate\">",
          "50:         {{#imageurl}}",
          "51:             <div class=\"d-flex align-items-center\">",
          "52:                 <img",
          "53:                     class=\"rounded-circle\"",
          "54:                     src=\"{{{.}}}\"",
          "55:                     alt=\"{{name}}\"",
          "56:                     aria-hidden=\"true\"",
          "57:                     style=\"height: 38px\"",
          "58:                 >",
          "59:             </div>",
          "60:         {{/imageurl}}",
          "61:         <div class=\"w-100 text-truncate ml-2\">",
          "62:             <div class=\"d-flex\">",
          "63:                 <strong class=\"m-0 text-truncate\">{{name}}</strong>",
          "64:                 <span class=\"{{^isfavourite}}hidden{{/isfavourite}} ml-1 text-primary\" data-region=\"favourite-icon-container\">",
          "65:                     {{#pix}} i/star-rating, core {{/pix}}",
          "66:                 </span>",
          "67:             </div>",
          "68:             {{#showonlinestatus}}",
          "69:                 <p class=\"m-0 font-weight-light text-truncate\">",
          "70:                     {{#str}} loggedin, core_message {{/str}}",
          "71:                 </p>",
          "72:             {{/showonlinestatus}}",
          "73:         </div>",
          "74:     </div>",
          "75:     <div class=\"ml-auto dropdown\">",
          "76:         <button class=\"btn btn-link btn-icon icon-size-3\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">",
          "77:             {{#pix}} i/moremenu, core {{/pix}}",
          "78:         </button>",
          "79:         <div class=\"dropdown-menu pull-right\">",
          "80:             <a class=\"dropdown-item {{#isfavourite}}hidden{{/isfavourite}} {{^showfavourite}}hidden{{/showfavourite}}\" href=\"#\" data-action=\"confirm-favourite\">",
          "81:                 {{#str}} addtofavourites, core_message {{/str}}",
          "82:             </a>",
          "83:             <a class=\"dropdown-item {{^isfavourite}}hidden{{/isfavourite}} {{^showfavourite}}hidden{{/showfavourite}}\" href=\"#\" data-action=\"confirm-unfavourite\">",
          "84:                 {{#str}} removefromfavourites, core_message {{/str}}",
          "85:             </a>",
          "86:             <a class=\"dropdown-item\" href=\"#\" data-action=\"request-delete-conversation\">",
          "87:                 {{#str}} deleteconversation, core_message {{/str}}",
          "88:             </a>",
          "89:         </div>",
          "90:     </div>",
          "91: </div>",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP, $noncontacts[3]->conversations[$gc1->id]->type);",
          "477:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:     public function test_message_search_users_self_conversations() {",
          "483:         $this->resetAfterTest();",
          "486:         $user1 = new stdClass();",
          "487:         $user1->firstname = 'User';",
          "488:         $user1->lastname = 'One';",
          "489:         $user1 = $this->getDataGenerator()->create_user($user1);",
          "490:         $user2 = new stdClass();",
          "491:         $user2->firstname = 'User';",
          "492:         $user2->lastname = 'Two';",
          "493:         $user2 = $this->getDataGenerator()->create_user($user2);",
          "496:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "497:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi myself!');",
          "500:         $this->setUser($user1);",
          "501:         $result = \\core_message\\api::message_search_users($user1->id, 'One');",
          "504:         $this->assertCount(0, $result[0]);",
          "505:         $this->assertCount(1, $result[1]);",
          "506:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "712:         $this->assertCount(0, \\core_message\\api::get_conversations_between_users($user6->id, $user1->id));",
          "713:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:     public function test_get_self_conversation() {",
          "749:         $user1 = new stdClass();",
          "750:         $user1->firstname = 'User';",
          "751:         $user1->lastname = 'One';",
          "752:         $user1 = self::getDataGenerator()->create_user($user1);",
          "754:         $user2 = new stdClass();",
          "755:         $user2->firstname = 'User';",
          "756:         $user2->lastname = 'Two';",
          "757:         $user2 = self::getDataGenerator()->create_user($user2);",
          "759:         $user3 = new stdClass();",
          "760:         $user3->firstname = 'User search';",
          "761:         $user3->lastname = 'Three';",
          "762:         $user3 = self::getDataGenerator()->create_user($user3);",
          "765:         \\core_message\\api::add_contact($user1->id, $user2->id);",
          "766:         \\core_message\\api::add_contact($user3->id, $user1->id);",
          "769:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "770:             array($user1->id, $user2->id));",
          "771:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "772:             array($user3->id, $user1->id));",
          "775:         $gc = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "776:             array($user1->id, $user2->id, $user3->id),",
          "777:             'Project chat');",
          "780:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "781:             array($user1->id));",
          "782:         $sc2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "783:             array($user2->id));",
          "786:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Message to myself!');",
          "788:         $rsc1 = \\core_message\\api::get_self_conversation($user1->id);",
          "789:         $rsc2 = \\core_message\\api::get_self_conversation($user2->id);",
          "790:         $rsc3 = \\core_message\\api::get_self_conversation($user3->id);",
          "793:         $this->assertEquals($sc1->id, $rsc1->id);",
          "794:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, $sc1->type);",
          "795:         $this->assertEquals($sc2->id, $rsc2->id);",
          "796:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, $sc2->type);",
          "797:         $this->assertFalse($rsc3);",
          "798:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "727:         $this->setUser($user1);",
          "730:         $gc = \\core_message\\api::create_conversation(",
          "731:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815:         $sc = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "736:         $time = 1;",
          "744:         $convid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "745:         $conv2id = \\core_message\\api::get_conversation_between_users([$user1->id, $user3->id]);",
          "",
          "[Removed Lines]",
          "737:         testhelper::send_fake_message_to_conversation($user1, $gc->id, 'My hero!', $time);",
          "738:         $this->send_fake_message($user3, $user1, 'Don\\'t block me.', 0, $time + 1);",
          "739:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 2);",
          "740:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 3);",
          "741:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 4);",
          "742:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 5);",
          "",
          "[Added Lines]",
          "825:         testhelper::send_fake_message_to_conversation($user1, $sc->id, 'Test message to self!', $time);",
          "826:         testhelper::send_fake_message_to_conversation($user1, $gc->id, 'My hero!', $time + 1);",
          "827:         $this->send_fake_message($user3, $user1, 'Don\\'t block me.', 0, $time + 2);",
          "828:         $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 3);",
          "829:         $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 4);",
          "830:         $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 5);",
          "831:         $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 6);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "751:         $messages = \\core_message\\api::search_messages($user1->id, 'o');",
          "756:         $message1 = $messages[0];",
          "757:         $message2 = $messages[1];",
          "758:         $message3 = $messages[2];",
          "759:         $message4 = $messages[3];",
          "761:         $this->assertEquals($user2->id, $message1->userid);",
          "762:         $this->assertEquals($user2->id, $message1->useridfrom);",
          "",
          "[Removed Lines]",
          "754:         $this->assertEquals(4, count($messages));",
          "",
          "[Added Lines]",
          "843:         $this->assertEquals(5, count($messages));",
          "848:         $message5 = $messages[4];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "805:         $this->assertTrue($message4->isread);",
          "806:         $this->assertNull($message4->unreadcount);",
          "807:         $this->assertEquals($gc->id, $message4->conversationid);",
          "808:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898:         $this->assertEquals($user1->id, $message5->userid);",
          "899:         $this->assertEquals($user1->id, $message5->useridfrom);",
          "900:         $this->assertEquals(fullname($user1), $message5->fullname);",
          "901:         $this->assertTrue($message5->ismessaging);",
          "902:         $this->assertEquals('Test message to self!', $message5->lastmessage);",
          "903:         $this->assertNotEmpty($message5->messageid);",
          "904:         $this->assertFalse($message5->isonline);",
          "905:         $this->assertTrue($message5->isread);",
          "906:         $this->assertFalse($message5->isblocked);",
          "907:         $this->assertNull($message5->unreadcount);",
          "908:         $this->assertEquals($sc->id, $message5->conversationid);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1431:     }",
          "1437:         global $DB;",
          "1440:         $user1 = self::getDataGenerator()->create_user();",
          "1450:         $member = array_pop($members);",
          "1451:         $this->assertEquals($user1->id, $member->userid);",
          "1456:     }",
          "",
          "[Removed Lines]",
          "1436:     public function test_get_conversations_legacy_self_conversations() {",
          "1441:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1442:             [$user1->id, $user1->id]);",
          "1443:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Test message to self!');",
          "1446:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "1447:         $this->assertCount(2, $members);",
          "1448:         $member = array_pop($members);",
          "1449:         $this->assertEquals($user1->id, $member->userid);",
          "1454:         $conversations = \\core_message\\api::get_conversations($user1->id);",
          "1455:         $this->assertCount(0, $conversations);",
          "",
          "[Added Lines]",
          "1537:     public function test_get_conversations_self_conversations() {",
          "1542:         $user2 = self::getDataGenerator()->create_user();",
          "1543:         $user3 = self::getDataGenerator()->create_user();",
          "1544:         $user4 = self::getDataGenerator()->create_user();",
          "1547:         $ic1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1548:             [$user1->id, $user2->id]);",
          "1549:         $ic2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1550:             [$user1->id, $user3->id]);",
          "1551:         testhelper::send_fake_message_to_conversation($user1, $ic1->id, 'Message from user1 to user2');",
          "1554:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "1555:         $sc4 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user4->id]);",
          "1556:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Test message to self 1!');",
          "1559:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $sc1->id]);",
          "1560:         $this->assertCount(1, $members);",
          "1565:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20, \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF);",
          "1566:         $this->assertCount(1, $conversations);",
          "1567:         $conversation = array_pop($conversations);",
          "1568:         $this->assertEquals($conversation->id, $sc1->id);",
          "1570:         $conversations = \\core_message\\api::get_conversations($user4->id);",
          "1572:         $this->assertCount(1, $conversations);",
          "1575:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20,",
          "1576:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL);",
          "1577:         $this->assertCount(1, $conversations);",
          "1580:         $conversations = \\core_message\\api::get_conversations($user1->id, 0, 20,",
          "1581:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, null, true);",
          "1582:         $this->assertCount(2, $conversations);",
          "1585:         $conversations = \\core_message\\api::get_conversations($user2->id, 0, 20,",
          "1586:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL);",
          "1587:         $this->assertCount(1, $conversations);",
          "1590:         $conversations = \\core_message\\api::get_conversations($user2->id, 0, 20,",
          "1591:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, null, true);",
          "1592:         $this->assertCount(1, $conversations);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3034:         $this->setUser($user1);",
          "3037:         $time = 1;",
          "3038:         $m1id = $this->send_fake_message($user1, $user2, 'Yo!', 0, $time + 1);",
          "3039:         $m2id = $this->send_fake_message($user2, $user1, 'Sup mang?', 0, $time + 2);",
          "3040:         $m3id = $this->send_fake_message($user1, $user2, 'Writing PHPUnit tests!', 0, $time + 3);",
          "3041:         $m4id = $this->send_fake_message($user2, $user1, 'Word.', 0, $time + 4);",
          "3044:         $conversationid = \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]);",
          "3045:         \\core_message\\api::delete_conversation_by_id($user1->id, $conversationid);",
          "3047:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3174:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "3175:         $sc2 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user2->id]);",
          "3183:         $m5id = testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi to myself!', $time + 5);",
          "3184:         $m6id = testhelper::send_fake_message_to_conversation($user2, $sc2->id, 'I am talking with myself', $time + 6);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3069:         $this->assertEquals($user1->id, $mua4->userid);",
          "3070:         $this->assertEquals($m4id, $mua4->messageid);",
          "3071:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua4->action);",
          "3072:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3218:         \\core_message\\api::delete_conversation_by_id($user1->id, $sc1->id);",
          "3220:         $muas = $DB->get_records('message_user_actions', array(), 'timecreated ASC');",
          "3221:         $this->assertCount(5, $muas);",
          "3224:         ksort($muas);",
          "3226:         $mua1 = array_shift($muas);",
          "3227:         $mua2 = array_shift($muas);",
          "3228:         $mua3 = array_shift($muas);",
          "3229:         $mua4 = array_shift($muas);",
          "3230:         $mua5 = array_shift($muas);",
          "3233:         $this->assertEquals($user1->id, $mua5->userid);",
          "3234:         $this->assertEquals($m5id, $mua5->messageid);",
          "3235:         $this->assertEquals(\\core_message\\api::MESSAGE_ACTION_DELETED, $mua5->action);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3386:             ]",
          "3387:         );",
          "3390:         $this->assertTrue(\\core_message\\api::can_send_message_to_conversation($user1->id, $gc1->id));",
          "3394:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user1->id, $ic1->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3554:         $sc1 = \\core_message\\api::create_conversation(",
          "3555:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3556:             [$user1->id]",
          "3557:         );",
          "3563:         $this->assertTrue(\\core_message\\api::can_send_message_to_conversation($user1->id, $sc1->id));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3538:             ]",
          "3539:         );",
          "3542:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $gc1->id));",
          "3543:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $ic1->id));",
          "3544:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3715:         $sc1 = \\core_message\\api::create_conversation(",
          "3716:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "3717:             [$user1->id]",
          "3718:         );",
          "3723:         $this->assertFalse(\\core_message\\api::can_send_message_to_conversation($user4->id, $sc1->id));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5776:         $this->assertEquals($user3->id, $request1->requesteduserid);",
          "5777:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5962:     public function test_get_conversation_members_with_self_conversation() {",
          "5963:         $lastaccess = new stdClass();",
          "5964:         $lastaccess->lastaccess = time();",
          "5966:         $user1 = self::getDataGenerator()->create_user($lastaccess);",
          "5968:         $selfconversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "5969:             [$user1->id]);",
          "5970:         testhelper::send_fake_message_to_conversation($user1, $selfconversation->id, 'This is a self-message!');",
          "5973:         $members = \\core_message\\api::get_conversation_members($user1->id, $selfconversation->id);",
          "5974:         $this->assertCount(1, $members);",
          "5976:         $member1 = array_shift($members);",
          "5979:         $this->assertEquals($user1->id, $member1->id);",
          "5980:         $this->assertEquals(fullname($user1), $member1->fullname);",
          "5981:         $this->assertEquals(true, $member1->isonline);",
          "5982:         $this->assertEquals(true, $member1->showonlinestatus);",
          "5983:         $this->assertEquals(false, $member1->iscontact);",
          "5984:         $this->assertEquals(false, $member1->isblocked);",
          "5985:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5948:     public function test_get_conversation_counts_test_cases() {",
          "5949:         $typeindividual = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL;",
          "5950:         $typegroup = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP;",
          "5951:         list($user1, $user2, $user3, $user4, $user5, $user6, $user7, $user8) = [0, 1, 2, 3, 4, 5, 6, 7];",
          "5952:         $conversations = [",
          "5953:             [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6159:         $typeself = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5986:                 'enabled' => false",
          "5987:             ],",
          "5988:             [",
          "5992:                 'favourites' => [],",
          "5994:             ],",
          "5995:         ];",
          "",
          "[Removed Lines]",
          "5989:                 'type' => $typeindividual,",
          "5990:                 'users' => [$user8, $user8],",
          "5991:                 'messages' => [$user8, $user8],",
          "5993:                 'enabled' => null // Individual conversations cannot be disabled.",
          "",
          "[Added Lines]",
          "6198:                 'type' => $typeself,",
          "6199:                 'users' => [$user8],",
          "6200:                 'messages' => [$user8],",
          "6202:                 'enabled' => null // Self-conversations cannot be disabled.",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6002:                 'arguments' => [$user5],",
          "6003:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6004:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6006:                 ]],",
          "6007:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6008:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6010:                 ]],",
          "6011:                 'deletedusers' => []",
          "6012:             ],",
          "",
          "[Removed Lines]",
          "6005:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6009:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6214:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6215:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6219:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6220:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6017:                 'arguments' => [$user4],",
          "6018:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6019:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6021:                 ]],",
          "6022:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6023:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6025:                 ]],",
          "6026:                 'deletedusers' => []",
          "6027:             ],",
          "",
          "[Removed Lines]",
          "6020:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6024:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6231:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6232:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6236:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6237:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6032:                 'arguments' => [$user1],",
          "6033:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6034:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6036:                 ]],",
          "6037:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6038:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6040:                 ]],",
          "6041:                 'deletedusers' => []",
          "6042:             ],",
          "",
          "[Removed Lines]",
          "6035:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6039:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6248:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6249:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6253:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6254:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6047:                 'arguments' => [$user2],",
          "6048:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6049:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6051:                 ]],",
          "6052:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6053:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6055:                 ]],",
          "6056:                 'deletedusers' => []",
          "6057:             ],",
          "",
          "[Removed Lines]",
          "6050:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6054:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6265:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6266:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6270:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6271:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6062:                 'arguments' => [$user4],",
          "6063:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6064:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6066:                 ]],",
          "6067:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6068:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6070:                 ]],",
          "6071:                 'deletedusers' => []",
          "6072:             ],",
          "",
          "[Removed Lines]",
          "6065:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6069:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6282:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6283:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6287:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6288:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6077:                 'arguments' => [$user1],",
          "6078:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6079:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6081:                 ]],",
          "6082:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6083:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6085:                 ]],",
          "6086:                 'deletedusers' => []",
          "6087:             ],",
          "",
          "[Removed Lines]",
          "6080:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6084:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6299:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6300:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6304:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6305:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6092:                 'arguments' => [$user1],",
          "6093:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6094:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6096:                 ]],",
          "6097:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6098:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6100:                 ]],",
          "6101:                 'deletedusers' => []",
          "6102:             ],",
          "",
          "[Removed Lines]",
          "6095:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6099:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6316:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6317:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6321:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6322:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6107:                 'arguments' => [$user1],",
          "6108:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6109:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6111:                 ]],",
          "6112:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6113:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6115:                 ]],",
          "6116:                 'deletedusers' => []",
          "6117:             ],",
          "",
          "[Removed Lines]",
          "6110:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6114:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6333:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6334:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6338:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6339:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6122:                 'arguments' => [$user1],",
          "6123:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6124:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6126:                 ]],",
          "6127:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6128:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6130:                 ]],",
          "6131:                 'deletedusers' => []",
          "6132:             ],",
          "",
          "[Removed Lines]",
          "6125:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6129:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6350:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6351:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6355:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6356:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "6137:                 'arguments' => [$user2],",
          "6138:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6139:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6141:                 ]],",
          "6142:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6143:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6145:                 ]],",
          "6146:                 'deletedusers' => []",
          "6147:             ],",
          "",
          "[Removed Lines]",
          "6140:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6144:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6367:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6368:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6372:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6373:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "6152:                 'arguments' => [$user3],",
          "6153:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6154:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6156:                 ]],",
          "6157:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6158:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6160:                 ]],",
          "6161:                 'deletedusers' => []",
          "6162:             ],",
          "",
          "[Removed Lines]",
          "6155:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6159:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6384:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6385:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6389:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6390:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6167:                 'arguments' => [$user1],",
          "6168:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6169:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6171:                 ]],",
          "6172:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6173:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6175:                 ]],",
          "6176:                 'deletedusers' => []",
          "6177:             ],",
          "",
          "[Removed Lines]",
          "6170:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6174:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6401:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6402:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6406:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6407:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6182:                 'arguments' => [$user1],",
          "6183:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6184:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6186:                 ]],",
          "6187:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6188:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6190:                 ]],",
          "6191:                 'deletedusers' => []",
          "6192:             ],",
          "",
          "[Removed Lines]",
          "6185:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6189:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6418:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6419:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6423:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6424:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6197:                 'arguments' => [$user1],",
          "6198:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6199:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6201:                 ]],",
          "6202:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6203:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6205:                 ]],",
          "6206:                 'deletedusers' => [$user2]",
          "6207:             ],",
          "",
          "[Removed Lines]",
          "6200:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6204:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6435:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6436:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6440:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6441:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6212:                 'arguments' => [$user1],",
          "6213:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6214:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6216:                 ]],",
          "6217:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6218:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6220:                 ]],",
          "6221:                 'deletedusers' => [$user2, $user3, $user4]",
          "6222:             ],",
          "",
          "[Removed Lines]",
          "6215:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6219:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6452:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6453:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6457:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6458:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6227:                 'arguments' => [$user6],",
          "6228:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6229:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6231:                 ]],",
          "6232:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6233:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6235:                 ]],",
          "6236:                 'deletedusers' => []",
          "6237:             ],",
          "",
          "[Removed Lines]",
          "6230:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6234:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6469:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6470:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6474:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6475:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6242:                 'arguments' => [$user7],",
          "6243:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6244:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6246:                 ]],",
          "6247:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6248:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6250:                 ]],",
          "6251:                 'deletedusers' => []",
          "6252:             ],",
          "",
          "[Removed Lines]",
          "6245:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6249:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6486:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6487:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6491:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6492:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6257:                 'arguments' => [$user8],",
          "6258:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6259:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6261:                 ]],",
          "6262:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6263:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6265:                 ]],",
          "6266:                 'deletedusers' => []",
          "6267:             ],",
          "",
          "[Removed Lines]",
          "6260:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6264:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6503:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6504:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 1",
          "6508:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6509:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6347:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6348:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6349:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6350:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6595:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "6596:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6459:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6460:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6461:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6462:     }",
          "6464:     public function test_delete_all_conversation_data() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6709:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "6710:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2719:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP, $noncontacts[3]['conversations'][0]['type']);",
          "2720:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2725:     public function test_message_search_users_self_conversations() {",
          "2726:         $this->resetAfterTest();",
          "2729:         $user1 = new stdClass();",
          "2730:         $user1->firstname = 'User';",
          "2731:         $user1->lastname = 'One';",
          "2732:         $user1 = $this->getDataGenerator()->create_user($user1);",
          "2733:         $user2 = new stdClass();",
          "2734:         $user2->firstname = 'User';",
          "2735:         $user2->lastname = 'Two';",
          "2736:         $user2 = $this->getDataGenerator()->create_user($user2);",
          "2739:         $sc1 = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$user1->id]);",
          "2740:         testhelper::send_fake_message_to_conversation($user1, $sc1->id, 'Hi myself!');",
          "2743:         $this->setUser($user1);",
          "2744:         $result = core_message_external::message_search_users($user1->id, 'One');",
          "2745:         $result = external_api::clean_returnvalue(core_message_external::message_search_users_returns(), $result);",
          "2748:         $this->assertCount(0, $result['contacts']);",
          "2749:         $this->assertCount(1, $result['noncontacts']);",
          "2750:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5496:     }",
          "5502:         global $DB;",
          "5503:         $this->resetAfterTest();",
          "5506:         $user1 = self::getDataGenerator()->create_user();",
          "5509:         testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'Test message to self!');",
          "5512:         $members = $DB->get_records('message_conversation_members', ['conversationid' => $conversation->id]);",
          "5516:         $member = array_pop($members);",
          "5517:         $this->assertEquals($user1->id, $member->userid);",
          "5520:         $this->setUser($user1);",
          "5521:         $result = core_message_external::get_conversations($user1->id, 0, 20);",
          "5522:         $result = external_api::clean_returnvalue(core_message_external::get_conversations_returns(), $result);",
          "5523:         $conversations = $result['conversations'];",
          "5525:     }",
          "",
          "[Removed Lines]",
          "5501:     public function test_get_conversations_legacy_self_conversations() {",
          "5507:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5508:             [$user1->id, $user1->id]);",
          "5513:         $this->assertCount(2, $members);",
          "5514:         $member = array_pop($members);",
          "5515:         $this->assertEquals($user1->id, $member->userid);",
          "5524:         $this->assertCount(0, $conversations);",
          "",
          "[Added Lines]",
          "5531:     public function test_get_conversations_self_conversations() {",
          "5537:         $conversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "5538:             [$user1->id]);",
          "5543:         $this->assertCount(1, $members);",
          "5552:         $this->assertCount(1, $conversations);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6531:     public function test_get_conversation_counts_test_cases() {",
          "6532:         $typeindividual = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL;",
          "6533:         $typegroup = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP;",
          "6534:         list($user1, $user2, $user3, $user4, $user5, $user6, $user7, $user8) = [0, 1, 2, 3, 4, 5, 6, 7];",
          "6535:         $conversations = [",
          "6536:             [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6562:         $typeself = \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6569:                 'enabled' => false",
          "6570:             ],",
          "6571:             [",
          "6575:                 'favourites' => [],",
          "6576:                 'enabled' => null // Individual conversations cannot be disabled.",
          "6577:             ],",
          "",
          "[Removed Lines]",
          "6572:                 'type' => $typeindividual,",
          "6573:                 'users' => [$user8, $user8],",
          "6574:                 'messages' => [$user8, $user8],",
          "",
          "[Added Lines]",
          "6601:                 'type' => $typeself,",
          "6602:                 'users' => [$user8],",
          "6603:                 'messages' => [$user8],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6585:                 'arguments' => [$user5],",
          "6586:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6587:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6589:                 ]],",
          "6590:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6591:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6593:                 ]],",
          "6594:                 'deletedusers' => []",
          "6595:             ],",
          "",
          "[Removed Lines]",
          "6588:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6592:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6617:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6618:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6622:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6623:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6600:                 'arguments' => [$user4],",
          "6601:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6602:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6604:                 ]],",
          "6605:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6606:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6608:                 ]],",
          "6609:                 'deletedusers' => []",
          "6610:             ],",
          "",
          "[Removed Lines]",
          "6603:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6607:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6634:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6635:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6639:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6640:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6615:                 'arguments' => [$user1],",
          "6616:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6617:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6619:                 ]],",
          "6620:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6621:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6623:                 ]],",
          "6624:                 'deletedusers' => []",
          "6625:             ],",
          "",
          "[Removed Lines]",
          "6618:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6622:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6651:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6652:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6656:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6657:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6630:                 'arguments' => [$user2],",
          "6631:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6632:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6634:                 ]],",
          "6635:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6636:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6638:                 ]],",
          "6639:                 'deletedusers' => []",
          "6640:             ],",
          "",
          "[Removed Lines]",
          "6633:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6637:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6668:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6669:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6673:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6674:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6645:                 'arguments' => [$user4],",
          "6646:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6647:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6649:                 ]],",
          "6650:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6651:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6653:                 ]],",
          "6654:                 'deletedusers' => []",
          "6655:             ],",
          "",
          "[Removed Lines]",
          "6648:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6652:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6685:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6686:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6690:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6691:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6660:                 'arguments' => [$user1],",
          "6661:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6662:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6664:                 ]],",
          "6665:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6666:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6668:                 ]],",
          "6669:                 'deletedusers' => []",
          "6670:             ],",
          "",
          "[Removed Lines]",
          "6663:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6667:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6702:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6703:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6707:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6708:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6675:                 'arguments' => [$user1],",
          "6676:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6677:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6679:                 ]],",
          "6680:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6681:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6683:                 ]],",
          "6684:                 'deletedusers' => []",
          "6685:             ],",
          "",
          "[Removed Lines]",
          "6678:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6682:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6719:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6720:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6724:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6725:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6690:                 'arguments' => [$user1],",
          "6691:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6692:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6694:                 ]],",
          "6695:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6696:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6698:                 ]],",
          "6699:                 'deletedusers' => []",
          "6700:             ],",
          "",
          "[Removed Lines]",
          "6693:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6697:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6736:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6737:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6741:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6742:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6705:                 'arguments' => [$user1],",
          "6706:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6707:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6709:                 ]],",
          "6710:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6711:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6713:                 ]],",
          "6714:                 'deletedusers' => []",
          "6715:             ],",
          "",
          "[Removed Lines]",
          "6708:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6712:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6753:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6754:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6758:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6759:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6720:                 'arguments' => [$user2],",
          "6721:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6722:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6724:                 ]],",
          "6725:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6726:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6728:                 ]],",
          "6729:                 'deletedusers' => []",
          "6730:             ],",
          "",
          "[Removed Lines]",
          "6723:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6727:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6770:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6771:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6775:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6776:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6735:                 'arguments' => [$user3],",
          "6736:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6737:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6739:                 ]],",
          "6740:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6741:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6743:                 ]],",
          "6744:                 'deletedusers' => []",
          "6745:             ],",
          "",
          "[Removed Lines]",
          "6738:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "6742:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2",
          "",
          "[Added Lines]",
          "6787:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6788:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6792:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 2,",
          "6793:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6750:                 'arguments' => [$user1],",
          "6751:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6752:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6754:                 ]],",
          "6755:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6756:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6758:                 ]],",
          "6759:                 'deletedusers' => []",
          "6760:             ],",
          "",
          "[Removed Lines]",
          "6753:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6757:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6804:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6805:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6809:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6810:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6765:                 'arguments' => [$user1],",
          "6766:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6767:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6769:                 ]],",
          "6770:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6771:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6773:                 ]],",
          "6774:                 'deletedusers' => []",
          "6775:             ],",
          "",
          "[Removed Lines]",
          "6768:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6772:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6821:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6822:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6826:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6827:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6780:                 'arguments' => [$user1],",
          "6781:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6782:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6784:                 ]],",
          "6785:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6786:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6788:                 ]],",
          "6789:                 'deletedusers' => [$user2]",
          "6790:             ],",
          "",
          "[Removed Lines]",
          "6783:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6787:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6838:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6839:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6843:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6844:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6795:                 'arguments' => [$user1],",
          "6796:                 'expectedcounts' => ['favourites' => 1, 'types' => [",
          "6797:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6799:                 ]],",
          "6800:                 'expectedunreadcounts' => ['favourites' => 1, 'types' => [",
          "6801:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 1,",
          "6803:                 ]],",
          "6804:                 'deletedusers' => [$user2, $user3, $user4]",
          "6805:             ],",
          "",
          "[Removed Lines]",
          "6798:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "6802:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1",
          "",
          "[Added Lines]",
          "6855:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6856:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6860:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 1,",
          "6861:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6810:                 'arguments' => [$user6],",
          "6811:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6812:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6814:                 ]],",
          "6815:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6816:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6818:                 ]],",
          "6819:                 'deletedusers' => []",
          "6820:             ],",
          "",
          "[Removed Lines]",
          "6813:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6817:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6872:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6873:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6877:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6878:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6825:                 'arguments' => [$user7],",
          "6826:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6827:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6829:                 ]],",
          "6830:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6831:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6833:                 ]],",
          "6834:                 'deletedusers' => []",
          "6835:             ],",
          "",
          "[Removed Lines]",
          "6828:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6832:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6889:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6890:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "6894:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6895:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "6840:                 'arguments' => [$user8],",
          "6841:                 'expectedcounts' => ['favourites' => 0, 'types' => [",
          "6842:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6844:                 ]],",
          "6845:                 'expectedunreadcounts' => ['favourites' => 0, 'types' => [",
          "6846:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL => 0,",
          "6848:                 ]],",
          "6849:                 'deletedusers' => []",
          "6850:             ],",
          "",
          "[Removed Lines]",
          "6843:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "6847:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0",
          "",
          "[Added Lines]",
          "6906:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6907:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 1",
          "6911:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP => 0,",
          "6912:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF => 0",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "6933:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "6934:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "6935:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "6936:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7001:         $this->assertEquals($expectedcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "7002:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7017:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL]);",
          "7018:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP],",
          "7019:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP]);",
          "7020:     }",
          "7021: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7087:         $this->assertEquals($expectedunreadcounts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF],",
          "7088:             $counts['types'][\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF]);",
          "",
          "---------------"
        ],
        "message/tests/messagelib_test.php||message/tests/messagelib_test.php": [
          "File: message/tests/messagelib_test.php -> message/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:             return $DB->insert_record('notifications', $record);",
          "88:         }",
          "91:             $conversation = \\core_message\\api::create_conversation(",
          "92:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "93:                 [",
          "",
          "[Removed Lines]",
          "90:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "",
          "[Added Lines]",
          "90:         if ($userfrom->id == $userto->id) {",
          "92:             $conversation = \\core_message\\api::get_self_conversation($userfrom->id);",
          "93:             if (empty($conversation)) {",
          "94:                 $conversation = \\core_message\\api::create_conversation(",
          "95:                     \\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF,",
          "96:                     [$userfrom->id]",
          "97:                 );",
          "98:             }",
          "99:             $conversationid = $conversation->id;",
          "100:         } else if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "",
          "---------------"
        ],
        "user/lib.php||user/lib.php": [
          "File: user/lib.php -> user/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         \\core\\event\\user_created::create_from_userid($newuserid)->trigger();",
          "127:     }",
          "130:     $presignupcache = \\cache::make('core', 'presignup');",
          "131:     $presignupcache->purge_current_user();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     $selfconversation = \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_SELF, [$newuserid]);",
          "131:     \\core_message\\api::set_favourite_conversation($selfconversation->id, $newuserid);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019041300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019041300.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cb94eabb42d5d12a714547a823799a730aac0b8",
      "candidate_info": {
        "commit_hash": "1cb94eabb42d5d12a714547a823799a730aac0b8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1cb94eabb42d5d12a714547a823799a730aac0b8",
        "files": [
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-63658 core_favourites: add tables to the subsystem",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2524:         upgrade_main_savepoint(true, 2018092800.03);",
          "2525:     }",
          "2527:     return true;",
          "2528: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2527:     if ($oldversion < 2018101600.01) {",
          "2529:         $table = new xmldb_table('favourite');",
          "2532:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "2533:         $table->add_field('component', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2534:         $table->add_field('itemtype', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "2535:         $table->add_field('itemid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2536:         $table->add_field('contextid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2537:         $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2538:         $table->add_field('ordering', XMLDB_TYPE_INTEGER, 10, null, null, null, null);",
          "2539:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2540:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "2543:         $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));",
          "2544:         $table->add_key('contextid', XMLDB_KEY_FOREIGN, array('contextid'), 'context', array('id'));",
          "2545:         $table->add_key('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));",
          "2548:         if (!$dbman->table_exists($table)) {",
          "2549:             $dbman->create_table($table);",
          "2550:         }",
          "2553:         $index = new xmldb_index('uniqueuserfavouriteitem', XMLDB_INDEX_UNIQUE,",
          "2554:             ['component', 'itemtype', 'itemid', 'contextid', 'userid']);",
          "2556:         if (!$dbman->index_exists($table, $index)) {",
          "2557:             $dbman->add_index($table, $index);",
          "2558:         }",
          "2561:         upgrade_main_savepoint(true, 2018101600.01);",
          "2562:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018101600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}