{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e21a912e8168f2af541f47218ab12623c5f79d97",
      "candidate_info": {
        "commit_hash": "e21a912e8168f2af541f47218ab12623c5f79d97",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/e21a912e8168f2af541f47218ab12623c5f79d97",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java"
        ],
        "message": "PDFBOX-5041: calculate Capheight/Descent for missing font descriptor; avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884334 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.awt.geom.AffineTransform;",
          "20: import java.awt.geom.Point2D;",
          "21: import java.io.ByteArrayOutputStream;",
          "22: import java.io.IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.geom.GeneralPath;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import java.util.List;",
          "26: import org.apache.commons.logging.Log;",
          "27: import org.apache.commons.logging.LogFactory;",
          "28: import org.apache.pdfbox.contentstream.operator.Operator;",
          "29: import org.apache.pdfbox.cos.COSName;",
          "30: import org.apache.pdfbox.cos.COSString;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.fontbox.util.BoundingBox;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "35: import org.apache.pdfbox.pdmodel.common.PDRectangle;",
          "36: import org.apache.pdfbox.pdmodel.font.PDFont;",
          "37: import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
          "38: import org.apache.pdfbox.pdmodel.interactive.action.PDActionJavaScript;",
          "39: import org.apache.pdfbox.pdmodel.interactive.action.PDFormFieldAdditionalActions;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.pdfbox.pdmodel.font.PDSimpleFont;",
          "40: import org.apache.pdfbox.pdmodel.font.PDType3CharProc;",
          "41: import org.apache.pdfbox.pdmodel.font.PDType3Font;",
          "42: import org.apache.pdfbox.pdmodel.font.PDVectorFont;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:     private static final Log LOG = LogFactory.getLog(AppearanceGeneratorHelper.class);",
          "58:     private static final Operator BMC = Operator.getOperator(\"BMC\");",
          "59:     private static final Operator EMC = Operator.getOperator(\"EMC\");",
          "61:     private final PDVariableText field;",
          "63:     private PDDefaultAppearanceString defaultAppearance;",
          "64:     private String value;",
          "78:     private static final int FONTSCALE = 1000;",
          "",
          "[Removed Lines]",
          "54: class AppearanceGeneratorHelper",
          "55: {",
          "73:     private static final float[] HIGHLIGHT_COLOR = {153/255f, 193/255f, 215/255f};",
          "",
          "[Added Lines]",
          "60: class AppearanceGeneratorHelper {",
          "80:     private static final float[] HIGHLIGHT_COLOR = { 153 / 255f, 193 / 255f, 215 / 255f };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:     private static final float MINIMUM_FONT_SIZE = 4;",
          "89:     private static final float MAXIMUM_FONT_SIZE = 300;",
          "94:     private static final float DEFAULT_PADDING = 0.5f;",
          "104:         this.field = field;",
          "105:         validateAndEnsureAcroFormResources();",
          "109:             this.defaultAppearance = field.getDefaultAppearanceString();",
          "116:         }",
          "117:     }",
          "130:             return;",
          "131:         }",
          "133:         PDResources acroFormResources = field.getAcroForm().getDefaultResources();",
          "139:                 PDResources widgetResources = widget.getNormalAppearanceStream().getResources();",
          "146:                             LOG.debug(\"Adding font resource \" + fontResourceName + \" from widget to AcroForm\");",
          "147:                             acroFormResources.put(fontResourceName, widgetResources.getFont(fontResourceName));",
          "148:                         }",
          "152:                         LOG.warn(\"Unable to match field level font with AcroForm font\");",
          "153:                     }",
          "154:                 }",
          "155:             }",
          "156:         }",
          "157:     }",
          "167:         value = getFormattedValue(apValue);",
          "177:             value = apValue.replaceAll(\"\\\\u000D\\\\u000A|[\\\\u000A\\\\u000B\\\\u000C\\\\u000D\\\\u0085\\\\u2028\\\\u2029]\", \" \");",
          "178:         }",
          "184:             PDDefaultAppearanceString acroFormAppearance = defaultAppearance;",
          "188:                 defaultAppearance = getWidgetDefaultAppearanceString(widget);",
          "189:             }",
          "191:             PDRectangle rect = widget.getRectangle();",
          "194:                 widget.getCOSObject().removeItem(COSName.AP);",
          "196:                 continue;",
          "197:             }",
          "199:             PDAppearanceDictionary appearanceDict = widget.getAppearance();",
          "202:                 appearanceDict = new PDAppearanceDictionary();",
          "203:                 widget.setAppearance(appearanceDict);",
          "204:             }",
          "206:             PDAppearanceEntry appearance = appearanceDict.getNormalAppearance();",
          "209:             PDAppearanceStream appearanceStream;",
          "212:                 appearanceStream = appearance.getAppearanceStream();",
          "216:                 appearanceStream = prepareNormalAppearanceStream(widget);",
          "217:                 appearanceDict.setNormalAppearance(appearanceStream);",
          "219:             }",
          "229:                 initializeAppearanceContent(widget, appearanceStream);",
          "230:             }",
          "232:             setAppearanceContent(widget, appearanceStream);",
          "236:         }",
          "237:     }",
          "243:         PDFormFieldAdditionalActions actions = field.getActions();",
          "249:                 ScriptingHandler scriptingHandler = field.getAcroForm().getScriptingHandler();",
          "250:                 return scriptingHandler.format((PDActionJavaScript) field.getActions().getF(), apValue);",
          "255:                 return apValue;",
          "256:             }",
          "257:         }",
          "258:         return apValue;",
          "259:     }",
          "265:             return false;",
          "266:         }",
          "269:             return false;",
          "270:         }",
          "271:         PDRectangle bbox = appearance.getAppearanceStream().getBBox();",
          "274:             return false;",
          "275:         }",
          "276:         return Math.abs(bbox.getWidth()) > 0 && Math.abs(bbox.getHeight()) > 0;",
          "277:     }",
          "281:         PDAppearanceStream appearanceStream = new PDAppearanceStream(field.getAcroForm().getDocument());",
          "",
          "[Removed Lines]",
          "102:     AppearanceGeneratorHelper(PDVariableText field) throws IOException",
          "103:     {",
          "107:         try",
          "108:         {",
          "110:         }",
          "111:         catch (IOException ex)",
          "112:         {",
          "113:             throw new IOException(\"Could not process default appearance string '\" +",
          "114:                                    field.getDefaultAppearance() + \"' for field '\" +",
          "115:                                    field.getFullyQualifiedName() + \"'\", ex);",
          "123:     private void validateAndEnsureAcroFormResources()",
          "124:     {",
          "128:         if (field.getAcroForm().getDefaultResources() == null)",
          "129:         {",
          "135:         for (PDAnnotationWidget widget : field.getWidgets())",
          "136:         {",
          "137:             if (widget.getNormalAppearanceStream() != null && widget.getNormalAppearanceStream().getResources() != null)",
          "138:             {",
          "140:                 for (COSName fontResourceName : widgetResources.getFontNames())",
          "141:                 {",
          "142:                     try",
          "143:                     {",
          "144:                         if (acroFormResources.getFont(fontResourceName) == null)",
          "145:                         {",
          "149:                     }",
          "150:                     catch (IOException e)",
          "151:                     {",
          "165:     public void setAppearanceValue(String apValue) throws IOException",
          "166:     {",
          "175:         if (field instanceof PDTextField && !((PDTextField) field).isMultiline())",
          "176:         {",
          "180:         for (PDAnnotationWidget widget : field.getWidgets())",
          "181:         {",
          "186:             if (widget.getCOSObject().getDictionaryObject(COSName.DA) != null)",
          "187:             {",
          "192:             if (rect == null)",
          "193:             {",
          "195:                 LOG.warn(\"widget of field \" + field.getFullyQualifiedName() + \" has no rectangle, no appearance stream created\");",
          "200:             if (appearanceDict == null)",
          "201:             {",
          "210:             if (isValidAppearanceStream(appearance))",
          "211:             {",
          "213:             }",
          "214:             else",
          "215:             {",
          "227:             if (widget.getAppearanceCharacteristics() != null || appearanceStream.getContentStream().getLength() == 0)",
          "228:             {",
          "235:             defaultAppearance =  acroFormAppearance;",
          "239:     private String getFormattedValue(String apValue)",
          "240:     {",
          "245:         if (actions != null && actions.getF() != null)",
          "246:         {",
          "247:             if (field.getAcroForm().getScriptingHandler() != null)",
          "248:             {",
          "251:             }",
          "252:             else",
          "253:             {",
          "254:                 LOG.info(\"Field contains a formatting action but no SriptingHandler has been supplied - formatted value might be incorrect\");",
          "261:     private static boolean isValidAppearanceStream(PDAppearanceEntry appearance)",
          "262:     {",
          "263:         if (appearance == null)",
          "264:         {",
          "267:         if (!appearance.isStream())",
          "268:         {",
          "272:         if (bbox == null)",
          "273:         {",
          "279:     private PDAppearanceStream prepareNormalAppearanceStream(PDAnnotationWidget widget)",
          "280:     {",
          "",
          "[Added Lines]",
          "109:     AppearanceGeneratorHelper(PDVariableText field) throws IOException {",
          "113:         try {",
          "115:         } catch (IOException ex) {",
          "116:             throw new IOException(\"Could not process default appearance string '\" + field.getDefaultAppearance()",
          "117:                     + \"' for field '\" + field.getFullyQualifiedName() + \"'\", ex);",
          "125:     private void validateAndEnsureAcroFormResources() {",
          "129:         if (field.getAcroForm().getDefaultResources() == null) {",
          "135:         for (PDAnnotationWidget widget : field.getWidgets()) {",
          "136:             if (widget.getNormalAppearanceStream() != null",
          "137:                     && widget.getNormalAppearanceStream().getResources() != null) {",
          "139:                 for (COSName fontResourceName : widgetResources.getFontNames()) {",
          "140:                     try {",
          "141:                         if (acroFormResources.getFont(fontResourceName) == null) {",
          "145:                     } catch (IOException e) {",
          "159:     public void setAppearanceValue(String apValue) throws IOException {",
          "168:         if (field instanceof PDTextField && !((PDTextField) field).isMultiline()) {",
          "172:         for (PDAnnotationWidget widget : field.getWidgets()) {",
          "177:             if (widget.getCOSObject().getDictionaryObject(COSName.DA) != null) {",
          "182:             if (rect == null) {",
          "184:                 LOG.warn(\"widget of field \" + field.getFullyQualifiedName()",
          "185:                         + \" has no rectangle, no appearance stream created\");",
          "190:             if (appearanceDict == null) {",
          "199:             if (isValidAppearanceStream(appearance)) {",
          "201:             } else {",
          "214:             if (widget.getAppearanceCharacteristics() != null || appearanceStream.getContentStream().getLength() == 0) {",
          "221:             defaultAppearance = acroFormAppearance;",
          "225:     private String getFormattedValue(String apValue) {",
          "231:         if (actions != null && actions.getF() != null) {",
          "232:             if (field.getAcroForm().getScriptingHandler() != null) {",
          "235:             } else {",
          "236:                 LOG.info(",
          "237:                         \"Field contains a formatting action but no SriptingHandler has been supplied - formatted value might be incorrect\");",
          "244:     private static boolean isValidAppearanceStream(PDAppearanceEntry appearance) {",
          "245:         if (appearance == null) {",
          "248:         if (!appearance.isStream()) {",
          "252:         if (bbox == null) {",
          "258:     private PDAppearanceStream prepareNormalAppearanceStream(PDAnnotationWidget widget) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "291:         appearanceStream.setBBox(bbox);",
          "293:         AffineTransform at = calculateMatrix(bbox, rotation);",
          "296:             appearanceStream.setMatrix(at);",
          "297:         }",
          "298:         appearanceStream.setFormType(1);",
          "",
          "[Removed Lines]",
          "294:         if (!at.isIdentity())",
          "295:         {",
          "",
          "[Added Lines]",
          "272:         if (!at.isIdentity()) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "300:         return appearanceStream;",
          "301:     }",
          "305:         COSString da = (COSString) widget.getCOSObject().getDictionaryObject(COSName.DA);",
          "306:         PDResources dr = field.getAcroForm().getDefaultResources();",
          "307:         return new PDDefaultAppearanceString(da, dr);",
          "308:     }",
          "316:             return characteristicsDictionary.getRotation();",
          "317:         }",
          "318:         return 0;",
          "319:     }",
          "334:         ByteArrayOutputStream output = new ByteArrayOutputStream();",
          "337:         PDAppearanceCharacteristicsDictionary appearanceCharacteristics = widget.getAppearanceCharacteristics();",
          "342:             PDColor backgroundColour = appearanceCharacteristics.getBackground();",
          "345:                 contents.setNonStrokingColor(backgroundColour);",
          "346:                 PDRectangle bbox = resolveBoundingBox(widget, appearanceStream);",
          "348:                 contents.fill();",
          "349:             }",
          "351:             float lineWidth = 0f;",
          "352:             PDColor borderColour = appearanceCharacteristics.getBorderColour();",
          "355:                 contents.setStrokingColor(borderColour);",
          "356:                 lineWidth = 1f;",
          "357:             }",
          "358:             PDBorderStyleDictionary borderStyle = widget.getBorderStyle();",
          "361:                 lineWidth = borderStyle.getWidth();",
          "362:             }",
          "368:                     contents.setLineWidth(lineWidth);",
          "369:                 }",
          "370:                 PDRectangle bbox = resolveBoundingBox(widget, appearanceStream);",
          "373:                 contents.closeAndStroke();",
          "374:             }",
          "375:         }",
          "377:         contents.close();",
          "378:         output.close();",
          "379:         writeToStream(output.toByteArray(), appearanceStream);",
          "380:     }",
          "387:         PDFStreamParser parser = new PDFStreamParser(appearanceStream);",
          "388:         parser.parse();",
          "389:         return parser.getTokens();",
          "",
          "[Removed Lines]",
          "303:     private PDDefaultAppearanceString getWidgetDefaultAppearanceString(PDAnnotationWidget widget) throws IOException",
          "304:     {",
          "310:     private int resolveRotation(PDAnnotationWidget widget)",
          "311:     {",
          "312:         PDAppearanceCharacteristicsDictionary  characteristicsDictionary = widget.getAppearanceCharacteristics();",
          "313:         if (characteristicsDictionary != null)",
          "314:         {",
          "332:     private void initializeAppearanceContent(PDAnnotationWidget widget, PDAppearanceStream appearanceStream) throws IOException",
          "333:     {",
          "335:         PDPageContentStream contents = new PDPageContentStream(field.getAcroForm().getDocument(),",
          "336:                 appearanceStream, output);",
          "340:         if (appearanceCharacteristics != null)",
          "341:         {",
          "343:             if (backgroundColour != null)",
          "344:             {",
          "347:                 contents.addRect(bbox.getLowerLeftX(),bbox.getLowerLeftY(),bbox.getWidth(), bbox.getHeight());",
          "353:             if (borderColour != null)",
          "354:             {",
          "359:             if (borderStyle != null && borderStyle.getWidth() > 0)",
          "360:             {",
          "364:             if (lineWidth > 0 && borderColour != null)",
          "365:             {",
          "366:                 if (lineWidth != 1)",
          "367:                 {",
          "371:                 PDRectangle clipRect = applyPadding(bbox, Math.max(DEFAULT_PADDING, lineWidth/2));",
          "372:                 contents.addRect(clipRect.getLowerLeftX(),clipRect.getLowerLeftY(),clipRect.getWidth(), clipRect.getHeight());",
          "385:     private List<Object> tokenize(PDAppearanceStream appearanceStream) throws IOException",
          "386:     {",
          "",
          "[Added Lines]",
          "280:     private PDDefaultAppearanceString getWidgetDefaultAppearanceString(PDAnnotationWidget widget) throws IOException {",
          "286:     private int resolveRotation(PDAnnotationWidget widget) {",
          "287:         PDAppearanceCharacteristicsDictionary characteristicsDictionary = widget.getAppearanceCharacteristics();",
          "288:         if (characteristicsDictionary != null) {",
          "305:     private void initializeAppearanceContent(PDAnnotationWidget widget, PDAppearanceStream appearanceStream)",
          "306:             throws IOException {",
          "308:         PDPageContentStream contents = new PDPageContentStream(field.getAcroForm().getDocument(), appearanceStream,",
          "309:                 output);",
          "313:         if (appearanceCharacteristics != null) {",
          "315:             if (backgroundColour != null) {",
          "318:                 contents.addRect(bbox.getLowerLeftX(), bbox.getLowerLeftY(), bbox.getWidth(), bbox.getHeight());",
          "324:             if (borderColour != null) {",
          "329:             if (borderStyle != null && borderStyle.getWidth() > 0) {",
          "333:             if (lineWidth > 0 && borderColour != null) {",
          "334:                 if (lineWidth != 1) {",
          "338:                 PDRectangle clipRect = applyPadding(bbox, Math.max(DEFAULT_PADDING, lineWidth / 2));",
          "339:                 contents.addRect(clipRect.getLowerLeftX(), clipRect.getLowerLeftY(), clipRect.getWidth(),",
          "340:                         clipRect.getHeight());",
          "353:     private List<Object> tokenize(PDAppearanceStream appearanceStream) throws IOException {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "400:         defaultAppearance.copyNeededResourcesTo(appearanceStream);",
          "404:         ByteArrayOutputStream output = new ByteArrayOutputStream();",
          "405:         ContentStreamWriter writer = new ContentStreamWriter(output);",
          "407:         List<Object> tokens = tokenize(appearanceStream);",
          "408:         int bmcIndex = tokens.indexOf(BMC);",
          "412:             writer.writeTokens(tokens);",
          "413:             writer.writeTokens(COSName.TX, BMC);",
          "418:             writer.writeTokens(tokens.subList(0, bmcIndex + 1));",
          "419:         }",
          "422:         insertGeneratedAppearance(widget, appearanceStream, output);",
          "424:         int emcIndex = tokens.indexOf(EMC);",
          "428:             writer.writeTokens(EMC);",
          "433:             writer.writeTokens(tokens.subList(emcIndex, tokens.size()));",
          "434:         }",
          "",
          "[Removed Lines]",
          "395:     private void setAppearanceContent(PDAnnotationWidget widget,",
          "396:                                       PDAppearanceStream appearanceStream) throws IOException",
          "397:     {",
          "409:         if (bmcIndex == -1)",
          "410:         {",
          "414:         }",
          "415:         else",
          "416:         {",
          "425:         if (emcIndex == -1)",
          "426:         {",
          "429:         }",
          "430:         else",
          "431:         {",
          "",
          "[Added Lines]",
          "362:     private void setAppearanceContent(PDAnnotationWidget widget, PDAppearanceStream appearanceStream)",
          "363:             throws IOException {",
          "375:         if (bmcIndex == -1) {",
          "379:         } else {",
          "388:         if (emcIndex == -1) {",
          "391:         } else {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "436:         output.close();",
          "437:         writeToStream(output.toByteArray(), appearanceStream);",
          "438:     }",
          "450:         PDRectangle bbox = resolveBoundingBox(widget, appearanceStream);",
          "455:         float borderWidth = 0;",
          "458:             borderWidth = widget.getBorderStyle().getWidth();",
          "459:         }",
          "460:         PDRectangle clipRect = applyPadding(bbox, Math.max(1f, borderWidth));",
          "461:         PDRectangle contentRect = applyPadding(clipRect, Math.max(1f, borderWidth));",
          "463:         contents.saveGraphicsState();",
          "468:         contents.clip();",
          "471:         PDFont font = defaultAppearance.getFont();",
          "474:             throw new IllegalArgumentException(\"font is null, check whether /DA entry is incomplete or incorrect\");",
          "475:         }",
          "483:             LOG.warn(\"You should replace this font with a non-subsetted font:\");",
          "484:             LOG.warn(\"PDFont font = PDType0Font.load(doc, new FileInputStream(fontfile), false);\");",
          "487:         }",
          "490:         float fontSize = defaultAppearance.getFontSize();",
          "495:         }",
          "501:             insertGeneratedListboxSelectionHighlight(contents, appearanceStream, font, fontSize);",
          "502:         }",
          "",
          "[Removed Lines]",
          "443:     private void insertGeneratedAppearance(PDAnnotationWidget widget,",
          "444:                                            PDAppearanceStream appearanceStream,",
          "445:                                            OutputStream output) throws IOException",
          "446:     {",
          "447:         PDPageContentStream contents = new PDPageContentStream(field.getAcroForm().getDocument(),",
          "448:                                                                appearanceStream, output);",
          "456:         if (widget.getBorderStyle() != null)",
          "457:         {",
          "466:         contents.addRect(clipRect.getLowerLeftX(), clipRect.getLowerLeftY(),",
          "467:                 clipRect.getWidth(), clipRect.getHeight());",
          "472:         if (font == null)",
          "473:         {",
          "476:         if (font.getName().contains(\"+\"))",
          "477:         {",
          "478:             LOG.warn(\"Font '\" + defaultAppearance.getFontName().getName() +",
          "479:                      \"' of field '\" + field.getFullyQualifiedName() +",
          "480:                      \"' contains subsetted font '\" + font.getName() + \"'\");",
          "481:             LOG.warn(\"This may bring trouble with PDField.setValue(), PDAcroForm.flatten() or \" +",
          "482:                      \"PDAcroForm.refreshAppearances()\");",
          "485:             LOG.warn(\"acroForm.getDefaultResources().put(COSName.getPDFName(\\\"\" +",
          "486:                      defaultAppearance.getFontName().getName() + \"\\\", font);\");",
          "492:         if (fontSize == 0)",
          "493:         {",
          "494:             fontSize = calculateFontSize(font, contentRect);",
          "499:         if (field instanceof PDListBox)",
          "500:         {",
          "",
          "[Added Lines]",
          "403:     private void insertGeneratedAppearance(PDAnnotationWidget widget, PDAppearanceStream appearanceStream,",
          "404:             OutputStream output) throws IOException {",
          "405:         PDPageContentStream contents = new PDPageContentStream(field.getAcroForm().getDocument(), appearanceStream,",
          "406:                 output);",
          "416:         if (widget.getBorderStyle() != null) {",
          "425:         contents.addRect(clipRect.getLowerLeftX(), clipRect.getLowerLeftY(), clipRect.getWidth(), clipRect.getHeight());",
          "430:         if (font == null) {",
          "433:         if (font.getName().contains(\"+\")) {",
          "434:             LOG.warn(\"Font '\" + defaultAppearance.getFontName().getName() + \"' of field '\"",
          "435:                     + field.getFullyQualifiedName() + \"' contains subsetted font '\" + font.getName() + \"'\");",
          "436:             LOG.warn(\"This may bring trouble with PDField.setValue(), PDAcroForm.flatten() or \"",
          "437:                     + \"PDAcroForm.refreshAppearances()\");",
          "440:             LOG.warn(\"acroForm.getDefaultResources().put(COSName.getPDFName(\\\"\"",
          "441:                     + defaultAppearance.getFontName().getName() + \"\\\", font);\");",
          "447:         if (fontSize == 0) {",
          "448:             fontSize = calculateFontSize(font, contentRect);",
          "453:         if (field instanceof PDListBox) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "514:         float fontScaleY = fontSize / FONTSCALE;",
          "515:         float fontBoundingBoxAtSize = font.getBoundingBox().getHeight() * fontScaleY;",
          "522:         }",
          "528:                 y = clipRect.getLowerLeftY() + -fontDescentAtSize;",
          "533:                 y = clipRect.getLowerLeftY() + (clipRect.getHeight() - fontCapAtSize) / 2;",
          "536:                 if (y - clipRect.getLowerLeftY() < -fontDescentAtSize) {",
          "538:                     float fontDescentBased = -fontDescentAtSize + contentRect.getLowerLeftY();",
          "539:                     float fontCapBased = contentRect.getHeight() - contentRect.getLowerLeftY() - fontCapAtSize;",
          "541:                     y = Math.min(fontDescentBased, Math.max(y, fontCapBased));",
          "542:                 }",
          "543:             }",
          "544:         }",
          "547:         float x = contentRect.getLowerLeftX();",
          "553:             insertGeneratedCombAppearance(contents, appearanceStream, font, fontSize);",
          "557:             insertGeneratedListboxAppearance(contents, appearanceStream, contentRect, font, fontSize);",
          "561:             PlainText textContent = new PlainText(value);",
          "562:             AppearanceStyle appearanceStyle = new AppearanceStyle();",
          "563:             appearanceStyle.setFont(font);",
          "564:             appearanceStyle.setFontSize(fontSize);",
          "567:             appearanceStyle.setLeading(font.getBoundingBox().getHeight() * fontScaleY);",
          "578:             formatter.format();",
          "579:         }",
          "581:         contents.endText();",
          "582:         contents.restoreGraphicsState();",
          "583:         contents.close();",
          "584:     }",
          "595:         return widget.getCOSObject().getInt(COSName.Q, field.getQ());",
          "596:     }",
          "602:             return new AffineTransform();",
          "603:         }",
          "604:         float tx = 0, ty = 0;",
          "607:             case 90:",
          "608:                 tx = bbox.getUpperRightY();",
          "609:                 break;",
          "",
          "[Removed Lines]",
          "516:         float fontCapAtSize = font.getFontDescriptor().getCapHeight() * fontScaleY;",
          "517:         float fontDescentAtSize = font.getFontDescriptor().getDescent() * fontScaleY;",
          "519:         if (field instanceof PDTextField && ((PDTextField) field).isMultiline())",
          "520:         {",
          "521:             y = contentRect.getUpperRightY() - fontBoundingBoxAtSize;",
          "523:         else",
          "524:         {",
          "526:             if (fontCapAtSize > clipRect.getHeight())",
          "527:             {",
          "529:             }",
          "530:             else",
          "531:             {",
          "551:         if (shallComb())",
          "552:         {",
          "554:         }",
          "555:         else if (field instanceof PDListBox)",
          "556:         {",
          "558:         }",
          "559:         else",
          "560:         {",
          "569:             PlainTextFormatter formatter = new PlainTextFormatter",
          "570:                                                 .Builder(contents)",
          "571:                                                     .style(appearanceStyle)",
          "572:                                                     .text(textContent)",
          "573:                                                     .width(contentRect.getWidth())",
          "574:                                                     .wrapLines(isMultiLine())",
          "575:                                                     .initialOffset(x, y)",
          "576:                                                     .textAlign(getTextAlign(widget))",
          "577:                                                     .build();",
          "592:     private int getTextAlign(PDAnnotationWidget widget)",
          "593:     {",
          "598:     private AffineTransform calculateMatrix(PDRectangle bbox, int rotation)",
          "599:     {",
          "600:         if (rotation == 0)",
          "601:         {",
          "605:         switch (rotation)",
          "606:         {",
          "",
          "[Added Lines]",
          "470:         float fontCapAtSize = 0;",
          "471:         float fontDescentAtSize = 0;",
          "473:         if (font.getFontDescriptor() != null) {",
          "474:             fontCapAtSize = font.getFontDescriptor().getCapHeight() * fontScaleY;",
          "475:             fontDescentAtSize = font.getFontDescriptor().getDescent() * fontScaleY;",
          "476:         } else {",
          "477:             float fontCapHeight = resolveCapHeight(font);",
          "478:             float fontDescent = resolveDescent(font);",
          "479:             LOG.debug(\"missing font descriptor - resolved Cap/Descent to \" + fontCapHeight + \"/\" + fontDescent);",
          "480:             fontCapAtSize = fontCapHeight * fontScaleY;",
          "481:             fontDescentAtSize = fontDescent * fontScaleY;",
          "484:         if (field instanceof PDTextField && ((PDTextField) field).isMultiline()) {",
          "485:             y = contentRect.getUpperRightY() - fontBoundingBoxAtSize;",
          "486:         } else {",
          "489:             if (fontCapAtSize > clipRect.getHeight()) {",
          "491:             } else {",
          "511:         if (shallComb()) {",
          "513:         } else if (field instanceof PDListBox) {",
          "515:         } else {",
          "524:             PlainTextFormatter formatter = new PlainTextFormatter.Builder(contents).style(appearanceStyle)",
          "525:                     .text(textContent).width(contentRect.getWidth()).wrapLines(isMultiLine()).initialOffset(x, y)",
          "526:                     .textAlign(getTextAlign(widget)).build();",
          "541:     private int getTextAlign(PDAnnotationWidget widget) {",
          "546:     private AffineTransform calculateMatrix(PDRectangle bbox, int rotation) {",
          "547:         if (rotation == 0) {",
          "551:         switch (rotation) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "623:     }",
          "628:         return field instanceof PDTextField && ((PDTextField) field).isMultiline();",
          "629:     }",
          "650:     }",
          "661:     private void insertGeneratedCombAppearance(PDPageContentStream contents, PDAppearanceStream appearanceStream,",
          "668:         int maxLen = ((PDTextField) field).getMaxLen();",
          "669:         int numChars = Math.min(value.length(), maxLen);",
          "671:         PDRectangle paddingEdge = applyPadding(appearanceStream.getBBox(), 1);",
          "673:         float combWidth = appearanceStream.getBBox().getWidth() / maxLen;",
          "674:         float ascentAtFontSize = font.getFontDescriptor().getAscent() / FONTSCALE * fontSize;",
          "678:         float prevCharWidth = 0f;",
          "680:         float xOffset = combWidth / 2;",
          "689:             contents.newLineAtOffset(xOffset, baselineOffset);",
          "690:             contents.showText(combString);",
          "692:             baselineOffset = 0;",
          "693:             prevCharWidth = currCharWidth;",
          "694:             xOffset = combWidth;",
          "695:         }",
          "696:     }",
          "701:         List<Integer> indexEntries = ((PDListBox) field).getSelectedOptionsIndex();",
          "702:         List<String> values = ((PDListBox) field).getValue();",
          "703:         List<String> options = ((PDListBox) field).getOptionsExportValues();",
          "708:             indexEntries = new ArrayList<Integer>();",
          "711:                 indexEntries.add(options.indexOf(v));",
          "712:             }",
          "713:         }",
          "718:         int topIndex = ((PDListBox) field).getTopIndex();",
          "723:         PDRectangle paddingEdge = applyPadding(appearanceStream.getBBox(), 1);",
          "727:             contents.setNonStrokingColor(HIGHLIGHT_COLOR[0], HIGHLIGHT_COLOR[1], HIGHLIGHT_COLOR[2]);",
          "729:             contents.addRect(paddingEdge.getLowerLeftX(),",
          "730:                     paddingEdge.getUpperRightY() - highlightBoxHeight * (selectedIndex - topIndex + 1) + 2,",
          "733:             contents.fill();",
          "734:         }",
          "735:         contents.setNonStrokingColor(0f);",
          "736:     }",
          "739:     private void insertGeneratedListboxAppearance(PDPageContentStream contents, PDAppearanceStream appearanceStream,",
          "742:         contents.setNonStrokingColor(0f);",
          "744:         int q = field.getQ();",
          "748:             float fieldWidth = appearanceStream.getBBox().getWidth();",
          "749:             float stringWidth = (font.getStringWidth(value) / FONTSCALE) * fontSize;",
          "750:             float adjustAmount = fieldWidth - stringWidth - 4;",
          "754:                 adjustAmount = adjustAmount / 2.0f;",
          "755:             }",
          "757:             contents.newLineAtOffset(adjustAmount, 0);",
          "761:             throw new IOException(\"Error: Unknown justification value:\" + q);",
          "762:         }",
          "",
          "[Removed Lines]",
          "626:     private boolean isMultiLine()",
          "627:     {",
          "643:     private boolean shallComb()",
          "644:     {",
          "645:         return field instanceof PDTextField &&",
          "646:                 ((PDTextField) field).isComb() &&",
          "647:                 !((PDTextField) field).isMultiline() &&",
          "648:                 !((PDTextField) field).isPassword() &&",
          "649:                 !((PDTextField) field).isFileSelect();",
          "662:             PDFont font, float fontSize) throws IOException",
          "663:     {",
          "675:         float baselineOffset = paddingEdge.getLowerLeftY() +",
          "676:                 (appearanceStream.getBBox().getHeight() - ascentAtFontSize)/2;",
          "682:         for (int i = 0; i < numChars; i++)",
          "683:         {",
          "684:             String combString = value.substring(i, i+1);",
          "685:             float currCharWidth = font.getStringWidth(combString) / FONTSCALE * fontSize/2;",
          "687:             xOffset = xOffset + prevCharWidth/2 - currCharWidth/2;",
          "698:     private void insertGeneratedListboxSelectionHighlight(PDPageContentStream contents, PDAppearanceStream appearanceStream,",
          "699:             PDFont font, float fontSize) throws IOException",
          "700:     {",
          "705:         if (!values.isEmpty() && !options.isEmpty() && indexEntries.isEmpty())",
          "706:         {",
          "709:             for (String v : values)",
          "710:             {",
          "720:         float highlightBoxHeight = font.getBoundingBox().getHeight() * fontSize / FONTSCALE;",
          "725:         for (int selectedIndex : indexEntries)",
          "726:         {",
          "731:                     paddingEdge.getWidth(),",
          "732:                     highlightBoxHeight);",
          "740:             PDRectangle contentRect, PDFont font, float fontSize) throws IOException",
          "741:     {",
          "746:         if (q == PDVariableText.QUADDING_CENTERED || q == PDVariableText.QUADDING_RIGHT)",
          "747:         {",
          "752:             if (q == PDVariableText.QUADDING_CENTERED)",
          "753:             {",
          "758:         }",
          "759:         else if (q != PDVariableText.QUADDING_LEFT)",
          "760:         {",
          "",
          "[Added Lines]",
          "570:     private boolean isMultiLine() {",
          "586:     private boolean shallComb() {",
          "587:         return field instanceof PDTextField && ((PDTextField) field).isComb() && !((PDTextField) field).isMultiline()",
          "588:                 && !((PDTextField) field).isPassword() && !((PDTextField) field).isFileSelect();",
          "601:             PDFont font, float fontSize) throws IOException {",
          "613:         float baselineOffset = paddingEdge.getLowerLeftY()",
          "614:                 + (appearanceStream.getBBox().getHeight() - ascentAtFontSize) / 2;",
          "620:         for (int i = 0; i < numChars; i++) {",
          "621:             String combString = value.substring(i, i + 1);",
          "622:             float currCharWidth = font.getStringWidth(combString) / FONTSCALE * fontSize / 2;",
          "624:             xOffset = xOffset + prevCharWidth / 2 - currCharWidth / 2;",
          "635:     private void insertGeneratedListboxSelectionHighlight(PDPageContentStream contents,",
          "636:             PDAppearanceStream appearanceStream, PDFont font, float fontSize) throws IOException {",
          "641:         if (!values.isEmpty() && !options.isEmpty() && indexEntries.isEmpty()) {",
          "644:             for (String v : values) {",
          "656:         float highlightBoxHeight = font.getBoundingBox().getHeight() * fontSize / FONTSCALE;",
          "661:         for (int selectedIndex : indexEntries) {",
          "666:                     paddingEdge.getWidth(), highlightBoxHeight);",
          "673:             PDRectangle contentRect, PDFont font, float fontSize) throws IOException {",
          "678:         if (q == PDVariableText.QUADDING_CENTERED || q == PDVariableText.QUADDING_RIGHT) {",
          "683:             if (q == PDVariableText.QUADDING_CENTERED) {",
          "688:         } else if (q != PDVariableText.QUADDING_LEFT) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "767:         float yTextPos = contentRect.getUpperRightY();",
          "769:         int topIndex = ((PDListBox) field).getTopIndex();",
          "776:                 yTextPos = yTextPos - font.getFontDescriptor().getAscent() / FONTSCALE * fontSize;",
          "780:                 yTextPos = yTextPos - font.getBoundingBox().getHeight() / FONTSCALE * fontSize;",
          "781:                 contents.beginText();",
          "782:             }",
          "",
          "[Removed Lines]",
          "771:         for (int i = topIndex; i < numOptions; i++)",
          "772:         {",
          "774:             if (i == topIndex)",
          "775:             {",
          "777:             }",
          "778:             else",
          "779:             {",
          "",
          "[Added Lines]",
          "699:         for (int i = topIndex; i < numOptions; i++) {",
          "701:             if (i == topIndex) {",
          "703:             } else {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "784:             contents.newLineAtOffset(contentRect.getLowerLeftX(), yTextPos);",
          "785:             contents.showText(options.get(i));",
          "789:                 contents.endText();",
          "790:             }",
          "791:         }",
          "792:     }",
          "801:         OutputStream out = appearanceStream.getCOSObject().createOutputStream();",
          "802:         out.write(data);",
          "803:         out.close();",
          "804:     }",
          "815:         float fontSize = defaultAppearance.getFontSize();",
          "822:                 PlainText textContent = new PlainText(value);",
          "825:                     float width = contentRect.getWidth() - contentRect.getLowerLeftX();",
          "826:                     float fs = MINIMUM_FONT_SIZE;",
          "830:                         int numLines = 0;",
          "833:                             numLines += paragraph.getLines(font, fs, width).size();",
          "834:                         }",
          "",
          "[Removed Lines]",
          "787:             if (i != (numOptions - 1))",
          "788:             {",
          "799:     private void writeToStream(byte[] data, PDAppearanceStream appearanceStream) throws IOException",
          "800:     {",
          "813:     private float calculateFontSize(PDFont font, PDRectangle contentRect) throws IOException",
          "814:     {",
          "818:         if (fontSize == 0)",
          "819:         {",
          "820:             if (isMultiLine())",
          "821:             {",
          "823:                 if (textContent.getParagraphs() != null)",
          "824:                 {",
          "827:                     while (fs <= DEFAULT_FONT_SIZE)",
          "828:                     {",
          "831:                         for (PlainText.Paragraph paragraph : textContent.getParagraphs())",
          "832:                         {",
          "",
          "[Added Lines]",
          "711:             if (i != (numOptions - 1)) {",
          "722:     private void writeToStream(byte[] data, PDAppearanceStream appearanceStream) throws IOException {",
          "735:     private float calculateFontSize(PDFont font, PDRectangle contentRect) throws IOException {",
          "739:         if (fontSize == 0) {",
          "740:             if (isMultiLine()) {",
          "742:                 if (textContent.getParagraphs() != null) {",
          "745:                     while (fs <= DEFAULT_FONT_SIZE) {",
          "748:                         for (PlainText.Paragraph paragraph : textContent.getParagraphs()) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "838:                         float height = leading * numLines;",
          "843:                             return Math.max(fs - 1, MINIMUM_FONT_SIZE);",
          "844:                         }",
          "845:                         fs++;",
          "",
          "[Removed Lines]",
          "841:                         if (height > contentRect.getHeight())",
          "842:                         {",
          "",
          "[Added Lines]",
          "757:                         if (height > contentRect.getHeight()) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "851:                 return DEFAULT_FONT_SIZE;",
          "855:                 float yScalingFactor = FONTSCALE * font.getFontMatrix().getScaleY();",
          "856:                 float xScalingFactor = FONTSCALE * font.getFontMatrix().getScaleX();",
          "859:                 float width = font.getStringWidth(value) * font.getFontMatrix().getScaleX();",
          "860:                 float widthBasedFontSize = contentRect.getWidth() / width * xScalingFactor;",
          "867:                     height = font.getBoundingBox().getHeight() * font.getFontMatrix().getScaleY();",
          "868:                 }",
          "870:                 float heightBasedFontSize = contentRect.getHeight() / height * yScalingFactor;",
          "872:                 return Math.min(heightBasedFontSize, widthBasedFontSize);",
          "873:             }",
          "874:         }",
          "875:         return fontSize;",
          "876:     }",
          "888:         PDRectangle boundingBox = appearanceStream.getBBox();",
          "891:             boundingBox = fieldWidget.getRectangle().createRetranslatedRectangle();",
          "892:         }",
          "893:         return boundingBox;",
          "894:     }",
          "908:     }",
          "909: }",
          "",
          "[Removed Lines]",
          "852:             }",
          "853:             else",
          "854:             {",
          "863:                 float height = (font.getFontDescriptor().getCapHeight() +",
          "864:                                -font.getFontDescriptor().getDescent()) * font.getFontMatrix().getScaleY();",
          "865:                 if (height <= 0)",
          "866:                 {",
          "885:     private PDRectangle resolveBoundingBox(PDAnnotationWidget fieldWidget,",
          "886:                                            PDAppearanceStream appearanceStream)",
          "887:     {",
          "889:         if (boundingBox == null)",
          "890:         {",
          "902:     private PDRectangle applyPadding(PDRectangle box, float padding)",
          "903:     {",
          "904:         return new PDRectangle(box.getLowerLeftX() + padding,",
          "905:                                box.getLowerLeftY() + padding,",
          "906:                                box.getWidth() - 2 * padding,",
          "907:                                box.getHeight() - 2 * padding);",
          "",
          "[Added Lines]",
          "767:             } else {",
          "776:                 float height = (font.getFontDescriptor().getCapHeight() + -font.getFontDescriptor().getDescent())",
          "778:                 if (height <= 0) {",
          "795:     private float resolveCapHeight(PDFont font) throws IOException {",
          "796:         return resolveGlyphHeight(font, \"H\".codePointAt(0));",
          "797:     }",
          "804:     private float resolveDescent(PDFont font) throws IOException {",
          "805:         return resolveGlyphHeight(font, \"y\".codePointAt(0)) - resolveGlyphHeight(font, \"a\".codePointAt(0));",
          "806:     }",
          "809:     private float resolveGlyphHeight(PDFont font, int code) throws IOException {",
          "810:         GeneralPath path = null;",
          "811:         if (font instanceof PDType3Font) {",
          "817:             PDType3Font t3Font = (PDType3Font) font;",
          "818:             PDType3CharProc charProc = t3Font.getCharProc(code);",
          "819:             if (charProc != null) {",
          "820:                 BoundingBox fontBBox = t3Font.getBoundingBox();",
          "821:                 PDRectangle glyphBBox = charProc.getGlyphBBox();",
          "822:                 if (glyphBBox != null) {",
          "824:                     glyphBBox.setLowerLeftX(Math.max(fontBBox.getLowerLeftX(), glyphBBox.getLowerLeftX()));",
          "825:                     glyphBBox.setLowerLeftY(Math.max(fontBBox.getLowerLeftY(), glyphBBox.getLowerLeftY()));",
          "826:                     glyphBBox.setUpperRightX(Math.min(fontBBox.getUpperRightX(), glyphBBox.getUpperRightX()));",
          "827:                     glyphBBox.setUpperRightY(Math.min(fontBBox.getUpperRightY(), glyphBBox.getUpperRightY()));",
          "828:                     path = glyphBBox.toGeneralPath();",
          "829:                 }",
          "830:             }",
          "831:         } else if (font instanceof PDVectorFont) {",
          "832:             PDVectorFont vectorFont = (PDVectorFont) font;",
          "833:             path = vectorFont.getPath(code);",
          "834:         } else if (font instanceof PDSimpleFont) {",
          "835:             PDSimpleFont simpleFont = (PDSimpleFont) font;",
          "839:             String name = simpleFont.getEncoding().getName(code);",
          "840:             path = simpleFont.getPath(name);",
          "841:         } else {",
          "843:             LOG.warn(\"Unknown font class: \" + font.getClass());",
          "844:         }",
          "845:         if (path == null) {",
          "846:             return -1;",
          "847:         }",
          "848:         return (float) path.getBounds2D().getHeight();",
          "849:     }",
          "858:     private PDRectangle resolveBoundingBox(PDAnnotationWidget fieldWidget, PDAppearanceStream appearanceStream) {",
          "860:         if (boundingBox == null) {",
          "872:     private PDRectangle applyPadding(PDRectangle box, float padding) {",
          "873:         return new PDRectangle(box.getLowerLeftX() + padding, box.getLowerLeftY() + padding,",
          "874:                 box.getWidth() - 2 * padding, box.getHeight() - 2 * padding);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormGenerateAppearancesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.pdfbox.pdmodel.interactive.form;",
          "20: import static org.junit.Assert.assertFalse;",
          "22: import java.io.IOException;",
          "23: import java.net.URL;",
          "25: import org.apache.pdfbox.io.IOUtils;",
          "26: import org.apache.pdfbox.pdmodel.PDDocument;",
          "27: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "28: import org.junit.Test;",
          "30: public class PDAcroFormGenerateAppearancesTest {",
          "37:     @Test",
          "38:     public void test5041MissingFontDescriptor() throws IOException",
          "39:     {",
          "41:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13016941/REDHAT-1301016-0.pdf\";",
          "43:         PDDocument testPdf = null;",
          "44:         try",
          "45:         {",
          "46:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "47:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "48:             boolean thrown = false;",
          "49:             try",
          "50:             {",
          "51:                 catalog.getAcroForm();",
          "52:             }",
          "53:             catch (Exception e)",
          "54:             {",
          "55:                 thrown = true;",
          "56:             }",
          "57:             assertFalse(\"There shall be no exception when getting the AcroForm\", thrown);",
          "58:         }",
          "59:         finally",
          "60:         {",
          "61:             IOUtils.closeQuietly(testPdf);",
          "62:         }",
          "63:     }",
          "64: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8c88ba2f8235187d83499caca584583a8767c0d",
      "candidate_info": {
        "commit_hash": "f8c88ba2f8235187d83499caca584583a8767c0d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f8c88ba2f8235187d83499caca584583a8767c0d",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java"
        ],
        "message": "PDFBOX-4847: use different test strategy to check whether the sRGB data was assigned; move identity check to top\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881102 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/PNGConverterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.graphics.image;",
          "19: import java.awt.Color;",
          "20: import java.awt.color.ICC_ColorSpace;",
          "21: import java.awt.color.ICC_Profile;",
          "22: import java.awt.image.BufferedImage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.awt.color.ColorSpace;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.pdfbox.pdmodel.graphics.color.PDIndexed;",
          "43: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent;",
          "44: import static org.junit.Assert.assertEquals;",
          "45: import static org.junit.Assert.assertFalse;",
          "46: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:     @Test",
          "347:     public void testImageConversionIntentIndexed() throws IOException",
          "348:     {",
          "349:         PDDocument doc = new PDDocument();",
          "351:         byte[] imageBytes = IOUtils.toByteArray(PNGConverterTest.class.getResourceAsStream(\"929316.png\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:         checkImageConvert(\"929316.png\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:         PDICCBased iccColorspace = (PDICCBased) indexedColorspace.getBaseColorSpace();",
          "365:     }",
          "366: }",
          "",
          "[Removed Lines]",
          "361:         assertTrue(iccColorspace.issRGB());",
          "362:         doc.close();",
          "364:         checkImageConvert(\"929316.png\");",
          "",
          "[Added Lines]",
          "368:         ICC_Profile rgbProfile = ICC_Profile.getInstance(ColorSpace.CS_sRGB);",
          "369:         byte[] sRGB_bytes = rgbProfile.getData();",
          "370:         Assert.assertArrayEquals(sRGB_bytes, iccColorspace.getPDStream().toByteArray());",
          "372:         doc.close();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "958eaaad839a4f0871dcd77228ca1d43f826b29a",
      "candidate_info": {
        "commit_hash": "958eaaad839a4f0871dcd77228ca1d43f826b29a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/958eaaad839a4f0871dcd77228ca1d43f826b29a",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"
        ],
        "message": "PDFBOX-4892: fix typo, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887228 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java||xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java||xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java -> xmpbox/src/main/java/org/apache/xmpbox/xml/DomXmpParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:         }",
          "93:         catch (ParserConfigurationException e)",
          "94:         {",
          "96:         }",
          "97:     }",
          "",
          "[Removed Lines]",
          "95:             throw new XmpParsingException(ErrorType.Configuration, \"Failed to initilalize\", e);",
          "",
          "[Added Lines]",
          "95:             throw new XmpParsingException(ErrorType.Configuration, \"Failed to initialize\", e);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49cb204e9ce0f16e3630f8836a87b11f64d8f7d8",
      "candidate_info": {
        "commit_hash": "49cb204e9ce0f16e3630f8836a87b11f64d8f7d8",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/49cb204e9ce0f16e3630f8836a87b11f64d8f7d8",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888634 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSObjectKey.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     @Override",
          "106:     public String toString()",
          "107:     {",
          "109:     }",
          "111:     @Override",
          "",
          "[Removed Lines]",
          "108:         return Long.toString(number) + \" \" +  Integer.toString(generation) + \" R\";",
          "",
          "[Added Lines]",
          "108:         return number + \" \" + generation + \" R\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bd2d33898f835e695f0044b4c17258d51972536",
      "candidate_info": {
        "commit_hash": "6bd2d33898f835e695f0044b4c17258d51972536",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6bd2d33898f835e695f0044b4c17258d51972536",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889677 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     private void findLabels(PDNumberTreeNode node) throws IOException",
          "101:     {",
          "102:         if (node.getKids() != null)",
          "103:         {",
          "105:             for (PDNumberTreeNode kid : kids)",
          "106:             {",
          "107:                 findLabels(kid);",
          "108:             }",
          "109:         }",
          "111:         {",
          "114:             {",
          "116:                 {",
          "118:                 }",
          "119:             }",
          "120:         }",
          "",
          "[Removed Lines]",
          "104:             List<PDNumberTreeNode> kids = node.getKids();",
          "110:         else if (node.getNumbers() != null)",
          "112:             Map<Integer, COSObjectable> numbers = node.getNumbers();",
          "113:             for (Entry<Integer, COSObjectable> i : numbers.entrySet())",
          "115:                 if(i.getKey() >= 0)",
          "117:                     labels.put(i.getKey(), (PDPageLabelRange) i.getValue());",
          "",
          "[Added Lines]",
          "102:         List<PDNumberTreeNode> kids = node.getKids();",
          "110:         else",
          "112:             Map<Integer,COSObjectable> numbers = node.getNumbers();",
          "113:             if (numbers != null)",
          "115:                 for (Entry<Integer, COSObjectable> i : numbers.entrySet())",
          "117:                     if (i.getKey() >= 0)",
          "118:                     {",
          "119:                         labels.put(i.getKey(), (PDPageLabelRange) i.getValue());",
          "120:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}