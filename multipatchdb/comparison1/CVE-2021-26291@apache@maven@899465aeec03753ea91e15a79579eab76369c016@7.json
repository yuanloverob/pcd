{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42c99b45e45224810ee2f914b238123cbf599a96",
      "candidate_info": {
        "commit_hash": "42c99b45e45224810ee2f914b238123cbf599a96",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/42c99b45e45224810ee2f914b238123cbf599a96",
        "files": [
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-6850] Prevent printing the EXEC_DIR when it's just a disk letter\n\nThis fixes following bug and also consistent with another 'cd /d \"%EXEC_DIR%\"' a few lines above.\nWhen you're on the root of some disk running mvn.cmd prints an extra line with current dir before the correct output\n\nCloses #304",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: :baseDirNotFound",
          "157: if \"_%EXEC_DIR:~-1%\"==\"_\\\" set \"EXEC_DIR=%EXEC_DIR:~0,-1%\"",
          "158: set \"MAVEN_PROJECTBASEDIR=%EXEC_DIR%\"",
          "161: :endDetectBaseDir",
          "",
          "[Removed Lines]",
          "159: cd \"%EXEC_DIR%\"",
          "",
          "[Added Lines]",
          "159: cd /d \"%EXEC_DIR%\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b693cc992ff4a5947babecd222fbebf7516e677",
      "candidate_info": {
        "commit_hash": "8b693cc992ff4a5947babecd222fbebf7516e677",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8b693cc992ff4a5947babecd222fbebf7516e677",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ],
        "message": "Document hacks as such",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java||maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java -> maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java"
        ]
      }
    },
    {
      "candidate_hash": "863f9193e615f474cce402535948002138af4dae",
      "candidate_info": {
        "commit_hash": "863f9193e615f474cce402535948002138af4dae",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/863f9193e615f474cce402535948002138af4dae",
        "files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ],
        "message": "[MNG-6842] ProjectBuilderTest uses Guava, but Guava is not defined in dependencies\n\nThis closes #311",
        "before_after_code_files": [
          "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java||maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java -> maven-core/src/test/java/org/apache/maven/project/ProjectBuilderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import static org.junit.Assert.assertThat;",
          "28: import java.io.File;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collections;",
          "31: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.nio.file.Files;",
          "30: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.apache.maven.model.building.ModelSource;",
          "41: import org.apache.maven.shared.utils.io.FileUtils;",
          "45: public class ProjectBuilderTest",
          "46:     extends AbstractCoreMavenComponentTestCase",
          "",
          "[Removed Lines]",
          "43: import com.google.common.io.Files;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:         String initialValue = System.setProperty( DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, Boolean.toString( true ) );",
          "148:         try",
          "149:         {",
          "150:             MavenSession mavenSession = createMavenSession( null );",
          "151:             ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "152:             configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "153:             org.apache.maven.project.ProjectBuilder projectBuilder = lookup( org.apache.maven.project.ProjectBuilder.class );",
          "156:             projectBuilder.build( child, configuration );",
          "159:             String parentContent = FileUtils.fileRead( parent );",
          "160:             parentContent = parentContent.replaceAll( \"<packaging>pom</packaging>\",",
          "161:               \"<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>\" );",
          "",
          "[Removed Lines]",
          "146:         File tempDir = Files.createTempDir();",
          "147:         FileUtils.copyDirectoryStructure (new File( \"src/test/resources/projects/grandchild-check\"), tempDir );",
          "154:             File child = new File( tempDir, \"child/pom.xml\" );",
          "158:             File parent = new File( tempDir, \"pom.xml\" );",
          "",
          "[Added Lines]",
          "148:         Path tempDir = Files.createTempDirectory( null );",
          "149:         FileUtils.copyDirectoryStructure ( new File( \"src/test/resources/projects/grandchild-check\" ), tempDir.toFile() );",
          "156:             File child = new File( tempDir.toFile(), \"child/pom.xml\" );",
          "160:             File parent = new File( tempDir.toFile(), \"pom.xml\" );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:             {",
          "175:                 System.setProperty( DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, initialValue );",
          "176:             }",
          "178:         }",
          "179:     }",
          "",
          "[Removed Lines]",
          "177:             FileUtils.deleteDirectory( tempDir );",
          "",
          "[Added Lines]",
          "179:             FileUtils.deleteDirectory( tempDir.toFile() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "304:         return null;",
          "305:     }",
          "308:     {",
          "309:         for ( ProjectBuildingResult result : results )",
          "310:         {",
          "",
          "[Removed Lines]",
          "307:     private void assertResultShowNoError(List<ProjectBuildingResult> results)",
          "",
          "[Added Lines]",
          "309:     private void assertResultShowNoError( List<ProjectBuildingResult> results )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:         ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();",
          "322:         configuration.setRepositorySession( mavenSession.getRepositorySession() );",
          "323:         configuration.setResolveDependencies( true );",
          "327:         assertEquals( 1, project.getTestCompileSourceRoots().size() );",
          "328:         assertEquals( 1, project.getCompileSourceRoots().size() );",
          "",
          "[Removed Lines]",
          "324:         List<ProjectBuildingResult> result = projectBuilder.build( Collections.singletonList(file), true, configuration );",
          "325:         MavenProject project = result.get(0).getProject();",
          "",
          "[Added Lines]",
          "326:         List<ProjectBuildingResult> result = projectBuilder.build( Collections.singletonList( file ), true, configuration );",
          "327:         MavenProject project = result.get( 0 ).getProject();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98a9d089bda8870fd658208d98bdc73a5f039b0f",
      "candidate_info": {
        "commit_hash": "98a9d089bda8870fd658208d98bdc73a5f039b0f",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/98a9d089bda8870fd658208d98bdc73a5f039b0f",
        "files": [
          "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java"
        ],
        "message": "[MNG-7236] The DefaultPluginVersionResolver should cache results for the session",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java||maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java||maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java": [
          "File: maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java -> maven-core/src/main/java/org/apache/maven/plugin/version/internal/DefaultPluginVersionResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.LinkedHashMap;",
          "26: import java.util.List;",
          "27: import java.util.Map;",
          "28: import java.util.TreeSet;",
          "30: import org.apache.maven.artifact.repository.metadata.Metadata;",
          "31: import org.apache.maven.artifact.repository.metadata.Versioning;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.util.Objects;",
          "30: import java.util.concurrent.ConcurrentHashMap;",
          "31: import java.util.concurrent.ConcurrentMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.eclipse.aether.RepositorySystem;",
          "50: import org.eclipse.aether.RepositorySystemSession;",
          "51: import org.eclipse.aether.RequestTrace;",
          "52: import org.eclipse.aether.metadata.DefaultMetadata;",
          "53: import org.eclipse.aether.repository.ArtifactRepository;",
          "54: import org.eclipse.aether.repository.RemoteRepository;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import org.eclipse.aether.SessionData;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:     private static final String REPOSITORY_CONTEXT = \"plugin\";",
          "75:     @Requirement",
          "76:     private Logger logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     private static final Object CACHE_KEY = new Object();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:         if ( result == null )",
          "93:         {",
          "97:             {",
          "100:             }",
          "101:         }",
          "102:         else if ( logger.isDebugEnabled() )",
          "",
          "[Removed Lines]",
          "94:             result = resolveFromRepository( request );",
          "96:             if ( logger.isDebugEnabled() )",
          "98:                 logger.debug( \"Resolved plugin version for \" + request.getGroupId() + \":\" + request.getArtifactId()",
          "99:                     + \" to \" + result.getVersion() + \" from repository \" + result.getRepository() );",
          "",
          "[Added Lines]",
          "100:             ConcurrentMap<Key, PluginVersionResult> cache = getCache( request.getRepositorySession().getData() );",
          "101:             Key key = getKey( request );",
          "102:             result = cache.get( key );",
          "104:             if ( result == null )",
          "106:                 result = resolveFromRepository( request );",
          "108:                 if ( logger.isDebugEnabled() )",
          "109:                 {",
          "110:                     logger.debug( \"Resolved plugin version for \" + request.getGroupId() + \":\" + request.getArtifactId()",
          "111:                         + \" to \" + result.getVersion() + \" from repository \" + result.getRepository() );",
          "112:                 }",
          "114:                 cache.putIfAbsent( key, result );",
          "115:             }",
          "116:             else if ( logger.isDebugEnabled() )",
          "117:             {",
          "118:                 logger.debug( \"Reusing cached resolved plugin version for \" + request.getGroupId() + \":\"",
          "119:                         + request.getArtifactId() + \" to \" + result.getVersion() + \" from POM \" + request.getPom() );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:         return null;",
          "385:     }",
          "387:     static class Versions",
          "388:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     @SuppressWarnings( \"unchecked\" )",
          "408:     private ConcurrentMap<Key, PluginVersionResult> getCache( SessionData data )",
          "409:     {",
          "410:         ConcurrentMap<Key, PluginVersionResult> cache =",
          "411:                 ( ConcurrentMap<Key, PluginVersionResult> ) data.get( CACHE_KEY );",
          "412:         while ( cache == null )",
          "413:         {",
          "414:             cache = new ConcurrentHashMap<>( 256 );",
          "415:             if ( data.set( CACHE_KEY, null, cache ) )",
          "416:             {",
          "417:                 break;",
          "418:             }",
          "419:             cache = ( ConcurrentMap<Key, PluginVersionResult> ) data.get( CACHE_KEY );",
          "420:         }",
          "421:         return cache;",
          "422:     }",
          "424:     private static Key getKey( PluginVersionRequest request )",
          "425:     {",
          "426:         return new Key( request.getGroupId(), request.getArtifactId(), request.getRepositories() );",
          "427:     }",
          "429:     static class Key",
          "430:     {",
          "431:         final String groupId;",
          "432:         final String artifactId;",
          "433:         final List<RemoteRepository> repositories;",
          "434:         final int hash;",
          "436:         Key( String groupId, String artifactId, List<RemoteRepository> repositories )",
          "437:         {",
          "438:             this.groupId = groupId;",
          "439:             this.artifactId = artifactId;",
          "440:             this.repositories = repositories;",
          "441:             this.hash = Objects.hash( groupId, artifactId, repositories );",
          "442:         }",
          "444:         @Override",
          "445:         public boolean equals( Object o )",
          "446:         {",
          "447:             if ( this == o )",
          "448:             {",
          "449:                 return true;",
          "450:             }",
          "451:             if ( o == null || getClass() != o.getClass() )",
          "452:             {",
          "453:                 return false;",
          "454:             }",
          "455:             Key key = ( Key ) o;",
          "456:             return groupId.equals( key.groupId )",
          "457:                     && artifactId.equals( key.artifactId )",
          "458:                     && repositories.equals( key.repositories );",
          "459:         }",
          "461:         @Override",
          "462:         public int hashCode()",
          "463:         {",
          "464:             return hash;",
          "465:         }",
          "466:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14ca7234380f81e54a5643082816048f3b6b67cf",
      "candidate_info": {
        "commit_hash": "14ca7234380f81e54a5643082816048f3b6b67cf",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/14ca7234380f81e54a5643082816048f3b6b67cf",
        "files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java"
        ],
        "message": "[MNG-7350] Introduce a factory for ModelCache",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java||maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java -> maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.maven.model.building.ModelBuildingException;",
          "57: import org.apache.maven.model.building.ModelBuildingRequest;",
          "58: import org.apache.maven.model.building.ModelBuildingResult;",
          "59: import org.apache.maven.model.building.ModelProblem;",
          "60: import org.apache.maven.model.building.ModelProcessor;",
          "61: import org.apache.maven.model.building.ModelSource;",
          "62: import org.apache.maven.model.building.StringModelSource;",
          "63: import org.apache.maven.model.resolution.ModelResolver;",
          "64: import org.apache.maven.repository.internal.ArtifactDescriptorUtils;",
          "65: import org.codehaus.plexus.component.annotations.Component;",
          "66: import org.codehaus.plexus.component.annotations.Requirement;",
          "67: import org.codehaus.plexus.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.maven.model.building.ModelCache;",
          "66: import org.apache.maven.repository.internal.ModelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     @Requirement",
          "112:     private ProjectDependenciesResolver dependencyResolver;",
          "",
          "[Removed Lines]",
          "114:     private final ReactorModelCache modelCache = new ReactorModelCache();",
          "",
          "[Added Lines]",
          "116:     @Requirement",
          "117:     private ModelCacheFactory modelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         throws ProjectBuildingException",
          "123:     {",
          "124:         return build( pomFile, new FileModelSource( pomFile ),",
          "126:     }",
          "128:     private boolean useGlobalModelCache()",
          "",
          "[Removed Lines]",
          "125:                 new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null ) );",
          "",
          "[Added Lines]",
          "128:                 new InternalConfig( request, null,",
          "129:                         useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         throws ProjectBuildingException",
          "136:     {",
          "137:         return build( null, modelSource,",
          "139:     }",
          "141:     private ProjectBuildingResult build( File pomFile, ModelSource modelSource, InternalConfig config )",
          "",
          "[Removed Lines]",
          "138:                  new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null ) );",
          "",
          "[Added Lines]",
          "142:                  new InternalConfig( request, null,",
          "143:                          useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "306:         org.eclipse.aether.artifact.Artifact pomArtifact = RepositoryUtils.toArtifact( artifact );",
          "307:         pomArtifact = ArtifactDescriptorUtils.toPomArtifact( pomArtifact );",
          "311:         boolean localProject;",
          "",
          "[Removed Lines]",
          "309:         InternalConfig config = new InternalConfig( request, null, useGlobalModelCache() ? getModelCache() : null );",
          "",
          "[Added Lines]",
          "314:         InternalConfig config = new InternalConfig( request, null,",
          "315:                 useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : null );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "369:         ReactorModelPool modelPool = new ReactorModelPool();",
          "371:         InternalConfig config = new InternalConfig( request, modelPool,",
          "374:         Map<String, MavenProject> projectIndex = new HashMap<>( 256 );",
          "",
          "[Removed Lines]",
          "372:                 useGlobalModelCache() ? getModelCache() : new ReactorModelCache() );",
          "",
          "[Added Lines]",
          "378:                 useGlobalModelCache() ? createModelCache( request.getRepositorySession() ) : new ReactorModelCache() );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1059:         private final ReactorModelPool modelPool;",
          "1064:         {",
          "1065:             this.request = request;",
          "1066:             this.modelPool = modelPool;",
          "",
          "[Removed Lines]",
          "1061:         private final ReactorModelCache modelCache;",
          "1063:         InternalConfig( ProjectBuildingRequest request, ReactorModelPool modelPool, ReactorModelCache modelCache )",
          "",
          "[Added Lines]",
          "1067:         private final ModelCache modelCache;",
          "1069:         InternalConfig( ProjectBuildingRequest request, ReactorModelPool modelPool, ModelCache modelCache )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1074:     }",
          "1077:     {",
          "1079:     }",
          "1081: }",
          "",
          "[Removed Lines]",
          "1076:     private ReactorModelCache getModelCache()",
          "1078:         return this.modelCache;",
          "",
          "[Added Lines]",
          "1082:     private ModelCache createModelCache( RepositorySystemSession session )",
          "1084:         return modelCacheFactory.createCache( session );",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java||maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java": [
          "File: maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java -> maven-core/src/test/java/org/apache/maven/AbstractCoreMavenComponentTestCase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:             .setSystemProperties( executionProperties )",
          "147:             .setUserProperties( new Properties() );",
          "149:         List<MavenProject> projects = new ArrayList<>();",
          "151:         if ( pom != null )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:         initRepoSession( configuration );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:             projects.add( project );",
          "175:         }",
          "179:         MavenSession session =",
          "180:             new MavenSession( getContainer(), configuration.getRepositorySession(), request,",
          "181:                               new DefaultMavenExecutionResult() );",
          "",
          "[Removed Lines]",
          "177:         initRepoSession( configuration );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     private ModelBuilder modelBuilder;",
          "92:     public DefaultArtifactDescriptorReader()",
          "93:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     private ModelCacheFactory modelCacheFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     @Inject",
          "98:     DefaultArtifactDescriptorReader( RemoteRepositoryManager remoteRepositoryManager, VersionResolver versionResolver,",
          "99:                                      VersionRangeResolver versionRangeResolver, ArtifactResolver artifactResolver,",
          "101:     {",
          "102:         setRemoteRepositoryManager( remoteRepositoryManager );",
          "103:         setVersionResolver( versionResolver );",
          "",
          "[Removed Lines]",
          "100:                                      ModelBuilder modelBuilder, RepositoryEventDispatcher repositoryEventDispatcher )",
          "",
          "[Added Lines]",
          "102:                                      ModelBuilder modelBuilder, RepositoryEventDispatcher repositoryEventDispatcher,",
          "103:                                      ModelCacheFactory modelCacheFactory )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         setArtifactResolver( artifactResolver );",
          "106:         setModelBuilder( modelBuilder );",
          "107:         setRepositoryEventDispatcher( repositoryEventDispatcher );",
          "108:     }",
          "110:     public void initService( ServiceLocator locator )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         setModelCacheFactory( modelCacheFactory );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:             setModelBuilder( new DefaultModelBuilderFactory().newInstance() );",
          "120:         }",
          "121:         setRepositoryEventDispatcher( locator.getService( RepositoryEventDispatcher.class ) );",
          "122:     }",
          "124:     public DefaultArtifactDescriptorReader setRemoteRepositoryManager( RemoteRepositoryManager remoteRepositoryManager )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         setModelCacheFactory( locator.getService( ModelCacheFactory.class ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         return this;",
          "163:     }",
          "165:     public ArtifactDescriptorResult readArtifactDescriptor( RepositorySystemSession session,",
          "166:                                                             ArtifactDescriptorRequest request )",
          "167:         throws ArtifactDescriptorException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     public DefaultArtifactDescriptorReader setModelCacheFactory( ModelCacheFactory modelCacheFactory )",
          "171:     {",
          "172:         this.modelCacheFactory = Objects.requireNonNull( modelCacheFactory,",
          "173:                 \"modelCacheFactory cannot be null\" );",
          "174:         return this;",
          "175:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "276:                 modelRequest.setTwoPhaseBuilding( false );",
          "277:                 modelRequest.setSystemProperties( toProperties( session.getSystemProperties() ) );",
          "278:                 modelRequest.setUserProperties( toProperties( session.getUserProperties() ) );",
          "280:                 modelRequest.setModelResolver( new DefaultModelResolver( session, trace.newChild( modelRequest ),",
          "281:                                                                          request.getRequestContext(), artifactResolver,",
          "282:                                                                          versionRangeResolver, remoteRepositoryManager,",
          "",
          "[Removed Lines]",
          "279:                 modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );",
          "",
          "[Added Lines]",
          "291:                 modelRequest.setModelCache( modelCacheFactory.createCache( session ) );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelCacheFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.repository.internal;",
          "22: import javax.inject.Named;",
          "23: import javax.inject.Singleton;",
          "25: import org.apache.maven.model.building.ModelCache;",
          "26: import org.eclipse.aether.RepositorySystemSession;",
          "31: @Singleton",
          "32: @Named",
          "33: public class DefaultModelCacheFactory implements ModelCacheFactory",
          "34: {",
          "35:     @Override",
          "36:     public ModelCache createCache( RepositorySystemSession session )",
          "37:     {",
          "38:         return DefaultModelCache.newInstance( session );",
          "39:     }",
          "41: }",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         locator.addService( VersionRangeResolver.class, DefaultVersionRangeResolver.class );",
          "80:         locator.addService( MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class );",
          "81:         locator.addService( MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class );",
          "82:         return locator;",
          "83:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         locator.addService( ModelCacheFactory.class, DefaultModelCacheFactory.class );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenResolverModule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:             .to( VersionsMetadataGeneratorFactory.class ).in( Singleton.class );",
          "58:         bind( ModelBuilder.class ).toInstance( new DefaultModelBuilderFactory().newInstance() );",
          "59:     }",
          "61:     @Provides",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:         bind( ModelCacheFactory.class ).to( DefaultModelCacheFactory.class ).in( Singleton.class );",
          "",
          "---------------"
        ],
        "maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java||maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java": [
          "File: maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java -> maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ModelCacheFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.repository.internal;",
          "22: import org.apache.maven.model.building.ModelCache;",
          "23: import org.eclipse.aether.RepositorySystemSession;",
          "28: public interface ModelCacheFactory",
          "29: {",
          "31:     ModelCache createCache( RepositorySystemSession session );",
          "33: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}