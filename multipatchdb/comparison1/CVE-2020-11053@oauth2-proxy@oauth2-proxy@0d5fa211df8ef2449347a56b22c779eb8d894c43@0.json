{
  "cve_id": "CVE-2020-11053",
  "cve_desc": "In OAuth2 Proxy before 5.1.1, there is an open redirect vulnerability. Users can provide a redirect address for the proxy to send the authenticated user to at the end of the authentication flow. This is expected to be the original URL that the user was trying to access. This redirect URL is checked within the proxy and validated before redirecting the user to prevent malicious actors providing redirects to potentially harmful sites. However, by crafting a redirect URL with HTML encoded whitespace characters the validation could be bypassed and allow a redirect to any URL provided. This has been patched in 5.1.1.",
  "repo": "oauth2-proxy/oauth2-proxy",
  "patch_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
  "patch_info": {
    "commit_hash": "0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "repo": "oauth2-proxy/oauth2-proxy",
    "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/0d5fa211df8ef2449347a56b22c779eb8d894c43",
    "files": [
      "oauthproxy.go",
      "oauthproxy_test.go"
    ],
    "message": "Merge pull request from GHSA-j7px-6hwj-hpjg",
    "before_after_code_files": [
      "oauthproxy.go||oauthproxy.go",
      "oauthproxy_test.go||oauthproxy_test.go"
    ]
  },
  "patch_diff": {
    "oauthproxy.go||oauthproxy.go": [
      "File: oauthproxy.go -> oauthproxy.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "57: var (",
      "59:  ErrNeedsLogin = errors.New(\"redirect to login page\")",
      "60: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:  invalidRedirectRegex = regexp.MustCompile(`^/(\\s|\\v)?(/|\\\\)`)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "579: func (p *OAuthProxy) IsValidRedirect(redirect string) bool {",
      "580:  switch {",
      "582:   return true",
      "583:  case strings.HasPrefix(redirect, \"http://\") || strings.HasPrefix(redirect, \"https://\"):",
      "584:   redirectURL, err := url.Parse(redirect)",
      "",
      "[Removed Lines]",
      "581:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !strings.HasPrefix(redirect, \"/\\\\\"):",
      "",
      "[Added Lines]",
      "585:  case strings.HasPrefix(redirect, \"/\") && !strings.HasPrefix(redirect, \"//\") && !invalidRedirectRegex.MatchString(redirect):",
      "",
      "---------------"
    ],
    "oauthproxy_test.go||oauthproxy_test.go": [
      "File: oauthproxy_test.go -> oauthproxy_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "322:    Redirect:       \"http://a.sub.anyport.bar:8081/redirect\",",
      "323:    ExpectedResult: true,",
      "324:   },",
      "325:  }",
      "327:  for _, tc := range testCases {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:   {",
      "326:    Desc:           \"openRedirect1\",",
      "327:    Redirect:       \"/\\\\evil.com\",",
      "328:    ExpectedResult: false,",
      "329:   },",
      "330:   {",
      "331:    Desc:           \"openRedirectSpace1\",",
      "332:    Redirect:       \"/ /evil.com\",",
      "333:    ExpectedResult: false,",
      "334:   },",
      "335:   {",
      "336:    Desc:           \"openRedirectSpace2\",",
      "337:    Redirect:       \"/ \\\\evil.com\",",
      "338:    ExpectedResult: false,",
      "339:   },",
      "340:   {",
      "341:    Desc:           \"openRedirectTab1\",",
      "342:    Redirect:       \"/\\t/evil.com\",",
      "343:    ExpectedResult: false,",
      "344:   },",
      "345:   {",
      "346:    Desc:           \"openRedirectTab2\",",
      "347:    Redirect:       \"/\\t\\\\evil.com\",",
      "348:    ExpectedResult: false,",
      "349:   },",
      "350:   {",
      "351:    Desc:           \"openRedirectVerticalTab1\",",
      "352:    Redirect:       \"/\\v/evil.com\",",
      "353:    ExpectedResult: false,",
      "354:   },",
      "355:   {",
      "356:    Desc:           \"openRedirectVerticalTab2\",",
      "357:    Redirect:       \"/\\v\\\\evil.com\",",
      "358:    ExpectedResult: false,",
      "359:   },",
      "360:   {",
      "361:    Desc:           \"openRedirectNewLine1\",",
      "362:    Redirect:       \"/\\n/evil.com\",",
      "363:    ExpectedResult: false,",
      "364:   },",
      "365:   {",
      "366:    Desc:           \"openRedirectNewLine2\",",
      "367:    Redirect:       \"/\\n\\\\evil.com\",",
      "368:    ExpectedResult: false,",
      "369:   },",
      "370:   {",
      "371:    Desc:           \"openRedirectCarriageReturn1\",",
      "372:    Redirect:       \"/\\r/evil.com\",",
      "373:    ExpectedResult: false,",
      "374:   },",
      "375:   {",
      "376:    Desc:           \"openRedirectCarriageReturn2\",",
      "377:    Redirect:       \"/\\r\\\\evil.com\",",
      "378:    ExpectedResult: false,",
      "379:   },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ee5662e0f5001d76ec76562bb605abbd07c266a2",
      "candidate_info": {
        "commit_hash": "ee5662e0f5001d76ec76562bb605abbd07c266a2",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/ee5662e0f5001d76ec76562bb605abbd07c266a2",
        "files": [
          "oauthproxy.go",
          "oauthproxy_test.go",
          "test/openredirects.txt"
        ],
        "message": "Merge pull request from GHSA-5m6c-jp6f-2vcv\n\n* Add more Open Redirect test cases\n\n* Add whitelisted domain to test\n\n* Add more test cases\n\n* Improve invalid redirect regex",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: )",
          "",
          "[Removed Lines]",
          "66:  invalidRedirectRegex = regexp.MustCompile(`^/(\\s|\\v)?(/|\\\\)`)",
          "",
          "[Added Lines]",
          "66:  invalidRedirectRegex = regexp.MustCompile(`[/\\\\](?:[\\s\\v]*|\\.{1,2})[/\\\\]`)",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package main",
          "3: import (",
          "4:  \"context\"",
          "5:  \"crypto\"",
          "6:  \"encoding/base64\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4:  \"bufio\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:  \"net/http\"",
          "12:  \"net/http/httptest\"",
          "13:  \"net/url\"",
          "14:  \"regexp\"",
          "15:  \"strings\"",
          "16:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  \"os\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:    Redirect:       \"/\\r\\\\evil.com\",",
          "387:    ExpectedResult: false,",
          "388:   },",
          "389:  }",
          "391:  for _, tc := range testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:   {",
          "392:    Desc:           \"openRedirectTripleTab\",",
          "393:    Redirect:       \"/\\t\\t/\\t/evil.com\",",
          "394:    ExpectedResult: false,",
          "395:   },",
          "396:   {",
          "397:    Desc:           \"openRedirectTripleTab2\",",
          "398:    Redirect:       \"/\\t\\t\\\\\\t/evil.com\",",
          "399:    ExpectedResult: false,",
          "400:   },",
          "401:   {",
          "402:    Desc:           \"openRedirectQuadTab1\",",
          "403:    Redirect:       \"/\\t\\t/\\t\\t\\\\evil.com\",",
          "404:    ExpectedResult: false,",
          "405:   },",
          "406:   {",
          "407:    Desc:           \"openRedirectQuadTab2\",",
          "408:    Redirect:       \"/\\t\\t\\\\\\t\\t/evil.com\",",
          "409:    ExpectedResult: false,",
          "410:   },",
          "411:   {",
          "412:    Desc:           \"openRedirectPeriod1\",",
          "413:    Redirect:       \"/./\\\\evil.com\",",
          "414:    ExpectedResult: false,",
          "415:   },",
          "416:   {",
          "417:    Desc:           \"openRedirectPeriod2\",",
          "418:    Redirect:       \"/./../../\\\\evil.com\",",
          "419:    ExpectedResult: false,",
          "420:   },",
          "421:   {",
          "422:    Desc:           \"openRedirectDoubleTab\",",
          "423:    Redirect:       \"/\\t/\\t\\\\evil.com\",",
          "424:    ExpectedResult: false,",
          "425:   },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "399:  }",
          "400: }",
          "402: type TestProvider struct {",
          "404:  EmailAddress   string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: func TestOpenRedirects(t *testing.T) {",
          "440:  opts := NewOptions()",
          "441:  opts.ClientID = \"skdlfj\"",
          "442:  opts.ClientSecret = \"fgkdsgj\"",
          "443:  opts.Cookie.Secret = \"ljgiogbj\"",
          "445:  opts.WhitelistDomains = []string{",
          "446:   \"foo.bar\",",
          "447:   \".bar.foo\",",
          "448:   \"port.bar:8080\",",
          "449:   \".sub.port.bar:8080\",",
          "450:   \"anyport.bar:*\",",
          "451:   \".sub.anyport.bar:*\",",
          "452:   \"www.whitelisteddomain.tld\",",
          "453:  }",
          "454:  opts.Validate()",
          "456:  proxy := NewOAuthProxy(opts, func(string) bool { return true })",
          "458:  file, err := os.Open(\"./test/openredirects.txt\")",
          "459:  if err != nil {",
          "460:   t.Fatal(err)",
          "461:  }",
          "462:  defer file.Close()",
          "464:  scanner := bufio.NewScanner(file)",
          "465:  for scanner.Scan() {",
          "466:   rd := scanner.Text()",
          "467:   t.Run(rd, func(t *testing.T) {",
          "468:    rdUnescaped, err := url.QueryUnescape(rd)",
          "469:    if err != nil {",
          "470:     t.Fatal(err)",
          "471:    }",
          "472:    if proxy.IsValidRedirect(rdUnescaped) {",
          "473:     t.Errorf(\"Expected %q to not be valid (unescaped: %q)\", rd, rdUnescaped)",
          "474:    }",
          "475:   })",
          "476:  }",
          "478:  if err := scanner.Err(); err != nil {",
          "479:   t.Fatal(err)",
          "480:  }",
          "481: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a12bae35ca0a19e6571ca4ca4ea5497d6f1c31d5",
      "candidate_info": {
        "commit_hash": "a12bae35ca0a19e6571ca4ca4ea5497d6f1c31d5",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/a12bae35ca0a19e6571ca4ca4ea5497d6f1c31d5",
        "files": [
          "oauthproxy.go",
          "oauthproxy_test.go"
        ],
        "message": "update port whitelisting rules, refactor IsValidRedirect tests",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:  return",
          "495: }",
          "498: func (p *OAuthProxy) IsValidRedirect(redirect string) bool {",
          "499:  switch {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501: func splitHostPort(hostport string) (host, port string) {",
          "502:  host = hostport",
          "504:  colon := strings.LastIndexByte(host, ':')",
          "505:  if colon != -1 && validOptionalPort(host[colon:]) {",
          "506:   host, port = host[:colon], host[colon+1:]",
          "507:  }",
          "509:  if strings.HasPrefix(host, \"[\") && strings.HasSuffix(host, \"]\") {",
          "510:   host = host[1 : len(host)-1]",
          "511:  }",
          "513:  return",
          "514: }",
          "519: func validOptionalPort(port string) bool {",
          "520:  if port == \"\" || port == \":*\" {",
          "521:   return true",
          "522:  }",
          "523:  if port[0] != ':' {",
          "524:   return false",
          "525:  }",
          "526:  for _, b := range port[1:] {",
          "527:   if b < '0' || b > '9' {",
          "528:    return false",
          "529:   }",
          "530:  }",
          "531:  return true",
          "532: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:   redirectHostname := redirectURL.Hostname()",
          "509:   for _, domain := range p.whitelistDomains {",
          "515:     continue",
          "516:    }",
          "518:    if (redirectHostname == domainHostname) || (strings.HasPrefix(domain, \".\") && strings.HasSuffix(redirectHostname, domainHostname)) {",
          "523:      return true",
          "524:     }",
          "525:    }",
          "",
          "[Removed Lines]",
          "510:    domainURL := url.URL{",
          "511:     Host: strings.TrimLeft(domain, \".\"),",
          "512:    }",
          "513:    domainHostname := domainURL.Hostname()",
          "514:    if domainHostname == \"\" {",
          "521:     domainPort := domainURL.Port()",
          "522:     if (domainPort == \"\") || (domainPort == redirectURL.Port()) {",
          "",
          "[Added Lines]",
          "547:    domainHostname, domainPort := splitHostPort(strings.TrimLeft(domain, \".\"))",
          "548:    if err != nil || domainHostname == \"\" {",
          "557:     redirectPort := redirectURL.Port()",
          "558:     if (domainPort == \"*\") ||",
          "559:      (domainPort == redirectPort) ||",
          "560:      (domainPort == \"\" && redirectPort == \"\") {",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:  opts.ClientSecret = \"fgkdsgj\"",
          "183:  opts.CookieSecret = \"ljgiogbj\"",
          "186:  opts.Validate()",
          "188:  proxy := NewOAuthProxy(opts, func(string) bool { return true })",
          "249: }",
          "251: type TestProvider struct {",
          "",
          "[Removed Lines]",
          "185:  opts.WhitelistDomains = []string{\"foo.bar\", \".bar.foo\", \"port.bar:8080\", \".sub.port.bar:8080\"}",
          "190:  noRD := proxy.IsValidRedirect(\"\")",
          "191:  assert.Equal(t, false, noRD)",
          "193:  singleSlash := proxy.IsValidRedirect(\"/redirect\")",
          "194:  assert.Equal(t, true, singleSlash)",
          "196:  doubleSlash := proxy.IsValidRedirect(\"//redirect\")",
          "197:  assert.Equal(t, false, doubleSlash)",
          "199:  validHTTP := proxy.IsValidRedirect(\"http://foo.bar/redirect\")",
          "200:  assert.Equal(t, true, validHTTP)",
          "202:  validHTTPS := proxy.IsValidRedirect(\"https://foo.bar/redirect\")",
          "203:  assert.Equal(t, true, validHTTPS)",
          "205:  invalidHTTPSubdomain := proxy.IsValidRedirect(\"http://baz.foo.bar/redirect\")",
          "206:  assert.Equal(t, false, invalidHTTPSubdomain)",
          "208:  invalidHTTPSSubdomain := proxy.IsValidRedirect(\"https://baz.foo.bar/redirect\")",
          "209:  assert.Equal(t, false, invalidHTTPSSubdomain)",
          "211:  validHTTPSubdomain := proxy.IsValidRedirect(\"http://baz.bar.foo/redirect\")",
          "212:  assert.Equal(t, true, validHTTPSubdomain)",
          "214:  validHTTPSSubdomain := proxy.IsValidRedirect(\"https://baz.bar.foo/redirect\")",
          "215:  assert.Equal(t, true, validHTTPSSubdomain)",
          "217:  invalidHTTP1 := proxy.IsValidRedirect(\"http://foo.bar.evil.corp/redirect\")",
          "218:  assert.Equal(t, false, invalidHTTP1)",
          "220:  invalidHTTPS1 := proxy.IsValidRedirect(\"https://foo.bar.evil.corp/redirect\")",
          "221:  assert.Equal(t, false, invalidHTTPS1)",
          "223:  invalidHTTP2 := proxy.IsValidRedirect(\"http://evil.corp/redirect?rd=foo.bar\")",
          "224:  assert.Equal(t, false, invalidHTTP2)",
          "226:  invalidHTTPS2 := proxy.IsValidRedirect(\"https://evil.corp/redirect?rd=foo.bar\")",
          "227:  assert.Equal(t, false, invalidHTTPS2)",
          "229:  invalidPort := proxy.IsValidRedirect(\"https://evil.corp:3838/redirect\")",
          "230:  assert.Equal(t, false, invalidPort)",
          "232:  validAnyPort := proxy.IsValidRedirect(\"http://foo.bar:3838/redirect\")",
          "233:  assert.Equal(t, true, validAnyPort)",
          "235:  validAnyPortSubdomain := proxy.IsValidRedirect(\"http://baz.bar.foo:3838/redirect\")",
          "236:  assert.Equal(t, true, validAnyPortSubdomain)",
          "238:  validSpecificPort := proxy.IsValidRedirect(\"http://port.bar:8080/redirect\")",
          "239:  assert.Equal(t, true, validSpecificPort)",
          "241:  invalidSpecificPort := proxy.IsValidRedirect(\"http://port.bar:3838/redirect\")",
          "242:  assert.Equal(t, false, invalidSpecificPort)",
          "244:  validSpecificPortSubdomain := proxy.IsValidRedirect(\"http://foo.sub.port.bar:8080/redirect\")",
          "245:  assert.Equal(t, true, validSpecificPortSubdomain)",
          "247:  invalidSpecificPortSubdomain := proxy.IsValidRedirect(\"http://foo.sub.port.bar:3838/redirect\")",
          "248:  assert.Equal(t, false, invalidSpecificPortSubdomain)",
          "",
          "[Added Lines]",
          "185:  opts.WhitelistDomains = []string{",
          "186:   \"foo.bar\",",
          "187:   \".bar.foo\",",
          "188:   \"port.bar:8080\",",
          "189:   \".sub.port.bar:8080\",",
          "190:   \"anyport.bar:*\",",
          "191:   \".sub.anyport.bar:*\",",
          "192:  }",
          "197:  testCases := []struct {",
          "198:   Desc, Redirect string",
          "199:   ExpectedResult bool",
          "200:  }{",
          "201:   {",
          "202:    Desc:           \"noRD\",",
          "203:    Redirect:       \"\",",
          "204:    ExpectedResult: false,",
          "205:   },",
          "206:   {",
          "207:    Desc:           \"singleSlash\",",
          "208:    Redirect:       \"/redirect\",",
          "209:    ExpectedResult: true,",
          "210:   },",
          "211:   {",
          "212:    Desc:           \"doubleSlash\",",
          "213:    Redirect:       \"//redirect\",",
          "214:    ExpectedResult: false,",
          "215:   },",
          "216:   {",
          "217:    Desc:           \"validHTTP\",",
          "218:    Redirect:       \"http://foo.bar/redirect\",",
          "219:    ExpectedResult: true,",
          "220:   },",
          "221:   {",
          "222:    Desc:           \"validHTTPS\",",
          "223:    Redirect:       \"https://foo.bar/redirect\",",
          "224:    ExpectedResult: true,",
          "225:   },",
          "226:   {",
          "227:    Desc:           \"invalidHTTPSubdomain\",",
          "228:    Redirect:       \"http://baz.foo.bar/redirect\",",
          "229:    ExpectedResult: false,",
          "230:   },",
          "231:   {",
          "232:    Desc:           \"invalidHTTPSSubdomain\",",
          "233:    Redirect:       \"https://baz.foo.bar/redirect\",",
          "234:    ExpectedResult: false,",
          "235:   },",
          "236:   {",
          "237:    Desc:           \"validHTTPSubdomain\",",
          "238:    Redirect:       \"http://baz.bar.foo/redirect\",",
          "239:    ExpectedResult: true,",
          "240:   },",
          "241:   {",
          "242:    Desc:           \"validHTTPSSubdomain\",",
          "243:    Redirect:       \"https://baz.bar.foo/redirect\",",
          "244:    ExpectedResult: true,",
          "245:   },",
          "246:   {",
          "247:    Desc:           \"validHTTPDomain\",",
          "248:    Redirect:       \"http://bar.foo/redirect\",",
          "249:    ExpectedResult: true,",
          "250:   },",
          "251:   {",
          "252:    Desc:           \"invalidHTTP1\",",
          "253:    Redirect:       \"http://foo.bar.evil.corp/redirect\",",
          "254:    ExpectedResult: false,",
          "255:   },",
          "256:   {",
          "257:    Desc:           \"invalidHTTPS1\",",
          "258:    Redirect:       \"https://foo.bar.evil.corp/redirect\",",
          "259:    ExpectedResult: false,",
          "260:   },",
          "261:   {",
          "262:    Desc:           \"invalidHTTP2\",",
          "263:    Redirect:       \"http://evil.corp/redirect?rd=foo.bar\",",
          "264:    ExpectedResult: false,",
          "265:   },",
          "266:   {",
          "267:    Desc:           \"invalidHTTPS2\",",
          "268:    Redirect:       \"https://evil.corp/redirect?rd=foo.bar\",",
          "269:    ExpectedResult: false,",
          "270:   },",
          "271:   {",
          "272:    Desc:           \"invalidPort\",",
          "273:    Redirect:       \"https://evil.corp:3838/redirect\",",
          "274:    ExpectedResult: false,",
          "275:   },",
          "276:   {",
          "277:    Desc:           \"invalidEmptyPort\",",
          "278:    Redirect:       \"http://foo.bar:3838/redirect\",",
          "279:    ExpectedResult: false,",
          "280:   },",
          "281:   {",
          "282:    Desc:           \"invalidEmptyPortSubdomain\",",
          "283:    Redirect:       \"http://baz.bar.foo:3838/redirect\",",
          "284:    ExpectedResult: false,",
          "285:   },",
          "286:   {",
          "287:    Desc:           \"validSpecificPort\",",
          "288:    Redirect:       \"http://port.bar:8080/redirect\",",
          "289:    ExpectedResult: true,",
          "290:   },",
          "291:   {",
          "292:    Desc:           \"invalidSpecificPort\",",
          "293:    Redirect:       \"http://port.bar:3838/redirect\",",
          "294:    ExpectedResult: false,",
          "295:   },",
          "296:   {",
          "297:    Desc:           \"validSpecificPortSubdomain\",",
          "298:    Redirect:       \"http://foo.sub.port.bar:8080/redirect\",",
          "299:    ExpectedResult: true,",
          "300:   },",
          "301:   {",
          "302:    Desc:           \"invalidSpecificPortSubdomain\",",
          "303:    Redirect:       \"http://foo.sub.port.bar:3838/redirect\",",
          "304:    ExpectedResult: false,",
          "305:   },",
          "306:   {",
          "307:    Desc:           \"validAnyPort1\",",
          "308:    Redirect:       \"http://anyport.bar:8080/redirect\",",
          "309:    ExpectedResult: true,",
          "310:   },",
          "311:   {",
          "312:    Desc:           \"validAnyPort2\",",
          "313:    Redirect:       \"http://anyport.bar:8081/redirect\",",
          "314:    ExpectedResult: true,",
          "315:   },",
          "316:   {",
          "317:    Desc:           \"validAnyPortSubdomain1\",",
          "318:    Redirect:       \"http://a.sub.anyport.bar:8080/redirect\",",
          "319:    ExpectedResult: true,",
          "320:   },",
          "321:   {",
          "322:    Desc:           \"validAnyPortSubdomain2\",",
          "323:    Redirect:       \"http://a.sub.anyport.bar:8081/redirect\",",
          "324:    ExpectedResult: true,",
          "325:   },",
          "326:  }",
          "328:  for _, tc := range testCases {",
          "329:   t.Run(tc.Desc, func(t *testing.T) {",
          "330:    result := proxy.IsValidRedirect(tc.Redirect)",
          "332:    if result != tc.ExpectedResult {",
          "333:     t.Errorf(\"expected %t got %t\", tc.ExpectedResult, result)",
          "334:    }",
          "335:   })",
          "336:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c851fcd4fc4921617e1eb69afc14f78146fac26",
      "candidate_info": {
        "commit_hash": "2c851fcd4fc4921617e1eb69afc14f78146fac26",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/2c851fcd4fc4921617e1eb69afc14f78146fac26",
        "files": [
          "CHANGELOG.md",
          "docs/configuration/configuration.md",
          "logging_handler.go",
          "logging_handler_test.go",
          "oauthproxy.go",
          "pkg/apis/options/options.go"
        ],
        "message": "Allow a health/ping request to be identified by User-Agent (#567)\n\n* Add an option to allow health checks based on User-Agent.\n\n* Formatting fix\n\n* Rename field and avoid unnecessary interface.\n\n* Skip the redirect fix so it can be put into a different PR.\n\n* Add CHANGELOG entry\n\n* Adding a couple tests for the PingUserAgent option.",
        "before_after_code_files": [
          "logging_handler.go||logging_handler.go",
          "logging_handler_test.go||logging_handler_test.go",
          "oauthproxy.go||oauthproxy.go",
          "pkg/apis/options/options.go||pkg/apis/options/options.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "logging_handler.go||logging_handler.go": [
          "File: logging_handler.go -> logging_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  size     int",
          "22:  upstream string",
          "23:  authInfo string",
          "24: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  silent   bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  url := *req.URL",
          "105:  responseLogger := &responseLogger{w: w}",
          "106:  h.handler.ServeHTTP(responseLogger, req)",
          "108: }",
          "",
          "[Removed Lines]",
          "107:  logger.PrintReq(responseLogger.authInfo, responseLogger.upstream, req, url, t, responseLogger.Status(), responseLogger.Size())",
          "",
          "[Added Lines]",
          "108:  if !responseLogger.silent {",
          "109:   logger.PrintReq(responseLogger.authInfo, responseLogger.upstream, req, url, t, responseLogger.Status(), responseLogger.Size())",
          "110:  }",
          "",
          "---------------"
        ],
        "logging_handler_test.go||logging_handler_test.go": [
          "File: logging_handler_test.go -> logging_handler_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"fmt\"",
          "6:  \"net/http\"",
          "7:  \"net/http/httptest\"",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "10:  \"time\"",
          "12:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/logger\"",
          "13: )",
          "15: func TestLoggingHandler_ServeHTTP(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"net/url\"",
          "13:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/apis/options\"",
          "15:  \"github.com/oauth2-proxy/oauth2-proxy/pkg/validation\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   }",
          "68:  }",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: func TestLoggingHandler_PingUserAgent(t *testing.T) {",
          "75:  tests := []struct {",
          "76:   ExpectedLogMessage string",
          "77:   Path               string",
          "78:   SilencePingLogging bool",
          "79:   WithUserAgent      string",
          "80:  }{",
          "81:   {\"444\\n\", \"/foo\", true, \"Blah\"},",
          "82:   {\"444\\n\", \"/foo\", false, \"Blah\"},",
          "83:   {\"\", \"/ping\", true, \"Blah\"},",
          "84:   {\"200\\n\", \"/ping\", false, \"Blah\"},",
          "85:   {\"\", \"/ping\", true, \"PingMe!\"},",
          "86:   {\"\", \"/ping\", false, \"PingMe!\"},",
          "87:   {\"\", \"/foo\", true, \"PingMe!\"},",
          "88:   {\"\", \"/foo\", false, \"PingMe!\"},",
          "89:  }",
          "91:  for idx, test := range tests {",
          "92:   t.Run(fmt.Sprintf(\"%d\", idx), func(t *testing.T) {",
          "93:    opts := options.NewOptions()",
          "94:    opts.PingUserAgent = \"PingMe!\"",
          "95:    opts.SkipAuthRegex = []string{\"/foo\"}",
          "96:    opts.Upstreams = []string{\"static://444/foo\"}",
          "97:    opts.Logging.SilencePing = test.SilencePingLogging",
          "98:    if test.SilencePingLogging {",
          "99:     opts.Logging.ExcludePaths = []string{\"/ping\"}",
          "100:    }",
          "101:    opts.RawRedirectURL = \"localhost\"",
          "102:    validation.Validate(opts)",
          "104:    p := NewOAuthProxy(opts, func(email string) bool {",
          "105:     return true",
          "106:    })",
          "107:    p.provider = NewTestProvider(&url.URL{Host: \"localhost\"}, \"\")",
          "109:    buf := bytes.NewBuffer(nil)",
          "110:    logger.SetOutput(buf)",
          "111:    logger.SetReqEnabled(true)",
          "112:    logger.SetReqTemplate(\"{{.StatusCode}}\")",
          "114:    r, _ := http.NewRequest(\"GET\", test.Path, nil)",
          "115:    if test.WithUserAgent != \"\" {",
          "116:     r.Header.Set(\"User-Agent\", test.WithUserAgent)",
          "117:    }",
          "119:    h := LoggingHandler(p)",
          "120:    h.ServeHTTP(httptest.NewRecorder(), r)",
          "122:    actual := buf.String()",
          "123:    if !strings.Contains(actual, test.ExpectedLogMessage) {",
          "124:     t.Errorf(\"Log message was\\n%s\\ninstead of matching \\n%s\", actual, test.ExpectedLogMessage)",
          "125:    }",
          "126:   })",
          "127:  }",
          "128: }",
          "",
          "---------------"
        ],
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  RobotsPath        string",
          "84:  PingPath          string",
          "85:  SignInPath        string",
          "86:  SignOutPath       string",
          "87:  OAuthStartPath    string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  PingUserAgent     string",
          "86:  SilencePings      bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:   RobotsPath:        \"/robots.txt\",",
          "314:   PingPath:          opts.PingPath,",
          "315:   SignInPath:        fmt.Sprintf(\"%s/sign_in\", opts.ProxyPrefix),",
          "316:   SignOutPath:       fmt.Sprintf(\"%s/sign_out\", opts.ProxyPrefix),",
          "317:   OAuthStartPath:    fmt.Sprintf(\"%s/start\", opts.ProxyPrefix),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:   PingUserAgent:     opts.PingUserAgent,",
          "318:   SilencePings:      opts.Logging.SilencePing,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468: func (p *OAuthProxy) PingPage(rw http.ResponseWriter) {",
          "469:  rw.WriteHeader(http.StatusOK)",
          "470:  fmt.Fprintf(rw, \"OK\")",
          "471: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:  if p.SilencePings {",
          "474:   if rl, ok := rw.(*responseLogger); ok {",
          "475:    rl.silent = true",
          "476:   }",
          "477:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "675:  }",
          "676: }",
          "678: func (p *OAuthProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
          "679:  if strings.HasPrefix(req.URL.Path, p.ProxyPrefix) {",
          "680:   prepareNoCache(rw)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689: func (p *OAuthProxy) IsPingRequest(req *http.Request) bool {",
          "691:  if req.URL.EscapedPath() == p.PingPath {",
          "692:   return true",
          "693:  }",
          "695:  return p.PingUserAgent != \"\" && req.Header.Get(\"User-Agent\") == p.PingUserAgent",
          "696: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "683:  switch path := req.URL.Path; {",
          "684:  case path == p.RobotsPath:",
          "685:   p.RobotsTxt(rw)",
          "687:   p.PingPage(rw)",
          "688:  case p.IsWhitelistedRequest(req):",
          "689:   p.serveMux.ServeHTTP(rw, req)",
          "",
          "[Removed Lines]",
          "686:  case path == p.PingPath:",
          "",
          "[Added Lines]",
          "706:  case p.IsPingRequest(req):",
          "",
          "---------------"
        ],
        "pkg/apis/options/options.go||pkg/apis/options/options.go": [
          "File: pkg/apis/options/options.go -> pkg/apis/options/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: type Options struct {",
          "25:  ProxyPrefix        string `flag:\"proxy-prefix\" cfg:\"proxy_prefix\"`",
          "26:  PingPath           string `flag:\"ping-path\" cfg:\"ping_path\"`",
          "27:  ProxyWebSockets    bool   `flag:\"proxy-websockets\" cfg:\"proxy_websockets\"`",
          "28:  HTTPAddress        string `flag:\"http-address\" cfg:\"http_address\"`",
          "29:  HTTPSAddress       string `flag:\"https-address\" cfg:\"https_address\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:  PingUserAgent      string `flag:\"ping-user-agent\" cfg:\"ping_user_agent\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:  flagSet.String(\"footer\", \"\", \"custom footer string. Use \\\"-\\\" to disable default footer.\")",
          "246:  flagSet.String(\"proxy-prefix\", \"/oauth2\", \"the url root path that this proxy should be nested under (e.g. /<oauth2>/sign_in)\")",
          "247:  flagSet.String(\"ping-path\", \"/ping\", \"the ping endpoint that can be used for basic health checks\")",
          "248:  flagSet.Bool(\"proxy-websockets\", true, \"enables WebSocket proxying\")",
          "250:  flagSet.String(\"cookie-name\", \"_oauth2_proxy\", \"the name of the cookie that the oauth_proxy creates\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:  flagSet.String(\"ping-user-agent\", \"\", \"special User-Agent that will be used for basic health checks\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bb0160bf38133d9267c984ff0fe631eef9cb32c",
      "candidate_info": {
        "commit_hash": "2bb0160bf38133d9267c984ff0fe631eef9cb32c",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/2bb0160bf38133d9267c984ff0fe631eef9cb32c",
        "files": [
          "oauthproxy.go"
        ],
        "message": "Streamline error page usage",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "365: func (p *OAuthProxy) RobotsTxt(rw http.ResponseWriter) {",
          "367:  _, err := fmt.Fprintf(rw, \"User-agent: *\\nDisallow: /\")",
          "368:  if err != nil {",
          "371:  }",
          "372: }",
          "",
          "[Removed Lines]",
          "366:  rw.WriteHeader(http.StatusOK)",
          "369:   logger.Printf(\"Error writing robots.txt: %s\", err.Error())",
          "370:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "368:   logger.Printf(\"Error writing robots.txt: %v\", err)",
          "369:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "370:   return",
          "372:  rw.WriteHeader(http.StatusOK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:  }",
          "386:  err := p.templates.ExecuteTemplate(rw, \"error.html\", t)",
          "387:  if err != nil {",
          "389:   http.Error(rw, \"Internal Server Error\", http.StatusInternalServerError)",
          "390:  }",
          "391: }",
          "",
          "[Removed Lines]",
          "388:   logger.Printf(\"Error rendering error.html template: %s\", err.Error())",
          "",
          "[Added Lines]",
          "389:   logger.Printf(\"Error rendering error.html template: %v\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:  prepareNoCache(rw)",
          "396:  err := p.ClearSessionCookie(rw, req)",
          "397:  if err != nil {",
          "400:   return",
          "401:  }",
          "402:  rw.WriteHeader(code)",
          "404:  redirectURL, err := p.GetRedirect(req)",
          "405:  if err != nil {",
          "408:   return",
          "409:  }",
          "",
          "[Removed Lines]",
          "398:   logger.Printf(\"Error clearing session cookie: %s\", err.Error())",
          "399:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "406:   logger.Printf(\"Error obtaining redirect: %s\", err.Error())",
          "407:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "399:   logger.Printf(\"Error clearing session cookie: %v\", err)",
          "400:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "407:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "408:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:  }",
          "435:  err = p.templates.ExecuteTemplate(rw, \"sign_in.html\", t)",
          "436:  if err != nil {",
          "439:  }",
          "440: }",
          "",
          "[Removed Lines]",
          "437:   logger.Printf(\"Error rendering sign_in.html template: %s\", err.Error())",
          "438:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "438:   logger.Printf(\"Error rendering sign_in.html template: %v\", err)",
          "439:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645:  redirect, err := p.GetRedirect(req)",
          "646:  if err != nil {",
          "647:   logger.Printf(\"Error obtaining redirect: %s\", err.Error())",
          "649:   return",
          "650:  }",
          "",
          "[Removed Lines]",
          "648:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "649:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "655:   err = p.SaveSession(rw, req, session)",
          "656:   if err != nil {",
          "657:    logger.Printf(\"Error saving session: %s\", err.Error())",
          "659:    return",
          "660:   }",
          "661:   http.Redirect(rw, req, redirect, http.StatusFound)",
          "",
          "[Removed Lines]",
          "658:    p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "659:    p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "687:  rw.WriteHeader(http.StatusOK)",
          "688:  err = json.NewEncoder(rw).Encode(userInfo)",
          "689:  if err != nil {",
          "692:  }",
          "693: }",
          "",
          "[Removed Lines]",
          "690:   logger.Printf(\"Error encoding user info: %s\", err.Error())",
          "691:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "691:   logger.Printf(\"Error encoding user info: %v\", err)",
          "692:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "696: func (p *OAuthProxy) SignOut(rw http.ResponseWriter, req *http.Request) {",
          "697:  redirect, err := p.GetRedirect(req)",
          "698:  if err != nil {",
          "701:   return",
          "702:  }",
          "703:  err = p.ClearSessionCookie(rw, req)",
          "704:  if err != nil {",
          "707:   return",
          "708:  }",
          "709:  http.Redirect(rw, req, redirect, http.StatusFound)",
          "",
          "[Removed Lines]",
          "699:   logger.Printf(\"Error obtaining redirect: %s\", err.Error())",
          "700:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "705:   logger.Printf(\"Error clearing session cookie: %s\", err.Error())",
          "706:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "700:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "701:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "706:   logger.Printf(\"Error clearing session cookie: %v\", err)",
          "707:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "714:  prepareNoCache(rw)",
          "715:  nonce, err := encryption.Nonce()",
          "716:  if err != nil {",
          "719:   return",
          "720:  }",
          "721:  p.SetCSRFCookie(rw, req, nonce)",
          "722:  redirect, err := p.GetRedirect(req)",
          "723:  if err != nil {",
          "726:   return",
          "727:  }",
          "728:  redirectURI := p.GetRedirectURI(req.Host)",
          "",
          "[Removed Lines]",
          "717:   logger.Printf(\"Error obtaining nonce: %s\", err.Error())",
          "718:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "724:   logger.Printf(\"Error obtaining redirect: %s\", err.Error())",
          "725:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "",
          "[Added Lines]",
          "718:   logger.Printf(\"Error obtaining nonce: %v\", err)",
          "719:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "725:   logger.Printf(\"Error obtaining redirect: %v\", err)",
          "726:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "738:  err := req.ParseForm()",
          "739:  if err != nil {",
          "742:   return",
          "743:  }",
          "744:  errorString := req.Form.Get(\"error\")",
          "745:  if errorString != \"\" {",
          "748:   return",
          "749:  }",
          "751:  session, err := p.redeemCode(req.Context(), req.Host, req.Form.Get(\"code\"))",
          "752:  if err != nil {",
          "755:   return",
          "756:  }",
          "758:  s := strings.SplitN(req.Form.Get(\"state\"), \":\", 2)",
          "759:  if len(s) != 2 {",
          "760:   logger.Printf(\"Error while parsing OAuth2 state: invalid length\")",
          "762:   return",
          "763:  }",
          "764:  nonce := s[0]",
          "765:  redirect := s[1]",
          "766:  c, err := req.Cookie(p.CSRFCookieName)",
          "767:  if err != nil {",
          "770:   return",
          "771:  }",
          "772:  p.ClearCSRFCookie(rw, req)",
          "773:  if c.Value != nonce {",
          "776:   return",
          "777:  }",
          "",
          "[Removed Lines]",
          "740:   logger.Printf(\"Error while parsing OAuth2 callback: %s\" + err.Error())",
          "741:   p.ErrorPage(rw, 500, \"Internal Error\", err.Error())",
          "746:   logger.Printf(\"Error while parsing OAuth2 callback: %s \", errorString)",
          "747:   p.ErrorPage(rw, 403, \"Permission Denied\", errorString)",
          "753:   logger.Printf(\"Error redeeming code during OAuth2 callback: %s \", err.Error())",
          "754:   p.ErrorPage(rw, 500, \"Internal Error\", \"Internal Error\")",
          "761:   p.ErrorPage(rw, 500, \"Internal Error\", \"Invalid State\")",
          "768:   logger.PrintAuthf(session.Email, req, logger.AuthFailure, \"Invalid authentication via OAuth2: unable too obtain CSRF cookie\")",
          "769:   p.ErrorPage(rw, 403, \"Permission Denied\", err.Error())",
          "774:   logger.PrintAuthf(session.Email, req, logger.AuthFailure, \"Invalid authentication via OAuth2: csrf token mismatch, potential attack\")",
          "775:   p.ErrorPage(rw, 403, \"Permission Denied\", \"csrf failed\")",
          "",
          "[Added Lines]",
          "741:   logger.Printf(\"Error while parsing OAuth2 callback: %v\", err)",
          "742:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "747:   logger.Printf(\"Error while parsing OAuth2 callback: %s\", errorString)",
          "748:   p.ErrorPage(rw, http.StatusForbidden, \"Permission Denied\", errorString)",
          "754:   logger.Printf(\"Error redeeming code during OAuth2 callback: %v\", err)",
          "755:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", \"Internal Error\")",
          "762:   p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", \"Invalid State\")",
          "769:   logger.PrintAuthf(session.Email, req, logger.AuthFailure, \"Invalid authentication via OAuth2: unable to obtain CSRF cookie\")",
          "770:   p.ErrorPage(rw, http.StatusForbidden, \"Permission Denied\", err.Error())",
          "775:   logger.PrintAuthf(session.Email, req, logger.AuthFailure, \"Invalid authentication via OAuth2: CSRF token mismatch, potential attack\")",
          "776:   p.ErrorPage(rw, http.StatusForbidden, \"Permission Denied\", \"CSRF Failed\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "785:   logger.PrintAuthf(session.Email, req, logger.AuthSuccess, \"Authenticated via OAuth2: %s\", session)",
          "786:   err := p.SaveSession(rw, req, session)",
          "787:   if err != nil {",
          "790:    return",
          "791:   }",
          "792:   http.Redirect(rw, req, redirect, http.StatusFound)",
          "793:  } else {",
          "794:   logger.PrintAuthf(session.Email, req, logger.AuthFailure, \"Invalid authentication via OAuth2: unauthorized\")",
          "796:  }",
          "797: }",
          "",
          "[Removed Lines]",
          "788:    logger.Printf(\"%s %s\", remoteAddr, err)",
          "789:    p.ErrorPage(rw, 500, \"Internal Error\", \"Internal Error\")",
          "795:   p.ErrorPage(rw, 403, \"Permission Denied\", \"Invalid Account\")",
          "",
          "[Added Lines]",
          "789:    logger.Printf(\"Error saving session state for %s: %v\", remoteAddr, err)",
          "790:    p.ErrorPage(rw, http.StatusInternalServerError, \"Internal Server Error\", err.Error())",
          "796:   p.ErrorPage(rw, http.StatusForbidden, \"Permission Denied\", \"Invalid Account\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "871:   err := p.ClearSessionCookie(rw, req)",
          "872:   if err != nil {",
          "874:   }",
          "875:   return nil, ErrNeedsLogin",
          "876:  }",
          "",
          "[Removed Lines]",
          "873:    logger.Printf(\"Error clearing session cookie: %s\", err.Error())",
          "",
          "[Added Lines]",
          "874:    logger.Printf(\"Error clearing session cookie: %v\", err)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c1047866b79f896bc9382b84af95fa88c5b75bd",
      "candidate_info": {
        "commit_hash": "4c1047866b79f896bc9382b84af95fa88c5b75bd",
        "repo": "oauth2-proxy/oauth2-proxy",
        "commit_url": "https://github.com/oauth2-proxy/oauth2-proxy/commit/4c1047866b79f896bc9382b84af95fa88c5b75bd",
        "files": [
          "oauthproxy.go",
          "oauthproxy_test.go"
        ],
        "message": "fix: do not add Cache-Control header to response from auth only endpoint\n\nfix #661\nrelated #453",
        "before_after_code_files": [
          "oauthproxy.go||oauthproxy.go",
          "oauthproxy_test.go||oauthproxy_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ],
          "candidate": [
            "oauthproxy.go||oauthproxy.go",
            "oauthproxy_test.go||oauthproxy_test.go"
          ]
        }
      },
      "candidate_diff": {
        "oauthproxy.go||oauthproxy.go": [
          "File: oauthproxy.go -> oauthproxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "679: }",
          "681: func (p *OAuthProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {",
          "683:   prepareNoCache(rw)",
          "684:  }",
          "",
          "[Removed Lines]",
          "682:  if strings.HasPrefix(req.URL.Path, p.ProxyPrefix) {",
          "",
          "[Added Lines]",
          "682:  if req.URL.Path != p.AuthOnlyPath && strings.HasPrefix(req.URL.Path, p.ProxyPrefix) {",
          "",
          "---------------"
        ],
        "oauthproxy_test.go||oauthproxy_test.go": [
          "File: oauthproxy_test.go -> oauthproxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1805:  }",
          "1806: }",
          "1809:  upstream := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "1810:   w.Write([]byte(\"upstream\"))",
          "1811:  }))",
          "",
          "[Removed Lines]",
          "1808: func Test_noCacheHeadersDoesNotExistsInResponseHeadersFromUpstream(t *testing.T) {",
          "",
          "[Added Lines]",
          "1808: func Test_noCacheHeaders(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1820:  })",
          "1821:  assert.NoError(t, err)",
          "1834: }",
          "1836: func baseTestOptions() *options.Options {",
          "",
          "[Removed Lines]",
          "1823:  rec := httptest.NewRecorder()",
          "1824:  req := httptest.NewRequest(http.MethodGet, \"/upstream\", nil)",
          "1825:  proxy.ServeHTTP(rec, req)",
          "1827:  assert.Equal(t, http.StatusOK, rec.Code)",
          "1828:  assert.Equal(t, \"upstream\", rec.Body.String())",
          "1831:  for k := range noCacheHeaders {",
          "1832:   assert.Equal(t, \"\", rec.Header().Get(k))",
          "1833:  }",
          "",
          "[Added Lines]",
          "1823:  t.Run(\"not exist in response from upstream\", func(t *testing.T) {",
          "1824:   rec := httptest.NewRecorder()",
          "1825:   req := httptest.NewRequest(http.MethodGet, \"/upstream\", nil)",
          "1826:   proxy.ServeHTTP(rec, req)",
          "1828:   assert.Equal(t, http.StatusOK, rec.Code)",
          "1829:   assert.Equal(t, \"upstream\", rec.Body.String())",
          "1832:   for k := range noCacheHeaders {",
          "1833:    assert.Equal(t, \"\", rec.Header().Get(k))",
          "1834:   }",
          "1835:  })",
          "1837:  t.Run(\"has no-cache\", func(t *testing.T) {",
          "1838:   tests := []struct {",
          "1839:    path       string",
          "1840:    hasNoCache bool",
          "1841:   }{",
          "1842:    {",
          "1843:     path:       \"/oauth2/sign_in\",",
          "1844:     hasNoCache: true,",
          "1845:    },",
          "1846:    {",
          "1847:     path:       \"/oauth2/sign_out\",",
          "1848:     hasNoCache: true,",
          "1849:    },",
          "1850:    {",
          "1851:     path:       \"/oauth2/start\",",
          "1852:     hasNoCache: true,",
          "1853:    },",
          "1854:    {",
          "1855:     path:       \"/oauth2/callback\",",
          "1856:     hasNoCache: true,",
          "1857:    },",
          "1858:    {",
          "1859:     path:       \"/oauth2/auth\",",
          "1860:     hasNoCache: false,",
          "1861:    },",
          "1862:    {",
          "1863:     path:       \"/oauth2/userinfo\",",
          "1864:     hasNoCache: true,",
          "1865:    },",
          "1866:    {",
          "1867:     path:       \"/upstream\",",
          "1868:     hasNoCache: false,",
          "1869:    },",
          "1870:   }",
          "1872:   for _, tt := range tests {",
          "1873:    t.Run(tt.path, func(t *testing.T) {",
          "1874:     rec := httptest.NewRecorder()",
          "1875:     req := httptest.NewRequest(http.MethodGet, tt.path, nil)",
          "1876:     proxy.ServeHTTP(rec, req)",
          "1877:     cacheControl := rec.Result().Header.Get(\"Cache-Control\")",
          "1878:     if tt.hasNoCache != (strings.Contains(cacheControl, \"no-cache\")) {",
          "1879:      t.Errorf(`unexpected \"Cache-Control\" header: %s`, cacheControl)",
          "1880:     }",
          "1881:    })",
          "1882:   }",
          "1884:  })",
          "",
          "---------------"
        ]
      }
    }
  ]
}