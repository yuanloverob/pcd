{
  "cve_id": "CVE-2021-43781",
  "cve_desc": "Invenio-Drafts-Resources is a submission/deposit module for Invenio, a software framework for research data management. Invenio-Drafts-Resources prior to versions 0.13.7 and 0.14.6 does not properly check permissions when a record is published. The vulnerability is exploitable in a default installation of InvenioRDM. An authenticated a user is able via REST API calls to publish draft records of other users if they know the record identifier and the draft validates (e.g. all require fields filled out). An attacker is not able to modify the data in the record, and thus e.g. *cannot* change a record from restricted to public. The problem is patched in Invenio-Drafts-Resources v0.13.7 and 0.14.6, which is part of InvenioRDM v6.0.1 and InvenioRDM v7.0 respectively.",
  "repo": "inveniosoftware/invenio-drafts-resources",
  "patch_hash": "039b0cff1ad4b952000f4d8c3a93f347108b6626",
  "patch_info": {
    "commit_hash": "039b0cff1ad4b952000f4d8c3a93f347108b6626",
    "repo": "inveniosoftware/invenio-drafts-resources",
    "commit_url": "https://github.com/inveniosoftware/invenio-drafts-resources/commit/039b0cff1ad4b952000f4d8c3a93f347108b6626",
    "files": [
      "invenio_drafts_resources/services/records/service.py"
    ],
    "message": "security: fix missing permission check of publish\n\n* Invenio-Drafts-Resources does not properly check permissions when a\n  record is published. The vulnerability is exploitable in a default\n  installation of InvenioRDM. An authenticated a user is able via REST\n  API calls to publish draft records of other users if they know the\n  record identifier and the draft validates (e.g. all require fields\n  filled out). An attacker is not able to modify the data in the record,\n  and thus e.g. cannot change a record from restricted to public.",
    "before_after_code_files": [
      "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
    ]
  },
  "patch_diff": {
    "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py": [
      "File: invenio_drafts_resources/services/records/service.py -> invenio_drafts_resources/services/records/service.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:               into records)",
      "268:             - Create or update associated (published) record with data",
      "269:         \"\"\"",
      "272:         # Get the draft",
      "273:         draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
      "275:         # Validate the draft strictly - since a draft can be saved with errors",
      "276:         # we do a strict validation here to make sure only valid drafts can be",
      "",
      "[Removed Lines]",
      "270:         self.require_permission(identity, \"publish\")",
      "",
      "[Added Lines]",
      "272:         self.require_permission(identity, \"publish\", record=draft)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6be8e66a61a74c035a8a1bcf66f3dd1e795f529b",
      "candidate_info": {
        "commit_hash": "6be8e66a61a74c035a8a1bcf66f3dd1e795f529b",
        "repo": "inveniosoftware/invenio-drafts-resources",
        "commit_url": "https://github.com/inveniosoftware/invenio-drafts-resources/commit/6be8e66a61a74c035a8a1bcf66f3dd1e795f529b",
        "files": [
          ".gitignore",
          "invenio_drafts_resources/services/records/schema.py",
          "invenio_drafts_resources/services/records/service.py",
          "tests/resources/test_record_resource.py"
        ],
        "message": "service: publish draft by validating saved data [+]\n\n- adds gitignore for pipenv (long standing leftover)\n- clean up the test_record_resource.py file\n- depends on updated records-resources clean() method\n  that gets rid of dump-only fields",
        "before_after_code_files": [
          "invenio_drafts_resources/services/records/schema.py||invenio_drafts_resources/services/records/schema.py",
          "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py",
          "tests/resources/test_record_resource.py||tests/resources/test_record_resource.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ],
          "candidate": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ]
        }
      },
      "candidate_diff": {
        "invenio_drafts_resources/services/records/schema.py||invenio_drafts_resources/services/records/schema.py": [
          "File: invenio_drafts_resources/services/records/schema.py -> invenio_drafts_resources/services/records/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from invenio_records_resources.services.records.schema import \\",
          "12:     RecordSchema as RecordSchemaBase",
          "16: class RecordSchema(RecordSchemaBase):",
          "",
          "[Removed Lines]",
          "13: from marshmallow import fields, pre_load",
          "",
          "[Added Lines]",
          "13: from marshmallow import fields",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     conceptid = fields.Str(dump_only=True)",
          "20:     expires_at = fields.Str(dump_only=True)",
          "",
          "[Removed Lines]",
          "22:     @pre_load",
          "23:     def clean(self, data, **kwargs):",
          "24:         \"\"\"Removes dump_only fields.\"\"\"",
          "25:         keys = [",
          "26:             '$schema',",
          "27:             'conceptid',",
          "28:             'conceptpid',",
          "29:             'created',",
          "30:             'created',",
          "31:             'expires_at',",
          "32:             'fork_version_id',",
          "33:             'pid',",
          "34:             'updated',",
          "35:             'uuid',",
          "36:             'version_id',",
          "37:         ]",
          "38:         for k in keys:",
          "39:             data.pop(k, None)",
          "40:         return data",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py": [
          "File: invenio_drafts_resources/services/records/service.py -> invenio_drafts_resources/services/records/service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:             self, identity, draft, links_config=links_config)",
          "180:     def publish(self, id_, identity, links_config=None):",
          "182:         self.require_permission(identity, \"publish\")",
          "185:         draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
          "187:         data, _ = self.schema.load(",
          "188:             identity,",
          "190:             pid=draft.pid,",
          "191:             record=draft,",
          "192:             raise_errors=True  # this is the default, but might as well be",
          "193:                                # explicit",
          "194:         )",
          "196:         record = self.record_cls.create_or_update_from(draft)",
          "198:         # Run components",
          "",
          "[Removed Lines]",
          "181:         \"\"\"Publish a draft.\"\"\"",
          "184:         # Get draft",
          "189:             data=draft.dumps(),",
          "",
          "[Added Lines]",
          "181:         \"\"\"Publish a draft.",
          "183:         Idea:",
          "184:             - Get the draft from the data layer (draft is not passed in)",
          "185:             - Validate it more strictly than when it was originally saved",
          "186:               (drafts can be incomplete but only complete drafts can be turned",
          "187:               into records)",
          "188:             - Create or update associated (published) record with data",
          "190:         NOTE: This process of taking data from the database and validating it",
          "191:               back is tricky because there are a number of",
          "192:               data representations and transformations. There can be mistakes",
          "193:               within it as of writing. Don't take this flow as gospel yet.",
          "194:         \"\"\"",
          "197:         # Get data layer draft",
          "199:         # Convert to service layer draft result item",
          "200:         draft_item = self.result_item(",
          "201:             self, identity, draft, links_config=None  # no need for links",
          "202:         )",
          "203:         # Convert to data projection i.e. draft result item's dict form. Since",
          "204:         # there are no \"errors\" bc projection is taken directly from",
          "205:         # DB, we can use draft_item.data. This dict form is what is",
          "206:         # serialized out/deserialized in so it \"should\" be valid input to load.",
          "207:         draft_data = draft_item.data",
          "209:         # Purely used for validation purposes although we may actually want to",
          "210:         # use it...",
          "213:             data=draft_data,",
          "220:         # Create or update published record",
          "",
          "---------------"
        ],
        "tests/resources/test_record_resource.py||tests/resources/test_record_resource.py": [
          "File: tests/resources/test_record_resource.py -> tests/resources/test_record_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "2: #",
          "5: #",
          "6: # Invenio-Drafts-Resources is free software; you can redistribute it and/or",
          "7: # modify it under the terms of the MIT License; see LICENSE file for more",
          "",
          "[Removed Lines]",
          "3: # Copyright (C) 2020 CERN.",
          "4: # Copyright (C) 2020 Northwestern University.",
          "",
          "[Added Lines]",
          "3: # Copyright (C) 2020-2021 CERN.",
          "4: # Copyright (C) 2020-2021 Northwestern University.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: \"\"\"Invenio Drafts Resources module to create REST APIs\"\"\"",
          "16: from mock_module.api import Draft, Record",
          "26: def _assert_single_item_response(response):",
          "",
          "[Removed Lines]",
          "12: import json",
          "13: import time",
          "15: import pytest",
          "17: from sqlalchemy.orm.exc import NoResultFound",
          "19: from invenio_drafts_resources.resources import DraftActionResource, \\",
          "20:     DraftActionResourceConfig, DraftResource, DraftResourceConfig, \\",
          "21:     DraftVersionResource, DraftVersionResourceConfig",
          "23: HEADERS = {\"content-type\": \"application/json\", \"accept\": \"application/json\"}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: #",
          "41:     \"\"\"Test draft creation of a non-existing record.\"\"\"",
          "45:     assert response.status_code == 201",
          "46:     _assert_single_item_response(response)",
          "53:     assert response.status_code == 201",
          "55:     recid = response.json['id']",
          "59:     assert response.status_code == 200",
          "61:     _assert_single_item_response(response)",
          "68:     assert response.status_code == 201",
          "69:     assert response.json['metadata']['title'] == \\",
          "",
          "[Removed Lines]",
          "40: def test_create_draft(client, input_data, es_clear):",
          "42:     response = client.post(",
          "43:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "49: def test_read_draft(client, input_data, es_clear):",
          "50:     response = client.post(",
          "51:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "56:     response = client.get(",
          "57:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "64: def test_update_draft(client, input_data, es_clear):",
          "65:     response = client.post(",
          "66:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "",
          "[Added Lines]",
          "29: def test_create_draft(client, headers, input_data, es_clear):",
          "31:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "37: def test_read_draft(client, headers, input_data, es_clear):",
          "38:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "43:     response = client.get(f\"/mocks/{recid}/draft\", headers=headers)",
          "50: def test_update_draft(client, headers, input_data, es_clear):",
          "51:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:     # Update draft content",
          "79:     update_response = client.put(",
          "83:     )",
          "85:     assert update_response.status_code == 200",
          "",
          "[Removed Lines]",
          "80:         \"/mocks/{}/draft\".format(recid),",
          "81:         data=json.dumps(input_data),",
          "82:         headers=HEADERS",
          "",
          "[Added Lines]",
          "65:         f\"/mocks/{recid}/draft\",",
          "66:         json=input_data,",
          "67:         headers=headers",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:     assert update_response.json[\"id\"] == recid",
          "89:     # Check the updates where saved",
          "93:     assert update_response.status_code == 200",
          "94:     assert update_response.json[\"metadata\"]['title'] == edited_title",
          "95:     assert update_response.json[\"id\"] == recid",
          "102:     assert response.status_code == 201",
          "104:     recid = response.json['id']",
          "109:     assert update_response.status_code == 204",
          "111:     # Check draft deletion",
          "114:     assert update_response.status_code == 404",
          "118:     \"\"\"Create a draft and publish it.\"\"\"",
          "119:     # Create the draft",
          "123:     assert response.status_code == 201",
          "124:     recid = response.json['id']",
          "126:     # Publish it",
          "127:     response = client.post(",
          "130:     assert response.status_code == 202",
          "131:     _assert_single_item_response(response)",
          "",
          "[Removed Lines]",
          "90:     update_response = client.get(",
          "91:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "98: def test_delete_draft(client, input_data, es_clear):",
          "99:     response = client.post(",
          "100:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "106:     update_response = client.delete(",
          "107:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "112:     update_response = client.get(",
          "113:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "117: def _create_and_publish(client, input_data):",
          "120:     response = client.post(",
          "121:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "128:         \"/mocks/{}/draft/actions/publish\".format(recid), headers=HEADERS)",
          "",
          "[Added Lines]",
          "75:     update_response = client.get(f\"/mocks/{recid}/draft\", headers=headers)",
          "82: def test_delete_draft(client, headers, input_data, es_clear):",
          "83:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "89:     update_response = client.delete(f\"/mocks/{recid}/draft\", headers=headers)",
          "94:     update_response = client.get(f\"/mocks/{recid}/draft\", headers=headers)",
          "98: def _create_and_publish(client, headers, input_data):",
          "101:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "109:         f\"/mocks/{recid}/draft/actions/publish\", headers=headers",
          "110:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133:     return recid",
          "137:     \"\"\"Test draft publication of a non-existing record.",
          "139:     It has to first create said draft.",
          "140:     \"\"\"",
          "143:     # Check draft does not exists anymore",
          "147:     assert response.status_code == 404",
          "149:     # Check record exists",
          "152:     assert response.status_code == 200",
          "154:     _assert_single_item_response(response)",
          "158:     \"\"\"Tests the search over the records index.",
          "160:     Note: The three use cases are set in the same test so there is the",
          "",
          "[Removed Lines]",
          "136: def test_publish_draft(client, input_data, es_clear):",
          "141:     recid = _create_and_publish(client, input_data)",
          "144:     response = client.get(",
          "145:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "150:     response = client.get(\"/mocks/{}\".format(recid), headers=HEADERS)",
          "157: def test_search_records_and_drafts(client, input_data, es_clear):",
          "",
          "[Added Lines]",
          "118: def test_publish_draft(client, headers, input_data, es_clear):",
          "123:     recid = _create_and_publish(client, headers, input_data)",
          "126:     response = client.get(f\"/mocks/{recid}/draft\", headers=headers)",
          "131:     response = client.get(f\"/mocks/{recid}\", headers=headers)",
          "138: def test_search_records_and_drafts(client, headers, input_data, es_clear):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:           correctly more than one record/draft will be returned.",
          "163:     \"\"\"",
          "164:     # Create a draft",
          "167:     assert response.status_code == 201",
          "168:     recid = response.json['id']",
          "170:     Draft.index.refresh()",
          "173:     assert response.status_code == 200",
          "174:     assert response.json['hits']['total'] == 1",
          "175:     assert response.json['hits']['hits'][0]['id'] == recid",
          "177:     # Create a record",
          "179:     Record.index.refresh()",
          "182:     assert response.status_code == 200",
          "183:     assert response.json['hits']['total'] == 1",
          "184:     assert response.json['hits']['hits'][0]['id'] == recid",
          "186:     # Default to record search",
          "189:     assert response.status_code == 200",
          "190:     assert response.json['hits']['total'] == 1",
          "191:     assert response.json['hits']['hits'][0]['id'] == recid",
          "195:     \"\"\"Tests a non configured action call.\"\"\"",
          "196:     # NOTE: recid can be dummy since it won't reach pass the resource view",
          "197:     response = client.post(",
          "199:     )",
          "200:     assert response.status_code == 404",
          "204:     \"\"\"Tests a configured action without implemented function.\"\"\"",
          "205:     # NOTE: recid can be dummy since it won't reach pass the resource view",
          "206:     response = client.post(",
          "208:     )",
          "209:     assert response.status_code == 500",
          "",
          "[Removed Lines]",
          "165:     response = client.post(",
          "166:         \"/mocks\", data=json.dumps(input_data), headers=HEADERS)",
          "172:     response = client.get(\"/mocks?status=draft\", headers=HEADERS)",
          "178:     recid = _create_and_publish(client, input_data)",
          "181:     response = client.get(\"/mocks?status=published\", headers=HEADERS)",
          "187:     response = client.get(\"/mocks\", headers=HEADERS)",
          "194: def test_action_not_configured(client, es_clear):",
          "198:         \"/mocks/1234-abcd/draft/actions/non-configured\", headers=HEADERS",
          "203: def test_command_not_implemented(client, es_clear):",
          "207:         \"/mocks/1234-abcd/draft/actions/command\", headers=HEADERS",
          "",
          "[Added Lines]",
          "146:     response = client.post(\"/mocks\", json=input_data, headers=headers)",
          "152:     response = client.get(\"/mocks?status=draft\", headers=headers)",
          "158:     recid = _create_and_publish(client, headers, input_data)",
          "161:     response = client.get(\"/mocks?status=published\", headers=headers)",
          "167:     response = client.get(\"/mocks\", headers=headers)",
          "174: def test_action_not_configured(client, headers, es_clear):",
          "178:         \"/mocks/1234-abcd/draft/actions/non-configured\", headers=headers",
          "183: def test_command_not_implemented(client, headers, es_clear):",
          "187:         \"/mocks/1234-abcd/draft/actions/command\", headers=headers",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "214: # therefore these tests do not assert their output)",
          "215: #",
          "218:     \"\"\"Test draft creation of an existing record and publish it.\"\"\"",
          "221:     # Create new draft of said record",
          "222:     orig_title = input_data[\"metadata\"][\"title\"]",
          "223:     input_data[\"metadata\"][\"title\"] = \"Edited title\"",
          "229:     assert response.status_code == 201",
          "230:     assert response.json['revision_id'] == 4",
          "",
          "[Removed Lines]",
          "217: def test_create_publish_new_revision(client, input_data, es_clear):",
          "219:     recid = _create_and_publish(client, input_data)",
          "224:     response = client.post(",
          "225:         \"/mocks/{}/draft\".format(recid),",
          "226:         headers=HEADERS",
          "227:     )",
          "",
          "[Added Lines]",
          "197: def test_create_publish_new_revision(client, headers, input_data, es_clear):",
          "199:     recid = _create_and_publish(client, headers, input_data)",
          "204:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233:     # Update that new draft",
          "234:     response = client.put(",
          "238:     )",
          "240:     assert response.status_code == 200",
          "242:     # Check the actual record was not modified",
          "246:     assert response.status_code == 200",
          "247:     _assert_single_item_response(response)",
          "",
          "[Removed Lines]",
          "235:         \"/mocks/{}/draft\".format(recid),",
          "236:         data=json.dumps(input_data),",
          "237:         headers=HEADERS",
          "243:     response = client.get(",
          "244:         \"/mocks/{}\".format(recid), headers=HEADERS)",
          "",
          "[Added Lines]",
          "212:         f\"/mocks/{recid}/draft\",",
          "213:         json=input_data,",
          "214:         headers=headers",
          "220:     response = client.get(f\"/mocks/{recid}\", headers=headers)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "250:     # Publish it to check the increment in reversion",
          "251:     response = client.post(",
          "254:     assert response.status_code == 202",
          "255:     _assert_single_item_response(response)",
          "",
          "[Removed Lines]",
          "252:         \"/mocks/{}/draft/actions/publish\".format(recid), headers=HEADERS)",
          "",
          "[Added Lines]",
          "228:         f\"/mocks/{recid}/draft/actions/publish\", headers=headers",
          "229:     )",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "260:         input_data[\"metadata\"][\"title\"]",
          "262:     # Check it was actually edited",
          "266:     assert response.json['metadata']['title'] == \\",
          "267:         input_data[\"metadata\"][\"title\"]",
          "271:     \"\"\"Test the revision_id when editing record multiple times.",
          "273:     This tests the `edit` service method.",
          "274:     \"\"\"",
          "275:     # Needs `app` context because of invenio_access/permissions.py#166",
          "278:     # Create new draft of said record",
          "282:     assert response.status_code == 201",
          "283:     assert response.json['revision_id'] == 4",
          "285:     # Request a second edit. Get the same draft (revision_id)",
          "289:     assert response.status_code == 201",
          "290:     assert response.json['revision_id'] == 4",
          "292:     # Publish it to check the increment in version_id",
          "293:     response = client.post(",
          "296:     assert response.status_code == 202",
          "298:     # Edit again",
          "302:     assert response.status_code == 201",
          "303:     assert response.json['revision_id'] == 7",
          "307:     \"\"\"Creates a new version of a record.",
          "309:     Publishes the draft to obtain 2 versions of a record.",
          "310:     \"\"\"",
          "313:     # Create new draft of said record",
          "317:     assert response.status_code == 201",
          "318:     _assert_single_item_response(response)",
          "",
          "[Removed Lines]",
          "263:     response = client.get(",
          "264:         \"/mocks/{}\".format(recid), headers=HEADERS)",
          "270: def test_mutiple_edit(client, input_data, es_clear):",
          "276:     recid = _create_and_publish(client, input_data)",
          "279:     response = client.post(",
          "280:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "286:     response = client.post(",
          "287:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "294:         \"/mocks/{}/draft/actions/publish\".format(recid), headers=HEADERS)",
          "299:     response = client.post(",
          "300:         \"/mocks/{}/draft\".format(recid), headers=HEADERS)",
          "306: def test_create_publish_new_version(client, input_data):",
          "311:     recid = _create_and_publish(client, input_data)",
          "314:     response = client.post(",
          "315:         \"/mocks/{}/versions\".format(recid), headers=HEADERS)",
          "",
          "[Added Lines]",
          "240:     response = client.get(f\"/mocks/{recid}\", headers=headers)",
          "246: def test_mutiple_edit(client, headers, input_data, es_clear):",
          "252:     recid = _create_and_publish(client, headers, input_data)",
          "255:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "261:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "268:         f\"/mocks/{recid}/draft/actions/publish\", headers=headers",
          "269:     )",
          "274:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "280: def test_create_publish_new_version(client, headers, input_data):",
          "285:     recid = _create_and_publish(client, headers, input_data)",
          "288:     response = client.post(f\"/mocks/{recid}/versions\", headers=headers)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "322:     # Publish it to check the increment in version",
          "323:     response = client.post(",
          "326:     assert response.status_code == 202",
          "327:     _assert_single_item_response(response)",
          "",
          "[Removed Lines]",
          "324:         \"/mocks/{}/draft/actions/publish\".format(recid_2), headers=HEADERS)",
          "",
          "[Added Lines]",
          "297:         f\"/mocks/{recid_2}/draft/actions/publish\", headers=headers",
          "298:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "836491ebf0f6fe5851cc3e8a8f8142678c0c7797",
      "candidate_info": {
        "commit_hash": "836491ebf0f6fe5851cc3e8a8f8142678c0c7797",
        "repo": "inveniosoftware/invenio-drafts-resources",
        "commit_url": "https://github.com/inveniosoftware/invenio-drafts-resources/commit/836491ebf0f6fe5851cc3e8a8f8142678c0c7797",
        "files": [
          "invenio_drafts_resources/records/__init__.py",
          "invenio_drafts_resources/records/api.py",
          "invenio_drafts_resources/records/models.py",
          "invenio_drafts_resources/records/systemfields/__init__.py",
          "invenio_drafts_resources/records/systemfields/parent.py",
          "invenio_drafts_resources/records/systemfields/versions.py",
          "invenio_drafts_resources/services/records/components.py",
          "invenio_drafts_resources/services/records/permissions.py",
          "invenio_drafts_resources/services/records/schema.py",
          "invenio_drafts_resources/services/records/service.py",
          "tests/mock_module/api.py",
          "tests/mock_module/models.py",
          "tests/mock_module/permissions.py",
          "tests/records/test_api.py",
          "tests/resources/test_record_resource.py",
          "tests/services/test_record_service.py"
        ],
        "message": "records/service: implement new version creation\n\n* Adds a new parent record state to manage what is considered the\n  latest record and latest draft.\n\n* Adds a index so that versions can be ordered.\n\n* Adds support for creating new versions.",
        "before_after_code_files": [
          "invenio_drafts_resources/records/__init__.py||invenio_drafts_resources/records/__init__.py",
          "invenio_drafts_resources/records/api.py||invenio_drafts_resources/records/api.py",
          "invenio_drafts_resources/records/models.py||invenio_drafts_resources/records/models.py",
          "invenio_drafts_resources/records/systemfields/__init__.py||invenio_drafts_resources/records/systemfields/__init__.py",
          "invenio_drafts_resources/records/systemfields/parent.py||invenio_drafts_resources/records/systemfields/parent.py",
          "invenio_drafts_resources/records/systemfields/versions.py||invenio_drafts_resources/records/systemfields/versions.py",
          "invenio_drafts_resources/services/records/components.py||invenio_drafts_resources/services/records/components.py",
          "invenio_drafts_resources/services/records/permissions.py||invenio_drafts_resources/services/records/permissions.py",
          "invenio_drafts_resources/services/records/schema.py||invenio_drafts_resources/services/records/schema.py",
          "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py",
          "tests/mock_module/api.py||tests/mock_module/api.py",
          "tests/mock_module/models.py||tests/mock_module/models.py",
          "tests/mock_module/permissions.py||tests/mock_module/permissions.py",
          "tests/records/test_api.py||tests/records/test_api.py",
          "tests/resources/test_record_resource.py||tests/resources/test_record_resource.py",
          "tests/services/test_record_service.py||tests/services/test_record_service.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ],
          "candidate": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ]
        }
      },
      "candidate_diff": {
        "invenio_drafts_resources/records/__init__.py||invenio_drafts_resources/records/__init__.py": [
          "File: invenio_drafts_resources/records/__init__.py -> invenio_drafts_resources/records/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: \"\"\"Drafts data access layer API.\"\"\"",
          "11: from .api import Draft, Record",
          "14: __all__ = (",
          "15:     \"Draft\",",
          "16:     \"DraftMetadataBase\",",
          "17:     \"ParentRecordMixin\",",
          "18:     \"Record\",",
          "19: )",
          "",
          "[Removed Lines]",
          "12: from .models import DraftMetadataBase, ParentRecordMixin",
          "",
          "[Added Lines]",
          "12: from .models import DraftMetadataBase, ParentRecordMixin, \\",
          "13:     ParentRecordStateMixin",
          "19:     \"ParentRecordStateMixin\",",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/records/api.py||invenio_drafts_resources/records/api.py": [
          "File: invenio_drafts_resources/records/api.py -> invenio_drafts_resources/records/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "2: #",
          "4: #",
          "5: # Invenio-Drafts-Resources is free software; you can redistribute it and/or",
          "6: # modify it under the terms of the MIT License; see LICENSE file for more",
          "7: # details.",
          "11: from invenio_pidstore.models import PIDStatus",
          "12: from invenio_pidstore.providers.recordid_v2 import RecordIdProviderV2",
          "",
          "[Removed Lines]",
          "3: # Copyright (C) 2020 CERN.",
          "9: \"\"\"Draft API.\"\"\"",
          "",
          "[Added Lines]",
          "3: # Copyright (C) 2020-2021 CERN.",
          "9: \"\"\"Record, Draft and Parent Record API classes.",
          "11: These classes belongs to the  data access layer and MUST ONLY be accessed from",
          "12: within the service layer. It's wrong to use these classes in the presentation",
          "13: layer.",
          "15: A record and a draft share a single parent record. The parent record is used",
          "16: to store properties common to all versions of a record (e.g. access control).",
          "18: The draft and record share the same UUID, and thus both also share a single",
          "19: persistent identifier. The parent record has its own UUID and own persistent",
          "20: identifier.",
          "21: \"\"\"",
          "23: import uuid",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:     PIDStatusCheckField",
          "17: from sqlalchemy.orm.exc import NoResultFound",
          "20: class DraftRecordIdProviderV2(RecordIdProviderV2):",
          "21:     \"\"\"Draft PID provider.\"\"\"",
          "23:     default_status_with_obj = PIDStatus.NEW",
          "26: class ParentRecord(RecordBase):",
          "27:     \"\"\"Parent record API.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: from .systemfields import ParentField, VersionsField",
          "36: #",
          "37: # Persistent identifier providers",
          "38: #",
          "45: #",
          "46: # Record API classes",
          "47: #",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: class Record(RecordBase):",
          "42:     model_cls = None",
          "44:     pid = PIDField('id', provider=DraftRecordIdProviderV2, delete=True)",
          "46:     is_published = PIDStatusCheckField(status=PIDStatus.REGISTERED)",
          "58:     @classmethod",
          "75:         return record",
          "85:     def register(self):",
          "87:         if not self.parent.pid.is_registered():",
          "88:             self.parent.pid.register()",
          "89:             self.parent.commit()",
          "",
          "[Removed Lines]",
          "36:     \"\"\"Record base API.",
          "38:     Note: This class is meant to work along a with a draft class.",
          "39:     \"\"\"",
          "41:     # Configuration",
          "48:     #: List of field names (strings) to copy from the draft on create.",
          "49:     create_from_draft = []",
          "51:     #: List of field names (strings) to copy from the draft on update.",
          "52:     update_from_draft = []",
          "54:     # TODO: Below three methods create_from(), update_from() and register() has",
          "55:     # to be refactored. They are accessing \"parent\" but it may not be defined.",
          "56:     # Instead, this work should be delegated to the system fields, but it's not",
          "57:     # easy to add a new pre/post_create_from pre/post_register hook.",
          "59:     def create_from(cls, draft):",
          "60:         \"\"\"Create a new record from a draft.\"\"\"",
          "61:         record = cls.create(",
          "62:             {},",
          "63:             id_=draft.id,",
          "64:             pid=draft.pid,",
          "66:         )",
          "68:         # NOTE: Merge pid into the current db session if not already in the",
          "69:         # session.",
          "70:         cls.pid.session_merge(record)",
          "71:         record.parent.__class__.pid.session_merge(record.parent)",
          "73:         record.update_from(draft)",
          "77:     def update_from(self, draft):",
          "78:         \"\"\"Update a record from a draft.\"\"\"",
          "79:         # Overwrite data",
          "80:         self.update(**draft)",
          "81:         for f in self.update_from_draft:",
          "82:             setattr(self, f, getattr(draft, f))",
          "83:         return self",
          "86:         \"\"\"Register the persistent identifiers associated with the record.\"\"\"",
          "",
          "[Added Lines]",
          "58:     \"\"\"Record API.\"\"\"",
          "60:     #",
          "61:     # Configuration to be set by a subclass",
          "62:     #",
          "64:     #: The record's SQLAlchemy model class. Must be set by the subclass.",
          "66:     #: The parent state's SQLAlchemy model class. Must be set by the subclass.",
          "67:     versions_model_cls = None",
          "68:     #: The parent record's API class. Must be set by the subclass.",
          "69:     parent_record_cls = None",
          "71:     #",
          "72:     # System fields",
          "73:     #",
          "74:     #: The internal persistent identifier. Records and drafts share UUID.",
          "77:     #: System field to check if a record has been published.",
          "80:     #: The parent record - the draft is responsible for creating the parent.",
          "81:     parent = ParentField(",
          "82:         ParentRecord, create=False, soft_delete=False, hard_delete=False)",
          "84:     #: Version relationship",
          "85:     versions = VersionsField(create=True, set_latest=True)",
          "88:     def publish(cls, draft):",
          "89:         \"\"\"Publish a draft as a new record.",
          "91:         If a record already exists, we simply get the record. If a draft has",
          "92:         not yet been published, we create the record.",
          "94:         The caller is responsible for registering the internal persistent",
          "95:         identifiers (see ``register()``).",
          "96:         \"\"\"",
          "97:         if draft.is_published:",
          "98:             record = cls.get_record(draft.id)",
          "99:         else:",
          "100:             record = cls.create(",
          "101:                 {},",
          "102:                 # A draft and record share UUID, so we reuse the draft's id/pid",
          "103:                 id_=draft.id,",
          "104:                 pid=draft.pid,",
          "105:                 # Link the record with the parent record and set the versioning",
          "106:                 # relationship.",
          "107:                 parent=draft.parent,",
          "108:                 versions=draft.versions,",
          "109:             )",
          "110:             # Merge the PIDs into the current db session if not already in the",
          "111:             # session.",
          "112:             cls.pid.session_merge(record)",
          "113:             cls.parent_record_cls.pid.session_merge(record.parent)",
          "117:         \"\"\"Register the internal persistent identifiers.\"\"\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93: class Draft(Record):",
          "94:     \"\"\"Draft base API for metadata creation and manipulation.\"\"\"",
          "98:     model_cls = None",
          "100:     pid = PIDField('id', provider=DraftRecordIdProviderV2, delete=False)",
          "102:     expires_at = ModelField()",
          "104:     fork_version_id = ModelField()",
          "",
          "[Removed Lines]",
          "96:     # WHY: We want to force the model_cls to be specified by the user",
          "97:     # No default one is given, only the base.",
          "",
          "[Added Lines]",
          "127:     #",
          "128:     # Configuration to be set by a subclass",
          "129:     #",
          "131:     #: The record's SQLAlchemy model class. Must be set by the subclass.",
          "133:     #: The parent state's SQLAlchemy model class. Must be set by the subclass.",
          "134:     versions_model_cls = None",
          "135:     #: The parent record's API class. Must be set by the subclass.",
          "136:     parent_record_cls = None",
          "138:     #",
          "139:     # System fields",
          "140:     #",
          "142:     #: The internal persistent identifier. Records and drafts share UUID.",
          "145:     #: The parent record - the draft is responsible for creating the parent.",
          "146:     parent = ParentField(",
          "147:         ParentRecord, create=True, soft_delete=False, hard_delete=True)",
          "149:     #: Version relationship",
          "150:     versions = VersionsField(create=True, set_next=True)",
          "152:     #: The expiry date of the draft.",
          "155:     #: Revision id of record from which this draft was created.",
          "158:     @classmethod",
          "159:     def new_version(cls, record):",
          "160:         \"\"\"Create a draft for a new version of a record.",
          "162:         The caller is responsible for:",
          "163:         1) checking if a draft for a new version already exists",
          "164:         2) moving the record data into the draft data.",
          "165:         \"\"\"",
          "166:         return cls.create(",
          "167:             {},",
          "168:             # We create a new id, because this is for a new version.",
          "169:             id=uuid.uuid4(),",
          "170:             # Links the draft with the same parent (i.e. a new version).",
          "171:             parent=record.parent,",
          "172:             versions=record.versions,",
          "173:             # New drafts without a record (i.e. unpublished drafts) must set",
          "174:             # the fork version id to None.",
          "175:             fork_version_id=None,",
          "176:         )",
          "178:     @classmethod",
          "179:     def edit(cls, record):",
          "180:         \"\"\"Create a draft for editing an existing version of a record.\"\"\"",
          "181:         try:",
          "182:             # We soft-delete a draft once it has been published, in order to",
          "183:             # keep the version_id counter around for optimistic concurrency",
          "184:             # control (both for ES indexing and for REST API clients)",
          "185:             draft = cls.get_record(record.id, with_deleted=True)",
          "186:             if draft.is_deleted:",
          "187:                 draft.undelete()",
          "188:                 # Below line is needed to dump PID back into the draft.",
          "189:                 draft.pid = record.pid",
          "190:                 # Ensure record is link with the parent",
          "191:                 draft.parent = record.parent",
          "192:                 draft.versions = record.versions",
          "193:                 # Ensure we record the revision id we forked from",
          "194:                 draft.fork_version_id = record.revision_id",
          "195:                 # Note, other values like bucket_id values was kept in the",
          "196:                 # soft-deleted record, so we are not setting them again here.",
          "197:         except NoResultFound:",
          "198:             # If a draft was ever force deleted, then we will create the draft.",
          "199:             # This is a very exceptional case as normally, when we edit a",
          "200:             # record then the soft-deleted draft exists and we are in above",
          "201:             # case.",
          "202:             draft = cls.create(",
          "203:                 {},",
          "204:                 # A draft to edit a record must share the id and uuid.",
          "205:                 id_=record.id,",
          "206:                 pid=record.pid,",
          "207:                 # Link it with the same parent record",
          "208:                 parent=record.parent,",
          "209:                 versions=record.versions,",
          "210:                 # Record which record version we forked from.",
          "211:                 fork_version_id=record.revision_id,",
          "212:             )",
          "213:         return draft",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/records/models.py||invenio_drafts_resources/records/models.py": [
          "File: invenio_drafts_resources/records/models.py -> invenio_drafts_resources/records/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from sqlalchemy_utils.types import UUIDType",
          "21:     \"\"\"A mixin factory that add the foreign keys to the parent record.",
          "25:     \"\"\"",
          "40: class DraftMetadataBase(RecordMetadataBase):",
          "",
          "[Removed Lines]",
          "20: def ParentRecordMixin(parent_record_cls):",
          "23:     It is intended to be added to the \"child\" record class, e.g.:",
          "24:     ``class MyRecord(RecordBase, ParentRecordMixin(MyRecordParentClass))``.",
          "26:     class Mixin:",
          "27:         @declared_attr",
          "28:         def parent_id(cls):",
          "29:             return db.Column(UUIDType, db.ForeignKey(parent_record_cls.id))",
          "31:         @declared_attr",
          "32:         def parent(cls):",
          "33:             return db.relationship(parent_record_cls)",
          "35:         # TODO: Add parent_order and/or parent_latest",
          "36:         # TODO: Should both records and drafts have an order?",
          "37:     return Mixin",
          "",
          "[Added Lines]",
          "20: class ParentRecordMixin:",
          "23:     Usage:",
          "25:     .. code-block:: python",
          "27:         class MyRecord(db.Model, RecordMetadataBase, ParentRecordMixin):",
          "28:             __parent_record_model__ = ParentRecordMetadata",
          "29:     \"\"\"",
          "31:     __parent_record_model__ = None",
          "33:     @declared_attr",
          "34:     def parent_id(cls):",
          "35:         \"\"\"Parent identifier.\"\"\"",
          "36:         # We restrict deletion of the parent record in case a record or draft",
          "37:         # exists via database-level trigger.",
          "38:         return db.Column(UUIDType, db.ForeignKey(",
          "39:             cls.__parent_record_model__.id, ondelete=\"RESTRICT\"))",
          "41:     @declared_attr",
          "42:     def parent(cls):",
          "43:         \"\"\"Relationship to parent record.\"\"\"",
          "44:         return db.relationship(cls.__parent_record_model__)",
          "46:     parent_index = db.Column(db.Integer, nullable=True)",
          "47:     \"\"\"The version index of the record.\"\"\"",
          "50: class ParentRecordStateMixin:",
          "51:     \"\"\"Database model mixin to keep the state of the latest and next version.",
          "53:     We keep this data outside the parent record itself, because we want to",
          "54:     update it without impacting the parent record's version counter. The",
          "55:     version counter in the parent record we use to determine if we have to",
          "56:     reindex all record versions.",
          "58:     Usage:",
          "60:     .. code-block:: python",
          "62:         class MyParentState(db.Model, ParentRecordState):",
          "63:             __parent_record_model__ = MyParentRecord",
          "64:             __draft_model__ = MyDraft",
          "65:             __record_model__ = MyRecord",
          "66:     \"\"\"",
          "68:     __parent_record_model__ = None",
          "69:     __record_model__ = None",
          "70:     __draft_model__ = None",
          "72:     @declared_attr",
          "73:     def parent_id(cls):",
          "74:         \"\"\"Parent record identifier.\"\"\"",
          "75:         return db.Column(",
          "76:             UUIDType,",
          "77:             # 1) If the parent record is deleted, we automatically delete",
          "78:             # the state as well via database-level on delete trigger.",
          "79:             # 2) A parent can only be deleted, if it has no drafts/records via",
          "80:             # FKs from drafts/records to the parent.",
          "81:             db.ForeignKey(cls.__parent_record_model__.id, ondelete=\"CASCADE\"),",
          "82:             primary_key=True,",
          "83:         )",
          "85:     @declared_attr",
          "86:     def latest_id(cls):",
          "87:         \"\"\"UUID of the latest published record/draft.",
          "89:         Note, since a record and draft share the same UUID, the UUID can be",
          "90:         used to get both the record or the draft. It's a foreign key to the",
          "91:         record to ensure that the record exists (and thus is published).",
          "93:         If no record has been published, the value is None.",
          "94:         \"\"\"",
          "95:         return db.Column(",
          "96:             UUIDType,",
          "97:             db.ForeignKey(cls.__record_model__.id),",
          "98:             nullable=True,",
          "99:         )",
          "101:     latest_index = db.Column(db.Integer, nullable=True)",
          "102:     \"\"\"The index of the latest published record.",
          "104:     If no record has been published, the value is None.",
          "107:     @declared_attr",
          "108:     def next_draft_id(cls):",
          "109:         \"\"\"UUID of the draft for the next version (yet to be published).",
          "111:         Note, since a record and draft share the same UUID, the UUID can be",
          "112:         used to get both the record or the draft. It's a foreign key to the",
          "113:         draft, because we use it to track if a draft has been created for the",
          "114:         next version.",
          "116:         If no draft for the next version has been created, the value is None.",
          "117:         \"\"\"",
          "118:         return db.Column(",
          "119:             UUIDType,",
          "120:             db.ForeignKey(cls.__draft_model__.id),",
          "121:             nullable=True,",
          "122:         )",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/records/systemfields/__init__.py||invenio_drafts_resources/records/systemfields/__init__.py": [
          "File: invenio_drafts_resources/records/systemfields/__init__.py -> invenio_drafts_resources/records/systemfields/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: \"\"\"System fields.\"\"\"",
          "11: from .parent import ParentField",
          "13: __all__ = (",
          "14:     \"ParentField\",",
          "15: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from .versions import VersionsField",
          "16:     \"VersionsField\",",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/records/systemfields/parent.py||invenio_drafts_resources/records/systemfields/parent.py": [
          "File: invenio_drafts_resources/records/systemfields/parent.py -> invenio_drafts_resources/records/systemfields/parent.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: \"\"\"Parent record system field.\"\"\"",
          "11: from invenio_records.systemfields import RelatedModelField",
          "14: class ParentField(RelatedModelField):",
          "15:     \"\"\"Parent record field.\"\"\"",
          "18:                  soft_delete=True, hard_delete=True):",
          "19:         \"\"\"Initialize the parent field.\"\"\"",
          "23:         self._soft_delete = soft_delete",
          "24:         self._hard_delete = hard_delete",
          "25:         self._create = create",
          "26:         super().__init__(",
          "28:             key=key,",
          "29:             required=True,",
          "30:             dump=self.dump_parent,",
          "",
          "[Removed Lines]",
          "17:     def __init__(self, parent_record_cls, key=None, create=False,",
          "20:         # Note, self._parent_record_cls == self._model, we duplicate it for",
          "21:         # clarity of naming.",
          "22:         self._parent_record_cls = parent_record_cls",
          "27:             parent_record_cls,",
          "",
          "[Added Lines]",
          "11: from invenio_db import db",
          "13: from sqlalchemy.exc import IntegrityError",
          "19:     def __init__(self, model, key=None, create=False,",
          "26:             model,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     def create(self, record):",
          "35:         \"\"\"Method to create the parent record for the record.\"\"\"",
          "45:         return parent",
          "47:     def delete(self, record, force=False):",
          "49:         parent = getattr(record, self.attr_name)",
          "50:         if parent:",
          "51:             if force and self._hard_delete:",
          "53:             elif not force and self._soft_delete:",
          "54:                 parent.delete(force=False)",
          "",
          "[Removed Lines]",
          "36:         # Create a parent record",
          "37:         parent = self._parent_record_cls.create({})",
          "38:         # This bumps revision id to 2 for the first record. Commit needed",
          "39:         # because of the system fields defined on the parent record (e.g. pid).",
          "40:         parent.commit()",
          "42:         # Set using the __set__() method",
          "43:         setattr(record, self.attr_name, parent)",
          "48:         \"\"\"Method to delete the parent record.\"\"\"",
          "52:                 parent.delete(force=True)",
          "",
          "[Added Lines]",
          "35:         parent = getattr(record, self.attr_name)",
          "36:         if parent is None:",
          "37:             # Create a parent record",
          "38:             parent = record.parent_record_cls.create({})",
          "39:             # This bumps revision id to 2 for the first record. Commit needed",
          "40:             # because of the system fields defined on the parent record (e.g.",
          "41:             # pid).",
          "42:             parent.commit()",
          "44:             # Set using the __set__() method",
          "45:             setattr(record, self.attr_name, parent)",
          "49:         \"\"\"Method to delete the parent record.",
          "51:         The parent record will only be hard deleted if this is the last",
          "52:         record/draft with links to it.",
          "53:         \"\"\"",
          "54:         # A *record* is configured to never delete the parent",
          "55:         # automatically.",
          "56:         # A *draft* is configured to delete the parent on hard delete but not",
          "57:         # on soft delete.",
          "58:         #",
          "59:         # A draft may be hard-deleted in two cases: 1) a new record 2) a new",
          "60:         # record version. In the case 1, only a draft and the parent record",
          "61:         # exists. In case 2, one or more drafts/records may exists with a",
          "62:         # foreign key to the parent record.",
          "63:         #",
          "64:         # The logic implemented here, thus on a hard delete tries to delete the",
          "65:         # the parent record and relies on the database integrity constraints",
          "66:         # to prevent the parent record from being deleted in case more",
          "67:         # drafts/records exists.",
          "71:                 try:",
          "72:                     with db.session.begin_nested():",
          "73:                         parent.delete(force=True)",
          "74:                 except IntegrityError:",
          "75:                     # It's ok - the draft/record linking to this parent is not",
          "76:                     # the last one.",
          "77:                     pass",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         \"\"\"Called after a record was loaded.\"\"\"",
          "79:         parent_dump = record.pop(self.attr_name, None)",
          "80:         if parent_dump:",
          "82:             setattr(record, self.attr_name, parent)",
          "84:     #",
          "",
          "[Removed Lines]",
          "81:             parent = self._parent_record_cls.loads(parent_dump, loader=loader)",
          "",
          "[Added Lines]",
          "106:             parent = record.parent_record_cls.loads(parent_dump, loader=loader)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:     def load_parent(field, record):",
          "89:         \"\"\"Serializer the object into a record.\"\"\"",
          "90:         if record.model.parent_id:",
          "92:         return None",
          "94:     @staticmethod",
          "",
          "[Removed Lines]",
          "91:             return field._parent_record_cls.get_record(record.model.parent_id)",
          "",
          "[Added Lines]",
          "116:             return record.parent_record_cls.get_record(record.model.parent_id)",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/records/systemfields/versions.py||invenio_drafts_resources/records/systemfields/versions.py": [
          "File: invenio_drafts_resources/records/systemfields/versions.py -> invenio_drafts_resources/records/systemfields/versions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "2: #",
          "3: # Copyright (C) 2021 CERN.",
          "4: #",
          "5: # Invenio-Drafts-Resources is free software; you can redistribute it and/or",
          "6: # modify it under the terms of the MIT License; see LICENSE file for more",
          "7: # details.",
          "9: \"\"\"Versions field.\"\"\"",
          "11: import uuid",
          "12: from copy import copy",
          "14: from invenio_db import db",
          "15: from invenio_records.systemfields import RelatedModelField",
          "16: from invenio_records.systemfields.base import SystemField",
          "17: from sqlalchemy import inspect",
          "18: from sqlalchemy.exc import IntegrityError",
          "21: def uuid_or_none(val):",
          "22:     \"\"\"Convert string to UUID object.\"\"\"",
          "23:     if val is not None and not isinstance(val, uuid.UUID):",
          "24:         return uuid.UUID(val)",
          "25:     return val",
          "28: class VersionsManager:",
          "29:     \"\"\"Versions state manager.\"\"\"",
          "31:     def __init__(self, record, dump=None):",
          "32:         \"\"\"Initialize the versions manager.\"\"\"",
          "33:         self._record = record",
          "34:         self._state = None",
          "35:         if dump is not None:",
          "36:             self.load(dump)",
          "38:     def copy_to(self, record):",
          "39:         \"\"\"Create a copy of the version manager and set on another record.\"\"\"",
          "40:         record.model.parent_index = self.parent_index",
          "41:         version_manager = self.__class__(record)",
          "42:         version_manager._state = self._state",
          "43:         return version_manager",
          "45:     #",
          "46:     # Record managed attributes",
          "47:     #",
          "48:     @property",
          "49:     def model_cls(self):",
          "50:         \"\"\"Get versions state management model.\"\"\"",
          "51:         return self._record.versions_model_cls",
          "53:     @property",
          "54:     def parent_id(self):",
          "55:         \"\"\"Get versions state management model.\"\"\"",
          "56:         return self._record.model.parent_id",
          "58:     @property",
          "59:     def parent_index(self):",
          "60:         \"\"\"Get the parent index.\"\"\"",
          "61:         return self._record.model.parent_index",
          "63:     #",
          "64:     # Parent managed attributes",
          "65:     #",
          "66:     @property",
          "67:     def latest_id(self):",
          "68:         \"\"\"The id of the latest published record/draft.\"\"\"",
          "69:         return self.state().latest_id",
          "71:     @property",
          "72:     def latest_index(self):",
          "73:         \"\"\"The index of the latest published record/draft.\"\"\"",
          "74:         return self.state().latest_index",
          "76:     @property",
          "77:     def next_draft_id(self):",
          "78:         \"\"\"The id of the next draft (and record).\"\"\"",
          "79:         return self.state().next_draft_id",
          "81:     #",
          "82:     # Computed attributes",
          "83:     #",
          "84:     @property",
          "85:     def is_latest(self):",
          "86:         \"\"\"Check if the record/draft id is the latest published record id.\"\"\"",
          "87:         return self.latest_id == self._record.id",
          "89:     @property",
          "90:     def is_latest_draft(self):",
          "91:         \"\"\"Check if the record/draft id is the latest draft id.\"\"\"",
          "92:         if self.next_draft_id:",
          "93:             return self.next_draft_id == self._record.id",
          "94:         else:",
          "95:             return self.latest_id == self._record.id",
          "97:     @property",
          "98:     def next_index(self):",
          "99:         \"\"\"Get the next parent index.\"\"\"",
          "100:         return self.latest_index + 1 if self.latest_index is not None else 1",
          "102:     #",
          "103:     # State management methods",
          "104:     #",
          "105:     def state(self, refresh=False):",
          "106:         \"\"\"Retrieve the versions state.\"\"\"",
          "107:         if self._state is None or refresh:",
          "108:             # Get object if it exists",
          "109:             self._state = self.model_cls.query.filter_by(",
          "110:                 parent_id=self.parent_id).one_or_none()",
          "111:             if self._state is None:",
          "112:                 # Object doesn't exists, so create it.",
          "113:                 self._state = self.model_cls(parent_id=self.parent_id)",
          "114:                 db.session.add(self._state)",
          "115:         return self._state",
          "117:     def set_next(self):",
          "118:         \"\"\"Set this record as the next draft.\"\"\"",
          "119:         self.state().next_draft_id = self._record.id",
          "120:         self._record.model.parent_index = self.next_index",
          "122:     def clear_next(self):",
          "123:         \"\"\"Unset this record as the next draft.\"\"\"",
          "124:         self.state().next_draft_id = None",
          "125:         self._record.model.parent_index = None",
          "127:     def set_latest(self):",
          "128:         \"\"\"Set this record as the latest published record.\"\"\"",
          "129:         self.state().latest_id = self._record.id",
          "130:         self.state().latest_index = self.parent_index",
          "131:         self.state().next_draft_id = None",
          "133:     #",
          "134:     # Dump/load",
          "135:     #",
          "136:     def dump(self):",
          "137:         \"\"\"Dump the versions state to the index.\"\"\"",
          "138:         return dict(",
          "139:             latest_id=self.latest_id,",
          "140:             latest_index=self.latest_index,",
          "141:             next_draft_id=self.next_draft_id,",
          "142:             is_latest=self.is_latest,",
          "143:             is_latest_draft=self.is_latest_draft,",
          "144:             parent_index=self.parent_index,",
          "145:         )",
          "147:     def load(self, dump):",
          "148:         \"\"\"Load the state.\"\"\"",
          "149:         self._state = self.model_cls(",
          "150:             parent_id=self.parent_id,",
          "151:             latest_id=uuid_or_none(dump['latest_id']),",
          "152:             latest_index=dump['latest_index'],",
          "153:             next_draft_id=uuid_or_none(dump['next_draft_id']),",
          "154:         )",
          "155:         if self.parent_index != dump['parent_index']:",
          "156:             self._record.model.parent_index = dump['parent_index']",
          "158:     def __repr__(self):",
          "159:         \"\"\"Return repr(self).\"\"\"",
          "160:         return (",
          "161:             \"<{} (parent_id: {}, latest_id: {}, latest_index: {}, \"",
          "162:             \"next_draft_id: {})>\"",
          "163:         ).format(",
          "164:             type(self).__name__,",
          "165:             self.parent_id,",
          "166:             self.latest_id,",
          "167:             self.latest_index,",
          "168:             self.next_draft_id,",
          "169:         )",
          "172: class VersionsField(SystemField):",
          "173:     \"\"\"Versions field.\"\"\"",
          "175:     def __init__(self, create=True, set_next=False, set_latest=False):",
          "176:         \"\"\"Initialise the versions field.\"\"\"",
          "177:         self._create = create",
          "178:         self._set_next = set_next",
          "179:         self._set_latest = set_latest",
          "180:         super().__init__()",
          "182:     def obj(self, record):",
          "183:         \"\"\"Get the version manager.\"\"\"",
          "184:         obj = self._get_cache(record)",
          "185:         if obj is not None:",
          "186:             return obj",
          "187:         obj = VersionsManager(record)",
          "188:         self._set_cache(record, obj)",
          "189:         return obj",
          "191:     def set_obj(self, record, versions):",
          "192:         \"\"\"Set an version manager on the record.\"\"\"",
          "193:         assert isinstance(versions, VersionsManager)",
          "194:         versions = versions.copy_to(record)",
          "195:         self._set_cache(record, versions)",
          "197:     #",
          "198:     # Record life-cycle hooks",
          "199:     #",
          "200:     def post_create(self, record):",
          "201:         \"\"\"Called after a record is created.\"\"\"",
          "202:         # The parent record is created on pre_create.",
          "203:         versions = self.obj(record)",
          "204:         if self._create and self._set_next:",
          "205:             # if fork is none - it's a new?",
          "206:             versions.set_next()",
          "207:         elif self._create and self._set_latest:",
          "208:             versions.set_latest()",
          "210:     def pre_delete(self, record, force=False):",
          "211:         \"\"\"Called before a record is deleted.\"\"\"",
          "212:         if force:",
          "213:             versions = self.obj(record)",
          "214:             versions.clear_next()",
          "216:     def pre_dump(self, record, data, dumper=None):",
          "217:         \"\"\"Called before a record is dumped.\"\"\"",
          "218:         parent = getattr(record, self.attr_name)",
          "219:         if parent:",
          "220:             data[self.attr_name] = self.obj(record).dump()",
          "222:     def post_load(self, record, data, loader=None):",
          "223:         \"\"\"Called after a record was loaded.\"\"\"",
          "224:         dump = record.pop(self.attr_name, None)",
          "225:         if dump:",
          "226:             versions = VersionsManager(record, dump=dump)",
          "227:             setattr(record, self.attr_name, versions)",
          "229:     #",
          "230:     # Data descriptor API",
          "231:     #",
          "232:     def __get__(self, record, owner=None):",
          "233:         \"\"\"Get the value for the field.",
          "235:         Called when the field is accessed, e.g:",
          "237:         .. code-block:: python",
          "239:             # Access by object",
          "240:             record.versions",
          "241:             # Access by object",
          "242:             Record.versions",
          "243:         \"\"\"",
          "244:         if record is None:",
          "245:             # access by class",
          "246:             return self",
          "247:         # access by object",
          "248:         return self.obj(record)",
          "250:     def __set__(self, record, obj):",
          "251:         \"\"\"Assign a value to the field.",
          "253:         Called when a value is assigned to the field, e.g.:",
          "255:         .. code-block:: python",
          "257:             record.versions = <obj>",
          "258:         \"\"\"",
          "259:         self.set_obj(record, obj)",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/services/records/components.py||invenio_drafts_resources/services/records/components.py": [
          "File: invenio_drafts_resources/services/records/components.py -> invenio_drafts_resources/services/records/components.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: class PIDComponent(ServiceComponent):",
          "16:     \"\"\"Service component for PID registraion.\"\"\"",
          "19:         \"\"\"Register persistent identifiers when publishing.\"\"\"",
          "20:         if not record.is_published:",
          "21:             record.register()",
          "",
          "[Removed Lines]",
          "18:     def publish(self, draft=None, record=None):",
          "",
          "[Added Lines]",
          "18:     def publish(self, identity, draft=None, record=None):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: class DraftFilesComponent(ServiceComponent):",
          "33:     \"\"\"Draft files service component.\"\"\"",
          "35:     # TODO: Add tests for publishing a draft with files",
          "37:         \"\"\"Copy bucket and files to record.\"\"\"",
          "38:         draft_files = draft.files",
          "39:         bucket = draft_files.bucket",
          "",
          "[Removed Lines]",
          "36:     def publish(self, draft=None, record=None):",
          "",
          "[Added Lines]",
          "35:     def edit(self, identity, draft=None, record=None):",
          "36:         \"\"\"Edit callback.\"\"\"",
          "37:         draft['files'] = record['files']",
          "39:     def new_version(self, identity, draft=None, record=None):",
          "40:         \"\"\"New version callback.\"\"\"",
          "41:         draft['files'] = record['files']",
          "44:     def publish(self, identity, draft=None, record=None):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         \"\"\"Update draft metadata.\"\"\"",
          "96:         record.metadata = data.get('metadata', {})",
          "",
          "[Removed Lines]",
          "99: class RelationsComponent(ServiceComponent):",
          "100:     \"\"\"Service component for PID relations integration.\"\"\"",
          "102:     # PIDNodeVersioning(pid=conceptrecid).insert_draft_child(child_pid=recid)",
          "",
          "[Added Lines]",
          "106:     def publish(self, identity, draft=None, record=None, **kwargs):",
          "107:         \"\"\"Update draft metadata.\"\"\"",
          "108:         record.metadata = draft.get('metadata', {})",
          "110:     def edit(self, identity, draft=None, record=None, **kwargs):",
          "111:         \"\"\"Update draft metadata.\"\"\"",
          "112:         draft.metadata = record.get('metadata', {})",
          "114:     def new_version(self, identity, draft=None, record=None, **kwargs):",
          "115:         \"\"\"Update draft metadata.\"\"\"",
          "116:         draft.metadata = record.get('metadata', {})",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/services/records/permissions.py||invenio_drafts_resources/services/records/permissions.py": [
          "File: invenio_drafts_resources/services/records/permissions.py -> invenio_drafts_resources/services/records/permissions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     # Default create should be \"authenticated\"?",
          "21:     # TODO: Subclass records-resources policy and add *_draft actions",
          "22:     can_create = [AnyUser()]",
          "23:     can_publish = [AnyUser()]",
          "24:     can_read_draft = [AnyUser()]",
          "25:     can_update_draft = [AnyUser()]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     can_new_version = [AnyUser()]",
          "24:     can_edit = [AnyUser()]",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/services/records/schema.py||invenio_drafts_resources/services/records/schema.py": [
          "File: invenio_drafts_resources/services/records/schema.py -> invenio_drafts_resources/services/records/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from invenio_records_resources.services.records.schema import \\",
          "12:     RecordSchema as RecordSchemaBase",
          "16: class RecordSchema(RecordSchemaBase):",
          "17:     \"\"\"Schema for records in JSON.\"\"\"",
          "20:     expires_at = fields.Str(dump_only=True)",
          "",
          "[Removed Lines]",
          "13: from marshmallow import fields",
          "19:     conceptid = fields.Str(dump_only=True)",
          "",
          "[Added Lines]",
          "13: from marshmallow import Schema, fields",
          "14: from marshmallow_utils.fields import NestedAttribute",
          "17: class VersionsSchema(Schema):",
          "18:     \"\"\"Versions schema.\"\"\"",
          "20:     is_latest = fields.Boolean()",
          "21:     is_latest_draft = fields.Boolean()",
          "22:     parent_index = fields.Integer()",
          "25: class ParentSchema(Schema):",
          "26:     \"\"\"Parent record schema.\"\"\"",
          "28:     id = fields.Str()",
          "34:     parent = NestedAttribute(ParentSchema, dump_only=True)",
          "35:     versions = NestedAttribute(VersionsSchema, dump_only=True)",
          "36:     is_published = fields.Boolean(dump_only=True)",
          "",
          "---------------"
        ],
        "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py": [
          "File: invenio_drafts_resources/services/records/service.py -> invenio_drafts_resources/services/records/service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: # modify it under the terms of the MIT License; see LICENSE file for more",
          "8: # details.",
          "12: from elasticsearch_dsl.query import Q",
          "13: from invenio_db import db",
          "",
          "[Removed Lines]",
          "10: \"\"\"RecordDraft Service API.\"\"\"",
          "",
          "[Added Lines]",
          "10: \"\"\"Primary service for working with records and drafts.\"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: class RecordDraftService(RecordService):",
          "30:     \"\"\"",
          "32:     default_config = RecordDraftServiceConfig",
          "",
          "[Removed Lines]",
          "21:     \"\"\"Draft Service interface.",
          "23:     This service provides an interface to business logic for",
          "24:     published AND draft records. When creating a custom service",
          "25:     for a specialized record (e.g. authors), consider if you need",
          "26:     draft functionality or not. If you do, inherit from this service;",
          "27:     otherwise, inherit from the RecordService directly.",
          "29:     This service includes versioning.",
          "",
          "[Added Lines]",
          "21:     \"\"\"Record and draft service interface.",
          "23:     This service provides an interface to business logic for published and",
          "24:     draft records.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:         # Permissions",
          "94:         self.require_permission(identity, \"update_draft\", record=draft)",
          "96:         data, errors = self.schema.load(",
          "97:             identity,",
          "98:             data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         # Load data with service schema",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:                 component.update_draft(",
          "110:                     identity, record=draft, data=data)",
          "112:         draft.commit()",
          "113:         db.session.commit()",
          "114:         self.indexer.index(draft)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:         # Commit and index",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:     def edit(self, id_, identity, links_config=None):",
          "138:         \"\"\"Create a new revision or a draft for an existing record.",
          "141:         :param id_: record PID value.",
          "142:         \"\"\"",
          "145:         # Draft exists - return it",
          "146:         try:",
          "147:             draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
          "148:             return self.result_item(",
          "149:                 self, identity, draft, links_config=links_config)",
          "150:         except NoResultFound:",
          "151:             pass",
          "156:         record = self.record_cls.pid.resolve(id_)",
          "177:         # Run components",
          "178:         for component in self.components:",
          "182:         draft.commit()",
          "183:         db.session.commit()",
          "",
          "[Removed Lines]",
          "140:         Note: Because of the workflow, this method does not accept data.",
          "143:         self.require_permission(identity, \"create\")",
          "153:         # Draft does not exists - so get the main record we want edit and",
          "154:         # create a draft by 1) either undeleting a soft-deleted draft or 2)",
          "155:         # create a new draft",
          "157:         try:",
          "158:             # We soft-delete a draft once it has been published, in order to",
          "159:             # keep the version_id counter around for optimistic concurrency",
          "160:             # control (both for ES indexing and for REST API clients)",
          "161:             draft = self.draft_cls.get_record(record.id, with_deleted=True)",
          "162:             if draft.is_deleted:",
          "163:                 draft.undelete()",
          "164:                 draft.update(**record)",
          "165:                 draft.pid = record.pid",
          "166:                 draft.fork_version_id = record.revision_id",
          "167:         except NoResultFound:",
          "168:             # If a draft was ever force deleted, then we will create the draft.",
          "169:             # This is a very exceptional case as normally, when we edit a",
          "170:             # record then the soft-deleted draft exists and we are in above",
          "171:             # case.",
          "172:             draft = self.draft_cls.create(",
          "173:                 record, id_=record.id, fork_version_id=record.revision_id,",
          "174:                 pid=record.pid,",
          "175:             )",
          "179:             if hasattr(component, 'edit'):",
          "180:                 component.edit(identity, draft=draft)",
          "",
          "[Added Lines]",
          "142:             self.require_permission(identity, \"edit\", record=draft)",
          "148:         # Draft does not exists - so get the main record we want to edit and",
          "149:         # create a draft from it",
          "151:         self.require_permission(identity, \"edit\", record=record)",
          "152:         draft = self.draft_cls.edit(record)",
          "156:             if hasattr(component, \"edit\"):",
          "157:                 component.edit(identity, draft=draft, record=record)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:               (drafts can be incomplete but only complete drafts can be turned",
          "200:               into records)",
          "201:             - Create or update associated (published) record with data",
          "207:         \"\"\"",
          "208:         self.require_permission(identity, \"publish\")",
          "211:         draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
          "242:         # Run components",
          "243:         for component in self.components:",
          "244:             if hasattr(component, 'publish'):",
          "247:         record.commit()",
          "250:         self.indexer.delete(draft)",
          "251:         self.indexer.index(record)",
          "253:         return self.result_item(",
          "254:             self, identity, record, links_config=links_config)",
          "256:     def new_version(self, id_, identity, links_config=None):",
          "257:         \"\"\"Create a new version of a record.\"\"\"",
          "261:         record = self.record_cls.pid.resolve(id_)",
          "271:         # Run components",
          "272:         for component in self.components:",
          "273:             if hasattr(component, 'new_version'):",
          "277:         db.session.commit()",
          "280:         return self.result_item(",
          "283:     def delete_draft(self, id_, identity, revision_id=None):",
          "284:         \"\"\"Delete a record from database and search indexes.\"\"\"",
          "285:         draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
          "287:         self.check_revision_id(draft, revision_id)",
          "",
          "[Removed Lines]",
          "203:         NOTE: This process of taking data from the database and validating it",
          "204:               back is tricky because there are a number of",
          "205:               data representations and transformations. There can be mistakes",
          "206:               within it as of writing. Don't take this flow as gospel yet.",
          "210:         # Get data layer draft",
          "213:         # Convert to service layer draft result item",
          "214:         draft_item = self.result_item(",
          "215:             self, identity, draft, links_config=None  # no need for links",
          "216:         )",
          "217:         # Convert to data projection i.e. draft result item's dict form. Since",
          "218:         # there are no \"errors\" bc projection is taken directly from",
          "219:         # DB, we can use draft_item.data. This dict form is what is",
          "220:         # serialized out/deserialized in so it \"should\" be valid input to load.",
          "221:         draft_data = draft_item.data",
          "223:         # Purely used for validation purposes although we may actually want to",
          "224:         # use it...",
          "225:         data, _ = self.schema.load(",
          "226:             identity,",
          "227:             data=draft_data,",
          "228:             pid=draft.pid,",
          "229:             record=draft,",
          "230:             raise_errors=True  # this is the default, but might as well be",
          "231:                                # explicit",
          "232:         )",
          "234:         # Set draft data in record",
          "235:         if draft.is_published:",
          "236:             record = self.record_cls.get_record(draft.id)",
          "237:             record.update_from(draft)",
          "238:         else:",
          "239:             # New record",
          "240:             record = self.record_cls.create_from(draft)",
          "245:                 component.publish(draft=draft, record=record)",
          "248:         draft.delete()",
          "249:         db.session.commit()  # Persist DB",
          "258:         self.require_permission(identity, \"create\")",
          "260:         # Get record",
          "263:         # Create new draft",
          "264:         draft = self.draft_cls.create(",
          "265:             {},",
          "266:             conceptpid=record.conceptpid,",
          "267:             # TODO: Need to check if below line is correct?",
          "268:             fork_version_id=record.revision_id,",
          "269:         )",
          "274:                 component.new_version(identity, draft=draft, record=record)",
          "276:         draft.commit()",
          "278:         self.indexer.index(draft)",
          "281:             self, identity, draft, links_config=links_config)",
          "",
          "[Added Lines]",
          "182:         # Get the draft",
          "185:         # Validate the draft strictly - since a draft can be saved with errors",
          "186:         # we do a strict validation here to make sure only valid drafts can be",
          "187:         # published.",
          "188:         self._validate_draft(identity, draft)",
          "190:         # Create the record from the draft",
          "191:         record = self.record_cls.publish(draft)",
          "192:         latest_id = draft.versions.latest_id",
          "197:                 component.publish(identity, draft=draft, record=record)",
          "199:         # Commit and index",
          "201:         draft.delete(force=False)",
          "202:         db.session.commit()",
          "205:         if latest_id:",
          "206:             self._reindex_latest(latest_id)",
          "213:         # Get the a record - i.e. you can only create a new version in case",
          "214:         # at least one published record already exists.",
          "217:         # Check permissions",
          "218:         self.require_permission(identity, \"new_version\", record=record)",
          "220:         # Draft for new version already exists? if so return it",
          "221:         if record.versions.next_draft_id:",
          "222:             next_draft = self.draft_cls.get_record(",
          "223:                 record.versions.next_draft_id)",
          "224:             return self.result_item(",
          "225:                 self, identity, next_draft, links_config=links_config)",
          "227:         # Draft for new version does not exists, so create it",
          "228:         next_draft = self.draft_cls.new_version(record)",
          "229:         # Get the latest published record if it's not the current one.",
          "230:         if not record.versions.is_latest:",
          "231:             record = self.record_cls.get_record(record.versions.latest_id)",
          "236:                 component.new_version(",
          "237:                     identity, draft=next_draft, record=record)",
          "239:         # Commit and index",
          "240:         next_draft.commit()",
          "242:         self.indexer.index(next_draft)",
          "243:         self._reindex_latest(next_draft.versions.latest_id, record=record)",
          "246:             self, identity, next_draft, links_config=links_config)",
          "251:         latest_id = draft.versions.latest_id",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:                 component.delete_draft(",
          "307:                     identity, draft=draft, record=record, force=force)",
          "309:         draft.delete(force=force)",
          "310:         db.session.commit()",
          "311:         # We refresh the index because users are usually redirected to a",
          "312:         # search result immediately after, and we don't want the users to see",
          "313:         # their just deleted draft.",
          "314:         self.indexer.delete(draft, refresh=True)",
          "319:             self.indexer.index(record, arguments={\"refresh\": True})",
          "321:         return True",
          "",
          "[Removed Lines]",
          "316:         # Reindex the record to trigger update of computed values in the",
          "317:         # available dumpers",
          "318:         if record:",
          "",
          "[Added Lines]",
          "275:         # Note, the parent record deletion logic is implemented in the",
          "276:         # ParentField and will automatically take care of deleting the parent",
          "277:         # record in case this is the only draft that exists for the parent.",
          "286:         if force:",
          "287:             # Case 1: We deleted a new draft (without a published record) or a",
          "288:             # new version draft (without a published).",
          "289:             # In this case, we reindex the latest published record/draft",
          "290:             self._reindex_latest(latest_id, refresh=True)",
          "291:         else:",
          "292:             # Case 2: We deleted a draft for a published record.",
          "293:             # In this case we reindex just the published record to trigger and",
          "294:             # update of computed values.",
          "299:     def _validate_draft(self, identity, draft):",
          "300:         \"\"\"Validate a draft.",
          "302:         This method is internal because it works with a data access layer",
          "303:         draft, and thus should not be called from outside the service.",
          "304:         \"\"\"",
          "305:         # Convert to draft into service layer draft result item (a record",
          "306:         # projection for the given identity). This way we can load and validate",
          "307:         # the data with the service schema.",
          "308:         draft_item = self.result_item(",
          "309:             self, identity, draft, links_config=None  # no need for links",
          "310:         )",
          "311:         # Validate the data - will raise ValidationError if not valid.",
          "312:         self.schema.load(",
          "313:             identity,",
          "314:             data=draft_item.data,",
          "315:             pid=draft.pid,",
          "316:             record=draft,",
          "317:             raise_errors=True  # this is the default, but might as well be",
          "318:                                # explicit",
          "319:         )",
          "321:     def _reindex_latest(self, latest_id, record=None, draft=None,",
          "322:                         refresh=False):",
          "323:         \"\"\"Reindex the latest published record and draft.",
          "325:         This triggers and update of computed values in the index, such as",
          "326:         \"is_latest\".",
          "328:         This method is internal because it works with a data access layer",
          "329:         record/draft, and thus should not be called from outside the service.",
          "330:         \"\"\"",
          "331:         arguments = {\"refresh\": True} if refresh else {}",
          "333:         # We only have a draft, no latest to index",
          "334:         if not latest_id:",
          "335:             return",
          "337:         # Note, the record may not be the latest published record, and we only",
          "338:         # want to index the latest published.",
          "339:         if record is None or latest_id != record.id:",
          "340:             record = self.record_cls.get_record(latest_id)",
          "341:         self.indexer.index(record, arguments=arguments)",
          "343:         # Note, a draft may or may not exists for a published record (depending",
          "344:         # on if it's being edited).",
          "345:         try:",
          "346:             draft = self.draft_cls.get_record(latest_id)",
          "347:             self.indexer.index(draft, arguments=arguments)",
          "348:         except NoResultFound:",
          "349:             pass",
          "",
          "---------------"
        ],
        "tests/mock_module/api.py||tests/mock_module/api.py": [
          "File: tests/mock_module/api.py -> tests/mock_module/api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from invenio_drafts_resources.records.api import \\",
          "8:     ParentRecord as ParentRecordBase",
          "9: from invenio_drafts_resources.records.api import Record as RecordBase",
          "15: class ParentRecord(ParentRecordBase):",
          "",
          "[Removed Lines]",
          "10: from invenio_drafts_resources.records.systemfields import ParentField",
          "12: from .models import DraftMetadata, ParentRecordMetadata, RecordMetadata",
          "",
          "[Added Lines]",
          "11: from .models import DraftMetadata, ParentRecordMetadata, ParentState, \\",
          "12:     RecordMetadata",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     # Configuration",
          "30:     model_cls = RecordMetadata",
          "32:     # System fields",
          "33:     schema = ConstantField(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     versions_model_cls = ParentState",
          "32:     parent_record_cls = ParentRecord",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:         search_alias='draftsresources-records'",
          "39:     )",
          "49: class Draft(DraftBase):",
          "50:     \"\"\"Example record API.\"\"\"",
          "52:     # Configuration",
          "53:     model_cls = DraftMetadata",
          "55:     # System fields",
          "56:     schema = ConstantField(",
          "",
          "[Removed Lines]",
          "41:     parent = ParentField(",
          "42:         ParentRecord, create=False, soft_delete=False, hard_delete=False)",
          "44:     create_from_draft = [",
          "45:         'parent'",
          "46:     ]",
          "",
          "[Added Lines]",
          "49:     versions_model_cls = ParentState",
          "50:     parent_record_cls = ParentRecord",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:         'draftsresources-drafts-draft-v1.0.0',",
          "61:         search_alias='draftsresources-drafts'",
          "62:     )",
          "",
          "[Removed Lines]",
          "64:     parent = ParentField(",
          "65:         ParentRecord, create=True, soft_delete=False, hard_delete=True)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/mock_module/models.py||tests/mock_module/models.py": [
          "File: tests/mock_module/models.py -> tests/mock_module/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from invenio_records.models import RecordMetadataBase",
          "6: from invenio_drafts_resources.records import DraftMetadataBase, \\",
          "10: class ParentRecordMetadata(db.Model, RecordMetadataBase):",
          "",
          "[Removed Lines]",
          "7:     ParentRecordMixin",
          "",
          "[Added Lines]",
          "7:     ParentRecordMixin, ParentRecordStateMixin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     __tablename__ = 'parent_mock_metadata'",
          "18:     \"\"\"Model for mock module metadata.\"\"\"",
          "20:     __tablename__ = 'draft_mock_metadata'",
          "25:     \"\"\"Model for mock module metadata.\"\"\"",
          "27:     __tablename__ = 'record_mock_metadata'",
          "",
          "[Removed Lines]",
          "16: class DraftMetadata(db.Model, DraftMetadataBase,",
          "17:                     ParentRecordMixin(ParentRecordMetadata)):",
          "23: class RecordMetadata(db.Model, RecordMetadataBase,",
          "24:                      ParentRecordMixin(ParentRecordMetadata)):",
          "",
          "[Added Lines]",
          "16: class DraftMetadata(db.Model, DraftMetadataBase, ParentRecordMixin):",
          "20:     __parent_record_model__ = ParentRecordMetadata",
          "23: class RecordMetadata(db.Model, RecordMetadataBase, ParentRecordMixin):",
          "27:     __parent_record_model__ = ParentRecordMetadata",
          "30: class ParentState(db.Model, ParentRecordStateMixin):",
          "31:     \"\"\"Model for mock module for parent state.\"\"\"",
          "33:     __parent_record_model__ = ParentRecordMetadata",
          "34:     __record_model__ = RecordMetadata",
          "35:     __draft_model__ = DraftMetadata",
          "",
          "---------------"
        ],
        "tests/mock_module/permissions.py||tests/mock_module/permissions.py": [
          "File: tests/mock_module/permissions.py -> tests/mock_module/permissions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class PermissionPolicy(RecordDraftPermissionPolicy):",
          "10:     \"\"\"Mock permission policy. All actions allowed.\"\"\"",
          "12:     can_search = [AnyUser()]",
          "13:     can_create = [AnyUser()]",
          "14:     can_read = [AnyUser()]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     can_edit = [AnyUser()]",
          "13:     can_new_version = [AnyUser()]",
          "",
          "---------------"
        ],
        "tests/records/test_api.py||tests/records/test_api.py": [
          "File: tests/records/test_api.py -> tests/records/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from invenio_search import current_search_client",
          "13: from jsonschema import ValidationError",
          "14: from mock_module.api import Draft, ParentRecord, Record",
          "15: from sqlalchemy import inspect",
          "16: from sqlalchemy.orm.exc import NoResultFound",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: from mock_module.models import DraftMetadata, ParentRecordMetadata, \\",
          "16:     ParentState, RecordMetadata",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     assert draft.pid.object_uuid != draft.parent.pid.object_uuid",
          "50: #",
          "51: # Create/Update from draft",
          "52: #",
          "53: def test_create_record_from_draft(app, db, example_draft):",
          "56:     db.session.commit()",
          "57:     assert example_draft.pid == record.pid",
          "58:     assert example_draft.parent == record.parent",
          "",
          "[Removed Lines]",
          "54:     \"\"\"Test create a record from a draft.\"\"\"",
          "55:     record = Record.create_from(example_draft)",
          "",
          "[Added Lines]",
          "52: def test_draft_create_parent_state(app, db):",
          "53:     \"\"\"Test draft creation of the parent record.\"\"\"",
          "54:     draft = Draft.create({})",
          "55:     db.session.commit()",
          "57:     # Assert that associated objects were created",
          "58:     assert ParentState.query.count() == 1",
          "59:     assert DraftMetadata.query.count() == 1",
          "60:     assert ParentRecordMetadata.query.count() == 1",
          "61:     assert RecordMetadata.query.count() == 0",
          "63:     def assert_state(d):",
          "64:         # An initial draft is not published, so latest_id/index is None",
          "65:         assert d.model.parent_index == 1",
          "66:         assert d.versions.parent_index == 1",
          "67:         assert d.versions.latest_id is None",
          "68:         assert d.versions.latest_index is None",
          "69:         assert d.versions.next_draft_id == d.id",
          "71:     assert_state(draft)",
          "72:     assert_state(Draft.get_record(draft.id))",
          "75: def test_record_create_parent_state(app, db):",
          "76:     \"\"\"Test draft creation of the parent record.\"\"\"",
          "77:     draft = Draft.create({})",
          "78:     draft.commit()",
          "79:     db.session.commit()",
          "80:     record = Record.publish(draft)",
          "81:     record.commit()",
          "82:     db.session.commit()",
          "84:     def assert_state(r):",
          "85:         # An initial draft is not published, so latest_id/index is None",
          "86:         assert r.versions.latest_id == r.id",
          "87:         assert r.versions.latest_index == 1",
          "88:         assert r.versions.next_draft_id is None",
          "89:         assert r.versions.parent_index == 1",
          "90:         assert r.versions.is_latest is True",
          "91:         assert r.versions.is_latest_draft is True",
          "92:         assert r.model.parent_index == 1",
          "93:         assert r.model.parent_id == draft.model.parent_id",
          "95:     assert_state(record)",
          "96:     assert_state(Record.get_record(record.id))",
          "99: def test_draft_create_new_version(app, db):",
          "100:     \"\"\"Test draft creation of the parent record.\"\"\"",
          "101:     # A published record.",
          "102:     record = Record.publish(Draft.create({}))",
          "103:     db.session.commit()",
          "104:     # Create a draft for a new version (happens in service.new_version())",
          "105:     draft = Draft.new_version(record)",
          "106:     draft.commit()",
          "107:     db.session.commit()",
          "109:     record = Record.get_record(record.id)",
          "110:     draft = Draft.get_record(draft.id)",
          "112:     assert record.id != draft.id  # different uuids",
          "113:     assert record.parent.id == draft.parent.id  # same parent",
          "114:     assert draft.versions.is_latest_draft is True",
          "115:     assert draft.versions.is_latest is False",
          "116:     assert record.versions.is_latest_draft is False",
          "117:     assert record.versions.is_latest is True",
          "120: def test_draft_parent_state_hard_delete(app, db):",
          "121:     \"\"\"Test force deletion of a draft.\"\"\"",
          "122:     # Initial state: Only draft exists (i.e. no other record versions)",
          "123:     draft = Draft.create({})",
          "124:     db.session.commit()",
          "125:     # happens on:",
          "126:     # - service.delete_draft for an *unpublished* record",
          "127:     draft.delete(force=True)",
          "128:     db.session.commit()",
          "129:     # Make sure no parent and no parent state is left-behind",
          "130:     assert ParentState.query.count() == 0",
          "131:     assert ParentRecordMetadata.query.count() == 0",
          "132:     assert DraftMetadata.query.count() == 0",
          "133:     assert RecordMetadata.query.count() == 0",
          "136: def test_draft_parent_state_hard_delete_with_parent(app, db):",
          "137:     \"\"\"Test force deletion of a draft.\"\"\"",
          "138:     # Initial state: A previous reccord version exists, in addition to draft",
          "139:     draft = Draft.create({})",
          "140:     record = Record.create({}, parent=draft.parent)",
          "141:     db.session.commit()",
          "142:     # happens on:",
          "143:     # - service.delete_draft for an *unpublished* record",
          "144:     draft.delete(force=True)",
          "145:     db.session.commit()",
          "146:     # Make sure parent/parent state is still there",
          "147:     assert ParentState.query.count() == 1",
          "148:     assert ParentRecordMetadata.query.count() == 1",
          "149:     assert RecordMetadata.query.count() == 1",
          "150:     assert DraftMetadata.query.count() == 0",
          "152:     record = Record.get_record(record.id)",
          "153:     assert record.versions.next_draft_id is None",
          "154:     assert record.versions.latest_id == record.id",
          "157: def test_draft_parent_state_soft_delete(app, db):",
          "158:     \"\"\"Test soft deletion of a draft.\"\"\"",
          "159:     # Simulate a record being edited.",
          "160:     draft = Draft.create({})",
          "161:     record = Record.create({}, parent=draft.parent)",
          "162:     db.session.commit()",
          "163:     # happens on:",
          "164:     # - service.publish()",
          "165:     # - service.delete_draft() for a *published* record",
          "166:     draft.delete(force=False)",
          "167:     db.session.commit()",
          "169:     assert ParentState.query.count() == 1",
          "170:     assert ParentRecordMetadata.query.count() == 1",
          "171:     assert RecordMetadata.query.count() == 1",
          "173:     record = Record.get_record(record.id)",
          "174:     assert record.versions.next_draft_id is None",
          "175:     assert record.versions.latest_id == record.id",
          "182:     \"\"\"Test create a record from a draft.",
          "184:     This is used e.g. when publishing a new draft as a record.",
          "185:     \"\"\"",
          "186:     record = Record.publish(example_draft)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     assert example_draft == loaded_draft",
          "116:     # Parent was dumped and loaded",
          "117:     assert example_draft.parent == loaded_draft.parent",
          "118:     # Test that SQLAlchemy model was loaded from the JSON and not DB.",
          "119:     assert not inspect(loaded_draft.parent.model).persistent",
          "122: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:     assert example_draft.versions.is_latest_draft \\",
          "250:         == loaded_draft.versions.is_latest_draft",
          "253:     assert not inspect(loaded_draft.versions._state).persistent",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:     assert draft.updated == example_draft.updated",
          "144:     assert draft.expires_at == example_draft.expires_at",
          "145:     assert draft.parent == example_draft.parent",
          "147:     # Check system fields",
          "148:     draft.metadata == example_draft['metadata']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:     assert draft.versions.is_latest_draft == \\",
          "281:         example_draft.versions.is_latest_draft",
          "",
          "---------------"
        ],
        "tests/resources/test_record_resource.py||tests/resources/test_record_resource.py": [
          "File: tests/resources/test_record_resource.py -> tests/resources/test_record_resource.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "170:     assert response.status_code == 201",
          "172:     _assert_single_item_response(response)",
          "174:     # Update that new draft",
          "",
          "[Removed Lines]",
          "171:     assert response.json['revision_id'] == 4",
          "",
          "[Added Lines]",
          "171:     assert response.json['revision_id'] == 5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "221:     assert response.status_code == 201",
          "224:     # Request a second edit. Get the same draft (revision_id)",
          "225:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "227:     assert response.status_code == 201",
          "230:     # Publish it to check the increment in version_id",
          "231:     response = client.post(",
          "",
          "[Removed Lines]",
          "222:     assert response.json['revision_id'] == 4",
          "228:     assert response.json['revision_id'] == 4",
          "",
          "[Added Lines]",
          "222:     assert response.json['revision_id'] == 5",
          "228:     assert response.json['revision_id'] == 5",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:     response = client.post(f\"/mocks/{recid}/draft\", headers=headers)",
          "240:     assert response.status_code == 201",
          "244: @pytest.mark.skip()  # Disable until properly implemented.",
          "",
          "[Removed Lines]",
          "241:     assert response.json['revision_id'] == 7",
          "",
          "[Added Lines]",
          "241:     assert response.json['revision_id'] == 8",
          "",
          "---------------"
        ],
        "tests/services/test_record_service.py||tests/services/test_record_service.py": [
          "File: tests/services/test_record_service.py -> tests/services/test_record_service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: def test_create_draft(app, service, identity_simple, input_data):",
          "30:     \"\"\"Test draft creation of a non-existing record.\"\"\"",
          "32:     draft = service.create(identity_simple, input_data)",
          "33:     draft_dict = draft.to_dict()",
          "35:     assert draft.id",
          "38:     for key, value in input_data.items():",
          "39:         assert draft[key] == value",
          "41:     # Check for pid and parent pid",
          "42:     assert draft['id']",
          "45:     assert 'errors' not in draft_dict",
          "",
          "[Removed Lines]",
          "31:     # Needs `app` context because of invenio_access/permissions.py#166",
          "36:     assert draft._record.revision_id == 1",
          "43:     assert draft._record.pid.status == PIDStatus.NEW",
          "44:     assert draft._record.parent.pid.status == PIDStatus.NEW",
          "",
          "[Added Lines]",
          "41:     assert draft['parent']['id']",
          "42:     assert draft['is_published'] is False",
          "43:     assert draft['versions']['is_latest_draft'] is True",
          "44:     assert draft['versions']['is_latest'] is False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     Errors (missing required fields) are reported, but don't prevent creation.",
          "52:     \"\"\"",
          "54:     input_data = {",
          "55:         \"metadata\": {}",
          "56:     }",
          "",
          "[Removed Lines]",
          "53:     # Needs `app` context because of invenio_access/permissions.py#166",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     draft_dict = draft.to_dict()",
          "61:     assert draft['id']",
          "64:     assert draft_dict['errors'][0]['field'] == 'metadata.title'",
          "67: def test_read_draft(app, service, identity_simple, input_data):",
          "69:     draft = service.create(identity_simple, input_data)",
          "70:     assert draft.id",
          "",
          "[Removed Lines]",
          "62:     assert draft._record.pid.status == PIDStatus.NEW",
          "63:     assert draft._record.parent.pid.status == PIDStatus.NEW",
          "68:     # Needs `app` context because of invenio_access/permissions.py#166",
          "",
          "[Added Lines]",
          "61:     assert draft['is_published'] is False",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76: def test_update_draft(app, service, identity_simple, input_data):",
          "78:     draft = service.create(identity_simple, input_data)",
          "79:     assert draft.id",
          "",
          "[Removed Lines]",
          "77:     # Needs `app` context because of invenio_access/permissions.py#166",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "96: def test_update_draft_invalid_field(app, service, identity_simple, input_data):",
          "97:     \"\"\"Update with invalid field reports rather than raises errors.\"\"\"",
          "99:     draft = service.create(identity_simple, input_data)",
          "100:     orig_title = input_data['metadata']['title']",
          "101:     edited_title = 100",
          "",
          "[Removed Lines]",
          "98:     # Needs `app` context because of invenio_access/permissions.py#166",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112: def test_delete_draft(app, service, identity_simple, input_data):",
          "114:     draft = service.create(identity_simple, input_data)",
          "115:     assert draft.id",
          "",
          "[Removed Lines]",
          "113:     # Needs `app` context because of invenio_access/permissions.py#166",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "213:     assert draft.id == recid",
          "214:     assert draft._record.fork_version_id == record._record.revision_id",
          "215:     # create, soft-delete, undelete, update",
          "218:     # Update the content",
          "219:     orig_title = input_data['metadata']['title']",
          "",
          "[Removed Lines]",
          "216:     assert draft._record.revision_id == 4",
          "",
          "[Added Lines]",
          "210:     assert draft._record.revision_id == 5",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:     draft = service.edit(recid, identity_simple)",
          "252:     assert draft.id == recid",
          "253:     assert draft._record.fork_version_id == record._record.revision_id",
          "256:     draft = service.edit(recid, identity_simple)",
          "257:     assert draft.id == recid",
          "258:     assert draft._record.fork_version_id == record._record.revision_id",
          "261:     # Publish it to check the increment in version_id",
          "262:     record = service.publish(recid, identity_simple)",
          "",
          "[Removed Lines]",
          "254:     assert draft._record.revision_id == 4",
          "259:     assert draft._record.revision_id == 4",
          "",
          "[Added Lines]",
          "248:     assert draft._record.revision_id == 5",
          "253:     assert draft._record.revision_id == 5",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264:     draft = service.edit(recid, identity_simple)",
          "265:     assert draft.id == recid",
          "266:     assert draft._record.fork_version_id == record._record.revision_id",
          "271: def test_create_publish_new_version(app, service, identity_simple,",
          "272:                                     input_data):",
          "273:     \"\"\"Test creating a new revision of a record.",
          "275:     This tests the `new_version` service method.",
          "276:     \"\"\"",
          "278:     record = _create_and_publish(service, input_data, identity_simple)",
          "279:     recid = record.id",
          "281:     # Create new version",
          "282:     draft = service.new_version(recid, identity_simple)",
          "285:     assert draft['id'] != record['id']",
          "286:     assert draft._record.pid.status == PIDStatus.NEW",
          "287:     assert draft._record.parent.pid.status == PIDStatus.REGISTERED",
          "",
          "[Removed Lines]",
          "267:     assert draft._record.revision_id == 7  # soft-delete, undelete, update",
          "270: @pytest.mark.skip()  # Disable until properly implemented.",
          "277:     # Needs `app` context because of invenio_access/permissions.py#166",
          "284:     assert draft._record.revision_id == 1",
          "",
          "[Added Lines]",
          "261:     assert draft._record.revision_id == 8  # soft-delete, undelete, update",
          "276:     assert draft._record.revision_id == 2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5351b96fd6ce8130afdb82ed36f822331492f54e",
      "candidate_info": {
        "commit_hash": "5351b96fd6ce8130afdb82ed36f822331492f54e",
        "repo": "inveniosoftware/invenio-drafts-resources",
        "commit_url": "https://github.com/inveniosoftware/invenio-drafts-resources/commit/5351b96fd6ce8130afdb82ed36f822331492f54e",
        "files": [
          "invenio_drafts_resources/services/records/service.py"
        ],
        "message": "security: fix missing permission check of publish\n\n* Invenio-Drafts-Resources does not properly check permissions when a\n  record is published. The vulnerability is exploitable in a default\n  installation of InvenioRDM. An authenticated a user is able via REST\n  API calls to publish draft records of other users if they know the\n  record identifier and the draft validates (e.g. all require fields\n  filled out). An attacker is not able to modify the data in the record,\n  and thus e.g. cannot change a record from restricted to public.",
        "before_after_code_files": [
          "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ],
          "candidate": [
            "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py"
          ]
        }
      },
      "candidate_diff": {
        "invenio_drafts_resources/services/records/service.py||invenio_drafts_resources/services/records/service.py": [
          "File: invenio_drafts_resources/services/records/service.py -> invenio_drafts_resources/services/records/service.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:               into records)",
          "264:             - Create or update associated (published) record with data",
          "265:         \"\"\"",
          "268:         # Get the draft",
          "269:         draft = self.draft_cls.pid.resolve(id_, registered_only=False)",
          "271:         # Validate the draft strictly - since a draft can be saved with errors",
          "272:         # we do a strict validation here to make sure only valid drafts can be",
          "",
          "[Removed Lines]",
          "266:         self.require_permission(identity, \"publish\")",
          "",
          "[Added Lines]",
          "268:         self.require_permission(identity, \"publish\", record=draft)",
          "",
          "---------------"
        ]
      }
    }
  ]
}