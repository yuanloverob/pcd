{
  "cve_id": "CVE-2019-6802",
  "cve_desc": "CRLF Injection in pypiserver 1.2.5 and below allows attackers to set arbitrary HTTP headers and possibly conduct XSS attacks via a %0d%0a in a URI.",
  "repo": "pypiserver/pypiserver",
  "patch_hash": "1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
  "patch_info": {
    "commit_hash": "1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
    "repo": "pypiserver/pypiserver",
    "commit_url": "https://github.com/pypiserver/pypiserver/commit/1375a67c55a9b8d4619df30d2a1c0b239d7357e6",
    "files": [
      "pypiserver/_app.py",
      "pypiserver/core.py",
      "tests/doubles.py",
      "tests/test_app.py",
      "tests/test_core.py",
      "tests/test_server.py"
    ],
    "message": "CRLF Injection Mitigation\n\nResolves #237\n\nPreviously, we were not running any sort of URL escaping on values\npassed in from the client that were used for redirects. This allowed\ninjection attacks via URL encoded newlines in the original request.\n\nThis update ensures that all user-supplied paths that are used as\ncomponents of redirects are passed through `urllib.parse.quote()`\n(or the python 2 equivalent) prior to being used in a redirect\nresponse.\n\nAlso specified 127.0.0.1 rather than 0.0.0.0 (the default) in server\ntests to avoid triggering firewall dialogs when testing on MacOS",
    "before_after_code_files": [
      "pypiserver/_app.py||pypiserver/_app.py",
      "pypiserver/core.py||pypiserver/core.py",
      "tests/doubles.py||tests/doubles.py",
      "tests/test_app.py||tests/test_app.py",
      "tests/test_core.py||tests/test_core.py",
      "tests/test_server.py||tests/test_server.py"
    ]
  },
  "patch_diff": {
    "pypiserver/_app.py||pypiserver/_app.py": [
      "File: pypiserver/_app.py -> pypiserver/_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "250: @auth(\"list\")",
      "251: def simple(prefix=\"\"):",
      "252:     # PEP 503: require normalized prefix",
      "254:     if prefix != normalized:",
      "255:         return redirect('/simple/{0}/'.format(normalized), 301)",
      "",
      "[Removed Lines]",
      "253:     normalized = core.normalize_pkgname(prefix)",
      "",
      "[Added Lines]",
      "253:     normalized = core.normalize_pkgname_for_url(prefix)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "327: @app.route('/:prefix')",
      "328: @app.route('/:prefix/')",
      "329: def bad_url(prefix):",
      "",
      "[Removed Lines]",
      "330:     p = request.fullpath",
      "331:     if p.endswith(\"/\"):",
      "332:         p = p[:-1]",
      "333:     p = p.rsplit('/', 1)[0]",
      "334:     p += \"/simple/%s/\" % prefix",
      "336:     return redirect(p)",
      "",
      "[Added Lines]",
      "330:     \"\"\"Redirect unknown root URLs to /simple/.\"\"\"",
      "331:     return redirect(core.get_bad_url_redirect_path(request, prefix))",
      "",
      "---------------"
    ],
    "pypiserver/core.py||pypiserver/core.py": [
      "File: pypiserver/core.py -> pypiserver/core.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import re",
      "12: import sys",
      "14: import pkg_resources",
      "16: from . import Configuration",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: try:  # PY3",
      "15:     from urllib.parse import quote",
      "16: except ImportError:  # PY2",
      "17:     from urllib import quote",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:     return re.sub(r\"[-_.]+\", \"-\", name).lower()",
      "186: def is_allowed_path(path_part):",
      "187:     p = path_part.replace(\"\\\\\", \"/\")",
      "188:     return not (p.startswith(\".\") or \"/.\" in p)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191: def normalize_pkgname_for_url(name):",
      "192:     \"\"\"Perform PEP 503 normalization and ensure the value is safe for URLs.\"\"\"",
      "193:     return quote(re.sub(r\"[-_.]+\", \"-\", name).lower())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "273:     save_method(dest_fn, overwrite=True)  # Overwite check earlier.",
      "276: def _digest_file(fpath, hash_algo):",
      "277:     \"\"\"",
      "278:     Reads and digests a file according to specified hashing-algorith.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286: def get_bad_url_redirect_path(request, prefix):",
      "287:     \"\"\"Get the path for a bad root url.\"\"\"",
      "288:     p = request.fullpath",
      "289:     if p.endswith(\"/\"):",
      "290:         p = p[:-1]",
      "291:     p = p.rsplit('/', 1)[0]",
      "292:     prefix = quote(prefix)",
      "293:     p += \"/simple/{}/\".format(prefix)",
      "294:     return p",
      "",
      "---------------"
    ],
    "tests/doubles.py||tests/doubles.py": [
      "File: tests/doubles.py -> tests/doubles.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"Test doubles.\"\"\"",
      "4: class Namespace(object):",
      "5:     \"\"\"Simple namespace.\"\"\"",
      "7:     def __init__(self, **kwargs):",
      "8:         \"\"\"Instantiate the namespace with the provided kwargs.\"\"\"",
      "9:         for k, v in kwargs.items():",
      "10:             setattr(self, k, v)",
      "",
      "---------------"
    ],
    "tests/test_app.py||tests/test_app.py": [
      "File: tests/test_app.py -> tests/test_app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "430: def test_remove_pkg_missingNaveVersion(name, version, root, testapp):",
      "431:     msg = \"Missing 'name'/'version' fields: name=%s, version=%s\"",
      "432:     params = {':action': 'remove_pkg', 'name': name, 'version': version}",
      "434:     resp = testapp.post(\"/\", expect_errors=1, params=params)",
      "436:     assert resp.status == '400 Bad Request'",
      "440: def test_remove_pkg_notFound(root, testapp):",
      "",
      "[Removed Lines]",
      "433:     params = dict((k, v) for k,v in params.items() if v is not None)",
      "437:     assert msg %(name, version) in hp.unescape(resp.text)",
      "",
      "[Added Lines]",
      "434:     params = dict((k, v) for k, v in params.items() if v is not None)",
      "438:     assert msg % (name, version) in hp.unescape(resp.text)",
      "",
      "---------------"
    ],
    "tests/test_core.py||tests/test_core.py": [
      "File: tests/test_core.py -> tests/test_core.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import pytest",
      "9: from pypiserver import __main__, core",
      "12: ## Enable logging to detect any problems with it",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: from tests.doubles import Namespace",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:     f = tmpdir.join(\"empty\")",
      "91:     f.ensure()",
      "92:     assert core.digest_file(f.strpath, algo) == digest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: def test_redirect_prefix_encodes_newlines():",
      "97:     \"\"\"Ensure raw newlines are url encoded in the generated redirect.\"\"\"",
      "98:     request = Namespace(",
      "99:         fullpath='/\\nSet-Cookie:malicious=1;'",
      "100:     )",
      "101:     prefix = '\\nSet-Cookie:malicious=1;'",
      "102:     newpath = core.get_bad_url_redirect_path(request, prefix)",
      "103:     assert '\\n' not in newpath",
      "106: def test_normalize_pkgname_for_url_encodes_newlines():",
      "107:     \"\"\"Ensure newlines are url encoded in package names for urls.\"\"\"",
      "108:     assert '\\n' not in core.normalize_pkgname_for_url(",
      "109:         '/\\nSet-Cookie:malicious=1;'",
      "110:     )",
      "",
      "---------------"
    ],
    "tests/test_server.py||tests/test_server.py": [
      "File: tests/test_server.py -> tests/test_server.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:         'partial': \"-Ptests/htpasswd.a.a -a update\",",
      "62:     }",
      "63:     pswd_opts = pswd_opt_choices[authed]",
      "66:     proc = subprocess.Popen(cmd.split(), bufsize=_BUFF_SIZE)",
      "67:     time.sleep(SLEEP_AFTER_SRV)",
      "68:     assert proc.poll() is None",
      "",
      "[Removed Lines]",
      "64:     cmd = \"%s -m pypiserver.__main__ -vvv --overwrite -p %s %s %s %s\" % (",
      "65:         sys.executable, port, pswd_opts, other_cli, packdir)",
      "",
      "[Added Lines]",
      "64:     cmd = (",
      "65:         \"%s -m pypiserver.__main__ -vvv --overwrite -i 127.0.0.1 \"",
      "66:         \"-p %s %s %s %s\" % (",
      "67:             sys.executable,",
      "68:             port,",
      "69:             pswd_opts,",
      "70:             other_cli,",
      "71:             packdir,",
      "72:         )",
      "73:     )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02f3d5af6152aaa8c89a0d19608f569c438d0e33",
      "candidate_info": {
        "commit_hash": "02f3d5af6152aaa8c89a0d19608f569c438d0e33",
        "repo": "pypiserver/pypiserver",
        "commit_url": "https://github.com/pypiserver/pypiserver/commit/02f3d5af6152aaa8c89a0d19608f569c438d0e33",
        "files": [
          "pypiserver/config.py",
          "pypiserver/const.py",
          "pypiserver/core.py",
          "tests/doubles.py",
          "tests/test_core.py"
        ],
        "message": "Load plugins in configure()",
        "before_after_code_files": [
          "pypiserver/config.py||pypiserver/config.py",
          "pypiserver/const.py||pypiserver/const.py",
          "pypiserver/core.py||pypiserver/core.py",
          "tests/doubles.py||tests/doubles.py",
          "tests/test_core.py||tests/test_core.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pypiserver/core.py||pypiserver/core.py",
            "tests/doubles.py||tests/doubles.py",
            "tests/test_core.py||tests/test_core.py"
          ],
          "candidate": [
            "pypiserver/core.py||pypiserver/core.py",
            "tests/doubles.py||tests/doubles.py",
            "tests/test_core.py||tests/test_core.py"
          ]
        }
      },
      "candidate_diff": {
        "pypiserver/config.py||pypiserver/config.py": [
          "File: pypiserver/config.py -> pypiserver/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from textwrap import dedent",
          "10: import pkg_resources",
          "13: from . import __version__",
          "14: from .bottle import server_names",
          "15: from .const import STANDALONE_WELCOME",
          "",
          "[Removed Lines]",
          "11: from pkg_resources import iter_entry_points",
          "",
          "[Added Lines]",
          "14: from .core import load_plugins",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         self.help_formatter = help_formatter",
          "167:         self.parser_cls = parser_cls",
          "168:         self.parser_type = parser_type",
          "178:     def get_default(self, subcommand='run'):",
          "179:         \"\"\"Return a parsed config with default argument values.",
          "",
          "[Removed Lines]",
          "169:         self._plugins = {",
          "170:             'auth': {},",
          "171:         }",
          "173:     def load_plugins(self):",
          "174:         \"\"\"Load plugins for later access.\"\"\"",
          "175:         for entrypoint in iter_entry_points('pypiserver.authenticators'):",
          "176:             self._plugins['auth'][entrypoint.name] = entrypoint.load()",
          "",
          "[Added Lines]",
          "169:         self._plugins = load_plugins()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:     def _get_parser(self):",
          "221:         \"\"\"Return a hydrated parser.\"\"\"",
          "223:         parser = self.parser_cls(",
          "224:             description='PyPI-compatible package server',",
          "225:             formatter_class=self.help_formatter",
          "",
          "[Removed Lines]",
          "222:         self.load_plugins()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "446:                 default=environ.get('PYPISERVER_PASSWORD_FILE'),",
          "447:                 help=dedent('''\\",
          "448:                     use apache htpasswd file PASSWORD_FILE to set usernames &",
          "452:                 ''')",
          "453:             )",
          "454:         security.add_argument(",
          "455:             '--auth-backend',",
          "456:             dest='auther',",
          "457:             default=environ.get('PYPISERVER_AUTH_BACKEND'),",
          "459:             help=(",
          "460:                 'Specify an authentication backend. By default, will attempt '",
          "461:                 'to use an htpasswd file if provided. If specified, must '",
          "",
          "[Removed Lines]",
          "449:                     passwords when authenticating certain actions (see -a option).",
          "450:                     If you want to allow unauthorized access, set this option",
          "451:                     and -a to '.'",
          "458:             choices=self._plugins['auth'].keys(),",
          "",
          "[Added Lines]",
          "441:                     passwords when authenticating certain actions (see",
          "442:                     -a option). If you want to allow unauthorized access,",
          "443:                     set this option and -a to '.'",
          "450:             choices=self._plugins['authenticators'].keys(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "478:         :param ArgumentParser parser: the \"run\" subcommand parser",
          "479:         \"\"\"",
          "481:             self.add_plugin_group(parser, name, plugin)",
          "483:     @staticmethod",
          "",
          "[Removed Lines]",
          "480:         for name, plugin in self._plugins['auth'].items():",
          "",
          "[Added Lines]",
          "472:         for name, plugin in self._plugins['authenticators'].items():",
          "",
          "---------------"
        ],
        "pypiserver/const.py||pypiserver/const.py": [
          "File: pypiserver/const.py -> pypiserver/const.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from sys import version_info",
          "6: PY2 = version_info < (3,)",
          "7: STANDALONE_WELCOME = 'standalone'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: PLUGIN_GROUPS = ('authenticators',)",
          "",
          "---------------"
        ],
        "pypiserver/core.py||pypiserver/core.py": [
          "File: pypiserver/core.py -> pypiserver/core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import sys",
          "13: import pkg_resources",
          "17: if PY2:",
          "18:     from io import open",
          "",
          "[Removed Lines]",
          "15: from .const import PY2, STANDALONE_WELCOME",
          "",
          "[Added Lines]",
          "14: from pkg_resources import iter_entry_points",
          "16: from .const import PLUGIN_GROUPS, PY2, STANDALONE_WELCOME",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     re.I)",
          "38: def configure(config):",
          "39:     \"\"\"Validate configuration and return with a package list.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: def _validate_roots(roots):",
          "40:     \"\"\"Validate roots.",
          "42:     :param List[str] roots: a list of package roots.",
          "43:     \"\"\"",
          "44:     for root in roots:",
          "45:         try:",
          "46:             os.listdir(root)",
          "47:         except OSError as exc:",
          "48:             raise ValueError(",
          "49:                 'Error while trying to list root({}): '",
          "50:                 '{}'.format(root, repr(exc))",
          "51:             )",
          "54: def validate_config(config):",
          "55:     \"\"\"Check config arguments.",
          "57:     :param argparse.Namespace config: a config namespace",
          "59:     :raises ValueError: if a config value is invalid",
          "60:     \"\"\"",
          "61:     _validate_roots(config.roots)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     :return:  2-tuple (Configure, package-list)",
          "44:     :rtype: tuple",
          "45:     \"\"\"",
          "54:     def packages():",
          "55:         \"\"\"Return an iterable over package files in package roots.\"\"\"",
          "",
          "[Removed Lines]",
          "46:     for r in config.roots:",
          "47:         try:",
          "48:             os.listdir(r)",
          "49:         except OSError:",
          "50:             err = sys.exc_info()[1]",
          "51:             msg = \"Error: while trying to list root(%s): %s\"",
          "52:             sys.exit(msg % (r, err))",
          "",
          "[Added Lines]",
          "72:     validate_config(config)",
          "73:     add_plugins_to_config(config)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:     return config, packages",
          "90: def auth_by_htpasswd_file(ht_pwd_file, username, password):",
          "91:     \"\"\"The default ``config.auther``.\"\"\"",
          "92:     if ht_pwd_file is not None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: def load_plugins(*groups):",
          "112:     \"\"\"Load pypiserver plugins.",
          "114:     :param groups: the plugin group(s) names (str) to load. Group names",
          "115:         must be one of ``const.PLUGIN_GROUPS``. If no groups are",
          "116:         provided, all groups will be loaded.",
          "118:     :return: a dict whose keys are plugin group names and whose values",
          "119:         are nested dicts whose keys are plugin names and whose values",
          "120:         are the loaded plugins.",
          "121:     :rtype: dict",
          "122:     \"\"\"",
          "123:     if groups and not all(g in PLUGIN_GROUPS for g in groups):",
          "124:         raise ValueError(",
          "125:             'Invalid group provided. Groups must '",
          "126:             'be one of: {}'.format(PLUGIN_GROUPS)",
          "127:         )",
          "128:     groups = groups if groups else PLUGIN_GROUPS",
          "129:     plugins = {}",
          "130:     for group in groups:",
          "131:         plugins.setdefault(group, {})",
          "132:         for plugin in iter_entry_points('pypiserver.{}'.format(group)):",
          "133:             plugins[group][plugin.name] = plugin.load()",
          "134:     return plugins",
          "137: def add_plugins_to_config(config, plugins=None):",
          "138:     \"\"\"Load plugins if necessary and add to a config object.",
          "140:     :param argparse.Namespace config: a config namespace",
          "141:     :param dict plugins: an optional loaded plugin dict. If not",
          "142:         provided, plugins will be loaded.",
          "143:     \"\"\"",
          "144:     plugins = load_plugins() if plugins is None else plugins",
          "145:     config.plugins = plugins",
          "",
          "---------------"
        ],
        "tests/doubles.py||tests/doubles.py": [
          "File: tests/doubles.py -> tests/doubles.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Utilities for constructing test doubles.\"\"\"",
          "4: class GenericNamespace(object):",
          "5:     \"\"\"A generic namespace constructed from kwargs.\"\"\"",
          "7:     def __init__(self, **kwargs):",
          "8:         \"\"\"Convert kwargs to attributes on the instantiated object.\"\"\"",
          "9:         for key, value in kwargs.items():",
          "10:             setattr(self, key, value)",
          "",
          "---------------"
        ],
        "tests/test_core.py||tests/test_core.py": [
          "File: tests/test_core.py -> tests/test_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from pypiserver import __main__, core",
          "13: # Enable logging to detect any problems with it",
          "14: __main__.init_logging(level=logging.NOTSET)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from .doubles import GenericNamespace",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: hashes = [",
          "91: ]",
          "",
          "[Removed Lines]",
          "89:     ('sha256',   'e3b0c44298fc1c149afbf4c8996fb924'), # empty-sha256",
          "90:     ('md5',      'd41d8cd98f00b204e9800998ecf8427e'), # empty-md5",
          "",
          "[Added Lines]",
          "91:     ('sha256',   'e3b0c44298fc1c149afbf4c8996fb924'),  # empty-sha256",
          "92:     ('md5',      'd41d8cd98f00b204e9800998ecf8427e'),  # empty-md5",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     f = tmpdir.join(\"empty\")",
          "97:     f.ensure()",
          "98:     assert core.digest_file(f.strpath, algo) == digest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103: def test_load_plugins():",
          "104:     \"\"\"Test loading plugins.",
          "106:     We should at least be able to get the ones included with the full",
          "107:     passlib install.",
          "108:     \"\"\"",
          "109:     plugins = core.load_plugins()",
          "110:     assert 'htpasswd' in plugins['authenticators']",
          "113: def test_load_plugin_group():",
          "114:     \"\"\"Test loading a single plugin group.",
          "116:     This test is not quite definitive at the time of authorship since",
          "117:     there's only one plugin (therefore the output will be the same as",
          "118:     for ``load_plugins()`` with no arguments). However, as soon as",
          "119:     a second plugin type is added, it'll become more meaningful.",
          "120:     \"\"\"",
          "121:     auth_plugins = core.load_plugins('authenticators')",
          "122:     assert 'htpasswd' in auth_plugins['authenticators']",
          "125: def test_load_plugin_bad_group():",
          "126:     \"\"\"Test that trying to load a bad group raises an error.\"\"\"",
          "127:     with pytest.raises(ValueError):",
          "128:         # hopefully this is never a legit plugin type",
          "129:         core.load_plugins('fhgwgad')",
          "132: def test_load_plugins_bad_and_good_group():",
          "133:     \"\"\"Test that the bad group is detected even among a good one.\"\"\"",
          "134:     with pytest.raises(ValueError):",
          "135:         core.load_plugins('authenticators', 'wheelchair_assassins')",
          "138: def test_add_plugins_to_config_load(monkeypatch):",
          "139:     \"\"\"Test that load_plugins() is called for no provided plugins.\"\"\"",
          "140:     monkeypatch.setattr(core, 'load_plugins', lambda *x: 'plugin_stub')",
          "141:     config = GenericNamespace()",
          "142:     core.add_plugins_to_config(config)",
          "143:     assert config.plugins == 'plugin_stub'  # pylint: disable=no-member",
          "146: def test_add_plugins_to_config_no_load():",
          "147:     \"\"\"Test adding passed plugins to a config.\"\"\"",
          "148:     config = GenericNamespace()",
          "149:     core.add_plugins_to_config(config, plugins='plugins!')",
          "150:     assert config.plugins == 'plugins!'  # pylint: disable=no-member",
          "",
          "---------------"
        ]
      }
    }
  ]
}