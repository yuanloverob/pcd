{
  "cve_id": "CVE-2024-29190",
  "cve_desc": "Mobile Security Framework (MobSF) is a pen-testing, malware analysis and security assessment framework capable of performing static and dynamic analysis. In version 3.9.5 Beta and prior, MobSF does not perform any input validation when extracting the hostnames in `android:host`, so requests can also be sent to local hostnames. This can lead to server-side request forgery. An attacker can cause the server to make a connection to internal-only services within the organization's infrastructure. Commit 5a8eeee73c5f504a6c3abdf2a139a13804efdb77 has a hotfix for this issue.\n",
  "repo": "MobSF/Mobile-Security-Framework-MobSF",
  "patch_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
  "patch_info": {
    "commit_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "repo": "MobSF/Mobile-Security-Framework-MobSF",
    "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "files": [
      ".github/workflows/docker-release.yml",
      ".github/workflows/docker-test.yml",
      "mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock",
      "pyproject.toml"
    ],
    "message": "HOTFIX:[SECURITY] Fix GHSA-wfgj-wrgh-h3r3, dep bump, docker build qa",
    "before_after_code_files": [
      "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
      "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: logger = logging.getLogger(__name__)",
      "14: BANNER = \"\"\"",
      "15:   __  __       _    ____  _____       _____ ___",
      "16:  |  \\/  | ___ | |__/ ___||  ___|_   _|___ // _ \\",
      "",
      "[Removed Lines]",
      "13: VERSION = '3.9.5'",
      "",
      "[Added Lines]",
      "13: VERSION = '3.9.6'",
      "",
      "---------------"
    ],
    "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py": [
      "File: mobsf/MobSF/utils.py -> mobsf/MobSF/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import string",
      "17: import subprocess",
      "18: import stat",
      "19: import sqlite3",
      "20: import unicodedata",
      "21: import threading",
      "22: from pathlib import Path",
      "23: from distutils.version import StrictVersion",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import socket",
      "23: from urllib.parse import urlparse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848: def id_generator(size=6, chars=string.ascii_uppercase + string.digits):",
      "849:     \"\"\"Generate random string.\"\"\"",
      "850:     return ''.join(random.choice(chars) for _ in range(size))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855: def valid_host(host):",
      "856:     \"\"\"Check if host is valid.\"\"\"",
      "857:     try:",
      "858:         prefixs = ('http://', 'https://')",
      "859:         if not host.startswith(prefixs):",
      "860:             host = f'http://{host}'",
      "861:         parsed = urlparse(host)",
      "862:         domain = parsed.netloc",
      "863:         path = parsed.path",
      "864:         if len(domain) == 0:",
      "865:             # No valid domain",
      "866:             return False",
      "867:         if len(path) > 0:",
      "868:             # Only host is allowed",
      "869:             return False",
      "870:         if ':' in domain:",
      "871:             # IPv6",
      "872:             return False",
      "873:         # Local network",
      "874:         invalid_prefix = (",
      "875:             '127.',",
      "876:             '192.',",
      "877:             '10.',",
      "878:             '172.',",
      "879:             '169',",
      "880:             '0.',",
      "881:             'localhost')",
      "882:         if domain.startswith(invalid_prefix):",
      "883:             return False",
      "884:         ip = socket.gethostbyname(domain)",
      "885:         if ip.startswith(invalid_prefix):",
      "886:             # Resolve dns to get IP",
      "887:             return False",
      "888:         return True",
      "889:     except Exception:",
      "890:         return False",
      "",
      "---------------"
    ],
    "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py": [
      "File: mobsf/StaticAnalyzer/views/android/manifest_analysis.py -> mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from concurrent.futures import ThreadPoolExecutor",
      "9: from mobsf.MobSF.utils import (",
      "10:     upstream_proxy,",
      "11: )",
      "12: from mobsf.StaticAnalyzer.views.android import (",
      "13:     android_manifest_desc,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:     is_number,",
      "12:     valid_host,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:                           and scheme in ('http', 'https')",
      "149:                           and host",
      "150:                           and host != '*'):",
      "152:                         shost = f'{scheme}://{host}'",
      "154:                             c_url = f'{shost}:{port}{well_known_path}'",
      "155:                         else:",
      "156:                             c_url = f'{shost}{well_known_path}'",
      "",
      "[Removed Lines]",
      "151:                         host = host.replace('*.', '')",
      "153:                         if port:",
      "",
      "[Added Lines]",
      "153:                         host = host.replace('*.', '').replace('#', '')",
      "154:                         if not valid_host(host):",
      "155:                             continue",
      "157:                         if port and is_number(port):",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: [[package]]",
      "102: name = \"apkinspector\"",
      "104: description = \"apkInspector is a tool designed to provide detailed insights into the zip structure of APK files, offering the capability to extract content and decode the AndroidManifest.xml file.\"",
      "105: optional = false",
      "106: python-versions = \">=3.5,<4.0\"",
      "107: files = [",
      "110: ]",
      "112: [[package]]",
      "",
      "[Removed Lines]",
      "103: version = \"1.2.1\"",
      "108:     {file = \"apkinspector-1.2.1-py3-none-any.whl\", hash = \"sha256:4736719884e92dfbe3203103ad46deb22b4683e208ae66972236a052c5d23e37\"},",
      "109:     {file = \"apkinspector-1.2.1.tar.gz\", hash = \"sha256:6c1fd678246760e75f8386e6f4d9686b640cc6bd88256f0865dfacbd49e8e0dd\"},",
      "",
      "[Added Lines]",
      "103: version = \"1.2.2\"",
      "108:     {file = \"apkinspector-1.2.2-py3-none-any.whl\", hash = \"sha256:ad55200bd72eb1edeeb5fb114e3bb576ec825feef54fb8727173f1f02fa12bb7\"},",
      "109:     {file = \"apkinspector-1.2.2.tar.gz\", hash = \"sha256:ea7e56090e95eb791b593e9beedf4f1056eb269c4483558e13d5d5ef4b479c60\"},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "951: [[package]]",
      "952: name = \"fonttools\"",
      "954: description = \"Tools to manipulate font files\"",
      "955: optional = false",
      "956: python-versions = \">=3.8\"",
      "957: files = [",
      "1000: ]",
      "1002: [package.extras]",
      "",
      "[Removed Lines]",
      "953: version = \"4.49.0\"",
      "958:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d970ecca0aac90d399e458f0b7a8a597e08f95de021f17785fb68e2dc0b99717\"},",
      "959:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac9a745b7609f489faa65e1dc842168c18530874a5f5b742ac3dd79e26bca8bc\"},",
      "960:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0ba0e00620ca28d4ca11fc700806fd69144b463aa3275e1b36e56c7c09915559\"},",
      "961:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cdee3ab220283057e7840d5fb768ad4c2ebe65bdba6f75d5d7bf47f4e0ed7d29\"},",
      "962:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:ce7033cb61f2bb65d8849658d3786188afd80f53dad8366a7232654804529532\"},",
      "963:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:07bc5ea02bb7bc3aa40a1eb0481ce20e8d9b9642a9536cde0218290dd6085828\"},",
      "964:     {file = \"fonttools-4.49.0-cp310-cp310-win32.whl\", hash = \"sha256:86eef6aab7fd7c6c8545f3ebd00fd1d6729ca1f63b0cb4d621bccb7d1d1c852b\"},",
      "965:     {file = \"fonttools-4.49.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:1fac1b7eebfce75ea663e860e7c5b4a8831b858c17acd68263bc156125201abf\"},",
      "966:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:edc0cce355984bb3c1d1e89d6a661934d39586bb32191ebff98c600f8957c63e\"},",
      "967:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:83a0d9336de2cba86d886507dd6e0153df333ac787377325a39a2797ec529814\"},",
      "968:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:36c8865bdb5cfeec88f5028e7e592370a0657b676c6f1d84a2108e0564f90e22\"},",
      "969:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:33037d9e56e2562c710c8954d0f20d25b8386b397250d65581e544edc9d6b942\"},",
      "970:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8fb022d799b96df3eaa27263e9eea306bd3d437cc9aa981820850281a02b6c9a\"},",
      "971:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:33c584c0ef7dc54f5dd4f84082eabd8d09d1871a3d8ca2986b0c0c98165f8e86\"},",
      "972:     {file = \"fonttools-4.49.0-cp311-cp311-win32.whl\", hash = \"sha256:cbe61b158deb09cffdd8540dc4a948d6e8f4d5b4f3bf5cd7db09bd6a61fee64e\"},",
      "973:     {file = \"fonttools-4.49.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fc11e5114f3f978d0cea7e9853627935b30d451742eeb4239a81a677bdee6bf6\"},",
      "974:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d647a0e697e5daa98c87993726da8281c7233d9d4ffe410812a4896c7c57c075\"},",
      "975:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:f3bbe672df03563d1f3a691ae531f2e31f84061724c319652039e5a70927167e\"},",
      "976:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bebd91041dda0d511b0d303180ed36e31f4f54b106b1259b69fade68413aa7ff\"},",
      "977:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4145f91531fd43c50f9eb893faa08399816bb0b13c425667c48475c9f3a2b9b5\"},",
      "978:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ea329dafb9670ffbdf4dbc3b0e5c264104abcd8441d56de77f06967f032943cb\"},",
      "979:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:c076a9e548521ecc13d944b1d261ff3d7825048c338722a4bd126d22316087b7\"},",
      "980:     {file = \"fonttools-4.49.0-cp312-cp312-win32.whl\", hash = \"sha256:b607ea1e96768d13be26d2b400d10d3ebd1456343eb5eaddd2f47d1c4bd00880\"},",
      "981:     {file = \"fonttools-4.49.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a974c49a981e187381b9cc2c07c6b902d0079b88ff01aed34695ec5360767034\"},",
      "982:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:b85ec0bdd7bdaa5c1946398cbb541e90a6dfc51df76dfa88e0aaa41b335940cb\"},",
      "983:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:af20acbe198a8a790618ee42db192eb128afcdcc4e96d99993aca0b60d1faeb4\"},",
      "984:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4d418b1fee41a1d14931f7ab4b92dc0bc323b490e41d7a333eec82c9f1780c75\"},",
      "985:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b44a52b8e6244b6548851b03b2b377a9702b88ddc21dcaf56a15a0393d425cb9\"},",
      "986:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:7c7125068e04a70739dad11857a4d47626f2b0bd54de39e8622e89701836eabd\"},",
      "987:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:29e89d0e1a7f18bc30f197cfadcbef5a13d99806447c7e245f5667579a808036\"},",
      "988:     {file = \"fonttools-4.49.0-cp38-cp38-win32.whl\", hash = \"sha256:9d95fa0d22bf4f12d2fb7b07a46070cdfc19ef5a7b1c98bc172bfab5bf0d6844\"},",
      "989:     {file = \"fonttools-4.49.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:768947008b4dc552d02772e5ebd49e71430a466e2373008ce905f953afea755a\"},",
      "990:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:08877e355d3dde1c11973bb58d4acad1981e6d1140711230a4bfb40b2b937ccc\"},",
      "991:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:fdb54b076f25d6b0f0298dc706acee5052de20c83530fa165b60d1f2e9cbe3cb\"},",
      "992:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0af65c720520710cc01c293f9c70bd69684365c6015cc3671db2b7d807fe51f2\"},",
      "993:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1f255ce8ed7556658f6d23f6afd22a6d9bbc3edb9b96c96682124dc487e1bf42\"},",
      "994:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d00af0884c0e65f60dfaf9340e26658836b935052fdd0439952ae42e44fdd2be\"},",
      "995:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:263832fae27481d48dfafcc43174644b6706639661e242902ceb30553557e16c\"},",
      "996:     {file = \"fonttools-4.49.0-cp39-cp39-win32.whl\", hash = \"sha256:0404faea044577a01bb82d47a8fa4bc7a54067fa7e324785dd65d200d6dd1133\"},",
      "997:     {file = \"fonttools-4.49.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:b050d362df50fc6e38ae3954d8c29bf2da52be384649ee8245fdb5186b620836\"},",
      "998:     {file = \"fonttools-4.49.0-py3-none-any.whl\", hash = \"sha256:af281525e5dd7fa0b39fb1667b8d5ca0e2a9079967e14c4bfe90fd1cd13e0f18\"},",
      "999:     {file = \"fonttools-4.49.0.tar.gz\", hash = \"sha256:ebf46e7f01b7af7861310417d7c49591a85d99146fc23a5ba82fdb28af156321\"},",
      "",
      "[Added Lines]",
      "953: version = \"4.50.0\"",
      "958:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:effd303fb422f8ce06543a36ca69148471144c534cc25f30e5be752bc4f46736\"},",
      "959:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:7913992ab836f621d06aabac118fc258b9947a775a607e1a737eb3a91c360335\"},",
      "960:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e0a1c5bd2f63da4043b63888534b52c5a1fd7ae187c8ffc64cbb7ae475b9dab\"},",
      "961:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d40fc98540fa5360e7ecf2c56ddf3c6e7dd04929543618fd7b5cc76e66390562\"},",
      "962:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9fff65fbb7afe137bac3113827855e0204482727bddd00a806034ab0d3951d0d\"},",
      "963:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b1aeae3dd2ee719074a9372c89ad94f7c581903306d76befdaca2a559f802472\"},",
      "964:     {file = \"fonttools-4.50.0-cp310-cp310-win32.whl\", hash = \"sha256:e9623afa319405da33b43c85cceb0585a6f5d3a1d7c604daf4f7e1dd55c03d1f\"},",
      "965:     {file = \"fonttools-4.50.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:778c5f43e7e654ef7fe0605e80894930bc3a7772e2f496238e57218610140f54\"},",
      "966:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3dfb102e7f63b78c832e4539969167ffcc0375b013080e6472350965a5fe8048\"},",
      "967:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:9e58fe34cb379ba3d01d5d319d67dd3ce7ca9a47ad044ea2b22635cd2d1247fc\"},",
      "968:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2c673ab40d15a442a4e6eb09bf007c1dda47c84ac1e2eecbdf359adacb799c24\"},",
      "969:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9b3ac35cdcd1a4c90c23a5200212c1bb74fa05833cc7c14291d7043a52ca2aaa\"},",
      "970:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8844e7a2c5f7ecf977e82eb6b3014f025c8b454e046d941ece05b768be5847ae\"},",
      "971:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:f849bd3c5c2249b49c98eca5aaebb920d2bfd92b3c69e84ca9bddf133e9f83f0\"},",
      "972:     {file = \"fonttools-4.50.0-cp311-cp311-win32.whl\", hash = \"sha256:39293ff231b36b035575e81c14626dfc14407a20de5262f9596c2cbb199c3625\"},",
      "973:     {file = \"fonttools-4.50.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:c33d5023523b44d3481624f840c8646656a1def7630ca562f222eb3ead16c438\"},",
      "974:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:b4a886a6dbe60100ba1cd24de962f8cd18139bd32808da80de1fa9f9f27bf1dc\"},",
      "975:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ca1837bfbe5eafa11313dbc7edada79052709a1fffa10cea691210af4aa1fa\"},",
      "976:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0493dd97ac8977e48ffc1476b932b37c847cbb87fd68673dee5182004906828\"},",
      "977:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:77844e2f1b0889120b6c222fc49b2b75c3d88b930615e98893b899b9352a27ea\"},",
      "978:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:3566bfb8c55ed9100afe1ba6f0f12265cd63a1387b9661eb6031a1578a28bad1\"},",
      "979:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:35e10ddbc129cf61775d58a14f2d44121178d89874d32cae1eac722e687d9019\"},",
      "980:     {file = \"fonttools-4.50.0-cp312-cp312-win32.whl\", hash = \"sha256:cc8140baf9fa8f9b903f2b393a6c413a220fa990264b215bf48484f3d0bf8710\"},",
      "981:     {file = \"fonttools-4.50.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:0ccc85fd96373ab73c59833b824d7a73846670a0cb1f3afbaee2b2c426a8f931\"},",
      "982:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:e270a406219af37581d96c810172001ec536e29e5593aa40d4c01cca3e145aa6\"},",
      "983:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ac2463de667233372e9e1c7e9de3d914b708437ef52a3199fdbf5a60184f190c\"},",
      "984:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:47abd6669195abe87c22750dbcd366dc3a0648f1b7c93c2baa97429c4dc1506e\"},",
      "985:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:074841375e2e3d559aecc86e1224caf78e8b8417bb391e7d2506412538f21adc\"},",
      "986:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:0743fd2191ad7ab43d78cd747215b12033ddee24fa1e088605a3efe80d6984de\"},",
      "987:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:3d7080cce7be5ed65bee3496f09f79a82865a514863197ff4d4d177389e981b0\"},",
      "988:     {file = \"fonttools-4.50.0-cp38-cp38-win32.whl\", hash = \"sha256:a467ba4e2eadc1d5cc1a11d355abb945f680473fbe30d15617e104c81f483045\"},",
      "989:     {file = \"fonttools-4.50.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:f77e048f805e00870659d6318fd89ef28ca4ee16a22b4c5e1905b735495fc422\"},",
      "990:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:b6245eafd553c4e9a0708e93be51392bd2288c773523892fbd616d33fd2fda59\"},",
      "991:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:a4062cc7e8de26f1603323ef3ae2171c9d29c8a9f5e067d555a2813cd5c7a7e0\"},",
      "992:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:34692850dfd64ba06af61e5791a441f664cb7d21e7b544e8f385718430e8f8e4\"},",
      "993:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:678dd95f26a67e02c50dcb5bf250f95231d455642afbc65a3b0bcdacd4e4dd38\"},",
      "994:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:4f2ce7b0b295fe64ac0a85aef46a0f2614995774bd7bc643b85679c0283287f9\"},",
      "995:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:d346f4dc2221bfb7ab652d1e37d327578434ce559baf7113b0f55768437fe6a0\"},",
      "996:     {file = \"fonttools-4.50.0-cp39-cp39-win32.whl\", hash = \"sha256:a51eeaf52ba3afd70bf489be20e52fdfafe6c03d652b02477c6ce23c995222f4\"},",
      "997:     {file = \"fonttools-4.50.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:8639be40d583e5d9da67795aa3eeeda0488fb577a1d42ae11a5036f18fb16d93\"},",
      "998:     {file = \"fonttools-4.50.0-py3-none-any.whl\", hash = \"sha256:48fa36da06247aa8282766cfd63efff1bb24e55f020f29a335939ed3844d20d3\"},",
      "999:     {file = \"fonttools-4.50.0.tar.gz\", hash = \"sha256:fa5cf61058c7dbb104c2ac4e782bf1b2016a8cf2f69de6e4dd6a865d2c969bb5\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2538: [[package]]",
      "2539: name = \"pyqt5-qt5\"",
      "2541: description = \"The subset of a Qt installation needed by PyQt5.\"",
      "2542: optional = false",
      "2543: python-versions = \"*\"",
      "2544: files = [",
      "2549: ]",
      "2551: [[package]]",
      "",
      "[Removed Lines]",
      "2540: version = \"5.15.2\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.2-py3-none-macosx_10_13_intel.whl\", hash = \"sha256:76980cd3d7ae87e3c7a33bfebfaee84448fd650bad6840471d6cae199b56e154\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.2-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:1988f364ec8caf87a6ee5d5a3a5210d57539988bf8e84714c7d60972692e2f4a\"},",
      "2547:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win32.whl\", hash = \"sha256:9cc7a768b1921f4b982ebc00a318ccb38578e44e45316c7a4a850e953e1dd327\"},",
      "2548:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win_amd64.whl\", hash = \"sha256:750b78e4dba6bdf1607febedc08738e318ea09e9b10aea9ff0d73073f11f6962\"},",
      "",
      "[Added Lines]",
      "2540: version = \"5.15.13\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_10_13_x86_64.whl\", hash = \"sha256:92575a9e96a27c4ed67c56c7048ded7461a1655d5d21f0e05064664e6e9fcbdf\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:141859f2ffe04cc6c5db970e2b6ad9f98897805d886a14c52614e3799daab6d6\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "003ee165195a0bef1462658de104251b3cf24e29",
      "candidate_info": {
        "commit_hash": "003ee165195a0bef1462658de104251b3cf24e29",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/003ee165195a0bef1462658de104251b3cf24e29",
        "files": [
          ".github/CONTRIBUTING.md",
          ".github/ISSUE_TEMPLATE/bug_report.md",
          ".github/SECURITY.md",
          ".github/SUPPORT.md",
          ".github/workflows/auto-comment.yml",
          "README.md",
          "mobsf/DynamicAnalyzer/views/common/shared.py",
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/common/async_task.py",
          "mobsf/StaticAnalyzer/views/ios/ipa.py",
          "mobsf/templates/general/recent.html",
          "mobsf/templates/general/tasks.html",
          "pyproject.toml"
        ],
        "message": "4.2.1 (#2451)\n\n* Improvements in scan queue\n* Fix TOCTOU in delete scans view",
        "before_after_code_files": [
          "mobsf/DynamicAnalyzer/views/common/shared.py||mobsf/DynamicAnalyzer/views/common/shared.py",
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/common/async_task.py||mobsf/StaticAnalyzer/views/common/async_task.py",
          "mobsf/StaticAnalyzer/views/ios/ipa.py||mobsf/StaticAnalyzer/views/ios/ipa.py",
          "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html",
          "mobsf/templates/general/tasks.html||mobsf/templates/general/tasks.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/DynamicAnalyzer/views/common/shared.py||mobsf/DynamicAnalyzer/views/common/shared.py": [
          "File: mobsf/DynamicAnalyzer/views/common/shared.py -> mobsf/DynamicAnalyzer/views/common/shared.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         return data",
          "161:     return HttpResponse(",
          "162:         json.dumps(data),",
          "166: def invalid_params(api=False):",
          "",
          "[Removed Lines]",
          "163:         content_type='application/json')",
          "",
          "[Added Lines]",
          "163:         content_type='application/json; charset=utf-8')",
          "",
          "---------------"
        ],
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "22: BANNER = r\"\"\"",
          "23:   __  __       _    ____  _____       _  _    ____",
          "24:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  |___ \\",
          "",
          "[Removed Lines]",
          "21: VERSION = '4.2.0'",
          "",
          "[Added Lines]",
          "21: VERSION = '4.2.1'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: from mobsf.MobSF.views.scanning import Scanning",
          "39: from mobsf.MobSF.views.apk_downloader import apk_download",
          "40: from mobsf.StaticAnalyzer.models import (",
          "41:     RecentScansDB,",
          "42:     StaticAnalyzerAndroid,",
          "43:     StaticAnalyzerIOS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     EnqueuedTask,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516: @login_required",
          "517: @permission_required(Permissions.DELETE)",
          "518: def delete_scan(request, api=False):",
          "519:     \"\"\"Delete Scan from DB and remove the scan related files.\"\"\"",
          "520:     try:",
          "556:     except Exception as exp:",
          "557:         msg = str(exp)",
          "558:         exp_doc = exp.__doc__",
          "",
          "[Removed Lines]",
          "521:         if request.method == 'POST':",
          "522:             if api:",
          "523:                 md5_hash = request.POST['hash']",
          "524:             else:",
          "525:                 md5_hash = request.POST['md5']",
          "526:             data = {'deleted': 'scan hash not found'}",
          "527:             if re.match(MD5_REGEX, md5_hash):",
          "528:                 # Delete DB Entries",
          "529:                 scan = RecentScansDB.objects.filter(MD5=md5_hash)",
          "530:                 if scan.exists():",
          "531:                     RecentScansDB.objects.filter(MD5=md5_hash).delete()",
          "532:                     StaticAnalyzerAndroid.objects.filter(MD5=md5_hash).delete()",
          "533:                     StaticAnalyzerIOS.objects.filter(MD5=md5_hash).delete()",
          "534:                     StaticAnalyzerWindows.objects.filter(MD5=md5_hash).delete()",
          "535:                     # Delete Upload Dir Contents",
          "536:                     app_upload_dir = os.path.join(settings.UPLD_DIR, md5_hash)",
          "537:                     if is_dir_exists(app_upload_dir):",
          "538:                         shutil.rmtree(app_upload_dir)",
          "539:                     # Delete Download Dir Contents",
          "540:                     dw_dir = settings.DWD_DIR",
          "541:                     for item in os.listdir(dw_dir):",
          "542:                         item_path = os.path.join(dw_dir, item)",
          "543:                         valid_item = item.startswith(md5_hash + '-')",
          "544:                         # Delete all related files",
          "545:                         if is_file_exists(item_path) and valid_item:",
          "546:                             os.remove(item_path)",
          "547:                         # Delete related directories",
          "548:                         if is_dir_exists(item_path) and valid_item:",
          "549:                             shutil.rmtree(item_path)",
          "550:                     data = {'deleted': 'yes'}",
          "551:             if api:",
          "552:                 return data",
          "553:             else:",
          "554:                 ctype = 'application/json; charset=utf-8'",
          "555:                 return HttpResponse(json.dumps(data), content_type=ctype)",
          "",
          "[Added Lines]",
          "519: @require_http_methods(['POST'])",
          "523:         if api:",
          "524:             md5_hash = request.POST['hash']",
          "525:         else:",
          "526:             md5_hash = request.POST['md5']",
          "528:         if not re.match(MD5_REGEX, md5_hash):",
          "529:             return send_response({'deleted': 'Invalid scan hash'}, api)",
          "531:         # Delete DB Entries",
          "532:         scan = RecentScansDB.objects.filter(MD5=md5_hash)",
          "533:         if not scan.exists():",
          "534:             return send_response({'deleted': 'Scan not found in Database'}, api)",
          "535:         if settings.ASYNC_ANALYSIS:",
          "536:             # Handle Async Tasks",
          "537:             et = EnqueuedTask.objects.filter(checksum=md5_hash).first()",
          "538:             if et and not et.completed_at:",
          "539:                 # Queue is in progress, cannot delete the task",
          "540:                 return send_response({",
          "541:                     'deleted': 'A scan can only be deleted after it is completed'}, api)",
          "542:         # Delete all related DB entries",
          "543:         EnqueuedTask.objects.filter(checksum=md5_hash).all().delete()",
          "544:         RecentScansDB.objects.filter(MD5=md5_hash).delete()",
          "545:         StaticAnalyzerAndroid.objects.filter(MD5=md5_hash).delete()",
          "546:         StaticAnalyzerIOS.objects.filter(MD5=md5_hash).delete()",
          "547:         StaticAnalyzerWindows.objects.filter(MD5=md5_hash).delete()",
          "548:         # Delete Upload Dir Contents",
          "549:         app_upload_dir = os.path.join(settings.UPLD_DIR, md5_hash)",
          "550:         if is_dir_exists(app_upload_dir):",
          "551:             shutil.rmtree(app_upload_dir)",
          "552:         # Delete Download Dir Contents",
          "553:         dw_dir = settings.DWD_DIR",
          "554:         for item in os.listdir(dw_dir):",
          "555:             item_path = os.path.join(dw_dir, item)",
          "556:             valid_item = item.startswith(md5_hash + '-')",
          "557:             # Delete all related files",
          "558:             if is_file_exists(item_path) and valid_item:",
          "559:                 os.remove(item_path)",
          "560:             # Delete related directories",
          "561:             if is_dir_exists(item_path) and valid_item:",
          "562:                 shutil.rmtree(item_path)",
          "563:         return send_response({'deleted': 'yes'}, api)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py": [
          "File: mobsf/StaticAnalyzer/views/android/apk.py -> mobsf/StaticAnalyzer/views/android/apk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     \"\"\"Log scan subject.\"\"\"",
          "126:     app_name = app_dic['real_name']",
          "127:     pkg_name = man_data['packagename']",
          "129:     if app_name and pkg_name:",
          "130:         subject = f'{app_name} ({pkg_name})'",
          "131:     elif pkg_name:",
          "",
          "[Removed Lines]",
          "128:     subject = ''",
          "",
          "[Added Lines]",
          "128:     subject = 'Android App'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     msg = f'Performing Static Analysis on: {subject}'",
          "136:     logger.info(msg)",
          "137:     append_scan_status(checksum, msg)",
          "138:     return subject",
          "141: def apk_analysis_task(checksum, app_dic, rescan, queue=False):",
          "142:     \"\"\"APK Analysis Task.\"\"\"",
          "159:         append_scan_status(checksum, msg)",
          "160:         if queue:",
          "161:             return update_enqueued_task(",
          "259: def generate_dynamic_context(request, app_dic, checksum, context, api):",
          "",
          "[Removed Lines]",
          "143:     if queue:",
          "144:         settings.ASYNC_ANALYSIS = True",
          "145:     append_scan_status(checksum, 'init')",
          "146:     initialize_app_dic(checksum, app_dic, 'apk')",
          "147:     msg = 'Extracting APK'",
          "148:     logger.info(msg)",
          "149:     append_scan_status(checksum, msg)",
          "150:     app_dic['files'] = unzip(",
          "151:         checksum,",
          "152:         app_dic['app_path'],",
          "153:         app_dic['app_dir'])",
          "154:     logger.info('APK Extracted')",
          "155:     if not app_dic['files']:",
          "156:         # Can't Analyze APK, bail out.",
          "157:         msg = 'APK file is invalid or corrupt'",
          "158:         logger.error(msg)",
          "162:                 checksum, 'Failed', 'Failed')",
          "163:         return None, msg",
          "164:     app_dic['zipped'] = 'apk'",
          "165:     app_dic['certz'] = get_hardcoded_cert_keystore(",
          "166:         checksum,",
          "167:         app_dic['files'])",
          "168:     # Parse APK with Androguard",
          "169:     andro_apk = parse_apk(",
          "170:         checksum,",
          "171:         app_dic['app_path'])",
          "172:     # Manifest Data",
          "173:     man_data, man_analysis = get_manifest_data(",
          "174:         checksum,",
          "175:         app_dic,",
          "176:         andro_apk)",
          "177:     # Get App name",
          "178:     app_dic['real_name'] = get_app_name(",
          "179:         andro_apk,",
          "180:         app_dic['app_dir'],",
          "181:         True)",
          "182:     # Print scan subject",
          "183:     subject = print_scan_subject(checksum, app_dic, man_data)",
          "184:     app_dic['playstore'] = get_app_details(",
          "185:         checksum,",
          "186:         man_data['packagename'])",
          "187:     # Malware Permission check",
          "188:     mal_perms = permissions.check_malware_permission(",
          "189:         checksum,",
          "190:         man_data['perm'])",
          "191:     man_analysis['malware_permissions'] = mal_perms",
          "192:     # Get icon",
          "193:     # apktool should run before this",
          "194:     get_icon_apk(andro_apk, app_dic)",
          "195:     elf_dict = library_analysis(",
          "196:         checksum,",
          "197:         app_dic['app_dir'],",
          "198:         'elf')",
          "199:     cert_dic = cert_info(",
          "200:         andro_apk,",
          "201:         app_dic,",
          "202:         man_data)",
          "203:     apkid_results = apkid.apkid_analysis(",
          "204:         checksum,",
          "205:         app_dic['app_path'])",
          "206:     trackers = Trackers.Trackers(",
          "207:         checksum,",
          "208:         app_dic['app_dir'],",
          "209:         app_dic['tools_dir']).get_trackers()",
          "210:     apk_2_java(",
          "211:         checksum,",
          "212:         app_dic['app_path'],",
          "213:         app_dic['app_dir'],",
          "214:         settings.DOWNLOADED_TOOLS_DIR)",
          "215:     dex_2_smali(",
          "216:         checksum,",
          "217:         app_dic['app_dir'],",
          "218:         app_dic['tools_dir'])",
          "219:     code_an_dic = code_analysis(",
          "220:         checksum,",
          "221:         app_dic['app_dir'],",
          "222:         app_dic['zipped'],",
          "223:         app_dic['manifest_file'],",
          "224:         man_data['perm'])",
          "225:     # Get the strings and metadata",
          "226:     get_strings_metadata(",
          "227:         checksum,",
          "228:         andro_apk,",
          "229:         app_dic['app_dir'],",
          "230:         elf_dict['elf_strings'],",
          "231:         app_dic['zipped'],",
          "232:         ['.java'],",
          "233:         code_an_dic)",
          "234:     # Firebase DB Check",
          "235:     code_an_dic['firebase'] = firebase_analysis(",
          "236:         checksum,",
          "237:         code_an_dic)",
          "238:     # Domain Extraction and Malware Check",
          "239:     code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "240:         checksum,",
          "241:         code_an_dic['urls_list'])",
          "242:     context = save_get_ctx(",
          "243:         app_dic,",
          "244:         man_data,",
          "245:         man_analysis,",
          "246:         code_an_dic,",
          "247:         cert_dic,",
          "248:         elf_dict['elf_analysis'],",
          "249:         apkid_results,",
          "250:         trackers,",
          "251:         rescan,",
          "252:     )",
          "253:     if queue:",
          "254:         return update_enqueued_task(",
          "255:             checksum, subject, 'Success')",
          "256:     return context, None",
          "",
          "[Added Lines]",
          "138:     if subject == 'Failed':",
          "139:         subject = f'({subject})'",
          "145:     context = None",
          "146:     try:",
          "147:         if queue:",
          "148:             settings.ASYNC_ANALYSIS = True",
          "149:         append_scan_status(checksum, 'init')",
          "150:         initialize_app_dic(checksum, app_dic, 'apk')",
          "151:         msg = 'Extracting APK'",
          "152:         logger.info(msg)",
          "154:         app_dic['files'] = unzip(",
          "155:             checksum,",
          "156:             app_dic['app_path'],",
          "157:             app_dic['app_dir'])",
          "158:         logger.info('APK Extracted')",
          "159:         if not app_dic['files']:",
          "160:             # Can't Analyze APK, bail out.",
          "161:             msg = 'APK file is invalid or corrupt'",
          "162:             logger.error(msg)",
          "163:             append_scan_status(checksum, msg)",
          "164:             if queue:",
          "165:                 return update_enqueued_task(",
          "166:                     checksum, 'Failed', msg)",
          "167:             return context, msg",
          "168:         app_dic['zipped'] = 'apk'",
          "169:         app_dic['certz'] = get_hardcoded_cert_keystore(",
          "170:             checksum,",
          "171:             app_dic['files'])",
          "172:         # Parse APK with Androguard",
          "173:         andro_apk = parse_apk(",
          "174:             checksum,",
          "175:             app_dic['app_path'])",
          "176:         # Manifest Data",
          "177:         man_data, man_analysis = get_manifest_data(",
          "178:             checksum,",
          "179:             app_dic,",
          "180:             andro_apk)",
          "181:         # Get App name",
          "182:         app_dic['real_name'] = get_app_name(",
          "183:             andro_apk,",
          "184:             app_dic['app_dir'],",
          "185:             True)",
          "186:         # Print scan subject",
          "187:         subject = print_scan_subject(checksum, app_dic, man_data)",
          "188:         app_dic['playstore'] = get_app_details(",
          "189:             checksum,",
          "190:             man_data['packagename'])",
          "191:         # Malware Permission check",
          "192:         mal_perms = permissions.check_malware_permission(",
          "193:             checksum,",
          "194:             man_data['perm'])",
          "195:         man_analysis['malware_permissions'] = mal_perms",
          "196:         # Get icon",
          "197:         # apktool should run before this",
          "198:         get_icon_apk(andro_apk, app_dic)",
          "199:         elf_dict = library_analysis(",
          "200:             checksum,",
          "201:             app_dic['app_dir'],",
          "202:             'elf')",
          "203:         cert_dic = cert_info(",
          "204:             andro_apk,",
          "205:             app_dic,",
          "206:             man_data)",
          "207:         apkid_results = apkid.apkid_analysis(",
          "208:             checksum,",
          "209:             app_dic['app_path'])",
          "210:         trackers = Trackers.Trackers(",
          "211:             checksum,",
          "212:             app_dic['app_dir'],",
          "213:             app_dic['tools_dir']).get_trackers()",
          "214:         apk_2_java(",
          "215:             checksum,",
          "216:             app_dic['app_path'],",
          "217:             app_dic['app_dir'],",
          "218:             settings.DOWNLOADED_TOOLS_DIR)",
          "219:         dex_2_smali(",
          "220:             checksum,",
          "221:             app_dic['app_dir'],",
          "222:             app_dic['tools_dir'])",
          "223:         code_an_dic = code_analysis(",
          "224:             checksum,",
          "225:             app_dic['app_dir'],",
          "226:             app_dic['zipped'],",
          "227:             app_dic['manifest_file'],",
          "228:             man_data['perm'])",
          "229:         # Get the strings and metadata",
          "230:         get_strings_metadata(",
          "231:             checksum,",
          "232:             andro_apk,",
          "233:             app_dic['app_dir'],",
          "234:             elf_dict['elf_strings'],",
          "235:             app_dic['zipped'],",
          "236:             ['.java'],",
          "237:             code_an_dic)",
          "238:         # Firebase DB Check",
          "239:         code_an_dic['firebase'] = firebase_analysis(",
          "240:             checksum,",
          "241:             code_an_dic)",
          "242:         # Domain Extraction and Malware Check",
          "243:         code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "244:             checksum,",
          "245:             code_an_dic['urls_list'])",
          "246:         context = save_get_ctx(",
          "247:             app_dic,",
          "248:             man_data,",
          "249:             man_analysis,",
          "250:             code_an_dic,",
          "251:             cert_dic,",
          "252:             elf_dict['elf_analysis'],",
          "253:             apkid_results,",
          "254:             trackers,",
          "255:             rescan,",
          "256:         )",
          "259:                 checksum, subject, 'Success')",
          "260:         return context, None",
          "261:     except Exception as exp:",
          "262:         if queue:",
          "263:             return update_enqueued_task(",
          "264:                 checksum, 'Failed', repr(exp))",
          "265:         return context, repr(exp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295: def src_analysis_task(checksum, app_dic, rescan, pro_type, queue=False):",
          "296:     \"\"\"Android ZIP Source Code Analysis Begins.\"\"\"",
          "377:     return context",
          "",
          "[Removed Lines]",
          "297:     if queue:",
          "298:         settings.ASYNC_ANALYSIS = True",
          "299:     cert_dic = {",
          "300:         'certificate_info': '',",
          "301:         'certificate_status': '',",
          "302:         'description': '',",
          "303:     }",
          "304:     app_dic['strings'] = []",
          "305:     app_dic['secrets'] = []",
          "306:     # Above fields are only available for APK and not ZIP",
          "307:     app_dic['zipped'] = pro_type",
          "308:     app_dic['certz'] = get_hardcoded_cert_keystore(",
          "309:         checksum,",
          "310:         app_dic['files'])",
          "311:     # Manifest Data",
          "312:     man_data, man_analysis = get_manifest_data(",
          "313:         checksum,",
          "314:         app_dic)",
          "315:     # Get app name",
          "316:     app_dic['real_name'] = get_app_name(",
          "317:         None,",
          "318:         app_dic['app_dir'],",
          "319:         False)",
          "320:     # Print scan subject",
          "321:     subject = print_scan_subject(checksum, app_dic, man_data)",
          "322:     app_dic['playstore'] = get_app_details(",
          "323:         checksum,",
          "324:         man_data['packagename'])",
          "325:     # Malware Permission check",
          "326:     mal_perms = permissions.check_malware_permission(",
          "327:         checksum,",
          "328:         man_data['perm'])",
          "329:     man_analysis['malware_permissions'] = mal_perms",
          "330:     # Get icon",
          "331:     get_icon_from_src(",
          "332:         app_dic,",
          "333:         man_data['icons'])",
          "334:     code_an_dic = code_analysis(",
          "335:         checksum,",
          "336:         app_dic['app_dir'],",
          "337:         app_dic['zipped'],",
          "338:         app_dic['manifest_file'],",
          "339:         man_data['perm'])",
          "340:     # Get the strings and metadata",
          "341:     get_strings_metadata(",
          "342:         checksum,",
          "343:         None,",
          "344:         app_dic['app_dir'],",
          "345:         None,",
          "346:         app_dic['zipped'],",
          "347:         ['.java', '.kt'],",
          "348:         code_an_dic)",
          "349:     # Firebase DB Check",
          "350:     code_an_dic['firebase'] = firebase_analysis(",
          "351:         checksum,",
          "352:         code_an_dic)",
          "353:     # Domain Extraction and Malware Check",
          "354:     code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "355:         checksum,",
          "356:         code_an_dic['urls_list'])",
          "357:     # Extract Trackers from Domains",
          "358:     trackers = Trackers.Trackers(",
          "359:         checksum,",
          "360:         None,",
          "361:         app_dic['tools_dir']).get_trackers_domains_or_deps(",
          "362:             code_an_dic['domains'], [])",
          "363:     context = save_get_ctx(",
          "364:         app_dic,",
          "365:         man_data,",
          "366:         man_analysis,",
          "367:         code_an_dic,",
          "368:         cert_dic,",
          "369:         [],",
          "370:         {},",
          "371:         trackers,",
          "372:         rescan,",
          "373:     )",
          "374:     if queue:",
          "375:         return update_enqueued_task(",
          "376:             checksum, subject, 'Success')",
          "",
          "[Added Lines]",
          "306:     context = None",
          "307:     try:",
          "308:         if queue:",
          "309:             settings.ASYNC_ANALYSIS = True",
          "310:         cert_dic = {",
          "311:             'certificate_info': '',",
          "312:             'certificate_status': '',",
          "313:             'description': '',",
          "314:         }",
          "315:         app_dic['strings'] = []",
          "316:         app_dic['secrets'] = []",
          "317:         # Above fields are only available for APK and not ZIP",
          "318:         app_dic['zipped'] = pro_type",
          "319:         app_dic['certz'] = get_hardcoded_cert_keystore(",
          "320:             checksum,",
          "321:             app_dic['files'])",
          "322:         # Manifest Data",
          "323:         man_data, man_analysis = get_manifest_data(",
          "324:             checksum,",
          "325:             app_dic)",
          "326:         # Get app name",
          "327:         app_dic['real_name'] = get_app_name(",
          "328:             None,",
          "329:             app_dic['app_dir'],",
          "330:             False)",
          "331:         # Print scan subject",
          "332:         subject = print_scan_subject(checksum, app_dic, man_data)",
          "333:         app_dic['playstore'] = get_app_details(",
          "334:             checksum,",
          "335:             man_data['packagename'])",
          "336:         # Malware Permission check",
          "337:         mal_perms = permissions.check_malware_permission(",
          "338:             checksum,",
          "339:             man_data['perm'])",
          "340:         man_analysis['malware_permissions'] = mal_perms",
          "341:         # Get icon",
          "342:         get_icon_from_src(",
          "343:             app_dic,",
          "344:             man_data['icons'])",
          "345:         code_an_dic = code_analysis(",
          "346:             checksum,",
          "347:             app_dic['app_dir'],",
          "348:             app_dic['zipped'],",
          "349:             app_dic['manifest_file'],",
          "350:             man_data['perm'])",
          "351:         # Get the strings and metadata",
          "352:         get_strings_metadata(",
          "353:             checksum,",
          "354:             None,",
          "355:             app_dic['app_dir'],",
          "356:             None,",
          "357:             app_dic['zipped'],",
          "358:             ['.java', '.kt'],",
          "359:             code_an_dic)",
          "360:         # Firebase DB Check",
          "361:         code_an_dic['firebase'] = firebase_analysis(",
          "362:             checksum,",
          "363:             code_an_dic)",
          "364:         # Domain Extraction and Malware Check",
          "365:         code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "366:             checksum,",
          "367:             code_an_dic['urls_list'])",
          "368:         # Extract Trackers from Domains",
          "369:         trackers = Trackers.Trackers(",
          "370:             checksum,",
          "371:             None,",
          "372:             app_dic['tools_dir']).get_trackers_domains_or_deps(",
          "373:                 code_an_dic['domains'], [])",
          "374:         context = save_get_ctx(",
          "375:             app_dic,",
          "376:             man_data,",
          "377:             man_analysis,",
          "378:             code_an_dic,",
          "379:             cert_dic,",
          "380:             [],",
          "381:             {},",
          "382:             trackers,",
          "383:             rescan,",
          "384:         )",
          "385:         if queue:",
          "386:             return update_enqueued_task(",
          "387:                 checksum, subject, 'Success')",
          "388:     except Exception as exp:",
          "389:         if queue:",
          "390:             return update_enqueued_task(",
          "391:                 checksum, 'Failed', repr(exp))",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/async_task.py||mobsf/StaticAnalyzer/views/common/async_task.py": [
          "File: mobsf/StaticAnalyzer/views/common/async_task.py -> mobsf/StaticAnalyzer/views/common/async_task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Views to handle asynchronous tasks.\"\"\"",
          "2: import logging",
          "5: from django.utils import timezone",
          "6: from django.shortcuts import render",
          "",
          "[Removed Lines]",
          "3: from datetime import timedelta",
          "",
          "[Added Lines]",
          "3: from datetime import (",
          "4:     timedelta,",
          "5: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: from django_q.tasks import async_task",
          "17: from mobsf.MobSF.views.authentication import (",
          "18:     login_required,",
          "19: )",
          "",
          "[Removed Lines]",
          "16: from mobsf.StaticAnalyzer.models import EnqueuedTask",
          "",
          "[Added Lines]",
          "18: from mobsf.StaticAnalyzer.models import (",
          "19:     EnqueuedTask,",
          "20:     RecentScansDB,",
          "21: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: def async_analysis(checksum, app_name, func, *args):",
          "32:         checksum=checksum,",
          "34:     ).exists()",
          "38:     # Clear old tasks",
          "39:     queue_size = settings.QUEUE_MAX_SIZE",
          "40:     task_count = EnqueuedTask.objects.count()",
          "",
          "[Removed Lines]",
          "29:     # Check if there is any task with the same checksum",
          "30:     # created within the last 1 minute",
          "31:     recent_task_exists = EnqueuedTask.objects.filter(",
          "33:         created_at__gte=timezone.now() - timedelta(minutes=1),",
          "35:     if recent_task_exists:",
          "36:         logger.info('Analysis already in progress')",
          "37:         return HttpResponseRedirect('/tasks')",
          "",
          "[Added Lines]",
          "34:     \"\"\"Async Analysis Task.\"\"\"",
          "35:     # Check if the task is already completed",
          "36:     recent = RecentScansDB.objects.filter(MD5=checksum)",
          "37:     scan_completed = recent[0].APP_NAME or recent[0].PACKAGE_NAME",
          "38:     # Check if the task is updated within the last 60 minutes",
          "39:     active_recently = recent[0].TIMESTAMP >= timezone.now() - timedelta(minutes=60)",
          "40:     # Check if the task is already enqueued within the last 60 minutes",
          "41:     queued_recently = EnqueuedTask.objects.filter(",
          "43:         created_at__gte=timezone.now() - timedelta(minutes=60),",
          "46:     # Additional checks on recent queue",
          "47:     if queued_recently:",
          "48:         if scan_completed:",
          "49:             # scan already completed recently",
          "50:             logger.warning('Analysis already completed in the last 60 minutes')",
          "51:             return HttpResponseRedirect('/tasks?q=completed')",
          "52:         elif active_recently:",
          "53:             # scan not completed but active recently",
          "54:             logger.warning('Analysis already enqueued in the last 60 minutes')",
          "55:             return HttpResponseRedirect('/tasks?q=queued')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: def get_live_status(enq):",
          "76:     \"\"\"Get Live Status of the Task.\"\"\"",
          "81:     return enq.status",
          "",
          "[Removed Lines]",
          "77:     if enq.status not in {'Success', 'Failed'}:",
          "78:         logs = get_scan_logs(enq.checksum)",
          "79:         if logs:",
          "80:             return logs[-1]",
          "",
          "[Added Lines]",
          "96:     if enq.status == 'Success' or enq.app_name == 'Failed':",
          "97:         return enq.status",
          "98:     logs = get_scan_logs(enq.checksum)",
          "99:     if logs:",
          "100:         return logs[-1]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/ipa.py||mobsf/StaticAnalyzer/views/ios/ipa.py": [
          "File: mobsf/StaticAnalyzer/views/ios/ipa.py -> mobsf/StaticAnalyzer/views/ios/ipa.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     \"\"\"Get Scan Subject.\"\"\"",
          "141:     app_name = None",
          "142:     pkg_name = None",
          "143:     if bin_dict.get('bin_path'):",
          "144:         app_name = bin_dict['bin_path'].name if bin_dict['bin_path'] else None",
          "145:     if app_dic.get('infoplist'):",
          "146:         pkg_name = app_dic['infoplist'].get('id')",
          "148:     if app_name and pkg_name:",
          "150:     elif pkg_name:",
          "152:     elif app_name:",
          "158: def ipa_analysis_task(checksum, app_dic, rescan, queue=False):",
          "159:     \"\"\"IPA Analysis Task.\"\"\"",
          "172:         if queue:",
          "221: def generate_dynamic_context(request, app_dic, context, checksum, api):",
          "",
          "[Removed Lines]",
          "149:         return f'{app_name} ({pkg_name})'",
          "151:         return pkg_name",
          "153:         return app_name",
          "154:     else:",
          "155:         return 'iOS Binary'",
          "160:     if queue:",
          "161:         settings.ASYNC_ANALYSIS = True",
          "162:     scan_type = 'ipa'",
          "163:     append_scan_status(checksum, 'init')",
          "164:     msg = 'iOS Binary (IPA) Analysis Started'",
          "165:     logger.info(msg)",
          "166:     append_scan_status(checksum, msg)",
          "167:     initialize_app_dic(app_dic, checksum, scan_type)",
          "169:     if not extract_and_check_ipa(checksum, app_dic):",
          "170:         msg = ('IPA is malformed! MobSF cannot find Payload directory')",
          "171:         append_scan_status(checksum, 'IPA is malformed', msg)",
          "173:             return update_enqueued_task(",
          "174:                 checksum, 'Failed', 'Failed')",
          "175:         return None, msg",
          "176:     common_analysis(scan_type, app_dic, checksum)",
          "178:     # IPA Binary Analysis",
          "179:     bin_dict = binary_analysis(",
          "180:         checksum,",
          "181:         app_dic['bin_dir'],",
          "182:         app_dic['tools_dir'],",
          "183:         app_dic['app_dir'],",
          "184:         app_dic['infoplist'].get('bin'))",
          "185:     # Analyze dylibs and frameworks",
          "186:     lb = library_analysis(",
          "187:         checksum,",
          "188:         app_dic['bin_dir'],",
          "189:         'macho')",
          "190:     bin_dict['dylib_analysis'] = lb['macho_analysis']",
          "191:     bin_dict['framework_analysis'] = lb['framework_analysis']",
          "192:     # Extract String metadata from binary",
          "193:     code_dict = get_strings_metadata(",
          "194:         app_dic,",
          "195:         bin_dict,",
          "196:         app_dic['all_files'],",
          "197:         lb['macho_strings'])",
          "198:     # Domain Extraction and Malware Check",
          "199:     code_dict['domains'] = MalwareDomainCheck().scan(",
          "200:         checksum,",
          "201:         code_dict['urls_list'])",
          "202:     # Get Icon",
          "203:     get_icon_from_ipa(app_dic)",
          "204:     # Firebase and Trackers",
          "205:     common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "207:     code_dict['api'] = {}",
          "208:     code_dict['code_anal'] = {}",
          "209:     context = save_get_ctx(",
          "210:         app_dic,",
          "211:         code_dict,",
          "212:         bin_dict,",
          "213:         rescan)",
          "214:     if queue:",
          "215:         subject = get_scan_subject(app_dic, bin_dict)",
          "216:         return update_enqueued_task(",
          "217:             checksum, subject, 'Success')",
          "218:     return context, None",
          "",
          "[Added Lines]",
          "143:     subject = 'iOS App'",
          "150:         subject = f'{app_name} ({pkg_name})'",
          "152:         subject = pkg_name",
          "154:         subject = app_name",
          "155:     if subject == 'Failed':",
          "156:         subject = f'({subject})'",
          "157:     return subject",
          "162:     context = None",
          "163:     try:",
          "165:             settings.ASYNC_ANALYSIS = True",
          "166:         scan_type = 'ipa'",
          "167:         append_scan_status(checksum, 'init')",
          "168:         msg = 'iOS Binary (IPA) Analysis Started'",
          "169:         logger.info(msg)",
          "170:         append_scan_status(checksum, msg)",
          "171:         initialize_app_dic(app_dic, checksum, scan_type)",
          "173:         if not extract_and_check_ipa(checksum, app_dic):",
          "174:             msg = ('IPA is malformed! MobSF cannot find Payload directory')",
          "175:             append_scan_status(checksum, 'IPA is malformed', msg)",
          "176:             if queue:",
          "177:                 return update_enqueued_task(",
          "178:                     checksum, 'Failed', msg)",
          "179:             return context, msg",
          "180:         common_analysis(scan_type, app_dic, checksum)",
          "182:         # IPA Binary Analysis",
          "183:         bin_dict = binary_analysis(",
          "184:             checksum,",
          "185:             app_dic['bin_dir'],",
          "186:             app_dic['tools_dir'],",
          "187:             app_dic['app_dir'],",
          "188:             app_dic['infoplist'].get('bin'))",
          "189:         # Analyze dylibs and frameworks",
          "190:         lb = library_analysis(",
          "191:             checksum,",
          "192:             app_dic['bin_dir'],",
          "193:             'macho')",
          "194:         bin_dict['dylib_analysis'] = lb['macho_analysis']",
          "195:         bin_dict['framework_analysis'] = lb['framework_analysis']",
          "196:         # Extract String metadata from binary",
          "197:         code_dict = get_strings_metadata(",
          "198:             app_dic,",
          "199:             bin_dict,",
          "200:             app_dic['all_files'],",
          "201:             lb['macho_strings'])",
          "202:         # Domain Extraction and Malware Check",
          "203:         code_dict['domains'] = MalwareDomainCheck().scan(",
          "204:             checksum,",
          "205:             code_dict['urls_list'])",
          "206:         # Get Icon",
          "207:         get_icon_from_ipa(app_dic)",
          "208:         # Firebase and Trackers",
          "209:         common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "211:         code_dict['api'] = {}",
          "212:         code_dict['code_anal'] = {}",
          "213:         context = save_get_ctx(",
          "214:             app_dic,",
          "215:             code_dict,",
          "216:             bin_dict,",
          "217:             rescan)",
          "218:         if queue:",
          "219:             subject = get_scan_subject(app_dic, bin_dict)",
          "220:             return update_enqueued_task(",
          "221:                 checksum, subject, 'Success')",
          "222:         return context, None",
          "223:     except Exception as exp:",
          "224:         if queue:",
          "225:             return update_enqueued_task(",
          "226:                 checksum, 'Failed', repr(exp))",
          "227:         return context, repr(exp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255: def ios_analysis_task(checksum, app_dic, rescan, queue=False):",
          "256:     \"\"\"IOS Analysis Task.\"\"\"",
          "302:     return context",
          "",
          "[Removed Lines]",
          "257:     if queue:",
          "258:         settings.ASYNC_ANALYSIS = True",
          "259:     scan_type = 'zip'",
          "260:     logger.info('iOS Source Code Analysis Started')",
          "261:     initialize_app_dic(app_dic, checksum, scan_type)",
          "263:     # ANALYSIS BEGINS - Already Unzipped",
          "264:     # append_scan_status init done in android static analyzer",
          "265:     common_analysis(scan_type, app_dic, checksum)",
          "267:     # IOS Source Code Analysis",
          "268:     code_dict = ios_source_analysis(",
          "269:         checksum,",
          "270:         app_dic['app_dir'])",
          "271:     # Extract Strings and entropies from source code",
          "272:     ios_strs = strings_and_entropies(",
          "273:         checksum,",
          "274:         Path(app_dic['app_dir']),",
          "275:         ['.swift', '.m', '.h', '.plist', '.json'])",
          "276:     if ios_strs['secrets']:",
          "277:         app_dic['secrets'].extend(list(ios_strs['secrets']))",
          "278:     # Get App Icon",
          "279:     get_icon_source(app_dic)",
          "280:     # Firebase and Trackers",
          "281:     common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "283:     bin_dict = {",
          "284:         'checksec': {},",
          "285:         'libraries': [],",
          "286:         'bin_code_analysis': {},",
          "287:         'strings': list(ios_strs['strings']),",
          "288:         'bin_info': {},",
          "289:         'bin_type': code_dict['source_type'],",
          "290:         'dylib_analysis': {},",
          "291:         'framework_analysis': {},",
          "292:     }",
          "293:     context = save_get_ctx(",
          "294:         app_dic,",
          "295:         code_dict,",
          "296:         bin_dict,",
          "297:         rescan)",
          "298:     if queue:",
          "299:         subject = get_scan_subject(app_dic, bin_dict)",
          "300:         return update_enqueued_task(",
          "301:             checksum, subject, 'Success')",
          "",
          "[Added Lines]",
          "266:     context = None",
          "267:     try:",
          "268:         if queue:",
          "269:             settings.ASYNC_ANALYSIS = True",
          "270:         scan_type = 'zip'",
          "271:         logger.info('iOS Source Code Analysis Started')",
          "272:         initialize_app_dic(app_dic, checksum, scan_type)",
          "274:         # ANALYSIS BEGINS - Already Unzipped",
          "275:         # append_scan_status init done in android static analyzer",
          "276:         common_analysis(scan_type, app_dic, checksum)",
          "278:         # IOS Source Code Analysis",
          "279:         code_dict = ios_source_analysis(",
          "280:             checksum,",
          "281:             app_dic['app_dir'])",
          "282:         # Extract Strings and entropies from source code",
          "283:         ios_strs = strings_and_entropies(",
          "284:             checksum,",
          "285:             Path(app_dic['app_dir']),",
          "286:             ['.swift', '.m', '.h', '.plist', '.json'])",
          "287:         if ios_strs['secrets']:",
          "288:             app_dic['secrets'].extend(list(ios_strs['secrets']))",
          "289:         # Get App Icon",
          "290:         get_icon_source(app_dic)",
          "291:         # Firebase and Trackers",
          "292:         common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "294:         bin_dict = {",
          "295:             'checksec': {},",
          "296:             'libraries': [],",
          "297:             'bin_code_analysis': {},",
          "298:             'strings': list(ios_strs['strings']),",
          "299:             'bin_info': {},",
          "300:             'bin_type': code_dict['source_type'],",
          "301:             'dylib_analysis': {},",
          "302:             'framework_analysis': {},",
          "303:         }",
          "304:         context = save_get_ctx(",
          "305:             app_dic,",
          "306:             code_dict,",
          "307:             bin_dict,",
          "308:             rescan)",
          "309:         if queue:",
          "310:             subject = get_scan_subject(app_dic, bin_dict)",
          "311:             return update_enqueued_task(",
          "312:                 checksum, subject, 'Success')",
          "313:     except Exception as exp:",
          "314:         if queue:",
          "315:             return update_enqueued_task(",
          "316:                 checksum, 'Failed', repr(exp))",
          "",
          "---------------"
        ],
        "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html": [
          "File: mobsf/templates/general/recent.html -> mobsf/templates/general/recent.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:                                 md5: md5_hash,",
          "289:                                 },",
          "290:                             success : function(json) {",
          "292:                                     Swal.fire(",
          "293:                                         'Deleted!',",
          "294:                                         'The scan result is deleted!',",
          "",
          "[Removed Lines]",
          "291:                                 if (json.deleted==='yes'){",
          "",
          "[Added Lines]",
          "291:                                 if (json.deleted ==='yes'){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:                                 else {",
          "301:                                     Swal.fire(",
          "302:                                     'Delete Failed',",
          "304:                                     'error'",
          "305:                                     )",
          "306:                                 }",
          "",
          "[Removed Lines]",
          "303:                                     'Cannot delete the scan result!',",
          "",
          "[Added Lines]",
          "303:                                     json.deleted,",
          "",
          "---------------"
        ],
        "mobsf/templates/general/tasks.html||mobsf/templates/general/tasks.html": [
          "File: mobsf/templates/general/tasks.html -> mobsf/templates/general/tasks.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:       sidebar-collapse",
          "6: {% endblock %}",
          "7: {% block extra_css %}",
          "8: <style>",
          "10:     .loader {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: <link href=\"{% static \"adminlte/plugins/sweetalert2/sweetalert2.min.css\" %}\" rel=\"stylesheet\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: </div>",
          "71: {% endblock %}",
          "72: {% block extra_scripts %}",
          "73: <script>",
          "74:    document.addEventListener(\"DOMContentLoaded\", function () {",
          "75:     const tasksTableBody = document.querySelector(\"#tasks-table tbody\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: <script src=\"{% static \"adminlte/plugins/sweetalert2/sweetalert2.min.js\" %}\"></script>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:             addLoader(statusCell);",
          "129:         } else {",
          "130:             completedCell.textContent = new Date(task.completed_at).toLocaleString();",
          "135:                 statusCell.classList.add(\"text-success\");",
          "136:                 statusCell.classList.remove(\"text-warning\");",
          "139:                 addReportLink(task, statusCell);",
          "140:             }",
          "141:         }",
          "142:         addAppName(task, statusCell);",
          "",
          "[Removed Lines]",
          "131:             if (task.status === \"Failed\") {",
          "132:                 statusCell.classList.add(\"text-danger\");",
          "133:                 statusCell.classList.remove(\"text-warning\");",
          "134:             } else if (task.status === \"Success\") {",
          "137:             }",
          "138:             if (task.status === \"Success\") {",
          "",
          "[Added Lines]",
          "133:             if (task.status === \"Success\") {",
          "137:             } else if (task.app_name === \"Failed\")  {",
          "138:                 statusCell.classList.add(\"text-danger\");",
          "139:                 statusCell.classList.remove(\"text-warning\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:     setInterval(updateTaskStatuses, 5000); // Update every 5 seconds",
          "229: });",
          "231:     </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:     function getQueryParam(paramName) {",
          "231:         const urlParams = new URLSearchParams(window.location.search); // Get the query string",
          "232:         return urlParams.has(paramName) ? urlParams.get(paramName) : null;",
          "233:     }",
          "235:     const q = getQueryParam('q');",
          "237:     if (q && q === 'completed') {",
          "238:         Swal.fire(",
          "239:             'Scan Task Recently Completed!',",
          "240:             'The scan was recently completed.',",
          "241:             'warning'",
          "242:         )",
          "243:     } else if (q && q === 'queued') {",
          "244:         Swal.fire(",
          "245:             'Scan Task Already Added!',",
          "246:             'This scan task has already been added to the scan queue.',",
          "247:             'warning'",
          "248:         )",
          "249:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b2a3c855260d01cfe1f6735c06838ee5dc8c001",
      "candidate_info": {
        "commit_hash": "9b2a3c855260d01cfe1f6735c06838ee5dc8c001",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/9b2a3c855260d01cfe1f6735c06838ee5dc8c001",
        "files": [
          ".github/workflows/mobsf-test.yml",
          ".github/workflows/python-publish.yml",
          "Dockerfile",
          "README.md",
          "docker-compose.yml",
          "mobsf/DynamicAnalyzer/tools/webproxy.py",
          "mobsf/DynamicAnalyzer/views/android/analysis.py",
          "mobsf/DynamicAnalyzer/views/android/tests_frida.py",
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/security.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/tools_download.py",
          "mobsf/MobSF/utils.py",
          "mobsf/MobSF/views/authentication.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/tools/apktool_2.10.0.jar",
          "mobsf/StaticAnalyzer/tools/bundletool-all-1.17.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/LICENSE",
          "mobsf/StaticAnalyzer/tools/jadx/NOTICE",
          "mobsf/StaticAnalyzer/tools/jadx/README.md",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat",
          "mobsf/StaticAnalyzer/tools/jadx/lib/ST4-4.0.8.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/aapt2-proto-7.3.1-8691043.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/activation-1.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/antlr-2.7.7.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/antlr-3.5.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/antlr-runtime-3.5.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/apksig-7.3.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/asm-9.4.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/baksmali-2.5.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/checker-qual-3.8.0.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/commons-lang3-3.12.0.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/commons-text-1.10.0.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/dalvik-dx-11.0.0_r3.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/dexlib2-2.5.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/error_prone_annotations-2.5.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/failureaccess-1.0.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/flatlaf-2.6.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/flatlaf-extras-2.6.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/flatlaf-intellij-themes-2.6.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/gson-2.9.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/guava-30.1.1-jre.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/image-viewer-1.2.3.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/j2objc-annotations-1.3.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-cli-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-core-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-dex-input-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-gui-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-java-convert-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-java-input-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-plugins-api-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jadx-smali-input-1.4.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/javax.mail-1.6.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jcommander-1.82.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jdwp-2.0.0.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jfontchooser-1.0.5.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/jsr305-3.0.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/logback-classic-1.3.4.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/logback-core-1.3.4.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/mapping-io-0.4.0-SNAPSHOT.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/protobuf-java-3.21.8.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/r8-3.3.75.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/raung-common-0.0.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/raung-disasm-0.0.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/reactive-streams-1.0.3.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/rsyntaxtextarea-3.3.0.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/rxjava-2.2.21.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/rxjava2-swing-0.3.7.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/slf4j-api-2.0.3.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/smali-2.5.2.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/stringtemplate-3.2.1.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/svgSalamander-1.1.4.jar",
          "mobsf/StaticAnalyzer/tools/jadx/lib/util-2.5.2.jar",
          "mobsf/StaticAnalyzer/tools/vd2svg-0.4.4.jar",
          "mobsf/StaticAnalyzer/views/android/converter.py",
          "mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "mobsf/StaticAnalyzer/views/android/manifest_utils.py",
          "mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/android/xapk.py",
          "mobsf/StaticAnalyzer/views/common/binary/elf.py",
          "mobsf/StaticAnalyzer/views/common/binary/macho.py",
          "mobsf/templates/pdf/android_report.html",
          "mobsf/templates/static_analysis/android_binary_analysis.html",
          "poetry.lock",
          "pyproject.toml",
          "scripts/clean.bat",
          "scripts/dependencies.sh",
          "scripts/postgres_support.sh",
          "setup.bat",
          "setup.sh"
        ],
        "message": "[HOTFIX] Dockerfile and dependency upgrade, Bug Fixes  (#2439)\n\n* Dockerfile: migrate from Ubuntu to Debian Bookworm\n* Update and MachO and ELF Analysis\n* Update docker compose with postgres\n* JDK bump to 22.0.2\n* Python bump to 3.12\n* Bump jadx, apktool, vd2svg, bundletool\n* Remove jadx from repo and download it dynamically during setup\n* Install jadx during docker build\n* Replace deprecated dependencies\n* Bump httptools\n* Postgres Support by default\n* Bump LIEF to latest, reintroduce PIE checks for ELF\n* Fixes #2430 #2432 #2395\n* Bug Fixes",
        "before_after_code_files": [
          "mobsf/DynamicAnalyzer/tools/webproxy.py||mobsf/DynamicAnalyzer/tools/webproxy.py",
          "mobsf/DynamicAnalyzer/views/android/analysis.py||mobsf/DynamicAnalyzer/views/android/analysis.py",
          "mobsf/DynamicAnalyzer/views/android/tests_frida.py||mobsf/DynamicAnalyzer/views/android/tests_frida.py",
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/security.py||mobsf/MobSF/security.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/tools_download.py||mobsf/MobSF/tools_download.py",
          "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
          "mobsf/MobSF/views/authentication.py||mobsf/MobSF/views/authentication.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat||mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat",
          "mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat||mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat",
          "mobsf/StaticAnalyzer/views/android/converter.py||mobsf/StaticAnalyzer/views/android/converter.py",
          "mobsf/StaticAnalyzer/views/android/icon_analysis.py||mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "mobsf/StaticAnalyzer/views/android/jar_aar.py||mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "mobsf/StaticAnalyzer/views/android/manifest_utils.py||mobsf/StaticAnalyzer/views/android/manifest_utils.py",
          "mobsf/StaticAnalyzer/views/android/static_analyzer.py||mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/android/xapk.py||mobsf/StaticAnalyzer/views/android/xapk.py",
          "mobsf/StaticAnalyzer/views/common/binary/elf.py||mobsf/StaticAnalyzer/views/common/binary/elf.py",
          "mobsf/StaticAnalyzer/views/common/binary/macho.py||mobsf/StaticAnalyzer/views/common/binary/macho.py",
          "mobsf/templates/pdf/android_report.html||mobsf/templates/pdf/android_report.html",
          "mobsf/templates/static_analysis/android_binary_analysis.html||mobsf/templates/static_analysis/android_binary_analysis.html",
          "poetry.lock||poetry.lock",
          "scripts/clean.bat||scripts/clean.bat",
          "scripts/install_java_wkhtmltopdf.sh||scripts/dependencies.sh",
          "scripts/postgres_support.sh||scripts/postgres_support.sh",
          "setup.bat||setup.bat",
          "setup.sh||setup.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/DynamicAnalyzer/tools/webproxy.py||mobsf/DynamicAnalyzer/tools/webproxy.py": [
          "File: mobsf/DynamicAnalyzer/tools/webproxy.py -> mobsf/DynamicAnalyzer/tools/webproxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: def get_ca_file():",
          "68:     \"\"\"Get CA Dir.\"\"\"",
          "71:     ca_file = ca_dir / 'mitmproxy-ca-cert.pem'",
          "72:     if not ca_file.exists():",
          "73:         create_ca()",
          "",
          "[Removed Lines]",
          "69:     from mitmproxy import ctx",
          "70:     ca_dir = Path(ctx.mitmproxy.options.CONF_DIR).expanduser()",
          "",
          "[Added Lines]",
          "69:     from mitmproxy import options",
          "70:     ca_dir = Path(options.CONF_DIR).expanduser()",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/analysis.py||mobsf/DynamicAnalyzer/views/android/analysis.py": [
          "File: mobsf/DynamicAnalyzer/views/android/analysis.py -> mobsf/DynamicAnalyzer/views/android/analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:         if is_file_exists(fd_logs):",
          "204:             shutil.copyfile(fd_logs, dfd_logs)",
          "205:         try:",
          "207:         except Exception:",
          "208:             pass",
          "209:         if is_file_exists(web):",
          "",
          "[Removed Lines]",
          "206:             shutil.copytree(sshot, dsshot)",
          "",
          "[Added Lines]",
          "206:             shutil.copytree(sshot, dsshot, dirs_exist_ok=True)",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/tests_frida.py||mobsf/DynamicAnalyzer/views/android/tests_frida.py": [
          "File: mobsf/DynamicAnalyzer/views/android/tests_frida.py -> mobsf/DynamicAnalyzer/views/android/tests_frida.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     \"\"\"Instrument app with frida.\"\"\"",
          "73:     data = {",
          "74:         'status': 'failed',",
          "76:     try:",
          "77:         action = request.POST.get('frida_action', 'spawn')",
          "78:         pid = request.POST.get('pid')",
          "",
          "[Removed Lines]",
          "75:         'message': 'Failed to instrument app'}",
          "",
          "[Added Lines]",
          "75:         'message': ''}",
          "",
          "---------------"
        ],
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import subprocess",
          "6: import sys",
          "7: import shutil",
          "9: from mobsf.install.windows.setup import windows_config_local",
          "11: logger = logging.getLogger(__name__)",
          "20: \"\"\"  # noqa: W291",
          "21: # ASCII Font: Standard",
          "",
          "[Removed Lines]",
          "13: VERSION = '4.0.7'",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _  _    ___",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / _ \\",
          "17:  | |\\/| |/ _ \\| '_ \\___ \\| |_  \\ \\ / / || |_| | | |",
          "18:  | |  | | (_) | |_) |__) |  _|  \\ V /|__   _| |_| |",
          "19:  |_|  |_|\\___/|_.__/____/|_|     \\_/    |_|(_)___/",
          "",
          "[Added Lines]",
          "8: import threading",
          "9: from importlib import (",
          "10:     machinery,",
          "11:     util,",
          "12: )",
          "14: from mobsf.MobSF.tools_download import install_jadx",
          "19: VERSION = '4.1.0'",
          "20: BANNER = r\"\"\"",
          "21:   __  __       _    ____  _____       _  _    _",
          "22:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / |",
          "23:  | |\\/| |/ _ \\| '_ \\___ \\| |_  \\ \\ / / || |_ | |",
          "24:  | |  | | (_) | |_) |__) |  _|  \\ V /|__   _|| |",
          "25:  |_|  |_|\\___/|_.__/____/|_|     \\_/    |_|(_)_|",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:         # Run Once",
          "39:         make_migrations(base_dir)",
          "40:         migrate(base_dir)",
          "41:         # Windows Setup",
          "42:         windows_config_local(mobsf_home)",
          "43:     return secret_key",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         # Install JADX",
          "48:         thread = threading.Thread(",
          "49:             target=install_jadx,",
          "50:             name='install_jadx',",
          "51:             args=(mobsf_home,))",
          "52:         thread.start()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         upload_dir = os.path.join(mobsf_home, 'uploads/')",
          "126:         if not os.path.exists(upload_dir):",
          "127:             os.makedirs(upload_dir)",
          "128:         # Signature Directory",
          "129:         sig_dir = os.path.join(mobsf_home, 'signatures/')",
          "130:         if use_home:",
          "131:             src = os.path.join(base_dir, 'signatures/')",
          "132:             try:",
          "134:             except Exception:",
          "135:                 pass",
          "136:         elif not os.path.exists(sig_dir):",
          "",
          "[Removed Lines]",
          "133:                 shutil.copytree(src, sig_dir)",
          "",
          "[Added Lines]",
          "140:         # Downloaded tools",
          "141:         downloaded_tools_dir = os.path.join(mobsf_home, 'tools/')",
          "142:         if not os.path.exists(downloaded_tools_dir):",
          "143:             os.makedirs(downloaded_tools_dir)",
          "149:                 shutil.copytree(src, sig_dir, dirs_exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: def get_mobsf_version():",
          "144:     return BANNER, VERSION, f'v{VERSION}'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163: def load_source(modname, filename):",
          "164:     loader = machinery.SourceFileLoader(modname, filename)",
          "165:     spec = util.spec_from_file_location(modname, filename, loader=loader)",
          "166:     module = util.module_from_spec(spec)",
          "167:     loader.exec_module(module)",
          "168:     return module",
          "",
          "---------------"
        ],
        "mobsf/MobSF/security.py||mobsf/MobSF/security.py": [
          "File: mobsf/MobSF/security.py -> mobsf/MobSF/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: def get_executable_hashes():",
          "64:     # Internal Binaries shipped with MobSF",
          "65:     base = Path(settings.BASE_DIR)",
          "66:     manage_py = base.parent / 'manage.py'",
          "67:     exec_loc = [",
          "68:         base / 'DynamicAnalyzer' / 'tools',",
          "69:         base / 'StaticAnalyzer' / 'tools',",
          "70:         manage_py,",
          "71:     ]",
          "72:     # External binaries used directly by MobSF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     downloaded_tools = Path(settings.DOWNLOADED_TOOLS_DIR)",
          "71:         downloaded_tools,",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: MobSF and Django settings",
          "6: \"\"\"",
          "9: import logging",
          "10: import os",
          "",
          "[Removed Lines]",
          "8: import imp",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:     first_run,",
          "14:     get_mobsf_home,",
          "15:     get_mobsf_version,",
          "16: )",
          "18: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     load_source,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: SIGNATURE_DIR = os.path.join(MobSF_HOME, 'signatures/')",
          "41: # Tools Directory",
          "42: TOOLS_DIR = os.path.join(BASE_DIR, 'DynamicAnalyzer/tools/')",
          "43: # Secret File",
          "44: SECRET_FILE = os.path.join(MobSF_HOME, 'secret')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: # Downloaded Tools Directory",
          "44: DOWNLOADED_TOOLS_DIR = os.path.join(MobSF_HOME, 'tools/')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: try:",
          "48:     if USE_HOME:",
          "49:         USER_CONFIG = os.path.join(MobSF_HOME, 'config.py')",
          "51:         locals().update(  # lgtm [py/modification-of-locals]",
          "52:             {k: v for k, v in list(sett.__dict__.items())",
          "53:                 if not k.startswith('__')})",
          "",
          "[Removed Lines]",
          "50:         sett = imp.load_source('user_settings', USER_CONFIG)",
          "",
          "[Added Lines]",
          "52:         sett = load_source('user_settings', USER_CONFIG)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "144: # Database",
          "145: # https://docs.djangoproject.com/en/dev/ref/settings/#databases",
          "160:         'ENGINE': 'django.db.backends.postgresql_psycopg2',",
          "161:         'NAME': 'mobsf',",
          "162:         'USER': os.environ['POSTGRES_USER'],",
          "163:         'PASSWORD': os.environ['POSTGRES_PASSWORD'],",
          "164:         'HOST': os.environ['POSTGRES_HOST'],",
          "166:     }",
          "167: }",
          "170: # ===============================================",
          "171: DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'",
          "172: DEBUG = bool(os.getenv('MOBSF_DEBUG', '0') == '1')",
          "",
          "[Removed Lines]",
          "146: # Sqlite3 support",
          "148: DATABASES = {",
          "149:     'default': {",
          "150:         'ENGINE': 'django.db.backends.sqlite3',",
          "151:         'NAME': DB_DIR,",
          "152:     },",
          "153: }",
          "154: # End Sqlite3 support",
          "156: # Postgres DB - Install psycopg2",
          "157: \"\"\"",
          "158: DATABASES = {",
          "159:     'default': {",
          "165:         'PORT': 5432,",
          "168: # End Postgres support",
          "169: \"\"\"",
          "",
          "[Added Lines]",
          "148: if (os.environ.get('POSTGRES_USER')",
          "149:         and os.environ.get('POSTGRES_PASSWORD')",
          "150:         and os.environ.get('POSTGRES_HOST')):",
          "151:     # Postgres support",
          "152:     default = {",
          "158:         'PORT': int(os.getenv('POSTGRES_PORT', 5432)),",
          "160: else:",
          "161:     # Sqlite3 support",
          "162:     default = {",
          "163:         'ENGINE': 'django.db.backends.sqlite3',",
          "164:         'NAME': DB_DIR,",
          "165:     }",
          "166: DATABASES = {",
          "167:     'default': default,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:     'django.contrib.auth.middleware.SessionAuthenticationMiddleware',",
          "196:     'django.contrib.messages.middleware.MessageMiddleware',",
          "197:     'django.middleware.clickjacking.XFrameOptionsMiddleware',",
          "198: )",
          "199: MIDDLEWARE = (",
          "200:     'mobsf.MobSF.views.api.api_middleware.RestApiAuthMiddleware',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     'django_ratelimit.middleware.RatelimitMiddleware',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "332: }",
          "333: JADX_TIMEOUT = int(os.getenv('MOBSF_JADX_TIMEOUT', 1800))",
          "334: DISABLE_AUTHENTICATION = os.getenv('MOBSF_DISABLE_AUTHENTICATION')",
          "336: USE_X_FORWARDED_HOST = bool(",
          "337:     os.getenv('MOBSF_USE_X_FORWARDED_HOST', '1') == '1')",
          "338: USE_X_FORWARDED_PORT = bool(",
          "",
          "[Removed Lines]",
          "335: RATELIMIT = os.getenv('MOBSF_RATELIMIT', '7/1m')",
          "",
          "[Added Lines]",
          "335: RATELIMIT = os.getenv('MOBSF_RATELIMIT', '7/m')",
          "",
          "---------------"
        ],
        "mobsf/MobSF/tools_download.py||mobsf/MobSF/tools_download.py": [
          "File: mobsf/MobSF/tools_download.py -> mobsf/MobSF/tools_download.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Download tools required by MobSF.\"\"\"",
          "2: import logging",
          "3: import sys",
          "4: import shutil",
          "5: import tempfile",
          "6: import zipfile",
          "7: import platform",
          "8: from pathlib import Path",
          "9: from urllib.request import (",
          "10:     Request,",
          "11:     urlopen,",
          "12: )",
          "15: logger = logging.getLogger(__name__)",
          "18: def install_jadx(mobsf_home, version='1.5.0'):",
          "19:     \"\"\"Install JADX dynamically.\"\"\"",
          "20:     try:",
          "21:         url = ('https://github.com/skylot/jadx/releases/download/'",
          "22:                f'v{version}/jadx-{version}.zip')",
          "23:         jadx_dir = Path(mobsf_home) / 'tools' / 'jadx'",
          "24:         extract_dir = jadx_dir / f'jadx-{version}'",
          "26:         if extract_dir.exists():",
          "27:             logger.info('JADX is already installed at %s', extract_dir)",
          "28:             return",
          "30:         logger.info('Downloading JADX from %s', url)",
          "31:         shutil.rmtree(jadx_dir, ignore_errors=True)",
          "33:         with tempfile.NamedTemporaryFile(",
          "34:                 delete=False,",
          "35:                 mode='wb',",
          "36:                 suffix='.zip') as tmp_zip_file:",
          "37:             # Download JADX zip file",
          "38:             with urlopen(Request(url)) as response:",
          "39:                 if response.status == 200:",
          "40:                     tmp_zip_file.write(response.read())",
          "41:                     logger.info('JADX download complete')",
          "42:                 else:",
          "43:                     logger.error('Failed to download JADX zip. '",
          "44:                                  'Status code: %s', response.status)",
          "45:                     return",
          "47:             # Extract the zip file",
          "48:             logger.info('Extracting JADX to %s', extract_dir)",
          "49:             extract_dir.mkdir(parents=True, exist_ok=True)",
          "50:             with zipfile.ZipFile(tmp_zip_file.name, 'r') as zip_ref:",
          "51:                 for member in zip_ref.namelist():",
          "52:                     zip_ref.extract(member, extract_dir)",
          "54:         # Set execute permission",
          "55:         set_rwxr_xr_x_permission_recursively(extract_dir)",
          "57:         logger.info('JADX installed successfully')",
          "58:     except Exception:",
          "59:         logger.exception('Error during JADX installation')",
          "61:     finally:",
          "62:         if 'tmp_zip_file' in locals():",
          "63:             Path(tmp_zip_file.name).unlink()",
          "66: def set_rwxr_xr_x_permission_recursively(directory_path):",
          "67:     \"\"\"Set execute permissions recursively.\"\"\"",
          "68:     if platform.system() == 'Windows':",
          "69:         logger.info('Permission setting is skipped on non-Unix systems.')",
          "70:         return",
          "72:     logger.info('Setting execute permission for JADX directory')",
          "73:     directory_path.chmod(0o755)",
          "75:     # Recursively set permissions for all files and",
          "76:     # directories within the root directory",
          "77:     for path in directory_path.rglob('*'):",
          "78:         path.chmod(0o755)",
          "81: if __name__ == '__main__':",
          "82:     logging.basicConfig(level=logging.INFO)",
          "83:     install_jadx(sys.argv[1])",
          "",
          "---------------"
        ],
        "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py": [
          "File: mobsf/MobSF/utils.py -> mobsf/MobSF/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import threading",
          "23: from urllib.parse import urlparse",
          "24: from pathlib import Path",
          "27: import distro",
          "",
          "[Removed Lines]",
          "25: from distutils.version import StrictVersion",
          "",
          "[Added Lines]",
          "26: from packaging.version import Version",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:                                  proxies=proxies, verify=verify)",
          "149:         remote_version = response.next.path_url.split('v')[1]",
          "150:         if remote_version:",
          "153:             if sem_loc < sem_rem:",
          "154:                 logger.warning('A new version of MobSF is available, '",
          "155:                                'Please update to %s from master branch.',",
          "",
          "[Removed Lines]",
          "151:             sem_loc = StrictVersion(local_version)",
          "152:             sem_rem = StrictVersion(remote_version)",
          "",
          "[Added Lines]",
          "152:             sem_loc = Version(local_version)",
          "153:             sem_rem = Version(remote_version)",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/authentication.py||mobsf/MobSF/views/authentication.py": [
          "File: mobsf/MobSF/views/authentication.py -> mobsf/MobSF/views/authentication.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     sanitize_redirect,",
          "23: )",
          "28: def login_required(func):",
          "",
          "[Removed Lines]",
          "25: from brake.decorators import ratelimit",
          "",
          "[Added Lines]",
          "25: from django_ratelimit.decorators import ratelimit",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     return wrapper",
          "47:            rate=settings.RATELIMIT,",
          "48:            block=True)",
          "49: def login_view(request):",
          "50:     \"\"\"Login Controller.\"\"\"",
          "",
          "[Removed Lines]",
          "45: @ratelimit(ip=True,",
          "46:            method='POST',",
          "",
          "[Added Lines]",
          "45: @ratelimit(key='user_or_ip',",
          "47:            method='POST',",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:         db_obj = RecentScansDB.objects.filter(MD5=md5)",
          "345:         if db_obj.exists():",
          "346:             e = db_obj[0]",
          "348:             return HttpResponseRedirect(url)",
          "349:         else:",
          "350:             return HttpResponseRedirect('/not_found/')",
          "",
          "[Removed Lines]",
          "347:             url = f'/{e.ANALYZER }/{e.MD5}/'",
          "",
          "[Added Lines]",
          "347:             url = f'/{e.ANALYZER}/{e.MD5}/'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat||mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat": [
          "File: mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat -> mobsf/StaticAnalyzer/tools/jadx/bin/jadx-gui.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat||mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat": [
          "File: mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat -> mobsf/StaticAnalyzer/tools/jadx/bin/jadx.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/converter.py||mobsf/StaticAnalyzer/views/android/converter.py": [
          "File: mobsf/StaticAnalyzer/views/android/converter.py -> mobsf/StaticAnalyzer/views/android/converter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         append_scan_status(checksum, msg, repr(exp))",
          "74:     \"\"\"Run jadx.\"\"\"",
          "75:     try:",
          "76:         msg = 'Decompiling APK to Java with jadx'",
          "77:         logger.info(msg)",
          "78:         append_scan_status(checksum, msg)",
          "",
          "[Removed Lines]",
          "73: def apk_2_java(checksum, app_path, app_dir, tools_dir):",
          "",
          "[Added Lines]",
          "73: def apk_2_java(checksum, app_path, app_dir, dwd_tools_dir):",
          "76:         jadx_version = '1.5.0'",
          "77:         jadx_path = f'jadx/jadx-{jadx_version}/bin/'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:                 and is_file_exists(settings.JADX_BINARY)):",
          "88:             jadx = settings.JADX_BINARY",
          "89:         elif platform.system() == 'Windows':",
          "91:         else:",
          "93:         # Set execute permission, if JADX is not executable",
          "94:         if not os.access(jadx, os.X_OK):",
          "95:             os.chmod(jadx, stat.S_IEXEC)",
          "",
          "[Removed Lines]",
          "90:             jadx = os.path.join(tools_dir, 'jadx/bin/jadx.bat')",
          "92:             jadx = os.path.join(tools_dir, 'jadx/bin/jadx')",
          "",
          "[Added Lines]",
          "92:             jadx = os.path.join(",
          "93:                 dwd_tools_dir, f'{jadx_path}jadx.bat')",
          "95:             jadx = os.path.join(",
          "96:                 dwd_tools_dir, f'{jadx_path}jadx')",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/icon_analysis.py||mobsf/StaticAnalyzer/views/android/icon_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/android/icon_analysis.py -> mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         # piggyback on apktool decompiled resources",
          "234:         try:",
          "235:             apk_tool_res = app_dir / 'apktool_out' / 'res'",
          "237:         except Exception:",
          "238:             pass",
          "239:     if res_path.exists():",
          "",
          "[Removed Lines]",
          "236:             copytree(apk_tool_res, res_path)",
          "",
          "[Added Lines]",
          "236:             copytree(apk_tool_res, res_path, dirs_exist_ok=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:         if userbin and is_file_exists(userbin):",
          "346:             vd2svg = userbin",
          "347:         else:",
          "349:         # When xml is android vector",
          "350:         values = app_dir / 'res' / 'values'",
          "351:         direct = app_dir / icon_name",
          "",
          "[Removed Lines]",
          "348:             vd2svg = Path(tools_dir) / 'vd2svg-0.3.3.jar'",
          "",
          "[Added Lines]",
          "348:             vd2svg = Path(tools_dir) / 'vd2svg-0.4.4.jar'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/jar_aar.py||mobsf/StaticAnalyzer/views/android/jar_aar.py": [
          "File: mobsf/StaticAnalyzer/views/android/jar_aar.py -> mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:             checksum,",
          "192:             app_dic['app_path'],",
          "193:             app_dic['app_dir'],",
          "195:         code_an_dic = code_analysis(",
          "196:             checksum,",
          "197:             app_dic['app_dir'],",
          "",
          "[Removed Lines]",
          "194:             app_dic['tools_dir'])",
          "",
          "[Added Lines]",
          "194:             settings.DOWNLOADED_TOOLS_DIR)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/manifest_utils.py||mobsf/StaticAnalyzer/views/android/manifest_utils.py": [
          "File: mobsf/StaticAnalyzer/views/android/manifest_utils.py -> mobsf/StaticAnalyzer/views/android/manifest_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:                 and is_file_exists(settings.APKTOOL_BINARY)):",
          "66:             apktool_path = settings.APKTOOL_BINARY",
          "67:         else:",
          "69:         output_dir = os.path.join(app_dir, 'apktool_out')",
          "70:         args = [find_java_binary(),",
          "71:                 '-jar',",
          "",
          "[Removed Lines]",
          "68:             apktool_path = os.path.join(tools_dir, 'apktool_2.9.3.jar')",
          "",
          "[Added Lines]",
          "68:             apktool_path = os.path.join(tools_dir, 'apktool_2.10.0.jar')",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/static_analyzer.py||mobsf/StaticAnalyzer/views/android/static_analyzer.py": [
          "File: mobsf/StaticAnalyzer/views/android/static_analyzer.py -> mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:                     checksum,",
          "287:                     app_dic['app_path'],",
          "288:                     app_dic['app_dir'],",
          "290:                 dex_2_smali(",
          "291:                     checksum,",
          "292:                     app_dic['app_dir'],",
          "",
          "[Removed Lines]",
          "289:                     app_dic['tools_dir'])",
          "",
          "[Added Lines]",
          "289:                     settings.DOWNLOADED_TOOLS_DIR)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/xapk.py||mobsf/StaticAnalyzer/views/android/xapk.py": [
          "File: mobsf/StaticAnalyzer/views/android/xapk.py -> mobsf/StaticAnalyzer/views/android/xapk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 and is_file_exists(settings.BUNDLE_TOOL)):",
          "91:             bundletool = settings.BUNDLE_TOOL",
          "92:         else:",
          "94:             bundletool = bundletool.as_posix()",
          "95:         args = [",
          "96:             find_java_binary(),",
          "",
          "[Removed Lines]",
          "93:             bundletool = Path(tools_dir) / 'bundletool-all-1.16.0.jar'",
          "",
          "[Added Lines]",
          "93:             bundletool = Path(tools_dir) / 'bundletool-all-1.17.2.jar'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/binary/elf.py||mobsf/StaticAnalyzer/views/common/binary/elf.py": [
          "File: mobsf/StaticAnalyzer/views/common/binary/elf.py -> mobsf/StaticAnalyzer/views/common/binary/elf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:             'severity': severity,",
          "60:             'description': desc,",
          "61:         }",
          "62:         has_canary = self.has_canary()",
          "63:         if has_canary:",
          "64:             severity = INFO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:         severity = 'info'",
          "63:         is_pie = self.is_pie()",
          "64:         if is_pie == 'dso':",
          "65:             is_pie = 'Dynamic Shared Object (DSO)'",
          "66:             desc = (",
          "67:                 'The shared object is build with -fPIC flag which '",
          "68:                 'enables Position independent code. This makes Return '",
          "69:                 'Oriented Programming (ROP) attacks much more difficult '",
          "70:                 'to execute reliably.')",
          "71:         elif is_pie == 'pie':",
          "72:             is_pie = 'Position Independent Executable (PIE)'",
          "73:             desc = (",
          "74:                 'The shared object is build with -fPIC flag which '",
          "75:                 'enables Position independent code. This makes Return '",
          "76:                 'Oriented Programming (ROP) attacks much more difficult '",
          "77:                 'to execute reliably.')",
          "78:         elif is_pie == 'rel':",
          "79:             is_pie = 'Relocatable Object File'",
          "80:             desc = (",
          "81:                 'The shared object is build with -fPIC flag which '",
          "82:                 'enables Position independent code. This makes Return '",
          "83:                 'Oriented Programming (ROP) attacks much more difficult '",
          "84:                 'to execute reliably.')",
          "85:         elif is_pie == 'no':",
          "86:             is_pie = 'No PIE'",
          "87:             severity = 'high'",
          "88:             desc = (",
          "89:                 'The shared object is built without Position '",
          "90:                 'Independent Code flag. In order to prevent '",
          "91:                 'an attacker from reliably jumping to, for example, a '",
          "92:                 'particular exploited function in memory, Address '",
          "93:                 'space layout randomization (ASLR) randomly arranges '",
          "94:                 'the address space positions of key data areas of a '",
          "95:                 'process, including the base of the executable and the '",
          "96:                 'positions of the stack,heap and libraries. Use compiler '",
          "97:                 'option -fPIC to enable Position Independent Code.')",
          "98:         elf_dict['pie'] = {",
          "99:             'is_pie': is_pie,",
          "100:             'severity': severity,",
          "101:             'description': desc,",
          "102:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:     def is_nx(self):",
          "211:         return self.elf.has_nx",
          "213:     def is_dart(self):",
          "214:         dart = ('_kDartVmSnapshotInstructions',",
          "215:                 'Dart_Cleanup')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:     def is_pie(self):",
          "255:         if self.elf.header.file_type == lief.ELF.Header.FILE_TYPE.DYN:",
          "256:             if self.elf.has(lief.ELF.DynamicEntry.TAG.DEBUG_TAG):",
          "257:                 return 'pie'",
          "258:             else:",
          "259:                 return 'dso'",
          "260:         elif self.elf.header.file_type == lief.ELF.Header.FILE_TYPE.REL:",
          "261:             return 'rel'",
          "262:         return 'no'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:             try:",
          "220:                 if self.elf.get_symbol(symbol):",
          "221:                     return True",
          "223:                 pass",
          "224:         return False",
          "",
          "[Removed Lines]",
          "222:             except lief.not_found:",
          "",
          "[Added Lines]",
          "273:             except Exception:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:             try:",
          "232:                 if self.elf.get_symbol(symbol):",
          "233:                     return True",
          "235:                 pass",
          "236:         return False",
          "238:     def relro(self):",
          "239:         try:",
          "246:             if self.is_dart():",
          "247:                 return NA",
          "",
          "[Removed Lines]",
          "234:             except lief.not_found:",
          "240:             gnu_relro = lief.ELF.SEGMENT_TYPES.GNU_RELRO",
          "241:             bind_now_flag = lief.ELF.DYNAMIC_FLAGS.BIND_NOW",
          "242:             flags_tag = lief.ELF.DYNAMIC_TAGS.FLAGS",
          "243:             flags1_tag = lief.ELF.DYNAMIC_TAGS.FLAGS_1",
          "244:             now_flag = lief.ELF.DYNAMIC_FLAGS_1.NOW",
          "",
          "[Added Lines]",
          "285:             except Exception:",
          "291:             gnu_relro = lief.ELF.Segment.TYPE.GNU_RELRO",
          "292:             bind_now_flag = lief.ELF.DynamicEntryFlags.FLAG.BIND_NOW",
          "293:             flags_tag = lief.ELF.DynamicEntry.TAG.FLAGS",
          "294:             flags1_tag = lief.ELF.DynamicEntry.TAG.FLAGS_1",
          "295:             now_flag = lief.ELF.DynamicEntryFlags.FLAG.NOW",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:                 return FULL_RELRO",
          "260:             else:",
          "261:                 return PARTIAL_RELRO",
          "263:             pass",
          "264:         return NO_RELRO",
          "266:     def rpath(self):",
          "273:     def runpath(self):",
          "280:     def is_symbols_stripped(self):",
          "281:         try:",
          "286:                 if i:",
          "287:                     return False",
          "288:             return True",
          "290:     def fortify(self):",
          "291:         fortified_funcs = []",
          "",
          "[Removed Lines]",
          "262:         except lief.not_found:",
          "267:         try:",
          "268:             rpath = lief.ELF.DYNAMIC_TAGS.RPATH",
          "269:             return self.elf.get(rpath)",
          "270:         except lief.not_found:",
          "271:             return False",
          "274:         try:",
          "275:             runpath = lief.ELF.DYNAMIC_TAGS.RUNPATH",
          "276:             return self.elf.get(runpath)",
          "277:         except lief.not_found:",
          "278:             return False",
          "282:             return nm_is_debug_symbol_stripped(",
          "283:                 self.elf_path)",
          "284:         except Exception:",
          "285:             for i in self.elf.static_symbols:",
          "",
          "[Added Lines]",
          "313:         except Exception:",
          "318:         rpath = lief.ELF.DynamicEntry.TAG.RPATH",
          "319:         return self.elf.get(rpath)",
          "322:         runpath = lief.ELF.DynamicEntry.TAG.RUNPATH",
          "323:         return self.elf.get(runpath)",
          "327:             for i in self.elf.symtab_symbols:",
          "331:         except Exception:",
          "332:             try:",
          "333:                 return nm_is_debug_symbol_stripped(",
          "334:                     self.elf_path)",
          "335:             except Exception:",
          "336:                 return True",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:     def get_symbols(self):",
          "319:         symbols = []",
          "320:         try:",
          "322:                 symbols.append(i.name)",
          "323:         except Exception:",
          "324:             pass",
          "",
          "[Removed Lines]",
          "321:             for i in self.elf.symbols:",
          "",
          "[Added Lines]",
          "369:             for i in self.elf.symtab_symbols:",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/binary/macho.py||mobsf/StaticAnalyzer/views/common/binary/macho.py": [
          "File: mobsf/StaticAnalyzer/views/common/binary/macho.py -> mobsf/StaticAnalyzer/views/common/binary/macho.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:                     # stripped and unstripped binaries",
          "278:                     # also ignore radr://5614542",
          "279:                     continue",
          "281:                     # N_STAB set or 14, 30",
          "283:                     # N_STAB 0xe0  /* if any of these bits set,",
          "",
          "[Removed Lines]",
          "280:                 if (i.type & 0xe0) > 0 or i.type in (0x0e, 0x1e):",
          "",
          "[Added Lines]",
          "280:                 if (i.type.value & 0xe0) > 0 or i.type.value in (0x0e, 0x1e):",
          "",
          "---------------"
        ],
        "mobsf/templates/pdf/android_report.html||mobsf/templates/pdf/android_report.html": [
          "File: mobsf/templates/pdf/android_report.html -> mobsf/templates/pdf/android_report.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:                         <th>NO</th>",
          "634:                         <th>SHARED OBJECT</th>",
          "635:                         <th>NX</th>",
          "636:                         <th>STACK CANARY</th>",
          "637:                         <th>RELRO</th>",
          "638:                         <th>RPATH</th>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "636:                         <th>PIE</th>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "653:                           <br/>",
          "654:                           <span class=\"{% if so.nx.severity == 'high' %}danger{% elif so.nx.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.nx.severity}}</span>",
          "655:                           <br/>{{so.nx.description}}</td>",
          "657:                             <br/>",
          "658:                             <span class=\"{% if so.stack_canary.severity == 'high' %}danger{% elif so.stack_canary.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.stack_canary.severity}}</span>",
          "659:                             <br/>{{so.stack_canary.description}}</td>",
          "",
          "[Removed Lines]",
          "656:                         <td style=\"vertical-align: top;\"><b>{{so.stack_canary.has_canary}}</b>",
          "",
          "[Added Lines]",
          "657:                           <td style=\"vertical-align: top;\"><b>{{so.pie.is_pie}}</b>",
          "658:                             <br/>",
          "659:                             <span class=\"{% if so.pie.severity == 'high' %}danger{% elif so.pie.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.pie.severity}}</span>",
          "660:                             <br/>{{so.pie.description}}</td>",
          "661:                           <td style=\"vertical-align: top;\"><b>{{so.stack_canary.has_canary}}</b>",
          "",
          "---------------"
        ],
        "mobsf/templates/static_analysis/android_binary_analysis.html||mobsf/templates/static_analysis/android_binary_analysis.html": [
          "File: mobsf/templates/static_analysis/android_binary_analysis.html -> mobsf/templates/static_analysis/android_binary_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "1406:                           <th>SHARED OBJECT</th>",
          "1407:                          {% endif %}",
          "1408:                           <th>NX</th>",
          "1409:                           <th>STACK CANARY</th>",
          "1410:                           <th>RELRO</th>",
          "1411:                           <th>RPATH</th>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1409:                           <th>PIE</th>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1430:                 <br/>",
          "1431:                 <span class=\"badge bg-{% if so.nx.severity == 'high' %}danger{% elif so.nx.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.nx.severity}}</span>",
          "1432:                 <br/>{{so.nx.description}}</td>",
          "1433:               <td><b>{{so.stack_canary.has_canary}}</b>",
          "1434:                   <br/>",
          "1435:                   <span class=\"badge bg-{% if so.stack_canary.severity == 'high' %}danger{% elif so.stack_canary.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.stack_canary.severity}}</span>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1434:               <td><b>{{so.pie.is_pie}}</b>",
          "1435:                   <br/>",
          "1436:                   <span class=\"badge bg-{% if so.pie.severity == 'high' %}danger{% elif so.pie.severity == 'warning' %}warning{% else %}info{% endif %}\">{{so.pie.severity}}</span>",
          "1437:                   <br/>{{so.pie.description}}</td>",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "7: optional = false",
          "8: python-versions = \">=3.8\"",
          "9: files = [",
          "12: ]",
          "14: [package.dependencies]",
          "15: certifi = \"*\"",
          "16: pylsqpack = \">=0.3.3,<0.4.0\"",
          "20: [package.extras]",
          "21: dev = [\"coverage[toml] (>=7.2.2)\"]",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.",
          "4: name = \"aioquic-mitmproxy\"",
          "5: version = \"0.9.21.1\"",
          "6: description = \"Fork of aioquic (https://github.com/aiortc/aioquic) with adjustments for mitmproxy.\"",
          "10:     {file = \"aioquic_mitmproxy-0.9.21.1-py3-none-any.whl\", hash = \"sha256:4c691232cc97f7c01c1677f21e2457523ee6780c4b5ad7d7936f6a3210d4f886\"},",
          "11:     {file = \"aioquic_mitmproxy-0.9.21.1.tar.gz\", hash = \"sha256:0da539b95982dd02d1f971344215da5c15d0c409e2639d267a2815cd27335e26\"},",
          "17: pyopenssl = \">=22\"",
          "18: service-identity = \">=23.1.0\"",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.4 and should not be changed by hand.",
          "4: name = \"aioquic\"",
          "5: version = \"1.2.0\"",
          "6: description = \"An implementation of QUIC and HTTP/3\"",
          "10:     {file = \"aioquic-1.2.0-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:3e23964dfb04526ade6e66f5b7cd0c830421b8138303ab60ba6e204015e7cb0b\"},",
          "11:     {file = \"aioquic-1.2.0-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:84d733332927b76218a3b246216104116f766f5a9b2308ec306cd017b3049660\"},",
          "12:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2466499759b31ea4f1d17f4aeb1f8d4297169e05e3c1216d618c9757f4dd740d\"},",
          "13:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cd75015462ca5070a888110dc201f35a9f4c7459f9201b77adc3c06013611bb8\"},",
          "14:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:43ae3b11d43400a620ca0b4b4885d12b76a599c2cbddba755f74bebfa65fe587\"},",
          "15:     {file = \"aioquic-1.2.0-cp38-abi3-win32.whl\", hash = \"sha256:910d8c91da86bba003d491d15deaeac3087d1b9d690b9edc1375905d8867b742\"},",
          "16:     {file = \"aioquic-1.2.0-cp38-abi3-win_amd64.whl\", hash = \"sha256:e3dcfb941004333d477225a6689b55fc7f905af5ee6a556eb5083be0354e653a\"},",
          "17:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:8e600da7aa7e4a7bc53ee8f45fd66808032127ae00938c119ac77d66633b8961\"},",
          "18:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:358e2b9c1e0c24b9933094c3c2cf990faf44d03b64d6f8ff79b4b3f510c6c268\"},",
          "19:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6fe683943ea3439dd0aca05ff80e85a552d4b39f9f34858c76ac54c205990e88\"},",
          "20:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c22689c33fe4799624aed6faaba0af9e6ea7d31ac45047745828ee68d67fe1d9\"},",
          "21:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3976b75e82d83742c8b811e38d273eda2ca7f81394b6a85da33a02849c5f1d9d\"},",
          "22:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:cbe7167b2faee887e115d83d25332c4b8fa4604d5175807d978cb4fe39b4e36e\"},",
          "23:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:f81e7946f09501a7c27e3f71b84a455e6bf92346fb5a28ef2d73c9d564463c63\"},",
          "24:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:e2c3c127cc3d9eac7a6d05142036bf4b2c593d750a115a2fa42c1f86cbe8c0a0\"},",
          "25:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb917143e7a4de5beba1e695fa89f2b05ef080b450dea07338cc67a9c75e0a4d\"},",
          "26:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1de513772fd04ff38028fdf748a9e2dec33d7aa2fbf67fda3011d9a85b620c54\"},",
          "27:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7dcc212bb529900757d8e99a76198b42c2a978ce735a1bfca394033c16cfc33c\"},",
          "28:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:e7ce10198f8efa91986ad8ac83fa08e50972e0aacde45bdaf7b9365094e72c0c\"},",
          "29:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:6e418c92898a0af306e6f1b6a55a0d3d2597001c57a7b1ba36cf5b47bf41233b\"},",
          "30:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:81650d59bef05c514af2cfdcb2946e9d13367b745e68b36881d43630ef563d38\"},",
          "31:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6371c3afa1036294e1505fdbda8c147bc41c5b6709a47459e8c1b4eec41a86ef\"},",
          "32:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c332cffa3c2124e5db82b2b9eb2662bd7c39ee2247606b74de689f6d3091b61a\"},",
          "33:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fcc1eb083ed9f8d903482e375281c8c26a5ed2b6bee5ee2be3f13275d8fdb146\"},",
          "34:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:f209ad5edbff8239e994c189dc74428420957448a190f4343faee4caedef4eee\"},",
          "35:     {file = \"aioquic-1.2.0.tar.gz\", hash = \"sha256:f91263bb3f71948c5c8915b4d50ee370004f20a416f67fab3dcc90556c7e7199\"},",
          "40: cryptography = \">=42.0.0\"",
          "42: pyopenssl = \">=24\"",
          "43: service-identity = \">=24.1.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: [[package]]",
          "95: name = \"asgiref\"",
          "97: description = \"ASGI specs, helper code, and adapters\"",
          "98: optional = false",
          "100: files = [",
          "103: ]",
          "105: [package.dependencies]",
          "",
          "[Removed Lines]",
          "96: version = \"3.7.2\"",
          "99: python-versions = \">=3.7\"",
          "101:     {file = \"asgiref-3.7.2-py3-none-any.whl\", hash = \"sha256:89b2ef2247e3b562a16eef663bc0e2e703ec6468e2fa8a5cd61cd449786d4f6e\"},",
          "102:     {file = \"asgiref-3.7.2.tar.gz\", hash = \"sha256:9e0ce3aa93a819ba5b45120216b23878cf6e8525eb3848653452b4192b92afed\"},",
          "",
          "[Added Lines]",
          "121: version = \"3.8.1\"",
          "124: python-versions = \">=3.8\"",
          "126:     {file = \"asgiref-3.8.1-py3-none-any.whl\", hash = \"sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47\"},",
          "127:     {file = \"asgiref-3.8.1.tar.gz\", hash = \"sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433: [[package]]",
          "434: name = \"charset-normalizer\"",
          "436: description = \"The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.\"",
          "437: optional = false",
          "438: python-versions = \">=3.7.0\"",
          "439: files = [",
          "530: ]",
          "532: [[package]]",
          "",
          "[Removed Lines]",
          "435: version = \"3.3.2\"",
          "440:     {file = \"charset-normalizer-3.3.2.tar.gz\", hash = \"sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5\"},",
          "441:     {file = \"charset_normalizer-3.3.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3\"},",
          "442:     {file = \"charset_normalizer-3.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027\"},",
          "443:     {file = \"charset_normalizer-3.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03\"},",
          "444:     {file = \"charset_normalizer-3.3.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d\"},",
          "445:     {file = \"charset_normalizer-3.3.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e\"},",
          "446:     {file = \"charset_normalizer-3.3.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6\"},",
          "447:     {file = \"charset_normalizer-3.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5\"},",
          "448:     {file = \"charset_normalizer-3.3.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537\"},",
          "449:     {file = \"charset_normalizer-3.3.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c\"},",
          "450:     {file = \"charset_normalizer-3.3.2-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12\"},",
          "451:     {file = \"charset_normalizer-3.3.2-cp310-cp310-musllinux_1_1_ppc64le.whl\", hash = \"sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f\"},",
          "452:     {file = \"charset_normalizer-3.3.2-cp310-cp310-musllinux_1_1_s390x.whl\", hash = \"sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269\"},",
          "453:     {file = \"charset_normalizer-3.3.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519\"},",
          "454:     {file = \"charset_normalizer-3.3.2-cp310-cp310-win32.whl\", hash = \"sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73\"},",
          "455:     {file = \"charset_normalizer-3.3.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09\"},",
          "456:     {file = \"charset_normalizer-3.3.2-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db\"},",
          "457:     {file = \"charset_normalizer-3.3.2-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96\"},",
          "458:     {file = \"charset_normalizer-3.3.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e\"},",
          "459:     {file = \"charset_normalizer-3.3.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f\"},",
          "460:     {file = \"charset_normalizer-3.3.2-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574\"},",
          "461:     {file = \"charset_normalizer-3.3.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4\"},",
          "462:     {file = \"charset_normalizer-3.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8\"},",
          "463:     {file = \"charset_normalizer-3.3.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc\"},",
          "464:     {file = \"charset_normalizer-3.3.2-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae\"},",
          "465:     {file = \"charset_normalizer-3.3.2-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887\"},",
          "466:     {file = \"charset_normalizer-3.3.2-cp311-cp311-musllinux_1_1_ppc64le.whl\", hash = \"sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae\"},",
          "467:     {file = \"charset_normalizer-3.3.2-cp311-cp311-musllinux_1_1_s390x.whl\", hash = \"sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce\"},",
          "468:     {file = \"charset_normalizer-3.3.2-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f\"},",
          "469:     {file = \"charset_normalizer-3.3.2-cp311-cp311-win32.whl\", hash = \"sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab\"},",
          "470:     {file = \"charset_normalizer-3.3.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77\"},",
          "471:     {file = \"charset_normalizer-3.3.2-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8\"},",
          "472:     {file = \"charset_normalizer-3.3.2-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b\"},",
          "473:     {file = \"charset_normalizer-3.3.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6\"},",
          "474:     {file = \"charset_normalizer-3.3.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a\"},",
          "475:     {file = \"charset_normalizer-3.3.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389\"},",
          "476:     {file = \"charset_normalizer-3.3.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa\"},",
          "477:     {file = \"charset_normalizer-3.3.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b\"},",
          "478:     {file = \"charset_normalizer-3.3.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed\"},",
          "479:     {file = \"charset_normalizer-3.3.2-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26\"},",
          "480:     {file = \"charset_normalizer-3.3.2-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d\"},",
          "481:     {file = \"charset_normalizer-3.3.2-cp312-cp312-musllinux_1_1_ppc64le.whl\", hash = \"sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068\"},",
          "482:     {file = \"charset_normalizer-3.3.2-cp312-cp312-musllinux_1_1_s390x.whl\", hash = \"sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143\"},",
          "483:     {file = \"charset_normalizer-3.3.2-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4\"},",
          "484:     {file = \"charset_normalizer-3.3.2-cp312-cp312-win32.whl\", hash = \"sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7\"},",
          "485:     {file = \"charset_normalizer-3.3.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001\"},",
          "486:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c\"},",
          "487:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5\"},",
          "488:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985\"},",
          "489:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6\"},",
          "490:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714\"},",
          "491:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786\"},",
          "492:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5\"},",
          "493:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c\"},",
          "494:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8\"},",
          "495:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-musllinux_1_1_s390x.whl\", hash = \"sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711\"},",
          "496:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811\"},",
          "497:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-win32.whl\", hash = \"sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4\"},",
          "498:     {file = \"charset_normalizer-3.3.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99\"},",
          "499:     {file = \"charset_normalizer-3.3.2-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a\"},",
          "500:     {file = \"charset_normalizer-3.3.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac\"},",
          "501:     {file = \"charset_normalizer-3.3.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a\"},",
          "502:     {file = \"charset_normalizer-3.3.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33\"},",
          "503:     {file = \"charset_normalizer-3.3.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238\"},",
          "504:     {file = \"charset_normalizer-3.3.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a\"},",
          "505:     {file = \"charset_normalizer-3.3.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2\"},",
          "506:     {file = \"charset_normalizer-3.3.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8\"},",
          "507:     {file = \"charset_normalizer-3.3.2-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898\"},",
          "508:     {file = \"charset_normalizer-3.3.2-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99\"},",
          "509:     {file = \"charset_normalizer-3.3.2-cp38-cp38-musllinux_1_1_ppc64le.whl\", hash = \"sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d\"},",
          "510:     {file = \"charset_normalizer-3.3.2-cp38-cp38-musllinux_1_1_s390x.whl\", hash = \"sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04\"},",
          "511:     {file = \"charset_normalizer-3.3.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087\"},",
          "512:     {file = \"charset_normalizer-3.3.2-cp38-cp38-win32.whl\", hash = \"sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25\"},",
          "513:     {file = \"charset_normalizer-3.3.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b\"},",
          "514:     {file = \"charset_normalizer-3.3.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4\"},",
          "515:     {file = \"charset_normalizer-3.3.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d\"},",
          "516:     {file = \"charset_normalizer-3.3.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0\"},",
          "517:     {file = \"charset_normalizer-3.3.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269\"},",
          "518:     {file = \"charset_normalizer-3.3.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c\"},",
          "519:     {file = \"charset_normalizer-3.3.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519\"},",
          "520:     {file = \"charset_normalizer-3.3.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796\"},",
          "521:     {file = \"charset_normalizer-3.3.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185\"},",
          "522:     {file = \"charset_normalizer-3.3.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c\"},",
          "523:     {file = \"charset_normalizer-3.3.2-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458\"},",
          "524:     {file = \"charset_normalizer-3.3.2-cp39-cp39-musllinux_1_1_ppc64le.whl\", hash = \"sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2\"},",
          "525:     {file = \"charset_normalizer-3.3.2-cp39-cp39-musllinux_1_1_s390x.whl\", hash = \"sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8\"},",
          "526:     {file = \"charset_normalizer-3.3.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561\"},",
          "527:     {file = \"charset_normalizer-3.3.2-cp39-cp39-win32.whl\", hash = \"sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f\"},",
          "528:     {file = \"charset_normalizer-3.3.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d\"},",
          "529:     {file = \"charset_normalizer-3.3.2-py3-none-any.whl\", hash = \"sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc\"},",
          "",
          "[Added Lines]",
          "460: version = \"3.4.0\"",
          "465:     {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:4f9fc98dad6c2eaa32fc3af1417d95b5e3d08aff968df0cd320066def971f9a6\"},",
          "466:     {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0de7b687289d3c1b3e8660d0741874abe7888100efe14bd0f9fd7141bcbda92b\"},",
          "467:     {file = \"charset_normalizer-3.4.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5ed2e36c3e9b4f21dd9422f6893dec0abf2cca553af509b10cd630f878d3eb99\"},",
          "468:     {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:40d3ff7fc90b98c637bda91c89d51264a3dcf210cade3a2c6f838c7268d7a4ca\"},",
          "469:     {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1110e22af8ca26b90bd6364fe4c763329b0ebf1ee213ba32b68c73de5752323d\"},",
          "470:     {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:86f4e8cca779080f66ff4f191a685ced73d2f72d50216f7112185dc02b90b9b7\"},",
          "471:     {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7f683ddc7eedd742e2889d2bfb96d69573fde1d92fcb811979cdb7165bb9c7d3\"},",
          "472:     {file = \"charset_normalizer-3.4.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:27623ba66c183eca01bf9ff833875b459cad267aeeb044477fedac35e19ba907\"},",
          "473:     {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:f606a1881d2663630ea5b8ce2efe2111740df4b687bd78b34a8131baa007f79b\"},",
          "474:     {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:0b309d1747110feb25d7ed6b01afdec269c647d382c857ef4663bbe6ad95a912\"},",
          "475:     {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:136815f06a3ae311fae551c3df1f998a1ebd01ddd424aa5603a4336997629e95\"},",
          "476:     {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:14215b71a762336254351b00ec720a8e85cada43b987da5a042e4ce3e82bd68e\"},",
          "477:     {file = \"charset_normalizer-3.4.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:79983512b108e4a164b9c8d34de3992f76d48cadc9554c9e60b43f308988aabe\"},",
          "478:     {file = \"charset_normalizer-3.4.0-cp310-cp310-win32.whl\", hash = \"sha256:c94057af19bc953643a33581844649a7fdab902624d2eb739738a30e2b3e60fc\"},",
          "479:     {file = \"charset_normalizer-3.4.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:55f56e2ebd4e3bc50442fbc0888c9d8c94e4e06a933804e2af3e89e2f9c1c749\"},",
          "480:     {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:0d99dd8ff461990f12d6e42c7347fd9ab2532fb70e9621ba520f9e8637161d7c\"},",
          "481:     {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:c57516e58fd17d03ebe67e181a4e4e2ccab1168f8c2976c6a334d4f819fe5944\"},",
          "482:     {file = \"charset_normalizer-3.4.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:6dba5d19c4dfab08e58d5b36304b3f92f3bd5d42c1a3fa37b5ba5cdf6dfcbcee\"},",
          "483:     {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bf4475b82be41b07cc5e5ff94810e6a01f276e37c2d55571e3fe175e467a1a1c\"},",
          "484:     {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ce031db0408e487fd2775d745ce30a7cd2923667cf3b69d48d219f1d8f5ddeb6\"},",
          "485:     {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8ff4e7cdfdb1ab5698e675ca622e72d58a6fa2a8aa58195de0c0061288e6e3ea\"},",
          "486:     {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3710a9751938947e6327ea9f3ea6332a09bf0ba0c09cae9cb1f250bd1f1549bc\"},",
          "487:     {file = \"charset_normalizer-3.4.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:82357d85de703176b5587dbe6ade8ff67f9f69a41c0733cf2425378b49954de5\"},",
          "488:     {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:47334db71978b23ebcf3c0f9f5ee98b8d65992b65c9c4f2d34c2eaf5bcaf0594\"},",
          "489:     {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:8ce7fd6767a1cc5a92a639b391891bf1c268b03ec7e021c7d6d902285259685c\"},",
          "490:     {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:f1a2f519ae173b5b6a2c9d5fa3116ce16e48b3462c8b96dfdded11055e3d6365\"},",
          "491:     {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:63bc5c4ae26e4bc6be6469943b8253c0fd4e4186c43ad46e713ea61a0ba49129\"},",
          "492:     {file = \"charset_normalizer-3.4.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:bcb4f8ea87d03bc51ad04add8ceaf9b0f085ac045ab4d74e73bbc2dc033f0236\"},",
          "493:     {file = \"charset_normalizer-3.4.0-cp311-cp311-win32.whl\", hash = \"sha256:9ae4ef0b3f6b41bad6366fb0ea4fc1d7ed051528e113a60fa2a65a9abb5b1d99\"},",
          "494:     {file = \"charset_normalizer-3.4.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:cee4373f4d3ad28f1ab6290684d8e2ebdb9e7a1b74fdc39e4c211995f77bec27\"},",
          "495:     {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:0713f3adb9d03d49d365b70b84775d0a0d18e4ab08d12bc46baa6132ba78aaf6\"},",
          "496:     {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:de7376c29d95d6719048c194a9cf1a1b0393fbe8488a22008610b0361d834ecf\"},",
          "497:     {file = \"charset_normalizer-3.4.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:4a51b48f42d9358460b78725283f04bddaf44a9358197b889657deba38f329db\"},",
          "498:     {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b295729485b06c1a0683af02a9e42d2caa9db04a373dc38a6a58cdd1e8abddf1\"},",
          "499:     {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ee803480535c44e7f5ad00788526da7d85525cfefaf8acf8ab9a310000be4b03\"},",
          "500:     {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d59d125ffbd6d552765510e3f31ed75ebac2c7470c7274195b9161a32350284\"},",
          "501:     {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8cda06946eac330cbe6598f77bb54e690b4ca93f593dee1568ad22b04f347c15\"},",
          "502:     {file = \"charset_normalizer-3.4.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:07afec21bbbbf8a5cc3651aa96b980afe2526e7f048fdfb7f1014d84acc8b6d8\"},",
          "503:     {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6b40e8d38afe634559e398cc32b1472f376a4099c75fe6299ae607e404c033b2\"},",
          "504:     {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:b8dcd239c743aa2f9c22ce674a145e0a25cb1566c495928440a181ca1ccf6719\"},",
          "505:     {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:84450ba661fb96e9fd67629b93d2941c871ca86fc38d835d19d4225ff946a631\"},",
          "506:     {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:44aeb140295a2f0659e113b31cfe92c9061622cadbc9e2a2f7b8ef6b1e29ef4b\"},",
          "507:     {file = \"charset_normalizer-3.4.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:1db4e7fefefd0f548d73e2e2e041f9df5c59e178b4c72fbac4cc6f535cfb1565\"},",
          "508:     {file = \"charset_normalizer-3.4.0-cp312-cp312-win32.whl\", hash = \"sha256:5726cf76c982532c1863fb64d8c6dd0e4c90b6ece9feb06c9f202417a31f7dd7\"},",
          "509:     {file = \"charset_normalizer-3.4.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:b197e7094f232959f8f20541ead1d9862ac5ebea1d58e9849c1bf979255dfac9\"},",
          "510:     {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:dd4eda173a9fcccb5f2e2bd2a9f423d180194b1bf17cf59e3269899235b2a114\"},",
          "511:     {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:e9e3c4c9e1ed40ea53acf11e2a386383c3304212c965773704e4603d589343ed\"},",
          "512:     {file = \"charset_normalizer-3.4.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:92a7e36b000bf022ef3dbb9c46bfe2d52c047d5e3f3343f43204263c5addc250\"},",
          "513:     {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:54b6a92d009cbe2fb11054ba694bc9e284dad30a26757b1e372a1fdddaf21920\"},",
          "514:     {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1ffd9493de4c922f2a38c2bf62b831dcec90ac673ed1ca182fe11b4d8e9f2a64\"},",
          "515:     {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:35c404d74c2926d0287fbd63ed5d27eb911eb9e4a3bb2c6d294f3cfd4a9e0c23\"},",
          "516:     {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4796efc4faf6b53a18e3d46343535caed491776a22af773f366534056c4e1fbc\"},",
          "517:     {file = \"charset_normalizer-3.4.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e7fdd52961feb4c96507aa649550ec2a0d527c086d284749b2f582f2d40a2e0d\"},",
          "518:     {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:92db3c28b5b2a273346bebb24857fda45601aef6ae1c011c0a997106581e8a88\"},",
          "519:     {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:ab973df98fc99ab39080bfb0eb3a925181454d7c3ac8a1e695fddfae696d9e90\"},",
          "520:     {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:4b67fdab07fdd3c10bb21edab3cbfe8cf5696f453afce75d815d9d7223fbe88b\"},",
          "521:     {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:aa41e526a5d4a9dfcfbab0716c7e8a1b215abd3f3df5a45cf18a12721d31cb5d\"},",
          "522:     {file = \"charset_normalizer-3.4.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:ffc519621dce0c767e96b9c53f09c5d215578e10b02c285809f76509a3931482\"},",
          "523:     {file = \"charset_normalizer-3.4.0-cp313-cp313-win32.whl\", hash = \"sha256:f19c1585933c82098c2a520f8ec1227f20e339e33aca8fa6f956f6691b784e67\"},",
          "524:     {file = \"charset_normalizer-3.4.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:707b82d19e65c9bd28b81dde95249b07bf9f5b90ebe1ef17d9b57473f8a64b7b\"},",
          "525:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:dbe03226baf438ac4fda9e2d0715022fd579cb641c4cf639fa40d53b2fe6f3e2\"},",
          "526:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dd9a8bd8900e65504a305bf8ae6fa9fbc66de94178c420791d0293702fce2df7\"},",
          "527:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b8831399554b92b72af5932cdbbd4ddc55c55f631bb13ff8fe4e6536a06c5c51\"},",
          "528:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a14969b8691f7998e74663b77b4c36c0337cb1df552da83d5c9004a93afdb574\"},",
          "529:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dcaf7c1524c0542ee2fc82cc8ec337f7a9f7edee2532421ab200d2b920fc97cf\"},",
          "530:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:425c5f215d0eecee9a56cdb703203dda90423247421bf0d67125add85d0c4455\"},",
          "531:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:d5b054862739d276e09928de37c79ddeec42a6e1bfc55863be96a36ba22926f6\"},",
          "532:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_i686.whl\", hash = \"sha256:f3e73a4255342d4eb26ef6df01e3962e73aa29baa3124a8e824c5d3364a65748\"},",
          "533:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_ppc64le.whl\", hash = \"sha256:2f6c34da58ea9c1a9515621f4d9ac379871a8f21168ba1b5e09d74250de5ad62\"},",
          "534:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_s390x.whl\", hash = \"sha256:f09cb5a7bbe1ecae6e87901a2eb23e0256bb524a79ccc53eb0b7629fbe7677c4\"},",
          "535:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:0099d79bdfcf5c1f0c2c72f91516702ebf8b0b8ddd8905f97a8aecf49712c621\"},",
          "536:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-win32.whl\", hash = \"sha256:9c98230f5042f4945f957d006edccc2af1e03ed5e37ce7c373f00a5a4daa6149\"},",
          "537:     {file = \"charset_normalizer-3.4.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:62f60aebecfc7f4b82e3f639a7d1433a20ec32824db2199a11ad4f5e146ef5ee\"},",
          "538:     {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:af73657b7a68211996527dbfeffbb0864e043d270580c5aef06dc4b659a4b578\"},",
          "539:     {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:cab5d0b79d987c67f3b9e9c53f54a61360422a5a0bc075f43cab5621d530c3b6\"},",
          "540:     {file = \"charset_normalizer-3.4.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:9289fd5dddcf57bab41d044f1756550f9e7cf0c8e373b8cdf0ce8773dc4bd417\"},",
          "541:     {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6b493a043635eb376e50eedf7818f2f322eabbaa974e948bd8bdd29eb7ef2a51\"},",
          "542:     {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9fa2566ca27d67c86569e8c85297aaf413ffab85a8960500f12ea34ff98e4c41\"},",
          "543:     {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a8e538f46104c815be19c975572d74afb53f29650ea2025bbfaef359d2de2f7f\"},",
          "544:     {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6fd30dc99682dc2c603c2b315bded2799019cea829f8bf57dc6b61efde6611c8\"},",
          "545:     {file = \"charset_normalizer-3.4.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2006769bd1640bdf4d5641c69a3d63b71b81445473cac5ded39740a226fa88ab\"},",
          "546:     {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:dc15e99b2d8a656f8e666854404f1ba54765871104e50c8e9813af8a7db07f12\"},",
          "547:     {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:ab2e5bef076f5a235c3774b4f4028a680432cded7cad37bba0fd90d64b187d19\"},",
          "548:     {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:4ec9dd88a5b71abfc74e9df5ebe7921c35cbb3b641181a531ca65cdb5e8e4dea\"},",
          "549:     {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:43193c5cda5d612f247172016c4bb71251c784d7a4d9314677186a838ad34858\"},",
          "550:     {file = \"charset_normalizer-3.4.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:aa693779a8b50cd97570e5a0f343538a8dbd3e496fa5dcb87e29406ad0299654\"},",
          "551:     {file = \"charset_normalizer-3.4.0-cp38-cp38-win32.whl\", hash = \"sha256:7706f5850360ac01d80c89bcef1640683cc12ed87f42579dab6c5d3ed6888613\"},",
          "552:     {file = \"charset_normalizer-3.4.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:c3e446d253bd88f6377260d07c895816ebf33ffffd56c1c792b13bff9c3e1ade\"},",
          "553:     {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:980b4f289d1d90ca5efcf07958d3eb38ed9c0b7676bf2831a54d4f66f9c27dfa\"},",
          "554:     {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f28f891ccd15c514a0981f3b9db9aa23d62fe1a99997512b0491d2ed323d229a\"},",
          "555:     {file = \"charset_normalizer-3.4.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a8aacce6e2e1edcb6ac625fb0f8c3a9570ccc7bfba1f63419b3769ccf6a00ed0\"},",
          "556:     {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bd7af3717683bea4c87acd8c0d3d5b44d56120b26fd3f8a692bdd2d5260c620a\"},",
          "557:     {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5ff2ed8194587faf56555927b3aa10e6fb69d931e33953943bc4f837dfee2242\"},",
          "558:     {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:e91f541a85298cf35433bf66f3fab2a4a2cff05c127eeca4af174f6d497f0d4b\"},",
          "559:     {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:309a7de0a0ff3040acaebb35ec45d18db4b28232f21998851cfa709eeff49d62\"},",
          "560:     {file = \"charset_normalizer-3.4.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:285e96d9d53422efc0d7a17c60e59f37fbf3dfa942073f666db4ac71e8d726d0\"},",
          "561:     {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:5d447056e2ca60382d460a604b6302d8db69476fd2015c81e7c35417cfabe4cd\"},",
          "562:     {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:20587d20f557fe189b7947d8e7ec5afa110ccf72a3128d61a2a387c3313f46be\"},",
          "563:     {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:130272c698667a982a5d0e626851ceff662565379baf0ff2cc58067b81d4f11d\"},",
          "564:     {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:ab22fbd9765e6954bc0bcff24c25ff71dcbfdb185fcdaca49e81bac68fe724d3\"},",
          "565:     {file = \"charset_normalizer-3.4.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:7782afc9b6b42200f7362858f9e73b1f8316afb276d316336c0ec3bd73312742\"},",
          "566:     {file = \"charset_normalizer-3.4.0-cp39-cp39-win32.whl\", hash = \"sha256:2de62e8801ddfff069cd5c504ce3bc9672b23266597d4e4f50eda28846c322f2\"},",
          "567:     {file = \"charset_normalizer-3.4.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:95c3c157765b031331dd4db3c775e58deaee050a3042fcad72cbc4189d7c8dca\"},",
          "568:     {file = \"charset_normalizer-3.4.0-py3-none-any.whl\", hash = \"sha256:fe9f97feb71aa9896b81973a7bbada8c49501dc73e58a10fcef6663af95e5079\"},",
          "569:     {file = \"charset_normalizer-3.4.0.tar.gz\", hash = \"sha256:223217c3d4f82c3ac5e29032b3f1c2eb0fb591b72161f86d93f5719079dae93e\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "593: [[package]]",
          "594: name = \"cryptography\"",
          "596: description = \"cryptography is a package which provides cryptographic recipes and primitives to Python developers.\"",
          "597: optional = false",
          "598: python-versions = \">=3.7\"",
          "599: files = [",
          "623: ]",
          "625: [package.dependencies]",
          "628: [package.extras]",
          "629: docs = [\"sphinx (>=5.3.0)\", \"sphinx-rtd-theme (>=1.1.1)\"]",
          "631: nox = [\"nox\"]",
          "633: sdist = [\"build\"]",
          "634: ssh = [\"bcrypt (>=3.1.5)\"]",
          "636: test-randomorder = [\"pytest-randomly\"]",
          "638: [[package]]",
          "",
          "[Removed Lines]",
          "595: version = \"41.0.7\"",
          "600:     {file = \"cryptography-41.0.7-cp37-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:3c78451b78313fa81607fa1b3f1ae0a5ddd8014c38a02d9db0616133987b9cdf\"},",
          "601:     {file = \"cryptography-41.0.7-cp37-abi3-macosx_10_12_x86_64.whl\", hash = \"sha256:928258ba5d6f8ae644e764d0f996d61a8777559f72dfeb2eea7e2fe0ad6e782d\"},",
          "602:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5a1b41bc97f1ad230a41657d9155113c7521953869ae57ac39ac7f1bb471469a\"},",
          "603:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:841df4caa01008bad253bce2a6f7b47f86dc9f08df4b433c404def869f590a15\"},",
          "604:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:5429ec739a29df2e29e15d082f1d9ad683701f0ec7709ca479b3ff2708dae65a\"},",
          "605:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:43f2552a2378b44869fe8827aa19e69512e3245a219104438692385b0ee119d1\"},",
          "606:     {file = \"cryptography-41.0.7-cp37-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:af03b32695b24d85a75d40e1ba39ffe7db7ffcb099fe507b39fd41a565f1b157\"},",
          "607:     {file = \"cryptography-41.0.7-cp37-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:49f0805fc0b2ac8d4882dd52f4a3b935b210935d500b6b805f321addc8177406\"},",
          "608:     {file = \"cryptography-41.0.7-cp37-abi3-win32.whl\", hash = \"sha256:f983596065a18a2183e7f79ab3fd4c475205b839e02cbc0efbbf9666c4b3083d\"},",
          "609:     {file = \"cryptography-41.0.7-cp37-abi3-win_amd64.whl\", hash = \"sha256:90452ba79b8788fa380dfb587cca692976ef4e757b194b093d845e8d99f612f2\"},",
          "610:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:079b85658ea2f59c4f43b70f8119a52414cdb7be34da5d019a77bf96d473b960\"},",
          "611:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:b640981bf64a3e978a56167594a0e97db71c89a479da8e175d8bb5be5178c003\"},",
          "612:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:e3114da6d7f95d2dee7d3f4eec16dacff819740bbab931aff8648cb13c5ff5e7\"},",
          "613:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:d5ec85080cce7b0513cfd233914eb8b7bbd0633f1d1703aa28d1dd5a72f678ec\"},",
          "614:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7a698cb1dac82c35fcf8fe3417a3aaba97de16a01ac914b89a0889d364d2f6be\"},",
          "615:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:37a138589b12069efb424220bf78eac59ca68b95696fc622b6ccc1c0a197204a\"},",
          "616:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:68a2dec79deebc5d26d617bfdf6e8aab065a4f34934b22d3b5010df3ba36612c\"},",
          "617:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:09616eeaef406f99046553b8a40fbf8b1e70795a91885ba4c96a70793de5504a\"},",
          "618:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:48a0476626da912a44cc078f9893f292f0b3e4c739caf289268168d8f4702a39\"},",
          "619:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:c7f3201ec47d5207841402594f1d7950879ef890c0c495052fa62f58283fde1a\"},",
          "620:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:c5ca78485a255e03c32b513f8c2bc39fedb7f5c5f8535545bdc223a03b24f248\"},",
          "621:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:d6c391c021ab1f7a82da5d8d0b3cee2f4b2c455ec86c8aebbc84837a631ff309\"},",
          "622:     {file = \"cryptography-41.0.7.tar.gz\", hash = \"sha256:13f93ce9bea8016c253b34afc6bd6a75993e5c40672ed5405a9c832f0d4a00bc\"},",
          "626: cffi = \">=1.12\"",
          "630: docstest = [\"pyenchant (>=1.6.11)\", \"sphinxcontrib-spelling (>=4.0.1)\", \"twine (>=1.12.0)\"]",
          "632: pep8test = [\"black\", \"check-sdist\", \"mypy\", \"ruff\"]",
          "635: test = [\"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]",
          "",
          "[Added Lines]",
          "635: version = \"43.0.3\"",
          "640:     {file = \"cryptography-43.0.3-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:bf7a1932ac4176486eab36a19ed4c0492da5d97123f1406cf15e41b05e787d2e\"},",
          "641:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:63efa177ff54aec6e1c0aefaa1a241232dcd37413835a9b674b6e3f0ae2bfd3e\"},",
          "642:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e1ce50266f4f70bf41a2c6dc4358afadae90e2a1e5342d3c08883df1675374f\"},",
          "643:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:443c4a81bb10daed9a8f334365fe52542771f25aedaf889fd323a853ce7377d6\"},",
          "644:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:74f57f24754fe349223792466a709f8e0c093205ff0dca557af51072ff47ab18\"},",
          "645:     {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:9762ea51a8fc2a88b70cf2995e5675b38d93bf36bd67d91721c309df184f49bd\"},",
          "646:     {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:81ef806b1fef6b06dcebad789f988d3b37ccaee225695cf3e07648eee0fc6b73\"},",
          "647:     {file = \"cryptography-43.0.3-cp37-abi3-win32.whl\", hash = \"sha256:cbeb489927bd7af4aa98d4b261af9a5bc025bd87f0e3547e11584be9e9427be2\"},",
          "648:     {file = \"cryptography-43.0.3-cp37-abi3-win_amd64.whl\", hash = \"sha256:f46304d6f0c6ab8e52770addfa2fc41e6629495548862279641972b6215451cd\"},",
          "649:     {file = \"cryptography-43.0.3-cp39-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:8ac43ae87929a5982f5948ceda07001ee5e83227fd69cf55b109144938d96984\"},",
          "650:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:846da004a5804145a5f441b8530b4bf35afbf7da70f82409f151695b127213d5\"},",
          "651:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4\"},",
          "652:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:f7b178f11ed3664fd0e995a47ed2b5ff0a12d893e41dd0494f406d1cf555cab7\"},",
          "653:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405\"},",
          "654:     {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1be4655c7ef6e1bbe6b5d0403526601323420bcf414598955968c9ef3eb7d16\"},",
          "655:     {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:df6b6c6d742395dd77a23ea3728ab62f98379eff8fb61be2744d4679ab678f73\"},",
          "656:     {file = \"cryptography-43.0.3-cp39-abi3-win32.whl\", hash = \"sha256:d56e96520b1020449bbace2b78b603442e7e378a9b3bd68de65c782db1507995\"},",
          "657:     {file = \"cryptography-43.0.3-cp39-abi3-win_amd64.whl\", hash = \"sha256:0c580952eef9bf68c4747774cde7ec1d85a6e61de97281f2dba83c7d2c806362\"},",
          "658:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:d03b5621a135bffecad2c73e9f4deb1a0f977b9a8ffe6f8e002bf6c9d07b918c\"},",
          "659:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:a2a431ee15799d6db9fe80c82b055bae5a752bef645bba795e8e52687c69efe3\"},",
          "660:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:281c945d0e28c92ca5e5930664c1cefd85efe80e5c0d2bc58dd63383fda29f83\"},",
          "661:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:f18c716be16bc1fea8e95def49edf46b82fccaa88587a45f8dc0ff6ab5d8e0a7\"},",
          "662:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:4a02ded6cd4f0a5562a8887df8b3bd14e822a90f97ac5e544c162899bc467664\"},",
          "663:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:53a583b6637ab4c4e3591a15bc9db855b8d9dee9a669b550f311480acab6eb08\"},",
          "664:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:1ec0bcf7e17c0c5669d881b1cd38c4972fade441b27bda1051665faaa89bdcaa\"},",
          "665:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:2ce6fae5bdad59577b44e4dfed356944fbf1d925269114c28be377692643b4ff\"},",
          "666:     {file = \"cryptography-43.0.3.tar.gz\", hash = \"sha256:315b9001266a492a6ff443b61238f956b214dbec9910a081ba5b6646a055a805\"},",
          "670: cffi = {version = \">=1.12\", markers = \"platform_python_implementation != \\\"PyPy\\\"\"}",
          "674: docstest = [\"pyenchant (>=1.6.11)\", \"readme-renderer\", \"sphinxcontrib-spelling (>=4.0.1)\"]",
          "676: pep8test = [\"check-sdist\", \"click\", \"mypy\", \"ruff\"]",
          "679: test = [\"certifi\", \"cryptography-vectors (==43.0.3)\", \"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "660: [[package]]",
          "661: name = \"django\"",
          "663: description = \"A high-level Python web framework that encourages rapid development and clean, pragmatic design.\"",
          "664: optional = false",
          "665: python-versions = \">=3.10\"",
          "666: files = [",
          "669: ]",
          "671: [package.dependencies]",
          "673: sqlparse = \">=0.3.1\"",
          "674: tzdata = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "",
          "[Removed Lines]",
          "662: version = \"5.0.9\"",
          "667:     {file = \"Django-5.0.9-py3-none-any.whl\", hash = \"sha256:f219576ba53be4e83f485130a7283f0efde06a9f2e3a7c3c5180327549f078fa\"},",
          "668:     {file = \"Django-5.0.9.tar.gz\", hash = \"sha256:6333870d342329b60174da3a60dbd302e533f3b0bb0971516750e974a99b5a39\"},",
          "672: asgiref = \">=3.7.0,<4\"",
          "",
          "[Added Lines]",
          "706: version = \"5.1.2\"",
          "711:     {file = \"Django-5.1.2-py3-none-any.whl\", hash = \"sha256:f11aa87ad8d5617171e3f77e1d5d16f004b79a2cf5d2e1d2b97a6a1f8e9ba5ed\"},",
          "712:     {file = \"Django-5.1.2.tar.gz\", hash = \"sha256:bd7376f90c99f96b643722eee676498706c9fd7dc759f55ebfaf2c08ebcdf4f0\"},",
          "716: asgiref = \">=3.8.1,<4\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "678: bcrypt = [\"bcrypt\"]",
          "680: [[package]]",
          "683: description = \"Cache-based rate-limiting for Django.\"",
          "684: optional = false",
          "686: files = [",
          "688: ]",
          "694: [[package]]",
          "695: name = \"face\"",
          "696: version = \"22.0.0\"",
          "",
          "[Removed Lines]",
          "681: name = \"django-brake\"",
          "682: version = \"1.6.0\"",
          "685: python-versions = \"*\"",
          "687:     {file = \"django-brake-1.6.0.tar.gz\", hash = \"sha256:1d8fdccdf9a73008367d93a135ab32c9cde49859f9ecd8466034e39e71b40a8f\"},",
          "690: [package.dependencies]",
          "691: django = \"*\"",
          "692: nose = \"*\"",
          "",
          "[Added Lines]",
          "725: name = \"django-ratelimit\"",
          "726: version = \"4.1.0\"",
          "729: python-versions = \">=3.7\"",
          "731:     {file = \"django-ratelimit-4.1.0.tar.gz\", hash = \"sha256:555943b283045b917ad59f196829530d63be2a39adb72788d985b90c81ba808b\"},",
          "732:     {file = \"django_ratelimit-4.1.0-py2.py3-none-any.whl\", hash = \"sha256:d047a31cf94d83ef1465d7543ca66c6fc16695559b5f8d814d1b51df15110b92\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "746: [[package]]",
          "747: name = \"frida\"",
          "749: description = \"Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers\"",
          "750: optional = false",
          "751: python-versions = \">=3.7\"",
          "752: files = [",
          "766: ]",
          "768: [package.dependencies]",
          "",
          "[Removed Lines]",
          "748: version = \"16.5.2\"",
          "753:     {file = \"frida-16.5.2-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:c44644af6956796a299d0a4abfb944342bd9dea4ea17dd8b94ec3d3e7d9854f8\"},",
          "754:     {file = \"frida-16.5.2-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:92d45a72e86ee815e50b5c3a9ac5688ba8fedb1e5e3d2ca892d82eb93a221322\"},",
          "755:     {file = \"frida-16.5.2-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:ca6daf96c781e9c5cf2db156f405c85a84a40c7c02f0f23864844b7c5b27c461\"},",
          "756:     {file = \"frida-16.5.2-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:3ffd98c279f5dbcbb00137abadc900192d9268e0f7723271c844a22cc65cae19\"},",
          "757:     {file = \"frida-16.5.2-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:5a5a9ce9baf645bb4e3ad2fa21b52a232c12efb86b41f5eee9deecd0bb3baeb2\"},",
          "758:     {file = \"frida-16.5.2-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:eef006565e602db516e948b16a7ac38333381f1e010e15450951b889f76edfe3\"},",
          "759:     {file = \"frida-16.5.2-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:da268104fe85aade945e8a4b2b8dc3698e484e89157b8b29f8158318a4b9d712\"},",
          "760:     {file = \"frida-16.5.2-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:71b0b62b389afddde213975f1acbb8dc8ff0dd736cfdb8a63652d32de6a9c2e2\"},",
          "761:     {file = \"frida-16.5.2-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:882b8d93788f32b99dc87c95bd6c0da78876144e6ddf143daea659f4678343dc\"},",
          "762:     {file = \"frida-16.5.2-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:175276169a572d2a9263eb50d36bb6945839b1f3ad2fa80ec666cb15bbb5e0c1\"},",
          "763:     {file = \"frida-16.5.2-cp37-abi3-win32.whl\", hash = \"sha256:bc7e9f7594799ab7bd4e31535247d92bc040a865d18193c5c14723a920fbd670\"},",
          "764:     {file = \"frida-16.5.2-cp37-abi3-win_amd64.whl\", hash = \"sha256:c114aa1180a89afe559382ec7236f90275d98e39ba700209824a16ca4a5049e3\"},",
          "765:     {file = \"frida-16.5.2.tar.gz\", hash = \"sha256:0e28d97aa86e4b9afde0137a2eaf26968b54650d833a9d8319f82f97e6770333\"},",
          "",
          "[Added Lines]",
          "789: version = \"16.5.6\"",
          "794:     {file = \"frida-16.5.6-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:7cddc10f9115f8fbc7fc24bc2159661c625a8876910a4a9f4b5ebcd0f2e8cfa3\"},",
          "795:     {file = \"frida-16.5.6-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:913f15c08e479e57eba517306524d887c2d91575de1ace18e491919e373901cb\"},",
          "796:     {file = \"frida-16.5.6-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:2470c303ee6365da25d0059df7ce78cfe9b42cca73bbb80aaa29a41a98ef2402\"},",
          "797:     {file = \"frida-16.5.6-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:c525bdb9478285b8d21c4e8fb4790485ecbf9e28aae2282438b732accf440b7d\"},",
          "798:     {file = \"frida-16.5.6-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:0988274cff716d0920d44a97f8cf5afc2c915c573db805efb75d6b1cb1c027b8\"},",
          "799:     {file = \"frida-16.5.6-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:3f01a7dedaf31cb599a8d6a9e57b530174a43ad756aaa04a447d4610ac654af2\"},",
          "800:     {file = \"frida-16.5.6-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:421d93af28adb18790cf5516fd1abbca18be4fb9220d17f607152f679e0192c8\"},",
          "801:     {file = \"frida-16.5.6-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:4e970ce119c49e7be77b3965c02acbc4773e60e46abf4ba6b1df26f700ebf023\"},",
          "802:     {file = \"frida-16.5.6-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:874a6a39674a9fc826f7f53f11ea694cdbde62b1adac6c72d8a6c0822f1b8fa2\"},",
          "803:     {file = \"frida-16.5.6-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:231e4b77d2e243e38e3d9df257ec35dafce07162bf1dd7e57987335941ce7100\"},",
          "804:     {file = \"frida-16.5.6-cp37-abi3-win32.whl\", hash = \"sha256:48eb86bafd636c7f317efa16595e0a6ae5ed66f227243fe86e65a6cc94af7618\"},",
          "805:     {file = \"frida-16.5.6-cp37-abi3-win_amd64.whl\", hash = \"sha256:aabbab06141270e7f5b7b1a62dd4ee19305b6e38399ab2962146982086703cfc\"},",
          "806:     {file = \"frida-16.5.6.tar.gz\", hash = \"sha256:87b5c2df71d5599358247f2666ddc051c9f18c14366470dcb19e98683b3d69a6\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "859: [[package]]",
          "860: name = \"http-tools\"",
          "862: description = \"httptools helps you to capture, repeat and live intercept HTTP requests. It is built on top of [mitmproxy](https://mitmproxy.org/)\"",
          "863: optional = false",
          "864: python-versions = \"*\"",
          "865: files = [",
          "867: ]",
          "869: [package.dependencies]",
          "873: [[package]]",
          "874: name = \"hyperframe\"",
          "",
          "[Removed Lines]",
          "861: version = \"4.0.0\"",
          "866:     {file = \"http-tools-4.0.0.tar.gz\", hash = \"sha256:aa6a3477ca4ef2c61b461b79d3ce88200c9d02d37c84c65e8abbc7ed2dfed545\"},",
          "870: markupsafe = \">=2.1.3\"",
          "871: mitmproxy = \"10.1.5\"",
          "",
          "[Added Lines]",
          "902: version = \"5.0.0\"",
          "907:     {file = \"http_tools-5.0.0.tar.gz\", hash = \"sha256:798bbd728d353902556c511bcca0838d5916c857103e0c06a460e9f759f24815\"},",
          "911: markupsafe = \">=3.0.2\"",
          "912: mitmproxy = \"11.0.0\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1008: [[package]]",
          "1009: name = \"lief\"",
          "1011: description = \"Library to instrument executable formats\"",
          "1012: optional = false",
          "1013: python-versions = \">=3.8\"",
          "1014: files = [",
          "1038: ]",
          "1040: [[package]]",
          "",
          "[Removed Lines]",
          "1010: version = \"0.13.2\"",
          "1015:     {file = \"lief-0.13.2-cp310-cp310-macosx_10_14_x86_64.whl\", hash = \"sha256:0390cfaaf0e9aed46bebf26f00f34852768f76bc7f90abf7ceb384566200e5f5\"},",
          "1016:     {file = \"lief-0.13.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5581bf0072c1e7a9ea2fb2e2252b8582016e8b298804b5461e552b402c9cd4e9\"},",
          "1017:     {file = \"lief-0.13.2-cp310-cp310-manylinux2014_aarch64.whl\", hash = \"sha256:dbbf2fb3d7807e815f345c77e287da162e081100f059ec03005995befc295d7f\"},",
          "1018:     {file = \"lief-0.13.2-cp310-cp310-manylinux_2_24_x86_64.whl\", hash = \"sha256:d344d37334c2b488dc02f04cb13c22cd61aa065eeb9bca7424588e0c8c23bdfb\"},",
          "1019:     {file = \"lief-0.13.2-cp310-cp310-win32.whl\", hash = \"sha256:bc041b28b94139843a33c014e355822a9276b35f3c5ae10d82da56bf572f8222\"},",
          "1020:     {file = \"lief-0.13.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:01d4075bbc3541e9dd3ef008045fa1eb128294a0c5b0c1f69ce60d8948d248c7\"},",
          "1021:     {file = \"lief-0.13.2-cp311-cp311-macosx_10_14_x86_64.whl\", hash = \"sha256:6570dacebe107ad60c2ba0968d1a865d316009d43cc85af3719d3eeb0911abf3\"},",
          "1022:     {file = \"lief-0.13.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:7ce2e3f7c791efba327c2bb3499dbef81e682027109045a9bae696c62e2aeeb0\"},",
          "1023:     {file = \"lief-0.13.2-cp311-cp311-manylinux2014_aarch64.whl\", hash = \"sha256:11ab900e0644b6735ecdef2bbd04439b4866a527650fc054470c195d6cfe2917\"},",
          "1024:     {file = \"lief-0.13.2-cp311-cp311-manylinux_2_24_x86_64.whl\", hash = \"sha256:042ad2105a136b11a7494b9af8178468e8cb32b8fa2a0a55cb659a5605aeb069\"},",
          "1025:     {file = \"lief-0.13.2-cp311-cp311-win32.whl\", hash = \"sha256:1ce289b6ab3cf4be654270007e8a2c0d2e42116180418c29d3ce83762955de63\"},",
          "1026:     {file = \"lief-0.13.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:eccb248ffb598e410fd2ef7c1f171a3cde57a40c9bb8c4fa15d8e7b90eb4eb2d\"},",
          "1027:     {file = \"lief-0.13.2-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:95731cadedd6ffc5fb48c147fcefe004624e436b75e8ee9fb2dbf2ae5f084342\"},",
          "1028:     {file = \"lief-0.13.2-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:8da75df0ea472557fcc37a27ba583bad5a8f3a256c186600d00a6dd0a57f718a\"},",
          "1029:     {file = \"lief-0.13.2-cp38-cp38-manylinux_2_24_x86_64.whl\", hash = \"sha256:b99092f02c13f580c2d00b504af224b7e60e7c98a791e72ae8519f530b7687bb\"},",
          "1030:     {file = \"lief-0.13.2-cp38-cp38-win32.whl\", hash = \"sha256:03db0138e4dbbdfa8bba74de312b0cebb30f504e44f38a9c8918b84022da340b\"},",
          "1031:     {file = \"lief-0.13.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:36c5bea3f8460dee3ebb75d35949f445638ec85d2871f31e293c47fb4a0a5af7\"},",
          "1032:     {file = \"lief-0.13.2-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:eca8ecbcae1ad851ed7cf1e22ec8accd74f2267fa7375194559fb917523d8a92\"},",
          "1033:     {file = \"lief-0.13.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a8703cb5308b4828563badc6885ff07a3926ec3403d1caa3aa75f24fe9cbcf84\"},",
          "1034:     {file = \"lief-0.13.2-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:c60f2f79e7d0d1f18dec7dcdb4d4f35e6b126ac29e2f2f056d28ec50599d868a\"},",
          "1035:     {file = \"lief-0.13.2-cp39-cp39-manylinux_2_24_x86_64.whl\", hash = \"sha256:e0f84a7443b7f1b02666fd16a9aa57f5d9027e60ba2885e0d76db8426d689707\"},",
          "1036:     {file = \"lief-0.13.2-cp39-cp39-win32.whl\", hash = \"sha256:3f8f251de874929d9c9e94a35891621ab8c059149f8a1c24e543fd9cf0c2a31c\"},",
          "1037:     {file = \"lief-0.13.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:2bbe294385e629aa7206b2f39f0ca34e3948605a8db50b22091603053889a759\"},",
          "",
          "[Added Lines]",
          "1051: version = \"0.15.1\"",
          "1056:     {file = \"lief-0.15.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:a80246b96501b2b1d4927ceb3cb817eda9333ffa9e07101358929a6cffca5dae\"},",
          "1057:     {file = \"lief-0.15.1-cp310-cp310-macosx_11_0_x86_64.whl\", hash = \"sha256:84bf310710369544e2bb82f83d7fdab5b5ac422651184fde8bf9e35f14439691\"},",
          "1058:     {file = \"lief-0.15.1-cp310-cp310-manylinux2014_aarch64.whl\", hash = \"sha256:517dc5dad31c754720a80a87ad9e6cb1e48223d4505980c2fd86072bd4f69001\"},",
          "1059:     {file = \"lief-0.15.1-cp310-cp310-manylinux_2_28_x86_64.whl\", hash = \"sha256:8fb58efb77358291109d2675d5459399c0794475b497992d0ecee18a4a46a207\"},",
          "1060:     {file = \"lief-0.15.1-cp310-cp310-manylinux_2_33_aarch64.whl\", hash = \"sha256:d5852a246361bbefa4c1d5930741765a2337638d65cfe30de1b7d61f9a54b865\"},",
          "1061:     {file = \"lief-0.15.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:12e53dc0253c303df386ae45487a2f0078026602b36d0e09e838ae1d4dbef958\"},",
          "1062:     {file = \"lief-0.15.1-cp310-cp310-win32.whl\", hash = \"sha256:38b9cee48f42c355359ad7e3ff18bf1ec95e518238e4e8fb25657a49169dbf4c\"},",
          "1063:     {file = \"lief-0.15.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:ddf2ebd73766169594d631b35f84c49ef42871de552ad49f36002c60164d0aca\"},",
          "1064:     {file = \"lief-0.15.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:20508c52de0dffcee3242253541609590167a3e56150cbacb506fdbb822206ef\"},",
          "1065:     {file = \"lief-0.15.1-cp311-cp311-macosx_11_0_x86_64.whl\", hash = \"sha256:0750c892fd3b7161a3c2279f25fe1844427610c3a5a4ae23f65674ced6f93ea5\"},",
          "1066:     {file = \"lief-0.15.1-cp311-cp311-manylinux2014_aarch64.whl\", hash = \"sha256:3e49bd595a8548683bead982bc15b064257fea3110fd15e22fb3feb17d97ad1c\"},",
          "1067:     {file = \"lief-0.15.1-cp311-cp311-manylinux_2_28_x86_64.whl\", hash = \"sha256:a8634ea79d6d9862297fadce025519ab25ff01fcadb333cf42967c6295f0d057\"},",
          "1068:     {file = \"lief-0.15.1-cp311-cp311-manylinux_2_33_aarch64.whl\", hash = \"sha256:1e11e046ad71fe8c81e1a8d1d207fe2b99c967d33ce79c3d3915cb8f5ecacf52\"},",
          "1069:     {file = \"lief-0.15.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:674b620cdf1d686f52450fd97c1056d4c92e55af8217ce85a1b2efaf5b32140b\"},",
          "1070:     {file = \"lief-0.15.1-cp311-cp311-win32.whl\", hash = \"sha256:dbdcd70fd23c90017705b7fe6c716f0a69c01d0d0ea7a2ff653d83dc4a61fefb\"},",
          "1071:     {file = \"lief-0.15.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:e9b96a37bf11ca777ff305d85d957eabad2a92a6e577b6e2fb3ab79514e5a12e\"},",
          "1072:     {file = \"lief-0.15.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:1a96f17c2085ef38d12ad81427ae8a5d6ad76f0bc62a1e1f5fe384255cd2cc94\"},",
          "1073:     {file = \"lief-0.15.1-cp312-cp312-macosx_11_0_x86_64.whl\", hash = \"sha256:d780af1762022b8e01b613253af490afea3864fbd6b5a49c6de7cea8fde0443d\"},",
          "1074:     {file = \"lief-0.15.1-cp312-cp312-manylinux2014_aarch64.whl\", hash = \"sha256:536a4ecd46b295b3acac0d60a68d1646480b7761ade862c6c87ccbb41229fae3\"},",
          "1075:     {file = \"lief-0.15.1-cp312-cp312-manylinux_2_28_x86_64.whl\", hash = \"sha256:d0f10d80202de9634a16786b53ba3a8f54ae8b9a9e124a964d83212444486087\"},",
          "1076:     {file = \"lief-0.15.1-cp312-cp312-manylinux_2_33_aarch64.whl\", hash = \"sha256:864f17ecf1736296e6d5fc38b11983f9d19a5e799f094e21e20d58bfb1b95b80\"},",
          "1077:     {file = \"lief-0.15.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:c2ec738bcafee8a569741f4a749f0596823b12f10713306c7d0cbbf85759f51c\"},",
          "1078:     {file = \"lief-0.15.1-cp312-cp312-win32.whl\", hash = \"sha256:db38619edf70e27fb3686b8c0f0bec63ad494ac88ab51660c5ecd2720b506e41\"},",
          "1079:     {file = \"lief-0.15.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:28bf0922de5fb74502a29cc47930d3a052df58dc23ab6519fa590e564f194a60\"},",
          "1080:     {file = \"lief-0.15.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:0805301e8fef9b13da00c33c831fb0c05ea892309230f3a35551c2dfaf69b11d\"},",
          "1081:     {file = \"lief-0.15.1-cp313-cp313-macosx_11_0_x86_64.whl\", hash = \"sha256:7580defe140e921bc4f210e8a6cb115fcf2923f00d37800b1626168cbca95108\"},",
          "1082:     {file = \"lief-0.15.1-cp313-cp313-manylinux2014_aarch64.whl\", hash = \"sha256:c0119306b6a38759483136de7242b7c2e0a23f1de1d4ae53f12792c279607410\"},",
          "1083:     {file = \"lief-0.15.1-cp313-cp313-manylinux_2_28_x86_64.whl\", hash = \"sha256:0616e6048f269d262ff93d67c497ebff3c1d3965ffb9427b0f2b474764fd2e8c\"},",
          "1084:     {file = \"lief-0.15.1-cp313-cp313-manylinux_2_33_aarch64.whl\", hash = \"sha256:6a08b2e512a80040429febddc777768c949bcd53f6f580e902e41ec0d9d936b8\"},",
          "1085:     {file = \"lief-0.15.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:fcd489ff80860bcc2b2689faa330a46b6d66f0ee3e0f6ef9e643e2b996128a06\"},",
          "1086:     {file = \"lief-0.15.1-cp313-cp313-win32.whl\", hash = \"sha256:0d10e5b22e86bbf2d1e3877b604ffd8860c852b6bc00fca681fe1432f5018fe9\"},",
          "1087:     {file = \"lief-0.15.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:5af7dcb9c3f44baaf60875df6ba9af6777db94776cc577ee86143bcce105ba2f\"},",
          "1088:     {file = \"lief-0.15.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:f9757ff0c7c3d6f66e5fdcc6a9df69680fad0dc2707d64a3428f0825dfce1a85\"},",
          "1089:     {file = \"lief-0.15.1-cp38-cp38-macosx_11_0_x86_64.whl\", hash = \"sha256:8ac3cd099be2580d0e15150b1d2f5095c38f150af89993ddf390d7897ee8135f\"},",
          "1090:     {file = \"lief-0.15.1-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:e732619acc34943b504c867258fc0196f1931f72c2a627219d4f116a7acc726d\"},",
          "1091:     {file = \"lief-0.15.1-cp38-cp38-manylinux_2_28_x86_64.whl\", hash = \"sha256:4dedeab498c312a29b58f16b739895f65fa54b2a21b8d98b111e99ad3f7e30a8\"},",
          "1092:     {file = \"lief-0.15.1-cp38-cp38-manylinux_2_33_aarch64.whl\", hash = \"sha256:b9217578f7a45f667503b271da8481207fb4edda8d4a53e869fb922df6030484\"},",
          "1093:     {file = \"lief-0.15.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:82e6308ad8bd4bc7eadee3502ede13a5bb398725f25513a0396c8dba850f58a1\"},",
          "1094:     {file = \"lief-0.15.1-cp38-cp38-win32.whl\", hash = \"sha256:dde1c8f8ebe0ee9db4f2302c87ae3cacb9898dc412e0d7da07a8e4e834ac5158\"},",
          "1095:     {file = \"lief-0.15.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:a079a76bca23aa73c850ab5beb7598871a1bf44662658b952cead2b5ddd31bee\"},",
          "1096:     {file = \"lief-0.15.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:785a3aa14575f046ed9c8d44ea222ea14c697cd03b5331d1717b5b0cf4f72466\"},",
          "1097:     {file = \"lief-0.15.1-cp39-cp39-macosx_11_0_x86_64.whl\", hash = \"sha256:d7044553cf07c8a2ab6e21874f07585610d996ff911b9af71dc6085a89f59daa\"},",
          "1098:     {file = \"lief-0.15.1-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:fa020f3ed6e95bb110a4316af544021b74027d18bf4671339d4cffec27aa5884\"},",
          "1099:     {file = \"lief-0.15.1-cp39-cp39-manylinux_2_28_x86_64.whl\", hash = \"sha256:13285c3ff5ef6de2421d85684c954905af909db0ad3472e33c475e5f0f657dcf\"},",
          "1100:     {file = \"lief-0.15.1-cp39-cp39-manylinux_2_33_aarch64.whl\", hash = \"sha256:932f880ee8a130d663a97a9099516d8570b1b303af7816e70a02f9931d5ef4c2\"},",
          "1101:     {file = \"lief-0.15.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:de9453f94866e0f2c36b6bd878625880080e7e5800788f5cbc06a76debf283b9\"},",
          "1102:     {file = \"lief-0.15.1-cp39-cp39-win32.whl\", hash = \"sha256:4e47324736d6aa559421720758de4ce12d04fb56bdffa3dcc051fe8cdd42ed17\"},",
          "1103:     {file = \"lief-0.15.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:382a189514c0e6ebfb41e0db6106936c7ba94d8400651276add2899ff3570585\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1208: [[package]]",
          "1209: name = \"markupsafe\"",
          "1211: description = \"Safely add untrusted strings to HTML/XML markup.\"",
          "1212: optional = false",
          "1213: python-versions = \">=3.9\"",
          "1214: files = [",
          "1276: ]",
          "1278: [[package]]",
          "1279: name = \"mitmproxy\"",
          "1281: description = \"An interactive, SSL/TLS-capable intercepting proxy for HTTP/1, HTTP/2, and WebSockets.\"",
          "1282: optional = false",
          "1283: python-versions = \">=3.10\"",
          "1284: files = [",
          "1286: ]",
          "1288: [package.dependencies]",
          "1292: certifi = \">=2019.9.11\"",
          "1317: [package.extras]",
          "1320: [[package]]",
          "1321: name = \"mitmproxy-macos\"",
          "1323: description = \"\"",
          "1324: optional = false",
          "1325: python-versions = \">=3.10\"",
          "1326: files = [",
          "1328: ]",
          "1330: [[package]]",
          "1331: name = \"mitmproxy-rs\"",
          "1333: description = \"\"",
          "1334: optional = false",
          "1335: python-versions = \">=3.10\"",
          "1336: files = [",
          "1342: ]",
          "1344: [package.dependencies]",
          "1348: [[package]]",
          "1349: name = \"mitmproxy-windows\"",
          "1351: description = \"\"",
          "1352: optional = false",
          "1353: python-versions = \">=3.10\"",
          "1354: files = [",
          "1356: ]",
          "1358: [[package]]",
          "1359: name = \"msgpack\"",
          "1361: description = \"MessagePack serializer\"",
          "1362: optional = false",
          "1363: python-versions = \">=3.8\"",
          "1364: files = [",
          "1433: ]",
          "1435: [[package]]",
          "",
          "[Removed Lines]",
          "1210: version = \"3.0.1\"",
          "1215:     {file = \"MarkupSafe-3.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:db842712984e91707437461930e6011e60b39136c7331e971952bb30465bc1a1\"},",
          "1216:     {file = \"MarkupSafe-3.0.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:3ffb4a8e7d46ed96ae48805746755fadd0909fea2306f93d5d8233ba23dda12a\"},",
          "1217:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:67c519635a4f64e495c50e3107d9b4075aec33634272b5db1cde839e07367589\"},",
          "1218:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48488d999ed50ba8d38c581d67e496f955821dc183883550a6fbc7f1aefdc170\"},",
          "1219:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f31ae06f1328595d762c9a2bf29dafd8621c7d3adc130cbb46278079758779ca\"},",
          "1220:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:80fcbf3add8790caddfab6764bde258b5d09aefbe9169c183f88a7410f0f6dea\"},",
          "1221:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:3341c043c37d78cc5ae6e3e305e988532b072329639007fd408a476642a89fd6\"},",
          "1222:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:cb53e2a99df28eee3b5f4fea166020d3ef9116fdc5764bc5117486e6d1211b25\"},",
          "1223:     {file = \"MarkupSafe-3.0.1-cp310-cp310-win32.whl\", hash = \"sha256:db15ce28e1e127a0013dfb8ac243a8e392db8c61eae113337536edb28bdc1f97\"},",
          "1224:     {file = \"MarkupSafe-3.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:4ffaaac913c3f7345579db4f33b0020db693f302ca5137f106060316761beea9\"},",
          "1225:     {file = \"MarkupSafe-3.0.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:26627785a54a947f6d7336ce5963569b5d75614619e75193bdb4e06e21d447ad\"},",
          "1226:     {file = \"MarkupSafe-3.0.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b954093679d5750495725ea6f88409946d69cfb25ea7b4c846eef5044194f583\"},",
          "1227:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:973a371a55ce9ed333a3a0f8e0bcfae9e0d637711534bcb11e130af2ab9334e7\"},",
          "1228:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:244dbe463d5fb6d7ce161301a03a6fe744dac9072328ba9fc82289238582697b\"},",
          "1229:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d98e66a24497637dd31ccab090b34392dddb1f2f811c4b4cd80c230205c074a3\"},",
          "1230:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:ad91738f14eb8da0ff82f2acd0098b6257621410dcbd4df20aaa5b4233d75a50\"},",
          "1231:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:7044312a928a66a4c2a22644147bc61a199c1709712069a344a3fb5cfcf16915\"},",
          "1232:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:a4792d3b3a6dfafefdf8e937f14906a51bd27025a36f4b188728a73382231d91\"},",
          "1233:     {file = \"MarkupSafe-3.0.1-cp311-cp311-win32.whl\", hash = \"sha256:fa7d686ed9883f3d664d39d5a8e74d3c5f63e603c2e3ff0abcba23eac6542635\"},",
          "1234:     {file = \"MarkupSafe-3.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:9ba25a71ebf05b9bb0e2ae99f8bc08a07ee8e98c612175087112656ca0f5c8bf\"},",
          "1235:     {file = \"MarkupSafe-3.0.1-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:8ae369e84466aa70f3154ee23c1451fda10a8ee1b63923ce76667e3077f2b0c4\"},",
          "1236:     {file = \"MarkupSafe-3.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40f1e10d51c92859765522cbd79c5c8989f40f0419614bcdc5015e7b6bf97fc5\"},",
          "1237:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5a4cb365cb49b750bdb60b846b0c0bc49ed62e59a76635095a179d440540c346\"},",
          "1238:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ee3941769bd2522fe39222206f6dd97ae83c442a94c90f2b7a25d847d40f4729\"},",
          "1239:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:62fada2c942702ef8952754abfc1a9f7658a4d5460fabe95ac7ec2cbe0d02abc\"},",
          "1240:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:4c2d64fdba74ad16138300815cfdc6ab2f4647e23ced81f59e940d7d4a1469d9\"},",
          "1241:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:fb532dd9900381d2e8f48172ddc5a59db4c445a11b9fab40b3b786da40d3b56b\"},",
          "1242:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:0f84af7e813784feb4d5e4ff7db633aba6c8ca64a833f61d8e4eade234ef0c38\"},",
          "1243:     {file = \"MarkupSafe-3.0.1-cp312-cp312-win32.whl\", hash = \"sha256:cbf445eb5628981a80f54087f9acdbf84f9b7d862756110d172993b9a5ae81aa\"},",
          "1244:     {file = \"MarkupSafe-3.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:a10860e00ded1dd0a65b83e717af28845bb7bd16d8ace40fe5531491de76b79f\"},",
          "1245:     {file = \"MarkupSafe-3.0.1-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:e81c52638315ff4ac1b533d427f50bc0afc746deb949210bc85f05d4f15fd772\"},",
          "1246:     {file = \"MarkupSafe-3.0.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:312387403cd40699ab91d50735ea7a507b788091c416dd007eac54434aee51da\"},",
          "1247:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2ae99f31f47d849758a687102afdd05bd3d3ff7dbab0a8f1587981b58a76152a\"},",
          "1248:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c97ff7fedf56d86bae92fa0a646ce1a0ec7509a7578e1ed238731ba13aabcd1c\"},",
          "1249:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a7420ceda262dbb4b8d839a4ec63d61c261e4e77677ed7c66c99f4e7cb5030dd\"},",
          "1250:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:45d42d132cff577c92bfba536aefcfea7e26efb975bd455db4e6602f5c9f45e7\"},",
          "1251:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4c8817557d0de9349109acb38b9dd570b03cc5014e8aabf1cbddc6e81005becd\"},",
          "1252:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:6a54c43d3ec4cf2a39f4387ad044221c66a376e58c0d0e971d47c475ba79c6b5\"},",
          "1253:     {file = \"MarkupSafe-3.0.1-cp313-cp313-win32.whl\", hash = \"sha256:c91b394f7601438ff79a4b93d16be92f216adb57d813a78be4446fe0f6bc2d8c\"},",
          "1254:     {file = \"MarkupSafe-3.0.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:fe32482b37b4b00c7a52a07211b479653b7fe4f22b2e481b9a9b099d8a430f2f\"},",
          "1255:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-macosx_10_13_universal2.whl\", hash = \"sha256:17b2aea42a7280db02ac644db1d634ad47dcc96faf38ab304fe26ba2680d359a\"},",
          "1256:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:852dc840f6d7c985603e60b5deaae1d89c56cb038b577f6b5b8c808c97580f1d\"},",
          "1257:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0778de17cff1acaeccc3ff30cd99a3fd5c50fc58ad3d6c0e0c4c58092b859396\"},",
          "1258:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:800100d45176652ded796134277ecb13640c1a537cad3b8b53da45aa96330453\"},",
          "1259:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d06b24c686a34c86c8c1fba923181eae6b10565e4d80bdd7bc1c8e2f11247aa4\"},",
          "1260:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:33d1c36b90e570ba7785dacd1faaf091203d9942bc036118fab8110a401eb1a8\"},",
          "1261:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:beeebf760a9c1f4c07ef6a53465e8cfa776ea6a2021eda0d0417ec41043fe984\"},",
          "1262:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:bbde71a705f8e9e4c3e9e33db69341d040c827c7afa6789b14c6e16776074f5a\"},",
          "1263:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-win32.whl\", hash = \"sha256:82b5dba6eb1bcc29cc305a18a3c5365d2af06ee71b123216416f7e20d2a84e5b\"},",
          "1264:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-win_amd64.whl\", hash = \"sha256:730d86af59e0e43ce277bb83970530dd223bf7f2a838e086b50affa6ec5f9295\"},",
          "1265:     {file = \"MarkupSafe-3.0.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:4935dd7883f1d50e2ffecca0aa33dc1946a94c8f3fdafb8df5c330e48f71b132\"},",
          "1266:     {file = \"MarkupSafe-3.0.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:e9393357f19954248b00bed7c56f29a25c930593a77630c719653d51e7669c2a\"},",
          "1267:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:40621d60d0e58aa573b68ac5e2d6b20d44392878e0bfc159012a5787c4e35bc8\"},",
          "1268:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f94190df587738280d544971500b9cafc9b950d32efcb1fba9ac10d84e6aa4e6\"},",
          "1269:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b6a387d61fe41cdf7ea95b38e9af11cfb1a63499af2759444b99185c4ab33f5b\"},",
          "1270:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:8ad4ad1429cd4f315f32ef263c1342166695fad76c100c5d979c45d5570ed58b\"},",
          "1271:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:e24bfe89c6ac4c31792793ad9f861b8f6dc4546ac6dc8f1c9083c7c4f2b335cd\"},",
          "1272:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:2a4b34a8d14649315c4bc26bbfa352663eb51d146e35eef231dd739d54a5430a\"},",
          "1273:     {file = \"MarkupSafe-3.0.1-cp39-cp39-win32.whl\", hash = \"sha256:242d6860f1fd9191aef5fae22b51c5c19767f93fb9ead4d21924e0bcb17619d8\"},",
          "1274:     {file = \"MarkupSafe-3.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:93e8248d650e7e9d49e8251f883eed60ecbc0e8ffd6349e18550925e31bd029b\"},",
          "1275:     {file = \"markupsafe-3.0.1.tar.gz\", hash = \"sha256:3e683ee4f5d0fa2dde4db77ed8dd8a876686e3fc417655c2ece9a90576905344\"},",
          "1280: version = \"10.1.5\"",
          "1285:     {file = \"mitmproxy-10.1.5-py3-none-any.whl\", hash = \"sha256:24d78fe45ee30573ab2c57ab9f65d4be6bc45bbc322e36e9555bb898ee787ae8\"},",
          "1289: aioquic-mitmproxy = \">=0.9.21,<0.10\"",
          "1290: asgiref = \">=3.2.10,<3.8\"",
          "1291: Brotli = \">=1.0,<1.2\"",
          "1293: cryptography = \">=38.0,<41.1\"",
          "1294: flask = \">=1.1.1,<3.1\"",
          "1295: h11 = \">=0.11,<0.15\"",
          "1296: h2 = \">=4.1,<5\"",
          "1297: hyperframe = \">=6.0,<7\"",
          "1298: kaitaistruct = \">=0.10,<0.11\"",
          "1299: ldap3 = \">=2.8,<2.10\"",
          "1300: mitmproxy-rs = \">=0.4,<0.5\"",
          "1301: msgpack = \">=1.0.0,<1.1.0\"",
          "1302: passlib = \">=1.6.5,<1.8\"",
          "1303: protobuf = \">=3.14,<5\"",
          "1304: publicsuffix2 = \">=2.20190812,<3\"",
          "1305: pydivert = {version = \">=2.0.3,<2.2\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1306: pyOpenSSL = \">=22.1,<23.4\"",
          "1307: pyparsing = \">=2.4.2,<3.2\"",
          "1308: pyperclip = \">=1.6.0,<1.9\"",
          "1309: \"ruamel.yaml\" = \">=0.16,<0.19\"",
          "1310: sortedcontainers = \">=2.3,<2.5\"",
          "1311: tornado = \">=6.2,<7\"",
          "1312: typing-extensions = {version = \">=4.3,<5\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1313: urwid-mitmproxy = \">=2.1.1,<2.2\"",
          "1314: wsproto = \">=1.0,<1.3\"",
          "1315: zstandard = \">=0.11,<0.23\"",
          "1318: dev = [\"build (>=0.10.0)\", \"click (>=7.0,<8.2)\", \"hypothesis (>=5.8,<7)\", \"pdoc (>=4.0.0)\", \"pyinstaller (==6.1.0)\", \"pytest (>=6.1.0,<8)\", \"pytest-asyncio (>=0.17,<0.22)\", \"pytest-cov (>=2.7.1,<4.2)\", \"pytest-timeout (>=1.3.3,<2.3)\", \"pytest-xdist (>=2.1.0,<3.4)\", \"requests (>=2.9.1,<3)\", \"tox (>=3.5,<5)\", \"wheel (>=0.36.2,<0.42)\"]",
          "1322: version = \"0.4.1\"",
          "1327:     {file = \"mitmproxy_macos-0.4.1-py3-none-any.whl\", hash = \"sha256:3720561fc8788f2ac71a063780dfb28e3353f216f978b04f8a0aa865835af97b\"},",
          "1332: version = \"0.4.1\"",
          "1337:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl\", hash = \"sha256:8674af6f9be7c1d26508f355322d3ce6a33f344eacefef403e0784bb10941054\"},",
          "1338:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e70adbcb0bd4d4c9a5ada99dc720747f9ab2c10357c1350b02e064466d77760c\"},",
          "1339:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f5da094d204ccca4b76f5db25c69ee34f8ad1aa9ac5e14ed72b8a91a6b8bcddd\"},",
          "1340:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-win_amd64.whl\", hash = \"sha256:037f627ae08ca62af50e62e8915b6563a3a8b55313e5aa2266406a0a27b19092\"},",
          "1341:     {file = \"mitmproxy_rs-0.4.1.tar.gz\", hash = \"sha256:179bc584a771ec39c16b3a87bde7faffa3872137aad477173ad4435b49ef855e\"},",
          "1345: mitmproxy_macos = {version = \"0.4.1\", markers = \"sys_platform == \\\"darwin\\\"\"}",
          "1346: mitmproxy_windows = {version = \"0.4.1\", markers = \"os_name == \\\"nt\\\"\"}",
          "1350: version = \"0.4.1\"",
          "1355:     {file = \"mitmproxy_windows-0.4.1-py3-none-any.whl\", hash = \"sha256:1a9c8e024d1b2e5544cc81bfb95bf2e713260191e64523e1c5b3bef98ad960ab\"},",
          "1360: version = \"1.0.8\"",
          "1365:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:505fe3d03856ac7d215dbe005414bc28505d26f0c128906037e66d98c4e95868\"},",
          "1366:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e6b7842518a63a9f17107eb176320960ec095a8ee3b4420b5f688e24bf50c53c\"},",
          "1367:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:376081f471a2ef24828b83a641a02c575d6103a3ad7fd7dade5486cad10ea659\"},",
          "1368:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5e390971d082dba073c05dbd56322427d3280b7cc8b53484c9377adfbae67dc2\"},",
          "1369:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:00e073efcba9ea99db5acef3959efa45b52bc67b61b00823d2a1a6944bf45982\"},",
          "1370:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:82d92c773fbc6942a7a8b520d22c11cfc8fd83bba86116bfcf962c2f5c2ecdaa\"},",
          "1371:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9ee32dcb8e531adae1f1ca568822e9b3a738369b3b686d1477cbc643c4a9c128\"},",
          "1372:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:e3aa7e51d738e0ec0afbed661261513b38b3014754c9459508399baf14ae0c9d\"},",
          "1373:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:69284049d07fce531c17404fcba2bb1df472bc2dcdac642ae71a2d079d950653\"},",
          "1374:     {file = \"msgpack-1.0.8-cp310-cp310-win32.whl\", hash = \"sha256:13577ec9e247f8741c84d06b9ece5f654920d8365a4b636ce0e44f15e07ec693\"},",
          "1375:     {file = \"msgpack-1.0.8-cp310-cp310-win_amd64.whl\", hash = \"sha256:e532dbd6ddfe13946de050d7474e3f5fb6ec774fbb1a188aaf469b08cf04189a\"},",
          "1376:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:9517004e21664f2b5a5fd6333b0731b9cf0817403a941b393d89a2f1dc2bd836\"},",
          "1377:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:d16a786905034e7e34098634b184a7d81f91d4c3d246edc6bd7aefb2fd8ea6ad\"},",
          "1378:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:e2872993e209f7ed04d963e4b4fbae72d034844ec66bc4ca403329db2074377b\"},",
          "1379:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5c330eace3dd100bdb54b5653b966de7f51c26ec4a7d4e87132d9b4f738220ba\"},",
          "1380:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:83b5c044f3eff2a6534768ccfd50425939e7a8b5cf9a7261c385de1e20dcfc85\"},",
          "1381:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1876b0b653a808fcd50123b953af170c535027bf1d053b59790eebb0aeb38950\"},",
          "1382:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:dfe1f0f0ed5785c187144c46a292b8c34c1295c01da12e10ccddfc16def4448a\"},",
          "1383:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:3528807cbbb7f315bb81959d5961855e7ba52aa60a3097151cb21956fbc7502b\"},",
          "1384:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e2f879ab92ce502a1e65fce390eab619774dda6a6ff719718069ac94084098ce\"},",
          "1385:     {file = \"msgpack-1.0.8-cp311-cp311-win32.whl\", hash = \"sha256:26ee97a8261e6e35885c2ecd2fd4a6d38252246f94a2aec23665a4e66d066305\"},",
          "1386:     {file = \"msgpack-1.0.8-cp311-cp311-win_amd64.whl\", hash = \"sha256:eadb9f826c138e6cf3c49d6f8de88225a3c0ab181a9b4ba792e006e5292d150e\"},",
          "1387:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:114be227f5213ef8b215c22dde19532f5da9652e56e8ce969bf0a26d7c419fee\"},",
          "1388:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:d661dc4785affa9d0edfdd1e59ec056a58b3dbb9f196fa43587f3ddac654ac7b\"},",
          "1389:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:d56fd9f1f1cdc8227d7b7918f55091349741904d9520c65f0139a9755952c9e8\"},",
          "1390:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0726c282d188e204281ebd8de31724b7d749adebc086873a59efb8cf7ae27df3\"},",
          "1391:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8db8e423192303ed77cff4dce3a4b88dbfaf43979d280181558af5e2c3c71afc\"},",
          "1392:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:99881222f4a8c2f641f25703963a5cefb076adffd959e0558dc9f803a52d6a58\"},",
          "1393:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:b5505774ea2a73a86ea176e8a9a4a7c8bf5d521050f0f6f8426afe798689243f\"},",
          "1394:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:ef254a06bcea461e65ff0373d8a0dd1ed3aa004af48839f002a0c994a6f72d04\"},",
          "1395:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:e1dd7839443592d00e96db831eddb4111a2a81a46b028f0facd60a09ebbdd543\"},",
          "1396:     {file = \"msgpack-1.0.8-cp312-cp312-win32.whl\", hash = \"sha256:64d0fcd436c5683fdd7c907eeae5e2cbb5eb872fafbc03a43609d7941840995c\"},",
          "1397:     {file = \"msgpack-1.0.8-cp312-cp312-win_amd64.whl\", hash = \"sha256:74398a4cf19de42e1498368c36eed45d9528f5fd0155241e82c4082b7e16cffd\"},",
          "1398:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:0ceea77719d45c839fd73abcb190b8390412a890df2f83fb8cf49b2a4b5c2f40\"},",
          "1399:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:1ab0bbcd4d1f7b6991ee7c753655b481c50084294218de69365f8f1970d4c151\"},",
          "1400:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:1cce488457370ffd1f953846f82323cb6b2ad2190987cd4d70b2713e17268d24\"},",
          "1401:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3923a1778f7e5ef31865893fdca12a8d7dc03a44b33e2a5f3295416314c09f5d\"},",
          "1402:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a22e47578b30a3e199ab067a4d43d790249b3c0587d9a771921f86250c8435db\"},",
          "1403:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:bd739c9251d01e0279ce729e37b39d49a08c0420d3fee7f2a4968c0576678f77\"},",
          "1404:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:d3420522057ebab1728b21ad473aa950026d07cb09da41103f8e597dfbfaeb13\"},",
          "1405:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:5845fdf5e5d5b78a49b826fcdc0eb2e2aa7191980e3d2cfd2a30303a74f212e2\"},",
          "1406:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:6a0e76621f6e1f908ae52860bdcb58e1ca85231a9b0545e64509c931dd34275a\"},",
          "1407:     {file = \"msgpack-1.0.8-cp38-cp38-win32.whl\", hash = \"sha256:374a8e88ddab84b9ada695d255679fb99c53513c0a51778796fcf0944d6c789c\"},",
          "1408:     {file = \"msgpack-1.0.8-cp38-cp38-win_amd64.whl\", hash = \"sha256:f3709997b228685fe53e8c433e2df9f0cdb5f4542bd5114ed17ac3c0129b0480\"},",
          "1409:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:f51bab98d52739c50c56658cc303f190785f9a2cd97b823357e7aeae54c8f68a\"},",
          "1410:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:73ee792784d48aa338bba28063e19a27e8d989344f34aad14ea6e1b9bd83f596\"},",
          "1411:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f9904e24646570539a8950400602d66d2b2c492b9010ea7e965025cb71d0c86d\"},",
          "1412:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e75753aeda0ddc4c28dce4c32ba2f6ec30b1b02f6c0b14e547841ba5b24f753f\"},",
          "1413:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5dbf059fb4b7c240c873c1245ee112505be27497e90f7c6591261c7d3c3a8228\"},",
          "1414:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4916727e31c28be8beaf11cf117d6f6f188dcc36daae4e851fee88646f5b6b18\"},",
          "1415:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:7938111ed1358f536daf311be244f34df7bf3cdedb3ed883787aca97778b28d8\"},",
          "1416:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:493c5c5e44b06d6c9268ce21b302c9ca055c1fd3484c25ba41d34476c76ee746\"},",
          "1417:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:5fbb160554e319f7b22ecf530a80a3ff496d38e8e07ae763b9e82fadfe96f273\"},",
          "1418:     {file = \"msgpack-1.0.8-cp39-cp39-win32.whl\", hash = \"sha256:f9af38a89b6a5c04b7d18c492c8ccf2aee7048aff1ce8437c4683bb5a1df893d\"},",
          "1419:     {file = \"msgpack-1.0.8-cp39-cp39-win_amd64.whl\", hash = \"sha256:ed59dd52075f8fc91da6053b12e8c89e37aa043f8986efd89e61fae69dc1b011\"},",
          "1420:     {file = \"msgpack-1.0.8.tar.gz\", hash = \"sha256:95c02b0e27e706e48d0e5426d1710ca78e0f0628d6e89d5b5a5b91a5f12274f3\"},",
          "1421: ]",
          "1423: [[package]]",
          "1424: name = \"nose\"",
          "1425: version = \"1.3.7\"",
          "1426: description = \"nose extends unittest to make testing easier\"",
          "1427: optional = false",
          "1428: python-versions = \"*\"",
          "1429: files = [",
          "1430:     {file = \"nose-1.3.7-py2-none-any.whl\", hash = \"sha256:dadcddc0aefbf99eea214e0f1232b94f2fa9bd98fa8353711dacb112bfcbbb2a\"},",
          "1431:     {file = \"nose-1.3.7-py3-none-any.whl\", hash = \"sha256:9ff7c6cc443f8c51994b34a667bbcf45afd6d945be7477b52e97516fd17c53ac\"},",
          "1432:     {file = \"nose-1.3.7.tar.gz\", hash = \"sha256:f1bffef9cbc82628f6e7d7b40d7e255aefaa1adb6a1b1d26c69a8b79e6208a98\"},",
          "",
          "[Added Lines]",
          "1276: version = \"3.0.2\"",
          "1281:     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8\"},",
          "1282:     {file = \"MarkupSafe-3.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9e2d922824181480953426608b81967de705c3cef4d1af983af849d7bd619158\"},",
          "1283:     {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:38a9ef736c01fccdd6600705b09dc574584b89bea478200c5fbf112a6b0d5579\"},",
          "1284:     {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bbcb445fa71794da8f178f0f6d66789a28d7319071af7a496d4d507ed566270d\"},",
          "1285:     {file = \"MarkupSafe-3.0.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:57cb5a3cf367aeb1d316576250f65edec5bb3be939e9247ae594b4bcbc317dfb\"},",
          "1286:     {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:3809ede931876f5b2ec92eef964286840ed3540dadf803dd570c3b7e13141a3b\"},",
          "1287:     {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:e07c3764494e3776c602c1e78e298937c3315ccc9043ead7e685b7f2b8d47b3c\"},",
          "1288:     {file = \"MarkupSafe-3.0.2-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:b424c77b206d63d500bcb69fa55ed8d0e6a3774056bdc4839fc9298a7edca171\"},",
          "1289:     {file = \"MarkupSafe-3.0.2-cp310-cp310-win32.whl\", hash = \"sha256:fcabf5ff6eea076f859677f5f0b6b5c1a51e70a376b0579e0eadef8db48c6b50\"},",
          "1290:     {file = \"MarkupSafe-3.0.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:6af100e168aa82a50e186c82875a5893c5597a0c1ccdb0d8b40240b1f28b969a\"},",
          "1291:     {file = \"MarkupSafe-3.0.2-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:9025b4018f3a1314059769c7bf15441064b2207cb3f065e6ea1e7359cb46db9d\"},",
          "1292:     {file = \"MarkupSafe-3.0.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:93335ca3812df2f366e80509ae119189886b0f3c2b81325d39efdb84a1e2ae93\"},",
          "1293:     {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2cb8438c3cbb25e220c2ab33bb226559e7afb3baec11c4f218ffa7308603c832\"},",
          "1294:     {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a123e330ef0853c6e822384873bef7507557d8e4a082961e1defa947aa59ba84\"},",
          "1295:     {file = \"MarkupSafe-3.0.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1e084f686b92e5b83186b07e8a17fc09e38fff551f3602b249881fec658d3eca\"},",
          "1296:     {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:d8213e09c917a951de9d09ecee036d5c7d36cb6cb7dbaece4c71a60d79fb9798\"},",
          "1297:     {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:5b02fb34468b6aaa40dfc198d813a641e3a63b98c2b05a16b9f80b7ec314185e\"},",
          "1298:     {file = \"MarkupSafe-3.0.2-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:0bff5e0ae4ef2e1ae4fdf2dfd5b76c75e5c2fa4132d05fc1b0dabcd20c7e28c4\"},",
          "1299:     {file = \"MarkupSafe-3.0.2-cp311-cp311-win32.whl\", hash = \"sha256:6c89876f41da747c8d3677a2b540fb32ef5715f97b66eeb0c6b66f5e3ef6f59d\"},",
          "1300:     {file = \"MarkupSafe-3.0.2-cp311-cp311-win_amd64.whl\", hash = \"sha256:70a87b411535ccad5ef2f1df5136506a10775d267e197e4cf531ced10537bd6b\"},",
          "1301:     {file = \"MarkupSafe-3.0.2-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:9778bd8ab0a994ebf6f84c2b949e65736d5575320a17ae8984a77fab08db94cf\"},",
          "1302:     {file = \"MarkupSafe-3.0.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225\"},",
          "1303:     {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028\"},",
          "1304:     {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8\"},",
          "1305:     {file = \"MarkupSafe-3.0.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c\"},",
          "1306:     {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557\"},",
          "1307:     {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22\"},",
          "1308:     {file = \"MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:ad10d3ded218f1039f11a75f8091880239651b52e9bb592ca27de44eed242a48\"},",
          "1309:     {file = \"MarkupSafe-3.0.2-cp312-cp312-win32.whl\", hash = \"sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30\"},",
          "1310:     {file = \"MarkupSafe-3.0.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:8e06879fc22a25ca47312fbe7c8264eb0b662f6db27cb2d3bbbc74b1df4b9b87\"},",
          "1311:     {file = \"MarkupSafe-3.0.2-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:ba9527cdd4c926ed0760bc301f6728ef34d841f405abf9d4f959c478421e4efd\"},",
          "1312:     {file = \"MarkupSafe-3.0.2-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:f8b3d067f2e40fe93e1ccdd6b2e1d16c43140e76f02fb1319a05cf2b79d99430\"},",
          "1313:     {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:569511d3b58c8791ab4c2e1285575265991e6d8f8700c7be0e88f86cb0672094\"},",
          "1314:     {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396\"},",
          "1315:     {file = \"MarkupSafe-3.0.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f3818cb119498c0678015754eba762e0d61e5b52d34c8b13d770f0719f7b1d79\"},",
          "1316:     {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:cdb82a876c47801bb54a690c5ae105a46b392ac6099881cdfb9f6e95e4014c6a\"},",
          "1317:     {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:cabc348d87e913db6ab4aa100f01b08f481097838bdddf7c7a84b7575b7309ca\"},",
          "1318:     {file = \"MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:444dcda765c8a838eaae23112db52f1efaf750daddb2d9ca300bcae1039adc5c\"},",
          "1319:     {file = \"MarkupSafe-3.0.2-cp313-cp313-win32.whl\", hash = \"sha256:bcf3e58998965654fdaff38e58584d8937aa3096ab5354d493c77d1fdd66d7a1\"},",
          "1320:     {file = \"MarkupSafe-3.0.2-cp313-cp313-win_amd64.whl\", hash = \"sha256:e6a2a455bd412959b57a172ce6328d2dd1f01cb2135efda2e4576e8a23fa3b0f\"},",
          "1321:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-macosx_10_13_universal2.whl\", hash = \"sha256:b5a6b3ada725cea8a5e634536b1b01c30bcdcd7f9c6fff4151548d5bf6b3a36c\"},",
          "1322:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:a904af0a6162c73e3edcb969eeeb53a63ceeb5d8cf642fade7d39e7963a22ddb\"},",
          "1323:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4aa4e5faecf353ed117801a068ebab7b7e09ffb6e1d5e412dc852e0da018126c\"},",
          "1324:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c0ef13eaeee5b615fb07c9a7dadb38eac06a0608b41570d8ade51c56539e509d\"},",
          "1325:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d16a81a06776313e817c951135cf7340a3e91e8c1ff2fac444cfd75fffa04afe\"},",
          "1326:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:6381026f158fdb7c72a168278597a5e3a5222e83ea18f543112b2662a9b699c5\"},",
          "1327:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:3d79d162e7be8f996986c064d1c7c817f6df3a77fe3d6859f6f9e7be4b8c213a\"},",
          "1328:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9\"},",
          "1329:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-win32.whl\", hash = \"sha256:ba8062ed2cf21c07a9e295d5b8a2a5ce678b913b45fdf68c32d95d6c1291e0b6\"},",
          "1330:     {file = \"MarkupSafe-3.0.2-cp313-cp313t-win_amd64.whl\", hash = \"sha256:e444a31f8db13eb18ada366ab3cf45fd4b31e4db1236a4448f68778c1d1a5a2f\"},",
          "1331:     {file = \"MarkupSafe-3.0.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:eaa0a10b7f72326f1372a713e73c3f739b524b3af41feb43e4921cb529f5929a\"},",
          "1332:     {file = \"MarkupSafe-3.0.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:48032821bbdf20f5799ff537c7ac3d1fba0ba032cfc06194faffa8cda8b560ff\"},",
          "1333:     {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1a9d3f5f0901fdec14d8d2f66ef7d035f2157240a433441719ac9a3fba440b13\"},",
          "1334:     {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:88b49a3b9ff31e19998750c38e030fc7bb937398b1f78cfa599aaef92d693144\"},",
          "1335:     {file = \"MarkupSafe-3.0.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cfad01eed2c2e0c01fd0ecd2ef42c492f7f93902e39a42fc9ee1692961443a29\"},",
          "1336:     {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:1225beacc926f536dc82e45f8a4d68502949dc67eea90eab715dea3a21c1b5f0\"},",
          "1337:     {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3169b1eefae027567d1ce6ee7cae382c57fe26e82775f460f0b2778beaad66c0\"},",
          "1338:     {file = \"MarkupSafe-3.0.2-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:eb7972a85c54febfb25b5c4b4f3af4dcc731994c7da0d8a0b4a6eb0640e1d178\"},",
          "1339:     {file = \"MarkupSafe-3.0.2-cp39-cp39-win32.whl\", hash = \"sha256:8c4e8c3ce11e1f92f6536ff07154f9d49677ebaaafc32db9db4620bc11ed480f\"},",
          "1340:     {file = \"MarkupSafe-3.0.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:6e296a513ca3d94054c2c881cc913116e90fd030ad1c656b3869762b754f5f8a\"},",
          "1341:     {file = \"markupsafe-3.0.2.tar.gz\", hash = \"sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0\"},",
          "1346: version = \"11.0.0\"",
          "1351:     {file = \"mitmproxy-11.0.0-py3-none-any.whl\", hash = \"sha256:0a23ececdbd32c7bf8886d55538661c593cdd3ab4bb712f2e85577a68d76211c\"},",
          "1355: aioquic = \">=1.1.0,<=1.2.0\"",
          "1356: asgiref = \">=3.2.10,<=3.8.1\"",
          "1357: Brotli = \">=1.0,<=1.1.0\"",
          "1359: cryptography = \">=42.0,<43.1\"",
          "1360: flask = \">=3.0,<=3.0.3\"",
          "1361: h11 = \">=0.11,<=0.14.0\"",
          "1362: h2 = \"4.1\"",
          "1363: hyperframe = \">=6.0,<=6.0.1\"",
          "1364: kaitaistruct = \"0.10\"",
          "1365: ldap3 = \">=2.8,<=2.9.1\"",
          "1366: mitmproxy-rs = \">=0.9.1,<0.10\"",
          "1367: msgpack = \">=1.0.0,<=1.1.0\"",
          "1368: passlib = \">=1.6.5,<=1.7.4\"",
          "1369: protobuf = \">=5.27.2,<=5.28.2\"",
          "1370: publicsuffix2 = \">=2.20190812,<=2.20191221\"",
          "1371: pydivert = {version = \">=2.0.3,<=2.1.0\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1372: pyOpenSSL = \">=22.1,<=24.2.1\"",
          "1373: pyparsing = \">=2.4.2,<=3.1.4\"",
          "1374: pyperclip = \"1.9.0\"",
          "1375: \"ruamel.yaml\" = \">=0.16,<=0.18.6\"",
          "1376: sortedcontainers = \">=2.3,<=2.4.0\"",
          "1377: tornado = \"6.4.1\"",
          "1378: typing-extensions = {version = \">=4.3,<=4.11.0\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1379: urwid = \">=2.6.14,<=2.6.15\"",
          "1380: wsproto = \">=1.0,<=1.2.0\"",
          "1381: zstandard = \">=0.15,<=0.23.0\"",
          "1384: dev = [\"build (>=0.10.0,<=1.2.2)\", \"click (>=7.0,<=8.1.7)\", \"hypothesis (>=6.104.2,<=6.112.2)\", \"mypy (>=1.10.1,<=1.11.2)\", \"pdoc (>=14.5.1,<=14.7.0)\", \"pyinstaller (==6.10.0)\", \"pyinstaller-hooks-contrib (==2024.8)\", \"pytest (>=8.2.2,<=8.3.3)\", \"pytest-asyncio (>=0.23.6,<=0.24.0)\", \"pytest-cov (==5.0.0)\", \"pytest-timeout (==2.3.1)\", \"pytest-xdist (>=3.5.0,<=3.6.1)\", \"requests (>=2.9.1,<=2.32.3)\", \"ruff (>=0.5.0,<=0.6.8)\", \"tox (>=4.15.1,<=4.21.0)\", \"types-Flask (==1.1.6)\", \"types-Werkzeug (==1.0.9)\", \"types-certifi (==2021.10.8.3)\", \"types-cryptography (==3.3.23.2)\", \"types-pyOpenSSL (>=23.3.0.0,<=24.1.0.20240722)\", \"types-requests (>=2.32.0.20240622,<=2.32.0.20240914)\", \"wheel (>=0.36.2,<=0.44.0)\"]",
          "1388: version = \"0.9.3\"",
          "1393:     {file = \"mitmproxy_macos-0.9.3-py3-none-any.whl\", hash = \"sha256:28be44bb371f356455de0ab7a9e5142fac9f38f74746903eaa1fb86f7b924c0b\"},",
          "1398: version = \"0.9.3\"",
          "1403:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:4801c25d57205ff0caeb84cef6a9327e6225213e8f68455c8674a1cb3f6db2ff\"},",
          "1404:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5fd333d03a6784fa54d3eecd976a93fceb38490c7413da66012c105466730b08\"},",
          "1405:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9c8108b53b5e0f8dff3de9d43b3225f0abbbe94138b9488ab0c773273ffd5da7\"},",
          "1406:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-win_amd64.whl\", hash = \"sha256:9536eebb43421d25a4ee6913676bc5ba483d4e7018d267f16d086910cfe81be0\"},",
          "1407:     {file = \"mitmproxy_rs-0.9.3.tar.gz\", hash = \"sha256:e54e4a61b5fb4a204a1dd37fbe2f4bc28a6e82e5229e396fc5e1aae447f939b3\"},",
          "1411: mitmproxy-macos = {version = \"0.9.3\", markers = \"sys_platform == \\\"darwin\\\"\"}",
          "1412: mitmproxy-windows = {version = \"0.9.3\", markers = \"os_name == \\\"nt\\\"\"}",
          "1416: version = \"0.9.3\"",
          "1421:     {file = \"mitmproxy_windows-0.9.3-py3-none-any.whl\", hash = \"sha256:a451ac04d2cb960c778f72a3dfb9af9d8c758e4e579c817b88f070813035d30b\"},",
          "1426: version = \"1.1.0\"",
          "1431:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7ad442d527a7e358a469faf43fda45aaf4ac3249c8310a82f0ccff9164e5dccd\"},",
          "1432:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:74bed8f63f8f14d75eec75cf3d04ad581da6b914001b474a5d3cd3372c8cc27d\"},",
          "1433:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:914571a2a5b4e7606997e169f64ce53a8b1e06f2cf2c3a7273aa106236d43dd5\"},",
          "1434:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c921af52214dcbb75e6bdf6a661b23c3e6417f00c603dd2070bccb5c3ef499f5\"},",
          "1435:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d8ce0b22b890be5d252de90d0e0d119f363012027cf256185fc3d474c44b1b9e\"},",
          "1436:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:73322a6cc57fcee3c0c57c4463d828e9428275fb85a27aa2aa1a92fdc42afd7b\"},",
          "1437:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1f3c3d21f7cf67bcf2da8e494d30a75e4cf60041d98b3f79875afb5b96f3a3f\"},",
          "1438:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:64fc9068d701233effd61b19efb1485587560b66fe57b3e50d29c5d78e7fef68\"},",
          "1439:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:42f754515e0f683f9c79210a5d1cad631ec3d06cea5172214d2176a42e67e19b\"},",
          "1440:     {file = \"msgpack-1.1.0-cp310-cp310-win32.whl\", hash = \"sha256:3df7e6b05571b3814361e8464f9304c42d2196808e0119f55d0d3e62cd5ea044\"},",
          "1441:     {file = \"msgpack-1.1.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:685ec345eefc757a7c8af44a3032734a739f8c45d1b0ac45efc5d8977aa4720f\"},",
          "1442:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3d364a55082fb2a7416f6c63ae383fbd903adb5a6cf78c5b96cc6316dc1cedc7\"},",
          "1443:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:79ec007767b9b56860e0372085f8504db5d06bd6a327a335449508bbee9648fa\"},",
          "1444:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:6ad622bf7756d5a497d5b6836e7fc3752e2dd6f4c648e24b1803f6048596f701\"},",
          "1445:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e59bca908d9ca0de3dc8684f21ebf9a690fe47b6be93236eb40b99af28b6ea6\"},",
          "1446:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5e1da8f11a3dd397f0a32c76165cf0c4eb95b31013a94f6ecc0b280c05c91b59\"},",
          "1447:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:452aff037287acb1d70a804ffd022b21fa2bb7c46bee884dbc864cc9024128a0\"},",
          "1448:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:8da4bf6d54ceed70e8861f833f83ce0814a2b72102e890cbdfe4b34764cdd66e\"},",
          "1449:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:41c991beebf175faf352fb940bf2af9ad1fb77fd25f38d9142053914947cdbf6\"},",
          "1450:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:a52a1f3a5af7ba1c9ace055b659189f6c669cf3657095b50f9602af3a3ba0fe5\"},",
          "1451:     {file = \"msgpack-1.1.0-cp311-cp311-win32.whl\", hash = \"sha256:58638690ebd0a06427c5fe1a227bb6b8b9fdc2bd07701bec13c2335c82131a88\"},",
          "1452:     {file = \"msgpack-1.1.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fd2906780f25c8ed5d7b323379f6138524ba793428db5d0e9d226d3fa6aa1788\"},",
          "1453:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d46cf9e3705ea9485687aa4001a76e44748b609d260af21c4ceea7f2212a501d\"},",
          "1454:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:5dbad74103df937e1325cc4bfeaf57713be0b4f15e1c2da43ccdd836393e2ea2\"},",
          "1455:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:58dfc47f8b102da61e8949708b3eafc3504509a5728f8b4ddef84bd9e16ad420\"},",
          "1456:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4676e5be1b472909b2ee6356ff425ebedf5142427842aa06b4dfd5117d1ca8a2\"},",
          "1457:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17fb65dd0bec285907f68b15734a993ad3fc94332b5bb21b0435846228de1f39\"},",
          "1458:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a51abd48c6d8ac89e0cfd4fe177c61481aca2d5e7ba42044fd218cfd8ea9899f\"},",
          "1459:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2137773500afa5494a61b1208619e3871f75f27b03bcfca7b3a7023284140247\"},",
          "1460:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:398b713459fea610861c8a7b62a6fec1882759f308ae0795b5413ff6a160cf3c\"},",
          "1461:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:06f5fd2f6bb2a7914922d935d3b8bb4a7fff3a9a91cfce6d06c13bc42bec975b\"},",
          "1462:     {file = \"msgpack-1.1.0-cp312-cp312-win32.whl\", hash = \"sha256:ad33e8400e4ec17ba782f7b9cf868977d867ed784a1f5f2ab46e7ba53b6e1e1b\"},",
          "1463:     {file = \"msgpack-1.1.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:115a7af8ee9e8cddc10f87636767857e7e3717b7a2e97379dc2054712693e90f\"},",
          "1464:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:071603e2f0771c45ad9bc65719291c568d4edf120b44eb36324dcb02a13bfddf\"},",
          "1465:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:0f92a83b84e7c0749e3f12821949d79485971f087604178026085f60ce109330\"},",
          "1466:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:4a1964df7b81285d00a84da4e70cb1383f2e665e0f1f2a7027e683956d04b734\"},",
          "1467:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59caf6a4ed0d164055ccff8fe31eddc0ebc07cf7326a2aaa0dbf7a4001cd823e\"},",
          "1468:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0907e1a7119b337971a689153665764adc34e89175f9a34793307d9def08e6ca\"},",
          "1469:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:65553c9b6da8166e819a6aa90ad15288599b340f91d18f60b2061f402b9a4915\"},",
          "1470:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:7a946a8992941fea80ed4beae6bff74ffd7ee129a90b4dd5cf9c476a30e9708d\"},",
          "1471:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4b51405e36e075193bc051315dbf29168d6141ae2500ba8cd80a522964e31434\"},",
          "1472:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:b4c01941fd2ff87c2a934ee6055bda4ed353a7846b8d4f341c428109e9fcde8c\"},",
          "1473:     {file = \"msgpack-1.1.0-cp313-cp313-win32.whl\", hash = \"sha256:7c9a35ce2c2573bada929e0b7b3576de647b0defbd25f5139dcdaba0ae35a4cc\"},",
          "1474:     {file = \"msgpack-1.1.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:bce7d9e614a04d0883af0b3d4d501171fbfca038f12c77fa838d9f198147a23f\"},",
          "1475:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c40ffa9a15d74e05ba1fe2681ea33b9caffd886675412612d93ab17b58ea2fec\"},",
          "1476:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f1ba6136e650898082d9d5a5217d5906d1e138024f836ff48691784bbe1adf96\"},",
          "1477:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e0856a2b7e8dcb874be44fea031d22e5b3a19121be92a1e098f46068a11b0870\"},",
          "1478:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:471e27a5787a2e3f974ba023f9e265a8c7cfd373632247deb225617e3100a3c7\"},",
          "1479:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:646afc8102935a388ffc3914b336d22d1c2d6209c773f3eb5dd4d6d3b6f8c1cb\"},",
          "1480:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:13599f8829cfbe0158f6456374e9eea9f44eee08076291771d8ae93eda56607f\"},",
          "1481:     {file = \"msgpack-1.1.0-cp38-cp38-win32.whl\", hash = \"sha256:8a84efb768fb968381e525eeeb3d92857e4985aacc39f3c47ffd00eb4509315b\"},",
          "1482:     {file = \"msgpack-1.1.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:879a7b7b0ad82481c52d3c7eb99bf6f0645dbdec5134a4bddbd16f3506947feb\"},",
          "1483:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:53258eeb7a80fc46f62fd59c876957a2d0e15e6449a9e71842b6d24419d88ca1\"},",
          "1484:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:7e7b853bbc44fb03fbdba34feb4bd414322180135e2cb5164f20ce1c9795ee48\"},",
          "1485:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f3e9b4936df53b970513eac1758f3882c88658a220b58dcc1e39606dccaaf01c\"},",
          "1486:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:46c34e99110762a76e3911fc923222472c9d681f1094096ac4102c18319e6468\"},",
          "1487:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a706d1e74dd3dea05cb54580d9bd8b2880e9264856ce5068027eed09680aa74\"},",
          "1488:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:534480ee5690ab3cbed89d4c8971a5c631b69a8c0883ecfea96c19118510c846\"},",
          "1489:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:8cf9e8c3a2153934a23ac160cc4cba0ec035f6867c8013cc6077a79823370346\"},",
          "1490:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3180065ec2abbe13a4ad37688b61b99d7f9e012a535b930e0e683ad6bc30155b\"},",
          "1491:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:c5a91481a3cc573ac8c0d9aace09345d989dc4a0202b7fcb312c88c26d4e71a8\"},",
          "1492:     {file = \"msgpack-1.1.0-cp39-cp39-win32.whl\", hash = \"sha256:f80bc7d47f76089633763f952e67f8214cb7b3ee6bfa489b3cb6a84cfac114cd\"},",
          "1493:     {file = \"msgpack-1.1.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:4d1b7ff2d6146e16e8bd665ac726a89c74163ef8cd39fa8c1087d4e52d3a2325\"},",
          "1494:     {file = \"msgpack-1.1.0.tar.gz\", hash = \"sha256:dd432ccc2c72b914e4cb77afce64aab761c1137cc698be3984eee260bcb2896e\"},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1510: [[package]]",
          "1511: name = \"peewee\"",
          "1513: description = \"a little orm\"",
          "1514: optional = false",
          "1515: python-versions = \"*\"",
          "1516: files = [",
          "1518: ]",
          "1520: [[package]]",
          "1521: name = \"protobuf\"",
          "1523: description = \"\"",
          "1524: optional = false",
          "1525: python-versions = \">=3.8\"",
          "1526: files = [",
          "1538: ]",
          "1540: [[package]]",
          "1541: name = \"psutil\"",
          "1543: description = \"Cross-platform lib for process and system monitoring in Python.\"",
          "1544: optional = false",
          "1545: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"",
          "1546: files = [",
          "1564: ]",
          "1566: [package.extras]",
          "1569: [[package]]",
          "1570: name = \"publicsuffix2\"",
          "",
          "[Removed Lines]",
          "1512: version = \"3.17.6\"",
          "1517:     {file = \"peewee-3.17.6.tar.gz\", hash = \"sha256:cea5592c6f4da1592b7cff8eaf655be6648a1f5857469e30037bf920c03fb8fb\"},",
          "1522: version = \"4.25.5\"",
          "1527:     {file = \"protobuf-4.25.5-cp310-abi3-win32.whl\", hash = \"sha256:5e61fd921603f58d2f5acb2806a929b4675f8874ff5f330b7d6f7e2e784bbcd8\"},",
          "1528:     {file = \"protobuf-4.25.5-cp310-abi3-win_amd64.whl\", hash = \"sha256:4be0571adcbe712b282a330c6e89eae24281344429ae95c6d85e79e84780f5ea\"},",
          "1529:     {file = \"protobuf-4.25.5-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:b2fde3d805354df675ea4c7c6338c1aecd254dfc9925e88c6d31a2bcb97eb173\"},",
          "1530:     {file = \"protobuf-4.25.5-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:919ad92d9b0310070f8356c24b855c98df2b8bd207ebc1c0c6fcc9ab1e007f3d\"},",
          "1531:     {file = \"protobuf-4.25.5-cp37-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:fe14e16c22be926d3abfcb500e60cab068baf10b542b8c858fa27e098123e331\"},",
          "1532:     {file = \"protobuf-4.25.5-cp38-cp38-win32.whl\", hash = \"sha256:98d8d8aa50de6a2747efd9cceba361c9034050ecce3e09136f90de37ddba66e1\"},",
          "1533:     {file = \"protobuf-4.25.5-cp38-cp38-win_amd64.whl\", hash = \"sha256:b0234dd5a03049e4ddd94b93400b67803c823cfc405689688f59b34e0742381a\"},",
          "1534:     {file = \"protobuf-4.25.5-cp39-cp39-win32.whl\", hash = \"sha256:abe32aad8561aa7cc94fc7ba4fdef646e576983edb94a73381b03c53728a626f\"},",
          "1535:     {file = \"protobuf-4.25.5-cp39-cp39-win_amd64.whl\", hash = \"sha256:7a183f592dc80aa7c8da7ad9e55091c4ffc9497b3054452d629bb85fa27c2a45\"},",
          "1536:     {file = \"protobuf-4.25.5-py3-none-any.whl\", hash = \"sha256:0aebecb809cae990f8129ada5ca273d9d670b76d9bfc9b1809f0a9c02b7dbf41\"},",
          "1537:     {file = \"protobuf-4.25.5.tar.gz\", hash = \"sha256:7f8249476b4a9473645db7f8ab42b02fe1488cbe5fb72fddd445e0665afd8584\"},",
          "1542: version = \"6.0.0\"",
          "1547:     {file = \"psutil-6.0.0-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:a021da3e881cd935e64a3d0a20983bda0bb4cf80e4f74fa9bfcb1bc5785360c6\"},",
          "1548:     {file = \"psutil-6.0.0-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:1287c2b95f1c0a364d23bc6f2ea2365a8d4d9b726a3be7294296ff7ba97c17f0\"},",
          "1549:     {file = \"psutil-6.0.0-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:a9a3dbfb4de4f18174528d87cc352d1f788b7496991cca33c6996f40c9e3c92c\"},",
          "1550:     {file = \"psutil-6.0.0-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:6ec7588fb3ddaec7344a825afe298db83fe01bfaaab39155fa84cf1c0d6b13c3\"},",
          "1551:     {file = \"psutil-6.0.0-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:1e7c870afcb7d91fdea2b37c24aeb08f98b6d67257a5cb0a8bc3ac68d0f1a68c\"},",
          "1552:     {file = \"psutil-6.0.0-cp27-none-win32.whl\", hash = \"sha256:02b69001f44cc73c1c5279d02b30a817e339ceb258ad75997325e0e6169d8b35\"},",
          "1553:     {file = \"psutil-6.0.0-cp27-none-win_amd64.whl\", hash = \"sha256:21f1fb635deccd510f69f485b87433460a603919b45e2a324ad65b0cc74f8fb1\"},",
          "1554:     {file = \"psutil-6.0.0-cp36-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:c588a7e9b1173b6e866756dde596fd4cad94f9399daf99ad8c3258b3cb2b47a0\"},",
          "1555:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6ed2440ada7ef7d0d608f20ad89a04ec47d2d3ab7190896cd62ca5fc4fe08bf0\"},",
          "1556:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5fd9a97c8e94059b0ef54a7d4baf13b405011176c3b6ff257c247cae0d560ecd\"},",
          "1557:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2e8d0054fc88153ca0544f5c4d554d42e33df2e009c4ff42284ac9ebdef4132\"},",
          "1558:     {file = \"psutil-6.0.0-cp36-cp36m-win32.whl\", hash = \"sha256:fc8c9510cde0146432bbdb433322861ee8c3efbf8589865c8bf8d21cb30c4d14\"},",
          "1559:     {file = \"psutil-6.0.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:34859b8d8f423b86e4385ff3665d3f4d94be3cdf48221fbe476e883514fdb71c\"},",
          "1560:     {file = \"psutil-6.0.0-cp37-abi3-win32.whl\", hash = \"sha256:a495580d6bae27291324fe60cea0b5a7c23fa36a7cd35035a16d93bdcf076b9d\"},",
          "1561:     {file = \"psutil-6.0.0-cp37-abi3-win_amd64.whl\", hash = \"sha256:33ea5e1c975250a720b3a6609c490db40dae5d83a4eb315170c4fe0d8b1f34b3\"},",
          "1562:     {file = \"psutil-6.0.0-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:ffe7fc9b6b36beadc8c322f84e1caff51e8703b88eee1da46d1e3a6ae11b4fd0\"},",
          "1563:     {file = \"psutil-6.0.0.tar.gz\", hash = \"sha256:8faae4f310b6d969fa26ca0545338b21f73c6b15db7c4a8d934a5482faa818f2\"},",
          "1567: test = [\"enum34\", \"ipaddress\", \"mock\", \"pywin32\", \"wmi\"]",
          "",
          "[Added Lines]",
          "1574: version = \"3.17.7\"",
          "1579:     {file = \"peewee-3.17.7.tar.gz\", hash = \"sha256:6aefc700bd530fc6ac23fa19c9c5b47041751d92985b799169c8e318e97eabaa\"},",
          "1584: version = \"5.28.2\"",
          "1589:     {file = \"protobuf-5.28.2-cp310-abi3-win32.whl\", hash = \"sha256:eeea10f3dc0ac7e6b4933d32db20662902b4ab81bf28df12218aa389e9c2102d\"},",
          "1590:     {file = \"protobuf-5.28.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:2c69461a7fcc8e24be697624c09a839976d82ae75062b11a0972e41fd2cd9132\"},",
          "1591:     {file = \"protobuf-5.28.2-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:a8b9403fc70764b08d2f593ce44f1d2920c5077bf7d311fefec999f8c40f78b7\"},",
          "1592:     {file = \"protobuf-5.28.2-cp38-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:35cfcb15f213449af7ff6198d6eb5f739c37d7e4f1c09b5d0641babf2cc0c68f\"},",
          "1593:     {file = \"protobuf-5.28.2-cp38-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:5e8a95246d581eef20471b5d5ba010d55f66740942b95ba9b872d918c459452f\"},",
          "1594:     {file = \"protobuf-5.28.2-cp38-cp38-win32.whl\", hash = \"sha256:87317e9bcda04a32f2ee82089a204d3a2f0d3c8aeed16568c7daf4756e4f1fe0\"},",
          "1595:     {file = \"protobuf-5.28.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:c0ea0123dac3399a2eeb1a1443d82b7afc9ff40241433296769f7da42d142ec3\"},",
          "1596:     {file = \"protobuf-5.28.2-cp39-cp39-win32.whl\", hash = \"sha256:ca53faf29896c526863366a52a8f4d88e69cd04ec9571ed6082fa117fac3ab36\"},",
          "1597:     {file = \"protobuf-5.28.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:8ddc60bf374785fb7cb12510b267f59067fa10087325b8e1855b898a0d81d276\"},",
          "1598:     {file = \"protobuf-5.28.2-py3-none-any.whl\", hash = \"sha256:52235802093bd8a2811abbe8bf0ab9c5f54cca0a751fdd3f6ac2a21438bffece\"},",
          "1599:     {file = \"protobuf-5.28.2.tar.gz\", hash = \"sha256:59379674ff119717404f7454647913787034f03fe7049cbef1d74a97bb4593f0\"},",
          "1604: version = \"6.1.0\"",
          "1609:     {file = \"psutil-6.1.0-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:ff34df86226c0227c52f38b919213157588a678d049688eded74c76c8ba4a5d0\"},",
          "1610:     {file = \"psutil-6.1.0-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:c0e0c00aa18ca2d3b2b991643b799a15fc8f0563d2ebb6040f64ce8dc027b942\"},",
          "1611:     {file = \"psutil-6.1.0-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:000d1d1ebd634b4efb383f4034437384e44a6d455260aaee2eca1e9c1b55f047\"},",
          "1612:     {file = \"psutil-6.1.0-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:5cd2bcdc75b452ba2e10f0e8ecc0b57b827dd5d7aaffbc6821b2a9a242823a76\"},",
          "1613:     {file = \"psutil-6.1.0-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:045f00a43c737f960d273a83973b2511430d61f283a44c96bf13a6e829ba8fdc\"},",
          "1614:     {file = \"psutil-6.1.0-cp27-none-win32.whl\", hash = \"sha256:9118f27452b70bb1d9ab3198c1f626c2499384935aaf55388211ad982611407e\"},",
          "1615:     {file = \"psutil-6.1.0-cp27-none-win_amd64.whl\", hash = \"sha256:a8506f6119cff7015678e2bce904a4da21025cc70ad283a53b099e7620061d85\"},",
          "1616:     {file = \"psutil-6.1.0-cp36-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:6e2dcd475ce8b80522e51d923d10c7871e45f20918e027ab682f94f1c6351688\"},",
          "1617:     {file = \"psutil-6.1.0-cp36-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:0895b8414afafc526712c498bd9de2b063deaac4021a3b3c34566283464aff8e\"},",
          "1618:     {file = \"psutil-6.1.0-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:9dcbfce5d89f1d1f2546a2090f4fcf87c7f669d1d90aacb7d7582addece9fb38\"},",
          "1619:     {file = \"psutil-6.1.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:498c6979f9c6637ebc3a73b3f87f9eb1ec24e1ce53a7c5173b8508981614a90b\"},",
          "1620:     {file = \"psutil-6.1.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d905186d647b16755a800e7263d43df08b790d709d575105d419f8b6ef65423a\"},",
          "1621:     {file = \"psutil-6.1.0-cp36-cp36m-win32.whl\", hash = \"sha256:6d3fbbc8d23fcdcb500d2c9f94e07b1342df8ed71b948a2649b5cb060a7c94ca\"},",
          "1622:     {file = \"psutil-6.1.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:1209036fbd0421afde505a4879dee3b2fd7b1e14fee81c0069807adcbbcca747\"},",
          "1623:     {file = \"psutil-6.1.0-cp37-abi3-win32.whl\", hash = \"sha256:1ad45a1f5d0b608253b11508f80940985d1d0c8f6111b5cb637533a0e6ddc13e\"},",
          "1624:     {file = \"psutil-6.1.0-cp37-abi3-win_amd64.whl\", hash = \"sha256:a8fb3752b491d246034fa4d279ff076501588ce8cbcdbb62c32fd7a377d996be\"},",
          "1625:     {file = \"psutil-6.1.0.tar.gz\", hash = \"sha256:353815f59a7f64cdaca1c0307ee13558a0512f6db064e92fe833784f08539c7a\"},",
          "1629: dev = [\"black\", \"check-manifest\", \"coverage\", \"packaging\", \"pylint\", \"pyperf\", \"pypinfo\", \"pytest-cov\", \"requests\", \"rstcheck\", \"ruff\", \"sphinx\", \"sphinx_rtd_theme\", \"toml-sort\", \"twine\", \"virtualenv\", \"wheel\"]",
          "1630: test = [\"pytest\", \"pytest-xdist\", \"setuptools\"]",
          "1632: [[package]]",
          "1633: name = \"psycopg2-binary\"",
          "1634: version = \"2.9.10\"",
          "1635: description = \"psycopg2 - Python-PostgreSQL Database Adapter\"",
          "1636: optional = false",
          "1637: python-versions = \">=3.8\"",
          "1638: files = [",
          "1639:     {file = \"psycopg2-binary-2.9.10.tar.gz\", hash = \"sha256:4b3df0e6990aa98acda57d983942eff13d824135fe2250e6522edaa782a06de2\"},",
          "1640:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-macosx_12_0_x86_64.whl\", hash = \"sha256:0ea8e3d0ae83564f2fc554955d327fa081d065c8ca5cc6d2abb643e2c9c1200f\"},",
          "1641:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-macosx_14_0_arm64.whl\", hash = \"sha256:3e9c76f0ac6f92ecfc79516a8034a544926430f7b080ec5a0537bca389ee0906\"},",
          "1642:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2ad26b467a405c798aaa1458ba09d7e2b6e5f96b1ce0ac15d82fd9f95dc38a92\"},",
          "1643:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:270934a475a0e4b6925b5f804e3809dd5f90f8613621d062848dd82f9cd62007\"},",
          "1644:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:48b338f08d93e7be4ab2b5f1dbe69dc5e9ef07170fe1f86514422076d9c010d0\"},",
          "1645:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7f4152f8f76d2023aac16285576a9ecd2b11a9895373a1f10fd9db54b3ff06b4\"},",
          "1646:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:32581b3020c72d7a421009ee1c6bf4a131ef5f0a968fab2e2de0c9d2bb4577f1\"},",
          "1647:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:2ce3e21dc3437b1d960521eca599d57408a695a0d3c26797ea0f72e834c7ffe5\"},",
          "1648:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:e984839e75e0b60cfe75e351db53d6db750b00de45644c5d1f7ee5d1f34a1ce5\"},",
          "1649:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:3c4745a90b78e51d9ba06e2088a2fe0c693ae19cc8cb051ccda44e8df8a6eb53\"},",
          "1650:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-win32.whl\", hash = \"sha256:e5720a5d25e3b99cd0dc5c8a440570469ff82659bb09431c1439b92caf184d3b\"},",
          "1651:     {file = \"psycopg2_binary-2.9.10-cp310-cp310-win_amd64.whl\", hash = \"sha256:3c18f74eb4386bf35e92ab2354a12c17e5eb4d9798e4c0ad3a00783eae7cd9f1\"},",
          "1652:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-macosx_12_0_x86_64.whl\", hash = \"sha256:04392983d0bb89a8717772a193cfaac58871321e3ec69514e1c4e0d4957b5aff\"},",
          "1653:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-macosx_14_0_arm64.whl\", hash = \"sha256:1a6784f0ce3fec4edc64e985865c17778514325074adf5ad8f80636cd029ef7c\"},",
          "1654:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b5f86c56eeb91dc3135b3fd8a95dc7ae14c538a2f3ad77a19645cf55bab1799c\"},",
          "1655:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2b3d2491d4d78b6b14f76881905c7a8a8abcf974aad4a8a0b065273a0ed7a2cb\"},",
          "1656:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2286791ececda3a723d1910441c793be44625d86d1a4e79942751197f4d30341\"},",
          "1657:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:512d29bb12608891e349af6a0cccedce51677725a921c07dba6342beaf576f9a\"},",
          "1658:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:5a507320c58903967ef7384355a4da7ff3f28132d679aeb23572753cbf2ec10b\"},",
          "1659:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:6d4fa1079cab9018f4d0bd2db307beaa612b0d13ba73b5c6304b9fe2fb441ff7\"},",
          "1660:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:851485a42dbb0bdc1edcdabdb8557c09c9655dfa2ca0460ff210522e073e319e\"},",
          "1661:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:35958ec9e46432d9076286dda67942ed6d968b9c3a6a2fd62b48939d1d78bf68\"},",
          "1662:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-win32.whl\", hash = \"sha256:ecced182e935529727401b24d76634a357c71c9275b356efafd8a2a91ec07392\"},",
          "1663:     {file = \"psycopg2_binary-2.9.10-cp311-cp311-win_amd64.whl\", hash = \"sha256:ee0e8c683a7ff25d23b55b11161c2663d4b099770f6085ff0a20d4505778d6b4\"},",
          "1664:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-macosx_12_0_x86_64.whl\", hash = \"sha256:880845dfe1f85d9d5f7c412efea7a08946a46894537e4e5d091732eb1d34d9a0\"},",
          "1665:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-macosx_14_0_arm64.whl\", hash = \"sha256:9440fa522a79356aaa482aa4ba500b65f28e5d0e63b801abf6aa152a29bd842a\"},",
          "1666:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e3923c1d9870c49a2d44f795df0c889a22380d36ef92440ff618ec315757e539\"},",
          "1667:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7b2c956c028ea5de47ff3a8d6b3cc3330ab45cf0b7c3da35a2d6ff8420896526\"},",
          "1668:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f758ed67cab30b9a8d2833609513ce4d3bd027641673d4ebc9c067e4d208eec1\"},",
          "1669:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8cd9b4f2cfab88ed4a9106192de509464b75a906462fb846b936eabe45c2063e\"},",
          "1670:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6dc08420625b5a20b53551c50deae6e231e6371194fa0651dbe0fb206452ae1f\"},",
          "1671:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:d7cd730dfa7c36dbe8724426bf5612798734bff2d3c3857f36f2733f5bfc7c00\"},",
          "1672:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:155e69561d54d02b3c3209545fb08938e27889ff5a10c19de8d23eb5a41be8a5\"},",
          "1673:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:c3cc28a6fd5a4a26224007712e79b81dbaee2ffb90ff406256158ec4d7b52b47\"},",
          "1674:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-win32.whl\", hash = \"sha256:ec8a77f521a17506a24a5f626cb2aee7850f9b69a0afe704586f63a464f3cd64\"},",
          "1675:     {file = \"psycopg2_binary-2.9.10-cp312-cp312-win_amd64.whl\", hash = \"sha256:18c5ee682b9c6dd3696dad6e54cc7ff3a1a9020df6a5c0f861ef8bfd338c3ca0\"},",
          "1676:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-macosx_12_0_x86_64.whl\", hash = \"sha256:26540d4a9a4e2b096f1ff9cce51253d0504dca5a85872c7f7be23be5a53eb18d\"},",
          "1677:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-macosx_14_0_arm64.whl\", hash = \"sha256:e217ce4d37667df0bc1c397fdcd8de5e81018ef305aed9415c3b093faaeb10fb\"},",
          "1678:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:245159e7ab20a71d989da00f280ca57da7641fa2cdcf71749c193cea540a74f7\"},",
          "1679:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3c4ded1a24b20021ebe677b7b08ad10bf09aac197d6943bfe6fec70ac4e4690d\"},",
          "1680:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3abb691ff9e57d4a93355f60d4f4c1dd2d68326c968e7db17ea96df3c023ef73\"},",
          "1681:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8608c078134f0b3cbd9f89b34bd60a943b23fd33cc5f065e8d5f840061bd0673\"},",
          "1682:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:230eeae2d71594103cd5b93fd29d1ace6420d0b86f4778739cb1a5a32f607d1f\"},",
          "1683:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:bb89f0a835bcfc1d42ccd5f41f04870c1b936d8507c6df12b7737febc40f0909\"},",
          "1684:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:f0c2d907a1e102526dd2986df638343388b94c33860ff3bbe1384130828714b1\"},",
          "1685:     {file = \"psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:f8157bed2f51db683f31306aa497311b560f2265998122abe1dce6428bd86567\"},",
          "1686:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-macosx_12_0_x86_64.whl\", hash = \"sha256:eb09aa7f9cecb45027683bb55aebaaf45a0df8bf6de68801a6afdc7947bb09d4\"},",
          "1687:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b73d6d7f0ccdad7bc43e6d34273f70d587ef62f824d7261c4ae9b8b1b6af90e8\"},",
          "1688:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ce5ab4bf46a211a8e924d307c1b1fcda82368586a19d0a24f8ae166f5c784864\"},",
          "1689:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:056470c3dc57904bbf63d6f534988bafc4e970ffd50f6271fc4ee7daad9498a5\"},",
          "1690:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:73aa0e31fa4bb82578f3a6c74a73c273367727de397a7a0f07bd83cbea696baa\"},",
          "1691:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:8de718c0e1c4b982a54b41779667242bc630b2197948405b7bd8ce16bcecac92\"},",
          "1692:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:5c370b1e4975df846b0277b4deba86419ca77dbc25047f535b0bb03d1a544d44\"},",
          "1693:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:ffe8ed017e4ed70f68b7b371d84b7d4a790368db9203dfc2d222febd3a9c8863\"},",
          "1694:     {file = \"psycopg2_binary-2.9.10-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:8aecc5e80c63f7459a1a2ab2c64df952051df196294d9f739933a9f6687e86b3\"},",
          "1695:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-macosx_12_0_x86_64.whl\", hash = \"sha256:7a813c8bdbaaaab1f078014b9b0b13f5de757e2b5d9be6403639b298a04d218b\"},",
          "1696:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d00924255d7fc916ef66e4bf22f354a940c67179ad3fd7067d7a0a9c84d2fbfc\"},",
          "1697:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7559bce4b505762d737172556a4e6ea8a9998ecac1e39b5233465093e8cee697\"},",
          "1698:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:e8b58f0a96e7a1e341fc894f62c1177a7c83febebb5ff9123b579418fdc8a481\"},",
          "1699:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6b269105e59ac96aba877c1707c600ae55711d9dcd3fc4b5012e4af68e30c648\"},",
          "1700:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:79625966e176dc97ddabc142351e0409e28acf4660b88d1cf6adb876d20c490d\"},",
          "1701:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:8aabf1c1a04584c168984ac678a668094d831f152859d06e055288fa515e4d30\"},",
          "1702:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:19721ac03892001ee8fdd11507e6a2e01f4e37014def96379411ca99d78aeb2c\"},",
          "1703:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:7f5d859928e635fa3ce3477704acee0f667b3a3d3e4bb109f2b18d4005f38287\"},",
          "1704:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-win32.whl\", hash = \"sha256:3216ccf953b3f267691c90c6fe742e45d890d8272326b4a8b20850a03d05b7b8\"},",
          "1705:     {file = \"psycopg2_binary-2.9.10-cp39-cp39-win_amd64.whl\", hash = \"sha256:30e34c4e97964805f715206c7b789d54a78b70f3ff19fbe590104b71c45600e5\"},",
          "1706: ]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1684: [[package]]",
          "1685: name = \"pyopenssl\"",
          "1687: description = \"Python wrapper module around the OpenSSL library\"",
          "1688: optional = false",
          "1689: python-versions = \">=3.7\"",
          "1690: files = [",
          "1693: ]",
          "1695: [package.dependencies]",
          "1698: [package.extras]",
          "1699: docs = [\"sphinx (!=5.2.0,!=5.2.0.post0,!=7.2.5)\", \"sphinx-rtd-theme\"]",
          "1702: [[package]]",
          "1703: name = \"pyparsing\"",
          "",
          "[Removed Lines]",
          "1686: version = \"23.3.0\"",
          "1691:     {file = \"pyOpenSSL-23.3.0-py3-none-any.whl\", hash = \"sha256:6756834481d9ed5470f4a9393455154bc92fe7a64b7bc6ee2c804e78c52099b2\"},",
          "1692:     {file = \"pyOpenSSL-23.3.0.tar.gz\", hash = \"sha256:6b2cba5cc46e822750ec3e5a81ee12819850b11303630d575e98108a079c2b12\"},",
          "1696: cryptography = \">=41.0.5,<42\"",
          "1700: test = [\"flaky\", \"pretend\", \"pytest (>=3.0.1)\"]",
          "",
          "[Added Lines]",
          "1825: version = \"24.2.1\"",
          "1830:     {file = \"pyOpenSSL-24.2.1-py3-none-any.whl\", hash = \"sha256:967d5719b12b243588573f39b0c677637145c7a1ffedcd495a487e58177fbb8d\"},",
          "1831:     {file = \"pyopenssl-24.2.1.tar.gz\", hash = \"sha256:4247f0dbe3748d560dcbb2ff3ea01af0f9a1a001ef5f7c4c647956ed8cbf0e95\"},",
          "1835: cryptography = \">=41.0.5,<44\"",
          "1839: test = [\"pretend\", \"pytest (>=3.0.1)\", \"pytest-rerunfailures\"]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1716: [[package]]",
          "1717: name = \"pyperclip\"",
          "1719: description = \"A cross-platform clipboard module for Python. (Only handles plain text for now.)\"",
          "1720: optional = false",
          "1721: python-versions = \"*\"",
          "1722: files = [",
          "1724: ]",
          "1726: [[package]]",
          "",
          "[Removed Lines]",
          "1718: version = \"1.8.2\"",
          "1723:     {file = \"pyperclip-1.8.2.tar.gz\", hash = \"sha256:105254a8b04934f0bc84e9c24eb360a591aaf6535c9def5f29d92af107a9bf57\"},",
          "",
          "[Added Lines]",
          "1857: version = \"1.9.0\"",
          "1862:     {file = \"pyperclip-1.9.0.tar.gz\", hash = \"sha256:b7de0142ddc81bfc5c7507eea19da920b92252b548b96186caf94a5e2527d310\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1933: [[package]]",
          "1934: name = \"ruamel-yaml-clib\"",
          "1936: description = \"C version of reader, parser and emitter for ruamel.yaml derived from libyaml\"",
          "1937: optional = false",
          "1939: files = [",
          "1990: ]",
          "1992: [[package]]",
          "",
          "[Removed Lines]",
          "1935: version = \"0.2.8\"",
          "1938: python-versions = \">=3.6\"",
          "1940:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:b42169467c42b692c19cf539c38d4602069d8c1505e97b86387fcf7afb766e1d\"},",
          "1941:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-macosx_13_0_arm64.whl\", hash = \"sha256:07238db9cbdf8fc1e9de2489a4f68474e70dffcb32232db7c08fa61ca0c7c462\"},",
          "1942:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:fff3573c2db359f091e1589c3d7c5fc2f86f5bdb6f24252c2d8e539d4e45f412\"},",
          "1943:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-manylinux_2_24_aarch64.whl\", hash = \"sha256:aa2267c6a303eb483de8d02db2871afb5c5fc15618d894300b88958f729ad74f\"},",
          "1944:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:840f0c7f194986a63d2c2465ca63af8ccbbc90ab1c6001b1978f05119b5e7334\"},",
          "1945:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:024cfe1fc7c7f4e1aff4a81e718109e13409767e4f871443cbff3dba3578203d\"},",
          "1946:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-win32.whl\", hash = \"sha256:c69212f63169ec1cfc9bb44723bf2917cbbd8f6191a00ef3410f5a7fe300722d\"},",
          "1947:     {file = \"ruamel.yaml.clib-0.2.8-cp310-cp310-win_amd64.whl\", hash = \"sha256:cabddb8d8ead485e255fe80429f833172b4cadf99274db39abc080e068cbcc31\"},",
          "1948:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:bef08cd86169d9eafb3ccb0a39edb11d8e25f3dae2b28f5c52fd997521133069\"},",
          "1949:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-macosx_13_0_arm64.whl\", hash = \"sha256:b16420e621d26fdfa949a8b4b47ade8810c56002f5389970db4ddda51dbff248\"},",
          "1950:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:25c515e350e5b739842fc3228d662413ef28f295791af5e5110b543cf0b57d9b\"},",
          "1951:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-manylinux_2_24_aarch64.whl\", hash = \"sha256:1707814f0d9791df063f8c19bb51b0d1278b8e9a2353abbb676c2f685dee6afe\"},",
          "1952:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:46d378daaac94f454b3a0e3d8d78cafd78a026b1d71443f4966c696b48a6d899\"},",
          "1953:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:09b055c05697b38ecacb7ac50bdab2240bfca1a0c4872b0fd309bb07dc9aa3a9\"},",
          "1954:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-win32.whl\", hash = \"sha256:53a300ed9cea38cf5a2a9b069058137c2ca1ce658a874b79baceb8f892f915a7\"},",
          "1955:     {file = \"ruamel.yaml.clib-0.2.8-cp311-cp311-win_amd64.whl\", hash = \"sha256:c2a72e9109ea74e511e29032f3b670835f8a59bbdc9ce692c5b4ed91ccf1eedb\"},",
          "1956:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:ebc06178e8821efc9692ea7544aa5644217358490145629914d8020042c24aa1\"},",
          "1957:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-macosx_13_0_arm64.whl\", hash = \"sha256:edaef1c1200c4b4cb914583150dcaa3bc30e592e907c01117c08b13a07255ec2\"},",
          "1958:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:d176b57452ab5b7028ac47e7b3cf644bcfdc8cacfecf7e71759f7f51a59e5c92\"},",
          "1959:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-manylinux_2_24_aarch64.whl\", hash = \"sha256:1dc67314e7e1086c9fdf2680b7b6c2be1c0d8e3a8279f2e993ca2a7545fecf62\"},",
          "1960:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:3213ece08ea033eb159ac52ae052a4899b56ecc124bb80020d9bbceeb50258e9\"},",
          "1961:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:aab7fd643f71d7946f2ee58cc88c9b7bfc97debd71dcc93e03e2d174628e7e2d\"},",
          "1962:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-win32.whl\", hash = \"sha256:5c365d91c88390c8d0a8545df0b5857172824b1c604e867161e6b3d59a827eaa\"},",
          "1963:     {file = \"ruamel.yaml.clib-0.2.8-cp312-cp312-win_amd64.whl\", hash = \"sha256:1758ce7d8e1a29d23de54a16ae867abd370f01b5a69e1a3ba75223eaa3ca1a1b\"},",
          "1964:     {file = \"ruamel.yaml.clib-0.2.8-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:a5aa27bad2bb83670b71683aae140a1f52b0857a2deff56ad3f6c13a017a26ed\"},",
          "1965:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:c58ecd827313af6864893e7af0a3bb85fd529f862b6adbefe14643947cfe2942\"},",
          "1966:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-macosx_12_0_arm64.whl\", hash = \"sha256:f481f16baec5290e45aebdc2a5168ebc6d35189ae6fea7a58787613a25f6e875\"},",
          "1967:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-manylinux_2_24_aarch64.whl\", hash = \"sha256:77159f5d5b5c14f7c34073862a6b7d34944075d9f93e681638f6d753606c6ce6\"},",
          "1968:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:7f67a1ee819dc4562d444bbafb135832b0b909f81cc90f7aa00260968c9ca1b3\"},",
          "1969:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:4ecbf9c3e19f9562c7fdd462e8d18dd902a47ca046a2e64dba80699f0b6c09b7\"},",
          "1970:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:87ea5ff66d8064301a154b3933ae406b0863402a799b16e4a1d24d9fbbcbe0d3\"},",
          "1971:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-win32.whl\", hash = \"sha256:75e1ed13e1f9de23c5607fe6bd1aeaae21e523b32d83bb33918245361e9cc51b\"},",
          "1972:     {file = \"ruamel.yaml.clib-0.2.8-cp37-cp37m-win_amd64.whl\", hash = \"sha256:3f215c5daf6a9d7bbed4a0a4f760f3113b10e82ff4c5c44bec20a68c8014f675\"},",
          "1973:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:1b617618914cb00bf5c34d4357c37aa15183fa229b24767259657746c9077615\"},",
          "1974:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-macosx_12_0_arm64.whl\", hash = \"sha256:a6a9ffd280b71ad062eae53ac1659ad86a17f59a0fdc7699fd9be40525153337\"},",
          "1975:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-manylinux_2_24_aarch64.whl\", hash = \"sha256:305889baa4043a09e5b76f8e2a51d4ffba44259f6b4c72dec8ca56207d9c6fe1\"},",
          "1976:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:700e4ebb569e59e16a976857c8798aee258dceac7c7d6b50cab63e080058df91\"},",
          "1977:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:e2b4c44b60eadec492926a7270abb100ef9f72798e18743939bdbf037aab8c28\"},",
          "1978:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:e79e5db08739731b0ce4850bed599235d601701d5694c36570a99a0c5ca41a9d\"},",
          "1979:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-win32.whl\", hash = \"sha256:955eae71ac26c1ab35924203fda6220f84dce57d6d7884f189743e2abe3a9fbe\"},",
          "1980:     {file = \"ruamel.yaml.clib-0.2.8-cp38-cp38-win_amd64.whl\", hash = \"sha256:56f4252222c067b4ce51ae12cbac231bce32aee1d33fbfc9d17e5b8d6966c312\"},",
          "1981:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:03d1162b6d1df1caa3a4bd27aa51ce17c9afc2046c31b0ad60a0a96ec22f8001\"},",
          "1982:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-macosx_12_0_arm64.whl\", hash = \"sha256:bba64af9fa9cebe325a62fa398760f5c7206b215201b0ec825005f1b18b9bccf\"},",
          "1983:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-manylinux_2_24_aarch64.whl\", hash = \"sha256:a1a45e0bb052edf6a1d3a93baef85319733a888363938e1fc9924cb00c8df24c\"},",
          "1984:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:da09ad1c359a728e112d60116f626cc9f29730ff3e0e7db72b9a2dbc2e4beed5\"},",
          "1985:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:184565012b60405d93838167f425713180b949e9d8dd0bbc7b49f074407c5a8b\"},",
          "1986:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:a75879bacf2c987c003368cf14bed0ffe99e8e85acfa6c0bfffc21a090f16880\"},",
          "1987:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-win32.whl\", hash = \"sha256:84b554931e932c46f94ab306913ad7e11bba988104c5cff26d90d03f68258cd5\"},",
          "1988:     {file = \"ruamel.yaml.clib-0.2.8-cp39-cp39-win_amd64.whl\", hash = \"sha256:25ac8c08322002b06fa1d49d1646181f0b2c72f5cbc15a85e80b4c30a544bb15\"},",
          "1989:     {file = \"ruamel.yaml.clib-0.2.8.tar.gz\", hash = \"sha256:beb2e0404003de9a4cab9753a8805a8fe9320ee6673136ed7f04255fe60bb512\"},",
          "",
          "[Added Lines]",
          "2074: version = \"0.2.12\"",
          "2077: python-versions = \">=3.9\"",
          "2079:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-macosx_13_0_arm64.whl\", hash = \"sha256:11f891336688faf5156a36293a9c362bdc7c88f03a8a027c2c1d8e0bcde998e5\"},",
          "2080:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-manylinux2014_aarch64.whl\", hash = \"sha256:a606ef75a60ecf3d924613892cc603b154178ee25abb3055db5062da811fd969\"},",
          "2081:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fd5415dded15c3822597455bc02bcd66e81ef8b7a48cb71a33628fc9fdde39df\"},",
          "2082:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f66efbc1caa63c088dead1c4170d148eabc9b80d95fb75b6c92ac0aad2437d76\"},",
          "2083:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:22353049ba4181685023b25b5b51a574bce33e7f51c759371a7422dcae5402a6\"},",
          "2084:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:932205970b9f9991b34f55136be327501903f7c66830e9760a8ffb15b07f05cd\"},",
          "2085:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-win32.whl\", hash = \"sha256:3eac5a91891ceb88138c113f9db04f3cebdae277f5d44eaa3651a4f573e6a5da\"},",
          "2086:     {file = \"ruamel.yaml.clib-0.2.12-cp310-cp310-win_amd64.whl\", hash = \"sha256:ab007f2f5a87bd08ab1499bdf96f3d5c6ad4dcfa364884cb4549aa0154b13a28\"},",
          "2087:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-macosx_13_0_arm64.whl\", hash = \"sha256:4a6679521a58256a90b0d89e03992c15144c5f3858f40d7c18886023d7943db6\"},",
          "2088:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-manylinux2014_aarch64.whl\", hash = \"sha256:d84318609196d6bd6da0edfa25cedfbabd8dbde5140a0a23af29ad4b8f91fb1e\"},",
          "2089:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bb43a269eb827806502c7c8efb7ae7e9e9d0573257a46e8e952f4d4caba4f31e\"},",
          "2090:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:811ea1594b8a0fb466172c384267a4e5e367298af6b228931f273b111f17ef52\"},",
          "2091:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:cf12567a7b565cbf65d438dec6cfbe2917d3c1bdddfce84a9930b7d35ea59642\"},",
          "2092:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:7dd5adc8b930b12c8fc5b99e2d535a09889941aa0d0bd06f4749e9a9397c71d2\"},",
          "2093:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-win32.whl\", hash = \"sha256:bd0a08f0bab19093c54e18a14a10b4322e1eacc5217056f3c063bd2f59853ce4\"},",
          "2094:     {file = \"ruamel.yaml.clib-0.2.12-cp311-cp311-win_amd64.whl\", hash = \"sha256:a274fb2cb086c7a3dea4322ec27f4cb5cc4b6298adb583ab0e211a4682f241eb\"},",
          "2095:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-macosx_14_0_arm64.whl\", hash = \"sha256:20b0f8dc160ba83b6dcc0e256846e1a02d044e13f7ea74a3d1d56ede4e48c632\"},",
          "2096:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-manylinux2014_aarch64.whl\", hash = \"sha256:943f32bc9dedb3abff9879edc134901df92cfce2c3d5c9348f172f62eb2d771d\"},",
          "2097:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:95c3829bb364fdb8e0332c9931ecf57d9be3519241323c5274bd82f709cebc0c\"},",
          "2098:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:749c16fcc4a2b09f28843cda5a193e0283e47454b63ec4b81eaa2242f50e4ccd\"},",
          "2099:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:bf165fef1f223beae7333275156ab2022cffe255dcc51c27f066b4370da81e31\"},",
          "2100:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:32621c177bbf782ca5a18ba4d7af0f1082a3f6e517ac2a18b3974d4edf349680\"},",
          "2101:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-win32.whl\", hash = \"sha256:e8c4ebfcfd57177b572e2040777b8abc537cdef58a2120e830124946aa9b42c5\"},",
          "2102:     {file = \"ruamel.yaml.clib-0.2.12-cp312-cp312-win_amd64.whl\", hash = \"sha256:0467c5965282c62203273b838ae77c0d29d7638c8a4e3a1c8bdd3602c10904e4\"},",
          "2103:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-macosx_14_0_arm64.whl\", hash = \"sha256:4c8c5d82f50bb53986a5e02d1b3092b03622c02c2eb78e29bec33fd9593bae1a\"},",
          "2104:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-manylinux2014_aarch64.whl\", hash = \"sha256:e7e3736715fbf53e9be2a79eb4db68e4ed857017344d697e8b9749444ae57475\"},",
          "2105:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0b7e75b4965e1d4690e93021adfcecccbca7d61c7bddd8e22406ef2ff20d74ef\"},",
          "2106:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:96777d473c05ee3e5e3c3e999f5d23c6f4ec5b0c38c098b3a5229085f74236c6\"},",
          "2107:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-musllinux_1_1_i686.whl\", hash = \"sha256:3bc2a80e6420ca8b7d3590791e2dfc709c88ab9152c00eeb511c9875ce5778bf\"},",
          "2108:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:e188d2699864c11c36cdfdada94d781fd5d6b0071cd9c427bceb08ad3d7c70e1\"},",
          "2109:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-win32.whl\", hash = \"sha256:6442cb36270b3afb1b4951f060eccca1ce49f3d087ca1ca4563a6eb479cb3de6\"},",
          "2110:     {file = \"ruamel.yaml.clib-0.2.12-cp313-cp313-win_amd64.whl\", hash = \"sha256:e5b8daf27af0b90da7bb903a876477a9e6d7270be6146906b276605997c7e9a3\"},",
          "2111:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-macosx_12_0_arm64.whl\", hash = \"sha256:fc4b630cd3fa2cf7fce38afa91d7cfe844a9f75d7f0f36393fa98815e911d987\"},",
          "2112:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:bc5f1e1c28e966d61d2519f2a3d451ba989f9ea0f2307de7bc45baa526de9e45\"},",
          "2113:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5a0e060aace4c24dcaf71023bbd7d42674e3b230f7e7b97317baf1e953e5b519\"},",
          "2114:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e2f1c3765db32be59d18ab3953f43ab62a761327aafc1594a2a1fbe038b8b8a7\"},",
          "2115:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:d85252669dc32f98ebcd5d36768f5d4faeaeaa2d655ac0473be490ecdae3c285\"},",
          "2116:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:e143ada795c341b56de9418c58d028989093ee611aa27ffb9b7f609c00d813ed\"},",
          "2117:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-win32.whl\", hash = \"sha256:beffaed67936fbbeffd10966a4eb53c402fafd3d6833770516bf7314bc6ffa12\"},",
          "2118:     {file = \"ruamel.yaml.clib-0.2.12-cp39-cp39-win_amd64.whl\", hash = \"sha256:040ae85536960525ea62868b642bdb0c2cc6021c9f9d507810c0c604e66f5a7b\"},",
          "2119:     {file = \"ruamel.yaml.clib-0.2.12.tar.gz\", hash = \"sha256:6c8fbb13ec503f99a91901ab46e0b07ae7941cd527393187039aec586fdfd36f\"},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2028: [[package]]",
          "2029: name = \"service-identity\"",
          "2031: description = \"Service identity verification for pyOpenSSL & cryptography.\"",
          "2032: optional = false",
          "2033: python-versions = \">=3.8\"",
          "2034: files = [",
          "2037: ]",
          "2039: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2030: version = \"24.1.0\"",
          "2035:     {file = \"service_identity-24.1.0-py3-none-any.whl\", hash = \"sha256:a28caf8130c8a5c1c7a6f5293faaf239bbfb7751e4862436920ee6f2616f568a\"},",
          "2036:     {file = \"service_identity-24.1.0.tar.gz\", hash = \"sha256:6829c9d62fb832c2e1c435629b0a8c476e1929881f28bee4d20bc24161009221\"},",
          "",
          "[Added Lines]",
          "2160: version = \"24.2.0\"",
          "2165:     {file = \"service_identity-24.2.0-py3-none-any.whl\", hash = \"sha256:6b047fbd8a84fd0bb0d55ebce4031e400562b9196e1e0d3e0fe2b8a59f6d4a85\"},",
          "2166:     {file = \"service_identity-24.2.0.tar.gz\", hash = \"sha256:b8683ba13f0d39c6cd5d625d2c5f65421d6d707b013b375c355751557cbe8e09\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2043: pyasn1-modules = \"*\"",
          "2045: [package.extras]",
          "2047: docs = [\"furo\", \"myst-parser\", \"pyopenssl\", \"sphinx\", \"sphinx-notfound-page\"]",
          "2048: idna = [\"idna\"]",
          "2049: mypy = [\"idna\", \"mypy\", \"types-pyopenssl\"]",
          "",
          "[Removed Lines]",
          "2046: dev = [\"pyopenssl\", \"service-identity[idna,mypy,tests]\"]",
          "",
          "[Added Lines]",
          "2176: dev = [\"coverage[toml] (>=5.0.2)\", \"idna\", \"mypy\", \"pyopenssl\", \"pytest\", \"types-pyopenssl\"]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2311: [[package]]",
          "2312: name = \"typing-extensions\"",
          "2314: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "2315: optional = false",
          "2316: python-versions = \">=3.8\"",
          "2317: files = [",
          "2320: ]",
          "2322: [[package]]",
          "",
          "[Removed Lines]",
          "2313: version = \"4.12.2\"",
          "2318:     {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},",
          "2319:     {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},",
          "",
          "[Added Lines]",
          "2443: version = \"4.11.0\"",
          "2448:     {file = \"typing_extensions-4.11.0-py3-none-any.whl\", hash = \"sha256:c1f94d72897edaf4ce775bb7558d5b79d8126906a14ea5ed1635921406c0387a\"},",
          "2449:     {file = \"typing_extensions-4.11.0.tar.gz\", hash = \"sha256:83f085bd5ca59c80295fc2a82ab5dac679cbe02b9f33f7d83af68e241bea51b0\"},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2434: socks = [\"PySocks (>=1.5.6,!=1.5.7,<2.0)\"]",
          "2436: [[package]]",
          "2439: description = \"A full-featured console (xterm et al.) user interface library\"",
          "2440: optional = false",
          "2442: files = [",
          "2450: ]",
          "2452: [[package]]",
          "2453: name = \"waitress\"",
          "2454: version = \"3.0.0\"",
          "",
          "[Removed Lines]",
          "2437: name = \"urwid-mitmproxy\"",
          "2438: version = \"2.1.2.1\"",
          "2441: python-versions = \"*\"",
          "2443:     {file = \"urwid-mitmproxy-2.1.2.1.tar.gz\", hash = \"sha256:be6238e587acb92bdd43b241af0a10dc23798e8cf3eddef834164eb637686cda\"},",
          "2444:     {file = \"urwid_mitmproxy-2.1.2.1-cp310-cp310-macosx_11_0_x86_64.whl\", hash = \"sha256:29c62a593235d2b69ba4557648588c54420ef030794b9d28e65f50bffdde85c3\"},",
          "2445:     {file = \"urwid_mitmproxy-2.1.2.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:d93bdc87cbb329cd262f8ada586e954a95ca4cc7249eca5b348b87f47ef1adb5\"},",
          "2446:     {file = \"urwid_mitmproxy-2.1.2.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:8cb7eb42fcc426ea02c321159631d396ec0cd6ebebabb310f3a4493579ff2e09\"},",
          "2447:     {file = \"urwid_mitmproxy-2.1.2.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:66c40dcead7fedbb312516e18574d216b0e7c728bf5cd0e240eee53737234b45\"},",
          "2448:     {file = \"urwid_mitmproxy-2.1.2.1-cp39-cp39-macosx_11_0_x86_64.whl\", hash = \"sha256:7a8a95460a519e0388d91a198acb31836dce40d14e599a0b9c24ba70fa4ec64b\"},",
          "2449:     {file = \"urwid_mitmproxy-2.1.2.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:d2d536ad412022365b5e1974cde9029b86cfc30f3960ae073f959630f0c27c21\"},",
          "",
          "[Added Lines]",
          "2567: name = \"urwid\"",
          "2568: version = \"2.6.15\"",
          "2571: python-versions = \">3.7\"",
          "2573:     {file = \"urwid-2.6.15-py3-none-any.whl\", hash = \"sha256:71b3171cabaa0092902f556768756bd2f2ebb24c0da287ee08f081d235340cb7\"},",
          "2574:     {file = \"urwid-2.6.15.tar.gz\", hash = \"sha256:9ecc57330d88c8d9663ffd7092a681674c03ff794b6330ccfef479af7aa9671b\"},",
          "2577: [package.dependencies]",
          "2578: typing-extensions = \"*\"",
          "2579: wcwidth = \"*\"",
          "2581: [package.extras]",
          "2582: curses = [\"windows-curses\"]",
          "2583: glib = [\"PyGObject\"]",
          "2584: lcd = [\"pyserial\"]",
          "2585: serial = [\"pyserial\"]",
          "2586: tornado = [\"tornado (>=5.0)\"]",
          "2587: trio = [\"exceptiongroup\", \"trio (>=0.22.0)\"]",
          "2588: twisted = [\"twisted\"]",
          "2589: zmq = [\"zmq\"]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2478: [package.dependencies]",
          "2479: bracex = \">=2.1.1\"",
          "2481: [[package]]",
          "2482: name = \"werkzeug\"",
          "2484: description = \"The comprehensive WSGI web application library.\"",
          "2485: optional = false",
          "2486: python-versions = \">=3.8\"",
          "2487: files = [",
          "2490: ]",
          "2492: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2483: version = \"3.0.4\"",
          "2488:     {file = \"werkzeug-3.0.4-py3-none-any.whl\", hash = \"sha256:02c9eb92b7d6c06f31a782811505d2157837cea66aaede3e217c7c27c039476c\"},",
          "2489:     {file = \"werkzeug-3.0.4.tar.gz\", hash = \"sha256:34f2371506b250df4d4f84bfe7b0921e4762525762bbd936614909fe25cd7306\"},",
          "",
          "[Added Lines]",
          "2620: [[package]]",
          "2621: name = \"wcwidth\"",
          "2622: version = \"0.2.13\"",
          "2623: description = \"Measures the displayed width of unicode strings in a terminal\"",
          "2624: optional = false",
          "2625: python-versions = \"*\"",
          "2626: files = [",
          "2627:     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},",
          "2628:     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},",
          "2629: ]",
          "2633: version = \"3.0.6\"",
          "2638:     {file = \"werkzeug-3.0.6-py3-none-any.whl\", hash = \"sha256:1bc0c2310d2fbb07b1dd1105eba2f7af72f322e1e455f2f93c993bee8c8a5f17\"},",
          "2639:     {file = \"werkzeug-3.0.6.tar.gz\", hash = \"sha256:a8dd59d4de28ca70471a34cba79bed5f7ef2e036a76b3ab0835474246eb41f8d\"},",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2596: [[package]]",
          "2597: name = \"yara-python-dex\"",
          "2599: description = \"Python interface for YARA\"",
          "2600: optional = false",
          "2601: python-versions = \"*\"",
          "2602: files = [",
          "2678: ]",
          "2680: [[package]]",
          "2681: name = \"zstandard\"",
          "2683: description = \"Zstandard bindings for Python\"",
          "2684: optional = false",
          "2685: python-versions = \">=3.8\"",
          "2686: files = [",
          "2733: ]",
          "2735: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2598: version = \"1.0.6\"",
          "2603:     {file = \"yara_python_dex-1.0.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f58c5662c2a183cf3f4d74053627a5f887bd29fbda42ae8b12b8c4d3789c2d52\"},",
          "2604:     {file = \"yara_python_dex-1.0.6-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:bff76af1bbc2a689772b455bb087662b1182d7202985a99859c10517e444e97e\"},",
          "2605:     {file = \"yara_python_dex-1.0.6-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:17929a2d3aa97c77ef080861df783d0591a910f1488e90723929bfc288234af3\"},",
          "2606:     {file = \"yara_python_dex-1.0.6-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2d8dbeb56bfbb23b29f44651b36883ba8b90f85f46fa80466debaa01486260fc\"},",
          "2607:     {file = \"yara_python_dex-1.0.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fd5bc12816b9bcb10d8115a34d618e736e952b6b63c2b23061b41fcafea75d0b\"},",
          "2608:     {file = \"yara_python_dex-1.0.6-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:da8e798bbfed132a5895098f37ff762689431477bbd6b663273d43abc6132d17\"},",
          "2609:     {file = \"yara_python_dex-1.0.6-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:030ecee6d83437018d3f5b165439822ab98b59b82ee231fbb65c6de3ff6385da\"},",
          "2610:     {file = \"yara_python_dex-1.0.6-cp310-cp310-win32.whl\", hash = \"sha256:ed51d4f0486c9b7822443b6c7ccadfc818a9a92eae9a55798f5e5814cbf4e6b1\"},",
          "2611:     {file = \"yara_python_dex-1.0.6-cp310-cp310-win_amd64.whl\", hash = \"sha256:f86f728030287dcd7f1ac87d58a4e12f1f80875092f4cff1d5e834f8bc090bc4\"},",
          "2612:     {file = \"yara_python_dex-1.0.6-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:f5b4187ebf90bd477a68974eaea7151b050729c11b97180928a4e19549bf5889\"},",
          "2613:     {file = \"yara_python_dex-1.0.6-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:eef289994867d1407b40b363315b07b949649338b7a8933d268a3a381345caf4\"},",
          "2614:     {file = \"yara_python_dex-1.0.6-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:af6451e98d6272de2dbe305f08441d42ca092f621e16bd0a75d7acd867609012\"},",
          "2615:     {file = \"yara_python_dex-1.0.6-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cd7f819aba638d3d05f37c10f09a02718fb086bfc1e85d282f33ff93a7e715da\"},",
          "2616:     {file = \"yara_python_dex-1.0.6-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bcb2bf352053a8ba288bf8a18151843fc4920369266ddcd379b93ed441c4aa3a\"},",
          "2617:     {file = \"yara_python_dex-1.0.6-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:c183d789304850838308ec6fec06e1587b566065459d8f82e7ef0027a76becc7\"},",
          "2618:     {file = \"yara_python_dex-1.0.6-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:29d9c64a71ae043b8940fa5e55a01804852a63e339ffd685f4007c035a46e925\"},",
          "2619:     {file = \"yara_python_dex-1.0.6-cp311-cp311-win32.whl\", hash = \"sha256:eb650d9af6104bc27c9dc47ffdef64ecb9c4c62d100832e1707e9a4542c4c743\"},",
          "2620:     {file = \"yara_python_dex-1.0.6-cp311-cp311-win_amd64.whl\", hash = \"sha256:0725a1cbb4ed2ef1498f4abccd6cb414932bee260f1e2581285561712d5745a2\"},",
          "2621:     {file = \"yara_python_dex-1.0.6-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:b51937c683cc094c41f321fbc28e6191b85c4b45daa24127d304483a7b2e12b2\"},",
          "2622:     {file = \"yara_python_dex-1.0.6-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:ee95badab4a3309baaf0ecf1976fd677a15523de8ed9c151b17eb88f29f92d9b\"},",
          "2623:     {file = \"yara_python_dex-1.0.6-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:97c9aa273c52893d655213ebb965fcbd9bd18506b0d0994b41d74accb22a9133\"},",
          "2624:     {file = \"yara_python_dex-1.0.6-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8be2e6ac69bd07aa7516964391b8695aaa5932cbc41391083ea96d45783636a4\"},",
          "2625:     {file = \"yara_python_dex-1.0.6-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:554e7652128f7ddc2703ec337efc1e84fa087f6efc54a86cd08027a7b6a41f1b\"},",
          "2626:     {file = \"yara_python_dex-1.0.6-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:f66da654a65914396095c9b3a0a714a270da1adfaa6a4b36fa960ff3d2c38663\"},",
          "2627:     {file = \"yara_python_dex-1.0.6-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:77568582ec8b3436832fb3aa5d2b409516d34659ac1d9d159bdf283733a42122\"},",
          "2628:     {file = \"yara_python_dex-1.0.6-cp312-cp312-win32.whl\", hash = \"sha256:604d5c2475b83709ed548deaa6c4f147a9963164b8a5b029c86a227e57f2bf99\"},",
          "2629:     {file = \"yara_python_dex-1.0.6-cp312-cp312-win_amd64.whl\", hash = \"sha256:e4cf92bdda2a2f34274d3c80973c9db4951abccca5c85f4d6fc0106c039c7c44\"},",
          "2630:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:a447448807bfbb08336dcbbd3a179743dbfdf5f51676e15326777b6a51321c3f\"},",
          "2631:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ede4d043594be7a7a90df9af8d8e99d87e1d8309ea13060d5c1726b17844850d\"},",
          "2632:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ab6b4cef9e1c48baa4ac55e9199a4c0357f835bfebe81c198c0b6d2abf343f6d\"},",
          "2633:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:aae27bf721cbef9add49d7d55faa55ba89e4cdc34600241bd2e4d93df08a922d\"},",
          "2634:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:e81a544c0fbf025f4d74824003f9cb3662099e2c0aab92c6851efdc9cf656296\"},",
          "2635:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-win32.whl\", hash = \"sha256:daddf685fe0cd42194b58f32aa4c8086881ebf0b0b8e57ba7a10c87fd6f16dc0\"},",
          "2636:     {file = \"yara_python_dex-1.0.6-cp36-cp36m-win_amd64.whl\", hash = \"sha256:4a0fd22e7eccd0972ded42c57665d6103812413c4b3d8d8e015dd3a719070da8\"},",
          "2637:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:754c45da489c746f258bb21880e61b048f115d18aed2d88809479da3c21277bb\"},",
          "2638:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:825fdec520e0d2210a62d901c965970328dec478f6ea10a3f5eed3ffd3401849\"},",
          "2639:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bcff81a70b7b05c79d0a3e8511712356e086769cc9688ed83c7f41b20a31a22e\"},",
          "2640:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:a881afcb6233c3ae428b696231e78ed867e0a523d6b713e7ef1efb145c7c5ba3\"},",
          "2641:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:67f76230e689cf0872c0514909d977d65509b6331e4f5b393c3d2e04abf71757\"},",
          "2642:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-win32.whl\", hash = \"sha256:f9db53aae5b916d1ecf5a67b517f6a184cedd4f72944225563ca36dce4d2301d\"},",
          "2643:     {file = \"yara_python_dex-1.0.6-cp37-cp37m-win_amd64.whl\", hash = \"sha256:c21ade6364425112b37ce67cece990ca933957d18cb557c2056c238d59853a3f\"},",
          "2644:     {file = \"yara_python_dex-1.0.6-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:347394358eb0256eb01c464584961f044b6eaeb89a0fb6da32fe4167563f342e\"},",
          "2645:     {file = \"yara_python_dex-1.0.6-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:26f8cdd9abeb3c8f96977663a6dd2703ede24129a7a2653606731367324cfb84\"},",
          "2646:     {file = \"yara_python_dex-1.0.6-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:753eff068ca6351a443d87b836a87c22e3d209e8725133d30a0b2ea7200c884b\"},",
          "2647:     {file = \"yara_python_dex-1.0.6-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ba7d229d9056238f74e5c754e4a495305598bbd24090290e6f13a8d20da5194b\"},",
          "2648:     {file = \"yara_python_dex-1.0.6-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:845e2404c9c1871d34490f75d755321b29defb452fece3d102ced6b6f7f071c0\"},",
          "2649:     {file = \"yara_python_dex-1.0.6-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:19ab42baa1a46b545ddfe6ee589e939c0ff308b7a55ab9e83ccd5a22e15e86d4\"},",
          "2650:     {file = \"yara_python_dex-1.0.6-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:a74ee4e5aca1f04a08ec106e2c414db0d202b36d5977b7f7d5d039c2cb96df03\"},",
          "2651:     {file = \"yara_python_dex-1.0.6-cp38-cp38-win32.whl\", hash = \"sha256:89eba8228d4f3ea5fb85e86ecae483f232c38f7a3ed8321dd5a9a8f2c5d562c9\"},",
          "2652:     {file = \"yara_python_dex-1.0.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:f1337c93550873f9efa512ce3686d4049d72c7e50fca801ecefc58bc31132b4f\"},",
          "2653:     {file = \"yara_python_dex-1.0.6-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:e68f926129cdbeb2ec1199bf279482963c050c6793d30bcbd3151165d2710fe4\"},",
          "2654:     {file = \"yara_python_dex-1.0.6-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:6244da132dcd6d9103d680cc51fd651d8aa52848ea53d286634331b61ceed8d5\"},",
          "2655:     {file = \"yara_python_dex-1.0.6-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:4ae7726506f6614043dd3a0f8548b8e7fb791a44ae4e2d1007eebe992478da83\"},",
          "2656:     {file = \"yara_python_dex-1.0.6-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3faed941e8511d8c45a2374d280efe3c20e4ffc8efd302ea53bd9d1490590d93\"},",
          "2657:     {file = \"yara_python_dex-1.0.6-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2ca95d177d28cad21bc5042a2bdd5623f8041814e850e77b52477c5adb7e7d2\"},",
          "2658:     {file = \"yara_python_dex-1.0.6-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:dbfe515cd29a01f5f9da803ed188b036c02181260b391610b6a8fff7aab1410b\"},",
          "2659:     {file = \"yara_python_dex-1.0.6-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:7043b90f84e0d17011a0b48516ec1e61846bcc2045193f950c50f295742994a9\"},",
          "2660:     {file = \"yara_python_dex-1.0.6-cp39-cp39-win32.whl\", hash = \"sha256:062dd71d23f0f691621be2626622fa6a9005125ebdeeecff1bd2ee723faa9c00\"},",
          "2661:     {file = \"yara_python_dex-1.0.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:96402fc64781c22cbc55e60050f454a8945e4a8f42451bdfa8fb276e0ff7fd02\"},",
          "2662:     {file = \"yara_python_dex-1.0.6-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:a96ecc124af4af248d7cb0abc048a1b478f4bedcd6bdfe8090d9d91e051d3ed8\"},",
          "2663:     {file = \"yara_python_dex-1.0.6-pp310-pypy310_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7c14a759a3bff28df03069a936f0c62be9669c5a050d55b9cce37aaa7eb3437a\"},",
          "2664:     {file = \"yara_python_dex-1.0.6-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a916c2b58a189327bce4581c0a5230fe567a2c0cf54859e066d03d5575af6373\"},",
          "2665:     {file = \"yara_python_dex-1.0.6-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:8675ef92bcc514a691b472057389a04f632bf5639d8163586ec9f1658896c853\"},",
          "2666:     {file = \"yara_python_dex-1.0.6-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:adac087ad5b5c9ff5bc81f844a12dfe1e8f378e4e8c93e911dabaf045c418a30\"},",
          "2667:     {file = \"yara_python_dex-1.0.6-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2c043b77075a29588e2eec3dff97bdf041b8592e1e5f0d64203958cfbf2dbf0b\"},",
          "2668:     {file = \"yara_python_dex-1.0.6-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:159251ff9ba6c00bf87d00559dba5ee2620ba5a79b88cb5b286b38846753c8e1\"},",
          "2669:     {file = \"yara_python_dex-1.0.6-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:6bd30788bfad109062c00828d45ed4c2599435b58d4c07e36bf6bec58b93d54c\"},",
          "2670:     {file = \"yara_python_dex-1.0.6-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:50603c51d4cfa2919b0b096f32c51ade44cf0e966a1987775c31d6ac68e6c81b\"},",
          "2671:     {file = \"yara_python_dex-1.0.6-pp38-pypy38_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f08ee6027b2c316aafa59d8104766f94c69e476d13245536fc5359934e25e548\"},",
          "2672:     {file = \"yara_python_dex-1.0.6-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d68f4544770022c619583adedd728c6c127dcd3a86adc3a9623c7c112c8ae939\"},",
          "2673:     {file = \"yara_python_dex-1.0.6-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:ecd2af708808253694abac71f3d4dea0d405c05da9ddc7d3ee5223f091161aa5\"},",
          "2674:     {file = \"yara_python_dex-1.0.6-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:a180ca2b4a14f1a078c08febfba607a4f4d12339cdac94403b70ccb65b9d134b\"},",
          "2675:     {file = \"yara_python_dex-1.0.6-pp39-pypy39_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:5a28e343d487d505775f928f5544ddeef6f0d699062c144c15a9aab077bd7afc\"},",
          "2676:     {file = \"yara_python_dex-1.0.6-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2cca9d7fbf7fa0fd1105d63fa04dc2381849c4be0ef177957745c775f8ed54cd\"},",
          "2677:     {file = \"yara_python_dex-1.0.6-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:da45cbc03c347f310cbcb9d262ec2d938fb55304c2eec36b779a0e8b9052fbb3\"},",
          "2682: version = \"0.22.0\"",
          "2687:     {file = \"zstandard-0.22.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:275df437ab03f8c033b8a2c181e51716c32d831082d93ce48002a5227ec93019\"},",
          "2688:     {file = \"zstandard-0.22.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2ac9957bc6d2403c4772c890916bf181b2653640da98f32e04b96e4d6fb3252a\"},",
          "2689:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fe3390c538f12437b859d815040763abc728955a52ca6ff9c5d4ac707c4ad98e\"},",
          "2690:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1958100b8a1cc3f27fa21071a55cb2ed32e9e5df4c3c6e661c193437f171cba2\"},",
          "2691:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:93e1856c8313bc688d5df069e106a4bc962eef3d13372020cc6e3ebf5e045202\"},",
          "2692:     {file = \"zstandard-0.22.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:1a90ba9a4c9c884bb876a14be2b1d216609385efb180393df40e5172e7ecf356\"},",
          "2693:     {file = \"zstandard-0.22.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:3db41c5e49ef73641d5111554e1d1d3af106410a6c1fb52cf68912ba7a343a0d\"},",
          "2694:     {file = \"zstandard-0.22.0-cp310-cp310-win32.whl\", hash = \"sha256:d8593f8464fb64d58e8cb0b905b272d40184eac9a18d83cf8c10749c3eafcd7e\"},",
          "2695:     {file = \"zstandard-0.22.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:f1a4b358947a65b94e2501ce3e078bbc929b039ede4679ddb0460829b12f7375\"},",
          "2696:     {file = \"zstandard-0.22.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:589402548251056878d2e7c8859286eb91bd841af117dbe4ab000e6450987e08\"},",
          "2697:     {file = \"zstandard-0.22.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:a97079b955b00b732c6f280d5023e0eefe359045e8b83b08cf0333af9ec78f26\"},",
          "2698:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:445b47bc32de69d990ad0f34da0e20f535914623d1e506e74d6bc5c9dc40bb09\"},",
          "2699:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:33591d59f4956c9812f8063eff2e2c0065bc02050837f152574069f5f9f17775\"},",
          "2700:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:888196c9c8893a1e8ff5e89b8f894e7f4f0e64a5af4d8f3c410f0319128bb2f8\"},",
          "2701:     {file = \"zstandard-0.22.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:53866a9d8ab363271c9e80c7c2e9441814961d47f88c9bc3b248142c32141d94\"},",
          "2702:     {file = \"zstandard-0.22.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:4ac59d5d6910b220141c1737b79d4a5aa9e57466e7469a012ed42ce2d3995e88\"},",
          "2703:     {file = \"zstandard-0.22.0-cp311-cp311-win32.whl\", hash = \"sha256:2b11ea433db22e720758cba584c9d661077121fcf60ab43351950ded20283440\"},",
          "2704:     {file = \"zstandard-0.22.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:11f0d1aab9516a497137b41e3d3ed4bbf7b2ee2abc79e5c8b010ad286d7464bd\"},",
          "2705:     {file = \"zstandard-0.22.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:6c25b8eb733d4e741246151d895dd0308137532737f337411160ff69ca24f93a\"},",
          "2706:     {file = \"zstandard-0.22.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:f9b2cde1cd1b2a10246dbc143ba49d942d14fb3d2b4bccf4618d475c65464912\"},",
          "2707:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a88b7df61a292603e7cd662d92565d915796b094ffb3d206579aaebac6b85d5f\"},",
          "2708:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:466e6ad8caefb589ed281c076deb6f0cd330e8bc13c5035854ffb9c2014b118c\"},",
          "2709:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a1d67d0d53d2a138f9e29d8acdabe11310c185e36f0a848efa104d4e40b808e4\"},",
          "2710:     {file = \"zstandard-0.22.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:39b2853efc9403927f9065cc48c9980649462acbdf81cd4f0cb773af2fd734bc\"},",
          "2711:     {file = \"zstandard-0.22.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8a1b2effa96a5f019e72874969394edd393e2fbd6414a8208fea363a22803b45\"},",
          "2712:     {file = \"zstandard-0.22.0-cp312-cp312-win32.whl\", hash = \"sha256:88c5b4b47a8a138338a07fc94e2ba3b1535f69247670abfe422de4e0b344aae2\"},",
          "2713:     {file = \"zstandard-0.22.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:de20a212ef3d00d609d0b22eb7cc798d5a69035e81839f549b538eff4105d01c\"},",
          "2714:     {file = \"zstandard-0.22.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:d75f693bb4e92c335e0645e8845e553cd09dc91616412d1d4650da835b5449df\"},",
          "2715:     {file = \"zstandard-0.22.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:36a47636c3de227cd765e25a21dc5dace00539b82ddd99ee36abae38178eff9e\"},",
          "2716:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:68953dc84b244b053c0d5f137a21ae8287ecf51b20872eccf8eaac0302d3e3b0\"},",
          "2717:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2612e9bb4977381184bb2463150336d0f7e014d6bb5d4a370f9a372d21916f69\"},",
          "2718:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:23d2b3c2b8e7e5a6cb7922f7c27d73a9a615f0a5ab5d0e03dd533c477de23004\"},",
          "2719:     {file = \"zstandard-0.22.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:1d43501f5f31e22baf822720d82b5547f8a08f5386a883b32584a185675c8fbf\"},",
          "2720:     {file = \"zstandard-0.22.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:a493d470183ee620a3df1e6e55b3e4de8143c0ba1b16f3ded83208ea8ddfd91d\"},",
          "2721:     {file = \"zstandard-0.22.0-cp38-cp38-win32.whl\", hash = \"sha256:7034d381789f45576ec3f1fa0e15d741828146439228dc3f7c59856c5bcd3292\"},",
          "2722:     {file = \"zstandard-0.22.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:d8fff0f0c1d8bc5d866762ae95bd99d53282337af1be9dc0d88506b340e74b73\"},",
          "2723:     {file = \"zstandard-0.22.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:2fdd53b806786bd6112d97c1f1e7841e5e4daa06810ab4b284026a1a0e484c0b\"},",
          "2724:     {file = \"zstandard-0.22.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:73a1d6bd01961e9fd447162e137ed949c01bdb830dfca487c4a14e9742dccc93\"},",
          "2725:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9501f36fac6b875c124243a379267d879262480bf85b1dbda61f5ad4d01b75a3\"},",
          "2726:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48f260e4c7294ef275744210a4010f116048e0c95857befb7462e033f09442fe\"},",
          "2727:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:959665072bd60f45c5b6b5d711f15bdefc9849dd5da9fb6c873e35f5d34d8cfb\"},",
          "2728:     {file = \"zstandard-0.22.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d22fdef58976457c65e2796e6730a3ea4a254f3ba83777ecfc8592ff8d77d303\"},",
          "2729:     {file = \"zstandard-0.22.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:a7ccf5825fd71d4542c8ab28d4d482aace885f5ebe4b40faaa290eed8e095a4c\"},",
          "2730:     {file = \"zstandard-0.22.0-cp39-cp39-win32.whl\", hash = \"sha256:f058a77ef0ece4e210bb0450e68408d4223f728b109764676e1a13537d056bb0\"},",
          "2731:     {file = \"zstandard-0.22.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:e9e9d4e2e336c529d4c435baad846a181e39a982f823f7e4495ec0b0ec8538d2\"},",
          "2732:     {file = \"zstandard-0.22.0.tar.gz\", hash = \"sha256:8226a33c542bcb54cd6bd0a366067b610b41713b64c9abec1bc4533d69f51e70\"},",
          "",
          "[Added Lines]",
          "2748: version = \"1.0.7\"",
          "2753:     {file = \"yara_python_dex-1.0.7-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:69ea91f4cda18cf99a220507d6492eeee1531335d7551dbd21e2138e6551f348\"},",
          "2754:     {file = \"yara_python_dex-1.0.7-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ddfd778478f5ed694010b904af9e4be38f9f2dfe19ef7f3fe5d7877e024a8692\"},",
          "2755:     {file = \"yara_python_dex-1.0.7-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:e1ed6b9534d46892d57803e2a02c8b0ae45d199c13cad71861393b54641a29a6\"},",
          "2756:     {file = \"yara_python_dex-1.0.7-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b6b2c696682d72e7cef5552c76b41d1839548a31c0d073ce0e392e8d68e5528b\"},",
          "2757:     {file = \"yara_python_dex-1.0.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:05470a030475598bd174cdc50ecc50a6353db3146e127e4adbb57ebf2d755ff3\"},",
          "2758:     {file = \"yara_python_dex-1.0.7-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:75440105b8c28c5452dfaebe6343f9f7865ba5d4f28ab3c97f1ff7045470c11d\"},",
          "2759:     {file = \"yara_python_dex-1.0.7-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:c1d2989c32fb3b7c3c6239ad2b0ae0ca5eb9f5e07c16938b31fc7a2979475ba9\"},",
          "2760:     {file = \"yara_python_dex-1.0.7-cp310-cp310-win32.whl\", hash = \"sha256:f7c2824da60fee1b30028018f38b09104c186f10d785f77f3750dd92a88fa52f\"},",
          "2761:     {file = \"yara_python_dex-1.0.7-cp310-cp310-win_amd64.whl\", hash = \"sha256:c656a93f099f3dc19b571e2076d80a37c1a9ee8b19914df6e3e43194e926a697\"},",
          "2762:     {file = \"yara_python_dex-1.0.7-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:ee1a627c08cd514e66d3c66dea89f36d7d1657fc8611f28f29f3c1c77d8020ca\"},",
          "2763:     {file = \"yara_python_dex-1.0.7-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:bf0e48ed69a3174d64ec220aeab93bd2732fe441fde3388cb10a16a0a6235d05\"},",
          "2764:     {file = \"yara_python_dex-1.0.7-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:1860a702379efb72dc78ed0238da879b7fa089fe7d992a82c1db795b9dd07c15\"},",
          "2765:     {file = \"yara_python_dex-1.0.7-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a9f678d0fbe97e177097808bc5d73160b8f8cbec7af88b0c117c73151f75e9de\"},",
          "2766:     {file = \"yara_python_dex-1.0.7-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b4ecc900686a37e0f1c364e6680560b014a4970f40667d05ff1e7ccf602170dd\"},",
          "2767:     {file = \"yara_python_dex-1.0.7-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:55fd10a3d068b84553da3366ded18aad6097726f0881d91fa20f5de326cfa951\"},",
          "2768:     {file = \"yara_python_dex-1.0.7-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:59dbea7feb39b61b5375b6667876e668f371041d46e9f49a4012900215ac42f5\"},",
          "2769:     {file = \"yara_python_dex-1.0.7-cp311-cp311-win32.whl\", hash = \"sha256:5e3ff614529c70ff4882428d9373d28038b396f58974b2c809b17f5015aecfaa\"},",
          "2770:     {file = \"yara_python_dex-1.0.7-cp311-cp311-win_amd64.whl\", hash = \"sha256:a778bc2439534b53069a54f5890ec72f1bbfcb20a302997ed2abd6ce8edce3e8\"},",
          "2771:     {file = \"yara_python_dex-1.0.7-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:5cfb1f22a5e34b2034886cd12a05c1a2d3a71407d53d61e4478514697b0faf81\"},",
          "2772:     {file = \"yara_python_dex-1.0.7-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:327bc558fdaecb401a1adf589de880de3513de9ebfb44036cc5fc66b73144c50\"},",
          "2773:     {file = \"yara_python_dex-1.0.7-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:9837eb9c318b38c3b11effa31207a468fc69b31b23318e08fd7c0b90e27c2efb\"},",
          "2774:     {file = \"yara_python_dex-1.0.7-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:08b3e9ed1774b130c7bbee16920485b7484e30cd062393289e757413c123c0f7\"},",
          "2775:     {file = \"yara_python_dex-1.0.7-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0b35d53825bd603e0953f4b38f5c90b2f3bf898b7c48b73897c23c98bdf58326\"},",
          "2776:     {file = \"yara_python_dex-1.0.7-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:bb607f58d30bda60008cb6708c45313b79cc24b9546dc2d8de802a521bb208f0\"},",
          "2777:     {file = \"yara_python_dex-1.0.7-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:337340391eadf3493b2f8ec43d28a85cadb83daf3c734ddefd59f3022d42d796\"},",
          "2778:     {file = \"yara_python_dex-1.0.7-cp312-cp312-win32.whl\", hash = \"sha256:aa6768e60bbb49216883750ace520ced4bb74d77913df9dec943fdadda771907\"},",
          "2779:     {file = \"yara_python_dex-1.0.7-cp312-cp312-win_amd64.whl\", hash = \"sha256:3206de65499b10cff7e80cd8d71ace5c13a760948a0867415a0a838077132bda\"},",
          "2780:     {file = \"yara_python_dex-1.0.7-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:756774ea2a9f7ba140b289d058bcb7db496c374bfe2a6696514a5279e6b50d39\"},",
          "2781:     {file = \"yara_python_dex-1.0.7-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:ed66cbbc164f994a6c70f2ea7c1af180b6b907b26a3cadf33ce1679b71a4271a\"},",
          "2782:     {file = \"yara_python_dex-1.0.7-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:c8ff5c66534f9a6e064827080f96ea9ce2f22e602acdd6f4580cbf2c8f79cb4a\"},",
          "2783:     {file = \"yara_python_dex-1.0.7-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cc027066111d6f9d888cfc5cd30783447a4f6d49c90e86729ed8468d7fd0c9fd\"},",
          "2784:     {file = \"yara_python_dex-1.0.7-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b6bba5f919b526d8452611864ec2e96aa0df87ea0ee718bd53623ac37124740b\"},",
          "2785:     {file = \"yara_python_dex-1.0.7-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:91a4f3ebea5f9db587b161be555eb107af737231b4816ec445b27a8479f912c9\"},",
          "2786:     {file = \"yara_python_dex-1.0.7-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:b2186fa99e97153ce779275b8494f76772dee889025761894a8550977f807fd2\"},",
          "2787:     {file = \"yara_python_dex-1.0.7-cp313-cp313-win32.whl\", hash = \"sha256:caf9fa3a3ef15b7a8f1b96b687ac99a618883c797d7cc0473fa052465c123f5e\"},",
          "2788:     {file = \"yara_python_dex-1.0.7-cp313-cp313-win_amd64.whl\", hash = \"sha256:43783d86831b77ceaca3a7324ac8e80e4b2933b3d4b07bc2b98b5a09551f10f5\"},",
          "2789:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:d672ef3b61d0efc2f664263612c14773d22160cb412f25062811a8421fef7462\"},",
          "2790:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4d895857b5d32b0d4eb6aeea6562d9a046e71f22c70aaf51e63ae46833c968e6\"},",
          "2791:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:47bb8bec777d15c98719d86759d53b022fefa8e7a9390d502eb8e07cb5a8bb27\"},",
          "2792:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-musllinux_1_2_i686.whl\", hash = \"sha256:a39bedf62acc8554affacdac7a68d04f342b213c6884a17e2b3bf3b137e529cd\"},",
          "2793:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-musllinux_1_2_x86_64.whl\", hash = \"sha256:98f9928e47c3b7a76cb010aed82a53c170da6de2aba7d30250362eaffddb0e8e\"},",
          "2794:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-win32.whl\", hash = \"sha256:e98137fd1e4e8e3640504a620fcc9707e9116292d59f175cadd2371c60e539e0\"},",
          "2795:     {file = \"yara_python_dex-1.0.7-cp36-cp36m-win_amd64.whl\", hash = \"sha256:fc1be77a83c87288d658c198f822b0b86c3e42a576a442298ab2d788f1fd1aa0\"},",
          "2796:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:f5ba4719aa4f42d90ba6bec4c85fe08ee7b646bb91d36f9c7f00a423bd6faa42\"},",
          "2797:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:82c8949ea8015211072aeac20194bc0fca6d9a19b567feab0ab5f849412cd369\"},",
          "2798:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5be42f1a599d829e5d6eae19f02c9078a3be0ea57ea27e3e32c014fef70c8510\"},",
          "2799:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-musllinux_1_2_i686.whl\", hash = \"sha256:e1c122f5a860581f0493094d6ff4557c03737e7bbcf7891a64d6eaac85995a6f\"},",
          "2800:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:9103f017eb2836b5876dbbbd586aaf4c27bc3c0cd82b978a991554ecd706d437\"},",
          "2801:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-win32.whl\", hash = \"sha256:8c341be0e9f1d821ca3b0812b4201a63377b96a7fed30cbaa218be551f70b91f\"},",
          "2802:     {file = \"yara_python_dex-1.0.7-cp37-cp37m-win_amd64.whl\", hash = \"sha256:0561177ae191b169a9ab9aa75a100682b97e19df9546006e3608b36a6977af06\"},",
          "2803:     {file = \"yara_python_dex-1.0.7-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:7ec06eb3f45e7c8495df681dad9236fd30bd795bc886ee24a5f0287bab56d6f3\"},",
          "2804:     {file = \"yara_python_dex-1.0.7-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:4eb840e99ca159c8aa4b4316bdc04d000076b55a7a59a669066f7469df2c3d9f\"},",
          "2805:     {file = \"yara_python_dex-1.0.7-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:9336a24cb95d3b7b29be405f9a4dbd3c0d1ada971edd2e81e2137e2ddd8d215b\"},",
          "2806:     {file = \"yara_python_dex-1.0.7-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2e4f76d1f7fdd66578e08e2d4baf2fa27cbd9c91fbc35fe9e7bf0a6fa9e2c45a\"},",
          "2807:     {file = \"yara_python_dex-1.0.7-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9b4ab1beeeab8ce5b45f71f7cb528e737d5fdd8481d799b50289f29f719e41b1\"},",
          "2808:     {file = \"yara_python_dex-1.0.7-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:ae3faed75048226b81e96df1497000fdff7b981f4817af320b26bf15c2294f6b\"},",
          "2809:     {file = \"yara_python_dex-1.0.7-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:0428ad48fcfffbc9d866cb4610ca337e0e551b8c3103329a01fd51b9ef7ce9a6\"},",
          "2810:     {file = \"yara_python_dex-1.0.7-cp38-cp38-win32.whl\", hash = \"sha256:810cd8c481bff4ae9a1bae70950ba89346669d5a7ab2637cbd4dc2d50e7a52db\"},",
          "2811:     {file = \"yara_python_dex-1.0.7-cp38-cp38-win_amd64.whl\", hash = \"sha256:a1ec31f9e1306a580211c112eb361384df12a3498bd4c144dbdbf52ff8cea564\"},",
          "2812:     {file = \"yara_python_dex-1.0.7-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:98f6460ea4883cbcc43de23de7d42194e81f6c10b82abd303a9d1e0e70fe3b18\"},",
          "2813:     {file = \"yara_python_dex-1.0.7-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:0aeb7e7f49ded7c479f0be8a79f3cba429280f767765268dd6671e35d6970fad\"},",
          "2814:     {file = \"yara_python_dex-1.0.7-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:662ef33052487416dbdbb7bdc5ff4dbee3abb7fab4c2fffb6ca3180405cd567b\"},",
          "2815:     {file = \"yara_python_dex-1.0.7-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:074787a9e5c1ae7b654087f1d70c415fda67651e72b283aee4cc60a0cd7a48c9\"},",
          "2816:     {file = \"yara_python_dex-1.0.7-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:02cfab673ee1b0463579f075402851f9c03a022653f43ff0399c4bd93ba17401\"},",
          "2817:     {file = \"yara_python_dex-1.0.7-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3def3336165e13285ed13affe3d81c069c501cbae17aa269280f37a374629c4e\"},",
          "2818:     {file = \"yara_python_dex-1.0.7-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:6abb0f09a693fdfd050a58c76d200fb1ee29744332bdbf04cb8b54eb519a4ee5\"},",
          "2819:     {file = \"yara_python_dex-1.0.7-cp39-cp39-win32.whl\", hash = \"sha256:fc1682911cfa3951fbffc155f2a7b1eb30f0292a8c5f70e5110307724562b74b\"},",
          "2820:     {file = \"yara_python_dex-1.0.7-cp39-cp39-win_amd64.whl\", hash = \"sha256:c56185e21b3cb49aa3e1fa0a7f46294a8545735ac0ed150880880118f2930ec9\"},",
          "2821:     {file = \"yara_python_dex-1.0.7-pp310-pypy310_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:c92c16151177671b14909dc978dc4261c2417fb0574aeee61c081f54b7b05a1a\"},",
          "2822:     {file = \"yara_python_dex-1.0.7-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:266c8d423ee4c08fbbec49e450028a626ab181af1e8847002588095aa9ca7a44\"},",
          "2823:     {file = \"yara_python_dex-1.0.7-pp310-pypy310_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2d1869f7d1661025c3f3aa428041f1751e2f488c1b80017d8fcb07f3ec7fe37c\"},",
          "2824:     {file = \"yara_python_dex-1.0.7-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:26e71271b4d954404f16d6b6649d89eea03f167a5a73ac4c37ba1b4295aa6d9d\"},",
          "2825:     {file = \"yara_python_dex-1.0.7-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:a5333f79945e9a6b00e2f1d569ac933ecdcb5e3c3a1218de32d74f21ef4943a9\"},",
          "2826:     {file = \"yara_python_dex-1.0.7-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:6080e8c88f3f33be041ffa709fbbac2c2bb970b1d4c99723cb783e31eb6164c8\"},",
          "2827:     {file = \"yara_python_dex-1.0.7-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:deafed78488c41717ab5ac3416167210e86b2c4300326bc33652410413705401\"},",
          "2828:     {file = \"yara_python_dex-1.0.7-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b613f97c6936ca3c129bd753a2484d9cbfa3abe5ba5f82ac08fdd4e934a8a949\"},",
          "2829:     {file = \"yara_python_dex-1.0.7-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:106815e2ed586c74c3d6e20cab636323041d12bd8829ff0a1422b4ce47809cea\"},",
          "2830:     {file = \"yara_python_dex-1.0.7-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:dfd4364b3fc4f20763a23e8e023f5d08bf71fd26fea07a176a8e892df2a0382c\"},",
          "2831:     {file = \"yara_python_dex-1.0.7-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:f6409c127ae24154c955be8f9fef2a165526ca5fe30229adbd2a3c5b45af6355\"},",
          "2832:     {file = \"yara_python_dex-1.0.7-pp38-pypy38_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d08e32445ad4bb44cbc8a1c6d4ee3baa76f013fbca27cf028a984d957979f1fc\"},",
          "2833:     {file = \"yara_python_dex-1.0.7-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4a6eb0c4518f855d71e7cd8d526281fe6c484f9fe31b60b02bd15fc847ba26e6\"},",
          "2834:     {file = \"yara_python_dex-1.0.7-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:435a98023350813f6a5634db18640ad38065e7923def70f65d49cd4c52c3cd13\"},",
          "2835:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:23017112a3478bdc94ee34a529d018f0ac2420877342cf0d0f5285762b521a6b\"},",
          "2836:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:503c50f36e680417793bc758e491a430ef011c457f7cb6acebbbd2e92d313f92\"},",
          "2837:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:9349eb72603a70107cb56efdff2181edaf694d70f962040d550c4119b352cd20\"},",
          "2838:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:faf6c2cba75d0435e9fd0d5bdfce41565c5df20a9af300b43179412516fe8164\"},",
          "2839:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:3c8668dccf0a9c84f85729a15a697aec44e9c08da01efba91248fccd65039393\"},",
          "2844: version = \"0.23.0\"",
          "2849:     {file = \"zstandard-0.23.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:bf0a05b6059c0528477fba9054d09179beb63744355cab9f38059548fedd46a9\"},",
          "2850:     {file = \"zstandard-0.23.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:fc9ca1c9718cb3b06634c7c8dec57d24e9438b2aa9a0f02b8bb36bf478538880\"},",
          "2851:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:77da4c6bfa20dd5ea25cbf12c76f181a8e8cd7ea231c673828d0386b1740b8dc\"},",
          "2852:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b2170c7e0367dde86a2647ed5b6f57394ea7f53545746104c6b09fc1f4223573\"},",
          "2853:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c16842b846a8d2a145223f520b7e18b57c8f476924bda92aeee3a88d11cfc391\"},",
          "2854:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:157e89ceb4054029a289fb504c98c6a9fe8010f1680de0201b3eb5dc20aa6d9e\"},",
          "2855:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:203d236f4c94cd8379d1ea61db2fce20730b4c38d7f1c34506a31b34edc87bdd\"},",
          "2856:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:dc5d1a49d3f8262be192589a4b72f0d03b72dcf46c51ad5852a4fdc67be7b9e4\"},",
          "2857:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:752bf8a74412b9892f4e5b58f2f890a039f57037f52c89a740757ebd807f33ea\"},",
          "2858:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:80080816b4f52a9d886e67f1f96912891074903238fe54f2de8b786f86baded2\"},",
          "2859:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:84433dddea68571a6d6bd4fbf8ff398236031149116a7fff6f777ff95cad3df9\"},",
          "2860:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:ab19a2d91963ed9e42b4e8d77cd847ae8381576585bad79dbd0a8837a9f6620a\"},",
          "2861:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:59556bf80a7094d0cfb9f5e50bb2db27fefb75d5138bb16fb052b61b0e0eeeb0\"},",
          "2862:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:27d3ef2252d2e62476389ca8f9b0cf2bbafb082a3b6bfe9d90cbcbb5529ecf7c\"},",
          "2863:     {file = \"zstandard-0.23.0-cp310-cp310-win32.whl\", hash = \"sha256:5d41d5e025f1e0bccae4928981e71b2334c60f580bdc8345f824e7c0a4c2a813\"},",
          "2864:     {file = \"zstandard-0.23.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:519fbf169dfac1222a76ba8861ef4ac7f0530c35dd79ba5727014613f91613d4\"},",
          "2865:     {file = \"zstandard-0.23.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e\"},",
          "2866:     {file = \"zstandard-0.23.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23\"},",
          "2867:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a\"},",
          "2868:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db\"},",
          "2869:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2\"},",
          "2870:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca\"},",
          "2871:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c\"},",
          "2872:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e\"},",
          "2873:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5\"},",
          "2874:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48\"},",
          "2875:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c\"},",
          "2876:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003\"},",
          "2877:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78\"},",
          "2878:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473\"},",
          "2879:     {file = \"zstandard-0.23.0-cp311-cp311-win32.whl\", hash = \"sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160\"},",
          "2880:     {file = \"zstandard-0.23.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0\"},",
          "2881:     {file = \"zstandard-0.23.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094\"},",
          "2882:     {file = \"zstandard-0.23.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8\"},",
          "2883:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1\"},",
          "2884:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072\"},",
          "2885:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20\"},",
          "2886:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373\"},",
          "2887:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db\"},",
          "2888:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772\"},",
          "2889:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105\"},",
          "2890:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba\"},",
          "2891:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd\"},",
          "2892:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a\"},",
          "2893:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90\"},",
          "2894:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35\"},",
          "2895:     {file = \"zstandard-0.23.0-cp312-cp312-win32.whl\", hash = \"sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d\"},",
          "2896:     {file = \"zstandard-0.23.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b\"},",
          "2897:     {file = \"zstandard-0.23.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9\"},",
          "2898:     {file = \"zstandard-0.23.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a\"},",
          "2899:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2\"},",
          "2900:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5\"},",
          "2901:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f\"},",
          "2902:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed\"},",
          "2903:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea\"},",
          "2904:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847\"},",
          "2905:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171\"},",
          "2906:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840\"},",
          "2907:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690\"},",
          "2908:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b\"},",
          "2909:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057\"},",
          "2910:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33\"},",
          "2911:     {file = \"zstandard-0.23.0-cp313-cp313-win32.whl\", hash = \"sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd\"},",
          "2912:     {file = \"zstandard-0.23.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b\"},",
          "2913:     {file = \"zstandard-0.23.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:2ef3775758346d9ac6214123887d25c7061c92afe1f2b354f9388e9e4d48acfc\"},",
          "2914:     {file = \"zstandard-0.23.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:4051e406288b8cdbb993798b9a45c59a4896b6ecee2f875424ec10276a895740\"},",
          "2915:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2d1a054f8f0a191004675755448d12be47fa9bebbcffa3cdf01db19f2d30a54\"},",
          "2916:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f83fa6cae3fff8e98691248c9320356971b59678a17f20656a9e59cd32cee6d8\"},",
          "2917:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:32ba3b5ccde2d581b1e6aa952c836a6291e8435d788f656fe5976445865ae045\"},",
          "2918:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2f146f50723defec2975fb7e388ae3a024eb7151542d1599527ec2aa9cacb152\"},",
          "2919:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1bfe8de1da6d104f15a60d4a8a768288f66aa953bbe00d027398b93fb9680b26\"},",
          "2920:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:29a2bc7c1b09b0af938b7a8343174b987ae021705acabcbae560166567f5a8db\"},",
          "2921:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:61f89436cbfede4bc4e91b4397eaa3e2108ebe96d05e93d6ccc95ab5714be512\"},",
          "2922:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:53ea7cdc96c6eb56e76bb06894bcfb5dfa93b7adcf59d61c6b92674e24e2dd5e\"},",
          "2923:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:a4ae99c57668ca1e78597d8b06d5af837f377f340f4cce993b551b2d7731778d\"},",
          "2924:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:379b378ae694ba78cef921581ebd420c938936a153ded602c4fea612b7eaa90d\"},",
          "2925:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:50a80baba0285386f97ea36239855f6020ce452456605f262b2d33ac35c7770b\"},",
          "2926:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:61062387ad820c654b6a6b5f0b94484fa19515e0c5116faf29f41a6bc91ded6e\"},",
          "2927:     {file = \"zstandard-0.23.0-cp38-cp38-win32.whl\", hash = \"sha256:b8c0bd73aeac689beacd4e7667d48c299f61b959475cdbb91e7d3d88d27c56b9\"},",
          "2928:     {file = \"zstandard-0.23.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:a05e6d6218461eb1b4771d973728f0133b2a4613a6779995df557f70794fd60f\"},",
          "2929:     {file = \"zstandard-0.23.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:3aa014d55c3af933c1315eb4bb06dd0459661cc0b15cd61077afa6489bec63bb\"},",
          "2930:     {file = \"zstandard-0.23.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916\"},",
          "2931:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fb2b1ecfef1e67897d336de3a0e3f52478182d6a47eda86cbd42504c5cbd009a\"},",
          "2932:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:837bb6764be6919963ef41235fd56a6486b132ea64afe5fafb4cb279ac44f259\"},",
          "2933:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4\"},",
          "2934:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48ef6a43b1846f6025dde6ed9fee0c24e1149c1c25f7fb0a0585572b2f3adc58\"},",
          "2935:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15\"},",
          "2936:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:2fb4535137de7e244c230e24f9d1ec194f61721c86ebea04e1581d9d06ea1269\"},",
          "2937:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:8c24f21fa2af4bb9f2c492a86fe0c34e6d2c63812a839590edaf177b7398f700\"},",
          "2938:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:a8c86881813a78a6f4508ef9daf9d4995b8ac2d147dcb1a450448941398091c9\"},",
          "2939:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:fe3b385d996ee0822fd46528d9f0443b880d4d05528fd26a9119a54ec3f91c69\"},",
          "2940:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:82d17e94d735c99621bf8ebf9995f870a6b3e6d14543b99e201ae046dfe7de70\"},",
          "2941:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:c7c517d74bea1a6afd39aa612fa025e6b8011982a0897768a2f7c8ab4ebb78a2\"},",
          "2942:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:1fd7e0f1cfb70eb2f95a19b472ee7ad6d9a0a992ec0ae53286870c104ca939e5\"},",
          "2943:     {file = \"zstandard-0.23.0-cp39-cp39-win32.whl\", hash = \"sha256:43da0f0092281bf501f9c5f6f3b4c975a8a0ea82de49ba3f7100e64d422a1274\"},",
          "2944:     {file = \"zstandard-0.23.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:f8346bfa098532bc1fb6c7ef06783e969d87a99dd1d2a5a18a892c1d7a643c58\"},",
          "2945:     {file = \"zstandard-0.23.0.tar.gz\", hash = \"sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09\"},",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2741: [metadata]",
          "2742: lock-version = \"2.0\"",
          "2743: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "2744: content-hash = \"392e8f07da70d48e9cf4057b041eedf5935c2c48099ee80616083d188c33831f\"",
          "",
          "[Added Lines]",
          "2957: content-hash = \"a7fcc54de79395994be219da2168c7ed259329fe555cc239b2fabf82a6c9d567\"",
          "",
          "---------------"
        ],
        "scripts/clean.bat||scripts/clean.bat": [
          "File: scripts/clean.bat -> scripts/clean.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: del /f \"mobsf\\setup_done.txt\" >nul 2>&1",
          "28: echo Deleting MobSF data directory: %mobsf_home%",
          "29: del /f \"%mobsf_home%\" /q /s >nul 2>&1",
          "30: echo Done",
          "31: ) ELSE (",
          "32: echo Please run script from mobsf.MobSF directory",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: rmdir \"%mobsf_home%\" /S /Q >nul 2>&1",
          "",
          "---------------"
        ],
        "scripts/install_java_wkhtmltopdf.sh||scripts/dependencies.sh": [
          "File: scripts/install_java_wkhtmltopdf.sh -> scripts/dependencies.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # For apktool",
          "4: mkdir -p /home/mobsf/.local/share/apktool/framework",
          "7: if [ \"$TARGETPLATFORM\" == \"linux/arm64\" ]",
          "8: then",
          "9:     WKH_FILE=$WKH_FILE_ARM",
          "10:     JDK_FILE=$JDK_FILE_ARM",
          "16: fi",
          "18: echo \"Target platform identified as $TARGETPLATFORM\"",
          "21: WKH_URL=\"https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/${WKH_FILE}\"",
          "23: # Download and install wkhtmltopdf",
          "24: echo \"Installing $WKH_FILE ...\"",
          "25: wget --quiet -O /tmp/${WKH_FILE} \"${WKH_URL}\" && \\",
          "26:     dpkg -i /tmp/${WKH_FILE} && \\",
          "",
          "[Removed Lines]",
          "6: # Install yara-python dex on linux/arm64",
          "11:     apt install -y git",
          "12:     pip3 install --no-cache-dir wheel",
          "13:     pip3 wheel --wheel-dir=yara-python-dex git+https://github.com/MobSF/yara-python-dex.git",
          "14:     pip3 install --no-cache-dir --no-index --find-links=yara-python-dex yara-python-dex",
          "15:     rm -rf yara-python-dex",
          "20: JDK_URL=\"https://download.java.net/java/GA/jdk20.0.2/6e380f22cbe7469fa75fb448bd903d8e/9/GPL/${JDK_FILE}\"",
          "",
          "[Added Lines]",
          "10:     LIBSSL_FILE=$LIBSSL_FILE_ARM",
          "14: JDK_URL=\"https://download.java.net/java/GA/jdk22.0.2/c9ecb94cd31b495da20a27d4581645e8/9/GPL/${JDK_FILE}\"",
          "16: LIBSSL11_URL=\"http://ftp.us.debian.org/debian/pool/main/o/openssl/${LIBSSL_FILE}\"",
          "19: # Install dependencies for wkhtmltopdf",
          "20: echo \"Installing $LIBSSL_FILE ...\"",
          "21: wget --quiet -O /tmp/${LIBSSL_FILE} \"${LIBSSL11_URL}\" && \\",
          "22:     dpkg -i /tmp/${LIBSSL_FILE} && \\",
          "23:     rm -f /tmp/${LIBSSL_FILE}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     tar zxf \"${JDK_FILE}\" && \\",
          "35:     rm -f \"${JDK_FILE}\"",
          "37: # Delete script",
          "38: rm $0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: # Install JADX",
          "39: python3 tools_download.py /home/mobsf/.MobSF",
          "40: rm tools_download.py",
          "",
          "---------------"
        ],
        "scripts/postgres_support.sh||scripts/postgres_support.sh": [
          "File: scripts/postgres_support.sh -> scripts/postgres_support.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "setup.bat||setup.bat": [
          "File: setup.bat -> setup.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   ) else (",
          "14:     exit /b",
          "15:   )",
          "17:   if errorlevel 1 (",
          "18:       if \"%var%\"==\"\" goto redo",
          "20:       exit /b",
          "21:   ) else (",
          "22:       echo [INSTALL] Found %var%",
          "",
          "[Removed Lines]",
          "16:   echo %var%|findstr /R \"[3].[1011]\" >nul",
          "19:       echo [ERROR] MobSF dependencies require Python 3.10-3.11. Your python points to %var%",
          "",
          "[Added Lines]",
          "16:   echo %var%|findstr /R \"[3].[101112]\" >nul",
          "19:       echo [ERROR] MobSF dependencies require Python 3.10-3.12. Your python points to %var%",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   set INCLUDE=C:\\Program Files\\OpenSSL-Win64\\include;%INCLUDE%",
          "58:   echo [INSTALL] Installing Requirements",
          "60:   python -m poetry lock",
          "61:   python -m poetry install --only main --no-root --no-interaction --no-ansi || python -m poetry install --only main --no-root --no-interaction --no-ansi || python -m poetry install --only main --no-root --no-interaction --no-ansi",
          "",
          "[Removed Lines]",
          "59:   python -m pip install --no-cache-dir wheel poetry==1.6.1",
          "",
          "[Added Lines]",
          "59:   python -m pip install --no-cache-dir wheel poetry==1.8.4",
          "",
          "---------------"
        ],
        "setup.sh||setup.sh": [
          "File: setup.sh -> setup.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: python_version=\"$(python3 --version 2>&1 | awk '{print $2}')\"",
          "12: py_major=$(echo \"$python_version\" | cut -d'.' -f1)",
          "13: py_minor=$(echo \"$python_version\" | cut -d'.' -f2)",
          "15:     echo \"[INSTALL] Found Python ${python_version}\"",
          "16: else",
          "18:     exit 1",
          "19: fi",
          "",
          "[Removed Lines]",
          "14: if [ \"$py_major\" -eq \"3\" ] && [ \"$py_minor\" -gt \"9\" ] && [ \"$py_minor\" -lt \"12\" ]; then",
          "17:     echo \"[ERROR] MobSF dependencies require Python 3.10 - 3.11. You have Python version ${python_version} or python3 points to Python ${python_version}.\"",
          "",
          "[Added Lines]",
          "14: if [ \"$py_major\" -eq \"3\" ] && [ \"$py_minor\" -gt \"9\" ] && [ \"$py_minor\" -lt \"13\" ]; then",
          "17:     echo \"[ERROR] MobSF dependencies require Python 3.10 - 3.12. You have Python version ${python_version} or python3 points to Python ${python_version}.\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: fi",
          "48: echo '[INSTALL] Installing Requirements'",
          "50: python3 -m poetry install --no-root --only main --no-interaction --no-ansi",
          "52: echo '[INSTALL] Clean Up'",
          "",
          "[Removed Lines]",
          "49: python3 -m pip install --no-cache-dir wheel poetry==1.6.1",
          "",
          "[Added Lines]",
          "49: python3 -m pip install --no-cache-dir wheel poetry==1.8.4",
          "50: python3 -m poetry lock",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cd255cb90729672610616671f0ca23f88ceb82e",
      "candidate_info": {
        "commit_hash": "0cd255cb90729672610616671f0ca23f88ceb82e",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/0cd255cb90729672610616671f0ca23f88ceb82e",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/db_interaction.py",
          "mobsf/StaticAnalyzer/views/android/network_security.py",
          "mobsf/StaticAnalyzer/views/common/appsec.py",
          "mobsf/StaticAnalyzer/views/common/suppression.py",
          "mobsf/StaticAnalyzer/views/ios/db_interaction.py",
          "mobsf/StaticAnalyzer/views/ios/plist_analysis.py",
          "mobsf/templates/pdf/android_report.html",
          "mobsf/templates/pdf/ios_report.html",
          "mobsf/templates/static_analysis/android_binary_analysis.html",
          "mobsf/templates/static_analysis/android_source_analysis.html",
          "mobsf/templates/static_analysis/ios_binary_analysis.html",
          "mobsf/templates/static_analysis/ios_source_analysis.html"
        ],
        "message": "[Enterprise Feature Request EFR02] Support summary of severity in each section. (#2160)\n\n* Summary for Android and iOS SCA",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/db_interaction.py||mobsf/StaticAnalyzer/views/android/db_interaction.py",
          "mobsf/StaticAnalyzer/views/android/network_security.py||mobsf/StaticAnalyzer/views/android/network_security.py",
          "mobsf/StaticAnalyzer/views/common/appsec.py||mobsf/StaticAnalyzer/views/common/appsec.py",
          "mobsf/StaticAnalyzer/views/common/suppression.py||mobsf/StaticAnalyzer/views/common/suppression.py",
          "mobsf/StaticAnalyzer/views/ios/db_interaction.py||mobsf/StaticAnalyzer/views/ios/db_interaction.py",
          "mobsf/StaticAnalyzer/views/ios/plist_analysis.py||mobsf/StaticAnalyzer/views/ios/plist_analysis.py",
          "mobsf/templates/pdf/android_report.html||mobsf/templates/pdf/android_report.html",
          "mobsf/templates/pdf/ios_report.html||mobsf/templates/pdf/ios_report.html",
          "mobsf/templates/static_analysis/android_binary_analysis.html||mobsf/templates/static_analysis/android_binary_analysis.html",
          "mobsf/templates/static_analysis/android_source_analysis.html||mobsf/templates/static_analysis/android_source_analysis.html",
          "mobsf/templates/static_analysis/ios_binary_analysis.html||mobsf/templates/static_analysis/ios_binary_analysis.html",
          "mobsf/templates/static_analysis/ios_source_analysis.html||mobsf/templates/static_analysis/ios_source_analysis.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: logger = logging.getLogger(__name__)",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _____  __",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _|___ / / /_",
          "",
          "[Removed Lines]",
          "13: VERSION = '3.6.4'",
          "",
          "[Added Lines]",
          "13: VERSION = '3.6.5'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/android/cert_analysis.py -> mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "20: logging.getLogger('androguard').setLevel(logging.ERROR)",
          "21: ANDROID_8_1_LEVEL = 27",
          "24: def get_hardcoded_cert_keystore(files):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: HIGH = 'high'",
          "23: WARNING = 'warning'",
          "24: INFO = 'info'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         manidat = ''",
          "56:         cert_info = ''",
          "57:         certlist = []",
          "58:         cert_path = os.path.join(app_dir, 'META-INF/')",
          "60:         apk_file = os.path.join(app_dir, app_file)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         summary = {HIGH: 0, WARNING: 0, INFO: 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:         sha256_digest = bool(re.findall(r'SHA-256-Digest', manidat))",
          "118:         findings = []",
          "119:         if a.is_signed():",
          "120:             findings.append((",
          "122:                 'Application is signed with a code '",
          "123:                 'signing certificate',",
          "124:                 'Signed Application'))",
          "125:         else:",
          "126:             findings.append((",
          "128:                 'Code signing certificate not found',",
          "129:                 'Missing Code Signing certificate'))",
          "130:         if a.is_signed_v1():",
          "132:             api_level = int(man_dict['min_sdk'])",
          "133:             if ((a.is_signed_v2() or a.is_signed_v3())",
          "134:                     and api_level < ANDROID_8_1_LEVEL):",
          "136:             findings.append((",
          "137:                 status,",
          "138:                 'Application is signed with v1 signature scheme, '",
          "",
          "[Removed Lines]",
          "121:                 'info',",
          "127:                 'high',",
          "131:             status = 'high'",
          "135:                 status = 'warning'",
          "",
          "[Added Lines]",
          "124:             summary[INFO] += 1",
          "126:                 INFO,",
          "131:             summary[HIGH] += 1",
          "133:                 HIGH,",
          "137:             status = HIGH",
          "138:             summary[HIGH] += 1",
          "142:                 status = WARNING",
          "143:                 summary[HIGH] -= 1",
          "144:                 summary[WARNING] += 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:                 'scheme is also vulnerable.',",
          "144:                 'Application vulnerable to Janus Vulnerability'))",
          "145:         if re.findall(r'CN=Android Debug', cert_info):",
          "146:             findings.append((",
          "148:                 'Application signed with a debug certificate. '",
          "149:                 'Production application must not be shipped '",
          "150:                 'with a debug certificate.',",
          "151:                 'Application signed with debug certificate'))",
          "152:         if re.findall(r'Hash Algorithm: sha1', cert_info):",
          "154:             desc = (",
          "155:                 'Application is signed with SHA1withRSA. '",
          "156:                 'SHA1 hash algorithm is known to have '",
          "157:                 'collision issues.')",
          "158:             title = 'Certificate algorithm vulnerable to hash collision'",
          "159:             if sha256_digest:",
          "161:                 desc += (",
          "162:                     ' The manifest file indicates SHA256withRSA'",
          "163:                     ' is in use.')",
          "",
          "[Removed Lines]",
          "147:                 'high',",
          "153:             status = 'high'",
          "160:                 status = 'warning'",
          "",
          "[Added Lines]",
          "155:             summary[HIGH] += 1",
          "157:                 HIGH,",
          "163:             status = HIGH",
          "164:             summary[HIGH] += 1",
          "171:                 status = WARNING",
          "172:                 summary[HIGH] -= 1",
          "173:                 summary[WARNING] += 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:                          'vulnerable to hash collision')",
          "166:             findings.append((status, desc, title))",
          "167:         if re.findall(r'Hash Algorithm: md5', cert_info):",
          "169:             desc = (",
          "170:                 'Application is signed with MD5. '",
          "171:                 'MD5 hash algorithm is known to have '",
          "172:                 'collision issues.')",
          "173:             title = 'Certificate algorithm vulnerable to hash collision'",
          "174:             findings.append((status, desc, title))",
          "176:             'certificate_info': cert_info,",
          "177:             'certificate_findings': findings,",
          "178:         }",
          "180:     except Exception:",
          "181:         logger.exception('Reading Code Signing Certificate')",
          "182:         return {}",
          "",
          "[Removed Lines]",
          "168:             status = 'high'",
          "175:         cert_dic = {",
          "179:         return cert_dic",
          "",
          "[Added Lines]",
          "181:             status = HIGH",
          "182:             summary[HIGH] += 1",
          "189:         return {",
          "192:             'certificate_summary': summary,",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/db_interaction.py||mobsf/StaticAnalyzer/views/android/db_interaction.py": [
          "File: mobsf/StaticAnalyzer/views/android/db_interaction.py -> mobsf/StaticAnalyzer/views/android/db_interaction.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:             'certificate_analysis': python_dict(",
          "61:                 db_entry[0].CERTIFICATE_ANALYSIS),",
          "62:             'manifest_analysis': manifest_analysis,",
          "64:             'binary_analysis': python_list(db_entry[0].BINARY_ANALYSIS),",
          "65:             'file_analysis': python_list(db_entry[0].FILE_ANALYSIS),",
          "66:             'android_api': python_dict(db_entry[0].ANDROID_API),",
          "",
          "[Removed Lines]",
          "63:             'network_security': python_list(db_entry[0].NETWORK_SECURITY),",
          "",
          "[Added Lines]",
          "63:             'network_security': python_dict(db_entry[0].NETWORK_SECURITY),",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/network_security.py||mobsf/StaticAnalyzer/views/android/network_security.py": [
          "File: mobsf/StaticAnalyzer/views/android/network_security.py -> mobsf/StaticAnalyzer/views/android/network_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from pathlib import Path",
          "7: logger = logging.getLogger(__name__)",
          "10: def read_netsec_config(app_dir, config, src_type):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: HIGH = 'high'",
          "9: WARNING = 'warning'",
          "10: INFO = 'info'",
          "11: SECURE = 'secure'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: def analysis(app_dir, config, is_debuggable, src_type):",
          "38:     \"\"\"Perform Network Security Analysis.\"\"\"",
          "39:     try:",
          "40:         if not config:",
          "42:         netsec_conf = read_netsec_config(app_dir, config, src_type)",
          "43:         if not netsec_conf:",
          "45:         logger.info('Parsing Network Security Config')",
          "46:         parsed = minidom.parseString(netsec_conf)",
          "47:         finds = []",
          "48:         # Base Config",
          "49:         b_cfg = parsed.getElementsByTagName('base-config')",
          "50:         # 0 or 1 of <base-config>",
          "",
          "[Removed Lines]",
          "41:             return []",
          "44:             return []",
          "",
          "[Added Lines]",
          "44:         netsec = {",
          "45:             'network_findings': [],",
          "46:             'network_summary': {},",
          "47:         }",
          "49:             return netsec",
          "52:             return netsec",
          "56:         summary = {HIGH: 0, WARNING: 0, INFO: 0, SECURE: 0}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:                     'description': (",
          "56:                         'Base config is insecurely configured'",
          "57:                         ' to permit clear text traffic to all domains.'),",
          "59:                 })",
          "60:             if b_cfg[0].getAttribute('cleartextTrafficPermitted') == 'false':",
          "61:                 finds.append({",
          "62:                     'scope': ['*'],",
          "63:                     'description': (",
          "64:                         'Base config is configured to disallow '",
          "65:                         'clear text traffic to all domains.'),",
          "67:                 })",
          "68:             trst_anch = b_cfg[0].getElementsByTagName('trust-anchors')",
          "69:             if trst_anch:",
          "70:                 certs = trst_anch[0].getElementsByTagName('certificates')",
          "",
          "[Removed Lines]",
          "58:                     'severity': 'high',",
          "66:                     'severity': 'secure',",
          "",
          "[Added Lines]",
          "67:                     'severity': HIGH,",
          "69:                 summary[HIGH] += 1",
          "76:                     'severity': SECURE,",
          "78:                 summary[SECURE] += 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:                             'description': (",
          "78:                                 'Base config is configured to trust'",
          "79:                                 f'bundled certs {loc}.'),",
          "81:                         })",
          "82:                     elif loc == 'system':",
          "83:                         finds.append({",
          "84:                             'scope': ['*'],",
          "85:                             'description': (",
          "86:                                 'Base config is configured to trust'",
          "87:                                 ' system certificates.'),",
          "89:                         })",
          "90:                     elif loc == 'user':",
          "91:                         finds.append({",
          "92:                             'scope': ['*'],",
          "93:                             'description': (",
          "94:                                 'Base config is configured to trust'",
          "95:                                 ' user installed certificates.'),",
          "97:                         })",
          "98:                     if override == 'true':",
          "99:                         finds.append({",
          "100:                             'scope': ['*'],",
          "101:                             'description': (",
          "102:                                 'Base config is configured to '",
          "103:                                 'bypass certificate pinning.'),",
          "105:                         })",
          "106:         # Domain Config",
          "107:         dom_cfg = parsed.getElementsByTagName('domain-config')",
          "108:         # Any number of <domain-config>",
          "",
          "[Removed Lines]",
          "80:                             'severity': 'info',",
          "88:                             'severity': 'warning',",
          "96:                             'severity': 'high',",
          "104:                             'severity': 'high',",
          "",
          "[Added Lines]",
          "91:                             'severity': INFO,",
          "93:                         summary[INFO] += 1",
          "100:                             'severity': WARNING,",
          "102:                         summary[WARNING] += 1",
          "109:                             'severity': HIGH,",
          "111:                         summary[HIGH] += 1",
          "118:                             'severity': HIGH,",
          "120:                         summary[HIGH] += 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:                         'Domain config is insecurely configured'",
          "119:                         ' to permit clear text traffic to these '",
          "120:                         'domains in scope.'),",
          "122:                 })",
          "123:             elif cfg.getAttribute('cleartextTrafficPermitted') == 'false':",
          "124:                 finds.append({",
          "125:                     'scope': domain_list,",
          "",
          "[Removed Lines]",
          "121:                     'severity': 'high',",
          "",
          "[Added Lines]",
          "136:                     'severity': HIGH,",
          "138:                 summary[HIGH] += 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:                         'Domain config is securely configured'",
          "128:                         ' to disallow clear text traffic to these '",
          "129:                         'domains in scope.'),",
          "131:                 })",
          "132:             dtrust = cfg.getElementsByTagName('trust-anchors')",
          "133:             if dtrust:",
          "134:                 certs = dtrust[0].getElementsByTagName('certificates')",
          "",
          "[Removed Lines]",
          "130:                     'severity': 'secure',",
          "",
          "[Added Lines]",
          "146:                     'severity': SECURE,",
          "148:                 summary[SECURE] += 1",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:                             'description': (",
          "142:                                 'Domain config is configured to trust '",
          "143:                                 f'bundled certs {loc}.'),",
          "145:                         })",
          "146:                     elif loc == 'system':",
          "147:                         finds.append({",
          "148:                             'scope': domain_list,",
          "149:                             'description': (",
          "150:                                 'Domain config is configured to trust'",
          "151:                                 ' system certificates.'),",
          "153:                         })",
          "154:                     elif loc == 'user':",
          "155:                         finds.append({",
          "156:                             'scope': domain_list,",
          "157:                             'description': (",
          "158:                                 'Domain config is configured to trust'",
          "159:                                 ' user installed certificates.'),",
          "161:                         })",
          "162:                     if override == 'true':",
          "163:                         finds.append({",
          "164:                             'scope': domain_list,",
          "165:                             'description': (",
          "166:                                 'Domain config is configured to '",
          "167:                                 'bypass certificate pinning.'),",
          "169:                         })",
          "170:             pinsets = cfg.getElementsByTagName('pin-set')",
          "171:             if pinsets:",
          "172:                 exp = pinsets[0].getAttribute('expiration')",
          "",
          "[Removed Lines]",
          "144:                             'severity': 'info',",
          "152:                             'severity': 'warning',",
          "160:                             'severity': 'high',",
          "168:                             'severity': 'high',",
          "",
          "[Added Lines]",
          "161:                             'severity': INFO,",
          "163:                         summary[INFO] += 1",
          "170:                             'severity': WARNING,",
          "172:                         summary[WARNING] += 1",
          "179:                             'severity': HIGH,",
          "181:                         summary[HIGH] += 1",
          "188:                             'severity': HIGH,",
          "190:                         summary[HIGH] += 1",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "189:                             f'on {exp}. After this date '",
          "190:                             'pinning will be disabled. '",
          "191:                             f'[{pins_list}]'),",
          "193:                     })",
          "194:                 else:",
          "195:                     finds.append({",
          "196:                         'scope': domain_list,",
          "",
          "[Removed Lines]",
          "192:                         'severity': 'info',",
          "",
          "[Added Lines]",
          "213:                         'severity': INFO,",
          "215:                     summary[INFO] += 1",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200:                             'that pins are updated before '",
          "201:                             'certificate expire. '",
          "202:                             f'[{pins_list}]'),",
          "204:                     })",
          "205:         # Debug Overrides",
          "206:         de_over = parsed.getElementsByTagName('debug-overrides')",
          "207:         # 0 or 1 of <debug-overrides>",
          "",
          "[Removed Lines]",
          "203:                         'severity': 'secure',",
          "",
          "[Added Lines]",
          "225:                         'severity': SECURE,",
          "227:                     summary[SECURE] += 1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "213:                         'Debug override is configured to permit clear '",
          "214:                         'text traffic to all domains and the app '",
          "215:                         'is debuggable.'),",
          "217:                 })",
          "218:             otrst_anch = de_over[0].getElementsByTagName('trust-anchors')",
          "219:             if otrst_anch:",
          "220:                 certs = otrst_anch[0].getElementsByTagName('certificates')",
          "",
          "[Removed Lines]",
          "216:                     'severity': 'high',",
          "",
          "[Added Lines]",
          "239:                     'severity': HIGH,",
          "241:                 summary[HIGH] += 1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "227:                             'description': (",
          "228:                                 'Debug override is configured to trust '",
          "229:                                 f'bundled debug certs {loc}.'),",
          "231:                         })",
          "232:                     if override == 'true':",
          "233:                         finds.append({",
          "234:                             'scope': ['*'],",
          "235:                             'description': (",
          "236:                                 'Debug override is configured to '",
          "237:                                 'bypass certificate pinning.'),",
          "239:                         })",
          "241:     except Exception:",
          "242:         logger.exception('Performing Network Security Analysis')",
          "",
          "[Removed Lines]",
          "230:                             'severity': 'high',",
          "238:                             'severity': 'high',",
          "240:         return finds",
          "243:     return []",
          "",
          "[Added Lines]",
          "254:                             'severity': HIGH,",
          "256:                         summary[HIGH] += 1",
          "263:                             'severity': HIGH,",
          "265:                         summary[HIGH] += 1",
          "266:         netsec['network_findings'] = finds",
          "267:         netsec['network_summary'] = summary",
          "270:     return netsec",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/appsec.py||mobsf/StaticAnalyzer/views/common/appsec.py": [
          "File: mobsf/StaticAnalyzer/views/common/appsec.py -> mobsf/StaticAnalyzer/views/common/appsec.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: def common_fields(findings, data):",
          "28:     \"\"\"Common Fields for Android and iOS.\"\"\"",
          "29:     # Code Analysis",
          "31:         if cd['metadata']['severity'] == 'good':",
          "32:             sev = 'secure'",
          "33:         else:",
          "",
          "[Removed Lines]",
          "30:     for cd in data['code_analysis'].values():",
          "",
          "[Added Lines]",
          "30:     for cd in data['code_analysis']['findings'].values():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     else:",
          "187:         data = adb(context)",
          "188:     # Certificate Analysis",
          "190:         for i in data['certificate_analysis']['certificate_findings']:",
          "191:             if i[0] == 'info':",
          "192:                 continue",
          "",
          "[Removed Lines]",
          "189:     if 'certificate_findings' in data['certificate_analysis']:",
          "",
          "[Added Lines]",
          "189:     if (data.get('certificate_analysis')",
          "190:             and 'certificate_findings' in data['certificate_analysis']):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:                 'section': 'certificate',",
          "197:             })",
          "198:     # Network Security",
          "213:     # Manifest Analysis",
          "229:     common_fields(findings, data)",
          "230:     findings['version_name'] = data.get('version_name', '')",
          "231:     return findings",
          "",
          "[Removed Lines]",
          "199:     for n in data['network_security']:",
          "200:         desc = '\\n'.join(n['scope'])",
          "201:         desc = f'Scope:\\n{desc}\\n\\n'",
          "202:         title_parts = n['description'].split('.', 1)",
          "203:         if len(title_parts) > 1:",
          "204:             desc += title_parts[1].strip()",
          "205:             title = title_parts[0]",
          "206:         else:",
          "207:             title = n['description']",
          "208:         findings[n['severity']].append({",
          "209:             'title': title,",
          "210:             'description': desc,",
          "211:             'section': 'network',",
          "212:         })",
          "214:     for m in data['manifest_analysis']:",
          "215:         if m['severity'] == 'info':",
          "216:             continue",
          "217:         title = m['title'].replace('<strong>', '')",
          "218:         title = title.replace('</strong>', '')",
          "219:         fmt = title.split('<br>', 1)",
          "220:         if len(fmt) > 1:",
          "221:             desc = fmt[1].replace('<br>', '') + '\\n' + m['description']",
          "222:         else:",
          "223:             desc = m['description']",
          "224:         findings[m['severity']].append({",
          "225:             'title': fmt[0],",
          "226:             'description': desc,",
          "227:             'section': 'manifest',",
          "228:         })",
          "",
          "[Added Lines]",
          "200:     if (data.get('network_security')",
          "201:             and 'network_findings' in data['network_security']):",
          "202:         for n in data['network_security']['network_findings']:",
          "203:             desc = '\\n'.join(n['scope'])",
          "204:             desc = f'Scope:\\n{desc}\\n\\n'",
          "205:             title_parts = n['description'].split('.', 1)",
          "206:             if len(title_parts) > 1:",
          "207:                 desc += title_parts[1].strip()",
          "208:                 title = title_parts[0]",
          "209:             else:",
          "210:                 title = n['description']",
          "211:             findings[n['severity']].append({",
          "212:                 'title': title,",
          "213:                 'description': desc,",
          "214:                 'section': 'network',",
          "215:             })",
          "217:     if (data.get('manifest_analysis')",
          "218:             and 'manifest_findings' in data['manifest_analysis']):",
          "219:         for m in data['manifest_analysis']['manifest_findings']:",
          "220:             if m['severity'] == 'info':",
          "221:                 continue",
          "222:             title = m['title'].replace('<strong>', '')",
          "223:             title = title.replace('</strong>', '')",
          "224:             fmt = title.split('<br>', 1)",
          "225:             if len(fmt) > 1:",
          "226:                 desc = fmt[1].replace('<br>', '') + '\\n' + m['description']",
          "227:             else:",
          "228:                 desc = m['description']",
          "229:             findings[m['severity']].append({",
          "230:                 'title': fmt[0],",
          "231:                 'description': desc,",
          "232:                 'section': 'manifest',",
          "233:             })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246:     else:",
          "247:         data = idb(context)",
          "248:     # Transport Security",
          "255:     # Binary Code Analysis",
          "266:     # Macho Analysis",
          "267:     ma = data['macho_analysis']",
          "268:     if ma:",
          "",
          "[Removed Lines]",
          "249:     for n in data['ats_analysis']:",
          "250:         findings[n['severity']].append({",
          "251:             'title': n['issue'],",
          "252:             'description': n['description'],",
          "253:             'section': 'network',",
          "254:         })",
          "256:     for issue, cd in data['binary_analysis'].items():",
          "257:         if cd['severity'] == 'good':",
          "258:             sev = 'secure'",
          "259:         else:",
          "260:             sev = cd['severity']",
          "261:         findings[sev].append({",
          "262:             'title': issue,",
          "263:             'description': str(cd['detailed_desc']),",
          "264:             'section': 'binary',",
          "265:         })",
          "",
          "[Added Lines]",
          "254:     if (data.get('ats_analysis')",
          "255:             and 'ats_findings' in data['ats_analysis']):",
          "256:         for n in data['ats_analysis']['ats_findings']:",
          "257:             findings[n['severity']].append({",
          "258:                 'title': n['issue'],",
          "259:                 'description': n['description'],",
          "260:                 'section': 'network',",
          "261:             })",
          "263:     if (data.get('binary_analysis')",
          "264:             and 'findings' in data['binary_analysis']):",
          "265:         for issue, cd in data['binary_analysis']['findings'].items():",
          "266:             if cd['severity'] == 'good':",
          "267:                 sev = 'secure'",
          "268:             else:",
          "269:                 sev = cd['severity']",
          "270:             findings[sev].append({",
          "271:                 'title': issue,",
          "272:                 'description': str(cd['detailed_desc']),",
          "273:                 'section': 'binary',",
          "274:             })",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/suppression.py||mobsf/StaticAnalyzer/views/common/suppression.py": [
          "File: mobsf/StaticAnalyzer/views/common/suppression.py -> mobsf/StaticAnalyzer/views/common/suppression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: logger = logging.getLogger(__name__)",
          "34: def get_package(checksum):",
          "35:     \"\"\"Get package from checksum.\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: HIGH = 'high'",
          "34: WARNING = 'warning'",
          "35: INFO = 'info'",
          "36: SECURE = 'secure'",
          "37: GOOD = 'good'",
          "38: SUPPRESSED = 'suppressed'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233: def process_suppression(data, package):",
          "234:     \"\"\"Process all suppression for code.\"\"\"",
          "235:     filtered = {}",
          "236:     filters = SuppressFindings.objects.filter(",
          "237:         PACKAGE_NAME=package,",
          "238:         SUPPRESS_TYPE='code')",
          "239:     if not filters.exists():",
          "248:     else:",
          "267: def process_suppression_manifest(data, package):",
          "268:     \"\"\"Process all suppression for manifest.\"\"\"",
          "269:     filtered = []",
          "270:     filters = SuppressFindings.objects.filter(",
          "271:         PACKAGE_NAME=package,",
          "272:         SUPPRESS_TYPE='manifest')",
          "273:     if not filters.exists():",
          "285:         filtered = data",
          "",
          "[Removed Lines]",
          "240:         return data",
          "242:     # Priority to rules",
          "243:     filter_rules = python_list(filters[0].SUPPRESS_RULE_ID)",
          "244:     if filter_rules:",
          "245:         for k in data:",
          "246:             if k not in filter_rules:",
          "247:                 filtered[k] = data[k]",
          "249:         filtered = deepcopy(data)",
          "251:     # Process by files",
          "252:     filter_files = python_dict(filters[0].SUPPRESS_FILES)",
          "253:     cleaned = copy(filtered)",
          "254:     if filter_files:",
          "255:         for k in filtered:",
          "256:             if k not in filter_files.keys():",
          "257:                 continue",
          "258:             for rem_file in filter_files[k]:",
          "259:                 if rem_file in filtered[k]['files']:",
          "260:                     del filtered[k]['files'][rem_file]",
          "261:             # Remove rule_id with not files",
          "262:             if len(filtered[k]['files']) == 0:",
          "263:                 del cleaned[k]",
          "264:     return cleaned",
          "274:         return data",
          "276:     filter_rules = python_list(filters[0].SUPPRESS_RULE_ID)",
          "277:     if filter_rules:",
          "278:         for k in data:",
          "279:             rule = k['rule']",
          "280:             title = k['title']",
          "281:             dynamic_rule = f'{android_component(title)}{rule}'",
          "282:             if dynamic_rule not in filter_rules:",
          "283:                 filtered.append(k)",
          "284:     else:",
          "286:     return filtered",
          "",
          "[Added Lines]",
          "243:     summary = {HIGH: 0, WARNING: 0, INFO: 0,",
          "244:                SECURE: 0, SUPPRESSED: 0}",
          "245:     if len(data) == 0:",
          "246:         return {",
          "247:             'findings': data,",
          "248:             'summary': {},",
          "249:         }",
          "254:         cleaned = data",
          "256:         # Priority to rules",
          "257:         filter_rules = python_list(filters[0].SUPPRESS_RULE_ID)",
          "258:         if filter_rules:",
          "259:             for k in data:",
          "260:                 if k not in filter_rules:",
          "261:                     filtered[k] = data[k]",
          "262:                 else:",
          "263:                     summary[SUPPRESSED] += 1",
          "264:         else:",
          "265:             filtered = deepcopy(data)",
          "267:         # Process by files",
          "268:         filter_files = python_dict(filters[0].SUPPRESS_FILES)",
          "269:         cleaned = copy(filtered)",
          "270:         if filter_files:",
          "271:             for k in filtered:",
          "272:                 if k not in filter_files.keys():",
          "273:                     continue",
          "274:                 for rem_file in filter_files[k]:",
          "275:                     if rem_file in filtered[k]['files']:",
          "276:                         del filtered[k]['files'][rem_file]",
          "277:                         summary[SUPPRESSED] += 1",
          "278:                 # Remove rule_id with no files",
          "279:                 if len(filtered[k]['files']) == 0:",
          "280:                     del cleaned[k]",
          "281:     for v in cleaned.values():",
          "282:         if 'severity' in v:",
          "283:             # iOS binary code",
          "284:             sev = v['severity']",
          "285:         else:",
          "286:             sev = v['metadata']['severity']",
          "287:         if sev == HIGH:",
          "288:             summary[HIGH] += 1",
          "289:         elif sev == WARNING:",
          "290:             summary[WARNING] += 1",
          "291:         elif sev == INFO:",
          "292:             summary[INFO] += 1",
          "293:         elif sev == GOOD or sev == SECURE:",
          "294:             summary[SECURE] += 1",
          "295:     return {",
          "296:         'findings': cleaned,",
          "297:         'summary': summary,",
          "298:     }",
          "304:     summary = {HIGH: 0, WARNING: 0, INFO: 0, SUPPRESSED: 0}",
          "310:     else:",
          "311:         filter_rules = python_list(filters[0].SUPPRESS_RULE_ID)",
          "312:         if filter_rules:",
          "313:             for k in data:",
          "314:                 rule = k['rule']",
          "315:                 title = k['title']",
          "316:                 dynamic_rule = f'{android_component(title)}{rule}'",
          "317:                 if dynamic_rule not in filter_rules:",
          "318:                     filtered.append(k)",
          "319:                 else:",
          "320:                     summary[SUPPRESSED] += 1",
          "321:         else:",
          "322:             filtered = data",
          "323:     for i in filtered:",
          "324:         if i['severity'] == HIGH:",
          "325:             summary[HIGH] += 1",
          "326:         elif i['severity'] == WARNING:",
          "327:             summary[WARNING] += 1",
          "328:         elif ['severity'] == INFO:",
          "329:             summary[INFO] += 1",
          "330:     return {",
          "331:         'manifest_findings': filtered,",
          "332:         'manifest_summary': summary,",
          "333:     }",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/db_interaction.py||mobsf/StaticAnalyzer/views/ios/db_interaction.py": [
          "File: mobsf/StaticAnalyzer/views/ios/db_interaction.py -> mobsf/StaticAnalyzer/views/ios/db_interaction.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             'info_plist': db_entry[0].INFO_PLIST,",
          "46:             'binary_info': python_dict(db_entry[0].BINARY_INFO),",
          "47:             'permissions': python_dict(db_entry[0].PERMISSIONS),",
          "49:             'binary_analysis': binary,",
          "50:             'macho_analysis': python_dict(db_entry[0].MACHO_ANALYSIS),",
          "51:             'ios_api': python_dict(db_entry[0].IOS_API),",
          "",
          "[Removed Lines]",
          "48:             'ats_analysis': python_list(db_entry[0].ATS_ANALYSIS),",
          "",
          "[Added Lines]",
          "48:             'ats_analysis': python_dict(db_entry[0].ATS_ANALYSIS),",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/plist_analysis.py||mobsf/StaticAnalyzer/views/ios/plist_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/ios/plist_analysis.py -> mobsf/StaticAnalyzer/views/ios/plist_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: logger = logging.getLogger(__name__)",
          "37: SKIP_PATH = {'__MACOSX', 'Pods'}",
          "40: def get_bundle_id(pobj, src):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: HIGH = 'high'",
          "39: WARNING = 'warning'",
          "40: INFO = 'info'",
          "41: SECURE = 'secure'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:             'min': '',",
          "119:             'plist_xml': '',",
          "120:             'permissions': {},",
          "122:             'bundle_name': '',",
          "123:             'build_version_name': '',",
          "124:             'bundle_url_types': [],",
          "",
          "[Removed Lines]",
          "121:             'inseccon': [],",
          "",
          "[Added Lines]",
          "125:             'inseccon': {},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:             'CFBundleSupportedPlatforms', [])",
          "185:         logger.info('Checking Permissions')",
          "186:         logger.info('Checking for Insecure Connections')",
          "187:         for plist_file_ in plist_files:",
          "188:             plist_obj_ = {}",
          "189:             with open(plist_file_, 'rb') as fp:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:         ats = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:             # Check for app-permissions",
          "192:             plist_info['permissions'].update(check_permissions(plist_obj_))",
          "193:             # Check for ats misconfigurations",
          "195:         return plist_info",
          "196:     except Exception:",
          "197:         logger.exception('Reading from Info.plist')",
          "200: def get_plist_secrets(xml_string):",
          "201:     \"\"\"Get possible hardcoded secrets from plist.\"\"\"",
          "202:     result_list = []",
          "",
          "[Removed Lines]",
          "194:             plist_info['inseccon'] += check_transport_security(plist_obj_)",
          "",
          "[Added Lines]",
          "199:             ats += check_transport_security(plist_obj_)",
          "200:         plist_info['inseccon'] = {",
          "201:             'ats_findings': ats,",
          "202:             'ats_summary': get_summary(ats),",
          "203:         }",
          "209: def get_summary(ats):",
          "210:     \"\"\"Get ATS finding summary.\"\"\"",
          "211:     if len(ats) == 0:",
          "212:         return {}",
          "213:     summary = {HIGH: 0, WARNING: 0, INFO: 0, SECURE: 0}",
          "214:     for i in ats:",
          "215:         if i['severity'] == HIGH:",
          "216:             summary[HIGH] += 1",
          "217:         elif i['severity'] == WARNING:",
          "218:             summary[WARNING] += 1",
          "219:         elif i['severity'] == INFO:",
          "220:             summary[INFO] += 1",
          "221:         elif i['severity'] == SECURE:",
          "222:             summary[SECURE] += 1",
          "223:     return summary",
          "",
          "---------------"
        ],
        "mobsf/templates/pdf/android_report.html||mobsf/templates/pdf/android_report.html": [
          "File: mobsf/templates/pdf/android_report.html -> mobsf/templates/pdf/android_report.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:       {% endif %}",
          "404:      <h2><i class=\"fas fa-lock\"></i> NETWORK SECURITY</h2>",
          "405:      <table class=\"basic\">",
          "441:       <h2><i class=\"fas fa fa-id-card\"></i> CERTIFICATE ANALYSIS</h2>",
          "442:       <table class=\"basic\">",
          "443:         <thead>",
          "444:             <tr>",
          "",
          "[Removed Lines]",
          "406:                     <thead>",
          "407:                         <tr>",
          "408:                           <th>NO</th>",
          "409:                           <th>SCOPE</th>",
          "410:                           <th>SEVERITY</th>",
          "411:                           <th>DESCRIPTION</th>",
          "412:                                 </tr>",
          "413:                             </thead>",
          "414:                             <tbody>",
          "415:                     {% for item in network_security %}",
          "416:                       <tr>",
          "417:                         <td>{{ forloop.counter }}</td>",
          "418:                         <td>",
          "419:                          {% for url in item.scope %}",
          "420:                           {{ url }}</br>",
          "421:                         {% endfor %}",
          "422:                         </td>",
          "423:                         <td>",
          "424:                           {% if item.severity == \"high\" %}",
          "425:                             <span class=\"danger\">high</span>",
          "426:                           {% elif item.severity == \"secure\" %}",
          "427:                             <span class=\"good\">secure</span>",
          "428:                           {% elif item.severity == \"info\" %}",
          "429:                             <span class=\"info\">info</span>",
          "430:                           {% elif item.severity == \"warning\" %}",
          "431:                              <span class=\"warning\">warning</span>",
          "432:                           {% endif %}",
          "433:                         </td>",
          "434:                         <td>",
          "435:                         {{item.description }}",
          "436:                         </td>",
          "437:                        </tr>",
          "438:                      {% endfor %}",
          "439:           </tbody>",
          "440:           </table>",
          "",
          "[Added Lines]",
          "405:      {% if network_security and 'network_summary' in network_security and network_security.network_summary|length > 0 %}",
          "406:      <span class=\"danger\">HIGH: </span>",
          "407:      <h5 class=\"description-header\">{{ network_security.network_summary.high }}</h5> |",
          "408:      <span class=\"warning\"></i> WARNING: </span>",
          "409:      <h5 class=\"description-header\">{{ network_security.network_summary.warning }}</h5> |",
          "410:      <span class=\"info\">INFO: </span>",
          "411:      <h5 class=\"description-header\">{{ network_security.network_summary.info }}</h5> |",
          "412:      <span class=\"success\">SECURE: </span>",
          "413:      <h5 class=\"description-header\">{{ network_security.network_summary.secure }}</h5>",
          "414:    {% endif %}</br>",
          "416:         <thead>",
          "417:             <tr>",
          "418:               <th>NO</th>",
          "419:               <th>SCOPE</th>",
          "420:               <th>SEVERITY</th>",
          "421:               <th>DESCRIPTION</th>",
          "422:                     </tr>",
          "423:                 </thead>",
          "424:                 <tbody>",
          "425:         {% if network_security and 'network_findings' in network_security %}",
          "426:         {% for item in network_security.network_findings %}",
          "427:           <tr>",
          "428:             <td>{{ forloop.counter }}</td>",
          "429:             <td>",
          "430:               {% for url in item.scope %}",
          "431:               {{ url }}</br>",
          "432:             {% endfor %}",
          "433:             </td>",
          "434:             <td>",
          "435:               {% if item.severity == \"high\" %}",
          "436:                 <span class=\"danger\">high</span>",
          "437:               {% elif item.severity == \"secure\" %}",
          "438:                 <span class=\"success\">secure</span>",
          "439:               {% elif item.severity == \"info\" %}",
          "440:                 <span class=\"info\">info</span>",
          "441:               {% elif item.severity == \"warning\" %}",
          "442:                   <span class=\"warning\">warning</span>",
          "443:               {% endif %}",
          "444:             </td>",
          "445:             <td>",
          "446:             {{item.description }}",
          "447:             </td>",
          "448:             </tr>",
          "449:           {% endfor %}",
          "450:           {% endif %}",
          "451:         </tbody>",
          "452:         </table>",
          "455:       {% if certificate_analysis and 'certificate_summary' in certificate_analysis and certificate_analysis.certificate_summary|length > 0 %}",
          "456:       <span class=\"danger\">HIGH: </span>",
          "457:       <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.high }}</h5> |",
          "458:       <span class=\"warning\"></i> WARNING: </span>",
          "459:       <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.warning }}</h5> |",
          "460:       <span class=\"info\">INFO: </span>",
          "461:       <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.info }}</h5>",
          "462:     {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:             </tr>",
          "449:         </thead>",
          "450:         <tbody>",
          "452:             {% for find in certificate_analysis.certificate_findings %}",
          "453:             <tr>",
          "454:             <td>{{ find.2 }}</td>",
          "",
          "[Removed Lines]",
          "451:           {% if 'certificate_findings' in certificate_analysis %}",
          "",
          "[Added Lines]",
          "472:           {% if certificate_analysis and 'certificate_findings' in certificate_analysis %}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469:           {% endif %}",
          "470:         </tbody>",
          "471:     </table>",
          "472:     <h2><i class=\"fas fa-search\"></i> MANIFEST ANALYSIS</h2>",
          "473:      <table class=\"basic\">",
          "474:                     <thead>",
          "475:                         <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:     {% if manifest_analysis and 'manifest_summary' in manifest_analysis and manifest_analysis.manifest_summary|length > 0 %}",
          "496:     <span class=\"danger\">HIGH: </span>",
          "497:     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.high }}</h5> |",
          "498:     <span class=\"warning\"></i> WARNING: </span>",
          "499:     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.warning }}</h5> |",
          "500:     <span class=\"info\">INFO: </span>",
          "501:     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.info }}</h5> |",
          "502:     <span class=\"disabled\">SUPPRESSED: </span>",
          "503:     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.suppressed }}</h5>",
          "504:   {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "480:                                 </tr>",
          "481:                             </thead>",
          "482:                             <tbody>",
          "505:                      {% endfor %}",
          "508:           </tbody>",
          "509:           </table>",
          "511:       <h2><i class=\"fas fa-code\"></i> CODE ANALYSIS</h2>",
          "512:        <table class=\"basic\">",
          "513:                 <thead>",
          "514:                     <tr>",
          "",
          "[Removed Lines]",
          "483:            {% for item in manifest_analysis %}",
          "484:                       <tr>",
          "485:                         <td>{{ forloop.counter }}</td>",
          "486:                         <td>",
          "487:                         {{item|key:\"title\" | safe}}",
          "488:                         </td>",
          "489:                         <td>",
          "491:                           {% if item|key:\"severity\" == \"high\" %}",
          "492:                             <span class=\"danger\">high</span>",
          "493:                           {% elif item|key:\"severity\" == \"info\" %}",
          "494:                             <span class=\"info\">info</span>",
          "495:                           {% elif item|key:\"severity\" == \"warning\" %}",
          "496:                             <span class=\"warning\">warning</span>",
          "497:                           {% endif %}",
          "499:                         </td>",
          "500:                         <td>",
          "501:                         {{item|key:\"description\"}}",
          "502:                         </td>",
          "504:                        </tr>",
          "",
          "[Added Lines]",
          "515:                     {% if manifest_analysis and 'manifest_findings' in manifest_analysis %}",
          "516:                     {% for item in manifest_analysis.manifest_findings %}",
          "517:                     <tr>",
          "518:                       <td>{{ forloop.counter }}</td>",
          "519:                       <td>",
          "520:                       {{item|key:\"title\" | safe}}",
          "521:                       </td>",
          "522:                       <td>",
          "524:                         {% if item|key:\"severity\" == \"high\" %}",
          "525:                           <span class=\"danger\">high</span>",
          "526:                         {% elif item|key:\"severity\" == \"info\" %}",
          "527:                           <span class=\"info\">info</span>",
          "528:                         {% elif item|key:\"severity\" == \"warning\" %}",
          "529:                           <span class=\"warning\">warning</span>",
          "530:                         {% endif %}",
          "532:                       </td>",
          "533:                       <td>",
          "534:                       {{item|key:\"description\"}}",
          "535:                       </td>",
          "537:                      </tr>",
          "539:                      {% endif %}",
          "545:       {% if code_analysis and 'summary' in code_analysis and code_analysis.summary|length > 0 %}",
          "546:       <span class=\"danger\">HIGH: </span>",
          "547:       <h5 class=\"description-header\">{{ code_analysis.summary.high }}</h5> |",
          "548:       <span class=\"warning\"></i> WARNING: </span>",
          "549:       <h5 class=\"description-header\">{{ code_analysis.summary.warning }}</h5> |",
          "550:       <span class=\"info\">INFO: </span>",
          "551:       <h5 class=\"description-header\">{{ code_analysis.summary.info }}</h5> |",
          "552:       <span class=\"success\">SECURE: </span>",
          "553:       <h5 class=\"description-header\">{{ code_analysis.summary.secure }}</h5> |",
          "554:       <span class=\"disabled\">SUPPRESSED: </span>",
          "555:       <h5 class=\"description-header\">{{ code_analysis.summary.suppressed }}</h5>",
          "556:     {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "520:                     </tr>",
          "521:                 </thead>",
          "522:                 <tbody>",
          "524:                   <tr>",
          "525:                   <td>{{ forloop.counter }}</td>",
          "526:                   <td width=\"25%\">",
          "",
          "[Removed Lines]",
          "523:                    {% for rule, details in code_analysis.items %}",
          "",
          "[Added Lines]",
          "568:                    {% if code_analysis and 'findings' in code_analysis %}",
          "569:                    {% for rule, details in code_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "568:                   </td>",
          "569:                 </tr>",
          "570:               {% endfor %}",
          "574:      {% if binary_analysis  %}",
          "575:       <h2><i class=\"fa fa-flag\"></i> SHARED LIBRARY BINARY ANALYSIS</h2>",
          "",
          "[Removed Lines]",
          "571:           </tbody>",
          "572:           </table>",
          "",
          "[Added Lines]",
          "617:               {% endif %}",
          "618:           </tbody>",
          "619:           </table>",
          "",
          "---------------"
        ],
        "mobsf/templates/pdf/ios_report.html||mobsf/templates/pdf/ios_report.html": [
          "File: mobsf/templates/pdf/ios_report.html -> mobsf/templates/pdf/ios_report.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:       <h5>Min OS Version:</h5> {{ min_os_version }}</br>",
          "183:       <h5>Supported Platforms:</h5> {% for pl in bundle_supported_platforms %} {{pl}}, {% endfor %}</br>",
          "186:       <h2><i class=\"fas fa-ad\"></i> BINARY INFORMATION </h2>",
          "188:       <h5>Arch:</h5> {{ binary_info.arch }}</br>",
          "",
          "[Removed Lines]",
          "185:      {% if binary_analysis %}",
          "",
          "[Added Lines]",
          "185:      {% if binary_info %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:        {% if ats_analysis  %}",
          "262:       <h2><i class=\"fas fa-lock\"></i> APP TRANSPORT SECURITY (ATS)</h2>",
          "263:        <table class=\"basic\">",
          "264:                    <thead>",
          "265:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:       {% if ats_analysis and 'ats_summary' in ats_analysis and ats_analysis.ats_summary|length > 0 %}",
          "264:       <span class=\"danger\">HIGH: </span>",
          "265:       <h5 class=\"description-header\">{{ ats_analysis.ats_summary.high }}</h5> |",
          "266:       <span class=\"warning\"></i> WARNING: </span>",
          "267:       <h5 class=\"description-header\">{{ ats_analysis.ats_summary.warning }}</h5> |",
          "268:       <span class=\"info\">INFO: </span>",
          "269:       <h5 class=\"description-header\">{{ ats_analysis.ats_summary.info }}</h5> |",
          "270:       <span class=\"success\">SECURE: </span>",
          "271:       <h5 class=\"description-header\">{{ ats_analysis.ats_summary.secure }}</h5>",
          "272:     {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:                       </tr>",
          "271:                   </thead>",
          "272:                   <tbody>",
          "275:                         <tr>",
          "276:                           <td>{{ forloop.counter }}</td>",
          "277:                           <td>",
          "",
          "[Removed Lines]",
          "273:                     {% if ats_analysis|length > 0 %}",
          "274:                       {% for findings in ats_analysis %}",
          "",
          "[Added Lines]",
          "283:                     {% if ats_analysis and 'ats_findings' in ats_analysis %}",
          "284:                       {% for findings in ats_analysis.ats_findings %}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "292:                           </td>",
          "293:                         </tr>",
          "294:                       {% endfor %}",
          "306:                     {% endif %}",
          "307:                   </tbody>",
          "308:                     </table>",
          "309:         {% endif %}",
          "",
          "[Removed Lines]",
          "295:                     {% else %}",
          "296:                     <tr>",
          "297:                       <td>",
          "298:                         No ATS exceptions found.",
          "299:                       <td>",
          "300:                         <span class=\"success\">secure</span>",
          "301:                       </td>",
          "302:                       <td>",
          "303:                         No insecure connections configured. App Transport Security (ATS) is enabled.",
          "304:                       </td>",
          "305:                     </tr>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371:       {% if binary_analysis  %}",
          "372:       <h2><i class=\"fas fa-code\"></i> IPA BINARY CODE ANALYSIS</h2>",
          "373:        <table class=\"basic\">",
          "374:                   <thead>",
          "375:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373:       {% if binary_analysis and 'summary' in binary_analysis and binary_analysis.summary|length > 0 %}",
          "374:       <span class=\"danger\">HIGH: </span>",
          "375:       <h5 class=\"description-header\">{{ binary_analysis.summary.high }}</h5> |",
          "376:       <span class=\"warning\"></i> WARNING: </span>",
          "377:       <h5 class=\"description-header\">{{ binary_analysis.summary.warning }}</h5> |",
          "378:       <span class=\"info\">INFO: </span>",
          "379:       <h5 class=\"description-header\">{{ binary_analysis.summary.info }}</h5> |",
          "380:       <span class=\"success\">SECURE: </span>",
          "381:       <h5 class=\"description-header\">{{ binary_analysis.summary.secure }}</h5> |",
          "382:       <span class=\"disabled\">SUPPRESSED: </span>",
          "383:       <h5 class=\"description-header\">{{ binary_analysis.summary.suppressed }}</h5>",
          "384:     {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "382:                       </tr>",
          "383:                   </thead>",
          "384:                      <tbody>",
          "386:                     <tr>",
          "387:                       <td>{{ forloop.counter }}</td>",
          "388:                       <td>",
          "",
          "[Removed Lines]",
          "385:                    {% for issue, details in binary_analysis.items %}",
          "",
          "[Added Lines]",
          "397:                    {% if binary_analysis and 'findings' in binary_analysis %}",
          "398:                    {% for issue, details in binary_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "422:                       </td>",
          "423:                     </tr>",
          "424:                     {% endfor %}",
          "425:                  </tbody>",
          "426:                     </table>",
          "427:         {% endif %}",
          "428:         {% if macho_analysis  %}",
          "429:       <h2><i class=\"fas fa-flag\"></i> IPA BINARY ANALYSIS</h2>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:                     {% endif %}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "494:         {% endif %}",
          "495:     {% if code_analysis  %}",
          "496:       <h2><i class=\"fas fa-code\"></i> CODE ANALYSIS</h2>",
          "497:        <table class=\"basic\">",
          "498:                 <thead>",
          "499:                     <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:       {% if code_analysis and 'summary' in code_analysis and code_analysis.summary|length > 0 %}",
          "513:       <span class=\"danger\">HIGH: </span>",
          "514:       <h5 class=\"description-header\">{{ code_analysis.summary.high }}</h5> |",
          "515:       <span class=\"warning\"></i> WARNING: </span>",
          "516:       <h5 class=\"description-header\">{{ code_analysis.summary.warning }}</h5> |",
          "517:       <span class=\"info\">INFO: </span>",
          "518:       <h5 class=\"description-header\">{{ code_analysis.summary.info }}</h5> |",
          "519:       <span class=\"success\">SECURE: </span>",
          "520:       <h5 class=\"description-header\">{{ code_analysis.summary.secure }}</h5> |",
          "521:       <span class=\"disabled\">SUPPRESSED: </span>",
          "522:       <h5 class=\"description-header\">{{ code_analysis.summary.suppressed }}</h5>",
          "523:     {% endif %}</br>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "505:                     </tr>",
          "506:                 </thead>",
          "507:                 <tbody>",
          "509:                   <tr>",
          "510:                   <td>{{ forloop.counter }}</td>",
          "511:                   <td width=\"25%\">",
          "",
          "[Removed Lines]",
          "508:           {% for rule, details in code_analysis.items %}",
          "",
          "[Added Lines]",
          "535:                   {% if code_analysis and 'findings' in code_analysis %}",
          "536:           {% for rule, details in code_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "551:                   {% endfor %}",
          "552:                   </td>",
          "553:                 </tr>",
          "557:       {% endif %}",
          "558:       {% if domains  %}",
          "559:       <h2><i class=\"fab fa-searchengin\"></i> DOMAIN MALWARE CHECK</h2>",
          "",
          "[Removed Lines]",
          "554:               {% endfor %}",
          "555:           </tbody>",
          "556:           </table>",
          "",
          "[Added Lines]",
          "582:               {% endfor %}",
          "583:               {% endif %}",
          "584:               </tbody>",
          "585:               </table>",
          "",
          "---------------"
        ],
        "mobsf/templates/static_analysis/android_binary_analysis.html||mobsf/templates/static_analysis/android_binary_analysis.html": [
          "File: mobsf/templates/static_analysis/android_binary_analysis.html -> mobsf/templates/static_analysis/android_binary_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:              <strong><i class=\"fas fa-lock\"></i> NETWORK SECURITY</strong>",
          "880:              </p>",
          "881:               <div class=\"table-responsive\">",
          "882:                 <table id=\"table_network\" class=\"table table-bordered table-hover table-striped\">",
          "883:                       <thead>",
          "884:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:                 {% if network_security and 'network_summary' in network_security and network_security.network_summary|length > 0  %}",
          "883:                   <div class=\"row\">",
          "884:                     <div class=\"col-sm-3 col-6\">",
          "885:                     <div class=\"description-block border-right\">",
          "886:                     <span class=\"text-danger\">HIGH</span>",
          "887:                     <h5 class=\"description-header\">{{ network_security.network_summary.high }}</h5>",
          "888:                     </div>",
          "889:                     </div>",
          "891:                     <div class=\"col-sm-3 col-6\">",
          "892:                     <div class=\"description-block border-right\">",
          "893:                     <span class=\"text-warning\"></i> WARNING</span>",
          "894:                     <h5 class=\"description-header\">{{ network_security.network_summary.warning }}</h5>",
          "895:                     </div>",
          "897:                     </div>",
          "899:                     <div class=\"col-sm-3 col-6\">",
          "900:                     <div class=\"description-block border-right\">",
          "901:                     <span class=\"text-info\">INFO</span>",
          "902:                     <h5 class=\"description-header\">{{ network_security.network_summary.info }}</h5>",
          "903:                     </div>",
          "905:                     </div>",
          "907:                     <div class=\"col-sm-3 col-6\">",
          "908:                       <div class=\"description-block\">",
          "909:                       <span class=\"text-success\">SECURE</span>",
          "910:                       <h5 class=\"description-header\">{{ network_security.network_summary.secure }}</h5>",
          "911:                       </div>",
          "913:                       </div>",
          "916:                     </div>",
          "917:                     {% endif %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "889:                         </tr>",
          "890:                     </thead>",
          "891:                     <tbody>",
          "893:                       <tr>",
          "894:                         <td>{{ forloop.counter }}</td>",
          "895:                         <td>",
          "",
          "[Removed Lines]",
          "892:                     {% for item in network_security %}",
          "",
          "[Added Lines]",
          "928:                     {% if network_security and 'network_findings' in network_security %}",
          "929:                     {% for item in network_security.network_findings %}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "913:                         </td>",
          "914:                        </tr>",
          "915:                      {% endfor %}",
          "916:                     </tbody>",
          "917:                   </table>",
          "918:                   </div>",
          "919:           </div>",
          "920:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "953:                      {% endif %}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "937:              <strong><i class=\"fa fa-id-card\"></i> CERTIFICATE ANALYSIS</strong>",
          "938:              </p>",
          "939:               <div class=\"table-responsive\">",
          "941:                 <table id=\"table_cert\" class=\"table table-bordered table-hover table-striped\">",
          "942:                   <thead>",
          "943:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "980:                 {% if certificate_analysis and 'certificate_summary' in certificate_analysis and certificate_analysis.certificate_summary|length > 0  %}",
          "981:                 <div class=\"row\">",
          "982:                   <div class=\"col-sm-3 col-6\">",
          "983:                   <div class=\"description-block border-right\">",
          "984:                   <span class=\"text-danger\">HIGH</span>",
          "985:                   <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.high }}</h5>",
          "986:                   </div>",
          "987:                   </div>",
          "989:                   <div class=\"col-sm-3 col-6\">",
          "990:                   <div class=\"description-block border-right\">",
          "991:                   <span class=\"text-warning\"></i> WARNING</span>",
          "992:                   <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.warning }}</h5>",
          "993:                   </div>",
          "995:                   </div>",
          "997:                   <div class=\"col-sm-3 col-6\">",
          "998:                   <div class=\"description-block\">",
          "999:                   <span class=\"text-info\">INFO</span>",
          "1000:                   <h5 class=\"description-header\">{{ certificate_analysis.certificate_summary.info }}</h5>",
          "1001:                   </div>",
          "1003:                   </div>",
          "1005:                   </div>",
          "1006:                   {% endif %}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "947:                       </tr>",
          "948:                   </thead>",
          "949:                   <tbody>",
          "951:                       {% for find in certificate_analysis.certificate_findings %}",
          "952:                       <tr>",
          "953:                       <td>{{ find.2 }}</td>",
          "",
          "[Removed Lines]",
          "950:                     {% if certificate_analysis %}",
          "",
          "[Added Lines]",
          "1016:                     {% if certificate_analysis and 'certificate_findings' in certificate_analysis %}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "988:              <strong><i class=\"fas fa-search\"></i> MANIFEST ANALYSIS</strong>",
          "989:              </p>",
          "990:               <div class=\"table-responsive\">",
          "991:                 <table id=\"table_manifest\" class=\"table table-bordered table-hover table-striped\">",
          "992:                       <thead>",
          "993:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:                 {% if manifest_analysis and 'manifest_summary' in manifest_analysis and manifest_analysis.manifest_summary|length > 0%}",
          "1059:                   <div class=\"row\">",
          "1060:                     <div class=\"col-sm-3 col-6\">",
          "1061:                     <div class=\"description-block border-right\">",
          "1062:                     <span class=\"text-danger\">HIGH</span>",
          "1063:                     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.high }}</h5>",
          "1064:                     </div>",
          "1065:                     </div>",
          "1067:                     <div class=\"col-sm-3 col-6\">",
          "1068:                     <div class=\"description-block border-right\">",
          "1069:                     <span class=\"text-warning\"></i> WARNING</span>",
          "1070:                     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.warning }}</h5>",
          "1071:                     </div>",
          "1073:                     </div>",
          "1075:                     <div class=\"col-sm-3 col-6\">",
          "1076:                     <div class=\"description-block border-right\">",
          "1077:                     <span class=\"text-info\">INFO</span>",
          "1078:                     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.info }}</h5>",
          "1079:                     </div>",
          "1081:                     </div>",
          "1083:                     <div class=\"col-sm-3 col-6\">",
          "1084:                       <div class=\"description-block\">",
          "1085:                       <span class=\"text-disabled\">SUPPRESSED</span>",
          "1086:                       <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.suppressed }}</h5>",
          "1087:                       </div>",
          "1089:                       </div>",
          "1092:                     </div>",
          "1093:                     {% endif %}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "999:                         </tr>",
          "1000:                     </thead>",
          "1001:                     <tbody>",
          "1004:                       <tr>",
          "1005:                         <td>{{ forloop.counter }}</td>",
          "1006:                         <td>",
          "",
          "[Removed Lines]",
          "1003:                     {% for item in manifest_analysis %}",
          "",
          "[Added Lines]",
          "1105:                     {% if manifest_analysis and 'manifest_findings' in manifest_analysis %}",
          "1106:                     {% for item in manifest_analysis.manifest_findings %}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1033:                         </td>",
          "1034:                        </tr>",
          "1035:                      {% endfor %}",
          "1036:                     </tbody>",
          "1037:                   </table>",
          "1038:                   </div>",
          "1039:           </div>",
          "1040:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1139:                      {% endif %}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1055:              <strong><i class=\"fas fa-code\"></i> CODE ANALYSIS</strong>",
          "1056:              </p>",
          "1057:               <div class=\"table-responsive\">",
          "1058:                 <table id=\"table_code\" class=\"table table-bordered table-hover table-striped\">",
          "1059:                     <thead>",
          "1060:                     <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1164:                 {% if code_analysis and 'summary' in code_analysis and code_analysis.summary|length > 0  %}",
          "1165:             <div class=\"row\">",
          "1166:               <div class=\"col-sm-2 col-6\">",
          "1167:               <div class=\"description-block border-right\">",
          "1168:               <span class=\"text-danger\">HIGH</span>",
          "1169:               <h5 class=\"description-header\">{{ code_analysis.summary.high }}</h5>",
          "1170:               </div>",
          "1171:               </div>",
          "1173:               <div class=\"col-sm-2 col-6\">",
          "1174:               <div class=\"description-block border-right\">",
          "1175:               <span class=\"text-warning\"></i> WARNING</span>",
          "1176:               <h5 class=\"description-header\">{{ code_analysis.summary.warning }}</h5>",
          "1177:               </div>",
          "1179:               </div>",
          "1181:               <div class=\"col-sm-2 col-6\">",
          "1182:               <div class=\"description-block border-right\">",
          "1183:               <span class=\"text-info\">INFO</span>",
          "1184:               <h5 class=\"description-header\">{{ code_analysis.summary.info }}</h5>",
          "1185:               </div>",
          "1187:               </div>",
          "1189:               <div class=\"col-sm-2 col-6\">",
          "1190:                 <div class=\"description-block border-right\">",
          "1191:                 <span class=\"text-success\">SECURE</span>",
          "1192:                 <h5 class=\"description-header\">{{ code_analysis.summary.secure }}</h5>",
          "1193:                 </div>",
          "1195:                 </div>",
          "1197:               <div class=\"col-sm-2 col-6\">",
          "1198:                 <div class=\"description-block\">",
          "1199:                 <span class=\"text-disabled\">SUPPRESSED</span>",
          "1200:                 <h5 class=\"description-header\">{{ code_analysis.summary.suppressed }}</h5>",
          "1201:                 </div>",
          "1203:                 </div>",
          "1206:               </div>",
          "1207:               {% endif %}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1067:                   </tr>",
          "1068:                     </thead>",
          "1069:                       <tbody>",
          "1071:                   <tr>",
          "1072:                   <td>{{ forloop.counter }}</td>",
          "1073:                   <td>",
          "",
          "[Removed Lines]",
          "1070:                {% for rule, details in code_analysis.items %}",
          "",
          "[Added Lines]",
          "1220:                {% if code_analysis and 'findings' in code_analysis %}",
          "1221:                {% for rule, details in code_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1129:                   </td>",
          "1130:                 </tr>",
          "1132:               </tbody>",
          "1133:             </table>",
          "1134:             </div>",
          "1135:           </div>",
          "1136:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "1131:               {% endfor %}",
          "",
          "[Added Lines]",
          "1282:               {% endfor %}",
          "1283:               {% endif %}",
          "",
          "---------------"
        ],
        "mobsf/templates/static_analysis/android_source_analysis.html||mobsf/templates/static_analysis/android_source_analysis.html": [
          "File: mobsf/templates/static_analysis/android_source_analysis.html -> mobsf/templates/static_analysis/android_source_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "734:              <strong><i class=\"fas fa-lock\"></i> NETWORK SECURITY</strong>",
          "735:              </p>",
          "736:               <div class=\"table-responsive\">",
          "737:                 <table id=\"table_network\" class=\"table table-bordered table-hover table-striped\">",
          "738:                       <thead>",
          "739:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:                 {% if network_security and 'network_summary' in network_security and network_security.network_summary|length > 0%}",
          "738:                 <div class=\"row\">",
          "739:                   <div class=\"col-sm-3 col-6\">",
          "740:                   <div class=\"description-block border-right\">",
          "741:                   <span class=\"text-danger\">HIGH</span>",
          "742:                   <h5 class=\"description-header\">{{ network_security.network_summary.high }}</h5>",
          "743:                   </div>",
          "744:                   </div>",
          "746:                   <div class=\"col-sm-3 col-6\">",
          "747:                   <div class=\"description-block border-right\">",
          "748:                   <span class=\"text-warning\"></i> WARNING</span>",
          "749:                   <h5 class=\"description-header\">{{ network_security.network_summary.warning }}</h5>",
          "750:                   </div>",
          "752:                   </div>",
          "754:                   <div class=\"col-sm-3 col-6\">",
          "755:                   <div class=\"description-block border-right\">",
          "756:                   <span class=\"text-info\">INFO</span>",
          "757:                   <h5 class=\"description-header\">{{ network_security.network_summary.info }}</h5>",
          "758:                   </div>",
          "760:                   </div>",
          "762:                   <div class=\"col-sm-3 col-6\">",
          "763:                     <div class=\"description-block\">",
          "764:                     <span class=\"text-success\">SECURE</span>",
          "765:                     <h5 class=\"description-header\">{{ network_security.network_summary.secure }}</h5>",
          "766:                     </div>",
          "768:                     </div>",
          "771:                   </div>",
          "772:                   {% endif %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:                         </tr>",
          "745:                     </thead>",
          "746:                     <tbody>",
          "749:                       <tr>",
          "750:                         <td>{{ forloop.counter }}</td>",
          "751:                         <td>",
          "",
          "[Removed Lines]",
          "748:                     {% for item in network_security %}",
          "",
          "[Added Lines]",
          "783:                     {% if network_security and 'network_findings' in network_security %}",
          "784:                     {% for item in network_security.network_findings %}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "771:                        </tr>",
          "772:                      {% endfor %}",
          "773:                     </tbody>",
          "774:                   </table>",
          "775:                   </div>",
          "776:           </div>",
          "777:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "809:                      {% endif %}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "792:              <strong><i class=\"fas fa-search\"></i> MANIFEST ANALYSIS</strong>",
          "793:              </p>",
          "794:               <div class=\"table-responsive\">",
          "795:                 <table id=\"table_manifest\" class=\"table table-bordered table-hover table-striped\">",
          "796:                       <thead>",
          "797:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "834:                 {% if manifest_analysis and 'manifest_summary' in manifest_analysis and manifest_analysis.manifest_summary|length > 0%}",
          "835:                 <div class=\"row\">",
          "836:                   <div class=\"col-sm-3 col-6\">",
          "837:                   <div class=\"description-block border-right\">",
          "838:                   <span class=\"text-danger\">HIGH</span>",
          "839:                   <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.high }}</h5>",
          "840:                   </div>",
          "841:                   </div>",
          "843:                   <div class=\"col-sm-3 col-6\">",
          "844:                   <div class=\"description-block border-right\">",
          "845:                   <span class=\"text-warning\"></i> WARNING</span>",
          "846:                   <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.warning }}</h5>",
          "847:                   </div>",
          "849:                   </div>",
          "851:                   <div class=\"col-sm-3 col-6\">",
          "852:                   <div class=\"description-block border-right\">",
          "853:                   <span class=\"text-info\">INFO</span>",
          "854:                   <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.info }}</h5>",
          "855:                   </div>",
          "857:                   </div>",
          "859:                   <div class=\"col-sm-3 col-6\">",
          "860:                     <div class=\"description-block\">",
          "861:                     <span class=\"text-disabled\">SUPPRESSED</span>",
          "862:                     <h5 class=\"description-header\">{{ manifest_analysis.manifest_summary.suppressed }}</h5>",
          "863:                     </div>",
          "865:                     </div>",
          "868:                   </div>",
          "869:                   {% endif %}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "803:                         </tr>",
          "804:                     </thead>",
          "805:                     <tbody>",
          "808:                       <tr>",
          "809:                         <td>{{ forloop.counter }}</td>",
          "810:                         <td>",
          "",
          "[Removed Lines]",
          "807:                     {% for item in manifest_analysis %}",
          "",
          "[Added Lines]",
          "881:                       {% if manifest_analysis and 'manifest_findings' in manifest_analysis %}",
          "882:                       {% for item in manifest_analysis.manifest_findings %}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "837:                         </td>",
          "838:                        </tr>",
          "839:                      {% endfor %}",
          "840:                     </tbody>",
          "841:                   </table>",
          "842:                   </div>",
          "843:           </div>",
          "844:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "915:                      {% endif %}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "859:              <strong><i class=\"fas fa-code\"></i> CODE ANALYSIS</strong>",
          "860:              </p>",
          "861:               <div class=\"table-responsive\">",
          "862:                 <table id=\"table_code\" class=\"table table-bordered table-hover table-striped\">",
          "863:                     <thead>",
          "864:                     <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940:                 {% if code_analysis and 'summary' in code_analysis and code_analysis.summary|length > 0 %}",
          "941:             <div class=\"row\">",
          "942:               <div class=\"col-sm-2 col-6\">",
          "943:               <div class=\"description-block border-right\">",
          "944:               <span class=\"text-danger\">HIGH</span>",
          "945:               <h5 class=\"description-header\">{{ code_analysis.summary.high }}</h5>",
          "946:               </div>",
          "947:               </div>",
          "949:               <div class=\"col-sm-2 col-6\">",
          "950:               <div class=\"description-block border-right\">",
          "951:               <span class=\"text-warning\"></i> WARNING</span>",
          "952:               <h5 class=\"description-header\">{{ code_analysis.summary.warning }}</h5>",
          "953:               </div>",
          "955:               </div>",
          "957:               <div class=\"col-sm-2 col-6\">",
          "958:               <div class=\"description-block border-right\">",
          "959:               <span class=\"text-info\">INFO</span>",
          "960:               <h5 class=\"description-header\">{{ code_analysis.summary.info }}</h5>",
          "961:               </div>",
          "963:               </div>",
          "965:               <div class=\"col-sm-2 col-6\">",
          "966:                 <div class=\"description-block border-right\">",
          "967:                 <span class=\"text-success\">SECURE</span>",
          "968:                 <h5 class=\"description-header\">{{ code_analysis.summary.secure }}</h5>",
          "969:                 </div>",
          "971:                 </div>",
          "973:               <div class=\"col-sm-2 col-6\">",
          "974:                 <div class=\"description-block\">",
          "975:                 <span class=\"text-disabled\">SUPPRESSED</span>",
          "976:                 <h5 class=\"description-header\">{{ code_analysis.summary.suppressed }}</h5>",
          "977:                 </div>",
          "979:                 </div>",
          "982:               </div>",
          "983:               {% endif %}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "871:                   </tr>",
          "872:                     </thead>",
          "873:                     <tbody>",
          "875:                   <tr>",
          "876:                   <td>{{ forloop.counter }}</td>",
          "877:                   <td>",
          "",
          "[Removed Lines]",
          "874:                {% for rule, details in code_analysis.items %}",
          "",
          "[Added Lines]",
          "996:                   {% if code_analysis and 'findings' in code_analysis %}",
          "997:                   {% for rule, details in code_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "933:                   </td>",
          "934:                 </tr>",
          "935:               {% endfor %}",
          "936:               </tbody>",
          "937:             </table>",
          "938:             </div>",
          "939:           </div>",
          "940:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1059:               {% endif %}",
          "",
          "---------------"
        ],
        "mobsf/templates/static_analysis/ios_binary_analysis.html||mobsf/templates/static_analysis/ios_binary_analysis.html": [
          "File: mobsf/templates/static_analysis/ios_binary_analysis.html -> mobsf/templates/static_analysis/ios_binary_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:              <strong><i class=\"fas fa-lock\"></i> APP TRANSPORT SECURITY (ATS)</strong>",
          "551:              </p>",
          "552:               <div class=\"table-responsive\">",
          "553:                <table class=\"table table-bordered table-hover table-striped\">",
          "555:                   <thead>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:                 {% if ats_analysis and 'ats_summary' in ats_analysis and ats_analysis.ats_summary|length > 0 %}",
          "554:                 <div class=\"row\">",
          "555:                   <div class=\"col-sm-2 col-6\">",
          "556:                   <div class=\"description-block border-right\">",
          "557:                   <span class=\"text-danger\">HIGH</span>",
          "558:                   <h5 class=\"description-header\">{{ ats_analysis.ats_summary.high }}</h5>",
          "559:                   </div>",
          "560:                   </div>",
          "562:                   <div class=\"col-sm-2 col-6\">",
          "563:                   <div class=\"description-block border-right\">",
          "564:                   <span class=\"text-warning\"></i> WARNING</span>",
          "565:                   <h5 class=\"description-header\">{{ ats_analysis.ats_summary.warning }}</h5>",
          "566:                   </div>",
          "568:                   </div>",
          "570:                   <div class=\"col-sm-2 col-6\">",
          "571:                   <div class=\"description-block border-right\">",
          "572:                   <span class=\"text-info\">INFO</span>",
          "573:                   <h5 class=\"description-header\">{{ ats_analysis.ats_summary.info }}</h5>",
          "574:                   </div>",
          "576:                   </div>",
          "578:                   <div class=\"col-sm-2 col-6\">",
          "579:                     <div class=\"description-block\">",
          "580:                     <span class=\"text-success\">SECURE</span>",
          "581:                     <h5 class=\"description-header\">{{ ats_analysis.ats_summary.secure }}</h5>",
          "582:                     </div>",
          "584:                     </div>",
          "586:                   </div>",
          "587:                   {% endif %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:                       </tr>",
          "562:                   </thead>",
          "563:                   <tbody>",
          "566:                       <tr>",
          "567:                         <td>{{ forloop.counter }}</td>",
          "568:                         <td>",
          "",
          "[Removed Lines]",
          "564:                     {% if ats_analysis|length > 0 %}",
          "565:                       {% for findings in ats_analysis %}",
          "",
          "[Added Lines]",
          "599:                     {% if ats_analysis and 'ats_findings' in ats_analysis %}",
          "600:                       {% for findings in ats_analysis.ats_findings %}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:                         </td>",
          "584:                       </tr>",
          "585:                       {% endfor %}",
          "598:                     {% endif %}",
          "599:                   </tbody>",
          "600:               </table>",
          "601:                   </div>",
          "602:           </div>",
          "603:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "586:                     {% else %}",
          "587:                     <tr>",
          "588:                       <td></td>",
          "589:                       <td>",
          "590:                         No ATS exceptions found.",
          "591:                       <td>",
          "592:                         <span class=\"badge bg-success\">secure</span>",
          "593:                       </td>",
          "594:                       <td>",
          "595:                         No insecure connections configured. App Transport Security (ATS) is enabled.",
          "596:                       </td>",
          "597:                     </tr>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "620:              <strong><i class=\"fa fa-code\"></i> IPA BINARY CODE ANALYSIS</strong>",
          "621:              </p>",
          "622:               <div class=\"table-responsive\">",
          "623:                <table id=\"table_code\" class=\"table table-bordered table-hover table-striped\">",
          "624:                   <thead>",
          "625:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:                 {% if binary_analysis and 'summary' in binary_analysis and binary_analysis.summary|length > 0 %}",
          "649:             <div class=\"row\">",
          "650:               <div class=\"col-sm-2 col-6\">",
          "651:               <div class=\"description-block border-right\">",
          "652:               <span class=\"text-danger\">HIGH</span>",
          "653:               <h5 class=\"description-header\">{{ binary_analysis.summary.high }}</h5>",
          "654:               </div>",
          "655:               </div>",
          "657:               <div class=\"col-sm-2 col-6\">",
          "658:               <div class=\"description-block border-right\">",
          "659:               <span class=\"text-warning\"></i> WARNING</span>",
          "660:               <h5 class=\"description-header\">{{ binary_analysis.summary.warning }}</h5>",
          "661:               </div>",
          "663:               </div>",
          "665:               <div class=\"col-sm-2 col-6\">",
          "666:               <div class=\"description-block border-right\">",
          "667:               <span class=\"text-info\">INFO</span>",
          "668:               <h5 class=\"description-header\">{{ binary_analysis.summary.info }}</h5>",
          "669:               </div>",
          "671:               </div>",
          "673:               <div class=\"col-sm-2 col-6\">",
          "674:                 <div class=\"description-block border-right\">",
          "675:                 <span class=\"text-success\">SECURE</span>",
          "676:                 <h5 class=\"description-header\">{{ binary_analysis.summary.secure }}</h5>",
          "677:                 </div>",
          "679:                 </div>",
          "681:               <div class=\"col-sm-2 col-6\">",
          "682:                 <div class=\"description-block\">",
          "683:                 <span class=\"text-disabled\">SUPPRESSED</span>",
          "684:                 <h5 class=\"description-header\">{{ binary_analysis.summary.suppressed }}</h5>",
          "685:                 </div>",
          "687:                 </div>",
          "690:               </div>",
          "691:               {% endif %}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "632:                       </tr>",
          "633:                   </thead>",
          "634:                      <tbody>",
          "636:                     <tr>",
          "637:                       <td>{{ forloop.counter }}</td>",
          "638:                       <td>",
          "",
          "[Removed Lines]",
          "635:                     {% for issue, details in binary_analysis.items %}",
          "",
          "[Added Lines]",
          "704:                     {% if binary_analysis and 'findings' in binary_analysis %}",
          "705:                     {% for issue, details in binary_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "685:                       </td>",
          "686:                     </tr>",
          "687:                     {% endfor %}",
          "688:                  </tbody>",
          "689:                     </table>",
          "690:                   </div>",
          "692:           </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:                     {% endif %}",
          "",
          "---------------"
        ],
        "mobsf/templates/static_analysis/ios_source_analysis.html||mobsf/templates/static_analysis/ios_source_analysis.html": [
          "File: mobsf/templates/static_analysis/ios_source_analysis.html -> mobsf/templates/static_analysis/ios_source_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:              <strong><i class=\"fas fa-lock\"></i> APP TRANSPORT SECURITY (ATS)</strong>",
          "546:              </p>",
          "547:               <div class=\"table-responsive\">",
          "548:                <table class=\"table table-bordered table-hover table-striped\">",
          "550:                   <thead>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:                 {% if ats_analysis and 'ats_summary' in ats_analysis and ats_analysis.ats_summary|length > 0 %}",
          "549:           <div class=\"row\">",
          "550:             <div class=\"col-sm-2 col-6\">",
          "551:             <div class=\"description-block border-right\">",
          "552:             <span class=\"text-danger\">HIGH</span>",
          "553:             <h5 class=\"description-header\">{{ ats_analysis.ats_summary.high }}</h5>",
          "554:             </div>",
          "555:             </div>",
          "557:             <div class=\"col-sm-2 col-6\">",
          "558:             <div class=\"description-block border-right\">",
          "559:             <span class=\"text-warning\"></i> WARNING</span>",
          "560:             <h5 class=\"description-header\">{{ ats_analysis.ats_summary.warning }}</h5>",
          "561:             </div>",
          "563:             </div>",
          "565:             <div class=\"col-sm-2 col-6\">",
          "566:             <div class=\"description-block border-right\">",
          "567:             <span class=\"text-info\">INFO</span>",
          "568:             <h5 class=\"description-header\">{{ ats_analysis.ats_summary.info }}</h5>",
          "569:             </div>",
          "571:             </div>",
          "573:             <div class=\"col-sm-2 col-6\">",
          "574:               <div class=\"description-block\">",
          "575:               <span class=\"text-success\">SECURE</span>",
          "576:               <h5 class=\"description-header\">{{ ats_analysis.ats_summary.secure }}</h5>",
          "577:               </div>",
          "579:               </div>",
          "581:             </div>",
          "582:             {% endif %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:                       </tr>",
          "557:                   </thead>",
          "558:                   <tbody>",
          "561:                       <tr>",
          "562:                         <td>{{ forloop.counter }}</td>",
          "563:                         <td>",
          "",
          "[Removed Lines]",
          "559:                     {% if ats_analysis|length > 0 %}",
          "560:                       {% for findings in ats_analysis %}",
          "",
          "[Added Lines]",
          "594:                     {% if ats_analysis and 'ats_findings' in ats_analysis %}",
          "595:                       {% for findings in ats_analysis.ats_findings %}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "578:                         </td>",
          "579:                       </tr>",
          "580:                       {% endfor %}",
          "593:                     {% endif %}",
          "594:                   </tbody>",
          "595:               </table>",
          "596:                   </div>",
          "597:           </div>",
          "598:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "581:                     {% else %}",
          "582:                     <tr>",
          "583:                       <td></td>",
          "584:                       <td>",
          "585:                         No ATS exceptions found.",
          "586:                       <td>",
          "587:                         <span class=\"badge bg-success\">secure</span>",
          "588:                       </td>",
          "589:                       <td>",
          "590:                         No insecure connections configured. App Transport Security (ATS) is enabled.",
          "591:                       </td>",
          "592:                     </tr>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "615:              <strong><i class=\"fa fa-code\"></i> CODE ANALYSIS</strong>",
          "616:              </p>",
          "617:               <div class=\"table-responsive\">",
          "618:                    <table id=\"table_code\" class=\"table table-bordered table-hover table-striped\">",
          "619:                   <thead>",
          "620:                       <tr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "643:                 {% if code_analysis and 'summary' in code_analysis and code_analysis.summary|length > 0 %}",
          "644:           <div class=\"row\">",
          "645:             <div class=\"col-sm-2 col-6\">",
          "646:             <div class=\"description-block border-right\">",
          "647:             <span class=\"text-danger\">HIGH</span>",
          "648:             <h5 class=\"description-header\">{{ code_analysis.summary.high }}</h5>",
          "649:             </div>",
          "650:             </div>",
          "652:             <div class=\"col-sm-2 col-6\">",
          "653:             <div class=\"description-block border-right\">",
          "654:             <span class=\"text-warning\"></i> WARNING</span>",
          "655:             <h5 class=\"description-header\">{{ code_analysis.summary.warning }}</h5>",
          "656:             </div>",
          "658:             </div>",
          "660:             <div class=\"col-sm-2 col-6\">",
          "661:             <div class=\"description-block border-right\">",
          "662:             <span class=\"text-info\">INFO</span>",
          "663:             <h5 class=\"description-header\">{{ code_analysis.summary.info }}</h5>",
          "664:             </div>",
          "666:             </div>",
          "668:             <div class=\"col-sm-2 col-6\">",
          "669:               <div class=\"description-block border-right\">",
          "670:               <span class=\"text-success\">SECURE</span>",
          "671:               <h5 class=\"description-header\">{{ code_analysis.summary.secure }}</h5>",
          "672:               </div>",
          "674:               </div>",
          "676:             <div class=\"col-sm-2 col-6\">",
          "677:               <div class=\"description-block\">",
          "678:               <span class=\"text-disabled\">SUPPRESSED</span>",
          "679:               <h5 class=\"description-header\">{{ code_analysis.summary.suppressed }}</h5>",
          "680:               </div>",
          "682:               </div>",
          "685:             </div>",
          "686:             {% endif %}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "628:                       </tr>",
          "629:                   </thead>",
          "630:                   <tbody>",
          "632:                   <tr>",
          "633:                   <td>{{ forloop.counter }}</td>",
          "634:                   <td>",
          "",
          "[Removed Lines]",
          "631:                     {% for rule, details in code_analysis.items %}",
          "",
          "[Added Lines]",
          "700:                     {% if code_analysis and 'findings' in code_analysis %}",
          "701:                     {% for rule, details in code_analysis.findings.items %}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:                   </td>",
          "690:                 </tr>",
          "692:            </tbody>",
          "693:           </table>",
          "694:             </div>",
          "695:           </div>",
          "696:         </div><!-- /.card -->",
          "",
          "[Removed Lines]",
          "691:               {% endfor %}",
          "",
          "[Added Lines]",
          "761:               {% endfor %}",
          "762:               {% endif %}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4406e9479719efb976729dcbdf1cfc893431e09",
      "candidate_info": {
        "commit_hash": "e4406e9479719efb976729dcbdf1cfc893431e09",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/e4406e9479719efb976729dcbdf1cfc893431e09",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py",
          "mobsf/templates/general/recent.html",
          "pyproject.toml"
        ],
        "message": "[HOTFIX] + Features (#2444)\n\nAdd support for sample download in recent scans.\nBug fix in firebase analysis (dict mutation errors)",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py",
          "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: logger = logging.getLogger(__name__)",
          "20: BANNER = r\"\"\"",
          "21:   __  __       _    ____  _____       _  _    _",
          "22:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / |",
          "",
          "[Removed Lines]",
          "19: VERSION = '4.1.3'",
          "",
          "[Added Lines]",
          "19: VERSION = '4.1.4'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     '.zip': 'application/zip',",
          "74:     '.tar': 'application/x-tar',",
          "75:     '.apk': 'application/octet-stream',",
          "76:     '.ipa': 'application/octet-stream',",
          "77:     '.jar': 'application/java-archive',",
          "78:     '.aar': 'application/octet-stream',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     '.apks': 'application/octet-stream',",
          "77:     '.xapk': 'application/octet-stream',",
          "78:     '.aab': 'application/octet-stream',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     '.dylib': 'application/octet-stream',",
          "81:     '.a': 'application/octet-stream',",
          "82:     '.pcap': 'application/vnd.tcpdump.pcap',",
          "83: }",
          "84: # =============ALLOWED MIMETYPES=================",
          "85: APK_MIME = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     '.appx': 'application/vns.ms-appx',",
          "",
          "---------------"
        ],
        "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py": [
          "File: mobsf/MobSF/urls.py -> mobsf/MobSF/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         re_path(r'^$', home.index, name='home'),",
          "185:         re_path(r'^upload/$', home.Upload.as_view, name='upload'),",
          "186:         re_path(r'^download/', home.download, name='download'),",
          "187:         re_path(r'^download_scan/', home.download_apk, name='download_scan'),",
          "188:         re_path(r'^generate_downloads/$',",
          "189:                 home.generate_download,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         re_path(fr'^download_binary/{checksum_regex}/$',",
          "188:                 home.download_binary,",
          "189:                 name='download_binary'),",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: LINUX_PLATFORM = ['Darwin', 'Linux']",
          "59: HTTP_BAD_REQUEST = 400",
          "60: logger = logging.getLogger(__name__)",
          "61: register.filter('key', key)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: HTTP_STATUS_404 = 404",
          "61: HTTP_SERVER_ERROR = 500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:     return send_response(data, api)",
          "391: @login_required",
          "396:         allowed_exts = settings.ALLOWED_EXTENSIONS",
          "417: @login_required",
          "",
          "[Removed Lines]",
          "392: def download(request):",
          "393:     \"\"\"Download from mobsf.MobSF Route.\"\"\"",
          "394:     if request.method == 'GET':",
          "395:         root = settings.DWD_DIR",
          "397:         filename = request.path.replace('/download/', '', 1)",
          "398:         dwd_file = os.path.join(root, filename)",
          "399:         # Security Checks",
          "400:         if '../' in filename or not is_safe_path(root, dwd_file):",
          "401:             msg = 'Path Traversal Attack Detected'",
          "402:             return print_n_send_error_response(request, msg)",
          "403:         ext = os.path.splitext(filename)[1]",
          "404:         if ext in allowed_exts:",
          "405:             if os.path.isfile(dwd_file):",
          "406:                 wrapper = FileWrapper(",
          "407:                     open(dwd_file, 'rb'))  # lgtm [py/path-injection]",
          "408:                 response = HttpResponse(",
          "409:                     wrapper, content_type=allowed_exts[ext])",
          "410:                 response['Content-Length'] = os.path.getsize(dwd_file)",
          "411:                 return response",
          "412:         if filename.endswith(('screen/screen.png', '-icon.png')):",
          "413:             return HttpResponse('')",
          "414:     return HttpResponse(status=404)",
          "",
          "[Added Lines]",
          "393: def file_download(dwd_file, filename, content_type):",
          "394:     \"\"\"HTTP file download response.\"\"\"",
          "395:     with open(dwd_file, 'rb') as file:",
          "396:         wrapper = FileWrapper(file)",
          "397:         response = HttpResponse(wrapper, content_type=content_type)",
          "398:         response['Content-Length'] = dwd_file.stat().st_size",
          "399:         if filename:",
          "400:             val = f'attachment; filename=\"{filename}\"'",
          "401:             response['Content-Disposition'] = val",
          "402:         return response",
          "406: @require_http_methods(['GET'])",
          "407: def download_binary(request, checksum, api=False):",
          "408:     \"\"\"Download binary from uploads directory.\"\"\"",
          "409:     try:",
          "411:         if not is_md5(checksum):",
          "412:             return HttpResponse(",
          "413:                 'Invalid MD5 Hash',",
          "414:                 status=HTTP_STATUS_404)",
          "415:         robj = RecentScansDB.objects.filter(MD5=checksum).first()",
          "416:         if not robj:",
          "417:             return HttpResponse(",
          "418:                 'Scan hash not found',",
          "419:                 status=HTTP_STATUS_404)",
          "420:         file_ext = f'.{robj.SCAN_TYPE}'",
          "421:         if file_ext not in allowed_exts.keys():",
          "422:             return HttpResponse(",
          "423:                 'Invalid Scan Type',",
          "424:                 status=HTTP_STATUS_404)",
          "425:         filename = f'{checksum}{file_ext}'",
          "426:         dwd_file = Path(settings.UPLD_DIR) / checksum / filename",
          "427:         if not dwd_file.exists():",
          "428:             return HttpResponse(",
          "429:                 'File not found',",
          "430:                 status=HTTP_STATUS_404)",
          "431:         return file_download(",
          "432:             dwd_file,",
          "433:             filename,",
          "434:             allowed_exts[file_ext])",
          "435:     except Exception:",
          "436:         logger.exception('Download Binary Failed')",
          "437:         return HttpResponse(",
          "438:             'Failed to download file due to an error',",
          "439:             status=HTTP_SERVER_ERROR)",
          "442: @login_required",
          "443: @require_http_methods(['GET'])",
          "444: def download(request):",
          "445:     \"\"\"Download from mobsf downloads directory.\"\"\"",
          "446:     root = settings.DWD_DIR",
          "447:     filename = request.path.replace('/download/', '', 1)",
          "448:     dwd_file = Path(root) / filename",
          "450:     # Security Checks",
          "451:     if '../' in filename or not is_safe_path(root, dwd_file):",
          "452:         msg = 'Path Traversal Attack Detected'",
          "453:         return print_n_send_error_response(request, msg)",
          "455:     # File and Extension Check",
          "456:     ext = dwd_file.suffix",
          "457:     allowed_exts = settings.ALLOWED_EXTENSIONS",
          "458:     if ext in allowed_exts and dwd_file.is_file():",
          "459:         return file_download(",
          "460:             dwd_file,",
          "461:             None,",
          "462:             allowed_exts[ext])",
          "464:     # Special Case for Certain Image Files",
          "465:     if filename.endswith(('screen/screen.png', '-icon.png')):",
          "466:         return HttpResponse('')",
          "468:     return HttpResponse(status=HTTP_STATUS_404)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py": [
          "File: mobsf/StaticAnalyzer/views/common/firebase.py -> mobsf/StaticAnalyzer/views/common/firebase.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         'severity': INFO,",
          "30:         'description': 'The app talks to Firebase database at %s',",
          "31:     },",
          "32:     'firebase_remote_config_enabled': {",
          "33:         'title': 'Firebase Remote Config enabled',",
          "34:         'severity': WARNING,",
          "35:         'description': (",
          "36:             'The Firebase Remote Config at %s is enabled.'",
          "37:             ' Ensure that the configurations are not sensitive.'",
          "39:     },",
          "40:     'firebase_remote_config_disabled': {",
          "41:         'title': 'Firebase Remote Config disabled',",
          "42:         'severity': SECURE,",
          "43:         'description': (",
          "44:             'Firebase Remote Config is disabled for %s.'",
          "46:     },",
          "47:     'firebase_remote_config_failed': {",
          "48:         'title': 'Firebase Remote Config check failed',",
          "49:         'description': (",
          "50:             'Failed to check for Firebase Remote Config.'",
          "53:     },",
          "54: }",
          "57: def firebase_analysis(checksum, code_an_dic):",
          "58:     \"\"\"Firebase Analysis.\"\"\"",
          "60:     findings = []",
          "62:     logger.info('Starting Firebase Analysis')",
          "63:     # Check for Firebase Database",
          "77:     # Check for Firebase Remote Config",
          "82:     return findings",
          "",
          "[Removed Lines]",
          "38:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "45:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "51:             ' Please verify this manually. Error:\\n\\n%s'),",
          "52:         'severity': INFO,",
          "59:     urls = list(set(code_an_dic['urls_list']))",
          "61:     finds = None",
          "64:     logger.info('Looking for Firebase URL(s)')",
          "65:     for url in urls:",
          "66:         if 'firebaseio.com' not in url:",
          "67:             continue",
          "68:         returl, is_open = open_firebase(checksum, url)",
          "69:         if is_open:",
          "70:             item = FIREBASE_FINDINGS['firebase_db_open']",
          "71:             item['description'] = item['description'] % returl",
          "72:             findings.append(item)",
          "73:         else:",
          "74:             item = FIREBASE_FINDINGS['firebase_db_exists']",
          "75:             item['description'] = item['description'] % returl",
          "76:             findings.append(item)",
          "78:     firebase_creds = code_an_dic.get('firebase_creds')",
          "79:     finds = firebase_remote_config(checksum, firebase_creds)",
          "80:     if finds:",
          "81:         findings.extend(finds)",
          "",
          "[Added Lines]",
          "32:     'firebase_db_check_failed': {",
          "33:         'title': 'Firebase DB check failed',",
          "34:         'severity': INFO,",
          "35:         'description': (",
          "36:             'Failed to check Firebase DB URL. Error: %s'),",
          "37:     },",
          "44:             ' This is indicated by the response: %s'),",
          "51:             ' This is indicated by the response: %s'),",
          "55:         'severity': INFO,",
          "58:             ' Please verify this manually. Error: %s'),",
          "68:     db_finds = firebase_db_check(",
          "69:         checksum, code_an_dic)",
          "70:     if db_finds:",
          "71:         findings.extend(db_finds)",
          "73:     config_finds = firebase_remote_config(",
          "74:         checksum, code_an_dic)",
          "75:     if config_finds:",
          "76:         findings.extend(config_finds)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         if not purl.netloc.endswith('firebaseio.com'):",
          "94:             logger.warning(invalid)",
          "95:             return url, False",
          "97:         proxies, verify = upstream_proxy('https')",
          "98:         headers = {",
          "99:             'User-Agent': ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1)'",
          "100:                            ' AppleWebKit/537.36 (KHTML, like Gecko) '",
          "101:                            'Chrome/39.0.2171.95 Safari/537.36')}",
          "105:         if resp.status_code == 200:",
          "106:             return base_url, True",
          "107:     except Exception as exp:",
          "",
          "[Removed Lines]",
          "96:         base_url = '{}://{}/.json'.format(purl.scheme, purl.netloc)",
          "102:         resp = requests.get(base_url, headers=headers,",
          "103:                             proxies=proxies, verify=verify,",
          "104:                             allow_redirects=False)",
          "",
          "[Added Lines]",
          "91:         base_url = f'{purl.scheme}://{purl.netloc}/.json'",
          "97:         resp = requests.get(",
          "98:             base_url, headers=headers,",
          "99:             proxies=proxies, verify=verify,",
          "100:             allow_redirects=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     return url, False",
          "115:     \"\"\"Check for Firebase Remote Config.\"\"\"",
          "116:     url = None",
          "117:     findings = []",
          "118:     try:",
          "119:         if not creds:",
          "120:             return None",
          "121:         google_api_key = creds.get('google_api_key')",
          "",
          "[Removed Lines]",
          "114: def firebase_remote_config(checksum, creds):",
          "",
          "[Added Lines]",
          "110: def firebase_db_check(checksum, code_an_dic):",
          "111:     logger.info('Looking for Firebase URL(s)')",
          "112:     findings = []",
          "113:     try:",
          "114:         urls = list(set(code_an_dic['urls_list']))",
          "115:         for url in urls:",
          "116:             if 'firebaseio.com' not in url:",
          "117:                 continue",
          "118:             returl, is_open = open_firebase(checksum, url)",
          "119:             if is_open:",
          "120:                 rule = FIREBASE_FINDINGS['firebase_db_open']",
          "121:                 findings.append({",
          "122:                     'title': rule['title'],",
          "123:                     'severity': rule['severity'],",
          "124:                     'description': rule['description'] % returl,",
          "125:                 })",
          "126:             else:",
          "127:                 rule = FIREBASE_FINDINGS['firebase_db_exists']",
          "128:                 findings.append({",
          "129:                     'title': rule['title'],",
          "130:                     'severity': rule['severity'],",
          "131:                     'description': rule['description'] % returl,",
          "132:                 })",
          "133:     except Exception as exp:",
          "134:         msg = 'Failed to check for Firebase DB URL'",
          "135:         logger.warning(msg)",
          "136:         append_scan_status(checksum, msg, repr(exp))",
          "137:         rule = FIREBASE_FINDINGS['firebase_db_check_failed']",
          "138:         findings.append({",
          "139:             'title': rule['title'],",
          "140:             'severity': rule['severity'],",
          "141:             'description': rule['description'] % repr(exp),",
          "142:         })",
          "143:     return findings",
          "146: def firebase_remote_config(checksum, code_an_dic):",
          "151:         creds = code_an_dic.get('firebase_creds')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:         if response.status_code == 200:",
          "153:             resp = response.json()",
          "154:             if resp.get('state') == 'NO_TEMPLATE':",
          "158:             else:",
          "162:         else:",
          "164:             response_msg = f'The response code is {response.status_code}'",
          "167:     except Exception as exp:",
          "168:         msg = 'Failed to check for Firebase Remote Config'",
          "169:         logger.warning(msg)",
          "170:         append_scan_status(checksum, msg, repr(exp))",
          "174:     return findings",
          "",
          "[Removed Lines]",
          "155:                 item = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "156:                 item['description'] = item['description'] % (url, resp)",
          "157:                 findings.append(item)",
          "159:                 item = FIREBASE_FINDINGS['firebase_remote_config_enabled']",
          "160:                 item['description'] = item['description'] % (url, resp)",
          "161:                 findings.append(item)",
          "163:             item = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "165:             item['description'] = item['description'] % (url, response_msg)",
          "166:             findings.append(item)",
          "171:         item = FIREBASE_FINDINGS['firebase_remote_config_failed']",
          "172:         item['description'] = item['description'] % repr(exp)",
          "173:         findings.append(item)",
          "",
          "[Added Lines]",
          "188:                 rule = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "189:                 findings.append({",
          "190:                     'title': rule['title'],",
          "191:                     'severity': rule['severity'],",
          "192:                     'description': rule['description'] % (url, resp),",
          "193:                 })",
          "195:                 rule = FIREBASE_FINDINGS['firebase_remote_config_enabled']",
          "196:                 findings.append({",
          "197:                     'title': rule['title'],",
          "198:                     'severity': rule['severity'],",
          "199:                     'description': rule['description'] % (url, resp),",
          "200:                 })",
          "202:             rule = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "204:             findings.append({",
          "205:                 'title': rule['title'],",
          "206:                 'severity': rule['severity'],",
          "207:                 'description': rule['description'] % (url, response_msg),",
          "208:             })",
          "214:         rule = FIREBASE_FINDINGS['firebase_remote_config_failed']",
          "215:         findings.append({",
          "216:             'title': rule['title'],",
          "217:             'severity': rule['severity'],",
          "218:             'description': rule['description'] % repr(exp),",
          "219:         })",
          "",
          "---------------"
        ],
        "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html": [
          "File: mobsf/templates/general/recent.html -> mobsf/templates/general/recent.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                             <td><p>",
          "103:                                    <a class=\"btn btn-outline-primary btn-sm\" href=\"{% url \"pdf\" checksum=e.MD5%}\"><i class=\"fas fa-file-pdf\"></i></a>",
          "104:                                    <a class=\"btn btn-outline-info btn-sm\" href=\"../../../{{ e.ANALYZER }}/{{e.MD5}}/?rescan=1\"><i class=\"fas fa-sync-alt\"></i></a>",
          "105:                                 </p>",
          "106:                             {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\" or '.aab' == e.FILE_NAME|slice:\"-4:\"%}",
          "107:                                 <p><a class=\"diffButton btn btn-warning btn-sm\" id=\"{{ e.MD5 }}_{{ e.FILE_NAME }}\"><i class=\"fas fa-not-equal\"></i> Diff or Compare</a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:                                    <a class=\"btn btn-outline-secondary btn-sm\" href=\"{% url \"download_binary\" checksum=e.MD5%}\"><i class=\"fas fa-download\"></i></a>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5056a7d660e9b749d1251ec180066822bc25f14c",
      "candidate_info": {
        "commit_hash": "5056a7d660e9b749d1251ec180066822bc25f14c",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/5056a7d660e9b749d1251ec180066822bc25f14c",
        "files": [
          "LICENSES/apkinspector.txt",
          "mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "mobsf/StaticAnalyzer/tools/androguard4/resources/public.xml",
          "mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "mobsf/StaticAnalyzer/tools/androguard4/zipfile.py",
          "mobsf/StaticAnalyzer/views/android/app.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "HOTFIX: Remove Androguard dependency use only features required by MobSF (#2363)\n\nThis PR strips out androguard and it's dependencies from MobSF.\nExtract androguard related functions used by MobSF.\nSome dependencies such as pyQt5 from apkinspector is breaking the ARM64 docker image.\nThis should address that issue.\nIn future, we will have to copy over any fixes to axml, apk, public, types from androguard and ZipEntry from apkinspector. \nWe won't be adding linting to these files. The extracted functions will be considered as an external tool.",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apk.py||mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "mobsf/StaticAnalyzer/tools/androguard4/axml.py||mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py||mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "mobsf/StaticAnalyzer/tools/androguard4/types.py||mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "mobsf/StaticAnalyzer/tools/androguard4/zipfile.py||mobsf/StaticAnalyzer/tools/androguard4/zipfile.py",
          "mobsf/StaticAnalyzer/views/android/app.py||mobsf/StaticAnalyzer/views/android/app.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/icon_analysis.py||mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: logger = logging.getLogger(__name__)",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _____ ___",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _|___ // _ \\",
          "",
          "[Removed Lines]",
          "13: VERSION = '3.9.6'",
          "",
          "[Added Lines]",
          "13: VERSION = '3.9.7'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/apk.py||mobsf/StaticAnalyzer/tools/androguard4/apk.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/apk.py -> mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: # Androguard",
          "5: from .axml import ARSCParser, AXMLPrinter, ARSCResTableConfig",
          "6: from .zipfile import ZipEntry",
          "8: # Python core",
          "9: import io",
          "10: from zlib import crc32",
          "11: import os",
          "12: import re",
          "13: import binascii",
          "14: import zipfile",
          "15: from struct import unpack",
          "16: import hashlib",
          "17: import asn1crypto",
          "18: import logging",
          "20: # External dependecies",
          "21: import lxml.sax",
          "22: from xml.dom.pulldom import SAX2DOM",
          "23: # Used for reading Certificates",
          "24: from asn1crypto import cms, x509, keys",
          "26: logger = logging.getLogger(__name__)",
          "27: logger.setLevel(level=logging.INFO)",
          "29: NS_ANDROID_URI = 'http://schemas.android.com/apk/res/android'",
          "30: NS_ANDROID = '{{{}}}'.format(NS_ANDROID_URI)  # Namespace as used by etree",
          "33: def get_certificate_name_string(name, short=False, delimiter=', '):",
          "34:     \"\"\"",
          "35:     Function from androguard.",
          "37:     licensed  under the Apache License, Version 2.0.",
          "38:     https://github.com/androguard/androguard/blob/master/androguard/util.py",
          "39:     Format the Name type of a X509 Certificate in a human readable form.",
          "41:     :param name: Name object to return the DN from",
          "42:     :param short: Use short form (default: False)",
          "43:     :param delimiter: Delimiter string or character between",
          "44:         two parts (default: ', ')",
          "46:     :type name: dict or :class:`asn1crypto.x509.Name`",
          "47:     :type short: boolean",
          "48:     :type delimiter: str",
          "50:     :rtype: str",
          "51:     \"\"\"",
          "52:     if isinstance(name, asn1crypto.x509.Name):",
          "53:         name = name.native",
          "55:     # For the shortform, we have a lookup table",
          "56:     # See RFC4514 for more details",
          "57:     _ = {",
          "58:         'business_category': ('businessCategory', 'businessCategory'),",
          "59:         'serial_number': ('serialNumber', 'serialNumber'),",
          "60:         'country_name': ('C', 'countryName'),",
          "61:         'postal_code': ('postalCode', 'postalCode'),",
          "62:         'state_or_province_name': ('ST', 'stateOrProvinceName'),",
          "63:         'locality_name': ('L', 'localityName'),",
          "64:         'street_address': ('street', 'streetAddress'),",
          "65:         'organization_name': ('O', 'organizationName'),",
          "66:         'organizational_unit_name': ('OU', 'organizationalUnitName'),",
          "67:         'title': ('title', 'title'),",
          "68:         'common_name': ('CN', 'commonName'),",
          "69:         'initials': ('initials', 'initials'),",
          "70:         'generation_qualifier': ('generationQualifier', 'generationQualifier'),",
          "71:         'surname': ('SN', 'surname'),",
          "72:         'given_name': ('GN', 'givenName'),",
          "73:         'name': ('name', 'name'),",
          "74:         'pseudonym': ('pseudonym', 'pseudonym'),",
          "75:         'dn_qualifier': ('dnQualifier', 'dnQualifier'),",
          "76:         'telephone_number': ('telephoneNumber', 'telephoneNumber'),",
          "77:         'email_address': ('E', 'emailAddress'),",
          "78:         'domain_component': ('DC', 'domainComponent'),",
          "79:         'name_distinguisher': ('nameDistinguisher', 'nameDistinguisher'),",
          "80:         'organization_identifier': (",
          "81:             'organizationIdentifier', 'organizationIdentifier'),",
          "82:     }",
          "83:     return delimiter.join(",
          "84:         ['{}={}'.format(",
          "85:             _.get(attr, (attr, attr))[0 if short else 1],",
          "86:             name[attr]) for attr in name])",
          "89: def parse_lxml_dom(tree):",
          "90:     handler = SAX2DOM()",
          "91:     lxml.sax.saxify(tree, handler)",
          "92:     return handler.document",
          "95: class Error(Exception):",
          "96:     \"\"\"Base class for exceptions in this module.\"\"\"",
          "97:     pass",
          "100: class FileNotPresent(Error):",
          "101:     pass",
          "104: class BrokenAPKError(Error):",
          "105:     pass",
          "108: def _dump_additional_attributes(additional_attributes):",
          "109:     \"\"\" try to parse additional attributes, but ends up to hexdump if the scheme is unknown \"\"\"",
          "111:     attributes_raw = io.BytesIO(additional_attributes)",
          "112:     attributes_hex = binascii.hexlify(additional_attributes)",
          "114:     if not len(additional_attributes):",
          "115:         return attributes_hex",
          "117:     len_attribute, = unpack('<I', attributes_raw.read(4))",
          "118:     if len_attribute != 8:",
          "119:         return attributes_hex",
          "121:     attr_id, = unpack('<I', attributes_raw.read(4))",
          "122:     if attr_id != APK._APK_SIG_ATTR_V2_STRIPPING_PROTECTION:",
          "123:         return attributes_hex",
          "125:     scheme_id, = unpack('<I', attributes_raw.read(4))",
          "127:     return \"stripping protection set, scheme %d\" % scheme_id",
          "130: def _dump_digests_or_signatures(digests_or_sigs):",
          "132:     infos = \"\"",
          "133:     for i,dos in enumerate(digests_or_sigs):",
          "135:         infos += \"\\n\"",
          "136:         infos += \" [%d]\\n\" % i",
          "137:         infos += \"  - Signature Id : %s\\n\" % APK._APK_SIG_ALGO_IDS.get(dos[0], hex(dos[0]))",
          "138:         infos += \"  - Digest: %s\" % binascii.hexlify(dos[1])",
          "140:     return infos",
          "143: class APKV2SignedData:",
          "144:     \"\"\"",
          "145:     This class holds all data associated with an APK V3 SigningBlock signed data.",
          "146:     source : https://source.android.com/security/apksigning/v2.html",
          "147:     \"\"\"",
          "149:     def __init__(self):",
          "150:         self._bytes = None",
          "151:         self.digests = None",
          "152:         self.certificates =  None",
          "153:         self.additional_attributes = None",
          "155:     def __str__(self):",
          "157:         certs_infos = \"\"",
          "159:         for i,cert in enumerate(self.certificates):",
          "160:             x509_cert = x509.Certificate.load(cert)",
          "162:             certs_infos += \"\\n\"",
          "163:             certs_infos += \" [%d]\\n\" % i",
          "164:             certs_infos += \"  - Issuer: %s\\n\" % get_certificate_name_string(x509_cert.issuer, short=True)",
          "165:             certs_infos += \"  - Subject: %s\\n\" % get_certificate_name_string(x509_cert.subject, short=True)",
          "166:             certs_infos += \"  - Serial Number: %s\\n\" % hex(x509_cert.serial_number)",
          "167:             certs_infos += \"  - Hash Algorithm: %s\\n\" % x509_cert.hash_algo",
          "168:             certs_infos += \"  - Signature Algorithm: %s\\n\" % x509_cert.signature_algo",
          "169:             certs_infos += \"  - Valid not before: %s\\n\" % x509_cert['tbs_certificate']['validity']['not_before'].native",
          "170:             certs_infos += \"  - Valid not after: %s\" % x509_cert['tbs_certificate']['validity']['not_after'].native",
          "172:         return \"\\n\".join([",
          "173:             'additional_attributes : {}'.format(_dump_additional_attributes(self.additional_attributes)),",
          "174:             'digests : {}'.format(_dump_digests_or_signatures(self.digests)),",
          "175:             'certificates : {}'.format(certs_infos),",
          "176:         ])",
          "179: class APKV3SignedData(APKV2SignedData):",
          "180:     \"\"\"",
          "181:     This class holds all data associated with an APK V3 SigningBlock signed data.",
          "182:     source : https://source.android.com/security/apksigning/v3.html",
          "183:     \"\"\"",
          "185:     def __init__(self):",
          "186:         super().__init__()",
          "187:         self.minSDK = None",
          "188:         self.maxSDK = None",
          "190:     def __str__(self):",
          "192:         base_str = super().__str__()",
          "194:         # maxSDK is set to a negative value if there is no upper bound on the sdk targeted",
          "195:         max_sdk_str = \"%d\" % self.maxSDK",
          "196:         if self.maxSDK >= 0x7fffffff:",
          "197:             max_sdk_str = \"0x%x\" % self.maxSDK",
          "199:         return \"\\n\".join([",
          "200:             'signer minSDK : {:d}'.format(self.minSDK),",
          "201:             'signer maxSDK : {:s}'.format(max_sdk_str),",
          "202:             base_str",
          "203:         ])",
          "206: class APKV2Signer:",
          "207:     \"\"\"",
          "208:     This class holds all data associated with an APK V2 SigningBlock signer.",
          "209:     source : https://source.android.com/security/apksigning/v2.html",
          "210:     \"\"\"",
          "212:     def __init__(self):",
          "213:         self._bytes = None",
          "214:         self.signed_data = None",
          "215:         self.signatures = None",
          "216:         self.public_key = None",
          "218:     def __str__(self):",
          "219:         return \"\\n\".join([",
          "220:             '{:s}'.format(str(self.signed_data)),",
          "221:             'signatures : {}'.format(_dump_digests_or_signatures(self.signatures)),",
          "222:             'public key : {}'.format(binascii.hexlify(self.public_key)),",
          "223:         ])",
          "226: class APKV3Signer(APKV2Signer):",
          "227:     \"\"\"",
          "228:     This class holds all data associated with an APK V3 SigningBlock signer.",
          "229:     source : https://source.android.com/security/apksigning/v3.html",
          "230:     \"\"\"",
          "232:     def __init__(self):",
          "233:         super().__init__()",
          "234:         self.minSDK = None",
          "235:         self.maxSDK = None",
          "237:     def __str__(self):",
          "239:         base_str = super().__str__()",
          "241:         # maxSDK is set to a negative value if there is no upper bound on the sdk targeted",
          "242:         max_sdk_str = \"%d\" % self.maxSDK",
          "243:         if self.maxSDK >= 0x7fffffff:",
          "244:             max_sdk_str = \"0x%x\" % self.maxSDK",
          "246:         return \"\\n\".join([",
          "247:             'signer minSDK : {:d}'.format(self.minSDK),",
          "248:             'signer maxSDK : {:s}'.format(max_sdk_str),",
          "249:             base_str",
          "250:         ])",
          "253: class APK:",
          "254:     # Constants in ZipFile",
          "255:     _PK_END_OF_CENTRAL_DIR = b\"\\x50\\x4b\\x05\\x06\"",
          "256:     _PK_CENTRAL_DIR = b\"\\x50\\x4b\\x01\\x02\"",
          "258:     # Constants in the APK Signature Block",
          "259:     _APK_SIG_MAGIC = b\"APK Sig Block 42\"",
          "260:     _APK_SIG_KEY_V2_SIGNATURE = 0x7109871a",
          "261:     _APK_SIG_KEY_V3_SIGNATURE = 0xf05368c0",
          "262:     _APK_SIG_ATTR_V2_STRIPPING_PROTECTION = 0xbeeff00d",
          "264:     _APK_SIG_ALGO_IDS = {",
          "265:         0x0101 : \"RSASSA-PSS with SHA2-256 digest, SHA2-256 MGF1, 32 bytes of salt, trailer: 0xbc\",",
          "266:         0x0102 : \"RSASSA-PSS with SHA2-512 digest, SHA2-512 MGF1, 64 bytes of salt, trailer: 0xbc\",",
          "267:         0x0103 : \"RSASSA-PKCS1-v1_5 with SHA2-256 digest.\", # This is for build systems which require deterministic signatures.",
          "268:         0x0104 : \"RSASSA-PKCS1-v1_5 with SHA2-512 digest.\", # This is for build systems which require deterministic signatures.",
          "269:         0x0201 : \"ECDSA with SHA2-256 digest\",",
          "270:         0x0202 : \"ECDSA with SHA2-512 digest\",",
          "271:         0x0301 : \"DSA with SHA2-256 digest\",",
          "272:     }",
          "274:     __no_magic = False",
          "276:     def __init__(self, filename, raw=False, magic_file=None, skip_analysis=False, testzip=False):",
          "277:         \"\"\"",
          "278:         This class can access to all elements in an APK file",
          "280:         example::",
          "282:             APK(\"myfile.apk\")",
          "283:             APK(read(\"myfile.apk\"), raw=True)",
          "285:         :param filename: specify the path of the file, or raw data",
          "286:         :param raw: specify if the filename is a path or raw data (optional)",
          "287:         :param magic_file: specify the magic file (not used anymore - legacy only)",
          "288:         :param skip_analysis: Skip the analysis, e.g. no manifest files are read. (default: False)",
          "289:         :param testzip: Test the APK for integrity, e.g. if the ZIP file is broken. Throw an exception on failure (default False)",
          "291:         :type filename: string",
          "292:         :type raw: boolean",
          "293:         :type magic_file: string",
          "294:         :type skip_analysis: boolean",
          "295:         :type testzip: boolean",
          "297:         \"\"\"",
          "298:         if magic_file:",
          "299:             logger.warning(\"You set magic_file but this parameter is actually unused. You should remove it.\")",
          "301:         self.filename = filename",
          "303:         self.xml = {}",
          "304:         self.axml = {}",
          "305:         self.arsc = {}",
          "307:         self.package = \"\"",
          "308:         self.androidversion = {}",
          "309:         self.permissions = []",
          "310:         self.uses_permissions = []",
          "311:         self.declared_permissions = {}",
          "312:         self.valid_apk = False",
          "314:         self._is_signed_v2 = None",
          "315:         self._is_signed_v3 = None",
          "316:         self._v2_blocks = {}",
          "317:         self._v2_signing_data = None",
          "318:         self._v3_signing_data = None",
          "320:         self._files = {}",
          "321:         self.files_crc32 = {}",
          "323:         if raw is True:",
          "324:             self.__raw = filename",
          "325:             self._sha256 = hashlib.sha256(self.__raw).hexdigest()",
          "326:             # Set the filename to something sane",
          "327:             self.filename = \"raw_apk_sha256:{}\".format(self._sha256)",
          "328:             self.zip = ZipEntry.parse(io.BytesIO(self.__raw), True)",
          "329:         else:",
          "330:             self.zip = ZipEntry.parse(filename, False)",
          "331:             self.__raw = self.zip.zip.getvalue()",
          "333:         if testzip:",
          "334:             logger.info(\"Testing zip file integrity, this might take a while...\")",
          "335:             # Test the zipfile for integrity before continuing.",
          "336:             # This process might be slow, as the whole file is read.",
          "337:             # Therefore it is possible to enable it as a separate feature.",
          "338:             #",
          "339:             # A short benchmark showed, that testing the zip takes about 10 times longer!",
          "340:             # e.g. normal zip loading (skip_analysis=True) takes about 0.01s, where",
          "341:             # testzip takes 0.1s!",
          "342:             test_zip = zipfile.ZipFile(io.BytesIO(self.__raw), mode=\"r\")",
          "343:             ret = test_zip.testzip()",
          "344:             if ret is not None:",
          "345:                 # we could print the filename here, but there are zip which are so broken",
          "346:                 # That the filename is either very very long or does not make any sense.",
          "347:                 # Thus we do not do it, the user might find out by using other tools.",
          "348:                 raise BrokenAPKError(\"The APK is probably broken: testzip returned an error.\")",
          "350:         if not skip_analysis:",
          "351:             self._apk_analysis()",
          "353:     @staticmethod",
          "354:     def _ns(name):",
          "355:         \"\"\"",
          "356:         return the name including the Android namespace URI",
          "357:         \"\"\"",
          "358:         return NS_ANDROID + name",
          "360:     def _apk_analysis(self):",
          "361:         \"\"\"",
          "362:         Run analysis on the APK file.",
          "364:         This method is usually called by __init__ except if skip_analysis is False.",
          "365:         It will then parse the AndroidManifest.xml and set all fields in the APK class which can be",
          "366:         extracted from the Manifest.",
          "367:         \"\"\"",
          "368:         i = \"AndroidManifest.xml\"",
          "369:         logger.info(\"Starting analysis on {}\".format(i))",
          "370:         try:",
          "371:             manifest_data = self.zip.read(i)",
          "372:         except KeyError:",
          "373:             logger.warning(\"Missing AndroidManifest.xml. Is this an APK file?\")",
          "374:         else:",
          "375:             ap = AXMLPrinter(manifest_data)",
          "377:             if not ap.is_valid():",
          "378:                 logger.error(\"Error while parsing AndroidManifest.xml - is the file valid?\")",
          "379:                 return",
          "381:             self.axml[i] = ap",
          "382:             self.xml[i] = self.axml[i].get_xml_obj()",
          "384:             if self.axml[i].is_packed():",
          "385:                 logger.warning(\"XML Seems to be packed, operations on the AndroidManifest.xml might fail.\")",
          "387:             if self.xml[i] is not None:",
          "388:                 if self.xml[i].tag != \"manifest\":",
          "389:                     logger.error(\"AndroidManifest.xml does not start with a <manifest> tag! Is this a valid APK?\")",
          "390:                     return",
          "392:                 self.package = self.get_attribute_value(\"manifest\", \"package\")",
          "393:                 self.androidversion[\"Code\"] = self.get_attribute_value(\"manifest\", \"versionCode\")",
          "394:                 self.androidversion[\"Name\"] = self.get_attribute_value(\"manifest\", \"versionName\")",
          "395:                 permission = list(self.get_all_attribute_value(\"uses-permission\", \"name\"))",
          "396:                 self.permissions = list(set(self.permissions + permission))",
          "398:                 for uses_permission in self.find_tags(\"uses-permission\"):",
          "399:                     self.uses_permissions.append([",
          "400:                         self.get_value_from_tag(uses_permission, \"name\"),",
          "401:                         self._get_permission_maxsdk(uses_permission)",
          "402:                     ])",
          "404:                 # getting details of the declared permissions",
          "405:                 for d_perm_item in self.find_tags('permission'):",
          "406:                     d_perm_name = self._get_res_string_value(",
          "407:                         str(self.get_value_from_tag(d_perm_item, \"name\")))",
          "408:                     d_perm_label = self._get_res_string_value(",
          "409:                         str(self.get_value_from_tag(d_perm_item, \"label\")))",
          "410:                     d_perm_description = self._get_res_string_value(",
          "411:                         str(self.get_value_from_tag(d_perm_item, \"description\")))",
          "412:                     d_perm_permissionGroup = self._get_res_string_value(",
          "413:                         str(self.get_value_from_tag(d_perm_item, \"permissionGroup\")))",
          "414:                     d_perm_protectionLevel = self._get_res_string_value(",
          "415:                         str(self.get_value_from_tag(d_perm_item, \"protectionLevel\")))",
          "417:                     d_perm_details = {",
          "418:                         \"label\": d_perm_label,",
          "419:                         \"description\": d_perm_description,",
          "420:                         \"permissionGroup\": d_perm_permissionGroup,",
          "421:                         \"protectionLevel\": d_perm_protectionLevel,",
          "422:                     }",
          "423:                     self.declared_permissions[d_perm_name] = d_perm_details",
          "425:                 self.valid_apk = True",
          "426:                 logger.debug(\"APK file was successfully validated!\")",
          "428:         # self.permission_module = androconf.load_api_specific_resource_module(",
          "429:         #     \"aosp_permissions\", self.get_target_sdk_version())",
          "430:         # self.permission_module_min_sdk = androconf.load_api_specific_resource_module(",
          "431:         #     \"aosp_permissions\", self.get_min_sdk_version())",
          "433:     def __getstate__(self):",
          "434:         \"\"\"",
          "435:         Function for pickling APK Objects.",
          "437:         We remove the zip from the Object, as it is not pickable",
          "438:         And it does not make any sense to pickle it anyways.",
          "440:         :returns: the picklable APK Object without zip.",
          "441:         \"\"\"",
          "442:         # Upon pickling, we need to remove the ZipFile",
          "443:         x = self.__dict__",
          "444:         x['axml'] = str(x['axml'])",
          "445:         x['xml'] = str(x['xml'])",
          "446:         del x['zip']",
          "448:         return x",
          "450:     def __setstate__(self, state):",
          "451:         \"\"\"",
          "452:         Load a pickled APK Object and restore the state",
          "454:         We load the zip file back by reading __raw from the Object.",
          "456:         :param state: pickled state",
          "457:         \"\"\"",
          "458:         self.__dict__ = state",
          "460:         self.zip = zipfile.ZipFile(io.BytesIO(self.get_raw()), mode=\"r\")",
          "462:     def _get_res_string_value(self, string):",
          "463:         if not string.startswith('@string/'):",
          "464:             return string",
          "465:         string_key = string[9:]",
          "467:         res_parser = self.get_android_resources()",
          "468:         if not res_parser:",
          "469:             return ''",
          "470:         string_value = ''",
          "471:         for package_name in res_parser.get_packages_names():",
          "472:             extracted_values = res_parser.get_string(package_name, string_key)",
          "473:             if extracted_values:",
          "474:                 string_value = extracted_values[1]",
          "475:                 break",
          "476:         return string_value",
          "478:     def _get_permission_maxsdk(self, item):",
          "479:         maxSdkVersion = None",
          "480:         try:",
          "481:             maxSdkVersion = int(self.get_value_from_tag(item, \"maxSdkVersion\"))",
          "482:         except ValueError:",
          "483:             logger.warning(str(maxSdkVersion) + ' is not a valid value for <uses-permission> maxSdkVersion')",
          "484:         except TypeError:",
          "485:             pass",
          "486:         return maxSdkVersion",
          "488:     def is_valid_APK(self):",
          "489:         \"\"\"",
          "490:         Return true if the APK is valid, false otherwise.",
          "491:         An APK is seen as valid, if the AndroidManifest.xml could be successful parsed.",
          "492:         This does not mean that the APK has a valid signature nor that the APK",
          "493:         can be installed on an Android system.",
          "495:         :rtype: boolean",
          "496:         \"\"\"",
          "497:         return self.valid_apk",
          "499:     def get_filename(self):",
          "500:         \"\"\"",
          "501:         Return the filename of the APK",
          "503:         :rtype: :class:`str`",
          "504:         \"\"\"",
          "505:         return self.filename",
          "507:     def get_app_name(self):",
          "508:         \"\"\"",
          "509:         Return the appname of the APK",
          "511:         This name is read from the AndroidManifest.xml",
          "512:         using the application android:label.",
          "513:         If no label exists, the android:label of the main activity is used.",
          "515:         If there is also no main activity label, an empty string is returned.",
          "517:         :rtype: :class:`str`",
          "518:         \"\"\"",
          "520:         app_name = self.get_attribute_value('application', 'label')",
          "521:         if app_name is None:",
          "522:             activities = self.get_main_activities()",
          "523:             main_activity_name = None",
          "524:             if len(activities) > 0:",
          "525:                 main_activity_name = activities.pop()",
          "527:             # FIXME: would need to use _format_value inside get_attribute_value for each returned name!",
          "528:             # For example, as the activity name might be foobar.foo.bar but inside the activity it is only .bar",
          "529:             app_name = self.get_attribute_value('activity', 'label', name=main_activity_name)",
          "531:         if app_name is None:",
          "532:             # No App name set",
          "533:             # TODO return packagename instead?",
          "534:             logger.warning(\"It looks like that no app name is set for the main activity!\")",
          "535:             return \"\"",
          "537:         if app_name.startswith(\"@\"):",
          "538:             res_parser = self.get_android_resources()",
          "539:             if not res_parser:",
          "540:                 # TODO: What should be the correct return value here?",
          "541:                 return app_name",
          "543:             res_id, package = res_parser.parse_id(app_name)",
          "545:             # If the package name is the same as the APK package,",
          "546:             # we should be able to resolve the ID.",
          "547:             if package and package != self.get_package():",
          "548:                 if package == 'android':",
          "549:                     # TODO: we can not resolve this, as we lack framework-res.apk",
          "550:                     # one exception would be when parsing framework-res.apk directly.",
          "551:                     logger.warning(\"Resource ID with android package name encountered! \"",
          "552:                                 \"Will not resolve, framework-res.apk would be required.\")",
          "553:                     return app_name",
          "554:                 else:",
          "555:                     # TODO should look this up, might be in the resources",
          "556:                     logger.warning(\"Resource ID with Package name '{}' encountered! Will not resolve\".format(package))",
          "557:                     return app_name",
          "559:             try:",
          "560:                 app_name = res_parser.get_resolved_res_configs(",
          "561:                     res_id,",
          "562:                     ARSCResTableConfig.default_config())[0][1]",
          "563:             except Exception as e:",
          "564:                 logger.warning(\"Exception selecting app name: %s\" % e)",
          "565:         return app_name",
          "567:     def get_app_icon(self, max_dpi=65536):",
          "568:         \"\"\"",
          "569:         Return the first icon file name, which density is not greater than max_dpi,",
          "570:         unless exact icon resolution is set in the manifest, in which case",
          "571:         return the exact file.",
          "573:         This information is read from the AndroidManifest.xml",
          "575:         From https://developer.android.com/guide/practices/screens_support.html",
          "576:         and https://developer.android.com/ndk/reference/group___configuration.html",
          "589:         There is a difference between nodpi and anydpi:",
          "590:         nodpi will be used if no other density is specified. Or the density does not match.",
          "591:         nodpi is the fallback for everything else. If there is a resource that matches the DPI,",
          "592:         this is used.",
          "593:         anydpi is also valid for all densities but in this case, anydpi will overrule all other files!",
          "594:         Therefore anydpi is usually used with vector graphics and with constraints on the API level.",
          "595:         For example adaptive icons are usually marked as anydpi.",
          "597:         When it comes now to selecting an icon, there is the following flow:",
          "599:         1. is there an anydpi icon?",
          "600:         2. is there an icon for the dpi of the device?",
          "601:         3. is there a nodpi icon?",
          "602:         4. (only on very old devices) is there a icon with dpi 0 (the default)",
          "604:         For more information read here: https://stackoverflow.com/a/34370735/446140",
          "606:         :rtype: :class:`str`",
          "607:         \"\"\"",
          "608:         main_activity_name = self.get_main_activity()",
          "610:         app_icon = self.get_attribute_value(",
          "611:             'activity', 'icon', name=main_activity_name)",
          "613:         if not app_icon:",
          "614:             app_icon = self.get_attribute_value('application', 'icon')",
          "616:         res_parser = self.get_android_resources()",
          "617:         if not res_parser:",
          "618:             # Can not do anything below this point to resolve...",
          "619:             return None",
          "621:         if not app_icon:",
          "622:             res_id = res_parser.get_res_id_by_key(self.package, 'mipmap', 'ic_launcher')",
          "623:             if res_id:",
          "624:                 app_icon = \"@%x\" % res_id",
          "626:         if not app_icon:",
          "627:             res_id = res_parser.get_res_id_by_key(self.package, 'drawable', 'ic_launcher')",
          "628:             if res_id:",
          "629:                 app_icon = \"@%x\" % res_id",
          "631:         if not app_icon:",
          "632:             # If the icon can not be found, return now",
          "633:             return None",
          "635:         if app_icon.startswith(\"@\"):",
          "636:             app_icon_id = app_icon[1:]",
          "637:             app_icon_id = app_icon_id.split(':')[-1]",
          "638:             res_id = int(app_icon_id, 16)",
          "639:             candidates = res_parser.get_resolved_res_configs(res_id)",
          "641:             app_icon = None",
          "642:             current_dpi = -1",
          "644:             try:",
          "645:                 for config, file_name in candidates:",
          "646:                     dpi = config.get_density()",
          "647:                     if current_dpi < dpi <= max_dpi:",
          "648:                         app_icon = file_name",
          "649:                         current_dpi = dpi",
          "650:             except Exception as e:",
          "651:                 logger.warning(\"Exception selecting app icon: %s\" % e)",
          "653:         return app_icon",
          "655:     def get_package(self):",
          "656:         \"\"\"",
          "657:         Return the name of the package",
          "659:         This information is read from the AndroidManifest.xml",
          "661:         :rtype: :class:`str`",
          "662:         \"\"\"",
          "663:         return self.package",
          "665:     def get_androidversion_code(self):",
          "666:         \"\"\"",
          "667:         Return the android version code",
          "669:         This information is read from the AndroidManifest.xml",
          "671:         :rtype: :class:`str`",
          "672:         \"\"\"",
          "673:         return self.androidversion[\"Code\"]",
          "675:     def get_androidversion_name(self):",
          "676:         \"\"\"",
          "677:         Return the android version name",
          "679:         This information is read from the AndroidManifest.xml",
          "681:         :rtype: :class:`str`",
          "682:         \"\"\"",
          "683:         return self.androidversion[\"Name\"]",
          "685:     def get_files(self):",
          "686:         \"\"\"",
          "687:         Return the file names inside the APK.",
          "689:         :rtype: a list of :class:`str`",
          "690:         \"\"\"",
          "691:         return self.zip.namelist()",
          "693:     # def _get_file_magic_name(self, buffer):",
          "694:     #     \"\"\"",
          "695:     #     Return the filetype guessed for a buffer",
          "696:     #     :param buffer: bytes",
          "697:     #     :returns: str of filetype",
          "698:     #     \"\"\"",
          "699:     #     default = \"Unknown\"",
          "701:     #     # Faster way, test once, return default.",
          "702:     #     if self.__no_magic:",
          "703:     #         return default",
          "705:     #     try:",
          "706:     #         # Magic is optional",
          "707:     #         import magic",
          "708:     #     except ImportError:",
          "709:     #         self.__no_magic = True",
          "710:     #         logger.warning(\"No Magic library was found on your system.\")",
          "711:     #         return default",
          "712:     #     except TypeError as e:",
          "713:     #         self.__no_magic = True",
          "714:     #         logger.warning(\"It looks like you have the magic python package installed but not the magic library itself!\")",
          "715:     #         logger.warning(\"Error from magic library: %s\", e)",
          "716:     #         logger.warning(\"Please follow the installation instructions at https://github.com/ahupp/python-magic/#installation\")",
          "717:     #         logger.warning(\"You can also install the 'python-magic-bin' package on Windows and MacOS\")",
          "718:     #         return default",
          "720:         try:",
          "721:             # There are several implementations of magic,",
          "722:             # unfortunately all called magic",
          "723:             # We use this one: https://github.com/ahupp/python-magic/",
          "724:             # You can also use python-magic-bin on Windows or MacOS",
          "725:             getattr(magic, \"MagicException\")",
          "726:         except AttributeError:",
          "727:             self.__no_magic = True",
          "728:             logger.warning(\"Not the correct Magic library was found on your \"",
          "729:                         \"system. Please install python-magic or python-magic-bin!\")",
          "730:             return default",
          "732:         try:",
          "733:             # 1024 byte are usually enough to test the magic",
          "734:             ftype = magic.from_buffer(buffer[:1024])",
          "735:         except magic.MagicException as e:",
          "736:             logger.exception(\"Error getting the magic type: %s\", e)",
          "737:             return default",
          "739:         if not ftype:",
          "740:             return default",
          "741:         else:",
          "742:             return self._patch_magic(buffer, ftype)",
          "744:     @property",
          "745:     def files(self):",
          "746:         \"\"\"",
          "747:         Returns a dictionary of filenames and detected magic type",
          "749:         :returns: dictionary of files and their mime type",
          "750:         \"\"\"",
          "751:         return self.get_files_types()",
          "753:     # def get_files_types(self):",
          "754:     #     \"\"\"",
          "755:     #     Return the files inside the APK with their associated types (by using python-magic)",
          "757:     #     At the same time, the CRC32 are calculated for the files.",
          "759:     #     :rtype: a dictionnary",
          "760:     #     \"\"\"",
          "761:     #     if self._files == {}:",
          "762:     #         # Generate File Types / CRC List",
          "763:     #         for i in self.get_files():",
          "764:     #             buffer = self._get_crc32(i)",
          "765:     #             self._files[i] = self._get_file_magic_name(buffer)",
          "767:     #     return self._files",
          "769:     # def _patch_magic(self, buffer, orig):",
          "770:     #     \"\"\"",
          "771:     #     Overwrite some probably wrong detections by mime libraries",
          "773:     #     :param buffer: bytes of the file to detect",
          "774:     #     :param orig: guess by mime libary",
          "775:     #     :returns: corrected guess",
          "776:     #     \"\"\"",
          "777:     #     if (\"Zip\" in orig) or ('(JAR)' in orig) and androconf.is_android_raw(buffer) == 'APK':",
          "778:     #         return \"Android application package file\"",
          "780:     #     return orig",
          "782:     def _get_crc32(self, filename):",
          "783:         \"\"\"",
          "784:         Calculates and compares the CRC32 and returns the raw buffer.",
          "786:         The CRC32 is added to `files_crc32` dictionary, if not present.",
          "788:         :param filename: filename inside the zipfile",
          "789:         :rtype: bytes",
          "790:         \"\"\"",
          "791:         buffer = self.zip.read(filename)",
          "792:         if filename not in self.files_crc32:",
          "793:             self.files_crc32[filename] = crc32(buffer)",
          "794:             if self.files_crc32[filename] != self.zip.infolist()[filename].crc32_of_uncompressed_data:",
          "795:                 logger.error(\"File '{}' has different CRC32 after unpacking! \"",
          "796:                           \"Declared: {:08x}, Calculated: {:08x}\".format(filename,",
          "797:                                                                         self.zip.infolist()[filename].crc32_of_uncompressed_data,",
          "798:                                                                         self.files_crc32[filename]))",
          "799:         return buffer",
          "801:     def get_files_crc32(self):",
          "802:         \"\"\"",
          "803:         Calculates and returns a dictionary of filenames and CRC32",
          "805:         :returns: dict of filename: CRC32",
          "806:         \"\"\"",
          "807:         if self.files_crc32 == {}:",
          "808:             for i in self.get_files():",
          "809:                 self._get_crc32(i)",
          "811:         return self.files_crc32",
          "813:     # def get_files_information(self):",
          "814:     #     \"\"\"",
          "815:     #     Return the files inside the APK with their associated types and crc32",
          "817:     #     :rtype: str, str, int",
          "818:     #     \"\"\"",
          "819:     #     for k in self.get_files():",
          "820:     #         yield k, self.get_files_types()[k], self.get_files_crc32()[k]",
          "822:     def get_raw(self):",
          "823:         \"\"\"",
          "824:         Return raw bytes of the APK",
          "826:         :rtype: bytes",
          "827:         \"\"\"",
          "829:         if self.__raw:",
          "830:             return self.__raw",
          "831:         else:",
          "832:             with open(self.filename, 'rb') as f:",
          "833:                 self.__raw = bytearray(f.read())",
          "834:             return self.__raw",
          "836:     def get_file(self, filename):",
          "837:         \"\"\"",
          "838:         Return the raw data of the specified filename",
          "839:         inside the APK",
          "841:         :rtype: bytes",
          "842:         \"\"\"",
          "843:         try:",
          "844:             return self.zip.read(filename)",
          "845:         except KeyError:",
          "846:             raise FileNotPresent(filename)",
          "848:     def get_dex(self):",
          "849:         \"\"\"",
          "850:         Return the raw data of the classes dex file",
          "852:         This will give you the data of the file called `classes.dex`",
          "853:         inside the APK. If the APK has multiple DEX files, you need to use :func:`~APK.get_all_dex`.",
          "855:         :rtype: bytes",
          "856:         \"\"\"",
          "857:         try:",
          "858:             return self.get_file(\"classes.dex\")",
          "859:         except FileNotPresent:",
          "860:             # TODO is this a good idea to return an empty string?",
          "861:             return b\"\"",
          "863:     def get_dex_names(self):",
          "864:         \"\"\"",
          "865:         Return the names of all DEX files found in the APK.",
          "866:         This method only accounts for \"offical\" dex files, i.e. all files",
          "867:         in the root directory of the APK named classes.dex or classes[0-9]+.dex",
          "869:         :rtype: a list of str",
          "870:         \"\"\"",
          "871:         dexre = re.compile(r\"^classes(\\d*).dex$\")",
          "872:         return filter(lambda x: dexre.match(x), self.get_files())",
          "874:     def get_all_dex(self):",
          "875:         \"\"\"",
          "876:         Return the raw data of all classes dex files",
          "878:         :rtype: a generator of bytes",
          "879:         \"\"\"",
          "880:         for dex_name in self.get_dex_names():",
          "881:             yield self.get_file(dex_name)",
          "883:     def is_multidex(self):",
          "884:         \"\"\"",
          "885:         Test if the APK has multiple DEX files",
          "887:         :returns: True if multiple dex found, otherwise False",
          "888:         \"\"\"",
          "889:         dexre = re.compile(r\"^classes(\\d+)?.dex$\")",
          "890:         return len([instance for instance in self.get_files() if dexre.search(instance)]) > 1",
          "892:     def _format_value(self, value):",
          "893:         \"\"\"",
          "894:         Format a value with packagename, if not already set.",
          "895:         For example, the name :code:`'.foobar'` will be transformed into :code:`'package.name.foobar'`.",
          "897:         Names which do not contain any dots are assumed to be packagename-less as well:",
          "898:         :code:`foobar` will also transform into :code:`package.name.foobar`.",
          "900:         :param value:",
          "901:         :returns:",
          "902:         \"\"\"",
          "903:         if value and self.package:",
          "904:             v_dot = value.find(\".\")",
          "905:             if v_dot == 0:",
          "906:                 # Dot at the start",
          "907:                 value = self.package + value",
          "908:             elif v_dot == -1:",
          "909:                 # Not a single dot",
          "910:                 value = self.package + \".\" + value",
          "911:         return value",
          "913:     def get_all_attribute_value(",
          "914:         self, tag_name, attribute, format_value=True, **attribute_filter",
          "915:     ):",
          "916:         \"\"\"",
          "917:         Yields all the attribute values in xml files which match with the tag name and the specific attribute",
          "919:         :param str tag_name: specify the tag name",
          "920:         :param str attribute: specify the attribute",
          "921:         :param bool format_value: specify if the value needs to be formatted with packagename",
          "922:         \"\"\"",
          "923:         tags = self.find_tags(tag_name, **attribute_filter)",
          "924:         for tag in tags:",
          "925:             value = tag.get(self._ns(attribute)) or tag.get(attribute)",
          "926:             if value is not None:",
          "927:                 if format_value:",
          "928:                     yield self._format_value(value)",
          "929:                 else:",
          "930:                     yield value",
          "932:     def get_attribute_value(",
          "933:         self, tag_name, attribute, format_value=False, **attribute_filter",
          "934:     ):",
          "935:         \"\"\"",
          "936:         Return the attribute value in xml files which matches the tag name and the specific attribute",
          "938:         :param str tag_name: specify the tag name",
          "939:         :param str attribute: specify the attribute",
          "940:         :param bool format_value: specify if the value needs to be formatted with packagename",
          "941:         \"\"\"",
          "943:         for value in self.get_all_attribute_value(",
          "944:                 tag_name, attribute, format_value, **attribute_filter):",
          "945:             if value is not None:",
          "946:                 return value",
          "948:     def get_value_from_tag(self, tag, attribute):",
          "949:         \"\"\"",
          "950:         Return the value of the android prefixed attribute in a specific tag.",
          "952:         This function will always try to get the attribute with a android: prefix first,",
          "953:         and will try to return the attribute without the prefix, if the attribute could not be found.",
          "954:         This is useful for some broken AndroidManifest.xml, where no android namespace is set,",
          "955:         but could also indicate malicious activity (i.e. wrongly repackaged files).",
          "956:         A warning is printed if the attribute is found without a namespace prefix.",
          "958:         If you require to get the exact result you need to query the tag directly:",
          "960:         example::",
          "961:             >>> from lxml.etree import Element",
          "962:             >>> tag = Element('bar', nsmap={'android': 'http://schemas.android.com/apk/res/android'})",
          "963:             >>> tag.set('{http://schemas.android.com/apk/res/android}foobar', 'barfoo')",
          "964:             >>> tag.set('name', 'baz')",
          "965:             # Assume that `a` is some APK object",
          "966:             >>> a.get_value_from_tag(tag, 'name')",
          "967:             'baz'",
          "968:             >>> tag.get('name')",
          "969:             'baz'",
          "970:             >>> tag.get('foobar')",
          "971:             None",
          "972:             >>> a.get_value_from_tag(tag, 'foobar')",
          "973:             'barfoo'",
          "975:         :param lxml.etree.Element tag: specify the tag element",
          "976:         :param str attribute: specify the attribute name",
          "977:         :returns: the attribute's value, or None if the attribute is not present",
          "978:         \"\"\"",
          "980:         # TODO: figure out if both android:name and name tag exist which one to give preference:",
          "981:         # currently we give preference for the namespace one and fallback to the un-namespaced",
          "982:         value = tag.get(self._ns(attribute))",
          "983:         if value is None:",
          "984:             value = tag.get(attribute)",
          "986:             if value:",
          "987:                 # If value is still None, the attribute could not be found, thus is not present",
          "988:                 logger.warning(\"Failed to get the attribute '{}' on tag '{}' with namespace. \"",
          "989:                             \"But found the same attribute without namespace!\".format(attribute, tag.tag))",
          "990:         return value",
          "992:     def find_tags(self, tag_name, **attribute_filter):",
          "993:         \"\"\"",
          "994:         Return a list of all the matched tags in all available xml",
          "996:         :param str tag: specify the tag name",
          "997:         \"\"\"",
          "998:         all_tags = [",
          "999:             self.find_tags_from_xml(",
          "1000:                 i, tag_name, **attribute_filter",
          "1001:             )",
          "1002:             for i in self.xml",
          "1003:         ]",
          "1004:         return [tag for tag_list in all_tags for tag in tag_list]",
          "1006:     def find_tags_from_xml(",
          "1007:         self, xml_name, tag_name, **attribute_filter",
          "1008:     ):",
          "1009:         \"\"\"",
          "1010:         Return a list of all the matched tags in a specific xml",
          "1011:         w",
          "1012:         :param str xml_name: specify from which xml to pick the tag from",
          "1013:         :param str tag_name: specify the tag name",
          "1014:         \"\"\"",
          "1015:         xml = self.xml[xml_name]",
          "1016:         if xml is None:",
          "1017:             return []",
          "1018:         if xml.tag == tag_name:",
          "1019:             if self.is_tag_matched(",
          "1020:                 xml.tag, **attribute_filter",
          "1021:             ):",
          "1022:                 return [xml]",
          "1023:             return []",
          "1024:         tags = xml.findall(\".//\" + tag_name)",
          "1025:         return [",
          "1026:             tag for tag in tags if self.is_tag_matched(",
          "1027:                 tag, **attribute_filter",
          "1028:             )",
          "1029:         ]",
          "1031:     def is_tag_matched(self, tag, **attribute_filter):",
          "1032:         r\"\"\"",
          "1033:         Return true if the attributes matches in attribute filter.",
          "1035:         An attribute filter is a dictionary containing: {attribute_name: value}.",
          "1036:         This function will return True if and only if all attributes have the same value.",
          "1037:         This function allows to set the dictionary via kwargs, thus you can filter like this:",
          "1039:         example::",
          "1040:             a.is_tag_matched(tag, name=\"foobar\", other=\"barfoo\")",
          "1042:         This function uses a fallback for attribute searching. It will by default use",
          "1043:         the namespace variant but fall back to the non-namespace variant.",
          "1044:         Thus specifiying :code:`{\"name\": \"foobar\"}` will match on :code:`<bla name=\"foobar\" \\>`",
          "1045:         as well as on :code:`<bla android:name=\"foobar\" \\>`.",
          "1047:         :param lxml.etree.Element tag: specify the tag element",
          "1048:         :param attribute_filter: specify the attribute filter as dictionary",
          "1049:         \"\"\"",
          "1050:         if len(attribute_filter) <= 0:",
          "1051:             return True",
          "1052:         for attr, value in attribute_filter.items():",
          "1053:             _value = self.get_value_from_tag(tag, attr)",
          "1054:             if _value != value:",
          "1055:                 return False",
          "1056:         return True",
          "1058:     def get_main_activities(self):",
          "1059:         \"\"\"",
          "1060:         Return names of the main activities",
          "1062:         These values are read from the AndroidManifest.xml",
          "1064:         :rtype: a set of str",
          "1065:         \"\"\"",
          "1066:         x = set()",
          "1067:         y = set()",
          "1069:         for i in self.xml:",
          "1070:             if self.xml[i] is None:",
          "1071:                 continue",
          "1072:             activities_and_aliases = self.xml[i].findall(\".//activity\") + \\",
          "1073:                                      self.xml[i].findall(\".//activity-alias\")",
          "1075:             for item in activities_and_aliases:",
          "1076:                 # Some applications have more than one MAIN activity.",
          "1077:                 # For example: paid and free content",
          "1078:                 activityEnabled = item.get(self._ns(\"enabled\"))",
          "1079:                 if activityEnabled == \"false\":",
          "1080:                     continue",
          "1082:                 for sitem in item.findall(\".//action\"):",
          "1083:                     val = sitem.get(self._ns(\"name\"))",
          "1084:                     if val == \"android.intent.action.MAIN\":",
          "1085:                         activity = item.get(self._ns(\"name\"))",
          "1086:                         if activity is not None:",
          "1087:                             x.add(item.get(self._ns(\"name\")))",
          "1088:                         else:",
          "1089:                             logger.warning('Main activity without name')",
          "1091:                 for sitem in item.findall(\".//category\"):",
          "1092:                     val = sitem.get(self._ns(\"name\"))",
          "1093:                     if val == \"android.intent.category.LAUNCHER\":",
          "1094:                         activity = item.get(self._ns(\"name\"))",
          "1095:                         if activity is not None:",
          "1096:                             y.add(item.get(self._ns(\"name\")))",
          "1097:                         else:",
          "1098:                             logger.warning('Launcher activity without name')",
          "1100:         return x.intersection(y)",
          "1102:     def get_main_activity(self):",
          "1103:         \"\"\"",
          "1104:         Return the name of the main activity",
          "1106:         This value is read from the AndroidManifest.xml",
          "1108:         :rtype: str",
          "1109:         \"\"\"",
          "1110:         activities = self.get_main_activities()",
          "1111:         if len(activities) == 1:",
          "1112:             return self._format_value(activities.pop())",
          "1113:         elif len(activities) > 1:",
          "1114:             main_activities = {self._format_value(ma) for ma in activities}",
          "1115:             # sorted is necessary",
          "1116:             # 9fc7d3e8225f6b377f9181a92c551814317b77e1aa0df4c6d508d24b18f0f633",
          "1117:             good_main_activities = sorted(",
          "1118:                 main_activities.intersection(self.get_activities()))",
          "1119:             if good_main_activities:",
          "1120:                 return good_main_activities[0]",
          "1121:             return sorted(main_activities)[0]",
          "1122:         return None",
          "1124:     def get_activities(self):",
          "1125:         \"\"\"",
          "1126:         Return the android:name attribute of all activities",
          "1128:         :rtype: a list of str",
          "1129:         \"\"\"",
          "1130:         return list(self.get_all_attribute_value(\"activity\", \"name\"))",
          "1132:     def get_activity_aliases(self):",
          "1133:         \"\"\"",
          "1134:         Return the android:name and android:targetActivity attribute of all activity aliases.",
          "1136:         :rtype: a list of dict",
          "1137:         \"\"\"",
          "1138:         ali = []",
          "1139:         for alias in self.find_tags('activity-alias'):",
          "1140:             activity_alias = {}",
          "1141:             for attribute in ['name', 'targetActivity']:",
          "1142:                 value = (alias.get(attribute) or",
          "1143:                          alias.get(self._ns(attribute)))",
          "1144:                 if not value:",
          "1145:                     continue",
          "1146:                 activity_alias[attribute] = self._format_value(value)",
          "1147:             if activity_alias:",
          "1148:                 ali.append(activity_alias)",
          "1149:         return ali",
          "1151:     def get_services(self):",
          "1152:         \"\"\"",
          "1153:         Return the android:name attribute of all services",
          "1155:         :rtype: a list of str",
          "1156:         \"\"\"",
          "1157:         return list(self.get_all_attribute_value(\"service\", \"name\"))",
          "1159:     def get_receivers(self):",
          "1160:         \"\"\"",
          "1161:         Return the android:name attribute of all receivers",
          "1163:         :rtype: a list of string",
          "1164:         \"\"\"",
          "1165:         return list(self.get_all_attribute_value(\"receiver\", \"name\"))",
          "1167:     def get_providers(self):",
          "1168:         \"\"\"",
          "1169:         Return the android:name attribute of all providers",
          "1171:         :rtype: a list of string",
          "1172:         \"\"\"",
          "1173:         return list(self.get_all_attribute_value(\"provider\", \"name\"))",
          "1175:     def get_res_value(self, name):",
          "1176:         \"\"\"",
          "1177:         Return the literal value with a resource id",
          "1178:         :rtype: str",
          "1179:         \"\"\"",
          "1181:         res_parser = self.get_android_resources()",
          "1182:         if not res_parser:",
          "1183:             return name",
          "1185:         res_id = res_parser.parse_id(name)[0]",
          "1186:         try:",
          "1187:             value = res_parser.get_resolved_res_configs(",
          "1188:                 res_id,",
          "1189:                 ARSCResTableConfig.default_config())[0][1]",
          "1190:         except Exception as e:",
          "1191:             logger.warning(\"Exception get resolved resource id: %s\" % e)",
          "1192:             return name",
          "1194:         return value",
          "1196:     def get_intent_filters(self, itemtype, name):",
          "1197:         \"\"\"",
          "1198:         Find intent filters for a given item and name.",
          "1200:         Intent filter are attached to activities, services or receivers.",
          "1201:         You can search for the intent filters of such items and get a dictionary of all",
          "1202:         attached actions and intent categories.",
          "1204:         :param itemtype: the type of parent item to look for, e.g. `activity`,  `service` or `receiver`",
          "1205:         :param name: the `android:name` of the parent item, e.g. activity name",
          "1206:         :returns: a dictionary with the keys `action` and `category` containing the `android:name` of those items",
          "1207:         \"\"\"",
          "1208:         attributes = {\"action\": [\"name\"], \"category\": [\"name\"], \"data\": ['scheme', 'host', 'port', 'path', 'pathPattern', 'pathPrefix', 'mimeType']}",
          "1210:         d = {}",
          "1211:         for element in attributes.keys():",
          "1212:             d[element] = []",
          "1214:         for i in self.xml:",
          "1215:             # TODO: this can probably be solved using a single xpath",
          "1216:             for item in self.xml[i].findall(\".//\" + itemtype):",
          "1217:                 if self._format_value(item.get(self._ns(\"name\"))) == name:",
          "1218:                     for sitem in item.findall(\".//intent-filter\"):",
          "1219:                         for element in d.keys():",
          "1220:                             for ssitem in sitem.findall(element):",
          "1221:                                 if element == 'data': # multiple attributes",
          "1222:                                     values = {}",
          "1223:                                     for attribute in attributes[element]:",
          "1224:                                         value = ssitem.get(self._ns(attribute))",
          "1225:                                         if value:",
          "1226:                                             if value.startswith('@'):",
          "1227:                                                 value = self.get_res_value(value)",
          "1228:                                             values[attribute] = value",
          "1230:                                     if values:",
          "1231:                                         d[element].append(values)",
          "1232:                                 else:",
          "1233:                                     for attribute in attributes[element]:",
          "1234:                                         value = ssitem.get(self._ns(attribute))",
          "1235:                                         if value.startswith('@'):",
          "1236:                                             value = self.get_res_value(value)",
          "1238:                                         if value not in d[element]:",
          "1239:                                             d[element].append(value)",
          "1241:         for element in list(d.keys()):",
          "1242:             if not d[element]:",
          "1243:                 del d[element]",
          "1245:         return d",
          "1247:     def get_permissions(self):",
          "1248:         \"\"\"",
          "1249:         Return permissions names declared in the AndroidManifest.xml.",
          "1251:         It is possible that permissions are returned multiple times,",
          "1252:         as this function does not filter the permissions, i.e. it shows you",
          "1253:         exactly what was defined in the AndroidManifest.xml.",
          "1255:         Implied permissions, which are granted automatically, are not returned",
          "1256:         here. Use :meth:`get_uses_implied_permission_list` if you need a list",
          "1257:         of implied permissions.",
          "1259:         :returns: A list of permissions",
          "1260:         :rtype: list",
          "1261:         \"\"\"",
          "1262:         return self.permissions",
          "1264:     def get_uses_implied_permission_list(self):",
          "1265:         \"\"\"",
          "1266:             Return all permissions implied by the target SDK or other permissions.",
          "1268:             :rtype: list of string",
          "1269:         \"\"\"",
          "1270:         target_sdk_version = self.get_effective_target_sdk_version()",
          "1272:         READ_CALL_LOG = 'android.permission.READ_CALL_LOG'",
          "1273:         READ_CONTACTS = 'android.permission.READ_CONTACTS'",
          "1274:         READ_EXTERNAL_STORAGE = 'android.permission.READ_EXTERNAL_STORAGE'",
          "1275:         READ_PHONE_STATE = 'android.permission.READ_PHONE_STATE'",
          "1276:         WRITE_CALL_LOG = 'android.permission.WRITE_CALL_LOG'",
          "1277:         WRITE_CONTACTS = 'android.permission.WRITE_CONTACTS'",
          "1278:         WRITE_EXTERNAL_STORAGE = 'android.permission.WRITE_EXTERNAL_STORAGE'",
          "1280:         implied = []",
          "1282:         implied_WRITE_EXTERNAL_STORAGE = False",
          "1283:         if target_sdk_version < 4:",
          "1284:             if WRITE_EXTERNAL_STORAGE not in self.permissions:",
          "1285:                 implied.append([WRITE_EXTERNAL_STORAGE, None])",
          "1286:                 implied_WRITE_EXTERNAL_STORAGE = True",
          "1287:             if READ_PHONE_STATE not in self.permissions:",
          "1288:                 implied.append([READ_PHONE_STATE, None])",
          "1290:         if (WRITE_EXTERNAL_STORAGE in self.permissions or implied_WRITE_EXTERNAL_STORAGE) \\",
          "1291:             and READ_EXTERNAL_STORAGE not in self.permissions:",
          "1292:             maxSdkVersion = None",
          "1293:             for name, version in self.uses_permissions:",
          "1294:                 if name == WRITE_EXTERNAL_STORAGE:",
          "1295:                     maxSdkVersion = version",
          "1296:                     break",
          "1297:             implied.append([READ_EXTERNAL_STORAGE, maxSdkVersion])",
          "1299:         if target_sdk_version < 16:",
          "1300:             if READ_CONTACTS in self.permissions \\",
          "1301:                 and READ_CALL_LOG not in self.permissions:",
          "1302:                 implied.append([READ_CALL_LOG, None])",
          "1303:             if WRITE_CONTACTS in self.permissions \\",
          "1304:                 and WRITE_CALL_LOG not in self.permissions:",
          "1305:                 implied.append([WRITE_CALL_LOG, None])",
          "1307:         return implied",
          "1309:     def _update_permission_protection_level(self, protection_level, sdk_version):",
          "1310:         if not sdk_version or int(sdk_version) <= 15:",
          "1311:             return protection_level.replace('Or', '|').lower()",
          "1312:         return protection_level",
          "1314:     def _fill_deprecated_permissions(self, permissions):",
          "1315:         min_sdk = self.get_min_sdk_version()",
          "1316:         target_sdk = self.get_target_sdk_version()",
          "1317:         filled_permissions = permissions.copy()",
          "1318:         for permission in filled_permissions:",
          "1319:             protection_level, label, description = filled_permissions[permission]",
          "1320:             if ((not label or not description)",
          "1321:                 and permission in self.permission_module_min_sdk):",
          "1322:                 x = self.permission_module_min_sdk[permission]",
          "1323:                 protection_level = self._update_permission_protection_level(",
          "1324:                     x['protectionLevel'], min_sdk)",
          "1325:                 filled_permissions[permission] = [",
          "1326:                     protection_level, x['label'], x['description']]",
          "1327:             else:",
          "1328:                 filled_permissions[permission] = [",
          "1329:                     self._update_permission_protection_level(",
          "1330:                             protection_level, target_sdk),",
          "1331:                     label, description]",
          "1332:         return filled_permissions",
          "1334:     def get_details_permissions(self):",
          "1335:         \"\"\"",
          "1336:         Return permissions with details.",
          "1338:         THis can only return details about the permission, if the permission is",
          "1339:         defined in the AOSP.",
          "1341:         :rtype: dict of {permission: [protectionLevel, label, description]}",
          "1342:         \"\"\"",
          "1343:         l = {}",
          "1345:         for i in self.permissions:",
          "1346:             if i in self.permission_module:",
          "1347:                 x = self.permission_module[i]",
          "1348:                 l[i] = [x[\"protectionLevel\"], x[\"label\"], x[\"description\"]]",
          "1349:             else:",
          "1350:                 # FIXME: the permission might be signature, if it is defined by the app itself!",
          "1351:                 l[i] = [\"normal\", \"Unknown permission from android reference\",",
          "1352:                         \"Unknown permission from android reference\"]",
          "1353:         return self._fill_deprecated_permissions(l)",
          "1355:     def get_requested_aosp_permissions(self):",
          "1356:         \"\"\"",
          "1357:         Returns requested permissions declared within AOSP project.",
          "1359:         This includes several other permissions as well, which are in the platform apps.",
          "1361:         :rtype: list of str",
          "1362:         \"\"\"",
          "1363:         aosp_permissions = []",
          "1364:         all_permissions = self.get_permissions()",
          "1365:         for perm in all_permissions:",
          "1366:             if perm in list(self.permission_module.keys()):",
          "1367:                 aosp_permissions.append(perm)",
          "1368:         return aosp_permissions",
          "1370:     def get_requested_aosp_permissions_details(self):",
          "1371:         \"\"\"",
          "1372:         Returns requested aosp permissions with details.",
          "1374:         :rtype: dictionary",
          "1375:         \"\"\"",
          "1376:         l = {}",
          "1377:         for i in self.permissions:",
          "1378:             try:",
          "1379:                 l[i] = self.permission_module[i]",
          "1380:             except KeyError:",
          "1381:                 # if we have not found permission do nothing",
          "1382:                 continue",
          "1383:         return l",
          "1385:     def get_requested_third_party_permissions(self):",
          "1386:         \"\"\"",
          "1387:         Returns list of requested permissions not declared within AOSP project.",
          "1389:         :rtype: list of strings",
          "1390:         \"\"\"",
          "1391:         third_party_permissions = []",
          "1392:         all_permissions = self.get_permissions()",
          "1393:         for perm in all_permissions:",
          "1394:             if perm not in list(self.permission_module.keys()):",
          "1395:                 third_party_permissions.append(perm)",
          "1396:         return third_party_permissions",
          "1398:     def get_declared_permissions(self):",
          "1399:         \"\"\"",
          "1400:         Returns list of the declared permissions.",
          "1402:         :rtype: list of strings",
          "1403:         \"\"\"",
          "1404:         return list(self.declared_permissions.keys())",
          "1406:     def get_declared_permissions_details(self):",
          "1407:         \"\"\"",
          "1408:         Returns declared permissions with the details.",
          "1410:         :rtype: dict",
          "1411:         \"\"\"",
          "1412:         return self.declared_permissions",
          "1414:     def get_max_sdk_version(self):",
          "1415:         \"\"\"",
          "1416:             Return the android:maxSdkVersion attribute",
          "1418:             :rtype: string",
          "1419:         \"\"\"",
          "1420:         return self.get_attribute_value(\"uses-sdk\", \"maxSdkVersion\")",
          "1422:     def get_min_sdk_version(self):",
          "1423:         \"\"\"",
          "1424:             Return the android:minSdkVersion attribute",
          "1426:             :rtype: string",
          "1427:         \"\"\"",
          "1428:         return self.get_attribute_value(\"uses-sdk\", \"minSdkVersion\")",
          "1430:     def get_target_sdk_version(self):",
          "1431:         \"\"\"",
          "1432:             Return the android:targetSdkVersion attribute",
          "1434:             :rtype: string",
          "1435:         \"\"\"",
          "1436:         return self.get_attribute_value(\"uses-sdk\", \"targetSdkVersion\")",
          "1438:     def get_effective_target_sdk_version(self):",
          "1439:         \"\"\"",
          "1440:             Return the effective targetSdkVersion, always returns int > 0.",
          "1442:             If the targetSdkVersion is not set, it defaults to 1.  This is",
          "1443:             set based on defaults as defined in:",
          "1444:             https://developer.android.com/guide/topics/manifest/uses-sdk-element.html",
          "1446:             :rtype: int",
          "1447:         \"\"\"",
          "1448:         target_sdk_version = self.get_target_sdk_version()",
          "1449:         if not target_sdk_version:",
          "1450:             target_sdk_version = self.get_min_sdk_version()",
          "1451:         try:",
          "1452:             return int(target_sdk_version)",
          "1453:         except (ValueError, TypeError):",
          "1454:             return 1",
          "1456:     def get_libraries(self):",
          "1457:         \"\"\"",
          "1458:             Return the android:name attributes for libraries",
          "1460:             :rtype: list",
          "1461:         \"\"\"",
          "1462:         return list(self.get_all_attribute_value(\"uses-library\", \"name\"))",
          "1464:     def get_features(self):",
          "1465:         \"\"\"",
          "1466:         Return a list of all android:names found for the tag uses-feature",
          "1467:         in the AndroidManifest.xml",
          "1469:         :returns: list",
          "1470:         \"\"\"",
          "1471:         return list(self.get_all_attribute_value(\"uses-feature\", \"name\"))",
          "1473:     def is_wearable(self):",
          "1474:         \"\"\"",
          "1475:         Checks if this application is build for wearables by",
          "1476:         checking if it uses the feature 'android.hardware.type.watch'",
          "1477:         See: https://developer.android.com/training/wearables/apps/creating.html for more information.",
          "1479:         Not every app is setting this feature (not even the example Google provides),",
          "1480:         so it might be wise to not 100% rely on this feature.",
          "1482:         :returns: True if wearable, False otherwise",
          "1483:         \"\"\"",
          "1484:         return 'android.hardware.type.watch' in self.get_features()",
          "1486:     def is_leanback(self):",
          "1487:         \"\"\"",
          "1488:         Checks if this application is build for TV (Leanback support)",
          "1489:         by checkin if it uses the feature 'android.software.leanback'",
          "1491:         :returns: True if leanback feature is used, false otherwise",
          "1492:         \"\"\"",
          "1493:         return 'android.software.leanback' in self.get_features()",
          "1495:     def is_androidtv(self):",
          "1496:         \"\"\"",
          "1497:         Checks if this application does not require a touchscreen,",
          "1498:         as this is the rule to get into the TV section of the Play Store",
          "1499:         See: https://developer.android.com/training/tv/start/start.html for more information.",
          "1501:         :returns: True if 'android.hardware.touchscreen' is not required, False otherwise",
          "1502:         \"\"\"",
          "1503:         return self.get_attribute_value('uses-feature', 'name', required=\"false\", name=\"android.hardware.touchscreen\") == \"android.hardware.touchscreen\"",
          "1505:     def get_certificate_der(self, filename):",
          "1506:         \"\"\"",
          "1507:         Return the DER coded X.509 certificate from the signature file.",
          "1509:         :param filename: Signature filename in APK",
          "1510:         :returns: DER coded X.509 certificate as binary",
          "1511:         \"\"\"",
          "1512:         pkcs7message = self.get_file(filename)",
          "1514:         pkcs7obj = cms.ContentInfo.load(pkcs7message)",
          "1515:         cert = pkcs7obj['content']['certificates'][0].chosen.dump()",
          "1516:         return cert",
          "1518:     def get_certificate(self, filename):",
          "1519:         \"\"\"",
          "1520:         Return a X.509 certificate object by giving the name in the apk file",
          "1522:         :param filename: filename of the signature file in the APK",
          "1523:         :returns: a :class:`Certificate` certificate",
          "1524:         \"\"\"",
          "1525:         cert = self.get_certificate_der(filename)",
          "1526:         certificate = x509.Certificate.load(cert)",
          "1528:         return certificate",
          "1530:     def new_zip(self, filename, deleted_files=None, new_files={}):",
          "1531:         \"\"\"",
          "1532:             Create a new zip file",
          "1534:             :param filename: the output filename of the zip",
          "1535:             :param deleted_files: a regex pattern to remove specific file",
          "1536:             :param new_files: a dictionnary of new files",
          "1538:             :type filename: string",
          "1539:             :type deleted_files: None or a string",
          "1540:             :type new_files: a dictionnary (key:filename, value:content of the file)",
          "1541:         \"\"\"",
          "1542:         zout = zipfile.ZipFile(filename, 'w')",
          "1544:         for item in self.zip.infolist():",
          "1545:             # Block one: deleted_files, or deleted_files and new_files",
          "1546:             if deleted_files is not None:",
          "1547:                 if re.match(deleted_files, item) is None:",
          "1548:                     # if the regex of deleted_files doesn't match the filename",
          "1549:                     if new_files is not False:",
          "1550:                         if item in new_files:",
          "1551:                             # and if the filename is in new_files",
          "1552:                             zout.writestr(item, new_files[item])",
          "1553:                             continue",
          "1554:                     # Otherwise, write the original file.",
          "1555:                     buffer = self.zip.read(item)",
          "1556:                     zout.writestr(item, buffer)",
          "1557:             # Block two: deleted_files is None, new_files is not empty",
          "1558:             elif new_files is not False:",
          "1559:                 if item in new_files:",
          "1560:                     zout.writestr(item, new_files[item])",
          "1561:                 else:",
          "1562:                     buffer = self.zip.read(item)",
          "1563:                     zout.writestr(item, buffer)",
          "1564:             # Block three: deleted_files is None, new_files is empty.",
          "1565:             # Just write out the default zip",
          "1566:             else:",
          "1567:                 buffer = self.zip.read(item)",
          "1568:                 zout.writestr(item, buffer)",
          "1569:         zout.close()",
          "1571:     def get_android_manifest_axml(self):",
          "1572:         \"\"\"",
          "1573:             Return the :class:`AXMLPrinter` object which corresponds to the AndroidManifest.xml file",
          "1575:             :rtype: :class:`~androguard.core.bytecodes.axml.AXMLPrinter`",
          "1576:         \"\"\"",
          "1577:         try:",
          "1578:             return self.axml[\"AndroidManifest.xml\"]",
          "1579:         except KeyError:",
          "1580:             return None",
          "1582:     def get_android_manifest_xml(self):",
          "1583:         \"\"\"",
          "1584:         Return the parsed xml object which corresponds to the AndroidManifest.xml file",
          "1586:         :rtype: :class:`~lxml.etree.Element`",
          "1587:         \"\"\"",
          "1588:         try:",
          "1589:             return self.xml[\"AndroidManifest.xml\"]",
          "1590:         except KeyError:",
          "1591:             return None",
          "1593:     def get_android_resources(self):",
          "1594:         \"\"\"",
          "1595:         Return the :class:`~androguard.core.bytecodes.axml.ARSCParser` object which corresponds to the resources.arsc file",
          "1597:         :rtype: :class:`~androguard.core.bytecodes.axml.ARSCParser`",
          "1598:         \"\"\"",
          "1599:         try:",
          "1600:             return self.arsc[\"resources.arsc\"]",
          "1601:         except KeyError:",
          "1602:             if \"resources.arsc\" not in self.zip.namelist():",
          "1603:                 # There is a rare case, that no resource file is supplied.",
          "1604:                 # Maybe it was added manually, thus we check here",
          "1605:                 return None",
          "1606:             self.arsc[\"resources.arsc\"] = ARSCParser(self.zip.read(\"resources.arsc\"))",
          "1607:             return self.arsc[\"resources.arsc\"]",
          "1609:     def is_signed(self):",
          "1610:         \"\"\"",
          "1611:         Returns true if any of v1, v2, or v3 signatures were found.",
          "1612:         \"\"\"",
          "1613:         return self.is_signed_v1() or self.is_signed_v2() or self.is_signed_v3()",
          "1615:     def is_signed_v1(self):",
          "1616:         \"\"\"",
          "1617:         Returns true if a v1 / JAR signature was found.",
          "1619:         Returning `True` does not mean that the file is properly signed!",
          "1620:         It just says that there is a signature file which needs to be validated.",
          "1621:         \"\"\"",
          "1622:         return self.get_signature_name() is not None",
          "1624:     def is_signed_v2(self):",
          "1625:         \"\"\"",
          "1626:         Returns true of a v2 / APK signature was found.",
          "1628:         Returning `True` does not mean that the file is properly signed!",
          "1629:         It just says that there is a signature file which needs to be validated.",
          "1630:         \"\"\"",
          "1631:         if self._is_signed_v2 is None:",
          "1632:             self.parse_v2_v3_signature()",
          "1634:         return self._is_signed_v2",
          "1636:     def is_signed_v3(self):",
          "1637:         \"\"\"",
          "1638:         Returns true of a v3 / APK signature was found.",
          "1640:         Returning `True` does not mean that the file is properly signed!",
          "1641:         It just says that there is a signature file which needs to be validated.",
          "1642:         \"\"\"",
          "1643:         if self._is_signed_v3 is None:",
          "1644:             self.parse_v2_v3_signature()",
          "1646:         return self._is_signed_v3",
          "1648:     def read_uint32_le(self, io_stream):",
          "1649:         value, = unpack('<I', io_stream.read(4))",
          "1650:         return value",
          "1652:     def parse_signatures_or_digests(self, digest_bytes):",
          "1653:         \"\"\" Parse digests \"\"\"",
          "1655:         if not len(digest_bytes):",
          "1656:             return []",
          "1658:         digests = []",
          "1659:         block = io.BytesIO(digest_bytes)",
          "1661:         data_len = self.read_uint32_le(block)",
          "1662:         while block.tell() < data_len:",
          "1664:             algorithm_id = self.read_uint32_le(block)",
          "1665:             digest_len = self.read_uint32_le(block)",
          "1666:             digest = block.read(digest_len)",
          "1668:             digests.append((algorithm_id, digest))",
          "1670:         return digests",
          "1672:     def parse_v2_v3_signature(self):",
          "1673:         # Need to find an v2 Block in the APK.",
          "1674:         # The Google Docs gives you the following rule:",
          "1675:         # * go to the end of the ZIP File",
          "1676:         # * search for the End of Central directory",
          "1677:         # * then jump to the beginning of the central directory",
          "1678:         # * Read now the magic of the signing block",
          "1679:         # * before the magic there is the size_of_block, so we can jump to",
          "1680:         # the beginning.",
          "1681:         # * There should be again the size_of_block",
          "1682:         # * Now we can read the Key-Values",
          "1683:         # * IDs with an unknown value should be ignored.",
          "1684:         f = io.BytesIO(self.get_raw())",
          "1686:         size_central = None",
          "1687:         offset_central = None",
          "1689:         # Go to the end",
          "1690:         f.seek(-1, io.SEEK_END)",
          "1691:         # we know the minimal length for the central dir is 16+4+2",
          "1692:         f.seek(-20, io.SEEK_CUR)",
          "1694:         while f.tell() > 0:",
          "1695:             f.seek(-1, io.SEEK_CUR)",
          "1696:             r, = unpack('<4s', f.read(4))",
          "1697:             if r == self._PK_END_OF_CENTRAL_DIR:",
          "1698:                 # Read central dir",
          "1699:                 this_disk, disk_central, this_entries, total_entries, \\",
          "1700:                 size_central, offset_central = unpack('<HHHHII', f.read(16))",
          "1701:                 # TODO according to the standard we need to check if the",
          "1702:                 # end of central directory is the last item in the zip file",
          "1703:                 # TODO We also need to check if the central dir is exactly",
          "1704:                 # before the end of central dir...",
          "1706:                 # These things should not happen for APKs",
          "1707:                 if this_disk != 0:",
          "1708:                     logger.warning(\"This is a multi disk ZIP! Attempting to process its signature anyway!\")",
          "1709:                 if disk_central != 0:",
          "1710:                     logger.warning(\"This is a multi disk ZIP! Attempting to process its signature anyway!\")",
          "1711:                 break",
          "1712:             f.seek(-4, io.SEEK_CUR)",
          "1714:         if not offset_central:",
          "1715:             return",
          "1717:         f.seek(offset_central)",
          "1718:         r, = unpack('<4s', f.read(4))",
          "1719:         f.seek(-4, io.SEEK_CUR)",
          "1720:         if r != self._PK_CENTRAL_DIR:",
          "1721:             raise BrokenAPKError(\"No Central Dir at specified offset\")",
          "1723:         # Go back and check if we have a magic",
          "1724:         end_offset = f.tell()",
          "1725:         f.seek(-24, io.SEEK_CUR)",
          "1726:         size_of_block, magic = unpack('<Q16s', f.read(24))",
          "1728:         self._is_signed_v2 = False",
          "1729:         self._is_signed_v3 = False",
          "1731:         if magic != self._APK_SIG_MAGIC:",
          "1732:             return",
          "1734:         # go back size_of_blocks + 8 and read size_of_block again",
          "1735:         f.seek(-(size_of_block + 8), io.SEEK_CUR)",
          "1736:         size_of_block_start, = unpack(\"<Q\", f.read(8))",
          "1737:         if size_of_block_start != size_of_block:",
          "1738:             raise BrokenAPKError(\"Sizes at beginning and and does not match!\")",
          "1740:         # Store all blocks",
          "1741:         while f.tell() < end_offset - 24:",
          "1742:             size, key = unpack('<QI', f.read(12))",
          "1743:             value = f.read(size - 4)",
          "1744:             self._v2_blocks[key] = value",
          "1746:         # Test if a signature is found",
          "1747:         if self._APK_SIG_KEY_V2_SIGNATURE in self._v2_blocks:",
          "1748:             self._is_signed_v2 = True",
          "1750:         if self._APK_SIG_KEY_V3_SIGNATURE in self._v2_blocks:",
          "1751:             self._is_signed_v3 = True",
          "1754:     def parse_v3_signing_block(self):",
          "1755:         \"\"\"",
          "1756:         Parse the V2 signing block and extract all features",
          "1757:         \"\"\"",
          "1759:         self._v3_signing_data = []",
          "1761:         # calling is_signed_v3 should also load the signature, if any",
          "1762:         if not self.is_signed_v3():",
          "1763:             return",
          "1765:         block_bytes = self._v2_blocks[self._APK_SIG_KEY_V3_SIGNATURE]",
          "1766:         block = io.BytesIO(block_bytes)",
          "1767:         view = block.getvalue()",
          "1769:         # V3 signature Block data format:",
          "1770:         #",
          "1771:         # * signer:",
          "1772:         #    * signed data:",
          "1773:         #        * digests:",
          "1774:         #            * signature algorithm ID (uint32)",
          "1775:         #            * digest (length-prefixed)",
          "1776:         #        * certificates",
          "1777:         #        * minSDK",
          "1778:         #        * maxSDK",
          "1779:         #        * additional attributes",
          "1780:         #    * minSDK",
          "1781:         #    * maxSDK",
          "1782:         #    * signatures",
          "1783:         #    * publickey",
          "1784:         size_sequence = self.read_uint32_le(block)",
          "1785:         if size_sequence + 4 != len(block_bytes):",
          "1786:             raise BrokenAPKError(\"size of sequence and blocksize does not match\")",
          "1788:         while block.tell() < len(block_bytes):",
          "1789:             off_signer = block.tell()",
          "1790:             size_signer = self.read_uint32_le(block)",
          "1792:             # read whole signed data, since we might to parse",
          "1793:             # content within the signed data, and mess up offset",
          "1794:             len_signed_data = self.read_uint32_le(block)",
          "1795:             signed_data_bytes = block.read(len_signed_data)",
          "1796:             signed_data = io.BytesIO(signed_data_bytes)",
          "1798:             # Digests",
          "1799:             len_digests = self.read_uint32_le(signed_data)",
          "1800:             raw_digests = signed_data.read(len_digests)",
          "1801:             digests = self.parse_signatures_or_digests(raw_digests)",
          "1804:             # Certs",
          "1805:             certs = []",
          "1806:             len_certs = self.read_uint32_le(signed_data)",
          "1807:             start_certs = signed_data.tell()",
          "1808:             while signed_data.tell() < start_certs + len_certs:",
          "1810:                 len_cert = self.read_uint32_le(signed_data)",
          "1811:                 cert = signed_data.read(len_cert)",
          "1812:                 certs.append(cert)",
          "1814:             # versions",
          "1815:             signed_data_min_sdk = self.read_uint32_le(signed_data)",
          "1816:             signed_data_max_sdk = self.read_uint32_le(signed_data)",
          "1818:             # Addional attributes",
          "1819:             len_attr = self.read_uint32_le(signed_data)",
          "1820:             attr = signed_data.read(len_attr)",
          "1822:             signed_data_object = APKV3SignedData()",
          "1823:             signed_data_object._bytes = signed_data_bytes",
          "1824:             signed_data_object.digests = digests",
          "1825:             signed_data_object.certificates = certs",
          "1826:             signed_data_object.additional_attributes = attr",
          "1827:             signed_data_object.minSDK = signed_data_min_sdk",
          "1828:             signed_data_object.maxSDK = signed_data_max_sdk",
          "1830:             # versions (should be the same as signed data's versions)",
          "1831:             signer_min_sdk = self.read_uint32_le(block)",
          "1832:             signer_max_sdk = self.read_uint32_le(block)",
          "1834:             # Signatures",
          "1835:             len_sigs = self.read_uint32_le(block)",
          "1836:             raw_sigs = block.read(len_sigs)",
          "1837:             sigs = self.parse_signatures_or_digests(raw_sigs)",
          "1839:             # PublicKey",
          "1840:             len_publickey = self.read_uint32_le(block)",
          "1841:             publickey = block.read(len_publickey)",
          "1843:             signer = APKV3Signer()",
          "1844:             signer._bytes = view[off_signer:off_signer+size_signer]",
          "1845:             signer.signed_data = signed_data_object",
          "1846:             signer.signatures = sigs",
          "1847:             signer.public_key = publickey",
          "1848:             signer.minSDK = signer_min_sdk",
          "1849:             signer.maxSDK = signer_max_sdk",
          "1851:             self._v3_signing_data.append(signer)",
          "1853:     def parse_v2_signing_block(self):",
          "1854:         \"\"\"",
          "1855:         Parse the V2 signing block and extract all features",
          "1856:         \"\"\"",
          "1858:         self._v2_signing_data = []",
          "1860:         # calling is_signed_v2 should also load the signature",
          "1861:         if not self.is_signed_v2():",
          "1862:             return",
          "1864:         block_bytes = self._v2_blocks[self._APK_SIG_KEY_V2_SIGNATURE]",
          "1865:         block = io.BytesIO(block_bytes)",
          "1866:         view = block.getvalue()",
          "1868:         # V2 signature Block data format:",
          "1869:         #",
          "1870:         # * signer:",
          "1871:         #    * signed data:",
          "1872:         #        * digests:",
          "1873:         #            * signature algorithm ID (uint32)",
          "1874:         #            * digest (length-prefixed)",
          "1875:         #        * certificates",
          "1876:         #        * additional attributes",
          "1877:         #    * signatures",
          "1878:         #    * publickey",
          "1880:         size_sequence = self.read_uint32_le(block)",
          "1881:         if size_sequence + 4 != len(block_bytes):",
          "1882:             raise BrokenAPKError(\"size of sequence and blocksize does not match\")",
          "1884:         while block.tell() < len(block_bytes):",
          "1885:             off_signer = block.tell()",
          "1886:             size_signer = self.read_uint32_le(block)",
          "1888:             # read whole signed data, since we might to parse",
          "1889:             # content within the signed data, and mess up offset",
          "1890:             len_signed_data = self.read_uint32_le(block)",
          "1891:             signed_data_bytes = block.read(len_signed_data)",
          "1892:             signed_data = io.BytesIO(signed_data_bytes)",
          "1894:             # Digests",
          "1895:             len_digests = self.read_uint32_le(signed_data)",
          "1896:             raw_digests = signed_data.read(len_digests)",
          "1897:             digests = self.parse_signatures_or_digests(raw_digests)",
          "1899:             # Certs",
          "1900:             certs = []",
          "1901:             len_certs = self.read_uint32_le(signed_data)",
          "1902:             start_certs = signed_data.tell()",
          "1903:             while signed_data.tell() < start_certs + len_certs:",
          "1904:                 len_cert = self.read_uint32_le(signed_data)",
          "1905:                 cert = signed_data.read(len_cert)",
          "1906:                 certs.append(cert)",
          "1908:             # Additional attributes",
          "1909:             len_attr = self.read_uint32_le(signed_data)",
          "1910:             attributes = signed_data.read(len_attr)",
          "1912:             signed_data_object = APKV2SignedData()",
          "1913:             signed_data_object._bytes = signed_data_bytes",
          "1914:             signed_data_object.digests = digests",
          "1915:             signed_data_object.certificates = certs",
          "1916:             signed_data_object.additional_attributes = attributes",
          "1918:             # Signatures",
          "1919:             len_sigs = self.read_uint32_le(block)",
          "1920:             raw_sigs = block.read(len_sigs)",
          "1921:             sigs = self.parse_signatures_or_digests(raw_sigs)",
          "1923:             # PublicKey",
          "1924:             len_publickey = self.read_uint32_le(block)",
          "1925:             publickey = block.read(len_publickey)",
          "1927:             signer = APKV2Signer()",
          "1928:             signer._bytes = view[off_signer:off_signer+size_signer]",
          "1929:             signer.signed_data = signed_data_object",
          "1930:             signer.signatures = sigs",
          "1931:             signer.public_key = publickey",
          "1933:             self._v2_signing_data.append(signer)",
          "1935:     def get_public_keys_der_v3(self):",
          "1936:         \"\"\"",
          "1937:         Return a list of DER coded X.509 public keys from the v3 signature block",
          "1938:         \"\"\"",
          "1940:         if self._v3_signing_data == None:",
          "1941:             self.parse_v3_signing_block()",
          "1943:         public_keys = []",
          "1945:         for signer in self._v3_signing_data:",
          "1946:             public_keys.append(signer.public_key)",
          "1948:         return public_keys",
          "1950:     def get_public_keys_der_v2(self):",
          "1951:         \"\"\"",
          "1952:         Return a list of DER coded X.509 public keys from the v3 signature block",
          "1953:         \"\"\"",
          "1955:         if self._v2_signing_data == None:",
          "1956:             self.parse_v2_signing_block()",
          "1958:         public_keys = []",
          "1960:         for signer in self._v2_signing_data:",
          "1961:             public_keys.append(signer.public_key)",
          "1963:         return public_keys",
          "1965:     def get_certificates_der_v3(self):",
          "1966:         \"\"\"",
          "1967:         Return a list of DER coded X.509 certificates from the v3 signature block",
          "1968:         \"\"\"",
          "1970:         if self._v3_signing_data == None:",
          "1971:             self.parse_v3_signing_block()",
          "1973:         certs = []",
          "1974:         for signed_data in [signer.signed_data for signer in self._v3_signing_data]:",
          "1975:             for cert in signed_data.certificates:",
          "1976:                 certs.append(cert)",
          "1978:         return certs",
          "1980:     def get_certificates_der_v2(self):",
          "1981:         \"\"\"",
          "1982:         Return a list of DER coded X.509 certificates from the v3 signature block",
          "1983:         \"\"\"",
          "1985:         if self._v2_signing_data == None:",
          "1986:             self.parse_v2_signing_block()",
          "1988:         certs = []",
          "1989:         for signed_data in [signer.signed_data for signer in self._v2_signing_data]:",
          "1990:             for cert in signed_data.certificates:",
          "1991:                 certs.append(cert)",
          "1993:         return certs",
          "1995:     def get_public_keys_v3(self):",
          "1996:         \"\"\"",
          "1997:         Return a list of :class:`asn1crypto.keys.PublicKeyInfo` which are found",
          "1998:         in the v3 signing block.",
          "1999:         \"\"\"",
          "2000:         return [ keys.PublicKeyInfo.load(pkey) for pkey in self.get_public_keys_der_v3()]",
          "2002:     def get_public_keys_v2(self):",
          "2003:         \"\"\"",
          "2004:         Return a list of :class:`asn1crypto.keys.PublicKeyInfo` which are found",
          "2005:         in the v2 signing block.",
          "2006:         \"\"\"",
          "2007:         return [ keys.PublicKeyInfo.load(pkey) for pkey in self.get_public_keys_der_v2()]",
          "2009:     def get_certificates_v3(self):",
          "2010:         \"\"\"",
          "2011:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2012:         in the v3 signing block.",
          "2013:         Note that we simply extract all certificates regardless of the signer.",
          "2014:         Therefore this is just a list of all certificates found in all signers.",
          "2015:         \"\"\"",
          "2016:         return [ x509.Certificate.load(cert) for cert in self.get_certificates_der_v3()]",
          "2018:     def get_certificates_v2(self):",
          "2019:         \"\"\"",
          "2020:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2021:         in the v2 signing block.",
          "2022:         Note that we simply extract all certificates regardless of the signer.",
          "2023:         Therefore this is just a list of all certificates found in all signers.",
          "2024:         \"\"\"",
          "2025:         return [ x509.Certificate.load(cert) for cert in self.get_certificates_der_v2()]",
          "2027:     def get_certificates_v1(self):",
          "2028:         \"\"\"",
          "2029:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2030:         in the META-INF folder (v1 signing).",
          "2031:         Note that we simply extract all certificates regardless of the signer.",
          "2032:         Therefore this is just a list of all certificates found in all signers.",
          "2033:         \"\"\"",
          "2034:         certs = []",
          "2035:         for x in self.get_signature_names():",
          "2036:             certs.append(x509.Certificate.load(self.get_certificate_der(x)))",
          "2038:         return certs",
          "2040:     def get_certificates(self):",
          "2041:         \"\"\"",
          "2042:         Return a list of unique :class:`asn1crypto.x509.Certificate` which are found",
          "2043:         in v1, v2 and v3 signing",
          "2044:         Note that we simply extract all certificates regardless of the signer.",
          "2045:         Therefore this is just a list of all certificates found in all signers.",
          "2046:         \"\"\"",
          "2047:         fps = []",
          "2048:         certs = []",
          "2049:         for x in self.get_certificates_v1() + self.get_certificates_v2() + self.get_certificates_v3():",
          "2050:             if x.sha256 not in fps:",
          "2051:                 fps.append(x.sha256)",
          "2052:                 certs.append(x)",
          "2053:         return certs",
          "2055:     def get_signature_name(self):",
          "2056:         \"\"\"",
          "2057:             Return the name of the first signature file found.",
          "2058:         \"\"\"",
          "2059:         if self.get_signature_names():",
          "2060:             return self.get_signature_names()[0]",
          "2061:         else:",
          "2062:             # Unsigned APK",
          "2063:             return None",
          "2065:     def get_signature_names(self):",
          "2066:         \"\"\"",
          "2067:         Return a list of the signature file names (v1 Signature / JAR",
          "2068:         Signature)",
          "2070:         :rtype: List of filenames matching a Signature",
          "2071:         \"\"\"",
          "2072:         signature_expr = re.compile(r\"^(META-INF/)(.*)(\\.RSA|\\.EC|\\.DSA)$\")",
          "2073:         signatures = []",
          "2075:         for i in self.get_files():",
          "2076:             if signature_expr.search(i):",
          "2077:                 if \"{}.SF\".format(i.rsplit(\".\", 1)[0]) in self.get_files():",
          "2078:                     signatures.append(i)",
          "2079:                 else:",
          "2080:                     logger.warning(\"v1 signature file {} missing .SF file - Partial signature!\".format(i))",
          "2082:         return signatures",
          "2084:     def get_signature(self):",
          "2085:         \"\"\"",
          "2086:         Return the data of the first signature file found (v1 Signature / JAR",
          "2087:         Signature)",
          "2089:         :rtype: First signature name or None if not signed",
          "2090:         \"\"\"",
          "2091:         if self.get_signatures():",
          "2092:             return self.get_signatures()[0]",
          "2093:         else:",
          "2094:             return None",
          "2096:     def get_signatures(self):",
          "2097:         \"\"\"",
          "2098:         Return a list of the data of the signature files.",
          "2099:         Only v1 / JAR Signing.",
          "2101:         :rtype: list of bytes",
          "2102:         \"\"\"",
          "2103:         signature_expr = re.compile(r\"^(META-INF/)(.*)(\\.RSA|\\.EC|\\.DSA)$\")",
          "2104:         signature_datas = []",
          "2106:         for i in self.get_files():",
          "2107:             if signature_expr.search(i):",
          "2108:                 signature_datas.append(self.get_file(i))",
          "2110:         return signature_datas",
          "2112:     def show(self):",
          "2113:         self.get_files_types()",
          "2115:         print(\"FILES: \")",
          "2116:         for i in self.get_files():",
          "2117:             try:",
          "2118:                 print(\"\\t\", i, self._files[i], \"%x\" % self.files_crc32[i])",
          "2119:             except KeyError:",
          "2120:                 print(\"\\t\", i, \"%x\" % self.files_crc32[i])",
          "2122:         print(\"DECLARED PERMISSIONS:\")",
          "2123:         declared_permissions = self.get_declared_permissions()",
          "2124:         for i in declared_permissions:",
          "2125:             print(\"\\t\", i)",
          "2127:         print(\"REQUESTED PERMISSIONS:\")",
          "2128:         requested_permissions = self.get_permissions()",
          "2129:         for i in requested_permissions:",
          "2130:             print(\"\\t\", i)",
          "2132:         print(\"MAIN ACTIVITY: \", self.get_main_activity())",
          "2134:         print(\"ACTIVITIES: \")",
          "2135:         activities = self.get_activities()",
          "2136:         for i in activities:",
          "2137:             filters = self.get_intent_filters(\"activity\", i)",
          "2138:             print(\"\\t\", i, filters or \"\")",
          "2140:         print(\"SERVICES: \")",
          "2141:         services = self.get_services()",
          "2142:         for i in services:",
          "2143:             filters = self.get_intent_filters(\"service\", i)",
          "2144:             print(\"\\t\", i, filters or \"\")",
          "2146:         print(\"RECEIVERS: \")",
          "2147:         receivers = self.get_receivers()",
          "2148:         for i in receivers:",
          "2149:             filters = self.get_intent_filters(\"receiver\", i)",
          "2150:             print(\"\\t\", i, filters or \"\")",
          "2152:         print(\"PROVIDERS: \", self.get_providers())",
          "2154:         if self.is_signed_v1():",
          "2155:             print(\"CERTIFICATES v1:\")",
          "2156:             for c in self.get_signature_names():",
          "2157:                 show_Certificate(self.get_certificate(c))",
          "2159:         if self.is_signed_v2():",
          "2160:             print(\"CERTIFICATES v2:\")",
          "2161:             for c in self.get_certificates_v2():",
          "2162:                 show_Certificate(c)",
          "2165: def show_Certificate(cert, short=False):",
          "2166:     \"\"\"",
          "2167:         Print Fingerprints, Issuer and Subject of an X509 Certificate.",
          "2169:         :param cert: X509 Certificate to print",
          "2170:         :param short: Print in shortform for DN (Default: False)",
          "2172:         :type cert: :class:`asn1crypto.x509.Certificate`",
          "2173:         :type short: Boolean",
          "2174:     \"\"\"",
          "2175:     print(\"SHA1 Fingerprint: {}\".format(cert.sha1_fingerprint))",
          "2176:     print(\"SHA256 Fingerprint: {}\".format(cert.sha256_fingerprint))",
          "2177:     print(\"Issuer: {}\".format(get_certificate_name_string(cert.issuer.native, short=short)))",
          "2178:     print(\"Subject: {}\".format(get_certificate_name_string(cert.subject.native, short=short)))",
          "2181: def ensure_final_value(packageName, arsc, value):",
          "2182:     \"\"\"Ensure incoming value is always the value, not the resid",
          "2184:     androguard will sometimes return the Android \"resId\" aka",
          "2185:     Resource ID instead of the actual value.  This checks whether",
          "2186:     the value is actually a resId, then performs the Android",
          "2187:     Resource lookup as needed.",
          "2189:     \"\"\"",
          "2190:     if value:",
          "2191:         returnValue = value",
          "2192:         if value[0] == '@':",
          "2193:             # TODO: @packagename:DEADBEEF is not supported here!",
          "2194:             try:  # can be a literal value or a resId",
          "2195:                 res_id = int('0x' + value[1:], 16)",
          "2196:                 res_id = arsc.get_id(packageName, res_id)[1]",
          "2197:                 returnValue = arsc.get_string(packageName, res_id)[1]",
          "2198:             except (ValueError, TypeError):",
          "2199:                 pass",
          "2200:         return returnValue",
          "2201:     return ''",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/axml.py||mobsf/StaticAnalyzer/tools/androguard4/axml.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/axml.py -> mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: from .resources import public",
          "4: from .types import *",
          "6: from struct import pack, unpack",
          "7: from xml.sax.saxutils import escape",
          "8: import collections",
          "9: from collections import defaultdict",
          "11: from lxml import etree",
          "12: import re",
          "13: import binascii",
          "14: import io",
          "15: import logging",
          "17: logger = logging.getLogger(__name__)",
          "18: logger.setLevel(level=logging.INFO)",
          "20: # Constants for ARSC Files",
          "21: # see http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#233",
          "22: RES_NULL_TYPE = 0x0000",
          "23: RES_STRING_POOL_TYPE = 0x0001",
          "24: RES_TABLE_TYPE = 0x0002",
          "25: RES_XML_TYPE = 0x0003",
          "27: RES_XML_FIRST_CHUNK_TYPE          = 0x0100",
          "28: RES_XML_START_NAMESPACE_TYPE      = 0x0100",
          "29: RES_XML_END_NAMESPACE_TYPE        = 0x0101",
          "30: RES_XML_START_ELEMENT_TYPE        = 0x0102",
          "31: RES_XML_END_ELEMENT_TYPE          = 0x0103",
          "32: RES_XML_CDATA_TYPE                = 0x0104",
          "33: RES_XML_LAST_CHUNK_TYPE           = 0x017f",
          "35: RES_XML_RESOURCE_MAP_TYPE         = 0x0180",
          "37: RES_TABLE_PACKAGE_TYPE            = 0x0200",
          "38: RES_TABLE_TYPE_TYPE               = 0x0201",
          "39: RES_TABLE_TYPE_SPEC_TYPE          = 0x0202",
          "40: RES_TABLE_LIBRARY_TYPE            = 0x0203",
          "41: RES_TABLE_OVERLAYABLE_TYPE        = 0x0204",
          "42: RES_TABLE_OVERLAYABLE_POLICY_TYPE = 0x0205",
          "43: RES_TABLE_STAGED_ALIAS_TYPE       = 0x0206",
          "44: # Flags in the STRING Section",
          "45: SORTED_FLAG = 1 << 0",
          "46: UTF8_FLAG = 1 << 8",
          "48: # Position of the fields inside an attribute",
          "49: ATTRIBUTE_IX_NAMESPACE_URI = 0",
          "50: ATTRIBUTE_IX_NAME = 1",
          "51: ATTRIBUTE_IX_VALUE_STRING = 2",
          "52: ATTRIBUTE_IX_VALUE_TYPE = 3",
          "53: ATTRIBUTE_IX_VALUE_DATA = 4",
          "54: ATTRIBUTE_LENGTH = 5",
          "56: # Internally used state variables for AXMLParser",
          "57: START_DOCUMENT = 0",
          "58: END_DOCUMENT = 1",
          "59: START_TAG = 2",
          "60: END_TAG = 3",
          "61: TEXT = 4",
          "63: # Table used to lookup functions to determine the value representation in ARSCParser",
          "64: TYPE_TABLE = {",
          "65:     TYPE_ATTRIBUTE: \"attribute\",",
          "66:     TYPE_DIMENSION: \"dimension\",",
          "67:     TYPE_FLOAT: \"float\",",
          "68:     TYPE_FRACTION: \"fraction\",",
          "69:     TYPE_INT_BOOLEAN: \"int_boolean\",",
          "70:     TYPE_INT_COLOR_ARGB4: \"int_color_argb4\",",
          "71:     TYPE_INT_COLOR_ARGB8: \"int_color_argb8\",",
          "72:     TYPE_INT_COLOR_RGB4: \"int_color_rgb4\",",
          "73:     TYPE_INT_COLOR_RGB8: \"int_color_rgb8\",",
          "74:     TYPE_INT_DEC: \"int_dec\",",
          "75:     TYPE_INT_HEX: \"int_hex\",",
          "76:     TYPE_NULL: \"null\",",
          "77:     TYPE_REFERENCE: \"reference\",",
          "78:     TYPE_STRING: \"string\",",
          "79: }",
          "81: RADIX_MULTS = [0.00390625, 3.051758E-005, 1.192093E-007, 4.656613E-010]",
          "82: DIMENSION_UNITS = [\"px\", \"dip\", \"sp\", \"pt\", \"in\", \"mm\"]",
          "83: FRACTION_UNITS = [\"%\", \"%p\"]",
          "85: COMPLEX_UNIT_MASK = 0x0F",
          "88: class ResParserError(Exception):",
          "89:     \"\"\"Exception for the parsers\"\"\"",
          "90:     pass",
          "93: def complexToFloat(xcomplex):",
          "94:     \"\"\"",
          "95:     Convert a complex unit into float",
          "96:     \"\"\"",
          "97:     return float(xcomplex & 0xFFFFFF00) * RADIX_MULTS[(xcomplex >> 4) & 3]",
          "100: class StringBlock:",
          "101:     \"\"\"",
          "102:     StringBlock is a CHUNK inside an AXML File: `ResStringPool_header`",
          "103:     It contains all strings, which are used by referecing to ID's",
          "105:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#436",
          "106:     \"\"\"",
          "107:     def __init__(self, buff, header):",
          "108:         \"\"\"",
          "109:         :param buff: buffer which holds the string block",
          "110:         :param header: a instance of :class:`~ARSCHeader`",
          "111:         \"\"\"",
          "112:         self._cache = {}",
          "113:         self.header = header",
          "114:         # We already read the header (which was chunk_type and chunk_size",
          "115:         # Now, we read the string_count:",
          "116:         self.stringCount = unpack('<I', buff.read(4))[0]",
          "117:         # style_count",
          "118:         self.styleCount = unpack('<I', buff.read(4))[0]",
          "120:         # flags",
          "121:         self.flags = unpack('<I', buff.read(4))[0]",
          "122:         self.m_isUTF8 = ((self.flags & UTF8_FLAG) != 0)",
          "124:         # string_pool_offset",
          "125:         # The string offset is counted from the beginning of the string section",
          "126:         self.stringsOffset = unpack('<I', buff.read(4))[0]",
          "127:         # check if the stringCount is correct",
          "128:         if (self.stringsOffset - (self.styleCount * 4 + 28)) / 4 != self.stringCount:",
          "129:             self.stringCount = int((self.stringsOffset - (self.styleCount * 4 + 28)) / 4)",
          "131:         # style_pool_offset",
          "132:         # The styles offset is counted as well from the beginning of the string section",
          "133:         self.stylesOffset = unpack('<I', buff.read(4))[0]",
          "135:         # Check if they supplied a stylesOffset even if the count is 0:",
          "136:         if self.styleCount == 0 and self.stylesOffset > 0:",
          "137:             logger.info(\"Styles Offset given, but styleCount is zero. \"",
          "138:                      \"This is not a problem but could indicate packers.\")",
          "140:         self.m_stringOffsets = []",
          "141:         self.m_styleOffsets = []",
          "142:         self.m_charbuff = \"\"",
          "143:         self.m_styles = []",
          "145:         # Next, there is a list of string following.",
          "146:         # This is only a list of offsets (4 byte each)",
          "147:         for i in range(self.stringCount):",
          "148:             self.m_stringOffsets.append(unpack('<I', buff.read(4))[0])",
          "150:         # And a list of styles",
          "151:         # again, a list of offsets",
          "152:         for i in range(self.styleCount):",
          "153:             self.m_styleOffsets.append(unpack('<I', buff.read(4))[0])",
          "155:         # FIXME it is probably better to parse n strings and not calculate the size",
          "156:         size = self.header.size - self.stringsOffset",
          "158:         # if there are styles as well, we do not want to read them too.",
          "159:         # Only read them, if no",
          "160:         if self.stylesOffset != 0 and self.styleCount != 0:",
          "161:             size = self.stylesOffset - self.stringsOffset",
          "163:         if (size % 4) != 0:",
          "164:             logger.warning(\"Size of strings is not aligned by four bytes.\")",
          "166:         self.m_charbuff = buff.read(size)",
          "168:         if self.stylesOffset != 0 and self.styleCount != 0:",
          "169:             size = self.header.size - self.stylesOffset",
          "171:             if (size % 4) != 0:",
          "172:                 logger.warning(\"Size of styles is not aligned by four bytes.\")",
          "174:             for i in range(0, size // 4):",
          "175:                 self.m_styles.append(unpack('<I', buff.read(4))[0])",
          "177:     def __repr__(self):",
          "178:         return \"<StringPool #strings={}, #styles={}, UTF8={}>\".format(self.stringCount, self.styleCount, self.m_isUTF8)",
          "180:     def __getitem__(self, idx):",
          "181:         \"\"\"",
          "182:         Returns the string at the index in the string table",
          "183:         \"\"\"",
          "184:         return self.getString(idx)",
          "186:     def __len__(self):",
          "187:         \"\"\"",
          "188:         Get the number of strings stored in this table",
          "189:         \"\"\"",
          "190:         return self.stringCount",
          "192:     def __iter__(self):",
          "193:         \"\"\"",
          "194:         Iterable over all strings",
          "195:         \"\"\"",
          "196:         for i in range(self.stringCount):",
          "197:             yield self.getString(i)",
          "199:     def getString(self, idx):",
          "200:         \"\"\"",
          "201:         Return the string at the index in the string table",
          "203:         :param idx: index in the string table",
          "204:         :return: str",
          "205:         \"\"\"",
          "206:         if idx in self._cache:",
          "207:             return self._cache[idx]",
          "209:         if idx < 0 or not self.m_stringOffsets or idx > self.stringCount:",
          "210:             return \"\"",
          "212:         offset = self.m_stringOffsets[idx]",
          "214:         if self.m_isUTF8:",
          "215:             self._cache[idx] = self._decode8(offset)",
          "216:         else:",
          "217:             self._cache[idx] = self._decode16(offset)",
          "219:         return self._cache[idx]",
          "221:     def getStyle(self, idx):",
          "222:         \"\"\"",
          "223:         Return the style associated with the index",
          "225:         :param idx: index of the style",
          "226:         :return:",
          "227:         \"\"\"",
          "228:         return self.m_styles[idx]",
          "230:     def _decode8(self, offset):",
          "231:         \"\"\"",
          "232:         Decode an UTF-8 String at the given offset",
          "234:         :param offset: offset of the string inside the data",
          "235:         :return: str",
          "236:         \"\"\"",
          "237:         # UTF-8 Strings contain two lengths, as they might differ:",
          "238:         # 1) the UTF-16 length",
          "239:         str_len, skip = self._decode_length(offset, 1)",
          "240:         offset += skip",
          "242:         # 2) the utf-8 string length",
          "243:         encoded_bytes, skip = self._decode_length(offset, 1)",
          "244:         offset += skip",
          "246:         data = self.m_charbuff[offset: offset + encoded_bytes]",
          "248:         if self.m_charbuff[offset + encoded_bytes] != 0:",
          "249:             raise ResParserError(\"UTF-8 String is not null terminated! At offset={}\".format(offset))",
          "251:         return self._decode_bytes(data, 'utf-8', str_len)",
          "253:     def _decode16(self, offset):",
          "254:         \"\"\"",
          "255:         Decode an UTF-16 String at the given offset",
          "257:         :param offset: offset of the string inside the data",
          "258:         :return: str",
          "259:         \"\"\"",
          "260:         str_len, skip = self._decode_length(offset, 2)",
          "261:         offset += skip",
          "263:         # The len is the string len in utf-16 units",
          "264:         encoded_bytes = str_len * 2",
          "266:         data = self.m_charbuff[offset: offset + encoded_bytes]",
          "268:         if self.m_charbuff[offset + encoded_bytes:offset + encoded_bytes + 2] != b\"\\x00\\x00\":",
          "269:             raise ResParserError(\"UTF-16 String is not null terminated! At offset={}\".format(offset))",
          "271:         return self._decode_bytes(data, 'utf-16', str_len)",
          "273:     @staticmethod",
          "274:     def _decode_bytes(data, encoding, str_len):",
          "275:         \"\"\"",
          "276:         Generic decoding with length check.",
          "277:         The string is decoded from bytes with the given encoding, then the length",
          "278:         of the string is checked.",
          "279:         The string is decoded using the \"replace\" method.",
          "281:         :param data: bytes",
          "282:         :param encoding: encoding name (\"utf-8\" or \"utf-16\")",
          "283:         :param str_len: length of the decoded string",
          "284:         :return: str",
          "285:         \"\"\"",
          "286:         string = data.decode(encoding, 'replace')",
          "287:         if len(string) != str_len:",
          "288:             logger.warning(\"invalid decoded string length\")",
          "289:         return string",
          "291:     def _decode_length(self, offset, sizeof_char):",
          "292:         \"\"\"",
          "293:         Generic Length Decoding at offset of string",
          "295:         The method works for both 8 and 16 bit Strings.",
          "296:         Length checks are enforced:",
          "298:         http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/ResourceTypes.cpp#692)",
          "300:         http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/ResourceTypes.cpp#670)",
          "302:         :param offset: offset into the string data section of the beginning of",
          "303:         the string",
          "304:         :param sizeof_char: number of bytes per char (1 = 8bit, 2 = 16bit)",
          "305:         :returns: tuple of (length, read bytes)",
          "306:         \"\"\"",
          "307:         sizeof_2chars = sizeof_char << 1",
          "308:         fmt = \"<2{}\".format('B' if sizeof_char == 1 else 'H')",
          "309:         highbit = 0x80 << (8 * (sizeof_char - 1))",
          "311:         length1, length2 = unpack(fmt, self.m_charbuff[offset:(offset + sizeof_2chars)])",
          "313:         if (length1 & highbit) != 0:",
          "314:             length = ((length1 & ~highbit) << (8 * sizeof_char)) | length2",
          "315:             size = sizeof_2chars",
          "316:         else:",
          "317:             length = length1",
          "318:             size = sizeof_char",
          "320:         # These are true asserts, as the size should never be less than the values",
          "321:         if sizeof_char == 1:",
          "322:             assert length <= 0x7FFF, \"length of UTF-8 string is too large! At offset={}\".format(offset)",
          "323:         else:",
          "324:             assert length <= 0x7FFFFFFF, \"length of UTF-16 string is too large!  At offset={}\".format(offset)",
          "326:         return length, size",
          "328:     def show(self):",
          "329:         \"\"\"",
          "330:         Print some information on stdout about the string table",
          "331:         \"\"\"",
          "332:         print(\"StringBlock(stringsCount=0x%x, \"",
          "333:               \"stringsOffset=0x%x, \"",
          "334:               \"stylesCount=0x%x, \"",
          "335:               \"stylesOffset=0x%x, \"",
          "336:               \"flags=0x%x\"",
          "337:               \")\" % (self.stringCount,",
          "338:                      self.stringsOffset,",
          "339:                      self.styleCount,",
          "340:                      self.stylesOffset,",
          "341:                      self.flags))",
          "343:         if self.stringCount > 0:",
          "344:             print()",
          "345:             print(\"String Table: \")",
          "346:             for i, s in enumerate(self):",
          "347:                 print(\"{:08d} {}\".format(i, repr(s)))",
          "349:         if self.styleCount > 0:",
          "350:             print()",
          "351:             print(\"Styles Table: \")",
          "352:             for i in range(self.styleCount):",
          "353:                 print(\"{:08d} {}\".format(i, repr(self.getStyle(i))))",
          "356: class AXMLParser:",
          "357:     \"\"\"",
          "358:     AXMLParser reads through all chunks in the AXML file",
          "359:     and implements a state machine to return information about",
          "360:     the current chunk, which can then be read by :class:`~AXMLPrinter`.",
          "362:     An AXML file is a file which contains multiple chunks of data, defined",
          "363:     by the `ResChunk_header`.",
          "364:     There is no real file magic but as the size of the first header is fixed",
          "365:     and the `type` of the `ResChunk_header` is set to `RES_XML_TYPE`, a file",
          "366:     will usually start with `0x03000800`.",
          "367:     But there are several examples where the `type` is set to something",
          "368:     else, probably in order to fool parsers.",
          "370:     Typically the AXMLParser is used in a loop which terminates if `m_event` is set to `END_DOCUMENT`.",
          "371:     You can use the `next()` function to get the next chunk.",
          "372:     Note that not all chunk types are yielded from the iterator! Some chunks are processed in",
          "373:     the AXMLParser only.",
          "374:     The parser will set `is_valid()` to False if it parses something not valid.",
          "375:     Messages what is wrong are logged.",
          "377:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#563",
          "378:     \"\"\"",
          "379:     def __init__(self, raw_buff):",
          "380:         logger.debug(\"AXMLParser\")",
          "382:         self._reset()",
          "384:         self._valid = True",
          "385:         self.axml_tampered = False",
          "386:         self.buff = io.BufferedReader(io.BytesIO(raw_buff))",
          "387:         self.buff_size = self.buff.raw.getbuffer().nbytes",
          "389:         # Minimum is a single ARSCHeader, which would be a strange edge case...",
          "390:         if self.buff_size < 8:",
          "391:             logger.error(\"Filesize is too small to be a valid AXML file! Filesize: {}\".format(self.buff_size))",
          "392:             self._valid = False",
          "393:             return",
          "395:         # This would be even stranger, if an AXML file is larger than 4GB...",
          "396:         # But this is not possible as the maximum chunk size is a unsigned 4 byte int.",
          "397:         if self.buff_size > 0xFFFFFFFF:",
          "398:             logger.error(\"Filesize is too large to be a valid AXML file! Filesize: {}\".format(self.buff_size))",
          "399:             self._valid = False",
          "400:             return",
          "402:         try:",
          "403:             axml_header = ARSCHeader(self.buff)",
          "404:             logger.debug(\"FIRST HEADER {}\".format(axml_header))",
          "405:         except ResParserError as e:",
          "406:             logger.error(\"Error parsing first resource header: %s\", e)",
          "407:             self._valid = False",
          "408:             return",
          "410:         self.filesize = axml_header.size",
          "412:         if axml_header.header_size == 28024:",
          "413:             # Can be a common error: the file is not an AXML but a plain XML",
          "414:             # The file will then usually start with '<?xm' / '3C 3F 78 6D'",
          "415:             logger.warning(\"Header size is 28024! Are you trying to parse a plain XML file?\")",
          "417:         if axml_header.header_size != 8:",
          "418:             logger.error(\"This does not look like an AXML file. header size does not equal 8! header size = {}\".format(axml_header.header_size))",
          "419:             self._valid = False",
          "420:             return",
          "422:         if self.filesize > self.buff_size:",
          "423:             logger.error(\"This does not look like an AXML file. Declared filesize does not match real size: {} vs {}\".format(self.filesize, self.buff_size))",
          "424:             self._valid = False",
          "425:             return",
          "427:         if self.filesize < self.buff_size:",
          "428:             # The file can still be parsed up to the point where the chunk should end.",
          "429:             self.axml_tampered = True",
          "430:             logger.warning(\"Declared filesize ({}) is smaller than total file size ({}). \"",
          "431:                         \"Was something appended to the file? Trying to parse it anyways.\".format(self.filesize, self.buff.size()))",
          "433:         # Not that severe of an error, we have plenty files where this is not",
          "434:         # set correctly",
          "435:         if axml_header.type != RES_XML_TYPE:",
          "436:             self.axml_tampered = True",
          "437:             logger.warning(\"AXML file has an unusual resource type! \"",
          "438:                            \"Malware likes to to such stuff to anti androguard! \"",
          "439:                            \"But we try to parse it anyways. Resource Type: 0x{:04x}\".format(axml_header.type))",
          "441:         # Now we parse the STRING POOL",
          "442:         try:",
          "443:             header = ARSCHeader(self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "444:             logger.debug(\"STRING_POOL {}\".format(header))",
          "445:         except ResParserError as e:",
          "446:             logger.error(\"Error parsing resource header of string pool: {}\".format(e))",
          "447:             self._valid = False",
          "448:             return",
          "450:         if header.header_size != 0x1C:",
          "451:             logger.error(\"This does not look like an AXML file. String chunk header size does not equal 28! header size = {}\".format(header.header_size))",
          "452:             self._valid = False",
          "453:             return",
          "455:         self.sb = StringBlock(self.buff, header)",
          "457:         self.buff.seek(axml_header.header_size + header.size)",
          "459:         # Stores resource ID mappings, if any",
          "460:         self.m_resourceIDs = []",
          "462:         # Store a list of prefix/uri mappings encountered",
          "463:         self.namespaces = []",
          "465:     def is_valid(self):",
          "466:         \"\"\"",
          "467:         Get the state of the AXMLPrinter.",
          "468:         if an error happend somewhere in the process of parsing the file,",
          "469:         this flag is set to False.",
          "470:         \"\"\"",
          "471:         logger.debug(self._valid)",
          "472:         return self._valid",
          "474:     def _reset(self):",
          "475:         self.m_event = -1",
          "476:         self.m_lineNumber = -1",
          "477:         self.m_name = -1",
          "478:         self.m_namespaceUri = -1",
          "479:         self.m_attributes = []",
          "480:         self.m_idAttribute = -1",
          "481:         self.m_classAttribute = -1",
          "482:         self.m_styleAttribute = -1",
          "484:     def __next__(self):",
          "485:         self._do_next()",
          "486:         return self.m_event",
          "488:     def _do_next(self):",
          "489:         logger.debug(\"M_EVENT {}\".format(self.m_event))",
          "491:         if self.m_event == END_DOCUMENT:",
          "492:             return",
          "494:         self._reset()",
          "495:         while self._valid:",
          "496:             # Stop at the declared filesize or at the end of the file",
          "497:             if self.buff.tell() == self.filesize:",
          "498:                 self.m_event = END_DOCUMENT",
          "499:                 break",
          "501:             # Again, we read an ARSCHeader",
          "502:             try:",
          "503:                 possible_types = {256, 257, 258, 259, 260, 384}",
          "504:                 h = ARSCHeader(self.buff, possible_types=possible_types)",
          "505:                 logger.debug(\"NEXT HEADER {}\".format(h))",
          "506:             except ResParserError as e:",
          "507:                 logger.error(\"Error parsing resource header: {}\".format(e))",
          "508:                 self._valid = False",
          "509:                 return",
          "511:             # Special chunk: Resource Map. This chunk might be contained inside",
          "512:             # the file, after the string pool.",
          "513:             if h.type == RES_XML_RESOURCE_MAP_TYPE:",
          "514:                 logger.debug(\"AXML contains a RESOURCE MAP\")",
          "515:                 # Check size: < 8 bytes mean that the chunk is not complete",
          "516:                 # Should be aligned to 4 bytes.",
          "517:                 if h.size < 8 or (h.size % 4) != 0:",
          "518:                     logger.error(\"Invalid chunk size in chunk XML_RESOURCE_MAP\")",
          "519:                     self._valid = False",
          "520:                     return",
          "522:                 for i in range((h.size - h.header_size) // 4):",
          "523:                     self.m_resourceIDs.append(unpack('<L', self.buff.read(4))[0])",
          "525:                 continue",
          "527:             # Parse now the XML chunks.",
          "528:             # unknown chunk types might cause problems, but we can skip them!",
          "529:             if h.type < RES_XML_FIRST_CHUNK_TYPE or h.type > RES_XML_LAST_CHUNK_TYPE:",
          "530:                 # h.size is the size of the whole chunk including the header.",
          "531:                 # We read already 8 bytes of the header, thus we need to",
          "532:                 # subtract them.",
          "533:                 logger.error(\"Not a XML resource chunk type: 0x{:04x}. Skipping {} bytes\".format(h.type, h.size))",
          "534:                 self.buff.seek(h.end)",
          "535:                 continue",
          "537:             # Check that we read a correct header",
          "538:             if h.header_size != 0x10:",
          "539:                 logger.error(\"XML Resource Type Chunk header size does not match 16! \" \\",
          "540:                 \"At chunk type 0x{:04x}, declared header size=0x{:04x}, chunk size=0x{:04x}\".format(h.type, h.header_size, h.size))",
          "541:                 self.buff.seek(h.end)",
          "542:                 continue",
          "544:             # Line Number of the source file, only used as meta information",
          "545:             self.m_lineNumber, = unpack('<L', self.buff.read(4))",
          "547:             # Comment_Index (usually 0xFFFFFFFF)",
          "548:             self.m_comment_index, = unpack('<L', self.buff.read(4))",
          "550:             if self.m_comment_index != 0xFFFFFFFF and h.type in [RES_XML_START_NAMESPACE_TYPE, RES_XML_END_NAMESPACE_TYPE]:",
          "551:                 logger.warning(\"Unhandled Comment at namespace chunk: '{}'\".format(self.sb[self.m_comment_index]))",
          "553:             if h.type == RES_XML_START_NAMESPACE_TYPE:",
          "554:                 prefix, = unpack('<L', self.buff.read(4))",
          "555:                 uri, = unpack('<L', self.buff.read(4))",
          "557:                 s_prefix = self.sb[prefix]",
          "558:                 s_uri = self.sb[uri]",
          "560:                 logger.debug(\"Start of Namespace mapping: prefix {}: '{}' --> uri {}: '{}'\".format(prefix, s_prefix, uri, s_uri))",
          "562:                 if s_uri == '':",
          "563:                     logger.warning(\"Namespace prefix '{}' resolves to empty URI. \"",
          "564:                                 \"This might be a packer.\".format(s_prefix))",
          "566:                 if (prefix, uri) in self.namespaces:",
          "567:                     logger.debug(\"Namespace mapping ({}, {}) already seen! \"",
          "568:                              \"This is usually not a problem but could indicate packers or broken AXML compilers.\".format(prefix, uri))",
          "569:                 self.namespaces.append((prefix, uri))",
          "571:                 # We can continue with the next chunk, as we store the namespace",
          "572:                 # mappings for each tag",
          "573:                 continue",
          "575:             if h.type == RES_XML_END_NAMESPACE_TYPE:",
          "576:                 # END_PREFIX contains again prefix and uri field",
          "577:                 prefix, = unpack('<L', self.buff.read(4))",
          "578:                 uri, = unpack('<L', self.buff.read(4))",
          "580:                 # We remove the last namespace mapping matching",
          "581:                 if (prefix, uri) in self.namespaces:",
          "582:                     self.namespaces.remove((prefix, uri))",
          "583:                 else:",
          "584:                     logger.warning(\"Reached a NAMESPACE_END without having the namespace stored before? \"",
          "585:                                 \"Prefix ID: {}, URI ID: {}\".format(prefix, uri))",
          "587:                 # We can continue with the next chunk, as we store the namespace",
          "588:                 # mappings for each tag",
          "589:                 continue",
          "591:             # START_TAG is the start of a new tag.",
          "592:             if h.type == RES_XML_START_ELEMENT_TYPE:",
          "593:                 # The TAG consists of some fields:",
          "594:                 # * (chunk_size, line_number, comment_index - we read before)",
          "595:                 # * namespace_uri",
          "596:                 # * name",
          "597:                 # * flags",
          "598:                 # * attribute_count",
          "599:                 # * class_attribute",
          "600:                 # After that, there are two lists of attributes, 20 bytes each",
          "602:                 # Namespace URI (String ID)",
          "603:                 self.m_namespaceUri, = unpack('<L', self.buff.read(4))",
          "604:                 # Name of the Tag (String ID)",
          "605:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "606:                 self.at_start, self.at_size = unpack('<HH', self.buff.read(4))",
          "607:                 # Attribute Count",
          "608:                 attributeCount, = unpack('<L', self.buff.read(4))",
          "609:                 # Class Attribute",
          "610:                 self.m_classAttribute, = unpack('<L', self.buff.read(4))",
          "612:                 self.m_idAttribute = (attributeCount >> 16) - 1",
          "613:                 self.m_attribute_count = attributeCount & 0xFFFF",
          "614:                 self.m_styleAttribute = (self.m_classAttribute >> 16) - 1",
          "615:                 self.m_classAttribute = (self.m_classAttribute & 0xFFFF) - 1",
          "617:                 # Now, we parse the attributes.",
          "618:                 # Each attribute has 5 fields of 4 byte",
          "619:                 for i in range(0, self.m_attribute_count):",
          "620:                     # Each field is linearly parsed into the array",
          "621:                     # Each Attribute contains:",
          "622:                     # * Namespace URI (String ID)",
          "623:                     # * Name (String ID)",
          "624:                     # * Value",
          "625:                     # * Type",
          "626:                     # * Data",
          "627:                     for j in range(0, ATTRIBUTE_LENGTH):",
          "628:                         self.m_attributes.append(unpack('<L', self.buff.read(4))[0])",
          "629:                     if self.at_size != 20:",
          "630:                         self.buff.read(self.at_size - 20)",
          "632:                 # Then there are class_attributes",
          "633:                 for i in range(ATTRIBUTE_IX_VALUE_TYPE, len(self.m_attributes), ATTRIBUTE_LENGTH):",
          "634:                     self.m_attributes[i] = self.m_attributes[i] >> 24",
          "636:                 self.m_event = START_TAG",
          "637:                 break",
          "639:             if h.type == RES_XML_END_ELEMENT_TYPE:",
          "640:                 self.m_namespaceUri, = unpack('<L', self.buff.read(4))",
          "641:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "643:                 self.m_event = END_TAG",
          "644:                 break",
          "646:             if h.type == RES_XML_CDATA_TYPE:",
          "647:                 # The CDATA field is like an attribute.",
          "648:                 # It contains an index into the String pool",
          "649:                 # as well as a typed value.",
          "650:                 # usually, this typed value is set to UNDEFINED",
          "652:                 # ResStringPool_ref data --> uint32_t index",
          "653:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "655:                 # Res_value typedData:",
          "656:                 # uint16_t size",
          "657:                 # uint8_t res0 -> always zero",
          "658:                 # uint8_t dataType",
          "659:                 # uint32_t data",
          "660:                 # For now, we ingore these values",
          "661:                 size, res0, dataType, data = unpack(\"<HBBL\", self.buff.read(8))",
          "663:                 logger.debug(\"found a CDATA Chunk: \"",
          "664:                           \"index={: 6d}, size={: 4d}, res0={: 4d}, dataType={: 4d}, data={: 4d}\".format(self.m_name,",
          "665:                                                                                                         size,",
          "666:                                                                                                         res0,",
          "667:                                                                                                         dataType,",
          "668:                                                                                                         data))",
          "670:                 self.m_event = TEXT",
          "671:                 break",
          "673:             # Still here? Looks like we read an unknown XML header, try to skip it...",
          "674:             logger.warning(\"Unknown XML Chunk: 0x{:04x}, skipping {} bytes.\".format(h.type, h.size))",
          "675:             self.buff.seek(h.end)",
          "677:     @property",
          "678:     def name(self):",
          "679:         \"\"\"",
          "680:         Return the String assosciated with the tag name",
          "681:         \"\"\"",
          "682:         if self.m_name == -1 or (self.m_event != START_TAG and self.m_event != END_TAG):",
          "683:             return ''",
          "685:         return self.sb[self.m_name]",
          "687:     @property",
          "688:     def comment(self):",
          "689:         \"\"\"",
          "690:         Return the comment at the current position or None if no comment is given",
          "692:         This works only for Tags, as the comments of Namespaces are silently dropped.",
          "693:         Currently, there is no way of retrieving comments of namespaces.",
          "694:         \"\"\"",
          "695:         if self.m_comment_index == 0xFFFFFFFF:",
          "696:             return None",
          "698:         return self.sb[self.m_comment_index]",
          "700:     @property",
          "701:     def namespace(self):",
          "702:         \"\"\"",
          "703:         Return the Namespace URI (if any) as a String for the current tag",
          "704:         \"\"\"",
          "705:         if self.m_name == -1 or (self.m_event != START_TAG and self.m_event != END_TAG):",
          "706:             return ''",
          "708:         # No Namespace",
          "709:         if self.m_namespaceUri == 0xFFFFFFFF:",
          "710:             return ''",
          "712:         return self.sb[self.m_namespaceUri]",
          "714:     @property",
          "715:     def nsmap(self):",
          "716:         \"\"\"",
          "717:         Returns the current namespace mapping as a dictionary",
          "719:         there are several problems with the map and we try to guess a few",
          "720:         things here:",
          "722:         1) a URI can be mapped by many prefixes, so it is to decide which one to take",
          "723:         2) a prefix might map to an empty string (some packers)",
          "724:         3) uri+prefix mappings might be included several times",
          "725:         4) prefix might be empty",
          "726:         \"\"\"",
          "728:         NSMAP = dict()",
          "729:         # solve 3) by using a set",
          "730:         for k, v in set(self.namespaces):",
          "731:             s_prefix = self.sb[k]",
          "732:             s_uri = self.sb[v]",
          "733:             # Solve 2) & 4) by not including",
          "734:             if s_uri != \"\" and s_prefix != \"\":",
          "735:                 # solve 1) by using the last one in the list",
          "736:                 NSMAP[s_prefix] = s_uri",
          "738:         return NSMAP",
          "740:     @property",
          "741:     def text(self):",
          "742:         \"\"\"",
          "743:         Return the String assosicated with the current text",
          "744:         \"\"\"",
          "745:         if self.m_name == -1 or self.m_event != TEXT:",
          "746:             return ''",
          "748:         return self.sb[self.m_name]",
          "750:     def getName(self):",
          "751:         \"\"\"",
          "752:         Legacy only!",
          "753:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.name` instead",
          "754:         \"\"\"",
          "755:         return self.name",
          "757:     def getText(self):",
          "758:         \"\"\"",
          "759:         Legacy only!",
          "760:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.text` instead",
          "761:         \"\"\"",
          "762:         return self.text",
          "764:     def getPrefix(self):",
          "765:         \"\"\"",
          "766:         Legacy only!",
          "767:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.namespace` instead",
          "768:         \"\"\"",
          "769:         return self.namespace",
          "771:     def _get_attribute_offset(self, index):",
          "772:         \"\"\"",
          "773:         Return the start inside the m_attributes array for a given attribute",
          "774:         \"\"\"",
          "775:         if self.m_event != START_TAG:",
          "776:             logger.warning(\"Current event is not START_TAG.\")",
          "778:         offset = index * ATTRIBUTE_LENGTH",
          "779:         if offset >= len(self.m_attributes):",
          "780:             logger.warning(\"Invalid attribute index\")",
          "782:         return offset",
          "784:     def getAttributeCount(self):",
          "785:         \"\"\"",
          "786:         Return the number of Attributes for a Tag",
          "787:         or -1 if not in a tag",
          "788:         \"\"\"",
          "789:         if self.m_event != START_TAG:",
          "790:             return -1",
          "792:         return self.m_attribute_count",
          "794:     def getAttributeUri(self, index):",
          "795:         \"\"\"",
          "796:         Returns the numeric ID for the namespace URI of an attribute",
          "797:         \"\"\"",
          "798:         logger.debug(index)",
          "800:         offset = self._get_attribute_offset(index)",
          "801:         uri = self.m_attributes[offset + ATTRIBUTE_IX_NAMESPACE_URI]",
          "803:         return uri",
          "805:     def getAttributeNamespace(self, index):",
          "806:         \"\"\"",
          "807:         Return the Namespace URI (if any) for the attribute",
          "808:         \"\"\"",
          "809:         logger.debug(index)",
          "811:         uri = self.getAttributeUri(index)",
          "813:         # No Namespace",
          "814:         if uri == 0xFFFFFFFF:",
          "815:             return ''",
          "817:         return self.sb[uri]",
          "819:     def getAttributeName(self, index):",
          "820:         \"\"\"",
          "821:         Returns the String which represents the attribute name",
          "822:         \"\"\"",
          "823:         logger.debug(index)",
          "824:         offset = self._get_attribute_offset(index)",
          "825:         name = self.m_attributes[offset + ATTRIBUTE_IX_NAME]",
          "827:         res = self.sb[name]",
          "828:         # If the result is a (null) string, we need to look it up.",
          "829:         if not res or res == \":\":",
          "830:             attr = self.m_resourceIDs[name]",
          "831:             if attr in public.SYSTEM_RESOURCES['attributes']['inverse']:",
          "832:                 res = 'android:' + public.SYSTEM_RESOURCES['attributes']['inverse'][attr]",
          "833:             else:",
          "834:                 # Attach the HEX Number, so for multiple missing attributes we do not run",
          "835:                 # into problems.",
          "836:                 res = 'android:UNKNOWN_SYSTEM_ATTRIBUTE_{:08x}'.format(attr)",
          "837:         return res",
          "839:     def getAttributeValueType(self, index):",
          "840:         \"\"\"",
          "841:         Return the type of the attribute at the given index",
          "843:         :param index: index of the attribute",
          "844:         \"\"\"",
          "845:         logger.debug(index)",
          "847:         offset = self._get_attribute_offset(index)",
          "848:         return self.m_attributes[offset + ATTRIBUTE_IX_VALUE_TYPE]",
          "850:     def getAttributeValueData(self, index):",
          "851:         \"\"\"",
          "852:         Return the data of the attribute at the given index",
          "854:         :param index: index of the attribute",
          "855:         \"\"\"",
          "856:         logger.debug(index)",
          "858:         offset = self._get_attribute_offset(index)",
          "859:         return self.m_attributes[offset + ATTRIBUTE_IX_VALUE_DATA]",
          "861:     def getAttributeValue(self, index):",
          "862:         \"\"\"",
          "863:         This function is only used to look up strings",
          "864:         All other work is done by",
          "865:         :func:`~androguard.core.bytecodes.axml.format_value`",
          "866:         # FIXME should unite those functions",
          "867:         :param index: index of the attribute",
          "868:         :return:",
          "869:         \"\"\"",
          "870:         logger.debug(index)",
          "872:         offset = self._get_attribute_offset(index)",
          "873:         valueType = self.m_attributes[offset + ATTRIBUTE_IX_VALUE_TYPE]",
          "874:         if valueType == TYPE_STRING:",
          "875:             valueString = self.m_attributes[offset + ATTRIBUTE_IX_VALUE_STRING]",
          "876:             return self.sb[valueString]",
          "877:         return ''",
          "880: def format_value(_type, _data, lookup_string=lambda ix: \"<string>\"):",
          "881:     \"\"\"",
          "882:     Format a value based on type and data.",
          "883:     By default, no strings are looked up and \"<string>\" is returned.",
          "884:     You need to define `lookup_string` in order to actually lookup strings from",
          "885:     the string table.",
          "887:     :param _type: The numeric type of the value",
          "888:     :param _data: The numeric data of the value",
          "889:     :param lookup_string: A function how to resolve strings from integer IDs",
          "890:     \"\"\"",
          "892:     # Function to prepend android prefix for attributes/references from the",
          "893:     # android library",
          "894:     fmt_package = lambda x: \"android:\" if x >> 24 == 1 else \"\"",
          "896:     # Function to represent integers",
          "897:     fmt_int = lambda x: (0x7FFFFFFF & x) - 0x80000000 if x > 0x7FFFFFFF else x",
          "899:     if _type == TYPE_STRING:",
          "900:         return lookup_string(_data)",
          "902:     elif _type == TYPE_ATTRIBUTE:",
          "903:         return \"?{}{:08X}\".format(fmt_package(_data), _data)",
          "905:     elif _type == TYPE_REFERENCE:",
          "906:         return \"@{}{:08X}\".format(fmt_package(_data), _data)",
          "908:     elif _type == TYPE_FLOAT:",
          "909:         return \"%f\" % unpack(\"=f\", pack(\"=L\", _data))[0]",
          "911:     elif _type == TYPE_INT_HEX:",
          "912:         return \"0x%08X\" % _data",
          "914:     elif _type == TYPE_INT_BOOLEAN:",
          "915:         if _data == 0:",
          "916:             return \"false\"",
          "917:         return \"true\"",
          "919:     elif _type == TYPE_DIMENSION:",
          "920:         return \"{:f}{}\".format(complexToFloat(_data), DIMENSION_UNITS[_data & COMPLEX_UNIT_MASK])",
          "922:     elif _type == TYPE_FRACTION:",
          "923:         return \"{:f}{}\".format(complexToFloat(_data) * 100, FRACTION_UNITS[_data & COMPLEX_UNIT_MASK])",
          "925:     elif TYPE_FIRST_COLOR_INT <= _type <= TYPE_LAST_COLOR_INT:",
          "926:         return \"#%08X\" % _data",
          "928:     elif TYPE_FIRST_INT <= _type <= TYPE_LAST_INT:",
          "929:         return \"%d\" % fmt_int(_data)",
          "931:     return \"<0x{:X}, type 0x{:02X}>\".format(_data, _type)",
          "934: class AXMLPrinter:",
          "935:     \"\"\"",
          "936:     Converter for AXML Files into a lxml ElementTree, which can easily be",
          "937:     converted into XML.",
          "939:     A Reference Implementation can be found at http://androidxref.com/9.0.0_r3/xref/frameworks/base/tools/aapt/XMLNode.cpp",
          "940:     \"\"\"",
          "941:     __charrange = None",
          "942:     __replacement = None",
          "944:     def __init__(self, raw_buff):",
          "945:         logger.debug(\"AXMLPrinter\")",
          "947:         self.axml = AXMLParser(raw_buff)",
          "949:         self.root = None",
          "950:         self.packerwarning = False",
          "951:         cur = []",
          "953:         while self.axml.is_valid():",
          "954:             _type = next(self.axml)",
          "955:             logger.debug(\"DEBUG ARSC TYPE {}\".format(_type))",
          "957:             if _type == START_TAG:",
          "958:                 uri = self._print_namespace(self.axml.namespace)",
          "959:                 uri, name = self._fix_name(uri, self.axml.name)",
          "960:                 tag = \"{}{}\".format(uri, name)",
          "962:                 comment = self.axml.comment",
          "963:                 if comment:",
          "964:                     if self.root is None:",
          "965:                         logger.warning(\"Can not attach comment with content '{}' without root!\".format(comment))",
          "966:                     else:",
          "967:                         cur[-1].append(etree.Comment(comment))",
          "969:                 logger.debug(\"START_TAG: {} (line={})\".format(tag, self.axml.m_lineNumber))",
          "970:                 elem = etree.Element(tag, nsmap=self.axml.nsmap)",
          "972:                 for i in range(self.axml.getAttributeCount()):",
          "973:                     uri = self._print_namespace(self.axml.getAttributeNamespace(i))",
          "974:                     uri, name = self._fix_name(uri, self.axml.getAttributeName(i))",
          "975:                     value = self._fix_value(self._get_attribute_value(i))",
          "977:                     logger.debug(\"found an attribute: {}{}='{}'\".format(uri, name, value.encode(\"utf-8\")))",
          "978:                     if \"{}{}\".format(uri, name) in elem.attrib:",
          "979:                         logger.warning(\"Duplicate attribute '{}{}'! Will overwrite!\".format(uri, name))",
          "980:                     elem.set(\"{}{}\".format(uri, name), value)",
          "982:                 if self.root is None:",
          "983:                     self.root = elem",
          "984:                 else:",
          "985:                     if not cur:",
          "986:                         # looks like we lost the root?",
          "987:                         logger.error(\"No more elements available to attach to! Is the XML malformed?\")",
          "988:                         break",
          "989:                     cur[-1].append(elem)",
          "990:                 cur.append(elem)",
          "992:             if _type == END_TAG:",
          "993:                 if not cur:",
          "994:                     logger.warning(\"Too many END_TAG! No more elements available to attach to!\")",
          "996:                 name = self.axml.name",
          "997:                 uri = self._print_namespace(self.axml.namespace)",
          "998:                 tag = \"{}{}\".format(uri, name)",
          "999:                 if cur[-1].tag != tag:",
          "1000:                     logger.warning(\"Closing tag '{}' does not match current stack! At line number: {}. Is the XML malformed?\".format(self.axml.name, self.axml.m_lineNumber))",
          "1001:                 cur.pop()",
          "1002:             if _type == TEXT:",
          "1003:                 logger.debug(\"TEXT for {}\".format(cur[-1]))",
          "1004:                 cur[-1].text = self.axml.text",
          "1005:             if _type == END_DOCUMENT:",
          "1006:                 # Check if all namespace mappings are closed",
          "1007:                 if len(self.axml.namespaces) > 0:",
          "1008:                     logger.warning(\"Not all namespace mappings were closed! Malformed AXML?\")",
          "1009:                 break",
          "1011:     def get_buff(self):",
          "1012:         \"\"\"",
          "1013:         Returns the raw XML file without prettification applied.",
          "1015:         :returns: bytes, encoded as UTF-8",
          "1016:         \"\"\"",
          "1017:         return self.get_xml(pretty=False)",
          "1019:     def get_xml(self, pretty=True):",
          "1020:         \"\"\"",
          "1021:         Get the XML as an UTF-8 string",
          "1023:         :returns: bytes encoded as UTF-8",
          "1024:         \"\"\"",
          "1025:         return etree.tostring(self.root, encoding=\"utf-8\", pretty_print=pretty)",
          "1027:     def get_xml_obj(self):",
          "1028:         \"\"\"",
          "1029:         Get the XML as an ElementTree object",
          "1031:         :returns: :class:`lxml.etree.Element`",
          "1032:         \"\"\"",
          "1033:         return self.root",
          "1035:     def is_valid(self):",
          "1036:         \"\"\"",
          "1037:         Return the state of the AXMLParser.",
          "1038:         If this flag is set to False, the parsing has failed, thus",
          "1039:         the resulting XML will not work or will even be empty.",
          "1040:         \"\"\"",
          "1041:         return self.axml.is_valid()",
          "1043:     def is_packed(self):",
          "1044:         \"\"\"",
          "1045:         Returns True if the AXML is likely to be packed",
          "1047:         Packers do some weird stuff and we try to detect it.",
          "1048:         Sometimes the files are not packed but simply broken or compiled with",
          "1049:         some broken version of a tool.",
          "1050:         Some file corruption might also be appear to be a packed file.",
          "1052:         :returns: True if packer detected, False otherwise",
          "1053:         \"\"\"",
          "1054:         return self.packerwarning",
          "1056:     def _get_attribute_value(self, index):",
          "1057:         \"\"\"",
          "1058:         Wrapper function for format_value to resolve the actual value of an attribute in a tag",
          "1059:         :param index: index of the current attribute",
          "1060:         :return: formatted value",
          "1061:         \"\"\"",
          "1062:         _type = self.axml.getAttributeValueType(index)",
          "1063:         _data = self.axml.getAttributeValueData(index)",
          "1065:         return format_value(_type, _data, lambda _: self.axml.getAttributeValue(index))",
          "1067:     def _fix_name(self, prefix, name):",
          "1068:         \"\"\"",
          "1069:         Apply some fixes to element named and attribute names.",
          "1070:         Try to get conform to:",
          "1071:         > Like element names, attribute names are case-sensitive and must start with a letter or underscore.",
          "1072:         > The rest of the name can contain letters, digits, hyphens, underscores, and periods.",
          "1073:         See: https://msdn.microsoft.com/en-us/library/ms256152(v=vs.110).aspx",
          "1075:         This function tries to fix some broken namespace mappings.",
          "1076:         In some cases, the namespace prefix is inside the name and not in the prefix field.",
          "1077:         Then, the tag name will usually look like 'android:foobar'.",
          "1078:         If and only if the namespace prefix is inside the namespace mapping and the actual prefix field is empty,",
          "1079:         we will strip the prefix from the attribute name and return the fixed prefix URI instead.",
          "1080:         Otherwise replacement rules will be applied.",
          "1082:         The replacement rules work in that way, that all unwanted characters are replaced by underscores.",
          "1083:         In other words, all characters except the ones listed above are replaced.",
          "1085:         :param name: Name of the attribute or tag",
          "1086:         :param prefix: The existing prefix uri as found in the AXML chunk",
          "1087:         :return: a fixed version of prefix and name",
          "1088:         :rtype: tuple",
          "1089:         \"\"\"",
          "1090:         if not name[0].isalpha() and name[0] != \"_\":",
          "1091:             logger.warning(\"Invalid start for name '{}'. \"",
          "1092:                         \"XML name must start with a letter.\".format(name))",
          "1093:             self.packerwarning = True",
          "1094:             name = \"_{}\".format(name)",
          "1095:         if name.startswith(\"android:\") and prefix == '' and 'android' in self.axml.nsmap:",
          "1096:             # Seems be a common thing...",
          "1097:             logger.info(\"Name '{}' starts with 'android:' prefix but 'android' is a known prefix. Replacing prefix.\".format(name))",
          "1098:             prefix = self._print_namespace(self.axml.nsmap['android'])",
          "1099:             name = name[len(\"android:\"):]",
          "1100:             # It looks like this is some kind of packer... Not sure though.",
          "1101:             self.packerwarning = True",
          "1102:         elif \":\" in name and prefix == '':",
          "1103:             self.packerwarning = True",
          "1104:             embedded_prefix, new_name = name.split(\":\", 1)",
          "1105:             if embedded_prefix in self.axml.nsmap:",
          "1106:                 logger.info(\"Prefix '{}' is in namespace mapping, assume that it is a prefix.\")",
          "1107:                 prefix = self._print_namespace(self.axml.nsmap[embedded_prefix])",
          "1108:                 name = new_name",
          "1109:             else:",
          "1110:                 # Print out an extra warning",
          "1111:                 logger.warning(\"Confused: name contains a unknown namespace prefix: '{}'. \"",
          "1112:                             \"This is either a broken AXML file or some attempt to break stuff.\".format(name))",
          "1113:         if not re.match(r\"^[a-zA-Z0-9._-]*$\", name):",
          "1114:             logger.warning(\"Name '{}' contains invalid characters!\".format(name))",
          "1115:             self.packerwarning = True",
          "1116:             name = re.sub(r\"[^a-zA-Z0-9._-]\", \"_\", name)",
          "1118:         return prefix, name",
          "1120:     def _fix_value(self, value):",
          "1121:         \"\"\"",
          "1122:         Return a cleaned version of a value",
          "1123:         according to the specification:",
          "1124:         > Char    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]",
          "1126:         See https://www.w3.org/TR/xml/#charsets",
          "1128:         :param value: a value to clean",
          "1129:         :return: the cleaned value",
          "1130:         \"\"\"",
          "1131:         if not self.__charrange or not self.__replacement:",
          "1132:             self.__charrange = re.compile('^[\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$')",
          "1133:             self.__replacement = re.compile('[^\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]')",
          "1135:         # Reading string until \\x00. This is the same as aapt does.",
          "1136:         if \"\\x00\" in value:",
          "1137:             self.packerwarning = True",
          "1138:             logger.warning(\"Null byte found in attribute value at position {}: \"",
          "1139:                         \"Value(hex): '{}'\".format(",
          "1140:                 value.find(\"\\x00\"),",
          "1141:                 binascii.hexlify(value.encode(\"utf-8\"))))",
          "1142:             value = value[:value.find(\"\\x00\")]",
          "1144:         if not self.__charrange.match(value):",
          "1145:             logger.warning(\"Invalid character in value found. Replacing with '_'.\")",
          "1146:             self.packerwarning = True",
          "1147:             value = self.__replacement.sub('_', value)",
          "1148:         return value",
          "1150:     def _print_namespace(self, uri):",
          "1151:         if uri != \"\":",
          "1152:             uri = \"{{{}}}\".format(uri)",
          "1153:         return uri",
          "1155: # See http://aospxref.com/android-13.0.0_r3/xref/frameworks/native/include/android/configuration.h#56",
          "1157: ACONFIGURATION_ORIENTATION_ANY  = 0x0000",
          "1158: ACONFIGURATION_ORIENTATION_PORT = 0x0001",
          "1159: ACONFIGURATION_ORIENTATION_LAND = 0x0002",
          "1160: ACONFIGURATION_ORIENTATION_SQUARE = 0x0003",
          "1161: ACONFIGURATION_TOUCHSCREEN_ANY = 0x0000",
          "1162: ACONFIGURATION_TOUCHSCREEN_NOTOUCH = 0x0001",
          "1163: ACONFIGURATION_TOUCHSCREEN_STYLUS = 0x0002",
          "1164: ACONFIGURATION_TOUCHSCREEN_FINGER = 0x0003",
          "1165: ACONFIGURATION_DENSITY_DEFAULT = 0",
          "1166: ACONFIGURATION_DENSITY_LOW = 120",
          "1167: ACONFIGURATION_DENSITY_MEDIUM = 160",
          "1168: ACONFIGURATION_DENSITY_TV = 213",
          "1169: ACONFIGURATION_DENSITY_HIGH = 240",
          "1170: ACONFIGURATION_DENSITY_XHIGH = 320",
          "1171: ACONFIGURATION_DENSITY_XXHIGH = 480",
          "1172: ACONFIGURATION_DENSITY_XXXHIGH = 640",
          "1173: ACONFIGURATION_DENSITY_ANY = 0xfffe",
          "1174: ACONFIGURATION_DENSITY_NONE = 0xffff",
          "1175: ACONFIGURATION_KEYBOARD_ANY  = 0x0000",
          "1176: ACONFIGURATION_KEYBOARD_NOKEYS = 0x0001",
          "1177: ACONFIGURATION_KEYBOARD_QWERTY = 0x0002",
          "1178: ACONFIGURATION_KEYBOARD_12KEY = 0x0003",
          "1179: ACONFIGURATION_NAVIGATION_ANY  = 0x0000",
          "1180: ACONFIGURATION_NAVIGATION_NONAV = 0x0001",
          "1181: ACONFIGURATION_NAVIGATION_DPAD = 0x0002",
          "1182: ACONFIGURATION_NAVIGATION_TRACKBALL = 0x0003",
          "1183: ACONFIGURATION_NAVIGATION_WHEEL = 0x0004",
          "1184: ACONFIGURATION_KEYSHIDDEN_ANY = 0x0000",
          "1185: ACONFIGURATION_KEYSHIDDEN_NO = 0x0001",
          "1186: ACONFIGURATION_KEYSHIDDEN_YES = 0x0002",
          "1187: ACONFIGURATION_KEYSHIDDEN_SOFT = 0x0003",
          "1188: ACONFIGURATION_NAVHIDDEN_ANY = 0x0000",
          "1189: ACONFIGURATION_NAVHIDDEN_NO = 0x0001",
          "1190: ACONFIGURATION_NAVHIDDEN_YES = 0x0002",
          "1191: ACONFIGURATION_SCREENSIZE_ANY = 0x00",
          "1192: ACONFIGURATION_SCREENSIZE_SMALL = 0x01",
          "1193: ACONFIGURATION_SCREENSIZE_NORMAL = 0x02",
          "1194: ACONFIGURATION_SCREENSIZE_LARGE = 0x03",
          "1195: ACONFIGURATION_SCREENSIZE_XLARGE = 0x04",
          "1196: ACONFIGURATION_SCREENLONG_ANY = 0x00",
          "1197: ACONFIGURATION_SCREENLONG_NO = 0x1",
          "1198: ACONFIGURATION_SCREENLONG_YES = 0x2",
          "1199: ACONFIGURATION_SCREENROUND_ANY = 0x00",
          "1200: ACONFIGURATION_SCREENROUND_NO = 0x1",
          "1201: ACONFIGURATION_SCREENROUND_YES = 0x2",
          "1202: ACONFIGURATION_WIDE_COLOR_GAMUT_ANY = 0x00",
          "1203: ACONFIGURATION_WIDE_COLOR_GAMUT_NO = 0x1",
          "1204: ACONFIGURATION_WIDE_COLOR_GAMUT_YES = 0x2",
          "1205: ACONFIGURATION_HDR_ANY = 0x00",
          "1206: ACONFIGURATION_HDR_NO = 0x1",
          "1207: ACONFIGURATION_HDR_YES = 0x2",
          "1208: ACONFIGURATION_UI_MODE_TYPE_ANY = 0x00",
          "1209: ACONFIGURATION_UI_MODE_TYPE_NORMAL = 0x01",
          "1210: ACONFIGURATION_UI_MODE_TYPE_DESK = 0x02",
          "1211: ACONFIGURATION_UI_MODE_TYPE_CAR = 0x03",
          "1212: ACONFIGURATION_UI_MODE_TYPE_TELEVISION = 0x04",
          "1213: ACONFIGURATION_UI_MODE_TYPE_APPLIANCE = 0x05",
          "1214: ACONFIGURATION_UI_MODE_TYPE_WATCH = 0x06",
          "1215: ACONFIGURATION_UI_MODE_TYPE_VR_HEADSET = 0x07",
          "1216: ACONFIGURATION_UI_MODE_NIGHT_ANY = 0x00",
          "1217: ACONFIGURATION_UI_MODE_NIGHT_NO = 0x1",
          "1218: ACONFIGURATION_UI_MODE_NIGHT_YES = 0x2",
          "1219: ACONFIGURATION_SCREEN_WIDTH_DP_ANY = 0x0000",
          "1220: ACONFIGURATION_SCREEN_HEIGHT_DP_ANY = 0x0000",
          "1221: ACONFIGURATION_SMALLEST_SCREEN_WIDTH_DP_ANY = 0x0000",
          "1222: ACONFIGURATION_LAYOUTDIR_ANY = 0x00",
          "1223: ACONFIGURATION_LAYOUTDIR_LTR = 0x01",
          "1224: ACONFIGURATION_LAYOUTDIR_RTL = 0x02",
          "1225: ACONFIGURATION_MCC = 0x0001",
          "1226: ACONFIGURATION_MNC = 0x0002",
          "1227: ACONFIGURATION_LOCALE = 0x0004",
          "1228: ACONFIGURATION_TOUCHSCREEN = 0x0008",
          "1229: ACONFIGURATION_KEYBOARD = 0x0010",
          "1230: ACONFIGURATION_KEYBOARD_HIDDEN = 0x0020",
          "1231: ACONFIGURATION_NAVIGATION = 0x0040",
          "1232: ACONFIGURATION_ORIENTATION = 0x0080",
          "1233: ACONFIGURATION_DENSITY = 0x0100",
          "1234: ACONFIGURATION_SCREEN_SIZE = 0x0200",
          "1235: ACONFIGURATION_VERSION = 0x0400",
          "1236: ACONFIGURATION_SCREEN_LAYOUT = 0x0800",
          "1237: ACONFIGURATION_UI_MODE = 0x1000",
          "1238: ACONFIGURATION_SMALLEST_SCREEN_SIZE = 0x2000",
          "1239: ACONFIGURATION_LAYOUTDIR = 0x4000",
          "1240: ACONFIGURATION_SCREEN_ROUND = 0x8000",
          "1241: ACONFIGURATION_COLOR_MODE = 0x10000",
          "1242: ACONFIGURATION_MNC_ZERO = 0xffff",
          "1244: # See http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#946",
          "1246: ORIENTATION_ANY = ACONFIGURATION_ORIENTATION_ANY",
          "1247: ORIENTATION_PORT = ACONFIGURATION_ORIENTATION_PORT",
          "1248: ORIENTATION_LAND = ACONFIGURATION_ORIENTATION_LAND",
          "1249: ORIENTATION_SQUARE = ACONFIGURATION_ORIENTATION_SQUARE",
          "1251: TOUCHSCREEN_ANY = ACONFIGURATION_TOUCHSCREEN_ANY",
          "1252: TOUCHSCREEN_NOTOUCH = ACONFIGURATION_TOUCHSCREEN_NOTOUCH",
          "1253: TOUCHSCREEN_STYLUS = ACONFIGURATION_TOUCHSCREEN_STYLUS",
          "1254: TOUCHSCREEN_FINGER = ACONFIGURATION_TOUCHSCREEN_FINGER",
          "1256: DENSITY_DEFAULT = ACONFIGURATION_DENSITY_DEFAULT",
          "1257: DENSITY_LOW = ACONFIGURATION_DENSITY_LOW",
          "1258: DENSITY_MEDIUM = ACONFIGURATION_DENSITY_MEDIUM",
          "1259: DENSITY_TV = ACONFIGURATION_DENSITY_TV",
          "1260: DENSITY_HIGH = ACONFIGURATION_DENSITY_HIGH",
          "1261: DENSITY_XHIGH = ACONFIGURATION_DENSITY_XHIGH",
          "1262: DENSITY_XXHIGH = ACONFIGURATION_DENSITY_XXHIGH",
          "1263: DENSITY_XXXHIGH = ACONFIGURATION_DENSITY_XXXHIGH",
          "1264: DENSITY_ANY = ACONFIGURATION_DENSITY_ANY",
          "1265: DENSITY_NONE = ACONFIGURATION_DENSITY_NONE",
          "1267: KEYBOARD_ANY = ACONFIGURATION_KEYBOARD_ANY",
          "1268: KEYBOARD_NOKEYS = ACONFIGURATION_KEYBOARD_NOKEYS",
          "1269: KEYBOARD_QWERTY = ACONFIGURATION_KEYBOARD_QWERTY",
          "1270: KEYBOARD_12KEY = ACONFIGURATION_KEYBOARD_12KEY",
          "1272: NAVIGATION_ANY = ACONFIGURATION_NAVIGATION_ANY",
          "1273: NAVIGATION_NONAV = ACONFIGURATION_NAVIGATION_NONAV",
          "1274: NAVIGATION_DPAD = ACONFIGURATION_NAVIGATION_DPAD",
          "1275: NAVIGATION_TRACKBALL = ACONFIGURATION_NAVIGATION_TRACKBALL",
          "1276: NAVIGATION_WHEEL = ACONFIGURATION_NAVIGATION_WHEEL",
          "1278: MASK_KEYSHIDDEN = 0x0003",
          "1279: KEYSHIDDEN_ANY = ACONFIGURATION_KEYSHIDDEN_ANY",
          "1280: KEYSHIDDEN_NO = ACONFIGURATION_KEYSHIDDEN_NO",
          "1281: KEYSHIDDEN_YES = ACONFIGURATION_KEYSHIDDEN_YES",
          "1282: KEYSHIDDEN_SOFT = ACONFIGURATION_KEYSHIDDEN_SOFT",
          "1284: MASK_NAVHIDDEN = 0x000c",
          "1285: SHIFT_NAVHIDDEN = 2",
          "1286: NAVHIDDEN_ANY = ACONFIGURATION_NAVHIDDEN_ANY << SHIFT_NAVHIDDEN",
          "1287: NAVHIDDEN_NO = ACONFIGURATION_NAVHIDDEN_NO << SHIFT_NAVHIDDEN",
          "1288: NAVHIDDEN_YES = ACONFIGURATION_NAVHIDDEN_YES << SHIFT_NAVHIDDEN",
          "1290: SCREENWIDTH_ANY = 0",
          "1291: SCREENHEIGHT_ANY = 0",
          "1292: SDKVERSION_ANY = 0",
          "1293: MINORVERSION_ANY = 0",
          "1295: MASK_SCREENSIZE = 0x0f",
          "1296: SCREENSIZE_ANY = ACONFIGURATION_SCREENSIZE_ANY",
          "1297: SCREENSIZE_SMALL = ACONFIGURATION_SCREENSIZE_SMALL",
          "1298: SCREENSIZE_NORMAL = ACONFIGURATION_SCREENSIZE_NORMAL",
          "1299: SCREENSIZE_LARGE = ACONFIGURATION_SCREENSIZE_LARGE",
          "1300: SCREENSIZE_XLARGE = ACONFIGURATION_SCREENSIZE_XLARGE",
          "1302: MASK_SCREENLONG = 0x30",
          "1303: SHIFT_SCREENLONG = 4",
          "1304: SCREENLONG_ANY = ACONFIGURATION_SCREENLONG_ANY << SHIFT_SCREENLONG",
          "1305: SCREENLONG_NO = ACONFIGURATION_SCREENLONG_NO << SHIFT_SCREENLONG",
          "1306: SCREENLONG_YES = ACONFIGURATION_SCREENLONG_YES << SHIFT_SCREENLONG",
          "1308: MASK_LAYOUTDIR = 0xC0",
          "1309: SHIFT_LAYOUTDIR = 6",
          "1310: LAYOUTDIR_ANY = ACONFIGURATION_LAYOUTDIR_ANY << SHIFT_LAYOUTDIR",
          "1311: LAYOUTDIR_LTR = ACONFIGURATION_LAYOUTDIR_LTR << SHIFT_LAYOUTDIR",
          "1312: LAYOUTDIR_RTL = ACONFIGURATION_LAYOUTDIR_RTL << SHIFT_LAYOUTDIR",
          "1314: MASK_UI_MODE_TYPE = 0x0f",
          "1315: UI_MODE_TYPE_ANY = ACONFIGURATION_UI_MODE_TYPE_ANY",
          "1316: UI_MODE_TYPE_NORMAL = ACONFIGURATION_UI_MODE_TYPE_NORMAL",
          "1317: UI_MODE_TYPE_DESK = ACONFIGURATION_UI_MODE_TYPE_DESK",
          "1318: UI_MODE_TYPE_CAR = ACONFIGURATION_UI_MODE_TYPE_CAR",
          "1319: UI_MODE_TYPE_TELEVISION = ACONFIGURATION_UI_MODE_TYPE_TELEVISION",
          "1320: UI_MODE_TYPE_APPLIANCE = ACONFIGURATION_UI_MODE_TYPE_APPLIANCE",
          "1321: UI_MODE_TYPE_WATCH = ACONFIGURATION_UI_MODE_TYPE_WATCH",
          "1322: UI_MODE_TYPE_VR_HEADSET = ACONFIGURATION_UI_MODE_TYPE_VR_HEADSET",
          "1324: MASK_UI_MODE_NIGHT = 0x30",
          "1325: SHIFT_UI_MODE_NIGHT = 4",
          "1326: UI_MODE_NIGHT_ANY = ACONFIGURATION_UI_MODE_NIGHT_ANY << SHIFT_UI_MODE_NIGHT",
          "1327: UI_MODE_NIGHT_NO = ACONFIGURATION_UI_MODE_NIGHT_NO << SHIFT_UI_MODE_NIGHT",
          "1328: UI_MODE_NIGHT_YES = ACONFIGURATION_UI_MODE_NIGHT_YES << SHIFT_UI_MODE_NIGHT",
          "1330: MASK_SCREENROUND = 0x03",
          "1331: SCREENROUND_ANY = ACONFIGURATION_SCREENROUND_ANY",
          "1332: SCREENROUND_NO = ACONFIGURATION_SCREENROUND_NO",
          "1333: SCREENROUND_YES = ACONFIGURATION_SCREENROUND_YES",
          "1335: MASK_WIDE_COLOR_GAMUT = 0x03",
          "1336: WIDE_COLOR_GAMUT_ANY = ACONFIGURATION_WIDE_COLOR_GAMUT_ANY",
          "1337: WIDE_COLOR_GAMUT_NO = ACONFIGURATION_WIDE_COLOR_GAMUT_NO",
          "1338: WIDE_COLOR_GAMUT_YES = ACONFIGURATION_WIDE_COLOR_GAMUT_YES",
          "1340: MASK_HDR = 0x0c",
          "1341: SHIFT_HDR = 2",
          "1342: HDR_ANY = ACONFIGURATION_HDR_ANY << SHIFT_HDR",
          "1343: HDR_NO = ACONFIGURATION_HDR_NO << SHIFT_HDR",
          "1344: HDR_YES = ACONFIGURATION_HDR_YES << SHIFT_HDR",
          "1347: class ARSCParser:",
          "1348:     \"\"\"",
          "1349:     Parser for resource.arsc files",
          "1351:     The ARSC File is, like the binary XML format, a chunk based format.",
          "1352:     Both formats are actually identical but use different chunks in order to store the data.",
          "1354:     The most outer chunk in the ARSC file is a chunk of type RES_TABLE_TYPE.",
          "1355:     Inside this chunk is a StringPool and at least one package.",
          "1357:     Each package is a chunk of type RES_TABLE_PACKAGE_TYPE.",
          "1358:     It contains again many more chunks.",
          "1359:     \"\"\"",
          "1360:     def __init__(self, raw_buff):",
          "1361:         \"\"\"",
          "1362:         :param bytes raw_buff: the raw bytes of the file",
          "1363:         \"\"\"",
          "1364:         self.buff = io.BufferedReader(io.BytesIO(raw_buff))",
          "1365:         self.buff_size = self.buff.raw.getbuffer().nbytes",
          "1367:         if self.buff_size < 8 or self.buff_size > 0xFFFFFFFF:",
          "1368:             raise ResParserError(\"Invalid file size {} for a resources.arsc file!\".format(self.buff.size()))",
          "1370:         self.analyzed = False",
          "1371:         self._resolved_strings = None",
          "1372:         self.packages = defaultdict(list)",
          "1373:         self.values = {}",
          "1374:         self.resource_values = defaultdict(defaultdict)",
          "1375:         self.resource_configs = defaultdict(lambda: defaultdict(set))",
          "1376:         self.resource_keys = defaultdict(lambda: defaultdict(defaultdict))",
          "1377:         self.stringpool_main = None",
          "1379:         # First, there is a ResTable_header.",
          "1380:         self.header = ARSCHeader(self.buff, expected_type=RES_TABLE_TYPE)",
          "1382:         # More sanity checks...",
          "1383:         if self.header.header_size != 12:",
          "1384:             logger.warning(\"The ResTable_header has an unexpected header size! Expected 12 bytes, got {}.\".format(self.header.header_size))",
          "1386:         if self.header.size > self.buff_size:",
          "1387:             raise ResParserError(\"The file seems to be truncated. Refuse to parse the file! Filesize: {}, declared size: {}\".format(self.buff_size, self.header.size))",
          "1389:         if self.header.size < self.buff_size:",
          "1390:             logger.warning(\"The Resource file seems to have data appended to it. Filesize: {}, declared size: {}\".format(self.buff_size, self.header.size))",
          "1392:         # The ResTable_header contains the packageCount, i.e. the number of ResTable_package",
          "1393:         self.packageCount = unpack('<I', self.buff.read(4))[0]",
          "1395:         # Even more sanity checks...",
          "1396:         if self.packageCount < 1:",
          "1397:             logger.warning(\"The number of packages is smaller than one. There should be at least one package!\")",
          "1399:         logger.debug(\"Parsed ResTable_header with {} package(s) inside.\".format(self.packageCount))",
          "1401:         # skip to the start of the first chunk's data, skipping trailing header bytes (there should be none)",
          "1402:         self.buff.seek(self.header.start + self.header.header_size)",
          "1404:         # Now parse the data:",
          "1405:         # We should find one ResStringPool_header and one or more ResTable_package chunks inside",
          "1406:         while self.buff.tell() <= self.header.end - ARSCHeader.SIZE:",
          "1407:             res_header = ARSCHeader(self.buff)",
          "1409:             if res_header.end > self.header.end:",
          "1410:                 # this inner chunk crosses the boundary of the table chunk",
          "1411:                 logger.warning(\"Invalid chunk found! It is larger than the outer chunk: %s\", res_header)",
          "1412:                 break",
          "1414:             if res_header.type == RES_STRING_POOL_TYPE:",
          "1415:                 # There should be only one StringPool per resource table.",
          "1416:                 if self.stringpool_main:",
          "1417:                     logger.warning(\"Already found a ResStringPool_header, but there should be only one! Will not parse the Pool again.\")",
          "1418:                 else:",
          "1419:                     self.stringpool_main = StringBlock(self.buff, res_header)",
          "1420:                     logger.debug(\"Found the main string pool: %s\", self.stringpool_main)",
          "1422:             elif res_header.type == RES_TABLE_PACKAGE_TYPE:",
          "1423:                 if len(self.packages) > self.packageCount:",
          "1424:                     raise ResParserError(\"Got more packages ({}) than expected ({})\".format(len(self.packages), self.packageCount))",
          "1426:                 current_package = ARSCResTablePackage(self.buff, res_header)",
          "1427:                 package_name = current_package.get_name()",
          "1429:                 # After the Header, we have the resource type symbol table",
          "1430:                 self.buff.seek(current_package.header.start + current_package.typeStrings)",
          "1431:                 type_sp_header = ARSCHeader(self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "1432:                 mTableStrings = StringBlock(self.buff, type_sp_header)",
          "1434:                 # Next, we should have the resource key symbol table",
          "1435:                 self.buff.seek(current_package.header.start + current_package.keyStrings)",
          "1436:                 key_sp_header = ARSCHeader(self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "1437:                 mKeyStrings = StringBlock(self.buff, key_sp_header)",
          "1439:                 # Add them to the dict of read packages",
          "1440:                 self.packages[package_name].append(current_package)",
          "1441:                 self.packages[package_name].append(mTableStrings)",
          "1442:                 self.packages[package_name].append(mKeyStrings)",
          "1444:                 pc = PackageContext(current_package, self.stringpool_main, mTableStrings, mKeyStrings)",
          "1445:                 logger.debug(\"Constructed a PackageContext: %s\", pc)",
          "1447:                 # skip to the first header in this table package chunk",
          "1448:                 # FIXME is this correct? We have already read the first two sections!",
          "1449:                 # self.buff.set_idx(res_header.start + res_header.header_size)",
          "1450:                 # this looks more like we want: (???)",
          "1451:                 # FIXME it looks like that the two string pools we have read might not be concatenated to each other,",
          "1452:                 # thus jumping to the sum of the sizes might not be correct...",
          "1453:                 next_idx = res_header.start + res_header.header_size + type_sp_header.size + key_sp_header.size",
          "1455:                 if next_idx != self.buff.tell():",
          "1456:                     # If this happens, we have a testfile ;)",
          "1457:                     logger.error(\"This looks like an odd resources.arsc file!\")",
          "1458:                     logger.error(\"Please report this error including the file you have parsed!\")",
          "1459:                     logger.error(\"next_idx = {}, current buffer position = {}\".format(next_idx, self.buff.tell()))",
          "1460:                     logger.error(\"Please open a issue at https://github.com/androguard/androguard/issues\")",
          "1461:                     logger.error(\"Thank you!\")",
          "1463:                 self.buff.seek(next_idx)",
          "1465:                 # Read all other headers",
          "1466:                 while self.buff.tell() <= res_header.end - ARSCHeader.SIZE:",
          "1467:                     pkg_chunk_header = ARSCHeader(self.buff)",
          "1468:                     logger.debug(\"Found a header: {}\".format(pkg_chunk_header))",
          "1469:                     if pkg_chunk_header.start + pkg_chunk_header.size > res_header.end:",
          "1470:                         # we are way off the package chunk; bail out",
          "1471:                         break",
          "1473:                     self.packages[package_name].append(pkg_chunk_header)",
          "1475:                     if pkg_chunk_header.type == RES_TABLE_TYPE_SPEC_TYPE:",
          "1476:                         self.packages[package_name].append(ARSCResTypeSpec(self.buff, pc))",
          "1478:                     elif pkg_chunk_header.type == RES_TABLE_TYPE_TYPE:",
          "1479:                         # Parse a RES_TABLE_TYPE",
          "1480:                         # http://androidxref.com/9.0.0_r3/xref/frameworks/base/tools/aapt2/format/binary/BinaryResourceParser.cpp#311",
          "1481:                         a_res_type = ARSCResType(self.buff, pc)",
          "1482:                         self.packages[package_name].append(a_res_type)",
          "1483:                         self.resource_configs[package_name][a_res_type].add(a_res_type.config)",
          "1485:                         logger.debug(\"Config: {}\".format(a_res_type.config))",
          "1487:                         entries = []",
          "1488:                         for i in range(0, a_res_type.entryCount):",
          "1489:                             current_package.mResId = current_package.mResId & 0xffff0000 | i",
          "1490:                             entries.append((unpack('<i', self.buff.read(4))[0], current_package.mResId))",
          "1492:                         self.packages[package_name].append(entries)",
          "1494:                         for entry, res_id in entries:",
          "1495:                             if entry != -1:",
          "1496:                                 ate = ARSCResTableEntry(self.buff, res_id, pc)",
          "1497:                                 self.packages[package_name].append(ate)",
          "1498:                                 if ate.is_weak():",
          "1499:                                     # FIXME we are not sure how to implement the FLAG_WEAK!",
          "1500:                                     # We saw the following: There is just a single Res_value after the ARSCResTableEntry",
          "1501:                                     # and then comes the next ARSCHeader.",
          "1502:                                     # Therefore we think this means all entries are somehow replicated?",
          "1503:                                     # So we do some kind of hack here. We set the idx to the entry again...",
          "1504:                                     # Now we will read all entries!",
          "1505:                                     # Not sure if this is a good solution though",
          "1506:                                     self.buff.seek(ate.start)",
          "1507:                     elif pkg_chunk_header.type == RES_TABLE_LIBRARY_TYPE:",
          "1508:                         logger.warning(\"RES_TABLE_LIBRARY_TYPE chunk is not supported\")",
          "1509:                     else:",
          "1510:                         # Unknown / not-handled chunk type",
          "1511:                         logger.warning(\"Unknown chunk type encountered inside RES_TABLE_PACKAGE: %s\", pkg_chunk_header)",
          "1513:                     # skip to the next chunk",
          "1514:                     self.buff.seek(pkg_chunk_header.end)",
          "1515:             else:",
          "1516:                 # Unknown / not-handled chunk type",
          "1517:                 logger.warning(\"Unknown chunk type encountered: %s\", res_header)",
          "1519:             # move to the next resource chunk",
          "1520:             self.buff.seek(res_header.end)",
          "1522:     def _analyse(self):",
          "1523:         if self.analyzed:",
          "1524:             return",
          "1526:         self.analyzed = True",
          "1528:         for package_name in self.packages:",
          "1529:             self.values[package_name] = {}",
          "1531:             nb = 3",
          "1532:             while nb < len(self.packages[package_name]):",
          "1533:                 header = self.packages[package_name][nb]",
          "1534:                 if isinstance(header, ARSCHeader):",
          "1535:                     if header.type == RES_TABLE_TYPE_TYPE:",
          "1536:                         a_res_type = self.packages[package_name][nb + 1]",
          "1538:                         locale = a_res_type.config.get_language_and_region()",
          "1540:                         c_value = self.values[package_name].setdefault(locale, {\"public\": []})",
          "1542:                         entries = self.packages[package_name][nb + 2]",
          "1543:                         nb_i = 0",
          "1544:                         for entry, res_id in entries:",
          "1545:                             if entry != -1:",
          "1546:                                 ate = self.packages[package_name][nb + 3 + nb_i]",
          "1548:                                 self.resource_values[ate.mResId][a_res_type.config] = ate",
          "1549:                                 self.resource_keys[package_name][a_res_type.get_type()][ate.get_value()] = ate.mResId",
          "1551:                                 if ate.get_index() != -1:",
          "1552:                                     c_value[\"public\"].append(",
          "1553:                                         (a_res_type.get_type(), ate.get_value(),",
          "1554:                                          ate.mResId))",
          "1556:                                 if a_res_type.get_type() not in c_value:",
          "1557:                                     c_value[a_res_type.get_type()] = []",
          "1559:                                 if a_res_type.get_type() == \"string\":",
          "1560:                                     c_value[\"string\"].append(",
          "1561:                                         self.get_resource_string(ate))",
          "1563:                                 elif a_res_type.get_type() == \"id\":",
          "1564:                                     if not ate.is_complex():",
          "1565:                                         c_value[\"id\"].append(",
          "1566:                                             self.get_resource_id(ate))",
          "1568:                                 elif a_res_type.get_type() == \"bool\":",
          "1569:                                     if not ate.is_complex():",
          "1570:                                         c_value[\"bool\"].append(",
          "1571:                                             self.get_resource_bool(ate))",
          "1573:                                 elif a_res_type.get_type() == \"integer\":",
          "1574:                                     c_value[\"integer\"].append(",
          "1575:                                         self.get_resource_integer(ate))",
          "1577:                                 elif a_res_type.get_type() == \"color\":",
          "1578:                                     c_value[\"color\"].append(",
          "1579:                                         self.get_resource_color(ate))",
          "1581:                                 elif a_res_type.get_type() == \"dimen\":",
          "1582:                                     c_value[\"dimen\"].append(",
          "1583:                                         self.get_resource_dimen(ate))",
          "1585:                                 nb_i += 1",
          "1586:                         nb += 3 + nb_i - 1  # -1 to account for the nb+=1 on the next line",
          "1587:                 nb += 1",
          "1589:     def get_resource_string(self, ate):",
          "1590:         return [ate.get_value(), ate.get_key_data()]",
          "1592:     def get_resource_id(self, ate):",
          "1593:         x = [ate.get_value()]",
          "1594:         if ate.key.get_data() == 0:",
          "1595:             x.append(\"false\")",
          "1596:         elif ate.key.get_data() == 1:",
          "1597:             x.append(\"true\")",
          "1598:         return x",
          "1600:     def get_resource_bool(self, ate):",
          "1601:         x = [ate.get_value()]",
          "1602:         if ate.key.get_data() == 0:",
          "1603:             x.append(\"false\")",
          "1604:         elif ate.key.get_data() == -1:",
          "1605:             x.append(\"true\")",
          "1606:         return x",
          "1608:     def get_resource_integer(self, ate):",
          "1609:         return [ate.get_value(), ate.key.get_data()]",
          "1611:     def get_resource_color(self, ate):",
          "1612:         entry_data = ate.key.get_data()",
          "1613:         return [",
          "1614:             ate.get_value(),",
          "1615:             \"#{:02x}{:02x}{:02x}{:02x}\".format(",
          "1616:                 ((entry_data >> 24) & 0xFF),",
          "1617:                 ((entry_data >> 16) & 0xFF),",
          "1618:                 ((entry_data >> 8) & 0xFF),",
          "1619:                 (entry_data & 0xFF))",
          "1620:         ]",
          "1622:     def get_resource_dimen(self, ate):",
          "1623:         try:",
          "1624:             return [",
          "1625:                 ate.get_value(), \"{}{}\".format(",
          "1626:                     complexToFloat(ate.key.get_data()),",
          "1627:                     DIMENSION_UNITS[ate.key.get_data() & COMPLEX_UNIT_MASK])",
          "1628:             ]",
          "1629:         except IndexError:",
          "1630:             logger.debug(\"Out of range dimension unit index for {}: {}\".format(",
          "1631:                 complexToFloat(ate.key.get_data()),",
          "1632:                 ate.key.get_data() & COMPLEX_UNIT_MASK))",
          "1633:             return [ate.get_value(), ate.key.get_data()]",
          "1635:     # FIXME",
          "1636:     def get_resource_style(self, ate):",
          "1637:         return [\"\", \"\"]",
          "1639:     def get_packages_names(self):",
          "1640:         \"\"\"",
          "1641:         Retrieve a list of all package names, which are available",
          "1642:         in the given resources.arsc.",
          "1643:         \"\"\"",
          "1644:         return list(self.packages.keys())",
          "1646:     def get_locales(self, package_name):",
          "1647:         \"\"\"",
          "1648:         Retrieve a list of all available locales in a given packagename.",
          "1650:         :param package_name: the package name to get locales of",
          "1651:         \"\"\"",
          "1652:         self._analyse()",
          "1653:         return list(self.values[package_name].keys())",
          "1655:     def get_types(self, package_name, locale='\\x00\\x00'):",
          "1656:         \"\"\"",
          "1657:         Retrieve a list of all types which are available in the given",
          "1658:         package and locale.",
          "1660:         :param package_name: the package name to get types of",
          "1661:         :param locale: the locale to get types of (default: '\\x00\\x00')",
          "1662:         \"\"\"",
          "1663:         self._analyse()",
          "1664:         return list(self.values[package_name][locale].keys())",
          "1666:     def get_public_resources(self, package_name, locale='\\x00\\x00'):",
          "1667:         \"\"\"",
          "1668:         Get the XML (as string) of all resources of type 'public'.",
          "1670:         The public resources table contains the IDs for each item.",
          "1672:         :param package_name: the package name to get the resources for",
          "1673:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1674:         \"\"\"",
          "1676:         self._analyse()",
          "1678:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1679:         buff += '<resources>\\n'",
          "1681:         try:",
          "1682:             for i in self.values[package_name][locale][\"public\"]:",
          "1683:                 buff += '<public type=\"{}\" name=\"{}\" id=\"0x{:08x}\" />\\n'.format(",
          "1684:                     i[0], i[1], i[2])",
          "1685:         except KeyError:",
          "1686:             pass",
          "1688:         buff += '</resources>\\n'",
          "1690:         return buff.encode('utf-8')",
          "1692:     def get_string_resources(self, package_name, locale='\\x00\\x00'):",
          "1693:         \"\"\"",
          "1694:         Get the XML (as string) of all resources of type 'string'.",
          "1696:         Read more about string resources:",
          "1697:         https://developer.android.com/guide/topics/resources/string-resource.html",
          "1699:         :param package_name: the package name to get the resources for",
          "1700:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1701:         \"\"\"",
          "1702:         self._analyse()",
          "1704:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1705:         buff += '<resources>\\n'",
          "1707:         try:",
          "1708:             for i in self.values[package_name][locale][\"string\"]:",
          "1709:                 if any(map(i[1].__contains__, '<&>')):",
          "1710:                     value = '<![CDATA[%s]]>' % i[1]",
          "1711:                 else:",
          "1712:                     value = i[1]",
          "1713:                 buff += '<string name=\"{}\">{}</string>\\n'.format(i[0], value)",
          "1714:         except KeyError:",
          "1715:             pass",
          "1717:         buff += '</resources>\\n'",
          "1719:         return buff.encode('utf-8')",
          "1721:     def get_strings_resources(self):",
          "1722:         \"\"\"",
          "1723:         Get the XML (as string) of all resources of type 'string'.",
          "1724:         This is a combined variant, which has all locales and all package names",
          "1725:         stored.",
          "1726:         \"\"\"",
          "1727:         self._analyse()",
          "1729:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1731:         buff += \"<packages>\\n\"",
          "1732:         for package_name in self.get_packages_names():",
          "1733:             buff += \"<package name=\\\"%s\\\">\\n\" % package_name",
          "1735:             for locale in self.get_locales(package_name):",
          "1736:                 buff += \"<locale value=%s>\\n\" % repr(locale)",
          "1738:                 buff += '<resources>\\n'",
          "1739:                 try:",
          "1740:                     for i in self.values[package_name][locale][\"string\"]:",
          "1741:                         buff += '<string name=\"{}\">{}</string>\\n'.format(i[0], escape(i[1]))",
          "1742:                 except KeyError:",
          "1743:                     pass",
          "1745:                 buff += '</resources>\\n'",
          "1746:                 buff += '</locale>\\n'",
          "1748:             buff += \"</package>\\n\"",
          "1750:         buff += \"</packages>\\n\"",
          "1752:         return buff.encode('utf-8')",
          "1754:     def get_id_resources(self, package_name, locale='\\x00\\x00'):",
          "1755:         \"\"\"",
          "1756:         Get the XML (as string) of all resources of type 'id'.",
          "1758:         Read more about ID resources:",
          "1759:         https://developer.android.com/guide/topics/resources/more-resources.html#Id",
          "1761:         :param package_name: the package name to get the resources for",
          "1762:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1763:         \"\"\"",
          "1764:         self._analyse()",
          "1766:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1767:         buff += '<resources>\\n'",
          "1769:         try:",
          "1770:             for i in self.values[package_name][locale][\"id\"]:",
          "1771:                 if len(i) == 1:",
          "1772:                     buff += '<item type=\"id\" name=\"%s\"/>\\n' % (i[0])",
          "1773:                 else:",
          "1774:                     buff += '<item type=\"id\" name=\"{}\">{}</item>\\n'.format(i[0],",
          "1775:                                                                        escape(i[1]))",
          "1776:         except KeyError:",
          "1777:             pass",
          "1779:         buff += '</resources>\\n'",
          "1781:         return buff.encode('utf-8')",
          "1783:     def get_bool_resources(self, package_name, locale='\\x00\\x00'):",
          "1784:         \"\"\"",
          "1785:         Get the XML (as string) of all resources of type 'bool'.",
          "1787:         Read more about bool resources:",
          "1788:         https://developer.android.com/guide/topics/resources/more-resources.html#Bool",
          "1790:         :param package_name: the package name to get the resources for",
          "1791:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1792:         \"\"\"",
          "1793:         self._analyse()",
          "1795:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1796:         buff += '<resources>\\n'",
          "1798:         try:",
          "1799:             for i in self.values[package_name][locale][\"bool\"]:",
          "1800:                 buff += '<bool name=\"{}\">{}</bool>\\n'.format(i[0], i[1])",
          "1801:         except KeyError:",
          "1802:             pass",
          "1804:         buff += '</resources>\\n'",
          "1806:         return buff.encode('utf-8')",
          "1808:     def get_integer_resources(self, package_name, locale='\\x00\\x00'):",
          "1809:         \"\"\"",
          "1810:         Get the XML (as string) of all resources of type 'integer'.",
          "1812:         Read more about integer resources:",
          "1813:         https://developer.android.com/guide/topics/resources/more-resources.html#Integer",
          "1815:         :param package_name: the package name to get the resources for",
          "1816:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1817:         \"\"\"",
          "1818:         self._analyse()",
          "1820:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1821:         buff += '<resources>\\n'",
          "1823:         try:",
          "1824:             for i in self.values[package_name][locale][\"integer\"]:",
          "1825:                 buff += '<integer name=\"{}\">{}</integer>\\n'.format(i[0], i[1])",
          "1826:         except KeyError:",
          "1827:             pass",
          "1829:         buff += '</resources>\\n'",
          "1831:         return buff.encode('utf-8')",
          "1833:     def get_color_resources(self, package_name, locale='\\x00\\x00'):",
          "1834:         \"\"\"",
          "1835:         Get the XML (as string) of all resources of type 'color'.",
          "1837:         Read more about color resources:",
          "1838:         https://developer.android.com/guide/topics/resources/more-resources.html#Color",
          "1840:         :param package_name: the package name to get the resources for",
          "1841:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1842:         \"\"\"",
          "1843:         self._analyse()",
          "1845:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1846:         buff += '<resources>\\n'",
          "1848:         try:",
          "1849:             for i in self.values[package_name][locale][\"color\"]:",
          "1850:                 buff += '<color name=\"{}\">{}</color>\\n'.format(i[0], i[1])",
          "1851:         except KeyError:",
          "1852:             pass",
          "1854:         buff += '</resources>\\n'",
          "1856:         return buff.encode('utf-8')",
          "1858:     def get_dimen_resources(self, package_name, locale='\\x00\\x00'):",
          "1859:         \"\"\"",
          "1860:         Get the XML (as string) of all resources of type 'dimen'.",
          "1862:         Read more about Dimension resources:",
          "1863:         https://developer.android.com/guide/topics/resources/more-resources.html#Dimension",
          "1865:         :param package_name: the package name to get the resources for",
          "1866:         :param locale: the locale to get the resources for (default: '\\x00\\x00')",
          "1867:         \"\"\"",
          "1868:         self._analyse()",
          "1870:         buff = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'",
          "1871:         buff += '<resources>\\n'",
          "1873:         try:",
          "1874:             for i in self.values[package_name][locale][\"dimen\"]:",
          "1875:                 buff += '<dimen name=\"{}\">{}</dimen>\\n'.format(i[0], i[1])",
          "1876:         except KeyError:",
          "1877:             pass",
          "1879:         buff += '</resources>\\n'",
          "1881:         return buff.encode('utf-8')",
          "1883:     def get_id(self, package_name, rid, locale='\\x00\\x00'):",
          "1884:         \"\"\"",
          "1885:         Returns the tuple (resource_type, resource_name, resource_id)",
          "1886:         for the given resource_id.",
          "1888:         :param package_name: package name to query",
          "1889:         :param rid: the resource_id",
          "1890:         :param locale: specific locale",
          "1891:         :return: tuple of (resource_type, resource_name, resource_id)",
          "1892:         \"\"\"",
          "1893:         self._analyse()",
          "1895:         try:",
          "1896:             for i in self.values[package_name][locale][\"public\"]:",
          "1897:                 if i[2] == rid:",
          "1898:                     return i",
          "1899:         except KeyError:",
          "1900:             pass",
          "1901:         return None, None, None",
          "1903:     class ResourceResolver:",
          "1904:         \"\"\"",
          "1905:         Resolves resources by ID and configuration.",
          "1906:         This resolver deals with complex resources as well as with references.",
          "1907:         \"\"\"",
          "1908:         def __init__(self, android_resources, config=None):",
          "1909:             \"\"\"",
          "1910:             :param ARSCParser android_resources: A resource parser",
          "1911:             :param ARSCResTableConfig config: The desired configuration or None to resolve all.",
          "1912:             \"\"\"",
          "1913:             self.resources = android_resources",
          "1914:             self.wanted_config = config",
          "1916:         def resolve(self, res_id):",
          "1917:             \"\"\"",
          "1918:             the given ID into the Resource and returns a list of matching resources.",
          "1920:             :param int res_id: numerical ID of the resource",
          "1921:             :return: a list of tuples of (ARSCResTableConfig, str)",
          "1922:             \"\"\"",
          "1923:             result = []",
          "1924:             self._resolve_into_result(result, res_id, self.wanted_config)",
          "1925:             return result",
          "1927:         def _resolve_into_result(self, result, res_id, config):",
          "1928:             # First: Get all candidates",
          "1929:             configs = self.resources.get_res_configs(res_id, config)",
          "1931:             for config, ate in configs:",
          "1932:                 # deconstruct them and check if more candidates are generated",
          "1933:                 self.put_ate_value(result, ate, config)",
          "1935:         def put_ate_value(self, result, ate, config):",
          "1936:             \"\"\"",
          "1937:             Put a ResTableEntry into the list of results",
          "1938:             :param list result: results array",
          "1939:             :param ARSCResTableEntry ate:",
          "1940:             :param ARSCResTableConfig config:",
          "1941:             :return:",
          "1942:             \"\"\"",
          "1943:             if ate.is_complex():",
          "1944:                 complex_array = []",
          "1945:                 result.append((config, complex_array))",
          "1946:                 for _, item in ate.item.items:",
          "1947:                     self.put_item_value(complex_array, item, config, ate, complex_=True)",
          "1948:             else:",
          "1949:                 self.put_item_value(result, ate.key, config, ate, complex_=False)",
          "1951:         def put_item_value(self, result, item, config, parent, complex_):",
          "1952:             \"\"\"",
          "1953:             Put the tuple (ARSCResTableConfig, resolved string) into the result set",
          "1955:             :param list result: the result set",
          "1956:             :param ARSCResStringPoolRef item:",
          "1957:             :param ARSCResTableConfig config:",
          "1958:             :param ARSCResTableEntry parent: the originating entry",
          "1959:             :param bool complex_: True if the originating :class:`ARSCResTableEntry` was complex",
          "1960:             :return:",
          "1961:             \"\"\"",
          "1962:             if item.is_reference():",
          "1963:                 res_id = item.get_data()",
          "1964:                 if res_id:",
          "1965:                     # Infinite loop detection:",
          "1966:                     # TODO should this stay here or should be detect the loop much earlier?",
          "1967:                     if res_id == parent.mResId:",
          "1968:                         logger.warning(\"Infinite loop detected at resource item {}. It references itself!\".format(parent))",
          "1969:                         return",
          "1971:                     self._resolve_into_result(result, item.get_data(), self.wanted_config)",
          "1972:             else:",
          "1973:                 if complex_:",
          "1974:                     result.append(item.format_value())",
          "1975:                 else:",
          "1976:                     result.append((config, item.format_value()))",
          "1978:     def get_resolved_res_configs(self, rid, config=None):",
          "1979:         \"\"\"",
          "1980:         Return a list of resolved resource IDs with their corresponding configuration.",
          "1981:         It has a similar return type as :meth:`get_res_configs` but also handles complex entries",
          "1982:         and references.",
          "1983:         Also instead of returning :class:`ARSCResTableEntry` in the tuple, the actual values are resolved.",
          "1985:         This is the preferred way of resolving resource IDs to their resources.",
          "1987:         :param int rid: the numerical ID of the resource",
          "1988:         :param ARSCTableResConfig config: the desired configuration or None to retrieve all",
          "1989:         :return: A list of tuples of (ARSCResTableConfig, str)",
          "1990:         \"\"\"",
          "1991:         resolver = ARSCParser.ResourceResolver(self, config)",
          "1992:         return resolver.resolve(rid)",
          "1994:     def get_resolved_strings(self):",
          "1995:         self._analyse()",
          "1996:         if self._resolved_strings:",
          "1997:             return self._resolved_strings",
          "1999:         r = {}",
          "2000:         for package_name in self.get_packages_names():",
          "2001:             r[package_name] = {}",
          "2002:             k = {}",
          "2004:             for locale in self.values[package_name]:",
          "2005:                 v_locale = locale",
          "2006:                 if v_locale == '\\x00\\x00':",
          "2007:                     v_locale = 'DEFAULT'",
          "2009:                 r[package_name][v_locale] = {}",
          "2011:                 try:",
          "2012:                     for i in self.values[package_name][locale][\"public\"]:",
          "2013:                         if i[0] == 'string':",
          "2014:                             r[package_name][v_locale][i[2]] = None",
          "2015:                             k[i[1]] = i[2]",
          "2016:                 except KeyError:",
          "2017:                     pass",
          "2019:                 try:",
          "2020:                     for i in self.values[package_name][locale][\"string\"]:",
          "2021:                         if i[0] in k:",
          "2022:                             r[package_name][v_locale][k[i[0]]] = i[1]",
          "2023:                 except KeyError:",
          "2024:                     pass",
          "2026:         self._resolved_strings = r",
          "2027:         return r",
          "2029:     def get_res_configs(self, rid, config=None, fallback=True):",
          "2030:         \"\"\"",
          "2031:         Return the resources found with the ID `rid` and select",
          "2032:         the right one based on the configuration, or return all if no configuration was set.",
          "2034:         But we try to be generous here and at least try to resolve something:",
          "2035:         This method uses a fallback to return at least one resource (the first one in the list)",
          "2036:         if more than one items are found and the default config is used and no default entry could be found.",
          "2038:         This is usually a bad sign (i.e. the developer did not follow the android documentation:",
          "2039:         https://developer.android.com/guide/topics/resources/localization.html#failing2)",
          "2040:         In practise an app might just be designed to run on a single locale and thus only has those locales set.",
          "2042:         You can disable this fallback behaviour, to just return exactly the given result.",
          "2044:         :param rid: resource id as int",
          "2045:         :param config: a config to resolve from, or None to get all results",
          "2046:         :param fallback: Enable the fallback for resolving default configuration (default: True)",
          "2047:         :return: a list of ARSCResTableConfig: ARSCResTableEntry",
          "2048:         \"\"\"",
          "2049:         self._analyse()",
          "2051:         if not rid:",
          "2052:             raise ValueError(\"'rid' should be set\")",
          "2053:         if not isinstance(rid, int):",
          "2054:             raise ValueError(\"'rid' must be an int\")",
          "2056:         if rid not in self.resource_values:",
          "2057:             logger.warning(\"The requested rid '0x{:08x}' could not be found in the list of resources.\".format(rid))",
          "2058:             return []",
          "2060:         res_options = self.resource_values[rid]",
          "2061:         if len(res_options) > 1 and config:",
          "2062:             if config in res_options:",
          "2063:                 return [(config, res_options[config])]",
          "2064:             elif fallback and config == ARSCResTableConfig.default_config():",
          "2065:                 logger.warning(\"No default resource config could be found for the given rid '0x{:08x}', using fallback!\".format(rid))",
          "2066:                 return [list(self.resource_values[rid].items())[0]]",
          "2067:             else:",
          "2068:                 return []",
          "2069:         else:",
          "2070:             return list(res_options.items())",
          "2072:     def get_string(self, package_name, name, locale='\\x00\\x00'):",
          "2073:         self._analyse()",
          "2075:         try:",
          "2076:             for i in self.values[package_name][locale][\"string\"]:",
          "2077:                 if i[0] == name:",
          "2078:                     return i",
          "2079:         except KeyError:",
          "2080:             return None",
          "2082:     def get_res_id_by_key(self, package_name, resource_type, key):",
          "2083:         try:",
          "2084:             return self.resource_keys[package_name][resource_type][key]",
          "2085:         except KeyError:",
          "2086:             return None",
          "2088:     def get_items(self, package_name):",
          "2089:         self._analyse()",
          "2090:         return self.packages[package_name]",
          "2092:     def get_type_configs(self, package_name, type_name=None):",
          "2093:         if package_name is None:",
          "2094:             package_name = self.get_packages_names()[0]",
          "2095:         result = collections.defaultdict(list)",
          "2097:         for res_type, configs in list(self.resource_configs[package_name].items()):",
          "2098:             if res_type.get_package_name() == package_name and (",
          "2099:                             type_name is None or res_type.get_type() == type_name):",
          "2100:                 result[res_type.get_type()].extend(configs)",
          "2102:         return result",
          "2104:     @staticmethod",
          "2105:     def parse_id(name):",
          "2106:         \"\"\"",
          "2107:         Resolves an id from a binary XML file in the form \"@[package:]DEADBEEF\"",
          "2108:         and returns a tuple of package name and resource id.",
          "2109:         If no package name was given, i.e. the ID has the form \"@DEADBEEF\",",
          "2110:         the package name is set to None.",
          "2112:         Raises a ValueError if the id is malformed.",
          "2114:         :param name: the string of the resource, as in the binary XML file",
          "2115:         :return: a tuple of (resource_id, package_name).",
          "2116:         \"\"\"",
          "2118:         if not name.startswith('@'):",
          "2119:             raise ValueError(\"Not a valid resource ID, must start with @: '{}'\".format(name))",
          "2121:         # remove @",
          "2122:         name = name[1:]",
          "2124:         package = None",
          "2125:         if ':' in name:",
          "2126:             package, res_id = name.split(':', 1)",
          "2127:         else:",
          "2128:             res_id = name",
          "2130:         if len(res_id) != 8:",
          "2131:             raise ValueError(\"Numerical ID is not 8 characters long: '{}'\".format(res_id))",
          "2133:         try:",
          "2134:             return int(res_id, 16), package",
          "2135:         except ValueError:",
          "2136:             raise ValueError(\"ID is not a hex ID: '{}'\".format(res_id))",
          "2138:     def get_resource_xml_name(self, r_id, package=None):",
          "2139:         \"\"\"",
          "2140:         Returns the XML name for a resource, including the package name if package is None.",
          "2141:         A full name might look like `@com.example:string/foobar`",
          "2142:         Otherwise the name is only looked up in the specified package and is returned without",
          "2143:         the package name.",
          "2144:         The same example from about without the package name will read as `@string/foobar`.",
          "2146:         If the ID could not be found, `None` is returned.",
          "2148:         A description of the XML name can be found here:",
          "2149:         https://developer.android.com/guide/topics/resources/providing-resources#ResourcesFromXml",
          "2151:         :param r_id: numerical ID if the resource",
          "2152:         :param package: package name",
          "2153:         :return: XML name identifier",
          "2154:         \"\"\"",
          "2155:         if package:",
          "2156:             resource, name, i_id = self.get_id(package, r_id)",
          "2157:             if not i_id:",
          "2158:                 return None",
          "2159:             return \"@{}/{}\".format(resource, name)",
          "2160:         else:",
          "2161:             for p in self.get_packages_names():",
          "2162:                 r, n, i_id = self.get_id(p, r_id)",
          "2163:                 if i_id:",
          "2164:                     # found the resource in this package",
          "2165:                     package = p",
          "2166:                     resource = r",
          "2167:                     name = n",
          "2168:                     break",
          "2169:             if not package:",
          "2170:                 return None",
          "2171:             else:",
          "2172:                 return \"@{}:{}/{}\".format(package, resource, name)",
          "2175: class PackageContext:",
          "2176:     def __init__(self, current_package, stringpool_main, mTableStrings, mKeyStrings):",
          "2177:         \"\"\"",
          "2178:         :param ARSCResTablePackage current_package:",
          "2179:         :param StringBlock stringpool_main:",
          "2180:         :param StringBlock mTableStrings:",
          "2181:         :param StringBlock mKeyStrings:",
          "2182:         \"\"\"",
          "2183:         self.stringpool_main = stringpool_main",
          "2184:         self.mTableStrings = mTableStrings",
          "2185:         self.mKeyStrings = mKeyStrings",
          "2186:         self.current_package = current_package",
          "2188:     def get_mResId(self):",
          "2189:         return self.current_package.mResId",
          "2191:     def set_mResId(self, mResId):",
          "2192:         self.current_package.mResId = mResId",
          "2194:     def get_package_name(self):",
          "2195:         return self.current_package.get_name()",
          "2197:     def __repr__(self):",
          "2198:         return \"<PackageContext {}, {}, {}, {}>\".format(self.current_package,",
          "2199:                                                         self.stringpool_main,",
          "2200:                                                         self.mTableStrings,",
          "2201:                                                         self.mKeyStrings)",
          "2204: class ARSCHeader:",
          "2205:     \"\"\"",
          "2206:     Object which contains a Resource Chunk.",
          "2207:     This is an implementation of the `ResChunk_header`.",
          "2209:     It will throw an :class:`ResParserError` if the header could not be read successfully.",
          "2211:     It is not checked if the data is outside the buffer size nor if the current",
          "2212:     chunk fits into the parent chunk (if any)!",
          "2214:     The parameter `expected_type` can be used to immediately check the header for the type or raise a :class:`ResParserError`.",
          "2215:     This is useful if you know what type of chunk must follow.",
          "2217:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#196",
          "2218:     :raises: ResParserError",
          "2219:     \"\"\"",
          "2221:     # This is the minimal size such a header must have. There might be other header data too!",
          "2222:     SIZE = 2 + 2 + 4",
          "2224:     def __init__(self, buff, expected_type=None, possible_types=None):",
          "2225:         \"\"\"",
          "2226:         :param androguard.core.bytecode.BuffHandle buff: the buffer set to the position where the header starts.",
          "2227:         :param int expected_type: the type of the header which is expected.",
          "2228:         \"\"\"",
          "2229:         self.start = buff.tell()",
          "2230:         # Make sure we do not read over the buffer:",
          "2231:         if buff.raw.getbuffer().nbytes < self.start + self.SIZE:",
          "2232:             raise ResParserError(\"Can not read over the buffer size! Offset={}\".format(self.start))",
          "2234:         # Checking for dummy data between elements",
          "2235:         if possible_types:",
          "2236:             while True:",
          "2237:                 cur_pos = buff.tell()",
          "2238:                 self._type, self._header_size, self._size = unpack('<HHL', buff.read(self.SIZE))",
          "2240:                 # cases where packers set the EndNamespace with zero size: check we are the end and add the prefix + uri",
          "2241:                 if self._size < self.SIZE and (buff.raw.getbuffer().nbytes == cur_pos + self._header_size + 4 + 4):",
          "2242:                     self._size = 24",
          "2244:                 if cur_pos == 0 or (",
          "2245:                         self._type in possible_types and self._header_size >= self.SIZE and self._size > self.SIZE):",
          "2246:                     break",
          "2247:                 buff.seek(cur_pos)",
          "2248:                 buff.read(1)",
          "2249:                 logger.warning(\"Appears that dummy data are found between elements!\")",
          "2250:         else:",
          "2251:             self._type, self._header_size, self._size = unpack('<HHL', buff.read(self.SIZE))",
          "2253:         if expected_type and self._type != expected_type:",
          "2254:             raise ResParserError(\"Header type is not equal the expected type: Got 0x{:04x}, wanted 0x{:04x}\".format(self._type, expected_type))",
          "2256:         # Assert that the read data will fit into the chunk.",
          "2257:         # The total size must be equal or larger than the header size",
          "2258:         if self._header_size < self.SIZE:",
          "2259:             raise ResParserError(",
          "2260:                 \"declared header size is smaller than required size of {}! Offset={}\".format(self.SIZE, self.start))",
          "2261:         if self._size < self.SIZE:",
          "2262:             raise ResParserError(",
          "2263:                 \"declared chunk size is smaller than required size of {}! Offset={}\".format(self.SIZE, self.start))",
          "2264:         if self._size < self._header_size:",
          "2265:             raise ResParserError(",
          "2266:                 \"declared chunk size ({}) is smaller than header size ({})! Offset={}\".format(self._size,",
          "2267:                                                                                               self._header_size,",
          "2268:                                                                                               self.start))",
          "2270:     @property",
          "2271:     def type(self):",
          "2272:         \"\"\"",
          "2273:         Type identifier for this chunk",
          "2274:         \"\"\"",
          "2275:         return self._type",
          "2277:     @property",
          "2278:     def header_size(self):",
          "2279:         \"\"\"",
          "2280:         Size of the chunk header (in bytes).  Adding this value to",
          "2281:         the address of the chunk allows you to find its associated data",
          "2282:         (if any).",
          "2283:         \"\"\"",
          "2284:         return self._header_size",
          "2286:     @property",
          "2287:     def size(self):",
          "2288:         \"\"\"",
          "2289:         Total size of this chunk (in bytes).  This is the chunkSize plus",
          "2290:         the size of any data associated with the chunk.  Adding this value",
          "2291:         to the chunk allows you to completely skip its contents (including",
          "2292:         any child chunks).  If this value is the same as chunkSize, there is",
          "2293:         no data associated with the chunk.",
          "2294:         \"\"\"",
          "2295:         return self._size",
          "2297:     @property",
          "2298:     def end(self):",
          "2299:         \"\"\"",
          "2300:         Get the absolute offset inside the file, where the chunk ends.",
          "2301:         This is equal to `ARSCHeader.start + ARSCHeader.size`.",
          "2302:         \"\"\"",
          "2303:         return self.start + self.size",
          "2305:     def __repr__(self):",
          "2306:         return \"<ARSCHeader idx='0x{:08x}' type='{}' header_size='{}' size='{}'>\".format(self.start,",
          "2307:                                                                                          self.type,",
          "2308:                                                                                          self.header_size,",
          "2309:                                                                                          self.size)",
          "2312: class ARSCResTablePackage:",
          "2313:     \"\"\"",
          "2314:     A `ResTable_package`",
          "2316:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#861",
          "2317:     \"\"\"",
          "2318:     def __init__(self, buff, header):",
          "2319:         self.header = header",
          "2320:         self.start = buff.tell()",
          "2321:         self.id = unpack('<I', buff.read(4))[0]",
          "2322:         self.name = buff.read(256)",
          "2323:         self.typeStrings = unpack('<I', buff.read(4))[0]",
          "2324:         self.lastPublicType = unpack('<I', buff.read(4))[0]",
          "2325:         self.keyStrings = unpack('<I', buff.read(4))[0]",
          "2326:         self.lastPublicKey = unpack('<I', buff.read(4))[0]",
          "2327:         self.mResId = self.id << 24",
          "2329:     def get_name(self):",
          "2330:         name = self.name.decode(\"utf-16\", 'replace')",
          "2331:         name = name[:name.find(\"\\x00\")]",
          "2332:         return name",
          "2335: class ARSCResTypeSpec:",
          "2336:     \"\"\"",
          "2337:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1327",
          "2338:     \"\"\"",
          "2339:     def __init__(self, buff, parent=None):",
          "2340:         self.start = buff.tell()",
          "2341:         self.parent = parent",
          "2342:         self.id = unpack('<B', buff.read(1))[0]",
          "2343:         self.res0 = unpack('<B', buff.read(1))[0]",
          "2344:         self.res1 = unpack('<H', buff.read(2))[0]",
          "2345:         # TODO: https://github.com/androguard/androguard/issues/1014 | Properly account for the cases where res0/1 are not zero",
          "2346:         try:",
          "2347:             if self.res0 != 0:",
          "2348:                 logger.warning(\"res0 must be zero!\")",
          "2349:             if self.res1 != 0:",
          "2350:                 logger.warning(\"res1 must be zero!\")",
          "2351:             self.entryCount = unpack('<I', buff.read(4))[0]",
          "2353:             self.typespec_entries = []",
          "2354:             for i in range(0, self.entryCount):",
          "2355:                 self.typespec_entries.append(unpack('<I', buff.read(4))[0])",
          "2356:         except Exception as e:",
          "2357:             logger.error(e)",
          "2359: class ARSCResType:",
          "2360:     \"\"\"",
          "2361:     This is a `ResTable_type` without it's `ResChunk_header`.",
          "2362:     It contains a `ResTable_config`",
          "2364:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1364",
          "2365:     \"\"\"",
          "2366:     def __init__(self, buff, parent=None):",
          "2367:         self.start = buff.tell()",
          "2368:         self.parent = parent",
          "2370:         self.id = unpack('<B', buff.read(1))[0]",
          "2371:         # TODO there is now FLAG_SPARSE: http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1401",
          "2372:         self.flags, = unpack('<B', buff.read(1))",
          "2373:         self.reserved = unpack('<H', buff.read(2))[0]",
          "2374:         if self.reserved != 0:",
          "2375:             raise ResParserError(\"reserved must be zero!\")",
          "2376:         self.entryCount = unpack('<I', buff.read(4))[0]",
          "2377:         self.entriesStart = unpack('<I', buff.read(4))[0]",
          "2379:         self.mResId = (0xff000000 & self.parent.get_mResId()) | self.id << 16",
          "2380:         self.parent.set_mResId(self.mResId)",
          "2382:         self.config = ARSCResTableConfig(buff)",
          "2384:         logger.debug(\"Parsed {}\".format(self))",
          "2386:     def get_type(self):",
          "2387:         return self.parent.mTableStrings.getString(self.id - 1)",
          "2389:     def get_package_name(self):",
          "2390:         return self.parent.get_package_name()",
          "2392:     def __repr__(self):",
          "2393:         return \"<ARSCResType(start=0x%x, id=0x%x, flags=0x%x, entryCount=%d, entriesStart=0x%x, mResId=0x%x, %s)>\" % (",
          "2394:             self.start,",
          "2395:             self.id,",
          "2396:             self.flags,",
          "2397:             self.entryCount,",
          "2398:             self.entriesStart,",
          "2399:             self.mResId,",
          "2400:             \"table:\" + self.parent.mTableStrings.getString(self.id - 1)",
          "2401:         )",
          "2404: class ARSCResTableConfig:",
          "2405:     \"\"\"",
          "2406:     ARSCResTableConfig contains the configuration for specific resource selection.",
          "2407:     This is used on the device to determine which resources should be loaded",
          "2408:     based on different properties of the device like locale or displaysize.",
          "2410:     See the definition of `ResTable_config` in",
          "2411:     http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#911",
          "2412:     \"\"\"",
          "2413:     @classmethod",
          "2414:     def default_config(cls):",
          "2415:         if not hasattr(cls, 'DEFAULT'):",
          "2416:             cls.DEFAULT = ARSCResTableConfig(None)",
          "2417:         return cls.DEFAULT",
          "2419:     def __init__(self, buff=None, **kwargs):",
          "2420:         if buff is not None:",
          "2421:             self.start = buff.tell()",
          "2423:             # uint32_t",
          "2424:             self.size = unpack('<I', buff.read(4))[0]",
          "2426:             # union: uint16_t mcc, uint16_t mnc",
          "2427:             # 0 means any",
          "2428:             self.imsi = unpack('<I', buff.read(4))[0]",
          "2430:             # uint32_t as chars \\0\\0 means any",
          "2431:             # either two 7bit ASCII representing the ISO-639-1 language code",
          "2432:             # or a single 16bit LE value representing ISO-639-2 3 letter code",
          "2433:             self.locale = unpack('<I', buff.read(4))[0]",
          "2435:             # struct of:",
          "2436:             # uint8_t orientation",
          "2437:             # uint8_t touchscreen",
          "2438:             # uint16_t density",
          "2439:             self.screenType = unpack('<I', buff.read(4))[0]",
          "2441:             # struct of",
          "2442:             # uint8_t keyboard",
          "2443:             # uint8_t navigation",
          "2444:             # uint8_t inputFlags",
          "2445:             # uint8_t inputPad0",
          "2446:             self.input = unpack('<I', buff.read(4))[0]",
          "2448:             # struct of",
          "2449:             # uint16_t screenWidth",
          "2450:             # uint16_t screenHeight",
          "2451:             self.screenSize = unpack('<I', buff.read(4))[0]",
          "2453:             # struct of",
          "2454:             # uint16_t sdkVersion",
          "2455:             # uint16_t minorVersion  which should be always 0, as the meaning is not defined",
          "2456:             self.version = unpack('<I', buff.read(4))[0]",
          "2458:             # The next three fields seems to be optional",
          "2459:             if self.size >= 32:",
          "2460:                 # struct of",
          "2461:                 # uint8_t screenLayout",
          "2462:                 # uint8_t uiMode",
          "2463:                 # uint16_t smallestScreenWidthDp",
          "2464:                 self.screenConfig, = unpack('<I', buff.read(4))",
          "2465:             else:",
          "2466:                 logger.debug(\"This file does not have a screenConfig! size={}\".format(self.size))",
          "2467:                 self.screenConfig = 0",
          "2469:             if self.size >= 36:",
          "2470:                 # struct of",
          "2471:                 # uint16_t screenWidthDp",
          "2472:                 # uint16_t screenHeightDp",
          "2473:                 self.screenSizeDp, = unpack('<I', buff.read(4))",
          "2474:             else:",
          "2475:                 logger.debug(\"This file does not have a screenSizeDp! size={}\".format(self.size))",
          "2476:                 self.screenSizeDp = 0",
          "2478:             if self.size >= 40:",
          "2479:                 self.localeScript = buff.read(4)",
          "2481:             if self.size >= 44:",
          "2482:                 self.localeVariant = buff.read(8)",
          "2484:             if self.size >= 52:",
          "2485:                 # struct of",
          "2486:                 # uint8_t screenLayout2",
          "2487:                 # uint8_t colorMode",
          "2488:                 # uint16_t screenConfigPad2",
          "2489:                 self.screenConfig2, = unpack(\"<I\", buff.read(4))",
          "2490:             else:",
          "2491:                 logger.debug(\"This file does not have a screenConfig2! size={}\".format(self.size))",
          "2492:                 self.screenConfig2 = 0",
          "2494:             self.exceedingSize = self.size - (buff.tell() - self.start)",
          "2495:             if self.exceedingSize > 0:",
          "2496:                 logger.debug(\"Skipping padding bytes!\")",
          "2497:                 self.padding = buff.read(self.exceedingSize)",
          "2499:         else:",
          "2500:             self.start = 0",
          "2501:             self.size = 0",
          "2502:             self.imsi = \\",
          "2503:                 ((kwargs.pop('mcc', 0) & 0xffff) << 0) + \\",
          "2504:                 ((kwargs.pop('mnc', 0) & 0xffff) << 16)",
          "2506:             self.locale = 0",
          "2507:             for char_ix, char in kwargs.pop('locale', \"\")[0:4]:",
          "2508:                 self.locale += (ord(char) << (char_ix * 8))",
          "2510:             self.screenType = \\",
          "2511:                 ((kwargs.pop('orientation', 0) & 0xff) << 0) + \\",
          "2512:                 ((kwargs.pop('touchscreen', 0) & 0xff) << 8) + \\",
          "2513:                 ((kwargs.pop('density', 0) & 0xffff) << 16)",
          "2515:             self.input = \\",
          "2516:                 ((kwargs.pop('keyboard', 0) & 0xff) << 0) + \\",
          "2517:                 ((kwargs.pop('navigation', 0) & 0xff) << 8) + \\",
          "2518:                 ((kwargs.pop('inputFlags', 0) & 0xff) << 16) + \\",
          "2519:                 ((kwargs.pop('inputPad0', 0) & 0xff) << 24)",
          "2521:             self.screenSize = \\",
          "2522:                 ((kwargs.pop('screenWidth', 0) & 0xffff) << 0) + \\",
          "2523:                 ((kwargs.pop('screenHeight', 0) & 0xffff) << 16)",
          "2525:             self.version = \\",
          "2526:                 ((kwargs.pop('sdkVersion', 0) & 0xffff) << 0) + \\",
          "2527:                 ((kwargs.pop('minorVersion', 0) & 0xffff) << 16)",
          "2529:             self.screenConfig = \\",
          "2530:                 ((kwargs.pop('screenLayout', 0) & 0xff) << 0) + \\",
          "2531:                 ((kwargs.pop('uiMode', 0) & 0xff) << 8) + \\",
          "2532:                 ((kwargs.pop('smallestScreenWidthDp', 0) & 0xffff) << 16)",
          "2534:             self.screenSizeDp = \\",
          "2535:                 ((kwargs.pop('screenWidthDp', 0) & 0xffff) << 0) + \\",
          "2536:                 ((kwargs.pop('screenHeightDp', 0) & 0xffff) << 16)",
          "2538:             # TODO add this some day...",
          "2539:             self.screenConfig2 = 0",
          "2541:             self.exceedingSize = 0",
          "2543:     def _unpack_language_or_region(self, char_in, char_base):",
          "2544:         char_out = \"\"",
          "2545:         if char_in[0] & 0x80:",
          "2546:             first = char_in[1] & 0x1f",
          "2547:             second = ((char_in[1] & 0xe0) >> 5) + ((char_in[0] & 0x03) << 3)",
          "2548:             third = (char_in[0] & 0x7c) >> 2",
          "2549:             char_out += chr(first + char_base)",
          "2550:             char_out += chr(second + char_base)",
          "2551:             char_out += chr(third + char_base)",
          "2552:         else:",
          "2553:             if char_in[0]:",
          "2554:                 char_out += chr(char_in[0])",
          "2555:             if char_in[1]:",
          "2556:                 char_out += chr(char_in[1])",
          "2557:         return char_out",
          "2559:     def get_language_and_region(self):",
          "2560:         \"\"\"",
          "2561:         Returns the combined language+region string or \\x00\\x00 for the default locale",
          "2562:         :return:",
          "2563:         \"\"\"",
          "2564:         if self.locale != 0:",
          "2565:             _language = self._unpack_language_or_region([self.locale & 0xff, (self.locale & 0xff00) >> 8, ], ord('a'))",
          "2566:             _region = self._unpack_language_or_region([(self.locale & 0xff0000) >> 16, (self.locale & 0xff000000) >> 24, ], ord('0'))",
          "2567:             return (_language + \"-r\" + _region) if _region else _language",
          "2568:         return \"\\x00\\x00\"",
          "2570:     def get_config_name_friendly(self):",
          "2571:         \"\"\"",
          "2572:         Here for legacy reasons.",
          "2574:         use :meth:`~get_qualifier` instead.",
          "2575:         \"\"\"",
          "2576:         return self.get_qualifier()",
          "2578:     def get_qualifier(self):",
          "2579:         \"\"\"",
          "2580:         Return resource name qualifier for the current configuration.",
          "2581:         for example",
          "2585:         All possible qualifiers are listed in table 2 of https://developer.android.com/guide/topics/resources/providing-resources",
          "2587:         You can find how android process this at http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/libs/androidfw/ResourceTypes.cpp#3243",
          "2589:         :return: str",
          "2590:         \"\"\"",
          "2591:         res = []",
          "2593:         mcc = self.imsi & 0xFFFF",
          "2594:         mnc = (self.imsi & 0xFFFF0000) >> 16",
          "2595:         if mcc != 0:",
          "2596:             res.append(\"mcc%d\" % mcc)",
          "2597:         if mnc != 0:",
          "2598:             res.append(\"mnc%d\" % mnc)",
          "2600:         if self.locale != 0:",
          "2601:             res.append(self.get_language_and_region())",
          "2603:         screenLayout = self.screenConfig & 0xff",
          "2604:         if (screenLayout & MASK_LAYOUTDIR) != 0:",
          "2605:             if screenLayout & MASK_LAYOUTDIR == LAYOUTDIR_LTR:",
          "2606:                 res.append(\"ldltr\")",
          "2607:             elif screenLayout & MASK_LAYOUTDIR == LAYOUTDIR_RTL:",
          "2608:                 res.append(\"ldrtl\")",
          "2609:             else:",
          "2610:                 res.append(\"layoutDir_%d\" % (screenLayout & MASK_LAYOUTDIR))",
          "2612:         smallestScreenWidthDp = (self.screenConfig & 0xFFFF0000) >> 16",
          "2613:         if smallestScreenWidthDp != 0:",
          "2614:             res.append(\"sw%ddp\" % smallestScreenWidthDp)",
          "2616:         screenWidthDp = self.screenSizeDp & 0xFFFF",
          "2617:         screenHeightDp = (self.screenSizeDp & 0xFFFF0000) >> 16",
          "2618:         if screenWidthDp != 0:",
          "2619:             res.append(\"w%ddp\" % screenWidthDp)",
          "2620:         if screenHeightDp != 0:",
          "2621:             res.append(\"h%ddp\" % screenHeightDp)",
          "2623:         if (screenLayout & MASK_SCREENSIZE) != SCREENSIZE_ANY:",
          "2624:             if screenLayout & MASK_SCREENSIZE == SCREENSIZE_SMALL:",
          "2625:                 res.append(\"small\")",
          "2626:             elif screenLayout & MASK_SCREENSIZE == SCREENSIZE_NORMAL:",
          "2627:                 res.append(\"normal\")",
          "2628:             elif screenLayout & MASK_SCREENSIZE == SCREENSIZE_LARGE:",
          "2629:                 res.append(\"large\")",
          "2630:             elif screenLayout & MASK_SCREENSIZE == SCREENSIZE_XLARGE:",
          "2631:                 res.append(\"xlarge\")",
          "2632:             else:",
          "2633:                 res.append(\"screenLayoutSize_%d\" % (screenLayout & MASK_SCREENSIZE))",
          "2634:         if (screenLayout & MASK_SCREENLONG) != 0:",
          "2635:             if screenLayout & MASK_SCREENLONG == SCREENLONG_NO:",
          "2636:                 res.append(\"notlong\")",
          "2637:             elif screenLayout & MASK_SCREENLONG == SCREENLONG_YES:",
          "2638:                 res.append(\"long\")",
          "2639:             else:",
          "2640:                 res.append(\"screenLayoutLong_%d\" % (screenLayout & MASK_SCREENLONG))",
          "2642:         screenLayout2 = self.screenConfig2 & 0xff",
          "2643:         if (screenLayout2 & MASK_SCREENROUND) != 0:",
          "2644:             if screenLayout2 & MASK_SCREENROUND == SCREENROUND_NO:",
          "2645:                 res.append(\"notround\")",
          "2646:             elif screenLayout2 & MASK_SCREENROUND == SCREENROUND_YES:",
          "2647:                 res.append(\"round\")",
          "2648:             else:",
          "2649:                 res.append(\"screenRound_%d\" % (screenLayout2 & MASK_SCREENROUND))",
          "2651:         colorMode = (self.screenConfig2 & 0xff00) >> 8",
          "2652:         if (colorMode & MASK_WIDE_COLOR_GAMUT) != 0:",
          "2653:             if colorMode & MASK_WIDE_COLOR_GAMUT == WIDE_COLOR_GAMUT_NO:",
          "2654:                 res.append(\"nowidecg\")",
          "2655:             elif colorMode & MASK_WIDE_COLOR_GAMUT == WIDE_COLOR_GAMUT_YES:",
          "2656:                 res.append(\"widecg\")",
          "2657:             else:",
          "2658:                 res.append(\"wideColorGamut_%d\" % (colorMode & MASK_WIDE_COLOR_GAMUT))",
          "2660:         if (colorMode & MASK_HDR) != 0:",
          "2661:             if colorMode & MASK_HDR == HDR_NO:",
          "2662:                 res.append(\"lowdr\")",
          "2663:             elif colorMode & MASK_HDR == HDR_YES:",
          "2664:                 res.append(\"highdr\")",
          "2665:             else:",
          "2666:                 res.append(\"hdr_%d\" % (colorMode & MASK_HDR))",
          "2668:         orientation = self.screenType & 0xff",
          "2669:         if orientation != ORIENTATION_ANY:",
          "2670:             if orientation == ORIENTATION_PORT:",
          "2671:                 res.append(\"port\")",
          "2672:             elif orientation == ORIENTATION_LAND:",
          "2673:                 res.append(\"land\")",
          "2674:             elif orientation == ORIENTATION_SQUARE:",
          "2675:                 res.append(\"square\")",
          "2676:             else:",
          "2677:                 res.append(\"orientation_%d\" % orientation)",
          "2679:         uiMode = (self.screenConfig & 0xff00) >> 8",
          "2680:         if (uiMode & MASK_UI_MODE_TYPE) != UI_MODE_TYPE_ANY:",
          "2681:             ui_mode = uiMode & MASK_UI_MODE_TYPE",
          "2682:             if ui_mode == UI_MODE_TYPE_DESK:",
          "2683:                 res.append(\"desk\")",
          "2684:             elif ui_mode == UI_MODE_TYPE_CAR:",
          "2685:                 res.append(\"car\")",
          "2686:             elif ui_mode == UI_MODE_TYPE_TELEVISION:",
          "2687:                 res.append(\"television\")",
          "2688:             elif ui_mode == UI_MODE_TYPE_APPLIANCE:",
          "2689:                 res.append(\"appliance\")",
          "2690:             elif ui_mode == UI_MODE_TYPE_WATCH:",
          "2691:                 res.append(\"watch\")",
          "2692:             elif ui_mode == UI_MODE_TYPE_VR_HEADSET:",
          "2693:                 res.append(\"vrheadset\")",
          "2694:             else:",
          "2695:                 res.append(\"uiModeType_%d\" % ui_mode)",
          "2697:         if (uiMode & MASK_UI_MODE_NIGHT) != 0:",
          "2698:             if uiMode & MASK_UI_MODE_NIGHT == UI_MODE_NIGHT_NO:",
          "2699:                 res.append(\"notnight\")",
          "2700:             elif uiMode & MASK_UI_MODE_NIGHT == UI_MODE_NIGHT_YES:",
          "2701:                 res.append(\"night\")",
          "2702:             else:",
          "2703:                 res.append(\"uiModeNight_%d\" % (uiMode & MASK_UI_MODE_NIGHT))",
          "2705:         density = (self.screenType & 0xffff0000) >> 16",
          "2706:         if density != DENSITY_DEFAULT:",
          "2707:             if density == DENSITY_LOW:",
          "2708:                 res.append(\"ldpi\")",
          "2709:             elif density == DENSITY_MEDIUM:",
          "2710:                 res.append(\"mdpi\")",
          "2711:             elif density == DENSITY_TV:",
          "2712:                 res.append(\"tvdpi\")",
          "2713:             elif density == DENSITY_HIGH:",
          "2714:                 res.append(\"hdpi\")",
          "2715:             elif density == DENSITY_XHIGH:",
          "2716:                 res.append(\"xhdpi\")",
          "2717:             elif density == DENSITY_XXHIGH:",
          "2718:                 res.append(\"xxhdpi\")",
          "2719:             elif density == DENSITY_XXXHIGH:",
          "2720:                 res.append(\"xxxhdpi\")",
          "2721:             elif density == DENSITY_NONE:",
          "2722:                 res.append(\"nodpi\")",
          "2723:             elif density == DENSITY_ANY:",
          "2724:                 res.append(\"anydpi\")",
          "2725:             else:",
          "2726:                 res.append(\"%ddpi\" % (density))",
          "2728:         touchscreen = (self.screenType & 0xff00) >> 8",
          "2729:         if touchscreen != TOUCHSCREEN_ANY:",
          "2730:             if touchscreen == TOUCHSCREEN_NOTOUCH:",
          "2731:                 res.append(\"notouch\")",
          "2732:             elif touchscreen == TOUCHSCREEN_FINGER:",
          "2733:                 res.append(\"finger\")",
          "2734:             elif touchscreen == TOUCHSCREEN_STYLUS:",
          "2735:                 res.append(\"stylus\")",
          "2736:             else:",
          "2737:                 res.append(\"touchscreen_%d\" % touchscreen)",
          "2739:         keyboard = self.input & 0xff",
          "2740:         navigation = (self.input & 0xff00) >> 8",
          "2741:         inputFlags = (self.input & 0xff0000) >> 16",
          "2743:         if inputFlags & MASK_KEYSHIDDEN != 0:",
          "2744:             input_flags = inputFlags & MASK_KEYSHIDDEN",
          "2745:             if input_flags == KEYSHIDDEN_NO:",
          "2746:                 res.append(\"keysexposed\")",
          "2747:             elif input_flags == KEYSHIDDEN_YES:",
          "2748:                 res.append(\"keyshidden\")",
          "2749:             elif input_flags == KEYSHIDDEN_SOFT:",
          "2750:                 res.append(\"keyssoft\")",
          "2752:         if keyboard != KEYBOARD_ANY:",
          "2753:             if keyboard == KEYBOARD_NOKEYS:",
          "2754:                 res.append(\"nokeys\")",
          "2755:             elif keyboard == KEYBOARD_QWERTY:",
          "2756:                 res.append(\"qwerty\")",
          "2757:             elif keyboard == KEYBOARD_12KEY:",
          "2758:                 res.append(\"12key\")",
          "2759:             else:",
          "2760:                 res.append(\"keyboard_%d\" % keyboard)",
          "2762:         if inputFlags & MASK_NAVHIDDEN != 0:",
          "2763:             input_flags = inputFlags & MASK_NAVHIDDEN",
          "2764:             if input_flags == NAVHIDDEN_NO:",
          "2765:                 res.append(\"navexposed\")",
          "2766:             elif input_flags == NAVHIDDEN_YES:",
          "2767:                 res.append(\"navhidden\")",
          "2768:             else:",
          "2769:                 res.append(\"inputFlagsNavHidden_%d\" % input_flags)",
          "2771:         if navigation != NAVIGATION_ANY:",
          "2772:             if navigation == NAVIGATION_NONAV:",
          "2773:                 res.append(\"nonav\")",
          "2774:             elif navigation == NAVIGATION_DPAD:",
          "2775:                 res.append(\"dpad\")",
          "2776:             elif navigation == NAVIGATION_TRACKBALL:",
          "2777:                 res.append(\"trackball\")",
          "2778:             elif navigation == NAVIGATION_WHEEL:",
          "2779:                 res.append(\"wheel\")",
          "2780:             else:",
          "2781:                 res.append(\"navigation_%d\" % navigation)",
          "2783:         screenSize = self.screenSize",
          "2784:         if screenSize != 0:",
          "2785:             screenWidth = self.screenSize & 0xffff",
          "2786:             screenHeight = (self.screenSize & 0xffff0000) >> 16",
          "2787:             res.append(\"%dx%d\" % (screenWidth, screenHeight))",
          "2789:         version = self.version",
          "2790:         if version != 0:",
          "2791:             sdkVersion = self.version & 0xffff",
          "2792:             minorVersion = (self.version & 0xffff0000) >> 16",
          "2793:             res.append(\"v%d\" % sdkVersion)",
          "2794:             if minorVersion != 0:",
          "2795:                 res.append(\".%d\" % minorVersion)",
          "2797:         return \"-\".join(res)",
          "2799:     def get_language(self):",
          "2800:         x = self.locale & 0x0000ffff",
          "2801:         return chr(x & 0x00ff) + chr((x & 0xff00) >> 8)",
          "2803:     def get_country(self):",
          "2804:         x = (self.locale & 0xffff0000) >> 16",
          "2805:         return chr(x & 0x00ff) + chr((x & 0xff00) >> 8)",
          "2807:     def get_density(self):",
          "2808:         x = ((self.screenType >> 16) & 0xffff)",
          "2809:         return x",
          "2811:     def is_default(self):",
          "2812:         \"\"\"",
          "2813:         Test if this is a default resource, which matches all",
          "2815:         This is indicated that all fields are zero.",
          "2816:         :return: True if default, False otherwise",
          "2817:         \"\"\"",
          "2818:         return all(map(lambda x: x == 0, self._get_tuple()))",
          "2820:     def _get_tuple(self):",
          "2821:         return (",
          "2822:             self.imsi,",
          "2823:             self.locale,",
          "2824:             self.screenType,",
          "2825:             self.input,",
          "2826:             self.screenSize,",
          "2827:             self.version,",
          "2828:             self.screenConfig,",
          "2829:             self.screenSizeDp,",
          "2830:             self.screenConfig2,",
          "2831:         )",
          "2833:     def __hash__(self):",
          "2834:         return hash(self._get_tuple())",
          "2836:     def __eq__(self, other):",
          "2837:         return self._get_tuple() == other._get_tuple()",
          "2839:     def __repr__(self):",
          "2840:         return \"<ARSCResTableConfig '{}'={}>\".format(self.get_qualifier(), repr(self._get_tuple()))",
          "2843: class ARSCResTableEntry:",
          "2844:     \"\"\"",
          "2845:     A `ResTable_entry`.",
          "2847:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1458",
          "2848:     \"\"\"",
          "2849:     # If set, this is a complex entry, holding a set of name/value",
          "2850:     # mappings.  It is followed by an array of ResTable_map structures.",
          "2851:     FLAG_COMPLEX = 1",
          "2853:     # If set, this resource has been declared public, so libraries",
          "2854:     # are allowed to reference it.",
          "2855:     FLAG_PUBLIC = 2",
          "2857:     # If set, this is a weak resource and may be overriden by strong",
          "2858:     # resources of the same name/type. This is only useful during",
          "2859:     # linking with other resource tables.",
          "2860:     FLAG_WEAK = 4",
          "2862:     def __init__(self, buff, mResId, parent=None):",
          "2863:         self.start = buff.tell()",
          "2864:         self.mResId = mResId",
          "2865:         self.parent = parent",
          "2867:         self.size = unpack('<H', buff.read(2))[0]",
          "2868:         self.flags = unpack('<H', buff.read(2))[0]",
          "2869:         # This is a ResStringPool_ref",
          "2870:         self.index = unpack('<I', buff.read(4))[0]",
          "2872:         if self.is_complex():",
          "2873:             self.item = ARSCComplex(buff, parent)",
          "2874:         else:",
          "2875:             # If FLAG_COMPLEX is not set, a Res_value structure will follow",
          "2876:             self.key = ARSCResStringPoolRef(buff, self.parent)",
          "2878:         if self.is_weak():",
          "2879:             logger.debug(\"Parsed {}\".format(self))",
          "2881:     def get_index(self):",
          "2882:         return self.index",
          "2884:     def get_value(self):",
          "2885:         return self.parent.mKeyStrings.getString(self.index)",
          "2887:     def get_key_data(self):",
          "2888:         return self.key.get_data_value()",
          "2890:     def is_public(self):",
          "2891:         return (self.flags & self.FLAG_PUBLIC) != 0",
          "2893:     def is_complex(self):",
          "2894:         return (self.flags & self.FLAG_COMPLEX) != 0",
          "2896:     def is_weak(self):",
          "2897:         return (self.flags & self.FLAG_WEAK) != 0",
          "2899:     def __repr__(self):",
          "2900:         return \"<ARSCResTableEntry idx='0x{:08x}' mResId='0x{:08x}' size='{}' flags='0x{:02x}' index='0x{:x}' holding={}>\".format(",
          "2901:             self.start,",
          "2902:             self.mResId,",
          "2903:             self.size,",
          "2904:             self.flags,",
          "2905:             self.index,",
          "2906:             self.item if self.is_complex() else self.key)",
          "2909: class ARSCComplex:",
          "2910:     \"\"\"",
          "2911:     This is actually a `ResTable_map_entry`",
          "2913:     It contains a set of {name: value} mappings, which are of type `ResTable_map`.",
          "2914:     A `ResTable_map` contains two items: `ResTable_ref` and `Res_value`.",
          "2916:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1485 for `ResTable_map_entry`",
          "2917:     and http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1498 for `ResTable_map`",
          "2918:     \"\"\"",
          "2919:     def __init__(self, buff, parent=None):",
          "2920:         self.start = buff.tell()",
          "2921:         self.parent = parent",
          "2923:         self.id_parent = unpack('<I', buff.read(4))[0]",
          "2924:         self.count = unpack('<I', buff.read(4))[0]",
          "2926:         self.items = []",
          "2927:         # Parse self.count number of `ResTable_map`",
          "2928:         # these are structs of ResTable_ref and Res_value",
          "2929:         # ResTable_ref is a uint32_t.",
          "2930:         for i in range(0, self.count):",
          "2931:             self.items.append((unpack('<I', buff.read(4))[0], ARSCResStringPoolRef(buff, self.parent)))",
          "2933:     def __repr__(self):",
          "2934:         return \"<ARSCComplex idx='0x{:08x}' parent='{}' count='{}'>\".format(self.start, self.id_parent, self.count)",
          "2937: class ARSCResStringPoolRef:",
          "2938:     \"\"\"",
          "2939:     This is actually a `Res_value`",
          "2940:     It holds information about the stored resource value",
          "2942:     See: http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#262",
          "2943:     \"\"\"",
          "2944:     def __init__(self, buff, parent=None):",
          "2945:         self.start = buff.tell()",
          "2946:         self.parent = parent",
          "2948:         self.size, = unpack(\"<H\", buff.read(2))",
          "2949:         self.res0, = unpack(\"<B\", buff.read(1))",
          "2950:         try:",
          "2951:             if self.res0 != 0:",
          "2952:                 logger.warning(\"res0 must be always zero!\")",
          "2953:             self.data_type = unpack('<B', buff.read(1))[0]",
          "2954:             # data is interpreted according to data_type",
          "2955:             self.data = unpack('<I', buff.read(4))[0]",
          "2956:         except Exception as e:",
          "2957:             logger.error(e)",
          "2959:     def get_data_value(self):",
          "2960:         return self.parent.stringpool_main.getString(self.data)",
          "2962:     def get_data(self):",
          "2963:         return self.data",
          "2965:     def get_data_type(self):",
          "2966:         return self.data_type",
          "2968:     def get_data_type_string(self):",
          "2969:         return TYPE_TABLE[self.data_type]",
          "2971:     def format_value(self):",
          "2972:         \"\"\"",
          "2973:         Return the formatted (interpreted) data according to `data_type`.",
          "2974:         \"\"\"",
          "2975:         return format_value(",
          "2976:             self.data_type,",
          "2977:             self.data,",
          "2978:             self.parent.stringpool_main.getString",
          "2979:         )",
          "2981:     def is_reference(self):",
          "2982:         \"\"\"",
          "2983:         Returns True if the Res_value is actually a reference to another resource",
          "2984:         \"\"\"",
          "2985:         return self.data_type == TYPE_REFERENCE",
          "2987:     def __repr__(self):",
          "2988:         return \"<ARSCResStringPoolRef idx='0x{:08x}' size='{}' type='{}' data='0x{:08x}'>\".format(",
          "2989:             self.start,",
          "2990:             self.size,",
          "2991:             TYPE_TABLE.get(self.data_type, \"0x%x\" % self.data_type),",
          "2992:             self.data)",
          "2995: def get_arsc_info(arscobj):",
          "2996:     \"\"\"",
          "2997:     Return a string containing all resources packages ordered by packagename, locale and type.",
          "2999:     :param arscobj: :class:`~ARSCParser`",
          "3000:     :return: a string",
          "3001:     \"\"\"",
          "3002:     buff = \"\"",
          "3003:     for package in arscobj.get_packages_names():",
          "3004:         buff += package + \":\\n\"",
          "3005:         for locale in arscobj.get_locales(package):",
          "3006:             buff += \"\\t\" + repr(locale) + \":\\n\"",
          "3007:             for ttype in arscobj.get_types(package, locale):",
          "3008:                 buff += \"\\t\\t\" + ttype + \":\\n\"",
          "3009:                 try:",
          "3010:                     tmp_buff = getattr(arscobj, \"get_\" + ttype + \"_resources\")(",
          "3011:                         package, locale).decode(\"utf-8\", 'replace').split(\"\\n\")",
          "3012:                     for i in tmp_buff:",
          "3013:                         buff += \"\\t\\t\\t\" + i + \"\\n\"",
          "3014:                 except AttributeError:",
          "3015:                     pass",
          "3016:     return buff",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py||mobsf/StaticAnalyzer/tools/androguard4/resources/public.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/resources/public.py -> mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: import os",
          "4: from xml.dom import minidom",
          "6: _public_res = None",
          "7: # copy the newest sdk/platforms/android-?/data/res/values/public.xml here",
          "8: if _public_res is None:",
          "9:     _public_res = {}",
          "10:     root = os.path.dirname(os.path.realpath(__file__))",
          "11:     xmlfile = os.path.join(root, \"public.xml\")",
          "12:     if os.path.isfile(xmlfile):",
          "13:         with open(xmlfile, \"r\") as fp:",
          "14:             _xml = minidom.parseString(fp.read())",
          "15:             for element in _xml.getElementsByTagName(\"public\"):",
          "16:                 _type = element.getAttribute('type')",
          "17:                 _name = element.getAttribute('name')",
          "18:                 _id = int(element.getAttribute('id'), 16)",
          "19:                 if _type not in _public_res:",
          "20:                     _public_res[_type] = {}",
          "21:                 _public_res[_type][_name] = _id",
          "22:     else:",
          "23:         raise Exception(\"need to copy the sdk/platforms/android-?/data/res/values/public.xml here\")",
          "25: SYSTEM_RESOURCES = {",
          "26:     \"attributes\": {",
          "27:         \"forward\": {k: v for k, v in _public_res['attr'].items()},",
          "28:         \"inverse\": {v: k for k, v in _public_res['attr'].items()}",
          "29:     },",
          "30:     \"styles\": {",
          "31:         \"forward\": {k: v for k, v in _public_res['style'].items()},",
          "32:         \"inverse\": {v: k for k, v in _public_res['style'].items()}",
          "33:     }",
          "34: }",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/types.py||mobsf/StaticAnalyzer/tools/androguard4/types.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/types.py -> mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: # Type definiton for (type, data) tuples representing a value",
          "4: # See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#262",
          "6: # The 'data' is either 0 or 1, specifying this resource is either",
          "7: # undefined or empty, respectively.",
          "8: TYPE_NULL = 0x00",
          "9: # The 'data' holds a ResTable_ref, a reference to another resource",
          "10: # table entry.",
          "11: TYPE_REFERENCE = 0x01",
          "12: # The 'data' holds an attribute resource identifier.",
          "13: TYPE_ATTRIBUTE = 0x02",
          "14: # The 'data' holds an index into the containing resource table's",
          "15: # global value string pool.",
          "16: TYPE_STRING = 0x03",
          "17: # The 'data' holds a single-precision floating point number.",
          "18: TYPE_FLOAT = 0x04",
          "19: # The 'data' holds a complex number encoding a dimension value",
          "20: # such as \"100in\".",
          "21: TYPE_DIMENSION = 0x05",
          "22: # The 'data' holds a complex number encoding a fraction of a",
          "23: # container.",
          "24: TYPE_FRACTION = 0x06",
          "25: # The 'data' holds a dynamic ResTable_ref, which needs to be",
          "26: # resolved before it can be used like a TYPE_REFERENCE.",
          "27: TYPE_DYNAMIC_REFERENCE = 0x07",
          "28: # The 'data' holds an attribute resource identifier, which needs to be resolved",
          "29: # before it can be used like a TYPE_ATTRIBUTE.",
          "30: TYPE_DYNAMIC_ATTRIBUTE = 0x08",
          "31: # Beginning of integer flavors...",
          "32: TYPE_FIRST_INT = 0x10",
          "33: # The 'data' is a raw integer value of the form n..n.",
          "34: TYPE_INT_DEC = 0x10",
          "35: # The 'data' is a raw integer value of the form 0xn..n.",
          "36: TYPE_INT_HEX = 0x11",
          "37: # The 'data' is either 0 or 1, for input \"false\" or \"true\" respectively.",
          "38: TYPE_INT_BOOLEAN = 0x12",
          "39: # Beginning of color integer flavors...",
          "40: TYPE_FIRST_COLOR_INT = 0x1c",
          "41: # The 'data' is a raw integer value of the form #aarrggbb.",
          "42: TYPE_INT_COLOR_ARGB8 = 0x1c",
          "43: # The 'data' is a raw integer value of the form #rrggbb.",
          "44: TYPE_INT_COLOR_RGB8 = 0x1d",
          "45: # The 'data' is a raw integer value of the form #argb.",
          "46: TYPE_INT_COLOR_ARGB4 = 0x1e",
          "47: # The 'data' is a raw integer value of the form #rgb.",
          "48: TYPE_INT_COLOR_RGB4 = 0x1f",
          "49: # ...end of integer flavors.",
          "50: TYPE_LAST_COLOR_INT = 0x1f",
          "51: # ...end of integer flavors.",
          "52: TYPE_LAST_INT = 0x1f",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/zipfile.py||mobsf/StaticAnalyzer/tools/androguard4/zipfile.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/zipfile.py -> mobsf/StaticAnalyzer/tools/androguard4/zipfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: \"\"\"This file is from apkinspector licensed under the Apache License 2.0.\"\"\"",
          "4: import io",
          "5: import zlib",
          "6: import struct",
          "7: from typing import Dict",
          "10: def extract_file_based_on_header_info(apk_file, local_header_info, central_directory_info):",
          "11:     \"\"\"",
          "12:     Extracts a single file from the apk_file based on the information provided from the offset and the header_info.",
          "13:     It takes into account that the compression method provided might not be STORED or DEFLATED! The returned",
          "14:     'indicator', shows what compression method was used. Besides the standard STORED/DEFLATE it may return",
          "15:     'DEFLATED_TAMPERED', which means that the compression method found was not DEFLATED(8) but it should have been,",
          "16:     and 'STORED_TAMPERED' which means that the compression method found was not STORED(0) but should have been.",
          "18:     :param apk_file: The APK file e.g. with open('test.apk', 'rb') as apk_file",
          "19:     :type apk_file: bytesIO",
          "20:     :param local_header_info: The local header dictionary info for that specific filename",
          "21:     :type local_header_info: dict",
          "22:     :param central_directory_info: The central directory entry for that specific filename",
          "23:     :type central_directory_info: dict",
          "24:     :return: Returns the actual extracted data for that file along with an indication of whether a static analysis evasion technique was used or not.",
          "25:     :rtype: set(bytes, str)",
          "26:     \"\"\"",
          "27:     filename_length = local_header_info[\"file_name_length\"]",
          "28:     if local_header_info[\"compressed_size\"] == 0 or local_header_info[\"uncompressed_size\"] == 0:",
          "29:         compressed_size = central_directory_info[\"compressed_size\"]",
          "30:         uncompressed_size = central_directory_info[\"uncompressed_size\"]",
          "31:     else:",
          "32:         compressed_size = local_header_info[\"compressed_size\"]",
          "33:         uncompressed_size = local_header_info[\"uncompressed_size\"]",
          "35:     extra_field_length = local_header_info[\"extra_field_length\"]",
          "36:     compression_method = local_header_info[\"compression_method\"]",
          "37:     # Skip the offset + local header to reach the compressed data",
          "38:     local_header_size = 30  # Size of the local header in bytes",
          "39:     offset = central_directory_info[\"relative_offset_of_local_file_header\"]",
          "40:     apk_file.seek(offset + local_header_size + filename_length + extra_field_length)",
          "41:     if compression_method == 0:  # Stored (no compression)",
          "42:         uncompressed_data = apk_file.read(uncompressed_size)",
          "43:         extracted_data = uncompressed_data",
          "44:         indicator = 'STORED'",
          "45:     elif compression_method == 8:",
          "46:         compressed_data = apk_file.read(compressed_size)",
          "47:         # -15 for windows size due to raw stream with no header or trailer",
          "48:         extracted_data = zlib.decompress(compressed_data, -15)",
          "49:         indicator = 'DEFLATED'",
          "50:     else:",
          "51:         try:",
          "52:             cur_loc = apk_file.tell()",
          "53:             compressed_data = apk_file.read(compressed_size)",
          "54:             extracted_data = zlib.decompress(compressed_data, -15)",
          "55:             indicator = 'DEFLATED_TAMPERED'",
          "56:         except:",
          "57:             apk_file.seek(cur_loc)",
          "58:             compressed_data = apk_file.read(uncompressed_size)",
          "59:             extracted_data = compressed_data",
          "60:             indicator = 'STORED_TAMPERED'",
          "61:     return extracted_data, indicator",
          "64: class EndOfCentralDirectoryRecord:",
          "65:     \"\"\"",
          "66:     A class to provide details about the end of central directory record.",
          "67:     \"\"\"",
          "68:     def __init__(self, signature, number_of_this_disk, disk_where_central_directory_starts,",
          "69:                  number_of_central_directory_records_on_this_disk,",
          "70:                  total_number_of_central_directory_records, size_of_central_directory,",
          "71:                  offset_of_start_of_central_directory, comment_length, comment):",
          "72:         self.signature = signature",
          "73:         self.number_of_this_disk = number_of_this_disk",
          "74:         self.disk_where_central_directory_starts = disk_where_central_directory_starts",
          "75:         self.number_of_central_directory_records_on_this_disk = number_of_central_directory_records_on_this_disk",
          "76:         self.total_number_of_central_directory_records = total_number_of_central_directory_records",
          "77:         self.size_of_central_directory = size_of_central_directory",
          "78:         self.offset_of_start_of_central_directory = offset_of_start_of_central_directory",
          "79:         self.comment_length = comment_length",
          "80:         self.comment = comment",
          "82:     @classmethod",
          "83:     def parse(cls, apk_file):",
          "84:         \"\"\"",
          "85:         Method to locate the \"end of central directory record signature\" as the first step of the correct process of",
          "86:         reading a ZIP archive. Should be noted that certain APKs do not follow the zip specification and declare multiple",
          "87:         \"end of central directory records\". For this reason the search for the corresponding signature of the eocd starts",
          "88:         from the end of the apk.",
          "90:         :param apk_file: The already read/loaded data of the APK file e.g. with open('test.apk', 'rb') as apk_file",
          "91:         :type apk_file: bytesIO",
          "92:         :return: Returns the end of central directory record with all the information available if the corresponding signature is found. If not, then it returns None.",
          "93:         :rtype: EndOfCentralDirectoryRecord or None",
          "94:         \"\"\"",
          "95:         chunk_size = 1024",
          "96:         offset = 0",
          "97:         signature_offset = -1",
          "98:         file_size = apk_file.seek(0, 2)",
          "99:         while offset < file_size:",
          "100:             position = file_size - offset - chunk_size",
          "101:             if position < 0:",
          "102:                 position = 0",
          "103:             apk_file.seek(position)",
          "104:             chunk = apk_file.read(chunk_size)",
          "105:             if not chunk:",
          "106:                 break",
          "107:             signature_offset = chunk.rfind(b'\\x50\\x4b\\x05\\x06')  # end of Central Directory File Header signature",
          "108:             if signature_offset != -1:",
          "109:                 eo_central_directory_offset = position + signature_offset",
          "110:                 break  # Found End of central directory record (EOCD) signature",
          "111:             offset += chunk_size",
          "112:         if signature_offset == -1:",
          "113:             raise ValueError(\"End of central directory record (EOCD) signature not found\")",
          "114:         apk_file.seek(eo_central_directory_offset)",
          "116:         signature = apk_file.read(4)",
          "117:         number_of_this_disk = struct.unpack('<H', apk_file.read(2))[0]",
          "118:         disk_where_central_directory_starts = struct.unpack('<H', apk_file.read(2))[0]",
          "119:         number_of_central_directory_records_on_this_disk = struct.unpack('<H', apk_file.read(2))[0]",
          "120:         total_number_of_central_directory_records = struct.unpack('<H', apk_file.read(2))[0]",
          "121:         size_of_central_directory = struct.unpack('<I', apk_file.read(4))[0]",
          "122:         offset_of_start_of_central_directory = struct.unpack('<I', apk_file.read(4))[0]",
          "123:         comment_length = struct.unpack('<H', apk_file.read(2))[0]",
          "124:         comment = struct.unpack(f'<{comment_length}s', apk_file.read(comment_length))[0].decode('utf-8', 'ignore')",
          "125:         return cls(",
          "126:             signature,",
          "127:             number_of_this_disk,",
          "128:             disk_where_central_directory_starts,",
          "129:             number_of_central_directory_records_on_this_disk,",
          "130:             total_number_of_central_directory_records,",
          "131:             size_of_central_directory,",
          "132:             offset_of_start_of_central_directory,",
          "133:             comment_length,",
          "134:             comment",
          "135:         )",
          "137:     def to_dict(self):",
          "138:         \"\"\"",
          "139:         Represent the class as a dictionary.",
          "141:         :return: returns the dictionary",
          "142:         :rtype: dict",
          "143:         \"\"\"",
          "144:         return {",
          "145:             \"signature\": self.signature,",
          "146:             \"number_of_this_disk\": self.number_of_this_disk,",
          "147:             \"disk_where_central_directory_starts\": self.disk_where_central_directory_starts,",
          "148:             \"number_of_central_directory_records_on_this_disk\": self.number_of_central_directory_records_on_this_disk,",
          "149:             \"total_number_of_central_directory_records\": self.total_number_of_central_directory_records,",
          "150:             \"size_of_central_directory\": self.size_of_central_directory,",
          "151:             \"offset_of_start_of_central_directory\": self.offset_of_start_of_central_directory,",
          "152:             \"comment_length\": self.comment_length,",
          "153:             \"comment\": self.comment",
          "154:         }",
          "156:     @classmethod",
          "157:     def from_dict(cls, entry_dict):",
          "158:         \"\"\"",
          "159:         Convert a dictionary back to an instance of the class.",
          "161:         :param entry_dict: the dictionary",
          "162:         :type entry_dict: dict",
          "163:         :return: the instance of the class",
          "164:         :rtype: EndOfCentralDirectoryRecord",
          "165:         \"\"\"",
          "166:         return cls(**entry_dict)",
          "169: class CentralDirectoryEntry:",
          "170:     \"\"\"",
          "171:     A class representing each entry in the central directory.",
          "172:     \"\"\"",
          "173:     def __init__(self, version_made_by, version_needed_to_extract, general_purpose_bit_flag,",
          "174:                  compression_method, file_last_modification_time, file_last_modification_date,",
          "175:                  crc32_of_uncompressed_data, compressed_size, uncompressed_size, file_name_length,",
          "176:                  extra_field_length, file_comment_length, disk_number_where_file_starts,",
          "177:                  internal_file_attributes, external_file_attributes, relative_offset_of_local_file_header,",
          "178:                  filename, extra_field, file_comment, offset_in_central_directory):",
          "179:         self.version_made_by = version_made_by",
          "180:         self.version_needed_to_extract = version_needed_to_extract",
          "181:         self.general_purpose_bit_flag = general_purpose_bit_flag",
          "182:         self.compression_method = compression_method",
          "183:         self.file_last_modification_time = file_last_modification_time",
          "184:         self.file_last_modification_date = file_last_modification_date",
          "185:         self.crc32_of_uncompressed_data = crc32_of_uncompressed_data",
          "186:         self.compressed_size = compressed_size",
          "187:         self.uncompressed_size = uncompressed_size",
          "188:         self.file_name_length = file_name_length",
          "189:         self.extra_field_length = extra_field_length",
          "190:         self.file_comment_length = file_comment_length",
          "191:         self.disk_number_where_file_starts = disk_number_where_file_starts",
          "192:         self.internal_file_attributes = internal_file_attributes",
          "193:         self.external_file_attributes = external_file_attributes",
          "194:         self.relative_offset_of_local_file_header = relative_offset_of_local_file_header",
          "195:         self.filename = filename",
          "196:         self.extra_field = extra_field",
          "197:         self.file_comment = file_comment",
          "198:         self.offset_in_central_directory = offset_in_central_directory",
          "200:     def to_dict(self):",
          "201:         \"\"\"",
          "202:         Represent the class as a dictionary.",
          "204:         :return: returns the dictionary",
          "205:         :rtype: dict",
          "206:         \"\"\"",
          "207:         return {",
          "208:             \"version_made_by\": self.version_made_by,",
          "209:             \"version_needed_to_extract\": self.version_needed_to_extract,",
          "210:             \"general_purpose_bit_flag\": self.general_purpose_bit_flag,",
          "211:             \"compression_method\": self.compression_method,",
          "212:             \"file_last_modification_time\": self.file_last_modification_time,",
          "213:             \"file_last_modification_date\": self.file_last_modification_date,",
          "214:             \"crc32_of_uncompressed_data\": self.crc32_of_uncompressed_data,",
          "215:             \"compressed_size\": self.compressed_size,",
          "216:             \"uncompressed_size\": self.uncompressed_size,",
          "217:             \"file_name_length\": self.file_name_length,",
          "218:             \"extra_field_length\": self.extra_field_length,",
          "219:             \"file_comment_length\": self.file_comment_length,",
          "220:             \"disk_number_where_file_starts\": self.disk_number_where_file_starts,",
          "221:             \"internal_file_attributes\": self.internal_file_attributes,",
          "222:             \"external_file_attributes\": self.external_file_attributes,",
          "223:             \"relative_offset_of_local_file_header\": self.relative_offset_of_local_file_header,",
          "224:             \"filename\": self.filename,",
          "225:             \"extra_field\": self.extra_field,",
          "226:             \"file_comment\": self.file_comment,",
          "227:             \"offset_in_central_directory\": self.offset_in_central_directory",
          "228:         }",
          "230:     @classmethod",
          "231:     def from_dict(cls, entry_dict):",
          "232:         \"\"\"",
          "233:         Convert a dictionary back to an instance of the class.",
          "235:         :param entry_dict: the dictionary",
          "236:         :type entry_dict: dict",
          "237:         :return: the instance of the class",
          "238:         :rtype: CentralDirectoryEntry",
          "239:         \"\"\"",
          "240:         return cls(**entry_dict)",
          "243: class CentralDirectory:",
          "244:     \"\"\"",
          "245:     The CentralDirectory containing all the CentralDirectoryEntry entries discovered.",
          "246:     The entries are listed as a dictionary where the filename is the key.",
          "247:     \"\"\"",
          "248:     def __init__(self, entries):",
          "249:         self.entries = entries",
          "251:     @classmethod",
          "252:     def parse(cls, apk_file, eocd: EndOfCentralDirectoryRecord = None):",
          "253:         \"\"\"",
          "254:         Method that is used to parse the central directory header according to the specification",
          "255:         https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT",
          "256:         based on the offset provided by the end of central directory record: eocd.offset_of_start_of_central_directory.",
          "258:         :param apk_file: The already read/loaded data of the APK file e.g. with open('test.apk', 'rb') as apk_file",
          "259:         :type apk_file: bytesIO",
          "260:         :param eocd: End of central directory record",
          "261:         :type eocd: EndOfCentralDirectoryRecord",
          "262:         :return: Returns a dictionary with all the entries discovered. The filename of each entry is used as the key. Besides the fields defined by the specification, each entry has an additional field named 'Offset in the central directory header', which includes the offset of the entry in the central directory itself.",
          "263:         :rtype: CentralDirectory",
          "264:         \"\"\"",
          "265:         if not eocd:",
          "266:             eocd = EndOfCentralDirectoryRecord.parse(apk_file)",
          "267:         apk_file.seek(eocd.offset_of_start_of_central_directory)",
          "268:         if apk_file.tell() != eocd.offset_of_start_of_central_directory:",
          "269:             raise ValueError(f\"Failed to find the offset for the central directory within the file!\")",
          "271:         central_directory_entries = {}",
          "272:         while True:",
          "273:             c_offset = apk_file.tell()",
          "274:             signature = apk_file.read(4)",
          "275:             if signature != b'\\x50\\x4b\\x01\\x02':",
          "276:                 break  # Reached the end of the central directory",
          "277:             version_made_by = struct.unpack('<H', apk_file.read(2))[0]",
          "278:             version_needed_to_extract = struct.unpack('<H', apk_file.read(2))[0]",
          "279:             general_purpose_bit_flag = struct.unpack('<H', apk_file.read(2))[0]",
          "280:             compression_method = struct.unpack('<H', apk_file.read(2))[0]",
          "281:             file_last_modification_time = struct.unpack('<H', apk_file.read(2))[0]",
          "282:             file_last_modification_date = struct.unpack('<H', apk_file.read(2))[0]",
          "283:             crc32_of_uncompressed_data = struct.unpack('<I', apk_file.read(4))[0]",
          "284:             compressed_size = struct.unpack('<I', apk_file.read(4))[0]",
          "285:             uncompressed_size = struct.unpack('<I', apk_file.read(4))[0]",
          "286:             file_name_length = struct.unpack('<H', apk_file.read(2))[0]",
          "287:             extra_field_length = struct.unpack('<H', apk_file.read(2))[0]",
          "288:             file_comment_length = struct.unpack('<H', apk_file.read(2))[0]",
          "289:             disk_number_where_file_starts = struct.unpack('<H', apk_file.read(2))[0]",
          "290:             internal_file_attributes = struct.unpack('<H', apk_file.read(2))[0]",
          "291:             external_file_attributes = struct.unpack('<I', apk_file.read(4))[0]",
          "292:             relative_offset_of_local_file_header = struct.unpack('<I', apk_file.read(4))[0]",
          "293:             filename = struct.unpack(f'<{file_name_length}s', apk_file.read(file_name_length))[0].decode('utf-8')",
          "294:             extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(extra_field_length))[0].decode('utf-8',",
          "295:                                                                                                                 'ignore')",
          "296:             file_comment = struct.unpack(f'<{file_comment_length}s', apk_file.read(file_comment_length))[0].decode(",
          "297:                 'utf-8', 'ignore')",
          "298:             offset_in_central_directory = c_offset",
          "300:             central_directory_entry = CentralDirectoryEntry(",
          "301:                 version_made_by, version_needed_to_extract, general_purpose_bit_flag, compression_method,",
          "302:                 file_last_modification_time, file_last_modification_date, crc32_of_uncompressed_data,",
          "303:                 compressed_size, uncompressed_size, file_name_length, extra_field_length, file_comment_length,",
          "304:                 disk_number_where_file_starts, internal_file_attributes, external_file_attributes,",
          "305:                 relative_offset_of_local_file_header, filename, extra_field, file_comment,",
          "306:                 offset_in_central_directory",
          "307:             )",
          "308:             central_directory_entries[central_directory_entry.filename] = central_directory_entry",
          "310:         return cls(central_directory_entries)",
          "312:     def to_dict(self):",
          "313:         \"\"\"",
          "314:         Represent the class as a dictionary.",
          "316:         :return: returns the dictionary",
          "317:         :rtype: dict",
          "318:         \"\"\"",
          "319:         return {filename: entry.to_dict() for filename, entry in self.entries.items()}",
          "321:     @classmethod",
          "322:     def from_dict(cls, entry_dict):",
          "323:         \"\"\"",
          "324:         Convert a dictionary back to an instance of the class.",
          "326:         :param entry_dict: the dictionary",
          "327:         :type entry_dict: dict",
          "328:         :return: the instance of the class",
          "329:         :rtype: CentralDirectory",
          "330:         \"\"\"",
          "331:         entries = {}",
          "332:         for filename, entry_data in entry_dict.items():",
          "333:             entry_instance = CentralDirectoryEntry.from_dict(entry_data)",
          "334:             entries[filename] = entry_instance",
          "335:         return cls(entries=entries)",
          "338: class LocalHeaderRecord:",
          "339:     \"\"\"",
          "340:     The local header for each entry discovered.",
          "341:     \"\"\"",
          "342:     def __init__(self, version_needed_to_extract, general_purpose_bit_flag,",
          "343:                  compression_method, file_last_modification_time, file_last_modification_date,",
          "344:                  crc32_of_uncompressed_data, compressed_size, uncompressed_size, file_name_length,",
          "345:                  extra_field_length, filename, extra_field):",
          "347:         self.version_needed_to_extract = version_needed_to_extract",
          "348:         self.general_purpose_bit_flag = general_purpose_bit_flag",
          "349:         self.compression_method = compression_method",
          "350:         self.file_last_modification_time = file_last_modification_time",
          "351:         self.file_last_modification_date = file_last_modification_date",
          "352:         self.crc32_of_uncompressed_data = crc32_of_uncompressed_data",
          "353:         self.compressed_size = compressed_size",
          "354:         self.uncompressed_size = uncompressed_size",
          "355:         self.file_name_length = file_name_length",
          "356:         self.extra_field_length = extra_field_length",
          "357:         self.filename = filename",
          "358:         self.extra_field = extra_field",
          "360:     @classmethod",
          "361:     def parse(cls, apk_file, entry_of_interest: CentralDirectoryEntry):",
          "362:         \"\"\"",
          "363:         Method that attempts to read the local file header according to the specification https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT.",
          "365:         :param apk_file: The already read/loaded data of the APK file e.g. with open('test.apk', 'rb') as apk_file",
          "366:         :type apk_file: bytesIO",
          "367:         :param entry_of_interest: The central directory header of the specific entry of interest",
          "368:         :type entry_of_interest: CentralDirectoryEntry",
          "369:         :return: Returns a dictionary with the local header information or None if it failed to find the header.",
          "370:         :rtype: LocalHeaderRecord or None",
          "371:         \"\"\"",
          "372:         apk_file.seek(entry_of_interest.relative_offset_of_local_file_header)",
          "373:         header_signature = apk_file.read(4)",
          "375:         if not header_signature == b'\\x50\\x4b\\x03\\x04':",
          "376:             print(f\"Does not seem to be the start of a local header!\")",
          "377:             return None",
          "378:         else:",
          "379:             version_needed_to_extract = struct.unpack('<H', apk_file.read(2))[0]",
          "380:             general_purpose_bit_flag = struct.unpack('<H', apk_file.read(2))[0]",
          "381:             compression_method = struct.unpack('<H', apk_file.read(2))[0]",
          "382:             file_last_modification_time = struct.unpack('<H', apk_file.read(2))[0]",
          "383:             file_last_modification_date = struct.unpack('<H', apk_file.read(2))[0]",
          "384:             crc32_of_uncompressed_data = struct.unpack('<I', apk_file.read(4))[0]",
          "385:             compressed_size = struct.unpack('<I', apk_file.read(4))[0]",
          "386:             uncompressed_size = struct.unpack('<I', apk_file.read(4))[0]",
          "387:             file_name_length = struct.unpack('<H', apk_file.read(2))[0]",
          "388:             extra_field_length = struct.unpack('<H', apk_file.read(2))[0]",
          "389:             filename = struct.unpack(f'<{file_name_length}s', apk_file.read(file_name_length))[0].decode('utf-8')",
          "390:             extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(extra_field_length))[0].decode('utf-8',",
          "391:                                                                                                                 'ignore')",
          "392:         return cls(",
          "393:             version_needed_to_extract, general_purpose_bit_flag, compression_method,",
          "394:             file_last_modification_time, file_last_modification_date, crc32_of_uncompressed_data,",
          "395:             compressed_size, uncompressed_size, file_name_length, extra_field_length,",
          "396:             filename, extra_field)",
          "398:     def to_dict(self):",
          "399:         \"\"\"",
          "400:         Represent the class as a dictionary.",
          "402:         :return: returns the dictionary",
          "403:         :rtype: dict",
          "404:         \"\"\"",
          "405:         return {",
          "406:             \"version_needed_to_extract\": self.version_needed_to_extract,",
          "407:             \"general_purpose_bit_flag\": self.general_purpose_bit_flag,",
          "408:             \"compression_method\": self.compression_method,",
          "409:             \"file_last_modification_time\": self.file_last_modification_time,",
          "410:             \"file_last_modification_date\": self.file_last_modification_date,",
          "411:             \"crc32_of_uncompressed_data\": self.crc32_of_uncompressed_data,",
          "412:             \"compressed_size\": self.compressed_size,",
          "413:             \"uncompressed_size\": self.uncompressed_size,",
          "414:             \"file_name_length\": self.file_name_length,",
          "415:             \"extra_field_length\": self.extra_field_length,",
          "416:             \"filename\": self.filename,",
          "417:             \"extra_field\": self.extra_field",
          "418:         }",
          "420:     @classmethod",
          "421:     def from_dict(cls, entry_dict):",
          "422:         \"\"\"",
          "423:         Convert a dictionary back to an instance of the class.",
          "425:         :param entry_dict: the dictionary",
          "426:         :type entry_dict: dict",
          "427:         :return: the instance of the class",
          "428:         :rtype: LocalHeaderRecord",
          "429:         \"\"\"",
          "430:         return cls(**entry_dict)",
          "433: class ZipEntry:",
          "434:     \"\"\"",
          "435:     Is the actual APK represented as a composition of the previous classes, which are: the EndOfCentralDirectoryRecord, the CentralDirectory and a dictionary of values of LocalHeaderRecord.",
          "436:     \"\"\"",
          "437:     def __init__(self, zip_bytes, eocd: EndOfCentralDirectoryRecord, central_directory: CentralDirectory,",
          "438:                  local_headers: Dict[str, LocalHeaderRecord]):",
          "439:         self.zip = zip_bytes",
          "440:         self.eocd = eocd",
          "441:         self.central_directory = central_directory",
          "442:         self.local_headers = local_headers",
          "444:     @classmethod",
          "445:     def parse(cls, inc_apk, raw: bool = True):",
          "446:         \"\"\"",
          "447:         Method to start processing an APK. The raw (bytes) APK may be passed or the path to it.",
          "449:         :param inc_apk: the incoming apk, either path or bytes",
          "450:         :type inc_apk: str or bytesIO",
          "451:         :param raw: boolean flag to specify whether it is the raw apk in bytes or not",
          "452:         :type raw: bool",
          "453:         :return: returns the instance of the class",
          "454:         :rtype: ZipEntry",
          "455:         \"\"\"",
          "456:         if raw:",
          "457:             apk_file = inc_apk",
          "458:         else:",
          "459:             with open(inc_apk, 'rb') as apk:",
          "460:                 apk_file = io.BytesIO(apk.read())",
          "461:         eocd = EndOfCentralDirectoryRecord.parse(apk_file)",
          "462:         central_directory = CentralDirectory.parse(apk_file, eocd)",
          "463:         local_headers = {}",
          "464:         for entry in central_directory.entries:",
          "465:             local_header_entry = LocalHeaderRecord.parse(apk_file, central_directory.entries[entry])",
          "466:             local_headers[local_header_entry.filename] = local_header_entry",
          "467:         return cls(apk_file, eocd, central_directory, local_headers)",
          "469:     @classmethod",
          "470:     def parse_single(cls, apk_file, filename, eocd: EndOfCentralDirectoryRecord = None,",
          "471:                      central_directory: CentralDirectory = None):",
          "472:         \"\"\"",
          "473:         Similar to parse, but instead of parsing the entire APK, it only targets the specified file.",
          "475:         :param apk_file: The apk file expected raw",
          "476:         :type apk_file: io.TextIOWrapper",
          "477:         :param filename: the filename of the file to be parsed",
          "478:         :type filename: str",
          "479:         :param eocd: Optionally, the instance of the end of central directory from the APK",
          "480:         :type eocd: EndOfCentralDirectoryRecord(, optional)",
          "481:         :param central_directory: Optionally, the instance of the central directory record",
          "482:         :type central_directory: CentralDirectory(, optional)",
          "483:         :return: returns the instance of the class",
          "484:         :rtype: ZipEntry",
          "485:         \"\"\"",
          "486:         if not eocd or not central_directory:",
          "487:             eocd = EndOfCentralDirectoryRecord.parse(apk_file)",
          "488:             central_directory = CentralDirectory.parse(apk_file, eocd)",
          "489:         local_header = {filename: LocalHeaderRecord.parse(apk_file, central_directory.entries[filename])}",
          "490:         return cls(apk_file, eocd, central_directory, local_header)",
          "492:     def to_dict(self):",
          "493:         \"\"\"",
          "494:         Represent the class as a dictionary.",
          "496:         :return: returns the dictionary",
          "497:         :rtype: dict",
          "498:         \"\"\"",
          "499:         return {",
          "500:             \"end_of_central_directory\": self.eocd.to_dict(),",
          "501:             \"central_directory\": self.central_directory.to_dict(),",
          "502:             \"local_headers\": {filename: entry.to_dict() for filename, entry in self.local_headers.items()}",
          "503:         }",
          "505:     def get_central_directory_entry_dict(self, filename):",
          "506:         \"\"\"",
          "507:         Method to retrieve the central directory entry for a specific filename.",
          "509:         :param filename: the filename of the file to search for in the central directory",
          "510:         :type filename: str",
          "511:         :return: returns a dictionary of the central directory entry or None if the filename is not found",
          "512:         :rtype: dict",
          "513:         \"\"\"",
          "514:         if filename in self.central_directory.entries:",
          "515:             return self.central_directory.entries[filename].to_dict()",
          "516:         else:",
          "517:             raise KeyError(f\"Key: {filename} was not found within the central directory entries!\")",
          "519:     def get_local_header_dict(self, filename):",
          "520:         \"\"\"",
          "521:         Method to retrieve the local header of a specific filename.",
          "523:         :param filename: the filename of the entry to search for among the local headers",
          "524:         :type filename: str",
          "525:         :return: returns a ditionary of the local header entry or None if the filename is not found",
          "526:         :rtype: dict",
          "527:         \"\"\"",
          "528:         if filename in self.local_headers:",
          "529:             return self.local_headers[filename].to_dict()",
          "530:         else:",
          "531:             raise KeyError(f\"Key: {filename} was not found within the local headers list!\")",
          "533:     def read(self, name, save: bool = False):",
          "534:         \"\"\"",
          "535:         Method to utilize the extract module and extract a single entry from the APK based on the filename.",
          "537:         :param name: the name of the file to be read/extracted",
          "538:         :type name: str",
          "539:         :param save: boolean to define whether the extracted file should be saved as well or not",
          "540:         :type save: bool(, optional)",
          "541:         :return: returns the raw bytes of the filename that was extracted",
          "542:         :rtype: bytes",
          "543:         \"\"\"",
          "544:         extracted_file = extract_file_based_on_header_info(self.zip, self.get_local_header_dict(name),",
          "545:                                                            self.get_central_directory_entry_dict(name))[0]",
          "546:         # if save:",
          "547:         #     save_data_to_file(f\"EXTRACTED_{name}\", extracted_file)",
          "548:         return extracted_file",
          "550:     def infolist(self) -> Dict[str, CentralDirectoryEntry]:",
          "551:         \"\"\"",
          "552:         List of information about the entries in the central directory.",
          "554:         :return: returns a dictionary where the keys are the filenames and the values are each an instance of the CentralDirectoryEntry",
          "555:         :rtype: dict",
          "556:         \"\"\"",
          "557:         return self.central_directory.entries",
          "559:     def namelist(self):",
          "560:         \"\"\"",
          "561:         List of the filenames included in the central directory.",
          "563:         :return: returns the list of the filenames",
          "564:         :rtype: list",
          "565:         \"\"\"",
          "566:         return [vl for vl in self.central_directory.to_dict()]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/app.py||mobsf/StaticAnalyzer/views/android/app.py": [
          "File: mobsf/StaticAnalyzer/views/android/app.py -> mobsf/StaticAnalyzer/views/android/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import logging",
          "6: from pathlib import Path",
          "10:     apk,",
          "11: )",
          "15: logger = logging.getLogger(__name__)",
          "19: def parse_apk(app_path):",
          "",
          "[Removed Lines]",
          "8: from androguard.core import (",
          "9:     androconf,",
          "14: androconf.logger.remove()",
          "16: logging.getLogger('androguard').setLevel(logging.ERROR)",
          "",
          "[Added Lines]",
          "8: from mobsf.StaticAnalyzer.tools.androguard4 import (",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/android/cert_analysis.py -> mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     find_java_binary,",
          "25:     gen_sha256_hash,",
          "26: )",
          "28: logger = logging.getLogger(__name__)",
          "29: ANDROID_8_1_LEVEL = 27",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from mobsf.StaticAnalyzer.tools.androguard4.apk import (",
          "28:     get_certificate_name_string,",
          "29: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: }",
          "97: def get_hardcoded_cert_keystore(files):",
          "98:     \"\"\"Returns the hardcoded certificate keystore.\"\"\"",
          "99:     try:",
          "",
          "[Removed Lines]",
          "41: def get_certificate_name_string(name, short=False, delimiter=', '):",
          "42:     \"\"\"",
          "43:     Function from androguard.",
          "45:     licensed  under the Apache License, Version 2.0.",
          "46:     https://github.com/androguard/androguard/blob/master/androguard/util.py",
          "47:     Format the Name type of a X509 Certificate in a human readable form.",
          "49:     :param name: Name object to return the DN from",
          "50:     :param short: Use short form (default: False)",
          "51:     :param delimiter: Delimiter string or character between",
          "52:         two parts (default: ', ')",
          "54:     :type name: dict or :class:`asn1crypto.x509.Name`",
          "55:     :type short: boolean",
          "56:     :type delimiter: str",
          "58:     :rtype: str",
          "59:     \"\"\"",
          "60:     if isinstance(name, asn1crypto.x509.Name):",
          "61:         name = name.native",
          "63:     # For the shortform, we have a lookup table",
          "64:     # See RFC4514 for more details",
          "65:     _ = {",
          "66:         'business_category': ('businessCategory', 'businessCategory'),",
          "67:         'serial_number': ('serialNumber', 'serialNumber'),",
          "68:         'country_name': ('C', 'countryName'),",
          "69:         'postal_code': ('postalCode', 'postalCode'),",
          "70:         'state_or_province_name': ('ST', 'stateOrProvinceName'),",
          "71:         'locality_name': ('L', 'localityName'),",
          "72:         'street_address': ('street', 'streetAddress'),",
          "73:         'organization_name': ('O', 'organizationName'),",
          "74:         'organizational_unit_name': ('OU', 'organizationalUnitName'),",
          "75:         'title': ('title', 'title'),",
          "76:         'common_name': ('CN', 'commonName'),",
          "77:         'initials': ('initials', 'initials'),",
          "78:         'generation_qualifier': ('generationQualifier', 'generationQualifier'),",
          "79:         'surname': ('SN', 'surname'),",
          "80:         'given_name': ('GN', 'givenName'),",
          "81:         'name': ('name', 'name'),",
          "82:         'pseudonym': ('pseudonym', 'pseudonym'),",
          "83:         'dn_qualifier': ('dnQualifier', 'dnQualifier'),",
          "84:         'telephone_number': ('telephoneNumber', 'telephoneNumber'),",
          "85:         'email_address': ('E', 'emailAddress'),",
          "86:         'domain_component': ('DC', 'domainComponent'),",
          "87:         'name_distinguisher': ('nameDistinguisher', 'nameDistinguisher'),",
          "88:         'organization_identifier': (",
          "89:             'organizationIdentifier', 'organizationIdentifier'),",
          "90:     }",
          "91:     return delimiter.join(",
          "92:         ['{}={}'.format(",
          "93:             _.get(attr, (attr, attr))[0 if short else 1],",
          "94:             name[attr]) for attr in name])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/icon_analysis.py||mobsf/StaticAnalyzer/views/android/icon_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/android/icon_analysis.py -> mobsf/StaticAnalyzer/views/android/icon_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from lxml import etree",
          "19: from django.conf import settings",
          "21: from mobsf.MobSF.utils import (",
          "",
          "[Removed Lines]",
          "14: from androguard.core import (",
          "15:     androconf,",
          "16:     axml,",
          "17: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     is_file_exists,",
          "24:     is_path_traversal,",
          "25: )",
          "28: logger = logging.getLogger(__name__)",
          "32: # relative to res folder",
          "",
          "[Removed Lines]",
          "27: androconf.logger.remove()",
          "29: logging.getLogger('androguard').setLevel(logging.ERROR)",
          "",
          "[Added Lines]",
          "21: from mobsf.StaticAnalyzer.tools.androguard4 import (",
          "22:     axml,",
          "23: )",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: [package.extras]",
          "21: dev = [\"coverage[toml] (>=7.2.2)\"]",
          "42: [[package]]",
          "43: name = \"altgraph\"",
          "44: version = \"0.17.4\"",
          "",
          "[Removed Lines]",
          "23: [[package]]",
          "24: name = \"alembic\"",
          "25: version = \"1.13.1\"",
          "26: description = \"A database migration tool for SQLAlchemy.\"",
          "27: optional = false",
          "28: python-versions = \">=3.8\"",
          "29: files = [",
          "30:     {file = \"alembic-1.13.1-py3-none-any.whl\", hash = \"sha256:2edcc97bed0bd3272611ce3a98d98279e9c209e7186e43e75bbb1b2bdfdbcc43\"},",
          "31:     {file = \"alembic-1.13.1.tar.gz\", hash = \"sha256:4932c8558bf68f2ee92b9bbcb8218671c627064d5b08939437af6d77dc05e595\"},",
          "32: ]",
          "34: [package.dependencies]",
          "35: Mako = \"*\"",
          "36: SQLAlchemy = \">=1.3.0\"",
          "37: typing-extensions = \">=4\"",
          "39: [package.extras]",
          "40: tz = [\"backports.zoneinfo\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     {file = \"altgraph-0.17.4.tar.gz\", hash = \"sha256:1b5afbb98f6c4dcadb2e2ae6ab9fa994bbb8c1d75f4fa96d340f9437ae454406\"},",
          "51: ]",
          "83: [[package]]",
          "84: name = \"apkid\"",
          "85: version = \"2.1.5\"",
          "",
          "[Removed Lines]",
          "53: [[package]]",
          "54: name = \"androguard\"",
          "55: version = \"4.1.1\"",
          "56: description = \"Androguard is a full python tool to play with Android files.\"",
          "57: optional = false",
          "58: python-versions = \">=3.9,<4.0\"",
          "59: files = [",
          "60:     {file = \"androguard-4.1.1-py3-none-any.whl\", hash = \"sha256:6c457b5e0c007d2e32c5ac7041b625bf71f1ec39613ec4153837005a988f86a6\"},",
          "61:     {file = \"androguard-4.1.1.tar.gz\", hash = \"sha256:dffc138046f8c3aea061203afff490c77f2000345f685e1dad1780d478f3c5f6\"},",
          "62: ]",
          "64: [package.dependencies]",
          "65: apkInspector = \">=1.1.7\"",
          "66: asn1crypto = \">=0.24.0\"",
          "67: click = \">=7.0\"",
          "68: colorama = \">=0.4.1\"",
          "69: dataset = \"*\"",
          "70: frida = \"*\"",
          "71: ipython = \">=5.0.0\"",
          "72: loguru = \"*\"",
          "73: lxml = \">=4.3.0\"",
          "74: matplotlib = \"*\"",
          "75: mutf8 = \"*\"",
          "76: networkx = \"*\"",
          "77: pydot = \">=1.4.1\"",
          "78: pygments = \">=2.3.1\"",
          "79: PyQt5 = \"*\"",
          "80: PyQt5-Qt5 = \">=5.15,<5.15.11 || >5.15.11,<5.15.12 || >5.15.12,<6.0\"",
          "81: pyyaml = \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: dev = [\"mypy\", \"pypandoc\", \"twine\"]",
          "99: test = [\"delayed-assert\", \"factory-boy\", \"mock\", \"pytest\", \"pytest-cov\", \"pytest-factoryboy\", \"pytest-flask\", \"pytest-runner\", \"tox\"]",
          "112: [[package]]",
          "113: name = \"apksigcopier\"",
          "114: version = \"1.1.1\"",
          "",
          "[Removed Lines]",
          "101: [[package]]",
          "102: name = \"apkinspector\"",
          "103: version = \"1.2.2\"",
          "104: description = \"apkInspector is a tool designed to provide detailed insights into the zip structure of APK files, offering the capability to extract content and decode the AndroidManifest.xml file.\"",
          "105: optional = false",
          "106: python-versions = \">=3.5,<4.0\"",
          "107: files = [",
          "108:     {file = \"apkinspector-1.2.2-py3-none-any.whl\", hash = \"sha256:ad55200bd72eb1edeeb5fb114e3bb576ec825feef54fb8727173f1f02fa12bb7\"},",
          "109:     {file = \"apkinspector-1.2.2.tar.gz\", hash = \"sha256:ea7e56090e95eb791b593e9beedf4f1056eb269c4483558e13d5d5ef4b479c60\"},",
          "110: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:     {file = \"asn1crypto-1.5.1.tar.gz\", hash = \"sha256:13ae38502be632115abf8a24cbe5f4da52e3b5231990aff31123c805306ccb9c\"},",
          "180: ]",
          "200: [[package]]",
          "201: name = \"attrs\"",
          "202: version = \"21.4.0\"",
          "",
          "[Removed Lines]",
          "182: [[package]]",
          "183: name = \"asttokens\"",
          "184: version = \"2.4.1\"",
          "185: description = \"Annotate AST trees with source code positions\"",
          "186: optional = false",
          "187: python-versions = \"*\"",
          "188: files = [",
          "189:     {file = \"asttokens-2.4.1-py2.py3-none-any.whl\", hash = \"sha256:051ed49c3dcae8913ea7cd08e46a606dba30b79993209636c4875bc1d637bc24\"},",
          "190:     {file = \"asttokens-2.4.1.tar.gz\", hash = \"sha256:b03869718ba9a6eb027e134bfdf69f38a236d681c83c160d510768af11254ba0\"},",
          "191: ]",
          "193: [package.dependencies]",
          "194: six = \">=1.12.0\"",
          "196: [package.extras]",
          "197: astroid = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\"]",
          "198: test = [\"astroid (>=1,<2)\", \"astroid (>=2,<4)\", \"pytest\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214: tests = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"zope.interface\"]",
          "215: tests-no-zope = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\"]",
          "231: [[package]]",
          "232: name = \"bcrypt\"",
          "233: version = \"4.1.2\"",
          "",
          "[Removed Lines]",
          "217: [[package]]",
          "218: name = \"banal\"",
          "219: version = \"1.0.6\"",
          "220: description = \"Commons of banal micro-functions for Python.\"",
          "221: optional = false",
          "222: python-versions = \"*\"",
          "223: files = [",
          "224:     {file = \"banal-1.0.6-py2.py3-none-any.whl\", hash = \"sha256:877aacb16b17f8fa4fd29a7c44515c5a23dc1a7b26078bc41dd34829117d85e1\"},",
          "225:     {file = \"banal-1.0.6.tar.gz\", hash = \"sha256:2fe02c9305f53168441948f4a03dfbfa2eacc73db30db4a93309083cb0e250a5\"},",
          "226: ]",
          "228: [package.extras]",
          "229: dev = [\"mypy\", \"wheel\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "673: [package.extras]",
          "674: development = [\"black\", \"flake8\", \"mypy\", \"pytest\", \"types-colorama\"]",
          "739: [[package]]",
          "740: name = \"cryptography\"",
          "741: version = \"41.0.7\"",
          "",
          "[Removed Lines]",
          "676: [[package]]",
          "677: name = \"contourpy\"",
          "678: version = \"1.2.0\"",
          "679: description = \"Python library for calculating contours of 2D quadrilateral grids\"",
          "680: optional = false",
          "681: python-versions = \">=3.9\"",
          "682: files = [",
          "683:     {file = \"contourpy-1.2.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0274c1cb63625972c0c007ab14dd9ba9e199c36ae1a231ce45d725cbcbfd10a8\"},",
          "684:     {file = \"contourpy-1.2.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:ab459a1cbbf18e8698399c595a01f6dcc5c138220ca3ea9e7e6126232d102bb4\"},",
          "685:     {file = \"contourpy-1.2.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6fdd887f17c2f4572ce548461e4f96396681212d858cae7bd52ba3310bc6f00f\"},",
          "686:     {file = \"contourpy-1.2.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5d16edfc3fc09968e09ddffada434b3bf989bf4911535e04eada58469873e28e\"},",
          "687:     {file = \"contourpy-1.2.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1c203f617abc0dde5792beb586f827021069fb6d403d7f4d5c2b543d87edceb9\"},",
          "688:     {file = \"contourpy-1.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b69303ceb2e4d4f146bf82fda78891ef7bcd80c41bf16bfca3d0d7eb545448aa\"},",
          "689:     {file = \"contourpy-1.2.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:884c3f9d42d7218304bc74a8a7693d172685c84bd7ab2bab1ee567b769696df9\"},",
          "690:     {file = \"contourpy-1.2.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:4a1b1208102be6e851f20066bf0e7a96b7d48a07c9b0cfe6d0d4545c2f6cadab\"},",
          "691:     {file = \"contourpy-1.2.0-cp310-cp310-win32.whl\", hash = \"sha256:34b9071c040d6fe45d9826cbbe3727d20d83f1b6110d219b83eb0e2a01d79488\"},",
          "692:     {file = \"contourpy-1.2.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:bd2f1ae63998da104f16a8b788f685e55d65760cd1929518fd94cd682bf03e41\"},",
          "693:     {file = \"contourpy-1.2.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:dd10c26b4eadae44783c45ad6655220426f971c61d9b239e6f7b16d5cdaaa727\"},",
          "694:     {file = \"contourpy-1.2.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:5c6b28956b7b232ae801406e529ad7b350d3f09a4fde958dfdf3c0520cdde0dd\"},",
          "695:     {file = \"contourpy-1.2.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ebeac59e9e1eb4b84940d076d9f9a6cec0064e241818bcb6e32124cc5c3e377a\"},",
          "696:     {file = \"contourpy-1.2.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:139d8d2e1c1dd52d78682f505e980f592ba53c9f73bd6be102233e358b401063\"},",
          "697:     {file = \"contourpy-1.2.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1e9dc350fb4c58adc64df3e0703ab076f60aac06e67d48b3848c23647ae4310e\"},",
          "698:     {file = \"contourpy-1.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:18fc2b4ed8e4a8fe849d18dce4bd3c7ea637758c6343a1f2bae1e9bd4c9f4686\"},",
          "699:     {file = \"contourpy-1.2.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:16a7380e943a6d52472096cb7ad5264ecee36ed60888e2a3d3814991a0107286\"},",
          "700:     {file = \"contourpy-1.2.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d8faf05be5ec8e02a4d86f616fc2a0322ff4a4ce26c0f09d9f7fb5330a35c95\"},",
          "701:     {file = \"contourpy-1.2.0-cp311-cp311-win32.whl\", hash = \"sha256:67b7f17679fa62ec82b7e3e611c43a016b887bd64fb933b3ae8638583006c6d6\"},",
          "702:     {file = \"contourpy-1.2.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:99ad97258985328b4f207a5e777c1b44a83bfe7cf1f87b99f9c11d4ee477c4de\"},",
          "703:     {file = \"contourpy-1.2.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:575bcaf957a25d1194903a10bc9f316c136c19f24e0985a2b9b5608bdf5dbfe0\"},",
          "704:     {file = \"contourpy-1.2.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:9e6c93b5b2dbcedad20a2f18ec22cae47da0d705d454308063421a3b290d9ea4\"},",
          "705:     {file = \"contourpy-1.2.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:464b423bc2a009088f19bdf1f232299e8b6917963e2b7e1d277da5041f33a779\"},",
          "706:     {file = \"contourpy-1.2.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:68ce4788b7d93e47f84edd3f1f95acdcd142ae60bc0e5493bfd120683d2d4316\"},",
          "707:     {file = \"contourpy-1.2.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d7d1f8871998cdff5d2ff6a087e5e1780139abe2838e85b0b46b7ae6cc25399\"},",
          "708:     {file = \"contourpy-1.2.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6e739530c662a8d6d42c37c2ed52a6f0932c2d4a3e8c1f90692ad0ce1274abe0\"},",
          "709:     {file = \"contourpy-1.2.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:247b9d16535acaa766d03037d8e8fb20866d054d3c7fbf6fd1f993f11fc60ca0\"},",
          "710:     {file = \"contourpy-1.2.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:461e3ae84cd90b30f8d533f07d87c00379644205b1d33a5ea03381edc4b69431\"},",
          "711:     {file = \"contourpy-1.2.0-cp312-cp312-win32.whl\", hash = \"sha256:1c2559d6cffc94890b0529ea7eeecc20d6fadc1539273aa27faf503eb4656d8f\"},",
          "712:     {file = \"contourpy-1.2.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:491b1917afdd8638a05b611a56d46587d5a632cabead889a5440f7c638bc6ed9\"},",
          "713:     {file = \"contourpy-1.2.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:5fd1810973a375ca0e097dee059c407913ba35723b111df75671a1976efa04bc\"},",
          "714:     {file = \"contourpy-1.2.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:999c71939aad2780f003979b25ac5b8f2df651dac7b38fb8ce6c46ba5abe6ae9\"},",
          "715:     {file = \"contourpy-1.2.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b7caf9b241464c404613512d5594a6e2ff0cc9cb5615c9475cc1d9b514218ae8\"},",
          "716:     {file = \"contourpy-1.2.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:266270c6f6608340f6c9836a0fb9b367be61dde0c9a9a18d5ece97774105ff3e\"},",
          "717:     {file = \"contourpy-1.2.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dbd50d0a0539ae2e96e537553aff6d02c10ed165ef40c65b0e27e744a0f10af8\"},",
          "718:     {file = \"contourpy-1.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:11f8d2554e52f459918f7b8e6aa20ec2a3bce35ce95c1f0ef4ba36fbda306df5\"},",
          "719:     {file = \"contourpy-1.2.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:ce96dd400486e80ac7d195b2d800b03e3e6a787e2a522bfb83755938465a819e\"},",
          "720:     {file = \"contourpy-1.2.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:6d3364b999c62f539cd403f8123ae426da946e142312a514162adb2addd8d808\"},",
          "721:     {file = \"contourpy-1.2.0-cp39-cp39-win32.whl\", hash = \"sha256:1c88dfb9e0c77612febebb6ac69d44a8d81e3dc60f993215425b62c1161353f4\"},",
          "722:     {file = \"contourpy-1.2.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:78e6ad33cf2e2e80c5dfaaa0beec3d61face0fb650557100ee36db808bfa6843\"},",
          "723:     {file = \"contourpy-1.2.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:be16975d94c320432657ad2402f6760990cb640c161ae6da1363051805fa8108\"},",
          "724:     {file = \"contourpy-1.2.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b95a225d4948b26a28c08307a60ac00fb8671b14f2047fc5476613252a129776\"},",
          "725:     {file = \"contourpy-1.2.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:0d7e03c0f9a4f90dc18d4e77e9ef4ec7b7bbb437f7f675be8e530d65ae6ef956\"},",
          "726:     {file = \"contourpy-1.2.0.tar.gz\", hash = \"sha256:171f311cb758de7da13fc53af221ae47a5877be5a0843a9fe150818c51ed276a\"},",
          "727: ]",
          "729: [package.dependencies]",
          "730: numpy = \">=1.20,<2.0\"",
          "732: [package.extras]",
          "733: bokeh = [\"bokeh\", \"selenium\"]",
          "734: docs = [\"furo\", \"sphinx (>=7.2)\", \"sphinx-copybutton\"]",
          "735: mypy = [\"contourpy[bokeh,docs]\", \"docutils-stubs\", \"mypy (==1.6.1)\", \"types-Pillow\"]",
          "736: test = [\"Pillow\", \"contourpy[test-no-images]\", \"matplotlib\"]",
          "737: test-no-images = [\"pytest\", \"pytest-cov\", \"pytest-xdist\", \"wurlitzer\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "781: test = [\"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]",
          "782: test-randomorder = [\"pytest-randomly\"]",
          "829: [[package]]",
          "830: name = \"defusedxml\"",
          "831: version = \"0.7.1\"",
          "",
          "[Removed Lines]",
          "784: [[package]]",
          "785: name = \"cycler\"",
          "786: version = \"0.12.1\"",
          "787: description = \"Composable style cycles\"",
          "788: optional = false",
          "789: python-versions = \">=3.8\"",
          "790: files = [",
          "791:     {file = \"cycler-0.12.1-py3-none-any.whl\", hash = \"sha256:85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30\"},",
          "792:     {file = \"cycler-0.12.1.tar.gz\", hash = \"sha256:88bb128f02ba341da8ef447245a9e138fae777f6a23943da4540077d3601eb1c\"},",
          "793: ]",
          "795: [package.extras]",
          "796: docs = [\"ipython\", \"matplotlib\", \"numpydoc\", \"sphinx\"]",
          "797: tests = [\"pytest\", \"pytest-cov\", \"pytest-xdist\"]",
          "799: [[package]]",
          "800: name = \"dataset\"",
          "801: version = \"1.6.2\"",
          "802: description = \"Toolkit for Python-based database access.\"",
          "803: optional = false",
          "804: python-versions = \"*\"",
          "805: files = [",
          "806:     {file = \"dataset-1.6.2-py2.py3-none-any.whl\", hash = \"sha256:dcca9ba7658473d3082b1adf87a650252a1cd665705b73fa7d4ee32116a107b9\"},",
          "807:     {file = \"dataset-1.6.2.tar.gz\", hash = \"sha256:77d362118f67a8cbb4848dbd30ab362b9fa7cfebdbfaf426c9c500cb38969a99\"},",
          "808: ]",
          "810: [package.dependencies]",
          "811: alembic = \">=0.6.2\"",
          "812: banal = \">=1.0.1\"",
          "813: sqlalchemy = \">=1.3.2,<2.0.0\"",
          "815: [package.extras]",
          "816: dev = [\"PyMySQL\", \"coverage\", \"cryptography\", \"flake8\", \"pip\", \"psycopg2-binary\", \"pytest\", \"wheel\"]",
          "818: [[package]]",
          "819: name = \"decorator\"",
          "820: version = \"5.1.1\"",
          "821: description = \"Decorators for Humans\"",
          "822: optional = false",
          "823: python-versions = \">=3.5\"",
          "824: files = [",
          "825:     {file = \"decorator-5.1.1-py3-none-any.whl\", hash = \"sha256:b8c3f85900b9dc423225913c5aace94729fe1fa9763b38939a95226f02d37186\"},",
          "826:     {file = \"decorator-5.1.1.tar.gz\", hash = \"sha256:637996211036b6385ef91435e4fae22989472f9d571faba8927ba8253acbc330\"},",
          "827: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "868: argon2 = [\"argon2-cffi (>=19.1.0)\"]",
          "869: bcrypt = [\"bcrypt\"]",
          "899: [[package]]",
          "900: name = \"face\"",
          "901: version = \"22.0.0\"",
          "",
          "[Removed Lines]",
          "871: [[package]]",
          "872: name = \"exceptiongroup\"",
          "873: version = \"1.2.0\"",
          "874: description = \"Backport of PEP 654 (exception groups)\"",
          "875: optional = false",
          "876: python-versions = \">=3.7\"",
          "877: files = [",
          "878:     {file = \"exceptiongroup-1.2.0-py3-none-any.whl\", hash = \"sha256:4bfd3996ac73b41e9b9628b04e079f193850720ea5945fc96a08633c66912f14\"},",
          "879:     {file = \"exceptiongroup-1.2.0.tar.gz\", hash = \"sha256:91f5c769735f051a4290d52edd0858999b57e5876e9f85937691bd4c9fa3ed68\"},",
          "880: ]",
          "882: [package.extras]",
          "883: test = [\"pytest (>=6)\"]",
          "885: [[package]]",
          "886: name = \"executing\"",
          "887: version = \"2.0.1\"",
          "888: description = \"Get the currently executing AST node of a frame, and other information\"",
          "889: optional = false",
          "890: python-versions = \">=3.5\"",
          "891: files = [",
          "892:     {file = \"executing-2.0.1-py2.py3-none-any.whl\", hash = \"sha256:eac49ca94516ccc753f9fb5ce82603156e590b27525a8bc32cce8ae302eb61bc\"},",
          "893:     {file = \"executing-2.0.1.tar.gz\", hash = \"sha256:35afe2ce3affba8ee97f2d69927fa823b08b472b7b994e36a52a964b93d16147\"},",
          "894: ]",
          "896: [package.extras]",
          "897: tests = [\"asttokens (>=2.1.0)\", \"coverage\", \"coverage-enable-subprocess\", \"ipython\", \"littleutils\", \"pytest\", \"rich\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "948: async = [\"asgiref (>=3.2)\"]",
          "949: dotenv = [\"python-dotenv\"]",
          "1016: [[package]]",
          "1017: name = \"frida\"",
          "1018: version = \"16.2.1\"",
          "",
          "[Removed Lines]",
          "951: [[package]]",
          "952: name = \"fonttools\"",
          "953: version = \"4.50.0\"",
          "954: description = \"Tools to manipulate font files\"",
          "955: optional = false",
          "956: python-versions = \">=3.8\"",
          "957: files = [",
          "958:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:effd303fb422f8ce06543a36ca69148471144c534cc25f30e5be752bc4f46736\"},",
          "959:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:7913992ab836f621d06aabac118fc258b9947a775a607e1a737eb3a91c360335\"},",
          "960:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e0a1c5bd2f63da4043b63888534b52c5a1fd7ae187c8ffc64cbb7ae475b9dab\"},",
          "961:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d40fc98540fa5360e7ecf2c56ddf3c6e7dd04929543618fd7b5cc76e66390562\"},",
          "962:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9fff65fbb7afe137bac3113827855e0204482727bddd00a806034ab0d3951d0d\"},",
          "963:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b1aeae3dd2ee719074a9372c89ad94f7c581903306d76befdaca2a559f802472\"},",
          "964:     {file = \"fonttools-4.50.0-cp310-cp310-win32.whl\", hash = \"sha256:e9623afa319405da33b43c85cceb0585a6f5d3a1d7c604daf4f7e1dd55c03d1f\"},",
          "965:     {file = \"fonttools-4.50.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:778c5f43e7e654ef7fe0605e80894930bc3a7772e2f496238e57218610140f54\"},",
          "966:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3dfb102e7f63b78c832e4539969167ffcc0375b013080e6472350965a5fe8048\"},",
          "967:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:9e58fe34cb379ba3d01d5d319d67dd3ce7ca9a47ad044ea2b22635cd2d1247fc\"},",
          "968:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2c673ab40d15a442a4e6eb09bf007c1dda47c84ac1e2eecbdf359adacb799c24\"},",
          "969:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9b3ac35cdcd1a4c90c23a5200212c1bb74fa05833cc7c14291d7043a52ca2aaa\"},",
          "970:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8844e7a2c5f7ecf977e82eb6b3014f025c8b454e046d941ece05b768be5847ae\"},",
          "971:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:f849bd3c5c2249b49c98eca5aaebb920d2bfd92b3c69e84ca9bddf133e9f83f0\"},",
          "972:     {file = \"fonttools-4.50.0-cp311-cp311-win32.whl\", hash = \"sha256:39293ff231b36b035575e81c14626dfc14407a20de5262f9596c2cbb199c3625\"},",
          "973:     {file = \"fonttools-4.50.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:c33d5023523b44d3481624f840c8646656a1def7630ca562f222eb3ead16c438\"},",
          "974:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:b4a886a6dbe60100ba1cd24de962f8cd18139bd32808da80de1fa9f9f27bf1dc\"},",
          "975:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ca1837bfbe5eafa11313dbc7edada79052709a1fffa10cea691210af4aa1fa\"},",
          "976:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0493dd97ac8977e48ffc1476b932b37c847cbb87fd68673dee5182004906828\"},",
          "977:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:77844e2f1b0889120b6c222fc49b2b75c3d88b930615e98893b899b9352a27ea\"},",
          "978:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:3566bfb8c55ed9100afe1ba6f0f12265cd63a1387b9661eb6031a1578a28bad1\"},",
          "979:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:35e10ddbc129cf61775d58a14f2d44121178d89874d32cae1eac722e687d9019\"},",
          "980:     {file = \"fonttools-4.50.0-cp312-cp312-win32.whl\", hash = \"sha256:cc8140baf9fa8f9b903f2b393a6c413a220fa990264b215bf48484f3d0bf8710\"},",
          "981:     {file = \"fonttools-4.50.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:0ccc85fd96373ab73c59833b824d7a73846670a0cb1f3afbaee2b2c426a8f931\"},",
          "982:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:e270a406219af37581d96c810172001ec536e29e5593aa40d4c01cca3e145aa6\"},",
          "983:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ac2463de667233372e9e1c7e9de3d914b708437ef52a3199fdbf5a60184f190c\"},",
          "984:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:47abd6669195abe87c22750dbcd366dc3a0648f1b7c93c2baa97429c4dc1506e\"},",
          "985:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:074841375e2e3d559aecc86e1224caf78e8b8417bb391e7d2506412538f21adc\"},",
          "986:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:0743fd2191ad7ab43d78cd747215b12033ddee24fa1e088605a3efe80d6984de\"},",
          "987:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:3d7080cce7be5ed65bee3496f09f79a82865a514863197ff4d4d177389e981b0\"},",
          "988:     {file = \"fonttools-4.50.0-cp38-cp38-win32.whl\", hash = \"sha256:a467ba4e2eadc1d5cc1a11d355abb945f680473fbe30d15617e104c81f483045\"},",
          "989:     {file = \"fonttools-4.50.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:f77e048f805e00870659d6318fd89ef28ca4ee16a22b4c5e1905b735495fc422\"},",
          "990:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:b6245eafd553c4e9a0708e93be51392bd2288c773523892fbd616d33fd2fda59\"},",
          "991:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:a4062cc7e8de26f1603323ef3ae2171c9d29c8a9f5e067d555a2813cd5c7a7e0\"},",
          "992:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:34692850dfd64ba06af61e5791a441f664cb7d21e7b544e8f385718430e8f8e4\"},",
          "993:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:678dd95f26a67e02c50dcb5bf250f95231d455642afbc65a3b0bcdacd4e4dd38\"},",
          "994:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:4f2ce7b0b295fe64ac0a85aef46a0f2614995774bd7bc643b85679c0283287f9\"},",
          "995:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:d346f4dc2221bfb7ab652d1e37d327578434ce559baf7113b0f55768437fe6a0\"},",
          "996:     {file = \"fonttools-4.50.0-cp39-cp39-win32.whl\", hash = \"sha256:a51eeaf52ba3afd70bf489be20e52fdfafe6c03d652b02477c6ce23c995222f4\"},",
          "997:     {file = \"fonttools-4.50.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:8639be40d583e5d9da67795aa3eeeda0488fb577a1d42ae11a5036f18fb16d93\"},",
          "998:     {file = \"fonttools-4.50.0-py3-none-any.whl\", hash = \"sha256:48fa36da06247aa8282766cfd63efff1bb24e55f020f29a335939ed3844d20d3\"},",
          "999:     {file = \"fonttools-4.50.0.tar.gz\", hash = \"sha256:fa5cf61058c7dbb104c2ac4e782bf1b2016a8cf2f69de6e4dd6a865d2c969bb5\"},",
          "1000: ]",
          "1002: [package.extras]",
          "1003: all = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"fs (>=2.2.0,<3)\", \"lxml (>=4.0)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"munkres\", \"pycairo\", \"scipy\", \"skia-pathops (>=0.5.0)\", \"sympy\", \"uharfbuzz (>=0.23.0)\", \"unicodedata2 (>=15.1.0)\", \"xattr\", \"zopfli (>=0.1.4)\"]",
          "1004: graphite = [\"lz4 (>=1.7.4.2)\"]",
          "1005: interpolatable = [\"munkres\", \"pycairo\", \"scipy\"]",
          "1006: lxml = [\"lxml (>=4.0)\"]",
          "1007: pathops = [\"skia-pathops (>=0.5.0)\"]",
          "1008: plot = [\"matplotlib\"]",
          "1009: repacker = [\"uharfbuzz (>=0.23.0)\"]",
          "1010: symfont = [\"sympy\"]",
          "1011: type1 = [\"xattr\"]",
          "1012: ufo = [\"fs (>=2.2.0,<3)\"]",
          "1013: unicode = [\"unicodedata2 (>=15.1.0)\"]",
          "1014: woff = [\"brotli (>=1.0.1)\", \"brotlicffi (>=0.8.0)\", \"zopfli (>=0.1.4)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1064:     {file = \"google_play_scraper-1.2.6.tar.gz\", hash = \"sha256:b05b0572e7a7a5ddc5d1a9c06f4410bda5a69d86808446b9dd74e5cdcdf5865f\"},",
          "1065: ]",
          "1138: [[package]]",
          "1139: name = \"gunicorn\"",
          "1140: version = \"21.2.0\"",
          "",
          "[Removed Lines]",
          "1067: [[package]]",
          "1068: name = \"greenlet\"",
          "1069: version = \"3.0.3\"",
          "1070: description = \"Lightweight in-process concurrent programming\"",
          "1071: optional = false",
          "1072: python-versions = \">=3.7\"",
          "1073: files = [",
          "1074:     {file = \"greenlet-3.0.3-cp310-cp310-macosx_11_0_universal2.whl\", hash = \"sha256:9da2bd29ed9e4f15955dd1595ad7bc9320308a3b766ef7f837e23ad4b4aac31a\"},",
          "1075:     {file = \"greenlet-3.0.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d353cadd6083fdb056bb46ed07e4340b0869c305c8ca54ef9da3421acbdf6881\"},",
          "1076:     {file = \"greenlet-3.0.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:dca1e2f3ca00b84a396bc1bce13dd21f680f035314d2379c4160c98153b2059b\"},",
          "1077:     {file = \"greenlet-3.0.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3ed7fb269f15dc662787f4119ec300ad0702fa1b19d2135a37c2c4de6fadfd4a\"},",
          "1078:     {file = \"greenlet-3.0.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dd4f49ae60e10adbc94b45c0b5e6a179acc1736cf7a90160b404076ee283cf83\"},",
          "1079:     {file = \"greenlet-3.0.3-cp310-cp310-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:73a411ef564e0e097dbe7e866bb2dda0f027e072b04da387282b02c308807405\"},",
          "1080:     {file = \"greenlet-3.0.3-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:7f362975f2d179f9e26928c5b517524e89dd48530a0202570d55ad6ca5d8a56f\"},",
          "1081:     {file = \"greenlet-3.0.3-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:649dde7de1a5eceb258f9cb00bdf50e978c9db1b996964cd80703614c86495eb\"},",
          "1082:     {file = \"greenlet-3.0.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:68834da854554926fbedd38c76e60c4a2e3198c6fbed520b106a8986445caaf9\"},",
          "1083:     {file = \"greenlet-3.0.3-cp311-cp311-macosx_11_0_universal2.whl\", hash = \"sha256:b1b5667cced97081bf57b8fa1d6bfca67814b0afd38208d52538316e9422fc61\"},",
          "1084:     {file = \"greenlet-3.0.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:52f59dd9c96ad2fc0d5724107444f76eb20aaccb675bf825df6435acb7703559\"},",
          "1085:     {file = \"greenlet-3.0.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:afaff6cf5200befd5cec055b07d1c0a5a06c040fe5ad148abcd11ba6ab9b114e\"},",
          "1086:     {file = \"greenlet-3.0.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fe754d231288e1e64323cfad462fcee8f0288654c10bdf4f603a39ed923bef33\"},",
          "1087:     {file = \"greenlet-3.0.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2797aa5aedac23af156bbb5a6aa2cd3427ada2972c828244eb7d1b9255846379\"},",
          "1088:     {file = \"greenlet-3.0.3-cp311-cp311-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:b7f009caad047246ed379e1c4dbcb8b020f0a390667ea74d2387be2998f58a22\"},",
          "1089:     {file = \"greenlet-3.0.3-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:c5e1536de2aad7bf62e27baf79225d0d64360d4168cf2e6becb91baf1ed074f3\"},",
          "1090:     {file = \"greenlet-3.0.3-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:894393ce10ceac937e56ec00bb71c4c2f8209ad516e96033e4b3b1de270e200d\"},",
          "1091:     {file = \"greenlet-3.0.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:1ea188d4f49089fc6fb283845ab18a2518d279c7cd9da1065d7a84e991748728\"},",
          "1092:     {file = \"greenlet-3.0.3-cp312-cp312-macosx_11_0_universal2.whl\", hash = \"sha256:70fb482fdf2c707765ab5f0b6655e9cfcf3780d8d87355a063547b41177599be\"},",
          "1093:     {file = \"greenlet-3.0.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d4d1ac74f5c0c0524e4a24335350edad7e5f03b9532da7ea4d3c54d527784f2e\"},",
          "1094:     {file = \"greenlet-3.0.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:149e94a2dd82d19838fe4b2259f1b6b9957d5ba1b25640d2380bea9c5df37676\"},",
          "1095:     {file = \"greenlet-3.0.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:15d79dd26056573940fcb8c7413d84118086f2ec1a8acdfa854631084393efcc\"},",
          "1096:     {file = \"greenlet-3.0.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:881b7db1ebff4ba09aaaeae6aa491daeb226c8150fc20e836ad00041bcb11230\"},",
          "1097:     {file = \"greenlet-3.0.3-cp312-cp312-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:fcd2469d6a2cf298f198f0487e0a5b1a47a42ca0fa4dfd1b6862c999f018ebbf\"},",
          "1098:     {file = \"greenlet-3.0.3-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:1f672519db1796ca0d8753f9e78ec02355e862d0998193038c7073045899f305\"},",
          "1099:     {file = \"greenlet-3.0.3-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:2516a9957eed41dd8f1ec0c604f1cdc86758b587d964668b5b196a9db5bfcde6\"},",
          "1100:     {file = \"greenlet-3.0.3-cp312-cp312-win_amd64.whl\", hash = \"sha256:bba5387a6975598857d86de9eac14210a49d554a77eb8261cc68b7d082f78ce2\"},",
          "1101:     {file = \"greenlet-3.0.3-cp37-cp37m-macosx_11_0_universal2.whl\", hash = \"sha256:5b51e85cb5ceda94e79d019ed36b35386e8c37d22f07d6a751cb659b180d5274\"},",
          "1102:     {file = \"greenlet-3.0.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:daf3cb43b7cf2ba96d614252ce1684c1bccee6b2183a01328c98d36fcd7d5cb0\"},",
          "1103:     {file = \"greenlet-3.0.3-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:99bf650dc5d69546e076f413a87481ee1d2d09aaaaaca058c9251b6d8c14783f\"},",
          "1104:     {file = \"greenlet-3.0.3-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2dd6e660effd852586b6a8478a1d244b8dc90ab5b1321751d2ea15deb49ed414\"},",
          "1105:     {file = \"greenlet-3.0.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e3391d1e16e2a5a1507d83e4a8b100f4ee626e8eca43cf2cadb543de69827c4c\"},",
          "1106:     {file = \"greenlet-3.0.3-cp37-cp37m-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:e1f145462f1fa6e4a4ae3c0f782e580ce44d57c8f2c7aae1b6fa88c0b2efdb41\"},",
          "1107:     {file = \"greenlet-3.0.3-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:1a7191e42732df52cb5f39d3527217e7ab73cae2cb3694d241e18f53d84ea9a7\"},",
          "1108:     {file = \"greenlet-3.0.3-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:0448abc479fab28b00cb472d278828b3ccca164531daab4e970a0458786055d6\"},",
          "1109:     {file = \"greenlet-3.0.3-cp37-cp37m-win32.whl\", hash = \"sha256:b542be2440edc2d48547b5923c408cbe0fc94afb9f18741faa6ae970dbcb9b6d\"},",
          "1110:     {file = \"greenlet-3.0.3-cp37-cp37m-win_amd64.whl\", hash = \"sha256:01bc7ea167cf943b4c802068e178bbf70ae2e8c080467070d01bfa02f337ee67\"},",
          "1111:     {file = \"greenlet-3.0.3-cp38-cp38-macosx_11_0_universal2.whl\", hash = \"sha256:1996cb9306c8595335bb157d133daf5cf9f693ef413e7673cb07e3e5871379ca\"},",
          "1112:     {file = \"greenlet-3.0.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3ddc0f794e6ad661e321caa8d2f0a55ce01213c74722587256fb6566049a8b04\"},",
          "1113:     {file = \"greenlet-3.0.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c9db1c18f0eaad2f804728c67d6c610778456e3e1cc4ab4bbd5eeb8e6053c6fc\"},",
          "1114:     {file = \"greenlet-3.0.3-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7170375bcc99f1a2fbd9c306f5be8764eaf3ac6b5cb968862cad4c7057756506\"},",
          "1115:     {file = \"greenlet-3.0.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6b66c9c1e7ccabad3a7d037b2bcb740122a7b17a53734b7d72a344ce39882a1b\"},",
          "1116:     {file = \"greenlet-3.0.3-cp38-cp38-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:098d86f528c855ead3479afe84b49242e174ed262456c342d70fc7f972bc13c4\"},",
          "1117:     {file = \"greenlet-3.0.3-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:81bb9c6d52e8321f09c3d165b2a78c680506d9af285bfccbad9fb7ad5a5da3e5\"},",
          "1118:     {file = \"greenlet-3.0.3-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:fd096eb7ffef17c456cfa587523c5f92321ae02427ff955bebe9e3c63bc9f0da\"},",
          "1119:     {file = \"greenlet-3.0.3-cp38-cp38-win32.whl\", hash = \"sha256:d46677c85c5ba00a9cb6f7a00b2bfa6f812192d2c9f7d9c4f6a55b60216712f3\"},",
          "1120:     {file = \"greenlet-3.0.3-cp38-cp38-win_amd64.whl\", hash = \"sha256:419b386f84949bf0e7c73e6032e3457b82a787c1ab4a0e43732898a761cc9dbf\"},",
          "1121:     {file = \"greenlet-3.0.3-cp39-cp39-macosx_11_0_universal2.whl\", hash = \"sha256:da70d4d51c8b306bb7a031d5cff6cc25ad253affe89b70352af5f1cb68e74b53\"},",
          "1122:     {file = \"greenlet-3.0.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:086152f8fbc5955df88382e8a75984e2bb1c892ad2e3c80a2508954e52295257\"},",
          "1123:     {file = \"greenlet-3.0.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d73a9fe764d77f87f8ec26a0c85144d6a951a6c438dfe50487df5595c6373eac\"},",
          "1124:     {file = \"greenlet-3.0.3-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b7dcbe92cc99f08c8dd11f930de4d99ef756c3591a5377d1d9cd7dd5e896da71\"},",
          "1125:     {file = \"greenlet-3.0.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1551a8195c0d4a68fac7a4325efac0d541b48def35feb49d803674ac32582f61\"},",
          "1126:     {file = \"greenlet-3.0.3-cp39-cp39-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:64d7675ad83578e3fc149b617a444fab8efdafc9385471f868eb5ff83e446b8b\"},",
          "1127:     {file = \"greenlet-3.0.3-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:b37eef18ea55f2ffd8f00ff8fe7c8d3818abd3e25fb73fae2ca3b672e333a7a6\"},",
          "1128:     {file = \"greenlet-3.0.3-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:77457465d89b8263bca14759d7c1684df840b6811b2499838cc5b040a8b5b113\"},",
          "1129:     {file = \"greenlet-3.0.3-cp39-cp39-win32.whl\", hash = \"sha256:57e8974f23e47dac22b83436bdcf23080ade568ce77df33159e019d161ce1d1e\"},",
          "1130:     {file = \"greenlet-3.0.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:c5ee858cfe08f34712f548c3c363e807e7186f03ad7a5039ebadb29e8c6be067\"},",
          "1131:     {file = \"greenlet-3.0.3.tar.gz\", hash = \"sha256:43374442353259554ce33599da8b692d5aa96f8976d567d4badf263371fbe491\"},",
          "1132: ]",
          "1134: [package.extras]",
          "1135: docs = [\"Sphinx\", \"furo\"]",
          "1136: test = [\"objgraph\", \"psutil\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1239:     {file = \"IP2Location-8.10.0.tar.gz\", hash = \"sha256:f0eea26c655f701406fa9379a38a0b56cc0dc7d0c6a221d44bda5280978a75ab\"},",
          "1240: ]",
          "1278: [[package]]",
          "1279: name = \"itsdangerous\"",
          "1280: version = \"2.1.2\"",
          "",
          "[Removed Lines]",
          "1242: [[package]]",
          "1243: name = \"ipython\"",
          "1244: version = \"8.22.2\"",
          "1245: description = \"IPython: Productive Interactive Computing\"",
          "1246: optional = false",
          "1247: python-versions = \">=3.10\"",
          "1248: files = [",
          "1249:     {file = \"ipython-8.22.2-py3-none-any.whl\", hash = \"sha256:3c86f284c8f3d8f2b6c662f885c4889a91df7cd52056fd02b7d8d6195d7f56e9\"},",
          "1250:     {file = \"ipython-8.22.2.tar.gz\", hash = \"sha256:2dcaad9049f9056f1fef63514f176c7d41f930daa78d05b82a176202818f2c14\"},",
          "1251: ]",
          "1253: [package.dependencies]",
          "1254: colorama = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1255: decorator = \"*\"",
          "1256: exceptiongroup = {version = \"*\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1257: jedi = \">=0.16\"",
          "1258: matplotlib-inline = \"*\"",
          "1259: pexpect = {version = \">4.3\", markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"emscripten\\\"\"}",
          "1260: prompt-toolkit = \">=3.0.41,<3.1.0\"",
          "1261: pygments = \">=2.4.0\"",
          "1262: stack-data = \"*\"",
          "1263: traitlets = \">=5.13.0\"",
          "1265: [package.extras]",
          "1266: all = [\"ipython[black,doc,kernel,nbconvert,nbformat,notebook,parallel,qtconsole,terminal]\", \"ipython[test,test-extra]\"]",
          "1267: black = [\"black\"]",
          "1268: doc = [\"docrepr\", \"exceptiongroup\", \"ipykernel\", \"ipython[test]\", \"matplotlib\", \"setuptools (>=18.5)\", \"sphinx (>=1.3)\", \"sphinx-rtd-theme\", \"sphinxcontrib-jquery\", \"stack-data\", \"typing-extensions\"]",
          "1269: kernel = [\"ipykernel\"]",
          "1270: nbconvert = [\"nbconvert\"]",
          "1271: nbformat = [\"nbformat\"]",
          "1272: notebook = [\"ipywidgets\", \"notebook\"]",
          "1273: parallel = [\"ipyparallel\"]",
          "1274: qtconsole = [\"qtconsole\"]",
          "1275: test = [\"pickleshare\", \"pytest (<8)\", \"pytest-asyncio (<0.22)\", \"testpath\"]",
          "1276: test-extra = [\"curio\", \"ipython[test]\", \"matplotlib (!=3.2.0)\", \"nbformat\", \"numpy (>=1.23)\", \"pandas\", \"trio\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1286:     {file = \"itsdangerous-2.1.2.tar.gz\", hash = \"sha256:5dbbc68b317e5e42f327f9021763545dc3fc3bfe22e6deb96aaf1fc38874156a\"},",
          "1287: ]",
          "1308: [[package]]",
          "1309: name = \"jinja2\"",
          "1310: version = \"3.1.3\"",
          "",
          "[Removed Lines]",
          "1289: [[package]]",
          "1290: name = \"jedi\"",
          "1291: version = \"0.19.1\"",
          "1292: description = \"An autocompletion tool for Python that can be used for text editors.\"",
          "1293: optional = false",
          "1294: python-versions = \">=3.6\"",
          "1295: files = [",
          "1296:     {file = \"jedi-0.19.1-py2.py3-none-any.whl\", hash = \"sha256:e983c654fe5c02867aef4cdfce5a2fbb4a50adc0af145f70504238f18ef5e7e0\"},",
          "1297:     {file = \"jedi-0.19.1.tar.gz\", hash = \"sha256:cf0496f3651bc65d7174ac1b7d043eff454892c708a87d1b683e57b569927ffd\"},",
          "1298: ]",
          "1300: [package.dependencies]",
          "1301: parso = \">=0.8.3,<0.9.0\"",
          "1303: [package.extras]",
          "1304: docs = [\"Jinja2 (==2.11.3)\", \"MarkupSafe (==1.1.1)\", \"Pygments (==2.8.1)\", \"alabaster (==0.7.12)\", \"babel (==2.9.1)\", \"chardet (==4.0.0)\", \"commonmark (==0.8.1)\", \"docutils (==0.17.1)\", \"future (==0.18.2)\", \"idna (==2.10)\", \"imagesize (==1.2.0)\", \"mock (==1.0.1)\", \"packaging (==20.9)\", \"pyparsing (==2.4.7)\", \"pytz (==2021.1)\", \"readthedocs-sphinx-ext (==2.1.4)\", \"recommonmark (==0.5.0)\", \"requests (==2.25.1)\", \"six (==1.15.0)\", \"snowballstemmer (==2.1.0)\", \"sphinx (==1.8.5)\", \"sphinx-rtd-theme (==0.4.3)\", \"sphinxcontrib-serializinghtml (==1.1.4)\", \"sphinxcontrib-websupport (==1.2.4)\", \"urllib3 (==1.26.4)\"]",
          "1305: qa = [\"flake8 (==5.0.4)\", \"mypy (==0.971)\", \"types-setuptools (==67.2.0.1)\"]",
          "1306: testing = [\"Django\", \"attrs\", \"colorama\", \"docopt\", \"pytest (<7.0.0)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1352:     {file = \"kaitaistruct-0.10.tar.gz\", hash = \"sha256:a044dee29173d6afbacf27bcac39daf89b654dd418cfa009ab82d9178a9ae52a\"},",
          "1353: ]",
          "1468: [[package]]",
          "1469: name = \"ldap3\"",
          "1470: version = \"2.9.1\"",
          "",
          "[Removed Lines]",
          "1355: [[package]]",
          "1356: name = \"kiwisolver\"",
          "1357: version = \"1.4.5\"",
          "1358: description = \"A fast implementation of the Cassowary constraint solver\"",
          "1359: optional = false",
          "1360: python-versions = \">=3.7\"",
          "1361: files = [",
          "1362:     {file = \"kiwisolver-1.4.5-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:05703cf211d585109fcd72207a31bb170a0f22144d68298dc5e61b3c946518af\"},",
          "1363:     {file = \"kiwisolver-1.4.5-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:146d14bebb7f1dc4d5fbf74f8a6cb15ac42baadee8912eb84ac0b3b2a3dc6ac3\"},",
          "1364:     {file = \"kiwisolver-1.4.5-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:6ef7afcd2d281494c0a9101d5c571970708ad911d028137cd558f02b851c08b4\"},",
          "1365:     {file = \"kiwisolver-1.4.5-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:9eaa8b117dc8337728e834b9c6e2611f10c79e38f65157c4c38e9400286f5cb1\"},",
          "1366:     {file = \"kiwisolver-1.4.5-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:ec20916e7b4cbfb1f12380e46486ec4bcbaa91a9c448b97023fde0d5bbf9e4ff\"},",
          "1367:     {file = \"kiwisolver-1.4.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:39b42c68602539407884cf70d6a480a469b93b81b7701378ba5e2328660c847a\"},",
          "1368:     {file = \"kiwisolver-1.4.5-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:aa12042de0171fad672b6c59df69106d20d5596e4f87b5e8f76df757a7c399aa\"},",
          "1369:     {file = \"kiwisolver-1.4.5-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2a40773c71d7ccdd3798f6489aaac9eee213d566850a9533f8d26332d626b82c\"},",
          "1370:     {file = \"kiwisolver-1.4.5-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:19df6e621f6d8b4b9c4d45f40a66839294ff2bb235e64d2178f7522d9170ac5b\"},",
          "1371:     {file = \"kiwisolver-1.4.5-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:83d78376d0d4fd884e2c114d0621624b73d2aba4e2788182d286309ebdeed770\"},",
          "1372:     {file = \"kiwisolver-1.4.5-cp310-cp310-musllinux_1_1_ppc64le.whl\", hash = \"sha256:e391b1f0a8a5a10ab3b9bb6afcfd74f2175f24f8975fb87ecae700d1503cdee0\"},",
          "1373:     {file = \"kiwisolver-1.4.5-cp310-cp310-musllinux_1_1_s390x.whl\", hash = \"sha256:852542f9481f4a62dbb5dd99e8ab7aedfeb8fb6342349a181d4036877410f525\"},",
          "1374:     {file = \"kiwisolver-1.4.5-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:59edc41b24031bc25108e210c0def6f6c2191210492a972d585a06ff246bb79b\"},",
          "1375:     {file = \"kiwisolver-1.4.5-cp310-cp310-win32.whl\", hash = \"sha256:a6aa6315319a052b4ee378aa171959c898a6183f15c1e541821c5c59beaa0238\"},",
          "1376:     {file = \"kiwisolver-1.4.5-cp310-cp310-win_amd64.whl\", hash = \"sha256:d0ef46024e6a3d79c01ff13801cb19d0cad7fd859b15037aec74315540acc276\"},",
          "1377:     {file = \"kiwisolver-1.4.5-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:11863aa14a51fd6ec28688d76f1735f8f69ab1fabf388851a595d0721af042f5\"},",
          "1378:     {file = \"kiwisolver-1.4.5-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:8ab3919a9997ab7ef2fbbed0cc99bb28d3c13e6d4b1ad36e97e482558a91be90\"},",
          "1379:     {file = \"kiwisolver-1.4.5-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:fcc700eadbbccbf6bc1bcb9dbe0786b4b1cb91ca0dcda336eef5c2beed37b797\"},",
          "1380:     {file = \"kiwisolver-1.4.5-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:dfdd7c0b105af050eb3d64997809dc21da247cf44e63dc73ff0fd20b96be55a9\"},",
          "1381:     {file = \"kiwisolver-1.4.5-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:76c6a5964640638cdeaa0c359382e5703e9293030fe730018ca06bc2010c4437\"},",
          "1382:     {file = \"kiwisolver-1.4.5-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:bbea0db94288e29afcc4c28afbf3a7ccaf2d7e027489c449cf7e8f83c6346eb9\"},",
          "1383:     {file = \"kiwisolver-1.4.5-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:ceec1a6bc6cab1d6ff5d06592a91a692f90ec7505d6463a88a52cc0eb58545da\"},",
          "1384:     {file = \"kiwisolver-1.4.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:040c1aebeda72197ef477a906782b5ab0d387642e93bda547336b8957c61022e\"},",
          "1385:     {file = \"kiwisolver-1.4.5-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:f91de7223d4c7b793867797bacd1ee53bfe7359bd70d27b7b58a04efbb9436c8\"},",
          "1386:     {file = \"kiwisolver-1.4.5-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:faae4860798c31530dd184046a900e652c95513796ef51a12bc086710c2eec4d\"},",
          "1387:     {file = \"kiwisolver-1.4.5-cp311-cp311-musllinux_1_1_ppc64le.whl\", hash = \"sha256:b0157420efcb803e71d1b28e2c287518b8808b7cf1ab8af36718fd0a2c453eb0\"},",
          "1388:     {file = \"kiwisolver-1.4.5-cp311-cp311-musllinux_1_1_s390x.whl\", hash = \"sha256:06f54715b7737c2fecdbf140d1afb11a33d59508a47bf11bb38ecf21dc9ab79f\"},",
          "1389:     {file = \"kiwisolver-1.4.5-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:fdb7adb641a0d13bdcd4ef48e062363d8a9ad4a182ac7647ec88f695e719ae9f\"},",
          "1390:     {file = \"kiwisolver-1.4.5-cp311-cp311-win32.whl\", hash = \"sha256:bb86433b1cfe686da83ce32a9d3a8dd308e85c76b60896d58f082136f10bffac\"},",
          "1391:     {file = \"kiwisolver-1.4.5-cp311-cp311-win_amd64.whl\", hash = \"sha256:6c08e1312a9cf1074d17b17728d3dfce2a5125b2d791527f33ffbe805200a355\"},",
          "1392:     {file = \"kiwisolver-1.4.5-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:32d5cf40c4f7c7b3ca500f8985eb3fb3a7dfc023215e876f207956b5ea26632a\"},",
          "1393:     {file = \"kiwisolver-1.4.5-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:f846c260f483d1fd217fe5ed7c173fb109efa6b1fc8381c8b7552c5781756192\"},",
          "1394:     {file = \"kiwisolver-1.4.5-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:5ff5cf3571589b6d13bfbfd6bcd7a3f659e42f96b5fd1c4830c4cf21d4f5ef45\"},",
          "1395:     {file = \"kiwisolver-1.4.5-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7269d9e5f1084a653d575c7ec012ff57f0c042258bf5db0954bf551c158466e7\"},",
          "1396:     {file = \"kiwisolver-1.4.5-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:da802a19d6e15dffe4b0c24b38b3af68e6c1a68e6e1d8f30148c83864f3881db\"},",
          "1397:     {file = \"kiwisolver-1.4.5-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3aba7311af82e335dd1e36ffff68aaca609ca6290c2cb6d821a39aa075d8e3ff\"},",
          "1398:     {file = \"kiwisolver-1.4.5-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:763773d53f07244148ccac5b084da5adb90bfaee39c197554f01b286cf869228\"},",
          "1399:     {file = \"kiwisolver-1.4.5-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2270953c0d8cdab5d422bee7d2007f043473f9d2999631c86a223c9db56cbd16\"},",
          "1400:     {file = \"kiwisolver-1.4.5-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:d099e745a512f7e3bbe7249ca835f4d357c586d78d79ae8f1dcd4d8adeb9bda9\"},",
          "1401:     {file = \"kiwisolver-1.4.5-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:74db36e14a7d1ce0986fa104f7d5637aea5c82ca6326ed0ec5694280942d1162\"},",
          "1402:     {file = \"kiwisolver-1.4.5-cp312-cp312-musllinux_1_1_ppc64le.whl\", hash = \"sha256:7e5bab140c309cb3a6ce373a9e71eb7e4873c70c2dda01df6820474f9889d6d4\"},",
          "1403:     {file = \"kiwisolver-1.4.5-cp312-cp312-musllinux_1_1_s390x.whl\", hash = \"sha256:0f114aa76dc1b8f636d077979c0ac22e7cd8f3493abbab152f20eb8d3cda71f3\"},",
          "1404:     {file = \"kiwisolver-1.4.5-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:88a2df29d4724b9237fc0c6eaf2a1adae0cdc0b3e9f4d8e7dc54b16812d2d81a\"},",
          "1405:     {file = \"kiwisolver-1.4.5-cp312-cp312-win32.whl\", hash = \"sha256:72d40b33e834371fd330fb1472ca19d9b8327acb79a5821d4008391db8e29f20\"},",
          "1406:     {file = \"kiwisolver-1.4.5-cp312-cp312-win_amd64.whl\", hash = \"sha256:2c5674c4e74d939b9d91dda0fae10597ac7521768fec9e399c70a1f27e2ea2d9\"},",
          "1407:     {file = \"kiwisolver-1.4.5-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:3a2b053a0ab7a3960c98725cfb0bf5b48ba82f64ec95fe06f1d06c99b552e130\"},",
          "1408:     {file = \"kiwisolver-1.4.5-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3cd32d6c13807e5c66a7cbb79f90b553642f296ae4518a60d8d76243b0ad2898\"},",
          "1409:     {file = \"kiwisolver-1.4.5-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:59ec7b7c7e1a61061850d53aaf8e93db63dce0c936db1fda2658b70e4a1be709\"},",
          "1410:     {file = \"kiwisolver-1.4.5-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:da4cfb373035def307905d05041c1d06d8936452fe89d464743ae7fb8371078b\"},",
          "1411:     {file = \"kiwisolver-1.4.5-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2400873bccc260b6ae184b2b8a4fec0e4082d30648eadb7c3d9a13405d861e89\"},",
          "1412:     {file = \"kiwisolver-1.4.5-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:1b04139c4236a0f3aff534479b58f6f849a8b351e1314826c2d230849ed48985\"},",
          "1413:     {file = \"kiwisolver-1.4.5-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:4e66e81a5779b65ac21764c295087de82235597a2293d18d943f8e9e32746265\"},",
          "1414:     {file = \"kiwisolver-1.4.5-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:7931d8f1f67c4be9ba1dd9c451fb0eeca1a25b89e4d3f89e828fe12a519b782a\"},",
          "1415:     {file = \"kiwisolver-1.4.5-cp37-cp37m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:b3f7e75f3015df442238cca659f8baa5f42ce2a8582727981cbfa15fee0ee205\"},",
          "1416:     {file = \"kiwisolver-1.4.5-cp37-cp37m-musllinux_1_1_s390x.whl\", hash = \"sha256:bbf1d63eef84b2e8c89011b7f2235b1e0bf7dacc11cac9431fc6468e99ac77fb\"},",
          "1417:     {file = \"kiwisolver-1.4.5-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:4c380469bd3f970ef677bf2bcba2b6b0b4d5c75e7a020fb863ef75084efad66f\"},",
          "1418:     {file = \"kiwisolver-1.4.5-cp37-cp37m-win32.whl\", hash = \"sha256:9408acf3270c4b6baad483865191e3e582b638b1654a007c62e3efe96f09a9a3\"},",
          "1419:     {file = \"kiwisolver-1.4.5-cp37-cp37m-win_amd64.whl\", hash = \"sha256:5b94529f9b2591b7af5f3e0e730a4e0a41ea174af35a4fd067775f9bdfeee01a\"},",
          "1420:     {file = \"kiwisolver-1.4.5-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:11c7de8f692fc99816e8ac50d1d1aef4f75126eefc33ac79aac02c099fd3db71\"},",
          "1421:     {file = \"kiwisolver-1.4.5-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:53abb58632235cd154176ced1ae8f0d29a6657aa1aa9decf50b899b755bc2b93\"},",
          "1422:     {file = \"kiwisolver-1.4.5-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:88b9f257ca61b838b6f8094a62418421f87ac2a1069f7e896c36a7d86b5d4c29\"},",
          "1423:     {file = \"kiwisolver-1.4.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3195782b26fc03aa9c6913d5bad5aeb864bdc372924c093b0f1cebad603dd712\"},",
          "1424:     {file = \"kiwisolver-1.4.5-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:fc579bf0f502e54926519451b920e875f433aceb4624a3646b3252b5caa9e0b6\"},",
          "1425:     {file = \"kiwisolver-1.4.5-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5a580c91d686376f0f7c295357595c5a026e6cbc3d77b7c36e290201e7c11ecb\"},",
          "1426:     {file = \"kiwisolver-1.4.5-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:cfe6ab8da05c01ba6fbea630377b5da2cd9bcbc6338510116b01c1bc939a2c18\"},",
          "1427:     {file = \"kiwisolver-1.4.5-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:d2e5a98f0ec99beb3c10e13b387f8db39106d53993f498b295f0c914328b1333\"},",
          "1428:     {file = \"kiwisolver-1.4.5-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:a51a263952b1429e429ff236d2f5a21c5125437861baeed77f5e1cc2d2c7c6da\"},",
          "1429:     {file = \"kiwisolver-1.4.5-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:3edd2fa14e68c9be82c5b16689e8d63d89fe927e56debd6e1dbce7a26a17f81b\"},",
          "1430:     {file = \"kiwisolver-1.4.5-cp38-cp38-musllinux_1_1_ppc64le.whl\", hash = \"sha256:74d1b44c6cfc897df648cc9fdaa09bc3e7679926e6f96df05775d4fb3946571c\"},",
          "1431:     {file = \"kiwisolver-1.4.5-cp38-cp38-musllinux_1_1_s390x.whl\", hash = \"sha256:76d9289ed3f7501012e05abb8358bbb129149dbd173f1f57a1bf1c22d19ab7cc\"},",
          "1432:     {file = \"kiwisolver-1.4.5-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:92dea1ffe3714fa8eb6a314d2b3c773208d865a0e0d35e713ec54eea08a66250\"},",
          "1433:     {file = \"kiwisolver-1.4.5-cp38-cp38-win32.whl\", hash = \"sha256:5c90ae8c8d32e472be041e76f9d2f2dbff4d0b0be8bd4041770eddb18cf49a4e\"},",
          "1434:     {file = \"kiwisolver-1.4.5-cp38-cp38-win_amd64.whl\", hash = \"sha256:c7940c1dc63eb37a67721b10d703247552416f719c4188c54e04334321351ced\"},",
          "1435:     {file = \"kiwisolver-1.4.5-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:9407b6a5f0d675e8a827ad8742e1d6b49d9c1a1da5d952a67d50ef5f4170b18d\"},",
          "1436:     {file = \"kiwisolver-1.4.5-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:15568384086b6df3c65353820a4473575dbad192e35010f622c6ce3eebd57af9\"},",
          "1437:     {file = \"kiwisolver-1.4.5-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0dc9db8e79f0036e8173c466d21ef18e1befc02de8bf8aa8dc0813a6dc8a7046\"},",
          "1438:     {file = \"kiwisolver-1.4.5-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:cdc8a402aaee9a798b50d8b827d7ecf75edc5fb35ea0f91f213ff927c15f4ff0\"},",
          "1439:     {file = \"kiwisolver-1.4.5-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:6c3bd3cde54cafb87d74d8db50b909705c62b17c2099b8f2e25b461882e544ff\"},",
          "1440:     {file = \"kiwisolver-1.4.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:955e8513d07a283056b1396e9a57ceddbd272d9252c14f154d450d227606eb54\"},",
          "1441:     {file = \"kiwisolver-1.4.5-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:346f5343b9e3f00b8db8ba359350eb124b98c99efd0b408728ac6ebf38173958\"},",
          "1442:     {file = \"kiwisolver-1.4.5-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b9098e0049e88c6a24ff64545cdfc50807818ba6c1b739cae221bbbcbc58aad3\"},",
          "1443:     {file = \"kiwisolver-1.4.5-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:00bd361b903dc4bbf4eb165f24d1acbee754fce22ded24c3d56eec268658a5cf\"},",
          "1444:     {file = \"kiwisolver-1.4.5-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:7b8b454bac16428b22560d0a1cf0a09875339cab69df61d7805bf48919415901\"},",
          "1445:     {file = \"kiwisolver-1.4.5-cp39-cp39-musllinux_1_1_ppc64le.whl\", hash = \"sha256:f1d072c2eb0ad60d4c183f3fb44ac6f73fb7a8f16a2694a91f988275cbf352f9\"},",
          "1446:     {file = \"kiwisolver-1.4.5-cp39-cp39-musllinux_1_1_s390x.whl\", hash = \"sha256:31a82d498054cac9f6d0b53d02bb85811185bcb477d4b60144f915f3b3126342\"},",
          "1447:     {file = \"kiwisolver-1.4.5-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:6512cb89e334e4700febbffaaa52761b65b4f5a3cf33f960213d5656cea36a77\"},",
          "1448:     {file = \"kiwisolver-1.4.5-cp39-cp39-win32.whl\", hash = \"sha256:9db8ea4c388fdb0f780fe91346fd438657ea602d58348753d9fb265ce1bca67f\"},",
          "1449:     {file = \"kiwisolver-1.4.5-cp39-cp39-win_amd64.whl\", hash = \"sha256:59415f46a37f7f2efeec758353dd2eae1b07640d8ca0f0c42548ec4125492635\"},",
          "1450:     {file = \"kiwisolver-1.4.5-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:5c7b3b3a728dc6faf3fc372ef24f21d1e3cee2ac3e9596691d746e5a536de920\"},",
          "1451:     {file = \"kiwisolver-1.4.5-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:620ced262a86244e2be10a676b646f29c34537d0d9cc8eb26c08f53d98013390\"},",
          "1452:     {file = \"kiwisolver-1.4.5-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:378a214a1e3bbf5ac4a8708304318b4f890da88c9e6a07699c4ae7174c09a68d\"},",
          "1453:     {file = \"kiwisolver-1.4.5-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:aaf7be1207676ac608a50cd08f102f6742dbfc70e8d60c4db1c6897f62f71523\"},",
          "1454:     {file = \"kiwisolver-1.4.5-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:ba55dce0a9b8ff59495ddd050a0225d58bd0983d09f87cfe2b6aec4f2c1234e4\"},",
          "1455:     {file = \"kiwisolver-1.4.5-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:fd32ea360bcbb92d28933fc05ed09bffcb1704ba3fc7942e81db0fd4f81a7892\"},",
          "1456:     {file = \"kiwisolver-1.4.5-pp38-pypy38_pp73-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:5e7139af55d1688f8b960ee9ad5adafc4ac17c1c473fe07133ac092310d76544\"},",
          "1457:     {file = \"kiwisolver-1.4.5-pp38-pypy38_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:dced8146011d2bc2e883f9bd68618b8247387f4bbec46d7392b3c3b032640126\"},",
          "1458:     {file = \"kiwisolver-1.4.5-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c9bf3325c47b11b2e51bca0824ea217c7cd84491d8ac4eefd1e409705ef092bd\"},",
          "1459:     {file = \"kiwisolver-1.4.5-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:5794cf59533bc3f1b1c821f7206a3617999db9fbefc345360aafe2e067514929\"},",
          "1460:     {file = \"kiwisolver-1.4.5-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:e368f200bbc2e4f905b8e71eb38b3c04333bddaa6a2464a6355487b02bb7fb09\"},",
          "1461:     {file = \"kiwisolver-1.4.5-pp39-pypy39_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e5d706eba36b4c4d5bc6c6377bb6568098765e990cfc21ee16d13963fab7b3e7\"},",
          "1462:     {file = \"kiwisolver-1.4.5-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:85267bd1aa8880a9c88a8cb71e18d3d64d2751a790e6ca6c27b8ccc724bcd5ad\"},",
          "1463:     {file = \"kiwisolver-1.4.5-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:210ef2c3a1f03272649aff1ef992df2e724748918c4bc2d5a90352849eb40bea\"},",
          "1464:     {file = \"kiwisolver-1.4.5-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:11d011a7574eb3b82bcc9c1a1d35c1d7075677fdd15de527d91b46bd35e935ee\"},",
          "1465:     {file = \"kiwisolver-1.4.5.tar.gz\", hash = \"sha256:e57e563a57fb22a142da34f38acc2fc1a5c864bc29ca1517a88abc963e60d6ec\"},",
          "1466: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1534:     {file = \"lief-0.14.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:2db3eb282a35daf51f89c6509226668a08fb6a6d1f507dd549dd9f077585db11\"},",
          "1535: ]",
          "1555: [[package]]",
          "1556: name = \"lxml\"",
          "1557: version = \"5.1.0\"",
          "",
          "[Removed Lines]",
          "1537: [[package]]",
          "1538: name = \"loguru\"",
          "1539: version = \"0.7.2\"",
          "1540: description = \"Python logging made (stupidly) simple\"",
          "1541: optional = false",
          "1542: python-versions = \">=3.5\"",
          "1543: files = [",
          "1544:     {file = \"loguru-0.7.2-py3-none-any.whl\", hash = \"sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb\"},",
          "1545:     {file = \"loguru-0.7.2.tar.gz\", hash = \"sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac\"},",
          "1546: ]",
          "1548: [package.dependencies]",
          "1549: colorama = {version = \">=0.3.4\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1550: win32-setctime = {version = \">=1.0.0\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1552: [package.extras]",
          "1553: dev = [\"Sphinx (==7.2.5)\", \"colorama (==0.4.5)\", \"colorama (==0.4.6)\", \"exceptiongroup (==1.1.3)\", \"freezegun (==1.1.0)\", \"freezegun (==1.2.2)\", \"mypy (==v0.910)\", \"mypy (==v0.971)\", \"mypy (==v1.4.1)\", \"mypy (==v1.5.1)\", \"pre-commit (==3.4.0)\", \"pytest (==6.1.2)\", \"pytest (==7.4.0)\", \"pytest-cov (==2.12.1)\", \"pytest-cov (==4.1.0)\", \"pytest-mypy-plugins (==1.9.3)\", \"pytest-mypy-plugins (==3.0.0)\", \"sphinx-autobuild (==2021.3.14)\", \"sphinx-rtd-theme (==1.3.0)\", \"tox (==3.27.1)\", \"tox (==4.11.0)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1655: [package.dependencies]",
          "1656: altgraph = \">=0.17\"",
          "1677: [[package]]",
          "1678: name = \"markupsafe\"",
          "1679: version = \"2.1.5\"",
          "",
          "[Removed Lines]",
          "1658: [[package]]",
          "1659: name = \"mako\"",
          "1660: version = \"1.3.2\"",
          "1661: description = \"A super-fast templating language that borrows the best ideas from the existing templating languages.\"",
          "1662: optional = false",
          "1663: python-versions = \">=3.8\"",
          "1664: files = [",
          "1665:     {file = \"Mako-1.3.2-py3-none-any.whl\", hash = \"sha256:32a99d70754dfce237019d17ffe4a282d2d3351b9c476e90d8a60e63f133b80c\"},",
          "1666:     {file = \"Mako-1.3.2.tar.gz\", hash = \"sha256:2a0c8ad7f6274271b3bb7467dd37cf9cc6dab4bc19cb69a4ef10669402de698e\"},",
          "1667: ]",
          "1669: [package.dependencies]",
          "1670: MarkupSafe = \">=0.9.2\"",
          "1672: [package.extras]",
          "1673: babel = [\"Babel\"]",
          "1674: lingua = [\"lingua\"]",
          "1675: testing = [\"pytest\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1743:     {file = \"MarkupSafe-2.1.5.tar.gz\", hash = \"sha256:d283d37a890ba4c1ae73ffadf8046435c76e7bc2247bbb63c00bd1a709c6544b\"},",
          "1744: ]",
          "1808: [[package]]",
          "1809: name = \"mitmproxy\"",
          "1810: version = \"10.1.5\"",
          "",
          "[Removed Lines]",
          "1746: [[package]]",
          "1747: name = \"matplotlib\"",
          "1748: version = \"3.8.3\"",
          "1749: description = \"Python plotting package\"",
          "1750: optional = false",
          "1751: python-versions = \">=3.9\"",
          "1752: files = [",
          "1753:     {file = \"matplotlib-3.8.3-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:cf60138ccc8004f117ab2a2bad513cc4d122e55864b4fe7adf4db20ca68a078f\"},",
          "1754:     {file = \"matplotlib-3.8.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5f557156f7116be3340cdeef7f128fa99b0d5d287d5f41a16e169819dcf22357\"},",
          "1755:     {file = \"matplotlib-3.8.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f386cf162b059809ecfac3bcc491a9ea17da69fa35c8ded8ad154cd4b933d5ec\"},",
          "1756:     {file = \"matplotlib-3.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b3c5f96f57b0369c288bf6f9b5274ba45787f7e0589a34d24bdbaf6d3344632f\"},",
          "1757:     {file = \"matplotlib-3.8.3-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:83e0f72e2c116ca7e571c57aa29b0fe697d4c6425c4e87c6e994159e0c008635\"},",
          "1758:     {file = \"matplotlib-3.8.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:1c5c8290074ba31a41db1dc332dc2b62def469ff33766cbe325d32a3ee291aea\"},",
          "1759:     {file = \"matplotlib-3.8.3-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:5184e07c7e1d6d1481862ee361905b7059f7fe065fc837f7c3dc11eeb3f2f900\"},",
          "1760:     {file = \"matplotlib-3.8.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:d7e7e0993d0758933b1a241a432b42c2db22dfa37d4108342ab4afb9557cbe3e\"},",
          "1761:     {file = \"matplotlib-3.8.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:04b36ad07eac9740fc76c2aa16edf94e50b297d6eb4c081e3add863de4bb19a7\"},",
          "1762:     {file = \"matplotlib-3.8.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7c42dae72a62f14982f1474f7e5c9959fc4bc70c9de11cc5244c6e766200ba65\"},",
          "1763:     {file = \"matplotlib-3.8.3-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:bf5932eee0d428192c40b7eac1399d608f5d995f975cdb9d1e6b48539a5ad8d0\"},",
          "1764:     {file = \"matplotlib-3.8.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:40321634e3a05ed02abf7c7b47a50be50b53ef3eaa3a573847431a545585b407\"},",
          "1765:     {file = \"matplotlib-3.8.3-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:09074f8057917d17ab52c242fdf4916f30e99959c1908958b1fc6032e2d0f6d4\"},",
          "1766:     {file = \"matplotlib-3.8.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:5745f6d0fb5acfabbb2790318db03809a253096e98c91b9a31969df28ee604aa\"},",
          "1767:     {file = \"matplotlib-3.8.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b97653d869a71721b639714b42d87cda4cfee0ee74b47c569e4874c7590c55c5\"},",
          "1768:     {file = \"matplotlib-3.8.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:242489efdb75b690c9c2e70bb5c6550727058c8a614e4c7716f363c27e10bba1\"},",
          "1769:     {file = \"matplotlib-3.8.3-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:83c0653c64b73926730bd9ea14aa0f50f202ba187c307a881673bad4985967b7\"},",
          "1770:     {file = \"matplotlib-3.8.3-cp312-cp312-win_amd64.whl\", hash = \"sha256:ef6c1025a570354297d6c15f7d0f296d95f88bd3850066b7f1e7b4f2f4c13a39\"},",
          "1771:     {file = \"matplotlib-3.8.3-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:c4af3f7317f8a1009bbb2d0bf23dfaba859eb7dd4ccbd604eba146dccaaaf0a4\"},",
          "1772:     {file = \"matplotlib-3.8.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:4c6e00a65d017d26009bac6808f637b75ceade3e1ff91a138576f6b3065eeeba\"},",
          "1773:     {file = \"matplotlib-3.8.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e7b49ab49a3bea17802df6872f8d44f664ba8f9be0632a60c99b20b6db2165b7\"},",
          "1774:     {file = \"matplotlib-3.8.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6728dde0a3997396b053602dbd907a9bd64ec7d5cf99e728b404083698d3ca01\"},",
          "1775:     {file = \"matplotlib-3.8.3-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:813925d08fb86aba139f2d31864928d67511f64e5945ca909ad5bc09a96189bb\"},",
          "1776:     {file = \"matplotlib-3.8.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:cd3a0c2be76f4e7be03d34a14d49ded6acf22ef61f88da600a18a5cd8b3c5f3c\"},",
          "1777:     {file = \"matplotlib-3.8.3-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:fa93695d5c08544f4a0dfd0965f378e7afc410d8672816aff1e81be1f45dbf2e\"},",
          "1778:     {file = \"matplotlib-3.8.3-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e9764df0e8778f06414b9d281a75235c1e85071f64bb5d71564b97c1306a2afc\"},",
          "1779:     {file = \"matplotlib-3.8.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:5e431a09e6fab4012b01fc155db0ce6dccacdbabe8198197f523a4ef4805eb26\"},",
          "1780:     {file = \"matplotlib-3.8.3.tar.gz\", hash = \"sha256:7b416239e9ae38be54b028abbf9048aff5054a9aba5416bef0bd17f9162ce161\"},",
          "1781: ]",
          "1783: [package.dependencies]",
          "1784: contourpy = \">=1.0.1\"",
          "1785: cycler = \">=0.10\"",
          "1786: fonttools = \">=4.22.0\"",
          "1787: kiwisolver = \">=1.3.1\"",
          "1788: numpy = \">=1.21,<2\"",
          "1789: packaging = \">=20.0\"",
          "1790: pillow = \">=8\"",
          "1791: pyparsing = \">=2.3.1\"",
          "1792: python-dateutil = \">=2.7\"",
          "1794: [[package]]",
          "1795: name = \"matplotlib-inline\"",
          "1796: version = \"0.1.6\"",
          "1797: description = \"Inline Matplotlib backend for Jupyter\"",
          "1798: optional = false",
          "1799: python-versions = \">=3.5\"",
          "1800: files = [",
          "1801:     {file = \"matplotlib-inline-0.1.6.tar.gz\", hash = \"sha256:f887e5f10ba98e8d2b150ddcf4702c1e5f8b3a20005eb0f74bfdbd360ee6f304\"},",
          "1802:     {file = \"matplotlib_inline-0.1.6-py3-none-any.whl\", hash = \"sha256:f1f41aab5328aa5aaea9b16d083b128102f8712542f819fe7e6a420ff581b311\"},",
          "1803: ]",
          "1805: [package.dependencies]",
          "1806: traitlets = \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1951:     {file = \"msgpack-1.0.8.tar.gz\", hash = \"sha256:95c02b0e27e706e48d0e5426d1710ca78e0f0628d6e89d5b5a5b91a5f12274f3\"},",
          "1952: ]",
          "2042: [[package]]",
          "2043: name = \"openstep-parser\"",
          "2044: version = \"1.5.4\"",
          "",
          "[Removed Lines]",
          "1954: [[package]]",
          "1955: name = \"mutf8\"",
          "1956: version = \"1.0.6\"",
          "1957: description = \"Fast MUTF-8 encoder & decoder\"",
          "1958: optional = false",
          "1959: python-versions = \"*\"",
          "1960: files = [",
          "1961:     {file = \"mutf8-1.0.6-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:74ae69cd9790fa4f0f6a7b0db503c459c955b8235551baf683cb4f3f31677063\"},",
          "1962:     {file = \"mutf8-1.0.6-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fcf20045263ce8ebd6c47e94c9477ab0d388ed169a69ad2d8f19bcbf0b87f401\"},",
          "1963:     {file = \"mutf8-1.0.6-cp36-cp36m-win_amd64.whl\", hash = \"sha256:83c38555db263e369e95533d80848d8e4296e302303b72082b98c3124cba504d\"},",
          "1964:     {file = \"mutf8-1.0.6-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:e09f4a19e5500699bb42074890b463b785ab9a8d95c7d793e590405f3b4b29d7\"},",
          "1965:     {file = \"mutf8-1.0.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1f4f497f20e3ea7968496c1eb1e1cb259c53ad040879e1e83ffb755a12112a04\"},",
          "1966:     {file = \"mutf8-1.0.6-cp37-cp37m-win_amd64.whl\", hash = \"sha256:1925f5490fabca5c34138ed6644a1a093b0d935252207a5e89664097ff14114c\"},",
          "1967:     {file = \"mutf8-1.0.6-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:018ceda7cdb66a1d3e9c07a71a1a35b92570fbb1230887a34ad784ff4d349981\"},",
          "1968:     {file = \"mutf8-1.0.6-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7a67e88534a7641c513dad13f2f7913239808df4a5d0b822eda0ff9024431e0b\"},",
          "1969:     {file = \"mutf8-1.0.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:0d1325d42806b31901a0ddd4ef199144e508fd9f6f3c75a8305d5979365b66c3\"},",
          "1970:     {file = \"mutf8-1.0.6-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:3207a071ead14d928213019f12b5554b179f61a16a8094ed660b755990db3652\"},",
          "1971:     {file = \"mutf8-1.0.6-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6172b5babc0c819636830fc79ca9c3a82662ef1ee764c82c1b59fbf6ea54d82f\"},",
          "1972:     {file = \"mutf8-1.0.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:4f7a24b55c53d508a7ecb2e8c6fe14e4fcefaa4c48100b446e73217ade7875a0\"},",
          "1973:     {file = \"mutf8-1.0.6.tar.gz\", hash = \"sha256:1bbbefb67c2e5a57104750bb04b0912200b57b2fa9841be245279e83859cb346\"},",
          "1974: ]",
          "1976: [package.extras]",
          "1977: test = [\"pytest\", \"pytest-benchmark\"]",
          "1979: [[package]]",
          "1980: name = \"networkx\"",
          "1981: version = \"3.2.1\"",
          "1982: description = \"Python package for creating and manipulating graphs and networks\"",
          "1983: optional = false",
          "1984: python-versions = \">=3.9\"",
          "1985: files = [",
          "1986:     {file = \"networkx-3.2.1-py3-none-any.whl\", hash = \"sha256:f18c69adc97877c42332c170849c96cefa91881c99a7cb3e95b7c659ebdc1ec2\"},",
          "1987:     {file = \"networkx-3.2.1.tar.gz\", hash = \"sha256:9f1bb5cf3409bf324e0a722c20bdb4c20ee39bf1c30ce8ae499c8502b0b5e0c6\"},",
          "1988: ]",
          "1990: [package.extras]",
          "1991: default = [\"matplotlib (>=3.5)\", \"numpy (>=1.22)\", \"pandas (>=1.4)\", \"scipy (>=1.9,!=1.11.0,!=1.11.1)\"]",
          "1992: developer = [\"changelist (==0.4)\", \"mypy (>=1.1)\", \"pre-commit (>=3.2)\", \"rtoml\"]",
          "1993: doc = [\"nb2plots (>=0.7)\", \"nbconvert (<7.9)\", \"numpydoc (>=1.6)\", \"pillow (>=9.4)\", \"pydata-sphinx-theme (>=0.14)\", \"sphinx (>=7)\", \"sphinx-gallery (>=0.14)\", \"texext (>=0.6.7)\"]",
          "1994: extra = [\"lxml (>=4.6)\", \"pydot (>=1.4.2)\", \"pygraphviz (>=1.11)\", \"sympy (>=1.10)\"]",
          "1995: test = [\"pytest (>=7.2)\", \"pytest-cov (>=4.0)\"]",
          "1997: [[package]]",
          "1998: name = \"numpy\"",
          "1999: version = \"1.26.4\"",
          "2000: description = \"Fundamental package for array computing in Python\"",
          "2001: optional = false",
          "2002: python-versions = \">=3.9\"",
          "2003: files = [",
          "2004:     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},",
          "2005:     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},",
          "2006:     {file = \"numpy-1.26.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d209d8969599b27ad20994c8e41936ee0964e6da07478d6c35016bc386b66ad4\"},",
          "2007:     {file = \"numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ffa75af20b44f8dba823498024771d5ac50620e6915abac414251bd971b4529f\"},",
          "2008:     {file = \"numpy-1.26.4-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:62b8e4b1e28009ef2846b4c7852046736bab361f7aeadeb6a5b89ebec3c7055a\"},",
          "2009:     {file = \"numpy-1.26.4-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4abb4f9001ad2858e7ac189089c42178fcce737e4169dc61321660f1a96c7d2\"},",
          "2010:     {file = \"numpy-1.26.4-cp310-cp310-win32.whl\", hash = \"sha256:bfe25acf8b437eb2a8b2d49d443800a5f18508cd811fea3181723922a8a82b07\"},",
          "2011:     {file = \"numpy-1.26.4-cp310-cp310-win_amd64.whl\", hash = \"sha256:b97fe8060236edf3662adfc2c633f56a08ae30560c56310562cb4f95500022d5\"},",
          "2012:     {file = \"numpy-1.26.4-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:4c66707fabe114439db9068ee468c26bbdf909cac0fb58686a42a24de1760c71\"},",
          "2013:     {file = \"numpy-1.26.4-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:edd8b5fe47dab091176d21bb6de568acdd906d1887a4584a15a9a96a1dca06ef\"},",
          "2014:     {file = \"numpy-1.26.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7ab55401287bfec946ced39700c053796e7cc0e3acbef09993a9ad2adba6ca6e\"},",
          "2015:     {file = \"numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:666dbfb6ec68962c033a450943ded891bed2d54e6755e35e5835d63f4f6931d5\"},",
          "2016:     {file = \"numpy-1.26.4-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:96ff0b2ad353d8f990b63294c8986f1ec3cb19d749234014f4e7eb0112ceba5a\"},",
          "2017:     {file = \"numpy-1.26.4-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:60dedbb91afcbfdc9bc0b1f3f402804070deed7392c23eb7a7f07fa857868e8a\"},",
          "2018:     {file = \"numpy-1.26.4-cp311-cp311-win32.whl\", hash = \"sha256:1af303d6b2210eb850fcf03064d364652b7120803a0b872f5211f5234b399f20\"},",
          "2019:     {file = \"numpy-1.26.4-cp311-cp311-win_amd64.whl\", hash = \"sha256:cd25bcecc4974d09257ffcd1f098ee778f7834c3ad767fe5db785be9a4aa9cb2\"},",
          "2020:     {file = \"numpy-1.26.4-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b3ce300f3644fb06443ee2222c2201dd3a89ea6040541412b8fa189341847218\"},",
          "2021:     {file = \"numpy-1.26.4-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:03a8c78d01d9781b28a6989f6fa1bb2c4f2d51201cf99d3dd875df6fbd96b23b\"},",
          "2022:     {file = \"numpy-1.26.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9fad7dcb1aac3c7f0584a5a8133e3a43eeb2fe127f47e3632d43d677c66c102b\"},",
          "2023:     {file = \"numpy-1.26.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:675d61ffbfa78604709862923189bad94014bef562cc35cf61d3a07bba02a7ed\"},",
          "2024:     {file = \"numpy-1.26.4-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ab47dbe5cc8210f55aa58e4805fe224dac469cde56b9f731a4c098b91917159a\"},",
          "2025:     {file = \"numpy-1.26.4-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:1dda2e7b4ec9dd512f84935c5f126c8bd8b9f2fc001e9f54af255e8c5f16b0e0\"},",
          "2026:     {file = \"numpy-1.26.4-cp312-cp312-win32.whl\", hash = \"sha256:50193e430acfc1346175fcbdaa28ffec49947a06918b7b92130744e81e640110\"},",
          "2027:     {file = \"numpy-1.26.4-cp312-cp312-win_amd64.whl\", hash = \"sha256:08beddf13648eb95f8d867350f6a018a4be2e5ad54c8d8caed89ebca558b2818\"},",
          "2028:     {file = \"numpy-1.26.4-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:7349ab0fa0c429c82442a27a9673fc802ffdb7c7775fad780226cb234965e53c\"},",
          "2029:     {file = \"numpy-1.26.4-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:52b8b60467cd7dd1e9ed082188b4e6bb35aa5cdd01777621a1658910745b90be\"},",
          "2030:     {file = \"numpy-1.26.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d5241e0a80d808d70546c697135da2c613f30e28251ff8307eb72ba696945764\"},",
          "2031:     {file = \"numpy-1.26.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f870204a840a60da0b12273ef34f7051e98c3b5961b61b0c2c1be6dfd64fbcd3\"},",
          "2032:     {file = \"numpy-1.26.4-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:679b0076f67ecc0138fd2ede3a8fd196dddc2ad3254069bcb9faf9a79b1cebcd\"},",
          "2033:     {file = \"numpy-1.26.4-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:47711010ad8555514b434df65f7d7b076bb8261df1ca9bb78f53d3b2db02e95c\"},",
          "2034:     {file = \"numpy-1.26.4-cp39-cp39-win32.whl\", hash = \"sha256:a354325ee03388678242a4d7ebcd08b5c727033fcff3b2f536aea978e15ee9e6\"},",
          "2035:     {file = \"numpy-1.26.4-cp39-cp39-win_amd64.whl\", hash = \"sha256:3373d5d70a5fe74a2c1bb6d2cfd9609ecf686d47a2d7b1d37a8f3b6bf6003aea\"},",
          "2036:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:afedb719a9dcfc7eaf2287b839d8198e06dcd4cb5d276a3df279231138e83d30\"},",
          "2037:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:95a7476c59002f2f6c590b9b7b998306fba6a5aa646b1e22ddfeaf8f78c3a29c\"},",
          "2038:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:7e50d0a0cc3189f9cb0aeb3a6a6af18c16f59f004b866cd2be1c14b36134a4a0\"},",
          "2039:     {file = \"numpy-1.26.4.tar.gz\", hash = \"sha256:2a02aba9ed12e4ac4eb3ea9421c420301a0c6460d9830d74a9df87efa4912010\"},",
          "2040: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2085: gssapi = [\"gssapi (>=1.4.1)\", \"pyasn1 (>=0.1.7)\", \"pywin32 (>=2.1.8)\"]",
          "2086: invoke = [\"invoke (>=2.0)\"]",
          "2103: [[package]]",
          "2104: name = \"passlib\"",
          "2105: version = \"1.7.4\"",
          "",
          "[Removed Lines]",
          "2088: [[package]]",
          "2089: name = \"parso\"",
          "2090: version = \"0.8.3\"",
          "2091: description = \"A Python Parser\"",
          "2092: optional = false",
          "2093: python-versions = \">=3.6\"",
          "2094: files = [",
          "2095:     {file = \"parso-0.8.3-py2.py3-none-any.whl\", hash = \"sha256:c001d4636cd3aecdaf33cbb40aebb59b094be2a74c556778ef5576c175e19e75\"},",
          "2096:     {file = \"parso-0.8.3.tar.gz\", hash = \"sha256:8c07be290bb59f03588915921e29e8a50002acaf2cdc5fa0e0114f91709fafa0\"},",
          "2097: ]",
          "2099: [package.extras]",
          "2100: qa = [\"flake8 (==3.8.3)\", \"mypy (==0.782)\"]",
          "2101: testing = [\"docopt\", \"pytest (<6.0.0)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2139:     {file = \"peewee-3.17.1.tar.gz\", hash = \"sha256:e009ac4227c4fdc0058a56e822ad5987684f0a1fbb20fed577200785102581c3\"},",
          "2140: ]",
          "2255: [[package]]",
          "2256: name = \"protobuf\"",
          "2257: version = \"4.25.3\"",
          "",
          "[Removed Lines]",
          "2142: [[package]]",
          "2143: name = \"pexpect\"",
          "2144: version = \"4.9.0\"",
          "2145: description = \"Pexpect allows easy control of interactive console applications.\"",
          "2146: optional = false",
          "2147: python-versions = \"*\"",
          "2148: files = [",
          "2149:     {file = \"pexpect-4.9.0-py2.py3-none-any.whl\", hash = \"sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523\"},",
          "2150:     {file = \"pexpect-4.9.0.tar.gz\", hash = \"sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f\"},",
          "2151: ]",
          "2153: [package.dependencies]",
          "2154: ptyprocess = \">=0.5\"",
          "2156: [[package]]",
          "2157: name = \"pillow\"",
          "2158: version = \"10.2.0\"",
          "2159: description = \"Python Imaging Library (Fork)\"",
          "2160: optional = false",
          "2161: python-versions = \">=3.8\"",
          "2162: files = [",
          "2163:     {file = \"pillow-10.2.0-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:7823bdd049099efa16e4246bdf15e5a13dbb18a51b68fa06d6c1d4d8b99a796e\"},",
          "2164:     {file = \"pillow-10.2.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:83b2021f2ade7d1ed556bc50a399127d7fb245e725aa0113ebd05cfe88aaf588\"},",
          "2165:     {file = \"pillow-10.2.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6fad5ff2f13d69b7e74ce5b4ecd12cc0ec530fcee76356cac6742785ff71c452\"},",
          "2166:     {file = \"pillow-10.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:da2b52b37dad6d9ec64e653637a096905b258d2fc2b984c41ae7d08b938a67e4\"},",
          "2167:     {file = \"pillow-10.2.0-cp310-cp310-manylinux_2_28_aarch64.whl\", hash = \"sha256:47c0995fc4e7f79b5cfcab1fc437ff2890b770440f7696a3ba065ee0fd496563\"},",
          "2168:     {file = \"pillow-10.2.0-cp310-cp310-manylinux_2_28_x86_64.whl\", hash = \"sha256:322bdf3c9b556e9ffb18f93462e5f749d3444ce081290352c6070d014c93feb2\"},",
          "2169:     {file = \"pillow-10.2.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:51f1a1bffc50e2e9492e87d8e09a17c5eea8409cda8d3f277eb6edc82813c17c\"},",
          "2170:     {file = \"pillow-10.2.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:69ffdd6120a4737710a9eee73e1d2e37db89b620f702754b8f6e62594471dee0\"},",
          "2171:     {file = \"pillow-10.2.0-cp310-cp310-win32.whl\", hash = \"sha256:c6dafac9e0f2b3c78df97e79af707cdc5ef8e88208d686a4847bab8266870023\"},",
          "2172:     {file = \"pillow-10.2.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:aebb6044806f2e16ecc07b2a2637ee1ef67a11840a66752751714a0d924adf72\"},",
          "2173:     {file = \"pillow-10.2.0-cp310-cp310-win_arm64.whl\", hash = \"sha256:7049e301399273a0136ff39b84c3678e314f2158f50f517bc50285fb5ec847ad\"},",
          "2174:     {file = \"pillow-10.2.0-cp311-cp311-macosx_10_10_x86_64.whl\", hash = \"sha256:35bb52c37f256f662abdfa49d2dfa6ce5d93281d323a9af377a120e89a9eafb5\"},",
          "2175:     {file = \"pillow-10.2.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:9c23f307202661071d94b5e384e1e1dc7dfb972a28a2310e4ee16103e66ddb67\"},",
          "2176:     {file = \"pillow-10.2.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:773efe0603db30c281521a7c0214cad7836c03b8ccff897beae9b47c0b657d61\"},",
          "2177:     {file = \"pillow-10.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:11fa2e5984b949b0dd6d7a94d967743d87c577ff0b83392f17cb3990d0d2fd6e\"},",
          "2178:     {file = \"pillow-10.2.0-cp311-cp311-manylinux_2_28_aarch64.whl\", hash = \"sha256:716d30ed977be8b37d3ef185fecb9e5a1d62d110dfbdcd1e2a122ab46fddb03f\"},",
          "2179:     {file = \"pillow-10.2.0-cp311-cp311-manylinux_2_28_x86_64.whl\", hash = \"sha256:a086c2af425c5f62a65e12fbf385f7c9fcb8f107d0849dba5839461a129cf311\"},",
          "2180:     {file = \"pillow-10.2.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:c8de2789052ed501dd829e9cae8d3dcce7acb4777ea4a479c14521c942d395b1\"},",
          "2181:     {file = \"pillow-10.2.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:609448742444d9290fd687940ac0b57fb35e6fd92bdb65386e08e99af60bf757\"},",
          "2182:     {file = \"pillow-10.2.0-cp311-cp311-win32.whl\", hash = \"sha256:823ef7a27cf86df6597fa0671066c1b596f69eba53efa3d1e1cb8b30f3533068\"},",
          "2183:     {file = \"pillow-10.2.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:1da3b2703afd040cf65ec97efea81cfba59cdbed9c11d8efc5ab09df9509fc56\"},",
          "2184:     {file = \"pillow-10.2.0-cp311-cp311-win_arm64.whl\", hash = \"sha256:edca80cbfb2b68d7b56930b84a0e45ae1694aeba0541f798e908a49d66b837f1\"},",
          "2185:     {file = \"pillow-10.2.0-cp312-cp312-macosx_10_10_x86_64.whl\", hash = \"sha256:1b5e1b74d1bd1b78bc3477528919414874748dd363e6272efd5abf7654e68bef\"},",
          "2186:     {file = \"pillow-10.2.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:0eae2073305f451d8ecacb5474997c08569fb4eb4ac231ffa4ad7d342fdc25ac\"},",
          "2187:     {file = \"pillow-10.2.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b7c2286c23cd350b80d2fc9d424fc797575fb16f854b831d16fd47ceec078f2c\"},",
          "2188:     {file = \"pillow-10.2.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1e23412b5c41e58cec602f1135c57dfcf15482013ce6e5f093a86db69646a5aa\"},",
          "2189:     {file = \"pillow-10.2.0-cp312-cp312-manylinux_2_28_aarch64.whl\", hash = \"sha256:52a50aa3fb3acb9cf7213573ef55d31d6eca37f5709c69e6858fe3bc04a5c2a2\"},",
          "2190:     {file = \"pillow-10.2.0-cp312-cp312-manylinux_2_28_x86_64.whl\", hash = \"sha256:127cee571038f252a552760076407f9cff79761c3d436a12af6000cd182a9d04\"},",
          "2191:     {file = \"pillow-10.2.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:8d12251f02d69d8310b046e82572ed486685c38f02176bd08baf216746eb947f\"},",
          "2192:     {file = \"pillow-10.2.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:54f1852cd531aa981bc0965b7d609f5f6cc8ce8c41b1139f6ed6b3c54ab82bfb\"},",
          "2193:     {file = \"pillow-10.2.0-cp312-cp312-win32.whl\", hash = \"sha256:257d8788df5ca62c980314053197f4d46eefedf4e6175bc9412f14412ec4ea2f\"},",
          "2194:     {file = \"pillow-10.2.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:154e939c5f0053a383de4fd3d3da48d9427a7e985f58af8e94d0b3c9fcfcf4f9\"},",
          "2195:     {file = \"pillow-10.2.0-cp312-cp312-win_arm64.whl\", hash = \"sha256:f379abd2f1e3dddb2b61bc67977a6b5a0a3f7485538bcc6f39ec76163891ee48\"},",
          "2196:     {file = \"pillow-10.2.0-cp38-cp38-macosx_10_10_x86_64.whl\", hash = \"sha256:8373c6c251f7ef8bda6675dd6d2b3a0fcc31edf1201266b5cf608b62a37407f9\"},",
          "2197:     {file = \"pillow-10.2.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:870ea1ada0899fd0b79643990809323b389d4d1d46c192f97342eeb6ee0b8483\"},",
          "2198:     {file = \"pillow-10.2.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b4b6b1e20608493548b1f32bce8cca185bf0480983890403d3b8753e44077129\"},",
          "2199:     {file = \"pillow-10.2.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3031709084b6e7852d00479fd1d310b07d0ba82765f973b543c8af5061cf990e\"},",
          "2200:     {file = \"pillow-10.2.0-cp38-cp38-manylinux_2_28_aarch64.whl\", hash = \"sha256:3ff074fc97dd4e80543a3e91f69d58889baf2002b6be64347ea8cf5533188213\"},",
          "2201:     {file = \"pillow-10.2.0-cp38-cp38-manylinux_2_28_x86_64.whl\", hash = \"sha256:cb4c38abeef13c61d6916f264d4845fab99d7b711be96c326b84df9e3e0ff62d\"},",
          "2202:     {file = \"pillow-10.2.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:b1b3020d90c2d8e1dae29cf3ce54f8094f7938460fb5ce8bc5c01450b01fbaf6\"},",
          "2203:     {file = \"pillow-10.2.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:170aeb00224ab3dc54230c797f8404507240dd868cf52066f66a41b33169bdbe\"},",
          "2204:     {file = \"pillow-10.2.0-cp38-cp38-win32.whl\", hash = \"sha256:c4225f5220f46b2fde568c74fca27ae9771536c2e29d7c04f4fb62c83275ac4e\"},",
          "2205:     {file = \"pillow-10.2.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:0689b5a8c5288bc0504d9fcee48f61a6a586b9b98514d7d29b840143d6734f39\"},",
          "2206:     {file = \"pillow-10.2.0-cp39-cp39-macosx_10_10_x86_64.whl\", hash = \"sha256:b792a349405fbc0163190fde0dc7b3fef3c9268292586cf5645598b48e63dc67\"},",
          "2207:     {file = \"pillow-10.2.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c570f24be1e468e3f0ce7ef56a89a60f0e05b30a3669a459e419c6eac2c35364\"},",
          "2208:     {file = \"pillow-10.2.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d8ecd059fdaf60c1963c58ceb8997b32e9dc1b911f5da5307aab614f1ce5c2fb\"},",
          "2209:     {file = \"pillow-10.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c365fd1703040de1ec284b176d6af5abe21b427cb3a5ff68e0759e1e313a5e7e\"},",
          "2210:     {file = \"pillow-10.2.0-cp39-cp39-manylinux_2_28_aarch64.whl\", hash = \"sha256:70c61d4c475835a19b3a5aa42492409878bbca7438554a1f89d20d58a7c75c01\"},",
          "2211:     {file = \"pillow-10.2.0-cp39-cp39-manylinux_2_28_x86_64.whl\", hash = \"sha256:b6f491cdf80ae540738859d9766783e3b3c8e5bd37f5dfa0b76abdecc5081f13\"},",
          "2212:     {file = \"pillow-10.2.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:9d189550615b4948f45252d7f005e53c2040cea1af5b60d6f79491a6e147eef7\"},",
          "2213:     {file = \"pillow-10.2.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:49d9ba1ed0ef3e061088cd1e7538a0759aab559e2e0a80a36f9fd9d8c0c21591\"},",
          "2214:     {file = \"pillow-10.2.0-cp39-cp39-win32.whl\", hash = \"sha256:babf5acfede515f176833ed6028754cbcd0d206f7f614ea3447d67c33be12516\"},",
          "2215:     {file = \"pillow-10.2.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:0304004f8067386b477d20a518b50f3fa658a28d44e4116970abfcd94fac34a8\"},",
          "2216:     {file = \"pillow-10.2.0-cp39-cp39-win_arm64.whl\", hash = \"sha256:0fb3e7fc88a14eacd303e90481ad983fd5b69c761e9e6ef94c983f91025da869\"},",
          "2217:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-macosx_10_10_x86_64.whl\", hash = \"sha256:322209c642aabdd6207517e9739c704dc9f9db943015535783239022002f054a\"},",
          "2218:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3eedd52442c0a5ff4f887fab0c1c0bb164d8635b32c894bc1faf4c618dd89df2\"},",
          "2219:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cb28c753fd5eb3dd859b4ee95de66cc62af91bcff5db5f2571d32a520baf1f04\"},",
          "2220:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:33870dc4653c5017bf4c8873e5488d8f8d5f8935e2f1fb9a2208c47cdd66efd2\"},",
          "2221:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:3c31822339516fb3c82d03f30e22b1d038da87ef27b6a78c9549888f8ceda39a\"},",
          "2222:     {file = \"pillow-10.2.0-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:a2b56ba36e05f973d450582fb015594aaa78834fefe8dfb8fcd79b93e64ba4c6\"},",
          "2223:     {file = \"pillow-10.2.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:d8e6aeb9201e655354b3ad049cb77d19813ad4ece0df1249d3c793de3774f8c7\"},",
          "2224:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-macosx_10_10_x86_64.whl\", hash = \"sha256:2247178effb34a77c11c0e8ac355c7a741ceca0a732b27bf11e747bbc950722f\"},",
          "2225:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:15587643b9e5eb26c48e49a7b33659790d28f190fc514a322d55da2fb5c2950e\"},",
          "2226:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:753cd8f2086b2b80180d9b3010dd4ed147efc167c90d3bf593fe2af21265e5a5\"},",
          "2227:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:7c8f97e8e7a9009bcacbe3766a36175056c12f9a44e6e6f2d5caad06dcfbf03b\"},",
          "2228:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:d1b35bcd6c5543b9cb547dee3150c93008f8dd0f1fef78fc0cd2b141c5baf58a\"},",
          "2229:     {file = \"pillow-10.2.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:fe4c15f6c9285dc54ce6553a3ce908ed37c8f3825b5a51a15c91442bb955b868\"},",
          "2230:     {file = \"pillow-10.2.0.tar.gz\", hash = \"sha256:e87f0b2c78157e12d7686b27d63c070fd65d994e8ddae6f328e0dcf4a0cd007e\"},",
          "2231: ]",
          "2233: [package.extras]",
          "2234: docs = [\"furo\", \"olefile\", \"sphinx (>=2.4)\", \"sphinx-copybutton\", \"sphinx-inline-tabs\", \"sphinx-removed-in\", \"sphinxext-opengraph\"]",
          "2235: fpx = [\"olefile\"]",
          "2236: mic = [\"olefile\"]",
          "2237: tests = [\"check-manifest\", \"coverage\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\"]",
          "2238: typing = [\"typing-extensions\"]",
          "2239: xmp = [\"defusedxml\"]",
          "2241: [[package]]",
          "2242: name = \"prompt-toolkit\"",
          "2243: version = \"3.0.43\"",
          "2244: description = \"Library for building powerful interactive command lines in Python\"",
          "2245: optional = false",
          "2246: python-versions = \">=3.7.0\"",
          "2247: files = [",
          "2248:     {file = \"prompt_toolkit-3.0.43-py3-none-any.whl\", hash = \"sha256:a11a29cb3bf0a28a387fe5122cdb649816a957cd9261dcedf8c9f1fef33eacf6\"},",
          "2249:     {file = \"prompt_toolkit-3.0.43.tar.gz\", hash = \"sha256:3527b7af26106cbc65a040bcc84839a3566ec1b051bb0bfe953631e704b0ff7d\"},",
          "2250: ]",
          "2252: [package.dependencies]",
          "2253: wcwidth = \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2300: [package.extras]",
          "2301: test = [\"enum34\", \"ipaddress\", \"mock\", \"pywin32\", \"wmi\"]",
          "2314: [[package]]",
          "2315: name = \"publicsuffix2\"",
          "2316: version = \"2.20191221\"",
          "",
          "[Removed Lines]",
          "2303: [[package]]",
          "2304: name = \"ptyprocess\"",
          "2305: version = \"0.7.0\"",
          "2306: description = \"Run a subprocess in a pseudo terminal\"",
          "2307: optional = false",
          "2308: python-versions = \"*\"",
          "2309: files = [",
          "2310:     {file = \"ptyprocess-0.7.0-py2.py3-none-any.whl\", hash = \"sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35\"},",
          "2311:     {file = \"ptyprocess-0.7.0.tar.gz\", hash = \"sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220\"},",
          "2312: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2322:     {file = \"publicsuffix2-2.20191221.tar.gz\", hash = \"sha256:00f8cc31aa8d0d5592a5ced19cccba7de428ebca985db26ac852d920ddd6fe7b\"},",
          "2323: ]",
          "2339: [[package]]",
          "2340: name = \"pyasn1\"",
          "2341: version = \"0.5.1\"",
          "",
          "[Removed Lines]",
          "2325: [[package]]",
          "2326: name = \"pure-eval\"",
          "2327: version = \"0.2.2\"",
          "2328: description = \"Safely evaluate AST nodes without side effects\"",
          "2329: optional = false",
          "2330: python-versions = \"*\"",
          "2331: files = [",
          "2332:     {file = \"pure_eval-0.2.2-py3-none-any.whl\", hash = \"sha256:01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350\"},",
          "2333:     {file = \"pure_eval-0.2.2.tar.gz\", hash = \"sha256:2b45320af6dfaa1750f543d714b6d1c520a1688dec6fd24d339063ce0aaa9ac3\"},",
          "2334: ]",
          "2336: [package.extras]",
          "2337: tests = [\"pytest\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2387: docs = [\"sphinx (>=1.4.8)\"]",
          "2388: test = [\"codecov (>=2.0.5)\", \"hypothesis (>=3.5.3)\", \"mock (>=1.0.1)\", \"pytest (>=3.0.3)\", \"pytest-cov (>=2.2.1)\", \"pytest-faulthandler (>=1.3.0,<2)\", \"pytest-timeout (>=1.0.0,<2)\", \"wheel (>=0.29)\"]",
          "2424: [[package]]",
          "2425: name = \"pylsqpack\"",
          "2426: version = \"0.3.18\"",
          "",
          "[Removed Lines]",
          "2390: [[package]]",
          "2391: name = \"pydot\"",
          "2392: version = \"2.0.0\"",
          "2393: description = \"Python interface to Graphviz's Dot\"",
          "2394: optional = false",
          "2395: python-versions = \">=3.7\"",
          "2396: files = [",
          "2397:     {file = \"pydot-2.0.0-py3-none-any.whl\", hash = \"sha256:408a47913ea7bd5d2d34b274144880c1310c4aee901f353cf21fe2e526a4ea28\"},",
          "2398:     {file = \"pydot-2.0.0.tar.gz\", hash = \"sha256:60246af215123fa062f21cd791be67dda23a6f280df09f68919e637a1e4f3235\"},",
          "2399: ]",
          "2401: [package.dependencies]",
          "2402: pyparsing = \">=3\"",
          "2404: [package.extras]",
          "2405: dev = [\"black\", \"chardet\"]",
          "2406: release = [\"zest.releaser[recommended]\"]",
          "2407: tests = [\"black\", \"chardet\", \"tox\"]",
          "2409: [[package]]",
          "2410: name = \"pygments\"",
          "2411: version = \"2.17.2\"",
          "2412: description = \"Pygments is a syntax highlighting package written in Python.\"",
          "2413: optional = false",
          "2414: python-versions = \">=3.7\"",
          "2415: files = [",
          "2416:     {file = \"pygments-2.17.2-py3-none-any.whl\", hash = \"sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c\"},",
          "2417:     {file = \"pygments-2.17.2.tar.gz\", hash = \"sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367\"},",
          "2418: ]",
          "2420: [package.extras]",
          "2421: plugins = [\"importlib-metadata\"]",
          "2422: windows-terminal = [\"colorama (>=0.4.6)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2516:     {file = \"pyperclip-1.8.2.tar.gz\", hash = \"sha256:105254a8b04934f0bc84e9c24eb360a591aaf6535c9def5f29d92af107a9bf57\"},",
          "2517: ]",
          "2581: [[package]]",
          "2582: name = \"pyrsistent\"",
          "2583: version = \"0.20.0\"",
          "",
          "[Removed Lines]",
          "2519: [[package]]",
          "2520: name = \"pyqt5\"",
          "2521: version = \"5.15.10\"",
          "2522: description = \"Python bindings for the Qt cross platform application toolkit\"",
          "2523: optional = false",
          "2524: python-versions = \">=3.7\"",
          "2525: files = [",
          "2526:     {file = \"PyQt5-5.15.10-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:93288d62ebd47b1933d80c27f5d43c7c435307b84d480af689cef2474e87e4c8\"},",
          "2527:     {file = \"PyQt5-5.15.10-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:862cea3be95b4b0a2b9678003b3a18edf7bd5eafd673860f58820f246d4bf616\"},",
          "2528:     {file = \"PyQt5-5.15.10-cp37-abi3-manylinux_2_17_x86_64.whl\", hash = \"sha256:b89478d16d4118664ff58ed609e0a804d002703c9420118de7e4e70fa1cb5486\"},",
          "2529:     {file = \"PyQt5-5.15.10-cp37-abi3-win32.whl\", hash = \"sha256:ff99b4f91aa8eb60510d5889faad07116d3340041916e46c07d519f7cad344e1\"},",
          "2530:     {file = \"PyQt5-5.15.10-cp37-abi3-win_amd64.whl\", hash = \"sha256:501355f327e9a2c38db0428e1a236d25ebcb99304cd6e668c05d1188d514adec\"},",
          "2531:     {file = \"PyQt5-5.15.10.tar.gz\", hash = \"sha256:d46b7804b1b10a4ff91753f8113e5b5580d2b4462f3226288e2d84497334898a\"},",
          "2532: ]",
          "2534: [package.dependencies]",
          "2535: PyQt5-Qt5 = \">=5.15.2\"",
          "2536: PyQt5-sip = \">=12.13,<13\"",
          "2538: [[package]]",
          "2539: name = \"pyqt5-qt5\"",
          "2540: version = \"5.15.2\"",
          "2541: description = \"The subset of a Qt installation needed by PyQt5.\"",
          "2542: optional = false",
          "2543: python-versions = \"*\"",
          "2544: files = [",
          "2545:     {file = \"PyQt5_Qt5-5.15.2-py3-none-macosx_10_13_intel.whl\", hash = \"sha256:76980cd3d7ae87e3c7a33bfebfaee84448fd650bad6840471d6cae199b56e154\"},",
          "2546:     {file = \"PyQt5_Qt5-5.15.2-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:1988f364ec8caf87a6ee5d5a3a5210d57539988bf8e84714c7d60972692e2f4a\"},",
          "2547:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win32.whl\", hash = \"sha256:9cc7a768b1921f4b982ebc00a318ccb38578e44e45316c7a4a850e953e1dd327\"},",
          "2548:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win_amd64.whl\", hash = \"sha256:750b78e4dba6bdf1607febedc08738e318ea09e9b10aea9ff0d73073f11f6962\"},",
          "2549: ]",
          "2551: [[package]]",
          "2552: name = \"pyqt5-sip\"",
          "2553: version = \"12.13.0\"",
          "2554: description = \"The sip module support for PyQt5\"",
          "2555: optional = false",
          "2556: python-versions = \">=3.7\"",
          "2557: files = [",
          "2558:     {file = \"PyQt5_sip-12.13.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:a7e3623b2c743753625c4650ec7696362a37fb36433b61824cf257f6d3d43cca\"},",
          "2559:     {file = \"PyQt5_sip-12.13.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:6e4ac714252370ca037c7d609da92388057165edd4f94e63354f6d65c3ed9d53\"},",
          "2560:     {file = \"PyQt5_sip-12.13.0-cp310-cp310-win32.whl\", hash = \"sha256:d5032da3fff62da055104926ffe76fd6044c1221f8ad35bb60804bcb422fe866\"},",
          "2561:     {file = \"PyQt5_sip-12.13.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:9a8cdd6cb66adcbe5c941723ed1544eba05cf19b6c961851b58ccdae1c894afb\"},",
          "2562:     {file = \"PyQt5_sip-12.13.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:0f85fb633a522f04e48008de49dce1ff1d947011b48885b8428838973fbca412\"},",
          "2563:     {file = \"PyQt5_sip-12.13.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:ec60162e034c42fb99859206d62b83b74f987d58937b3a82bdc07b5c3d190dec\"},",
          "2564:     {file = \"PyQt5_sip-12.13.0-cp311-cp311-win32.whl\", hash = \"sha256:205cd449d08a2b024a468fb6100cd7ed03e946b4f49706f508944006f955ae1a\"},",
          "2565:     {file = \"PyQt5_sip-12.13.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:1c8371682f77852256f1f2d38c41e2e684029f43330f0635870895ab01c02f6c\"},",
          "2566:     {file = \"PyQt5_sip-12.13.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:7fe3375b508c5bc657d73b9896bba8a768791f1f426c68053311b046bcebdddf\"},",
          "2567:     {file = \"PyQt5_sip-12.13.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:773731b1b5ab1a7cf5621249f2379c95e3d2905e9bd96ff3611b119586daa876\"},",
          "2568:     {file = \"PyQt5_sip-12.13.0-cp312-cp312-win32.whl\", hash = \"sha256:fb4a5271fa3f6bc2feb303269a837a95a6d8dd16be553aa40e530de7fb81bfdf\"},",
          "2569:     {file = \"PyQt5_sip-12.13.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:3a4498f3b1b15f43f5d12963accdce0fd652b0bcaae6baf8008663365827444c\"},",
          "2570:     {file = \"PyQt5_sip-12.13.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:9b984c2620a7a7eaf049221b09ae50a345317add2624c706c7d2e9e6632a9587\"},",
          "2571:     {file = \"PyQt5_sip-12.13.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:3188a06956aef86f604fb0d14421a110fad70d2a9e943dbacbfc3303f651dade\"},",
          "2572:     {file = \"PyQt5_sip-12.13.0-cp38-cp38-win32.whl\", hash = \"sha256:108a15f603e1886988c4b0d9d41cb74c9f9815bf05cefc843d559e8c298a10ce\"},",
          "2573:     {file = \"PyQt5_sip-12.13.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:db228cd737f5cbfc66a3c3e50042140cb80b30b52edc5756dbbaa2346ec73137\"},",
          "2574:     {file = \"PyQt5_sip-12.13.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:5338773bbaedaa4f16a73c142fb23cc18c327be6c338813af70260b756c7bc92\"},",
          "2575:     {file = \"PyQt5_sip-12.13.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:29fa9cc964517c9fc3f94f072b9a2aeef4e7a2eda1879cb835d9e06971161cdf\"},",
          "2576:     {file = \"PyQt5_sip-12.13.0-cp39-cp39-win32.whl\", hash = \"sha256:96414c93f3d33963887cf562d50d88b955121fbfd73f937c8eca46643e77bf61\"},",
          "2577:     {file = \"PyQt5_sip-12.13.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:bbc7cd498bf19e0862097be1ad2243e824dea56726f00c11cff1b547c2d31d01\"},",
          "2578:     {file = \"PyQt5_sip-12.13.0.tar.gz\", hash = \"sha256:7f321daf84b9c9dbca61b80e1ef37bdaffc0e93312edae2cd7da25b953971d91\"},",
          "2579: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2619:     {file = \"pyrsistent-0.20.0.tar.gz\", hash = \"sha256:4c48f78f62ab596c679086084d0dd13254ae4f3d6c72a83ffdf5ebdef8f265a4\"},",
          "2620: ]",
          "2636: [[package]]",
          "2637: name = \"python-lsp-jsonrpc\"",
          "2638: version = \"1.0.0\"",
          "",
          "[Removed Lines]",
          "2622: [[package]]",
          "2623: name = \"python-dateutil\"",
          "2624: version = \"2.9.0.post0\"",
          "2625: description = \"Extensions to the standard Python datetime module\"",
          "2626: optional = false",
          "2627: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"",
          "2628: files = [",
          "2629:     {file = \"python-dateutil-2.9.0.post0.tar.gz\", hash = \"sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3\"},",
          "2630:     {file = \"python_dateutil-2.9.0.post0-py2.py3-none-any.whl\", hash = \"sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\"},",
          "2631: ]",
          "2633: [package.dependencies]",
          "2634: six = \">=1.5\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3045:     {file = \"soupsieve-2.5.tar.gz\", hash = \"sha256:5663d5a7b3bfaeee0bc4372e7fc48f9cff4940b3eec54a6451cc5299f1097690\"},",
          "3046: ]",
          "3127: [[package]]",
          "3128: name = \"sqlparse\"",
          "3129: version = \"0.4.4\"",
          "",
          "[Removed Lines]",
          "3048: [[package]]",
          "3049: name = \"sqlalchemy\"",
          "3050: version = \"1.4.52\"",
          "3051: description = \"Database Abstraction Library\"",
          "3052: optional = false",
          "3053: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"",
          "3054: files = [",
          "3055:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-macosx_11_0_x86_64.whl\", hash = \"sha256:f68016f9a5713684c1507cc37133c28035f29925c75c0df2f9d0f7571e23720a\"},",
          "3056:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-manylinux1_x86_64.manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:24bb0f81fbbb13d737b7f76d1821ec0b117ce8cbb8ee5e8641ad2de41aa916d3\"},",
          "3057:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e93983cc0d2edae253b3f2141b0a3fb07e41c76cd79c2ad743fc27eb79c3f6db\"},",
          "3058:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:84e10772cfc333eb08d0b7ef808cd76e4a9a30a725fb62a0495877a57ee41d81\"},",
          "3059:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:427988398d2902de042093d17f2b9619a5ebc605bf6372f7d70e29bde6736842\"},",
          "3060:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-win32.whl\", hash = \"sha256:1296f2cdd6db09b98ceb3c93025f0da4835303b8ac46c15c2136e27ee4d18d94\"},",
          "3061:     {file = \"SQLAlchemy-1.4.52-cp310-cp310-win_amd64.whl\", hash = \"sha256:80e7f697bccc56ac6eac9e2df5c98b47de57e7006d2e46e1a3c17c546254f6ef\"},",
          "3062:     {file = \"SQLAlchemy-1.4.52-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:2f251af4c75a675ea42766880ff430ac33291c8d0057acca79710f9e5a77383d\"},",
          "3063:     {file = \"SQLAlchemy-1.4.52-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cb8f9e4c4718f111d7b530c4e6fb4d28f9f110eb82e7961412955b3875b66de0\"},",
          "3064:     {file = \"SQLAlchemy-1.4.52-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:afb1672b57f58c0318ad2cff80b384e816735ffc7e848d8aa51e0b0fc2f4b7bb\"},",
          "3065:     {file = \"SQLAlchemy-1.4.52-cp311-cp311-win32.whl\", hash = \"sha256:6e41cb5cda641f3754568d2ed8962f772a7f2b59403b95c60c89f3e0bd25f15e\"},",
          "3066:     {file = \"SQLAlchemy-1.4.52-cp311-cp311-win_amd64.whl\", hash = \"sha256:5bed4f8c3b69779de9d99eb03fd9ab67a850d74ab0243d1be9d4080e77b6af12\"},",
          "3067:     {file = \"SQLAlchemy-1.4.52-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:49e3772eb3380ac88d35495843daf3c03f094b713e66c7d017e322144a5c6b7c\"},",
          "3068:     {file = \"SQLAlchemy-1.4.52-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:618827c1a1c243d2540314c6e100aee7af09a709bd005bae971686fab6723554\"},",
          "3069:     {file = \"SQLAlchemy-1.4.52-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:de9acf369aaadb71a725b7e83a5ef40ca3de1cf4cdc93fa847df6b12d3cd924b\"},",
          "3070:     {file = \"SQLAlchemy-1.4.52-cp312-cp312-win32.whl\", hash = \"sha256:763bd97c4ebc74136ecf3526b34808c58945023a59927b416acebcd68d1fc126\"},",
          "3071:     {file = \"SQLAlchemy-1.4.52-cp312-cp312-win_amd64.whl\", hash = \"sha256:f12aaf94f4d9679ca475975578739e12cc5b461172e04d66f7a3c39dd14ffc64\"},",
          "3072:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:853fcfd1f54224ea7aabcf34b227d2b64a08cbac116ecf376907968b29b8e763\"},",
          "3073:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-manylinux1_x86_64.manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f98dbb8fcc6d1c03ae8ec735d3c62110949a3b8bc6e215053aa27096857afb45\"},",
          "3074:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1e135fff2e84103bc15c07edd8569612ce317d64bdb391f49ce57124a73f45c5\"},",
          "3075:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:5b5de6af8852500d01398f5047d62ca3431d1e29a331d0b56c3e14cb03f8094c\"},",
          "3076:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3491c85df263a5c2157c594f54a1a9c72265b75d3777e61ee13c556d9e43ffc9\"},",
          "3077:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-win32.whl\", hash = \"sha256:427c282dd0deba1f07bcbf499cbcc9fe9a626743f5d4989bfdfd3ed3513003dd\"},",
          "3078:     {file = \"SQLAlchemy-1.4.52-cp36-cp36m-win_amd64.whl\", hash = \"sha256:ca5ce82b11731492204cff8845c5e8ca1a4bd1ade85e3b8fcf86e7601bfc6a39\"},",
          "3079:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-macosx_11_0_x86_64.whl\", hash = \"sha256:29d4247313abb2015f8979137fe65f4eaceead5247d39603cc4b4a610936cd2b\"},",
          "3080:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-manylinux1_x86_64.manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a752bff4796bf22803d052d4841ebc3c55c26fb65551f2c96e90ac7c62be763a\"},",
          "3081:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f7ea11727feb2861deaa293c7971a4df57ef1c90e42cb53f0da40c3468388000\"},",
          "3082:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:d913f8953e098ca931ad7f58797f91deed26b435ec3756478b75c608aa80d139\"},",
          "3083:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a251146b921725547ea1735b060a11e1be705017b568c9f8067ca61e6ef85f20\"},",
          "3084:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-win32.whl\", hash = \"sha256:1f8e1c6a6b7f8e9407ad9afc0ea41c1f65225ce505b79bc0342159de9c890782\"},",
          "3085:     {file = \"SQLAlchemy-1.4.52-cp37-cp37m-win_amd64.whl\", hash = \"sha256:346ed50cb2c30f5d7a03d888e25744154ceac6f0e6e1ab3bc7b5b77138d37710\"},",
          "3086:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-macosx_11_0_x86_64.whl\", hash = \"sha256:4dae6001457d4497736e3bc422165f107ecdd70b0d651fab7f731276e8b9e12d\"},",
          "3087:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-manylinux1_x86_64.manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a5d2e08d79f5bf250afb4a61426b41026e448da446b55e4770c2afdc1e200fce\"},",
          "3088:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5bbce5dd7c7735e01d24f5a60177f3e589078f83c8a29e124a6521b76d825b85\"},",
          "3089:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:bdb7b4d889631a3b2a81a3347c4c3f031812eb4adeaa3ee4e6b0d028ad1852b5\"},",
          "3090:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c294ae4e6bbd060dd79e2bd5bba8b6274d08ffd65b58d106394cb6abbf35cf45\"},",
          "3091:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-win32.whl\", hash = \"sha256:bcdfb4b47fe04967669874fb1ce782a006756fdbebe7263f6a000e1db969120e\"},",
          "3092:     {file = \"SQLAlchemy-1.4.52-cp38-cp38-win_amd64.whl\", hash = \"sha256:7d0dbc56cb6af5088f3658982d3d8c1d6a82691f31f7b0da682c7b98fa914e91\"},",
          "3093:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-macosx_11_0_x86_64.whl\", hash = \"sha256:a551d5f3dc63f096ed41775ceec72fdf91462bb95abdc179010dc95a93957800\"},",
          "3094:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-manylinux1_x86_64.manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6ab773f9ad848118df7a9bbabca53e3f1002387cdbb6ee81693db808b82aaab0\"},",
          "3095:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d2de46f5d5396d5331127cfa71f837cca945f9a2b04f7cb5a01949cf676db7d1\"},",
          "3096:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:7027be7930a90d18a386b25ee8af30514c61f3852c7268899f23fdfbd3107181\"},",
          "3097:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:99224d621affbb3c1a4f72b631f8393045f4ce647dd3262f12fe3576918f8bf3\"},",
          "3098:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-win32.whl\", hash = \"sha256:c124912fd4e1bb9d1e7dc193ed482a9f812769cb1e69363ab68e01801e859821\"},",
          "3099:     {file = \"SQLAlchemy-1.4.52-cp39-cp39-win_amd64.whl\", hash = \"sha256:2c286fab42e49db23c46ab02479f328b8bdb837d3e281cae546cc4085c83b680\"},",
          "3100:     {file = \"SQLAlchemy-1.4.52.tar.gz\", hash = \"sha256:80e63bbdc5217dad3485059bdf6f65a7d43f33c8bde619df5c220edf03d87296\"},",
          "3101: ]",
          "3103: [package.dependencies]",
          "3104: greenlet = {version = \"!=0.4.17\", markers = \"python_version >= \\\"3\\\" and (platform_machine == \\\"aarch64\\\" or platform_machine == \\\"ppc64le\\\" or platform_machine == \\\"x86_64\\\" or platform_machine == \\\"amd64\\\" or platform_machine == \\\"AMD64\\\" or platform_machine == \\\"win32\\\" or platform_machine == \\\"WIN32\\\")\"}",
          "3106: [package.extras]",
          "3107: aiomysql = [\"aiomysql (>=0.2.0)\", \"greenlet (!=0.4.17)\"]",
          "3108: aiosqlite = [\"aiosqlite\", \"greenlet (!=0.4.17)\", \"typing_extensions (!=3.10.0.1)\"]",
          "3109: asyncio = [\"greenlet (!=0.4.17)\"]",
          "3110: asyncmy = [\"asyncmy (>=0.2.3,!=0.2.4)\", \"greenlet (!=0.4.17)\"]",
          "3111: mariadb-connector = [\"mariadb (>=1.0.1,!=1.1.2)\"]",
          "3112: mssql = [\"pyodbc\"]",
          "3113: mssql-pymssql = [\"pymssql\"]",
          "3114: mssql-pyodbc = [\"pyodbc\"]",
          "3115: mypy = [\"mypy (>=0.910)\", \"sqlalchemy2-stubs\"]",
          "3116: mysql = [\"mysqlclient (>=1.4.0)\", \"mysqlclient (>=1.4.0,<2)\"]",
          "3117: mysql-connector = [\"mysql-connector-python\"]",
          "3118: oracle = [\"cx_oracle (>=7)\", \"cx_oracle (>=7,<8)\"]",
          "3119: postgresql = [\"psycopg2 (>=2.7)\"]",
          "3120: postgresql-asyncpg = [\"asyncpg\", \"greenlet (!=0.4.17)\"]",
          "3121: postgresql-pg8000 = [\"pg8000 (>=1.16.6,!=1.29.0)\"]",
          "3122: postgresql-psycopg2binary = [\"psycopg2-binary\"]",
          "3123: postgresql-psycopg2cffi = [\"psycopg2cffi\"]",
          "3124: pymysql = [\"pymysql\", \"pymysql (<1)\"]",
          "3125: sqlcipher = [\"sqlcipher3_binary\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3140: doc = [\"sphinx\"]",
          "3141: test = [\"pytest\", \"pytest-cov\"]",
          "3162: [[package]]",
          "3163: name = \"svgutils\"",
          "3164: version = \"0.3.4\"",
          "",
          "[Removed Lines]",
          "3143: [[package]]",
          "3144: name = \"stack-data\"",
          "3145: version = \"0.6.3\"",
          "3146: description = \"Extract data from python stack frames and tracebacks for informative displays\"",
          "3147: optional = false",
          "3148: python-versions = \"*\"",
          "3149: files = [",
          "3150:     {file = \"stack_data-0.6.3-py3-none-any.whl\", hash = \"sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695\"},",
          "3151:     {file = \"stack_data-0.6.3.tar.gz\", hash = \"sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9\"},",
          "3152: ]",
          "3154: [package.dependencies]",
          "3155: asttokens = \">=2.1.0\"",
          "3156: executing = \">=1.2.0\"",
          "3157: pure-eval = \"*\"",
          "3159: [package.extras]",
          "3160: tests = [\"cython\", \"littleutils\", \"pygments\", \"pytest\", \"typeguard\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "3241: slack = [\"slack-sdk\"]",
          "3242: telegram = [\"requests\"]",
          "3259: [[package]]",
          "3260: name = \"typing-extensions\"",
          "3261: version = \"4.10.0\"",
          "",
          "[Removed Lines]",
          "3244: [[package]]",
          "3245: name = \"traitlets\"",
          "3246: version = \"5.14.2\"",
          "3247: description = \"Traitlets Python configuration system\"",
          "3248: optional = false",
          "3249: python-versions = \">=3.8\"",
          "3250: files = [",
          "3251:     {file = \"traitlets-5.14.2-py3-none-any.whl\", hash = \"sha256:fcdf85684a772ddeba87db2f398ce00b40ff550d1528c03c14dbf6a02003cd80\"},",
          "3252:     {file = \"traitlets-5.14.2.tar.gz\", hash = \"sha256:8cdd83c040dab7d1dee822678e5f5d100b514f7b72b01615b26fc5718916fdf9\"},",
          "3253: ]",
          "3255: [package.extras]",
          "3256: docs = [\"myst-parser\", \"pydata-sphinx-theme\", \"sphinx\"]",
          "3257: test = [\"argcomplete (>=3.0.3)\", \"mypy (>=1.7.0)\", \"pre-commit\", \"pytest (>=7.0,<8.1)\", \"pytest-mock\", \"pytest-mypy-testing\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "3413: [package.dependencies]",
          "3414: bracex = \">=2.1.1\"",
          "3427: [[package]]",
          "3428: name = \"werkzeug\"",
          "3429: version = \"3.0.1\"",
          "",
          "[Removed Lines]",
          "3416: [[package]]",
          "3417: name = \"wcwidth\"",
          "3418: version = \"0.2.13\"",
          "3419: description = \"Measures the displayed width of unicode strings in a terminal\"",
          "3420: optional = false",
          "3421: python-versions = \"*\"",
          "3422: files = [",
          "3423:     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},",
          "3424:     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},",
          "3425: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3455: [package.extras]",
          "3456: brotli = [\"Brotli\"]",
          "3472: [[package]]",
          "3473: name = \"wsproto\"",
          "3474: version = \"1.2.0\"",
          "",
          "[Removed Lines]",
          "3458: [[package]]",
          "3459: name = \"win32-setctime\"",
          "3460: version = \"1.1.0\"",
          "3461: description = \"A small Python utility to set file creation time on Windows\"",
          "3462: optional = false",
          "3463: python-versions = \">=3.5\"",
          "3464: files = [",
          "3465:     {file = \"win32_setctime-1.1.0-py3-none-any.whl\", hash = \"sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad\"},",
          "3466:     {file = \"win32_setctime-1.1.0.tar.gz\", hash = \"sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2\"},",
          "3467: ]",
          "3469: [package.extras]",
          "3470: dev = [\"black (>=19.3b0)\", \"pytest (>=4.6.2)\"]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3631: [metadata]",
          "3632: lock-version = \"2.0\"",
          "3633: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "3634: content-hash = \"e077f3a528867790025d5079bc7af606f8a2d71b365a488ba4159ad31bae20dc\"",
          "",
          "[Added Lines]",
          "2514: content-hash = \"8a363c742e66046c0dceaf5edfc74c6ad876c00e2f3447f8b466fb6d5058444b\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}