{
  "cve_id": "CVE-2021-40830",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on Unix systems. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to override the default trust store. This corrects this issue. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.6.1 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Linux/Unix. Amazon Web Services AWS-C-IO 0.10.4 on Linux/Unix.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
  "patch_info": {
    "commit_hash": "0450ce68add7e3d05c6d781ecdac953c299c053a",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a",
    "files": [
      "setup.py"
    ],
    "message": "Fix Mac SNI check with overridden root CA (#211)",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.22',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
      "candidate_info": {
        "commit_hash": "b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/b3b1d99094247c67c9c2c38ed1567e18e8c6693f",
        "files": [
          ".gitignore",
          "awsiot/mqtt_connection_builder.py",
          "docs/awsiot/eventstreamrpc.html",
          "docs/awsiot/greengrass_discovery.html",
          "docs/awsiot/greengrasscoreipc.html",
          "docs/awsiot/iotidentity.html",
          "docs/awsiot/iotjobs.html",
          "docs/awsiot/iotshadow.html",
          "docs/awsiot/mqtt_connection_builder.html",
          "docs/genindex.html",
          "docs/objects.inv",
          "docs/searchindex.js",
          "samples/README.md",
          "samples/windows_cert_pubsub.py",
          "setup.py"
        ],
        "message": "Support mutual TLS using a certificate from a Windows cert store (#292)\n\nAdd the ability to use a client certificate located in a Windows certificate store. Previously, the client certificate and private key had to be passed by filepath or file contents. With this change, certificates and keys stored on TPM devices can be used.\n\nAdd new `windows_cert_pubsub.py` sample to show this in action.",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/windows_cert_pubsub.py||samples/windows_cert_pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "268:     using a PKCS#11 library for private key operations.",
          "270:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "271:     described at the top of this doc, as well as...",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:     NOTE: Unix only",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     return _builder(tls_ctx_options, **kwargs)",
          "312: def websockets_with_default_aws_signing(",
          "313:         region,",
          "314:         credentials_provider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314: def mtls_with_windows_cert_store_path(*,",
          "315:                                       cert_store_path: str,",
          "317:     \"\"\"",
          "318:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "319:     using a client certificate in a Windows certificate store.",
          "321:     NOTE: Windows only",
          "323:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "324:     described at the top of this doc, as well as...",
          "326:     Args:",
          "327:         cert_store_path: Path to certificate in a Windows certificate store.",
          "328:                 The path must use backslashes and end with the certificate's thumbprint.",
          "329:                 Example: ``CurrentUser\\\\MY\\\\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6``",
          "330:     \"\"\"",
          "331:     _check_required_kwargs(**kwargs)",
          "333:     tls_ctx_options = awscrt.io.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(cert_store_path)",
          "335:     return _builder(tls_ctx_options, **kwargs)",
          "",
          "---------------"
        ],
        "samples/windows_cert_pubsub.py||samples/windows_cert_pubsub.py": [
          "File: samples/windows_cert_pubsub.py -> samples/windows_cert_pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import argparse",
          "5: from awscrt import io, mqtt",
          "6: from awsiot import mqtt_connection_builder",
          "7: import threading",
          "8: import time",
          "9: from uuid import uuid4",
          "11: # This sample is similar to `samples/pubsub.py` but the certificate",
          "12: # for mutual TLS is stored in a Windows certificate store.",
          "13: #",
          "14: # See `samples/README.md` for instructions on setting up your PC",
          "15: # to run this sample.",
          "16: #",
          "17: # WARNING: Windows only.",
          "19: parser = argparse.ArgumentParser(description=\"Send and receive messages through and MQTT connection.\")",
          "20: parser.add_argument('--endpoint', required=True, help=\"Your AWS IoT custom endpoint, not including a port. \" +",
          "21:                                                       \"e.g. \\\"abcd123456wxyz-ats.iot.us-east-1.amazonaws.com\\\"\")",
          "22: parser.add_argument('--port', type=int, help=\"Specify port. AWS IoT supports 443 and 8883. (default: auto)\")",
          "23: parser.add_argument('--cert', required=True, help=\"Path to certificate in Windows certificate store. \" +",
          "24:                                                   \"e.g. \\\"CurrentUser\\\\MY\\\\6ac133ac58f0a88b83e9c794eba156a98da39b4c\\\"\")",
          "25: parser.add_argument('--root-ca', help=\"File path to root certificate authority, in PEM format. (default: None)\")",
          "26: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()),",
          "27:                     help=\"Client ID for MQTT connection. (default: 'test-*')\")",
          "28: parser.add_argument('--topic', default=\"test/topic\",",
          "29:                     help=\"Topic to subscribe to, and publish messages to. (default: 'test/topic')\")",
          "30: parser.add_argument('--message', default=\"Hello World!\",",
          "31:                     help=\"Message to publish. Specify empty string to publish nothing. (default: 'Hello World!')\")",
          "32: parser.add_argument('--count', default=10, type=int, help=\"Number of messages to publish/receive before exiting. \" +",
          "33:                                                           \"Specify 0 to run forever. (default: 10)\")",
          "34: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.Error.name,",
          "35:                     help=\"Logging level. (default: 'Error')\")",
          "37: # Using globals to simplify sample code",
          "38: args = parser.parse_args()",
          "40: io.init_logging(getattr(io.LogLevel, args.verbosity), 'stderr')",
          "42: received_count = 0",
          "43: received_all_event = threading.Event()",
          "46: def on_connection_interrupted(connection, error, **kwargs):",
          "47:     # Callback when connection is accidentally lost.",
          "48:     print(\"Connection interrupted. error: {}\".format(error))",
          "51: def on_connection_resumed(connection, return_code, session_present, **kwargs):",
          "52:     # Callback when an interrupted connection is re-established.",
          "53:     print(\"Connection resumed. return_code: {} session_present: {}\".format(return_code, session_present))",
          "56: # Callback when the subscribed topic receives a message",
          "57: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "58:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "59:     global received_count",
          "60:     received_count += 1",
          "61:     if received_count == args.count:",
          "62:         received_all_event.set()",
          "65: if __name__ == '__main__':",
          "66:     # Create MQTT connection",
          "67:     mqtt_connection = mqtt_connection_builder.mtls_with_windows_cert_store_path(",
          "68:         cert_store_path=args.cert,",
          "69:         endpoint=args.endpoint,",
          "70:         port=args.port,",
          "71:         ca_filepath=args.root_ca,",
          "72:         on_connection_interrupted=on_connection_interrupted,",
          "73:         on_connection_resumed=on_connection_resumed,",
          "74:         client_id=args.client_id,",
          "75:         clean_session=False,",
          "76:         keep_alive_secs=30)",
          "78:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "79:         args.endpoint, args.client_id))",
          "81:     connect_future = mqtt_connection.connect()",
          "83:     # Future.result() waits until a result is available",
          "84:     connect_future.result()",
          "85:     print(\"Connected!\")",
          "87:     # Subscribe",
          "88:     print(\"Subscribing to topic '{}'...\".format(args.topic))",
          "89:     subscribe_future, packet_id = mqtt_connection.subscribe(",
          "90:         topic=args.topic,",
          "91:         qos=mqtt.QoS.AT_LEAST_ONCE,",
          "92:         callback=on_message_received)",
          "94:     subscribe_result = subscribe_future.result()",
          "95:     print(\"Subscribed with {}\".format(str(subscribe_result['qos'])))",
          "97:     # Publish message to server desired number of times.",
          "98:     # This step is skipped if message is blank.",
          "99:     # This step loops forever if count was set to 0.",
          "100:     if args.message:",
          "101:         if args.count == 0:",
          "102:             print(\"Sending messages until program killed\")",
          "103:         else:",
          "104:             print(\"Sending {} message(s)\".format(args.count))",
          "106:         publish_count = 1",
          "107:         while (publish_count <= args.count) or (args.count == 0):",
          "108:             message = \"{} [{}]\".format(args.message, publish_count)",
          "109:             print(\"Publishing message to topic '{}': {}\".format(args.topic, message))",
          "110:             mqtt_connection.publish(",
          "111:                 topic=args.topic,",
          "112:                 payload=message,",
          "113:                 qos=mqtt.QoS.AT_LEAST_ONCE)",
          "114:             time.sleep(1)",
          "115:             publish_count += 1",
          "117:     # Wait for all messages to be received.",
          "118:     # This waits forever if count was set to 0.",
          "119:     if args.count != 0 and not received_all_event.is_set():",
          "120:         print(\"Waiting for all messages to be received...\")",
          "122:     received_all_event.wait()",
          "123:     print(\"{} message(s) received.\".format(received_count))",
          "125:     # Disconnect",
          "126:     print(\"Disconnecting...\")",
          "127:     disconnect_future = mqtt_connection.disconnect()",
          "128:     disconnect_future.result()",
          "129:     print(\"Disconnected!\")",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.5',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.6',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b16659bda760a8589c654b342df7cdf5618d6d1",
      "candidate_info": {
        "commit_hash": "8b16659bda760a8589c654b342df7cdf5618d6d1",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/8b16659bda760a8589c654b342df7cdf5618d6d1",
        "files": [
          "setup.py"
        ],
        "message": "update awscrt for raspberry pi fix (#192)\n\nIssue: wheels were unavailable for the previous awscrt on piwheels.org",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.14',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.17',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e55e0654fe76b1a634a649530e18a022dfbd5468",
      "candidate_info": {
        "commit_hash": "e55e0654fe76b1a634a649530e18a022dfbd5468",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/e55e0654fe76b1a634a649530e18a022dfbd5468",
        "files": [
          "continuous-delivery/wait-for-pypi.py",
          "setup.py"
        ],
        "message": "update awscrt to 0.9.10 (#127)\n\n0.9.3 was missing wheels for several platforms",
        "before_after_code_files": [
          "continuous-delivery/wait-for-pypi.py||continuous-delivery/wait-for-pypi.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "continuous-delivery/wait-for-pypi.py||continuous-delivery/wait-for-pypi.py": [
          "File: continuous-delivery/wait-for-pypi.py -> continuous-delivery/wait-for-pypi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: def wait(package, version, index_url=DEFAULT_INDEX_URL, timeout=DEFAULT_TIMEOUT, interval=DEFAULT_INTERVAL):",
          "12:     give_up_time = time.time() + timeout",
          "13:     while True:",
          "15:         output = output.decode()",
          "17:         # output looks like: 'awscrt (0.3.1)  - A common runtime for AWS Python projects\\n...'",
          "",
          "[Removed Lines]",
          "14:         output = subprocess.check_output([sys.executable, '-m', 'pip', 'search', '--index', index_url, package])",
          "",
          "[Added Lines]",
          "14:         output = subprocess.check_output([sys.executable, '-m', 'pip', 'search',",
          "15:                                           '--no-cache-dir', '--index', index_url, package])",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "14:     packages=['awsiot'],",
          "15:     install_requires=[",
          "17:     ],",
          "18:     python_requires='>=3.5',",
          "19: )",
          "",
          "[Removed Lines]",
          "16:         'awscrt==0.9.3',",
          "",
          "[Added Lines]",
          "16:         'awscrt==0.9.10',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
      "candidate_info": {
        "commit_hash": "53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/53a75c3ffa008e093c0904e88b8e3cbfd4c90f00",
        "files": [
          "setup.py"
        ],
        "message": "Improved support for Apple Silicon aka M1 aka arm64 aka Universal2 (#314)\n\nUse latest version of awscrt, which has wheels that work properly on M1 macs",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.9',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.11',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
      "candidate_info": {
        "commit_hash": "7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
        "files": [
          "setup.py"
        ],
        "message": "Updating aws-crt-python submodule for bug fixes. (#190)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.12',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.14',",
          "",
          "---------------"
        ]
      }
    }
  ]
}