{
  "cve_id": "CVE-2023-39441",
  "cve_desc": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and\u00a0Apache Airflow before 2.7.0 are affected by the\u00a0Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509\u00a0certificate.\u00a0 Instead, the code accepted any certificate, which could\u00a0result in the disclosure of mail server credentials or mail contents\u00a0when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "dbacacbd4d476da757de148a4e747924c34fd7fe",
  "patch_info": {
    "commit_hash": "dbacacbd4d476da757de148a4e747924c34fd7fe",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/dbacacbd4d476da757de148a4e747924c34fd7fe",
    "files": [
      "airflow/providers/smtp/CHANGELOG.rst",
      "airflow/providers/smtp/hooks/smtp.py",
      "airflow/providers/smtp/provider.yaml",
      "docs/apache-airflow-providers-smtp/configurations-ref.rst",
      "docs/apache-airflow-providers-smtp/index.rst",
      "docs/apache-airflow/configurations-ref.rst",
      "tests/providers/smtp/hooks/test_smtp.py"
    ],
    "message": "Allows to choose SSL context for SMTP provider (#33075)\n\n* Allows to choose SSL context for SMTP provider\n\nThis change add two options to choose from when SSL SMTP connection\nis created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is\n\u00a0 preferred\n\nThe fallback is:\n\n* The Airflow \"email\", \"ssl_context\"\n* \"default\"\n\n* Update airflow/providers/smtp/CHANGELOG.rst\n\nCo-authored-by: Ephraim Anierobi <splendidzigy24@gmail.com>\n(cherry picked from commit e20325db38fdfdd9db423a345b13d18aab6fe578)",
    "before_after_code_files": [
      "airflow/providers/smtp/hooks/smtp.py||airflow/providers/smtp/hooks/smtp.py",
      "tests/providers/smtp/hooks/test_smtp.py||tests/providers/smtp/hooks/test_smtp.py"
    ]
  },
  "patch_diff": {
    "airflow/providers/smtp/hooks/smtp.py||airflow/providers/smtp/hooks/smtp.py": [
      "File: airflow/providers/smtp/hooks/smtp.py -> airflow/providers/smtp/hooks/smtp.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import os",
      "27: import re",
      "28: import smtplib",
      "29: from email.mime.application import MIMEApplication",
      "30: from email.mime.multipart import MIMEMultipart",
      "31: from email.mime.text import MIMEText",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import ssl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109:             smtp_kwargs[\"port\"] = self.port",
      "110:         smtp_kwargs[\"timeout\"] = self.timeout",
      "112:         return SMTP(**smtp_kwargs)",
      "114:     @classmethod",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112:         if self.use_ssl:",
      "113:             from airflow.configuration import conf",
      "115:             ssl_context_string = conf.get(\"smtp_provider\", \"SSL_CONTEXT\", fallback=None)",
      "116:             if ssl_context_string is None:",
      "117:                 ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\", fallback=None)",
      "118:             if ssl_context_string is None:",
      "119:                 ssl_context_string = \"default\"",
      "120:             if ssl_context_string == \"default\":",
      "121:                 ssl_context = ssl.create_default_context()",
      "122:             elif ssl_context_string == \"none\":",
      "123:                 ssl_context = None",
      "124:             else:",
      "125:                 raise RuntimeError(",
      "126:                     f\"The email.ssl_context configuration variable must \"",
      "127:                     f\"be set to 'default' or 'none' and is '{ssl_context_string}'.\"",
      "128:                 )",
      "129:             smtp_kwargs[\"context\"] = ssl_context",
      "",
      "---------------"
    ],
    "tests/providers/smtp/hooks/test_smtp.py||tests/providers/smtp/hooks/test_smtp.py": [
      "File: tests/providers/smtp/hooks/test_smtp.py -> tests/providers/smtp/hooks/test_smtp.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.providers.smtp.hooks.smtp import SmtpHook",
      "31: from airflow.utils import db",
      "32: from airflow.utils.session import create_session",
      "34: smtplib_string = \"airflow.providers.smtp.hooks.smtp.smtplib\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         )",
      "77:     @patch(smtplib_string)",
      "79:         mock_conn = _create_fake_smtp(mock_smtplib)",
      "81:         with SmtpHook():",
      "82:             pass",
      "85:         mock_conn.login.assert_called_once_with(\"smtp_user\", \"smtp_password\")",
      "86:         assert mock_conn.close.call_count == 1",
      "",
      "[Removed Lines]",
      "78:     def test_connect_and_disconnect(self, mock_smtplib):",
      "84:         mock_smtplib.SMTP_SSL.assert_called_once_with(host=\"smtp_server_address\", port=465, timeout=30)",
      "",
      "[Added Lines]",
      "79:     @patch(\"ssl.create_default_context\")",
      "80:     def test_connect_and_disconnect(self, create_default_context, mock_smtplib):",
      "85:         assert create_default_context.called",
      "86:         mock_smtplib.SMTP_SSL.assert_called_once_with(",
      "87:             host=\"smtp_server_address\", port=465, timeout=30, context=create_default_context.return_value",
      "88:         )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "202:     @patch(\"smtplib.SMTP_SSL\")",
      "203:     @patch(\"smtplib.SMTP\")",
      "205:         mock_smtp_ssl.return_value = Mock()",
      "206:         with SmtpHook() as smtp_hook:",
      "207:             smtp_hook.send_email_smtp(to=\"to\", subject=\"subject\", html_content=\"content\", from_email=\"from\")",
      "208:         assert not mock_smtp.called",
      "211:     @patch(\"smtplib.SMTP_SSL\")",
      "212:     @patch(\"smtplib.SMTP\")",
      "",
      "[Removed Lines]",
      "204:     def test_send_mime_ssl(self, mock_smtp, mock_smtp_ssl):",
      "209:         mock_smtp_ssl.assert_called_once_with(host=\"smtp_server_address\", port=465, timeout=30)",
      "",
      "[Added Lines]",
      "208:     @patch(\"ssl.create_default_context\")",
      "209:     def test_send_mime_ssl(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "214:         assert create_default_context.called",
      "215:         mock_smtp_ssl.assert_called_once_with(",
      "216:             host=\"smtp_server_address\", port=465, timeout=30, context=create_default_context.return_value",
      "217:         )",
      "219:     @patch(\"smtplib.SMTP_SSL\")",
      "220:     @patch(\"smtplib.SMTP\")",
      "221:     @patch(\"ssl.create_default_context\")",
      "222:     def test_send_mime_ssl_none_email_context(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "223:         mock_smtp_ssl.return_value = Mock()",
      "224:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"email\", \"ssl_context\"): \"none\"}):",
      "225:             with SmtpHook() as smtp_hook:",
      "226:                 smtp_hook.send_email_smtp(",
      "227:                     to=\"to\", subject=\"subject\", html_content=\"content\", from_email=\"from\"",
      "228:                 )",
      "229:         assert not mock_smtp.called",
      "230:         assert not create_default_context.called",
      "231:         mock_smtp_ssl.assert_called_once_with(host=\"smtp_server_address\", port=465, timeout=30, context=None)",
      "233:     @patch(\"smtplib.SMTP_SSL\")",
      "234:     @patch(\"smtplib.SMTP\")",
      "235:     @patch(\"ssl.create_default_context\")",
      "236:     def test_send_mime_ssl_none_smtp_provider_context(self, create_default_context, mock_smtp, mock_smtp_ssl):",
      "237:         mock_smtp_ssl.return_value = Mock()",
      "238:         with conf_vars({(\"smtp\", \"smtp_ssl\"): \"True\", (\"smtp_provider\", \"ssl_context\"): \"none\"}):",
      "239:             with SmtpHook() as smtp_hook:",
      "240:                 smtp_hook.send_email_smtp(",
      "241:                     to=\"to\", subject=\"subject\", html_content=\"content\", from_email=\"from\"",
      "242:                 )",
      "243:         assert not mock_smtp.called",
      "244:         assert not create_default_context.called",
      "245:         mock_smtp_ssl.assert_called_once_with(host=\"smtp_server_address\", port=465, timeout=30, context=None)",
      "247:     @patch(\"smtplib.SMTP_SSL\")",
      "248:     @patch(\"smtplib.SMTP\")",
      "249:     @patch(\"ssl.create_default_context\")",
      "250:     def test_send_mime_ssl_none_smtp_provider_default_email_context(",
      "251:         self, create_default_context, mock_smtp, mock_smtp_ssl",
      "252:     ):",
      "253:         mock_smtp_ssl.return_value = Mock()",
      "254:         with conf_vars(",
      "255:             {",
      "256:                 (\"smtp\", \"smtp_ssl\"): \"True\",",
      "257:                 (\"email\", \"ssl_context\"): \"default\",",
      "258:                 (\"smtp_provider\", \"ssl_context\"): \"none\",",
      "259:             }",
      "260:         ):",
      "261:             with SmtpHook() as smtp_hook:",
      "262:                 smtp_hook.send_email_smtp(",
      "263:                     to=\"to\", subject=\"subject\", html_content=\"content\", from_email=\"from\"",
      "264:                 )",
      "265:         assert not mock_smtp.called",
      "266:         assert not create_default_context.called",
      "267:         mock_smtp_ssl.assert_called_once_with(host=\"smtp_server_address\", port=465, timeout=30, context=None)",
      "269:     @patch(\"smtplib.SMTP_SSL\")",
      "270:     @patch(\"smtplib.SMTP\")",
      "271:     @patch(\"ssl.create_default_context\")",
      "272:     def test_send_mime_ssl_default_smtp_provider_none_email_context(",
      "273:         self, create_default_context, mock_smtp, mock_smtp_ssl",
      "274:     ):",
      "275:         mock_smtp_ssl.return_value = Mock()",
      "276:         with conf_vars(",
      "277:             {",
      "278:                 (\"smtp\", \"smtp_ssl\"): \"True\",",
      "279:                 (\"email\", \"ssl_context\"): \"none\",",
      "280:                 (\"smtp_provider\", \"ssl_context\"): \"default\",",
      "281:             }",
      "282:         ):",
      "283:             with SmtpHook() as smtp_hook:",
      "284:                 smtp_hook.send_email_smtp(",
      "285:                     to=\"to\", subject=\"subject\", html_content=\"content\", from_email=\"from\"",
      "286:                 )",
      "287:         assert not mock_smtp.called",
      "288:         assert create_default_context.called",
      "289:         mock_smtp_ssl.assert_called_once_with(",
      "290:             host=\"smtp_server_address\", port=465, timeout=30, context=create_default_context.return_value",
      "291:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "270:     @patch(\"airflow.models.connection.Connection\")",
      "271:     @patch(\"smtplib.SMTP_SSL\")",
      "273:         mock_smtp_ssl().sendmail.side_effect = smtplib.SMTPServerDisconnected()",
      "274:         custom_retry_limit = 10",
      "275:         custom_timeout = 60",
      "",
      "[Removed Lines]",
      "272:     def test_send_mime_custom_timeout_retrylimit(self, mock_smtp_ssl, connection_mock):",
      "",
      "[Added Lines]",
      "354:     @patch(\"ssl.create_default_context\")",
      "355:     def test_send_mime_custom_timeout_retrylimit(",
      "356:         self, create_default_context, mock_smtp_ssl, connection_mock",
      "357:     ):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "287:             with pytest.raises(smtplib.SMTPServerDisconnected):",
      "288:                 smtp_hook.send_email_smtp(to=\"to\", subject=\"subject\", html_content=\"content\")",
      "289:         mock_smtp_ssl.assert_any_call(",
      "291:         )",
      "292:         assert mock_smtp_ssl().sendmail.call_count == 10",
      "",
      "[Removed Lines]",
      "290:             host=fake_conn.host, port=fake_conn.port, timeout=fake_conn.extra_dejson[\"timeout\"]",
      "",
      "[Added Lines]",
      "375:             host=fake_conn.host,",
      "376:             port=fake_conn.port,",
      "377:             timeout=fake_conn.extra_dejson[\"timeout\"],",
      "378:             context=create_default_context.return_value,",
      "380:         assert create_default_context.called",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af98c605540e5b9f654e1102e46ccff5d9499462",
      "candidate_info": {
        "commit_hash": "af98c605540e5b9f654e1102e46ccff5d9499462",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/af98c605540e5b9f654e1102e46ccff5d9499462",
        "files": [
          "dev/provider_packages/publish_provider_documentation.sh"
        ],
        "message": "Fix mistakenly used \"release-mangement build-docs\" command (#33195)\n\nThe #32495 mistakeny replaced the \"build\" script with a\n\"release-management build-docs\" command where there is no such\ncommand - there is just \"build-docs\"\n\n(cherry picked from commit 199c604d3841797b97bd4b813b36379910a532a8)",
        "before_after_code_files": [
          "dev/provider_packages/publish_provider_documentation.sh||dev/provider_packages/publish_provider_documentation.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/provider_packages/publish_provider_documentation.sh||dev/provider_packages/publish_provider_documentation.sh": [
          "File: dev/provider_packages/publish_provider_documentation.sh -> dev/provider_packages/publish_provider_documentation.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     provider_filters+=(\"--package-filter\" \"apache-airflow-providers-${provider//./-}\")",
          "29: done",
          "34: cd \"${AIRFLOW_SITE_DIRECTORY}\"",
          "",
          "[Removed Lines]",
          "31: breeze release-management build-docs \\",
          "32:     \"${provider_filters[@]}\"",
          "",
          "[Added Lines]",
          "31: breeze build-docs \"${provider_filters[@]}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ff8d4d6133300b1c8017ed8f5d9e981921b95c9",
      "candidate_info": {
        "commit_hash": "2ff8d4d6133300b1c8017ed8f5d9e981921b95c9",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/2ff8d4d6133300b1c8017ed8f5d9e981921b95c9",
        "files": [
          "airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py",
          "docs/apache-airflow/img/airflow_erd.sha256"
        ],
        "message": "Change type of defualts for include_deferred (#33271)\n\nWe should change the defaults to client defaults for MSSQL compatibility\nThe change in #32709 was not liked by MSSQL\n\nCo-authored-by: Ephraim Anierobi <splendidzigy24@gmail.com>\n(cherry picked from commit d989e9dba5899e87780df9a8c5994ed1e3f8a776)",
        "before_after_code_files": [
          "airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py||airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py||airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py": [
          "File: airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py -> airflow/migrations/versions/0128_2_7_0_add_include_deferred_column_to_pool.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: def upgrade():",
          "40:     \"\"\"Apply add include_deferred column to pool\"\"\"",
          "41:     with op.batch_alter_table(\"slot_pool\") as batch_op:",
          "47: def downgrade():",
          "",
          "[Removed Lines]",
          "42:         batch_op.add_column(",
          "43:             sa.Column(\"include_deferred\", sa.Boolean, nullable=False, server_default=sa.false())",
          "44:         )",
          "",
          "[Added Lines]",
          "42:         batch_op.add_column(sa.Column(\"include_deferred\", sa.Boolean, default=False))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9536fad87b44003502d65c28dd4b581b225d921e",
      "candidate_info": {
        "commit_hash": "9536fad87b44003502d65c28dd4b581b225d921e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/9536fad87b44003502d65c28dd4b581b225d921e",
        "files": [
          "setup.cfg"
        ],
        "message": "For now limit Pydantic to < 2.0.0 (#33235)\n\n* For now limit Pydantic to < 2.0.0\n\nPydantic 2 adds few warnings/deprecations and until AWS dependencies\nare updated, we cannot move to it anyway.\n\nLimiting Pydantic to <2 for now should prevent the warnings and\nheep our dependencies in check.\n\n* Update setup.cfg\n\nCo-authored-by: Jed Cunningham <66968678+jedcunningham@users.noreply.github.com>\n\n---------\n\nCo-authored-by: Jed Cunningham <66968678+jedcunningham@users.noreply.github.com>\n(cherry picked from commit a752c902861d9a829d7451cc69d1343cbe5b54dc)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:     pendulum>=2.0",
          "127:     pluggy>=1.0",
          "128:     psutil>=4.2.0",
          "130:     pygments>=2.0.1",
          "131:     pyjwt>=2.0.0",
          "132:     python-daemon>=3.0.0",
          "",
          "[Removed Lines]",
          "129:     pydantic>=1.10.0",
          "",
          "[Added Lines]",
          "129:     # We limit Pydantic to <2.0.0 until we can upgrade - there are limitation for Pydantic in AWS provider",
          "130:     # dependency (aws-sam-translator) - also we need to change orm-mode to from_attributes in definitions",
          "131:     # of the ORM models. See for the previous attempt https://github.com/apache/airflow/pull/33220",
          "132:     pydantic>=1.10.0,<2.0.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "197789e19d841ad352dfe4065e1f7eeeec65e280",
      "candidate_info": {
        "commit_hash": "197789e19d841ad352dfe4065e1f7eeeec65e280",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/197789e19d841ad352dfe4065e1f7eeeec65e280",
        "files": [
          "tests/models/test_xcom_arg_map.py"
        ],
        "message": "Give the the test_xcom_ar_map test opportunity to flush the data (#33153)\n\nUsing same session in different steps of the same test has the\npotential of not flishing/committing the changes between.\n\nSeems that the #33150 traded one flakiness with another. Attempting to\nmake sure that the flash/commit is executed before the second run.\n\nError:\n\nThe test RuntimeError: number of values in row (0) differ from number of\ncolumn processors (29)\n\nThe error is strange however and indicates a bug in sqlite library.\n\n(cherry picked from commit 6b21b79f33e245ff1612b1970d05ef692c41f15c)",
        "before_after_code_files": [
          "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py": [
          "File: tests/models/test_xcom_arg_map.py -> tests/models/test_xcom_arg_map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:     session.flush()",
          "257:     session.commit()",
          "259:     # Now \"pull\" should apply the mapping functions in order.",
          "260:     decision = dr.task_instance_scheduling_decisions(session=session)",
          "261:     for ti in decision.schedulable_tis:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     session.flush()",
          "260:     session.commit()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63789436209db9ab0f612581381d46bb18eb8f82",
      "candidate_info": {
        "commit_hash": "63789436209db9ab0f612581381d46bb18eb8f82",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/63789436209db9ab0f612581381d46bb18eb8f82",
        "files": [
          "airflow/config_templates/unit_tests.cfg",
          "airflow/jobs/job.py",
          "tests/jobs/test_base_job.py",
          "tests/utils/test_helpers.py"
        ],
        "message": "Don't just default to scheduler heartbeat in jobs (#33084)\n\n(cherry picked from commit c39359eafb7da21c098c07202c2bfe155c1db9ed)",
        "before_after_code_files": [
          "airflow/config_templates/unit_tests.cfg||airflow/config_templates/unit_tests.cfg",
          "airflow/jobs/job.py||airflow/jobs/job.py",
          "tests/jobs/test_base_job.py||tests/jobs/test_base_job.py",
          "tests/utils/test_helpers.py||tests/utils/test_helpers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/config_templates/unit_tests.cfg||airflow/config_templates/unit_tests.cfg": [
          "File: airflow/config_templates/unit_tests.cfg -> airflow/config_templates/unit_tests.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: parsing_processes = 2",
          "93: dag_dir_list_interval = 0",
          "95: [example_section]",
          "96: # This section is used to test coercions of configuration values retrieval",
          "97: string_value = 21600",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: [triggerer]",
          "96: # Those values are set so that during unit tests things run faster than usual.",
          "97: # Triggerer heartbeat intentionally different from scheduler to catch bad assumptions in code",
          "98: # that they are the same which by default they are in production but they can be configured differently",
          "99: # by users.",
          "100: job_heartbeat_sec = 2",
          "",
          "---------------"
        ],
        "airflow/jobs/job.py||airflow/jobs/job.py": [
          "File: airflow/jobs/job.py -> airflow/jobs/job.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     Only makes sense for SchedulerJob and BackfillJob instances.",
          "98:     \"\"\"",
          "102:     def __init__(self, executor=None, heartrate=None, **kwargs):",
          "103:         # Save init parameters as DB fields",
          "104:         self.hostname = get_hostname()",
          "",
          "[Removed Lines]",
          "100:     heartrate = conf.getfloat(\"scheduler\", \"JOB_HEARTBEAT_SEC\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     def executor(self):",
          "118:         return ExecutorLoader.get_default_executor()",
          "120:     def is_alive(self, grace_multiplier=2.1):",
          "121:         \"\"\"",
          "122:         Is this job currently alive.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     @cached_property",
          "119:     def heartrate(self):",
          "120:         if self.job_type == \"TriggererJob\":",
          "121:             return conf.getfloat(\"triggerer\", \"JOB_HEARTBEAT_SEC\")",
          "122:         else:",
          "123:             # Heartrate used to be hardcoded to scheduler, so in all other",
          "124:             # cases continue to use that value for back compat",
          "125:             return conf.getfloat(\"scheduler\", \"JOB_HEARTBEAT_SEC\")",
          "",
          "---------------"
        ],
        "tests/jobs/test_base_job.py||tests/jobs/test_base_job.py": [
          "File: tests/jobs/test_base_job.py -> tests/jobs/test_base_job.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from airflow.utils.state import State",
          "33: from tests.listeners import lifecycle_listener",
          "34: from tests.test_utils.config import conf_vars",
          "38: class TestJob:",
          "",
          "[Removed Lines]",
          "35: from tests.utils.test_helpers import MockJobRunner",
          "",
          "[Added Lines]",
          "35: from tests.utils.test_helpers import MockJobRunner, SchedulerJobRunner, TriggererJobRunner",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         assert job.state == State.FAILED",
          "91:         assert job.end_date is not None",
          "93:     def test_most_recent_job(self):",
          "94:         with create_session() as session:",
          "95:             old_job = Job(heartrate=10)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     @pytest.mark.parametrize(",
          "94:         \"job_runner, job_type,job_heartbeat_sec\",",
          "95:         [(SchedulerJobRunner, \"scheduler\", \"11\"), (TriggererJobRunner, \"triggerer\", \"9\")],",
          "96:     )",
          "97:     def test_heart_rate_after_fetched_from_db(self, job_runner, job_type, job_heartbeat_sec):",
          "98:         \"\"\"Ensure heartrate is set correctly after jobs are queried from the DB\"\"\"",
          "99:         with create_session() as session, conf_vars(",
          "100:             {(job_type.lower(), \"job_heartbeat_sec\"): job_heartbeat_sec}",
          "101:         ):",
          "102:             job = Job()",
          "103:             job_runner(job=job)",
          "104:             session.add(job)",
          "105:             session.flush()",
          "107:             most_recent = most_recent_job(job_runner.job_type, session=session)",
          "108:             assert most_recent.heartrate == float(job_heartbeat_sec)",
          "110:             session.rollback()",
          "112:     @pytest.mark.parametrize(",
          "113:         \"job_runner, job_type,job_heartbeat_sec\",",
          "114:         [(SchedulerJobRunner, \"scheduler\", \"11\"), (TriggererJobRunner, \"triggerer\", \"9\")],",
          "115:     )",
          "116:     def test_heart_rate_via_constructor_persists(self, job_runner, job_type, job_heartbeat_sec):",
          "117:         \"\"\"Ensure heartrate passed via constructor is set correctly\"\"\"",
          "118:         with conf_vars({(job_type.lower(), \"job_heartbeat_sec\"): job_heartbeat_sec}):",
          "119:             job = Job(heartrate=12)",
          "120:             job_runner(job)",
          "121:             # heartrate should be 12 since we passed that to the constructor directly",
          "122:             assert job.heartrate == 12",
          "",
          "---------------"
        ],
        "tests/utils/test_helpers.py||tests/utils/test_helpers.py": [
          "File: tests/utils/test_helpers.py -> tests/utils/test_helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         if self.func is not None:",
          "344:             return self.func()",
          "345:         return None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348: class SchedulerJobRunner(MockJobRunner):",
          "349:     job_type = \"SchedulerJob\"",
          "352: class TriggererJobRunner(MockJobRunner):",
          "353:     job_type = \"TriggererJob\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}