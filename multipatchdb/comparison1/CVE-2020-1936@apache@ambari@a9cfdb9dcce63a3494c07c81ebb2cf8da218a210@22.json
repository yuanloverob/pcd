{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "49827cc26f8eb42c79d57e9141334744f1a2e2c2",
      "candidate_info": {
        "commit_hash": "49827cc26f8eb42c79d57e9141334744f1a2e2c2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/49827cc26f8eb42c79d57e9141334744f1a2e2c2",
        "files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py"
        ],
        "message": "AMBARI-25156. /var/log/messages gets filled with unhandled Python exception for client modules in ambari-agent  (aonishuk)",
        "before_after_code_files": [
          "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/resource_management/libraries/script/script.py||ambari-common/src/main/python/resource_management/libraries/script/script.py": [
          "File: ambari-common/src/main/python/resource_management/libraries/script/script.py -> ambari-common/src/main/python/resource_management/libraries/script/script.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:         if not self.is_hook():",
          "355:           self.execute_prefix_function(self.command_name, 'post', env)",
          "357:     except Fail as ex:",
          "358:       ex.pre_raise()",
          "359:       raise",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:     # catch this to avoid unhandled exception logs in /var/log/messages",
          "358:     except (ComponentIsNotRunning, ClientComponentHasNoStatus), e:",
          "359:       traceback.print_exc()",
          "360:       sys.exit(1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc693c3e518bfd59e728d7d942ce4b1c8b2aea04",
      "candidate_info": {
        "commit_hash": "cc693c3e518bfd59e728d7d942ce4b1c8b2aea04",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cc693c3e518bfd59e728d7d942ce4b1c8b2aea04",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java",
          "ambari-server/src/main/resources/custom_actions/scripts/install_packages.py"
        ],
        "message": "AMBARI-25243. Tez/MR service check fails with ClassNotFoundException LzoCodec during host ordered upgrade (amagyar) (#2929) (#2930)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java",
          "ambari-server/src/main/resources/custom_actions/scripts/install_packages.py||ambari-server/src/main/resources/custom_actions/scripts/install_packages.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AGENT_STACK_RETRY_ON_UNAVAILABILITY;",
          "23: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_TIMEOUT;",
          "24: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMPONENT_CATEGORY;",
          "25: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT;",
          "26: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT_TYPE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.GPL_LICENSE_ACCEPTED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:         resourceFilter.getComponentName() : componentName);",
          "458:       Map<String, String> hostLevelParams = execCmd.getHostLevelParams();",
          "459:       hostLevelParams.put(AGENT_STACK_RETRY_ON_UNAVAILABILITY, configs.isAgentStackRetryOnInstallEnabled());",
          "460:       hostLevelParams.put(AGENT_STACK_RETRY_COUNT, configs.getAgentStackRetryOnInstallCount());",
          "461:       for (Map.Entry<String, String> dbConnectorName : configs.getDatabaseConnectorNames().entrySet()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:       hostLevelParams.put(GPL_LICENSE_ACCEPTED, configs.getGplLicenseAccepted().toString());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/custom_actions/scripts/install_packages.py||ambari-server/src/main/resources/custom_actions/scripts/install_packages.py": [
          "File: ambari-server/src/main/resources/custom_actions/scripts/install_packages.py -> ambari-server/src/main/resources/custom_actions/scripts/install_packages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: from resource_management.libraries.functions.stack_features import check_stack_feature",
          "41: from resource_management.libraries.script.script import Script",
          "42: from resource_management.core import sudo",
          "45: class InstallPackages(Script):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: from resource_management.libraries.functions import lzo_utils",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:       num_errors += 1",
          "145:       Logger.logger.exception(\"Could not install packages. Error: {0}\".format(str(err)))",
          "147:     # Provide correct exit code",
          "148:     if num_errors > 0:",
          "149:       raise Fail(\"Failed to distribute repositories/install packages\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     try:",
          "149:       lzo_utils.install_lzo_if_needed()",
          "150:     except Exception as err:",
          "151:       num_errors += 1",
          "152:       Logger.logger.exception(\"Could not install LZO packages. Error: {0}\".format(str(err)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "492e93314e9b83d5d68d10fdc5758a6edbd48ca8",
      "candidate_info": {
        "commit_hash": "492e93314e9b83d5d68d10fdc5758a6edbd48ca8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/492e93314e9b83d5d68d10fdc5758a6edbd48ca8",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "AMBARI-24304 Fix convert table classpath (asutosh)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       hive_kinit_cmd = format(\"{kinit_path_local} -kt {hive_server2_keytab} {hive_principal}; \")",
          "100:       Execute(hive_kinit_cmd, user = params.hive_user)",
          "103:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute\")",
          "104:     Execute(cmd, user = params.hive_user)",
          "",
          "[Removed Lines]",
          "102:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf\")",
          "",
          "[Added Lines]",
          "102:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{source_dir}/hadoop-hdfs/*:{source_dir}/hadoop-hdfs/lib/*:{source_dir}/hadoop/etc/hadoop/:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf/conf.server\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9177549950acb645a73b3e0d9bccfc1e81232a69",
      "candidate_info": {
        "commit_hash": "9177549950acb645a73b3e0d9bccfc1e81232a69",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9177549950acb645a73b3e0d9bccfc1e81232a69",
        "files": [
          "ambari-web/test/views/common/configs/config_versions_control_view_test.js"
        ],
        "message": "AMBARI-24635. Web Client Chooses Wrong Version When Reverting Configs (akovalenko)",
        "before_after_code_files": [
          "ambari-web/test/views/common/configs/config_versions_control_view_test.js||ambari-web/test/views/common/configs/config_versions_control_view_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/test/views/common/configs/config_versions_control_view_test.js||ambari-web/test/views/common/configs/config_versions_control_view_test.js": [
          "File: ambari-web/test/views/common/configs/config_versions_control_view_test.js -> ambari-web/test/views/common/configs/config_versions_control_view_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       view.sendRevertCall.restore();",
          "102:     });",
          "103:     it('context passed', function () {",
          "111:       expect(App.ModalPopup.show.calledOnce).to.be.true;",
          "112:       expect(view.sendRevertCall.calledWith(Em.Object.create({",
          "",
          "[Removed Lines]",
          "104:       view.makeCurrent({contexts: [",
          "105:         Em.Object.create({",
          "106:           version: 1,",
          "107:           serviceName: 'S1'",
          "108:         })",
          "109:       ]});",
          "",
          "[Added Lines]",
          "104:       view.set('displayedServiceVersion', Em.Object.create({",
          "105:         version: 1,",
          "106:         serviceName: 'S1'",
          "107:       }));",
          "109:       view.makeCurrent();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abeba0a09df248212cb33bb61757782270f262f3",
      "candidate_info": {
        "commit_hash": "abeba0a09df248212cb33bb61757782270f262f3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/abeba0a09df248212cb33bb61757782270f262f3",
        "files": [
          "ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/main/python/ambari_server/userInput.py",
          "ambari-server/src/test/python/TestAmbariServer.py"
        ],
        "message": "AMBARI-24187 - Ambari Server Setup LDAP Label Updates (#1961)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/main/python/ambari_server/userInput.py||ambari-server/src/main/python/ambari_server/userInput.py",
          "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSecurity.py -> ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: See the License for the specific language governing permissions and",
          "18: limitations under the License.",
          "19: '''",
          "20: import base64",
          "21: import fileinput",
          "22: import getpass",
          "26: import os",
          "27: import re",
          "28: import shutil",
          "31: import sys",
          "34: from ambari_commons.exceptions import FatalException, NonFatalException",
          "35: from ambari_commons.logging_utils import print_warning_msg, print_error_msg, print_info_msg, get_verbose",
          "36: from ambari_commons.os_check import OSConst",
          "37: from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl",
          "38: from ambari_commons.os_utils import is_root, set_file_permissions, \\",
          "39:   run_os_command, search_file, is_valid_filepath, change_owner, get_ambari_repo_file_full_name, get_file_owner",
          "40: from ambari_server.serverConfiguration import configDefaults, parse_properties_file, \\",
          "41:   encrypt_password, find_jdk, find_properties_file, get_alias_string, get_ambari_properties, get_conf_dir, \\",
          "42:   get_credential_store_location, get_is_persisted, get_is_secure, get_master_key_location, get_db_type, write_property, \\",
          "",
          "[Removed Lines]",
          "23: import stat",
          "24: import tempfile",
          "25: import ambari_simplejson as json # simplejson is much faster comparing to Python 2.6 json module and has the same functions set.",
          "29: import urllib2",
          "30: import time",
          "32: import logging",
          "",
          "[Added Lines]",
          "20: import \\",
          "21:   ambari_simplejson as json  # simplejson is much faster comparing to Python 2.6 json module and has the same functions set.",
          "25: import logging",
          "29: import stat",
          "31: import tempfile",
          "32: import time",
          "33: import urllib2",
          "40: from ambari_server.dbConfiguration import ensure_jdbc_driver_is_installed",
          "41: from ambari_server.serverClassPath import ServerClassPath",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   SECURITY_IS_ENCRYPTION_ENABLED, SECURITY_KEY_ENV_VAR_NAME, SECURITY_KERBEROS_JASS_FILENAME, \\",
          "49:   SECURITY_PROVIDER_KEY_CMD, SECURITY_MASTER_KEY_FILENAME, SSL_TRUSTSTORE_PASSWORD_ALIAS, \\",
          "50:   SSL_TRUSTSTORE_PASSWORD_PROPERTY, SSL_TRUSTSTORE_PATH_PROPERTY, SSL_TRUSTSTORE_TYPE_PROPERTY, \\",
          "53: from ambari_server.serverUtils import is_server_runing, get_ambari_server_api_base, \\",
          "54:   get_ambari_admin_username_password_pair, perform_changes_via_rest_api, get_ssl_context",
          "55: from ambari_server.setupActions import SETUP_ACTION, LDAP_SETUP_ACTION",
          "60: from contextlib import closing",
          "62: logger = logging.getLogger(__name__)",
          "64: REGEX_IP_ADDRESS = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"",
          "65: REGEX_HOSTNAME = \"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$\"",
          "66: REGEX_PORT = \"^([0-9]{1,5}$)\"",
          "",
          "[Removed Lines]",
          "51:   SSL_API, SSL_API_PORT, DEFAULT_SSL_API_PORT, CLIENT_API_PORT, JDK_NAME_PROPERTY, JCE_NAME_PROPERTY, JAVA_HOME_PROPERTY, \\",
          "52:   get_resources_location, SECURITY_MASTER_KEY_LOCATION, SETUP_OR_UPGRADE_MSG, CHECK_AMBARI_KRB_JAAS_CONFIGURATION_PROPERTY",
          "56: from ambari_server.userInput import get_validated_string_input, get_prompt_default, read_password, get_YN_input, quit_if_has_answer",
          "57: from ambari_server.serverClassPath import ServerClassPath",
          "58: from ambari_server.dbConfiguration import DBMSConfigFactory, check_jdbc_drivers, \\",
          "59:   get_jdbc_driver_path, ensure_jdbc_driver_is_installed, LINUX_DBMS_KEYS_LIST",
          "",
          "[Added Lines]",
          "53:   JDK_NAME_PROPERTY, JCE_NAME_PROPERTY, JAVA_HOME_PROPERTY, \\",
          "54:   get_resources_location, SECURITY_MASTER_KEY_LOCATION, SETUP_OR_UPGRADE_MSG, \\",
          "55:   CHECK_AMBARI_KRB_JAAS_CONFIGURATION_PROPERTY",
          "59: from ambari_server.userInput import get_validated_string_input, get_prompt_default, read_password, get_YN_input, \\",
          "60:   quit_if_has_answer",
          "65: LDAP_AD=\"AD\"",
          "66: LDAP_IPA=\"IPA\"",
          "67: LDAP_GENERIC=\"Generic LDAP\"",
          "69: LDAP_TYPES = [LDAP_AD, LDAP_IPA, LDAP_GENERIC]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: REGEX_TRUE_FALSE = \"^(true|false)?$\"",
          "69: REGEX_SKIP_CONVERT = \"^(skip|convert)?$\"",
          "70: REGEX_REFERRAL = \"^(follow|ignore)?$\"",
          "71: REGEX_ANYTHING = \".*\"",
          "72: LDAP_TO_PAM_MIGRATION_HELPER_CMD = \"{0} -cp {1} \" + \\",
          "73:                                    \"org.apache.ambari.server.security.authentication.LdapToPamMigrationHelper\" + \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: REGEX_LDAP_TYPE = \"^({})?$\".format(\"|\".join(LDAP_TYPES))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213:     change_owner(path, user, recursive)",
          "215: def configure_ldap_password(options):",
          "222:   return password",
          "",
          "[Removed Lines]",
          "216:   passwordDefault = \"\"",
          "217:   passwordPrompt = 'Enter Manager Password* : '",
          "218:   passwordPattern = \".*\"",
          "219:   passwordDescr = \"Invalid characters in password.\"",
          "220:   password = read_password(passwordDefault, passwordPattern, passwordPrompt, passwordDescr, options.ldap_manager_password)",
          "",
          "[Added Lines]",
          "224:   password_default = \"\"",
          "225:   password_prompt = 'Enter Bind DN Password: '",
          "226:   confirm_password_prompt = 'Confirm Bind DN Password: '",
          "227:   password_pattern = \".*\"",
          "228:   password_descr = \"Invalid characters in password.\"",
          "229:   password = read_password(password_default, password_pattern, password_prompt, password_descr, options.ldap_manager_password, confirm_password_prompt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "631:   def __init__(self, properties, i_option, i_prop_name, i_prop_val_pattern, i_prompt_regex, i_allow_empty_prompt, i_prop_name_default=None):",
          "632:     self.prop_name = i_prop_name",
          "633:     self.option = i_option",
          "636:     self.prompt_regex = i_prompt_regex",
          "637:     self.allow_empty_prompt = i_allow_empty_prompt",
          "639: @OsFamilyFuncImpl(OSConst.WINSRV_FAMILY)",
          "641:   # python2.x dict is not ordered",
          "642:   ldap_properties = [",
          "652:   ]",
          "653:   return ldap_properties",
          "655: @OsFamilyFuncImpl(OsFamilyImpl.DEFAULT)",
          "657:   ldap_properties = [",
          "675:   ]",
          "676:   return ldap_properties",
          "678: def update_ldap_configuration(options, properties, ldap_property_value_map):",
          "679:   admin_login, admin_password = get_ambari_admin_username_password_pair(options)",
          "680:   request_data = {",
          "",
          "[Removed Lines]",
          "634:     self.ldap_prop_name = get_value_from_properties(properties, i_prop_name, i_prop_name_default)",
          "635:     self.ldap_prop_val_prompt = i_prop_val_pattern.format(get_prompt_default(self.ldap_prop_name))",
          "640: def init_ldap_properties_list_reqd(properties, options):",
          "643:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary URL Host* {0}: \", REGEX_HOSTNAME, False),",
          "644:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary URL Port* {0}: \", REGEX_PORT, False),",
          "645:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary URL Host {0}: \", REGEX_HOSTNAME, True),",
          "646:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary URL Port {0}: \", REGEX_PORT, True),",
          "647:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL* [true/false] {0}: \", REGEX_TRUE_FALSE, False, \"false\"),",
          "648:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User name attribute* {0}: \", REGEX_ANYTHING, False, \"uid\"),",
          "649:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Base DN* {0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "650:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore] {0}: \", REGEX_REFERRAL, True),",
          "651:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\" \"Bind anonymously* [true/false] {0}: \", REGEX_TRUE_FALSE, False, \"false\")",
          "656: def init_ldap_properties_list_reqd(properties, options):",
          "658:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary URL Host* {0}: \", REGEX_HOSTNAME, False),",
          "659:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary URL Port* {0}: \", REGEX_PORT, False),",
          "660:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary URL Host {0}: \", REGEX_HOSTNAME, True),",
          "661:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary URL Port {0}: \", REGEX_PORT, True),",
          "662:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL* [true/false] {0}: \", REGEX_TRUE_FALSE, False, \"false\"),",
          "663:     LdapPropTemplate(properties, options.ldap_user_class, \"ambari.ldap.attributes.user.object_class\", \"User object class* {0}: \", REGEX_ANYTHING, False, \"person\"),",
          "664:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User name attribute* {0}: \", REGEX_ANYTHING, False, \"uid\"),",
          "665:     LdapPropTemplate(properties, options.ldap_group_class, \"ambari.ldap.attributes.group.object_class\", \"Group object class* {0}: \", REGEX_ANYTHING, False, \"posixGroup\"),",
          "666:     LdapPropTemplate(properties, options.ldap_group_attr, \"ambari.ldap.attributes.group.name_attr\", \"Group name attribute* {0}: \", REGEX_ANYTHING, False, \"cn\"),",
          "667:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute* {0}: \", REGEX_ANYTHING, False, \"memberUid\"),",
          "668:     LdapPropTemplate(properties, options.ldap_dn, \"ambari.ldap.attributes.dn_attr\", \"Distinguished name attribute* {0}: \", REGEX_ANYTHING, False, \"dn\"),",
          "669:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Base DN* {0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "670:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore] {0}: \", REGEX_REFERRAL, True),",
          "671:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\", \"Bind anonymously* [true/false] {0}: \", REGEX_TRUE_FALSE, False, \"false\"),",
          "672:     LdapPropTemplate(properties, options.ldap_sync_username_collisions_behavior, \"ambari.ldap.advance.collision_behavior\", \"Handling behavior for username collisions [convert/skip] for LDAP sync* {0}: \", REGEX_SKIP_CONVERT, False, \"convert\"),",
          "673:     LdapPropTemplate(properties, options.ldap_force_lowercase_usernames, \"ambari.ldap.advanced.force_lowercase_usernames\", \"Force lower-case user names [true/false] {0}:\", REGEX_TRUE_FALSE, True),",
          "674:     LdapPropTemplate(properties, options.ldap_pagination_enabled, \"ambari.ldap.advanced.pagination_enabled\", \"Results from LDAP are paginated when requested [true/false] {0}:\", REGEX_TRUE_FALSE, True)",
          "",
          "[Added Lines]",
          "643:     self.ldap_prop_value = get_value_from_properties(properties, i_prop_name, i_prop_name_default)",
          "644:     self.ldap_prop_val_prompt = format_prop_val_prompt(i_prop_val_pattern, self.ldap_prop_value)",
          "648: def format_prop_val_prompt(prop_prompt_pattern, prop_default_value):",
          "649:   default_value = get_prompt_default(prop_default_value)",
          "650:   return prop_prompt_pattern.format((\" \" + default_value) if default_value is not None and default_value != \"\" else \"\")",
          "653: def init_ldap_properties_list_reqd(properties, options, ldap_type):",
          "656:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, get_default_prop_value(ldap_type, {LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "657:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, get_default_prop_value(ldap_type, {LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "658:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary LDAP Host <Optional>{0}: \", REGEX_HOSTNAME, True),",
          "659:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary LDAP Port <Optional>{0}: \", REGEX_PORT, True),",
          "660:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, get_default_prop_value(ldap_type, {LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "661:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "662:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "663:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, \"follow\"),",
          "664:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\" \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, \"false\")",
          "669: def init_ldap_properties_list_reqd(properties, options, ldap_type):",
          "671:     LdapPropTemplate(properties, options.ldap_primary_host, \"ambari.ldap.connectivity.server.host\", \"Primary LDAP Host{0}: \", REGEX_HOSTNAME, False, get_default_prop_value(ldap_type, {LDAP_IPA:'ipa.ambari.apache.org', LDAP_GENERIC:'ldap.ambari.apache.org'})),",
          "672:     LdapPropTemplate(properties, options.ldap_primary_port, \"ambari.ldap.connectivity.server.port\", \"Primary LDAP Port{0}: \", REGEX_PORT, False, get_default_prop_value(ldap_type, {LDAP_IPA:'636', LDAP_GENERIC:'389'})),",
          "673:     LdapPropTemplate(properties, options.ldap_secondary_host, \"ambari.ldap.connectivity.secondary.server.host\", \"Secondary LDAP Host <Optional>{0}: \", REGEX_HOSTNAME, True),",
          "674:     LdapPropTemplate(properties, options.ldap_secondary_port, \"ambari.ldap.connectivity.secondary.server.port\", \"Secondary LDAP Port <Optional>{0}: \", REGEX_PORT, True),",
          "675:     LdapPropTemplate(properties, options.ldap_ssl, \"ambari.ldap.connectivity.use_ssl\", \"Use SSL [true/false]{0}: \", REGEX_TRUE_FALSE, False, get_default_prop_value(ldap_type, {LDAP_AD:'false', LDAP_IPA:'true', LDAP_GENERIC:'false'})),",
          "676:     LdapPropTemplate(properties, options.ldap_user_class, \"ambari.ldap.attributes.user.object_class\", \"User object class{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'user', LDAP_IPA:'posixUser', LDAP_GENERIC:'posixUser'})),",
          "677:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "678:     LdapPropTemplate(properties, options.ldap_group_class, \"ambari.ldap.attributes.group.object_class\", \"Group object class{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'group', LDAP_IPA:'posixGroup', LDAP_GENERIC:'posixGroup'})),",
          "679:     LdapPropTemplate(properties, options.ldap_group_attr, \"ambari.ldap.attributes.group.name_attr\", \"Group name attribute{0}: \", REGEX_ANYTHING, False, \"cn\"),",
          "680:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'member', LDAP_IPA:'memberUid', LDAP_GENERIC:'memberUid'})),",
          "681:     LdapPropTemplate(properties, options.ldap_dn, \"ambari.ldap.attributes.dn_attr\", \"Distinguished name attribute{0}: \", REGEX_ANYTHING, False, get_default_prop_value(ldap_type, {LDAP_AD:'distinguishedName', LDAP_IPA:'dn', LDAP_GENERIC:'dn'})),",
          "682:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, \"dc=ambari,dc=apache,dc=org\"),",
          "683:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, \"follow\"),",
          "684:     LdapPropTemplate(properties, options.ldap_bind_anonym, \"ambari.ldap.connectivity.anonymous_bind\", \"Bind anonymously [true/false]{0}: \", REGEX_TRUE_FALSE, False, \"false\"),",
          "685:     LdapPropTemplate(properties, options.ldap_sync_username_collisions_behavior, \"ambari.ldap.advance.collision_behavior\", \"Handling behavior for username collisions [convert/skip] for LDAP sync{0}: \", REGEX_SKIP_CONVERT, False, \"skip\"),",
          "686:     LdapPropTemplate(properties, options.ldap_force_lowercase_usernames, \"ambari.ldap.advanced.force_lowercase_usernames\", \"Force lower-case user names [true/false]{0}:\", REGEX_TRUE_FALSE, True),",
          "687:     LdapPropTemplate(properties, options.ldap_pagination_enabled, \"ambari.ldap.advanced.pagination_enabled\", \"Results from LDAP are paginated when requested [true/false]{0}:\", REGEX_TRUE_FALSE, True)",
          "691: def get_default_prop_value(ldap_type, default_value_map):",
          "692:   return default_value_map[ldap_type] if ldap_type in default_value_map else None",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "687:   request_data['Configuration']['properties'] = ldap_property_value_map",
          "688:   perform_changes_via_rest_api(properties, admin_login, admin_password, SETUP_LDAP_CONFIG_URL, 'PUT', request_data)",
          "690: def setup_ldap(options):",
          "691:   logger.info(\"Setup LDAP.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707: def query_ldap_type():",
          "708:   return get_validated_string_input(\"Please select the type of LDAP you want to use ({}):\".format(\", \".join(LDAP_TYPES)),",
          "709:                                     None,",
          "710:                                     REGEX_LDAP_TYPE,",
          "711:                                     \"Please enter one of the followings '{}'!\".format(\"', '\".join(LDAP_TYPES)),",
          "712:                                     False,",
          "713:                                     False)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "719:     options.ldap_secondary_host = options.ldap_secondary_url.split(':')[0]",
          "720:     options.ldap_secondary_port = options.ldap_secondary_url.split(':')[1]",
          "724:   ldap_property_list_opt = [LDAP_MGR_USERNAME_PROPERTY,",
          "725:                             LDAP_MGR_PASSWORD_PROPERTY,",
          "",
          "[Removed Lines]",
          "722:   ldap_property_list_reqd = init_ldap_properties_list_reqd(properties, options)",
          "",
          "[Added Lines]",
          "747:   ldap_type = query_ldap_type()",
          "749:   ldap_property_list_reqd = init_ldap_properties_list_reqd(properties, options, ldap_type)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "730:   ldap_property_list_passwords=[LDAP_MGR_PASSWORD_PROPERTY, SSL_TRUSTSTORE_PASSWORD_PROPERTY]",
          "734:   SSL_TRUSTSTORE_TYPE_DEFAULT = get_value_from_properties(properties, SSL_TRUSTSTORE_TYPE_PROPERTY, \"jks\")",
          "735:   SSL_TRUSTSTORE_PATH_DEFAULT = get_value_from_properties(properties, SSL_TRUSTSTORE_PATH_PROPERTY)",
          "",
          "[Removed Lines]",
          "732:   LDAP_MGR_DN_DEFAULT = None",
          "",
          "[Added Lines]",
          "759:   ldap_mgr_dn_default = get_default_prop_value(ldap_type, {",
          "760:     LDAP_AD:'cn=ldapbind,dc=ambari,dc=apache,dc=org',",
          "761:     LDAP_IPA:'uid=ldapbind,cn=users,cn=accounts,dc=ambari,dc=apache,dc=org',",
          "762:     LDAP_GENERIC:'uid=ldapbind,cn=users,dc=ambari,dc=apache,dc=org'})",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "737:   ldap_property_value_map = {}",
          "738:   ldap_property_values_in_ambari_properties = {}",
          "739:   for ldap_prop in ldap_property_list_reqd:",
          "741:                                        \"Invalid characters in the input!\", False, ldap_prop.allow_empty_prompt,",
          "742:                                        answer = ldap_prop.option)",
          "743:     if input is not None and input != \"\":",
          "744:       ldap_property_value_map[ldap_prop.prop_name] = input",
          "791:       pass",
          "804:   print '=' * 20",
          "805:   print 'Review Settings'",
          "",
          "[Removed Lines]",
          "740:     input = get_validated_string_input(ldap_prop.ldap_prop_val_prompt, ldap_prop.ldap_prop_name, ldap_prop.prompt_regex,",
          "746:   bindAnonymously = ldap_property_value_map[LDAP_ANONYMOUS_BIND]",
          "747:   anonymous = (bindAnonymously and bindAnonymously.lower() == 'true')",
          "748:   mgr_password = None",
          "749:   # Ask for manager credentials only if bindAnonymously is false",
          "750:   if not anonymous:",
          "751:     username = get_validated_string_input(\"Manager DN* {0}: \".format(",
          "752:      get_prompt_default(LDAP_MGR_DN_DEFAULT)), LDAP_MGR_DN_DEFAULT, \".*\",",
          "753:       \"Invalid characters in the input!\", False, False, answer = options.ldap_manager_dn)",
          "754:     ldap_property_value_map[LDAP_MGR_USERNAME_PROPERTY] = username",
          "755:     mgr_password = configure_ldap_password(options)",
          "756:     ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = mgr_password",
          "758:   useSSL = ldap_property_value_map[LDAP_USE_SSL]",
          "759:   ldaps = (useSSL and useSSL.lower() == 'true')",
          "760:   ts_password = None",
          "762:   if ldaps:",
          "763:     truststore_default = \"n\"",
          "764:     truststore_set = bool(SSL_TRUSTSTORE_PATH_DEFAULT)",
          "765:     if truststore_set:",
          "766:       truststore_default = \"y\"",
          "767:     custom_trust_store = True if options.trust_store_path is not None and options.trust_store_path else False",
          "768:     if not custom_trust_store:",
          "769:       custom_trust_store = get_YN_input(\"Do you want to provide custom TrustStore for Ambari [y/n] ({0})?\".",
          "770:                                       format(truststore_default),",
          "771:                                       truststore_set)",
          "772:     if custom_trust_store:",
          "773:       ts_type = get_validated_string_input(\"TrustStore type [jks/jceks/pkcs12] {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_TYPE_DEFAULT)),",
          "774:         SSL_TRUSTSTORE_TYPE_DEFAULT, \"^(jks|jceks|pkcs12)?$\", \"Wrong type\", False, answer=options.trust_store_type)",
          "775:       ts_path = None",
          "776:       while True:",
          "777:         ts_path = get_validated_string_input(\"Path to TrustStore file {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_PATH_DEFAULT)),",
          "778:           SSL_TRUSTSTORE_PATH_DEFAULT, \".*\", False, False, answer = options.trust_store_path)",
          "779:         if os.path.exists(ts_path):",
          "780:           break",
          "781:         else:",
          "782:           print 'File not found.'",
          "783:           hasAnswer = options.trust_store_path is not None and options.trust_store_path",
          "784:           quit_if_has_answer(hasAnswer)",
          "786:       ts_password = read_password(\"\", \".*\", \"Password for TrustStore:\", \"Invalid characters in password\", options.trust_store_password)",
          "788:       ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_TYPE_PROPERTY] = ts_type",
          "789:       ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_PATH_PROPERTY] = ts_path",
          "790:       ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_PASSWORD_PROPERTY] = ts_password",
          "792:     elif properties.get_property(SSL_TRUSTSTORE_TYPE_PROPERTY):",
          "793:       print 'The TrustStore is already configured: '",
          "794:       print '  ' + SSL_TRUSTSTORE_TYPE_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_TYPE_PROPERTY)",
          "795:       print '  ' + SSL_TRUSTSTORE_PATH_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_PATH_PROPERTY)",
          "796:       print '  ' + SSL_TRUSTSTORE_PASSWORD_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_PASSWORD_PROPERTY)",
          "797:       if get_YN_input(\"Do you want to remove these properties [y/n] (y)? \", True, options.trust_store_reconfigure):",
          "798:         properties.removeOldProp(SSL_TRUSTSTORE_TYPE_PROPERTY)",
          "799:         properties.removeOldProp(SSL_TRUSTSTORE_PATH_PROPERTY)",
          "800:         properties.removeOldProp(SSL_TRUSTSTORE_PASSWORD_PROPERTY)",
          "801:     pass",
          "802:   pass",
          "",
          "[Added Lines]",
          "770:     input = get_validated_string_input(ldap_prop.ldap_prop_val_prompt, ldap_prop.ldap_prop_value, ldap_prop.prompt_regex,",
          "776:     if ldap_prop.prop_name == LDAP_ANONYMOUS_BIND:",
          "777:       anonymous = (input and input.lower() == 'true')",
          "778:       mgr_password = None",
          "779:       # Ask for manager credentials only if bindAnonymously is false",
          "780:       if not anonymous:",
          "781:         username = get_validated_string_input(",
          "782:           format_prop_val_prompt(\"Bind DN{0}: \", get_value_from_properties(properties, LDAP_MGR_USERNAME_PROPERTY, ldap_mgr_dn_default)),",
          "783:           ldap_mgr_dn_default, \".*\",",
          "784:           \"Invalid characters in the input!\", False, False, answer = options.ldap_manager_dn)",
          "785:         ldap_property_value_map[LDAP_MGR_USERNAME_PROPERTY] = username",
          "786:         mgr_password = configure_ldap_password(options)",
          "787:         ldap_property_value_map[LDAP_MGR_PASSWORD_PROPERTY] = mgr_password",
          "788:     elif ldap_prop.prop_name == LDAP_USE_SSL:",
          "789:       ldaps = (input and input.lower() == 'true')",
          "790:       ts_password = None",
          "792:       if ldaps:",
          "793:         truststore_default = \"n\"",
          "794:         truststore_set = bool(SSL_TRUSTSTORE_PATH_DEFAULT)",
          "795:         if truststore_set:",
          "796:           truststore_default = \"y\"",
          "797:         custom_trust_store = True if options.trust_store_path is not None and options.trust_store_path else False",
          "798:         if not custom_trust_store:",
          "799:           custom_trust_store = get_YN_input(\"Do you want to provide custom TrustStore for Ambari [y/n] ({0})?\".",
          "800:                                           format(truststore_default),",
          "801:                                           truststore_set)",
          "802:         if custom_trust_store:",
          "803:           ts_type = get_validated_string_input(\"TrustStore type [jks/jceks/pkcs12] {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_TYPE_DEFAULT)),",
          "804:             SSL_TRUSTSTORE_TYPE_DEFAULT, \"^(jks|jceks|pkcs12)?$\", \"Wrong type\", False, answer=options.trust_store_type)",
          "805:           ts_path = None",
          "806:           while True:",
          "807:             ts_path = get_validated_string_input(\"Path to TrustStore file {0}:\".format(get_prompt_default(SSL_TRUSTSTORE_PATH_DEFAULT)),",
          "808:               SSL_TRUSTSTORE_PATH_DEFAULT, \".*\", False, False, answer = options.trust_store_path)",
          "809:             if os.path.exists(ts_path):",
          "810:               break",
          "811:             else:",
          "812:               print 'File not found.'",
          "813:               hasAnswer = options.trust_store_path is not None and options.trust_store_path",
          "814:               quit_if_has_answer(hasAnswer)",
          "816:           ts_password = read_password(\"\", \".*\", \"Password for TrustStore:\", \"Invalid characters in password\", options.trust_store_password)",
          "818:           ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_TYPE_PROPERTY] = ts_type",
          "819:           ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_PATH_PROPERTY] = ts_path",
          "820:           ldap_property_values_in_ambari_properties[SSL_TRUSTSTORE_PASSWORD_PROPERTY] = ts_password",
          "821:           pass",
          "822:         elif properties.get_property(SSL_TRUSTSTORE_TYPE_PROPERTY):",
          "823:           print 'The TrustStore is already configured: '",
          "824:           print '  ' + SSL_TRUSTSTORE_TYPE_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_TYPE_PROPERTY)",
          "825:           print '  ' + SSL_TRUSTSTORE_PATH_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_PATH_PROPERTY)",
          "826:           print '  ' + SSL_TRUSTSTORE_PASSWORD_PROPERTY + ' = ' + properties.get_property(SSL_TRUSTSTORE_PASSWORD_PROPERTY)",
          "827:           if get_YN_input(\"Do you want to remove these properties [y/n] (y)? \", True, options.trust_store_reconfigure):",
          "828:             properties.removeOldProp(SSL_TRUSTSTORE_TYPE_PROPERTY)",
          "829:             properties.removeOldProp(SSL_TRUSTSTORE_PATH_PROPERTY)",
          "830:             properties.removeOldProp(SSL_TRUSTSTORE_PASSWORD_PROPERTY)",
          "831:         pass",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/userInput.py||ambari-server/src/main/python/ambari_server/userInput.py": [
          "File: ambari-server/src/main/python/ambari_server/userInput.py -> ambari-server/src/main/python/ambari_server/userInput.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: '''",
          "21: import os",
          "23: import re",
          "25: from ambari_commons.logging_utils import get_silent",
          "",
          "[Removed Lines]",
          "22: import getpass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:     return '(' + defaultStr + ')'",
          "166:   input = True",
          "167:   while(input):",
          "168:     # setup password",
          "174:                       \"_ or - characters\"",
          "178:     if not password:",
          "179:       print 'Password cannot be blank.'",
          "180:       continue",
          "185:       if password != password1:",
          "186:         print \"Passwords do not match\"",
          "187:         continue",
          "",
          "[Removed Lines]",
          "160: def read_password(passwordDefault,",
          "161:                   passwordPattern,",
          "162:                   passwordPrompt=None,",
          "163:                   passwordDescr=None,",
          "164:                   answer=None):",
          "169:     if passwordPrompt is None:",
          "170:       passwordPrompt = 'Password (' + passwordDefault + '): '",
          "172:     if passwordDescr is None:",
          "173:       passwordDescr = \"Invalid characters in password. Use only alphanumeric or \" \\",
          "176:     password = get_validated_string_input(passwordPrompt, passwordDefault,",
          "177:                                           passwordPattern, passwordDescr, True, answer = answer)",
          "182:     if password != passwordDefault:",
          "183:       password1 = get_validated_string_input(\"Re-enter password: \", passwordDefault, passwordPattern,",
          "184:                                              passwordDescr, True, answer = answer)",
          "",
          "[Added Lines]",
          "159: def read_password(password_default,",
          "160:                   password_pattern,",
          "161:                   password_prompt=None,",
          "162:                   password_descr=None,",
          "163:                   answer=None,",
          "164:                   confirm_password_prompt=\"Re-enter password: \"):",
          "169:     if password_prompt is None:",
          "170:       password_prompt = 'Password (' + password_default + '): '",
          "172:     if password_descr is None:",
          "173:       password_descr = \"Invalid characters in password. Use only alphanumeric or \" \\",
          "176:     password = get_validated_string_input(password_prompt, password_default,",
          "177:                                           password_pattern, password_descr, True, answer = answer)",
          "182:     if password != password_default:",
          "183:       password1 = get_validated_string_input(confirm_password_prompt, password_default, password_pattern,",
          "184:                                              password_descr, True, answer = answer)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py": [
          "File: ambari-server/src/test/python/TestAmbariServer.py -> ambari-server/src/test/python/TestAmbariServer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: limitations under the License.",
          "17: '''",
          "18: import os",
          "20: import sys",
          "22: with patch.object(os, \"geteuid\", new=MagicMock(return_value=0)):",
          "23:   from resource_management.core import sudo",
          "24:   reload(sudo)",
          "29: import datetime",
          "31: import json",
          "32: import operator",
          "33: from ambari_commons import subprocess32",
          "35: import platform",
          "36: import socket",
          "37: import re",
          "39: import signal",
          "40: import stat",
          "41: import StringIO",
          "42: import tempfile",
          "46: from unittest import TestCase",
          "47: os.environ[\"ROOT\"] = \"\"",
          "50: from ambari_commons import os_utils",
          "52: if get_platform() != PLATFORM_WINDOWS:",
          "55: import shutil",
          "56: project_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)),os.path.normpath(\"../../../../\"))",
          "",
          "[Removed Lines]",
          "19: from mock.mock import patch, MagicMock, create_autospec, call",
          "26: from stacks.utils.RMFTestCase import *",
          "28: import traceback",
          "30: import errno",
          "34: from optparse import OptionParser",
          "38: import shutil",
          "43: import logging",
          "44: import logging.handlers",
          "45: import logging.config",
          "49: from only_for_platform import get_platform, not_for_platform, only_for_platform, os_distro_value, PLATFORM_LINUX, PLATFORM_WINDOWS",
          "53:   from pwd import getpwnam",
          "",
          "[Added Lines]",
          "20: from mock.mock import patch, MagicMock, call",
          "40: from only_for_platform import get_platform, not_for_platform, only_for_platform, os_distro_value, PLATFORM_WINDOWS",
          "44:   pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                 from ambari_server.dbConfiguration_linux import PGConfig, LinuxDBMSConfig, OracleConfig",
          "92:                 from ambari_server.properties import Properties",
          "93:                 from ambari_server.resourceFilesKeeper import ResourceFilesKeeper, KeeperException",
          "96:                   find_properties_file, get_ambari_properties, get_JAVA_HOME, \\",
          "97:                   parse_properties_file, read_ambari_user, update_ambari_properties, update_properties_2, write_property, find_jdk, \\",
          "98:                   get_is_active_instance, \\",
          "",
          "[Removed Lines]",
          "94:                 from ambari_server.serverConfiguration import configDefaults, get_java_exe_path, \\",
          "95:                   check_database_name_property, OS_FAMILY_PROPERTY, \\",
          "",
          "[Added Lines]",
          "85:                 from ambari_server.serverConfiguration import configDefaults, check_database_name_property, OS_FAMILY_PROPERTY, \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:                   JDBC_DATABASE_NAME_PROPERTY, OS_TYPE_PROPERTY, validate_jdk, JDBC_POSTGRES_SCHEMA_PROPERTY, \\",
          "102:                   RESOURCES_DIR_PROPERTY, JDBC_RCA_PASSWORD_ALIAS, JDBC_RCA_SCHEMA_PROPERTY, \\",
          "103:                   SSL_API, SSL_API_PORT, CLIENT_API_PORT_PROPERTY,\\",
          "108:                   SSL_TRUSTSTORE_PASSWORD_PROPERTY, SECURITY_IS_ENCRYPTION_ENABLED, PID_DIR_PROPERTY, SSL_TRUSTSTORE_PASSWORD_ALIAS, \\",
          "109:                   SECURITY_MASTER_KEY_LOCATION, SECURITY_KEYS_DIR, store_password_file, \\",
          "111:                   JAVA_HOME_PROPERTY, JDK_NAME_PROPERTY, JCE_NAME_PROPERTY, STACK_LOCATION_KEY, SERVER_VERSION_FILE_PATH, \\",
          "112:                   COMMON_SERVICES_PATH_PROPERTY, WEBAPP_DIR_PROPERTY, SHARED_RESOURCES_DIR, BOOTSTRAP_SCRIPT, \\",
          "113:                   CUSTOM_ACTION_DEFINITIONS, BOOTSTRAP_SETUP_AGENT_SCRIPT, STACKADVISOR_SCRIPT, BOOTSTRAP_DIR_PROPERTY, MPACKS_STAGING_PATH_PROPERTY, STACK_JAVA_VERSION",
          "114:                 from ambari_server.serverUtils import is_server_runing, refresh_stack_hash",
          "115:                 from ambari_server.serverSetup import check_selinux, check_ambari_user, proceedJDBCProperties, SE_STATUS_DISABLED, SE_MODE_ENFORCING, configure_os_settings, \\",
          "116:                   download_and_install_jdk, prompt_db_properties, setup, \\",
          "120:                 from ambari_server.setupHttps import is_valid_https_port, setup_https, import_cert_and_key_action, get_fqdn, \\",
          "121:                   generate_random_string, get_cert_info, COMMON_NAME_ATTR, is_valid_cert_exp, NOT_AFTER_ATTR, NOT_BEFORE_ATTR, \\",
          "122:                   SSL_DATE_FORMAT, import_cert_and_key, is_valid_cert_host, setup_truststore, \\",
          "125:                   configure_ldap_password, setup_ldap, REGEX_HOSTNAME_PORT, REGEX_TRUE_FALSE, REGEX_ANYTHING, setup_master_key, \\",
          "127:                 from ambari_server.userInput import get_YN_input, get_choice_string_input, get_validated_string_input, \\",
          "128:                   read_password",
          "129:                 from ambari_server_main import get_ulimit_open_files, ULIMIT_OPEN_FILES_KEY, ULIMIT_OPEN_FILES_DEFAULT",
          "130:                 from ambari_server.serverClassPath import JDBC_DRIVER_PATH_PROPERTY, ServerClassPath",
          "131:                 from ambari_server.hostUpdate import update_host_names",
          "132:                 from ambari_server.checkDatabase import check_database",
          "135: CURR_AMBARI_VERSION = \"2.0.0\"",
          "",
          "[Removed Lines]",
          "104:                   JDBC_CONNECTION_POOL_TYPE, JDBC_CONNECTION_POOL_ACQUISITION_SIZE, \\",
          "105:                   JDBC_CONNECTION_POOL_IDLE_TEST_INTERVAL, JDBC_CONNECTION_POOL_MAX_AGE, JDBC_CONNECTION_POOL_MAX_IDLE_TIME, \\",
          "106:                   JDBC_CONNECTION_POOL_MAX_IDLE_TIME_EXCESS,\\",
          "107:                   LDAP_MGR_PASSWORD_PROPERTY, LDAP_MGR_PASSWORD_ALIAS, JDBC_PASSWORD_FILENAME, NR_USER_PROPERTY, SECURITY_KEY_IS_PERSISTED, \\",
          "110:                   get_pass_file_path, GET_FQDN_SERVICE_URL, JDBC_USE_INTEGRATED_AUTH_PROPERTY, SECURITY_KEY_ENV_VAR_NAME, \\",
          "117:                   AmbariUserChecks, AmbariUserChecksLinux, AmbariUserChecksWindows, JDKSetup, reset, setup_jce_policy, expand_jce_zip_file, check_ambari_java_version_is_valid",
          "118:                 from ambari_server.serverUpgrade import upgrade, change_objects_owner, \\",
          "119:                   run_schema_upgrade, move_user_custom_actions, find_and_copy_custom_services",
          "123:                   SRVR_ONE_WAY_SSL_PORT_PROPERTY, SRVR_TWO_WAY_SSL_PORT_PROPERTY, GANGLIA_HTTPS",
          "124:                 from ambari_server.setupSecurity import adjust_directory_permissions, get_alias_string, get_ldap_event_spec_names, sync_ldap, LdapSyncOptions, \\",
          "126:                   setup_ambari_krb5_jaas, ensure_can_start_under_current_user, generate_env, IS_LDAP_CONFIGURED",
          "133:                 from ambari_server import serverConfiguration",
          "",
          "[Added Lines]",
          "94:                   JDBC_CONNECTION_POOL_TYPE, LDAP_MGR_PASSWORD_PROPERTY, LDAP_MGR_PASSWORD_ALIAS, JDBC_PASSWORD_FILENAME, NR_USER_PROPERTY, SECURITY_KEY_IS_PERSISTED, \\",
          "97:                   get_pass_file_path, GET_FQDN_SERVICE_URL, SECURITY_KEY_ENV_VAR_NAME, \\",
          "104:                   AmbariUserChecks, JDKSetup, reset, setup_jce_policy, expand_jce_zip_file, check_ambari_java_version_is_valid",
          "105:                 from ambari_server.serverUpgrade import upgrade, run_schema_upgrade, move_user_custom_actions, find_and_copy_custom_services",
          "109:                   SRVR_ONE_WAY_SSL_PORT_PROPERTY, SRVR_TWO_WAY_SSL_PORT_PROPERTY",
          "110:                 from ambari_server.setupSecurity import adjust_directory_permissions, get_alias_string, get_ldap_event_spec_names, sync_ldap, \\",
          "112:                   setup_ambari_krb5_jaas",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7146:   @patch(\"ambari_server.setupSecurity.get_ambari_properties\")",
          "7147:   @patch(\"ambari_server.setupSecurity.logger\")",
          "7148:   @patch(\"ambari_server.setupSecurity.is_server_runing\")",
          "7150:                                     search_file_message,",
          "7151:                                     update_properties_method,",
          "7152:                                     get_YN_input_method,",
          "",
          "[Removed Lines]",
          "7149:   def test_setup_ldap_invalid_input(self, is_server_runing_method, logger_mock, get_ambari_properties_method,",
          "",
          "[Added Lines]",
          "7134:   @patch(\"ambari_server.setupSecurity.query_ldap_type\")",
          "7135:   def test_setup_ldap_invalid_input(self, query_ldap_type_method, is_server_runing_method, logger_mock, get_ambari_properties_method,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7156:     sys.stdout = out",
          "7157:     is_server_runing_method.return_value = (True, 0)",
          "7158:     search_file_message.return_value = \"filepath\"",
          "7160:     properties = Properties();",
          "7161:     properties.process_pair(SECURITY_MASTER_KEY_LOCATION, \"filepath\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7145:     query_ldap_type_method.return_value = 'Generic LDAP'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7351:         return 'false'",
          "7352:       if 'username collisions' in args[0]:",
          "7353:         return 'skip'",
          "7355:         return '1'",
          "7356:       if args[1] == \"true\" or args[1] == \"false\":",
          "7357:         return args[1]",
          "7358:       else:",
          "",
          "[Removed Lines]",
          "7354:       if 'URL Port' in args[0]:",
          "",
          "[Added Lines]",
          "7341:       if 'LDAP Port' in args[0]:",
          "7343:       if 'Use SSL' in args[0]:",
          "7344:         return 'false'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7406:           return \"bogus\"",
          "7407:         else:",
          "7408:           return \"valid\"",
          "7410:         return '1'",
          "7411:       if args[1] == \"true\" or args[1] == \"false\":",
          "7412:         return args[1]",
          "",
          "[Removed Lines]",
          "7409:       if 'URL Port' in args[0]:",
          "",
          "[Added Lines]",
          "7398:       if 'LDAP Port' in args[0]:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7487:         return 'false'",
          "7488:       if 'username collisions' in args[0]:",
          "7489:         return 'skip'",
          "7491:         return '1'",
          "7493:         return kwargs['answer']",
          "7494:       if args[1] == \"true\" or args[1] == \"false\":",
          "7495:         return args[1]",
          "",
          "[Removed Lines]",
          "7490:       if 'URL Port' in args[0]:",
          "7492:       if 'Primary URL' in args[0]:",
          "",
          "[Added Lines]",
          "7479:       if 'LDAP Port' in args[0]:",
          "7481:       if 'LDAP Host' in args[0]:",
          "",
          "---------------"
        ]
      }
    }
  ]
}