{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "68bf0f42df2addcec48be18dfc4d4ab9176afc37",
      "candidate_info": {
        "commit_hash": "68bf0f42df2addcec48be18dfc4d4ab9176afc37",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/68bf0f42df2addcec48be18dfc4d4ab9176afc37",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java"
        ],
        "message": "AMBARI-24595. PrincipalKeyCredential.equals fails for subtypes (dlysnichenko) (#2249)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java||ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java||ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java -> ambari-server/src/main/java/org/apache/ambari/server/security/credential/PrincipalKeyCredential.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:       return false;",
          "115:     } else if (this == obj) {",
          "116:       return true;",
          "118:       PrincipalKeyCredential other = (PrincipalKeyCredential) obj;",
          "119:       return ((this.principal == null) ? (other.principal == null) : this.principal.equals(other.principal)) &&",
          "120:           ((this.key == null) ? (other.key == null) : Arrays.equals(this.key, other.key));",
          "",
          "[Removed Lines]",
          "117:     } else if (obj.getClass() == PrincipalKeyCredential.class) {",
          "",
          "[Added Lines]",
          "117:     } else if (obj.getClass() == this.getClass()) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ebdb05297b22a21fe575aa90be962b1afea0ad79",
      "candidate_info": {
        "commit_hash": "ebdb05297b22a21fe575aa90be962b1afea0ad79",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ebdb05297b22a21fe575aa90be962b1afea0ad79",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java"
        ],
        "message": "[AMBARI-24616] Disable Kerberos from Ambari UI didn't clean up keytab directories\n\n* [AMBARI-24616] Disable Kerberos from Ambari UI didn't clean up keytab directories\n\n* [AMBARI-24616] Disable Kerberos from Ambari UI didn't clean up keytab directories\n\n* [AMBARI-24616] Disable Kerberos from Ambari UI didn't clean up keytab directories",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java||ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java||ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java||ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.controller;",
          "20: import static java.util.Collections.singleton;",
          "21: import static java.util.stream.Collectors.toSet;",
          "22: import static org.apache.ambari.server.controller.KerberosHelperImpl.BASE_LOG_DIR;",
          "24: import java.io.File;",
          "25: import java.lang.reflect.Type;",
          "26: import java.util.ArrayList;",
          "27: import java.util.HashMap;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static java.util.stream.Collectors.groupingBy;",
          "22: import static java.util.stream.Collectors.mapping;",
          "25: import static org.apache.ambari.server.controller.KerberosHelperImpl.REMOVE_KEYTAB;",
          "30: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "53: import org.apache.ambari.server.state.svccomphost.ServiceComponentHostServerActionEvent;",
          "54: import org.apache.ambari.server.utils.StageUtils;",
          "56: import com.google.gson.reflect.TypeToken;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.commons.collections.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: class DeleteIdentityHandler {",
          "63:   private final AmbariCustomCommandExecutionHelper customCommandExecutionHelper;",
          "64:   private final Integer taskTimeout;",
          "65:   private final StageFactory stageFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   public static final String COMPONENT_FILTER = \"component_filter\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:     String hostParamsJson = StageUtils.getGson().toJson(customCommandExecutionHelper.createDefaultHostParams(cluster, cluster.getDesiredStackVersion()));",
          "84:     if (manageIdentities) {",
          "85:       addPrepareDeleteIdentity(cluster, hostParamsJson, event, commandParameters, stageContainer);",
          "87:       addDeleteKeytab(cluster, commandParameters.getAffectedHostNames(), hostParamsJson, commandParameters, stageContainer);",
          "88:     }",
          "89:     addFinalize(cluster, hostParamsJson, event, stageContainer, commandParameters);",
          "90:   }",
          "",
          "[Removed Lines]",
          "86:       addDestroyPrincipals(cluster, hostParamsJson, event, commandParameters, stageContainer);",
          "",
          "[Added Lines]",
          "94:       addDestroyPrincipals(cluster, hostParamsJson, event, commandParameters, stageContainer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:                                String hostParamsJson,",
          "135:                                CommandParams commandParameters,",
          "136:                                OrderedRequestStageContainer stageContainer)",
          "158:   }",
          "160:   private void addFinalize(Cluster cluster,",
          "",
          "[Removed Lines]",
          "137:     throws AmbariException",
          "138:   {",
          "139:     Stage stage = createNewStage(stageContainer.getLastStageId(),",
          "140:       cluster,",
          "141:       stageContainer.getId(),",
          "142:       \"Delete Keytabs\",",
          "143:       commandParameters.asJson(),",
          "144:       hostParamsJson);",
          "146:     Map<String, String> requestParams = new HashMap<>();",
          "147:     List<RequestResourceFilter> requestResourceFilters = new ArrayList<>();",
          "148:     RequestResourceFilter reqResFilter = new RequestResourceFilter(\"KERBEROS\", \"KERBEROS_CLIENT\", new ArrayList<>(hostFilter));",
          "149:     requestResourceFilters.add(reqResFilter);",
          "151:     ActionExecutionContext actionExecContext = new ActionExecutionContext(",
          "152:       cluster.getClusterName(),",
          "153:       \"REMOVE_KEYTAB\",",
          "154:       requestResourceFilters,",
          "155:       requestParams);",
          "156:     customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestParams, null);",
          "157:     stageContainer.addStage(stage);",
          "",
          "[Added Lines]",
          "144:       throws AmbariException {",
          "147:     Set<String> hostNames = (CollectionUtils.isEmpty(hostFilter))",
          "148:         ? null",
          "149:         : hostFilter.stream()",
          "150:         .filter(hostname -> ambariManagementController.getClusters().hostExists(hostname))",
          "151:         .collect(toSet());",
          "153:     if(CollectionUtils.isNotEmpty(hostNames)) {",
          "154:       Stage stage = createNewStage(stageContainer.getLastStageId(),",
          "155:           cluster,",
          "156:           stageContainer.getId(),",
          "157:           \"Delete Keytabs\",",
          "158:           commandParameters.asJson(),",
          "159:           hostParamsJson);",
          "161:       Map<String, String> requestParams = new HashMap<>();",
          "162:       List<RequestResourceFilter> requestResourceFilters = new ArrayList<>();",
          "163:       RequestResourceFilter reqResFilter = new RequestResourceFilter(\"KERBEROS\", \"KERBEROS_CLIENT\", new ArrayList<>(hostNames));",
          "164:       requestResourceFilters.add(reqResFilter);",
          "166:       ActionExecutionContext actionExecContext = new ActionExecutionContext(",
          "167:           cluster.getClusterName(),",
          "168:           REMOVE_KEYTAB,",
          "169:           requestResourceFilters,",
          "170:           requestParams);",
          "171:       customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestParams, null);",
          "172:       stageContainer.addStage(stage);",
          "173:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "200:       commandParameters.put(KerberosServerAction.DEFAULT_REALM, defaultRealm);",
          "201:       commandParameters.put(KerberosServerAction.KDC_TYPE, kdcType.name());",
          "202:       commandParameters.put(KerberosServerAction.IDENTITY_FILTER, StageUtils.getGson().toJson(identities));",
          "204:       commandParameters.put(KerberosServerAction.DATA_DIRECTORY, dataDirectory.getAbsolutePath());",
          "205:       return commandParameters;",
          "206:     }",
          "",
          "[Removed Lines]",
          "203:       commandParameters.put(KerberosServerAction.COMPONENT_FILTER, StageUtils.getGson().toJson(components));",
          "",
          "[Added Lines]",
          "219:       commandParameters.put(COMPONENT_FILTER, StageUtils.getGson().toJson(components));",
          "220:       commandParameters.put(KerberosServerAction.SERVICE_COMPONENT_FILTER, StageUtils.getGson().toJson(toServiceComponentFilter(components)));",
          "221:       commandParameters.put(KerberosServerAction.HOST_FILTER, StageUtils.getGson().toJson(toHostFilter(components)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "212:     public String asJson() {",
          "213:       return StageUtils.getGson().toJson(asMap());",
          "214:     }",
          "215:   }",
          "218:     @Override",
          "219:     public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException {",
          "220:       KerberosDescriptor kerberosDescriptor = getKerberosDescriptor();",
          "",
          "[Removed Lines]",
          "217:   private static class PrepareDeleteIdentityServerAction extends AbstractPrepareKerberosServerAction {",
          "",
          "[Added Lines]",
          "240:     private Map<String, ? extends Collection<String>> toServiceComponentFilter(List<Component> components) {",
          "241:       if (components == null) {",
          "242:         return null;",
          "243:       }",
          "245:       return components.stream().collect(groupingBy(Component::getServiceName, mapping(Component::getServiceComponentName, toSet())));",
          "246:     }",
          "254:     private Set<String> toHostFilter(List<Component> components) {",
          "255:       if (components == null) {",
          "256:         return null;",
          "257:       }",
          "259:       return components.stream().map(Component::getHostName).collect(toSet());",
          "260:     }",
          "263:   public static class PrepareDeleteIdentityServerAction extends AbstractPrepareKerberosServerAction {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "232:     }",
          "234:     private Set<String> serviceNames() {",
          "236:     }",
          "238:     private List<Component> componentFilter() {",
          "239:       Type jsonType = new TypeToken<List<Component>>() {}.getType();",
          "241:     }",
          "",
          "[Removed Lines]",
          "235:       return componentFilter().stream().map(component -> component.getServiceName()).collect(toSet());",
          "240:       return StageUtils.getGson().fromJson(getCommandParameterValue(KerberosServerAction.COMPONENT_FILTER), jsonType);",
          "",
          "[Added Lines]",
          "281:       return componentFilter().stream().map(Component::getServiceName).collect(toSet());",
          "286:       return StageUtils.getGson().fromJson(getCommandParameterValue(COMPONENT_FILTER), jsonType);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "281:     private KerberosDescriptor getKerberosDescriptor() throws AmbariException {",
          "282:       return getKerberosHelper().getKerberosDescriptor(getCluster(), false);",
          "283:     }",
          "284:   }",
          "286:   private Stage createNewStage(long id, Cluster cluster, long requestId, String requestContext, String commandParams, String hostParams) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     @Override",
          "332:     protected boolean pruneServiceFilter() {",
          "334:       return false;",
          "335:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "320:       return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "321:     }",
          "323:     @Override",
          "324:     protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, boolean includedInFilter, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "325:       return null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     @Override",
          "376:     protected boolean pruneServiceFilter() {",
          "378:       return false;",
          "379:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.apache.ambari.server.orm.entities.HostEntity;",
          "69: import org.apache.ambari.server.orm.entities.KerberosKeytabEntity;",
          "70: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "71: import org.apache.ambari.server.security.credential.Credential;",
          "72: import org.apache.ambari.server.security.credential.PrincipalKeyCredential;",
          "73: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:   @Override",
          "409:   public void deleteIdentities(Cluster cluster, List<Component> components, Set<String> identities) throws AmbariException, KerberosOperationException {",
          "413:     LOG.info(\"Deleting identities: \", identities);",
          "414:     KerberosDetails kerberosDetails = getKerberosDetails(cluster, null);",
          "415:     validateKDCCredentials(kerberosDetails, cluster);",
          "",
          "[Removed Lines]",
          "410:     if (identities.isEmpty()) {",
          "411:       return;",
          "412:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1976:         String serviceName = mappingEntry.getKey();",
          "1977:         HostEntity hostEntity = principal.getHostId() != null ? hostDAO.findById(principal.getHostId()) : null;",
          "1978:         KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile());",
          "1982:           kerberosKeytabPrincipalDAO.merge(kkp);",
          "1983:         }",
          "1984:         kerberosKeytabDAO.merge(kke);",
          "1985:       }",
          "1986:     }",
          "1987:   }",
          "",
          "[Removed Lines]",
          "1980:         KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kerberosPrincipalDAO.find(principal.getPrincipal()));",
          "1981:         if(kkp.putServiceMapping(serviceName, mappingEntry.getValue())) {",
          "",
          "[Added Lines]",
          "1977:         KerberosPrincipalEntity kpe = kerberosPrincipalDAO.find(principal.getPrincipal());",
          "1979:         KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe);",
          "1980:         if (kkp.putServiceMapping(serviceName, mappingEntry.getValue())) {",
          "1984:         kerberosPrincipalDAO.merge(kpe);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2382:                 kke.setGroupAccess(keytabFileGroupAccess);",
          "2383:                 kerberosKeytabDAO.create(kke);",
          "2384:               }",
          "2388:               }",
          "2391:                 kerberosKeytabPrincipalDAO.merge(kkp);",
          "2392:               }",
          "2393:               kerberosKeytabDAO.merge(kke);",
          "2394:               hostsWithValidKerberosClient.add(hostname);",
          "2395:               serviceComponentHostsToProcess.add(sch);",
          "2396:             }",
          "",
          "[Removed Lines]",
          "2386:               if (!kerberosPrincipalDAO.exists(principal)) {",
          "2387:                 kerberosPrincipalDAO.create(principal, false);",
          "2389:               KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostDAO.findById(sch.getHost().getHostId()), kerberosPrincipalDAO.find(principal));",
          "2390:               if(kkp.putServiceMapping(sch.getServiceName(), sch.getServiceComponentName())) {",
          "",
          "[Added Lines]",
          "2387:               KerberosPrincipalEntity kpe = kerberosPrincipalDAO.find(principal);",
          "2388:               if (kpe == null) {",
          "2389:                 kpe = new KerberosPrincipalEntity(principal, false, null);",
          "2390:                 kerberosPrincipalDAO.create(kpe);",
          "2393:               KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostDAO.findById(sch.getHost().getHostId()), kpe);",
          "2394:               if (kkp.putServiceMapping(sch.getServiceName(), sch.getServiceComponentName())) {",
          "2398:               kerberosPrincipalDAO.merge(kpe);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3991:       if (kerberosDetails.manageIdentities()) {",
          "3992:         commandParameters.put(KerberosServerAction.KDC_TYPE, kerberosDetails.getKdcType().name());",
          "3996:         addDestroyPrincipalsStage(cluster, clusterHostInfoJson, hostParamsJson, event, commandParameters,",
          "3997:           roleCommandOrder, requestStageContainer);",
          "4003:       }",
          "",
          "[Removed Lines]",
          "4001:         addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,",
          "4002:           hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);",
          "",
          "[Added Lines]",
          "4001:         addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,",
          "4002:             hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4330:         addPrepareKerberosIdentitiesStage(cluster, clusterHostInfoJson, hostParamsJson, event,",
          "4331:           commandParameters, roleCommandOrder, requestStageContainer);",
          "4335:         addDestroyPrincipalsStage(cluster, clusterHostInfoJson, hostParamsJson, event,",
          "4336:           commandParameters, roleCommandOrder, requestStageContainer);",
          "4342:       }",
          "4344:       return requestStageContainer.getLastStageId();",
          "",
          "[Removed Lines]",
          "4340:         addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,",
          "4341:           hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);",
          "",
          "[Added Lines]",
          "4342:         addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,",
          "4343:             hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);",
          "4354:         addCleanupStage(cluster, clusterHostInfoJson, hostParamsJson, event, commandParameters,",
          "4355:             roleCommandOrder, requestStageContainer);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.ambari.server.serveraction.kerberos.KerberosMissingAdminCredentialsException;",
          "27: import org.apache.ambari.server.state.Cluster;",
          "28: import org.apache.ambari.server.state.Clusters;",
          "29: import org.slf4j.Logger;",
          "30: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.ambari.server.state.SecurityType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   public void componentRemoved(ServiceComponentUninstalledEvent event) throws KerberosMissingAdminCredentialsException {",
          "63:     try {",
          "64:       Cluster cluster = clusters.getCluster(event.getClusterId());",
          "76:     } catch (Exception e) {",
          "77:       LOG.error(\"Error while deleting kerberos identity after an event: \" + event, e);",
          "78:     }",
          "",
          "[Removed Lines]",
          "65:       if (null != cluster.getUpgradeInProgress()) {",
          "66:         LOG.info(\"Skipping removal of identities for {} since there is an upgrade in progress\",",
          "67:             event.getComponentName());",
          "69:         return;",
          "70:       }",
          "72:       LOG.info(\"Removing identities after {}\", event);",
          "73:       RemovableIdentities",
          "74:         .ofComponent(clusters.getCluster(event.getClusterId()), event, kerberosHelper)",
          "75:         .remove(kerberosHelper);",
          "",
          "[Added Lines]",
          "67:       if (cluster.getSecurityType() == SecurityType.KERBEROS) {",
          "68:         if (null != cluster.getUpgradeInProgress()) {",
          "69:           LOG.info(\"Skipping removal of identities for {} since there is an upgrade in progress\",",
          "70:               event.getComponentName());",
          "72:           return;",
          "73:         }",
          "75:         LOG.info(\"Removing identities after {}\", event);",
          "76:         RemovableIdentities",
          "77:             .ofComponent(clusters.getCluster(event.getClusterId()), event, kerberosHelper)",
          "78:             .remove(kerberosHelper);",
          "79:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:   public void serviceRemoved(ServiceRemovedEvent event) {",
          "87:     try {",
          "88:       Cluster cluster = clusters.getCluster(event.getClusterId());",
          "100:     } catch (Exception e) {",
          "101:       LOG.error(\"Error while deleting kerberos identity after an event: \" + event, e);",
          "102:     }",
          "",
          "[Removed Lines]",
          "89:       if (null != cluster.getUpgradeInProgress()) {",
          "90:         LOG.info(\"Skipping removal of identities for {} since there is an upgrade in progress\",",
          "91:             event.getServiceName());",
          "93:         return;",
          "94:       }",
          "96:       LOG.info(\"Removing identities after {}\", event);",
          "97:       RemovableIdentities",
          "98:         .ofService(clusters.getCluster(event.getClusterId()), event, kerberosHelper)",
          "99:         .remove(kerberosHelper);",
          "",
          "[Added Lines]",
          "94:       if (cluster.getSecurityType() == SecurityType.KERBEROS) {",
          "95:         if (null != cluster.getUpgradeInProgress()) {",
          "96:           LOG.info(\"Skipping removal of identities for {} since there is an upgrade in progress\",",
          "97:               event.getServiceName());",
          "99:           return;",
          "100:         }",
          "102:         LOG.info(\"Removing identities after {}\", event);",
          "103:         RemovableIdentities",
          "104:             .ofService(clusters.getCluster(event.getClusterId()), event, kerberosHelper)",
          "105:             .remove(kerberosHelper);",
          "106:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java||ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static java.util.Collections.emptyList;",
          "21: import static java.util.Collections.singletonList;",
          "22: import static java.util.stream.Collectors.toList;",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "27: import java.util.Objects;",
          "30: import org.apache.ambari.annotations.Experimental;",
          "31: import org.apache.ambari.annotations.ExperimentalFeature;",
          "",
          "[Removed Lines]",
          "23: import static java.util.stream.Collectors.toSet;",
          "28: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   }",
          "138:   public void remove(KerberosHelper kerberosHelper) throws AmbariException, KerberosOperationException {",
          "143:   }",
          "145:   private List<KerberosIdentityDescriptor> skipUsed() throws AmbariException {",
          "",
          "[Removed Lines]",
          "139:     Set<String> identitiesToRemove = skipUsed().stream().map(KerberosIdentityDescriptor::getPath).collect(toSet());",
          "140:     if (!identitiesToRemove.isEmpty()) {",
          "141:       kerberosHelper.deleteIdentities(cluster, components, identitiesToRemove);",
          "142:     }",
          "",
          "[Added Lines]",
          "143:     kerberosHelper.deleteIdentities(cluster, components, null);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.io.File;",
          "27: import java.io.FileInputStream;",
          "28: import java.io.IOException;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collection;",
          "32: import java.util.HashMap;",
          "33: import java.util.List;",
          "34: import java.util.Map;",
          "35: import java.util.Set;",
          "",
          "[Removed Lines]",
          "31: import java.util.Collections;",
          "",
          "[Added Lines]",
          "29: import java.nio.file.Paths;",
          "33: import java.util.HashSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.apache.ambari.server.serveraction.kerberos.stageutils.KerberosKeytabController;",
          "49: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;",
          "50: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "52: import org.apache.ambari.server.state.Clusters;",
          "54: import org.apache.ambari.server.utils.StageUtils;",
          "55: import org.apache.commons.codec.binary.Base64;",
          "56: import org.apache.commons.codec.digest.DigestUtils;",
          "58: import org.apache.commons.io.IOUtils;",
          "59: import org.slf4j.Logger;",
          "60: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "51: import org.apache.ambari.server.state.Cluster;",
          "53: import org.apache.ambari.server.state.Service;",
          "57: import org.apache.commons.collections.MapUtils;",
          "",
          "[Added Lines]",
          "56: import org.apache.commons.collections.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:   private void injectKeytab(ExecutionCommand ec, String command, String targetHost) throws AmbariException {",
          "187:       try {",
          "189:         Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());",
          "190:         for (ResolvedKerberosKeytab resolvedKeytab : keytabsToInject) {",
          "192:             String hostName = resolvedPrincipal.getHostName();",
          "194:             if (targetHost.equalsIgnoreCase(hostName)) {",
          "251:             }",
          "252:           }",
          "253:         }",
          "254:       } catch (IOException e) {",
          "255:         throw new AmbariException(\"Could not inject keytabs to enable kerberos\");",
          "256:       }",
          "258:     }",
          "259:   }",
          "275:           }",
          "276:         }",
          "283:       }",
          "284:     }",
          "287:   }",
          "288: }",
          "",
          "[Removed Lines]",
          "182:     String dataDir = ec.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);",
          "183:     KerberosServerAction.KerberosCommandParameters kerberosCommandParameters = new KerberosServerAction.KerberosCommandParameters(ec);",
          "184:     if(dataDir != null) {",
          "185:       List<Map<String, String>> kcp = ec.getKerberosCommandParams();",
          "188:         Map<String, Collection<String>> serviceComponentFilter = adjustServiceComponentFilter(ec.getClusterName(), kerberosCommandParameters.getServiceComponentFilter());",
          "191:           for(ResolvedKerberosPrincipal resolvedPrincipal: resolvedKeytab.getPrincipals()) {",
          "196:               if (SET_KEYTAB.equalsIgnoreCase(command)) {",
          "197:                 String principal = resolvedPrincipal.getPrincipal();",
          "198:                 String keytabFilePath = resolvedKeytab.getFile();",
          "199:                 LOG.info(\"Processing principal {} for host {} and keytab file path {}\", principal, hostName, keytabFilePath);",
          "201:                 if (keytabFilePath != null) {",
          "203:                   String sha1Keytab = DigestUtils.sha256Hex(keytabFilePath);",
          "204:                   File keytabFile = new File(dataDir + File.separator + hostName + File.separator + sha1Keytab);",
          "206:                   if (keytabFile.canRead()) {",
          "207:                     Map<String, String> keytabMap = new HashMap<>();",
          "209:                     keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);",
          "210:                     keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);",
          "211:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, keytabFilePath);",
          "212:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME, resolvedKeytab.getOwnerName());",
          "213:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS, resolvedKeytab.getOwnerAccess());",
          "214:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME, resolvedKeytab.getGroupName());",
          "215:                     keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS, resolvedKeytab.getGroupAccess());",
          "217:                     BufferedInputStream bufferedIn = new BufferedInputStream(new FileInputStream(keytabFile));",
          "218:                     byte[] keytabContent;",
          "219:                     try {",
          "220:                       keytabContent = IOUtils.toByteArray(bufferedIn);",
          "221:                     } finally {",
          "222:                       bufferedIn.close();",
          "223:                     }",
          "224:                     String keytabContentBase64 = Base64.encodeBase64String(keytabContent);",
          "225:                     keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64, keytabContentBase64);",
          "227:                     kcp.add(keytabMap);",
          "228:                   } else {",
          "229:                     LOG.warn(\"Keytab file for principal {} and host {} can not to be read at path {}\",",
          "230:                         principal, hostName, keytabFile.getAbsolutePath());",
          "231:                   }",
          "232:                 }",
          "233:               } else if (REMOVE_KEYTAB.equalsIgnoreCase(command) || CHECK_KEYTABS.equalsIgnoreCase(command)) {",
          "234:                 Map<String, String> keytabMap = new HashMap<>();",
          "235:                 String keytabFilePath = resolvedKeytab.getFile();",
          "237:                 String principal = resolvedPrincipal.getPrincipal();",
          "238:                 for (Map.Entry<String, String> mappingEntry: resolvedPrincipal.getServiceMapping().entries()) {",
          "239:                   String serviceName = mappingEntry.getKey();",
          "240:                   String componentName = mappingEntry.getValue();",
          "241:                   keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);",
          "242:                   keytabMap.put(KerberosIdentityDataFileReader.SERVICE, serviceName);",
          "243:                   keytabMap.put(KerberosIdentityDataFileReader.COMPONENT, componentName);",
          "244:                   keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);",
          "245:                   keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, keytabFilePath);",
          "247:                 }",
          "249:                 kcp.add(keytabMap);",
          "250:               }",
          "257:       ec.setKerberosCommandParams(kcp);",
          "261:   private Map<String, Collection<String>> adjustServiceComponentFilter(String clusterName, Map<String, ? extends Collection<String>> serviceComponentFilter) throws AmbariException {",
          "262:     Map<String, Collection<String>> adjustedFilter = new HashMap<>();",
          "263:     Cluster cluster = clusters.getCluster(clusterName);",
          "265:     Map<String, Service> installedServices = (cluster == null) ? null : cluster.getServices();",
          "267:     if(!MapUtils.isEmpty(installedServices)) {",
          "268:       if (serviceComponentFilter != null) {",
          "270:         for(Map.Entry<String, ? extends Collection<String>> entry: serviceComponentFilter.entrySet()) {",
          "271:           String serviceName = entry.getKey();",
          "273:           if(installedServices.containsKey(serviceName)) {",
          "274:             adjustedFilter.put(serviceName, entry.getValue());",
          "277:       } else {",
          "279:         for(String serviceName: installedServices.keySet()) {",
          "281:           adjustedFilter.put(serviceName, Collections.singletonList(\"*\"));",
          "282:         }",
          "286:     return adjustedFilter;",
          "",
          "[Added Lines]",
          "181:     KerberosCommandParameterProcessor processor = KerberosCommandParameterProcessor.getInstance(command, clusters, ec, kerberosKeytabController);",
          "182:     if (processor != null) {",
          "183:       ec.setKerberosCommandParams(processor.process(targetHost));",
          "184:     }",
          "185:   }",
          "194:   private static abstract class KerberosCommandParameterProcessor {",
          "195:     protected final Clusters clusters;",
          "197:     protected final ExecutionCommand executionCommand;",
          "199:     protected final KerberosKeytabController kerberosKeytabController;",
          "201:     protected List<Map<String, String>> kcp;",
          "203:     protected KerberosCommandParameterProcessor(Clusters clusters, ExecutionCommand executionCommand, KerberosKeytabController kerberosKeytabController) {",
          "204:       this.clusters = clusters;",
          "205:       this.executionCommand = executionCommand;",
          "206:       this.kerberosKeytabController = kerberosKeytabController;",
          "207:       kcp = executionCommand.getKerberosCommandParams();",
          "208:     }",
          "220:     public static KerberosCommandParameterProcessor getInstance(String command, Clusters clusters, ExecutionCommand executionCommand, KerberosKeytabController kerberosKeytabController) {",
          "221:       if (SET_KEYTAB.equalsIgnoreCase(command)) {",
          "222:         return new SetKeytabCommandParameterProcessor(clusters, executionCommand, kerberosKeytabController);",
          "223:       }",
          "224:       if (CHECK_KEYTABS.equalsIgnoreCase(command)) {",
          "225:         return new CheckKeytabsCommandParameterProcessor(clusters, executionCommand, kerberosKeytabController);",
          "226:       }",
          "228:       if (REMOVE_KEYTAB.equalsIgnoreCase(command)) {",
          "229:         return new RemoveKeytabCommandParameterProcessor(clusters, executionCommand, kerberosKeytabController);",
          "230:       }",
          "232:       return null;",
          "233:     }",
          "243:     public List<Map<String, String>> process(String targetHost) throws AmbariException {",
          "244:       KerberosServerAction.KerberosCommandParameters kerberosCommandParameters = new KerberosServerAction.KerberosCommandParameters(executionCommand);",
          "247:         Map<String, ? extends Collection<String>> serviceComponentFilter = getServiceComponentFilter(kerberosCommandParameters.getServiceComponentFilter());",
          "251:           for (ResolvedKerberosPrincipal resolvedPrincipal : resolvedKeytab.getPrincipals()) {",
          "255:               process(targetHost, resolvedKeytab, resolvedPrincipal, serviceComponentFilter);",
          "263:       return kcp;",
          "264:     }",
          "279:     protected void process(String hostName, ResolvedKerberosKeytab resolvedKeytab, ResolvedKerberosPrincipal resolvedPrincipal, Map<String, ? extends Collection<String>> serviceComponentFilter) throws IOException {",
          "280:       Map<String, String> keytabMap = new HashMap<>();",
          "281:       keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);",
          "282:       keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, resolvedPrincipal.getPrincipal());",
          "283:       keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, resolvedKeytab.getFile());",
          "284:       kcp.add(keytabMap);",
          "285:     }",
          "298:     protected Map<String, ? extends Collection<String>> getServiceComponentFilter(Map<String, ? extends Collection<String>> serviceComponentFilter) throws AmbariException {",
          "299:       return serviceComponentFilter;",
          "311:   private static class SetKeytabCommandParameterProcessor extends KerberosCommandParameterProcessor {",
          "313:     private final String dataDir;",
          "315:     private SetKeytabCommandParameterProcessor(Clusters clusters, ExecutionCommand executionCommand, KerberosKeytabController kerberosKeytabController) {",
          "316:       super(clusters, executionCommand, kerberosKeytabController);",
          "317:       dataDir = executionCommand.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);",
          "318:     }",
          "320:     @Override",
          "321:     protected void process(String hostName, ResolvedKerberosKeytab resolvedKeytab, ResolvedKerberosPrincipal resolvedPrincipal, Map<String, ? extends Collection<String>> serviceComponentFilter) throws IOException {",
          "322:       if (dataDir != null) {",
          "323:         String principal = resolvedPrincipal.getPrincipal();",
          "324:         String keytabFilePath = resolvedKeytab.getFile();",
          "325:         LOG.info(\"Processing principal {} for host {} and keytab file path {}\", principal, hostName, keytabFilePath);",
          "327:         if (keytabFilePath != null) {",
          "328:           String sha1Keytab = DigestUtils.sha256Hex(keytabFilePath);",
          "329:           File keytabFile = Paths.get(dataDir, hostName, sha1Keytab).toFile();",
          "331:           if (keytabFile.canRead()) {",
          "332:             Map<String, String> keytabMap = new HashMap<>();",
          "334:             keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);",
          "335:             keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);",
          "336:             keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, keytabFilePath);",
          "337:             keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME, resolvedKeytab.getOwnerName());",
          "338:             keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS, resolvedKeytab.getOwnerAccess());",
          "339:             keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME, resolvedKeytab.getGroupName());",
          "340:             keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS, resolvedKeytab.getGroupAccess());",
          "342:             BufferedInputStream bufferedIn = new BufferedInputStream(new FileInputStream(keytabFile));",
          "343:             byte[] keytabContent;",
          "344:             try {",
          "345:               keytabContent = IOUtils.toByteArray(bufferedIn);",
          "346:             } finally {",
          "347:               bufferedIn.close();",
          "348:             }",
          "349:             String keytabContentBase64 = Base64.encodeBase64String(keytabContent);",
          "350:             keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64, keytabContentBase64);",
          "352:             kcp.add(keytabMap);",
          "353:           } else {",
          "354:             LOG.warn(\"Keytab file for principal {} and host {} can not to be read at path {}\",",
          "355:                 principal, hostName, keytabFile.getAbsolutePath());",
          "361:     @Override",
          "362:     protected Map<String, ? extends Collection<String>> getServiceComponentFilter(Map<String, ? extends Collection<String>> serviceComponentFilter)",
          "363:         throws AmbariException {",
          "364:       return kerberosKeytabController.adjustServiceComponentFilter(clusters.getCluster(executionCommand.getClusterName()), false, serviceComponentFilter);",
          "365:     }",
          "366:   }",
          "372:   private static class CheckKeytabsCommandParameterProcessor extends KerberosCommandParameterProcessor {",
          "374:     private CheckKeytabsCommandParameterProcessor(Clusters clusters, ExecutionCommand executionCommand, KerberosKeytabController kerberosKeytabController) {",
          "375:       super(clusters, executionCommand, kerberosKeytabController);",
          "376:     }",
          "377:   }",
          "386:   private static class RemoveKeytabCommandParameterProcessor extends KerberosCommandParameterProcessor {",
          "388:     private RemoveKeytabCommandParameterProcessor(Clusters clusters, ExecutionCommand executionCommand, KerberosKeytabController kerberosKeytabController) {",
          "389:       super(clusters, executionCommand, kerberosKeytabController);",
          "390:     }",
          "392:     @Override",
          "393:     protected void process(String hostName, ResolvedKerberosKeytab resolvedKeytab, ResolvedKerberosPrincipal resolvedPrincipal, Map<String, ? extends Collection<String>> serviceComponentFilter) throws IOException {",
          "394:       if (shouldRemove(hostName, resolvedKeytab, resolvedPrincipal, serviceComponentFilter)) {",
          "395:         super.process(hostName, resolvedKeytab, resolvedPrincipal, serviceComponentFilter);",
          "396:       }",
          "397:     }",
          "414:     private boolean shouldRemove(String hostname,",
          "415:                                  ResolvedKerberosKeytab resolvedKerberosKeytab,",
          "416:                                  ResolvedKerberosPrincipal resolvedPrincipal,",
          "417:                                  Map<String, ? extends Collection<String>> serviceComponentFilter) {",
          "418:       ResolvedKerberosKeytab existingResolvedKeytab = kerberosKeytabController.getKeytabByFile(resolvedKerberosKeytab.getFile());",
          "420:       if (existingResolvedKeytab == null) {",
          "421:         return true;",
          "422:       }",
          "424:       Set<ResolvedKerberosPrincipal> principals = existingResolvedKeytab.getPrincipals();",
          "425:       for (ResolvedKerberosPrincipal principal : principals) {",
          "426:         if (hostname.equals(principal.getHostName()) && principal.getPrincipal().equals(resolvedPrincipal.getPrincipal())) {",
          "427:           Multimap<String, String> temp = principal.getServiceMapping();",
          "430:           Map<String, Collection<String>> serviceMapping = (temp == null) ? new HashMap<>() : new HashMap<>(temp.asMap());",
          "434:           if (serviceComponentFilter == null) {",
          "435:             serviceMapping.clear();",
          "436:           } else {",
          "437:             for (Map.Entry<String, ? extends Collection<String>> entry : serviceComponentFilter.entrySet()) {",
          "438:               String service = entry.getKey();",
          "439:               Collection<String> components = entry.getValue();",
          "441:               if (serviceMapping.containsKey(service)) {",
          "443:                 if (CollectionUtils.isEmpty(components) || CollectionUtils.isEmpty(serviceMapping.get(service))) {",
          "445:                   serviceMapping.remove(service);",
          "446:                 } else {",
          "447:                   Collection<String> leftOver = new HashSet<String>(serviceMapping.get(service));",
          "448:                   leftOver.removeAll(components);",
          "450:                   if (CollectionUtils.isEmpty(leftOver)) {",
          "451:                     serviceMapping.remove(service);",
          "452:                   } else {",
          "453:                     serviceMapping.put(service, leftOver);",
          "454:                   }",
          "455:                 }",
          "456:               }",
          "457:             }",
          "458:           }",
          "461:           if (serviceMapping.size() > 0) {",
          "462:             return false;",
          "463:           }",
          "464:         }",
          "465:       }",
          "467:       return true;",
          "468:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.orm.dao;",
          "21: import java.util.Collections;",
          "22: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.ArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import org.apache.ambari.server.orm.RequiresSession;",
          "28: import org.apache.ambari.server.orm.entities.KerberosKeytabEntity;",
          "30: import com.google.inject.Inject;",
          "31: import com.google.inject.Provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "31: import org.apache.commons.collections.CollectionUtils;",
          "32: import org.slf4j.Logger;",
          "33: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35: @Singleton",
          "36: public class KerberosKeytabDAO {",
          "37:   @Inject",
          "38:   Provider<EntityManager> entityManagerProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:   private final static Logger LOG = LoggerFactory.getLogger(KerberosKeytabDAO.class);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:   @Transactional",
          "58:   public void remove(KerberosKeytabEntity kerberosKeytabEntity) {",
          "60:   }",
          "62:   public void remove(String keytabPath) {",
          "",
          "[Removed Lines]",
          "59:     entityManagerProvider.get().remove(merge(kerberosKeytabEntity));",
          "",
          "[Added Lines]",
          "66:     if (kerberosKeytabEntity != null) {",
          "67:       EntityManager entityManager = entityManagerProvider.get();",
          "68:       entityManager.remove(entityManager.merge(kerberosKeytabEntity));",
          "69:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:       }",
          "134:     }",
          "135:   }",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:   public boolean removeIfNotReferenced(KerberosKeytabEntity kerberosKeytabEntity) {",
          "154:     if (kerberosKeytabEntity != null) {",
          "155:       if (CollectionUtils.isNotEmpty(kerberosKeytabEntity.getKerberosKeytabPrincipalEntities())) {",
          "156:         ArrayList<String> ids = new ArrayList<>();",
          "157:         for (KerberosKeytabPrincipalEntity entity : kerberosKeytabEntity.getKerberosKeytabPrincipalEntities()) {",
          "158:           Long id = entity.getKkpId();",
          "160:           if (id != null) {",
          "161:             ids.add(String.valueOf(id));",
          "162:           }",
          "163:         }",
          "165:         LOG.debug(String.format(\"keytab entry for %s is still referenced by [%s]\", kerberosKeytabEntity.getKeytabPath(), String.join(\",\", ids)));",
          "166:       } else {",
          "167:         LOG.debug(String.format(\"keytab entry for %s is no longer referenced. It will be removed.\", kerberosKeytabEntity.getKeytabPath()));",
          "168:         remove(kerberosKeytabEntity);",
          "169:         return true;",
          "170:       }",
          "171:     }",
          "173:     return false;",
          "174:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "37: import org.apache.ambari.server.orm.entities.KerberosKeytabServiceMappingEntity;",
          "38: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "40: import com.google.inject.Inject;",
          "41: import com.google.inject.Provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.commons.collections.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     Long hostId = hostEntity == null ? null : hostEntity.getHostId();",
          "80:     if (kkp == null) {",
          "81:       kkp = new KerberosKeytabPrincipalEntity(",
          "85:       );",
          "86:       create(kkp);",
          "87:       kerberosKeytabEntity.addKerberosKeytabPrincipal(kkp);",
          "88:     }",
          "89:     return kkp;",
          "90:   }",
          "",
          "[Removed Lines]",
          "76:   public KerberosKeytabPrincipalEntity findOrCreate(KerberosKeytabEntity kerberosKeytabEntity, HostEntity hostEntity, KerberosPrincipalEntity principalEntity)",
          "77:   {",
          "79:     KerberosKeytabPrincipalEntity kkp = findByNaturalKey(hostId, kerberosKeytabEntity.getKeytabPath(), principalEntity.getPrincipalName());",
          "82:         kerberosKeytabEntity,",
          "83:         hostEntity,",
          "84:         principalEntity",
          "",
          "[Added Lines]",
          "77:   public KerberosKeytabPrincipalEntity findOrCreate(KerberosKeytabEntity kerberosKeytabEntity, HostEntity hostEntity, KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "79:     KerberosKeytabPrincipalEntity kkp = findByNaturalKey(hostId, kerberosKeytabEntity.getKeytabPath(), kerberosPrincipalEntity.getPrincipalName());",
          "82:           kerberosKeytabEntity,",
          "83:           hostEntity,",
          "84:           kerberosPrincipalEntity",
          "88:       kerberosPrincipalEntity.addKerberosKeytabPrincipal(kkp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:     CriteriaQuery<KerberosKeytabPrincipalEntity> cq = cb.createQuery(KerberosKeytabPrincipalEntity.class);",
          "196:     Root<KerberosKeytabPrincipalEntity> root = cq.from(KerberosKeytabPrincipalEntity.class);",
          "197:     ArrayList<Predicate> predicates = new ArrayList<>();",
          "200:       Join<KerberosKeytabPrincipalEntity, KerberosKeytabServiceMappingEntity> mappingJoin = root.join(\"serviceMapping\");",
          "201:       predicates.add(mappingJoin.get(\"serviceName\").in(filter.getServiceNames()));",
          "203:         predicates.add(mappingJoin.get(\"componentName\").in(filter.getComponentNames()));",
          "204:       }",
          "205:     }",
          "207:       List<Long> hostIds = new ArrayList<>();",
          "208:       for (String hostname : filter.getHostNames()) {",
          "210:       }",
          "212:     }",
          "214:       predicates.add(root.get(\"principalName\").in(filter.getPrincipals()));",
          "215:     }",
          "218:     TypedQuery<KerberosKeytabPrincipalEntity> query = entityManagerProvider.get().createQuery(cq);",
          "219:     List<KerberosKeytabPrincipalEntity> result = query.getResultList();",
          "",
          "[Removed Lines]",
          "198:     if (filter.getServiceNames() != null && filter.getServiceNames().size() > 0)",
          "199:     {",
          "202:       if (filter.getComponentNames() != null && filter.getComponentNames().size() > 0) {",
          "206:     if (filter.getHostNames() != null && filter.getHostNames().size() > 0) {",
          "209:         hostIds.add(hostDAO.findByName(hostname).getHostId());",
          "211:       predicates.add(root.get(\"hostId\").in(hostIds));",
          "213:     if (filter.getPrincipals() != null && filter.getPrincipals().size() > 0) {",
          "216:     cq.where(cb.and(predicates.toArray(new Predicate[predicates.size()])));",
          "",
          "[Added Lines]",
          "200:     if (CollectionUtils.isNotEmpty(filter.getServiceNames())) {",
          "203:       if (CollectionUtils.isNotEmpty(filter.getComponentNames())) {",
          "208:     if (CollectionUtils.isNotEmpty(filter.getHostNames())) {",
          "210:       boolean hasNull = false;",
          "213:         HostEntity host = hostDAO.findByName(hostname);",
          "215:         if (host == null) {",
          "217:           hasNull = true;",
          "218:         } else {",
          "219:           hostIds.add(host.getHostId());",
          "220:         }",
          "221:       }",
          "223:       Predicate hostIDPredicate = (hostIds.isEmpty()) ? null : root.get(\"hostId\").in(hostIds);",
          "224:       Predicate hostNullIDPredicate = (hasNull) ? root.get(\"hostId\").isNull() : null;",
          "226:       if (hostIDPredicate != null) {",
          "227:         if (hostNullIDPredicate != null) {",
          "228:           predicates.add(cb.or(hostIDPredicate, hostNullIDPredicate));",
          "229:         } else {",
          "230:           predicates.add(hostIDPredicate);",
          "231:         }",
          "232:       } else if (hostNullIDPredicate != null) {",
          "233:         predicates.add(hostNullIDPredicate);",
          "237:     if (CollectionUtils.isNotEmpty(filter.getPrincipals())) {",
          "240:     cq.where(cb.and(predicates.toArray(new Predicate[0])));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:     public void setPrincipals(Collection<String> principals) {",
          "306:       this.principals = principals;",
          "307:     }",
          "308:   }",
          "309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:     public static KerberosKeytabPrincipalFilter createFilter(String serviceName, Collection<String> componentNames, Collection<String> hostNames, Collection<String> principalNames) {",
          "334:       return new KerberosKeytabPrincipalFilter(hostNames,",
          "335:           (serviceName == null) ? null : Collections.singleton(serviceName),",
          "336:           componentNames,",
          "337:           principalNames);",
          "338:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java||ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.orm.dao;",
          "22: import java.util.List;",
          "24: import javax.persistence.EntityManager;",
          "25: import javax.persistence.TypedQuery;",
          "27: import org.apache.ambari.server.orm.RequiresSession;",
          "28: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "30: import com.google.inject.Inject;",
          "31: import com.google.inject.Provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.ArrayList;",
          "29: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "31: import org.apache.commons.collections.CollectionUtils;",
          "32: import org.slf4j.Logger;",
          "33: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: @Singleton",
          "40: public class KerberosPrincipalDAO {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   private final static Logger LOG = LoggerFactory.getLogger(KerberosPrincipalDAO.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:   @Transactional",
          "87:   public void remove(KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "89:       EntityManager entityManager = entityManagerProvider.get();",
          "96:     }",
          "97:   }",
          "",
          "[Removed Lines]",
          "88:     if(kerberosPrincipalEntity != null) {",
          "90:       String principalName = kerberosPrincipalEntity.getPrincipalName();",
          "92:       kerberosPrincipalEntity = find(principalName);",
          "93:       if (kerberosPrincipalEntity != null) {",
          "94:         entityManager.remove(kerberosPrincipalEntity);",
          "95:       }",
          "",
          "[Added Lines]",
          "94:     if (kerberosPrincipalEntity != null) {",
          "96:       entityManager.remove(entityManager.merge(kerberosPrincipalEntity));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:       }",
          "160:     }",
          "161:   }",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:   public boolean removeIfNotReferenced(KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "171:     if (kerberosPrincipalEntity != null) {",
          "172:       if (CollectionUtils.isNotEmpty(kerberosPrincipalEntity.getKerberosKeytabPrincipalEntities())) {",
          "173:         ArrayList<String> ids = new ArrayList<>();",
          "174:         for (KerberosKeytabPrincipalEntity entity : kerberosPrincipalEntity.getKerberosKeytabPrincipalEntities()) {",
          "175:           Long id = entity.getKkpId();",
          "177:           if (id != null) {",
          "178:             ids.add(String.valueOf(id));",
          "179:           }",
          "180:         }",
          "182:         LOG.info(String.format(\"principal entry for %s is still referenced by [%s]\", kerberosPrincipalEntity.getPrincipalName(), String.join(\",\", ids)));",
          "183:       } else {",
          "184:         LOG.info(String.format(\"principal entry for %s is no longer referenced. It will be removed.\", kerberosPrincipalEntity.getPrincipalName()));",
          "185:         remove(kerberosPrincipalEntity);",
          "186:         return true;",
          "187:       }",
          "188:     }",
          "190:     return false;",
          "191:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   @Column(name = \"write_ambari_jaas\")",
          "63:   private Integer writeAmbariJaasFile = 0;",
          "66:   private Collection<KerberosKeytabPrincipalEntity> kerberosKeytabPrincipalEntities = new ArrayList<>();",
          "68:   public KerberosKeytabEntity() {",
          "",
          "[Removed Lines]",
          "65:   @OneToMany(mappedBy = \"kerberosKeytabEntity\", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)",
          "",
          "[Added Lines]",
          "65:   @OneToMany(mappedBy = \"kerberosKeytabEntity\", cascade = CascadeType.REMOVE, fetch = FetchType.EAGER)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.orm.entities;",
          "20: import java.util.ArrayList;",
          "21: import java.util.List;",
          "23: import javax.persistence.CascadeType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   @ManyToOne",
          "109:   @JoinColumn(name = \"principal_name\", referencedColumnName = \"principal_name\", updatable = false, nullable = false, insertable = false)",
          "113:   private List<KerberosKeytabServiceMappingEntity> serviceMapping = new ArrayList<>();",
          "115:   public KerberosKeytabPrincipalEntity() {",
          "117:   }",
          "124:     setKerberosKeytabEntity(kerberosKeytabEntity);",
          "125:     setHostEntity(hostEntity);",
          "127:   }",
          "129:   public Long getKkpId() {",
          "",
          "[Removed Lines]",
          "110:   private KerberosPrincipalEntity principalEntity;",
          "112:   @OneToMany(cascade = CascadeType.ALL, mappedBy = \"kerberosKeytabPrincipalEntity\")",
          "119:   public KerberosKeytabPrincipalEntity(",
          "120:     KerberosKeytabEntity kerberosKeytabEntity,",
          "121:     HostEntity hostEntity,",
          "122:     KerberosPrincipalEntity principalEntity",
          "123:   ) {",
          "126:     setPrincipalEntity(principalEntity);",
          "",
          "[Added Lines]",
          "111:   private KerberosPrincipalEntity kerberosPrincipalEntity;",
          "113:   @OneToMany(cascade = CascadeType.ALL, mappedBy = \"kerberosKeytabPrincipalEntity\", orphanRemoval = true)",
          "120:   public KerberosKeytabPrincipalEntity(KerberosKeytabEntity kerberosKeytabEntity, HostEntity hostEntity, KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "123:     setKerberosPrincipalEntity(kerberosPrincipalEntity);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:     }",
          "165:   }",
          "169:   }",
          "175:     }",
          "176:   }",
          "",
          "[Removed Lines]",
          "167:   public KerberosPrincipalEntity getPrincipalEntity() {",
          "168:     return principalEntity;",
          "171:   public void setPrincipalEntity(KerberosPrincipalEntity principalEntity) {",
          "172:     this.principalEntity = principalEntity;",
          "173:     if (principalEntity != null) {",
          "174:       principalName = principalEntity.getPrincipalName();",
          "",
          "[Added Lines]",
          "164:   public KerberosPrincipalEntity getKerberosPrincipalEntity() {",
          "165:     return kerberosPrincipalEntity;",
          "168:   public void setKerberosPrincipalEntity(KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "169:     this.kerberosPrincipalEntity = kerberosPrincipalEntity;",
          "170:     if (kerberosPrincipalEntity != null) {",
          "171:       principalName = kerberosPrincipalEntity.getPrincipalName();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:   public String getPrincipalName() {",
          "185:   }",
          "187:   public Long getHostId() {",
          "",
          "[Removed Lines]",
          "184:     return principalEntity != null ? principalEntity.getPrincipalName() : null;",
          "",
          "[Added Lines]",
          "181:     return kerberosPrincipalEntity != null ? kerberosPrincipalEntity.getPrincipalName() : null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "192:     return hostEntity != null ? hostEntity.getHostName() : null;",
          "193:   }",
          "195:   public boolean putServiceMapping(String service, String component) {",
          "196:     if (containsMapping(service, component)) {",
          "197:       return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:   public List<KerberosKeytabServiceMappingEntity> getServiceMapping() {",
          "193:     return serviceMapping;",
          "194:   }",
          "196:   public void setServiceMapping(List<KerberosKeytabServiceMappingEntity> serviceMapping) {",
          "197:     this.serviceMapping = (serviceMapping == null)",
          "198:         ? Collections.emptyList()",
          "199:         : new ArrayList<>(serviceMapping);",
          "200:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosPrincipalEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.orm.entities;",
          "21: import javax.persistence.Column;",
          "22: import javax.persistence.Entity;",
          "23: import javax.persistence.Id;",
          "24: import javax.persistence.NamedQueries;",
          "25: import javax.persistence.NamedQuery;",
          "26: import javax.persistence.Table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "24: import javax.persistence.CascadeType;",
          "27: import javax.persistence.FetchType;",
          "31: import javax.persistence.OneToMany;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   @Column(name = \"cached_keytab_path\", insertable = true, updatable = true, nullable = true)",
          "50:   private String cachedKeytabPath = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   @OneToMany(mappedBy = \"kerberosPrincipalEntity\", cascade = CascadeType.REMOVE, fetch = FetchType.EAGER)",
          "59:   private Collection<KerberosKeytabPrincipalEntity> kerberosKeytabPrincipalEntities = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     this.cachedKeytabPath = cachedKeytabPath;",
          "123:   }",
          "125: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   public Collection<KerberosKeytabPrincipalEntity> getKerberosKeytabPrincipalEntities() {",
          "135:     return kerberosKeytabPrincipalEntities;",
          "136:   }",
          "138:   public void setKerberosKeytabPrincipalEntities(Collection<KerberosKeytabPrincipalEntity> kerberosKeytabPrincipalEntities) {",
          "139:     this.kerberosKeytabPrincipalEntities = kerberosKeytabPrincipalEntities;",
          "140:   }",
          "142:   public void addKerberosKeytabPrincipal(KerberosKeytabPrincipalEntity kerberosKeytabPrincipalEntity) {",
          "143:     if (!kerberosKeytabPrincipalEntities.contains(kerberosKeytabPrincipalEntity)) {",
          "144:       kerberosKeytabPrincipalEntities.add(kerberosKeytabPrincipalEntity);",
          "145:     }",
          "146:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "33: import org.apache.ambari.server.controller.utilities.ClusterControllerHelper;",
          "34: import org.apache.ambari.server.controller.utilities.PredicateBuilder;",
          "37: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "38: import org.apache.ambari.server.state.Cluster;",
          "39: import org.apache.ambari.server.state.SecurityType;",
          "40: import org.slf4j.Logger;",
          "41: import org.slf4j.LoggerFactory;",
          "48: public class CleanupServerAction extends KerberosServerAction {",
          "55:   private final static Logger LOG = LoggerFactory.getLogger(CleanupServerAction.class);",
          "",
          "[Removed Lines]",
          "35: import org.apache.ambari.server.orm.dao.KerberosKeytabDAO;",
          "36: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "43: import com.google.inject.Inject;",
          "49:   @Inject",
          "50:   KerberosKeytabDAO kerberosKeytabDAO;",
          "52:   @Inject",
          "53:   KerberosPrincipalDAO kerberosPrincipalDAO;",
          "",
          "[Added Lines]",
          "48:   @Override",
          "49:   protected boolean pruneServiceFilter() {",
          "50:     return false;",
          "51:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     try {",
          "120:       artifactProvider.deleteResources(new RequestImpl(null, null, null, null), predicate);",
          "123:       LOG.info(\"Kerberos descriptor removed successfully.\");",
          "124:       actionLog.writeStdOut(\"Kerberos descriptor removed successfully.\");",
          "125:     } catch (NoSuchResourceException e) {",
          "",
          "[Removed Lines]",
          "121:       kerberosPrincipalDAO.remove(kerberosPrincipalDAO.findAll());",
          "122:       kerberosKeytabDAO.remove(kerberosKeytabDAO.findAll());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:       }",
          "198:       KerberosKeytabEntity kke = kerberosKeytabDAO.find(destKeytabFilePath);",
          "200:         kke = new KerberosKeytabEntity(destKeytabFilePath);",
          "201:         kke.setOwnerName(ownerName);",
          "202:         kke.setOwnerAccess(ownerAccess);",
          "",
          "[Removed Lines]",
          "199:       if (!kerberosKeytabDAO.exists(destKeytabFilePath)) {",
          "",
          "[Added Lines]",
          "199:       if (kke == null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:         kerberosKeytabDAO.create(kke);",
          "206:       }",
          "208:       for(Map.Entry<String, String> mapping : principal.getServiceMapping().entries()) {",
          "209:         String serviceName = mapping.getKey();",
          "210:         String componentName = mapping.getValue();",
          "213:         entity.setDistributed(true);",
          "214:         entity.putServiceMapping(serviceName, componentName);",
          "215:         kerberosKeytabPrincipalDAO.merge(entity);",
          "216:         kke.addKerberosKeytabPrincipal(entity);",
          "217:         kerberosKeytabDAO.merge(kke);",
          "218:       }",
          "220:       if (actionLog != null) {",
          "",
          "[Removed Lines]",
          "211:         KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(principal.getPrincipal());",
          "212:         KerberosKeytabPrincipalEntity entity = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, principalEntity);",
          "",
          "[Added Lines]",
          "208:       KerberosPrincipalEntity kpe = kerberosPrincipalDAO.find(principal.getPrincipal());",
          "209:       if(kpe == null) {",
          "210:         kpe = new KerberosPrincipalEntity(principal.getPrincipal(), principal.isService(), principal.getCacheFile());",
          "211:         kerberosPrincipalDAO.create(kpe);",
          "212:       }",
          "217:         KerberosKeytabPrincipalEntity entity = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kpe);",
          "225:         kpe.addKerberosKeytabPrincipal(entity);",
          "226:         kerberosPrincipalDAO.merge(kpe);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.serveraction.kerberos;",
          "21: import java.io.File;",
          "23: import java.util.HashSet;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "26: import java.util.concurrent.ConcurrentMap;",
          "28: import org.apache.ambari.server.AmbariException;",
          "29: import org.apache.ambari.server.agent.CommandReport;",
          "30: import org.apache.ambari.server.audit.event.kerberos.DestroyPrincipalKerberosAuditEvent;",
          "31: import org.apache.ambari.server.controller.KerberosHelper;",
          "",
          "[Removed Lines]",
          "22: import java.io.IOException;",
          "",
          "[Added Lines]",
          "22: import java.util.ArrayList;",
          "23: import java.util.Collection;",
          "25: import java.util.Iterator;",
          "26: import java.util.List;",
          "32: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "34: import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;",
          "35: import org.apache.ambari.server.orm.entities.KerberosKeytabEntity;",
          "36: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "38: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "40: import org.slf4j.Logger;",
          "41: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "37: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;",
          "39: import org.apache.ambari.server.utils.ShellCommandUtil;",
          "",
          "[Added Lines]",
          "40: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "41: import org.apache.ambari.server.orm.entities.KerberosKeytabServiceMappingEntity;",
          "43: import org.apache.ambari.server.security.credential.PrincipalKeyCredential;",
          "45: import org.apache.commons.collections.CollectionUtils;",
          "46: import org.apache.commons.collections.MapUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: public class DestroyPrincipalsServerAction extends KerberosServerAction {",
          "55:   private final static Logger LOG = LoggerFactory.getLogger(DestroyPrincipalsServerAction.class);",
          "57:   @Inject",
          "58:   private KerberosPrincipalDAO kerberosPrincipalDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   @Inject",
          "70:   private KerberosOperationHandlerFactory kerberosOperationHandlerFactory;",
          "72:   @Inject",
          "73:   private KerberosHelper kerberosHelper;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:   @Override",
          "86:   public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws",
          "87:       AmbariException, InterruptedException {",
          "89:   }",
          "",
          "[Removed Lines]",
          "88:     return processIdentities(requestSharedDataContext);",
          "",
          "[Added Lines]",
          "107:     Map<String, String> commandParameters = getCommandParameters();",
          "108:     KDCType kdcType = getKDCType(commandParameters);",
          "109:     PrincipalKeyCredential administratorCredential = kerberosHelper.getKDCAdministratorCredentials(getClusterName());",
          "110:     String defaultRealm = getDefaultRealm(commandParameters);",
          "112:     KerberosOperationHandler operationHandler = kerberosOperationHandlerFactory.getKerberosOperationHandler(kdcType);",
          "113:     Map<String, String> kerberosConfiguration = getConfiguration(\"kerberos-env\");",
          "115:     try {",
          "116:       operationHandler.open(administratorCredential, defaultRealm, kerberosConfiguration);",
          "117:     } catch (KerberosOperationException e) {",
          "118:       String message = String.format(\"Failed to process the identities, could not properly open the KDC operation handler: %s\",",
          "119:           e.getMessage());",
          "120:       actionLog.writeStdErr(message);",
          "121:       LOG.error(message);",
          "122:       throw new AmbariException(message, e);",
          "123:     }",
          "125:     actionLog.writeStdOut(\"Cleaning up Kerberos identities.\");",
          "127:     Map<String, ? extends Collection<String>> serviceComponentFilter = getServiceComponentFilter();",
          "128:     Set<String> hostFilter = getHostFilter();",
          "129:     Collection<String> principalNameFilter = getIdentityFilter();",
          "131:     List<KerberosKeytabPrincipalEntity> kerberosKeytabPrincipalEntities;",
          "133:     if (MapUtils.isEmpty(serviceComponentFilter) && CollectionUtils.isEmpty(hostFilter) && CollectionUtils.isEmpty(principalNameFilter)) {",
          "135:       kerberosKeytabPrincipalEntities = kerberosKeytabPrincipalDAO.findAll();",
          "136:     } else {",
          "138:       ArrayList<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> filters = new ArrayList<>();",
          "140:       if (MapUtils.isEmpty(serviceComponentFilter)) {",
          "141:         filters.add(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createFilter(",
          "142:             null,",
          "143:             null,",
          "144:             hostFilter,",
          "145:             principalNameFilter));",
          "146:       } else {",
          "147:         for (Map.Entry<String, ? extends Collection<String>> entry : serviceComponentFilter.entrySet()) {",
          "148:           filters.add(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createFilter(",
          "149:               entry.getKey(),",
          "150:               entry.getValue(),",
          "151:               hostFilter,",
          "152:               principalNameFilter));",
          "153:         }",
          "154:       }",
          "157:       kerberosKeytabPrincipalEntities = kerberosKeytabPrincipalDAO.findByFilters(filters);",
          "158:     }",
          "160:     if (kerberosKeytabPrincipalEntities != null) {",
          "161:       try {",
          "162:         Set<Long> visitedKKPID = new HashSet<>();",
          "164:         for (KerberosKeytabPrincipalEntity kerberosKeytabPrincipalEntity : kerberosKeytabPrincipalEntities) {",
          "166:           if (!visitedKKPID.contains(kerberosKeytabPrincipalEntity.getKkpId())) {",
          "168:             visitedKKPID.add(kerberosKeytabPrincipalEntity.getKkpId());",
          "170:             KerberosKeytabEntity kerberosKeytabEntity = kerberosKeytabPrincipalEntity.getKerberosKeytabEntity();",
          "171:             KerberosPrincipalEntity kerberosPrincipalEntity = kerberosKeytabPrincipalEntity.getKerberosPrincipalEntity();",
          "173:             if (serviceComponentFilter == null) {",
          "177:               kerberosKeytabPrincipalEntity.setServiceMapping(null);",
          "178:             } else {",
          "181:               List<KerberosKeytabServiceMappingEntity> serviceMapping = kerberosKeytabPrincipalEntity.getServiceMapping();",
          "183:               if (CollectionUtils.isNotEmpty(serviceMapping)) {",
          "185:                 Iterator<KerberosKeytabServiceMappingEntity> iterator = serviceMapping.iterator();",
          "186:                 while (iterator.hasNext()) {",
          "187:                   KerberosKeytabServiceMappingEntity entity = iterator.next();",
          "189:                   if (serviceComponentFilter.containsKey(entity.getServiceName())) {",
          "190:                     Collection<String> components = serviceComponentFilter.get(entity.getServiceName());",
          "192:                     if ((CollectionUtils.isEmpty(components)) || components.contains(entity.getComponentName())) {",
          "193:                       iterator.remove();",
          "194:                     }",
          "195:                   }",
          "196:                 }",
          "198:                 kerberosKeytabPrincipalEntity.setServiceMapping(serviceMapping);",
          "199:               }",
          "200:             }",
          "203:             kerberosKeytabPrincipalEntity = kerberosKeytabPrincipalDAO.merge(kerberosKeytabPrincipalEntity);",
          "207:             if (CollectionUtils.isEmpty(kerberosKeytabPrincipalEntity.getServiceMapping())) {",
          "208:               kerberosKeytabPrincipalDAO.remove(kerberosKeytabPrincipalEntity);",
          "210:               if (LOG.isDebugEnabled()) {",
          "211:                 LOG.debug(\"Cleaning up keytab/principal entry: {}:{}:{}:{}\",",
          "212:                     kerberosKeytabPrincipalEntity.getKkpId(), kerberosKeytabEntity.getKeytabPath(), kerberosPrincipalEntity.getPrincipalName(), kerberosKeytabPrincipalEntity.getHostName());",
          "213:               } else {",
          "214:                 LOG.info(\"Cleaning up keytab/principal entry: {}:{}:{}\",",
          "215:                     kerberosKeytabEntity.getKeytabPath(), kerberosPrincipalEntity.getPrincipalName(), kerberosKeytabPrincipalEntity.getHostName());",
          "216:               }",
          "219:               kerberosKeytabEntity.getKerberosKeytabPrincipalEntities().remove(kerberosKeytabPrincipalEntity);",
          "220:               kerberosKeytabEntity = kerberosKeytabDAO.merge(kerberosKeytabEntity);",
          "223:               kerberosPrincipalEntity.getKerberosKeytabPrincipalEntities().remove(kerberosKeytabPrincipalEntity);",
          "224:               kerberosPrincipalEntity = kerberosPrincipalDAO.merge(kerberosPrincipalEntity);",
          "225:             }",
          "229:             if (kerberosKeytabDAO.removeIfNotReferenced(kerberosKeytabEntity)) {",
          "230:               String message = String.format(\"Cleaning up keytab entry: %s\", kerberosKeytabEntity.getKeytabPath());",
          "231:               LOG.info(message);",
          "232:               actionLog.writeStdOut(message);",
          "233:             }",
          "237:             if (kerberosPrincipalDAO.removeIfNotReferenced(kerberosPrincipalEntity)) {",
          "238:               String message = String.format(\"Cleaning up principal entry: %s\", kerberosPrincipalEntity.getPrincipalName());",
          "239:               LOG.info(message);",
          "240:               actionLog.writeStdOut(message);",
          "242:               destroyIdentity(operationHandler, kerberosPrincipalEntity);",
          "243:             }",
          "244:           }",
          "245:         }",
          "246:       } finally {",
          "249:         try {",
          "250:           operationHandler.close();",
          "251:         } catch (KerberosOperationException e) {",
          "253:         }",
          "254:       }",
          "255:     }",
          "257:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "260:   @Override",
          "261:   protected boolean pruneServiceFilter() {",
          "262:     return false;",
          "263:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:                                           boolean includedInFilter,",
          "112:                                           Map<String, Object> requestSharedDataContext)",
          "113:       throws AmbariException {",
          "133:       try {",
          "178:             }",
          "179:           }",
          "185:         }",
          "188:       }",
          "189:     }",
          "194:   }",
          "",
          "[Removed Lines]",
          "115:     if(!includedInFilter) {",
          "117:       return null;",
          "118:     }",
          "121:     if (!seenPrincipals.contains(resolvedPrincipal.getPrincipal())) {",
          "122:       seenPrincipals.add(resolvedPrincipal.getPrincipal());",
          "124:       String message = String.format(\"Destroying identity, %s\", resolvedPrincipal.getPrincipal());",
          "125:       LOG.info(message);",
          "126:       actionLog.writeStdOut(message);",
          "127:       DestroyPrincipalKerberosAuditEvent.DestroyPrincipalKerberosAuditEventBuilder auditEventBuilder = DestroyPrincipalKerberosAuditEvent.builder()",
          "128:           .withTimestamp(System.currentTimeMillis())",
          "129:           .withRequestId(getHostRoleCommand().getRequestId())",
          "130:           .withTaskId(getHostRoleCommand().getTaskId())",
          "131:           .withPrincipal(resolvedPrincipal.getPrincipal());",
          "134:         try {",
          "135:           boolean servicePrincipal = resolvedPrincipal.isService();",
          "136:           operationHandler.removePrincipal(resolvedPrincipal.getPrincipal(), servicePrincipal);",
          "137:         } catch (KerberosOperationException e) {",
          "138:           message = String.format(\"Failed to remove identity for %s from the KDC - %s\", resolvedPrincipal.getPrincipal(), e.getMessage());",
          "139:           LOG.warn(message);",
          "140:           actionLog.writeStdErr(message);",
          "141:           auditEventBuilder.withReasonOfFailure(message);",
          "142:         }",
          "144:         try {",
          "145:           KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());",
          "147:           if (principalEntity != null) {",
          "148:             String cachedKeytabPath = principalEntity.getCachedKeytabPath();",
          "149:             KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedPrincipal.getResolvedKerberosKeytab().getFile());",
          "150:             kerberosKeytabPrincipalDAO.remove(kerberosKeytabPrincipalDAO.findByPrincipal(principalEntity.getPrincipalName()));",
          "151:             kerberosKeytabDAO.remove(kke);",
          "152:             kerberosPrincipalDAO.remove(principalEntity);",
          "155:             if (cachedKeytabPath != null) {",
          "156:               if (!new File(cachedKeytabPath).delete()) {",
          "157:                 LOG.debug(\"Failed to remove cached keytab for {}\", resolvedPrincipal.getPrincipal());",
          "158:               }",
          "159:             }",
          "160:           }",
          "163:           String hostName = resolvedPrincipal.getHostName();",
          "164:           if (hostName != null && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {",
          "165:             ResolvedKerberosKeytab resolvedKeytab = resolvedPrincipal.getResolvedKerberosKeytab();",
          "166:             if (resolvedKeytab != null) {",
          "167:               String keytabFilePath = resolvedKeytab.getFile();",
          "168:               if (keytabFilePath != null) {",
          "169:                 try {",
          "170:                   ShellCommandUtil.Result result = ShellCommandUtil.delete(keytabFilePath, true, true);",
          "171:                   if (!result.isSuccessful()) {",
          "172:                     LOG.warn(\"Failed to remove ambari keytab for {} due to {}\", resolvedPrincipal.getPrincipal(), result.getStderr());",
          "173:                   }",
          "174:                 } catch (IOException|InterruptedException e) {",
          "175:                   LOG.warn(\"Failed to remove ambari keytab for \" + resolvedPrincipal.getPrincipal(), e);",
          "176:                 }",
          "177:               }",
          "180:         } catch (Throwable t) {",
          "181:           message = String.format(\"Failed to remove identity for %s from the Ambari database - %s\", resolvedPrincipal.getPrincipal(), t.getMessage());",
          "182:           LOG.warn(message);",
          "183:           actionLog.writeStdErr(message);",
          "184:           auditEventBuilder.withReasonOfFailure(message);",
          "186:       } finally {",
          "187:         auditLog(auditEventBuilder.build());",
          "193:     return null;",
          "195: }",
          "",
          "[Added Lines]",
          "287:     throw new UnsupportedOperationException();",
          "288:   }",
          "290:   private void destroyIdentity(KerberosOperationHandler operationHandler, KerberosPrincipalEntity kerberosPrincipalEntity) {",
          "291:     String principalName = kerberosPrincipalEntity.getPrincipalName();",
          "292:     String message = String.format(\"Destroying identity, %s\", principalName);",
          "293:     LOG.info(message);",
          "294:     actionLog.writeStdOut(message);",
          "295:     DestroyPrincipalKerberosAuditEvent.DestroyPrincipalKerberosAuditEventBuilder auditEventBuilder = DestroyPrincipalKerberosAuditEvent.builder()",
          "296:         .withTimestamp(System.currentTimeMillis())",
          "297:         .withRequestId(getHostRoleCommand().getRequestId())",
          "298:         .withTaskId(getHostRoleCommand().getTaskId())",
          "299:         .withPrincipal(principalName);",
          "301:     try {",
          "302:       try {",
          "303:         operationHandler.removePrincipal(principalName, kerberosPrincipalEntity.isService());",
          "304:       } catch (KerberosOperationException e) {",
          "305:         message = String.format(\"Failed to remove identity for %s from the KDC - %s\", principalName, e.getMessage());",
          "306:         LOG.warn(message, e);",
          "307:         actionLog.writeStdErr(message);",
          "308:         auditEventBuilder.withReasonOfFailure(message);",
          "309:       }",
          "312:         KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(principalName);",
          "314:         if (principalEntity != null) {",
          "315:           String cachedKeytabPath = principalEntity.getCachedKeytabPath();",
          "318:           if (cachedKeytabPath != null) {",
          "319:             if (!new File(cachedKeytabPath).delete()) {",
          "320:               LOG.debug(\"Failed to remove cached keytab for {}\", principalName);",
          "324:       } catch (Throwable t) {",
          "325:         message = String.format(\"Failed to remove identity for %s from the Ambari database - %s\", principalName, t.getMessage());",
          "326:         LOG.warn(message, t);",
          "327:         actionLog.writeStdErr(message);",
          "328:         auditEventBuilder.withReasonOfFailure(message);",
          "330:     } finally {",
          "331:       auditLog(auditEventBuilder.build());",
          "334: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   public static final String IDENTITY_FILTER = \"identity_filter\";",
          "",
          "[Removed Lines]",
          "97:   public static final String COMPONENT_FILTER = \"component_filter\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   private KerberosHelper kerberosHelper;",
          "188:   @Inject",
          "191:   @Inject",
          "",
          "[Removed Lines]",
          "189:   HostDAO hostDAO;",
          "192:   KerberosKeytabController kerberosKeytabController;",
          "",
          "[Added Lines]",
          "187:   private HostDAO hostDAO;",
          "190:   private KerberosKeytabController kerberosKeytabController;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "451:       }",
          "453:       try {",
          "455:         final Collection<KerberosIdentityDescriptor> serviceIdentities = serviceComponentFilter == null ? null : calculateServiceIdentities(getClusterName(), serviceComponentFilter);",
          "456:         for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, getHostFilter(), getIdentityFilter())) {",
          "457:           for (ResolvedKerberosPrincipal principal : rkk.getPrincipals()) {",
          "",
          "[Removed Lines]",
          "454:         final Map<String, Collection<String>> serviceComponentFilter = (Map<String, Collection<String>>) getServiceComponentFilter();",
          "",
          "[Added Lines]",
          "452:         final Map<String, ? extends Collection<String>> serviceComponentFilter = (pruneServiceFilter())",
          "453:             ? kerberosKeytabController.adjustServiceComponentFilter(clusters.getCluster(getClusterName()), true, getServiceComponentFilter())",
          "454:             : getServiceComponentFilter();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "485:         : commandReport;",
          "486:   }",
          "488:   private boolean isRelevantIdentity(Collection<KerberosIdentityDescriptor> serviceIdentities, ResolvedKerberosPrincipal principal) {",
          "489:     if (serviceIdentities != null) {",
          "490:       boolean hasValidIdentity = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:   protected boolean pruneServiceFilter() {",
          "489:     return true;",
          "490:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "500:     return true;",
          "501:   }",
          "504:       throws AmbariException {",
          "505:     final Collection<KerberosIdentityDescriptor> serviceIdentities = new ArrayList<>();",
          "506:     for (String service : serviceComponentFilter.keySet()) {",
          "",
          "[Removed Lines]",
          "503:   private Collection<KerberosIdentityDescriptor> calculateServiceIdentities(String clusterName, Map<String, Collection<String>> serviceComponentFilter)",
          "",
          "[Added Lines]",
          "507:   private Collection<KerberosIdentityDescriptor> calculateServiceIdentities(String clusterName, Map<String, ? extends Collection<String>> serviceComponentFilter)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "210:   }",
          "211: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:   @Override",
          "213:   protected boolean pruneServiceFilter() {",
          "214:     return false;",
          "215:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.HashMap;",
          "24: import java.util.HashSet;",
          "25: import java.util.List;",
          "26: import java.util.Map;",
          "27: import java.util.Set;",
          "29: import org.apache.ambari.server.orm.dao.KerberosKeytabDAO;",
          "30: import org.apache.ambari.server.orm.dao.KerberosKeytabPrincipalDAO;",
          "31: import org.apache.ambari.server.orm.entities.KerberosKeytabEntity;",
          "32: import org.apache.ambari.server.orm.entities.KerberosKeytabPrincipalEntity;",
          "33: import org.apache.ambari.server.orm.entities.KerberosPrincipalEntity;",
          "35: import com.google.common.collect.ImmutableSet;",
          "36: import com.google.common.collect.Lists;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Collections;",
          "30: import org.apache.ambari.server.AmbariException;",
          "36: import org.apache.ambari.server.state.Cluster;",
          "37: import org.apache.ambari.server.state.Service;",
          "38: import org.apache.commons.collections.MapUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:                                                         Set<String> hostFilter, Collection<String> identityFilter) {",
          "102:     if (serviceComponentFilter == null && hostFilter == null && identityFilter == null) {",
          "103:       return getAllKeytabs();",
          "",
          "[Removed Lines]",
          "100:   public Set<ResolvedKerberosKeytab> getFilteredKeytabs(Map<String, Collection<String>> serviceComponentFilter,",
          "",
          "[Added Lines]",
          "105:   public Set<ResolvedKerberosKeytab> getFilteredKeytabs(Map<String, ? extends Collection<String>> serviceComponentFilter,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     if (serviceComponentFilter != null && serviceComponentFilter.size() > 0) {",
          "133:       Set<String> serviceSet = new HashSet<>();",
          "134:       Set<String> componentSet = new HashSet<>();",
          "135:       Set<String> serviceOnlySet = new HashSet<>();",
          "139:         String serviceName = entry.getKey();",
          "140:         Collection<String> serviceComponents = entry.getValue();",
          "",
          "[Removed Lines]",
          "131:   private List<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> splitServiceFilter(Map<String, Collection<String>> serviceComponentFilter) {",
          "138:       for(Map.Entry<String, Collection<String>> entry: serviceComponentFilter.entrySet()) {",
          "",
          "[Added Lines]",
          "136:   private List<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> splitServiceFilter(Map<String, ? extends Collection<String>> serviceComponentFilter) {",
          "143:       for (Map.Entry<String, ? extends Collection<String>> entry : serviceComponentFilter.entrySet()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:   private Set<ResolvedKerberosPrincipal> fromPrincipalEntities(Collection<KerberosKeytabPrincipalEntity> principalEntities) {",
          "205:     ImmutableSet.Builder<ResolvedKerberosPrincipal> builder = ImmutableSet.builder();",
          "206:     for (KerberosKeytabPrincipalEntity kkpe : principalEntities) {",
          "217:     }",
          "218:     return builder.build();",
          "219:   }",
          "220: }",
          "",
          "[Removed Lines]",
          "207:       KerberosPrincipalEntity kpe = kkpe.getPrincipalEntity();",
          "208:       ResolvedKerberosPrincipal rkp = new ResolvedKerberosPrincipal(",
          "209:         kkpe.getHostId(),",
          "210:         kkpe.getHostName(),",
          "211:         kkpe.getPrincipalName(),",
          "212:         kpe.isService(),",
          "213:         kpe.getCachedKeytabPath(),",
          "214:         kkpe.getKeytabPath(),",
          "215:         kkpe.getServiceMappingAsMultimap());",
          "216:       builder.add(rkp);",
          "",
          "[Added Lines]",
          "212:       KerberosPrincipalEntity kpe = kkpe.getKerberosPrincipalEntity();",
          "213:       if(kpe != null) {",
          "214:         ResolvedKerberosPrincipal rkp = new ResolvedKerberosPrincipal(",
          "215:             kkpe.getHostId(),",
          "216:             kkpe.getHostName(),",
          "217:             kkpe.getPrincipalName(),",
          "218:             kpe.isService(),",
          "219:             kpe.getCachedKeytabPath(),",
          "220:             kkpe.getKeytabPath(),",
          "221:             kkpe.getServiceMappingAsMultimap());",
          "222:         builder.add(rkp);",
          "223:       }",
          "237:   public Map<String, Collection<String>> adjustServiceComponentFilter(Cluster cluster, boolean includeAmbariAsService, Map<String, ? extends Collection<String>> serviceComponentFilter) throws AmbariException {",
          "238:     Map<String, Collection<String>> adjustedFilter = new HashMap<>();",
          "240:     Map<String, Service> installedServices = (cluster == null) ? null : cluster.getServices();",
          "241:     if(includeAmbariAsService) {",
          "242:       installedServices = (installedServices == null) ? new HashMap<>() : new HashMap<>(installedServices);",
          "243:       installedServices.put(\"AMBARI\", null);",
          "244:     }",
          "246:     if (!MapUtils.isEmpty(installedServices)) {",
          "247:       if (serviceComponentFilter != null) {",
          "249:         for (Map.Entry<String, ? extends Collection<String>> entry : serviceComponentFilter.entrySet()) {",
          "250:           String serviceName = entry.getKey();",
          "252:           if (installedServices.containsKey(serviceName)) {",
          "253:             adjustedFilter.put(serviceName, entry.getValue());",
          "254:           }",
          "255:         }",
          "256:       } else {",
          "258:         for (String serviceName : installedServices.keySet()) {",
          "260:           adjustedFilter.put(serviceName, Collections.singletonList(\"*\"));",
          "261:         }",
          "262:       }",
          "263:     }",
          "265:     return adjustedFilter;",
          "266:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java||ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import static org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE;",
          "33: import static org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE;",
          "34: import static org.apache.ambari.server.controller.KerberosHelperImpl.SET_KEYTAB;",
          "35: import static org.easymock.EasyMock.createMock;",
          "36: import static org.easymock.EasyMock.expect;",
          "37: import static org.easymock.EasyMock.replay;",
          "38: import static org.easymock.EasyMock.reset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import static org.easymock.EasyMock.anyObject;",
          "37: import static org.easymock.EasyMock.eq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: import org.slf4j.Logger;",
          "118: import org.slf4j.LoggerFactory;",
          "120: import com.google.common.collect.Sets;",
          "121: import com.google.inject.Guice;",
          "122: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: import com.google.common.collect.ArrayListMultimap;",
          "123: import com.google.common.collect.Multimap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1496:     Method injectKeytabMethod = agentCommandsPublisher.getClass().getDeclaredMethod(\"injectKeytab\",",
          "1497:         ExecutionCommand.class, String.class, String.class);",
          "1498:     injectKeytabMethod.setAccessible(true);",
          "1500:     injectKeytabMethod.invoke(agentCommandsPublisher, executionCommand, \"SET_KEYTAB\", targetHost);",
          "1502:     return executionCommand.getKerberosCommandParams();",
          "",
          "[Removed Lines]",
          "1499:     commandparams.put(KerberosServerAction.DATA_DIRECTORY, createTestKeytabData(agentCommandsPublisher).getAbsolutePath());",
          "",
          "[Added Lines]",
          "1503:     commandparams.put(KerberosServerAction.DATA_DIRECTORY, createTestKeytabData(agentCommandsPublisher, false).getAbsolutePath());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1529:     Method injectKeytabMethod = agentCommandsPublisher.getClass().getDeclaredMethod(\"injectKeytab\",",
          "1530:         ExecutionCommand.class, String.class, String.class);",
          "1531:     injectKeytabMethod.setAccessible(true);",
          "1533:     injectKeytabMethod.invoke(agentCommandsPublisher, executionCommand, \"REMOVE_KEYTAB\", targetHost);",
          "1535:     return executionCommand.getKerberosCommandParams();",
          "1536:   }",
          "1540:     KerberosKeytabController kerberosKeytabControllerMock = createMock(KerberosKeytabController.class);",
          "1543:     expect(kerberosKeytabControllerMock.getFilteredKeytabs(filter,null,null)).andReturn(",
          "1544:       Sets.newHashSet(",
          "1545:         new ResolvedKerberosKeytab(",
          "",
          "[Removed Lines]",
          "1532:     commandparams.put(KerberosServerAction.DATA_DIRECTORY, createTestKeytabData(agentCommandsPublisher).getAbsolutePath());",
          "1539:   private File createTestKeytabData(AgentCommandsPublisher agentCommandsPublisher) throws Exception {",
          "1541:     Map<String, Collection<String>> filter = new HashMap<>();",
          "1542:     filter.put(\"HDFS\", Collections.singletonList(\"*\"));",
          "",
          "[Added Lines]",
          "1536:     commandparams.put(KerberosServerAction.DATA_DIRECTORY, createTestKeytabData(agentCommandsPublisher, true).getAbsolutePath());",
          "1543:   private File createTestKeytabData(AgentCommandsPublisher agentCommandsPublisher, boolean removeKeytabs) throws Exception {",
          "1545:     Map<String, Collection<String>> filter;",
          "1547:     if(removeKeytabs) {",
          "1548:       filter = null;",
          "1550:       Multimap<String, String> serviceMapping = ArrayListMultimap.create();",
          "1551:       serviceMapping.put(\"HDFS\", \"DATANODE\");",
          "1553:       ResolvedKerberosPrincipal resolvedKerberosPrincipal = createMock(ResolvedKerberosPrincipal.class);",
          "1554:       expect(resolvedKerberosPrincipal.getHostName()).andReturn(\"c6403.ambari.apache.org\");",
          "1555:       expect(resolvedKerberosPrincipal.getPrincipal()).andReturn(\"dn/_HOST@_REALM\");",
          "1556:       expect(resolvedKerberosPrincipal.getServiceMapping()).andReturn(serviceMapping);",
          "1557:       replay(resolvedKerberosPrincipal);",
          "1559:       ResolvedKerberosKeytab resolvedKerberosKeytab = createMock(ResolvedKerberosKeytab.class);",
          "1560:       expect(resolvedKerberosKeytab.getPrincipals()).andReturn(Collections.singleton(resolvedKerberosPrincipal));",
          "1561:       replay(resolvedKerberosKeytab);",
          "1563:       expect(kerberosKeytabControllerMock.getKeytabByFile(\"/etc/security/keytabs/dn.service.keytab\")).andReturn(resolvedKerberosKeytab).once();",
          "1564:     }",
          "1565:     else {",
          "1566:       filter = Collections.singletonMap(\"HDFS\", Collections.singletonList(\"*\"));",
          "1567:     }",
          "1569:     expect(kerberosKeytabControllerMock.adjustServiceComponentFilter(anyObject(), eq(false), anyObject())).andReturn(filter).once();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java||ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java -> ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: @PrepareForTest({ Configuration.class, PasswordUtils.class })",
          "70: @PowerMockIgnore( {\"javax.management.*\", \"javax.crypto.*\"})",
          "71: public class ConfigurationTest {",
          "74:   @Before",
          "75:   public void setup() throws Exception {",
          "",
          "[Removed Lines]",
          "72:   public TemporaryFolder temp = new TemporaryFolder();",
          "",
          "[Added Lines]",
          "72:    public TemporaryFolder temp = new TemporaryFolder();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3392:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3393:     requestStageContainer.addStages(EasyMock.anyObject());",
          "3394:     expectLastCall().once();",
          "3396:     expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();",
          "3397:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3398:     requestStageContainer.addStages(EasyMock.anyObject());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3396:     expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();",
          "3397:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3398:     requestStageContainer.addStages(EasyMock.anyObject());",
          "3399:     expectLastCall().once();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3745:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3746:     requestStageContainer.addStages(EasyMock.anyObject());",
          "3747:     expectLastCall().once();",
          "3749:     expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();",
          "3750:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3751:     requestStageContainer.addStages(EasyMock.anyObject());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3754:     expect(requestStageContainer.getLastStageId()).andReturn(-1L).anyTimes();",
          "3755:     expect(requestStageContainer.getId()).andReturn(1L).once();",
          "3756:     requestStageContainer.addStages(EasyMock.anyObject());",
          "3757:     expectLastCall().once();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleanerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.controller.utilities;",
          "20: import static com.google.common.collect.Lists.newArrayList;",
          "22: import static java.util.Collections.singletonList;",
          "23: import static org.easymock.EasyMock.expect;",
          "24: import static org.easymock.EasyMock.expectLastCall;",
          "",
          "[Removed Lines]",
          "21: import static com.google.common.collect.Sets.newHashSet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   @Test",
          "79:   public void removesAllKerberosIdentitesOfComponentAfterComponentWasUninstalled() throws Exception {",
          "80:     installComponent(OOZIE, OOZIE_SERVER, HOST);",
          "82:     expectLastCall().once();",
          "83:     replayAll();",
          "84:     uninstallComponent(OOZIE, OOZIE_SERVER, HOST);",
          "85:     verifyAll();",
          "86:   }",
          "95:   @Test",
          "96:   public void skipsRemovingIdentityThatIsSharedByPrincipalName() throws Exception {",
          "97:     installComponent(OOZIE, OOZIE_SERVER, HOST);",
          "98:     installComponent(OOZIE_2, OOZIE_SERVER_2, HOST);",
          "100:     expectLastCall().once();",
          "101:     replayAll();",
          "102:     uninstallComponent(OOZIE, OOZIE_SERVER, HOST);",
          "",
          "[Removed Lines]",
          "81:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, OOZIE, OOZIE_SERVER, -1l)), newHashSet(\"/OOZIE/OOZIE_SERVER/oozie_server1\", \"/OOZIE/OOZIE_SERVER/oozie_server2\"));",
          "88:   @Test",
          "89:   public void skipsRemovingIdentityWhenServiceDoesNotExist() throws Exception {",
          "90:     replayAll();",
          "91:     uninstallComponent(\"NO_SUCH_SERVICE\", OOZIE_SERVER, HOST);",
          "92:     verifyAll();",
          "93:   }",
          "99:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, OOZIE, OOZIE_SERVER, -1l)), newHashSet(\"/OOZIE/OOZIE_SERVER/oozie_server1\"));",
          "",
          "[Added Lines]",
          "80:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, OOZIE, OOZIE_SERVER, -1l)), null);",
          "91:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, OOZIE, OOZIE_SERVER, -1l)), null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:   public void skipsRemovingIdentityThatIsSharedByKeyTabFilePath() throws Exception {",
          "108:     installComponent(YARN, RESOURCE_MANAGER, HOST);",
          "109:     installComponent(YARN_2, RESOURCE_MANAGER_2, HOST);",
          "111:     expectLastCall().once();",
          "112:     replayAll();",
          "113:     uninstallComponent(YARN, RESOURCE_MANAGER, HOST);",
          "",
          "[Removed Lines]",
          "110:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, YARN, RESOURCE_MANAGER, -1l)), newHashSet(\"/YARN/RESOURCE_MANAGER/rm_unique\"));",
          "",
          "[Added Lines]",
          "102:     kerberosHelper.deleteIdentities(cluster, singletonList(new Component(HOST, YARN, RESOURCE_MANAGER, -1l)), null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:   public void skipsRemovingIdentityWhenClusterIsNotKerberized() throws Exception {",
          "119:     reset(cluster);",
          "120:     expect(cluster.getSecurityType()).andReturn(SecurityType.NONE).anyTimes();",
          "123:     replayAll();",
          "124:     uninstallComponent(OOZIE, OOZIE_SERVER, HOST);",
          "125:     verifyAll();",
          "126:   }",
          "136:   @Test",
          "137:   public void removesServiceIdentitiesSkipComponentIdentitiesAfterServiceWasUninstalled() throws Exception {",
          "138:     installComponent(OOZIE, OOZIE_SERVER, HOST);",
          "140:     expectLastCall().once();",
          "141:     replayAll();",
          "142:     uninstallService(HDFS, hdfsComponents());",
          "",
          "[Removed Lines]",
          "121:     expect(cluster.getUpgradeInProgress()).andReturn(null).once();",
          "128:   @Test",
          "129:   public void skipsRemovingIdentityIfComponentIsStillInstalledOnADifferentHost() throws Exception {",
          "130:     installComponent(OOZIE, OOZIE_SERVER, HOST, HOST2);",
          "131:     replayAll();",
          "132:     uninstallComponent(OOZIE, OOZIE_SERVER, HOST);",
          "133:     verifyAll();",
          "134:   }",
          "139:     kerberosHelper.deleteIdentities(cluster, hdfsComponents(), newHashSet(\"/HDFS/hdfs-service\"));",
          "",
          "[Added Lines]",
          "122:     kerberosHelper.deleteIdentities(cluster, hdfsComponents(), null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:   public void skipsRemovingIdentityWhenClusterIsUpgrading() throws Exception {",
          "155:     installComponent(OOZIE, OOZIE_SERVER, HOST);",
          "156:     reset(cluster);",
          "157:     expect(cluster.getUpgradeInProgress()).andReturn(createNiceMock(UpgradeEntity.class)).once();",
          "159:     replayAll();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     expect(cluster.getSecurityType()).andReturn(SecurityType.KERBEROS).once();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.anyString;",
          "23: import static org.easymock.EasyMock.expect;",
          "24: import static org.easymock.EasyMock.expectLastCall;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.easymock.EasyMock.eq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:     ExecutionCommand mockExecutionCommand = createMock(ExecutionCommand.class);",
          "78:     HostRoleCommand mockHostRoleCommand = createMock(HostRoleCommand.class);",
          "79:     kerberosKeytabController = createMock(KerberosKeytabController.class);",
          "80:     expect(kerberosKeytabController.getFilteredKeytabs(null, null, null))",
          "81:       .andReturn(",
          "82:         Sets.newHashSet(new ResolvedKerberosKeytab(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     expect(kerberosKeytabController.adjustServiceComponentFilter(anyObject(), eq(true), anyObject())).andReturn(null).anyTimes();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97dcb55b1a413d41c17ac3f12d5ceb18a9605702",
      "candidate_info": {
        "commit_hash": "97dcb55b1a413d41c17ac3f12d5ceb18a9605702",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/97dcb55b1a413d41c17ac3f12d5ceb18a9605702",
        "files": [
          "ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py"
        ],
        "message": "AMBARI-24374. Testing if kerberos command parameters are present when checking missing keytabs (they are filtered out on the server side on purpose) (#1909)",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py||ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py||ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py": [
          "File: ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py -> ambari-common/src/main/python/ambari_commons/kerberos/kerberos_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   @classmethod",
          "54:   def from_kerberos_records(self, kerberos_record, hostname):",
          "56:                            if not self.keytab_exists(each) or not self.keytab_has_principal(each, hostname))",
          "60:   @staticmethod",
          "61:   def keytab_exists(kerberos_record):",
          "",
          "[Removed Lines]",
          "55:     with_missing_keytab = (each for each in kerberos_record \\",
          "57:     return MissingKeytabs(",
          "58:       set(MissingKeytabs.Identity.from_kerberos_record(each, hostname) for each in with_missing_keytab))",
          "",
          "[Added Lines]",
          "55:     if kerberos_record is not None:",
          "56:       with_missing_keytab = (each for each in kerberos_record \\",
          "58:       return MissingKeytabs(",
          "59:         set(MissingKeytabs.Identity.from_kerberos_record(each, hostname) for each in with_missing_keytab))",
          "60:     else:",
          "61:       return MissingKeytabs(None)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     self.items = items",
          "74:   def as_dict(self):",
          "77:   def __str__(self):",
          "81: def write_krb5_conf(params):",
          "",
          "[Removed Lines]",
          "75:     return [each._asdict() for each in self.items]",
          "78:     return \"Missing keytabs:\\n%s\" % (\"\\n\".join(map(str, self.items))) if self.items else 'No missing keytabs'",
          "",
          "[Added Lines]",
          "78:     return [each._asdict() for each in self.items] if self.items is not None else []",
          "81:     return \"Missing keytabs:\\n%s\" % (\"\\n\".join(map(str, self.items))) if self.items and self.items is not None else 'No missing keytabs'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a1c24863dee62d769c0e3d80e8daa25be0fc17c",
      "candidate_info": {
        "commit_hash": "9a1c24863dee62d769c0e3d80e8daa25be0fc17c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9a1c24863dee62d769c0e3d80e8daa25be0fc17c",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java"
        ],
        "message": "AMBARI-25433. Ambari should add login and password to urls populated from VDF (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.InputStream;",
          "21: import java.io.UnsupportedEncodingException;",
          "22: import java.net.URI;",
          "23: import java.util.ArrayList;",
          "24: import java.util.Collection;",
          "25: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.net.MalformedURLException;",
          "24: import java.net.URL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import java.util.Map;",
          "30: import java.util.Map.Entry;",
          "31: import java.util.Set;",
          "33: import org.apache.ambari.annotations.Experimental;",
          "34: import org.apache.ambari.annotations.ExperimentalFeature;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import java.util.regex.Matcher;",
          "35: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:     entity.setStack(stackEntity);",
          "617:     ListMultimap<String, RepositoryInfo> stackReposByOs =",
          "",
          "[Removed Lines]",
          "614:     List<RepositoryInfo> repos = holder.xml.repositoryInfo.getRepositories();",
          "",
          "[Added Lines]",
          "618:     String credentials;",
          "619:     try {",
          "620:       URL url = new URL(holder.url);",
          "621:       credentials = url.getUserInfo();",
          "622:     } catch (MalformedURLException e) {",
          "623:       throw new AmbariException(String.format(\"Could not parse url %s\", holder.url), e);",
          "624:     }",
          "626:     List<RepositoryInfo> repos = holder.xml.repositoryInfo.getRepositories(credentials);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java||ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java -> ambari-server/src/main/java/org/apache/ambari/server/state/stack/RepositoryXml.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.HashSet;",
          "23: import java.util.List;",
          "24: import java.util.Set;",
          "26: import javax.xml.bind.annotation.XmlAccessType;",
          "27: import javax.xml.bind.annotation.XmlAccessorType;",
          "28: import javax.xml.bind.annotation.XmlAttribute;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.regex.Matcher;",
          "26: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import javax.xml.bind.annotation.XmlRootElement;",
          "32: import javax.xml.bind.annotation.XmlTransient;",
          "34: import org.apache.ambari.server.stack.Validable;",
          "35: import org.apache.ambari.server.state.RepositoryInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import com.google.common.base.Strings;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40: @XmlRootElement(name=\"reposinfo\")",
          "41: @XmlAccessorType(XmlAccessType.FIELD)",
          "42: public class RepositoryXml implements Validable{",
          "44:   @XmlElement(name=\"latest\")",
          "45:   private String latestUri;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   private static final Pattern HTTP_URL_PROTOCOL_PATTERN = Pattern.compile(\"((http(s)*:\\\\/\\\\/))\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:   public List<RepositoryInfo> getRepositories() {",
          "222:     List<RepositoryInfo> repos = new ArrayList<>();",
          "224:     for (RepositoryXml.Os o : getOses()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     return getRepositories(null);",
          "226:   }",
          "234:   public List<RepositoryInfo> getRepositories(String credentials) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:         for (RepositoryXml.Repo r : o.getRepos()) {",
          "229:           RepositoryInfo ri = new RepositoryInfo();",
          "231:           ri.setDefaultBaseUrl(r.getBaseUrl());",
          "232:           ri.setMirrorsList(r.getMirrorsList());",
          "233:           ri.setOsType(os.trim());",
          "",
          "[Removed Lines]",
          "230:           ri.setBaseUrl(r.getBaseUrl());",
          "",
          "[Added Lines]",
          "243:           String baseUrl = r.getBaseUrl();",
          "246:           if (!Strings.isNullOrEmpty(credentials)) {",
          "247:             Matcher matcher = HTTP_URL_PROTOCOL_PATTERN.matcher(baseUrl);",
          "248:             baseUrl = matcher.replaceAll(\"$1\" + credentials + \"@\");",
          "249:           }",
          "251:           ri.setBaseUrl(baseUrl);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77faf73ecff7dfd1fc9d06f34eff48fdd697d7f8",
      "candidate_info": {
        "commit_hash": "77faf73ecff7dfd1fc9d06f34eff48fdd697d7f8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/77faf73ecff7dfd1fc9d06f34eff48fdd697d7f8",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java"
        ],
        "message": "AMBARI-25063. Restarting Ambari Server Fails Due to Recursive Injection of STOMPUpdatePublisher. (mpapirkovskyy) (#2826)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.List;",
          "23: import java.util.concurrent.ConcurrentLinkedQueue;",
          "24: import java.util.concurrent.Executors;",
          "25: import java.util.concurrent.ScheduledExecutorService;",
          "26: import java.util.concurrent.TimeUnit;",
          "28: import com.google.common.eventbus.EventBus;",
          "32: public abstract class BufferedUpdateEventPublisher<T> {",
          "34:   private static final long TIMEOUT = 1000L;",
          "35:   private final ConcurrentLinkedQueue<T> buffer = new ConcurrentLinkedQueue<>();",
          "37:   private ScheduledExecutorService scheduledExecutorService;",
          "39:   public void publish(T event, EventBus m_eventBus) {",
          "40:     if (scheduledExecutorService == null) {",
          "41:       scheduledExecutorService =",
          "",
          "[Removed Lines]",
          "29: import com.google.inject.Singleton;",
          "31: @Singleton",
          "",
          "[Added Lines]",
          "23: import java.util.Objects;",
          "29: import org.apache.ambari.server.events.STOMPEvent;",
          "38:   public abstract STOMPEvent.Type getType();",
          "42:   public BufferedUpdateEventPublisher(STOMPUpdatePublisher stompUpdatePublisher) {",
          "43:     stompUpdatePublisher.registerPublisher(this);",
          "44:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       mergeBufferAndPost(events, m_eventBus);",
          "78:     }",
          "79:   }",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:   @Override",
          "89:   public boolean equals(Object o) {",
          "90:     if (this == o) return true;",
          "91:     if (o == null || getClass() != o.getClass()) return false;",
          "92:     BufferedUpdateEventPublisher<?> that = (BufferedUpdateEventPublisher<?>) o;",
          "93:     return Objects.equals(getType(), that.getType());",
          "94:   }",
          "96:   @Override",
          "97:   public int hashCode() {",
          "98:     return Objects.hash(getType());",
          "99:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "22: import java.util.stream.Collectors;",
          "24: import org.apache.ambari.server.events.HostComponentUpdate;",
          "25: import org.apache.ambari.server.events.HostComponentsUpdateEvent;",
          "27: import com.google.common.eventbus.EventBus;",
          "31: public class HostComponentUpdateEventPublisher extends BufferedUpdateEventPublisher<HostComponentsUpdateEvent> {",
          "33:   @Override",
          "34:   public void mergeBufferAndPost(List<HostComponentsUpdateEvent> events, EventBus m_eventBus) {",
          "35:     List<HostComponentUpdate> hostComponentUpdates = events.stream().flatMap(",
          "",
          "[Removed Lines]",
          "28: import com.google.inject.Singleton;",
          "30: @Singleton",
          "",
          "[Added Lines]",
          "24: import org.apache.ambari.server.EagerSingleton;",
          "27: import org.apache.ambari.server.events.STOMPEvent;",
          "30: import com.google.inject.Inject;",
          "32: @EagerSingleton",
          "35:   @Inject",
          "36:   public HostComponentUpdateEventPublisher(STOMPUpdatePublisher stompUpdatePublisher) {",
          "37:     super(stompUpdatePublisher);",
          "38:   }",
          "40:   @Override",
          "41:   public STOMPEvent.Type getType() {",
          "42:     return STOMPEvent.Type.HOSTCOMPONENT;",
          "43:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "25: import org.apache.ambari.server.controller.internal.CalculatedStatus;",
          "26: import org.apache.ambari.server.events.RequestUpdateEvent;",
          "27: import org.apache.ambari.server.orm.dao.ClusterDAO;",
          "28: import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;",
          "29: import org.apache.ambari.server.orm.dao.RequestDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.ambari.server.EagerSingleton;",
          "28: import org.apache.ambari.server.events.STOMPEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import com.google.common.eventbus.EventBus;",
          "34: import com.google.inject.Inject;",
          "38: public class RequestUpdateEventPublisher extends BufferedUpdateEventPublisher<RequestUpdateEvent> {",
          "40:   @Inject",
          "",
          "[Removed Lines]",
          "35: import com.google.inject.Singleton;",
          "37: @Singleton",
          "",
          "[Added Lines]",
          "38: @EagerSingleton",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   @Inject",
          "50:   private ClusterDAO clusterDAO;",
          "52:   @Override",
          "53:   public void mergeBufferAndPost(List<RequestUpdateEvent> events, EventBus m_eventBus) {",
          "54:     Map<Long, RequestUpdateEvent> filteredRequests = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   @Inject",
          "54:   public RequestUpdateEventPublisher(STOMPUpdatePublisher stompUpdatePublisher) {",
          "55:     super(stompUpdatePublisher);",
          "56:   }",
          "58:   @Override",
          "59:   public STOMPEvent.Type getType() {",
          "60:     return STOMPEvent.Type.REQUEST;",
          "61:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.events.publishers;",
          "20: import java.util.concurrent.ExecutorService;",
          "21: import java.util.concurrent.Executors;",
          "23: import org.apache.ambari.server.AmbariRuntimeException;",
          "24: import org.apache.ambari.server.events.DefaultMessageEmitter;",
          "27: import org.apache.ambari.server.events.STOMPEvent;",
          "30: import com.google.common.eventbus.AsyncEventBus;",
          "31: import com.google.common.eventbus.EventBus;",
          "32: import com.google.common.util.concurrent.ThreadFactoryBuilder;",
          "34: import com.google.inject.Singleton;",
          "36: @Singleton",
          "37: public class STOMPUpdatePublisher {",
          "39:   private final EventBus agentEventBus;",
          "40:   private final EventBus apiEventBus;",
          "51:   private final ExecutorService threadPoolExecutorAgent = Executors.newSingleThreadExecutor(",
          "52:       new ThreadFactoryBuilder().setNameFormat(\"stomp-agent-bus-%d\").build());",
          "53:   private final ExecutorService threadPoolExecutorAPI = Executors.newSingleThreadExecutor(",
          "",
          "[Removed Lines]",
          "25: import org.apache.ambari.server.events.HostComponentsUpdateEvent;",
          "26: import org.apache.ambari.server.events.RequestUpdateEvent;",
          "28: import org.apache.ambari.server.events.ServiceUpdateEvent;",
          "33: import com.google.inject.Inject;",
          "42:   @Inject",
          "43:   private RequestUpdateEventPublisher requestUpdateEventPublisher;",
          "45:   @Inject",
          "46:   private HostComponentUpdateEventPublisher hostComponentUpdateEventPublisher;",
          "48:   @Inject",
          "49:   private ServiceUpdateEventPublisher serviceUpdateEventPublisher;",
          "",
          "[Added Lines]",
          "20: import java.util.ArrayList;",
          "21: import java.util.List;",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "38:   private static final Logger LOG = LoggerFactory.getLogger(STOMPUpdatePublisher.class);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         threadPoolExecutorAPI);",
          "62:   }",
          "64:   public void publish(STOMPEvent event) {",
          "65:     if (DefaultMessageEmitter.DEFAULT_AGENT_EVENT_TYPES.contains(event.getType())) {",
          "66:       publishAgent(event);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   private List<BufferedUpdateEventPublisher> publishers = new ArrayList<>();",
          "58:   public void registerPublisher(BufferedUpdateEventPublisher publisher) {",
          "59:     if (publishers.contains(publisher)) {",
          "60:       LOG.error(\"Publisher for type {} is already in use\", publisher.getType());",
          "61:     } else {",
          "62:       publishers.add(publisher);",
          "63:     }",
          "64:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   }",
          "75:   private void publishAPI(STOMPEvent event) {",
          "83:       apiEventBus.post(event);",
          "84:     }",
          "85:   }",
          "",
          "[Removed Lines]",
          "76:     if (event.getType().equals(STOMPEvent.Type.REQUEST)) {",
          "77:       requestUpdateEventPublisher.publish((RequestUpdateEvent) event, apiEventBus);",
          "78:     } else if (event.getType().equals(STOMPEvent.Type.HOSTCOMPONENT)) {",
          "79:       hostComponentUpdateEventPublisher.publish((HostComponentsUpdateEvent) event, apiEventBus);",
          "80:     } else if (event.getType().equals(STOMPEvent.Type.SERVICE)) {",
          "81:       serviceUpdateEventPublisher.publish((ServiceUpdateEvent) event, apiEventBus);",
          "82:     } else {",
          "",
          "[Added Lines]",
          "78:     boolean published = false;",
          "79:     for (BufferedUpdateEventPublisher publisher : publishers) {",
          "80:       if (publisher.getType().equals(event.getType())) {",
          "81:         publisher.publish(event, apiEventBus);",
          "82:         published = true;",
          "83:       }",
          "84:     }",
          "85:     if (!published) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "26: import org.apache.ambari.server.controller.utilities.ServiceCalculatedStateFactory;",
          "27: import org.apache.ambari.server.controller.utilities.state.ServiceCalculatedState;",
          "28: import org.apache.ambari.server.events.ServiceUpdateEvent;",
          "29: import org.apache.ambari.server.state.State;",
          "31: import com.google.common.eventbus.EventBus;",
          "35: public class ServiceUpdateEventPublisher extends BufferedUpdateEventPublisher<ServiceUpdateEvent> {",
          "36:   private Map<String, Map<String, State>> states = new HashMap<>();",
          "39:   @Override",
          "40:   public void mergeBufferAndPost(List<ServiceUpdateEvent> events, EventBus eventBus) {",
          "",
          "[Removed Lines]",
          "32: import com.google.inject.Singleton;",
          "34: @Singleton",
          "",
          "[Added Lines]",
          "26: import org.apache.ambari.server.EagerSingleton;",
          "29: import org.apache.ambari.server.events.STOMPEvent;",
          "34: import com.google.inject.Inject;",
          "36: @EagerSingleton",
          "40:   @Inject",
          "41:   public ServiceUpdateEventPublisher(STOMPUpdatePublisher stompUpdatePublisher) {",
          "42:     super(stompUpdatePublisher);",
          "43:   }",
          "46:   @Override",
          "47:   public STOMPEvent.Type getType() {",
          "48:     return STOMPEvent.Type.SERVICE;",
          "49:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}