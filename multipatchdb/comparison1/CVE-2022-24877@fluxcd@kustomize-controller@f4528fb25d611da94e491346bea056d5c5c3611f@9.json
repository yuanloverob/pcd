{
  "cve_id": "CVE-2022-24877",
  "cve_desc": "Flux is an open and extensible continuous delivery solution for Kubernetes. Path Traversal in the kustomize-controller via a malicious `kustomization.yaml` allows an attacker to expose sensitive data from the controller\u2019s pod filesystem and possibly privilege escalation in multi-tenancy deployments. Workarounds include automated tooling in the user's CI/CD pipeline to validate `kustomization.yaml` files conform with specific policies. This vulnerability is fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0.",
  "repo": "fluxcd/kustomize-controller",
  "patch_hash": "f4528fb25d611da94e491346bea056d5c5c3611f",
  "patch_info": {
    "commit_hash": "f4528fb25d611da94e491346bea056d5c5c3611f",
    "repo": "fluxcd/kustomize-controller",
    "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/f4528fb25d611da94e491346bea056d5c5c3611f",
    "files": [
      "controllers/kustomization_controller.go",
      "controllers/kustomization_decryptor.go",
      "controllers/kustomization_generator.go",
      "go.mod",
      "go.sum"
    ],
    "message": "controllers: use own Kustomize FS implementation\n\nFor details, see: https://github.com/fluxcd/pkg/pull/262\n\nSigned-off-by: Hidde Beydals <hello@hidde.co>",
    "before_after_code_files": [
      "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
      "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go",
      "controllers/kustomization_generator.go||controllers/kustomization_generator.go",
      "go.mod||go.mod",
      "go.sum||go.sum"
    ]
  },
  "patch_diff": {
    "controllers/kustomization_controller.go||controllers/kustomization_controller.go": [
      "File: controllers/kustomization_controller.go -> controllers/kustomization_controller.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  \"sigs.k8s.io/controller-runtime/pkg/predicate\"",
      "53:  \"sigs.k8s.io/controller-runtime/pkg/reconcile\"",
      "54:  \"sigs.k8s.io/controller-runtime/pkg/source\"",
      "57:  apiacl \"github.com/fluxcd/pkg/apis/acl\"",
      "58:  \"github.com/fluxcd/pkg/apis/meta\"",
      "",
      "[Removed Lines]",
      "55:  \"sigs.k8s.io/kustomize/kyaml/filesys\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "357:  }",
      "361:  if err != nil {",
      "362:   return kustomizev1.KustomizationNotReady(",
      "363:    kustomization,",
      "",
      "[Removed Lines]",
      "360:  err = r.generate(kustomization, dirPath)",
      "",
      "[Added Lines]",
      "359:  err = r.generate(kustomization, tmpDir, dirPath)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "629:  return source, nil",
      "630: }",
      "634:  return gen.WriteFile(dirPath)",
      "635: }",
      "",
      "[Removed Lines]",
      "632: func (r *KustomizationReconciler) generate(kustomization kustomizev1.Kustomization, dirPath string) error {",
      "633:  gen := NewGenerator(kustomization)",
      "",
      "[Added Lines]",
      "631: func (r *KustomizationReconciler) generate(kustomization kustomizev1.Kustomization, workDir string, dirPath string) error {",
      "632:  gen := NewGenerator(workDir, kustomization)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "641:  }",
      "642:  defer cleanup()",
      "645:  if err := dec.ImportKeys(ctx); err != nil {",
      "646:   return nil, err",
      "647:  }",
      "655:  }",
      "657:  if err != nil {",
      "658:   return nil, fmt.Errorf(\"kustomize build failed: %w\", err)",
      "659:  }",
      "",
      "[Removed Lines]",
      "649:  fs := filesys.MakeFsOnDisk()",
      "651:  if kustomization.Spec.Decryption != nil {",
      "652:   if err = dec.DecryptEnvSources(dirPath); err != nil {",
      "653:    return nil, fmt.Errorf(\"error decrypting .env file: %w\", err)",
      "654:   }",
      "656:  m, err := buildKustomization(fs, dirPath)",
      "",
      "[Added Lines]",
      "649:  if err = dec.DecryptEnvSources(dirPath); err != nil {",
      "650:   return nil, fmt.Errorf(\"error decrypting env sources: %w\", err)",
      "653:  m, err := secureBuildKustomization(workDir, dirPath)",
      "",
      "---------------"
    ],
    "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go": [
      "File: controllers/kustomization_decryptor.go -> controllers/kustomization_decryptor.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "360: func (d *KustomizeDecryptor) DecryptEnvSources(path string) error {",
      "362:   return nil",
      "363:  }",
      "",
      "[Removed Lines]",
      "361:  if d.kustomization.Spec.Decryption.Provider != DecryptionProviderSOPS {",
      "",
      "[Added Lines]",
      "361:  if d.kustomization.Spec.Decryption == nil || d.kustomization.Spec.Decryption.Provider != DecryptionProviderSOPS {",
      "",
      "---------------"
    ],
    "controllers/kustomization_generator.go||controllers/kustomization_generator.go": [
      "File: controllers/kustomization_generator.go -> controllers/kustomization_generator.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:  \"sigs.k8s.io/kustomize/api/provider\"",
      "30:  \"sigs.k8s.io/kustomize/api/resmap\"",
      "31:  kustypes \"sigs.k8s.io/kustomize/api/types\"",
      "33:  \"sigs.k8s.io/yaml\"",
      "36:  \"github.com/fluxcd/pkg/apis/kustomize\"",
      "37: )",
      "39: type KustomizeGenerator struct {",
      "40:  kustomization kustomizev1.Kustomization",
      "41: }",
      "44:  return &KustomizeGenerator{",
      "45:   kustomization: kustomization,",
      "46:  }",
      "47: }",
      "",
      "[Removed Lines]",
      "32:  \"sigs.k8s.io/kustomize/kyaml/filesys\"",
      "35:  kustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1beta2\"",
      "43: func NewGenerator(kustomization kustomizev1.Kustomization) *KustomizeGenerator {",
      "",
      "[Added Lines]",
      "35:  securefs \"github.com/fluxcd/pkg/kustomize/filesys\"",
      "37:  kustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1beta2\"",
      "41:  root          string",
      "45: func NewGenerator(root string, kustomization kustomizev1.Kustomization) *KustomizeGenerator {",
      "47:   root:          root,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127: }",
      "129: func (kg *KustomizeGenerator) generateKustomization(dirPath string) error {",
      "",
      "[Removed Lines]",
      "130:  fs := filesys.MakeFsOnDisk()",
      "",
      "[Added Lines]",
      "133:  fs, err := securefs.MakeFsOnDiskSecure(kg.root)",
      "134:  if err != nil {",
      "135:   return err",
      "136:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "235: var kustomizeBuildMutex sync.Mutex",
      "243:  kustomizeBuildMutex.Lock()",
      "244:  defer kustomizeBuildMutex.Unlock()",
      "",
      "[Removed Lines]",
      "240: func buildKustomization(fs filesys.FileSystem, dirPath string) (resmap.ResMap, error) {",
      "",
      "[Added Lines]",
      "248: func secureBuildKustomization(root, dirPath string) (resmap.ResMap, error) {",
      "250:  fs, err := securefs.MakeFsOnDiskSecure(root)",
      "251:  if err != nil {",
      "252:   return nil, err",
      "253:  }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:  github.com/fluxcd/pkg/apis/acl v0.0.3",
      "17:  github.com/fluxcd/pkg/apis/kustomize v0.3.2",
      "18:  github.com/fluxcd/pkg/apis/meta v0.12.1",
      "19:  github.com/fluxcd/pkg/runtime v0.13.3",
      "20:  github.com/fluxcd/pkg/ssa v0.15.1",
      "21:  github.com/fluxcd/pkg/testserver v0.2.0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  github.com/fluxcd/pkg/kustomize v0.2.0",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29:  go.mozilla.org/sops/v3 v3.7.2",
      "30:  golang.org/x/net v0.0.0-20220225172249-27dd8689420f",
      "31:  google.golang.org/grpc v1.45.0",
      "36:  sigs.k8s.io/cli-utils v0.29.3",
      "38:  sigs.k8s.io/kustomize/api v0.11.4",
      "40:  sigs.k8s.io/yaml v1.3.0",
      "41: )",
      "",
      "[Removed Lines]",
      "32:  k8s.io/api v0.23.4",
      "33:  k8s.io/apiextensions-apiserver v0.23.4",
      "34:  k8s.io/apimachinery v0.23.4",
      "35:  k8s.io/client-go v0.23.4",
      "37:  sigs.k8s.io/controller-runtime v0.11.1",
      "39:  sigs.k8s.io/kustomize/kyaml v0.13.6",
      "",
      "[Added Lines]",
      "33:  k8s.io/api v0.23.5",
      "34:  k8s.io/apiextensions-apiserver v0.23.5",
      "35:  k8s.io/apimachinery v0.23.5",
      "36:  k8s.io/client-go v0.23.5",
      "38:  sigs.k8s.io/controller-runtime v0.11.2",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "199:  gopkg.in/yaml.v2 v2.4.0 // indirect",
      "200:  gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect",
      "201:  k8s.io/cli-runtime v0.23.2 // indirect",
      "203:  k8s.io/klog/v2 v2.50.0 // indirect",
      "204:  k8s.io/kube-openapi v0.0.0-20211115234752-e816edb12b65 // indirect",
      "205:  k8s.io/kubectl v0.23.2 // indirect",
      "206:  k8s.io/utils v0.0.0-20220210201930-3a6ce19ff2f9 // indirect",
      "207:  sigs.k8s.io/json v0.0.0-20211208200746-9f7c6b3444d2 // indirect",
      "208:  sigs.k8s.io/structured-merge-diff/v4 v4.2.1 // indirect",
      "209: )",
      "",
      "[Removed Lines]",
      "202:  k8s.io/component-base v0.23.4 // indirect",
      "",
      "[Added Lines]",
      "202:  k8s.io/component-base v0.23.5 // indirect",
      "208:  sigs.k8s.io/kustomize/kyaml v0.13.6 // indirect",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "276: github.com/fluxcd/pkg/apis/kustomize v0.3.2/go.mod h1:p8iAH5TeqMBnnxkkpCNNDvWYfKlNRx89a6WKOo+hJHA=",
      "277: github.com/fluxcd/pkg/apis/meta v0.12.1 h1:m5PfKAqbqWBvGp9+JRj1sv+xNkGsHwUVf+3rJ8wm6SE=",
      "278: github.com/fluxcd/pkg/apis/meta v0.12.1/go.mod h1:f8YVt70/KAhqzZ7xxhjvqyzKubOYx2pAbakb/FfCEg8=",
      "279: github.com/fluxcd/pkg/runtime v0.13.3 h1:k0Xun+RoEC/F6iuAPTA6rQb+I4B4oecBx6pOcodX11A=",
      "280: github.com/fluxcd/pkg/runtime v0.13.3/go.mod h1:dzWNKqFzFXeittbpFcJzR3cdC9CWlbzw+pNOgaVvF/0=",
      "281: github.com/fluxcd/pkg/ssa v0.15.1 h1:HXAT+K6c9Yy8Evxdyk3DU0KTk3yZ+fwgTEEzU1W/1V8=",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "279: github.com/fluxcd/pkg/kustomize v0.2.0 h1:twiGAFJctt2tyH8vHxL1uqb6BlU3B9ZqG8uSlluuioM=",
      "280: github.com/fluxcd/pkg/kustomize v0.2.0/go.mod h1:Qczvl7vNY9NJBpyaFrldsxfGjj6uaMcMmKGsSJ6hcxc=",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1440: honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=",
      "1441: honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=",
      "1442: k8s.io/api v0.23.2/go.mod h1:sYuDb3flCtRPI8ghn6qFrcK5ZBu2mhbElxRE95qpwlI=",
      "1447: k8s.io/apimachinery v0.23.2/go.mod h1:zDqeV0AK62LbCI0CI7KbWCAYdLg+E+8UXJ0rIz5gmS8=",
      "1451: k8s.io/cli-runtime v0.23.2 h1:4zOZX78mFSakwe4gef81XDBu94Yu0th6bfveTOx8ZQk=",
      "1452: k8s.io/cli-runtime v0.23.2/go.mod h1:Ag70akCDvwux4HxY+nH2J3UqE2e6iwSSdG1HE6p1VTU=",
      "1453: k8s.io/client-go v0.23.2/go.mod h1:k3YbsWg6GWdHF1THHTQP88X9RhB1DWPo3Dq7KfU/D1c=",
      "1456: k8s.io/code-generator v0.23.2/go.mod h1:S0Q1JVA+kSzTI1oUvbKAxZY/DYbA/ZUb4Uknog12ETk=",
      "1458: k8s.io/component-base v0.23.2/go.mod h1:wS9Z03MO3oJ0RU8bB/dbXTiluGju+SC/F5i660gxB8c=",
      "1461: k8s.io/component-helpers v0.23.2/go.mod h1:J6CMwiaf0izLoNwiLl2OymB4+rGTsTpWp6PL/AqOM4U=",
      "1462: k8s.io/gengo v0.0.0-20200413195148-3a45101e95ac/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=",
      "1463: k8s.io/gengo v0.0.0-20210813121822-485abfe95c7c/go.mod h1:FiNAH4ZV3gBg2Kwh89tzAEV2be7d5xI0vBa/VySYy3E=",
      "",
      "[Removed Lines]",
      "1443: k8s.io/api v0.23.4 h1:85gnfXQOWbJa1SiWGpE9EEtHs0UVvDyIsSMpEtl2D4E=",
      "1444: k8s.io/api v0.23.4/go.mod h1:i77F4JfyNNrhOjZF7OwwNJS5Y1S9dpwvb9iYRYRczfI=",
      "1445: k8s.io/apiextensions-apiserver v0.23.4 h1:AFDUEu/yEf0YnuZhqhIFhPLPhhcQQVuR1u3WCh0rveU=",
      "1446: k8s.io/apiextensions-apiserver v0.23.4/go.mod h1:TWYAKymJx7nLMxWCgWm2RYGXHrGlVZnxIlGnvtfYu+g=",
      "1448: k8s.io/apimachinery v0.23.4 h1:fhnuMd/xUL3Cjfl64j5ULKZ1/J9n8NuQEgNL+WXWfdM=",
      "1449: k8s.io/apimachinery v0.23.4/go.mod h1:BEuFMMBaIbcOqVIJqNZJXGFTP4W6AycEpb5+m/97hrM=",
      "1450: k8s.io/apiserver v0.23.4/go.mod h1:A6l/ZcNtxGfPSqbFDoxxOjEjSKBaQmE+UTveOmMkpNc=",
      "1454: k8s.io/client-go v0.23.4 h1:YVWvPeerA2gpUudLelvsolzH7c2sFoXXR5wM/sWqNFU=",
      "1455: k8s.io/client-go v0.23.4/go.mod h1:PKnIL4pqLuvYUK1WU7RLTMYKPiIh7MYShLshtRY9cj0=",
      "1457: k8s.io/code-generator v0.23.4/go.mod h1:S0Q1JVA+kSzTI1oUvbKAxZY/DYbA/ZUb4Uknog12ETk=",
      "1459: k8s.io/component-base v0.23.4 h1:SziYh48+QKxK+ykJ3Ejqd98XdZIseVBG7sBaNLPqy6M=",
      "1460: k8s.io/component-base v0.23.4/go.mod h1:8o3Gg8i2vnUXGPOwciiYlkSaZT+p+7gA9Scoz8y4W4E=",
      "",
      "[Added Lines]",
      "1445: k8s.io/api v0.23.5 h1:zno3LUiMubxD/V1Zw3ijyKO3wxrhbUF1Ck+VjBvfaoA=",
      "1446: k8s.io/api v0.23.5/go.mod h1:Na4XuKng8PXJ2JsploYYrivXrINeTaycCGcYgF91Xm8=",
      "1447: k8s.io/apiextensions-apiserver v0.23.5 h1:5SKzdXyvIJKu+zbfPc3kCbWpbxi+O+zdmAJBm26UJqI=",
      "1448: k8s.io/apiextensions-apiserver v0.23.5/go.mod h1:ntcPWNXS8ZPKN+zTXuzYMeg731CP0heCTl6gYBxLcuQ=",
      "1450: k8s.io/apimachinery v0.23.5 h1:Va7dwhp8wgkUPWsEXk6XglXWU4IKYLKNlv8VkX7SDM0=",
      "1451: k8s.io/apimachinery v0.23.5/go.mod h1:BEuFMMBaIbcOqVIJqNZJXGFTP4W6AycEpb5+m/97hrM=",
      "1452: k8s.io/apiserver v0.23.5/go.mod h1:7wvMtGJ42VRxzgVI7jkbKvMbuCbVbgsWFT7RyXiRNTw=",
      "1456: k8s.io/client-go v0.23.5 h1:zUXHmEuqx0RY4+CsnkOn5l0GU+skkRXKGJrhmE2SLd8=",
      "1457: k8s.io/client-go v0.23.5/go.mod h1:flkeinTO1CirYgzMPRWxUCnV0G4Fbu2vLhYCObnt/r4=",
      "1459: k8s.io/code-generator v0.23.5/go.mod h1:S0Q1JVA+kSzTI1oUvbKAxZY/DYbA/ZUb4Uknog12ETk=",
      "1461: k8s.io/component-base v0.23.5 h1:8qgP5R6jG1BBSXmRYW+dsmitIrpk8F/fPEvgDenMCCE=",
      "1462: k8s.io/component-base v0.23.5/go.mod h1:c5Nq44KZyt1aLl0IpHX82fhsn84Sb0jjzwjpcA42bY0=",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1480: rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=",
      "1481: rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=",
      "1482: rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=",
      "1484: sigs.k8s.io/cli-utils v0.29.3 h1:4QRB9ayCd5pd9M/D3q2KQgr+nYrvRaw3suW+rcOutvk=",
      "1485: sigs.k8s.io/cli-utils v0.29.3/go.mod h1:WDVRa5/eQBKntG++uyKdyT+xU7MLdCR4XsgseqL5uX4=",
      "1488: sigs.k8s.io/json v0.0.0-20211020170558-c049b76a60c6/go.mod h1:p4QtZmO4uMYipTQNzagwnNoseA6OxSUutVw05NhYDRs=",
      "1489: sigs.k8s.io/json v0.0.0-20211208200746-9f7c6b3444d2 h1:kDi4JBNAsJWfz1aEXhO8Jg87JJaPNLh5tIzYHgStQ9Y=",
      "1490: sigs.k8s.io/json v0.0.0-20211208200746-9f7c6b3444d2/go.mod h1:B+TnT182UBxE84DiCz4CVE26eOSDAeYCpfDnC2kdKMY=",
      "",
      "[Removed Lines]",
      "1483: sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.27/go.mod h1:tq2nT0Kx7W+/f2JVE+zxYtUhdjuELJkVpNz+x/QN5R4=",
      "1486: sigs.k8s.io/controller-runtime v0.11.1 h1:7YIHT2QnHJArj/dk9aUkYhfqfK5cIxPOX5gPECfdZLU=",
      "1487: sigs.k8s.io/controller-runtime v0.11.1/go.mod h1:KKwLiTooNGu+JmLZGn9Sl3Gjmfj66eMbCQznLP5zcqA=",
      "",
      "[Added Lines]",
      "1485: sigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.30/go.mod h1:fEO7lRTdivWO2qYVCVG7dEADOMo/MLDCVr8So2g88Uw=",
      "1488: sigs.k8s.io/controller-runtime v0.11.2 h1:H5GTxQl0Mc9UjRJhORusqfJCIjBO8UtUxGggCwL1rLA=",
      "1489: sigs.k8s.io/controller-runtime v0.11.2/go.mod h1:P6QCzrEjLaZGqHsfd+os7JQ+WFZhvB8MRFsn4dWF7O4=",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7799bb0920eee9d4392218e0536f3bed25e8d081",
      "candidate_info": {
        "commit_hash": "7799bb0920eee9d4392218e0536f3bed25e8d081",
        "repo": "fluxcd/kustomize-controller",
        "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/7799bb0920eee9d4392218e0536f3bed25e8d081",
        "files": [
          "api/v1beta1/kustomization_types.go",
          "api/v1beta2/kustomization_types.go",
          "controllers/kustomization_controller.go",
          "controllers/kustomization_decryptor_test.go",
          "controllers/kustomization_impersonation_test.go",
          "controllers/kustomization_prune_test.go",
          "controllers/kustomization_wait_test.go",
          "controllers/suite_test.go",
          "go.mod",
          "go.sum",
          "internal/decryptor/decryptor.go",
          "internal/decryptor/decryptor_test.go",
          "internal/generator/generator.go",
          "internal/generator/generator_test.go",
          "internal/generator/varsub.go",
          "main.go"
        ],
        "message": "Refactor: Adopt Flux runtime conditions and status standards\n\nSigned-off-by: Stefan Prodan <stefan.prodan@gmail.com>",
        "before_after_code_files": [
          "api/v1beta1/kustomization_types.go||api/v1beta1/kustomization_types.go",
          "api/v1beta2/kustomization_types.go||api/v1beta2/kustomization_types.go",
          "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
          "controllers/kustomization_decryptor_test.go||controllers/kustomization_decryptor_test.go",
          "controllers/kustomization_impersonation_test.go||controllers/kustomization_impersonation_test.go",
          "controllers/kustomization_prune_test.go||controllers/kustomization_prune_test.go",
          "controllers/kustomization_wait_test.go||controllers/kustomization_wait_test.go",
          "controllers/suite_test.go||controllers/suite_test.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/decryptor/decryptor.go||internal/decryptor/decryptor.go",
          "internal/decryptor/decryptor_test.go||internal/decryptor/decryptor_test.go",
          "internal/generator/generator.go||internal/generator/generator.go",
          "internal/generator/generator_test.go||internal/generator/generator_test.go",
          "internal/generator/varsub.go||internal/generator/varsub.go",
          "main.go||main.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "api/v1beta1/kustomization_types.go||api/v1beta1/kustomization_types.go": [
          "File: api/v1beta1/kustomization_types.go -> api/v1beta1/kustomization_types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"time\"",
          "22:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "26:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Removed Lines]",
          "23:  apimeta \"k8s.io/apimachinery/pkg/api/meta\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:  Snapshot *Snapshot `json:\"snapshot,omitempty\"`",
          "232: }",
          "307: func (in Kustomization) GetTimeout() time.Duration {",
          "308:  duration := in.Spec.Interval.Duration",
          "",
          "[Removed Lines]",
          "236: func KustomizationProgressing(k Kustomization) Kustomization {",
          "237:  newCondition := metav1.Condition{",
          "238:   Type:    meta.ReadyCondition,",
          "239:   Status:  metav1.ConditionUnknown,",
          "240:   Reason:  meta.ProgressingReason,",
          "241:   Message: \"reconciliation in progress\",",
          "242:  }",
          "243:  apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "244:  return k",
          "245: }",
          "248: func SetKustomizationHealthiness(k *Kustomization, status metav1.ConditionStatus, reason, message string) {",
          "249:  switch len(k.Spec.HealthChecks) {",
          "250:  case 0:",
          "251:   apimeta.RemoveStatusCondition(k.GetStatusConditions(), HealthyCondition)",
          "252:  default:",
          "253:   newCondition := metav1.Condition{",
          "254:    Type:    HealthyCondition,",
          "255:    Status:  status,",
          "256:    Reason:  reason,",
          "257:    Message: trimString(message, MaxConditionMessageLength),",
          "258:   }",
          "259:   apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "260:  }",
          "261: }",
          "265: func SetKustomizationReadiness(k *Kustomization, status metav1.ConditionStatus, reason, message string, revision string) {",
          "266:  newCondition := metav1.Condition{",
          "267:   Type:    meta.ReadyCondition,",
          "268:   Status:  status,",
          "269:   Reason:  reason,",
          "270:   Message: trimString(message, MaxConditionMessageLength),",
          "271:  }",
          "272:  apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "274:  k.Status.ObservedGeneration = k.Generation",
          "275:  k.Status.LastAttemptedRevision = revision",
          "276: }",
          "279: func KustomizationNotReady(k Kustomization, revision, reason, message string) Kustomization {",
          "280:  SetKustomizationReadiness(&k, metav1.ConditionFalse, reason, trimString(message, MaxConditionMessageLength), revision)",
          "281:  if revision != \"\" {",
          "282:   k.Status.LastAttemptedRevision = revision",
          "283:  }",
          "284:  return k",
          "285: }",
          "289: func KustomizationNotReadySnapshot(k Kustomization, snapshot *Snapshot, revision, reason, message string) Kustomization {",
          "290:  SetKustomizationReadiness(&k, metav1.ConditionFalse, reason, trimString(message, MaxConditionMessageLength), revision)",
          "291:  SetKustomizationHealthiness(&k, metav1.ConditionFalse, reason, reason)",
          "292:  k.Status.Snapshot = snapshot",
          "293:  k.Status.LastAttemptedRevision = revision",
          "294:  return k",
          "295: }",
          "298: func KustomizationReady(k Kustomization, snapshot *Snapshot, revision, reason, message string) Kustomization {",
          "299:  SetKustomizationReadiness(&k, metav1.ConditionTrue, reason, trimString(message, MaxConditionMessageLength), revision)",
          "300:  SetKustomizationHealthiness(&k, metav1.ConditionTrue, reason, reason)",
          "301:  k.Status.Snapshot = snapshot",
          "302:  k.Status.LastAppliedRevision = revision",
          "303:  return k",
          "304: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/v1beta2/kustomization_types.go||api/v1beta2/kustomization_types.go": [
          "File: api/v1beta2/kustomization_types.go -> api/v1beta2/kustomization_types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/fluxcd/pkg/apis/kustomize\"",
          "23:  \"github.com/fluxcd/pkg/apis/meta\"",
          "24:  apiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"",
          "26:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "27: )",
          "",
          "[Removed Lines]",
          "25:  apimeta \"k8s.io/apimachinery/pkg/api/meta\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:  Inventory *ResourceInventory `json:\"inventory,omitempty\"`",
          "237: }",
          "312: func (in Kustomization) GetTimeout() time.Duration {",
          "313:  duration := in.Spec.Interval.Duration - 30*time.Second",
          "",
          "[Removed Lines]",
          "241: func KustomizationProgressing(k Kustomization, message string) Kustomization {",
          "242:  newCondition := metav1.Condition{",
          "243:   Type:    meta.ReadyCondition,",
          "244:   Status:  metav1.ConditionUnknown,",
          "245:   Reason:  meta.ProgressingReason,",
          "246:   Message: trimString(message, MaxConditionMessageLength),",
          "247:  }",
          "248:  apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "249:  return k",
          "250: }",
          "253: func SetKustomizationHealthiness(k *Kustomization, status metav1.ConditionStatus, reason, message string) {",
          "254:  if !k.Spec.Wait && len(k.Spec.HealthChecks) == 0 {",
          "255:   apimeta.RemoveStatusCondition(k.GetStatusConditions(), HealthyCondition)",
          "256:  } else {",
          "257:   newCondition := metav1.Condition{",
          "258:    Type:    HealthyCondition,",
          "259:    Status:  status,",
          "260:    Reason:  reason,",
          "261:    Message: trimString(message, MaxConditionMessageLength),",
          "262:   }",
          "263:   apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "264:  }",
          "266: }",
          "269: func SetKustomizationReadiness(k *Kustomization, status metav1.ConditionStatus, reason, message string, revision string) {",
          "270:  newCondition := metav1.Condition{",
          "271:   Type:    meta.ReadyCondition,",
          "272:   Status:  status,",
          "273:   Reason:  reason,",
          "274:   Message: trimString(message, MaxConditionMessageLength),",
          "275:  }",
          "276:  apimeta.SetStatusCondition(k.GetStatusConditions(), newCondition)",
          "278:  k.Status.ObservedGeneration = k.Generation",
          "279:  k.Status.LastAttemptedRevision = revision",
          "280: }",
          "283: func KustomizationNotReady(k Kustomization, revision, reason, message string) Kustomization {",
          "284:  SetKustomizationReadiness(&k, metav1.ConditionFalse, reason, trimString(message, MaxConditionMessageLength), revision)",
          "285:  if revision != \"\" {",
          "286:   k.Status.LastAttemptedRevision = revision",
          "287:  }",
          "288:  return k",
          "289: }",
          "292: func KustomizationNotReadyInventory(k Kustomization, inventory *ResourceInventory, revision, reason, message string) Kustomization {",
          "293:  SetKustomizationReadiness(&k, metav1.ConditionFalse, reason, trimString(message, MaxConditionMessageLength), revision)",
          "294:  SetKustomizationHealthiness(&k, metav1.ConditionFalse, reason, reason)",
          "295:  if revision != \"\" {",
          "296:   k.Status.LastAttemptedRevision = revision",
          "297:  }",
          "298:  k.Status.Inventory = inventory",
          "299:  return k",
          "300: }",
          "303: func KustomizationReadyInventory(k Kustomization, inventory *ResourceInventory, revision, reason, message string) Kustomization {",
          "304:  SetKustomizationReadiness(&k, metav1.ConditionTrue, reason, trimString(message, MaxConditionMessageLength), revision)",
          "305:  SetKustomizationHealthiness(&k, metav1.ConditionTrue, reason, reason)",
          "306:  k.Status.Inventory = inventory",
          "307:  k.Status.LastAppliedRevision = revision",
          "308:  return k",
          "309: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "controllers/kustomization_controller.go||controllers/kustomization_controller.go": [
          "File: controllers/kustomization_controller.go -> controllers/kustomization_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  apimeta \"k8s.io/apimachinery/pkg/api/meta\"",
          "32:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "33:  \"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"",
          "35:  \"k8s.io/apimachinery/pkg/types\"",
          "36:  kuberecorder \"k8s.io/client-go/tools/record\"",
          "38:  \"sigs.k8s.io/cli-utils/pkg/kstatus/polling\"",
          "39:  \"sigs.k8s.io/cli-utils/pkg/object\"",
          "40:  ctrl \"sigs.k8s.io/controller-runtime\"",
          "",
          "[Removed Lines]",
          "34:  \"k8s.io/apimachinery/pkg/runtime\"",
          "37:  \"k8s.io/client-go/tools/reference\"",
          "",
          "[Added Lines]",
          "35:  kerrors \"k8s.io/apimachinery/pkg/util/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:  \"sigs.k8s.io/controller-runtime/pkg/handler\"",
          "46:  \"sigs.k8s.io/controller-runtime/pkg/predicate\"",
          "47:  \"sigs.k8s.io/controller-runtime/pkg/ratelimiter\"",
          "49:  \"sigs.k8s.io/controller-runtime/pkg/source\"",
          "51:  apiacl \"github.com/fluxcd/pkg/apis/acl\"",
          "",
          "[Removed Lines]",
          "48:  \"sigs.k8s.io/controller-runtime/pkg/reconcile\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:  \"github.com/fluxcd/pkg/http/fetch\"",
          "54:  \"github.com/fluxcd/pkg/runtime/acl\"",
          "55:  runtimeClient \"github.com/fluxcd/pkg/runtime/client\"",
          "56:  \"github.com/fluxcd/pkg/runtime/events\"",
          "58:  \"github.com/fluxcd/pkg/runtime/predicates\"",
          "59:  \"github.com/fluxcd/pkg/ssa\"",
          "60:  \"github.com/fluxcd/pkg/tar\"",
          "",
          "[Removed Lines]",
          "57:  \"github.com/fluxcd/pkg/runtime/metrics\"",
          "",
          "[Added Lines]",
          "54:  \"github.com/fluxcd/pkg/runtime/conditions\"",
          "55:  helper \"github.com/fluxcd/pkg/runtime/controller\"",
          "57:  \"github.com/fluxcd/pkg/runtime/patch\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78: type KustomizationReconciler struct {",
          "79:  client.Client",
          "80:  artifactFetcher       *fetch.ArchiveFetcher",
          "81:  requeueDependency     time.Duration",
          "85:  StatusPoller          *polling.StatusPoller",
          "86:  PollingOpts           polling.Options",
          "87:  ControllerName        string",
          "",
          "[Removed Lines]",
          "82:  Scheme                *runtime.Scheme",
          "83:  EventRecorder         kuberecorder.EventRecorder",
          "84:  MetricsRecorder       *metrics.Recorder",
          "",
          "[Added Lines]",
          "80:  kuberecorder.EventRecorder",
          "81:  helper.Metrics",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:   Complete(r)",
          "157: }",
          "160:  log := ctrl.LoggerFrom(ctx)",
          "161:  reconcileStart := time.Now()",
          "165:   return ctrl.Result{}, client.IgnoreNotFound(err)",
          "166:  }",
          "178:   }",
          "179:  }",
          "184:  }",
          "188:   log.Info(\"Reconciliation is suspended for this object\")",
          "189:   return ctrl.Result{}, nil",
          "190:  }",
          "194:  if err != nil {",
          "195:   if apierrors.IsNotFound(err) {",
          "202:    log.Info(msg)",
          "205:   }",
          "207:   if acl.IsAccessDenied(err) {",
          "216:   }",
          "219:   return ctrl.Result{Requeue: true}, err",
          "221:  }",
          "224:   msg := \"Source is not ready, artifact not found\"",
          "231:   log.Info(msg)",
          "247:    msg := fmt.Sprintf(\"Dependencies do not meet ready condition, retrying in %s\", r.requeueDependency.String())",
          "248:    log.Info(msg)",
          "251:    return ctrl.Result{RequeueAfter: r.requeueDependency}, nil",
          "252:   }",
          "253:   log.Info(\"All dependencies are ready, proceeding with reconciliation\")",
          "254:  }",
          "268:   return ctrl.Result{Requeue: true}, err",
          "269:  }",
          "276:  if reconcileErr == fetch.FileNotFoundError {",
          "277:   msg := fmt.Sprintf(\"Source is not ready, artifact not found, retrying in %s\", r.requeueDependency.String())",
          "278:   log.Info(msg)",
          "283:   return ctrl.Result{RequeueAfter: r.requeueDependency}, nil",
          "284:  }",
          "292:  if reconcileErr != nil {",
          "293:   log.Error(reconcileErr, fmt.Sprintf(\"Reconciliation failed after %s, next try in %s\",",
          "294:    time.Since(reconcileStart).String(),",
          "296:    \"revision\",",
          "299:    reconcileErr.Error(), nil)",
          "301:  }",
          "311: }",
          "313: func (r *KustomizationReconciler) reconcile(",
          "314:  ctx context.Context,",
          "320:  }",
          "325:  tmpDir, err := MkdirTempAbs(\"\", \"kustomization-\")",
          "326:  if err != nil {",
          "327:   err = fmt.Errorf(\"tmp dir error: %w\", err)",
          "334:  }",
          "335:  defer os.RemoveAll(tmpDir)",
          "339:  if err != nil {",
          "346:  }",
          "350:  if err != nil {",
          "357:  }",
          "358:  if _, err := os.Stat(dirPath); err != nil {",
          "359:   err = fmt.Errorf(\"kustomization path not found: %w\", err)",
          "366:  }",
          "369:  impersonation := runtimeClient.NewImpersonator(",
          "370:   r.Client,",
          "371:   r.StatusPoller,",
          "372:   r.PollingOpts,",
          "374:   r.KubeConfigOpts,",
          "375:   r.DefaultServiceAccount,",
          "378:  )",
          "379:  kubeClient, statusPoller, err := impersonation.GetClient(ctx)",
          "380:  if err != nil {",
          "387:  }",
          "391:  if err != nil {",
          "398:  }",
          "402:  if err != nil {",
          "409:  }",
          "412:  objects, err := ssa.ReadObjects(bytes.NewReader(resources))",
          "413:  if err != nil {",
          "420:  }",
          "426:  resourceManager := ssa.NewResourceManager(kubeClient, statusPoller, ssa.Owner{",
          "427:   Field: r.ControllerName,",
          "428:   Group: kustomizev1.GroupVersion.Group,",
          "429:  })",
          "434:  if err != nil {",
          "441:  }",
          "444:  newInventory := inventory.New()",
          "445:  err = inventory.AddChangeSet(newInventory, changeSet)",
          "446:  if err != nil {",
          "489:  }",
          "500:  }",
          "511:  }",
          "516:   revision,",
          "517:   kustomizev1.ReconciliationSucceededReason,",
          "520: }",
          "524:   if d.Namespace == \"\" {",
          "526:   }",
          "527:   dName := types.NamespacedName{",
          "528:    Namespace: d.Namespace,",
          "529:    Name:      d.Name,",
          "530:   }",
          "531:   var k kustomizev1.Kustomization",
          "533:   if err != nil {",
          "534:    return fmt.Errorf(\"unable to get '%s' dependency: %w\", dName, err)",
          "535:   }",
          "",
          "[Removed Lines]",
          "159: func (r *KustomizationReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {",
          "163:  var kustomization kustomizev1.Kustomization",
          "164:  if err := r.Get(ctx, req.NamespacedName, &kustomization); err != nil {",
          "169:  defer r.recordSuspension(ctx, kustomization)",
          "172:  if !controllerutil.ContainsFinalizer(&kustomization, kustomizev1.KustomizationFinalizer) {",
          "173:   patch := client.MergeFrom(kustomization.DeepCopy())",
          "174:   controllerutil.AddFinalizer(&kustomization, kustomizev1.KustomizationFinalizer)",
          "175:   if err := r.Patch(ctx, &kustomization, patch, client.FieldOwner(r.statusManager)); err != nil {",
          "176:    log.Error(err, \"unable to register finalizer\")",
          "177:    return ctrl.Result{}, err",
          "182:  if !kustomization.ObjectMeta.DeletionTimestamp.IsZero() {",
          "183:   return r.finalize(ctx, kustomization)",
          "187:  if kustomization.Spec.Suspend {",
          "193:  source, err := r.getSource(ctx, kustomization)",
          "196:    msg := fmt.Sprintf(\"Source '%s' not found\", kustomization.Spec.SourceRef.String())",
          "197:    kustomization = kustomizev1.KustomizationNotReady(kustomization, \"\", kustomizev1.ArtifactFailedReason, msg)",
          "198:    if err := r.patchStatus(ctx, req, kustomization.Status); err != nil {",
          "199:     return ctrl.Result{Requeue: true}, err",
          "200:    }",
          "201:    r.recordReadiness(ctx, kustomization)",
          "204:    return ctrl.Result{RequeueAfter: kustomization.GetRetryInterval()}, nil",
          "208:    kustomization = kustomizev1.KustomizationNotReady(kustomization, \"\", apiacl.AccessDeniedReason, err.Error())",
          "209:    if err := r.patchStatus(ctx, req, kustomization.Status); err != nil {",
          "210:     return ctrl.Result{Requeue: true}, err",
          "211:    }",
          "212:    log.Error(err, \"access denied to cross-namespace source\")",
          "213:    r.recordReadiness(ctx, kustomization)",
          "214:    r.event(ctx, kustomization, \"unknown\", events.EventSeverityError, err.Error(), nil)",
          "215:    return ctrl.Result{RequeueAfter: kustomization.GetRetryInterval()}, nil",
          "223:  if source.GetArtifact() == nil {",
          "225:   kustomization = kustomizev1.KustomizationNotReady(kustomization, \"\", kustomizev1.ArtifactFailedReason, msg)",
          "226:   if err := r.patchStatus(ctx, req, kustomization.Status); err != nil {",
          "227:    log.Error(err, \"unable to update status for artifact not found\")",
          "228:    return ctrl.Result{Requeue: true}, err",
          "229:   }",
          "230:   r.recordReadiness(ctx, kustomization)",
          "233:   return ctrl.Result{RequeueAfter: kustomization.GetRetryInterval()}, nil",
          "234:  }",
          "237:  if len(kustomization.Spec.DependsOn) > 0 {",
          "238:   if err := r.checkDependencies(source, kustomization); err != nil {",
          "239:    kustomization = kustomizev1.KustomizationNotReady(",
          "240:     kustomization, source.GetArtifact().Revision, kustomizev1.DependencyNotReadyReason, err.Error())",
          "241:    if err := r.patchStatus(ctx, req, kustomization.Status); err != nil {",
          "242:     log.Error(err, \"unable to update status for dependency not ready\")",
          "243:     return ctrl.Result{Requeue: true}, err",
          "244:    }",
          "249:    r.event(ctx, kustomization, source.GetArtifact().Revision, events.EventSeverityInfo, msg, nil)",
          "250:    r.recordReadiness(ctx, kustomization)",
          "257:  if r.MetricsRecorder != nil {",
          "258:   objRef, err := reference.GetReference(r.Scheme, &kustomization)",
          "259:   if err != nil {",
          "260:    return ctrl.Result{}, err",
          "261:   }",
          "262:   defer r.MetricsRecorder.RecordDuration(*objRef, reconcileStart)",
          "263:  }",
          "266:  kustomization = kustomizev1.KustomizationProgressing(kustomization, \"reconciliation in progress\")",
          "267:  if err := r.patchStatus(ctx, req, kustomization.Status); err != nil {",
          "270:  r.recordReadiness(ctx, kustomization)",
          "273:  reconciledKustomization, reconcileErr := r.reconcile(ctx, *kustomization.DeepCopy(), source)",
          "279:   if err := r.patchStatus(ctx, req, kustomizev1.KustomizationProgressing(kustomization, msg).Status); err != nil {",
          "280:    log.Error(err, \"unable to update status for artifact not found\")",
          "281:    return ctrl.Result{Requeue: true}, err",
          "282:   }",
          "286:  if err := r.patchStatus(ctx, req, reconciledKustomization.Status); err != nil {",
          "287:   return ctrl.Result{Requeue: true}, err",
          "288:  }",
          "289:  r.recordReadiness(ctx, reconciledKustomization)",
          "295:    kustomization.GetRetryInterval().String()),",
          "297:    source.GetArtifact().Revision)",
          "298:   r.event(ctx, reconciledKustomization, source.GetArtifact().Revision, events.EventSeverityError,",
          "300:   return ctrl.Result{RequeueAfter: kustomization.GetRetryInterval()}, nil",
          "304:  msg := fmt.Sprintf(\"Reconciliation finished in %s, next run in %s\",",
          "305:   time.Since(reconcileStart).String(),",
          "306:   kustomization.Spec.Interval.Duration.String())",
          "307:  log.Info(msg, \"revision\", source.GetArtifact().Revision)",
          "308:  r.event(ctx, reconciledKustomization, source.GetArtifact().Revision, events.EventSeverityInfo,",
          "309:   msg, map[string]string{kustomizev1.GroupVersion.Group + \"/commit_status\": \"update\"})",
          "310:  return ctrl.Result{RequeueAfter: kustomization.Spec.Interval.Duration}, nil",
          "315:  kustomization kustomizev1.Kustomization,",
          "316:  source sourcev1.Source) (kustomizev1.Kustomization, error) {",
          "318:  if v, ok := meta.ReconcileAnnotationValue(kustomization.GetAnnotations()); ok {",
          "319:   kustomization.Status.SetLastHandledReconcileRequest(v)",
          "322:  revision := source.GetArtifact().Revision",
          "328:   return kustomizev1.KustomizationNotReady(",
          "329:    kustomization,",
          "330:    revision,",
          "331:    sourcev1.DirCreationFailedReason,",
          "332:    err.Error(),",
          "333:   ), err",
          "338:  err = r.artifactFetcher.Fetch(source.GetArtifact().URL, source.GetArtifact().Checksum, tmpDir)",
          "340:   return kustomizev1.KustomizationNotReady(",
          "341:    kustomization,",
          "342:    revision,",
          "343:    kustomizev1.ArtifactFailedReason,",
          "344:    err.Error(),",
          "345:   ), err",
          "349:  dirPath, err := securejoin.SecureJoin(tmpDir, kustomization.Spec.Path)",
          "351:   return kustomizev1.KustomizationNotReady(",
          "352:    kustomization,",
          "353:    revision,",
          "354:    kustomizev1.ArtifactFailedReason,",
          "355:    err.Error(),",
          "356:   ), err",
          "360:   return kustomizev1.KustomizationNotReady(",
          "361:    kustomization,",
          "362:    revision,",
          "363:    kustomizev1.ArtifactFailedReason,",
          "364:    err.Error(),",
          "365:   ), err",
          "373:   kustomization.Spec.KubeConfig,",
          "376:   kustomization.Spec.ServiceAccountName,",
          "377:   kustomization.GetNamespace(),",
          "381:   return kustomizev1.KustomizationNotReady(",
          "382:    kustomization,",
          "383:    revision,",
          "384:    kustomizev1.ReconciliationFailedReason,",
          "385:    err.Error(),",
          "386:   ), fmt.Errorf(\"failed to build kube client: %w\", err)",
          "390:  err = r.generate(kustomization, tmpDir, dirPath)",
          "392:   return kustomizev1.KustomizationNotReady(",
          "393:    kustomization,",
          "394:    revision,",
          "395:    kustomizev1.BuildFailedReason,",
          "396:    err.Error(),",
          "397:   ), err",
          "401:  resources, err := r.build(ctx, tmpDir, kustomization, dirPath)",
          "403:   return kustomizev1.KustomizationNotReady(",
          "404:    kustomization,",
          "405:    revision,",
          "406:    kustomizev1.BuildFailedReason,",
          "407:    err.Error(),",
          "408:   ), err",
          "414:   return kustomizev1.KustomizationNotReady(",
          "415:    kustomization,",
          "416:    revision,",
          "417:    kustomizev1.BuildFailedReason,",
          "418:    err.Error(),",
          "419:   ), err",
          "423:  oldStatus := kustomization.Status.DeepCopy()",
          "430:  resourceManager.SetOwnerLabels(objects, kustomization.GetName(), kustomization.GetNamespace())",
          "433:  drifted, changeSet, err := r.apply(ctx, resourceManager, kustomization, revision, objects)",
          "435:   return kustomizev1.KustomizationNotReady(",
          "436:    kustomization,",
          "437:    revision,",
          "438:    kustomizev1.ReconciliationFailedReason,",
          "439:    err.Error(),",
          "440:   ), err",
          "447:   return kustomizev1.KustomizationNotReady(",
          "448:    kustomization,",
          "449:    revision,",
          "450:    kustomizev1.ReconciliationFailedReason,",
          "451:    err.Error(),",
          "452:   ), err",
          "453:  }",
          "456:  var staleObjects []*unstructured.Unstructured",
          "457:  if oldStatus.Inventory != nil {",
          "458:   diffObjects, err := inventory.Diff(oldStatus.Inventory, newInventory)",
          "459:   if err != nil {",
          "460:    return kustomizev1.KustomizationNotReady(",
          "461:     kustomization,",
          "462:     revision,",
          "463:     kustomizev1.ReconciliationFailedReason,",
          "464:     err.Error(),",
          "465:    ), err",
          "466:   }",
          "471:   newObjects, _ := inventory.List(newInventory)",
          "472:   for _, obj := range diffObjects {",
          "473:    preserve := false",
          "474:    if obj.GetNamespace() != \"\" {",
          "475:     for _, newObj := range newObjects {",
          "476:      if newObj.GetNamespace() == \"\" &&",
          "477:       obj.GetKind() == newObj.GetKind() &&",
          "478:       obj.GetAPIVersion() == newObj.GetAPIVersion() &&",
          "479:       obj.GetName() == newObj.GetName() {",
          "480:       preserve = true",
          "481:       break",
          "482:      }",
          "483:     }",
          "484:    }",
          "485:    if !preserve {",
          "486:     staleObjects = append(staleObjects, obj)",
          "487:    }",
          "488:   }",
          "492:  if _, err := r.prune(ctx, resourceManager, kustomization, revision, staleObjects); err != nil {",
          "493:   return kustomizev1.KustomizationNotReadyInventory(",
          "494:    kustomization,",
          "495:    newInventory,",
          "496:    revision,",
          "497:    kustomizev1.PruneFailedReason,",
          "498:    err.Error(),",
          "499:   ), err",
          "503:  if err := r.checkHealth(ctx, resourceManager, kustomization, revision, drifted, changeSet.ToObjMetadataSet()); err != nil {",
          "504:   return kustomizev1.KustomizationNotReadyInventory(",
          "505:    kustomization,",
          "506:    newInventory,",
          "507:    revision,",
          "508:    kustomizev1.HealthCheckFailedReason,",
          "509:    err.Error(),",
          "510:   ), err",
          "513:  return kustomizev1.KustomizationReadyInventory(",
          "514:   kustomization,",
          "515:   newInventory,",
          "518:   fmt.Sprintf(\"Applied revision: %s\", revision),",
          "519:  ), nil",
          "522: func (r *KustomizationReconciler) checkDependencies(source sourcev1.Source, kustomization kustomizev1.Kustomization) error {",
          "523:  for _, d := range kustomization.Spec.DependsOn {",
          "525:    d.Namespace = kustomization.GetNamespace()",
          "532:   err := r.Get(context.Background(), dName, &k)",
          "",
          "[Added Lines]",
          "159: func (r *KustomizationReconciler) Reconcile(ctx context.Context, req ctrl.Request) (result ctrl.Result, retErr error) {",
          "163:  obj := &kustomizev1.Kustomization{}",
          "164:  if err := r.Get(ctx, req.NamespacedName, obj); err != nil {",
          "169:  patcher, err := patch.NewHelper(obj, r.Client)",
          "170:  if err != nil {",
          "171:   return ctrl.Result{}, err",
          "172:  }",
          "175:  defer func() {",
          "177:   if v, ok := meta.ReconcileAnnotationValue(obj.GetAnnotations()); ok {",
          "178:    obj.Status.LastHandledReconcileAt = v",
          "179:   }",
          "183:   if conditions.IsTrue(obj, meta.ReadyCondition) {",
          "184:    conditions.Delete(obj, meta.ReconcilingCondition)",
          "185:    obj.Status.ObservedGeneration = obj.Generation",
          "189:   retErr = r.patch(ctx, obj, patcher)",
          "192:   r.Metrics.RecordReadiness(ctx, obj)",
          "193:   r.Metrics.RecordDuration(ctx, obj, reconcileStart)",
          "194:   r.Metrics.RecordSuspend(ctx, obj, obj.Spec.Suspend)",
          "197:   if conditions.IsReady(obj) {",
          "198:    msg := fmt.Sprintf(\"Reconciliation finished in %s, next run in %s\",",
          "199:     time.Since(reconcileStart).String(),",
          "200:     obj.Spec.Interval.Duration.String())",
          "201:    log.Info(msg, \"revision\", obj.Status.LastAttemptedRevision)",
          "202:    r.event(obj, obj.Status.LastAppliedRevision, events.EventSeverityInfo,",
          "203:     msg, map[string]string{kustomizev1.GroupVersion.Group + \"/commit_status\": \"update\"})",
          "204:   }",
          "205:  }()",
          "209:  if !controllerutil.ContainsFinalizer(obj, kustomizev1.KustomizationFinalizer) {",
          "210:   controllerutil.AddFinalizer(obj, kustomizev1.KustomizationFinalizer)",
          "211:   return ctrl.Result{Requeue: true}, nil",
          "215:  if !obj.ObjectMeta.DeletionTimestamp.IsZero() {",
          "216:   return r.finalize(ctx, obj)",
          "220:  if obj.Spec.Suspend {",
          "226:  if obj.Generation != obj.Status.ObservedGeneration {",
          "227:   conditions.MarkReconciling(obj, \"NewGeneration\", \"Reconciling new object generation (%d)\", obj.Generation)",
          "228:  }",
          "231:  artifactSource, err := r.getSource(ctx, obj)",
          "233:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, err.Error())",
          "236:    msg := fmt.Sprintf(\"Source '%s' not found\", obj.Spec.SourceRef.String())",
          "238:    return ctrl.Result{RequeueAfter: obj.GetRetryInterval()}, nil",
          "242:    conditions.MarkFalse(obj, meta.ReadyCondition, apiacl.AccessDeniedReason, err.Error())",
          "243:    log.Error(err, \"Access denied to cross-namespace source\")",
          "244:    r.event(obj, \"unknown\", events.EventSeverityError, err.Error(), nil)",
          "245:    return ctrl.Result{RequeueAfter: obj.GetRetryInterval()}, nil",
          "253:  if artifactSource.GetArtifact() == nil {",
          "255:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, msg)",
          "257:   return ctrl.Result{RequeueAfter: obj.GetRetryInterval()}, nil",
          "258:  }",
          "261:  if len(obj.Spec.DependsOn) > 0 {",
          "262:   if err := r.checkDependencies(ctx, obj, artifactSource); err != nil {",
          "263:    conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.DependencyNotReadyReason, err.Error())",
          "266:    r.event(obj, artifactSource.GetArtifact().Revision, events.EventSeverityInfo, msg, nil)",
          "273:  progressingMsg := fmt.Sprintf(\"Reconciling revision %s with a timeout of %s\",",
          "274:   artifactSource.GetArtifact().Revision, obj.GetTimeout().String())",
          "275:  conditions.MarkReconciling(obj, meta.ProgressingReason, progressingMsg)",
          "276:  if err := r.patch(ctx, obj, patcher); err != nil {",
          "281:  reconcileErr := r.reconcile(ctx, obj, artifactSource, patcher)",
          "286:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, msg)",
          "295:    obj.GetRetryInterval().String()),",
          "297:    artifactSource.GetArtifact().Revision)",
          "298:   r.event(obj, artifactSource.GetArtifact().Revision, events.EventSeverityError,",
          "300:   return ctrl.Result{RequeueAfter: obj.GetRetryInterval()}, nil",
          "304:  return ctrl.Result{RequeueAfter: obj.Spec.Interval.Duration}, nil",
          "309:  obj *kustomizev1.Kustomization,",
          "310:  src sourcev1.Source,",
          "311:  patcher *patch.Helper) error {",
          "314:  oldInventory := inventory.New()",
          "315:  if obj.Status.Inventory != nil {",
          "316:   obj.Status.Inventory.DeepCopyInto(oldInventory)",
          "319:  revision := src.GetArtifact().Revision",
          "320:  isNewRevision := obj.Status.LastAppliedRevision != revision",
          "323:  obj.Status.LastAttemptedRevision = revision",
          "329:   conditions.MarkFalse(obj, meta.ReadyCondition, sourcev1.DirCreationFailedReason, err.Error())",
          "330:   return err",
          "336:  err = r.artifactFetcher.Fetch(src.GetArtifact().URL, src.GetArtifact().Checksum, tmpDir)",
          "338:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, err.Error())",
          "339:   return err",
          "343:  dirPath, err := securejoin.SecureJoin(tmpDir, obj.Spec.Path)",
          "345:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, err.Error())",
          "346:   return err",
          "350:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ArtifactFailedReason, err.Error())",
          "351:   return err",
          "359:   obj.Spec.KubeConfig,",
          "362:   obj.Spec.ServiceAccountName,",
          "363:   obj.GetNamespace(),",
          "369:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ReconciliationFailedReason, err.Error())",
          "370:   return fmt.Errorf(\"failed to build kube client: %w\", err)",
          "374:  err = r.generate(obj, tmpDir, dirPath)",
          "376:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.BuildFailedReason, err.Error())",
          "377:   return err",
          "381:  resources, err := r.build(ctx, obj, tmpDir, dirPath)",
          "383:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.BuildFailedReason, err.Error())",
          "384:   return err",
          "390:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.BuildFailedReason, err.Error())",
          "391:   return err",
          "399:  resourceManager.SetOwnerLabels(objects, obj.GetName(), obj.GetNamespace())",
          "402:  drifted, changeSet, err := r.apply(ctx, resourceManager, obj, revision, objects)",
          "404:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ReconciliationFailedReason, err.Error())",
          "405:   return err",
          "412:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ReconciliationFailedReason, err.Error())",
          "413:   return err",
          "417:  obj.Status.Inventory = newInventory",
          "420:  staleObjects, err := inventory.Diff(oldInventory, newInventory)",
          "421:  if err != nil {",
          "422:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.ReconciliationFailedReason, err.Error())",
          "423:   return err",
          "427:  if _, err := r.prune(ctx, resourceManager, obj, revision, staleObjects); err != nil {",
          "428:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.PruneFailedReason, err.Error())",
          "429:   return err",
          "433:  if err := r.checkHealth(ctx,",
          "434:   resourceManager,",
          "435:   patcher,",
          "436:   obj,",
          "438:   isNewRevision,",
          "439:   drifted,",
          "440:   changeSet.ToObjMetadataSet()); err != nil {",
          "441:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.HealthCheckFailedReason, err.Error())",
          "442:   return err",
          "443:  }",
          "446:  obj.Status.LastAppliedRevision = revision",
          "449:  conditions.MarkTrue(obj,",
          "450:   meta.ReadyCondition,",
          "452:   fmt.Sprintf(\"Applied revision: %s\", revision))",
          "454:  return nil",
          "457: func (r *KustomizationReconciler) checkDependencies(ctx context.Context,",
          "458:  obj *kustomizev1.Kustomization,",
          "459:  source sourcev1.Source) error {",
          "460:  for _, d := range obj.Spec.DependsOn {",
          "462:    d.Namespace = obj.GetNamespace()",
          "469:   err := r.Get(ctx, dName, &k)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "542:    return fmt.Errorf(\"dependency '%s' is not ready\", dName)",
          "543:   }",
          "546:    return fmt.Errorf(\"dependency '%s' is not updated yet\", dName)",
          "547:   }",
          "548:  }",
          "",
          "[Removed Lines]",
          "545:   if k.Spec.SourceRef.Name == kustomization.Spec.SourceRef.Name && k.Spec.SourceRef.Namespace == kustomization.Spec.SourceRef.Namespace && k.Spec.SourceRef.Kind == kustomization.Spec.SourceRef.Kind && source.GetArtifact().Revision != k.Status.LastAppliedRevision {",
          "",
          "[Added Lines]",
          "482:   if k.Spec.SourceRef.Name == obj.Spec.SourceRef.Name &&",
          "483:    k.Spec.SourceRef.Namespace == obj.Spec.SourceRef.Namespace &&",
          "484:    k.Spec.SourceRef.Kind == obj.Spec.SourceRef.Kind &&",
          "485:    source.GetArtifact().Revision != k.Status.LastAppliedRevision {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:  return nil",
          "551: }",
          "558:  }",
          "559:  namespacedName := types.NamespacedName{",
          "560:   Namespace: sourceNamespace,",
          "562:  }",
          "566:    fmt.Sprintf(\"can't access '%s/%s', cross-namespace references have been blocked\",",
          "568:  }",
          "571:  case sourcev1.OCIRepositoryKind:",
          "572:   var repository sourcev1.OCIRepository",
          "573:   err := r.Client.Get(ctx, namespacedName, &repository)",
          "574:   if err != nil {",
          "575:    if apierrors.IsNotFound(err) {",
          "577:    }",
          "579:   }",
          "581:  case sourcev1.GitRepositoryKind:",
          "582:   var repository sourcev1.GitRepository",
          "583:   err := r.Client.Get(ctx, namespacedName, &repository)",
          "584:   if err != nil {",
          "585:    if apierrors.IsNotFound(err) {",
          "587:    }",
          "589:   }",
          "591:  case sourcev1.BucketKind:",
          "592:   var bucket sourcev1.Bucket",
          "593:   err := r.Client.Get(ctx, namespacedName, &bucket)",
          "594:   if err != nil {",
          "595:    if apierrors.IsNotFound(err) {",
          "597:    }",
          "599:   }",
          "601:  default:",
          "604:  }",
          "606: }",
          "610:  return err",
          "611: }",
          "615:  if err != nil {",
          "616:   return nil, err",
          "617:  }",
          "",
          "[Removed Lines]",
          "553: func (r *KustomizationReconciler) getSource(ctx context.Context, kustomization kustomizev1.Kustomization) (sourcev1.Source, error) {",
          "554:  var source sourcev1.Source",
          "555:  sourceNamespace := kustomization.GetNamespace()",
          "556:  if kustomization.Spec.SourceRef.Namespace != \"\" {",
          "557:   sourceNamespace = kustomization.Spec.SourceRef.Namespace",
          "561:   Name:      kustomization.Spec.SourceRef.Name,",
          "564:  if r.NoCrossNamespaceRefs && sourceNamespace != kustomization.GetNamespace() {",
          "565:   return source, acl.AccessDeniedError(",
          "567:     kustomization.Spec.SourceRef.Kind, namespacedName))",
          "570:  switch kustomization.Spec.SourceRef.Kind {",
          "576:     return source, err",
          "578:    return source, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "580:   source = &repository",
          "586:     return source, err",
          "588:    return source, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "590:   source = &repository",
          "596:     return source, err",
          "598:    return source, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "600:   source = &bucket",
          "602:   return source, fmt.Errorf(\"source `%s` kind '%s' not supported\",",
          "603:    kustomization.Spec.SourceRef.Name, kustomization.Spec.SourceRef.Kind)",
          "605:  return source, nil",
          "608: func (r *KustomizationReconciler) generate(kustomization kustomizev1.Kustomization, workDir string, dirPath string) error {",
          "609:  _, err := generator.NewGenerator(workDir, kustomization).WriteFile(dirPath)",
          "613: func (r *KustomizationReconciler) build(ctx context.Context, workDir string, kustomization kustomizev1.Kustomization, dirPath string) ([]byte, error) {",
          "614:  dec, cleanup, err := decryptor.NewTempDecryptor(workDir, r.Client, kustomization)",
          "",
          "[Added Lines]",
          "493: func (r *KustomizationReconciler) getSource(ctx context.Context,",
          "494:  obj *kustomizev1.Kustomization) (sourcev1.Source, error) {",
          "495:  var src sourcev1.Source",
          "496:  sourceNamespace := obj.GetNamespace()",
          "497:  if obj.Spec.SourceRef.Namespace != \"\" {",
          "498:   sourceNamespace = obj.Spec.SourceRef.Namespace",
          "502:   Name:      obj.Spec.SourceRef.Name,",
          "505:  if r.NoCrossNamespaceRefs && sourceNamespace != obj.GetNamespace() {",
          "506:   return src, acl.AccessDeniedError(",
          "508:     obj.Spec.SourceRef.Kind, namespacedName))",
          "511:  switch obj.Spec.SourceRef.Kind {",
          "517:     return src, err",
          "519:    return src, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "521:   src = &repository",
          "527:     return src, err",
          "529:    return src, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "531:   src = &repository",
          "537:     return src, err",
          "539:    return src, fmt.Errorf(\"unable to get source '%s': %w\", namespacedName, err)",
          "541:   src = &bucket",
          "543:   return src, fmt.Errorf(\"source `%s` kind '%s' not supported\",",
          "544:    obj.Spec.SourceRef.Name, obj.Spec.SourceRef.Kind)",
          "546:  return src, nil",
          "549: func (r *KustomizationReconciler) generate(obj *kustomizev1.Kustomization,",
          "550:  workDir string, dirPath string) error {",
          "551:  _, err := generator.NewGenerator(workDir, obj).WriteFile(dirPath)",
          "555: func (r *KustomizationReconciler) build(ctx context.Context,",
          "556:  obj *kustomizev1.Kustomization,",
          "557:  workDir, dirPath string) ([]byte, error) {",
          "558:  dec, cleanup, err := decryptor.NewTempDecryptor(workDir, r.Client, obj)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "639:   }",
          "643:    outRes, err := dec.DecryptResource(res)",
          "644:    if err != nil {",
          "645:     return nil, fmt.Errorf(\"decryption failed for '%s': %w\", res.GetName(), err)",
          "",
          "[Removed Lines]",
          "642:   if kustomization.Spec.Decryption != nil {",
          "",
          "[Added Lines]",
          "586:   if obj.Spec.Decryption != nil {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "654:   }",
          "659:    if err != nil {",
          "660:     return nil, fmt.Errorf(\"var substitution failed for '%s': %w\", res.GetName(), err)",
          "661:    }",
          "",
          "[Removed Lines]",
          "657:   if kustomization.Spec.PostBuild != nil {",
          "658:    outRes, err := generator.SubstituteVariables(ctx, r.Client, kustomization, res)",
          "",
          "[Added Lines]",
          "601:   if obj.Spec.PostBuild != nil {",
          "602:    outRes, err := generator.SubstituteVariables(ctx, r.Client, obj, res)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "677:  return resources, nil",
          "678: }",
          "681:  log := ctrl.LoggerFrom(ctx)",
          "683:  if err := ssa.SetNativeKindsDefaults(objects); err != nil {",
          "",
          "[Removed Lines]",
          "680: func (r *KustomizationReconciler) apply(ctx context.Context, manager *ssa.ResourceManager, kustomization kustomizev1.Kustomization, revision string, objects []*unstructured.Unstructured) (bool, *ssa.ChangeSet, error) {",
          "",
          "[Added Lines]",
          "624: func (r *KustomizationReconciler) apply(ctx context.Context,",
          "625:  manager *ssa.ResourceManager,",
          "626:  obj *kustomizev1.Kustomization,",
          "627:  revision string,",
          "628:  objects []*unstructured.Unstructured) (bool, *ssa.ChangeSet, error) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "685:  }",
          "687:  applyOpts := ssa.DefaultApplyOptions()",
          "689:  applyOpts.Exclusions = map[string]string{",
          "690:   fmt.Sprintf(\"%s/reconcile\", kustomizev1.GroupVersion.Group): kustomizev1.DisabledValue,",
          "691:  }",
          "",
          "[Removed Lines]",
          "688:  applyOpts.Force = kustomization.Spec.Force",
          "",
          "[Added Lines]",
          "636:  applyOpts.Force = obj.Spec.Force",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "780:    if err := manager.WaitForSet(changeSet.ToObjMetadataSet(), ssa.WaitOptions{",
          "781:     Interval: 2 * time.Second,",
          "783:    }); err != nil {",
          "784:     return false, nil, err",
          "785:    }",
          "",
          "[Removed Lines]",
          "782:     Timeout:  kustomization.GetTimeout(),",
          "",
          "[Added Lines]",
          "730:     Timeout:  obj.GetTimeout(),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "805:    if err := manager.WaitForSet(changeSet.ToObjMetadataSet(), ssa.WaitOptions{",
          "806:     Interval: 2 * time.Second,",
          "808:    }); err != nil {",
          "809:     return false, nil, err",
          "810:    }",
          "",
          "[Removed Lines]",
          "807:     Timeout:  kustomization.GetTimeout(),",
          "",
          "[Added Lines]",
          "755:     Timeout:  obj.GetTimeout(),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "821:   resultSet.Append(changeSet.Entries)",
          "823:   if changeSet != nil && len(changeSet.Entries) > 0 {",
          "825:    for _, change := range changeSet.Entries {",
          "826:     if change.Action != string(ssa.UnchangedAction) {",
          "827:      changeSetLog.WriteString(change.String() + \"\\n\")",
          "",
          "[Removed Lines]",
          "824:    log.Info(\"server-side apply completed\", \"output\", changeSet.ToMap())",
          "",
          "[Added Lines]",
          "772:    log.Info(\"server-side apply completed\", \"output\", changeSet.ToMap(), \"revision\", revision)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "834:  applyLog := strings.TrimSuffix(changeSetLog.String(), \"\\n\")",
          "835:  if applyLog != \"\" {",
          "837:  }",
          "839:  return applyLog != \"\", resultSet, nil",
          "840: }",
          "844:   return nil",
          "845:  }",
          "847:  checkStart := time.Now()",
          "848:  var err error",
          "851:   if err != nil {",
          "852:    return err",
          "853:   }",
          "854:  }",
          "856:  if len(objects) == 0 {",
          "857:   return nil",
          "858:  }",
          "861:  var toCheck []object.ObjMetadata",
          "866:    continue",
          "867:   }",
          "869:  }",
          "879:   return fmt.Errorf(\"unable to update the healthy status to progressing, error: %w\", err)",
          "880:  }",
          "883:  if err := manager.WaitForSet(toCheck, ssa.WaitOptions{",
          "884:   Interval: 5 * time.Second,",
          "886:  }); err != nil {",
          "888:  }",
          "894:  }",
          "896:  return nil",
          "897: }",
          "901:   return false, nil",
          "902:  }",
          "",
          "[Removed Lines]",
          "836:   r.event(ctx, kustomization, revision, events.EventSeverityInfo, applyLog, nil)",
          "842: func (r *KustomizationReconciler) checkHealth(ctx context.Context, manager *ssa.ResourceManager, kustomization kustomizev1.Kustomization, revision string, drifted bool, objects object.ObjMetadataSet) error {",
          "843:  if len(kustomization.Spec.HealthChecks) == 0 && !kustomization.Spec.Wait {",
          "849:  if !kustomization.Spec.Wait {",
          "850:   objects, err = inventory.ReferenceToObjMetadataSet(kustomization.Spec.HealthChecks)",
          "862:  for _, object := range objects {",
          "863:   if object.GroupKind.Kind == kustomizev1.KustomizationKind &&",
          "864:    object.Name == kustomization.GetName() &&",
          "865:    object.Namespace == kustomization.GetNamespace() {",
          "868:   toCheck = append(toCheck, object)",
          "872:  wasHealthy := apimeta.IsStatusConditionTrue(kustomization.Status.Conditions, kustomizev1.HealthyCondition)",
          "875:  message := fmt.Sprintf(\"running health checks with a timeout of %s\", kustomization.GetTimeout().String())",
          "876:  k := kustomizev1.KustomizationProgressing(kustomization, message)",
          "877:  kustomizev1.SetKustomizationHealthiness(&k, metav1.ConditionUnknown, meta.ProgressingReason, message)",
          "878:  if err := r.patchStatus(ctx, reconcile.Request{NamespacedName: client.ObjectKeyFromObject(&kustomization)}, k.Status); err != nil {",
          "885:   Timeout:  kustomization.GetTimeout(),",
          "887:   return fmt.Errorf(\"Health check failed after %s, %w\", time.Since(checkStart).String(), err)",
          "891:  if !wasHealthy || (kustomization.Status.LastAppliedRevision != revision && drifted) {",
          "892:   r.event(ctx, kustomization, revision, events.EventSeverityInfo,",
          "893:    fmt.Sprintf(\"Health check passed in %s\", time.Since(checkStart).String()), nil)",
          "899: func (r *KustomizationReconciler) prune(ctx context.Context, manager *ssa.ResourceManager, kustomization kustomizev1.Kustomization, revision string, objects []*unstructured.Unstructured) (bool, error) {",
          "900:  if !kustomization.Spec.Prune {",
          "",
          "[Added Lines]",
          "784:   r.event(obj, revision, events.EventSeverityInfo, applyLog, nil)",
          "790: func (r *KustomizationReconciler) checkHealth(ctx context.Context,",
          "791:  manager *ssa.ResourceManager,",
          "792:  patcher *patch.Helper,",
          "793:  obj *kustomizev1.Kustomization,",
          "794:  revision string,",
          "795:  isNewRevision bool,",
          "796:  drifted bool,",
          "797:  objects object.ObjMetadataSet) error {",
          "798:  if len(obj.Spec.HealthChecks) == 0 && !obj.Spec.Wait {",
          "799:   conditions.Delete(obj, kustomizev1.HealthyCondition)",
          "805:  if !obj.Spec.Wait {",
          "806:   objects, err = inventory.ReferenceToObjMetadataSet(obj.Spec.HealthChecks)",
          "813:   conditions.Delete(obj, kustomizev1.HealthyCondition)",
          "819:  for _, o := range objects {",
          "820:   if o.GroupKind.Kind == kustomizev1.KustomizationKind &&",
          "821:    o.Name == obj.GetName() &&",
          "822:    o.Namespace == obj.GetNamespace() {",
          "825:   toCheck = append(toCheck, o)",
          "829:  wasHealthy := apimeta.IsStatusConditionTrue(obj.Status.Conditions, kustomizev1.HealthyCondition)",
          "832:  message := fmt.Sprintf(\"Running health checks with a timeout of %s\", obj.GetTimeout().String())",
          "833:  conditions.MarkReconciling(obj, meta.ProgressingReason, message)",
          "834:  conditions.MarkUnknown(obj, kustomizev1.HealthyCondition, meta.ProgressingReason, message)",
          "835:  if err := r.patch(ctx, obj, patcher); err != nil {",
          "842:   Timeout:  obj.GetTimeout(),",
          "844:   conditions.MarkFalse(obj, meta.ReadyCondition, kustomizev1.HealthCheckFailedReason, err.Error())",
          "845:   conditions.MarkFalse(obj, kustomizev1.HealthyCondition, kustomizev1.HealthCheckFailedReason, err.Error())",
          "846:   return fmt.Errorf(\"Health check failed after %s: %w\", time.Since(checkStart).String(), err)",
          "850:  msg := fmt.Sprintf(\"Health check passed in %s\", time.Since(checkStart).String())",
          "851:  if !wasHealthy || (isNewRevision && drifted) {",
          "852:   r.event(obj, revision, events.EventSeverityInfo, msg, nil)",
          "853:  }",
          "855:  conditions.MarkTrue(obj, kustomizev1.HealthyCondition, meta.SucceededReason, msg)",
          "856:  if err := r.patch(ctx, obj, patcher); err != nil {",
          "857:   return fmt.Errorf(\"unable to update the healthy status to progressing, error: %w\", err)",
          "863: func (r *KustomizationReconciler) prune(ctx context.Context,",
          "864:  manager *ssa.ResourceManager,",
          "865:  obj *kustomizev1.Kustomization,",
          "866:  revision string,",
          "867:  objects []*unstructured.Unstructured) (bool, error) {",
          "868:  if !obj.Spec.Prune {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "906:  opts := ssa.DeleteOptions{",
          "907:   PropagationPolicy: metav1.DeletePropagationBackground,",
          "909:   Exclusions: map[string]string{",
          "910:    fmt.Sprintf(\"%s/prune\", kustomizev1.GroupVersion.Group):     kustomizev1.DisabledValue,",
          "911:    fmt.Sprintf(\"%s/reconcile\", kustomizev1.GroupVersion.Group): kustomizev1.DisabledValue,",
          "",
          "[Removed Lines]",
          "908:   Inclusions:        manager.GetOwnerLabels(kustomization.Name, kustomization.Namespace),",
          "",
          "[Added Lines]",
          "876:   Inclusions:        manager.GetOwnerLabels(obj.Name, obj.Namespace),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "921:  if changeSet != nil && len(changeSet.Entries) > 0 {",
          "922:   log.Info(fmt.Sprintf(\"garbage collection completed: %s\", changeSet.String()))",
          "924:   return true, nil",
          "925:  }",
          "927:  return false, nil",
          "928: }",
          "931:  log := ctrl.LoggerFrom(ctx)",
          "938:   impersonation := runtimeClient.NewImpersonator(",
          "939:    r.Client,",
          "940:    r.StatusPoller,",
          "941:    r.PollingOpts,",
          "943:    r.KubeConfigOpts,",
          "944:    r.DefaultServiceAccount,",
          "947:   )",
          "948:   if impersonation.CanImpersonate(ctx) {",
          "949:    kubeClient, _, err := impersonation.GetClient(ctx)",
          "",
          "[Removed Lines]",
          "923:   r.event(ctx, kustomization, revision, events.EventSeverityInfo, changeSet.String(), nil)",
          "930: func (r *KustomizationReconciler) finalize(ctx context.Context, kustomization kustomizev1.Kustomization) (ctrl.Result, error) {",
          "932:  if kustomization.Spec.Prune &&",
          "933:   !kustomization.Spec.Suspend &&",
          "934:   kustomization.Status.Inventory != nil &&",
          "935:   kustomization.Status.Inventory.Entries != nil {",
          "936:   objects, _ := inventory.List(kustomization.Status.Inventory)",
          "942:    kustomization.Spec.KubeConfig,",
          "945:    kustomization.Spec.ServiceAccountName,",
          "946:    kustomization.GetNamespace(),",
          "",
          "[Added Lines]",
          "891:   r.event(obj, revision, events.EventSeverityInfo, changeSet.String(), nil)",
          "898: func (r *KustomizationReconciler) finalize(ctx context.Context,",
          "899:  obj *kustomizev1.Kustomization) (ctrl.Result, error) {",
          "901:  if obj.Spec.Prune &&",
          "902:   !obj.Spec.Suspend &&",
          "903:   obj.Status.Inventory != nil &&",
          "904:   obj.Status.Inventory.Entries != nil {",
          "905:   objects, _ := inventory.List(obj.Status.Inventory)",
          "911:    obj.Spec.KubeConfig,",
          "914:    obj.Spec.ServiceAccountName,",
          "915:    obj.GetNamespace(),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "959:    opts := ssa.DeleteOptions{",
          "960:     PropagationPolicy: metav1.DeletePropagationBackground,",
          "962:     Exclusions: map[string]string{",
          "963:      fmt.Sprintf(\"%s/prune\", kustomizev1.GroupVersion.Group):     kustomizev1.DisabledValue,",
          "964:      fmt.Sprintf(\"%s/reconcile\", kustomizev1.GroupVersion.Group): kustomizev1.DisabledValue,",
          "",
          "[Removed Lines]",
          "961:     Inclusions:        resourceManager.GetOwnerLabels(kustomization.Name, kustomization.Namespace),",
          "",
          "[Added Lines]",
          "930:     Inclusions:        resourceManager.GetOwnerLabels(obj.Name, obj.Namespace),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "968:    changeSet, err := resourceManager.DeleteAll(ctx, objects, opts)",
          "969:    if err != nil {",
          "972:     return ctrl.Result{}, err",
          "973:    }",
          "975:    if changeSet != nil && len(changeSet.Entries) > 0 {",
          "977:    }",
          "978:   } else {",
          "980:    msg := fmt.Sprintf(\"unable to prune objects: \\n%s\", ssa.FmtUnstructuredList(objects))",
          "981:    log.Error(fmt.Errorf(\"skiping pruning, failed to find account to impersonate\"), msg)",
          "983:   }",
          "984:  }",
          "996:  return ctrl.Result{}, nil",
          "997: }",
          "1000:  if metadata == nil {",
          "1001:   metadata = map[string]string{}",
          "1002:  }",
          "",
          "[Removed Lines]",
          "970:     r.event(ctx, kustomization, kustomization.Status.LastAppliedRevision, events.EventSeverityError, \"pruning for deleted resource failed\", nil)",
          "976:     r.event(ctx, kustomization, kustomization.Status.LastAppliedRevision, events.EventSeverityInfo, changeSet.String(), nil)",
          "982:    r.event(ctx, kustomization, kustomization.Status.LastAppliedRevision, events.EventSeverityError, msg, nil)",
          "987:  r.recordReadiness(ctx, kustomization)",
          "990:  controllerutil.RemoveFinalizer(&kustomization, kustomizev1.KustomizationFinalizer)",
          "991:  if err := r.Update(ctx, &kustomization, client.FieldOwner(r.statusManager)); err != nil {",
          "992:   return ctrl.Result{}, err",
          "993:  }",
          "999: func (r *KustomizationReconciler) event(ctx context.Context, kustomization kustomizev1.Kustomization, revision, severity, msg string, metadata map[string]string) {",
          "",
          "[Added Lines]",
          "939:     r.event(obj, obj.Status.LastAppliedRevision, events.EventSeverityError, \"pruning for deleted resource failed\", nil)",
          "945:     r.event(obj, obj.Status.LastAppliedRevision, events.EventSeverityInfo, changeSet.String(), nil)",
          "951:    r.event(obj, obj.Status.LastAppliedRevision, events.EventSeverityError, msg, nil)",
          "956:  controllerutil.RemoveFinalizer(obj, kustomizev1.KustomizationFinalizer)",
          "961: func (r *KustomizationReconciler) event(obj *kustomizev1.Kustomization,",
          "962:  revision, severity, msg string,",
          "963:  metadata map[string]string) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1005:  }",
          "1007:  reason := severity",
          "1010:  }",
          "1012:  eventtype := \"Normal\"",
          "",
          "[Removed Lines]",
          "1008:  if c := apimeta.FindStatusCondition(kustomization.Status.Conditions, meta.ReadyCondition); c != nil {",
          "1009:   reason = c.Reason",
          "",
          "[Added Lines]",
          "972:  conditions.GetReason(obj, meta.ReadyCondition)",
          "973:  if r := conditions.GetReason(obj, meta.ReadyCondition); r != \"\" {",
          "974:   reason = r",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1014:   eventtype = \"Warning\"",
          "1015:  }",
          "1018: }",
          "1057:  }",
          "1064:  }",
          "1069: }",
          "",
          "[Removed Lines]",
          "1017:  r.EventRecorder.AnnotatedEventf(&kustomization, metadata, eventtype, reason, msg)",
          "1020: func (r *KustomizationReconciler) recordReadiness(ctx context.Context, kustomization kustomizev1.Kustomization) {",
          "1021:  if r.MetricsRecorder == nil {",
          "1022:   return",
          "1023:  }",
          "1024:  log := ctrl.LoggerFrom(ctx)",
          "1026:  objRef, err := reference.GetReference(r.Scheme, &kustomization)",
          "1027:  if err != nil {",
          "1028:   log.Error(err, \"unable to record readiness metric\")",
          "1029:   return",
          "1030:  }",
          "1031:  if rc := apimeta.FindStatusCondition(kustomization.Status.Conditions, meta.ReadyCondition); rc != nil {",
          "1032:   r.MetricsRecorder.RecordCondition(*objRef, *rc, !kustomization.DeletionTimestamp.IsZero())",
          "1033:  } else {",
          "1034:   r.MetricsRecorder.RecordCondition(*objRef, metav1.Condition{",
          "1035:    Type:   meta.ReadyCondition,",
          "1036:    Status: metav1.ConditionUnknown,",
          "1037:   }, !kustomization.DeletionTimestamp.IsZero())",
          "1038:  }",
          "1039: }",
          "1041: func (r *KustomizationReconciler) recordSuspension(ctx context.Context, kustomization kustomizev1.Kustomization) {",
          "1042:  if r.MetricsRecorder == nil {",
          "1043:   return",
          "1044:  }",
          "1045:  log := ctrl.LoggerFrom(ctx)",
          "1047:  objRef, err := reference.GetReference(r.Scheme, &kustomization)",
          "1048:  if err != nil {",
          "1049:   log.Error(err, \"unable to record suspended metric\")",
          "1050:   return",
          "1051:  }",
          "1053:  if !kustomization.DeletionTimestamp.IsZero() {",
          "1054:   r.MetricsRecorder.RecordSuspend(*objRef, false)",
          "1055:  } else {",
          "1056:   r.MetricsRecorder.RecordSuspend(*objRef, kustomization.Spec.Suspend)",
          "1058: }",
          "1060: func (r *KustomizationReconciler) patchStatus(ctx context.Context, req ctrl.Request, newStatus kustomizev1.KustomizationStatus) error {",
          "1061:  var kustomization kustomizev1.Kustomization",
          "1062:  if err := r.Get(ctx, req.NamespacedName, &kustomization); err != nil {",
          "1063:   return err",
          "1066:  patch := client.MergeFrom(kustomization.DeepCopy())",
          "1067:  kustomization.Status = newStatus",
          "1068:  return r.Status().Patch(ctx, &kustomization, patch, client.FieldOwner(r.statusManager))",
          "",
          "[Added Lines]",
          "982:  r.EventRecorder.AnnotatedEventf(obj, metadata, eventtype, reason, msg)",
          "985: func (r *KustomizationReconciler) patch(ctx context.Context,",
          "986:  obj *kustomizev1.Kustomization,",
          "987:  patcher *patch.Helper) (retErr error) {",
          "990:  patchOpts := []patch.Option{}",
          "991:  ownedConditions := []string{",
          "992:   kustomizev1.HealthyCondition,",
          "993:   meta.ReadyCondition,",
          "994:   meta.ReconcilingCondition,",
          "995:   meta.StalledCondition,",
          "996:  }",
          "997:  patchOpts = append(patchOpts,",
          "998:   patch.WithOwnedConditions{Conditions: ownedConditions},",
          "999:   patch.WithForceOverwriteConditions{},",
          "1000:   patch.WithFieldOwner(r.statusManager),",
          "1001:  )",
          "1004:  if err := patcher.Patch(ctx, obj, patchOpts...); err != nil {",
          "1005:   if !obj.GetDeletionTimestamp().IsZero() {",
          "1006:    err = kerrors.FilterOut(err, func(e error) bool { return apierrors.IsNotFound(e) })",
          "1007:   }",
          "1008:   retErr = kerrors.NewAggregate([]error{retErr, err})",
          "1009:   if retErr != nil {",
          "1010:    return retErr",
          "1011:   }",
          "1015:  newHelper, retErr := patch.NewHelper(obj, r.Client)",
          "1016:  if retErr != nil {",
          "1017:   return retErr",
          "1021:  return nil",
          "",
          "---------------"
        ],
        "controllers/kustomization_decryptor_test.go||controllers/kustomization_decryptor_test.go": [
          "File: controllers/kustomization_decryptor_test.go -> controllers/kustomization_decryptor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   g.Eventually(func() bool {",
          "220:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "222:   }, timeout, time.Second).Should(BeTrue())",
          "224:   events := getEvents(resultK.GetName(), map[string]string{\"kustomize.toolkit.fluxcd.io/revision\": revision})",
          "",
          "[Removed Lines]",
          "221:    return resultK.Status.LastAttemptedRevision == revision",
          "",
          "[Added Lines]",
          "221:    return resultK.Status.LastAppliedRevision == revision",
          "",
          "---------------"
        ],
        "controllers/kustomization_impersonation_test.go||controllers/kustomization_impersonation_test.go": [
          "File: controllers/kustomization_impersonation_test.go -> controllers/kustomization_impersonation_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   g.Eventually(func() bool {",
          "131:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "132:    readyCondition = apimeta.FindStatusCondition(resultK.Status.Conditions, meta.ReadyCondition)",
          "134:   }, timeout, time.Second).Should(BeTrue())",
          "137:   g.Expect(readyCondition.Message).To(ContainSubstring(\"system:serviceaccount:%s:default\", id))",
          "138:  })",
          "",
          "[Removed Lines]",
          "133:    return apimeta.IsStatusConditionFalse(resultK.Status.Conditions, meta.ReadyCondition)",
          "136:   g.Expect(readyCondition.Reason).To(Equal(kustomizev1.ReconciliationFailedReason))",
          "",
          "[Added Lines]",
          "133:    return readyCondition.Reason == kustomizev1.ReconciliationFailedReason",
          "",
          "---------------"
        ],
        "controllers/kustomization_prune_test.go||controllers/kustomization_prune_test.go": [
          "File: controllers/kustomization_prune_test.go -> controllers/kustomization_prune_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:   g.Expect(len(resultK.Status.Inventory.Entries)).Should(BeIdenticalTo(2))",
          "308:  })",
          "309: }",
          "311: func TestKustomizationReconciler_PruneSkipNotOwned(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:  t.Run(\"deletes suspended\", func(t *testing.T) {",
          "311:   g.Eventually(func() error {",
          "312:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "313:    resultK.Spec.Suspend = true",
          "314:    return k8sClient.Update(context.Background(), resultK)",
          "315:   }, timeout, time.Second).Should(BeNil())",
          "317:   g.Expect(k8sClient.Delete(context.Background(), kustomization)).To(Succeed())",
          "318:   g.Eventually(func() bool {",
          "319:    err = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), kustomization)",
          "320:    return apierrors.IsNotFound(err)",
          "321:   }, timeout, time.Second).Should(BeTrue())",
          "322:  })",
          "",
          "---------------"
        ],
        "controllers/kustomization_wait_test.go||controllers/kustomization_wait_test.go": [
          "File: controllers/kustomization_wait_test.go -> controllers/kustomization_wait_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"testing\"",
          "23:  \"time\"",
          "28:  . \"github.com/onsi/gomega\"",
          "30:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "31:  \"k8s.io/apimachinery/pkg/types\"",
          "32:  \"sigs.k8s.io/controller-runtime/pkg/client\"",
          "34:  kustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1beta2\"",
          "35: )",
          "38:  g := NewWithT(t)",
          "39:  id := \"wait-\" + randStringRunes(5)",
          "40:  revision := \"v1.0.0\"",
          "",
          "[Removed Lines]",
          "25:  \"github.com/fluxcd/pkg/apis/meta\"",
          "26:  \"github.com/fluxcd/pkg/testserver\"",
          "27:  sourcev1 \"github.com/fluxcd/source-controller/api/v1beta2\"",
          "29:  apimeta \"k8s.io/apimachinery/pkg/api/meta\"",
          "37: func TestKustomizationReconciler_HealthCheck(t *testing.T) {",
          "",
          "[Added Lines]",
          "30:  \"github.com/fluxcd/pkg/apis/meta\"",
          "31:  \"github.com/fluxcd/pkg/runtime/conditions\"",
          "32:  \"github.com/fluxcd/pkg/testserver\"",
          "33:  sourcev1 \"github.com/fluxcd/source-controller/api/v1beta2\"",
          "38: func TestKustomizationReconciler_WaitConditions(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:  t.Run(\"reports healthy status\", func(t *testing.T) {",
          "125:   g.Eventually(func() bool {",
          "126:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "131:  })",
          "133:  t.Run(\"reports unhealthy status\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "127:    ready := apimeta.IsStatusConditionTrue(resultK.Status.Conditions, meta.ReadyCondition)",
          "128:    healthy := apimeta.IsStatusConditionTrue(resultK.Status.Conditions, kustomizev1.HealthyCondition)",
          "129:    return ready && healthy",
          "130:   }, timeout, time.Second).Should(BeTrue())",
          "",
          "[Added Lines]",
          "128:    return isReconcileSuccess(resultK)",
          "129:   }, time.Second, time.Second).Should(BeTrue())",
          "130:   logStatus(t, resultK)",
          "132:   g.Expect(resultK.Status.ObservedGeneration).To(BeIdenticalTo(resultK.Generation))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:    return k8sClient.Update(context.Background(), resultK)",
          "150:   }, timeout, time.Second).Should(BeNil())",
          "154:   g.Eventually(func() bool {",
          "155:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "159:   }, timeout, time.Second).Should(BeTrue())",
          "167:   g.Eventually(func() bool {",
          "168:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "174:   g.Expect(resultK.Status.LastHandledReconcileAt).To(BeIdenticalTo(reconcileRequestAt))",
          "178:  })",
          "180:  t.Run(\"emits unhealthy event\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "152:   readyCondition := &metav1.Condition{}",
          "153:   healthyCondition := &metav1.Condition{}",
          "156:    readyCondition = apimeta.FindStatusCondition(resultK.Status.Conditions, meta.ReadyCondition)",
          "157:    healthyCondition = apimeta.FindStatusCondition(resultK.Status.Conditions, kustomizev1.HealthyCondition)",
          "158:    return healthyCondition.Reason == meta.ProgressingReason",
          "161:   expectedMessage := \"running health checks\"",
          "162:   g.Expect(readyCondition.Status).To(BeIdenticalTo(metav1.ConditionUnknown))",
          "163:   g.Expect(readyCondition.Message).To(ContainSubstring(expectedMessage))",
          "164:   g.Expect(healthyCondition.Status).To(BeIdenticalTo(metav1.ConditionUnknown))",
          "165:   g.Expect(healthyCondition.Message).To(ContainSubstring(expectedMessage))",
          "169:    readyCondition = apimeta.FindStatusCondition(resultK.Status.Conditions, meta.ReadyCondition)",
          "170:    healthyCondition = apimeta.FindStatusCondition(resultK.Status.Conditions, kustomizev1.HealthyCondition)",
          "171:    return healthyCondition.Reason == kustomizev1.HealthCheckFailedReason",
          "172:   }, time.Minute, time.Second).Should(BeTrue())",
          "175:   g.Expect(readyCondition.Status).To(BeIdenticalTo(metav1.ConditionFalse))",
          "176:   g.Expect(healthyCondition.Status).To(BeIdenticalTo(metav1.ConditionFalse))",
          "177:   g.Expect(healthyCondition.Message).To(BeIdenticalTo(kustomizev1.HealthCheckFailedReason))",
          "",
          "[Added Lines]",
          "156:    return conditions.IsReconciling(resultK)",
          "158:   logStatus(t, resultK)",
          "160:   expectedMessage := \"Running health checks\"",
          "161:   g.Expect(conditions.IsUnknown(resultK, kustomizev1.HealthyCondition)).To(BeTrue())",
          "162:   g.Expect(conditions.IsTrue(resultK, meta.ReadyCondition)).To(BeTrue())",
          "164:   for _, c := range []string{meta.ReconcilingCondition, kustomizev1.HealthyCondition} {",
          "165:    g.Expect(conditions.GetReason(resultK, c)).To(BeIdenticalTo(meta.ProgressingReason))",
          "166:    g.Expect(conditions.GetMessage(resultK, c)).To(ContainSubstring(expectedMessage))",
          "167:    g.Expect(conditions.GetObservedGeneration(resultK, c)).To(BeIdenticalTo(resultK.Generation))",
          "168:   }",
          "172:    return isReconcileFailure(resultK)",
          "173:   }, timeout, time.Second).Should(BeTrue())",
          "174:   logStatus(t, resultK)",
          "176:   for _, c := range []string{kustomizev1.HealthyCondition, meta.ReadyCondition} {",
          "177:    g.Expect(conditions.IsFalse(resultK, c)).To(BeTrue())",
          "178:    g.Expect(conditions.GetReason(resultK, c)).To(BeIdenticalTo(kustomizev1.HealthCheckFailedReason))",
          "179:    g.Expect(conditions.GetObservedGeneration(resultK, c)).To(BeIdenticalTo(resultK.Generation))",
          "180:   }",
          "182:   g.Expect(conditions.GetReason(resultK, meta.ReconcilingCondition)).To(BeIdenticalTo(meta.ProgressingReason))",
          "183:   g.Expect(conditions.GetMessage(resultK, meta.ReconcilingCondition)).To(ContainSubstring(expectedMessage))",
          "186:   g.Expect(resultK.Status.ObservedGeneration).To(BeIdenticalTo(resultK.Generation - 1))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:   g.Eventually(func() bool {",
          "195:    _ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(kustomization), resultK)",
          "199:   }, timeout, time.Second).Should(BeTrue())",
          "200:  })",
          "202:  t.Run(\"emits recovery event\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "196:    ready := apimeta.IsStatusConditionTrue(resultK.Status.Conditions, meta.ReadyCondition)",
          "197:    healthy := apimeta.IsStatusConditionTrue(resultK.Status.Conditions, kustomizev1.HealthyCondition)",
          "198:    return ready && healthy",
          "",
          "[Added Lines]",
          "205:    return isReconcileSuccess(resultK)",
          "207:   logStatus(t, resultK)",
          "209:   expectedMessage := \"Health check passed\"",
          "210:   g.Expect(conditions.IsTrue(resultK, kustomizev1.HealthyCondition)).To(BeTrue())",
          "211:   g.Expect(conditions.GetReason(resultK, kustomizev1.HealthyCondition)).To(BeIdenticalTo(meta.SucceededReason))",
          "212:   g.Expect(conditions.GetObservedGeneration(resultK, kustomizev1.HealthyCondition)).To(BeIdenticalTo(resultK.Generation))",
          "213:   g.Expect(conditions.GetMessage(resultK, kustomizev1.HealthyCondition)).To(ContainSubstring(expectedMessage))",
          "215:   g.Expect(conditions.IsTrue(resultK, meta.ReadyCondition)).To(BeTrue())",
          "216:   g.Expect(conditions.GetReason(resultK, meta.ReadyCondition)).To(BeIdenticalTo(kustomizev1.ReconciliationSucceededReason))",
          "217:   g.Expect(conditions.GetObservedGeneration(resultK, meta.ReadyCondition)).To(BeIdenticalTo(resultK.Generation))",
          "218:   g.Expect(conditions.GetMessage(resultK, meta.ReadyCondition)).To(BeIdenticalTo(fmt.Sprintf(\"Applied revision: %s\", revision)))",
          "220:   g.Expect(resultK.Status.ObservedGeneration).To(BeIdenticalTo(resultK.Generation))",
          "",
          "---------------"
        ],
        "controllers/suite_test.go||controllers/suite_test.go": [
          "File: controllers/suite_test.go -> controllers/suite_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"math/rand\"",
          "24:  \"os\"",
          "25:  \"path/filepath\"",
          "26:  \"testing\"",
          "27:  \"time\"",
          "35:  \"github.com/hashicorp/vault/api\"",
          "36:  \"github.com/ory/dockertest\"",
          "37:  corev1 \"k8s.io/api/core/v1\"",
          "",
          "[Removed Lines]",
          "29:  kustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1beta2\"",
          "30:  \"github.com/fluxcd/pkg/apis/meta\"",
          "31:  \"github.com/fluxcd/pkg/runtime/controller\"",
          "32:  \"github.com/fluxcd/pkg/runtime/testenv\"",
          "33:  \"github.com/fluxcd/pkg/testserver\"",
          "34:  sourcev1 \"github.com/fluxcd/source-controller/api/v1beta2\"",
          "",
          "[Added Lines]",
          "26:  \"sigs.k8s.io/yaml\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:  \"sigs.k8s.io/controller-runtime/pkg/envtest\"",
          "44:  controllerLog \"sigs.k8s.io/controller-runtime/pkg/log\"",
          "45:  \"sigs.k8s.io/controller-runtime/pkg/log/zap\"",
          "46: )",
          "48: func init() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:  \"github.com/fluxcd/pkg/apis/meta\"",
          "43:  \"github.com/fluxcd/pkg/runtime/conditions\"",
          "44:  \"github.com/fluxcd/pkg/runtime/controller\"",
          "45:  \"github.com/fluxcd/pkg/runtime/testenv\"",
          "46:  \"github.com/fluxcd/pkg/testserver\"",
          "47:  sourcev1 \"github.com/fluxcd/source-controller/api/v1beta2\"",
          "49:  kustomizev1 \"github.com/fluxcd/kustomize-controller/api/v1beta2\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:   controllerName := \"kustomize-controller\"",
          "158:   testMetricsH = controller.MustMakeMetrics(testEnv)",
          "159:   reconciler = &KustomizationReconciler{",
          "164:   }",
          "165:   if err := (reconciler).SetupWithManager(testEnv, KustomizationReconcilerOptions{",
          "166:    MaxConcurrentReconciles:   4,",
          "",
          "[Removed Lines]",
          "160:    ControllerName:  controllerName,",
          "161:    Client:          testEnv,",
          "162:    EventRecorder:   testEnv.GetEventRecorderFor(controllerName),",
          "163:    MetricsRecorder: testMetricsH.MetricsRecorder,",
          "",
          "[Added Lines]",
          "164:    ControllerName: controllerName,",
          "165:    Client:         testEnv,",
          "166:    EventRecorder:  testEnv.GetEventRecorderFor(controllerName),",
          "167:    Metrics:        testMetricsH,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:  return string(b)",
          "187: }",
          "189: func getEvents(objName string, annotations map[string]string) []corev1.Event {",
          "190:  var result []corev1.Event",
          "191:  events := &corev1.EventList{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: func isReconcileSuccess(k *kustomizev1.Kustomization) bool {",
          "194:  return conditions.IsReady(k) &&",
          "195:   conditions.GetObservedGeneration(k, meta.ReadyCondition) == k.Generation &&",
          "196:   k.Status.ObservedGeneration == k.Generation &&",
          "197:   k.Status.LastAppliedRevision == k.Status.LastAttemptedRevision",
          "198: }",
          "200: func isReconcileFailure(k *kustomizev1.Kustomization) bool {",
          "201:  isHandled := true",
          "202:  if v, ok := meta.ReconcileAnnotationValue(k.GetAnnotations()); ok {",
          "203:   isHandled = k.Status.LastHandledReconcileAt == v",
          "204:  }",
          "206:  return isHandled && conditions.IsReconciling(k) &&",
          "207:   conditions.IsFalse(k, meta.ReadyCondition) &&",
          "208:   conditions.GetObservedGeneration(k, meta.ReadyCondition) == k.Generation",
          "209: }",
          "211: func logStatus(t *testing.T, k *kustomizev1.Kustomization) {",
          "212:  sts, _ := yaml.Marshal(k.Status)",
          "213:  t.Log(string(sts))",
          "214: }",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  github.com/fluxcd/pkg/apis/meta v0.17.0",
          "27:  github.com/fluxcd/pkg/http/fetch v0.1.0",
          "28:  github.com/fluxcd/pkg/kustomize v0.8.0",
          "30:  github.com/fluxcd/pkg/ssa v0.21.0",
          "31:  github.com/fluxcd/pkg/tar v0.1.0",
          "32:  github.com/fluxcd/pkg/testserver v0.4.0",
          "",
          "[Removed Lines]",
          "29:  github.com/fluxcd/pkg/runtime v0.20.0",
          "",
          "[Added Lines]",
          "29:  github.com/fluxcd/pkg/runtime v0.21.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: github.com/fluxcd/pkg/http/fetch v0.1.0/go.mod h1:1CjOSfn7aOeHf2ZRA2+GTKHg442zN6X/fSys3a0KLC0=",
          "295: github.com/fluxcd/pkg/kustomize v0.8.0 h1:8AdEvp6y38ISZzoi0H82Si5zkmLXClbeX10W7HevB00=",
          "296: github.com/fluxcd/pkg/kustomize v0.8.0/go.mod h1:zGtCZF6V3hMWcf46SqrQc10fS9yUlKzi2UcFUeabDAE=",
          "299: github.com/fluxcd/pkg/ssa v0.21.0 h1:aeoTohPNf5x7jQjHidyLJAOHw3EyHOQoQN3mN2i+4cc=",
          "300: github.com/fluxcd/pkg/ssa v0.21.0/go.mod h1:jumyhUbEMDnduN7anSlKfxl2fEoyeyv+Ta5hWCbxI5Q=",
          "301: github.com/fluxcd/pkg/tar v0.1.0 h1:ObyUml8NJtGQtz/cRgexd7HU2mQsTmgjz2dtX4xdnng=",
          "",
          "[Removed Lines]",
          "297: github.com/fluxcd/pkg/runtime v0.20.0 h1:F9q9wap0BhjQszboUroJrYOB1C831zkQwTAk2tlMIQc=",
          "298: github.com/fluxcd/pkg/runtime v0.20.0/go.mod h1:KVHNQMhccuLTjMDFVCr/SF+4Z554bcMH1LncC4sQf8o=",
          "",
          "[Added Lines]",
          "297: github.com/fluxcd/pkg/runtime v0.21.0 h1:3u6z8M1fDJDGzyAUHWanWy7xF7xQnn7jl2wTzsvU3Pg=",
          "298: github.com/fluxcd/pkg/runtime v0.21.0/go.mod h1:Cm6jIhltzXIM3CRRY6SFASDn+z2m/1yPqOWwD73c3io=",
          "",
          "---------------"
        ],
        "internal/decryptor/decryptor.go||internal/decryptor/decryptor.go": [
          "File: internal/decryptor/decryptor.go -> internal/decryptor/decryptor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  client client.Client",
          "123:  maxFileSize int64",
          "",
          "[Removed Lines]",
          "120:  kustomization kustomizev1.Kustomization",
          "",
          "[Added Lines]",
          "120:  kustomization *kustomizev1.Kustomization",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:  return &Decryptor{",
          "159:   root:          root,",
          "160:   client:        client,",
          "",
          "[Removed Lines]",
          "157: func NewDecryptor(root string, client client.Client, kustomization kustomizev1.Kustomization, maxFileSize int64, gnuPGHome string) *Decryptor {",
          "",
          "[Added Lines]",
          "157: func NewDecryptor(root string, client client.Client, kustomization *kustomizev1.Kustomization, maxFileSize int64, gnuPGHome string) *Decryptor {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:  gnuPGHome, err := pgp.NewGnuPGHome()",
          "171:  if err != nil {",
          "172:   return nil, nil, fmt.Errorf(\"cannot create decryptor: %w\", err)",
          "",
          "[Removed Lines]",
          "169: func NewTempDecryptor(root string, client client.Client, kustomization kustomizev1.Kustomization) (*Decryptor, func(), error) {",
          "",
          "[Added Lines]",
          "169: func NewTempDecryptor(root string, client client.Client, kustomization *kustomizev1.Kustomization) (*Decryptor, func(), error) {",
          "",
          "---------------"
        ],
        "internal/decryptor/decryptor_test.go||internal/decryptor/decryptor_test.go": [
          "File: internal/decryptor/decryptor_test.go -> internal/decryptor/decryptor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:     },",
          "376:    }",
          "379:    g.Expect(err).ToNot(HaveOccurred())",
          "380:    t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "378:    d, cleanup, err := NewTempDecryptor(\"\", cb.Build(), kustomization)",
          "",
          "[Added Lines]",
          "378:    d, cleanup, err := NewTempDecryptor(\"\", cb.Build(), &kustomization)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:   g.Expect(bytes.Contains(encData, sopsFormatToMarkerBytes[inputFormat])).To(BeTrue())",
          "444:   out, err := kd.SopsDecryptWithFormat(encData, inputFormat, outputFormat)",
          "446:   g.Expect(err).ToNot(HaveOccurred())",
          "447:   g.Expect(out).To(Equal([]byte(\"key: value\\n\")))",
          "448:  })",
          "",
          "[Removed Lines]",
          "445:   t.Logf(\"%s\", out)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:    Provider: DecryptionProviderSOPS,",
          "552:   }",
          "555:   g.Expect(err).ToNot(HaveOccurred())",
          "556:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "554:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kus)",
          "",
          "[Added Lines]",
          "553:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kus)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "592:    Provider: DecryptionProviderSOPS,",
          "593:   }",
          "596:   g.Expect(err).ToNot(HaveOccurred())",
          "597:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "595:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kus)",
          "",
          "[Added Lines]",
          "594:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kus)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "627:    Provider: DecryptionProviderSOPS,",
          "628:   }",
          "631:   g.Expect(err).ToNot(HaveOccurred())",
          "632:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "630:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kus)",
          "",
          "[Added Lines]",
          "629:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kus)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "662:    Provider: DecryptionProviderSOPS,",
          "663:   }",
          "666:   g.Expect(err).ToNot(HaveOccurred())",
          "667:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "665:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kus)",
          "",
          "[Added Lines]",
          "664:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kus)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "710:  t.Run(\"nil resource\", func(t *testing.T) {",
          "711:   g := NewWithT(t)",
          "714:   g.Expect(err).ToNot(HaveOccurred())",
          "715:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "713:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kustomization.DeepCopy())",
          "",
          "[Added Lines]",
          "712:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kustomization.DeepCopy())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "722:  t.Run(\"no decryption spec\", func(t *testing.T) {",
          "723:   g := NewWithT(t)",
          "726:   g.Expect(err).ToNot(HaveOccurred())",
          "727:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "725:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kustomization.DeepCopy())",
          "",
          "[Added Lines]",
          "724:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kustomization.DeepCopy())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "738:   kus.Spec.Decryption = &kustomizev1.Decryption{",
          "739:    Provider: \"not-supported\",",
          "740:   }",
          "742:   g.Expect(err).ToNot(HaveOccurred())",
          "743:   t.Cleanup(cleanup)",
          "",
          "[Removed Lines]",
          "741:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), *kus)",
          "",
          "[Added Lines]",
          "740:   d, cleanup, err := NewTempDecryptor(\"\", fake.NewClientBuilder().Build(), kus)",
          "",
          "---------------"
        ],
        "internal/generator/generator.go||internal/generator/generator.go": [
          "File: internal/generator/generator.go -> internal/generator/generator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: type KustomizeGenerator struct {",
          "38:  root          string",
          "40: }",
          "43:  return &KustomizeGenerator{",
          "44:   root:          root,",
          "45:   kustomization: kustomization,",
          "",
          "[Removed Lines]",
          "39:  kustomization kustomizev1.Kustomization",
          "42: func NewGenerator(root string, kustomization kustomizev1.Kustomization) *KustomizeGenerator {",
          "",
          "[Added Lines]",
          "39:  kustomization *kustomizev1.Kustomization",
          "42: func NewGenerator(root string, kustomization *kustomizev1.Kustomization) *KustomizeGenerator {",
          "",
          "---------------"
        ],
        "internal/generator/generator_test.go||internal/generator/generator_test.go": [
          "File: internal/generator/generator_test.go -> internal/generator/generator_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:      },",
          "81:     },",
          "82:    }",
          "84:    g.Expect(err).ToNot(HaveOccurred())",
          "86:    kfileYAML, err := os.ReadFile(kfile)",
          "",
          "[Removed Lines]",
          "83:    kfile, err := NewGenerator(filepath.Join(tmpDir, tt.dir), ks).WriteFile(filepath.Join(tmpDir, tt.dir))",
          "",
          "[Added Lines]",
          "83:    kfile, err := NewGenerator(filepath.Join(tmpDir, tt.dir), &ks).WriteFile(filepath.Join(tmpDir, tt.dir))",
          "",
          "---------------"
        ],
        "internal/generator/varsub.go||internal/generator/varsub.go": [
          "File: internal/generator/varsub.go -> internal/generator/varsub.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: func SubstituteVariables(",
          "44:  ctx context.Context,",
          "45:  kubeClient client.Client,",
          "47:  res *resource.Resource) (*resource.Resource, error) {",
          "48:  resData, err := res.AsYAML()",
          "49:  if err != nil {",
          "",
          "[Removed Lines]",
          "46:  kustomization kustomizev1.Kustomization,",
          "",
          "[Added Lines]",
          "46:  kustomization *kustomizev1.Kustomization,",
          "",
          "---------------"
        ],
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"sigs.k8s.io/cli-utils/pkg/kstatus/polling\"",
          "30:  \"sigs.k8s.io/cli-utils/pkg/kstatus/polling/engine\"",
          "31:  ctrl \"sigs.k8s.io/controller-runtime\"",
          "34:  \"github.com/fluxcd/pkg/runtime/acl\"",
          "35:  \"github.com/fluxcd/pkg/runtime/client\"",
          "",
          "[Removed Lines]",
          "32:  crtlmetrics \"sigs.k8s.io/controller-runtime/pkg/metrics\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  \"github.com/fluxcd/pkg/runtime/events\"",
          "38:  \"github.com/fluxcd/pkg/runtime/leaderelection\"",
          "39:  \"github.com/fluxcd/pkg/runtime/logger\"",
          "41:  \"github.com/fluxcd/pkg/runtime/pprof\"",
          "42:  \"github.com/fluxcd/pkg/runtime/probes\"",
          "43:  sourcev1 \"github.com/fluxcd/source-controller/api/v1beta2\"",
          "",
          "[Removed Lines]",
          "40:  \"github.com/fluxcd/pkg/runtime/metrics\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:  ctrl.SetLogger(logger.NewLogger(logOptions))",
          "109:  watchNamespace := \"\"",
          "110:  if !watchAllNamespaces {",
          "111:   watchNamespace = os.Getenv(\"RUNTIME_NAMESPACE\")",
          "",
          "[Removed Lines]",
          "106:  metricsRecorder := metrics.NewRecorder()",
          "107:  crtlmetrics.Registry.MustRegister(metricsRecorder.Collectors()...)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:   os.Exit(1)",
          "141:  }",
          "143:  jobStatusReader := statusreaders.NewCustomJobStatusReader(mgr.GetRESTMapper())",
          "144:  pollingOpts := polling.Options{",
          "145:   CustomStatusReaders: []engine.StatusReader{jobStatusReader},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:  metricsH := helper.MustMakeMetrics(mgr)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:   ControllerName:        controllerName,",
          "149:   DefaultServiceAccount: defaultServiceAccount,",
          "150:   Client:                mgr.GetClient(),",
          "152:   EventRecorder:         eventRecorder,",
          "154:   NoCrossNamespaceRefs:  aclOptions.NoCrossNamespaceRefs,",
          "155:   NoRemoteBases:         noRemoteBases,",
          "156:   KubeConfigOpts:        kubeConfigOpts,",
          "",
          "[Removed Lines]",
          "151:   Scheme:                mgr.GetScheme(),",
          "153:   MetricsRecorder:       metricsRecorder,",
          "",
          "[Added Lines]",
          "148:   Metrics:               metricsH,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ac475ebef5793ce2292596c57b6ba865446fd66",
      "candidate_info": {
        "commit_hash": "2ac475ebef5793ce2292596c57b6ba865446fd66",
        "repo": "fluxcd/kustomize-controller",
        "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/2ac475ebef5793ce2292596c57b6ba865446fd66",
        "files": [
          "controllers/kustomization_decryptor.go",
          "controllers/kustomization_decryptor_test.go",
          "controllers/kustomization_generator.go",
          "docs/spec/v1beta2/kustomization.md",
          "go.mod",
          "go.sum",
          "internal/sops/gcpkms/keysource.go",
          "internal/sops/gcpkms/keysource_integration_test.go",
          "internal/sops/gcpkms/keysource_test.go",
          "internal/sops/gcpkms/mock_kms_server_test.go",
          "internal/sops/keyservice/options.go",
          "internal/sops/keyservice/server.go",
          "internal/sops/keyservice/server_test.go",
          "internal/sops/keyservice/utils_test.go"
        ],
        "message": "sops/gcpkms: add key source implementation\n\nThis adds a SOPS GCP KMS key source which makes use of the latest GCP\nclient, and supports both injection of master key credentials and a\ndefault client making use of environmental runtime values.\n\nThe implementation fully replaces SOPS', and is covered with\ncompatability tests.\n\nSigned-off-by: Somtochi Onyekwere <somtochionyekwere@gmail.com>",
        "before_after_code_files": [
          "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go",
          "controllers/kustomization_decryptor_test.go||controllers/kustomization_decryptor_test.go",
          "controllers/kustomization_generator.go||controllers/kustomization_generator.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/sops/gcpkms/keysource.go||internal/sops/gcpkms/keysource.go",
          "internal/sops/gcpkms/keysource_integration_test.go||internal/sops/gcpkms/keysource_integration_test.go",
          "internal/sops/gcpkms/keysource_test.go||internal/sops/gcpkms/keysource_test.go",
          "internal/sops/gcpkms/mock_kms_server_test.go||internal/sops/gcpkms/mock_kms_server_test.go",
          "internal/sops/keyservice/options.go||internal/sops/keyservice/options.go",
          "internal/sops/keyservice/server.go||internal/sops/keyservice/server.go",
          "internal/sops/keyservice/server_test.go||internal/sops/keyservice/server_test.go",
          "internal/sops/keyservice/utils_test.go||internal/sops/keyservice/utils_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go",
            "controllers/kustomization_generator.go||controllers/kustomization_generator.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go",
            "controllers/kustomization_generator.go||controllers/kustomization_generator.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "controllers/kustomization_decryptor.go||controllers/kustomization_decryptor.go": [
          "File: controllers/kustomization_decryptor.go -> controllers/kustomization_decryptor.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  DecryptionVaultTokenFileName = \"sops.vault-token\"",
          "70:  DecryptionAWSKmsFile = \"sops.aws-kms\"",
          "73:  DecryptionAzureAuthFile = \"sops.azure-kv\"",
          "77:  maxEncryptedFileSize int64 = 5 << 20",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:  DecryptionGCPCredsFile = \"sops.gcp-kms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  azureToken *azkv.Token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:  gcpCredsJSON []byte",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:       return fmt.Errorf(\"failed to import '%s' data from %s decryption Secret '%s': %w\", name, provider, secretName, err)",
          "245:      }",
          "246:     }",
          "247:    }",
          "248:   }",
          "249:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:    case filepath.Ext(DecryptionGCPCredsFile):",
          "253:     if name == DecryptionGCPCredsFile {",
          "254:      d.gcpCredsJSON = bytes.Trim(value, \"\\n\")",
          "255:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "543:   intkeyservice.WithGnuPGHome(d.gnuPGHome),",
          "544:   intkeyservice.WithVaultToken(d.vaultToken),",
          "545:   intkeyservice.WithAgeIdentities(d.ageIdentities),",
          "546:  }",
          "547:  if d.azureToken != nil {",
          "548:   serverOpts = append(serverOpts, intkeyservice.WithAzureToken{Token: d.azureToken})",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555:   intkeyservice.WithGCPCredsJSON(d.gcpCredsJSON),",
          "",
          "---------------"
        ],
        "controllers/kustomization_decryptor_test.go||controllers/kustomization_decryptor_test.go": [
          "File: controllers/kustomization_decryptor_test.go -> controllers/kustomization_decryptor_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:     g.Expect(decryptor.awsCredsProvider).ToNot(BeNil())",
          "411:    },",
          "412:   },",
          "413:   {",
          "414:    name: \"Azure Key Vault token\",",
          "415:    decryption: &kustomizev1.Decryption{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   {",
          "414:    name: \"GCP Service Account key\",",
          "415:    decryption: &kustomizev1.Decryption{",
          "416:     Provider: provider,",
          "417:     SecretRef: &meta.LocalObjectReference{",
          "418:      Name: \"gcpkms-secret\",",
          "419:     },",
          "420:    },",
          "421:    secret: &corev1.Secret{",
          "422:     ObjectMeta: metav1.ObjectMeta{",
          "423:      Name:      \"gcpkms-secret\",",
          "424:      Namespace: provider,",
          "425:     },",
          "426:     Data: map[string][]byte{",
          "427:      DecryptionGCPCredsFile: []byte(`{ \"client_id\": \"<client-id>.apps.googleusercontent.com\",",
          "428:      \"client_secret\": \"<secret>\",",
          "429:        \"type\": \"authorized_user\"}`),",
          "430:     },",
          "431:    },",
          "432:    inspectFunc: func(g *GomegaWithT, decryptor *KustomizeDecryptor) {",
          "433:     g.Expect(decryptor.gcpCredsJSON).ToNot(BeNil())",
          "434:    },",
          "435:   },",
          "",
          "---------------"
        ],
        "controllers/kustomization_generator.go||controllers/kustomization_generator.go": [
          "File: controllers/kustomization_generator.go -> controllers/kustomization_generator.go"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: replace github.com/fluxcd/kustomize-controller/api => ./api",
          "7: require (",
          "8:  filippo.io/age v1.0.0",
          "9:  github.com/Azure/azure-sdk-for-go/sdk/azcore v0.22.0",
          "10:  github.com/Azure/azure-sdk-for-go/sdk/azidentity v0.13.2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  cloud.google.com/go/kms v1.4.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:  github.com/fluxcd/pkg/testserver v0.2.0",
          "28:  github.com/fluxcd/pkg/untar v0.1.0",
          "29:  github.com/fluxcd/source-controller/api v0.24.4",
          "30:  github.com/hashicorp/go-retryablehttp v0.7.1",
          "31:  github.com/hashicorp/vault/api v1.5.0",
          "32:  github.com/onsi/gomega v1.19.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  github.com/golang/protobuf v1.5.2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:  github.com/spf13/pflag v1.0.5",
          "35:  go.mozilla.org/sops/v3 v3.7.3",
          "36:  golang.org/x/net v0.0.0-20220425223048-2871e0cb64e4",
          "37:  k8s.io/api v0.24.0",
          "38:  k8s.io/apiextensions-apiserver v0.24.0",
          "39:  k8s.io/apimachinery v0.24.0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  google.golang.org/api v0.74.0",
          "40:  google.golang.org/genproto v0.0.0-20220405205423-9d709892a2bf",
          "41:  google.golang.org/grpc v1.45.0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63: replace github.com/opencontainers/image-spec => github.com/opencontainers/image-spec v1.0.2",
          "65: require (",
          "66:  cloud.google.com/go/compute v1.5.0 // indirect",
          "67:  github.com/Azure/azure-sdk-for-go v63.3.0+incompatible // indirect",
          "68:  github.com/Azure/azure-sdk-for-go/sdk/internal v0.9.1 // indirect",
          "69:  github.com/Azure/azure-sdk-for-go/sdk/keyvault/internal v0.2.1 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  cloud.google.com/go v0.100.2 // indirect",
          "73:  cloud.google.com/go/iam v0.3.0 // indirect",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:  github.com/golang-jwt/jwt v3.2.1+incompatible // indirect",
          "121:  github.com/golang-jwt/jwt/v4 v4.3.0 // indirect",
          "122:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "124:  github.com/golang/snappy v0.0.4 // indirect",
          "125:  github.com/google/btree v1.0.1 // indirect",
          "126:  github.com/google/gnostic v0.5.7-v3refs // indirect",
          "",
          "[Removed Lines]",
          "123:  github.com/golang/protobuf v1.5.2 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:  go.uber.org/zap v1.21.0 // indirect",
          "199:  golang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4 // indirect",
          "200:  golang.org/x/oauth2 v0.0.0-20220411215720-9780585627b5 // indirect",
          "202:  golang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect",
          "203:  golang.org/x/text v0.3.7 // indirect",
          "204:  golang.org/x/time v0.0.0-20220224211638-0e9765cccd65 // indirect",
          "205:  gomodules.xyz/jsonpatch/v2 v2.2.0 // indirect",
          "207:  google.golang.org/appengine v1.6.7 // indirect",
          "210:  google.golang.org/protobuf v1.28.0 // indirect",
          "211:  gopkg.in/inf.v0 v0.9.1 // indirect",
          "212:  gopkg.in/ini.v1 v1.66.4 // indirect",
          "",
          "[Removed Lines]",
          "201:  golang.org/x/sys v0.0.0-20220412211240-33da011f77ad // indirect",
          "206:  google.golang.org/api v0.74.0 // indirect",
          "208:  google.golang.org/genproto v0.0.0-20220405205423-9d709892a2bf // indirect",
          "209:  google.golang.org/grpc v1.45.0 // indirect",
          "",
          "[Added Lines]",
          "207:  golang.org/x/sys v0.0.0-20220513210249-45d2b4557a2a // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: cloud.google.com/go v0.94.1/go.mod h1:qAlAugsXlC+JWO+Bke5vCtc9ONxjQT3drlTTnAplMW4=",
          "28: cloud.google.com/go v0.97.0/go.mod h1:GF7l59pYBVlXQIBLx3a761cZ41F9bBH3JUlihCt2Udc=",
          "29: cloud.google.com/go v0.99.0/go.mod h1:w0Xx2nLzqWJPuozYQX+hFfCSI8WioryfRDzkoI/Y2ZA=",
          "30: cloud.google.com/go v0.100.2/go.mod h1:4Xra9TjzAeYHrl5+oeLlzbM2k3mjVhZh4UqTZ//w99A=",
          "31: cloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=",
          "32: cloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: cloud.google.com/go v0.100.1/go.mod h1:fs4QogzfH5n2pBXBP9vRiU+eCny7lD2vmFZy79Iuw1U=",
          "31: cloud.google.com/go v0.100.2 h1:t9Iw5QH5v4XtlEQaCtUY7x6sCABps8sW0acw7e2WQ6Y=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=",
          "42: cloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=",
          "43: cloud.google.com/go/firestore v1.1.0/go.mod h1:ulACoGHTpvq5r8rxGJ4ddJZBZqakUQqClKRT5SZwBmk=",
          "44: cloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=",
          "45: cloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=",
          "46: cloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: cloud.google.com/go/iam v0.1.0/go.mod h1:vcUNEa0pEm0qRVpmWepWaFMIAI8/hjB9mO8rNCJtF6c=",
          "47: cloud.google.com/go/iam v0.3.0 h1:exkAomrVUuzx9kWFI1wm3KI0uoDeUFPB4kKGzx6x+Gc=",
          "48: cloud.google.com/go/iam v0.3.0/go.mod h1:XzJPvDayI+9zsASAFO68Hk07u3z+f+JrT2xXNdp4bnY=",
          "49: cloud.google.com/go/kms v1.4.0 h1:iElbfoE61VeLhnZcGOltqL8HIly8Nhbe5t6JlH9GXjo=",
          "50: cloud.google.com/go/kms v1.4.0/go.mod h1:fajBHndQ+6ubNw6Ss2sSd+SWvjL26RNo/dr7uxsnnOA=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1094: golang.org/x/sys v0.0.0-20220209214540-3681064d5158/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1095: golang.org/x/sys v0.0.0-20220227234510-4e6760a101f9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1096: golang.org/x/sys v0.0.0-20220328115105-d36c6a25d886/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "1099: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "1100: golang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=",
          "1101: golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "",
          "[Removed Lines]",
          "1097: golang.org/x/sys v0.0.0-20220412211240-33da011f77ad h1:ntjMns5wyP/fN65tdBD4g8J5w8n015+iIIs9rtjXkY0=",
          "1098: golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "[Added Lines]",
          "1104: golang.org/x/sys v0.0.0-20220513210249-45d2b4557a2a h1:N2T1jUrTQE9Re6TFF5PhvEHXHCguynGhKjWVsIUt5cY=",
          "1105: golang.org/x/sys v0.0.0-20220513210249-45d2b4557a2a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "---------------"
        ],
        "internal/sops/gcpkms/keysource.go||internal/sops/gcpkms/keysource.go": [
          "File: internal/sops/gcpkms/keysource.go -> internal/sops/gcpkms/keysource.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: package gcpkms",
          "9: import (",
          "10:  \"context\"",
          "11:  \"encoding/base64\"",
          "12:  \"fmt\"",
          "13:  \"regexp\"",
          "14:  \"time\"",
          "16:  kms \"cloud.google.com/go/kms/apiv1\"",
          "17:  \"google.golang.org/api/option\"",
          "18:  kmspb \"google.golang.org/genproto/googleapis/cloud/kms/v1\"",
          "19:  \"google.golang.org/grpc\"",
          "20: )",
          "22: var (",
          "24:  gcpkmsTTL = time.Hour * 24 * 30 * 6",
          "25: )",
          "29: type CredentialJSON []byte",
          "32: func (c CredentialJSON) ApplyToMasterKey(key *MasterKey) {",
          "33:  key.credentialJSON = c",
          "34: }",
          "41: type MasterKey struct {",
          "44:  ResourceID string",
          "46:  EncryptedKey string",
          "49:  CreationDate time.Time",
          "53:  credentialJSON []byte",
          "57:  grpcConn *grpc.ClientConn",
          "58: }",
          "62: func MasterKeyFromResourceID(resourceID string) *MasterKey {",
          "63:  return &MasterKey{",
          "64:   ResourceID:   resourceID,",
          "65:   CreationDate: time.Now().UTC(),",
          "66:  }",
          "67: }",
          "71: func (key *MasterKey) Encrypt(datakey []byte) error {",
          "72:  cloudkmsService, err := key.newKMSClient()",
          "73:  if err != nil {",
          "74:   return err",
          "75:  }",
          "76:  defer cloudkmsService.Close()",
          "78:  req := &kmspb.EncryptRequest{",
          "79:   Name:      key.ResourceID,",
          "80:   Plaintext: datakey,",
          "81:  }",
          "82:  ctx := context.Background()",
          "83:  resp, err := cloudkmsService.Encrypt(ctx, req)",
          "84:  if err != nil {",
          "85:   return fmt.Errorf(\"failed to encrypt sops data key with GCP KMS: %w\", err)",
          "86:  }",
          "87:  key.EncryptedKey = base64.StdEncoding.EncodeToString(resp.Ciphertext)",
          "88:  return nil",
          "89: }",
          "92: func (key *MasterKey) SetEncryptedDataKey(enc []byte) {",
          "93:  key.EncryptedKey = string(enc)",
          "94: }",
          "97: func (key *MasterKey) EncryptedDataKey() []byte {",
          "98:  return []byte(key.EncryptedKey)",
          "99: }",
          "103: func (key *MasterKey) EncryptIfNeeded(dataKey []byte) error {",
          "104:  if key.EncryptedKey == \"\" {",
          "105:   return key.Encrypt(dataKey)",
          "106:  }",
          "107:  return nil",
          "108: }",
          "112: func (key *MasterKey) Decrypt() ([]byte, error) {",
          "113:  service, err := key.newKMSClient()",
          "114:  if err != nil {",
          "115:   return nil, err",
          "116:  }",
          "117:  defer service.Close()",
          "119:  decodedCipher, err := base64.StdEncoding.DecodeString(string(key.EncryptedDataKey()))",
          "120:  if err != nil {",
          "121:   return nil, err",
          "122:  }",
          "123:  req := &kmspb.DecryptRequest{",
          "124:   Name:       key.ResourceID,",
          "125:   Ciphertext: decodedCipher,",
          "126:  }",
          "127:  ctx := context.Background()",
          "128:  resp, err := service.Decrypt(ctx, req)",
          "129:  if err != nil {",
          "130:   return nil, fmt.Errorf(\"failed to decrypt sops data key with GCP KMS Key: %w\", err)",
          "131:  }",
          "133:  return resp.Plaintext, nil",
          "134: }",
          "137: func (key *MasterKey) NeedsRotation() bool {",
          "138:  return time.Since(key.CreationDate) > (gcpkmsTTL)",
          "139: }",
          "142: func (key *MasterKey) ToString() string {",
          "143:  return key.ResourceID",
          "144: }",
          "147: func (key MasterKey) ToMap() map[string]interface{} {",
          "148:  out := make(map[string]interface{})",
          "149:  out[\"resource_id\"] = key.ResourceID",
          "150:  out[\"created_at\"] = key.CreationDate.UTC().Format(time.RFC3339)",
          "151:  out[\"enc\"] = key.EncryptedKey",
          "152:  return out",
          "153: }",
          "159: func (key *MasterKey) newKMSClient() (*kms.KeyManagementClient, error) {",
          "160:  re := regexp.MustCompile(`^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$`)",
          "161:  matches := re.FindStringSubmatch(key.ResourceID)",
          "162:  if matches == nil {",
          "163:   return nil, fmt.Errorf(\"no valid resourceId found in %q\", key.ResourceID)",
          "164:  }",
          "166:  var opts []option.ClientOption",
          "167:  if key.credentialJSON != nil {",
          "168:   opts = append(opts, option.WithCredentialsJSON(key.credentialJSON))",
          "169:  }",
          "170:  if key.grpcConn != nil {",
          "171:   opts = append(opts, option.WithGRPCConn(key.grpcConn))",
          "172:  }",
          "174:  ctx := context.Background()",
          "175:  client, err := kms.NewKeyManagementClient(ctx, opts...)",
          "176:  if err != nil {",
          "177:   return nil, err",
          "178:  }",
          "180:  return client, nil",
          "181: }",
          "",
          "---------------"
        ],
        "internal/sops/gcpkms/keysource_integration_test.go||internal/sops/gcpkms/keysource_integration_test.go": [
          "File: internal/sops/gcpkms/keysource_integration_test.go -> internal/sops/gcpkms/keysource_integration_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: package gcpkms",
          "12: import (",
          "13:  \"context\"",
          "14:  \"fmt\"",
          "15:  \"io/ioutil\"",
          "16:  \"os\"",
          "17:  \"testing\"",
          "19:  . \"github.com/onsi/gomega\"",
          "20:  \"go.mozilla.org/sops/v3/gcpkms\"",
          "22:  \"google.golang.org/api/option\"",
          "23:  kmspb \"google.golang.org/genproto/googleapis/cloud/kms/v1\"",
          "24:  \"google.golang.org/grpc/codes\"",
          "25:  \"google.golang.org/grpc/status\"",
          "27:  kms \"cloud.google.com/go/kms/apiv1\"",
          "28: )",
          "30: var (",
          "31:  project       = os.Getenv(\"TEST_PROJECT\")",
          "32:  testKeyring   = os.Getenv(\"TEST_KEYRING\")",
          "33:  testKey       = os.Getenv(\"TEST_CRYPTO_KEY\")",
          "34:  testCredsJSON = os.Getenv(\"TEST_CRED_JSON\")",
          "35:  resourceID    = fmt.Sprintf(\"projects/%s/locations/global/keyRings/%s/cryptoKeys/%s\",",
          "36:   project, testKeyring, testKey)",
          "37: )",
          "39: func TestMasterKey_Decrypt_SOPS_Compat(t *testing.T) {",
          "40:  g := NewWithT(t)",
          "41:  os.Setenv(\"GOOGLE_APPLICATION_CREDENTIALS\", testCredsJSON)",
          "43:  g.Expect(createKMSKeyIfNotExists(resourceID)).To(Succeed())",
          "45:  dataKey := []byte(\"blue golden light\")",
          "46:  encryptedKey := gcpkms.NewMasterKeyFromResourceID(resourceID)",
          "47:  g.Expect(encryptedKey.Encrypt(dataKey)).To(Succeed())",
          "49:  decryptionKey := MasterKeyFromResourceID(resourceID)",
          "50:  creds, err := ioutil.ReadFile(testCredsJSON)",
          "51:  g.Expect(err).ToNot(HaveOccurred())",
          "52:  decryptionKey.EncryptedKey = encryptedKey.EncryptedKey",
          "53:  decryptionKey.credentialJSON = creds",
          "54:  dec, err := decryptionKey.Decrypt()",
          "55:  g.Expect(err).ToNot(HaveOccurred())",
          "56:  g.Expect(dec).To(Equal(dataKey))",
          "57: }",
          "59: func TestMasterKey_Encrypt_SOPS_Compat(t *testing.T) {",
          "60:  os.Setenv(\"GOOGLE_APPLICATION_CREDENTIALS\", testCredsJSON)",
          "61:  g := NewWithT(t)",
          "63:  g.Expect(createKMSKeyIfNotExists(resourceID)).To(Succeed())",
          "65:  dataKey := []byte(\"silver golden lights\")",
          "67:  encryptionKey := MasterKeyFromResourceID(resourceID)",
          "68:  creds, err := ioutil.ReadFile(testCredsJSON)",
          "69:  g.Expect(err).ToNot(HaveOccurred())",
          "70:  encryptionKey.credentialJSON = creds",
          "71:  err = encryptionKey.Encrypt(dataKey)",
          "72:  g.Expect(err).ToNot(HaveOccurred())",
          "74:  decryptionKey := gcpkms.NewMasterKeyFromResourceID(resourceID)",
          "75:  decryptionKey.EncryptedKey = encryptionKey.EncryptedKey",
          "76:  dec, err := decryptionKey.Decrypt()",
          "77:  g.Expect(err).ToNot(HaveOccurred())",
          "78:  g.Expect(dec).To(Equal(dataKey))",
          "79: }",
          "81: func TestMasterKey_EncryptDecrypt_RoundTrip(t *testing.T) {",
          "82:  g := NewWithT(t)",
          "84:  g.Expect(createKMSKeyIfNotExists(resourceID)).To(Succeed())",
          "86:  key := MasterKeyFromResourceID(resourceID)",
          "87:  creds, err := ioutil.ReadFile(testCredsJSON)",
          "88:  g.Expect(err).ToNot(HaveOccurred())",
          "89:  key.credentialJSON = creds",
          "91:  datakey := []byte(\"a thousand splendid sons\")",
          "92:  g.Expect(key.Encrypt(datakey)).To(Succeed())",
          "93:  g.Expect(key.EncryptedKey).ToNot(BeEmpty())",
          "95:  dec, err := key.Decrypt()",
          "96:  g.Expect(err).ToNot(HaveOccurred())",
          "97:  g.Expect(dec).To(Equal(datakey))",
          "98: }",
          "100: func createKMSKeyIfNotExists(resourceID string) error {",
          "101:  ctx := context.Background()",
          "103:  c, err := kms.NewKeyManagementClient(ctx, option.WithCredentialsFile(testCredsJSON))",
          "104:  if err != nil {",
          "105:   return fmt.Errorf(\"err creating client: %q\", err)",
          "106:  }",
          "108:  getCryptoKeyReq := &kmspb.GetCryptoKeyRequest{",
          "109:   Name: resourceID,",
          "110:  }",
          "111:  _, err = c.GetCryptoKey(ctx, getCryptoKeyReq)",
          "112:  if err == nil {",
          "113:   return nil",
          "114:  }",
          "116:  e, ok := status.FromError(err)",
          "117:  if !ok || (ok && e.Code() != codes.NotFound) {",
          "118:   return fmt.Errorf(\"err getting crypto key: %q\", err)",
          "119:  }",
          "121:  projectID := fmt.Sprintf(\"projects/%s/locations/global\", project)",
          "122:  createKeyRingReq := &kmspb.CreateKeyRingRequest{",
          "123:   Parent:    projectID,",
          "124:   KeyRingId: testKeyring,",
          "125:  }",
          "127:  _, err = c.CreateKeyRing(ctx, createKeyRingReq)",
          "128:  e, ok = status.FromError(err)",
          "129:  if err != nil && !(ok && e.Code() == codes.AlreadyExists) {",
          "130:   return fmt.Errorf(\"err creating key ring: %q\", err)",
          "131:  }",
          "133:  keyRingName := fmt.Sprintf(\"%s/keyRings/%s\", projectID, testKeyring)",
          "134:  keyReq := &kmspb.CreateCryptoKeyRequest{",
          "135:   Parent:      keyRingName,",
          "136:   CryptoKeyId: testKey,",
          "137:   CryptoKey: &kmspb.CryptoKey{",
          "138:    Purpose: kmspb.CryptoKey_ENCRYPT_DECRYPT,",
          "139:   },",
          "140:  }",
          "141:  _, err = c.CreateCryptoKey(ctx, keyReq)",
          "142:  e, ok = status.FromError(err)",
          "143:  if err != nil && !(ok && e.Code() == codes.AlreadyExists) {",
          "144:   return fmt.Errorf(\"err creating crypto key: %q\", err)",
          "145:  }",
          "147:  return nil",
          "148: }",
          "",
          "---------------"
        ],
        "internal/sops/gcpkms/keysource_test.go||internal/sops/gcpkms/keysource_test.go": [
          "File: internal/sops/gcpkms/keysource_test.go -> internal/sops/gcpkms/keysource_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: package gcpkms",
          "9: import (",
          "10:  \"encoding/base64\"",
          "11:  \"fmt\"",
          "12:  \"log\"",
          "13:  \"net\"",
          "14:  \"testing\"",
          "15:  \"time\"",
          "17:  . \"github.com/onsi/gomega\"",
          "18:  kmspb \"google.golang.org/genproto/googleapis/cloud/kms/v1\"",
          "19:  \"google.golang.org/grpc\"",
          "20: )",
          "22: var (",
          "23:  testResourceID = \"projects/test-flux/locations/global/keyRings/test-flux/cryptoKeys/sops\"",
          "24:  decryptedData  = \"decrypted data\"",
          "25:  encryptedData  = \"encrypted data\"",
          "26: )",
          "28: func TestMasterKey_EncryptedDataKey(t *testing.T) {",
          "29:  g := NewWithT(t)",
          "30:  key := MasterKey{EncryptedKey: encryptedData}",
          "31:  g.Expect(key.EncryptedDataKey()).To(BeEquivalentTo(encryptedData))",
          "32: }",
          "34: func TestMasterKey_SetEncryptedDataKey(t *testing.T) {",
          "35:  g := NewWithT(t)",
          "36:  enc := \"encrypted key\"",
          "37:  key := &MasterKey{}",
          "38:  key.SetEncryptedDataKey([]byte(enc))",
          "39:  g.Expect(key.EncryptedDataKey()).To(BeEquivalentTo(enc))",
          "40: }",
          "42: func TestMasterKey_EncryptIfNeeded(t *testing.T) {",
          "43:  g := NewWithT(t)",
          "44:  key := MasterKey{EncryptedKey: \"encrypted key\"}",
          "45:  g.Expect(key.EncryptedDataKey()).To(BeEquivalentTo(key.EncryptedKey))",
          "47:  err := key.EncryptIfNeeded([]byte(\"sops data key\"))",
          "48:  g.Expect(err).ToNot(HaveOccurred())",
          "49:  g.Expect(key.EncryptedDataKey()).To(BeEquivalentTo(key.EncryptedKey))",
          "50: }",
          "52: func TestMasterKey_ToString(t *testing.T) {",
          "53:  rsrcId := testResourceID",
          "54:  g := NewWithT(t)",
          "55:  key := MasterKeyFromResourceID(rsrcId)",
          "56:  g.Expect(key.ToString()).To(Equal(rsrcId))",
          "57: }",
          "59: func TestMasterKey_ToMap(t *testing.T) {",
          "60:  g := NewWithT(t)",
          "61:  key := MasterKey{",
          "62:   credentialJSON: []byte(\"sensitive creds\"),",
          "63:   CreationDate:   time.Date(2016, time.October, 31, 10, 0, 0, 0, time.UTC),",
          "64:   ResourceID:     testResourceID,",
          "65:   EncryptedKey:   \"this is encrypted\",",
          "66:  }",
          "67:  g.Expect(key.ToMap()).To(Equal(map[string]interface{}{",
          "68:   \"resource_id\": testResourceID,",
          "69:   \"enc\":         \"this is encrypted\",",
          "70:   \"created_at\":  \"2016-10-31T10:00:00Z\",",
          "71:  }))",
          "72: }",
          "74: func TestMasterKey_createCloudKMSService(t *testing.T) {",
          "75:  g := NewWithT(t)",
          "77:  tests := []struct {",
          "78:   key       MasterKey",
          "79:   errString string",
          "80:  }{",
          "81:   {",
          "82:    key: MasterKey{",
          "83:     ResourceID:     \"/projects\",",
          "84:     credentialJSON: []byte(\"some secret\"),",
          "85:    },",
          "86:    errString: \"no valid resourceId\",",
          "87:   },",
          "88:   {",
          "89:    key: MasterKey{",
          "90:     ResourceID: testResourceID,",
          "91:     credentialJSON: []byte(`{ \"client_id\": \"<client-id>.apps.googleusercontent.com\",",
          "92:    \"client_secret\": \"<secret>\",",
          "93:   \"type\": \"authorized_user\"}`),",
          "94:    },",
          "95:   },",
          "96:  }",
          "98:  for _, tt := range tests {",
          "99:   _, err := tt.key.newKMSClient()",
          "100:   if tt.errString != \"\" {",
          "101:    g.Expect(err).To(HaveOccurred())",
          "102:    g.Expect(err.Error()).To(ContainSubstring(tt.errString))",
          "103:   } else {",
          "104:    g.Expect(err).To(BeNil())",
          "105:   }",
          "106:  }",
          "107: }",
          "109: func TestMasterKey_Decrypt(t *testing.T) {",
          "110:  g := NewWithT(t)",
          "112:  mockKeyManagement.err = nil",
          "113:  mockKeyManagement.reqs = nil",
          "114:  mockKeyManagement.resps = append(mockKeyManagement.resps[:0], &kmspb.DecryptResponse{",
          "115:   Plaintext: []byte(decryptedData),",
          "116:  })",
          "117:  key := MasterKey{",
          "118:   grpcConn:     newGRPCServer(\"0\"),",
          "119:   ResourceID:   testResourceID,",
          "120:   EncryptedKey: \"encryptedKey\",",
          "121:  }",
          "122:  data, err := key.Decrypt()",
          "123:  g.Expect(err).ToNot(HaveOccurred())",
          "124:  g.Expect(data).To(BeEquivalentTo(decryptedData))",
          "125: }",
          "127: func TestMasterKey_Encrypt(t *testing.T) {",
          "128:  g := NewWithT(t)",
          "130:  mockKeyManagement.err = nil",
          "131:  mockKeyManagement.reqs = nil",
          "132:  mockKeyManagement.resps = append(mockKeyManagement.resps[:0], &kmspb.EncryptResponse{",
          "133:   Ciphertext: []byte(encryptedData),",
          "134:  })",
          "136:  key := MasterKey{",
          "137:   grpcConn:   newGRPCServer(\"0\"),",
          "138:   ResourceID: testResourceID,",
          "139:  }",
          "140:  err := key.Encrypt([]byte(\"encrypt\"))",
          "141:  g.Expect(err).ToNot(HaveOccurred())",
          "142:  g.Expect(key.EncryptedDataKey()).To(BeEquivalentTo(base64.StdEncoding.EncodeToString([]byte(encryptedData))))",
          "143: }",
          "145: var (",
          "146:  mockKeyManagement mockKeyManagementServer",
          "147: )",
          "149: func newGRPCServer(port string) *grpc.ClientConn {",
          "150:  serv := grpc.NewServer()",
          "151:  kmspb.RegisterKeyManagementServiceServer(serv, &mockKeyManagement)",
          "153:  lis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%s\", port))",
          "154:  if err != nil {",
          "155:   log.Fatal(err)",
          "156:  }",
          "157:  go serv.Serve(lis)",
          "159:  conn, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())",
          "160:  if err != nil {",
          "161:   log.Fatal(err)",
          "162:  }",
          "164:  return conn",
          "165: }",
          "",
          "---------------"
        ],
        "internal/sops/gcpkms/mock_kms_server_test.go||internal/sops/gcpkms/mock_kms_server_test.go": [
          "File: internal/sops/gcpkms/mock_kms_server_test.go -> internal/sops/gcpkms/mock_kms_server_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package gcpkms",
          "21: import (",
          "22:  \"context\"",
          "23:  \"fmt\"",
          "24:  \"io\"",
          "25:  \"strings\"",
          "27:  \"github.com/golang/protobuf/proto\"",
          "28:  \"github.com/golang/protobuf/ptypes\"",
          "29:  kmspb \"google.golang.org/genproto/googleapis/cloud/kms/v1\"",
          "31:  status \"google.golang.org/genproto/googleapis/rpc/status\"",
          "32:  \"google.golang.org/grpc/metadata\"",
          "33: )",
          "35: var _ = io.EOF",
          "36: var _ = ptypes.MarshalAny",
          "37: var _ status.Status",
          "39: type mockKeyManagementServer struct {",
          "43:  kmspb.KeyManagementServiceServer",
          "45:  reqs []proto.Message",
          "48:  err error",
          "51:  resps []proto.Message",
          "52: }",
          "54: func (s *mockKeyManagementServer) ListKeyRings(ctx context.Context, req *kmspb.ListKeyRingsRequest) (*kmspb.ListKeyRingsResponse, error) {",
          "55:  md, _ := metadata.FromIncomingContext(ctx)",
          "56:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "57:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "58:  }",
          "59:  s.reqs = append(s.reqs, req)",
          "60:  if s.err != nil {",
          "61:   return nil, s.err",
          "62:  }",
          "63:  return s.resps[0].(*kmspb.ListKeyRingsResponse), nil",
          "64: }",
          "66: func (s *mockKeyManagementServer) ListCryptoKeys(ctx context.Context, req *kmspb.ListCryptoKeysRequest) (*kmspb.ListCryptoKeysResponse, error) {",
          "67:  md, _ := metadata.FromIncomingContext(ctx)",
          "68:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "69:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "70:  }",
          "71:  s.reqs = append(s.reqs, req)",
          "72:  if s.err != nil {",
          "73:   return nil, s.err",
          "74:  }",
          "75:  return s.resps[0].(*kmspb.ListCryptoKeysResponse), nil",
          "76: }",
          "78: func (s *mockKeyManagementServer) ListCryptoKeyVersions(ctx context.Context, req *kmspb.ListCryptoKeyVersionsRequest) (*kmspb.ListCryptoKeyVersionsResponse, error) {",
          "79:  md, _ := metadata.FromIncomingContext(ctx)",
          "80:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "81:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "82:  }",
          "83:  s.reqs = append(s.reqs, req)",
          "84:  if s.err != nil {",
          "85:   return nil, s.err",
          "86:  }",
          "87:  return s.resps[0].(*kmspb.ListCryptoKeyVersionsResponse), nil",
          "88: }",
          "90: func (s *mockKeyManagementServer) ListImportJobs(ctx context.Context, req *kmspb.ListImportJobsRequest) (*kmspb.ListImportJobsResponse, error) {",
          "91:  md, _ := metadata.FromIncomingContext(ctx)",
          "92:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "93:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "94:  }",
          "95:  s.reqs = append(s.reqs, req)",
          "96:  if s.err != nil {",
          "97:   return nil, s.err",
          "98:  }",
          "99:  return s.resps[0].(*kmspb.ListImportJobsResponse), nil",
          "100: }",
          "102: func (s *mockKeyManagementServer) GetKeyRing(ctx context.Context, req *kmspb.GetKeyRingRequest) (*kmspb.KeyRing, error) {",
          "103:  md, _ := metadata.FromIncomingContext(ctx)",
          "104:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "105:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "106:  }",
          "107:  s.reqs = append(s.reqs, req)",
          "108:  if s.err != nil {",
          "109:   return nil, s.err",
          "110:  }",
          "111:  return s.resps[0].(*kmspb.KeyRing), nil",
          "112: }",
          "114: func (s *mockKeyManagementServer) GetCryptoKey(ctx context.Context, req *kmspb.GetCryptoKeyRequest) (*kmspb.CryptoKey, error) {",
          "115:  md, _ := metadata.FromIncomingContext(ctx)",
          "116:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "117:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "118:  }",
          "119:  s.reqs = append(s.reqs, req)",
          "120:  if s.err != nil {",
          "121:   return nil, s.err",
          "122:  }",
          "123:  return s.resps[0].(*kmspb.CryptoKey), nil",
          "124: }",
          "126: func (s *mockKeyManagementServer) GetCryptoKeyVersion(ctx context.Context, req *kmspb.GetCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "127:  md, _ := metadata.FromIncomingContext(ctx)",
          "128:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "129:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "130:  }",
          "131:  s.reqs = append(s.reqs, req)",
          "132:  if s.err != nil {",
          "133:   return nil, s.err",
          "134:  }",
          "135:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "136: }",
          "138: func (s *mockKeyManagementServer) GetPublicKey(ctx context.Context, req *kmspb.GetPublicKeyRequest) (*kmspb.PublicKey, error) {",
          "139:  md, _ := metadata.FromIncomingContext(ctx)",
          "140:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "141:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "142:  }",
          "143:  s.reqs = append(s.reqs, req)",
          "144:  if s.err != nil {",
          "145:   return nil, s.err",
          "146:  }",
          "147:  return s.resps[0].(*kmspb.PublicKey), nil",
          "148: }",
          "150: func (s *mockKeyManagementServer) GetImportJob(ctx context.Context, req *kmspb.GetImportJobRequest) (*kmspb.ImportJob, error) {",
          "151:  md, _ := metadata.FromIncomingContext(ctx)",
          "152:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "153:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "154:  }",
          "155:  s.reqs = append(s.reqs, req)",
          "156:  if s.err != nil {",
          "157:   return nil, s.err",
          "158:  }",
          "159:  return s.resps[0].(*kmspb.ImportJob), nil",
          "160: }",
          "162: func (s *mockKeyManagementServer) CreateKeyRing(ctx context.Context, req *kmspb.CreateKeyRingRequest) (*kmspb.KeyRing, error) {",
          "163:  md, _ := metadata.FromIncomingContext(ctx)",
          "164:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "165:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "166:  }",
          "167:  s.reqs = append(s.reqs, req)",
          "168:  if s.err != nil {",
          "169:   return nil, s.err",
          "170:  }",
          "171:  return s.resps[0].(*kmspb.KeyRing), nil",
          "172: }",
          "174: func (s *mockKeyManagementServer) CreateCryptoKey(ctx context.Context, req *kmspb.CreateCryptoKeyRequest) (*kmspb.CryptoKey, error) {",
          "175:  md, _ := metadata.FromIncomingContext(ctx)",
          "176:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "177:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "178:  }",
          "179:  s.reqs = append(s.reqs, req)",
          "180:  if s.err != nil {",
          "181:   return nil, s.err",
          "182:  }",
          "183:  return s.resps[0].(*kmspb.CryptoKey), nil",
          "184: }",
          "186: func (s *mockKeyManagementServer) CreateCryptoKeyVersion(ctx context.Context, req *kmspb.CreateCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "187:  md, _ := metadata.FromIncomingContext(ctx)",
          "188:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "189:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "190:  }",
          "191:  s.reqs = append(s.reqs, req)",
          "192:  if s.err != nil {",
          "193:   return nil, s.err",
          "194:  }",
          "195:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "196: }",
          "198: func (s *mockKeyManagementServer) ImportCryptoKeyVersion(ctx context.Context, req *kmspb.ImportCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "199:  md, _ := metadata.FromIncomingContext(ctx)",
          "200:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "201:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "202:  }",
          "203:  s.reqs = append(s.reqs, req)",
          "204:  if s.err != nil {",
          "205:   return nil, s.err",
          "206:  }",
          "207:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "208: }",
          "210: func (s *mockKeyManagementServer) CreateImportJob(ctx context.Context, req *kmspb.CreateImportJobRequest) (*kmspb.ImportJob, error) {",
          "211:  md, _ := metadata.FromIncomingContext(ctx)",
          "212:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "213:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "214:  }",
          "215:  s.reqs = append(s.reqs, req)",
          "216:  if s.err != nil {",
          "217:   return nil, s.err",
          "218:  }",
          "219:  return s.resps[0].(*kmspb.ImportJob), nil",
          "220: }",
          "222: func (s *mockKeyManagementServer) UpdateCryptoKey(ctx context.Context, req *kmspb.UpdateCryptoKeyRequest) (*kmspb.CryptoKey, error) {",
          "223:  md, _ := metadata.FromIncomingContext(ctx)",
          "224:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "225:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "226:  }",
          "227:  s.reqs = append(s.reqs, req)",
          "228:  if s.err != nil {",
          "229:   return nil, s.err",
          "230:  }",
          "231:  return s.resps[0].(*kmspb.CryptoKey), nil",
          "232: }",
          "234: func (s *mockKeyManagementServer) UpdateCryptoKeyVersion(ctx context.Context, req *kmspb.UpdateCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "235:  md, _ := metadata.FromIncomingContext(ctx)",
          "236:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "237:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "238:  }",
          "239:  s.reqs = append(s.reqs, req)",
          "240:  if s.err != nil {",
          "241:   return nil, s.err",
          "242:  }",
          "243:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "244: }",
          "246: func (s *mockKeyManagementServer) Encrypt(ctx context.Context, req *kmspb.EncryptRequest) (*kmspb.EncryptResponse, error) {",
          "247:  md, _ := metadata.FromIncomingContext(ctx)",
          "248:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "249:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "250:  }",
          "251:  s.reqs = append(s.reqs, req)",
          "252:  if s.err != nil {",
          "253:   return nil, s.err",
          "254:  }",
          "255:  return s.resps[0].(*kmspb.EncryptResponse), nil",
          "256: }",
          "258: func (s *mockKeyManagementServer) Decrypt(ctx context.Context, req *kmspb.DecryptRequest) (*kmspb.DecryptResponse, error) {",
          "259:  md, _ := metadata.FromIncomingContext(ctx)",
          "260:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "261:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "262:  }",
          "263:  s.reqs = append(s.reqs, req)",
          "264:  if s.err != nil {",
          "265:   return nil, s.err",
          "266:  }",
          "267:  return s.resps[0].(*kmspb.DecryptResponse), nil",
          "268: }",
          "270: func (s *mockKeyManagementServer) AsymmetricSign(ctx context.Context, req *kmspb.AsymmetricSignRequest) (*kmspb.AsymmetricSignResponse, error) {",
          "271:  md, _ := metadata.FromIncomingContext(ctx)",
          "272:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "273:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "274:  }",
          "275:  s.reqs = append(s.reqs, req)",
          "276:  if s.err != nil {",
          "277:   return nil, s.err",
          "278:  }",
          "279:  return s.resps[0].(*kmspb.AsymmetricSignResponse), nil",
          "280: }",
          "282: func (s *mockKeyManagementServer) AsymmetricDecrypt(ctx context.Context, req *kmspb.AsymmetricDecryptRequest) (*kmspb.AsymmetricDecryptResponse, error) {",
          "283:  md, _ := metadata.FromIncomingContext(ctx)",
          "284:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "285:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "286:  }",
          "287:  s.reqs = append(s.reqs, req)",
          "288:  if s.err != nil {",
          "289:   return nil, s.err",
          "290:  }",
          "291:  return s.resps[0].(*kmspb.AsymmetricDecryptResponse), nil",
          "292: }",
          "294: func (s *mockKeyManagementServer) UpdateCryptoKeyPrimaryVersion(ctx context.Context, req *kmspb.UpdateCryptoKeyPrimaryVersionRequest) (*kmspb.CryptoKey, error) {",
          "295:  md, _ := metadata.FromIncomingContext(ctx)",
          "296:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "297:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "298:  }",
          "299:  s.reqs = append(s.reqs, req)",
          "300:  if s.err != nil {",
          "301:   return nil, s.err",
          "302:  }",
          "303:  return s.resps[0].(*kmspb.CryptoKey), nil",
          "304: }",
          "306: func (s *mockKeyManagementServer) DestroyCryptoKeyVersion(ctx context.Context, req *kmspb.DestroyCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "307:  md, _ := metadata.FromIncomingContext(ctx)",
          "308:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "309:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "310:  }",
          "311:  s.reqs = append(s.reqs, req)",
          "312:  if s.err != nil {",
          "313:   return nil, s.err",
          "314:  }",
          "315:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "316: }",
          "318: func (s *mockKeyManagementServer) RestoreCryptoKeyVersion(ctx context.Context, req *kmspb.RestoreCryptoKeyVersionRequest) (*kmspb.CryptoKeyVersion, error) {",
          "319:  md, _ := metadata.FromIncomingContext(ctx)",
          "320:  if xg := md[\"x-goog-api-client\"]; len(xg) == 0 || !strings.Contains(xg[0], \"gl-go/\") {",
          "321:   return nil, fmt.Errorf(\"x-goog-api-client = %v, expected gl-go key\", xg)",
          "322:  }",
          "323:  s.reqs = append(s.reqs, req)",
          "324:  if s.err != nil {",
          "325:   return nil, s.err",
          "326:  }",
          "327:  return s.resps[0].(*kmspb.CryptoKeyVersion), nil",
          "328: }",
          "",
          "---------------"
        ],
        "internal/sops/keyservice/options.go||internal/sops/keyservice/options.go": [
          "File: internal/sops/keyservice/options.go -> internal/sops/keyservice/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import (",
          "10:  extage \"filippo.io/age\"",
          "11:  \"go.mozilla.org/sops/v3/keyservice\"",
          "13:  \"github.com/fluxcd/kustomize-controller/internal/sops/age\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"github.com/fluxcd/kustomize-controller/internal/sops/gcpkms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  s.awsCredsProvider = o.CredsProvider",
          "58: }",
          "61: type WithAzureToken struct {",
          "62:  Token *azkv.Token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: type WithGCPCredsJSON []byte",
          "66: func (o WithGCPCredsJSON) ApplyToServer(s *Server) {",
          "67:  s.gcpCredsJSON = gcpkms.CredentialJSON(o)",
          "68: }",
          "",
          "---------------"
        ],
        "internal/sops/keyservice/server.go||internal/sops/keyservice/server.go": [
          "File: internal/sops/keyservice/server.go -> internal/sops/keyservice/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/fluxcd/kustomize-controller/internal/sops/age\"",
          "16:  \"github.com/fluxcd/kustomize-controller/internal/sops/awskms\"",
          "17:  \"github.com/fluxcd/kustomize-controller/internal/sops/azkv\"",
          "18:  \"github.com/fluxcd/kustomize-controller/internal/sops/hcvault\"",
          "19:  \"github.com/fluxcd/kustomize-controller/internal/sops/pgp\"",
          "20: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"github.com/fluxcd/kustomize-controller/internal/sops/gcpkms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  awsCredsProvider *awskms.CredsProvider",
          "56:  defaultServer keyservice.KeyServiceServer",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  gcpCredsJSON gcpkms.CredentialJSON",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     Ciphertext: ciphertext,",
          "123:    }, nil",
          "124:   }",
          "125:  case nil:",
          "126:   return nil, fmt.Errorf(\"must provide a key\")",
          "127:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  case *keyservice.Key_GcpKmsKey:",
          "132:   ciphertext, err := ks.encryptWithGCPKMS(k.GcpKmsKey, req.Plaintext)",
          "133:   if err != nil {",
          "134:    return nil, err",
          "135:   }",
          "136:   return &keyservice.EncryptResponse{",
          "137:    Ciphertext: ciphertext,",
          "138:   }, nil",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     Plaintext: plaintext,",
          "179:    }, nil",
          "180:   }",
          "181:  case nil:",
          "182:   return nil, fmt.Errorf(\"must provide a key\")",
          "183:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:  case *keyservice.Key_GcpKmsKey:",
          "196:   plaintext, err := ks.decryptWithGCPKMS(k.GcpKmsKey, req.Ciphertext)",
          "197:   if err != nil {",
          "198:    return nil, err",
          "199:   }",
          "200:   return &keyservice.DecryptResponse{",
          "201:    Plaintext: plaintext,",
          "202:   }, nil",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "317:  plaintext, err := azureKey.Decrypt()",
          "318:  return plaintext, err",
          "319: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: func (ks *Server) encryptWithGCPKMS(key *keyservice.GcpKmsKey, plaintext []byte) ([]byte, error) {",
          "344:  gcpKey := gcpkms.MasterKey{",
          "345:   ResourceID: key.ResourceId,",
          "346:  }",
          "347:  ks.gcpCredsJSON.ApplyToMasterKey(&gcpKey)",
          "348:  if err := gcpKey.Encrypt(plaintext); err != nil {",
          "349:   return nil, err",
          "350:  }",
          "351:  return gcpKey.EncryptedDataKey(), nil",
          "352: }",
          "354: func (ks *Server) decryptWithGCPKMS(key *keyservice.GcpKmsKey, ciphertext []byte) ([]byte, error) {",
          "355:  gcpKey := gcpkms.MasterKey{",
          "356:   ResourceID: key.ResourceId,",
          "357:  }",
          "358:  ks.gcpCredsJSON.ApplyToMasterKey(&gcpKey)",
          "359:  gcpKey.EncryptedKey = string(ciphertext)",
          "360:  plaintext, err := gcpKey.Decrypt()",
          "361:  return plaintext, err",
          "362: }",
          "",
          "---------------"
        ],
        "internal/sops/keyservice/server_test.go||internal/sops/keyservice/server_test.go": [
          "File: internal/sops/keyservice/server_test.go -> internal/sops/keyservice/server_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"github.com/fluxcd/kustomize-controller/internal/sops/age\"",
          "21:  \"github.com/fluxcd/kustomize-controller/internal/sops/awskms\"",
          "22:  \"github.com/fluxcd/kustomize-controller/internal/sops/azkv\"",
          "23:  \"github.com/fluxcd/kustomize-controller/internal/sops/hcvault\"",
          "24:  \"github.com/fluxcd/kustomize-controller/internal/sops/pgp\"",
          "25: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"github.com/fluxcd/kustomize-controller/internal/sops/gcpkms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:  g.Expect(fallback.encryptReqs).To(HaveLen(0))",
          "212: }",
          "214: func TestServer_EncryptDecrypt_Nil_KeyType(t *testing.T) {",
          "215:  g := NewWithT(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: func TestServer_EncryptDecrypt_gcpkms(t *testing.T) {",
          "215:  g := NewWithT(t)",
          "217:  creds := `{ \"client_id\": \"<client-id>.apps.googleusercontent.com\",",
          "218:    \"client_secret\": \"<secret>\",",
          "219:   \"type\": \"authorized_user\"}`",
          "220:  s := NewServer(WithGCPCredsJSON([]byte(creds)))",
          "222:  resourceID := \"projects/test-flux/locations/global/keyRings/test-flux/cryptoKeys/sops\"",
          "223:  key := KeyFromMasterKey(gcpkms.MasterKeyFromResourceID(resourceID))",
          "224:  _, err := s.Encrypt(context.TODO(), &keyservice.EncryptRequest{",
          "225:   Key: &key,",
          "226:  })",
          "227:  g.Expect(err).To(HaveOccurred())",
          "228:  g.Expect(err.Error()).To(ContainSubstring(\"failed to encrypt sops data key with GCP KMS\"))",
          "230:  _, err = s.Decrypt(context.TODO(), &keyservice.DecryptRequest{",
          "231:   Key: &key,",
          "232:  })",
          "233:  g.Expect(err).To(HaveOccurred())",
          "234:  g.Expect(err.Error()).To(ContainSubstring(\"failed to decrypt sops data key with GCP KMS\"))",
          "236: }",
          "",
          "---------------"
        ],
        "internal/sops/keyservice/utils_test.go||internal/sops/keyservice/utils_test.go": [
          "File: internal/sops/keyservice/utils_test.go -> internal/sops/keyservice/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"github.com/fluxcd/kustomize-controller/internal/sops/age\"",
          "17:  \"github.com/fluxcd/kustomize-controller/internal/sops/awskms\"",
          "18:  \"github.com/fluxcd/kustomize-controller/internal/sops/azkv\"",
          "19:  \"github.com/fluxcd/kustomize-controller/internal/sops/hcvault\"",
          "20:  \"github.com/fluxcd/kustomize-controller/internal/sops/pgp\"",
          "21: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"github.com/fluxcd/kustomize-controller/internal/sops/gcpkms\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     },",
          "69:    },",
          "70:   }",
          "71:  default:",
          "72:   panic(fmt.Sprintf(\"tried to convert unknown MasterKey type %T to keyservice.Key\", mk))",
          "73:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:  case *gcpkms.MasterKey:",
          "73:   return keyservice.Key{",
          "74:    KeyType: &keyservice.Key_GcpKmsKey{",
          "75:     GcpKmsKey: &keyservice.GcpKmsKey{",
          "76:      ResourceId: mk.ResourceID,",
          "77:     },",
          "78:    },",
          "79:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87ea78c24c35f303d432a9b9ea475ae1ea7731bd",
      "candidate_info": {
        "commit_hash": "87ea78c24c35f303d432a9b9ea475ae1ea7731bd",
        "repo": "fluxcd/kustomize-controller",
        "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/87ea78c24c35f303d432a9b9ea475ae1ea7731bd",
        "files": [
          "Makefile",
          "config/default/kustomization.yaml",
          "go.mod",
          "go.sum"
        ],
        "message": "Update dependencies\n\n- github.com/fluxcd/source-controller/api to v0.24.0\n- golang.org/x/net to v0.0.0-20220418201149-a630d4f3e7a2\n\nSigned-off-by: Hidde Beydals <hello@hidde.co>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  github.com/fluxcd/pkg/ssa v0.15.2",
          "22:  github.com/fluxcd/pkg/testserver v0.2.0",
          "23:  github.com/fluxcd/pkg/untar v0.1.0",
          "25:  github.com/hashicorp/go-retryablehttp v0.7.1",
          "26:  github.com/hashicorp/vault/api v1.5.0",
          "27:  github.com/onsi/gomega v1.19.0",
          "28:  github.com/ory/dockertest v3.3.5+incompatible",
          "29:  github.com/spf13/pflag v1.0.5",
          "30:  go.mozilla.org/sops/v3 v3.7.2",
          "32:  google.golang.org/grpc v1.45.0",
          "33:  k8s.io/api v0.23.5",
          "34:  k8s.io/apiextensions-apiserver v0.23.5",
          "",
          "[Removed Lines]",
          "24:  github.com/fluxcd/source-controller/api v0.22.0",
          "31:  golang.org/x/net v0.0.0-20220412020605-290c469a71a5",
          "",
          "[Added Lines]",
          "24:  github.com/fluxcd/source-controller/api v0.24.0",
          "31:  golang.org/x/net v0.0.0-20220418201149-a630d4f3e7a2",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: github.com/fluxcd/pkg/testserver v0.2.0/go.mod h1:bgjjydkXsZTeFzjz9Cr4heGANr41uTB1Aj1Q5qzuYVk=",
          "287: github.com/fluxcd/pkg/untar v0.1.0 h1:k97V/xV5hFrAkIkVPuv5AVhyxh1ZzzAKba/lbDfGo6o=",
          "288: github.com/fluxcd/pkg/untar v0.1.0/go.mod h1:aGswNyzB1mlz/T/kpOS58mITBMxMKc9tlJBH037A2HY=",
          "291: github.com/form3tech-oss/jwt-go v3.2.2+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=",
          "292: github.com/form3tech-oss/jwt-go v3.2.3+incompatible h1:7ZaBxOI7TMoYBfyA3cQHErNNyAWIKUMIwqxEtgHOs5c=",
          "293: github.com/form3tech-oss/jwt-go v3.2.3+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=",
          "",
          "[Removed Lines]",
          "289: github.com/fluxcd/source-controller/api v0.22.0 h1:WF0xsrlyUaRLWS4u5un3yfzlvER86sZx/qiV6l7Ay6Q=",
          "290: github.com/fluxcd/source-controller/api v0.22.0/go.mod h1:Vb13q9Pq+1IW/sJUZn/RSb7IU5WT86Er6uCFPCFm9L4=",
          "",
          "[Added Lines]",
          "289: github.com/fluxcd/source-controller/api v0.24.0 h1:VIpyMX8jrPKGhOsFOzaxYeufi/gq5GZwcoeG8+QqrgE=",
          "290: github.com/fluxcd/source-controller/api v0.24.0/go.mod h1:+raHSQaSGlk1PqgLc0joVk1KTnf1K/lQcgxdEdZ/mk8=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1009: golang.org/x/net v0.0.0-20210825183410-e898025ed96a/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=",
          "1010: golang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=",
          "1011: golang.org/x/net v0.0.0-20211209124913-491a49abca63/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=",
          "1014: golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=",
          "1015: golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=",
          "1016: golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=",
          "",
          "[Removed Lines]",
          "1012: golang.org/x/net v0.0.0-20220412020605-290c469a71a5 h1:bRb386wvrE+oBNdF1d/Xh9mQrfQ4ecYhW5qJ5GvTGT4=",
          "1013: golang.org/x/net v0.0.0-20220412020605-290c469a71a5/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=",
          "",
          "[Added Lines]",
          "1012: golang.org/x/net v0.0.0-20220418201149-a630d4f3e7a2 h1:6mzvA99KwZxbOrxww4EvWVQUnN1+xEu9tafK5ZxkYeA=",
          "1013: golang.org/x/net v0.0.0-20220418201149-a630d4f3e7a2/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ba76c01c378d1e5cb5e8a3ab763c49dc5a96b85",
      "candidate_info": {
        "commit_hash": "0ba76c01c378d1e5cb5e8a3ab763c49dc5a96b85",
        "repo": "fluxcd/kustomize-controller",
        "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/0ba76c01c378d1e5cb5e8a3ab763c49dc5a96b85",
        "files": [
          "api/go.mod",
          "api/go.sum",
          "api/v1beta1/zz_generated.deepcopy.go",
          "api/v1beta2/zz_generated.deepcopy.go",
          "config/crd/bases/kustomize.toolkit.fluxcd.io_kustomizations.yaml",
          "go.mod",
          "go.sum"
        ],
        "message": "Update APIs and runtime packages\n\nSigned-off-by: Stefan Prodan <stefan.prodan@gmail.com>",
        "before_after_code_files": [
          "api/go.mod||api/go.mod",
          "api/go.sum||api/go.sum",
          "api/v1beta1/zz_generated.deepcopy.go||api/v1beta1/zz_generated.deepcopy.go",
          "api/v1beta2/zz_generated.deepcopy.go||api/v1beta2/zz_generated.deepcopy.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "api/go.mod||api/go.mod": [
          "File: api/go.mod -> api/go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: go 1.18",
          "5: require (",
          "11: )",
          "",
          "[Removed Lines]",
          "6:  github.com/fluxcd/pkg/apis/kustomize v0.8.1",
          "7:  github.com/fluxcd/pkg/apis/meta v0.19.1",
          "8:  k8s.io/apiextensions-apiserver v0.26.2",
          "9:  k8s.io/apimachinery v0.26.2",
          "10:  sigs.k8s.io/controller-runtime v0.14.5",
          "",
          "[Added Lines]",
          "6:  github.com/fluxcd/pkg/apis/kustomize v1.0.0",
          "7:  github.com/fluxcd/pkg/apis/meta v1.0.0",
          "8:  k8s.io/apiextensions-apiserver v0.26.3",
          "9:  k8s.io/apimachinery v0.26.3",
          "10:  sigs.k8s.io/controller-runtime v0.14.6",
          "",
          "---------------"
        ],
        "api/go.sum||api/go.sum": [
          "File: api/go.sum -> api/go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "2: github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
          "3: github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "8: github.com/go-logr/logr v1.2.0/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=",
          "9: github.com/go-logr/logr v1.2.3 h1:2DntVwHkVopvECVRSlL5PSo9eG+cAkDCuckLubN+rq0=",
          "10: github.com/go-logr/logr v1.2.3/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=",
          "",
          "[Removed Lines]",
          "4: github.com/fluxcd/pkg/apis/kustomize v0.8.1 h1:uRH9xVDJfSBGIiL6PIhkguHvf2Nme6uTWX+RX1iZznc=",
          "5: github.com/fluxcd/pkg/apis/kustomize v0.8.1/go.mod h1:TBem+2mHp6Ib7XD1fmzDkoUnBzx07wSzIYo6BVx3XAc=",
          "6: github.com/fluxcd/pkg/apis/meta v0.19.1 h1:fCI5CnTXpAqr67UlaI9q0H+OztMKB5kDTr6xV6vlAo0=",
          "7: github.com/fluxcd/pkg/apis/meta v0.19.1/go.mod h1:ZPPMYrPnWwPQYNEGM/Uc0N4SurUPS3xNI3IIpCQEfuM=",
          "",
          "[Added Lines]",
          "4: github.com/fluxcd/pkg/apis/kustomize v1.0.0 h1:5T2b/mRZiGWtP7fvSU8gZOApIc06H6SdLX3MlsE6LRo=",
          "5: github.com/fluxcd/pkg/apis/kustomize v1.0.0/go.mod h1:XaDYlKxrf9D2zZWcZ0BnSIqGtcm8mdNtJGzZWYjCnQo=",
          "6: github.com/fluxcd/pkg/apis/meta v1.0.0 h1:i9IGHd/VNEZELX7mepkiYFbJxs2J5znaB4cN9z2nPm8=",
          "7: github.com/fluxcd/pkg/apis/meta v1.0.0/go.mod h1:04ZdpZYm1x+aL93K4daNHW1UX6E8K7Gyf5za9OhrE+U=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=",
          "78: gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=",
          "79: gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
          "85: k8s.io/klog/v2 v2.80.1 h1:atnLQ121W371wYYFawwYx1aEY2eUfs4l3J72wtgAwV4=",
          "86: k8s.io/klog/v2 v2.80.1/go.mod h1:y1WjHnz7Dj687irZUWR/WLkLc5N1YHtjLdmgWjndZn0=",
          "87: k8s.io/utils v0.0.0-20221128185143-99ec85e7a448 h1:KTgPnR10d5zhztWptI952TNtt/4u5h3IzDXkdIMuo2Y=",
          "88: k8s.io/utils v0.0.0-20221128185143-99ec85e7a448/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=",
          "91: sigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd h1:EDPBXCAspyGV4jQlpZSudPeMmr1bNJefnuqLsRAsHZo=",
          "92: sigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd/go.mod h1:B8JuhiUyNFVKdsE8h686QcCxMaH6HrOAZj4vswFpcB0=",
          "93: sigs.k8s.io/structured-merge-diff/v4 v4.2.3 h1:PRbqxJClWWYMNV1dhaG4NsibJbArud9kFxnAMREiWFE=",
          "",
          "[Removed Lines]",
          "80: k8s.io/api v0.26.2 h1:dM3cinp3PGB6asOySalOZxEG4CZ0IAdJsrYZXE/ovGQ=",
          "81: k8s.io/apiextensions-apiserver v0.26.2 h1:/yTG2B9jGY2Q70iGskMf41qTLhL9XeNN2KhI0uDgwko=",
          "82: k8s.io/apiextensions-apiserver v0.26.2/go.mod h1:Y7UPgch8nph8mGCuVk0SK83LnS8Esf3n6fUBgew8SH8=",
          "83: k8s.io/apimachinery v0.26.2 h1:da1u3D5wfR5u2RpLhE/ZtZS2P7QvDgLZTi9wrNZl/tQ=",
          "84: k8s.io/apimachinery v0.26.2/go.mod h1:ats7nN1LExKHvJ9TmwootT00Yz05MuYqPXEXaVeOy5I=",
          "89: sigs.k8s.io/controller-runtime v0.14.5 h1:6xaWFqzT5KuAQ9ufgUaj1G/+C4Y1GRkhrxl+BJ9i+5s=",
          "90: sigs.k8s.io/controller-runtime v0.14.5/go.mod h1:WqIdsAY6JBsjfc/CqO0CORmNtoCtE4S6qbPc9s68h+0=",
          "",
          "[Added Lines]",
          "80: k8s.io/api v0.26.3 h1:emf74GIQMTik01Aum9dPP0gAypL8JTLl/lHa4V9RFSU=",
          "81: k8s.io/apiextensions-apiserver v0.26.3 h1:5PGMm3oEzdB1W/FTMgGIDmm100vn7IaUP5er36dB+YE=",
          "82: k8s.io/apiextensions-apiserver v0.26.3/go.mod h1:jdA5MdjNWGP+njw1EKMZc64xAT5fIhN6VJrElV3sfpQ=",
          "83: k8s.io/apimachinery v0.26.3 h1:dQx6PNETJ7nODU3XPtrwkfuubs6w7sX0M8n61zHIV/k=",
          "84: k8s.io/apimachinery v0.26.3/go.mod h1:ats7nN1LExKHvJ9TmwootT00Yz05MuYqPXEXaVeOy5I=",
          "89: sigs.k8s.io/controller-runtime v0.14.6 h1:oxstGVvXGNnMvY7TAESYk+lzr6S3V5VFxQ6d92KcwQA=",
          "90: sigs.k8s.io/controller-runtime v0.14.6/go.mod h1:WqIdsAY6JBsjfc/CqO0CORmNtoCtE4S6qbPc9s68h+0=",
          "",
          "---------------"
        ],
        "api/v1beta1/zz_generated.deepcopy.go||api/v1beta1/zz_generated.deepcopy.go": [
          "File: api/v1beta1/zz_generated.deepcopy.go -> api/v1beta1/zz_generated.deepcopy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:  if in.Patches != nil {",
          "177:   in, out := &in.Patches, &out.Patches",
          "180:  }",
          "181:  if in.PatchesStrategicMerge != nil {",
          "182:   in, out := &in.PatchesStrategicMerge, &out.PatchesStrategicMerge",
          "",
          "[Removed Lines]",
          "179:   copy(*out, *in)",
          "",
          "[Added Lines]",
          "179:   for i := range *in {",
          "180:    (*in)[i].DeepCopyInto(&(*out)[i])",
          "181:   }",
          "",
          "---------------"
        ],
        "api/v1beta2/zz_generated.deepcopy.go||api/v1beta2/zz_generated.deepcopy.go": [
          "File: api/v1beta2/zz_generated.deepcopy.go -> api/v1beta2/zz_generated.deepcopy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:  if in.Patches != nil {",
          "195:   in, out := &in.Patches, &out.Patches",
          "198:  }",
          "199:  if in.PatchesStrategicMerge != nil {",
          "200:   in, out := &in.PatchesStrategicMerge, &out.PatchesStrategicMerge",
          "",
          "[Removed Lines]",
          "197:   copy(*out, *in)",
          "",
          "[Added Lines]",
          "197:   for i := range *in {",
          "198:    (*in)[i].DeepCopyInto(&(*out)[i])",
          "199:   }",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  github.com/Azure/azure-sdk-for-go/sdk/azcore v1.4.0",
          "16:  github.com/Azure/azure-sdk-for-go/sdk/azidentity v1.2.2",
          "17:  github.com/Azure/azure-sdk-for-go/sdk/keyvault/azkeys v0.9.0",
          "24:  github.com/cyphar/filepath-securejoin v0.2.3",
          "25:  github.com/dimchansky/utfbom v1.1.1",
          "26:  github.com/fluxcd/kustomize-controller/api v0.35.1",
          "27:  github.com/fluxcd/pkg/apis/acl v0.1.0",
          "28:  github.com/fluxcd/pkg/apis/event v0.4.1",
          "31:  github.com/fluxcd/pkg/http/fetch v0.4.0",
          "35:  github.com/fluxcd/pkg/tar v0.2.0",
          "36:  github.com/fluxcd/pkg/testserver v0.4.0",
          "38:  github.com/hashicorp/vault/api v1.9.0",
          "39:  github.com/onsi/gomega v1.27.5",
          "40:  github.com/opencontainers/go-digest v1.0.0",
          "",
          "[Removed Lines]",
          "18:  github.com/aws/aws-sdk-go v1.44.224",
          "19:  github.com/aws/aws-sdk-go-v2 v1.17.6",
          "20:  github.com/aws/aws-sdk-go-v2/config v1.18.18",
          "21:  github.com/aws/aws-sdk-go-v2/credentials v1.13.17",
          "22:  github.com/aws/aws-sdk-go-v2/service/kms v1.20.7",
          "23:  github.com/aws/aws-sdk-go-v2/service/sts v1.18.6",
          "29:  github.com/fluxcd/pkg/apis/kustomize v0.8.1",
          "30:  github.com/fluxcd/pkg/apis/meta v0.19.1",
          "32:  github.com/fluxcd/pkg/kustomize v0.13.2",
          "33:  github.com/fluxcd/pkg/runtime v0.32.0",
          "34:  github.com/fluxcd/pkg/ssa v0.26.0",
          "37:  github.com/fluxcd/source-controller/api v0.36.0",
          "",
          "[Added Lines]",
          "18:  github.com/aws/aws-sdk-go v1.44.231",
          "19:  github.com/aws/aws-sdk-go-v2 v1.17.7",
          "20:  github.com/aws/aws-sdk-go-v2/config v1.18.19",
          "21:  github.com/aws/aws-sdk-go-v2/credentials v1.13.18",
          "22:  github.com/aws/aws-sdk-go-v2/service/kms v1.20.8",
          "23:  github.com/aws/aws-sdk-go-v2/service/sts v1.18.7",
          "29:  github.com/fluxcd/pkg/apis/kustomize v1.0.0",
          "30:  github.com/fluxcd/pkg/apis/meta v1.0.0",
          "32:  github.com/fluxcd/pkg/kustomize v0.14.0",
          "33:  github.com/fluxcd/pkg/runtime v0.35.0",
          "34:  github.com/fluxcd/pkg/ssa v0.27.0",
          "37:  github.com/fluxcd/source-controller/api v0.36.1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:  go.mozilla.org/sops/v3 v3.7.3",
          "44:  golang.org/x/net v0.8.0",
          "45:  google.golang.org/api v0.114.0",
          "48:  google.golang.org/protobuf v1.30.0",
          "53:  sigs.k8s.io/cli-utils v0.34.0",
          "55:  sigs.k8s.io/kustomize/api v0.12.1",
          "56:  sigs.k8s.io/yaml v1.3.0",
          "57: )",
          "",
          "[Removed Lines]",
          "46:  google.golang.org/genproto v0.0.0-20230306155012-7f2fa6fef1f4",
          "47:  google.golang.org/grpc v1.53.0",
          "49:  k8s.io/api v0.26.2",
          "50:  k8s.io/apiextensions-apiserver v0.26.2",
          "51:  k8s.io/apimachinery v0.26.2",
          "52:  k8s.io/client-go v0.26.2",
          "54:  sigs.k8s.io/controller-runtime v0.14.5",
          "",
          "[Added Lines]",
          "46:  google.golang.org/genproto v0.0.0-20230327215041-6ac7f18bb9d5",
          "47:  google.golang.org/grpc v1.54.0",
          "49:  k8s.io/api v0.26.3",
          "50:  k8s.io/apiextensions-apiserver v0.26.3",
          "51:  k8s.io/apimachinery v0.26.3",
          "52:  k8s.io/client-go v0.26.3",
          "54:  sigs.k8s.io/controller-runtime v0.14.6",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66: replace gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1",
          "68: require (",
          "70:  cloud.google.com/go/compute/metadata v0.2.3 // indirect",
          "72:  github.com/Azure/azure-sdk-for-go v63.3.0+incompatible // indirect",
          "73:  github.com/Azure/azure-sdk-for-go/sdk/internal v1.2.0 // indirect",
          "74:  github.com/Azure/azure-sdk-for-go/sdk/keyvault/internal v0.7.0 // indirect",
          "",
          "[Removed Lines]",
          "69:  cloud.google.com/go/compute v1.18.0 // indirect",
          "71:  cloud.google.com/go/iam v0.12.0 // indirect",
          "",
          "[Added Lines]",
          "69:  cloud.google.com/go/compute v1.19.0 // indirect",
          "71:  cloud.google.com/go/iam v0.13.0 // indirect",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:  github.com/Microsoft/go-winio v0.5.2 // indirect",
          "89:  github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 // indirect",
          "90:  github.com/ProtonMail/go-crypto v0.0.0-20220407094043-a94812496cf5 // indirect",
          "98:  github.com/aws/smithy-go v1.13.5 // indirect",
          "99:  github.com/beorn7/perks v1.0.1 // indirect",
          "100:  github.com/blang/semver v3.5.1+incompatible // indirect",
          "",
          "[Removed Lines]",
          "91:  github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0 // indirect",
          "92:  github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30 // indirect",
          "93:  github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24 // indirect",
          "94:  github.com/aws/aws-sdk-go-v2/internal/ini v1.3.31 // indirect",
          "95:  github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24 // indirect",
          "96:  github.com/aws/aws-sdk-go-v2/service/sso v1.12.5 // indirect",
          "97:  github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5 // indirect",
          "",
          "[Added Lines]",
          "91:  github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1 // indirect",
          "92:  github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31 // indirect",
          "93:  github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25 // indirect",
          "94:  github.com/aws/aws-sdk-go-v2/internal/ini v1.3.32 // indirect",
          "95:  github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25 // indirect",
          "96:  github.com/aws/aws-sdk-go-v2/service/sso v1.12.6 // indirect",
          "97:  github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6 // indirect",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:  gopkg.in/yaml.v2 v2.4.0 // indirect",
          "207:  gopkg.in/yaml.v3 v3.0.1 // indirect",
          "208:  k8s.io/cli-runtime v0.25.4 // indirect",
          "210:  k8s.io/klog/v2 v2.90.1 // indirect",
          "211:  k8s.io/kube-openapi v0.0.0-20230109183929-3758b55a6596 // indirect",
          "212:  k8s.io/kubectl v0.25.4 // indirect",
          "",
          "[Removed Lines]",
          "209:  k8s.io/component-base v0.26.2 // indirect",
          "",
          "[Added Lines]",
          "209:  k8s.io/component-base v0.26.3 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: cloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=",
          "21: cloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=",
          "22: cloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=",
          "25: cloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=",
          "26: cloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=",
          "27: cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=",
          "28: cloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=",
          "31: cloud.google.com/go/kms v1.10.0 h1:Imrtp8792uqNP9bdfPrjtUkjjqOMBcAJ2bdFaAnLhnk=",
          "32: cloud.google.com/go/kms v1.10.0/go.mod h1:ng3KTUtQQU9bPX3+QGLsflZIHlkbn8amFAMY63m8d24=",
          "33: cloud.google.com/go/longrunning v0.4.1 h1:v+yFJOfKC3yZdY6ZUI933pIYdhyhV8S3NpWrXWmg7jM=",
          "",
          "[Removed Lines]",
          "23: cloud.google.com/go/compute v1.18.0 h1:FEigFqoDbys2cvFkZ9Fjq4gnHBP55anJ0yQyau2f9oY=",
          "24: cloud.google.com/go/compute v1.18.0/go.mod h1:1X7yHxec2Ga+Ss6jPyjxRxpu2uu7PLgsOVXvgU0yacs=",
          "29: cloud.google.com/go/iam v0.12.0 h1:DRtTY29b75ciH6Ov1PHb4/iat2CLCvrOm40Q0a6DFpE=",
          "30: cloud.google.com/go/iam v0.12.0/go.mod h1:knyHGviacl11zrtZUoDuYpDgLjvr28sLQaG0YB2GYAY=",
          "",
          "[Added Lines]",
          "23: cloud.google.com/go/compute v1.19.0 h1:+9zda3WGgW1ZSTlVppLCYFIr48Pa35q1uG2N1itbCEQ=",
          "24: cloud.google.com/go/compute v1.19.0/go.mod h1:rikpw2y+UMidAe9tISo04EHNOIf42RLYF/q8Bs93scU=",
          "29: cloud.google.com/go/iam v0.13.0 h1:+CmB+K0J/33d0zSQ9SlFWUeCCEn5XJA0ZMZ3pHE9u8k=",
          "30: cloud.google.com/go/iam v0.13.0/go.mod h1:ljOg+rcNfzZ5d6f1nAUJ8ZIxOaZUVoS14bKCtaLZ/D0=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=",
          "106: github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=",
          "107: github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=",
          "134: github.com/aws/smithy-go v1.13.5 h1:hgz0X/DX0dGqTYpGALqXJoRKRj5oQ7150i5FdTePzO8=",
          "135: github.com/aws/smithy-go v1.13.5/go.mod h1:Tg+OJXh4MB2R/uN61Ko2f6hTZwB/ZYGOtib8J3gBHzA=",
          "136: github.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLju8=",
          "",
          "[Removed Lines]",
          "108: github.com/aws/aws-sdk-go v1.44.224 h1:09CiaaF35nRmxrzWZ2uRq5v6Ghg/d2RiPjZnSgtt+RQ=",
          "109: github.com/aws/aws-sdk-go v1.44.224/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=",
          "110: github.com/aws/aws-sdk-go-v2 v1.17.6 h1:Y773UK7OBqhzi5VDXMi1zVGsoj+CVHs2eaC2bDsLwi0=",
          "111: github.com/aws/aws-sdk-go-v2 v1.17.6/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=",
          "112: github.com/aws/aws-sdk-go-v2/config v1.18.18 h1:/ePABXvXl3ESlzUGnkkvvNnRFw3Gh13dyqaq0Qo3JcU=",
          "113: github.com/aws/aws-sdk-go-v2/config v1.18.18/go.mod h1:Lj3E7XcxJnxMa+AYo89YiL68s1cFJRGduChynYU67VA=",
          "114: github.com/aws/aws-sdk-go-v2/credentials v1.13.17 h1:IubQO/RNeIVKF5Jy77w/LfUvmmCxTnk2TP1UZZIMiF4=",
          "115: github.com/aws/aws-sdk-go-v2/credentials v1.13.17/go.mod h1:K9xeFo1g/YPMguMUD69YpwB4Nyi6W/5wn706xIInJFg=",
          "116: github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0 h1:/2Cb3SK3xVOQA7Xfr5nCWCo5H3UiNINtsVvVdk8sQqA=",
          "117: github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.0/go.mod h1:neYVaeKr5eT7BzwULuG2YbLhzWZ22lpjKdCybR7AXrQ=",
          "118: github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30 h1:y+8n9AGDjikyXoMBTRaHHHSaFEB8267ykmvyPodJfys=",
          "119: github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.30/go.mod h1:LUBAO3zNXQjoONBKn/kR1y0Q4cj/D02Ts0uHYjcCQLM=",
          "120: github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24 h1:r+Kv+SEJquhAZXaJ7G4u44cIwXV3f8K+N482NNAzJZA=",
          "121: github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.24/go.mod h1:gAuCezX/gob6BSMbItsSlMb6WZGV7K2+fWOvk8xBSto=",
          "122: github.com/aws/aws-sdk-go-v2/internal/ini v1.3.31 h1:hf+Vhp5WtTdcSdE+yEcUz8L73sAzN0R+0jQv+Z51/mI=",
          "123: github.com/aws/aws-sdk-go-v2/internal/ini v1.3.31/go.mod h1:5zUjguZfG5qjhG9/wqmuyHRyUftl2B5Cp6NNxNC6kRA=",
          "124: github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24 h1:c5qGfdbCHav6viBwiyDns3OXqhqAbGjfIB4uVu2ayhk=",
          "125: github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.24/go.mod h1:HMA4FZG6fyib+NDo5bpIxX1EhYjrAOveZJY2YR0xrNE=",
          "126: github.com/aws/aws-sdk-go-v2/service/kms v1.20.7 h1:7Ligq/4Mei9qZScT1p51REuqq0dB8MLOIs8X/tsLfB0=",
          "127: github.com/aws/aws-sdk-go-v2/service/kms v1.20.7/go.mod h1:1OnRDyIEZ/RFBhxzu9oFZ3zV0RU0I9GWT3Dxz3pgITU=",
          "128: github.com/aws/aws-sdk-go-v2/service/sso v1.12.5 h1:bdKIX6SVF3nc3xJFw6Nf0igzS6Ff/louGq8Z6VP/3Hs=",
          "129: github.com/aws/aws-sdk-go-v2/service/sso v1.12.5/go.mod h1:vuWiaDB30M/QTC+lI3Wj6S/zb7tpUK2MSYgy3Guh2L0=",
          "130: github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5 h1:xLPZMyuZ4GuqRCIec/zWuIhRFPXh2UOJdLXBSi64ZWQ=",
          "131: github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.5/go.mod h1:QjxpHmCwAg0ESGtPQnLIVp7SedTOBMYy+Slr3IfMKeI=",
          "132: github.com/aws/aws-sdk-go-v2/service/sts v1.18.6 h1:rIFn5J3yDoeuKCE9sESXqM5POTAhOP1du3bv/qTL+tE=",
          "133: github.com/aws/aws-sdk-go-v2/service/sts v1.18.6/go.mod h1:48WJ9l3dwP0GSHWGc5sFGGlCkuA82Mc2xnw+T6Q8aDw=",
          "",
          "[Added Lines]",
          "108: github.com/aws/aws-sdk-go v1.44.231 h1:wH/ihcZzBv8F443PyRoUogWnEdDp1KYtSew7ji9LNIY=",
          "109: github.com/aws/aws-sdk-go v1.44.231/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=",
          "110: github.com/aws/aws-sdk-go-v2 v1.17.7 h1:CLSjnhJSTSogvqUGhIC6LqFKATMRexcxLZ0i/Nzk9Eg=",
          "111: github.com/aws/aws-sdk-go-v2 v1.17.7/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=",
          "112: github.com/aws/aws-sdk-go-v2/config v1.18.19 h1:AqFK6zFNtq4i1EYu+eC7lcKHYnZagMn6SW171la0bGw=",
          "113: github.com/aws/aws-sdk-go-v2/config v1.18.19/go.mod h1:XvTmGMY8d52ougvakOv1RpiTLPz9dlG/OQHsKU/cMmY=",
          "114: github.com/aws/aws-sdk-go-v2/credentials v1.13.18 h1:EQMdtHwz0ILTW1hoP+EwuWhwCG1hD6l3+RWFQABET4c=",
          "115: github.com/aws/aws-sdk-go-v2/credentials v1.13.18/go.mod h1:vnwlwjIe+3XJPBYKu1et30ZPABG3VaXJYr8ryohpIyM=",
          "116: github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1 h1:gt57MN3liKiyGopcqgNzJb2+d9MJaKT/q1OksHNXVE4=",
          "117: github.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1/go.mod h1:lfUx8puBRdM5lVVMQlwt2v+ofiG/X6Ms+dy0UkG/kXw=",
          "118: github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31 h1:sJLYcS+eZn5EeNINGHSCRAwUJMFVqklwkH36Vbyai7M=",
          "119: github.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31/go.mod h1:QT0BqUvX1Bh2ABdTGnjqEjvjzrCfIniM9Sc8zn9Yndo=",
          "120: github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25 h1:1mnRASEKnkqsntcxHaysxwgVoUUp5dkiB+l3llKnqyg=",
          "121: github.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25/go.mod h1:zBHOPwhBc3FlQjQJE/D3IfPWiWaQmT06Vq9aNukDo0k=",
          "122: github.com/aws/aws-sdk-go-v2/internal/ini v1.3.32 h1:p5luUImdIqywn6JpQsW3tq5GNOxKmOnEpybzPx+d1lk=",
          "123: github.com/aws/aws-sdk-go-v2/internal/ini v1.3.32/go.mod h1:XGhIBZDEgfqmFIugclZ6FU7v75nHhBDtzuB4xB/tEi4=",
          "124: github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25 h1:5LHn8JQ0qvjD9L9JhMtylnkcw7j05GDZqM9Oin6hpr0=",
          "125: github.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25/go.mod h1:/95IA+0lMnzW6XzqYJRpjjsAbKEORVeO0anQqjd2CNU=",
          "126: github.com/aws/aws-sdk-go-v2/service/kms v1.20.8 h1:R5f4VOFi3ScTe7TtePyxLqEhNqTJIAxL57MzrXFNs6I=",
          "127: github.com/aws/aws-sdk-go-v2/service/kms v1.20.8/go.mod h1:OtP3pBOgmJM+acQyQcQXtQHets3yJoVuanCx2T5M7v4=",
          "128: github.com/aws/aws-sdk-go-v2/service/sso v1.12.6 h1:5V7DWLBd7wTELVz5bPpwzYy/sikk0gsgZfj40X+l5OI=",
          "129: github.com/aws/aws-sdk-go-v2/service/sso v1.12.6/go.mod h1:Y1VOmit/Fn6Tz1uFAeCO6Q7M2fmfXSCLeL5INVYsLuY=",
          "130: github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6 h1:B8cauxOH1W1v7rd8RdI/MWnoR4Ze0wIHWrb90qczxj4=",
          "131: github.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6/go.mod h1:Lh/bc9XUf8CfOY6Jp5aIkQtN+j1mc+nExc+KXj9jx2s=",
          "132: github.com/aws/aws-sdk-go-v2/service/sts v1.18.7 h1:bWNgNdRko2x6gqa0blfATqAZKZokPIeM1vfmQt2pnvM=",
          "133: github.com/aws/aws-sdk-go-v2/service/sts v1.18.7/go.mod h1:JuTnSoeePXmMVe9G8NcjjwgOKEfZ4cOjMuT2IBT/2eI=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216: github.com/fluxcd/pkg/apis/acl v0.1.0/go.mod h1:zfEZzz169Oap034EsDhmCAGgnWlcWmIObZjYMusoXS8=",
          "217: github.com/fluxcd/pkg/apis/event v0.4.1 h1:63wP8NM/uA4680F4Ft8q8/0rJivX90i7FmMkRvUI8Is=",
          "218: github.com/fluxcd/pkg/apis/event v0.4.1/go.mod h1:LHT1ZsbMrcHwCHQCaFtQviQBZwhMOAbTUPK6+KgBkFo=",
          "223: github.com/fluxcd/pkg/http/fetch v0.4.0 h1:76g9F7iFCdFQ9tvNKjYUtbNfw+bDEp5riwWvobTFOjM=",
          "224: github.com/fluxcd/pkg/http/fetch v0.4.0/go.mod h1:LmdHmevj0wBSQkKMuIObUyK/4akQi4KMhavm3GA0XEc=",
          "231: github.com/fluxcd/pkg/tar v0.2.0 h1:HEUHgONQYsJGeZZ4x6h5nQU9Aox1I4T3bOp1faWTqf8=",
          "232: github.com/fluxcd/pkg/tar v0.2.0/go.mod h1:w0/TOC7kwBJhnSJn7TCABkc/I7ib1f2Yz6vOsbLBnhw=",
          "233: github.com/fluxcd/pkg/testserver v0.4.0 h1:pDZ3gistqYhwlf3sAjn1Q8NzN4Qe6I1BEmHMHi46lMg=",
          "234: github.com/fluxcd/pkg/testserver v0.4.0/go.mod h1:gjOKX41okmrGYOa4oOF2fiLedDAfPo1XaG/EzrUUGBI=",
          "237: github.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=",
          "238: github.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=",
          "239: github.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=",
          "",
          "[Removed Lines]",
          "219: github.com/fluxcd/pkg/apis/kustomize v0.8.1 h1:uRH9xVDJfSBGIiL6PIhkguHvf2Nme6uTWX+RX1iZznc=",
          "220: github.com/fluxcd/pkg/apis/kustomize v0.8.1/go.mod h1:TBem+2mHp6Ib7XD1fmzDkoUnBzx07wSzIYo6BVx3XAc=",
          "221: github.com/fluxcd/pkg/apis/meta v0.19.1 h1:fCI5CnTXpAqr67UlaI9q0H+OztMKB5kDTr6xV6vlAo0=",
          "222: github.com/fluxcd/pkg/apis/meta v0.19.1/go.mod h1:ZPPMYrPnWwPQYNEGM/Uc0N4SurUPS3xNI3IIpCQEfuM=",
          "225: github.com/fluxcd/pkg/kustomize v0.13.2 h1:isA9yi+m7sSIxdTrFR1U7+LyS2BraG07ZkKLHw3bnGo=",
          "226: github.com/fluxcd/pkg/kustomize v0.13.2/go.mod h1:1H9qednPxL/JvZE5at/f6wVHTH4WmxJYqfgVOZJ3uAk=",
          "227: github.com/fluxcd/pkg/runtime v0.32.0 h1:GwPyl27qs0jg95o8lGQD+FiAAxFPJMKs58L63AQRk50=",
          "228: github.com/fluxcd/pkg/runtime v0.32.0/go.mod h1:toGOOubMo4ZC1aWhB8C3drdTglr1/A1dETeNwjiIv0g=",
          "229: github.com/fluxcd/pkg/ssa v0.26.0 h1:xqAPF9wA4a3HVeUL1bMsrk1pJDjo5IEqL3+Vjts6vTM=",
          "230: github.com/fluxcd/pkg/ssa v0.26.0/go.mod h1:GEzdW/IkhD/EGvhRerwipp5IrLVkWjhVFsB4Y7MnnMI=",
          "235: github.com/fluxcd/source-controller/api v0.36.0 h1:c5/uWFqKZ9vtDkkXsdMTyiuHNNEX3B6ldjgTsB7Uy14=",
          "236: github.com/fluxcd/source-controller/api v0.36.0/go.mod h1:GktZmd5Dfxo84vPFBdLDl0bBtiJRODfd47uugK0romU=",
          "",
          "[Added Lines]",
          "219: github.com/fluxcd/pkg/apis/kustomize v1.0.0 h1:5T2b/mRZiGWtP7fvSU8gZOApIc06H6SdLX3MlsE6LRo=",
          "220: github.com/fluxcd/pkg/apis/kustomize v1.0.0/go.mod h1:XaDYlKxrf9D2zZWcZ0BnSIqGtcm8mdNtJGzZWYjCnQo=",
          "221: github.com/fluxcd/pkg/apis/meta v1.0.0 h1:i9IGHd/VNEZELX7mepkiYFbJxs2J5znaB4cN9z2nPm8=",
          "222: github.com/fluxcd/pkg/apis/meta v1.0.0/go.mod h1:04ZdpZYm1x+aL93K4daNHW1UX6E8K7Gyf5za9OhrE+U=",
          "225: github.com/fluxcd/pkg/kustomize v0.14.0 h1:XsvGTRsTMlW5u3+ciNChzp3c755SXG5PiCozjyLQYX0=",
          "226: github.com/fluxcd/pkg/kustomize v0.14.0/go.mod h1:1PmtFOgx3Rn7uoB5C1NVbb0DxXPdY3v0lBX3L9ozCZw=",
          "227: github.com/fluxcd/pkg/runtime v0.35.0 h1:9PYLcul8qdfLYQArcYpHe/QuMqyhAGGFN9F7uY/QVX4=",
          "228: github.com/fluxcd/pkg/runtime v0.35.0/go.mod h1:sAaSTH8RHj3Y99xj0AtAndDTe5cv0DP4enyLV62EO78=",
          "229: github.com/fluxcd/pkg/ssa v0.27.0 h1:BJnWDy3xDtYD2U+sVZPkoh6PfnQKoXsklO0pzojU8XU=",
          "230: github.com/fluxcd/pkg/ssa v0.27.0/go.mod h1:fxvmVf4FxodJi5lTglMcL8JsF6hfJLG99C56/CgchH0=",
          "235: github.com/fluxcd/source-controller/api v0.36.1 h1:/ul69kJNEwrFG1Cwk2P/GwgraIxOETCL+tP+zMtxTu8=",
          "236: github.com/fluxcd/source-controller/api v0.36.1/go.mod h1:GktZmd5Dfxo84vPFBdLDl0bBtiJRODfd47uugK0romU=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "905: google.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=",
          "906: google.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=",
          "907: google.golang.org/genproto v0.0.0-20220107163113-42d7afdf6368/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=",
          "910: google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=",
          "911: google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=",
          "912: google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=",
          "",
          "[Removed Lines]",
          "908: google.golang.org/genproto v0.0.0-20230306155012-7f2fa6fef1f4 h1:DdoeryqhaXp1LtT/emMP1BRJPHHKFi5akj/nbx/zNTA=",
          "909: google.golang.org/genproto v0.0.0-20230306155012-7f2fa6fef1f4/go.mod h1:NWraEVixdDnqcqQ30jipen1STv2r/n24Wb7twVTGR4s=",
          "",
          "[Added Lines]",
          "908: google.golang.org/genproto v0.0.0-20230327215041-6ac7f18bb9d5 h1:Kd6tRRHXw8z4TlPlWi+NaK10gsePL6GdZBQChptOLGA=",
          "909: google.golang.org/genproto v0.0.0-20230327215041-6ac7f18bb9d5/go.mod h1:UUQDJDOlWu4KYeJZffbWgBkS1YFobzKbLVfK69pe0Ak=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "923: google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=",
          "924: google.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=",
          "925: google.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=",
          "928: google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=",
          "929: google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=",
          "930: google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=",
          "",
          "[Removed Lines]",
          "926: google.golang.org/grpc v1.53.0 h1:LAv2ds7cmFV/XTS3XG1NneeENYrXGmorPxsBbptIjNc=",
          "927: google.golang.org/grpc v1.53.0/go.mod h1:OnIrk0ipVdj4N5d9IUoFUx72/VlD7+jUsHwZgwSMQpw=",
          "",
          "[Added Lines]",
          "926: google.golang.org/grpc v1.54.0 h1:EhTqbhiYeixwWQtAEZAxmV9MGqcjEU2mFx52xCzNyag=",
          "927: google.golang.org/grpc v1.54.0/go.mod h1:PUSEXI6iWghWaB6lXM4knEgpJNu2qUcKfDtNci3EC2g=",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "975: honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=",
          "976: honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=",
          "977: honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=",
          "984: k8s.io/cli-runtime v0.25.4 h1:GTSBN7aKBrc2LqpdO30CmHQqJtRmotxV7XsMSP+QZIk=",
          "985: k8s.io/cli-runtime v0.25.4/go.mod h1:JGOw1CR8v4Mcz6cEKA7bFQe0bPrNn1l5sGAX1/Ke4Eg=",
          "990: k8s.io/klog/v2 v2.90.1 h1:m4bYOKall2MmOiRaR1J+We67Do7vm9KiQVlT96lnHUw=",
          "991: k8s.io/klog/v2 v2.90.1/go.mod h1:y1WjHnz7Dj687irZUWR/WLkLc5N1YHtjLdmgWjndZn0=",
          "992: k8s.io/kube-openapi v0.0.0-20230109183929-3758b55a6596 h1:8cNCQs+WqqnSpZ7y0LMQPKD+RZUHU17VqLPMW3qxnxc=",
          "",
          "[Removed Lines]",
          "978: k8s.io/api v0.26.2 h1:dM3cinp3PGB6asOySalOZxEG4CZ0IAdJsrYZXE/ovGQ=",
          "979: k8s.io/api v0.26.2/go.mod h1:1kjMQsFE+QHPfskEcVNgL3+Hp88B80uj0QtSOlj8itU=",
          "980: k8s.io/apiextensions-apiserver v0.26.2 h1:/yTG2B9jGY2Q70iGskMf41qTLhL9XeNN2KhI0uDgwko=",
          "981: k8s.io/apiextensions-apiserver v0.26.2/go.mod h1:Y7UPgch8nph8mGCuVk0SK83LnS8Esf3n6fUBgew8SH8=",
          "982: k8s.io/apimachinery v0.26.2 h1:da1u3D5wfR5u2RpLhE/ZtZS2P7QvDgLZTi9wrNZl/tQ=",
          "983: k8s.io/apimachinery v0.26.2/go.mod h1:ats7nN1LExKHvJ9TmwootT00Yz05MuYqPXEXaVeOy5I=",
          "986: k8s.io/client-go v0.26.2 h1:s1WkVujHX3kTp4Zn4yGNFK+dlDXy1bAAkIl+cFAiuYI=",
          "987: k8s.io/client-go v0.26.2/go.mod h1:u5EjOuSyBa09yqqyY7m3abZeovO/7D/WehVVlZ2qcqU=",
          "988: k8s.io/component-base v0.26.2 h1:IfWgCGUDzrD6wLLgXEstJKYZKAFS2kO+rBRi0p3LqcI=",
          "989: k8s.io/component-base v0.26.2/go.mod h1:DxbuIe9M3IZPRxPIzhch2m1eT7uFrSBJUBuVCQEBivs=",
          "",
          "[Added Lines]",
          "978: k8s.io/api v0.26.3 h1:emf74GIQMTik01Aum9dPP0gAypL8JTLl/lHa4V9RFSU=",
          "979: k8s.io/api v0.26.3/go.mod h1:PXsqwPMXBSBcL1lJ9CYDKy7kIReUydukS5JiRlxC3qE=",
          "980: k8s.io/apiextensions-apiserver v0.26.3 h1:5PGMm3oEzdB1W/FTMgGIDmm100vn7IaUP5er36dB+YE=",
          "981: k8s.io/apiextensions-apiserver v0.26.3/go.mod h1:jdA5MdjNWGP+njw1EKMZc64xAT5fIhN6VJrElV3sfpQ=",
          "982: k8s.io/apimachinery v0.26.3 h1:dQx6PNETJ7nODU3XPtrwkfuubs6w7sX0M8n61zHIV/k=",
          "983: k8s.io/apimachinery v0.26.3/go.mod h1:ats7nN1LExKHvJ9TmwootT00Yz05MuYqPXEXaVeOy5I=",
          "986: k8s.io/client-go v0.26.3 h1:k1UY+KXfkxV2ScEL3gilKcF7761xkYsSD6BC9szIu8s=",
          "987: k8s.io/client-go v0.26.3/go.mod h1:ZPNu9lm8/dbRIPAgteN30RSXea6vrCpFvq+MateTUuQ=",
          "988: k8s.io/component-base v0.26.3 h1:oC0WMK/ggcbGDTkdcqefI4wIZRYdK3JySx9/HADpV0g=",
          "989: k8s.io/component-base v0.26.3/go.mod h1:5kj1kZYwSC6ZstHJN7oHBqcJC6yyn41eR+Sqa/mQc8E=",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1000: rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=",
          "1001: sigs.k8s.io/cli-utils v0.34.0 h1:zCUitt54f0/MYj/ajVFnG6XSXMhpZ72O/3RewIchW8w=",
          "1002: sigs.k8s.io/cli-utils v0.34.0/go.mod h1:EXyMwPMu9OL+LRnj0JEMsGG/fRvbgFadcVlSnE8RhFs=",
          "1005: sigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd h1:EDPBXCAspyGV4jQlpZSudPeMmr1bNJefnuqLsRAsHZo=",
          "1006: sigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd/go.mod h1:B8JuhiUyNFVKdsE8h686QcCxMaH6HrOAZj4vswFpcB0=",
          "1007: sigs.k8s.io/kustomize/api v0.12.1 h1:7YM7gW3kYBwtKvoY216ZzY+8hM+lV53LUayghNRJ0vM=",
          "",
          "[Removed Lines]",
          "1003: sigs.k8s.io/controller-runtime v0.14.5 h1:6xaWFqzT5KuAQ9ufgUaj1G/+C4Y1GRkhrxl+BJ9i+5s=",
          "1004: sigs.k8s.io/controller-runtime v0.14.5/go.mod h1:WqIdsAY6JBsjfc/CqO0CORmNtoCtE4S6qbPc9s68h+0=",
          "",
          "[Added Lines]",
          "1003: sigs.k8s.io/controller-runtime v0.14.6 h1:oxstGVvXGNnMvY7TAESYk+lzr6S3V5VFxQ6d92KcwQA=",
          "1004: sigs.k8s.io/controller-runtime v0.14.6/go.mod h1:WqIdsAY6JBsjfc/CqO0CORmNtoCtE4S6qbPc9s68h+0=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "933a8db290ec2d2f7fa9d79a45b5c3fe7a89aab3",
      "candidate_info": {
        "commit_hash": "933a8db290ec2d2f7fa9d79a45b5c3fe7a89aab3",
        "repo": "fluxcd/kustomize-controller",
        "commit_url": "https://github.com/fluxcd/kustomize-controller/commit/933a8db290ec2d2f7fa9d79a45b5c3fe7a89aab3",
        "files": [
          "controllers/kustomization_controller.go",
          "go.mod",
          "go.sum"
        ],
        "message": "Switch to serial patcher for status updates\n\nSigned-off-by: Stefan Prodan <stefan.prodan@gmail.com>",
        "before_after_code_files": [
          "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "controllers/kustomization_controller.go||controllers/kustomization_controller.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "controllers/kustomization_controller.go||controllers/kustomization_controller.go": [
          "File: controllers/kustomization_controller.go -> controllers/kustomization_controller.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:  }",
          "175:  defer func() {",
          "",
          "[Removed Lines]",
          "169:  patcher, err := patch.NewHelper(obj, r.Client)",
          "170:  if err != nil {",
          "171:   return ctrl.Result{}, err",
          "172:  }",
          "",
          "[Added Lines]",
          "169:  patcher := patch.NewSerialPatcher(obj, r.Client)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:  ctx context.Context,",
          "309:  obj *kustomizev1.Kustomization,",
          "310:  src sourcev1.Source,",
          "314:  oldInventory := inventory.New()",
          "",
          "[Removed Lines]",
          "311:  patcher *patch.Helper) error {",
          "",
          "[Added Lines]",
          "308:  patcher *patch.SerialPatcher) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790: func (r *KustomizationReconciler) checkHealth(ctx context.Context,",
          "791:  manager *ssa.ResourceManager,",
          "793:  obj *kustomizev1.Kustomization,",
          "794:  revision string,",
          "795:  isNewRevision bool,",
          "",
          "[Removed Lines]",
          "792:  patcher *patch.Helper,",
          "",
          "[Added Lines]",
          "789:  patcher *patch.SerialPatcher,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "985: func (r *KustomizationReconciler) patch(ctx context.Context,",
          "986:  obj *kustomizev1.Kustomization,",
          "990:  patchOpts := []patch.Option{}",
          "",
          "[Removed Lines]",
          "987:  patcher *patch.Helper) (retErr error) {",
          "",
          "[Added Lines]",
          "984:  patcher *patch.SerialPatcher) (retErr error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1011:   }",
          "1012:  }",
          "1021:  return nil",
          "1022: }",
          "",
          "[Removed Lines]",
          "1015:  newHelper, retErr := patch.NewHelper(obj, r.Client)",
          "1016:  if retErr != nil {",
          "1017:   return retErr",
          "1018:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  github.com/fluxcd/pkg/apis/meta v0.17.0",
          "27:  github.com/fluxcd/pkg/http/fetch v0.1.0",
          "28:  github.com/fluxcd/pkg/kustomize v0.8.0",
          "30:  github.com/fluxcd/pkg/ssa v0.21.0",
          "31:  github.com/fluxcd/pkg/tar v0.1.0",
          "32:  github.com/fluxcd/pkg/testserver v0.4.0",
          "",
          "[Removed Lines]",
          "29:  github.com/fluxcd/pkg/runtime v0.21.0",
          "",
          "[Added Lines]",
          "29:  github.com/fluxcd/pkg/runtime v0.22.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: github.com/fluxcd/pkg/http/fetch v0.1.0/go.mod h1:1CjOSfn7aOeHf2ZRA2+GTKHg442zN6X/fSys3a0KLC0=",
          "295: github.com/fluxcd/pkg/kustomize v0.8.0 h1:8AdEvp6y38ISZzoi0H82Si5zkmLXClbeX10W7HevB00=",
          "296: github.com/fluxcd/pkg/kustomize v0.8.0/go.mod h1:zGtCZF6V3hMWcf46SqrQc10fS9yUlKzi2UcFUeabDAE=",
          "299: github.com/fluxcd/pkg/ssa v0.21.0 h1:aeoTohPNf5x7jQjHidyLJAOHw3EyHOQoQN3mN2i+4cc=",
          "300: github.com/fluxcd/pkg/ssa v0.21.0/go.mod h1:jumyhUbEMDnduN7anSlKfxl2fEoyeyv+Ta5hWCbxI5Q=",
          "301: github.com/fluxcd/pkg/tar v0.1.0 h1:ObyUml8NJtGQtz/cRgexd7HU2mQsTmgjz2dtX4xdnng=",
          "",
          "[Removed Lines]",
          "297: github.com/fluxcd/pkg/runtime v0.21.0 h1:3u6z8M1fDJDGzyAUHWanWy7xF7xQnn7jl2wTzsvU3Pg=",
          "298: github.com/fluxcd/pkg/runtime v0.21.0/go.mod h1:Cm6jIhltzXIM3CRRY6SFASDn+z2m/1yPqOWwD73c3io=",
          "",
          "[Added Lines]",
          "297: github.com/fluxcd/pkg/runtime v0.22.0 h1:4YV/An41b+OGdSWDogwFfHr22CEE/in+lBLEK0fr1yc=",
          "298: github.com/fluxcd/pkg/runtime v0.22.0/go.mod h1:Cm6jIhltzXIM3CRRY6SFASDn+z2m/1yPqOWwD73c3io=",
          "",
          "---------------"
        ]
      }
    }
  ]
}