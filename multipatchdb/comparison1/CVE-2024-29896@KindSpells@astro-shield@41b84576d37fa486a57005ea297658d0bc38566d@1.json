{
  "cve_id": "CVE-2024-29896",
  "cve_desc": "Astro-Shield is a library to compute the subresource integrity hashes for your JS scripts and CSS stylesheets. When automated CSP headers generation for SSR content is enabled and the web application serves content that can be partially controlled by external users, then it is possible that the CSP headers generation feature might be \"allow-listing\" malicious injected resources like inlined JS, or references to external malicious scripts. The fix is available in version 1.3.0.",
  "repo": "KindSpells/astro-shield",
  "patch_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
  "patch_info": {
    "commit_hash": "41b84576d37fa486a57005ea297658d0bc38566d",
    "repo": "KindSpells/astro-shield",
    "commit_url": "https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d",
    "files": [
      "README.md",
      "package.json",
      "src/core.mjs",
      "src/headers.mjs",
      "src/main.mjs",
      "tests/core.test.mts",
      "tests/headers.test.mts",
      "tests/main.test.mts",
      "vitest.config.unit.mts"
    ],
    "message": "feat: cross-origin resources allow-lists\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
    "before_after_code_files": [
      "src/core.mjs||src/core.mjs",
      "src/headers.mjs||src/headers.mjs",
      "src/main.mjs||src/main.mjs",
      "tests/core.test.mts||tests/core.test.mts",
      "tests/headers.test.mts||tests/headers.test.mts",
      "tests/main.test.mts||tests/main.test.mts",
      "vitest.config.unit.mts||vitest.config.unit.mts"
    ]
  },
  "patch_diff": {
    "src/core.mjs||src/core.mjs": [
      "File: src/core.mjs -> src/core.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: const scriptReplacer = (hash, attrs, setCrossorigin, content) =>",
      "54:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "55:  }>${content ?? ''}</script>`",
      "58: const styleReplacer = (hash, attrs, setCrossorigin, content) =>",
      "60:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "61:  }>${content ?? ''}</style>`",
      "64: const linkStyleReplacer = (hash, attrs, setCrossorigin) =>",
      "66:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
      "67:  }/>`",
      "",
      "[Removed Lines]",
      "53:  `<script${attrs} integrity=\"${hash}\"${",
      "59:  `<style${attrs} integrity=\"${hash}\"${",
      "65:  `<link${attrs} integrity=\"${hash}\"${",
      "",
      "[Added Lines]",
      "53:  `<script${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "59:  `<style${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "65:  `<link${attrs}${hash !== null ? ` integrity=\"${hash}\"` : ''}${",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:  logger,",
      "243:  content,",
      "244:  globalHashes,",
      "246: ) => {",
      "247:  const processors = getRegexProcessors()",
      "",
      "[Removed Lines]",
      "245:  sri",
      "",
      "[Added Lines]",
      "245:  sri,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "331:       if (sriHash) {",
      "332:        pageHashes[t2].add(sriHash)",
      "333:       } else {",
      "340:       }",
      "341:      } else {",
      "342:       logger.warn(`Unable to process external resource: \"${src}\"`)",
      "",
      "[Removed Lines]",
      "334:        const resourceResponse = await fetch(src, { method: 'GET' })",
      "335:        const resourceContent = await resourceResponse.arrayBuffer()",
      "337:        sriHash = generateSRIHash(resourceContent)",
      "338:        globalHashes[t2].set(src, sriHash)",
      "339:        pageHashes[t2].add(sriHash)",
      "",
      "[Added Lines]",
      "334:        logger.warn(",
      "335:         `Detected reference to not-allow-listed external resource \"${src}\"`,",
      "336:        )",
      "337:        if (setCrossorigin) {",
      "338:         updatedContent = updatedContent.replace(",
      "339:          match[0],",
      "340:          replacer(null, attrs, true, ''),",
      "341:         )",
      "342:        }",
      "343:        continue",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "517:  )",
      "518: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "535: export const scanAllowLists = async (sri, h) => {",
      "536:  for (const scriptUrl of sri.scriptsAllowListUrls) {",
      "537:   const resourceResponse = await fetch(scriptUrl, { method: 'GET' })",
      "538:   const resourceContent = await resourceResponse.arrayBuffer()",
      "539:   const sriHash = generateSRIHash(resourceContent)",
      "541:   h.extScriptHashes.add(sriHash)",
      "542:   h.perResourceSriHashes.scripts.set(scriptUrl, sriHash)",
      "543:  }",
      "545:  for (const styleUrl of sri.stylesAllowListUrls) {",
      "546:   const resourceResponse = await fetch(styleUrl, { method: 'GET' })",
      "547:   const resourceContent = await resourceResponse.arrayBuffer()",
      "548:   const sriHash = generateSRIHash(resourceContent)",
      "550:   h.extStyleHashes.add(sriHash)",
      "551:   h.perResourceSriHashes.styles.set(styleUrl, sriHash)",
      "552:  }",
      "553: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "673: }",
      "681:  return async (_ctx, next) => {",
      "682:   const response = await next()",
      "683:   const content = await response.text()",
      "685:   const { updatedContent } = await updateDynamicPageSriHashes(",
      "687:    content,",
      "688:    globalHashes,",
      "689:   )",
      "691:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "679: export const getMiddlewareHandler = globalHashes => {",
      "686:    console,",
      "",
      "[Added Lines]",
      "716: export const getMiddlewareHandler = (logger, globalHashes, sri) => {",
      "723:    logger,",
      "726:    sri,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "709:  return async (_ctx, next) => {",
      "710:   const response = await next()",
      "711:   const content = await response.text()",
      "713:   const { updatedContent, pageHashes } = await updateDynamicPageSriHashes(",
      "715:    content,",
      "716:    globalHashes,",
      "717:   )",
      "719:   const patchedResponse = new Response(updatedContent, {",
      "",
      "[Removed Lines]",
      "707: export const getCSPMiddlewareHandler = (globalHashes, securityHeadersOpts) => {",
      "714:    console,",
      "",
      "[Added Lines]",
      "747: export const getCSPMiddlewareHandler = (",
      "748:  logger,",
      "749:  globalHashes,",
      "750:  securityHeadersOpts,",
      "751:  sri,",
      "752: ) => {",
      "759:    logger,",
      "762:    sri,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "766:   await scanForNestedResources(logger, publicDir, h)",
      "767:   await generateSRIHashesModule(",
      "768:    logger,",
      "769:    h,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "813:   await scanAllowLists(sri, h)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "822:  return defineMiddleware(${",
      "823:   securityHeadersOptions !== undefined",
      "825:      securityHeadersOptions,",
      "828:  })",
      "829: })()",
      "830: `",
      "",
      "[Removed Lines]",
      "824:    ? `getCSPMiddlewareHandler(globalHashes, ${JSON.stringify(",
      "826:     )})`",
      "827:    : 'getMiddlewareHandler(globalHashes)'",
      "",
      "[Added Lines]",
      "871:    ? `getCSPMiddlewareHandler(console, globalHashes, ${JSON.stringify(",
      "873:     )}, ${JSON.stringify(sri)})`",
      "874:    : `getMiddlewareHandler(console, globalHashes, ${JSON.stringify(sri)})`",
      "",
      "---------------"
    ],
    "src/headers.mjs||src/headers.mjs": [
      "File: src/headers.mjs -> src/headers.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:  if (pageHashes.scripts.size > 0) {",
      "98:   setSrcDirective(directives, 'script-src', pageHashes.scripts)",
      "99:  }",
      "100:  if (pageHashes.styles.size > 0) {",
      "101:   setSrcDirective(directives, 'style-src', pageHashes.styles)",
      "102:  }",
      "103:  if (Object.keys(directives).length > 0) {",
      "104:   plainHeaders['content-security-policy'] = serialiseCspDirectives(directives)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99:  } else {",
      "100:   directives['script-src'] = \"'none'\"",
      "104:  } else {",
      "105:   directives['style-src'] = \"'none'\"",
      "",
      "---------------"
    ],
    "src/main.mjs||src/main.mjs": [
      "File: src/main.mjs -> src/main.mjs",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  return /** @satisfies {AstroIntegration} */ {",
      "79:   name: '@kindspells/astro-shield',",
      "80:   hooks: {",
      "82:     ? {",
      "83:       'astro:build:done': getAstroBuildDone(_sri),",
      "84:      }",
      "85:     : undefined),",
      "87:     ? {",
      "88:       'astro:config:setup': getAstroConfigSetup(_sri, securityHeaders),",
      "89:      }",
      "",
      "[Removed Lines]",
      "81:    ...((enableStatic_SRI ?? true) === true",
      "86:    ...(enableMiddleware_SRI === true",
      "",
      "[Added Lines]",
      "81:    ...(_sri.enableStatic === true",
      "86:    ...(_sri.enableMiddleware === true",
      "",
      "---------------"
    ],
    "tests/core.test.mts||tests/core.test.mts": [
      "File: tests/core.test.mts -> tests/core.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import { resolve } from 'node:path'",
      "8: import { readdir, rm } from 'node:fs/promises'",
      "11: import {",
      "12:  arraysEqual,",
      "13:  generateSRIHash,",
      "14:  generateSRIHashesModule,",
      "15:  pageHashesEqual,",
      "16:  scanForNestedResources,",
      "17:  sriHashesEqual,",
      "18:  updateDynamicPageSriHashes,",
      "",
      "[Removed Lines]",
      "10: import { beforeEach, describe, expect, it } from 'vitest'",
      "",
      "[Added Lines]",
      "10: import { assert, beforeEach, describe, expect, it } from 'vitest'",
      "15:  getCSPMiddlewareHandler,",
      "16:  getMiddlewareHandler,",
      "18:  scanAllowLists,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "362:     <title>My Test Page</title>",
      "363:    </head>",
      "364:    <body>",
      "366:    </body>",
      "367:   </html>`",
      "",
      "[Removed Lines]",
      "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=\"></script>",
      "",
      "[Added Lines]",
      "368:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=\"></script>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "379:   expect(h.extScriptHashes.size).toBe(1)",
      "380:   expect(",
      "381:    h.extScriptHashes.has(",
      "383:    ),",
      "384:   ).toBe(true)",
      "385:   expect(h.inlineScriptHashes.size).toBe(0)",
      "",
      "[Removed Lines]",
      "382:     'sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=',",
      "",
      "[Added Lines]",
      "385:     'sha256-Xbdu1jxIAqCjb78wAdgir+Swc5faxBuLHPm0DC/lG80=',",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "656:   expect(pageHashes.styles.size).toBe(0)",
      "657:  })",
      "660:   const remoteScript =",
      "661:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "662:   const content = `<html>",
      "",
      "[Removed Lines]",
      "659:  it('adds sri hash to external script (cross origin)', async () => {",
      "",
      "[Added Lines]",
      "662:  it('avoids adding sri hash to external script when not allow-listed (cross origin)', async () => {",
      "663:   const remoteScript =",
      "664:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "665:   const content = `<html>",
      "666:    <head>",
      "667:     <title>My Test Page</title>",
      "668:    </head>",
      "669:    <body>",
      "670:     <script type=\"module\" src=\"${remoteScript}\"></script>",
      "671:    </body>",
      "672:   </html>`",
      "674:   const expected = `<html>",
      "675:    <head>",
      "676:     <title>My Test Page</title>",
      "677:    </head>",
      "678:    <body>",
      "679:     <script type=\"module\" src=\"${remoteScript}\" crossorigin=\"anonymous\"></script>",
      "680:    </body>",
      "681:   </html>`",
      "683:   const h = getMiddlewareHashes()",
      "684:   let warnCounter = 0",
      "685:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "686:    {",
      "687:     info: () => {},",
      "688:     warn: () => {",
      "689:      warnCounter += 1",
      "690:     },",
      "691:     error: () => {},",
      "692:    },",
      "693:    content,",
      "694:    h,",
      "695:   )",
      "697:   expect(warnCounter).toBe(1)",
      "698:   expect(updatedContent).toEqual(expected)",
      "699:   expect(h.scripts.size).toBe(0)",
      "700:   expect(h.styles.size).toBe(0)",
      "701:   expect(h.scripts.get(remoteScript)).toBeUndefined()",
      "702:   expect(pageHashes.scripts.size).toBe(0)",
      "703:   expect(",
      "704:    pageHashes.scripts.has(",
      "705:     'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "706:    ),",
      "707:   ).toBe(false)",
      "708:   expect(pageHashes.styles.size).toBe(0)",
      "709:  })",
      "711:  it('adds sri hash to external script when allow-listed (cross origin)', async () => {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "678:   </html>`",
      "680:   const h = getMiddlewareHashes()",
      "681:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
      "682:    console,",
      "683:    content,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "733:   h.scripts.set(",
      "734:    remoteScript,",
      "735:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "736:   )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "779:   let warnCalls = 0",
      "780:   const testLogger = {",
      "785:     warnCalls += 1",
      "790:    },",
      "791:   }",
      "793:   const h = getMiddlewareHashes()",
      "",
      "[Removed Lines]",
      "781:    info(msg: string) {",
      "782:     return console.info(msg)",
      "783:    },",
      "784:    warn(msg: string) {",
      "786:     return console.warn(msg)",
      "787:    },",
      "788:    error(msg: string) {",
      "789:     return console.error(msg)",
      "",
      "[Added Lines]",
      "837:    info(_msg: string) {},",
      "838:    warn(_msg: string) {",
      "841:    error(_msg: string) {},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "846:  })",
      "847: })",
      "849: describe('scanForNestedResources', () => {",
      "850:  it('populates our hashes collection with hashes from nested resources', async () => {",
      "851:   const h = getEmptyHashes()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "900: describe('scanAllowLists', () => {",
      "901:  it('populates hashes collection with hashes from allow-listed resources', async () => {",
      "902:   const scriptUrl =",
      "903:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
      "904:   const styleUrl =",
      "905:    'https://raw.githubusercontent.com/KindSpells/astro-shield/26fdf5399d79baa3a8ea70ded526116b0bfc06ed/e2e/fixtures/hybrid2/src/styles/normalize.css'",
      "907:   const h = getEmptyHashes()",
      "908:   await scanAllowLists(",
      "909:    {",
      "910:     scriptsAllowListUrls: [scriptUrl],",
      "911:     stylesAllowListUrls: [styleUrl],",
      "912:    },",
      "913:    h,",
      "914:   )",
      "916:   expect(h.extScriptHashes.size).toBe(1)",
      "917:   expect(h.extStyleHashes.size).toBe(1)",
      "918:   expect(h.perResourceSriHashes.scripts.get(scriptUrl)).toBe(",
      "919:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
      "920:   )",
      "921:   expect(h.perResourceSriHashes.styles.get(styleUrl)).toBe(",
      "922:    'sha256-7o69ZgSUx++S5DC0Ek7X2CbY4GnxxUkwGZDdybWxSG8=',",
      "923:   )",
      "924:  })",
      "925: })",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "901:   expect(hashesModule).toHaveProperty('perResourceSriHashes')",
      "902:  })",
      "903: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "983: describe('getMiddlewareHandler', () => {",
      "984:  it('returns a working middleware handler', async () => {",
      "985:   const hashes = {",
      "986:    scripts: new Map<string, string>(),",
      "987:    styles: new Map<string, string>(),",
      "988:   }",
      "989:   let warnCounter = 0",
      "990:   const middleware = getMiddlewareHandler(",
      "991:    {",
      "992:     info: () => {},",
      "993:     warn: () => {",
      "994:      warnCounter += 1",
      "995:     },",
      "996:     error: () => {},",
      "997:    },",
      "998:    hashes,",
      "999:    {",
      "1000:     enableStatic: true,",
      "1001:     enableMiddleware: true,",
      "1002:     hashesModule: undefined,",
      "1003:     allowInlineScripts: 'all',",
      "1004:     allowInlineStyles: 'all',",
      "1005:     scriptsAllowListUrls: [],",
      "1006:     stylesAllowListUrls: [],",
      "1007:    },",
      "1008:   )",
      "1009:   type MidParams = Parameters<typeof middleware>",
      "1011:   const patchedResponse = await middleware(",
      "1012:    undefined as unknown as MidParams[0],",
      "1013:    (async () => {",
      "1014:     return {",
      "1015:      text: async () => `",
      "1016: <html>",
      "1017:  <head>",
      "1018:   <title>My Test Page</title>",
      "1019:  </head>",
      "1020:  <body>",
      "1021:   <script>console.log(\"Hello World!\")</script>",
      "1022:  </body>",
      "1023: </html>`,",
      "1024:      status: 200,",
      "1025:      statusText: 'OK',",
      "1026:      headers: new Headers(),",
      "1027:     }",
      "1028:    }) as MidParams[1],",
      "1029:   )",
      "1031:   expect(warnCounter).toBe(0)",
      "1032:   assert(patchedResponse instanceof Response)",
      "1033:   const responseText = await patchedResponse.text()",
      "1034:   expect(responseText).toBe(`",
      "1035: <html>",
      "1036:  <head>",
      "1037:   <title>My Test Page</title>",
      "1038:  </head>",
      "1039:  <body>",
      "1040:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1041:  </body>",
      "1042: </html>`)",
      "1043:  })",
      "1045:  it('protects from validating disallowed inline scripts', async () => {",
      "1046:   const hashes = {",
      "1047:    scripts: new Map<string, string>(),",
      "1048:    styles: new Map<string, string>(),",
      "1049:   }",
      "1051:   let warnCounter = 0",
      "1052:   const middleware = getMiddlewareHandler(",
      "1053:    {",
      "1054:     info: () => {},",
      "1055:     warn: () => {",
      "1056:      warnCounter += 1",
      "1057:     },",
      "1058:     error: () => {},",
      "1059:    },",
      "1060:    hashes,",
      "1061:    {",
      "1062:     enableStatic: true,",
      "1063:     enableMiddleware: true,",
      "1064:     hashesModule: undefined,",
      "1065:     allowInlineScripts: 'static',",
      "1066:     allowInlineStyles: 'static',",
      "1067:     scriptsAllowListUrls: [],",
      "1068:     stylesAllowListUrls: [],",
      "1069:    },",
      "1070:   )",
      "1071:   type MidParams = Parameters<typeof middleware>",
      "1073:   const patchedResponse = await middleware(",
      "1074:    undefined as unknown as MidParams[0],",
      "1075:    (async () => {",
      "1076:     return {",
      "1077:      text: async () => `",
      "1078: <html>",
      "1079:  <head>",
      "1080:   <title>My Test Page</title>",
      "1081:  </head>",
      "1082:  <body>",
      "1083:   <script>console.log(\"Hello World!\")</script>",
      "1084:  </body>",
      "1085: </html>`,",
      "1086:      status: 200,",
      "1087:      statusText: 'OK',",
      "1088:      headers: new Headers(),",
      "1089:     }",
      "1090:    }) as MidParams[1],",
      "1091:   )",
      "1093:   expect(warnCounter).toBe(1)",
      "1094:   assert(patchedResponse instanceof Response)",
      "1095:   const responseText = await patchedResponse.text()",
      "1096:   expect(patchedResponse.headers.has('content-security-policy')).toBe(false)",
      "1097:   expect(responseText).toBe(`",
      "1098: <html>",
      "1099:  <head>",
      "1100:   <title>My Test Page</title>",
      "1101:  </head>",
      "1102:  <body>",
      "1103:   <script>console.log(\"Hello World!\")</script>",
      "1104:  </body>",
      "1105: </html>`)",
      "1106:  })",
      "1107: })",
      "1109: describe('getCSPMiddlewareHandler', () => {",
      "1110:  it('returns a working middleware handler', async () => {",
      "1111:   const hashes = {",
      "1112:    scripts: new Map<string, string>(),",
      "1113:    styles: new Map<string, string>(),",
      "1114:   }",
      "1115:   let warnCounter = 0",
      "1116:   const middleware = getCSPMiddlewareHandler(",
      "1117:    {",
      "1118:     info: () => {},",
      "1119:     warn: () => {",
      "1120:      warnCounter += 1",
      "1121:     },",
      "1122:     error: () => {},",
      "1123:    },",
      "1124:    hashes,",
      "1125:    {",
      "1126:     contentSecurityPolicy: {},",
      "1127:    },",
      "1128:    {",
      "1129:     enableStatic: true,",
      "1130:     enableMiddleware: true,",
      "1131:     hashesModule: undefined,",
      "1132:     allowInlineScripts: 'all',",
      "1133:     allowInlineStyles: 'all',",
      "1134:     scriptsAllowListUrls: [],",
      "1135:     stylesAllowListUrls: [],",
      "1136:    },",
      "1137:   )",
      "1138:   type MidParams = Parameters<typeof middleware>",
      "1140:   const patchedResponse = await middleware(",
      "1141:    undefined as unknown as MidParams[0],",
      "1142:    (async () => {",
      "1143:     return {",
      "1144:      text: async () => `",
      "1145: <html>",
      "1146:  <head>",
      "1147:   <title>My Test Page</title>",
      "1148:  </head>",
      "1149:  <body>",
      "1150:   <script>console.log(\"Hello World!\")</script>",
      "1151:  </body>",
      "1152: </html>`,",
      "1153:      status: 200,",
      "1154:      statusText: 'OK',",
      "1155:      headers: new Headers(),",
      "1156:     }",
      "1157:    }) as MidParams[1],",
      "1158:   )",
      "1160:   expect(warnCounter).toBe(0)",
      "1161:   assert(patchedResponse instanceof Response)",
      "1162:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1163:   expect(patchedResponse.headers.get('content-security-policy')).toBe(",
      "1164:    `script-src 'self' 'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q='; style-src 'none'`,",
      "1165:   )",
      "1166:   const responseText = await patchedResponse.text()",
      "1167:   expect(responseText).toBe(`",
      "1168: <html>",
      "1169:  <head>",
      "1170:   <title>My Test Page</title>",
      "1171:  </head>",
      "1172:  <body>",
      "1173:   <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
      "1174:  </body>",
      "1175: </html>`)",
      "1176:  })",
      "1178:  it('protects from validating disallowed inline scripts', async () => {",
      "1179:   const hashes = {",
      "1180:    scripts: new Map<string, string>(),",
      "1181:    styles: new Map<string, string>(),",
      "1182:   }",
      "1184:   let warnCounter = 0",
      "1185:   const middleware = getCSPMiddlewareHandler(",
      "1186:    {",
      "1187:     info: () => {},",
      "1188:     warn: () => {",
      "1189:      warnCounter += 1",
      "1190:     },",
      "1191:     error: () => {},",
      "1192:    },",
      "1193:    hashes,",
      "1194:    { contentSecurityPolicy: {} },",
      "1195:    {",
      "1196:     enableStatic: true,",
      "1197:     enableMiddleware: true,",
      "1198:     hashesModule: undefined,",
      "1199:     allowInlineScripts: 'static',",
      "1200:     allowInlineStyles: 'static',",
      "1201:     scriptsAllowListUrls: [],",
      "1202:     stylesAllowListUrls: [],",
      "1203:    },",
      "1204:   )",
      "1205:   type MidParams = Parameters<typeof middleware>",
      "1207:   const patchedResponse = await middleware(",
      "1208:    undefined as unknown as MidParams[0],",
      "1209:    (async () => {",
      "1210:     return {",
      "1211:      text: async () => `",
      "1212: <html>",
      "1213:  <head>",
      "1214:   <title>My Test Page</title>",
      "1215:  </head>",
      "1216:  <body>",
      "1217:   <script>console.log(\"Hello World!\")</script>",
      "1218:  </body>",
      "1219: </html>`,",
      "1220:      status: 200,",
      "1221:      statusText: 'OK',",
      "1222:      headers: new Headers(),",
      "1223:     }",
      "1224:    }) as MidParams[1],",
      "1225:   )",
      "1227:   expect(warnCounter).toBe(1)",
      "1228:   assert(patchedResponse instanceof Response)",
      "1229:   const responseText = await patchedResponse.text()",
      "1230:   expect(patchedResponse.headers.has('content-security-policy')).toBe(true)",
      "1231:   expect(responseText).toBe(`",
      "1232: <html>",
      "1233:  <head>",
      "1234:   <title>My Test Page</title>",
      "1235:  </head>",
      "1236:  <body>",
      "1237:   <script>console.log(\"Hello World!\")</script>",
      "1238:  </body>",
      "1239: </html>`)",
      "1240:  })",
      "1241: })",
      "",
      "---------------"
    ],
    "tests/headers.test.mts||tests/headers.test.mts": [
      "File: tests/headers.test.mts -> tests/headers.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:   const patchedHeaders = patchHeaders(headers, pageHashes, settings)",
      "156:   expect(patchedHeaders.get('content-security-policy')).toBe(",
      "158:   )",
      "159:  })",
      "",
      "[Removed Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'\",",
      "",
      "[Added Lines]",
      "157:    \"form-action 'self'; frame-ancestors 'none'; script-src 'none'; style-src 'none'\",",
      "",
      "---------------"
    ],
    "tests/main.test.mts||tests/main.test.mts": [
      "File: tests/main.test.mts -> tests/main.test.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:  })",
      "38:  it('returns a valid AstroIntegration object for almost-default config', () => {",
      "40:   checkIntegration(integration)",
      "41:  })",
      "43:  it('returns an \"empty\" integration when we disable all features', () => {",
      "45:   checkIntegration(integration, [])",
      "46:  })",
      "48:  it('returns hooks for static & dynamic content when we enable middleware', () => {",
      "50:   checkIntegration(integration, ['astro:build:done', 'astro:config:setup'])",
      "51:  })",
      "",
      "[Removed Lines]",
      "39:   const integration = shield({ enableStatic_SRI: true })",
      "44:   const integration = shield({ enableStatic_SRI: false })",
      "49:   const integration = shield({ enableMiddleware_SRI: true })",
      "",
      "[Added Lines]",
      "39:   const integration = shield({ sri: { enableStatic: true } })",
      "44:   const integration = shield({ sri: { enableStatic: false } })",
      "49:   const integration = shield({ sri: { enableMiddleware: true } })",
      "",
      "---------------"
    ],
    "vitest.config.unit.mts||vitest.config.unit.mts": [
      "File: vitest.config.unit.mts -> vitest.config.unit.mts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:     'coverage-unit/**/*',",
      "20:    ],",
      "21:    thresholds: {",
      "26:    },",
      "27:    reportsDirectory: 'coverage-unit',",
      "28:   },",
      "",
      "[Removed Lines]",
      "22:     statements: 72.0,",
      "23:     branches: 76.0,",
      "24:     functions: 80.0,",
      "25:     lines: 72.0,",
      "",
      "[Added Lines]",
      "22:     statements: 77.0,",
      "23:     branches: 77.0,",
      "24:     functions: 87.0,",
      "25:     lines: 77.0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "384e627b22c2030e60063abee5526472f64c88a7",
      "candidate_info": {
        "commit_hash": "384e627b22c2030e60063abee5526472f64c88a7",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/384e627b22c2030e60063abee5526472f64c88a7",
        "files": [
          ".editorconfig",
          ".github/workflows/tests.yml",
          ".gitignore",
          ".hooks/pre-commit",
          "biome.json",
          "core.mjs",
          "e2e/e2e.test.mts",
          "e2e/fixtures/dynamic/astro.config.mjs",
          "e2e/fixtures/dynamic/package.json",
          "e2e/fixtures/dynamic/pnpm-lock.yaml",
          "e2e/fixtures/dynamic/src/env.d.ts",
          "e2e/fixtures/dynamic/src/pages/index.astro",
          "e2e/fixtures/hybrid/astro.config.mjs",
          "e2e/fixtures/hybrid/package.json",
          "e2e/fixtures/hybrid/pnpm-lock.yaml",
          "e2e/fixtures/hybrid/public/code.js",
          "e2e/fixtures/hybrid/src/env.d.ts",
          "e2e/fixtures/hybrid/src/pages/index.astro",
          "e2e/fixtures/static/astro.config.mjs",
          "e2e/fixtures/static/package.json",
          "e2e/fixtures/static/pnpm-lock.yaml",
          "e2e/fixtures/static/src/env.d.ts",
          "e2e/fixtures/static/src/pages/index.astro",
          "main.d.ts",
          "main.mjs",
          "package.json",
          "pnpm-lock.yaml",
          "src/core.d.ts",
          "src/core.mjs",
          "src/fs.mjs",
          "src/main.d.ts",
          "src/main.mjs",
          "src/state.mjs",
          "tests/core.test.mts",
          "tests/fixtures/fake.css",
          "tests/fixtures/fake.js",
          "tests/fixtures/nested/nested.js",
          "tests/fs.test.mts",
          "tests/main.test.mts",
          "tests/playground/.empty",
          "tests/state.test.mts",
          "tsconfig.json",
          "vitest.config.e2e.mts",
          "vitest.config.unit.mts"
        ],
        "message": "feat!: big refactor, tests & features\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "core.mjs||core.mjs",
          "e2e/e2e.test.mts||e2e/e2e.test.mts",
          "e2e/fixtures/dynamic/astro.config.mjs||e2e/fixtures/dynamic/astro.config.mjs",
          "e2e/fixtures/dynamic/src/env.d.ts||e2e/fixtures/dynamic/src/env.d.ts",
          "e2e/fixtures/dynamic/src/pages/index.astro||e2e/fixtures/dynamic/src/pages/index.astro",
          "e2e/fixtures/hybrid/astro.config.mjs||e2e/fixtures/hybrid/astro.config.mjs",
          "e2e/fixtures/hybrid/public/code.js||e2e/fixtures/hybrid/public/code.js",
          "e2e/fixtures/hybrid/src/env.d.ts||e2e/fixtures/hybrid/src/env.d.ts",
          "e2e/fixtures/hybrid/src/pages/index.astro||e2e/fixtures/hybrid/src/pages/index.astro",
          "e2e/fixtures/static/astro.config.mjs||e2e/fixtures/static/astro.config.mjs",
          "e2e/fixtures/static/src/env.d.ts||e2e/fixtures/static/src/env.d.ts",
          "e2e/fixtures/static/src/pages/index.astro||e2e/fixtures/static/src/pages/index.astro",
          "main.d.ts||main.d.ts",
          "main.mjs||main.mjs",
          "src/core.d.ts||src/core.d.ts",
          "src/core.mjs||src/core.mjs",
          "src/fs.mjs||src/fs.mjs",
          "src/main.d.ts||src/main.d.ts",
          "src/main.mjs||src/main.mjs",
          "src/state.mjs||src/state.mjs",
          "tests/core.test.mts||tests/core.test.mts",
          "tests/fixtures/fake.js||tests/fixtures/fake.js",
          "tests/fixtures/nested/nested.js||tests/fixtures/nested/nested.js",
          "tests/fs.test.mts||tests/fs.test.mts",
          "tests/main.test.mts||tests/main.test.mts",
          "tests/state.test.mts||tests/state.test.mts",
          "vitest.config.e2e.mts||vitest.config.e2e.mts",
          "vitest.config.mts||vitest.config.unit.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "core.mjs||core.mjs": [
          "File: core.mjs -> core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "e2e/e2e.test.mts||e2e/e2e.test.mts": [
          "File: e2e/e2e.test.mts -> e2e/e2e.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { readFile } from 'node:fs/promises'",
          "2: import { dirname, resolve } from 'node:path'",
          "3: import { execFile as _execFile } from 'node:child_process'",
          "4: import { fileURLToPath } from 'node:url'",
          "5: import { promisify } from 'node:util'",
          "7: import type { PreviewServer } from 'astro'",
          "8: import { preview } from 'astro'",
          "9: import {",
          "10:  afterAll,",
          "11:  afterEach,",
          "12:  assert,",
          "13:  beforeAll,",
          "14:  beforeEach,",
          "15:  describe,",
          "16:  expect,",
          "17:  it,",
          "18: } from 'vitest'",
          "20: import { generateSRIHash } from '../src/core.mjs'",
          "21: import { doesFileExist } from '../src/fs.mjs'",
          "23: const execFile = promisify(_execFile)",
          "25: const currentDir = dirname(fileURLToPath(import.meta.url))",
          "26: const fixturesDir = resolve(currentDir, 'fixtures')",
          "28: const _checkHtmlIsPatched = (content: string) => {",
          "29:  const integrityRegex =",
          "30:   /\\s+integrity\\s*=\\s*(\"(?<integrity1>.*?)\"|'(?<integrity2>.*?)')/i",
          "31:  const scriptRegex =",
          "32:   /<script(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*script\\s*>/gi",
          "33:  const styleRegex =",
          "34:   /<style(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*style\\s*>/gi",
          "38:  const scriptMatch = scriptRegex.exec(content)",
          "39:  assert(scriptMatch !== null)",
          "41:  const { attrs: scriptAttrs, content: scriptContent } =",
          "42:   scriptMatch.groups ?? {}",
          "43:  assert(scriptAttrs !== undefined)",
          "44:  assert(scriptContent !== undefined)",
          "46:  const scriptIntegrityMatch = integrityRegex.exec(scriptAttrs)",
          "47:  assert(scriptIntegrityMatch !== null)",
          "49:  const scriptIntegrity =",
          "50:   scriptIntegrityMatch.groups?.integrity1 ??",
          "51:   scriptIntegrityMatch.groups?.integrity2",
          "52:  assert(scriptIntegrity !== undefined)",
          "54:  expect(scriptIntegrity).toEqual(generateSRIHash(scriptContent))",
          "58:  const styleMatch = styleRegex.exec(content)",
          "59:  assert(styleMatch !== null)",
          "61:  const { attrs: styleAttrs, content: styleContent } = styleMatch.groups ?? {}",
          "62:  assert(styleAttrs !== undefined)",
          "63:  assert(styleContent !== undefined)",
          "65:  const styleIntegrityMatch = integrityRegex.exec(styleAttrs)",
          "66:  assert(styleIntegrityMatch !== null)",
          "68:  const styleIntegrity =",
          "69:   styleIntegrityMatch.groups?.integrity1 ??",
          "70:   styleIntegrityMatch.groups?.integrity2",
          "71:  assert(styleIntegrity !== undefined)",
          "73:  expect(styleIntegrity).toEqual(generateSRIHash(styleContent))",
          "74: }",
          "76: describe('static', () => {",
          "77:  const staticDir = resolve(fixturesDir, 'static')",
          "78:  const execOpts = { cwd: staticDir }",
          "80:  beforeAll(async () => {",
          "81:   await execFile('pnpm', ['install'], execOpts)",
          "82:  })",
          "84:  beforeEach(async () => {",
          "85:   await execFile('pnpm', ['run', 'clean'], execOpts)",
          "86:  })",
          "88:  const checkHtmlIsPatched = async (filepath: string) => {",
          "89:   const content = await readFile(filepath, 'utf8')",
          "90:   return _checkHtmlIsPatched(content)",
          "91:  }",
          "93:  const checkHtmlIsNotPatched = async (filepath: string) => {",
          "94:   const content = await readFile(filepath, 'utf8')",
          "96:   const integrityRegex =",
          "97:    /\\s+integrity\\s*=\\s*(\"(?<integrity1>.*?)\"|'(?<integrity2>.*?)')/i",
          "98:   const scriptRegex =",
          "99:    /<script(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*script\\s*>/gi",
          "100:   const styleRegex =",
          "101:    /<style(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*style\\s*>/gi",
          "105:   const scriptMatch = scriptRegex.exec(content)",
          "106:   assert(scriptMatch !== null)",
          "108:   const { attrs: scriptAttrs, content: scriptContent } =",
          "109:    scriptMatch.groups ?? {}",
          "110:   assert(scriptAttrs !== undefined)",
          "111:   assert(scriptContent !== undefined)",
          "113:   const scriptIntegrityMatch = integrityRegex.exec(scriptAttrs)",
          "114:   assert(scriptIntegrityMatch === null)",
          "118:   const styleMatch = styleRegex.exec(content)",
          "119:   assert(styleMatch !== null)",
          "121:   const { attrs: styleAttrs, content: styleContent } = styleMatch.groups ?? {}",
          "122:   assert(styleAttrs !== undefined)",
          "123:   assert(styleContent !== undefined)",
          "125:   const styleIntegrityMatch = integrityRegex.exec(styleAttrs)",
          "126:   assert(styleIntegrityMatch === null)",
          "127:  }",
          "129:  it.each([[undefined], [true]])(",
          "130:   'should generate a module exporting SRI hashes with \"default + path\" options',",
          "131:   async (enableStaticSRI: boolean | undefined) => {",
          "132:    await execFile('pnpm', ['run', 'build'], {",
          "133:     ...execOpts,",
          "134:     ...(enableStaticSRI",
          "135:      ? { env: { ...process.env, ENABLE_STATIC_SRI: 'true' } }",
          "136:      : undefined),",
          "137:    })",
          "139:    await checkHtmlIsPatched(resolve(staticDir, 'dist', 'index.html'))",
          "141:    const modulePath = resolve(staticDir, 'src', 'generated', 'sri.mjs')",
          "142:    expect(await doesFileExist(modulePath)).toBe(true)",
          "143:    const generatedModule = await import(modulePath)",
          "147:    expect(generatedModule).toHaveProperty('inlineScriptHashes')",
          "148:    expect(generatedModule).toHaveProperty('inlineStyleHashes')",
          "149:    expect(generatedModule).toHaveProperty('extScriptHashes')",
          "150:    expect(generatedModule).toHaveProperty('extStyleHashes')",
          "151:    expect(generatedModule).toHaveProperty('perPageSriHashes')",
          "153:    expect(Object.keys(generatedModule.perPageSriHashes).length).toEqual(1)",
          "154:    expect(generatedModule.perPageSriHashes).toHaveProperty('index.html')",
          "158:    expect(generatedModule.inlineScriptHashes).toEqual([",
          "159:     'sha256-YAk8ai9SByMV+33RYW8X9h1hAw/4tANFlFpU4Kt1jeI=',",
          "160:    ])",
          "161:    expect(generatedModule.inlineStyleHashes).toEqual([",
          "162:     'sha256-ZlgyI5Bx/aeAyk/wSIypqeIM5PBhz9IiAek9HIiAjaI=',",
          "163:    ])",
          "164:    expect(generatedModule.extScriptHashes).toEqual([])",
          "165:    expect(generatedModule.extStyleHashes).toEqual([])",
          "169:    const indexHashes = generatedModule.perPageSriHashes['index.html']",
          "171:    expect(indexHashes).toHaveProperty('scripts')",
          "172:    expect(indexHashes).toHaveProperty('styles')",
          "174:    expect(indexHashes.scripts).toEqual([",
          "175:     'sha256-YAk8ai9SByMV+33RYW8X9h1hAw/4tANFlFpU4Kt1jeI=',",
          "176:    ])",
          "177:    expect(indexHashes.styles).toEqual([",
          "178:     'sha256-ZlgyI5Bx/aeAyk/wSIypqeIM5PBhz9IiAek9HIiAjaI=',",
          "179:    ])",
          "180:   },",
          "181:  )",
          "183:  it('should not generate a module with SRI hashes when we do not set the output module path', async () => {",
          "184:   await execFile('pnpm', ['run', 'build'], {",
          "185:    ...execOpts,",
          "186:    env: { ...process.env, ENABLE_SRI_MODULE: 'false' },",
          "187:   })",
          "189:   await checkHtmlIsPatched(resolve(staticDir, 'dist', 'index.html'))",
          "191:   const modulePath = resolve(staticDir, 'src', 'generated', 'sri.mjs')",
          "192:   expect(await doesFileExist(modulePath)).toBe(false)",
          "193:  })",
          "195:  it('should not process static files when we set enableStatic_SRI to false', async () => {",
          "196:   await execFile('pnpm', ['run', 'build'], {",
          "197:    ...execOpts,",
          "198:    env: { ...process.env, ENABLE_STATIC_SRI: 'false' },",
          "199:   })",
          "201:   await checkHtmlIsNotPatched(resolve(staticDir, 'dist', 'index.html'))",
          "203:   const modulePath = resolve(staticDir, 'src', 'generated', 'sri.mjs')",
          "204:   expect(await doesFileExist(modulePath)).toBe(false)",
          "205:  })",
          "206: })",
          "208: describe('middleware', () => {",
          "209:  const dynamicDir = resolve(fixturesDir, 'dynamic')",
          "210:  const execOpts = { cwd: dynamicDir }",
          "212:  let urlBase: string",
          "213:  let server: PreviewServer | undefined",
          "214:  let port: number",
          "216:  beforeAll(async () => {",
          "217:   await execFile('pnpm', ['install'], execOpts)",
          "218:   await execFile('pnpm', ['run', 'clean'], execOpts)",
          "219:   await execFile('pnpm', ['run', 'build'], execOpts)",
          "220:  })",
          "222:  beforeEach(async (...args) => {",
          "223:   port = 1024 + Math.floor(Math.random() * 64511)",
          "224:   urlBase = `http://localhost:${port}`",
          "226:   await cleanServer()",
          "227:   server = await preview({",
          "228:    root: dynamicDir,",
          "229:    server: { port },",
          "230:    logLevel: 'debug',",
          "231:   })",
          "232:  })",
          "234:  const cleanServer = async () => {",
          "235:   if (server) {",
          "236:    if (!server.closed()) {",
          "237:     await server.stop()",
          "238:    }",
          "239:    server = undefined",
          "240:   }",
          "241:  }",
          "243:  afterEach(cleanServer)",
          "244:  afterAll(cleanServer) // Just in case",
          "246:  const checkHtmlIsPatched = async path => {",
          "247:   const response = await fetch(urlBase + path)",
          "248:   const content = await response.text()",
          "249:   return _checkHtmlIsPatched(content)",
          "250:  }",
          "252:  it('patches inline resources for dynamically generated pages', async () => {",
          "253:   await checkHtmlIsPatched('/')",
          "254:  })",
          "255: })",
          "",
          "---------------"
        ],
        "e2e/fixtures/dynamic/astro.config.mjs||e2e/fixtures/dynamic/astro.config.mjs": [
          "File: e2e/fixtures/dynamic/astro.config.mjs -> e2e/fixtures/dynamic/astro.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { shield } from '@kindspells/astro-shield'",
          "8: import node from '@astrojs/node'",
          "9: import { defineConfig } from 'astro/config'",
          "17: export default defineConfig({",
          "18:  output: 'server',",
          "19:  trailingSlash: 'always',",
          "20:  adapter: node({ mode: 'standalone' }),",
          "21:  integrations: [",
          "22:   shield({",
          "23:    enableStatic_SRI: false,",
          "24:    enableMiddleware_SRI: true,",
          "25:   }),",
          "26:  ],",
          "27: })",
          "",
          "---------------"
        ],
        "e2e/fixtures/dynamic/src/env.d.ts||e2e/fixtures/dynamic/src/env.d.ts": [
          "File: e2e/fixtures/dynamic/src/env.d.ts -> e2e/fixtures/dynamic/src/env.d.ts"
        ],
        "e2e/fixtures/dynamic/src/pages/index.astro||e2e/fixtures/dynamic/src/pages/index.astro": [
          "File: e2e/fixtures/dynamic/src/pages/index.astro -> e2e/fixtures/dynamic/src/pages/index.astro",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "8: const myConst = 42",
          "9: ---",
          "10: <!DOCTYPE html><html lang=\"en\">",
          "11:  <head>",
          "12:   <meta charset=\"utf-8\" />",
          "13:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "14:   <title>My Static Test Site</title>",
          "15:   <style>h1 { color: red; }</style>",
          "16:  </head>",
          "17:  <body>",
          "18:   <script>alert('Hello!');</script>",
          "19:   <h1>My const is: { myConst }</h1>",
          "20:  </body>",
          "21: </html>",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid/astro.config.mjs||e2e/fixtures/hybrid/astro.config.mjs": [
          "File: e2e/fixtures/hybrid/astro.config.mjs -> e2e/fixtures/hybrid/astro.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { resolve } from 'node:path'",
          "8: import { shield } from '@kindspells/astro-shield'",
          "9: import node from '@astrojs/node'",
          "10: import { defineConfig } from 'astro/config'",
          "17: const rootDir = new URL('.', import.meta.url).pathname",
          "18: const sriHashesModule = resolve(rootDir, 'src', 'generated', 'sri.mjs')",
          "21: export default defineConfig({",
          "22:  output: 'hybrid',",
          "23:  trailingSlash: 'always',",
          "24:  adapter: node({ mode: 'standalone' }),",
          "25:  integrations: [",
          "26:   shield({",
          "27:    enableStatic_SRI: true,",
          "28:    enableMiddleware_SRI: true,",
          "29:    sriHashesModule,",
          "30:   }),",
          "31:  ],",
          "32: })",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid/public/code.js||e2e/fixtures/hybrid/public/code.js": [
          "File: e2e/fixtures/hybrid/public/code.js -> e2e/fixtures/hybrid/public/code.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: alert('Hello!')",
          "",
          "---------------"
        ],
        "e2e/fixtures/hybrid/src/env.d.ts||e2e/fixtures/hybrid/src/env.d.ts": [
          "File: e2e/fixtures/hybrid/src/env.d.ts -> e2e/fixtures/hybrid/src/env.d.ts"
        ],
        "e2e/fixtures/hybrid/src/pages/index.astro||e2e/fixtures/hybrid/src/pages/index.astro": [
          "File: e2e/fixtures/hybrid/src/pages/index.astro -> e2e/fixtures/hybrid/src/pages/index.astro",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "8: const myConst = 42",
          "9: export const prerender = false",
          "10: ---",
          "11: <!DOCTYPE html><html lang=\"en\">",
          "12:  <head>",
          "13:   <meta charset=\"utf-8\" />",
          "14:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "15:   <title>My Static Test Site</title>",
          "16:   <style>h1 { color: red; }</style>",
          "17:  </head>",
          "18:  <body>",
          "19:   <script is:inline src=\"/code.js\"></script>",
          "20:   <h1>My const is: { myConst }</h1>",
          "21:  </body>",
          "22: </html>",
          "",
          "---------------"
        ],
        "e2e/fixtures/static/astro.config.mjs||e2e/fixtures/static/astro.config.mjs": [
          "File: e2e/fixtures/static/astro.config.mjs -> e2e/fixtures/static/astro.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { env } from 'node:process'",
          "8: import { resolve } from 'node:path'",
          "9: import { shield } from '@kindspells/astro-shield'",
          "10: import { defineConfig } from 'astro/config'",
          "17: const rootDir = new URL('.', import.meta.url).pathname",
          "18: const sriHashesModule = resolve(rootDir, 'src', 'generated', 'sri.mjs')",
          "21: export default defineConfig({",
          "22:  output: 'static',",
          "23:  trailingSlash: 'always',",
          "24:  integrations: [",
          "25:   shield({",
          "26:    ...((env.ENABLE_SRI_MODULE ?? 'true') === 'true'",
          "27:     ? { sriHashesModule }",
          "28:     : undefined),",
          "29:    ...(env.ENABLE_STATIC_SRI",
          "30:     ? { enableStatic_SRI: env.ENABLE_STATIC_SRI === 'true' }",
          "31:     : undefined),",
          "32:   }),",
          "33:  ],",
          "34: })",
          "",
          "---------------"
        ],
        "e2e/fixtures/static/src/env.d.ts||e2e/fixtures/static/src/env.d.ts": [
          "File: e2e/fixtures/static/src/env.d.ts -> e2e/fixtures/static/src/env.d.ts"
        ],
        "e2e/fixtures/static/src/pages/index.astro||e2e/fixtures/static/src/pages/index.astro": [
          "File: e2e/fixtures/static/src/pages/index.astro -> e2e/fixtures/static/src/pages/index.astro",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ---",
          "8: const myConst = 42",
          "9: ---",
          "10: <!DOCTYPE html><html lang=\"en\">",
          "11:  <head>",
          "12:   <meta charset=\"utf-8\" />",
          "13:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "14:   <title>My Static Test Site</title>",
          "15:   <style>h1 { color: red; }</style>",
          "16:  </head>",
          "17:  <body>",
          "18:   <script>alert('Hello!');</script>",
          "19:   <h1>My const is: { myConst }</h1>",
          "20:  </body>",
          "21: </html>",
          "",
          "---------------"
        ],
        "main.d.ts||main.d.ts": [
          "File: main.d.ts -> main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mjs||main.mjs": [
          "File: main.mjs -> main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core.d.ts||src/core.d.ts": [
          "File: src/core.d.ts -> src/core.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: export type MiddlewareHashes = {",
          "8:  scripts: Map<string, string>",
          "9:  styles: Map<string, string>",
          "10: }",
          "12: export type PerPageHashes = { scripts: Set<string>; styles: Set<string> }",
          "13: export type PerPageHashesCollection = Map<string, PerPageHashes>",
          "15: export type HashesCollection = {",
          "16:  inlineScriptHashes: Set<string>",
          "17:  inlineStyleHashes: Set<string>",
          "18:  extScriptHashes: Set<string>",
          "19:  extStyleHashes: Set<string>",
          "20:  perPageSriHashes: PerPageHashesCollection",
          "21:  perResourceSriHashes: MiddlewareHashes",
          "22: }",
          "24: export type Logger = {",
          "25:  info(msg: string): void",
          "26:  warn(msg: string): void",
          "27:  error(msg: string): void",
          "28: }",
          "",
          "---------------"
        ],
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { createHash } from 'node:crypto'",
          "8: import { readFile, writeFile } from 'node:fs/promises'",
          "9: import { extname, resolve, relative } from 'node:path'",
          "10: import { doesFileExist, scanDirectory } from './fs.mjs'",
          "25: export const generateSRIHash = data => {",
          "26:  const hash = createHash('sha256')",
          "27:  if (data instanceof ArrayBuffer) {",
          "28:   hash.update(Buffer.from(data))",
          "29:  } else if (data instanceof Buffer) {",
          "30:   hash.update(data)",
          "31:  } else {",
          "32:   hash.update(data, 'utf8')",
          "33:  }",
          "34:  return `sha256-${hash.digest('base64')}`",
          "35: }",
          "47: const scriptReplacer = (hash, attrs, setCrossorigin, content) =>",
          "48:  `<script${attrs} integrity=\"${hash}\"${",
          "49:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
          "50:  }>${content ?? ''}</script>`",
          "53: const styleReplacer = (hash, attrs, setCrossorigin, content) =>",
          "54:  `<style${attrs} integrity=\"${hash}\"${",
          "55:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
          "56:  }>${content ?? ''}</style>`",
          "59: const linkStyleReplacer = (hash, attrs, setCrossorigin) =>",
          "60:  `<link${attrs} integrity=\"${hash}\"${",
          "61:   setCrossorigin ? ' crossorigin=\"anonymous\"' : ''",
          "62:  }/>`",
          "64: const srcRegex = /\\s+(src|href)\\s*=\\s*(\"(?<src1>.*?)\"|'(?<src2>.*?)')/i",
          "65: const integrityRegex =",
          "66:  /\\s+integrity\\s*=\\s*(\"(?<integrity1>.*?)\"|'(?<integrity2>.*?)')/i",
          "67: const relStylesheetRegex = /\\s+rel\\s*=\\s*('stylesheet'|\"stylesheet\")/i",
          "69: const getRegexProcessors = () => {",
          "70:  return /** @type {const} */ ([",
          "71:   {",
          "72:    t: 'Script',",
          "73:    t2: 'scripts',",
          "74:    regex:",
          "75:     /<script(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*script\\s*>/gi,",
          "76:    replacer: scriptReplacer,",
          "77:    hasContent: true,",
          "78:    attrsRegex: undefined,",
          "79:   },",
          "80:   {",
          "81:    t: 'Style',",
          "82:    t2: 'styles',",
          "83:    regex:",
          "84:     /<style(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*>(?<content>[\\s\\S]*?)<\\/\\s*style\\s*>/gi,",
          "85:    replacer: styleReplacer,",
          "86:    hasContent: true,",
          "87:    attrsRegex: undefined,",
          "88:   },",
          "89:   {",
          "90:    t: 'Style',",
          "91:    t2: 'styles',",
          "92:    regex:",
          "93:     /<link(?<attrs>(\\s+[a-z][a-z0-9\\-_]*(=('[^']*?'|\"[^\"]*?\"))?)*?)\\s*\\/?>/gi,",
          "94:    replacer: linkStyleReplacer,",
          "95:    hasContent: false,",
          "96:    attrsRegex: relStylesheetRegex,",
          "97:   },",
          "98:  ])",
          "99: }",
          "115: export const updateStaticPageSriHashes = async (",
          "116:  logger,",
          "117:  distDir,",
          "118:  relativeFilepath,",
          "119:  content,",
          "120:  h,",
          "121: ) => {",
          "122:  const processors = getRegexProcessors()",
          "124:  const pageHashes =",
          "125:   h.perPageSriHashes.get(relativeFilepath) ??",
          "127:    scripts: new Set(),",
          "128:    styles: new Set(),",
          "129:   })",
          "130:  h.perPageSriHashes.set(relativeFilepath, pageHashes)",
          "132:  let updatedContent = content",
          "133:  let match",
          "135:  for (const { attrsRegex, hasContent, regex, replacer, t, t2 } of processors) {",
          "137:   while ((match = regex.exec(content)) !== null) {",
          "138:    const attrs = match.groups?.attrs ?? ''",
          "139:    const content = match.groups?.content ?? ''",
          "142:    let sriHash = undefined",
          "143:    let setCrossorigin = false",
          "145:    if (attrs) {",
          "146:     if (attrsRegex && !attrsRegex.test(attrs)) {",
          "147:      continue",
          "148:     }",
          "150:     const srcMatch = srcRegex.exec(attrs)",
          "151:     const integrityMatch = integrityRegex.exec(attrs)",
          "152:     const src = srcMatch?.groups?.src1 ?? srcMatch?.groups?.src2 ?? ''",
          "154:     if (integrityMatch) {",
          "155:      sriHash =",
          "156:       integrityMatch.groups?.integrity1 ??",
          "157:       integrityMatch.groups?.integrity2",
          "158:      if (sriHash) {",
          "159:       ;(srcMatch ? h[`ext${t}Hashes`] : h[`inline${t}Hashes`]).add(",
          "160:        sriHash,",
          "161:       )",
          "162:       pageHashes[t2].add(sriHash)",
          "163:       if (src) {",
          "164:        h.perResourceSriHashes[t2].set(src, sriHash)",
          "165:       }",
          "166:       continue",
          "167:      }",
          "168:     }",
          "170:     if (src) {",
          "172:      let resourceContent",
          "173:      if (src.startsWith('/')) {",
          "174:       const resourcePath = resolve(distDir, `.${src}`)",
          "175:       resourceContent = await readFile(resourcePath)",
          "176:      } else if (src.startsWith('http')) {",
          "177:       setCrossorigin = true",
          "178:       const resourceResponse = await fetch(src, { method: 'GET' })",
          "179:       resourceContent = await resourceResponse.arrayBuffer()",
          "180:      } else {",
          "181:       logger.warn(`Unable to process external resource: \"${src}\"`)",
          "182:       continue",
          "183:      }",
          "185:      sriHash = generateSRIHash(resourceContent)",
          "186:      h[`ext${t}Hashes`].add(sriHash)",
          "187:      pageHashes[t2].add(sriHash)",
          "188:      h.perResourceSriHashes[t2].set(src, sriHash)",
          "189:     }",
          "190:    }",
          "192:    if (hasContent && !sriHash) {",
          "193:     sriHash = generateSRIHash(content)",
          "194:     h[`inline${t}Hashes`].add(sriHash)",
          "195:     pageHashes[t2].add(sriHash)",
          "196:    }",
          "198:    if (sriHash) {",
          "199:     updatedContent = updatedContent.replace(",
          "200:      match[0],",
          "201:      replacer(sriHash, attrs, setCrossorigin, content),",
          "202:     )",
          "203:    }",
          "204:   }",
          "205:  }",
          "207:  return updatedContent",
          "208: }",
          "215: export const updateDynamicPageSriHashes = async (",
          "216:  logger,",
          "217:  content,",
          "218:  globalHashes,",
          "219: ) => {",
          "220:  const processors = getRegexProcessors()",
          "222:  let updatedContent = content",
          "223:  let match",
          "225:  const pageHashes = /** @type {PerPageHashes} */ ({",
          "226:   scripts: new Set(),",
          "227:   styles: new Set(),",
          "228:  })",
          "230:  for (const { attrsRegex, hasContent, regex, replacer, t2 } of processors) {",
          "232:   while ((match = regex.exec(content)) !== null) {",
          "233:    const attrs = match.groups?.attrs ?? ''",
          "234:    const content = match.groups?.content ?? ''",
          "237:    let sriHash = undefined",
          "238:    let setCrossorigin = false",
          "240:    if (attrs) {",
          "241:     if (attrsRegex && !attrsRegex.test(attrs)) {",
          "242:      continue",
          "243:     }",
          "245:     const srcMatch = srcRegex.exec(attrs)",
          "246:     const integrityMatch = integrityRegex.exec(attrs)",
          "247:     const src = srcMatch?.groups?.src1 ?? srcMatch?.groups?.src2",
          "249:     if (content && src) {",
          "250:      logger.warn(",
          "251:       `scripts must have either a src attribute or content, but not both \"${src}\"`,",
          "252:      )",
          "253:      continue",
          "254:     }",
          "256:     if (integrityMatch) {",
          "257:      sriHash =",
          "258:       integrityMatch.groups?.integrity1 ??",
          "259:       integrityMatch.groups?.integrity2",
          "260:      if (sriHash) {",
          "261:       if (src) {",
          "262:        const globalHash = globalHashes[t2].get(src)",
          "263:        if (globalHash) {",
          "264:         if (globalHash !== sriHash) {",
          "265:          throw new Error(",
          "266:           `SRI hash mismatch for \"${src}\", expected \"${globalHash}\" but got \"${sriHash}\"`,",
          "267:          )",
          "268:         }",
          "269:        } else {",
          "270:         globalHashes[t2].set(src, sriHash)",
          "271:        }",
          "272:       }",
          "273:       pageHashes[t2].add(sriHash)",
          "274:      } else {",
          "275:       logger.warn('Found empty integrity attribute, skipping...')",
          "276:      }",
          "277:      continue",
          "278:     }",
          "280:     if (src) {",
          "282:      if (src.startsWith('/')) {",
          "283:       sriHash = globalHashes[t2].get(src)",
          "284:       if (sriHash) {",
          "285:        pageHashes[t2].add(sriHash)",
          "286:       } else {",
          "287:        if (",
          "288:         !(",
          "289:          src.startsWith('/@vite/') ||",
          "290:          src.startsWith('/@fs/') ||",
          "291:          src.indexOf('?astro&type=') >= 0",
          "292:         )",
          "293:        ) {",
          "294:         logger.warn(",
          "295:          `Unable to obtain SRI hash for local resource: \"${src}\"`,",
          "296:         )",
          "297:        }",
          "298:        continue",
          "299:       }",
          "300:      } else if (src.startsWith('http')) {",
          "301:       setCrossorigin = true",
          "302:       sriHash = globalHashes[t2].get(src)",
          "304:       if (sriHash) {",
          "305:        pageHashes[t2].add(sriHash)",
          "306:       } else {",
          "307:        const resourceResponse = await fetch(src, { method: 'GET' })",
          "308:        const resourceContent = await resourceResponse.arrayBuffer()",
          "310:        sriHash = generateSRIHash(resourceContent)",
          "311:        globalHashes[t2].set(src, sriHash)",
          "312:        pageHashes[t2].add(sriHash)",
          "313:       }",
          "314:      } else {",
          "315:       logger.warn(`Unable to process external resource: \"${src}\"`)",
          "316:       continue",
          "317:      }",
          "318:     }",
          "319:    }",
          "321:    if (hasContent && !sriHash) {",
          "322:     sriHash = generateSRIHash(content)",
          "323:     pageHashes[t2].add(sriHash)",
          "324:    }",
          "326:    if (sriHash) {",
          "327:     updatedContent = updatedContent.replace(",
          "328:      match[0],",
          "329:      replacer(sriHash, attrs, setCrossorigin, content),",
          "330:     )",
          "331:    }",
          "332:   }",
          "333:  }",
          "335:  return {",
          "336:   pageHashes,",
          "337:   updatedContent,",
          "338:  }",
          "339: }",
          "347: const processHTMLFile = async (logger, filePath, distDir, h) => {",
          "348:  const content = await readFile(filePath, 'utf8')",
          "349:  const updatedContent = await updateStaticPageSriHashes(",
          "350:   logger,",
          "351:   distDir,",
          "352:   relative(distDir, filePath),",
          "353:   content,",
          "354:   h,",
          "355:  )",
          "357:  if (updatedContent !== content) {",
          "358:   await writeFile(filePath, updatedContent)",
          "359:  }",
          "360: }",
          "367: export const arraysEqual = (a, b) => {",
          "368:  if (a.length !== b.length) {",
          "369:   return false",
          "370:  }",
          "372:  for (let i = 0; i < a.length; i++) {",
          "373:   if (a[i] !== b[i]) {",
          "374:    return false",
          "375:   }",
          "376:  }",
          "378:  return true",
          "379: }",
          "386: export const pageHashesEqual = (a, b) => {",
          "387:  const aKeys = Object.keys(a).sort()",
          "388:  const bKeys = Object.keys(b).sort()",
          "390:  if (!arraysEqual(aKeys, bKeys)) {",
          "391:   return false",
          "392:  }",
          "394:  for (const [aKey, aValue] of Object.entries(a)) {",
          "395:   const bValue = b[aKey]",
          "396:   if (!bValue) {",
          "397:    return false",
          "398:   }",
          "400:   if (",
          "401:    !arraysEqual(aValue.scripts, bValue.scripts) ||",
          "402:    !arraysEqual(aValue.styles, bValue.styles)",
          "403:   ) {",
          "404:    return false",
          "405:   }",
          "406:  }",
          "408:  return true",
          "409: }",
          "416: export const sriHashesEqual = (a, b) => {",
          "417:  const aScriptsKeys = Object.keys(a.scripts).sort()",
          "418:  const bScriptsKeys = Object.keys(b.scripts).sort()",
          "419:  const aStylesKeys = Object.keys(a.styles).sort()",
          "420:  const bStylesKeys = Object.keys(b.styles).sort()",
          "422:  if (",
          "423:   !arraysEqual(aScriptsKeys, bScriptsKeys) ||",
          "424:   !arraysEqual(aStylesKeys, bStylesKeys)",
          "425:  ) {",
          "426:   return false",
          "427:  }",
          "429:  for (const [aKey, aValue] of Object.entries(a.scripts)) {",
          "430:   if (b.scripts[aKey] !== aValue) {",
          "431:    return false",
          "432:   }",
          "433:  }",
          "434:  for (const [aKey, aValue] of Object.entries(a.styles)) {",
          "435:   if (b.styles[aKey] !== aValue) {",
          "436:    return false",
          "437:   }",
          "438:  }",
          "440:  return true",
          "441: }",
          "452: export const scanForNestedResources = async (logger, dirPath, h) => {",
          "453:  await scanDirectory(",
          "454:   logger,",
          "455:   dirPath,",
          "456:   dirPath,",
          "457:   h,",
          "458:   async (_logger, _filePath, _distDir, _h) => {",
          "459:    const relativePath = `/${relative(_distDir, _filePath)}`",
          "461:    const ext = extname(_filePath)",
          "462:    if (['.js', '.mjs'].includes(ext)) {",
          "463:     if (!_h.perResourceSriHashes.scripts.has(relativePath)) {",
          "464:      const sriHash = generateSRIHash(await readFile(_filePath))",
          "465:      _h.extScriptHashes.add(sriHash)",
          "466:      _h.perResourceSriHashes.scripts.set(relativePath, sriHash)",
          "467:     }",
          "468:    } else if (ext === '.css') {",
          "469:     if (!_h.perResourceSriHashes.styles.has(relativePath)) {",
          "470:      const sriHash = generateSRIHash(await readFile(_filePath))",
          "471:      _h.extStyleHashes.add(sriHash)",
          "472:      _h.perResourceSriHashes.styles.set(relativePath, sriHash)",
          "473:     }",
          "474:    }",
          "475:   },",
          "476:   _filePath => ['.js', '.mjs', '.css'].includes(extname(_filePath)),",
          "477:  )",
          "478: }",
          "484: export async function generateSRIHashesModule(h, sriHashesModule) {",
          "485:  let persistHashes = false",
          "487:  const inlineScriptHashes = Array.from(h.inlineScriptHashes).sort()",
          "488:  const inlineStyleHashes = Array.from(h.inlineStyleHashes).sort()",
          "489:  const extScriptHashes = Array.from(h.extScriptHashes).sort()",
          "490:  const extStyleHashes = Array.from(h.extStyleHashes).sort()",
          "491:  const perPageHashes =",
          "493:  for (const [k, v] of h.perPageSriHashes.entries()) {",
          "494:   perPageHashes[k] = {",
          "495:    scripts: Array.from(v.scripts).sort(),",
          "496:    styles: Array.from(v.styles).sort(),",
          "497:   }",
          "498:  }",
          "499:  const perResourceHashes = {",
          "500:   scripts: /** @type {Record<string, string>} */ ({}),",
          "501:   styles: /** @type {Record<string, string>} */ ({}),",
          "502:  }",
          "503:  for (const [k, v] of h.perResourceSriHashes.scripts.entries()) {",
          "504:   perResourceHashes.scripts[k] = v",
          "505:  }",
          "506:  for (const [k, v] of h.perResourceSriHashes.styles.entries()) {",
          "507:   perResourceHashes.styles[k] = v",
          "508:  }",
          "510:  if (await doesFileExist(sriHashesModule)) {",
          "511:   const hModule = /**",
          "512:    @type {{",
          "513:      [k in keyof HashesCollection]: HashesCollection[k] extends Set<string>",
          "514:        ? string[] | undefined",
          "515:        : (k extends 'perPageSriHashes'",
          "516:         ? Record<string, { scripts: string[]; styles: string [] }>",
          "517:         : Record<'scripts' | 'styles', Record<string, string>>)",
          "518:   }} */ (await import(/* @vite-ignore */ sriHashesModule))",
          "520:   persistHashes =",
          "521:    !arraysEqual(inlineScriptHashes, hModule.inlineScriptHashes ?? []) ||",
          "522:    !arraysEqual(inlineStyleHashes, hModule.inlineStyleHashes ?? []) ||",
          "523:    !arraysEqual(extScriptHashes, hModule.extScriptHashes ?? []) ||",
          "524:    !arraysEqual(extStyleHashes, hModule.extStyleHashes ?? []) ||",
          "525:    !pageHashesEqual(perPageHashes, hModule.perPageSriHashes ?? {}) ||",
          "526:    !sriHashesEqual(",
          "527:     perResourceHashes,",
          "528:     hModule.perResourceSriHashes ?? { scripts: {}, styles: {} },",
          "529:    )",
          "530:  } else {",
          "531:   persistHashes = true",
          "532:  }",
          "534:  if (persistHashes) {",
          "535:   let hashesFileContent = '// Do not edit this file manually\\n\\n'",
          "536:   hashesFileContent += `export const inlineScriptHashes = /** @type {string[]} */ ([${inlineScriptHashes",
          "537:    .map(h => `\\n\\t'${h}',`)",
          "538:    .join('')}${inlineScriptHashes.length > 0 ? '\\n' : ''}])\\n\\n`",
          "539:   hashesFileContent += `export const inlineStyleHashes = /** @type {string[]} */ ([${inlineStyleHashes",
          "540:    .map(h => `\\n\\t'${h}',`)",
          "541:    .join('')}${inlineStyleHashes.length > 0 ? '\\n' : ''}])\\n\\n`",
          "542:   hashesFileContent += `export const extScriptHashes = /** @type {string[]} */ ([${extScriptHashes",
          "543:    .map(h => `\\n\\t'${h}',`)",
          "544:    .join('')}${extScriptHashes.length > 0 ? '\\n' : ''}])\\n\\n`",
          "545:   hashesFileContent += `export const extStyleHashes = /** @type {string[]} */ ([${extStyleHashes",
          "546:    .map(h => `\\n\\t'${h}',`)",
          "547:    .join('')}${extStyleHashes.length > 0 ? '\\n' : ''}])\\n\\n`",
          "548:   hashesFileContent += `export const perPageSriHashes =\\n\\t/** @type {Record<string, { scripts: string[]; styles: string [] }>} */ ({${Object.entries(",
          "549:    perPageHashes,",
          "550:   )",
          "551:    .sort()",
          "552:    .map(",
          "553:     ([k, v]) =>",
          "554:      `\\n\\t\\t'${k}': {\\n\\t\\t\\tscripts: [${v.scripts",
          "555:       .map(h => `\\n\\t\\t\\t\\t'${h}',`)",
          "556:       .join('')}${",
          "557:       v.scripts.length > 0 ? '\\n\\t\\t\\t' : ''",
          "558:      }],\\n\\t\\t\\tstyles: [${v.styles",
          "559:       .map(h => `\\n\\t\\t\\t\\t'${h}',`)",
          "560:       .join('')}${v.styles.length > 0 ? '\\n\\t\\t\\t' : ''}],\\n\\t\\t}`,",
          "561:    )",
          "562:    .join(',')}}\\n)\\n\\n`",
          "563:   hashesFileContent += `export const perResourceSriHashes = {\\n\\tscripts: /** @type {Record<string,string>} */ ({\\n${Object.entries(",
          "564:    perResourceHashes.scripts,",
          "565:   )",
          "566:    .map(([k, v]) => `\\t\\t'${k}': '${v}',\\n`)",
          "567:    .join(",
          "568:     '',",
          "569:    )}\\t}),\\n\\tstyles: /** @type {Record<string,string>} */ ({\\n${Object.entries(",
          "570:    perResourceHashes.styles,",
          "571:   )",
          "572:    .map(([k, v]) => `\\t\\t'${k}': '${v}',\\n`)",
          "573:    .join('')}\\t}),\\n}\\n`",
          "575:   await writeFile(sriHashesModule, hashesFileContent)",
          "576:  }",
          "577: }",
          "583: export const processStaticFiles = async (",
          "584:  logger,",
          "585:  { distDir, sriHashesModule },",
          "586: ) => {",
          "587:  const h = /** @satisfies {HashesCollection} */ {",
          "588:   inlineScriptHashes: new Set(),",
          "589:   inlineStyleHashes: new Set(),",
          "590:   extScriptHashes: new Set(),",
          "591:   extStyleHashes: new Set(),",
          "592:   perPageSriHashes: new Map(),",
          "593:   perResourceSriHashes: {",
          "594:    scripts: new Map(),",
          "595:    styles: new Map(),",
          "596:   },",
          "597:  }",
          "598:  await scanDirectory(",
          "599:   logger,",
          "600:   distDir,",
          "601:   distDir,",
          "602:   h,",
          "603:   processHTMLFile,",
          "604:   file => extname(file) === '.html',",
          "605:  )",
          "608:  await scanForNestedResources(logger, distDir, h)",
          "610:  if (!sriHashesModule) {",
          "611:   return",
          "612:  }",
          "614:  await generateSRIHashesModule(h, sriHashesModule)",
          "615: }",
          "621: export const getMiddlewareHandler = globalHashes => {",
          "623:  return async (_ctx, next) => {",
          "624:   const response = await next()",
          "625:   const content = await response.text()",
          "629:   const { updatedContent } = await updateDynamicPageSriHashes(",
          "630:    console,",
          "631:    content,",
          "632:    globalHashes,",
          "633:   )",
          "635:   const patchedResponse = new Response(updatedContent, {",
          "636:    status: response.status,",
          "637:    statusText: response.statusText,",
          "638:    headers: response.headers,",
          "639:   })",
          "640:   return patchedResponse",
          "641:  }",
          "642: }",
          "644: const middlewareVirtualModuleId = 'virtual:@kindspells/astro-shield/middleware'",
          "645: const resolvedMiddlewareVirtualModuleId = `\\0${middlewareVirtualModuleId}`",
          "647: const hashesVirtualModuleId = 'virtual:@kindspells/astro-shield/hashes'",
          "648: const resolvedHashesVirtualModuleId = `\\0${hashesVirtualModuleId}`",
          "656: const loadVirtualMiddlewareModule = async (",
          "657:  logger,",
          "658:  enableStatic_SRI,",
          "659:  sriHashesModule,",
          "660: ) => {",
          "661:  let extraImports = ''",
          "662:  let staticHashesModuleLoader = ''",
          "664:  if (",
          "665:   enableStatic_SRI &&",
          "666:   sriHashesModule &&",
          "667:   (await doesFileExist(sriHashesModule))",
          "668:  ) {",
          "669:   extraImports = `import * as hashesModule from '${sriHashesModule}'`",
          "670:   staticHashesModuleLoader = `",
          "671: try {",
          "672:  if (hashesModule.perResourceSriHashes) {",
          "673:   for (const [key, value] of Object.entries(",
          "674:    hashesModule.perResourceSriHashes?.scripts ?? {},",
          "675:   )) {",
          "676:    globalHashes.scripts.set(key, value)",
          "677:   }",
          "678:   for (const [key, value] of Object.entries(",
          "679:    hashesModule.perResourceSriHashes?.styles ?? {},",
          "680:   )) {",
          "681:    globalHashes.styles.set(key, value)",
          "682:   }",
          "683:  }",
          "684: } catch (err) {",
          "685:  console.warn('Failed to load static hashes module:', err)",
          "686: }",
          "687: `",
          "688:  } else if (enableStatic_SRI && sriHashesModule) {",
          "689:   logger.warn(",
          "690:    `The SRI hashes module \"${sriHashesModule}\" did not exist at build time, run the build step again`,",
          "691:   )",
          "692:  }",
          "694:  return `",
          "695: import { defineMiddleware } from 'astro/middleware'",
          "696: import { getGlobalHashes } from '@kindspells/astro-shield/state'",
          "697: import { getMiddlewareHandler } from '@kindspells/astro-shield/core'",
          "698: ${extraImports}",
          "700: export const onRequest = await (async () => {",
          "701:  const globalHashes = await getGlobalHashes()",
          "703:  ${staticHashesModuleLoader}",
          "705:  return defineMiddleware(getMiddlewareHandler(globalHashes))",
          "706: })()",
          "707: `",
          "708: }",
          "715: const loadVirtualHashesModule = async (enableStatic_SRI, sriHashesModule) => {",
          "716:  if (",
          "717:   enableStatic_SRI &&",
          "718:   sriHashesModule &&",
          "719:   (await doesFileExist(sriHashesModule))",
          "720:  ) {",
          "721:   return `export * from '${sriHashesModule}'`",
          "722:  }",
          "723:  return `",
          "724: export const inlineScriptHashes = []",
          "725: export const inlineStyleHashes = []",
          "726: export const extScriptHashes = []",
          "727: export const extStyleHashes = []",
          "728: export const perPageSriHashes = {}",
          "729: export const perResourceSriHashes = { scripts: {}, styles: {} }",
          "730: `",
          "731: }",
          "739: const getViteMiddlewarePlugin = (logger, enableStatic_SRI, sriHashesModule) => {",
          "740:  return {",
          "741:   name: 'vite-plugin-astro-shield',",
          "742:   resolveId(id) {",
          "743:    if (id === middlewareVirtualModuleId) {",
          "744:     return resolvedMiddlewareVirtualModuleId",
          "745:    }",
          "746:    return",
          "747:   },",
          "748:   async load(id, _options) {",
          "749:    switch (id) {",
          "750:     case resolvedMiddlewareVirtualModuleId:",
          "751:      return await loadVirtualMiddlewareModule(",
          "752:       logger,",
          "753:       enableStatic_SRI,",
          "754:       sriHashesModule,",
          "755:      )",
          "756:     case resolvedHashesVirtualModuleId:",
          "757:      return await loadVirtualHashesModule(",
          "758:       enableStatic_SRI,",
          "759:       sriHashesModule,",
          "760:      )",
          "761:     default:",
          "762:      return",
          "763:    }",
          "764:   },",
          "765:  }",
          "766: }",
          "774: export const getAstroConfigSetup = (enableStatic_SRI, sriHashesModule) => {",
          "776:  return async ({ logger, addMiddleware, updateConfig }) => {",
          "777:   const plugin = getViteMiddlewarePlugin(",
          "778:    logger,",
          "779:    enableStatic_SRI,",
          "780:    sriHashesModule,",
          "781:   )",
          "782:   updateConfig({ vite: { plugins: [plugin] } })",
          "784:   addMiddleware({",
          "785:    order: 'post',",
          "786:    entrypoint: 'virtual:@kindspells/astro-shield/middleware',",
          "787:   })",
          "788:  }",
          "789: }",
          "",
          "---------------"
        ],
        "src/fs.mjs||src/fs.mjs": [
          "File: src/fs.mjs -> src/fs.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { readdir, stat } from 'node:fs/promises'",
          "8: import { resolve } from 'node:path'",
          "19: export const doesFileExist = async path => {",
          "20:  try {",
          "21:   await stat(path)",
          "22:   return true",
          "23:  } catch (err) {",
          "24:   if (/** @type {{ code: unknown }} */ (err).code === 'ENOENT') {",
          "25:    return false",
          "26:   }",
          "27:   throw err",
          "28:  }",
          "29: }",
          "39: export const scanDirectory = async (",
          "40:  logger,",
          "41:  currentPath,",
          "42:  rootPath,",
          "43:  h,",
          "44:  processFile,",
          "45:  filenameCondition,",
          "46: ) => {",
          "47:  for (const file of await readdir(currentPath)) {",
          "48:   const filePath = resolve(currentPath, file)",
          "49:   const stats = await stat(filePath)",
          "51:   if (stats.isDirectory()) {",
          "52:    await scanDirectory(",
          "53:     logger,",
          "54:     filePath,",
          "55:     rootPath,",
          "56:     h,",
          "57:     processFile,",
          "58:     filenameCondition,",
          "59:    )",
          "60:   } else if (stats.isFile() && filenameCondition(file)) {",
          "61:    await processFile(logger, filePath, rootPath, h)",
          "62:   }",
          "63:  }",
          "64: }",
          "",
          "---------------"
        ],
        "src/main.d.ts||src/main.d.ts": [
          "File: src/main.d.ts -> src/main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import type { AstroIntegration } from 'astro'",
          "11: export type ShieldOptions = {",
          "18:  enableStatic_SRI?: boolean | undefined",
          "28:  enableMiddleware_SRI?: boolean | undefined",
          "37:  sriHashesModule?: string | undefined",
          "38: }",
          "39: export type StrictShieldOptions = ShieldOptions & { distDir: string }",
          "43: export function shield(sriCspOptions: ShieldOptions): AstroIntegration",
          "44: export default shield",
          "",
          "---------------"
        ],
        "src/main.mjs||src/main.mjs": [
          "File: src/main.mjs -> src/main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { fileURLToPath } from 'node:url'",
          "8: import { getAstroConfigSetup, processStaticFiles } from './core.mjs'",
          "22: export const shield = ({",
          "23:  enableMiddleware_SRI,",
          "24:  enableStatic_SRI,",
          "25:  sriHashesModule,",
          "26: }) => {",
          "27:  const astroBuildDone =",
          "29:    dir,",
          "30:    logger,",
          "31:   }) =>",
          "32:    await processStaticFiles(logger, {",
          "33:     distDir: fileURLToPath(dir),",
          "34:     sriHashesModule,",
          "35:    })",
          "37:  return /** @satisfies {AstroIntegration} */ {",
          "38:   name: '@kindspells/astro-shield',",
          "39:   hooks: {",
          "40:    ...((enableStatic_SRI ?? true) === true",
          "41:     ? { 'astro:build:done': astroBuildDone }",
          "42:     : undefined),",
          "43:    ...(enableMiddleware_SRI === true",
          "44:     ? {",
          "45:       'astro:config:setup': getAstroConfigSetup(",
          "46:        enableStatic_SRI ?? true,",
          "47:        sriHashesModule,",
          "48:       ),",
          "49:       }",
          "50:     : undefined),",
          "51:   },",
          "52:  }",
          "53: }",
          "55: export default shield",
          "",
          "---------------"
        ],
        "src/state.mjs||src/state.mjs": [
          "File: src/state.mjs -> src/state.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: let globalHashes",
          "15: export const getGlobalHashes = () => {",
          "16:  if (!globalHashes) {",
          "17:   globalHashes = {",
          "18:    scripts: /** @type {Map<string, string>} */ (new Map()),",
          "19:    styles: /** @type {Map<string, string>} */ (new Map()),",
          "20:   }",
          "21:  }",
          "22:  return globalHashes",
          "23: }",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { resolve } from 'node:path'",
          "10: import {",
          "11:  arraysEqual,",
          "13:  generateSRIHash,",
          "14:  pageHashesEqual,",
          "19: const testsDir = new URL('.', import.meta.url).pathname",
          "20: const rootDir = resolve(testsDir, '..')",
          "22: describe('arraysEqual', () => {",
          "23:  it.each([",
          "",
          "[Removed Lines]",
          "9: import { describe, expect, it } from 'vitest'",
          "12:  doesFileExist,",
          "15:  updateSriHashes,",
          "16: } from '../core.mjs'",
          "17: import { AstroIntegrationLogger } from 'astro'",
          "",
          "[Added Lines]",
          "8: import { readdir, rm } from 'node:fs/promises'",
          "10: import { beforeEach, describe, expect, it } from 'vitest'",
          "14:  generateSRIHashesModule,",
          "16:  scanForNestedResources,",
          "17:  sriHashesEqual,",
          "18:  updateDynamicPageSriHashes,",
          "19:  updateStaticPageSriHashes,",
          "20: } from '../src/core.mjs'",
          "21: import { doesFileExist } from '../src/fs.mjs'",
          "23: type SriHashes = {",
          "24:  scripts: Record<string, string>",
          "25:  styles: Record<string, string>",
          "26: }",
          "28: type PageHashesCollection = Record<",
          "29:  string,",
          "30:  {",
          "31:   scripts: string[]",
          "32:   styles: string[]",
          "33:  }",
          "34: >",
          "37: const fixturesDir = resolve(testsDir, 'fixtures')",
          "39: const srcDir = resolve(rootDir, 'src')",
          "41: const getEmptyHashes = () => ({",
          "42:  inlineScriptHashes: new Set<string>(),",
          "43:  inlineStyleHashes: new Set<string>(),",
          "44:  extScriptHashes: new Set<string>(),",
          "45:  extStyleHashes: new Set<string>(),",
          "46:  perPageSriHashes: new Map<",
          "47:   string,",
          "48:   { scripts: Set<string>; styles: Set<string> }",
          "49:  >(),",
          "50:  perResourceSriHashes: {",
          "51:   scripts: new Map<string, string>(),",
          "52:   styles: new Map<string, string>(),",
          "53:  },",
          "54: })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:  )",
          "54: })",
          "64: describe('pageHashesEqual', () => {",
          "65:  it.each([",
          "66:   [{}, {}],",
          "",
          "[Removed Lines]",
          "56: type PageHashesCollection = Record<",
          "57:  string,",
          "58:  {",
          "59:   scripts: string[]",
          "60:   styles: string[]",
          "61:  }",
          "62: >",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     'about.html': { scripts: [], styles: ['xyz'] },",
          "103:    },",
          "104:   ],",
          "105:  ])(",
          "106:   'returns false for non-equal hash collections',",
          "107:   (a: PageHashesCollection, b: PageHashesCollection) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:   [",
          "132:    {",
          "133:     'index.html': { scripts: ['abcdefg'], styles: [] },",
          "134:     'about.html': { scripts: [], styles: ['xyz'] },",
          "135:    },",
          "136:    { 'index.html': { scripts: ['abcdefg'], styles: [] } },",
          "137:   ],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:  )",
          "111: })",
          "127: })",
          "129: describe('generateSRIHash', () => {",
          "",
          "[Removed Lines]",
          "113: describe('doesFileExist', () => {",
          "114:  it.each([['./core.test.mts'], ['../core.mjs'], ['../main.mjs']])(",
          "115:   'returns true for existing files',",
          "116:   async (filename: string) => {",
          "117:    expect(await doesFileExist(resolve(testsDir, filename))).toBe(true)",
          "118:   },",
          "119:  )",
          "121:  it.each([['./magic.file'], ['../not.found'], ['../theAnswerToEverything']])(",
          "122:   'returns false for non-existing files',",
          "123:   async (filename: string) => {",
          "124:    expect(await doesFileExist(resolve(testsDir, filename))).toBe(false)",
          "125:   },",
          "126:  )",
          "",
          "[Added Lines]",
          "146: describe('sriHashesEqual', () => {",
          "147:  it.each([",
          "148:   [",
          "149:    { scripts: {}, styles: {} },",
          "150:    { scripts: {}, styles: {} },",
          "151:   ],",
          "152:   [",
          "153:    { scripts: { a: 'hash-1' }, styles: {} },",
          "154:    { scripts: { a: 'hash-1' }, styles: {} },",
          "155:   ],",
          "156:   [",
          "157:    { scripts: {}, styles: { b: 'hash-2' } },",
          "158:    { scripts: {}, styles: { b: 'hash-2' } },",
          "159:   ],",
          "160:   [",
          "161:    { scripts: { a: 'hash-1' }, styles: { b: 'hash-2' } },",
          "162:    { scripts: { a: 'hash-1' }, styles: { b: 'hash-2' } },",
          "163:   ],",
          "164:  ])('returns true for equal hashes', (a: SriHashes, b: SriHashes) => {",
          "165:   expect(sriHashesEqual(a, b)).toBe(true)",
          "166:  })",
          "168:  it.each([",
          "169:   [",
          "170:    { scripts: {}, styles: {} },",
          "171:    { scripts: { a: 'hash-1' }, styles: {} },",
          "172:   ],",
          "173:   [",
          "174:    { scripts: {}, styles: {} },",
          "175:    { scripts: {}, styles: { b: 'hash-2' } },",
          "176:   ],",
          "177:   [",
          "178:    { scripts: {}, styles: {} },",
          "179:    { scripts: { a: 'hash-1' }, styles: { b: 'hash-2' } },",
          "180:   ],",
          "181:   [",
          "182:    { scripts: { a: 'hash-1' }, styles: {} },",
          "183:    { scripts: {}, styles: { b: 'hash-2' } },",
          "184:   ],",
          "185:   [",
          "186:    { scripts: { a: 'hash-1' }, styles: {} },",
          "187:    { scripts: { a: 'hash-1' }, styles: { b: 'hash-2' } },",
          "188:   ],",
          "189:  ])('returns false for non-equal hashes', (a: SriHashes, b: SriHashes) => {",
          "190:   expect(sriHashesEqual(a, b)).toBe(false)",
          "191:  })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:  )",
          "158: })",
          "172:  it('adds sri hash to inline script', async () => {",
          "173:   const content = `<html>",
          "174:    <head>",
          "",
          "[Removed Lines]",
          "160: describe('updateSriHashes', () => {",
          "161:  const getEmptyHashes = () => ({",
          "162:   inlineScriptHashes: new Set<string>(),",
          "163:   inlineStyleHashes: new Set<string>(),",
          "164:   extScriptHashes: new Set<string>(),",
          "165:   extStyleHashes: new Set<string>(),",
          "166:   perPageSriHashes: new Map<",
          "167:    string,",
          "168:    { scripts: Set<string>; styles: Set<string> }",
          "169:   >(),",
          "170:  })",
          "",
          "[Added Lines]",
          "225: describe('updateStaticPageSriHashes', () => {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:   </html>`",
          "191:   const h = getEmptyHashes()",
          "194:    testsDir,",
          "195:    'index.html',",
          "196:    content,",
          "",
          "[Removed Lines]",
          "192:   const updated = await updateSriHashes(",
          "193:    console as unknown as AstroIntegrationLogger,",
          "",
          "[Added Lines]",
          "246:   const updated = await updateStaticPageSriHashes(",
          "247:    console,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:   </html>`",
          "231:   const h = getEmptyHashes()",
          "234:    testsDir,",
          "235:    'index.html',",
          "236:    content,",
          "",
          "[Removed Lines]",
          "232:   const updated = await updateSriHashes(",
          "233:    console as unknown as AstroIntegrationLogger,",
          "",
          "[Added Lines]",
          "286:   const updated = await updateStaticPageSriHashes(",
          "287:    console,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "273:   </html>`",
          "275:   const h = getEmptyHashes()",
          "278:    testsDir,",
          "279:    'index.html',",
          "280:    content,",
          "",
          "[Removed Lines]",
          "276:   const updated = await updateSriHashes(",
          "277:    console as unknown as AstroIntegrationLogger,",
          "",
          "[Added Lines]",
          "330:   const updated = await updateStaticPageSriHashes(",
          "331:    console,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "308:     <title>My Test Page</title>",
          "309:    </head>",
          "310:    <body>",
          "312:    </body>",
          "313:   </html>`",
          "315:   const h = getEmptyHashes()",
          "319:    'index.html',",
          "320:    content,",
          "321:    h,",
          "",
          "[Removed Lines]",
          "311:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-kw3sUNwwIbNJd5X5nyEclIhbb9UoOHAC0ouWE6pUUKU=\"></script>",
          "316:   const updated = await updateSriHashes(",
          "317:    console as unknown as AstroIntegrationLogger,",
          "318:    rootDir,",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-mBEQGpYqqmUThJOhZ7SIAP3agaHSLAyV/38of2lYhnI=\"></script>",
          "370:   const updated = await updateStaticPageSriHashes(",
          "371:    console,",
          "372:    srcDir,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "325:   expect(h.extScriptHashes.size).toBe(1)",
          "326:   expect(",
          "327:    h.extScriptHashes.has(",
          "329:    ),",
          "330:   ).toBe(true)",
          "331:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "328:     'sha256-kw3sUNwwIbNJd5X5nyEclIhbb9UoOHAC0ouWE6pUUKU=',",
          "",
          "[Added Lines]",
          "382:     'sha256-mBEQGpYqqmUThJOhZ7SIAP3agaHSLAyV/38of2lYhnI=',",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "355:   </html>`",
          "357:   const h = getEmptyHashes()",
          "360:    rootDir,",
          "361:    'index.html',",
          "362:    content,",
          "",
          "[Removed Lines]",
          "358:   const updated = await updateSriHashes(",
          "359:    console as unknown as AstroIntegrationLogger,",
          "",
          "[Added Lines]",
          "412:   const updated = await updateStaticPageSriHashes(",
          "413:    console,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "380:    <head>",
          "381:     <title>My Test Page</title>",
          "382:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "384:    </head>",
          "385:    <body>",
          "386:     <h1>My Test Page</h1>",
          "",
          "[Removed Lines]",
          "383:     <link rel=\"stylesheet\" href=\"/fake.css\">",
          "",
          "[Added Lines]",
          "437:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\">",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "392:    <head>",
          "393:     <title>My Test Page</title>",
          "394:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "396:    </head>",
          "397:    <body>",
          "398:     <h1>My Test Page</h1>",
          "",
          "[Removed Lines]",
          "395:     <link rel=\"stylesheet\" href=\"/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "",
          "[Added Lines]",
          "449:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "401:   </html>`",
          "403:   const h = getEmptyHashes()",
          "406:    testsDir,",
          "407:    'index.html',",
          "408:    content,",
          "",
          "[Removed Lines]",
          "404:   const updated = await updateSriHashes(",
          "405:    console as unknown as AstroIntegrationLogger,",
          "",
          "[Added Lines]",
          "458:   const updated = await updateStaticPageSriHashes(",
          "459:    console,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "425: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481: describe('updateDynamicPageSriHashes', () => {",
          "482:  const getMiddlewareHashes = () => {",
          "483:   return {",
          "484:    scripts: new Map<string, string>(),",
          "485:    styles: new Map<string, string>(),",
          "486:   }",
          "487:  }",
          "489:  it('adds sri hash to inline script', async () => {",
          "490:   const content = `<html>",
          "491:    <head>",
          "492:     <title>My Test Page</title>",
          "493:    </head>",
          "494:    <body>",
          "495:     <script>console.log(\"Hello World!\")</script>",
          "496:    </body>",
          "497:   </html>`",
          "499:   const expected = `<html>",
          "500:    <head>",
          "501:     <title>My Test Page</title>",
          "502:    </head>",
          "503:    <body>",
          "504:     <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
          "505:    </body>",
          "506:   </html>`",
          "508:   const h = getMiddlewareHashes()",
          "509:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "510:    console,",
          "511:    content,",
          "512:    h,",
          "513:   )",
          "515:   expect(updatedContent).toEqual(expected)",
          "516:   expect(h.scripts.size).toBe(0)",
          "517:   expect(h.styles.size).toBe(0)",
          "519:   expect(pageHashes.scripts.size).toBe(1)",
          "520:   expect(pageHashes.styles.size).toBe(0)",
          "521:   expect(",
          "522:    pageHashes.scripts.has(",
          "523:     'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=',",
          "524:    ),",
          "525:   )",
          "526:  })",
          "528:  it('preserves sri hash in inline script', async () => {",
          "529:   const content = `<html>",
          "530:    <head>",
          "531:     <title>My Test Page</title>",
          "532:    </head>",
          "533:    <body>",
          "534:     <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
          "535:    </body>",
          "536:   </html>`",
          "538:   const expected = `<html>",
          "539:    <head>",
          "540:     <title>My Test Page</title>",
          "541:    </head>",
          "542:    <body>",
          "543:     <script integrity=\"sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=\">console.log(\"Hello World!\")</script>",
          "544:    </body>",
          "545:   </html>`",
          "547:   const h = getMiddlewareHashes()",
          "548:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "549:    console,",
          "550:    content,",
          "551:    h,",
          "552:   )",
          "554:   expect(updatedContent).toEqual(expected)",
          "555:   expect(h.scripts.size).toBe(0)",
          "556:   expect(h.styles.size).toBe(0)",
          "558:   expect(pageHashes.scripts.size).toBe(1)",
          "559:   expect(pageHashes.styles.size).toBe(0)",
          "560:   expect(",
          "561:    pageHashes.scripts.has(",
          "562:     'sha256-TWupyvVdPa1DyFqLnQMqRpuUWdS3nKPnz70IcS/1o3Q=',",
          "563:    ),",
          "564:   )",
          "565:  })",
          "567:  it('adds sri hash to inline style', async () => {",
          "568:   const content = `<html>",
          "569:    <head>",
          "570:     <title>My Test Page</title>",
          "571:     <style>h1 { color: red; }</style>",
          "572:    </head>",
          "573:    <body>",
          "574:     <h1>My Test Page</h1>",
          "575:     <p>Some text</p>",
          "576:    </body>",
          "577:   </html>`",
          "579:   const expected = `<html>",
          "580:    <head>",
          "581:     <title>My Test Page</title>",
          "582:     <style integrity=\"sha256-VATw/GI1Duwve1FGJ+z3c4gwulpBbeoGo1DqO20SdxM=\">h1 { color: red; }</style>",
          "583:    </head>",
          "584:    <body>",
          "585:     <h1>My Test Page</h1>",
          "586:     <p>Some text</p>",
          "587:    </body>",
          "588:   </html>`",
          "590:   const h = getMiddlewareHashes()",
          "591:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "592:    console,",
          "593:    content,",
          "594:    h,",
          "595:   )",
          "597:   expect(updatedContent).toEqual(expected)",
          "598:   expect(pageHashes.styles.size).toBe(1)",
          "599:   expect(",
          "600:    pageHashes.styles.has(",
          "601:     'sha256-VATw/GI1Duwve1FGJ+z3c4gwulpBbeoGo1DqO20SdxM=',",
          "602:    ),",
          "603:   ).toBe(true)",
          "604:   expect(pageHashes.scripts.size).toBe(0)",
          "605:   expect(h.scripts.size).toBe(0)",
          "606:   expect(h.styles.size).toBe(0)",
          "607:  })",
          "609:  it('adds sri hash to external script (same origin)', async () => {",
          "610:   const content = `<html>",
          "611:    <head>",
          "612:     <title>My Test Page</title>",
          "613:    </head>",
          "614:    <body>",
          "615:     <script type=\"module\" src=\"/core.mjs\"></script>",
          "616:    </body>",
          "617:   </html>`",
          "619:   const expected = `<html>",
          "620:    <head>",
          "621:     <title>My Test Page</title>",
          "622:    </head>",
          "623:    <body>",
          "624:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-6vcZ3jYR5LROXY5VlgX+tgNuIUVynHfMRQFXUnXSf64=\"></script>",
          "625:    </body>",
          "626:   </html>`",
          "629:   const h = getMiddlewareHashes()",
          "630:   h.scripts.set(",
          "631:    '/core.mjs',",
          "632:    'sha256-6vcZ3jYR5LROXY5VlgX+tgNuIUVynHfMRQFXUnXSf64=',",
          "633:   )",
          "635:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "636:    console,",
          "637:    content,",
          "638:    h,",
          "639:   )",
          "641:   expect(updatedContent).toEqual(expected)",
          "644:   expect(h.scripts.size).toBe(1)",
          "645:   expect(h.scripts.get('/core.mjs')).toEqual(",
          "646:    'sha256-6vcZ3jYR5LROXY5VlgX+tgNuIUVynHfMRQFXUnXSf64=',",
          "647:   )",
          "649:   expect(h.styles.size).toBe(0)",
          "650:   expect(pageHashes.scripts.size).toBe(1)",
          "651:   expect(",
          "652:    pageHashes.scripts.has(",
          "653:     'sha256-6vcZ3jYR5LROXY5VlgX+tgNuIUVynHfMRQFXUnXSf64=',",
          "654:    ),",
          "655:   ).toBe(true)",
          "656:   expect(pageHashes.styles.size).toBe(0)",
          "657:  })",
          "659:  it('adds sri hash to external script (cross origin)', async () => {",
          "660:   const remoteScript =",
          "661:    'https://raw.githubusercontent.com/KindSpells/astro-shield/ae9521048f2129f633c075b7f7ef24e11bbd1884/main.mjs'",
          "662:   const content = `<html>",
          "663:    <head>",
          "664:     <title>My Test Page</title>",
          "665:    </head>",
          "666:    <body>",
          "667:     <script type=\"module\" src=\"${remoteScript}\"></script>",
          "668:    </body>",
          "669:   </html>`",
          "671:   const expected = `<html>",
          "672:    <head>",
          "673:     <title>My Test Page</title>",
          "674:    </head>",
          "675:    <body>",
          "676:     <script type=\"module\" src=\"${remoteScript}\" integrity=\"sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=\" crossorigin=\"anonymous\"></script>",
          "677:    </body>",
          "678:   </html>`",
          "680:   const h = getMiddlewareHashes()",
          "681:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "682:    console,",
          "683:    content,",
          "684:    h,",
          "685:   )",
          "687:   expect(updatedContent).toEqual(expected)",
          "688:   expect(h.scripts.size).toBe(1)",
          "689:   expect(h.styles.size).toBe(0)",
          "690:   expect(h.scripts.get(remoteScript)).toEqual(",
          "691:    'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
          "692:   )",
          "693:   expect(pageHashes.scripts.size).toBe(1)",
          "694:   expect(",
          "695:    pageHashes.scripts.has(",
          "696:     'sha256-i4WR4ifasidZIuS67Rr6Knsy7/hK1xbVTc8ZAmnAv1Q=',",
          "697:    ),",
          "698:   ).toBe(true)",
          "699:   expect(pageHashes.styles.size).toBe(0)",
          "700:  })",
          "702:  it('adds sri hash to external style (same origin)', async () => {",
          "703:   const content = `<html>",
          "704:    <head>",
          "705:     <title>My Test Page</title>",
          "706:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "707:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\">",
          "708:    </head>",
          "709:    <body>",
          "710:     <h1>My Test Page</h1>",
          "711:     <p>Some text</p>",
          "712:    </body>",
          "713:   </html>`",
          "715:   const expected = `<html>",
          "716:    <head>",
          "717:     <title>My Test Page</title>",
          "718:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "719:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "720:    </head>",
          "721:    <body>",
          "722:     <h1>My Test Page</h1>",
          "723:     <p>Some text</p>",
          "724:    </body>",
          "725:   </html>`",
          "728:   const h = getMiddlewareHashes()",
          "729:   h.styles.set(",
          "730:    '/fixtures/fake.css',",
          "731:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "732:   )",
          "734:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "735:    console,",
          "736:    content,",
          "737:    h,",
          "738:   )",
          "740:   expect(updatedContent).toEqual(expected)",
          "741:   expect(h.styles.size).toBe(1)",
          "742:   expect(h.styles.get('/fixtures/fake.css')).toEqual(",
          "743:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "744:   )",
          "745:   expect(pageHashes.scripts.size).toBe(0)",
          "746:   expect(h.scripts.size).toBe(0)",
          "747:   expect(pageHashes.styles.size).toBe(1)",
          "748:   expect(",
          "749:    pageHashes.styles.has(",
          "750:     'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "751:    ),",
          "752:   ).toBe(true)",
          "753:  })",
          "756:  it('leaves untouched \"dev\" resources', async () => {",
          "757:   const content = `<html>",
          "758:    <head>",
          "759:     <title>My Test Page</title>",
          "760:     <link rel=\"stylesheet\" href=\"/index.astro?astro&type=css\">",
          "761:    </head>",
          "762:    <body>",
          "763:     <script src=\"/@vite/some-dev-script.js\"></script>",
          "764:     <script src=\"/@fs/another-dev-script.js\"></script>",
          "765:    </body>",
          "766:   </html>`",
          "768:   const expected = `<html>",
          "769:    <head>",
          "770:     <title>My Test Page</title>",
          "771:     <link rel=\"stylesheet\" href=\"/index.astro?astro&type=css\">",
          "772:    </head>",
          "773:    <body>",
          "774:     <script src=\"/@vite/some-dev-script.js\"></script>",
          "775:     <script src=\"/@fs/another-dev-script.js\"></script>",
          "776:    </body>",
          "777:   </html>`",
          "779:   let warnCalls = 0",
          "780:   const testLogger = {",
          "781:    info(msg: string) {",
          "782:     return console.info(msg)",
          "783:    },",
          "784:    warn(msg: string) {",
          "785:     warnCalls += 1",
          "786:     return console.warn(msg)",
          "787:    },",
          "788:    error(msg: string) {",
          "789:     return console.error(msg)",
          "790:    },",
          "791:   }",
          "793:   const h = getMiddlewareHashes()",
          "794:   const { updatedContent } = await updateDynamicPageSriHashes(",
          "795:    testLogger,",
          "796:    content,",
          "797:    h,",
          "798:   )",
          "800:   expect(updatedContent).toEqual(expected)",
          "801:   expect(warnCalls).toBe(0)",
          "802:  })",
          "804:  it('logs problems to get SRI hash for \"local\" resource', async () => {",
          "805:   const content = `<html>",
          "806:    <head>",
          "807:     <title>My Test Page</title>",
          "808:    </head>",
          "809:    <body>",
          "810:     <script src=\"/problematic/local/script.js\"></script>",
          "811:    </body>",
          "812:   </html>`",
          "814:   const expected = `<html>",
          "815:    <head>",
          "816:     <title>My Test Page</title>",
          "817:    </head>",
          "818:    <body>",
          "819:     <script src=\"/problematic/local/script.js\"></script>",
          "820:    </body>",
          "821:   </html>`",
          "823:   let warnCalls = 0",
          "824:   let lastWarnMsg = ''",
          "825:   const testLogger = {",
          "826:    info(msg: string) {",
          "827:     return console.info(msg)",
          "828:    },",
          "829:    warn(msg: string) {",
          "830:     warnCalls += 1",
          "831:     lastWarnMsg = msg",
          "832:     return console.warn(msg)",
          "833:    },",
          "834:    error(msg: string) {",
          "835:     return console.error(msg)",
          "836:    },",
          "837:   }",
          "839:   const h = getMiddlewareHashes()",
          "840:   const { updatedContent } = await updateDynamicPageSriHashes(",
          "841:    testLogger,",
          "842:    content,",
          "843:    h,",
          "844:   )",
          "846:   expect(updatedContent).toEqual(expected)",
          "847:   expect(warnCalls).toEqual(1)",
          "848:   expect(lastWarnMsg).toEqual(",
          "849:    'Unable to obtain SRI hash for local resource: \"/problematic/local/script.js\"',",
          "850:   )",
          "851:  })",
          "852: })",
          "854: describe('scanForNestedResources', () => {",
          "855:  it('populates our hashes collection with hashes from nested resources', async () => {",
          "856:   const h = getEmptyHashes()",
          "857:   await scanForNestedResources(console, fixturesDir, h)",
          "859:   expect(Array.from(h.extScriptHashes).sort()).toEqual([",
          "860:    'sha256-qltpXHhrYfCJ4kXfyK7x9wqFlMGSbesibKN3FVUpqMM=',",
          "861:    'sha256-uDDQGUSAjWHe2xxeUlsnqjUEki6AUou31AAMIDDEc2g=',",
          "862:   ])",
          "863:   expect(Array.from(h.extStyleHashes).sort()).toEqual([",
          "864:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "865:   ])",
          "866:   expect(Array.from(h.perResourceSriHashes.scripts.keys()).sort()).toEqual([",
          "867:    '/fake.js',",
          "868:    '/nested/nested.js',",
          "869:   ])",
          "870:   expect(Array.from(h.perResourceSriHashes.styles.keys()).sort()).toEqual([",
          "871:    '/fake.css',",
          "872:   ])",
          "873:  })",
          "874: })",
          "876: describe('generateSRIHashesModule', () => {",
          "877:  const playgroundDir = resolve(testsDir, 'playground')",
          "879:  beforeEach(async () => {",
          "880:   for (const filename of await readdir(playgroundDir, { recursive: true})) {",
          "881:    if (filename.endsWith('.mjs')) {",
          "882:     await rm(resolve(playgroundDir, filename), {",
          "883:      force: true,",
          "884:     })",
          "885:    }",
          "886:   }",
          "887:  })",
          "889:  it('generates \"empty\" module when it does not exist and we pass empty hashes collection', async () => {",
          "890:   const modulePath = resolve(playgroundDir, 'sri.mjs')",
          "892:   expect(",
          "893:    await doesFileExist(modulePath),",
          "894:   ).toBe(false)",
          "896:   const h = getEmptyHashes()",
          "897:   await generateSRIHashesModule(",
          "898:    h,",
          "899:    modulePath,",
          "900:   )",
          "902:   expect(",
          "903:    await doesFileExist(modulePath),",
          "904:   ).toBe(true)",
          "906:   const hashesModule = await import(modulePath)",
          "908:   expect(hashesModule).toHaveProperty('inlineScriptHashes')",
          "909:   expect(hashesModule).toHaveProperty('inlineStyleHashes')",
          "910:   expect(hashesModule).toHaveProperty('extScriptHashes')",
          "911:   expect(hashesModule).toHaveProperty('extStyleHashes')",
          "912:   expect(hashesModule).toHaveProperty('perPageSriHashes')",
          "913:   expect(hashesModule).toHaveProperty('perResourceSriHashes')",
          "914:  })",
          "915: })",
          "",
          "---------------"
        ],
        "tests/fixtures/fake.js||tests/fixtures/fake.js": [
          "File: tests/fixtures/fake.js -> tests/fixtures/fake.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: alert('Test!')",
          "",
          "---------------"
        ],
        "tests/fixtures/nested/nested.js||tests/fixtures/nested/nested.js": [
          "File: tests/fixtures/nested/nested.js -> tests/fixtures/nested/nested.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: alert('Nested!')",
          "",
          "---------------"
        ],
        "tests/fs.test.mts||tests/fs.test.mts": [
          "File: tests/fs.test.mts -> tests/fs.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { readFile } from 'node:fs/promises'",
          "2: import { relative, resolve } from 'node:path'",
          "4: import { describe, expect, it } from 'vitest'",
          "6: import type { HashesCollection } from '../src/core.mjs'",
          "7: import { generateSRIHash } from '../src/core.mjs'",
          "8: import { doesFileExist, scanDirectory } from '../src/fs.mjs'",
          "10: const testsDir = new URL('.', import.meta.url).pathname",
          "12: describe('doesFileExist', () => {",
          "13:  it.each([['./core.test.mts'], ['../src/core.mjs'], ['../src/main.mjs']])(",
          "14:   'returns true for existing files',",
          "15:   async (filename: string) => {",
          "16:    expect(await doesFileExist(resolve(testsDir, filename))).toBe(true)",
          "17:   },",
          "18:  )",
          "20:  it.each([['./magic.file'], ['../not.found'], ['../theAnswerToEverything']])(",
          "21:   'returns false for non-existing files',",
          "22:   async (filename: string) => {",
          "23:    expect(await doesFileExist(resolve(testsDir, filename))).toBe(false)",
          "24:   },",
          "25:  )",
          "26: })",
          "28: describe('scanDirectory', () => {",
          "29:  it('is able to scan directories recursively', async () => {",
          "30:   const currentDir = resolve(testsDir, 'fixtures')",
          "32:   const h: HashesCollection = {",
          "33:    inlineScriptHashes: new Set<string>(),",
          "34:    inlineStyleHashes: new Set<string>(),",
          "35:    extScriptHashes: new Set<string>(),",
          "36:    extStyleHashes: new Set<string>(),",
          "37:    perPageSriHashes: new Map<",
          "38:     string,",
          "39:     { scripts: Set<string>; styles: Set<string> }",
          "40:    >(),",
          "41:    perResourceSriHashes: {",
          "42:     scripts: new Map<string, string>(),",
          "43:     styles: new Map<string, string>(),",
          "44:    },",
          "45:   }",
          "47:   await scanDirectory(",
          "48:    console,",
          "49:    currentDir,",
          "50:    currentDir,",
          "51:    h,",
          "52:    async (_l, filepath, _dd, h) => {",
          "53:     const content = await readFile(filepath)",
          "54:     const hash = generateSRIHash(content)",
          "55:     h.perResourceSriHashes.scripts.set(relative(currentDir, filepath), hash)",
          "56:    },",
          "57:    filename => filename.endsWith('.js'),",
          "58:   )",
          "60:   expect(Array.from(h.perResourceSriHashes.scripts.keys()).sort()).toEqual([",
          "61:    'fake.js',",
          "62:    'nested/nested.js',",
          "63:   ])",
          "64:   expect(h.perResourceSriHashes.scripts.get('fake.js')).toEqual(",
          "65:    'sha256-uDDQGUSAjWHe2xxeUlsnqjUEki6AUou31AAMIDDEc2g=',",
          "66:   )",
          "67:   expect(h.perResourceSriHashes.scripts.get('nested/nested.js')).toEqual(",
          "68:    'sha256-qltpXHhrYfCJ4kXfyK7x9wqFlMGSbesibKN3FVUpqMM=',",
          "69:   )",
          "70:  })",
          "71: })",
          "",
          "---------------"
        ],
        "tests/main.test.mts||tests/main.test.mts": [
          "File: tests/main.test.mts -> tests/main.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { describe, expect, it } from 'vitest'",
          "5: describe('sriCSP', () => {",
          "6:  it('is exported as default', () => {",
          "",
          "[Removed Lines]",
          "3: import defaultIntegrationExport, { shield } from '../main.mjs'",
          "",
          "[Added Lines]",
          "1: import type { AstroIntegration } from 'astro'",
          "4: import defaultIntegrationExport, { shield } from '../src/main.mjs'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:   expect(shield).toBeInstanceOf(Function)",
          "9:  })",
          "14:   expect(Object.keys(integration).sort()).toEqual(['hooks', 'name'])",
          "15:   expect(integration.name).toBe('@kindspells/astro-shield')",
          "19:  })",
          "20: })",
          "",
          "[Removed Lines]",
          "11:  it('returns a valid AstroIntegration object', () => {",
          "12:   const integration = shield({})",
          "17:   expect(Object.keys(integration.hooks).sort()).toEqual(['astro:build:done'])",
          "18:   expect(integration.hooks['astro:build:done']).toBeInstanceOf(Function)",
          "",
          "[Added Lines]",
          "12:  const checkIntegration = (",
          "13:   integration: AstroIntegration,",
          "14:   keys = ['astro:build:done'],",
          "15:  ) => {",
          "19:   const sortedKeys = keys.sort()",
          "20:   expect(Object.keys(integration.hooks).sort()).toEqual(sortedKeys)",
          "21:   for (const key of sortedKeys) {",
          "22:    expect(integration.hooks[key]).toBeTruthy()",
          "23:    expect(integration.hooks[key]).toBeInstanceOf(Function)",
          "24:   }",
          "25:  }",
          "27:  it('returns a valid AstroIntegration object for default config', () => {",
          "28:   const integration = shield({})",
          "29:   checkIntegration(integration)",
          "30:  })",
          "32:  it('returns a valid AstroIntegration object for almost-default config', () => {",
          "33:   const integration = shield({ enableStatic_SRI: true })",
          "34:   checkIntegration(integration)",
          "35:  })",
          "37:  it('returns an \"empty\" integration when we disable all features', () => {",
          "38:   const integration = shield({ enableStatic_SRI: false })",
          "39:   checkIntegration(integration, [])",
          "40:  })",
          "42:  it('returns hooks for static & dynamic content when we enable middleware', () => {",
          "43:   const integration = shield({ enableMiddleware_SRI: true })",
          "44:   checkIntegration(integration, ['astro:build:done', 'astro:config:setup'])",
          "45:  })",
          "47:  it('returns hooks only for dynamic content when we enable middleware and disable static sri', () => {",
          "48:   const integration = shield({",
          "49:    enableStatic_SRI: false,",
          "50:    enableMiddleware_SRI: true,",
          "51:   })",
          "52:   checkIntegration(integration, ['astro:config:setup'])",
          "",
          "---------------"
        ],
        "tests/state.test.mts||tests/state.test.mts": [
          "File: tests/state.test.mts -> tests/state.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { describe, expect, it } from 'vitest'",
          "3: import { getGlobalHashes } from '../src/state.mjs'",
          "5: describe('getGlobalHashes', () => {",
          "6:  it('returns a singleton', () => {",
          "7:   const gh1 = getGlobalHashes()",
          "8:   const gh2 = getGlobalHashes()",
          "10:   expect(gh1).toBe(gh2)",
          "11:  })",
          "12: })",
          "",
          "---------------"
        ],
        "vitest.config.e2e.mts||vitest.config.e2e.mts": [
          "File: vitest.config.e2e.mts -> vitest.config.e2e.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import { defineConfig } from 'vitest/config'",
          "9: export default defineConfig({",
          "10:  test: {",
          "11:   coverage: {",
          "12:    provider: 'v8',",
          "13:    include: ['*.mjs'],",
          "14:    exclude: [",
          "15:     'tests/**/*',",
          "16:     'e2e/**/*',",
          "17:     'coverage/**/*',",
          "18:     'coverage-e2e/**/*',",
          "19:     'coverage-unit/**/*',",
          "20:    ],",
          "21:    thresholds: {",
          "22:     statements: 25.0,",
          "23:     branches: 50.0,",
          "24:     functions: 12.5,",
          "25:     lines: 25.0,",
          "26:    },",
          "27:    reportsDirectory: 'coverage-e2e',",
          "28:    reporter: [],",
          "29:   },",
          "30:   include: ['e2e/**/*.test.mts'],",
          "31:  },",
          "32: })",
          "",
          "---------------"
        ],
        "vitest.config.mts||vitest.config.unit.mts": [
          "File: vitest.config.mts -> vitest.config.unit.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  test: {",
          "11:   coverage: {",
          "12:    provider: 'v8',",
          "15:    thresholds: {",
          "16:     statements: 70.0,",
          "17:     branches: 75.0,",
          "19:     lines: 70.0,",
          "20:    },",
          "21:   },",
          "22:  },",
          "23: })",
          "",
          "[Removed Lines]",
          "13:    include: ['*.mjs'],",
          "14:    exclude: ['tests/**/*'],",
          "18:     functions: 60.0,",
          "",
          "[Added Lines]",
          "13:    include: ['src/*.mjs'],",
          "14:    exclude: [",
          "15:     'tests/**/*',",
          "16:     'e2e/**/*',",
          "17:     'coverage/**/*',",
          "18:     'coverage-e2e/**/*',",
          "19:     'coverage-unit/**/*',",
          "20:    ],",
          "24:     functions: 70.0,",
          "27:    reportsDirectory: 'coverage-unit',",
          "29:   include: ['tests/**/*.test.mts'],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
      "candidate_info": {
        "commit_hash": "4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/4f73ba8530e2568c9fd4060954a0ce1b37ae19a2",
        "files": [
          "src/core.mjs",
          "tests/core.test.mts"
        ],
        "message": "feat: guard against inline res for ssr pass\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "src/core.mjs||src/core.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "241: export const updateDynamicPageSriHashes = async (",
          "242:  logger,",
          "243:  content,",
          "244:  globalHashes,",
          "245: ) => {",
          "246:  const processors = getRegexProcessors()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245:  sri",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:   styles: new Set(),",
          "254:  })",
          "258:   while ((match = regex.exec(content)) !== null) {",
          "259:    const attrs = match.groups?.attrs ?? ''",
          "",
          "[Removed Lines]",
          "256:  for (const { attrsRegex, hasContent, regex, replacer, t2 } of processors) {",
          "",
          "[Added Lines]",
          "257:  for (const { attrsRegex, hasContent, regex, replacer, t, t2 } of processors) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:    }",
          "347:    if (hasContent && !sriHash) {",
          "350:    }",
          "352:    if (sriHash) {",
          "",
          "[Removed Lines]",
          "348:     sriHash = generateSRIHash(content)",
          "349:     pageHashes[t2].add(sriHash)",
          "",
          "[Added Lines]",
          "350:     if (",
          "351:      ((sri?.allowInlineScripts ?? 'all') === 'all' && t === 'Script') ||",
          "352:      ((sri?.allowInlineStyles ?? 'all') === 'all' && t === 'Style')",
          "353:     ) {",
          "354:      sriHash = generateSRIHash(content)",
          "355:      pageHashes[t2].add(sriHash)",
          "356:     } else {",
          "357:      logger.warn(",
          "358:       `Skipping SRI hash generation for inline ${t.toLowerCase()} (inline ${t2} are disabled)`,",
          "359:      )",
          "360:     }",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-s3wSlNdTTOw87Nt6ZwYwxtjXOACkAFp+bNCiIBHLfus=',",
          "",
          "[Added Lines]",
          "382:     'sha256-vSvqa4zN5DZN/gOtz1s6Xuw0MUYNKQXvUPL8pXWgHGo=',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "062c1552432aec7f1600933a27fea9b03d9a9cbc",
      "candidate_info": {
        "commit_hash": "062c1552432aec7f1600933a27fea9b03d9a9cbc",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/062c1552432aec7f1600933a27fea9b03d9a9cbc",
        "files": [
          "e2e/e2e.test.mts",
          "tests/core.test.mts",
          "tests/fixtures/fake.css",
          "tests/fixtures/fake.js",
          "tests/fixtures/nested/nested.js",
          "tests/fs.test.mts",
          "tests/main.test.mts",
          "tests/state.test.mts"
        ],
        "message": "docs: add missing license headers\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "e2e/e2e.test.mts||e2e/e2e.test.mts",
          "tests/core.test.mts||tests/core.test.mts",
          "tests/fixtures/fake.css||tests/fixtures/fake.css",
          "tests/fixtures/fake.js||tests/fixtures/fake.js",
          "tests/fixtures/nested/nested.js||tests/fixtures/nested/nested.js",
          "tests/fs.test.mts||tests/fs.test.mts",
          "tests/main.test.mts||tests/main.test.mts",
          "tests/state.test.mts||tests/state.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ],
          "candidate": [
            "tests/core.test.mts||tests/core.test.mts",
            "tests/main.test.mts||tests/main.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "e2e/e2e.test.mts||e2e/e2e.test.mts": [
          "File: e2e/e2e.test.mts -> e2e/e2e.test.mts"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:    <head>",
          "447:     <title>My Test Page</title>",
          "448:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "450:    </head>",
          "451:    <body>",
          "452:     <h1>My Test Page</h1>",
          "",
          "[Removed Lines]",
          "449:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "",
          "[Added Lines]",
          "449:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=\"/>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "467:   expect(h.extStyleHashes.size).toBe(1)",
          "468:   expect(",
          "469:    h.extStyleHashes.has(",
          "471:    ),",
          "472:   ).toBe(true)",
          "473:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "470:     'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "",
          "[Added Lines]",
          "470:     'sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "716:    <head>",
          "717:     <title>My Test Page</title>",
          "718:     <link rel=\"canonical\" href=\"https://example.com\" />",
          "720:    </head>",
          "721:    <body>",
          "722:     <h1>My Test Page</h1>",
          "",
          "[Removed Lines]",
          "719:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=\"/>",
          "",
          "[Added Lines]",
          "719:     <link rel=\"stylesheet\" href=\"/fixtures/fake.css\" integrity=\"sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=\"/>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "728:   const h = getMiddlewareHashes()",
          "729:   h.styles.set(",
          "730:    '/fixtures/fake.css',",
          "732:   )",
          "734:   const { pageHashes, updatedContent } = await updateDynamicPageSriHashes(",
          "",
          "[Removed Lines]",
          "731:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "",
          "[Added Lines]",
          "731:    'sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:   expect(updatedContent).toEqual(expected)",
          "741:   expect(h.styles.size).toBe(1)",
          "742:   expect(h.styles.get('/fixtures/fake.css')).toEqual(",
          "744:   )",
          "745:   expect(pageHashes.scripts.size).toBe(0)",
          "746:   expect(h.scripts.size).toBe(0)",
          "747:   expect(pageHashes.styles.size).toBe(1)",
          "748:   expect(",
          "749:    pageHashes.styles.has(",
          "751:    ),",
          "752:   ).toBe(true)",
          "753:  })",
          "",
          "[Removed Lines]",
          "743:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "750:     'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "",
          "[Added Lines]",
          "743:    'sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=',",
          "750:     'sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=',",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "857:   await scanForNestedResources(console, fixturesDir, h)",
          "859:   expect(Array.from(h.extScriptHashes).sort()).toEqual([",
          "862:   ])",
          "863:   expect(Array.from(h.extStyleHashes).sort()).toEqual([",
          "865:   ])",
          "866:   expect(Array.from(h.perResourceSriHashes.scripts.keys()).sort()).toEqual([",
          "867:    '/fake.js',",
          "",
          "[Removed Lines]",
          "860:    'sha256-qltpXHhrYfCJ4kXfyK7x9wqFlMGSbesibKN3FVUpqMM=',",
          "861:    'sha256-uDDQGUSAjWHe2xxeUlsnqjUEki6AUou31AAMIDDEc2g=',",
          "864:    'sha256-gl5rCtPAw9BpVpGpdLhrf4LFwVUQ0FgQ5D231KxY2/w=',",
          "",
          "[Added Lines]",
          "860:    'sha256-Kr4BjT3RWkTAZwxpTtuWUtdtEV+9lXy7amiQ4EXlytQ=',",
          "861:    'sha256-qm2QDzbth03mDFQDvyNyUc7Ctvb9qRIhKL03a5eetaY=',",
          "864:    'sha256-a8DhsANlpipCfrn1UYtdKQaaeWgSyW4hBvqdxDOfoow=',",
          "",
          "---------------"
        ],
        "tests/fixtures/fake.css||tests/fixtures/fake.css": [
          "File: tests/fixtures/fake.css -> tests/fixtures/fake.css"
        ],
        "tests/fixtures/fake.js||tests/fixtures/fake.js": [
          "File: tests/fixtures/fake.js -> tests/fixtures/fake.js"
        ],
        "tests/fixtures/nested/nested.js||tests/fixtures/nested/nested.js": [
          "File: tests/fixtures/nested/nested.js -> tests/fixtures/nested/nested.js"
        ],
        "tests/fs.test.mts||tests/fs.test.mts": [
          "File: tests/fs.test.mts -> tests/fs.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:    'nested/nested.js',",
          "63:   ])",
          "64:   expect(h.perResourceSriHashes.scripts.get('fake.js')).toEqual(",
          "66:   )",
          "67:   expect(h.perResourceSriHashes.scripts.get('nested/nested.js')).toEqual(",
          "69:   )",
          "70:  })",
          "71: })",
          "",
          "[Removed Lines]",
          "65:    'sha256-uDDQGUSAjWHe2xxeUlsnqjUEki6AUou31AAMIDDEc2g=',",
          "68:    'sha256-qltpXHhrYfCJ4kXfyK7x9wqFlMGSbesibKN3FVUpqMM=',",
          "",
          "[Added Lines]",
          "71:    'sha256-qm2QDzbth03mDFQDvyNyUc7Ctvb9qRIhKL03a5eetaY=',",
          "74:    'sha256-Kr4BjT3RWkTAZwxpTtuWUtdtEV+9lXy7amiQ4EXlytQ=',",
          "",
          "---------------"
        ],
        "tests/main.test.mts||tests/main.test.mts": [
          "File: tests/main.test.mts -> tests/main.test.mts"
        ],
        "tests/state.test.mts||tests/state.test.mts": [
          "File: tests/state.test.mts -> tests/state.test.mts"
        ]
      }
    },
    {
      "candidate_hash": "5132cec52795e8afe6dc5a5355e166c508692bf9",
      "candidate_info": {
        "commit_hash": "5132cec52795e8afe6dc5a5355e166c508692bf9",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/5132cec52795e8afe6dc5a5355e166c508692bf9",
        "files": [
          "e2e/e2e.test.mts",
          "src/core.mjs",
          "tests/core.test.mts"
        ],
        "message": "feat: create provisional hashes module\n\nWhen the following conditions are met:\n- loading the SRI middleware\n- generating the hashes module is enabled\n- the hashes module does not exist yet\nThen:\nMake the SRI middleware loader to generate a provisional hashes module\nfile based on the scripts and stylesheets found in /public/.\n\nIt likely won't help much because in real scenarios we'll have tons of\nCSS and JS that are inside /src/ and pre-processed by Astro/Vite/Rollup,\nbut it's a good nice-to-have for simple sites.\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "e2e/e2e.test.mts||e2e/e2e.test.mts",
          "src/core.mjs||src/core.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "e2e/e2e.test.mts||e2e/e2e.test.mts": [
          "File: e2e/e2e.test.mts -> e2e/e2e.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:    ['run', 'build'],",
          "289:    execOpts,",
          "290:   )",
          "298:  })",
          "300:  beforeEach(async () => {",
          "",
          "[Removed Lines]",
          "291:   expect(buildStdout).toMatch(/run the build step again/)",
          "292:   const { stdout: buildStdout2 } = await execFile(",
          "293:    'pnpm',",
          "294:    ['run', 'build'],",
          "295:    execOpts,",
          "296:   )",
          "297:   expect(buildStdout2).not.toMatch(/run the build step again/)",
          "",
          "[Added Lines]",
          "293:   expect(buildStdout).not.toMatch(/run the build step again/)",
          "",
          "---------------"
        ],
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { createHash } from 'node:crypto'",
          "8: import { readFile, writeFile } from 'node:fs/promises'",
          "9: import { extname, resolve, relative } from 'node:path'",
          "10: import { doesFileExist, scanDirectory } from './fs.mjs'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import { fileURLToPath } from 'node:url'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "681: const loadVirtualMiddlewareModule = async (",
          "682:  logger,",
          "683:  enableStatic_SRI,",
          "684:  sriHashesModule,",
          "685: ) => {",
          "686:  let extraImports = ''",
          "687:  let staticHashesModuleLoader = ''",
          "689:  if (",
          "690:   enableStatic_SRI &&",
          "691:   sriHashesModule &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "685:  publicDir,",
          "690:  if (",
          "691:   enableStatic_SRI &&",
          "692:   sriHashesModule &&",
          "693:   !(await doesFileExist(sriHashesModule))",
          "694:  ) {",
          "695:   const h = /** @satisfies {HashesCollection} */ {",
          "696:    inlineScriptHashes: new Set(),",
          "697:    inlineStyleHashes: new Set(),",
          "698:    extScriptHashes: new Set(),",
          "699:    extStyleHashes: new Set(),",
          "700:    perPageSriHashes: new Map(),",
          "701:    perResourceSriHashes: {",
          "702:     scripts: new Map(),",
          "703:     styles: new Map(),",
          "704:    },",
          "705:   }",
          "709:   await scanForNestedResources(logger, publicDir, h)",
          "710:   await generateSRIHashesModule(",
          "711:    logger,",
          "712:    h,",
          "713:    sriHashesModule,",
          "714:    false, // So we don't get redundant warnings",
          "715:   )",
          "716:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711: }",
          "712: `",
          "713:  } else if (enableStatic_SRI && sriHashesModule) {",
          "714:   logger.warn(",
          "716:   )",
          "717:  }",
          "",
          "[Removed Lines]",
          "715:    `The SRI hashes module \"${sriHashesModule}\" did not exist at build time, run the build step again`,",
          "",
          "[Added Lines]",
          "746:    `The SRI hashes module \"${sriHashesModule}\" did not exist at build time. You may have to run the build step again`,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "765:  return {",
          "766:   name: 'vite-plugin-astro-shield',",
          "767:   resolveId(id) {",
          "",
          "[Removed Lines]",
          "764: const getViteMiddlewarePlugin = (logger, enableStatic_SRI, sriHashesModule) => {",
          "",
          "[Added Lines]",
          "796: const getViteMiddlewarePlugin = (",
          "797:  logger,",
          "798:  enableStatic_SRI,",
          "799:  sriHashesModule,",
          "800:  publicDir,",
          "801: ) => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "777:       logger,",
          "778:       enableStatic_SRI,",
          "779:       sriHashesModule,",
          "780:      )",
          "781:     case resolvedHashesVirtualModuleId:",
          "782:      return await loadVirtualHashesModule(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:       publicDir,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "799: export const getAstroConfigSetup = (enableStatic_SRI, sriHashesModule) => {",
          "802:   const plugin = getViteMiddlewarePlugin(",
          "803:    logger,",
          "804:    enableStatic_SRI,",
          "805:    sriHashesModule,",
          "806:   )",
          "807:   updateConfig({ vite: { plugins: [plugin] } })",
          "",
          "[Removed Lines]",
          "801:  return async ({ logger, addMiddleware, updateConfig }) => {",
          "",
          "[Added Lines]",
          "839:  return async ({ logger, addMiddleware, config, updateConfig }) => {",
          "840:   const publicDir = fileURLToPath(config.publicDir)",
          "845:    publicDir,",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-KnjtswtmvdHQSShp8mURE9kt/62bvYGd5jCdjmbFDiI=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-uuKlJNUZR/rbyOWMRTscDFZxsoXSYghDzld4ilR8Lrw=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-KnjtswtmvdHQSShp8mURE9kt/62bvYGd5jCdjmbFDiI=',",
          "",
          "[Added Lines]",
          "382:     'sha256-uuKlJNUZR/rbyOWMRTscDFZxsoXSYghDzld4ilR8Lrw=',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62b304a58b11ddcf48a2b5de4d4b9e2de101b7c0",
      "candidate_info": {
        "commit_hash": "62b304a58b11ddcf48a2b5de4d4b9e2de101b7c0",
        "repo": "KindSpells/astro-shield",
        "commit_url": "https://github.com/KindSpells/astro-shield/commit/62b304a58b11ddcf48a2b5de4d4b9e2de101b7c0",
        "files": [
          "e2e/e2e.test.mts",
          "package.json",
          "src/core.mjs",
          "src/main.d.ts",
          "src/main.mjs",
          "tests/core.test.mts"
        ],
        "message": "fix: show warn msg when manual workaround needed\n\nSigned-off-by: Andres Correa Casablanca <andreu@kindspells.dev>",
        "before_after_code_files": [
          "e2e/e2e.test.mts||e2e/e2e.test.mts",
          "src/core.mjs||src/core.mjs",
          "src/main.d.ts||src/main.d.ts",
          "src/main.mjs||src/main.mjs",
          "tests/core.test.mts||tests/core.test.mts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ],
          "candidate": [
            "src/core.mjs||src/core.mjs",
            "src/main.mjs||src/main.mjs",
            "tests/core.test.mts||tests/core.test.mts"
          ]
        }
      },
      "candidate_diff": {
        "e2e/e2e.test.mts||e2e/e2e.test.mts": [
          "File: e2e/e2e.test.mts -> e2e/e2e.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:  beforeAll(async () => {",
          "278:   await execFile('pnpm', ['install'], execOpts)",
          "279:   await execFile('pnpm', ['run', 'clean'], execOpts)",
          "281:   expect(buildStdout).toMatch(/run the build step again/)",
          "283:   expect(buildStdout2).not.toMatch(/run the build step again/)",
          "284:  })",
          "",
          "[Removed Lines]",
          "280:   const { stdout: buildStdout } = await execFile('pnpm', ['run', 'build'], execOpts)",
          "282:   const { stdout: buildStdout2 } = await execFile('pnpm', ['run', 'build'], execOpts)",
          "",
          "[Added Lines]",
          "280:   const { stdout: buildStdout } = await execFile(",
          "281:    'pnpm',",
          "282:    ['run', 'build'],",
          "283:    execOpts,",
          "284:   )",
          "286:   const { stdout: buildStdout2 } = await execFile(",
          "287:    'pnpm',",
          "288:    ['run', 'build'],",
          "289:    execOpts,",
          "290:   )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "317:  }",
          "319:  it('patches inline resources for dynamically generated pages referring static resources', async () => {",
          "321:  })",
          "322: })",
          "",
          "[Removed Lines]",
          "320:   await checkHtmlIsPatched('/', { '/code.js': 'sha256-X7QGGDHgf6XMoabXvV9pW7gl3ALyZhZlgKq1s3pwmME=' })",
          "",
          "[Added Lines]",
          "328:   await checkHtmlIsPatched('/', {",
          "329:    '/code.js': 'sha256-X7QGGDHgf6XMoabXvV9pW7gl3ALyZhZlgKq1s3pwmME=',",
          "330:   })",
          "",
          "---------------"
        ],
        "src/core.mjs||src/core.mjs": [
          "File: src/core.mjs -> src/core.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: }",
          "492:  let persistHashes = false",
          "494:  const inlineScriptHashes = Array.from(h.inlineScriptHashes).sort()",
          "",
          "[Removed Lines]",
          "491: export async function generateSRIHashesModule(h, sriHashesModule) {",
          "",
          "[Added Lines]",
          "493: export async function generateSRIHashesModule(",
          "494:  logger,",
          "495:  h,",
          "496:  sriHashesModule,",
          "497:  enableMiddleware_SRI,",
          "498: ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:  }",
          "541:  if (persistHashes) {",
          "542:   let hashesFileContent = '// Do not edit this file manually\\n\\n'",
          "543:   hashesFileContent += `export const inlineScriptHashes = /** @type {string[]} */ ([${inlineScriptHashes",
          "544:    .map(h => `\\n\\t'${h}',`)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:   if (enableMiddleware_SRI) {",
          "550:    logger.warn(",
          "551:     'SRI hashes have changed for static resources that may be used in dynamic pages. You should run the build step again',",
          "552:    )",
          "553:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590: export const processStaticFiles = async (",
          "591:  logger,",
          "593: ) => {",
          "594:  const h = /** @satisfies {HashesCollection} */ {",
          "595:   inlineScriptHashes: new Set(),",
          "",
          "[Removed Lines]",
          "592:  { distDir, sriHashesModule },",
          "",
          "[Added Lines]",
          "605:  { distDir, sriHashesModule, enableMiddleware_SRI },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "618:   return",
          "619:  }",
          "622: }",
          "",
          "[Removed Lines]",
          "621:  await generateSRIHashesModule(h, sriHashesModule)",
          "",
          "[Added Lines]",
          "634:  await generateSRIHashesModule(",
          "635:   logger,",
          "636:   h,",
          "637:   sriHashesModule,",
          "638:   enableMiddleware_SRI,",
          "639:  )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "673:   sriHashesModule &&",
          "674:   (await doesFileExist(sriHashesModule))",
          "675:  ) {",
          "677:   staticHashesModuleLoader = `",
          "678: try {",
          "680:   for (const [key, value] of Object.entries(",
          "682:   )) {",
          "683:    globalHashes.scripts.set(key, value)",
          "684:   }",
          "685:   for (const [key, value] of Object.entries(",
          "687:   )) {",
          "688:    globalHashes.styles.set(key, value)",
          "689:   }",
          "690:  }",
          "691: } catch (err) {",
          "693: }",
          "694: `",
          "695:  } else if (enableStatic_SRI && sriHashesModule) {",
          "",
          "[Removed Lines]",
          "676:   extraImports = `import * as hashesModule from '${sriHashesModule}'`",
          "679:  if (hashesModule.perResourceSriHashes) {",
          "681:    hashesModule.perResourceSriHashes?.scripts ?? {},",
          "686:    hashesModule.perResourceSriHashes?.styles ?? {},",
          "692:  console.warn('Failed to load static hashes module:', err)",
          "",
          "[Added Lines]",
          "694:   extraImports = `import { perResourceSriHashes } from '${sriHashesModule}'`",
          "697:  if (perResourceSriHashes) {",
          "699:    perResourceSriHashes.scripts ?? {},",
          "704:    perResourceSriHashes.styles ?? {},",
          "710:  console.error('Failed to load static hashes module:', err)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "725:   sriHashesModule &&",
          "726:   (await doesFileExist(sriHashesModule))",
          "727:  ) {",
          "729:  }",
          "730:  return `",
          "731: export const inlineScriptHashes = []",
          "",
          "[Removed Lines]",
          "728:   return `export * from '${sriHashesModule}'`",
          "",
          "[Added Lines]",
          "746:   return await readFile(sriHashesModule, 'utf8')",
          "",
          "---------------"
        ],
        "src/main.d.ts||src/main.d.ts": [
          "File: src/main.d.ts -> src/main.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  sriHashesModule?: string | undefined",
          "38: }",
          "",
          "[Removed Lines]",
          "39: export type StrictShieldOptions = ShieldOptions & { distDir: string }",
          "",
          "[Added Lines]",
          "39: export type StrictShieldOptions = ShieldOptions & {",
          "40:  distDir: string",
          "41:  enableMiddleware_SRI: boolean",
          "42: }",
          "",
          "---------------"
        ],
        "src/main.mjs||src/main.mjs": [
          "File: src/main.mjs -> src/main.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  enableStatic_SRI,",
          "25:  sriHashesModule,",
          "26: }) => {",
          "32:    await processStaticFiles(logger, {",
          "33:     distDir: fileURLToPath(dir),",
          "34:     sriHashesModule,",
          "35:    })",
          "37:  return /** @satisfies {AstroIntegration} */ {",
          "38:   name: '@kindspells/astro-shield',",
          "39:   hooks: {",
          "40:    ...((enableStatic_SRI ?? true) === true",
          "42:     : undefined),",
          "43:    ...(enableMiddleware_SRI === true",
          "44:     ? {",
          "",
          "[Removed Lines]",
          "27:  const astroBuildDone =",
          "29:    dir,",
          "30:    logger,",
          "31:   }) =>",
          "41:     ? { 'astro:build:done': astroBuildDone }",
          "",
          "[Added Lines]",
          "31:  const getAstroBuildDone =",
          "32:   enableMiddleware_SRI =>",
          "34:   async ({ dir, logger }) =>",
          "38:     enableMiddleware_SRI,",
          "45:     ? {",
          "46:       'astro:build:done': getAstroBuildDone(",
          "47:        enableMiddleware_SRI ?? false,",
          "48:       ),",
          "49:       }",
          "",
          "---------------"
        ],
        "tests/core.test.mts||tests/core.test.mts": [
          "File: tests/core.test.mts -> tests/core.test.mts",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     <title>My Test Page</title>",
          "363:    </head>",
          "364:    <body>",
          "366:    </body>",
          "367:   </html>`",
          "",
          "[Removed Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-etOR/kKV9aCSESe7t5JeBixVQA1DjUU2Zxk13wsPU8M=\"></script>",
          "",
          "[Added Lines]",
          "365:     <script type=\"module\" src=\"/core.mjs\" integrity=\"sha256-KnjtswtmvdHQSShp8mURE9kt/62bvYGd5jCdjmbFDiI=\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:   expect(h.extScriptHashes.size).toBe(1)",
          "380:   expect(",
          "381:    h.extScriptHashes.has(",
          "383:    ),",
          "384:   ).toBe(true)",
          "385:   expect(h.inlineScriptHashes.size).toBe(0)",
          "",
          "[Removed Lines]",
          "382:     'sha256-etOR/kKV9aCSESe7t5JeBixVQA1DjUU2Zxk13wsPU8M=',",
          "",
          "[Added Lines]",
          "382:     'sha256-KnjtswtmvdHQSShp8mURE9kt/62bvYGd5jCdjmbFDiI=',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "892:   expect(await doesFileExist(modulePath)).toBe(false)",
          "894:   const h = getEmptyHashes()",
          "897:   expect(await doesFileExist(modulePath)).toBe(true)",
          "",
          "[Removed Lines]",
          "895:   await generateSRIHashesModule(h, modulePath)",
          "",
          "[Added Lines]",
          "895:   await generateSRIHashesModule(console, h, modulePath, false)",
          "",
          "---------------"
        ]
      }
    }
  ]
}