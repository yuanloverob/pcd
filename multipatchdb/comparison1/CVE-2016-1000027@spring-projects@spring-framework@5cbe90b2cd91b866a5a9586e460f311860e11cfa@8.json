{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "89fbe499059cca18092196e1819c060040394841",
      "candidate_info": {
        "commit_hash": "89fbe499059cca18092196e1819c060040394841",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/89fbe499059cca18092196e1819c060040394841",
        "files": [
          "gradle.properties"
        ],
        "message": "Next Development Version",
        "before_after_code_files": [
          "gradle.properties||gradle.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "gradle.properties||gradle.properties": [
          "File: gradle.properties -> gradle.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: version=3.2.18.BUILD-SNAPSHOT",
          "",
          "[Added Lines]",
          "1: version=3.2.19.BUILD-SNAPSHOT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7dc48534ea501525f11369d369178a60c2f47d0",
      "candidate_info": {
        "commit_hash": "a7dc48534ea501525f11369d369178a60c2f47d0",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/a7dc48534ea501525f11369d369178a60c2f47d0",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java"
        ],
        "message": "Normalize resource URL in ResourceServlet\n\nIssue: SPR-14946",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java||spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java||spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:   if (this.contentType != null) {",
          "272:    response.setContentType(this.contentType);",
          "273:   }",
          "280:       \"] does not match allowed pattern [\" + this.allowedResources + \"]\");",
          "281:    }",
          "282:    if (logger.isDebugEnabled()) {",
          "284:    }",
          "286:    rd.include(request, response);",
          "287:   }",
          "288:  }",
          "",
          "[Removed Lines]",
          "274:   String[] resourceUrls =",
          "275:    StringUtils.tokenizeToStringArray(resourceUrl, RESOURCE_URL_DELIMITERS);",
          "276:   for (int i = 0; i < resourceUrls.length; i++) {",
          "278:    if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, resourceUrls[i])) {",
          "279:     throw new ServletException(\"Resource [\" + resourceUrls[i] +",
          "283:     logger.debug(\"Including resource [\" + resourceUrls[i] + \"]\");",
          "285:    RequestDispatcher rd = request.getRequestDispatcher(resourceUrls[i]);",
          "",
          "[Added Lines]",
          "273:   String[] resourceUrls = StringUtils.tokenizeToStringArray(resourceUrl, RESOURCE_URL_DELIMITERS);",
          "274:   for (String url : resourceUrls) {",
          "275:    String path = StringUtils.cleanPath(url);",
          "277:    if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, path)) {",
          "278:     throw new ServletException(\"Resource [\" + path +",
          "282:     logger.debug(\"Including resource [\" + path + \"]\");",
          "284:    RequestDispatcher rd = request.getRequestDispatcher(path);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7da129539fbb3cfb687ad0099ba1c83127c3ab05",
      "candidate_info": {
        "commit_hash": "7da129539fbb3cfb687ad0099ba1c83127c3ab05",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/7da129539fbb3cfb687ad0099ba1c83127c3ab05",
        "files": [
          "spring-context/src/main/java/org/springframework/context/annotation/Bean.java"
        ],
        "message": "@Bean's \"autowire\" attribute does not affect annotation-driven autowiring\n\nIssue: SPR-14282\n(cherry picked from commit 98eaf05)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/context/annotation/Bean.java||spring-context/src/main/java/org/springframework/context/annotation/Bean.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/context/annotation/Bean.java||spring-context/src/main/java/org/springframework/context/annotation/Bean.java": [
          "File: spring-context/src/main/java/org/springframework/context/annotation/Bean.java -> spring-context/src/main/java/org/springframework/context/annotation/Bean.java"
        ]
      }
    },
    {
      "candidate_hash": "ad103016eb56fa624518f319f83894da8f9ddc11",
      "candidate_info": {
        "commit_hash": "ad103016eb56fa624518f319f83894da8f9ddc11",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/ad103016eb56fa624518f319f83894da8f9ddc11",
        "files": [
          "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java"
        ],
        "message": "AbstractMarshaller defensively uses DocumentBuilderFactory within synchronized block\n\nIssue: SPR-13935\n(cherry picked from commit 5047e90)",
        "before_after_code_files": [
          "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java||spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java||spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java": [
          "File: spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java -> spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import org.apache.commons.logging.Log;",
          "43: import org.apache.commons.logging.LogFactory;",
          "44: import org.w3c.dom.Node;",
          "45: import org.xml.sax.ContentHandler;",
          "46: import org.xml.sax.EntityResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.w3c.dom.Document;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  protected Document buildDocument() {",
          "132:   try {",
          "133:    DocumentBuilder documentBuilder;",
          "134:    synchronized (this.documentBuilderFactoryMonitor) {",
          "135:     if (this.documentBuilderFactory == null) {",
          "136:      this.documentBuilderFactory = createDocumentBuilderFactory();",
          "137:     }",
          "138:     documentBuilder = createDocumentBuilder(this.documentBuilderFactory);",
          "139:    }",
          "140:    return documentBuilder.newDocument();",
          "141:   }",
          "142:   catch (ParserConfigurationException ex) {",
          "143:    throw new UnmarshallingFailureException(\"Could not create document placeholder: \" + ex.getMessage(), ex);",
          "144:   }",
          "145:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:  protected void marshalDomResult(Object graph, DOMResult domResult) throws XmlMappingException {",
          "228:   if (domResult.getNode() == null) {",
          "242:   }",
          "243:   marshalDomNode(graph, domResult.getNode());",
          "244:  }",
          "",
          "[Removed Lines]",
          "229:    try {",
          "230:     synchronized (this.documentBuilderFactoryMonitor) {",
          "231:      if (this.documentBuilderFactory == null) {",
          "232:       this.documentBuilderFactory = createDocumentBuilderFactory();",
          "233:      }",
          "234:     }",
          "235:     DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);",
          "236:     domResult.setNode(documentBuilder.newDocument());",
          "237:    }",
          "238:    catch (ParserConfigurationException ex) {",
          "239:     throw new UnmarshallingFailureException(",
          "240:       \"Could not create document placeholder for DOMResult: \" + ex.getMessage(), ex);",
          "241:    }",
          "",
          "[Added Lines]",
          "252:    domResult.setNode(buildDocument());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "359:  protected Object unmarshalDomSource(DOMSource domSource) throws XmlMappingException {",
          "360:   if (domSource.getNode() == null) {",
          "374:   }",
          "375:   try {",
          "376:    return unmarshalDomNode(domSource.getNode());",
          "",
          "[Removed Lines]",
          "361:    try {",
          "362:     synchronized (this.documentBuilderFactoryMonitor) {",
          "363:      if (this.documentBuilderFactory == null) {",
          "364:       this.documentBuilderFactory = createDocumentBuilderFactory();",
          "365:      }",
          "366:     }",
          "367:     DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);",
          "368:     domSource.setNode(documentBuilder.newDocument());",
          "369:    }",
          "370:    catch (ParserConfigurationException ex) {",
          "371:     throw new UnmarshallingFailureException(",
          "372:       \"Could not create document placeholder for DOMSource: \" + ex.getMessage(), ex);",
          "373:    }",
          "",
          "[Added Lines]",
          "372:    domSource.setNode(buildDocument());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "437:    if (!isSupportDtd()) {",
          "438:     throw new UnmarshallingFailureException(\"NPE while unmarshalling. \" +",
          "439:       \"This can happen on JDK 1.6 due to the presence of DTD \" +",
          "441:    }",
          "442:    throw ex;",
          "443:   }",
          "",
          "[Removed Lines]",
          "440:       \"declarations, which are disabled.\", ex);",
          "",
          "[Added Lines]",
          "439:       \"declarations, which are disabled.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d11b9577d52ff8a04c4ea93032511983f1daf3bb",
      "candidate_info": {
        "commit_hash": "d11b9577d52ff8a04c4ea93032511983f1daf3bb",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/d11b9577d52ff8a04c4ea93032511983f1daf3bb",
        "files": [
          "spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java",
          "spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java"
        ],
        "message": "Fix NPE in InvocableHandlerMethod\n\nIssue: SPR-13917\n(cherry picked from commit b1a46cc)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java||spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java",
          "spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java||spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java||spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java": [
          "File: spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java -> spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  }",
          "69:  }",
          "",
          "[Removed Lines]",
          "60:  public InvocableHandlerMethod(Object bean, Method method) {",
          "61:   super(bean, method);",
          "67:  public InvocableHandlerMethod(HandlerMethod handlerMethod) {",
          "68:   super(handlerMethod);",
          "",
          "[Added Lines]",
          "60:  public InvocableHandlerMethod(HandlerMethod handlerMethod) {",
          "61:   super(handlerMethod);",
          "67:  public InvocableHandlerMethod(Object bean, Method method) {",
          "68:   super(bean, method);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   super(bean, methodName, parameterTypes);",
          "80:  }",
          "",
          "[Removed Lines]",
          "78:  public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {",
          "",
          "[Added Lines]",
          "78:  public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes)",
          "79:    throws NoSuchMethodException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:    sb.append(Arrays.asList(args));",
          "130:    logger.trace(sb.toString());",
          "131:   }",
          "133:   if (logger.isTraceEnabled()) {",
          "134:    logger.trace(\"Method [\" + getMethod().getName() + \"] returned [\" + returnValue + \"]\");",
          "135:   }",
          "",
          "[Removed Lines]",
          "132:   Object returnValue = invoke(args);",
          "",
          "[Added Lines]",
          "136:   Object returnValue = doInvoke(args);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:      continue;",
          "160:     }",
          "161:     catch (Exception ex) {",
          "164:      }",
          "165:      throw ex;",
          "166:     }",
          "",
          "[Removed Lines]",
          "162:      if (logger.isTraceEnabled()) {",
          "163:       logger.trace(getArgumentResolutionErrorMessage(\"Error resolving argument\", i), ex);",
          "",
          "[Added Lines]",
          "166:      if (logger.isDebugEnabled()) {",
          "167:       logger.debug(getArgumentResolutionErrorMessage(\"Error resolving argument\", i), ex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "206:   return null;",
          "207:  }",
          "213:   ReflectionUtils.makeAccessible(getBridgedMethod());",
          "214:   try {",
          "215:    return getBridgedMethod().invoke(getBean(), args);",
          "216:   }",
          "217:   catch (IllegalArgumentException ex) {",
          "218:    assertTargetBean(getBridgedMethod(), getBean(), args);",
          "220:   }",
          "221:   catch (InvocationTargetException ex) {",
          "",
          "[Removed Lines]",
          "212:  private Object invoke(Object... args) throws Exception {",
          "219:    throw new IllegalStateException(getInvocationErrorMessage(ex.getMessage(), args), ex);",
          "",
          "[Added Lines]",
          "218:  protected Object doInvoke(Object... args) throws Exception {",
          "225:    String message = (ex.getMessage() != null ? ex.getMessage() : \"Illegal argument\");",
          "226:    throw new IllegalStateException(getInvocationErrorMessage(message, args), ex);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249:   Class<?> targetBeanClass = targetBean.getClass();",
          "250:   if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {",
          "251:    String msg = \"The mapped controller method class '\" + methodDeclaringClass.getName() +",
          "253:      targetBeanClass.getName() + \"'. If the controller requires proxying \" +",
          "254:      \"(e.g. due to @Transactional), please use class-based proxying.\";",
          "255:    throw new IllegalStateException(getInvocationErrorMessage(msg, args));",
          "",
          "[Removed Lines]",
          "252:      \"' is not an instance of the actual controller bean instance '\" +",
          "",
          "[Added Lines]",
          "259:      \"' is not an instance of the actual controller bean class '\" +",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "259:  private String getInvocationErrorMessage(String message, Object[] resolvedArgs) {",
          "260:   StringBuilder sb = new StringBuilder(getDetailedErrorMessage(message));",
          "261:   sb.append(\"Resolved arguments: \\n\");",
          "263:    sb.append(\"[\").append(i).append(\"] \");",
          "264:    if (resolvedArgs[i] == null) {",
          "265:     sb.append(\"[null] \\n\");",
          "",
          "[Removed Lines]",
          "262:   for (int i=0; i < resolvedArgs.length; i++) {",
          "",
          "[Added Lines]",
          "269:   for (int i = 0; i < resolvedArgs.length; i++) {",
          "",
          "---------------"
        ],
        "spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java||spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java": [
          "File: spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java -> spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.web.method.support;",
          "25: import java.lang.reflect.Method;",
          "27: import org.junit.Before;",
          "28: import org.junit.Test;",
          "29: import org.springframework.core.MethodParameter;",
          "30: import org.springframework.http.converter.HttpMessageNotReadableException;",
          "31: import org.springframework.mock.web.test.MockHttpServletRequest;",
          "",
          "[Removed Lines]",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertSame;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: import org.springframework.web.context.request.NativeWebRequest;",
          "35: import org.springframework.web.context.request.ServletWebRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import static org.hamcrest.Matchers.*;",
          "33: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:   }",
          "199:  }",
          "201:  private void invokeExceptionRaisingHandler(Throwable expected) throws Exception {",
          "202:   Method method = ExceptionRaisingHandler.class.getDeclaredMethod(\"raiseException\");",
          "203:   Object handler = new ExceptionRaisingHandler(expected);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:  @Test  // SPR-13917",
          "200:  public void invocationErrorMessage() throws Exception {",
          "201:   HandlerMethodArgumentResolverComposite composite = new HandlerMethodArgumentResolverComposite();",
          "202:   composite.addResolver(new StubArgumentResolver(double.class, null));",
          "204:   Method method = Handler.class.getDeclaredMethod(\"handle\", double.class);",
          "205:   Object handler = new Handler();",
          "206:   InvocableHandlerMethod hm = new InvocableHandlerMethod(handler, method);",
          "207:   hm.setHandlerMethodArgumentResolvers(composite);",
          "209:   try {",
          "210:    hm.invokeForRequest(this.webRequest, new ModelAndViewContainer());",
          "211:    fail();",
          "212:   }",
          "213:   catch (IllegalStateException ex) {",
          "214:    assertThat(ex.getMessage(), containsString(\"Illegal argument\"));",
          "215:   }",
          "216:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:   public String handle(Integer intArg, String stringArg) {",
          "213:    return intArg + \"-\" + stringArg;",
          "214:   }",
          "215:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:   public void handle(double amount) {",
          "235:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}