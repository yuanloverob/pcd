{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "537e49544764e617c4e252d6260b192de1ca260c",
      "candidate_info": {
        "commit_hash": "537e49544764e617c4e252d6260b192de1ca260c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/537e49544764e617c4e252d6260b192de1ca260c",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ],
        "message": "PDFBOX-4892: avoid compiler warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887821 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:         pdf = PDDocument.load(new File(OUT_DIR + \"/removeSingleDirectObjectTest.pdf\"));",
          "341:         page = pdf.getPage(0);",
          "345:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "346:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "343:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "343:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:         pdf = PDDocument.load(new File(OUT_DIR + \"/removeSingleIndirectObjectTest.pdf\"));",
          "381:         page = pdf.getPage(0);",
          "385:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "386:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "383:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "383:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:         pdf = PDDocument.load(new File(OUT_DIR + \"/removeDirectObjectTest.pdf\"));",
          "430:         page = pdf.getPage(0);",
          "434:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "435:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "432:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "432:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "471:         pdf = PDDocument.load(new File(OUT_DIR + \"/removeIndirectObjectTest.pdf\"));",
          "472:         page = pdf.getPage(0);",
          "476:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "477:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "474:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "474:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "521:         pdf = PDDocument.load(new File(OUT_DIR + \"/retainDirectObjectTest.pdf\"));",
          "522:         page = pdf.getPage(0);",
          "526:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "527:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "524:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "524:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:         pdf = PDDocument.load(new File(OUT_DIR + \"/retainIndirectObjectTest.pdf\"));",
          "572:         page = pdf.getPage(0);",
          "576:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "577:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "",
          "[Removed Lines]",
          "574:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "",
          "[Added Lines]",
          "574:         COSArrayList<PDAnnotation> annotations = (COSArrayList<PDAnnotation>) page.getAnnotations();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7601b7911c1a5e81d085a635f9489fef6061887d",
      "candidate_info": {
        "commit_hash": "7601b7911c1a5e81d085a635f9489fef6061887d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/7601b7911c1a5e81d085a635f9489fef6061887d",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ],
        "message": "PDFBOX-3017: close stream; avoid ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882765 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java||examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/cert/CRLVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:         }",
          "312:         ASN1InputStream oAsnInStream = new ASN1InputStream(crldpExt);",
          "313:         ASN1Primitive derObjCrlDP = oAsnInStream.readObject();",
          "314:         ASN1OctetString dosCrlDP = (ASN1OctetString) derObjCrlDP;",
          "315:         byte[] crldpExtOctets = dosCrlDP.getOctets();",
          "316:         ASN1InputStream oAsnInStream2 = new ASN1InputStream(crldpExtOctets);",
          "317:         ASN1Primitive derObj2 = oAsnInStream2.readObject();",
          "318:         CRLDistPoint distPoint = CRLDistPoint.getInstance(derObj2);",
          "319:         List<String> crlUrls = new ArrayList<String>();",
          "320:         for (DistributionPoint dp : distPoint.getDistributionPoints())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:         oAsnInStream.close();",
          "315:         if (!(derObjCrlDP instanceof ASN1OctetString))",
          "316:         {",
          "317:             LOG.warn(\"CRL distribution points for certificate subject \" +",
          "318:                     cert.getSubjectX500Principal().getName() +",
          "319:                     \" should be an octet string, but is \" + derObjCrlDP);",
          "320:             return new ArrayList<>();",
          "321:         }",
          "326:         oAsnInStream2.close();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0f681bbbd737c8a4b72d1b7cdf6d464ea0a142a",
      "candidate_info": {
        "commit_hash": "f0f681bbbd737c8a4b72d1b7cdf6d464ea0a142a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f0f681bbbd737c8a4b72d1b7cdf6d464ea0a142a",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java"
        ],
        "message": "PDFBOX-5164: add example\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889021 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/CreatePortableCollection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.pdfbox.examples.pdmodel;",
          "3: import java.io.ByteArrayInputStream;",
          "4: import java.io.IOException;",
          "5: import java.nio.charset.StandardCharsets;",
          "6: import java.util.ArrayList;",
          "7: import java.util.GregorianCalendar;",
          "8: import java.util.HashMap;",
          "9: import java.util.List;",
          "10: import java.util.Map;",
          "12: import org.apache.pdfbox.cos.COSDictionary;",
          "13: import org.apache.pdfbox.cos.COSName;",
          "14: import org.apache.pdfbox.pdmodel.PDDocument;",
          "15: import org.apache.pdfbox.pdmodel.PDDocumentNameDictionary;",
          "16: import org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode;",
          "17: import org.apache.pdfbox.pdmodel.PDPage;",
          "18: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "19: import org.apache.pdfbox.pdmodel.PageMode;",
          "20: import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;",
          "21: import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;",
          "22: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "32: public class CreatePortableCollection",
          "33: {",
          "38:     private CreatePortableCollection()",
          "39:     {",
          "40:     }",
          "49:     public void doIt(String file) throws IOException",
          "50:     {",
          "51:         PDDocument doc = new PDDocument();",
          "52:         PDPage page = new PDPage();",
          "53:         doc.addPage(page);",
          "55:         PDPageContentStream contentStream = new PDPageContentStream(doc, page);",
          "56:         contentStream.beginText();",
          "57:         contentStream.setFont(PDType1Font.HELVETICA, 12);",
          "58:         contentStream.newLineAtOffset(100, 700);",
          "59:         contentStream.showText(\"Example of a portable collection\");",
          "60:         contentStream.endText();",
          "61:         contentStream.close();",
          "64:         PDEmbeddedFilesNameTreeNode efTree = new PDEmbeddedFilesNameTreeNode();",
          "67:         PDComplexFileSpecification fs1 = new PDComplexFileSpecification();",
          "70:         fs1.setFile(\"Test1.txt\");",
          "71:         fs1.setFileUnicode(\"Test1.txt\");",
          "74:         byte[] data1 = \"This is the contents of the first embedded file\".getBytes(StandardCharsets.ISO_8859_1);",
          "75:         PDEmbeddedFile ef1 = new PDEmbeddedFile(doc, new ByteArrayInputStream(data1), COSName.FLATE_DECODE);",
          "77:         ef1.setSubtype(\"text/plain\");",
          "78:         ef1.setSize(data1.length);",
          "79:         ef1.setCreationDate(new GregorianCalendar());",
          "82:         fs1.setEmbeddedFile(ef1);",
          "83:         fs1.setEmbeddedFileUnicode(ef1);",
          "84:         fs1.setFileDescription(\"The first file\");",
          "87:         PDComplexFileSpecification fs2 = new PDComplexFileSpecification();",
          "90:         fs2.setFile(\"Test2.txt\");",
          "91:         fs2.setFileUnicode(\"Test2.txt\");",
          "94:         byte[] data2 = \"This is the contents of the second embedded file\".getBytes(StandardCharsets.ISO_8859_1);",
          "95:         PDEmbeddedFile ef2 = new PDEmbeddedFile(doc, new ByteArrayInputStream(data2), COSName.FLATE_DECODE);",
          "97:         ef2.setSubtype(\"text/plain\");",
          "98:         ef2.setSize(data2.length);",
          "99:         ef2.setCreationDate(new GregorianCalendar());",
          "102:         fs2.setEmbeddedFile(ef2);",
          "103:         fs2.setEmbeddedFileUnicode(ef2);",
          "104:         fs2.setFileDescription(\"The second file\");",
          "106:         Map<String, PDComplexFileSpecification> map = new HashMap<String, PDComplexFileSpecification>();",
          "107:         map.put(\"Attachment 1\", fs1);",
          "108:         map.put(\"Attachment 2\", fs2);",
          "111:         PDEmbeddedFilesNameTreeNode treeNode = new PDEmbeddedFilesNameTreeNode();",
          "112:         treeNode.setNames(map);",
          "114:         List<PDEmbeddedFilesNameTreeNode> kids = new ArrayList<PDEmbeddedFilesNameTreeNode>();",
          "115:         kids.add(treeNode);",
          "116:         efTree.setKids(kids);",
          "119:         PDDocumentNameDictionary names = new PDDocumentNameDictionary(doc.getDocumentCatalog());",
          "120:         names.setEmbeddedFiles(efTree);",
          "121:         doc.getDocumentCatalog().setNames(names);",
          "124:         doc.getDocumentCatalog().setPageMode(PageMode.USE_ATTACHMENTS);",
          "127:         COSDictionary collectionDic = new COSDictionary();",
          "128:         COSDictionary schemaDict = new COSDictionary();",
          "129:         schemaDict.setItem(COSName.TYPE, COSName.COLLECTION_SCHEMA);",
          "130:         COSDictionary sortDic = new COSDictionary();",
          "131:         sortDic.setItem(COSName.TYPE, COSName.COLLECTION_SORT);",
          "132:         sortDic.setString(COSName.A, \"true\"); // sort ascending",
          "135:         sortDic.setItem(COSName.S, COSName.getPDFName(\"fieldtwo\"));",
          "136:         collectionDic.setItem(COSName.TYPE, COSName.COLLECTION);",
          "137:         collectionDic.setItem(COSName.SCHEMA, schemaDict);",
          "138:         collectionDic.setItem(COSName.SORT, sortDic);",
          "139:         collectionDic.setItem(COSName.VIEW, COSName.D); // Details mode",
          "140:         COSDictionary fieldDict1 = new COSDictionary();",
          "141:         fieldDict1.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);",
          "142:         fieldDict1.setItem(COSName.SUBTYPE, COSName.S); // type: text field",
          "143:         fieldDict1.setString(COSName.N, \"field header one (description)\"); // header text",
          "144:         fieldDict1.setInt(COSName.O, 1); // order on the screen",
          "145:         COSDictionary fieldDict2 = new COSDictionary();",
          "146:         fieldDict2.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);",
          "147:         fieldDict2.setItem(COSName.SUBTYPE, COSName.S); // type: text field",
          "148:         fieldDict2.setString(COSName.N, \"field header two (name)\");",
          "149:         fieldDict2.setInt(COSName.O, 2);",
          "150:         COSDictionary fieldDict3 = new COSDictionary();",
          "151:         fieldDict3.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);",
          "152:         fieldDict3.setItem(COSName.SUBTYPE, COSName.N); // type: number field",
          "153:         fieldDict3.setString(COSName.N, \"field header three (size)\");",
          "154:         fieldDict3.setInt(COSName.O, 3);",
          "155:         schemaDict.setItem(\"fieldone\", fieldDict1); // field name (this is a key)",
          "156:         schemaDict.setItem(\"fieldtwo\", fieldDict2);",
          "157:         schemaDict.setItem(\"fieldthree\", fieldDict3);",
          "158:         doc.getDocumentCatalog().getCOSObject().setItem(COSName.COLLECTION, collectionDic);",
          "159:         doc.getDocumentCatalog().setVersion(\"1.7\");",
          "162:         COSDictionary ciDict1 = new COSDictionary();",
          "163:         ciDict1.setItem(COSName.TYPE, COSName.COLLECTION_ITEM);",
          "165:         ciDict1.setString(\"fieldone\", fs1.getFileDescription());",
          "166:         ciDict1.setString(\"fieldtwo\", fs1.getFile());",
          "167:         ciDict1.setInt(\"fieldthree\", fs1.getEmbeddedFile().getSize());",
          "168:         fs1.getCOSObject().setItem(COSName.CI, ciDict1);",
          "171:         COSDictionary ciDict2 = new COSDictionary();",
          "172:         ciDict2.setItem(COSName.TYPE, COSName.COLLECTION_ITEM);",
          "174:         ciDict2.setString(\"fieldone\", fs2.getFileDescription());",
          "175:         ciDict2.setString(\"fieldtwo\", fs2.getFile());",
          "176:         ciDict2.setInt(\"fieldthree\", fs2.getEmbeddedFile().getSize());",
          "177:         fs2.getCOSObject().setItem(COSName.CI, ciDict2);",
          "179:         doc.save(file);",
          "180:         doc.close();",
          "181:     }",
          "190:     public static void main(String[] args) throws IOException",
          "191:     {",
          "192:         CreatePortableCollection app = new CreatePortableCollection();",
          "193:         if (args.length != 1)",
          "194:         {",
          "195:             app.usage();",
          "196:         }",
          "197:         else",
          "198:         {",
          "199:             app.doIt(args[0]);",
          "200:         }",
          "201:     }",
          "206:     private void usage()",
          "207:     {",
          "208:         System.err.println(\"usage: \" + this.getClass().getName() + \" <output-file>\");",
          "209:     }",
          "210: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0622e90d68861d5fb0539c76b67b06d26eb67ed1",
      "candidate_info": {
        "commit_hash": "0622e90d68861d5fb0539c76b67b06d26eb67ed1",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/0622e90d68861d5fb0539c76b67b06d26eb67ed1",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"
        ],
        "message": "PDFBOX-5000: add ability to get AcroForm without fix ups being applied\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882811 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     public PDAcroForm getAcroForm()",
          "104:     {",
          "105:         if (cachedAcroForm == null)",
          "106:         {",
          "107:             COSDictionary dict = (COSDictionary)root.getDictionaryObject(COSName.ACRO_FORM);",
          "109:         }",
          "110:         return cachedAcroForm;",
          "111:     }",
          "",
          "[Removed Lines]",
          "108:             cachedAcroForm = dict == null ? null : new PDAcroForm(document, dict);",
          "",
          "[Added Lines]",
          "104:     {",
          "105:         return getAcroForm(true);",
          "106:     }",
          "118:     public PDAcroForm getAcroForm(boolean applyFixes)",
          "123:             cachedAcroForm = dict == null ? null : new PDAcroForm(document, dict, applyFixes);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     public PDAcroForm(PDDocument doc, COSDictionary form)",
          "96:     {",
          "97:         document = doc;",
          "98:         dictionary = form;",
          "100:     }",
          "",
          "[Removed Lines]",
          "99:         verifyOrCreateDefaults();",
          "",
          "[Added Lines]",
          "96:     {",
          "97:         this(doc, form, true);",
          "98:     }",
          "116:     public PDAcroForm(PDDocument doc, COSDictionary form, boolean applyFixes)",
          "121:         if (applyFixes) {",
          "122:             verifyOrCreateDefaults();",
          "123:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:         }",
          "253:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     @Test",
          "262:     public void testDontAddMissingInformationOnAcroFormAccess()",
          "263:     {",
          "264:         try",
          "265:         {",
          "266:             byte[] pdfBytes =  createAcroFormWithMissingResourceInformation();",
          "267:             PDDocument pdfDocument = PDDocument.load(pdfBytes);",
          "268:             PDDocumentCatalog documentCatalog = pdfDocument.getDocumentCatalog();",
          "271:             PDAcroForm theAcroForm = documentCatalog.getAcroForm(false);",
          "275:             assertEquals(\"\", theAcroForm.getDefaultAppearance());",
          "277:             assertNull(theAcroForm.getDefaultResources());",
          "278:             pdfDocument.close();",
          "279:         }",
          "280:         catch (IOException e)",
          "281:         {",
          "282:             System.err.println(\"Couldn't create test document, test skipped\");",
          "283:             return;",
          "284:         }",
          "285:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "216972d47531c69c941b99ebc8cea4bc4f611fad",
      "candidate_info": {
        "commit_hash": "216972d47531c69c941b99ebc8cea4bc4f611fad",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/216972d47531c69c941b99ebc8cea4bc4f611fad",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java"
        ],
        "message": "PDFBOX-5044: use identity hash set (identity check vs an equality check) as suggested by Maruan Sahyoun; add test\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884374 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTree.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.util.ArrayDeque;",
          "20: import java.util.HashSet;",
          "21: import java.util.Iterator;",
          "22: import java.util.Queue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.Collections;",
          "22: import java.util.IdentityHashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         private FieldIterator(PDAcroForm form)",
          "75:         {",
          "",
          "[Removed Lines]",
          "72:         private final Set<COSDictionary> set = new HashSet<COSDictionary>();",
          "",
          "[Added Lines]",
          "74:         private final Set<COSDictionary> set =",
          "75:                 Collections.newSetFromMap(new IdentityHashMap<COSDictionary, Boolean>());",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldTreeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.net.URL;",
          "23: import org.apache.pdfbox.pdmodel.PDDocument;",
          "24: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "26: import org.junit.Assert;",
          "27: import org.junit.Test;",
          "33: public class PDFieldTreeTest",
          "34: {",
          "41:     @Test",
          "42:     public void test5044() throws IOException",
          "43:     {",
          "44:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13016994/PDFBOX-4131-0.pdf\";",
          "46:         InputStream is = new URL(sourceUrl).openStream();",
          "47:         PDDocument doc = PDDocument.load(is);",
          "48:         PDDocumentCatalog catalog = doc.getDocumentCatalog();",
          "49:         PDAcroForm acroForm = catalog.getAcroForm();",
          "50:         int count = 0;",
          "51:         for (PDField field : acroForm.getFieldTree())",
          "52:         {",
          "53:             ++count;",
          "54:         }",
          "55:         Assert.assertEquals(4, count);",
          "56:         is.close();",
          "57:         doc.close();",
          "58:     }",
          "59: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}