{
  "cve_id": "CVE-2017-12631",
  "cve_desc": "Apache CXF Fediz ships with a number of container-specific plugins to enable WS-Federation for applications. A CSRF (Cross Style Request Forgery) style vulnerability has been found in the Spring 2, Spring 3 and Spring 4 plugins in versions before 1.4.3 and 1.3.3. The vulnerability can result in a security context that is set up using a malicious client's roles for the given enduser.",
  "repo": "apache/cxf-fediz",
  "patch_hash": "48dd9b68d67c6b729376c1ce8886f52a57df6c45",
  "patch_info": {
    "commit_hash": "48dd9b68d67c6b729376c1ce8886f52a57df6c45",
    "repo": "apache/cxf-fediz",
    "commit_url": "https://github.com/apache/cxf-fediz/commit/48dd9b68d67c6b729376c1ce8886f52a57df6c45",
    "files": [
      "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
      "systests/webapps/springWebapp/src/main/webapp/WEB-INF/applicationContext-security.xml"
    ],
    "message": "Some improvements to the Spring plugins",
    "before_after_code_files": [
      "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
    ]
  },
  "patch_diff": {
    "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
      "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:     private void verifySavedState(HttpServletRequest request) {",
      "130:         HttpSession session = request.getSession(false);",
      "138:         }",
      "139:     }",
      "",
      "[Removed Lines]",
      "131:         if (session != null) {",
      "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "133:             String state = getState(request);",
      "134:             if (savedContext != null && !savedContext.equals(state)) {",
      "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
      "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "137:             }",
      "",
      "[Added Lines]",
      "132:         if (session == null) {",
      "133:             logger.warn(\"The received state does not match the state saved in the context\");",
      "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "135:         }",
      "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "138:         String state = getState(request);",
      "139:         if (savedContext == null || !savedContext.equals(state)) {",
      "140:             logger.warn(\"The received state does not match the state saved in the context\");",
      "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
      "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
      "",
      "---------------"
    ],
    "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java": [
      "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:             + \"/j_spring_fediz_security_check\";",
      "158:         csrfAttackTest(url);",
      "159:     }",
      "160: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "161:     @Override",
      "162:     @org.junit.Test",
      "163:     public void testCSRFAttack2() throws Exception {",
      "164:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
      "165:             + \"/j_spring_fediz_security_check\";",
      "166:         csrfAttackTest2(url);",
      "167:     }",
      "",
      "---------------"
    ],
    "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java": [
      "File: systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:     }",
      "806: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "806:     @org.junit.Test",
      "807:     public void testCSRFAttack2() throws Exception {",
      "808:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
      "809:         csrfAttackTest2(url);",
      "810:     }",
      "812:     protected void csrfAttackTest2(String rpURL) throws Exception {",
      "813:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
      "816:         WebClient webClient2 = new WebClient();",
      "817:         webClient2.getOptions().setUseInsecureSSL(true);",
      "818:         webClient2.getCredentialsProvider().setCredentials(",
      "819:             new AuthScope(\"localhost\", Integer.parseInt(getIdpHttpsPort())),",
      "820:             new UsernamePasswordCredentials(\"bob\", \"bob\"));",
      "822:         webClient2.getOptions().setJavaScriptEnabled(false);",
      "823:         final HtmlPage idpPage2 = webClient2.getPage(url);",
      "824:         webClient2.getOptions().setJavaScriptEnabled(true);",
      "825:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage2.getTitleText());",
      "830:         WebRequest request = new WebRequest(new URL(rpURL), HttpMethod.POST);",
      "831:         request.setRequestParameters(new ArrayList<NameValuePair>());",
      "833:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
      "835:         for (DomElement result : results) {",
      "836:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
      "837:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
      "838:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
      "839:                 String value = result.getAttributeNS(null, \"value\");",
      "840:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
      "841:             }",
      "842:         }",
      "844:         WebClient webClient = new WebClient();",
      "845:         webClient.getOptions().setUseInsecureSSL(true);",
      "847:         try {",
      "848:             webClient.getPage(request);",
      "849:             Assert.fail(\"Failure expected on a CSRF attack\");",
      "850:         } catch (FailingHttpStatusCodeException ex) {",
      "852:         }",
      "857:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f368c472e7beb26f8ca6f818eee8139d8caf2e6e",
      "candidate_info": {
        "commit_hash": "f368c472e7beb26f8ca6f818eee8139d8caf2e6e",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/f368c472e7beb26f8ca6f818eee8139d8caf2e6e",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ],
        "message": "Fixing Spring plugins",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.ServletException;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "30: import org.apache.cxf.fediz.core.config.FedizContext;",
          "31: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,",
          "56:     InitializingBean, ApplicationContextAware {",
          "58:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);",
          "60:     private ApplicationContext appContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public static final String SAVED_CONTEXT = \"SAVED_CONTEXT\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:                 }",
          "107:             }",
          "109:         } catch (ProcessingException ex) {",
          "110:             LOG.warn(\"Failed to create SignInRequest\", ex);",
          "111:             throw new ServletException(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:             HttpSession session = servletRequest.getSession(true);",
          "116:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "---------------"
        ],
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.servlet.ServletRequest;",
          "27: import javax.servlet.http.HttpServletRequest;",
          "28: import javax.servlet.http.HttpServletResponse;",
          "30: import org.apache.cxf.fediz.core.FederationConstants;",
          "31: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.cxf.fediz.spring.FederationConfig;",
          "34: import org.apache.cxf.fediz.spring.authentication.ExpiredTokenException;",
          "35: import org.apache.cxf.fediz.spring.authentication.FederationAuthenticationToken;",
          "36: import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
          "37: import org.springframework.security.core.Authentication;",
          "38: import org.springframework.security.core.AuthenticationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.springframework.security.authentication.BadCredentialsException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response)",
          "56:         throws AuthenticationException, IOException {",
          "65:         }",
          "67:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "68:         String responseToken = getResponseToken(request);",
          "",
          "[Removed Lines]",
          "58:         SecurityContext context = SecurityContextHolder.getContext();",
          "59:         if (context != null) {",
          "60:             Authentication authentication = context.getAuthentication();",
          "61:             if (authentication instanceof FederationAuthenticationToken) {",
          "63:                 throw new ExpiredTokenException(\"Token is expired\");",
          "64:             }",
          "",
          "[Added Lines]",
          "60:         if (isTokenExpired()) {",
          "61:             throw new ExpiredTokenException(\"Token is expired\");",
          "64:         verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         return null;",
          "118:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     private String getState(ServletRequest request) {",
          "120:         if (request.getParameter(FederationConstants.PARAM_CONTEXT) != null) {",
          "121:             return request.getParameter(FederationConstants.PARAM_CONTEXT);",
          "122:         } else if (request.getParameter(SAMLSSOConstants.RELAY_STATE) != null) {",
          "123:             return request.getParameter(SAMLSSOConstants.RELAY_STATE);",
          "124:         }",
          "126:         return null;",
          "127:     }",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "138:         }",
          "139:     }",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.servlet.ServletResponse;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "30: import javax.servlet.http.HttpServletResponse;",
          "32: import org.apache.cxf.fediz.core.config.FedizContext;",
          "33: import org.apache.cxf.fediz.core.exception.ProcessingException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,",
          "58:     InitializingBean, ApplicationContextAware {",
          "60:     private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);",
          "62:     private ApplicationContext appContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     public static final String SAVED_CONTEXT = \"SAVED_CONTEXT\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:                 }",
          "130:             }",
          "132:         } catch (ProcessingException ex) {",
          "133:             System.err.println(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "134:             LOG.warn(\"Failed to create SignInRequest: \" + ex.getMessage());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:             HttpSession session = ((HttpServletRequest)request).getSession(true);",
          "139:             session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());",
          "",
          "---------------"
        ],
        "plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import javax.servlet.ServletRequest;",
          "29: import javax.servlet.http.HttpServletRequest;",
          "30: import javax.servlet.http.HttpServletResponse;",
          "32: import org.apache.cxf.fediz.core.FederationConstants;",
          "33: import org.apache.cxf.fediz.core.SAMLSSOConstants;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.servlet.http.HttpSession;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     @Override",
          "107:     public Authentication attemptAuthentication(HttpServletRequest request) throws AuthenticationException {",
          "116:         }",
          "118:         String wa = request.getParameter(FederationConstants.PARAM_ACTION);",
          "119:         String responseToken = getResponseToken(request);",
          "120:         FedizRequest wfReq = new FedizRequest();",
          "",
          "[Removed Lines]",
          "109:         SecurityContext context = SecurityContextHolder.getContext();",
          "110:         if (context != null) {",
          "111:             Authentication authentication = context.getAuthentication();",
          "112:             if (authentication instanceof FederationAuthenticationToken) {",
          "114:                 throw new ExpiredTokenException(\"Token is expired\");",
          "115:             }",
          "",
          "[Added Lines]",
          "110:         if (isTokenExpired()) {",
          "111:             throw new ExpiredTokenException(\"Token is expired\");",
          "114:         verifySavedState(request);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         return this.getAuthenticationManager().authenticate(authRequest);",
          "135:     }",
          "137:     @Override",
          "138:     public void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,",
          "139:                                              AuthenticationException authException) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:     private void verifySavedState(HttpServletRequest request) {",
          "136:         HttpSession session = request.getSession(false);",
          "137:         if (session != null) {",
          "138:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "139:             String state = getState(request);",
          "140:             if (savedContext != null && !savedContext.equals(state)) {",
          "141:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "142:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:             }",
          "144:         }",
          "145:     }",
          "147:     private String getState(ServletRequest request) {",
          "148:         if (request.getParameter(FederationConstants.PARAM_CONTEXT) != null) {",
          "149:             return request.getParameter(FederationConstants.PARAM_CONTEXT);",
          "150:         } else if (request.getParameter(SAMLSSOConstants.RELAY_STATE) != null) {",
          "151:             return request.getParameter(SAMLSSOConstants.RELAY_STATE);",
          "152:         }",
          "154:         return null;",
          "155:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7127129dbc0f4ee83985052085e185e750cebbf",
      "candidate_info": {
        "commit_hash": "e7127129dbc0f4ee83985052085e185e750cebbf",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/e7127129dbc0f4ee83985052085e185e750cebbf",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java",
          "systests/webapps/springWebapp/src/main/webapp/WEB-INF/applicationContext-security.xml"
        ],
        "message": "Some improvements to the Spring plugins",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "",
          "[Added Lines]",
          "132:         if (session == null) {",
          "133:             logger.warn(\"The received state does not match the state saved in the context\");",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "138:         String state = getState(request);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "",
          "[Added Lines]",
          "132:         if (session == null) {",
          "133:             logger.warn(\"The received state does not match the state saved in the context\");",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "138:         String state = getState(request);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java -> systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/Spring3Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         csrfAttackTest(url);",
          "153:     }",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     @Override",
          "156:     @org.junit.Test",
          "157:     public void testCSRFAttack2() throws Exception {",
          "158:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "159:             + \"/j_spring_fediz_security_check\";",
          "160:         csrfAttackTest2(url);",
          "161:     }",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java -> systests/spring/src/test/java/org/apache/cxf/fediz/systests/spring/SpringTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:             + \"/j_spring_fediz_security_check\";",
          "151:         csrfAttackTest(url);",
          "152:     }",
          "153: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     @Override",
          "155:     @org.junit.Test",
          "156:     public void testCSRFAttack2() throws Exception {",
          "157:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "158:             + \"/j_spring_fediz_security_check\";",
          "159:         csrfAttackTest2(url);",
          "160:     }",
          "",
          "---------------"
        ],
        "systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java": [
          "File: systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/systests/common/AbstractTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:     }",
          "804: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:     @org.junit.Test",
          "805:     public void testCSRFAttack2() throws Exception {",
          "806:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "807:         csrfAttackTest2(url);",
          "808:     }",
          "810:     protected void csrfAttackTest2(String rpURL) throws Exception {",
          "811:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "814:         WebClient webClient2 = new WebClient();",
          "815:         webClient2.getOptions().setUseInsecureSSL(true);",
          "816:         webClient2.getCredentialsProvider().setCredentials(",
          "817:             new AuthScope(\"localhost\", Integer.parseInt(getIdpHttpsPort())),",
          "818:             new UsernamePasswordCredentials(\"bob\", \"bob\"));",
          "820:         webClient2.getOptions().setJavaScriptEnabled(false);",
          "821:         final HtmlPage idpPage2 = webClient2.getPage(url);",
          "822:         webClient2.getOptions().setJavaScriptEnabled(true);",
          "823:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage2.getTitleText());",
          "828:         WebRequest request = new WebRequest(new URL(rpURL), HttpMethod.POST);",
          "829:         request.setRequestParameters(new ArrayList<NameValuePair>());",
          "831:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
          "833:         for (DomElement result : results) {",
          "834:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "835:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "836:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "837:                 String value = result.getAttributeNS(null, \"value\");",
          "838:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "839:             }",
          "840:         }",
          "842:         WebClient webClient = new WebClient();",
          "843:         webClient.getOptions().setUseInsecureSSL(true);",
          "845:         try {",
          "846:             webClient.getPage(request);",
          "847:             Assert.fail(\"Failure expected on a CSRF attack\");",
          "848:         } catch (FailingHttpStatusCodeException ex) {",
          "850:         }",
          "852:         webClient.close();",
          "853:         webClient2.close();",
          "855:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
      "candidate_info": {
        "commit_hash": "ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
        "repo": "apache/cxf-fediz",
        "commit_url": "https://github.com/apache/cxf-fediz/commit/ccdb12b26ff89e0a998a333e84dd84bd713ac76c",
        "files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
          "systests/webapps/springWebapp/src/main/webapp/WEB-INF/applicationContext-security.xml"
        ],
        "message": "Some improvements to the Spring plugins",
        "before_after_code_files": [
          "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ],
          "candidate": [
            "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
            "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
            "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java"
          ]
        }
      },
      "candidate_diff": {
        "plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "",
          "[Added Lines]",
          "132:         if (session == null) {",
          "133:             logger.warn(\"The received state does not match the state saved in the context\");",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "138:         String state = getState(request);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "---------------"
        ],
        "plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java||plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java": [
          "File: plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java -> plugins/spring3/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private void verifySavedState(HttpServletRequest request) {",
          "130:         HttpSession session = request.getSession(false);",
          "138:         }",
          "139:     }",
          "",
          "[Removed Lines]",
          "131:         if (session != null) {",
          "132:             String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "133:             String state = getState(request);",
          "134:             if (savedContext != null && !savedContext.equals(state)) {",
          "135:                 logger.warn(\"The received state does not match the state saved in the context\");",
          "136:                 throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "137:             }",
          "",
          "[Added Lines]",
          "132:         if (session == null) {",
          "133:             logger.warn(\"The received state does not match the state saved in the context\");",
          "134:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "135:         }",
          "137:         String savedContext = (String)session.getAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "138:         String state = getState(request);",
          "139:         if (savedContext == null || !savedContext.equals(state)) {",
          "140:             logger.warn(\"The received state does not match the state saved in the context\");",
          "141:             throw new BadCredentialsException(\"The received state does not match the state saved in the context\");",
          "143:         session.removeAttribute(FederationAuthenticationEntryPoint.SAVED_CONTEXT);",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring3Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         csrfAttackTest(url);",
          "160:     }",
          "162: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     @Override",
          "163:     @org.junit.Test",
          "164:     public void testCSRFAttack2() throws Exception {",
          "165:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "166:             + \"/j_spring_fediz_security_check\";",
          "167:         csrfAttackTest2(url);",
          "168:     }",
          "",
          "---------------"
        ],
        "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java||systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java": [
          "File: systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java -> systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             + \"/j_spring_fediz_security_check\";",
          "158:         csrfAttackTest(url);",
          "159:     }",
          "160: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     @Override",
          "162:     @org.junit.Test",
          "163:     public void testCSRFAttack2() throws Exception {",
          "164:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName()",
          "165:             + \"/j_spring_fediz_security_check\";",
          "166:         csrfAttackTest2(url);",
          "167:     }",
          "",
          "---------------"
        ],
        "systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java||systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java": [
          "File: systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java -> systests/tests/src/test/java/org/apache/cxf/fediz/integrationtests/AbstractTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "800:     }",
          "802: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:     @org.junit.Test",
          "803:     public void testCSRFAttack2() throws Exception {",
          "804:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "805:         csrfAttackTest2(url);",
          "806:     }",
          "808:     protected void csrfAttackTest2(String rpURL) throws Exception {",
          "809:         String url = \"https://localhost:\" + getRpHttpsPort() + \"/\" + getServletContextName() + \"/secure/fedservlet\";",
          "812:         WebClient webClient2 = new WebClient();",
          "813:         webClient2.getOptions().setUseInsecureSSL(true);",
          "814:         webClient2.getCredentialsProvider().setCredentials(",
          "815:             new AuthScope(\"localhost\", Integer.parseInt(getIdpHttpsPort())),",
          "816:             new UsernamePasswordCredentials(\"bob\", \"bob\"));",
          "818:         webClient2.getOptions().setJavaScriptEnabled(false);",
          "819:         final HtmlPage idpPage2 = webClient2.getPage(url);",
          "820:         webClient2.getOptions().setJavaScriptEnabled(true);",
          "821:         Assert.assertEquals(\"IDP SignIn Response Form\", idpPage2.getTitleText());",
          "826:         WebRequest request = new WebRequest(new URL(rpURL), HttpMethod.POST);",
          "827:         request.setRequestParameters(new ArrayList<NameValuePair>());",
          "829:         DomNodeList<DomElement> results = idpPage2.getElementsByTagName(\"input\");",
          "831:         for (DomElement result : results) {",
          "832:             if (\"wresult\".equals(result.getAttributeNS(null, \"name\"))",
          "833:                 || \"wa\".equals(result.getAttributeNS(null, \"name\"))",
          "834:                 || \"wctx\".equals(result.getAttributeNS(null, \"name\"))) {",
          "835:                 String value = result.getAttributeNS(null, \"value\");",
          "836:                 request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null, \"name\"), value));",
          "837:             }",
          "838:         }",
          "840:         WebClient webClient = new WebClient();",
          "841:         webClient.getOptions().setUseInsecureSSL(true);",
          "843:         try {",
          "844:             webClient.getPage(request);",
          "845:             Assert.fail(\"Failure expected on a CSRF attack\");",
          "846:         } catch (FailingHttpStatusCodeException ex) {",
          "848:         }",
          "850:         webClient.close();",
          "851:         webClient2.close();",
          "853:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}