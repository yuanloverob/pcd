{
  "cve_id": "CVE-2022-31777",
  "cve_desc": "A stored cross-site scripting (XSS) vulnerability in Apache Spark 3.2.1 and earlier, and 3.3.0, allows remote attackers to execute arbitrary JavaScript in the web browser of a user, by including a malicious payload into the logs which would be returned in logs rendered in the UI.",
  "repo": "apache/spark",
  "patch_hash": "ad90195de56688ce0898691eb9d04297ab0871ad",
  "patch_info": {
    "commit_hash": "ad90195de56688ce0898691eb9d04297ab0871ad",
    "repo": "apache/spark",
    "commit_url": "https://github.com/apache/spark/commit/ad90195de56688ce0898691eb9d04297ab0871ad",
    "files": [
      "core/src/main/resources/org/apache/spark/ui/static/log-view.js"
    ],
    "message": "[SPARK-39505][UI] Escape log content rendered in UI\n\n### What changes were proposed in this pull request?\n\nEscape log content rendered to the UI.\n\n### Why are the changes needed?\n\nLog content may contain reserved characters or other code in the log and be misinterpreted in the UI as HTML.\n\n### Does this PR introduce _any_ user-facing change?\n\nNo\n\n### How was this patch tested?\n\nExisting tests\n\nCloses #36902 from srowen/LogViewEscape.\n\nAuthored-by: Sean Owen <srowen@gmail.com>\nSigned-off-by: Dongjoon Hyun <dongjoon@apache.org>",
    "before_after_code_files": [
      "core/src/main/resources/org/apache/spark/ui/static/log-view.js||core/src/main/resources/org/apache/spark/ui/static/log-view.js"
    ]
  },
  "patch_diff": {
    "core/src/main/resources/org/apache/spark/ui/static/log-view.js||core/src/main/resources/org/apache/spark/ui/static/log-view.js": [
      "File: core/src/main/resources/org/apache/spark/ui/static/log-view.js -> core/src/main/resources/org/apache/spark/ui/static/log-view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:       if (retStartByte == 0) {",
      "86:         disableMoreButton();",
      "87:       }",
      "90:       curLogLength = curLogLength + (startByte - retStartByte);",
      "91:       startByte = retStartByte;",
      "",
      "[Removed Lines]",
      "88:       $(\"pre\", \".log-content\").prepend(cleanData);",
      "",
      "[Added Lines]",
      "88:       $(\"pre\", \".log-content\").prepend(document.createTextNode(cleanData));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:             var retLogLength = dataInfo[2];",
      "117:             var cleanData = data.substring(newlineIndex + 1);",
      "120:             curLogLength = curLogLength + (retEndByte - retStartByte);",
      "121:             endByte = retEndByte;",
      "",
      "[Removed Lines]",
      "118:             $(\"pre\", \".log-content\").append(cleanData);",
      "",
      "[Added Lines]",
      "118:             $(\"pre\", \".log-content\").append(document.createTextNode(cleanData));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18000fd0e20787b44b930296556483f3fb419a8f",
      "candidate_info": {
        "commit_hash": "18000fd0e20787b44b930296556483f3fb419a8f",
        "repo": "apache/spark",
        "commit_url": "https://github.com/apache/spark/commit/18000fd0e20787b44b930296556483f3fb419a8f",
        "files": [
          "sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala"
        ],
        "message": "[SPARK-39633][SQL] Support timestamp in seconds for TimeTravel using Dataframe options\n\n### What changes were proposed in this pull request?\n\nSupport timestamp in seconds for TimeTravel using Dataframe options\n\n### Why are the changes needed?\n\nTo have a parity in doing TimeTravel via SQL and Dataframe option.\n\nSPARK-SQL supports queries like :\n```sql\nSELECT * from {table} TIMESTAMP AS OF 1548751078\n```\n\n### Does this PR introduce _any_ user-facing change?\n\nNo\n\n### How was this patch tested?\n\nAdded new UTs for testing the behaviour.\n\nCloses #37025 from singhpk234/fix/timetravel_df_options.\n\nAuthored-by: Prashant Singh <psinghvk@amazon.com>\nSigned-off-by: huaxingao <huaxin_gao@apple.com>\n(cherry picked from commit 44e2657f3d511c25135c95dc3d584c540d227b5b)\nSigned-off-by: huaxingao <huaxin_gao@apple.com>",
        "before_after_code_files": [
          "sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala||sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jack-steven-root/spark/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala||sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala": [
          "File: sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala -> sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/v2/DataSourceV2Utils.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.spark.sql.connector.catalog.TableCapability.BATCH_READ",
          "33: import org.apache.spark.sql.errors.QueryExecutionErrors",
          "34: import org.apache.spark.sql.internal.SQLConf",
          "36: import org.apache.spark.sql.util.CaseInsensitiveStringMap",
          "38: private[sql] object DataSourceV2Utils extends Logging {",
          "",
          "[Removed Lines]",
          "35: import org.apache.spark.sql.types.StructType",
          "",
          "[Added Lines]",
          "35: import org.apache.spark.sql.types.{LongType, StructType}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         val timestamp = hasCatalog.extractTimeTravelTimestamp(dsOptions)",
          "126:         val timeTravelVersion = if (version.isPresent) Some(version.get) else None",
          "128:         val timeTravel = TimeTravelSpec.create(timeTravelTimestamp, timeTravelVersion, conf)",
          "129:         (CatalogV2Util.loadTable(catalog, ident, timeTravel).get, Some(catalog), Some(ident))",
          "130:       case _ =>",
          "",
          "[Removed Lines]",
          "127:         val timeTravelTimestamp = if (timestamp.isPresent) Some(Literal(timestamp.get)) else None",
          "",
          "[Added Lines]",
          "127:         val timeTravelTimestamp = if (timestamp.isPresent) {",
          "128:           if (timestamp.get.forall(_.isDigit)) {",
          "129:             Some(Literal(timestamp.get.toLong, LongType))",
          "130:           } else {",
          "131:             Some(Literal(timestamp.get))",
          "132:           }",
          "133:         } else {",
          "134:           None",
          "135:         }",
          "",
          "---------------"
        ],
        "sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala -> sql/core/src/test/scala/org/apache/spark/sql/connector/DataSourceV2SQLSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.time.{Duration, LocalDate, Period}",
          "23: import scala.collection.JavaConverters._",
          "25: import org.apache.spark.sql._",
          "26: import org.apache.spark.sql.catalyst.InternalRow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import scala.concurrent.duration.MICROSECONDS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2691:     val ts2 = DateTimeUtils.stringToTimestampAnsi(",
          "2692:       UTF8String.fromString(\"2021-01-29 00:00:00\"),",
          "2693:       DateTimeUtils.getZoneId(SQLConf.get.sessionLocalTimeZone))",
          "2694:     val t3 = s\"testcat.t$ts1\"",
          "2695:     val t4 = s\"testcat.t$ts2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2695:     val ts1InSeconds = MICROSECONDS.toSeconds(ts1).toString",
          "2696:     val ts2InSeconds = MICROSECONDS.toSeconds(ts2).toString",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2707:         === Array(Row(5), Row(6)))",
          "2708:       assert(sql(\"SELECT * FROM t TIMESTAMP AS OF '2021-01-29 00:00:00'\").collect",
          "2709:         === Array(Row(7), Row(8)))",
          "2710:       assert(sql(\"SELECT * FROM t TIMESTAMP AS OF make_date(2021, 1, 29)\").collect",
          "2711:         === Array(Row(7), Row(8)))",
          "2712:       assert(sql(\"SELECT * FROM t TIMESTAMP AS OF to_timestamp('2021-01-29 00:00:00')\").collect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2713:       assert(sql(s\"SELECT * FROM t TIMESTAMP AS OF $ts1InSeconds\").collect",
          "2714:         === Array(Row(5), Row(6)))",
          "2715:       assert(sql(s\"SELECT * FROM t TIMESTAMP AS OF $ts2InSeconds\").collect",
          "2716:         === Array(Row(7), Row(8)))",
          "2717:       assert(sql(s\"SELECT * FROM t FOR SYSTEM_TIME AS OF $ts1InSeconds\").collect",
          "2718:         === Array(Row(5), Row(6)))",
          "2719:       assert(sql(s\"SELECT * FROM t FOR SYSTEM_TIME AS OF $ts2InSeconds\").collect",
          "2720:         === Array(Row(7), Row(8)))",
          "",
          "---------------"
        ],
        "sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala -> sql/core/src/test/scala/org/apache/spark/sql/connector/SupportsCatalogOptionsSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Optional",
          "22: import scala.language.implicitConversions",
          "23: import scala.util.Try",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import scala.concurrent.duration.MICROSECONDS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:         timestamp = Some(\"2019-01-29 00:37:58\")), df3.toDF())",
          "323:       checkAnswer(load(\"t\", Some(catalogName), version = None,",
          "324:         timestamp = Some(\"2021-01-29 00:37:58\")), df4.toDF())",
          "325:     }",
          "327:     val e = intercept[AnalysisException] {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:       checkAnswer(load(\"t\", Some(catalogName), version = None,",
          "329:         timestamp = Some(MICROSECONDS.toSeconds(ts1).toString)), df3.toDF())",
          "330:       checkAnswer(load(\"t\", Some(catalogName), version = None,",
          "331:         timestamp = Some(MICROSECONDS.toSeconds(ts2).toString)), df4.toDF())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a5eaa56f58efc91f86c3929b48e2baeaf6b4a3c",
      "candidate_info": {
        "commit_hash": "9a5eaa56f58efc91f86c3929b48e2baeaf6b4a3c",
        "repo": "apache/spark",
        "commit_url": "https://github.com/apache/spark/commit/9a5eaa56f58efc91f86c3929b48e2baeaf6b4a3c",
        "files": [
          "sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala",
          "sql/core/src/test/resources/sql-tests/results/explain-aqe.sql.out",
          "sql/core/src/test/resources/sql-tests/results/explain-cbo.sql.out",
          "sql/core/src/test/resources/sql-tests/results/explain.sql.out",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q10.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q10/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q19.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q19/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q27.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q27/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q3.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q3/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q34.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q34/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q42.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q42/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q43.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q43/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q46.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q46/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q52.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q52/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q53.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q53/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q55.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q55/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q59.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q59/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q63.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q63/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q65.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q65/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q68.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q68/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q7.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q7/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q73.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q73/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q79.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q79/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q89.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q89/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q98.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/q98/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/ss_max.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-modified/ss_max/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q1.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q1/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q10.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q10/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q11.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q11/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q12.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q12/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q13.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q13/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q14a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q14a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q14b.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q14b/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q15.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q15/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q16.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q16/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q17.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q17/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q18.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q18/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q19.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q19/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q2.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q2/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q20.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q20/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q21.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q21/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q22.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q22/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q23a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q23a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q23b.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q23b/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q24a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q24a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q24b.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q24b/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q25.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q25/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q26.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q26/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q27.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q27/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q28.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q28/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q29.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q29/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q3.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q3/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q30.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q30/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q31.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q31/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q32.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q32/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q33.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q33/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q35.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q35/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q36.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q36/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q37.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q37/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q38.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q38/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q39a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q39a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q39b.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q39b/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q4.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q4/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q40.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q40/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q41.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q41/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q42.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q42/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q43.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q43/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q44.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q44/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q45.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q45/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q46.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q46/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q47.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q47/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q48.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q48/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q49.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q49/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q5.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q5/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q50.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q50/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q51.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q51/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q52.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q52/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q53.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q53/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q54.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q54/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q55.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q55/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q56.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q56/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q57.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q57/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q58.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q58/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q59.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q59/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q60.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q60/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q61.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q61/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q62.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q62/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q63.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q63/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q65.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q65/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q66.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q66/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q67.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q67/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q68.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q68/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q69.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q69/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q7.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q7/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q70.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q70/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q71.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q71/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q72.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q72/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q73.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q73/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q76.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q76/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q77.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q77/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q79.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q79/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q8.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q8/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q80.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q80/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q81.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q81/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q82.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q82/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q83.ansi/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q83.sf100.ansi/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q83.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q83/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q84.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q84/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q85.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q85/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q86.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q86/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q87.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q87/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q88.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q88/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q89.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q89/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q9.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q9/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q90.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q90/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q91.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q91/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q92.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q92/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q93.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q93/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q94.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q94/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q95.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q95/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q96.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q96/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q97.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q97/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q98.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q98/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q99.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v1_4/q99/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q10a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q10a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q11.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q11/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q12.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q12/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q14.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q14/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q14a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q14a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q18a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q18a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q20.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q20/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q22.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q22/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q22a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q22a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q24.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q24/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q27a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q27a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q34.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q34/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q35.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q35/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q35a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q35a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q36a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q36a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q47.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q47/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q49.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q49/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q51a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q51a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q57.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q57/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q5a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q5a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q6.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q6/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q64.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q64/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q67a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q67a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q70a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q70a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q72.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q72/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q74.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q74/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q75.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q75/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q77a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q77a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q78.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q78/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q80a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q80a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q86a.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q86a/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q98.sf100/explain.txt",
          "sql/core/src/test/resources/tpcds-plan-stability/approved-plans-v2_7/q98/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q1/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q10/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q11/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q12/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q13/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q14/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q15/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q16/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q17/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q18/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q19/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q2/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q20/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q21/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q22/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q3/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q4/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q5/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q6/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q7/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q8/explain.txt",
          "sql/core/src/test/resources/tpch-plan-stability/q9/explain.txt",
          "sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala"
        ],
        "message": "[SPARK-39437][SQL][TEST][3.3] Normalize plan id separately in PlanStabilitySuite\n\n### What changes were proposed in this pull request?\n\nIn `PlanStabilitySuite`, we normalize expression IDs by matching `#\\d+` in the explain string. However, this regex can match plan id in `Exchange` node as well, which will mess up the normalization if expression IDs and plan IDs overlap.\n\nThis PR normalizes plan id separately in `PlanStabilitySuite`.\n\n### Why are the changes needed?\n\nMake the plan golden file more stable.\n\n### Does this PR introduce _any_ user-facing change?\n\nno\n\n### How was this patch tested?\n\nN/A\n\nbackport https://github.com/apache/spark/pull/36827\n\nCloses #36854 from cloud-fan/test2.\n\nAuthored-by: Wenchen Fan <wenchen@databricks.com>\nSigned-off-by: Dongjoon Hyun <dongjoon@apache.org>",
        "before_after_code_files": [
          "sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala||sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala||sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala||sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala",
          "sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jack-steven-root/spark/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala||sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala": [
          "File: sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala -> sql/core/src/main/scala/org/apache/spark/sql/execution/exchange/Exchange.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   override def output: Seq[Attribute] = child.output",
          "38:   final override val nodePatterns: Seq[TreePattern] = Seq(EXCHANGE)",
          "41: }",
          "",
          "[Removed Lines]",
          "40:   override def stringArgs: Iterator[Any] = super.stringArgs ++ Iterator(s\"[id=#$id]\")",
          "",
          "[Added Lines]",
          "40:   override def stringArgs: Iterator[Any] = super.stringArgs ++ Iterator(s\"[plan_id=$id]\")",
          "",
          "---------------"
        ],
        "sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala||sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala -> sql/core/src/test/scala/org/apache/spark/sql/PlanStabilitySuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   private val referenceRegex = \"#\\\\d+\".r",
          "82:   private val normalizeRegex = \"#\\\\d+L?\".r",
          "84:   private val clsName = this.getClass.getCanonicalName",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   private val planIdRegex = \"plan_id=\\\\d+\".r",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     val map = new mutable.HashMap[String, String]()",
          "235:     normalizeRegex.findAllMatchIn(plan).map(_.toString)",
          "236:       .foreach(map.getOrElseUpdate(_, (map.size + 1).toString))",
          "238:   }",
          "240:   private def normalizeLocation(plan: String): String = {",
          "",
          "[Removed Lines]",
          "237:     normalizeRegex.replaceAllIn(plan, regexMatch => s\"#${map(regexMatch.toString)}\")",
          "",
          "[Added Lines]",
          "238:     val exprIdNormalized = normalizeRegex.replaceAllIn(",
          "239:       plan, regexMatch => s\"#${map(regexMatch.toString)}\")",
          "242:     val planIdMap = new mutable.HashMap[String, String]()",
          "243:     planIdRegex.findAllMatchIn(exprIdNormalized).map(_.toString)",
          "244:       .foreach(planIdMap.getOrElseUpdate(_, (planIdMap.size + 1).toString))",
          "245:     planIdRegex.replaceAllIn(",
          "246:       exprIdNormalized, regexMatch => s\"plan_id=${planIdMap(regexMatch.toString)}\")",
          "",
          "---------------"
        ],
        "sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala||sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala -> sql/core/src/test/scala/org/apache/spark/sql/SQLQueryTestHelper.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   protected def replaceNotIncludedMsg(line: String): String = {",
          "37:     line.replaceAll(\"#\\\\d+\", \"#x\")",
          "38:       .replaceAll(",
          "39:         s\"Location.*$clsName/\",",
          "40:         s\"Location $notIncludedMsg/{warehouse_dir}/\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:       .replaceAll(\"plan_id=\\\\d+\", \"plan_id=x\")",
          "",
          "---------------"
        ],
        "sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala -> sql/core/src/test/scala/org/apache/spark/sql/execution/debug/DebuggingSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     val output = captured.toString()",
          "114:     val hashedModeString = \"HashedRelationBroadcastMode(List(input[0, bigint, false]),false)\"",
          "117:          |Tuples output: 0",
          "118:          | id LongType: {}",
          "119:          |== WholeStageCodegen (1) ==",
          "",
          "[Removed Lines]",
          "115:     assert(output.replaceAll(\"\\\\[id=#\\\\d+\\\\]\", \"[id=#x]\").contains(",
          "116:       s\"\"\"== BroadcastExchange $hashedModeString, [id=#x] ==",
          "",
          "[Added Lines]",
          "115:     assert(output.replaceAll(\"\\\\[plan_id=\\\\d+\\\\]\", \"[plan_id=x]\").contains(",
          "116:       s\"\"\"== BroadcastExchange $hashedModeString, [plan_id=x] ==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2707a5ab5225cd24f5ca2bfee024d04f44904f80",
      "candidate_info": {
        "commit_hash": "2707a5ab5225cd24f5ca2bfee024d04f44904f80",
        "repo": "apache/spark",
        "commit_url": "https://github.com/apache/spark/commit/2707a5ab5225cd24f5ca2bfee024d04f44904f80",
        "files": [
          "resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala"
        ],
        "message": "Revert \"[SPARK-37205][FOLLOWUP] Should call non-static setTokensConf method\"\n\nThis reverts commit 7e2a1827757a8c0e356ab795387f094e81f5f37e.",
        "before_after_code_files": [
          "resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala||resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jack-steven-root/spark/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala||resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala": [
          "File: resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala -> resource-managers/yarn/src/main/scala/org/apache/spark/deploy/yarn/Client.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:           throw new SparkException(s\"Cannot find setTokensConf method in ${amContainer.getClass}.\" +",
          "392:               s\" Please check YARN version and make sure it is 2.9+ or 3.x\")",
          "393:       }",
          "395:     }",
          "396:   }",
          "",
          "[Removed Lines]",
          "394:       setTokensConfMethod.invoke(amContainer, ByteBuffer.wrap(dob.getData))",
          "",
          "[Added Lines]",
          "394:       setTokensConfMethod.invoke(ByteBuffer.wrap(dob.getData))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3ecff34ab6e3f7b0852db7c0b391cefd176e6ca",
      "candidate_info": {
        "commit_hash": "b3ecff34ab6e3f7b0852db7c0b391cefd176e6ca",
        "repo": "apache/spark",
        "commit_url": "https://github.com/apache/spark/commit/b3ecff34ab6e3f7b0852db7c0b391cefd176e6ca",
        "files": [
          "sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala"
        ],
        "message": "[SPARK-34079][SQL][FOLLOW-UP] Revert some changes in InjectRuntimeFilterSuite\n\nTo remove unnecessary changes from `InjectRuntimeFilterSuite` after https://github.com/apache/spark/pull/32298. These are not needed after https://github.com/apache/spark/pull/34929 as the final optimized plan does'n contain any `WithCTE` nodes.\n\nNo need for those changes.\n\nNo.\n\nAdded new test.\n\nCloses #36361 from peter-toth/SPARK-34079-multi-column-scalar-subquery-follow-up-2.\n\nAuthored-by: Peter Toth <peter.toth@gmail.com>\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>\n(cherry picked from commit d05e01d54024e3844f1e48e03bad3fd814b8f6b9)\nSigned-off-by: Wenchen Fan <wenchen@databricks.com>",
        "before_after_code_files": [
          "sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jack-steven-root/spark/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala||sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala": [
          "File: sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala -> sql/core/src/test/scala/org/apache/spark/sql/InjectRuntimeFilterSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.apache.spark.sql.catalyst.expressions.{Alias, BloomFilterMightContain, Literal}",
          "21: import org.apache.spark.sql.catalyst.expressions.aggregate.{AggregateExpression, BloomFilterAggregate}",
          "22: import org.apache.spark.sql.catalyst.plans.LeftSemi",
          "23: import org.apache.spark.sql.catalyst.plans.logical.{Aggregate, Filter, Join, LogicalPlan}",
          "24: import org.apache.spark.sql.internal.SQLConf",
          "25: import org.apache.spark.sql.test.{SharedSparkSession, SQLTestUtils}",
          "26: import org.apache.spark.sql.types.{IntegerType, StructType}",
          "30:   protected override def beforeAll(): Unit = {",
          "31:     super.beforeAll()",
          "",
          "[Removed Lines]",
          "28: class InjectRuntimeFilterSuite extends QueryTest with SQLTestUtils with SharedSparkSession {",
          "",
          "[Added Lines]",
          "22: import org.apache.spark.sql.catalyst.optimizer.MergeScalarSubqueries",
          "25: import org.apache.spark.sql.execution.{ReusedSubqueryExec, SubqueryExec}",
          "26: import org.apache.spark.sql.execution.adaptive.{AdaptiveSparkPlanHelper, AQEPropagateEmptyRelation}",
          "31: class InjectRuntimeFilterSuite extends QueryTest with SQLTestUtils with SharedSparkSession",
          "32:   with AdaptiveSparkPlanHelper {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:     sql(\"analyze table bf4 compute statistics for columns a4, b4, c4, d4, e4, f4\")",
          "202:     sql(\"analyze table bf5part compute statistics for columns a5, b5, c5, d5, e5, f5\")",
          "203:     sql(\"analyze table bf5filtered compute statistics for columns a5, b5, c5, d5, e5, f5\")",
          "204:   }",
          "206:   protected override def afterAll(): Unit = try {",
          "207:     sql(\"DROP TABLE IF EXISTS bf1\")",
          "208:     sql(\"DROP TABLE IF EXISTS bf2\")",
          "209:     sql(\"DROP TABLE IF EXISTS bf3\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     conf.setConfString(SQLConf.OPTIMIZER_EXCLUDED_RULES.key, MergeScalarSubqueries.ruleName)",
          "215:     conf.setConfString(SQLConf.OPTIMIZER_EXCLUDED_RULES.key,",
          "216:       SQLConf.OPTIMIZER_EXCLUDED_RULES.defaultValueString)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:     }",
          "265:   }",
          "277:         }.sum",
          "278:     }.sum",
          "279:     val numMightContains = plan.collect {",
          "280:       case Filter(condition, _) => condition.collect {",
          "281:         case BloomFilterMightContain(_, _) => 1",
          "282:       }.sum",
          "283:     }.sum",
          "285:     numMightContains",
          "286:   }",
          "",
          "[Removed Lines]",
          "269:   def getNumBloomFilters(plan: LogicalPlan, scalarSubqueryCTEMultiplicator: Int = 1): Integer = {",
          "270:     val numBloomFilterAggs = plan.collectWithSubqueries {",
          "271:       case Aggregate(_, aggregateExpressions, _) =>",
          "272:         aggregateExpressions.collect {",
          "273:           case Alias(AggregateExpression(bfAgg: BloomFilterAggregate, _, _, _, _), _) =>",
          "274:             assert(bfAgg.estimatedNumItemsExpression.isInstanceOf[Literal])",
          "275:             assert(bfAgg.numBitsExpression.isInstanceOf[Literal])",
          "276:             1",
          "284:     assert(numBloomFilterAggs == numMightContains * scalarSubqueryCTEMultiplicator)",
          "",
          "[Added Lines]",
          "278:   def getNumBloomFilters(plan: LogicalPlan): Integer = {",
          "279:     val numBloomFilterAggs = plan.collect {",
          "280:       case Filter(condition, _) => condition.collect {",
          "281:         case subquery: org.apache.spark.sql.catalyst.expressions.ScalarSubquery",
          "282:         => subquery.plan.collect {",
          "283:           case Aggregate(_, aggregateExpressions, _) =>",
          "284:             aggregateExpressions.map {",
          "285:               case Alias(AggregateExpression(bfAgg : BloomFilterAggregate, _, _, _, _),",
          "286:               _) =>",
          "287:                 assert(bfAgg.estimatedNumItemsExpression.isInstanceOf[Literal])",
          "288:                 assert(bfAgg.numBitsExpression.isInstanceOf[Literal])",
          "289:                 1",
          "290:             }.sum",
          "292:       }.sum",
          "299:     assert(numBloomFilterAggs == numMightContains)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "385:         planEnabled = sql(query).queryExecution.optimizedPlan",
          "386:         checkAnswer(sql(query), expectedAnswer)",
          "387:       }",
          "389:     }",
          "390:   }",
          "",
          "[Removed Lines]",
          "388:       assert(getNumBloomFilters(planEnabled, 2) == getNumBloomFilters(planDisabled) + 2)",
          "",
          "[Added Lines]",
          "403:       assert(getNumBloomFilters(planEnabled) == getNumBloomFilters(planDisabled) + 2)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "413:           checkAnswer(sql(query), expectedAnswer)",
          "414:         }",
          "415:         if (numFilterThreshold < 3) {",
          "418:         } else {",
          "420:         }",
          "421:       }",
          "422:     }",
          "",
          "[Removed Lines]",
          "416:           assert(getNumBloomFilters(planEnabled, numFilterThreshold) ==",
          "417:             getNumBloomFilters(planDisabled) + numFilterThreshold)",
          "419:           assert(getNumBloomFilters(planEnabled, 2) == getNumBloomFilters(planDisabled) + 2)",
          "",
          "[Added Lines]",
          "431:           assert(getNumBloomFilters(planEnabled) == getNumBloomFilters(planDisabled)",
          "432:             + numFilterThreshold)",
          "434:           assert(getNumBloomFilters(planEnabled) == getNumBloomFilters(planDisabled) + 2)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "535:         \"\"\".stripMargin)",
          "536:     }",
          "537:   }",
          "538: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:   test(\"Merge runtime bloom filters\") {",
          "555:     withSQLConf(SQLConf.RUNTIME_BLOOM_FILTER_APPLICATION_SIDE_SCAN_SIZE_THRESHOLD.key -> \"3000\",",
          "556:       SQLConf.AUTO_BROADCASTJOIN_THRESHOLD.key -> \"2000\",",
          "557:       SQLConf.RUNTIME_FILTER_SEMI_JOIN_REDUCTION_ENABLED.key -> \"false\",",
          "558:       SQLConf.RUNTIME_BLOOM_FILTER_ENABLED.key -> \"true\",",
          "560:       SQLConf.OPTIMIZER_EXCLUDED_RULES.key -> \"\",",
          "561:       SQLConf.ADAPTIVE_OPTIMIZER_EXCLUDED_RULES.key -> AQEPropagateEmptyRelation.ruleName) {",
          "563:       val query = \"select * from bf1 join bf2 on bf1.c1 = bf2.c2 and \" +",
          "564:         \"bf1.b1 = bf2.b2 where bf2.a2 = 62\"",
          "565:       val df = sql(query)",
          "566:       df.collect()",
          "567:       val plan = df.queryExecution.executedPlan",
          "569:       val subqueryIds = collectWithSubqueries(plan) { case s: SubqueryExec => s.id }",
          "570:       val reusedSubqueryIds = collectWithSubqueries(plan) {",
          "571:         case rs: ReusedSubqueryExec => rs.child.id",
          "572:       }",
          "574:       assert(subqueryIds.size == 1, \"Missing or unexpected SubqueryExec in the plan\")",
          "575:       assert(reusedSubqueryIds.size == 1,",
          "576:         \"Missing or unexpected reused ReusedSubqueryExec in the plan\")",
          "577:     }",
          "578:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b023516f11fa7bb8f92ede6ef4463a4f35f1f6b",
      "candidate_info": {
        "commit_hash": "3b023516f11fa7bb8f92ede6ef4463a4f35f1f6b",
        "repo": "apache/spark",
        "commit_url": "https://github.com/apache/spark/commit/3b023516f11fa7bb8f92ede6ef4463a4f35f1f6b",
        "files": [
          "sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala"
        ],
        "message": "[SPARK-39867][SQL][3.3] Fix scala style\n\n### What changes were proposed in this pull request?\n\nfix scala style\n\n### Why are the changes needed?\n\nfix failed test\n\n### Does this PR introduce _any_ user-facing change?\n\nno\n\n### How was this patch tested?\n\npass CI\n\nCloses #37394 from ulysses-you/style.\n\nAuthored-by: ulysses-you <ulyssesyou18@gmail.com>\nSigned-off-by: Hyukjin Kwon <gurwls223@apache.org>",
        "before_after_code_files": [
          "sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala||sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jack-steven-root/spark/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala||sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala": [
          "File: sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala -> sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/optimizer/EliminateSortsSuite.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   test(\"SPARK-33183: remove redundant sort by\") {",
          "117:     val orderedPlan = testRelation.select('a, 'b).orderBy('a.asc, 'b.desc_nullsFirst)",
          "119:     val optimized = Optimize.execute(unnecessaryReordered.analyze)",
          "120:     val correctAnswer = LocalLimit(2, orderedPlan).select('a).analyze",
          "121:     comparePlans(optimized, correctAnswer)",
          "",
          "[Removed Lines]",
          "118:     val unnecessaryReordered = LocalLimit(2, orderedPlan).select('a).sortBy('a.asc, 'b.desc_nullsFirst)",
          "",
          "[Added Lines]",
          "118:     val unnecessaryReordered = LocalLimit(2, orderedPlan).select('a)",
          "119:       .sortBy('a.asc, 'b.desc_nullsFirst)",
          "",
          "---------------"
        ]
      }
    }
  ]
}