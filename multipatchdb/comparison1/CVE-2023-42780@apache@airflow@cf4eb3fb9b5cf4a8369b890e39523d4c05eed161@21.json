{
  "cve_id": "CVE-2023-42780",
  "cve_desc": "Apache Airflow, versions prior to 2.7.2, contains a security vulnerability that allows authenticated users of Airflow to list warnings for all DAGs, even if the user had no permission to see those DAGs. It would reveal the dag_ids and the stack-traces of import errors for those DAGs with import errors.\nUsers of Apache Airflow are advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.\n\n",
  "repo": "apache/airflow",
  "patch_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
  "patch_info": {
    "commit_hash": "cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/cf4eb3fb9b5cf4a8369b890e39523d4c05eed161",
    "files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ],
    "message": "Fix dag warning endpoint permissions (#34355)\n\n* Fix dag warning endpoint permissions\n\n* update the query to have an accurate result for total entries and pagination\n\n* add unit tests\n\n* Update test_dag_warning_endpoint.py\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n\n---------\n\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit 3570bbfbea69e2965f91b9964ce28bc268c68129)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: # under the License.",
      "17: from __future__ import annotations",
      "19: from sqlalchemy import select",
      "20: from sqlalchemy.orm import Session",
      "22: from airflow.api_connexion import security",
      "23: from airflow.api_connexion.parameters import apply_sorting, check_limit, format_parameters",
      "24: from airflow.api_connexion.schemas.dag_warning_schema import (",
      "25:     DagWarningCollection,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: from flask import g",
      "24: from airflow.api_connexion.exceptions import PermissionDenied",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: from airflow.api_connexion.types import APIResponse",
      "29: from airflow.models.dagwarning import DagWarning as DagWarningModel",
      "30: from airflow.security import permissions",
      "31: from airflow.utils.db import get_query_count",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from airflow.utils.airflow_flask_app import get_airflow_app",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "52:     allowed_filter_attrs = [\"dag_id\", \"warning_type\", \"message\", \"timestamp\"]",
      "53:     query = select(DagWarningModel)",
      "54:     if dag_id:",
      "55:         query = query.where(DagWarningModel.dag_id == dag_id)",
      "56:     if warning_type:",
      "57:         query = query.where(DagWarningModel.warning_type == warning_type)",
      "58:     total_entries = get_query_count(query, session=session)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:         if not get_airflow_app().appbuilder.sm.can_read_dag(dag_id, g.user):",
      "59:             raise PermissionDenied(detail=f\"User not allowed to access this DAG: {dag_id}\")",
      "61:     else:",
      "62:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
      "63:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_warning_endpoint.py||tests/api_connexion/endpoints/test_dag_warning_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_warning_endpoint.py -> tests/api_connexion/endpoints/test_dag_warning_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:         app,  # type:ignore",
      "36:         username=\"test\",",
      "37:         role_name=\"Test\",",
      "39:     )",
      "40:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "42:     yield minimal_app_for_api",
      "44:     delete_user(app, username=\"test\")  # type: ignore",
      "45:     delete_user(app, username=\"test_no_permissions\")  # type: ignore",
      "48: class TestBaseDagWarning:",
      "",
      "[Removed Lines]",
      "38:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING)],  # type: ignore",
      "",
      "[Added Lines]",
      "38:         permissions=[",
      "39:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "40:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG),",
      "41:         ],  # type: ignore",
      "44:     create_user(",
      "45:         app,  # type:ignore",
      "46:         username=\"test_with_dag2_read\",",
      "47:         role_name=\"TestWithDag2Read\",",
      "48:         permissions=[",
      "49:             (permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_WARNING),",
      "50:             (permissions.ACTION_CAN_READ, f\"{permissions.RESOURCE_DAG_PREFIX}dag2\"),",
      "51:         ],  # type: ignore",
      "52:     )",
      "58:     delete_user(app, username=\"test_with_dag2_read\")  # type: ignore",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:             \"/api/v1/dagWarnings\", environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"}",
      "148:         )",
      "149:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:     def test_should_raise_403_forbidden_when_user_has_no_dag_read_permission(self):",
      "165:         response = self.client.get(",
      "166:             \"/api/v1/dagWarnings\",",
      "167:             environ_overrides={\"REMOTE_USER\": \"test_with_dag2_read\"},",
      "168:             query_string={\"dag_id\": \"dag1\"},",
      "169:         )",
      "170:         assert response.status_code == 403",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
      "candidate_info": {
        "commit_hash": "b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b0159b2fe3f58d7372ac03138ff94d6ff66bf475",
        "files": [
          "setup.py"
        ],
        "message": "Restrict `astroid` version < 3 (#34658)\n\n(cherry picked from commit 19450e03f534f63399bf5db2df7690fdd47b09c8)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:     \"requests>=2.26.0\",",
          "300: ]",
          "301: doc = [",
          "303:     \"checksumdir\",",
          "304:     # click 8.1.4 and 8.1.5 generate mypy errors due to typing issue in the upstream package:",
          "305:     # https://github.com/pallets/click/issues/2558",
          "",
          "[Removed Lines]",
          "302:     \"astroid>=2.12.3\",",
          "",
          "[Added Lines]",
          "302:     # sphinx-autoapi fails with astroid 3.0, see: https://github.com/readthedocs/sphinx-autoapi/issues/407",
          "303:     # This was fixed in sphinx-autoapi 3.0, however it has requirement sphinx>=6.1, but we stuck on 5.x",
          "304:     \"astroid>=2.12.3, <3.0\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97e53b02dd085d81c2424421d75406d13a78ab84",
      "candidate_info": {
        "commit_hash": "97e53b02dd085d81c2424421d75406d13a78ab84",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/97e53b02dd085d81c2424421d75406d13a78ab84",
        "files": [
          "airflow/cli/commands/pool_command.py",
          "airflow/cli/commands/webserver_command.py",
          "airflow/dag_processing/processor.py",
          "airflow/listeners/listener.py",
          "airflow/models/baseoperator.py",
          "airflow/models/dag.py",
          "airflow/sensors/filesystem.py",
          "airflow/triggers/file.py",
          "airflow/www/extensions/init_jinja_globals.py",
          "airflow/www/fab_security/manager.py",
          "airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/coertions.py"
        ],
        "message": "Simplify conditions on len() (#33454)\n\n(cherry picked from commit e434ae8e4ae7f7940a86c7386245fbaaf1821965)",
        "before_after_code_files": [
          "airflow/cli/commands/pool_command.py||airflow/cli/commands/pool_command.py",
          "airflow/cli/commands/webserver_command.py||airflow/cli/commands/webserver_command.py",
          "airflow/dag_processing/processor.py||airflow/dag_processing/processor.py",
          "airflow/listeners/listener.py||airflow/listeners/listener.py",
          "airflow/models/baseoperator.py||airflow/models/baseoperator.py",
          "airflow/models/dag.py||airflow/models/dag.py",
          "airflow/sensors/filesystem.py||airflow/sensors/filesystem.py",
          "airflow/triggers/file.py||airflow/triggers/file.py",
          "airflow/www/extensions/init_jinja_globals.py||airflow/www/extensions/init_jinja_globals.py",
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py",
          "airflow/www/views.py||airflow/www/views.py",
          "dev/breeze/src/airflow_breeze/utils/coertions.py||dev/breeze/src/airflow_breeze/utils/coertions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/34775"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/cli/commands/pool_command.py||airflow/cli/commands/pool_command.py": [
          "File: airflow/cli/commands/pool_command.py -> airflow/cli/commands/pool_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     if not os.path.exists(args.file):",
          "98:         raise SystemExit(f\"Missing pools file {args.file}\")",
          "99:     pools, failed = pool_import_helper(args.file)",
          "101:         raise SystemExit(f\"Failed to update pool(s): {', '.join(failed)}\")",
          "102:     print(f\"Uploaded {len(pools)} pool(s)\")",
          "",
          "[Removed Lines]",
          "100:     if len(failed) > 0:",
          "",
          "[Added Lines]",
          "100:     if failed:",
          "",
          "---------------"
        ],
        "airflow/cli/commands/webserver_command.py||airflow/cli/commands/webserver_command.py": [
          "File: airflow/cli/commands/webserver_command.py -> airflow/cli/commands/webserver_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         def ready_prefix_on_cmdline(proc):",
          "139:             try:",
          "140:                 cmdline = proc.cmdline()",
          "142:                     return settings.GUNICORN_WORKER_READY_PREFIX in cmdline[0]",
          "143:             except psutil.NoSuchProcess:",
          "144:                 pass",
          "",
          "[Removed Lines]",
          "141:                 if len(cmdline) > 0:",
          "",
          "[Added Lines]",
          "141:                 if cmdline:",
          "",
          "---------------"
        ],
        "airflow/dag_processing/processor.py||airflow/dag_processing/processor.py": [
          "File: airflow/dag_processing/processor.py -> airflow/dag_processing/processor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:             Stats.incr(\"dag_file_refresh_error\", 1, 1, tags={\"file_path\": file_path})",
          "836:             return 0, 0",
          "839:             self.log.info(\"DAG(s) %s retrieved from %s\", dagbag.dags.keys(), file_path)",
          "840:         else:",
          "841:             self.log.warning(\"No viable dags retrieved from %s\", file_path)",
          "",
          "[Removed Lines]",
          "838:         if len(dagbag.dags) > 0:",
          "",
          "[Added Lines]",
          "838:         if dagbag.dags:",
          "",
          "---------------"
        ],
        "airflow/listeners/listener.py||airflow/listeners/listener.py": [
          "File: airflow/listeners/listener.py -> airflow/listeners/listener.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     @property",
          "48:     def has_listeners(self) -> bool:",
          "51:     @property",
          "52:     def hook(self) -> _HookRelay:",
          "",
          "[Removed Lines]",
          "49:         return len(self.pm.get_plugins()) > 0",
          "",
          "[Added Lines]",
          "49:         return bool(self.pm.get_plugins())",
          "",
          "---------------"
        ],
        "airflow/models/baseoperator.py||airflow/models/baseoperator.py": [
          "File: airflow/models/baseoperator.py -> airflow/models/baseoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:             from airflow.models.dag import DagContext",
          "392:             from airflow.utils.task_group import TaskGroupContext",
          "395:                 raise AirflowException(\"Use keyword arguments when initializing operators\")",
          "397:             instantiated_from_mapped = kwargs.pop(",
          "",
          "[Removed Lines]",
          "394:             if len(args) > 0:",
          "",
          "[Added Lines]",
          "394:             if args:",
          "",
          "---------------"
        ],
        "airflow/models/dag.py||airflow/models/dag.py": [
          "File: airflow/models/dag.py -> airflow/models/dag.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1591:             .limit(num)",
          "1592:         ).all()",
          "1595:             return self.get_task_instances(start_date=base_date, end_date=base_date, session=session)",
          "1597:         min_date: datetime | None = execution_dates[-1]._mapping.get(",
          "",
          "[Removed Lines]",
          "1594:         if len(execution_dates) == 0:",
          "",
          "[Added Lines]",
          "1594:         if not execution_dates:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3155:         :param active_dag_ids: list of DAG IDs that are active",
          "3156:         :return: None",
          "3157:         \"\"\"",
          "3159:             return",
          "3160:         for dag in session.scalars(select(DagModel).where(~DagModel.dag_id.in_(active_dag_ids))).all():",
          "3161:             dag.is_active = False",
          "",
          "[Removed Lines]",
          "3158:         if len(active_dag_ids) == 0:",
          "",
          "[Added Lines]",
          "3158:         if not active_dag_ids:",
          "",
          "---------------"
        ],
        "airflow/sensors/filesystem.py||airflow/sensors/filesystem.py": [
          "File: airflow/sensors/filesystem.py -> airflow/sensors/filesystem.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:                 return True",
          "72:             for _, _, files in os.walk(path):",
          "74:                     return True",
          "75:         return False",
          "",
          "[Removed Lines]",
          "73:                 if len(files) > 0:",
          "",
          "[Added Lines]",
          "73:                 if files:",
          "",
          "---------------"
        ],
        "airflow/triggers/file.py||airflow/triggers/file.py": [
          "File: airflow/triggers/file.py -> airflow/triggers/file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                     self.log.info(\"Found File %s last modified: %s\", str(path), str(mod_time))",
          "69:                     yield TriggerEvent(True)",
          "70:                 for _, _, files in os.walk(self.filepath):",
          "72:                         yield TriggerEvent(True)",
          "73:             await asyncio.sleep(self.poll_interval)",
          "",
          "[Removed Lines]",
          "71:                     if len(files) > 0:",
          "",
          "[Added Lines]",
          "71:                     if files:",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_jinja_globals.py||airflow/www/extensions/init_jinja_globals.py": [
          "File: airflow/www/extensions/init_jinja_globals.py -> airflow/www/extensions/init_jinja_globals.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         }",
          "76:         backends = conf.get(\"api\", \"auth_backends\")",
          "78:             extra_globals[\"rest_api_enabled\"] = True",
          "80:         if \"analytics_tool\" in conf.getsection(\"webserver\"):",
          "",
          "[Removed Lines]",
          "77:         if len(backends) > 0 and backends[0] != \"airflow.api.auth.backend.deny_all\":",
          "",
          "[Added Lines]",
          "77:         if backends and backends[0] != \"airflow.api.auth.backend.deny_all\":",
          "",
          "---------------"
        ],
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:             self.auth_ldap_lastname_field,",
          "756:             self.auth_ldap_email_field,",
          "757:         ]",
          "759:             request_fields.append(self.auth_ldap_group_field)",
          "761:         # perform the LDAP search",
          "",
          "[Removed Lines]",
          "758:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "758:         if self.auth_roles_mapping:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795:         user_role_objects = set()",
          "797:         # apply AUTH_ROLES_MAPPING",
          "799:             user_role_keys = self.ldap_extract_list(user_attributes, self.auth_ldap_group_field)",
          "800:             user_role_objects.update(self.get_roles_from_keys(user_role_keys))",
          "",
          "[Removed Lines]",
          "798:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "798:         if self.auth_roles_mapping:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:         user_role_objects = set()",
          "1088:         # apply AUTH_ROLES_MAPPING",
          "1090:             user_role_keys = userinfo.get(\"role_keys\", [])",
          "1091:             user_role_objects.update(self.get_roles_from_keys(user_role_keys))",
          "",
          "[Removed Lines]",
          "1089:         if len(self.auth_roles_mapping) > 0:",
          "",
          "[Added Lines]",
          "1089:         if self.auth_roles_mapping:",
          "",
          "---------------"
        ],
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3862:         for dag, dependencies in SerializedDagModel.get_dag_dependencies().items():",
          "3863:             dag_node_id = f\"dag:{dag}\"",
          "3865:                 for dep in dependencies:",
          "3866:                     if dep.dependency_type == \"dag\" or dep.dependency_type == \"dataset\":",
          "3867:                         nodes_dict[dag_node_id] = node_dict(dag_node_id, dag, \"dag\")",
          "",
          "[Removed Lines]",
          "3864:             if dag_node_id not in nodes_dict and len(dependencies) > 0:",
          "",
          "[Added Lines]",
          "3864:             if dag_node_id not in nodes_dict:",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/utils/coertions.py||dev/breeze/src/airflow_breeze/utils/coertions.py": [
          "File: dev/breeze/src/airflow_breeze/utils/coertions.py -> dev/breeze/src/airflow_breeze/utils/coertions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: def one_or_none_set(iterable: Iterable[bool]) -> bool:",
          "",
          "[Removed Lines]",
          "33:     return sum(1 for i in iterable if i) in (0, 1)",
          "",
          "[Added Lines]",
          "33:     return 0 <= sum(1 for i in iterable if i) <= 1",
          "",
          "---------------"
        ]
      }
    }
  ]
}