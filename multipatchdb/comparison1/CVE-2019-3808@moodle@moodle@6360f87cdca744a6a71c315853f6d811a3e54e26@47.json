{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c55402486bfefe81a1c102f36158de17e1dacd12",
      "candidate_info": {
        "commit_hash": "c55402486bfefe81a1c102f36158de17e1dacd12",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c55402486bfefe81a1c102f36158de17e1dacd12",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.9dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "36: $branch   = '39';                       // This version's branch.",
          "37: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "35: $release  = '3.9dev (Build: 20191220)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2020010300.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "35: $release  = '3.9dev (Build: 20200103)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ba9c635c5852230113db5019403d5e25b92678a",
      "candidate_info": {
        "commit_hash": "7ba9c635c5852230113db5019403d5e25b92678a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7ba9c635c5852230113db5019403d5e25b92678a",
        "files": [
          "admin/tool/analytics/amd/build/potential-contexts.min.js",
          "admin/tool/analytics/amd/build/potential-contexts.min.js.map",
          "admin/tool/analytics/amd/src/potential-contexts.js",
          "admin/tool/analytics/classes/external.php",
          "admin/tool/analytics/classes/output/form/edit_model.php",
          "admin/tool/analytics/classes/output/invalid_analysables.php",
          "admin/tool/analytics/cli/evaluate_model.php",
          "admin/tool/analytics/createmodel.php",
          "admin/tool/analytics/db/services.php",
          "admin/tool/analytics/lang/en/tool_analytics.php",
          "admin/tool/analytics/model.php",
          "admin/tool/analytics/tests/external_test.php",
          "admin/tool/analytics/version.php",
          "analytics/classes/analysis.php",
          "analytics/classes/local/analyser/base.php",
          "analytics/classes/local/analyser/by_course.php",
          "analytics/classes/local/analyser/sitewide.php",
          "analytics/classes/manager.php",
          "analytics/classes/model.php",
          "analytics/tests/manager_test.php",
          "analytics/tests/prediction_test.php",
          "analytics/upgrade.txt",
          "lang/en/analytics.php",
          "lib/classes/analytics/analyser/users.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/tests/analysers_test.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-64739_master' of git://github.com/dmonllao/moodle",
        "before_after_code_files": [
          "admin/tool/analytics/amd/src/potential-contexts.js||admin/tool/analytics/amd/src/potential-contexts.js",
          "admin/tool/analytics/classes/external.php||admin/tool/analytics/classes/external.php",
          "admin/tool/analytics/classes/output/form/edit_model.php||admin/tool/analytics/classes/output/form/edit_model.php",
          "admin/tool/analytics/classes/output/invalid_analysables.php||admin/tool/analytics/classes/output/invalid_analysables.php",
          "admin/tool/analytics/cli/evaluate_model.php||admin/tool/analytics/cli/evaluate_model.php",
          "admin/tool/analytics/createmodel.php||admin/tool/analytics/createmodel.php",
          "admin/tool/analytics/db/services.php||admin/tool/analytics/db/services.php",
          "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php",
          "admin/tool/analytics/model.php||admin/tool/analytics/model.php",
          "admin/tool/analytics/tests/external_test.php||admin/tool/analytics/tests/external_test.php",
          "admin/tool/analytics/version.php||admin/tool/analytics/version.php",
          "analytics/classes/analysis.php||analytics/classes/analysis.php",
          "analytics/classes/local/analyser/base.php||analytics/classes/local/analyser/base.php",
          "analytics/classes/local/analyser/by_course.php||analytics/classes/local/analyser/by_course.php",
          "analytics/classes/local/analyser/sitewide.php||analytics/classes/local/analyser/sitewide.php",
          "analytics/classes/manager.php||analytics/classes/manager.php",
          "analytics/classes/model.php||analytics/classes/model.php",
          "analytics/tests/manager_test.php||analytics/tests/manager_test.php",
          "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php",
          "lang/en/analytics.php||lang/en/analytics.php",
          "lib/classes/analytics/analyser/users.php||lib/classes/analytics/analyser/users.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/tests/analysers_test.php||lib/tests/analysers_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/analytics/amd/src/potential-contexts.js||admin/tool/analytics/amd/src/potential-contexts.js": [
          "File: admin/tool/analytics/amd/src/potential-contexts.js -> admin/tool/analytics/amd/src/potential-contexts.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: define(['jquery', 'core/ajax'], function($, Ajax) {",
          "28:     return /** @alias module:tool_analytics/potential-contexts */ {",
          "30:         processResults: function(selector, results) {",
          "31:             var contexts = [];",
          "32:             if ($.isArray(results)) {",
          "33:                 $.each(results, function(index, context) {",
          "34:                     contexts.push({",
          "35:                         value: context.id,",
          "36:                         label: context.name",
          "37:                     });",
          "38:                 });",
          "39:                 return contexts;",
          "41:             } else {",
          "42:                 return results;",
          "43:             }",
          "44:         },",
          "46:         transport: function(selector, query, success, failure) {",
          "47:             var promise;",
          "49:             let modelid = $(selector).attr('modelid') || null;",
          "50:             promise = Ajax.call([{",
          "51:                 methodname: 'tool_analytics_potential_contexts',",
          "52:                 args: {",
          "53:                     query: query,",
          "54:                     modelid: modelid",
          "55:                 }",
          "56:             }]);",
          "58:             promise[0].then(success).fail(failure);",
          "59:         }",
          "61:     };",
          "63: });",
          "",
          "---------------"
        ],
        "admin/tool/analytics/classes/external.php||admin/tool/analytics/classes/external.php": [
          "File: admin/tool/analytics/classes/external.php -> admin/tool/analytics/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_analytics;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: require_once(\"$CFG->libdir/externallib.php\");",
          "31: use external_api;",
          "32: use external_function_parameters;",
          "33: use external_value;",
          "34: use external_single_structure;",
          "35: use external_multiple_structure;",
          "43: class external extends external_api {",
          "45:     const MAX_CONTEXTS_RETURNED = 100;",
          "53:     public static function potential_contexts_parameters() {",
          "54:         return new external_function_parameters(",
          "55:             array(",
          "56:                 'query' => new external_value(PARAM_NOTAGS, 'The model id', VALUE_DEFAULT),",
          "57:                 'modelid' => new external_value(PARAM_INT, 'The model id', VALUE_DEFAULT)",
          "58:             )",
          "59:         );",
          "60:     }",
          "70:     public static function potential_contexts(?string $query = null, ?int $modelid = null) {",
          "72:         $params = self::validate_parameters(self::potential_contexts_parameters(), ['modelid' => $modelid, 'query' => $query]);",
          "74:         \\core_analytics\\manager::check_can_manage_models();",
          "76:         if ($params['modelid']) {",
          "77:             $model = new \\core_analytics\\model($params['modelid']);",
          "78:             $contexts = ($model->get_analyser(['notimesplitting' => true]))::potential_context_restrictions($params['query']);",
          "79:         } else {",
          "80:             $contexts = \\core_analytics\\manager::get_potential_context_restrictions(null, $params['query']);",
          "81:         }",
          "83:         $contextoptions = [];",
          "84:         $i = 0;",
          "85:         foreach ($contexts as $contextid => $contextname) {",
          "87:             if ($i === self::MAX_CONTEXTS_RETURNED) {",
          "89:                 break;",
          "90:             }",
          "92:             $contextoptions[] = ['id' => $contextid, 'name' => $contextname];",
          "93:             $i++;",
          "94:         }",
          "96:         return $contextoptions;",
          "97:     }",
          "105:     public static function potential_contexts_returns() {",
          "106:         return new external_multiple_structure(",
          "107:             new external_single_structure([",
          "108:                 'id'    => new external_value(PARAM_INT, 'ID of the context'),",
          "109:                 'name'  => new external_value(PARAM_NOTAGS, 'The context name')",
          "110:             ])",
          "111:         );",
          "112:     }",
          "113: }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/classes/output/form/edit_model.php||admin/tool/analytics/classes/output/form/edit_model.php": [
          "File: admin/tool/analytics/classes/output/form/edit_model.php -> admin/tool/analytics/classes/output/form/edit_model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         $mform->addElement('select', 'timesplitting', get_string('timesplittingmethod', 'analytics'), $timesplittings);",
          "106:         $mform->addHelpButton('timesplitting', 'timesplittingmethod', 'analytics');",
          "109:         if (!$this->_customdata['staticmodel']) {",
          "110:             $defaultprocessor = \\core_analytics\\manager::get_predictions_processor_name(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         if (!empty($this->_customdata['supportscontexts'])) {",
          "111:             $options = [",
          "112:                 'ajax' => 'tool_analytics/potential-contexts',",
          "113:                 'multiple' => true,",
          "114:                 'noselectionstring' => get_string('all')",
          "115:             ];",
          "117:             if (!empty($this->_customdata['id'])) {",
          "118:                 $options['modelid'] = $this->_customdata['id'];",
          "119:                 $contexts = $this->load_current_contexts();",
          "120:             } else {",
          "122:                 $contexts = [];",
          "123:             }",
          "125:             $mform->addElement('autocomplete', 'contexts', get_string('contexts', 'tool_analytics'), $contexts, $options);",
          "126:             $mform->setType('contexts', PARAM_INT);",
          "127:             $mform->addHelpButton('contexts', 'contexts', 'tool_analytics');",
          "128:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:     public function validation($data, $files) {",
          "147:         $errors = parent::validation($data, $files);",
          "149:         if (!empty($data['timesplitting'])) {",
          "150:             $timesplittingclass = \\tool_analytics\\output\\helper::option_to_class($data['timesplitting']);",
          "151:             if (\\core_analytics\\manager::is_valid($timesplittingclass, '\\core_analytics\\local\\time_splitting\\base') === false) {",
          "152:                 $errors['timesplitting'] = get_string('errorinvalidtimesplitting', 'analytics');",
          "153:             }",
          "156:             $timesplitting = \\core_analytics\\manager::get_time_splitting($timesplittingclass);",
          "158:             if (!$target->can_use_timesplitting($timesplitting)) {",
          "159:                 $errors['timesplitting'] = get_string('invalidtimesplitting', 'tool_analytics');",
          "160:             }",
          "161:         }",
          "163:         if (!$this->_customdata['staticmodel']) {",
          "164:             if (empty($data['indicators'])) {",
          "165:                 $errors['indicators'] = get_string('errornoindicators', 'analytics');",
          "",
          "[Removed Lines]",
          "155:             $targetclass = \\tool_analytics\\output\\helper::option_to_class($data['target']);",
          "157:             $target = \\core_analytics\\manager::get_target($targetclass);",
          "",
          "[Added Lines]",
          "171:         $targetclass = \\tool_analytics\\output\\helper::option_to_class($data['target']);",
          "172:         $target = \\core_analytics\\manager::get_target($targetclass);",
          "186:         if (!empty($data['contexts'])) {",
          "188:             $analyserclass = $target->get_analyser_class();",
          "189:             if (!$potentialcontexts = $analyserclass::potential_context_restrictions()) {",
          "190:                 $errors['contexts'] = get_string('errornocontextrestrictions', 'analytics');",
          "191:             } else {",
          "194:                 $selectedcontexts = array_flip($data['contexts']);",
          "195:                 $invalidcontexts = array_diff_key($selectedcontexts, $potentialcontexts);",
          "196:                 if (!empty($invalidcontexts)) {",
          "197:                     $errors['contexts'] = get_string('errorinvalidcontexts', 'analytics');",
          "198:                 }",
          "199:             }",
          "200:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:         return $errors;",
          "181:     }",
          "182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:     protected function load_current_contexts() {",
          "228:         $contexts = [];",
          "229:         foreach ($this->_customdata['contexts'] as $context) {",
          "230:             $contexts[$context->id] = $context->get_context_name(true, true);",
          "231:         }",
          "233:         return $contexts;",
          "234:     }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/classes/output/invalid_analysables.php||admin/tool/analytics/classes/output/invalid_analysables.php": [
          "File: admin/tool/analytics/classes/output/invalid_analysables.php -> admin/tool/analytics/classes/output/invalid_analysables.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         $offset = $this->page * $this->perpage;",
          "81:         $skipped = 0;",
          "82:         $enoughresults = false;",
          "",
          "[Removed Lines]",
          "79:         $analysables = $this->model->get_analyser(['notimesplitting' => true])->get_analysables_iterator();",
          "",
          "[Added Lines]",
          "79:         $contexts = $this->model->get_contexts();",
          "80:         $analysables = $this->model->get_analyser(['notimesplitting' => true])->get_analysables_iterator(null, $contexts);",
          "",
          "---------------"
        ],
        "admin/tool/analytics/cli/evaluate_model.php||admin/tool/analytics/cli/evaluate_model.php": [
          "File: admin/tool/analytics/cli/evaluate_model.php -> admin/tool/analytics/cli/evaluate_model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: --list                 List models",
          "35: --non-interactive      Not interactive questions",
          "36: --analysisinterval     Restrict the evaluation to 1 single analysis interval (Optional)",
          "38: --mode                 'configuration' or 'trainedmodel'. You can only use mode=trainedmodel when the trained\" .",
          "39:     \" model was imported\" . \"",
          "40: --reuse-prev-analysed  Reuse recently analysed courses instead of analysing the whole site. Set it to false while\" .",
          "",
          "[Removed Lines]",
          "37: --filter               Analyser dependant. e.g. A courseid would evaluate the model using a single course (Optional)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: -h, --help             Print out this help",
          "44: Example:",
          "46: \";",
          "",
          "[Removed Lines]",
          "45: \\$ php admin/tool/analytics/cli/evaluate_model.php --modelid=1 --analysisinterval='\\\\core\\\\analytics\\\\time_splitting\\\\quarters' --filter=123,321",
          "",
          "[Added Lines]",
          "44: \\$ php admin/tool/analytics/cli/evaluate_model.php --modelid=1 --analysisinterval='\\\\core\\\\analytics\\\\time_splitting\\\\quarters'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         'mode'                  => 'configuration',",
          "56:         'reuse-prev-analysed'   => true,",
          "57:         'non-interactive'       => false,",
          "59:     ),",
          "60:     array(",
          "61:         'h' => 'help',",
          "",
          "[Removed Lines]",
          "58:         'filter'                => false",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:     exit(0);",
          "84: }",
          "91: if ($options['mode'] !== 'configuration' && $options['mode'] !== 'trainedmodel') {",
          "92:     cli_error('Error: The provided mode is not supported');",
          "93: }",
          "",
          "[Removed Lines]",
          "87: if ($options['filter'] !== false) {",
          "88:     $options['filter'] = explode(',', $options['filter']);",
          "89: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110: $renderer = $PAGE->get_renderer('tool_analytics');",
          "112: $analyseroptions = array(",
          "114:     'timesplitting' => $options['analysisinterval'],",
          "115:     'reuseprevanalysed' => $options['reuse-prev-analysed'],",
          "116:     'mode' => $options['mode'],",
          "",
          "[Removed Lines]",
          "113:     'filter' => $options['filter'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "admin/tool/analytics/createmodel.php||admin/tool/analytics/createmodel.php": [
          "File: admin/tool/analytics/createmodel.php -> admin/tool/analytics/createmodel.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     'indicators' => \\core_analytics\\manager::get_all_indicators(),",
          "53:     'timesplittings' => \\core_analytics\\manager::get_all_time_splittings(),",
          "54:     'predictionprocessors' => \\core_analytics\\manager::get_all_prediction_processors(),",
          "55: );",
          "56: $mform = new \\tool_analytics\\output\\form\\edit_model(null, $customdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     'supportscontexts' => true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         $indicators = array_diff_key($indicators, $invalidindicators);",
          "87:     }",
          "92:     $message = '';",
          "93:     $messagetype = \\core\\output\\notification::NOTIFY_SUCCESS;",
          "",
          "[Removed Lines]",
          "90:     $model->update($data->enabled, $indicators, $timesplitting, $predictionsprocessor);",
          "",
          "[Added Lines]",
          "93:     $model->update($data->enabled, $indicators, $timesplitting, $predictionsprocessor, $data->contexts);",
          "",
          "---------------"
        ],
        "admin/tool/analytics/db/services.php||admin/tool/analytics/db/services.php": [
          "File: admin/tool/analytics/db/services.php -> admin/tool/analytics/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $functions = array(",
          "29:     'tool_analytics_potential_contexts' => array(",
          "30:         'classname'   => 'tool_analytics\\external',",
          "31:         'methodname'  => 'potential_contexts',",
          "32:         'description' => 'Retrieve the list of potential contexts for a model.',",
          "33:         'type'        => 'read',",
          "34:         'ajax'          => true,",
          "35:         'services'    => array(MOODLE_OFFICIAL_MOBILE_SERVICE)",
          "36:     ),",
          "37: );",
          "",
          "---------------"
        ],
        "admin/tool/analytics/lang/en/tool_analytics.php||admin/tool/analytics/lang/en/tool_analytics.php": [
          "File: admin/tool/analytics/lang/en/tool_analytics.php -> admin/tool/analytics/lang/en/tool_analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: $string['componentcore'] = 'Core';",
          "46: $string['componentselect'] = 'Select all models provided by the component \\'{$a}\\'';",
          "47: $string['componentselectnone'] = 'Unselect all';",
          "48: $string['createmodel'] = 'Create model';",
          "49: $string['currenttimesplitting'] = 'Current analysis interval';",
          "50: $string['delete'] = 'Delete';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: $string['contexts'] = 'Contexts';",
          "49: $string['contexts_help'] = 'The model will be limited to this set of contexts. No context restrictions will be applied if no contexts are selected.';",
          "",
          "---------------"
        ],
        "admin/tool/analytics/model.php||admin/tool/analytics/model.php": [
          "File: admin/tool/analytics/model.php -> admin/tool/analytics/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         $invalidcurrenttimesplitting = $model->invalid_timesplitting_selected();",
          "124:         $potentialtimesplittings = $model->get_potential_timesplittings();",
          "126:         $customdata = array(",
          "127:             'id' => $model->get_id(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:         $analyser = $model->get_analyser();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:             'targetname' => $model->get_target()->get_name(),",
          "133:             'indicators' => $model->get_potential_indicators(),",
          "134:             'timesplittings' => $potentialtimesplittings,",
          "136:         );",
          "137:         $mform = new \\tool_analytics\\output\\form\\edit_model(null, $customdata);",
          "",
          "[Removed Lines]",
          "135:             'predictionprocessors' => \\core_analytics\\manager::get_all_prediction_processors()",
          "",
          "[Added Lines]",
          "136:             'predictionprocessors' => \\core_analytics\\manager::get_all_prediction_processors(),",
          "137:             'supportscontexts' => ($analyser)::context_restriction_support(),",
          "138:             'contexts' => $model->get_contexts(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:                 $predictionsprocessor = false;",
          "158:             }",
          "161:             redirect($returnurl);",
          "162:         }",
          "",
          "[Removed Lines]",
          "160:             $model->update($data->enabled, $indicators, $timesplitting, $predictionsprocessor);",
          "",
          "[Added Lines]",
          "163:             $model->update($data->enabled, $indicators, $timesplitting, $predictionsprocessor, $data->contexts);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:         $callable = array('\\tool_analytics\\output\\helper', 'class_to_option');",
          "169:         $modelobj->indicators = array_map($callable, json_decode($modelobj->indicators));",
          "170:         $modelobj->timesplitting = \\tool_analytics\\output\\helper::class_to_option($modelobj->timesplitting);",
          "171:         $modelobj->predictionsprocessor = \\tool_analytics\\output\\helper::class_to_option($modelobj->predictionsprocessor);",
          "172:         $mform->set_data($modelobj);",
          "173:         $mform->display();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:         if ($modelobj->contextids) {",
          "175:             $modelobj->contexts = array_map($callable, json_decode($modelobj->contextids));",
          "176:         }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/tests/external_test.php||admin/tool/analytics/tests/external_test.php": [
          "File: admin/tool/analytics/tests/external_test.php -> admin/tool/analytics/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: global $CFG;",
          "31: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "32: require_once(__DIR__ . '/../../../../analytics/tests/fixtures/test_indicator_max.php');",
          "33: require_once(__DIR__ . '/../../../../analytics/tests/fixtures/test_target_course_level_shortname.php');",
          "44: class tool_analytics_external_testcase extends externallib_advanced_testcase {",
          "49:     public function test_potential_contexts() {",
          "50:         $this->resetAfterTest();",
          "52:         $this->setAdminUser();",
          "55:         $this->assertCount(1, \\tool_analytics\\external::potential_contexts());",
          "58:         $this->assertCount(0, \\tool_analytics\\external::potential_contexts('PHPUnit'));",
          "60:         $target = \\core_analytics\\manager::get_target('test_target_course_level_shortname');",
          "61:         $indicators = ['test_indicator_max' => \\core_analytics\\manager::get_indicator('test_indicator_max')];",
          "62:         $model = \\core_analytics\\model::create($target, $indicators);",
          "64:         $this->assertCount(1, \\tool_analytics\\external::potential_contexts(null, $model->get_id()));",
          "65:     }",
          "72:     public function test_potential_contexts_no_manager() {",
          "73:         $this->resetAfterTest();",
          "75:         $user = $this->getDataGenerator()->create_user();",
          "76:         $this->setUser($user);",
          "78:         $this->assertCount(2, \\tool_analytics\\external::potential_contexts());",
          "79:     }",
          "80: }",
          "",
          "---------------"
        ],
        "admin/tool/analytics/version.php||admin/tool/analytics/version.php": [
          "File: admin/tool/analytics/version.php -> admin/tool/analytics/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2019051100; // Requires this Moodle version.",
          "29: $plugin->component = 'tool_analytics'; // Full name of the plugin (used for diagnostics).",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2019052000; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2019052002; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ],
        "analytics/classes/analysis.php||analytics/classes/analysis.php": [
          "File: analytics/classes/analysis.php -> analytics/classes/analysis.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         $options = $this->analyser->get_options();",
          "",
          "[Removed Lines]",
          "80:     public function run() {",
          "",
          "[Added Lines]",
          "81:     public function run(array $contexts = []) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:         } else {",
          "90:             $action = 'prediction';",
          "91:         }",
          "94:         $processedanalysables = $this->get_processed_analysables();",
          "",
          "[Removed Lines]",
          "92:         $analysables = $this->analyser->get_analysables_iterator($action);",
          "",
          "[Added Lines]",
          "93:         $analysables = $this->analyser->get_analysables_iterator($action, $contexts);",
          "",
          "---------------"
        ],
        "analytics/classes/local/analyser/base.php||analytics/classes/local/analyser/base.php": [
          "File: analytics/classes/local/analyser/base.php -> analytics/classes/local/analyser/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         debugging('Please overwrite get_analysables_iterator with your own implementation, we only keep this default",
          "139:             implementation for backwards compatibility purposes with get_analysables(). note that $action param will",
          "",
          "[Removed Lines]",
          "136:     public function get_analysables_iterator(?string $action = null) {",
          "",
          "[Added Lines]",
          "137:     public function get_analysables_iterator(?string $action = null, array $contexts = []) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         $result = new \\core_analytics\\local\\analysis\\result_file($this->get_modelid(), true, $this->get_options());",
          "274:         $analysis = new \\core_analytics\\analysis($this, true, $result);",
          "276:         return $result->get();",
          "277:     }",
          "286:         $result = new \\core_analytics\\local\\analysis\\result_file($this->get_modelid(), false, $this->get_options());",
          "287:         $analysis = new \\core_analytics\\analysis($this, false, $result);",
          "289:         return $result->get();",
          "290:     }",
          "298:         $result = new \\core_analytics\\local\\analysis\\result_array($this->get_modelid(), false, $this->get_options());",
          "299:         $analysis = new \\core_analytics\\analysis($this, false, $result);",
          "301:         return $result->get();",
          "302:     }",
          "",
          "[Removed Lines]",
          "271:     public function get_labelled_data() {",
          "275:         $analysis->run();",
          "284:     public function get_unlabelled_data() {",
          "288:         $analysis->run();",
          "296:     public function get_static_data() {",
          "300:         $analysis->run();",
          "",
          "[Added Lines]",
          "273:     public function get_labelled_data(array $contexts = []) {",
          "277:         $analysis->run($contexts);",
          "287:     public function get_unlabelled_data(array $contexts = []) {",
          "291:         $analysis->run($contexts);",
          "301:     public function get_static_data(array $contexts = []) {",
          "305:         $analysis->run($contexts);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:         return false;",
          "423:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:     public static function context_restriction_support(): array {",
          "438:         return [];",
          "439:     }",
          "454:     public static function potential_context_restrictions(string $query = null) {",
          "455:         return \\core_analytics\\manager::get_potential_context_restrictions(static::context_restriction_support(), $query);",
          "456:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:         if (!$tablealias) {",
          "439:             $tablealias = 'analysable';",
          "",
          "[Removed Lines]",
          "436:     protected function get_iterator_sql(string $tablename, int $contextlevel, ?string $action = null, ?string $tablealias = null) {",
          "",
          "[Added Lines]",
          "470:     protected function get_iterator_sql(string $tablename, int $contextlevel, ?string $action = null, ?string $tablealias = null,",
          "471:             array $contexts = []) {",
          "472:         global $DB;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452:             $params = $params + ['action' => $action];",
          "453:         }",
          "457:         $sql = 'SELECT ' . $select . '",
          "458:                   FROM {' . $tablename . '} ' . $tablealias . '",
          "459:                   ' . $usedanalysablesjoin . '",
          "463:         return [$sql, $params];",
          "464:     }",
          "",
          "[Removed Lines]",
          "460:                   JOIN {context} ctx ON (ctx.contextlevel = :contextlevel AND ctx.instanceid = ' . $tablealias . '.id)",
          "461:                   WHERE 1 = 1';",
          "",
          "[Added Lines]",
          "494:                   JOIN {context} ctx ON (ctx.contextlevel = :contextlevel AND ctx.instanceid = ' . $tablealias . '.id) ';",
          "496:         if (!$contexts) {",
          "499:             $sql .= 'WHERE 1 = 1';",
          "500:         } else {",
          "502:             $contextsqls = [];",
          "503:             foreach ($contexts as $context) {",
          "504:                 $paramkey1 = 'paramctxlike' . $context->id;",
          "505:                 $paramkey2 = 'paramctxeq' . $context->id;",
          "506:                 $contextsqls[] = $DB->sql_like('ctx.path', ':' . $paramkey1);",
          "507:                 $contextsqls[] = 'ctx.path = :' . $paramkey2;",
          "510:                 $params[$paramkey1] = $context->path . '/%';",
          "511:                 $params[$paramkey2] = $context->path;",
          "512:             }",
          "513:             $sql .= 'WHERE (' . implode(' OR ', $contextsqls) . ')';",
          "514:         }",
          "",
          "---------------"
        ],
        "analytics/classes/local/analyser/by_course.php||analytics/classes/local/analyser/by_course.php": [
          "File: analytics/classes/local/analyser/by_course.php -> analytics/classes/local/analyser/by_course.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         global $DB;",
          "61:         $ordersql = $this->order_sql('sortorder', 'ASC', 'c');",
          "",
          "[Removed Lines]",
          "44:     public function get_analysables_iterator(?string $action = null) {",
          "47:         list($sql, $params) = $this->get_iterator_sql('course', CONTEXT_COURSE, $action, 'c');",
          "50:         if (!empty($this->options['filter'])) {",
          "51:             $courses = array();",
          "52:             foreach ($this->options['filter'] as $courseid) {",
          "53:                 $courses[$courseid] = intval($courseid);",
          "54:             }",
          "56:             list($coursesql, $courseparams) = $DB->get_in_or_equal($courses, SQL_PARAMS_NAMED);",
          "57:             $sql .= \" AND c.id $coursesql\";",
          "58:             $params = $params + $courseparams;",
          "59:         }",
          "",
          "[Added Lines]",
          "45:     public function get_analysables_iterator(?string $action = null, array $contexts = []) {",
          "48:         list($sql, $params) = $this->get_iterator_sql('course', CONTEXT_COURSE, $action, 'c', $contexts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:             return \\core_analytics\\course::instance($record, $context);",
          "77:         });",
          "78:     }",
          "",
          "[Removed Lines]",
          "79: }",
          "",
          "[Added Lines]",
          "75:         return [CONTEXT_COURSE, CONTEXT_COURSECAT];",
          "76:     }",
          "77: }",
          "",
          "---------------"
        ],
        "analytics/classes/local/analyser/sitewide.php||analytics/classes/local/analyser/sitewide.php": [
          "File: analytics/classes/local/analyser/sitewide.php -> analytics/classes/local/analyser/sitewide.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:         return new \\ArrayIterator([new \\core_analytics\\site()]);",
          "47:     }",
          "",
          "[Removed Lines]",
          "44:     public function get_analysables_iterator(?string $action = null) {",
          "",
          "[Added Lines]",
          "45:     public function get_analysables_iterator(?string $action = null, array $contexts = []) {",
          "",
          "---------------"
        ],
        "analytics/classes/manager.php||analytics/classes/manager.php": [
          "File: analytics/classes/manager.php -> analytics/classes/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "914:         return [$target, $indicators];",
          "915:     }",
          "916: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     public static function get_potential_context_restrictions(?array $contextlevels = null, string $query = null) {",
          "928:         global $DB;",
          "930:         if (empty($contextlevels) && !is_null($contextlevels)) {",
          "931:             return false;",
          "932:         }",
          "934:         if (!is_null($contextlevels)) {",
          "935:             foreach ($contextlevels as $contextlevel) {",
          "936:                 if ($contextlevel !== CONTEXT_COURSE && $contextlevel !== CONTEXT_COURSECAT) {",
          "937:                     throw new \\coding_exception('Only CONTEXT_COURSE and CONTEXT_COURSECAT are supported at the moment.');",
          "938:                 }",
          "939:             }",
          "940:         }",
          "942:         $contexts = [];",
          "946:         $contextsystem = \\context_system::instance();",
          "947:         if (is_null($contextlevels) || in_array(CONTEXT_COURSECAT, $contextlevels)) {",
          "949:             $sql = \"SELECT cc.id, cc.name, ctx.id AS contextid",
          "950:                       FROM {course_categories} cc",
          "951:                       JOIN {context} ctx ON ctx.contextlevel = :ctxlevel AND ctx.instanceid = cc.id\";",
          "952:             $params = ['ctxlevel' => CONTEXT_COURSECAT];",
          "954:             if ($query) {",
          "955:                 $sql .= \" WHERE \" . $DB->sql_like('cc.name', ':query', false, false);",
          "956:                 $params['query'] = '%' . $query . '%';",
          "957:             }",
          "959:             $coursecats = $DB->get_recordset_sql($sql, $params);",
          "960:             foreach ($coursecats as $record) {",
          "961:                 $contexts[$record->contextid] = get_string('category') . ': ' .",
          "962:                     format_string($record->name, true, array('context' => $contextsystem));",
          "963:             }",
          "964:             $coursecats->close();",
          "965:         }",
          "967:         if (is_null($contextlevels) || in_array(CONTEXT_COURSE, $contextlevels)) {",
          "969:             $sql = \"SELECT c.id, c.shortname, ctx.id AS contextid",
          "970:                       FROM {course} c",
          "971:                       JOIN {context} ctx ON ctx.contextlevel = :ctxlevel AND ctx.instanceid = c.id",
          "972:                       WHERE c.id != :siteid\";",
          "973:             $params = ['ctxlevel' => CONTEXT_COURSE, 'siteid' => SITEID];",
          "975:             if ($query) {",
          "976:                 $sql .= ' AND (' . $DB->sql_like('c.fullname', ':query1', false, false) . ' OR ' .",
          "977:                     $DB->sql_like('c.shortname', ':query2', false, false) . ')';",
          "978:                 $params['query1'] = '%' . $query . '%';",
          "979:                 $params['query2'] = '%' . $query . '%';",
          "980:             }",
          "982:             $courses = $DB->get_recordset_sql($sql, $params);",
          "983:             foreach ($courses as $record) {",
          "984:                 $contexts[$record->contextid] = get_string('course') . ': ' .",
          "985:                     format_string($record->shortname, true, array('context' => $contextsystem));",
          "986:             }",
          "987:             $courses->close();",
          "988:         }",
          "990:         return $contexts;",
          "991:     }",
          "",
          "---------------"
        ],
        "analytics/classes/model.php||analytics/classes/model.php": [
          "File: analytics/classes/model.php -> analytics/classes/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     protected $indicators = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:     protected $contexts = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "465:         global $USER, $DB;",
          "467:         \\core_analytics\\manager::check_can_manage_models();",
          "",
          "[Removed Lines]",
          "464:     public function update($enabled, $indicators = false, $timesplittingid = '', $predictionsprocessor = false) {",
          "",
          "[Added Lines]",
          "470:     public function update($enabled, $indicators = false, $timesplittingid = '', $predictionsprocessor = false,",
          "471:             $contextids = false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:             $predictionsprocessor = $this->model->predictionsprocessor;",
          "487:         }",
          "489:         if ($this->model->timesplitting !== $timesplittingid ||",
          "490:                 $this->model->indicators !== $indicatorsstr ||",
          "491:                 $this->model->predictionsprocessor !== $predictionsprocessor) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:         if ($contextids !== false) {",
          "497:             $contextsstr = json_encode($contextids);",
          "500:             $this->contexts = null;",
          "501:         } else {",
          "502:             $contextsstr = $this->model->contextids;",
          "503:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514:         $this->model->indicators = $indicatorsstr;",
          "515:         $this->model->timesplitting = $timesplittingid;",
          "516:         $this->model->predictionsprocessor = $predictionsprocessor;",
          "517:         $this->model->timemodified = $now;",
          "518:         $this->model->usermodified = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:         $this->model->contextids = $contextsstr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "604:         $predictor = $this->get_predictions_processor();",
          "609:         if (empty($datasets)) {",
          "",
          "[Removed Lines]",
          "606:         $datasets = $this->get_analyser()->get_labelled_data();",
          "",
          "[Added Lines]",
          "623:         $datasets = $this->get_analyser()->get_labelled_data($this->get_contexts());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "696:         $predictor = $this->get_predictions_processor();",
          "701:         if (empty($datasets) || empty($datasets[$this->model->timesplitting])) {",
          "",
          "[Removed Lines]",
          "698:         $datasets = $this->get_analyser()->get_labelled_data();",
          "",
          "[Added Lines]",
          "715:         $datasets = $this->get_analyser()->get_labelled_data($this->get_contexts());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "767:             $predictor = $this->get_predictions_processor();",
          "772:             if (empty($samplesdata) || empty($samplesdata[$this->model->timesplitting])) {",
          "",
          "[Removed Lines]",
          "769:             $samplesdata = $this->get_analyser()->get_unlabelled_data();",
          "",
          "[Added Lines]",
          "786:             $samplesdata = $this->get_analyser()->get_unlabelled_data($this->get_contexts());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "802:         } else {",
          "807:             if (empty($indicatorcalculations) || empty($indicatorcalculations[$this->model->timesplitting])) {",
          "",
          "[Removed Lines]",
          "805:             $indicatorcalculations = $this->get_analyser()->get_static_data();",
          "",
          "[Added Lines]",
          "822:             $indicatorcalculations = $this->get_analyser()->get_static_data($this->get_contexts());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1956:         return [$allsampleids, $allsamplesdata];",
          "1957:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1981:     public function get_contexts() {",
          "1982:         if ($this->contexts !== null) {",
          "1983:             return $this->contexts;",
          "1984:         }",
          "1986:         if (!$this->model->contextids) {",
          "1987:             $this->contexts = [];",
          "1988:             return $this->contexts;",
          "1989:         }",
          "1990:         $contextids = json_decode($this->model->contextids);",
          "1993:         $this->contexts = array_map(function($contextid) {",
          "1994:             return \\context::instance_by_id($contextid, IGNORE_MISSING);",
          "1995:         }, $contextids);",
          "1997:         return $this->contexts;",
          "1998:     }",
          "",
          "---------------"
        ],
        "analytics/tests/manager_test.php||analytics/tests/manager_test.php": [
          "File: analytics/tests/manager_test.php -> analytics/tests/manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "487:         $this->assertNotEmpty($indicators);",
          "488:         $this->assertContainsOnlyInstancesOf(\\core_analytics\\local\\indicator\\base::class, $indicators);",
          "489:     }",
          "490: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     public function test_get_potential_context_restrictions() {",
          "495:         $this->resetAfterTest();",
          "498:         $this->assertFalse(\\core_analytics\\manager::get_potential_context_restrictions([]));",
          "501:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions());",
          "503:         $this->getDataGenerator()->create_course();",
          "504:         $this->getDataGenerator()->create_category();",
          "505:         $this->assertCount(3, \\core_analytics\\manager::get_potential_context_restrictions());",
          "506:         $this->assertCount(3, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSE, CONTEXT_COURSECAT]));",
          "508:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSE]));",
          "509:         $this->assertCount(2, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSECAT]));",
          "511:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSECAT], 'Course category'));",
          "512:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSECAT], 'Course category 1'));",
          "513:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSECAT], 'Miscellaneous'));",
          "514:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSE], 'Test course 1'));",
          "515:         $this->assertCount(1, \\core_analytics\\manager::get_potential_context_restrictions([CONTEXT_COURSE], 'Test course'));",
          "516:     }",
          "",
          "---------------"
        ],
        "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php": [
          "File: analytics/tests/prediction_test.php -> analytics/tests/prediction_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:             array('modelid' => $model->get_id())));",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     public function test_model_contexts() {",
          "133:         global $DB;",
          "135:         $this->resetAfterTest(true);",
          "136:         $this->setAdminuser();",
          "138:         $misc = $DB->get_record('course_categories', ['name' => 'Miscellaneous']);",
          "139:         $miscctx = \\context_coursecat::instance($misc->id);",
          "141:         $category = $this->getDataGenerator()->create_category();",
          "142:         $categoryctx = \\context_coursecat::instance($category->id);",
          "145:         $courseparams = array('shortname' => 'aaaaaa', 'fullname' => 'aaaaaa', 'visible' => 0,",
          "146:             'category' => $category->id);",
          "147:         $course1 = $this->getDataGenerator()->create_course($courseparams);",
          "148:         $course1ctx = \\context_course::instance($course1->id);",
          "149:         $courseparams = array('shortname' => 'bbbbbb', 'fullname' => 'bbbbbb', 'visible' => 0,",
          "150:             'category' => $misc->id);",
          "151:         $course2 = $this->getDataGenerator()->create_course($courseparams);",
          "153:         $model = $this->add_perfect_model('test_static_target_shortname');",
          "156:         $model->update(true, false, '\\core\\analytics\\time_splitting\\no_splitting', false, [$categoryctx->id]);",
          "157:         $this->assertCount(1, $model->predict()->predictions);",
          "160:         $model->update(true, false, false, false, [$categoryctx->id, $miscctx->id]);",
          "163:         $this->assertCount(1, $model->predict()->predictions);",
          "166:         $model->clear();",
          "167:         $this->assertCount(2, $model->predict()->predictions);",
          "170:         $model->update(true, false, '\\core\\analytics\\time_splitting\\no_splitting', false, [$course1ctx->id]);",
          "173:         $result = $model->predict();",
          "174:         $this->assertTrue(empty($result->predictions));",
          "176:         $model->clear();",
          "177:         $this->assertCount(1, $model->predict()->predictions);",
          "178:     }",
          "",
          "---------------"
        ],
        "lang/en/analytics.php||lang/en/analytics.php": [
          "File: lang/en/analytics.php -> lang/en/analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: $string['errorimportversionmismatches'] = 'The version of the following components differs from the version installed on this site: {$a}. You can use the option \\'Ignore version mismatches\\' to ignore these differences.';",
          "47: $string['errorimportmissingclasses'] = 'The following analytics components are not available on this site: {$a->missingclasses}.';",
          "48: $string['errorinvalidindicator'] = 'Invalid {$a} indicator';",
          "49: $string['errorinvalidtarget'] = 'Invalid {$a} target';",
          "50: $string['errorinvalidtimesplitting'] = 'Invalid analysis interval; please ensure you add the fully qualified class name.';",
          "51: $string['errornoexportconfig'] = 'There was a problem exporting the model configuration.';",
          "52: $string['errornoexportconfigrequirements'] = 'Only non-static models with an analysis interval can be exported.';",
          "53: $string['errornoindicators'] = 'This model does not have any indicators.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: $string['errorinvalidcontexts'] = 'Some of the selected contexts can not be used in this target.';",
          "52: $string['errornocontextrestrictions'] = 'The selected target does not support context restrictions';",
          "",
          "---------------"
        ],
        "lib/classes/analytics/analyser/users.php||lib/classes/analytics/analyser/users.php": [
          "File: lib/classes/analytics/analyser/users.php -> lib/classes/analytics/analyser/users.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         global $DB, $CFG;",
          "47:         $siteadmins = explode(',', $CFG->siteadmins);",
          "51:         $sql .= \" AND u.deleted = :deleted AND u.confirmed = :confirmed AND u.suspended = :suspended\";",
          "52:         $params = $params + ['deleted' => 0, 'confirmed' => 1, 'suspended' => 0];",
          "",
          "[Removed Lines]",
          "44:     public function get_analysables_iterator(?string $action = null) {",
          "49:         list($sql, $params) = $this->get_iterator_sql('user', CONTEXT_USER, $action, 'u');",
          "",
          "[Added Lines]",
          "45:     public function get_analysables_iterator(?string $action = null, array $contexts = []) {",
          "50:         list($sql, $params) = $this->get_iterator_sql('user', CONTEXT_USER, $action, 'u', $contexts);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3619:         upgrade_main_savepoint(true, 2019101600.01);",
          "3620:     }",
          "3622:     return true;",
          "3623: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3622:     if ($oldversion < 2019101800.02) {",
          "3625:         $table = new xmldb_table('analytics_models');",
          "3626:         if ($dbman->table_exists($table)) {",
          "3629:             $field = new xmldb_field('contextids', XMLDB_TYPE_TEXT, null, null, null, null, null, 'version');",
          "3632:             if (!$dbman->field_exists($table, $field)) {",
          "3633:                 $dbman->add_field($table, $field);",
          "3634:             }",
          "3635:         }",
          "3638:         upgrade_main_savepoint(true, 2019101800.02);",
          "3639:     }",
          "",
          "---------------"
        ],
        "lib/tests/analysers_test.php||lib/tests/analysers_test.php": [
          "File: lib/tests/analysers_test.php -> lib/tests/analysers_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     public function test_courses_analyser() {",
          "49:         $this->resetAfterTest(true);",
          "54:         $target = new test_target_shortname();",
          "55:         $analyser = new \\core\\analytics\\analyser\\courses(1, $target, [], [], []);",
          "63:         $class = new ReflectionClass('\\core\\analytics\\analyser\\courses');",
          "",
          "[Removed Lines]",
          "51:         $course = $this->getDataGenerator()->create_course();",
          "52:         $coursecontext = \\context_course::instance($course->id);",
          "56:         $analysable = new \\core_analytics\\course($course);",
          "58:         $this->assertInstanceOf('\\core_analytics\\course', $analyser->get_sample_analysable($course->id));",
          "60:         $this->assertInstanceOf('\\context_course', $analyser->sample_access_context($course->id));",
          "",
          "[Added Lines]",
          "51:         $course1 = $this->getDataGenerator()->create_course();",
          "52:         $coursecontext = \\context_course::instance($course1->id);",
          "56:         $analysable = new \\core_analytics\\course($course1);",
          "58:         $this->assertInstanceOf('\\core_analytics\\course', $analyser->get_sample_analysable($course1->id));",
          "60:         $this->assertInstanceOf('\\context_course', $analyser->sample_access_context($course1->id));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         list($sampleids, $samplesdata) = $method->invoke($analyser, $analysable);",
          "67:         $this->assertCount(1, $sampleids);",
          "68:         $sampleid = reset($sampleids);",
          "71:         $this->assertEquals($coursecontext, $samplesdata[$sampleid]['context']);",
          "",
          "[Removed Lines]",
          "69:         $this->assertEquals($course->id, $sampleid);",
          "70:         $this->assertEquals($course->fullname, $samplesdata[$sampleid]['course']->fullname);",
          "",
          "[Added Lines]",
          "69:         $this->assertEquals($course1->id, $sampleid);",
          "70:         $this->assertEquals($course1->fullname, $samplesdata[$sampleid]['course']->fullname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         list($sampleids, $samplesdata) = $analyser->get_samples(array($sampleid));",
          "76:         $this->assertEquals($prevsampledata['context'], $samplesdata[$sampleid]['context']);",
          "77:         $this->assertEquals($prevsampledata['course']->shortname, $samplesdata[$sampleid]['course']->shortname);",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         $category1 = $this->getDataGenerator()->create_category();",
          "81:         $category1context = \\context_coursecat::instance($category1->id);",
          "82:         $category2 = $this->getDataGenerator()->create_category();",
          "83:         $category2context = \\context_coursecat::instance($category2->id);",
          "84:         $course2 = $this->getDataGenerator()->create_course(['category' => $category1->id]);",
          "85:         $course3 = $this->getDataGenerator()->create_course(['category' => $category2->id]);",
          "86:         $this->assertCount(2, $analyser->get_analysables_iterator(false, [$category1context, $category2context]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:         $this->resetAfterTest(true);",
          "136:         $user1 = $this->getDataGenerator()->create_user();",
          "137:         $user2 = $this->getDataGenerator()->create_user();",
          "138:         $user3 = $this->getDataGenerator()->create_user();",
          "145:         $ue1 = $DB->get_record('user_enrolments', array('userid' => $user1->id, 'enrolid' => $enrol->id));",
          "146:         $ue2 = $DB->get_record('user_enrolments', array('userid' => $user2->id, 'enrolid' => $enrol->id));",
          "148:         $target = new test_target_shortname();",
          "149:         $analyser = new \\core\\analytics\\analyser\\student_enrolments(1, $target, [], [], []);",
          "152:         $this->assertInstanceOf('\\core_analytics\\course', $analyser->get_sample_analysable($ue1->id));",
          "153:         $this->assertInstanceOf('\\context_course', $analyser->sample_access_context($ue1->id));",
          "",
          "[Removed Lines]",
          "133:         $course = $this->getDataGenerator()->create_course();",
          "134:         $coursecontext = \\context_course::instance($course->id);",
          "141:         $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'student');",
          "142:         $this->getDataGenerator()->enrol_user($user2->id, $course->id, 'student', 'manual', 0, 0, ENROL_USER_SUSPENDED);",
          "143:         $this->getDataGenerator()->enrol_user($user3->id, $course->id, 'editingteacher');",
          "144:         $enrol = $DB->get_record('enrol', array('courseid' => $course->id, 'enrol' => 'manual'));",
          "150:         $analysable = new \\core_analytics\\course($course);",
          "",
          "[Added Lines]",
          "143:         $course1 = $this->getDataGenerator()->create_course();",
          "144:         $course1context = \\context_course::instance($course1->id);",
          "151:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id, 'student');",
          "152:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id, 'student', 'manual', 0, 0, ENROL_USER_SUSPENDED);",
          "153:         $this->getDataGenerator()->enrol_user($user3->id, $course1->id, 'editingteacher');",
          "154:         $enrol = $DB->get_record('enrol', array('courseid' => $course1->id, 'enrol' => 'manual'));",
          "160:         $analysable = new \\core_analytics\\course($course1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:         $sampleid = $ue1->id;",
          "167:         $this->assertEquals($ue1, $samplesdata[$sampleid]['user_enrolments']);",
          "170:         $this->assertEquals($user1->firstname, $samplesdata[$sampleid]['user']->firstname);",
          "",
          "[Removed Lines]",
          "168:         $this->assertEquals($course->fullname, $samplesdata[$sampleid]['course']->fullname);",
          "169:         $this->assertEquals($coursecontext, $samplesdata[$sampleid]['context']);",
          "",
          "[Added Lines]",
          "178:         $this->assertEquals($course1->fullname, $samplesdata[$sampleid]['course']->fullname);",
          "179:         $this->assertEquals($course1context, $samplesdata[$sampleid]['context']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:         $this->assertEquals($prevsampledata['context'], $samplesdata[$sampleid]['context']);",
          "177:         $this->assertEquals($prevsampledata['course']->shortname, $samplesdata[$sampleid]['course']->shortname);",
          "178:         $this->assertEquals($prevsampledata['user']->firstname, $samplesdata[$sampleid]['user']->firstname);",
          "179:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:         $category1 = $this->getDataGenerator()->create_category();",
          "192:         $category1context = \\context_coursecat::instance($category1->id);",
          "193:         $category2 = $this->getDataGenerator()->create_category();",
          "194:         $category2context = \\context_coursecat::instance($category2->id);",
          "195:         $course2 = $this->getDataGenerator()->create_course(['category' => $category1->id]);",
          "196:         $course3 = $this->getDataGenerator()->create_course(['category' => $category2->id]);",
          "197:         $this->assertCount(2, $analyser->get_analysables_iterator(false, [$category1context, $category2context]));",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019101800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019101800.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93e435b9098b226878b7109475ef7286c4d5af4e",
      "candidate_info": {
        "commit_hash": "93e435b9098b226878b7109475ef7286c4d5af4e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/93e435b9098b226878b7109475ef7286c4d5af4e",
        "files": [
          "lang/en/question.php",
          "lib/classes/event/question_base.php",
          "lib/classes/event/question_category_base.php",
          "lib/classes/event/question_category_created.php",
          "lib/classes/event/question_category_deleted.php",
          "lib/classes/event/question_category_moved.php",
          "lib/classes/event/question_category_updated.php",
          "lib/classes/event/question_category_viewed.php",
          "lib/classes/event/question_created.php",
          "lib/classes/event/question_deleted.php",
          "lib/classes/event/question_moved.php",
          "lib/classes/event/question_previewed.php",
          "lib/classes/event/question_updated.php",
          "lib/classes/event/questions_exported.php",
          "lib/classes/event/questions_imported.php",
          "lib/questionlib.php",
          "question/category.php",
          "question/category_class.php",
          "question/edit.php",
          "question/export.php",
          "question/import.php",
          "question/preview.php",
          "question/tests/events_test.php",
          "question/type/questiontypebase.php",
          "version.php"
        ],
        "message": "MDL-36088 questions: Add new events",
        "before_after_code_files": [
          "lang/en/question.php||lang/en/question.php",
          "lib/classes/event/question_base.php||lib/classes/event/question_base.php",
          "lib/classes/event/question_category_base.php||lib/classes/event/question_category_base.php",
          "lib/classes/event/question_category_created.php||lib/classes/event/question_category_created.php",
          "lib/classes/event/question_category_deleted.php||lib/classes/event/question_category_deleted.php",
          "lib/classes/event/question_category_moved.php||lib/classes/event/question_category_moved.php",
          "lib/classes/event/question_category_updated.php||lib/classes/event/question_category_updated.php",
          "lib/classes/event/question_category_viewed.php||lib/classes/event/question_category_viewed.php",
          "lib/classes/event/question_created.php||lib/classes/event/question_created.php",
          "lib/classes/event/question_deleted.php||lib/classes/event/question_deleted.php",
          "lib/classes/event/question_moved.php||lib/classes/event/question_moved.php",
          "lib/classes/event/question_previewed.php||lib/classes/event/question_previewed.php",
          "lib/classes/event/question_updated.php||lib/classes/event/question_updated.php",
          "lib/classes/event/questions_exported.php||lib/classes/event/questions_exported.php",
          "lib/classes/event/questions_imported.php||lib/classes/event/questions_imported.php",
          "lib/questionlib.php||lib/questionlib.php",
          "question/category.php||question/category.php",
          "question/category_class.php||question/category_class.php",
          "question/edit.php||question/edit.php",
          "question/export.php||question/export.php",
          "question/import.php||question/import.php",
          "question/preview.php||question/preview.php",
          "question/tests/events_test.php||question/tests/events_test.php",
          "question/type/questiontypebase.php||question/type/questiontypebase.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/question.php||lang/en/question.php": [
          "File: lang/en/question.php -> lang/en/question.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: $string['errorsavingcomment'] = 'Error saving the comment for question {$a->name} in the database.';",
          "143: $string['errorupdatingattempt'] = 'Error updating attempt {$a->id} in the database.';",
          "144: $string['eventquestioncategorycreated'] = 'Question category created';",
          "145: $string['export'] = 'Export';",
          "146: $string['exportcategory'] = 'Export category';",
          "147: $string['exportcategory_help'] = 'This setting determines the category from which the exported questions will be taken.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: $string['eventquestioncategorydeleted'] = 'Question category deleted';",
          "146: $string['eventquestioncategorymoved'] = 'Question category moved';",
          "147: $string['eventquestioncategoryupdated'] = 'Question category updated';",
          "148: $string['eventquestioncategoryviewed'] = 'Question category viewed';",
          "149: $string['eventquestioncreated'] = 'Question created';",
          "150: $string['eventquestiondeleted'] = 'Question deleted';",
          "151: $string['eventquestionmoved'] = 'Question moved';",
          "152: $string['eventquestionpreviewed'] = 'Question previewed';",
          "153: $string['eventquestionsexported'] = 'Questions exported';",
          "154: $string['eventquestionsimported'] = 'Questions imported';",
          "155: $string['eventquestionupdated'] = 'Question updated';",
          "",
          "---------------"
        ],
        "lib/classes/event/question_base.php||lib/classes/event/question_base.php": [
          "File: lib/classes/event/question_base.php -> lib/classes/event/question_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_base extends base {",
          "42:     protected function init() {",
          "43:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "44:     }",
          "51:     public function get_url() {",
          "52:         if ($this->courseid) {",
          "53:             $cat = $this->other['categoryid'] . ',' . $this->contextid;",
          "54:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "55:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat, 'lastchanged' => $this->objectid));",
          "56:             }",
          "57:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat, 'lastchanged' => $this->objectid));",
          "58:         }",
          "60:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->other['categoryid'], 'lastchanged' => $this->objectid));",
          "61:     }",
          "69:     protected function validate_data() {",
          "70:         parent::validate_data();",
          "72:         if (!isset($this->other['categoryid'])) {",
          "73:             throw new \\coding_exception('The \\'categoryid\\' must be set in \\'other\\'.');",
          "74:         }",
          "75:     }",
          "82:     public static function get_objectid_mapping() {",
          "83:         return array('db' => 'question', 'restore' => 'question');",
          "84:     }",
          "91:     public static function get_other_mapping() {",
          "93:         $othermapped = array();",
          "94:         $othermapped['categoryid'] = array('db' => 'question_categories', 'restore' => 'question_categories');",
          "95:         return $othermapped;",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_base.php||lib/classes/event/question_category_base.php": [
          "File: lib/classes/event/question_category_base.php -> lib/classes/event/question_category_base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_category_base extends base {",
          "42:     protected function init() {",
          "43:         $this->data['objecttable'] = 'question_categories';",
          "44:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "45:     }",
          "52:     public function get_url() {",
          "53:         if ($this->courseid) {",
          "54:             $cat = $this->objectid . ',' . $this->contextid;",
          "55:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "56:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat));",
          "57:             }",
          "58:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat));",
          "59:         }",
          "61:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->objectid));",
          "62:     }",
          "68:     public static function get_objectid_mapping() {",
          "69:         return array('db' => 'question_categories', 'restore' => 'question_categories');",
          "70:     }",
          "71: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_created.php||lib/classes/event/question_category_created.php": [
          "File: lib/classes/event/question_category_created.php -> lib/classes/event/question_category_created.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "37: class question_category_created extends base {",
          "",
          "[Added Lines]",
          "37: class question_category_created extends question_category_base {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         return \"The user with id '$this->userid' created the question category with id '$this->objectid'.\";",
          "64:     }",
          "",
          "[Removed Lines]",
          "71:     public function get_url() {",
          "72:         if ($this->courseid) {",
          "73:             $cat = $this->objectid . ',' . $this->contextid;",
          "74:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "75:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat));",
          "76:             }",
          "77:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat));",
          "78:         }",
          "83:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->objectid));",
          "84:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         return null;",
          "98:     }",
          "103: }",
          "",
          "[Removed Lines]",
          "100:     public static function get_objectid_mapping() {",
          "101:         return array('db' => 'question_categories', 'restore' => 'question_category');",
          "102:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_deleted.php||lib/classes/event/question_category_deleted.php": [
          "File: lib/classes/event/question_category_deleted.php -> lib/classes/event/question_category_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_category_deleted extends question_category_base {",
          "42:     protected function init() {",
          "43:         $this->data['objecttable'] = 'question_categories';",
          "44:         $this->data['crud'] = 'd';",
          "45:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "46:     }",
          "53:     public static function get_name() {",
          "54:         return get_string('eventquestioncategorydeleted', 'question');",
          "55:     }",
          "62:     public function get_description() {",
          "63:         return \"The user with id '$this->userid' deleted the question category with id '$this->objectid'.\";",
          "64:     }",
          "66: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_moved.php||lib/classes/event/question_category_moved.php": [
          "File: lib/classes/event/question_category_moved.php -> lib/classes/event/question_category_moved.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_category_moved extends question_category_base {",
          "42:     protected function init() {",
          "43:         $this->data['objecttable'] = 'question_categories';",
          "44:         $this->data['crud'] = 'u';",
          "45:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "46:     }",
          "53:     public static function get_name() {",
          "54:         return get_string('eventquestioncategorymoved', 'question');",
          "55:     }",
          "62:     public function get_description() {",
          "63:         return \"The user with id '$this->userid' moved the question category with id '$this->objectid'.\";",
          "64:     }",
          "66: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_updated.php||lib/classes/event/question_category_updated.php": [
          "File: lib/classes/event/question_category_updated.php -> lib/classes/event/question_category_updated.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_category_updated extends question_category_base {",
          "42:     protected function init() {",
          "43:         $this->data['objecttable'] = 'question_categories';",
          "44:         $this->data['crud'] = 'u';",
          "45:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "46:     }",
          "53:     public static function get_name() {",
          "54:         return get_string('eventquestioncategoryupdated', 'question');",
          "55:     }",
          "62:     public function get_description() {",
          "63:         return \"The user with id '$this->userid' updated the question category with id '$this->objectid'.\";",
          "64:     }",
          "65: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_category_viewed.php||lib/classes/event/question_category_viewed.php": [
          "File: lib/classes/event/question_category_viewed.php -> lib/classes/event/question_category_viewed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class question_category_viewed extends question_category_base {",
          "42:     protected function init() {",
          "43:         $this->data['objecttable'] = 'question_categories';",
          "44:         $this->data['crud'] = 'r';",
          "45:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "46:     }",
          "53:     public static function get_name() {",
          "54:         return get_string('eventquestioncategoryviewed', 'question');",
          "55:     }",
          "62:     public function get_description() {",
          "63:         return \"The user with id '$this->userid' viewed the question category with id '$this->objectid'.\";",
          "64:     }",
          "66: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_created.php||lib/classes/event/question_created.php": [
          "File: lib/classes/event/question_created.php -> lib/classes/event/question_created.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class question_created extends question_base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'question';",
          "50:         $this->data['crud'] = 'c';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventquestioncreated', 'question');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' created a question with the id of '$this->objectid'\".",
          "70:                 \" in the category with the id '\".$this->other['categoryid'].\"'.\";",
          "71:     }",
          "78:     public function get_url() {",
          "79:         if ($this->courseid) {",
          "80:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "81:                 return new \\moodle_url('/question/preview.php', array('cmid' => $this->contextinstanceid, 'id' => $this->objectid));",
          "82:             }",
          "83:             return new \\moodle_url('/question/preview.php', array('courseid' => $this->courseid, 'id' => $this->objectid));",
          "84:         }",
          "86:         return new \\moodle_url('/question/preview.php', array('courseid' => SITEID, 'id' => $this->objectid));",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_deleted.php||lib/classes/event/question_deleted.php": [
          "File: lib/classes/event/question_deleted.php -> lib/classes/event/question_deleted.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class question_deleted extends question_base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'question';",
          "50:         $this->data['crud'] = 'd';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventquestiondeleted', 'question');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' deleted the question with id '$this->objectid'\".",
          "70:                 \" from the category with the id '\".$this->other['categoryid'].\"'.\";",
          "71:     }",
          "79:     public function get_url() {",
          "81:         return null;",
          "82:     }",
          "83: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_moved.php||lib/classes/event/question_moved.php": [
          "File: lib/classes/event/question_moved.php -> lib/classes/event/question_moved.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class question_moved extends base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'question';",
          "50:         $this->data['crud'] = 'u';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventquestionmoved', 'question');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' moved the question with the id of '$this->objectid'\".",
          "70:                 \" from the category with the id of '\".$this->other['oldcategoryid'].",
          "71:                 \"' to the category with the id of '\".$this->other['newcategoryid'].\"'.\";",
          "72:     }",
          "79:     public function get_url() {",
          "80:         if ($this->courseid) {",
          "81:             $cat = $this->other['newcategoryid'] . ',' . $this->contextid;",
          "82:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "83:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat, 'lastchanged' => $this->objectid));",
          "84:             }",
          "85:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat, 'lastchanged' => $this->objectid));",
          "86:         }",
          "88:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->other['newcategoryid'], 'lastchanged' => $this->objectid));",
          "89:     }",
          "97:     protected function validate_data() {",
          "98:         parent::validate_data();",
          "100:         if (!isset($this->other['oldcategoryid'])) {",
          "101:             throw new \\coding_exception('The \\'oldcategoryid\\' must be set in \\'other\\'.');",
          "102:         }",
          "103:         if (!isset($this->other['newcategoryid'])) {",
          "104:             throw new \\coding_exception('The \\'newcategoryid\\' must be set in \\'other\\'.');",
          "105:         }",
          "106:     }",
          "113:     public static function get_objectid_mapping() {",
          "114:         return array('db' => 'question', 'restore' => 'question');",
          "115:     }",
          "122:     public static function get_other_mapping() {",
          "124:         $othermapped = array();",
          "125:         $othermapped['newcategoryid'] = array('db' => 'question_categories', 'restore' => 'question_categories');",
          "126:         $othermapped['oldcategoryid'] = array('db' => 'question_categories', 'restore' => 'question_categories');",
          "128:         return $othermapped;",
          "129:     }",
          "130: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_previewed.php||lib/classes/event/question_previewed.php": [
          "File: lib/classes/event/question_previewed.php -> lib/classes/event/question_previewed.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class question_previewed extends question_base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'question';",
          "50:         $this->data['crud'] = 'r';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventquestionpreviewed', 'question');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' previewed the question with the id of '$this->objectid'.\";",
          "70:     }",
          "72: }",
          "",
          "---------------"
        ],
        "lib/classes/event/question_updated.php||lib/classes/event/question_updated.php": [
          "File: lib/classes/event/question_updated.php -> lib/classes/event/question_updated.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "43: class question_updated extends question_base {",
          "48:     protected function init() {",
          "49:         $this->data['objecttable'] = 'question';",
          "50:         $this->data['crud'] = 'u';",
          "51:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "52:     }",
          "59:     public static function get_name() {",
          "60:         return get_string('eventquestionupdated', 'question');",
          "61:     }",
          "68:     public function get_description() {",
          "69:         return \"The user with id '$this->userid' updated the question with the id of '$this->objectid'.\";",
          "70:     }",
          "72: }",
          "",
          "---------------"
        ],
        "lib/classes/event/questions_exported.php||lib/classes/event/questions_exported.php": [
          "File: lib/classes/event/questions_exported.php -> lib/classes/event/questions_exported.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class questions_exported extends base {",
          "42:     protected function init() {",
          "43:         $this->data['crud'] = 'r';",
          "44:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "45:     }",
          "52:     public static function get_name() {",
          "53:         return get_string('eventquestionsexported', 'question');",
          "54:     }",
          "61:     public function get_description() {",
          "62:         return \"The user with id '$this->userid' exported questions in '\". $this->other['format'].",
          "63:                 \"' format from the category with id '\".$this->other['categoryid'].\"'.\";",
          "64:     }",
          "71:     public function get_url() {",
          "72:         if ($this->courseid) {",
          "73:             $cat = $this->other['categoryid'] . ',' . $this->contextid;",
          "74:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "75:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat));",
          "76:             }",
          "77:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat));",
          "78:         }",
          "79:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->other['categoryid']));",
          "80:     }",
          "88:     protected function validate_data() {",
          "89:         parent::validate_data();",
          "91:         if (!isset($this->other['format'])) {",
          "92:             throw new \\coding_exception('The \\'format\\' must be set in \\'other\\'.');",
          "93:         }",
          "94:     }",
          "102:     public static function get_objectid_mapping() {",
          "104:         return array();",
          "105:     }",
          "107: }",
          "",
          "---------------"
        ],
        "lib/classes/event/questions_imported.php||lib/classes/event/questions_imported.php": [
          "File: lib/classes/event/questions_imported.php -> lib/classes/event/questions_imported.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\event;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "37: class questions_imported extends question_base {",
          "42:     protected function init() {",
          "43:         $this->data['crud'] = 'c';",
          "44:         $this->data['edulevel'] = self::LEVEL_TEACHING;",
          "45:     }",
          "52:     public static function get_name() {",
          "53:         return get_string('eventquestionsimported', 'question');",
          "54:     }",
          "61:     public function get_description() {",
          "62:         return \"The user with id '$this->userid' imported questions in '\". $this->other['format'].",
          "63:                 \"' format into the category with id '\".$this->other['categoryid'].\"'.\";",
          "64:     }",
          "71:     public function get_url() {",
          "72:         if ($this->courseid) {",
          "73:             $cat = $this->other['categoryid'] . ',' . $this->contextid;",
          "74:             if ($this->contextlevel == CONTEXT_MODULE) {",
          "75:                 return new \\moodle_url('/question/edit.php', array('cmid' => $this->contextinstanceid, 'cat' => $cat));",
          "76:             }",
          "77:             return new \\moodle_url('/question/edit.php', array('courseid' => $this->courseid, 'cat' => $cat));",
          "78:         }",
          "79:         return new \\moodle_url('/question/category.php', array('courseid' => SITEID, 'edit' => $this->other['categoryid']));",
          "80:     }",
          "88:     protected function validate_data() {",
          "89:         parent::validate_data();",
          "91:         if (!isset($this->other['categoryid'])) {",
          "92:             throw new \\coding_exception('The \\'categoryid\\' must be set in \\'other\\'.');",
          "93:         }",
          "94:         if (!isset($this->other['format'])) {",
          "95:             throw new \\coding_exception('The \\'format\\' must be set in \\'other\\'.');",
          "96:         }",
          "97:     }",
          "105:     public static function get_objectid_mapping() {",
          "107:         return array();",
          "108:     }",
          "109: }",
          "",
          "---------------"
        ],
        "lib/questionlib.php||lib/questionlib.php": [
          "File: lib/questionlib.php -> lib/questionlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:     $DB->delete_records('question', array('id' => $questionid));",
          "382:     question_bank::notify_question_edited($questionid);",
          "383: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385:     $eventparams = array(",
          "386:         'contextid' => $question->contextid,",
          "387:         'objectid' => $question->id,",
          "388:         'other' => array('categoryid' => $question->category)",
          "389:     );",
          "391:     $event = \\core\\event\\question_deleted::create($eventparams);",
          "392:     $event->trigger();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:             array('id' => $newcategoryid));",
          "674:     list($questionidcondition, $params) = $DB->get_in_or_equal($questionids);",
          "675:     $questions = $DB->get_records_sql(\"",
          "677:               FROM {question} q",
          "678:               JOIN {question_categories} qc ON q.category = qc.id",
          "679:              WHERE  q.id $questionidcondition\", $params);",
          "",
          "[Removed Lines]",
          "676:             SELECT q.id, q.qtype, qc.contextid, q.idnumber",
          "",
          "[Added Lines]",
          "686:             SELECT q.id, q.qtype, qc.contextid, q.idnumber, q.category",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "703:             $q->idnumber = $question->idnumber . '_' . $unique;",
          "704:             $DB->update_record('question', $q);",
          "705:         }",
          "706:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:         $eventparams = array(",
          "719:             'contextid' => $question->contextid,",
          "720:             'objectid' => $question->id,",
          "721:             'other' => array('oldcategoryid' => $question->category, 'newcategoryid' => $newcategoryid)",
          "722:         );",
          "723:         $event = \\core\\event\\question_moved::create($eventparams);",
          "724:         $event->trigger();",
          "",
          "---------------"
        ],
        "question/category.php||question/category.php": [
          "File: question/category.php -> question/category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         print_error('invalidcontext');",
          "82:     }",
          "83:     $oldcat = $DB->get_record('question_categories', array('id' => $catid), '*', MUST_EXIST);",
          "84:     $qcobject->update_category($catid, \"{$newtopcat->id},{$param->tocontext}\", $oldcat->name, $oldcat->info);",
          "86: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     $params = array(",
          "86:         'objectid' => explode(',',$pagevars['cat'], -1)[0],",
          "87:         'contextid' => $param->tocontext,",
          "88:     );",
          "89:     $event = \\core\\event\\question_category_moved::create($params);",
          "90:     $event->trigger();",
          "",
          "---------------"
        ],
        "question/category_class.php||question/category_class.php": [
          "File: question/category_class.php -> question/category_class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         $topcategory = question_get_top_category($item->item->contextid, true);",
          "77:         return $topcategory->id;",
          "78:     }",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     public function process_actions($left, $right, $moveup, $movedown) {",
          "81:         if (!empty($left)) {",
          "83:             $params = array(",
          "84:                 'objectid' => $left,",
          "85:                 'contextid' => $this->context->id",
          "86:             );",
          "87:             $event = \\core\\event\\question_category_moved::create($params);",
          "88:             $event->trigger();",
          "89:         } else if (!empty($right)) {",
          "91:             $params = array(",
          "92:                 'objectid' => $right,",
          "93:                 'contextid' => $this->context->id",
          "94:             );",
          "95:             $event = \\core\\event\\question_category_moved::create($params);",
          "96:             $event->trigger();",
          "97:             }",
          "98:         parent::process_actions($left, $right, $moveup, $movedown);",
          "99:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:         $DB->delete_records(\"question_categories\", array(\"id\" => $category->id));",
          "378:     }",
          "380:     public function move_questions_and_delete_category($oldcat, $newcat){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:         $params = array(",
          "402:             'objectid' => $category->id,",
          "403:             'contextid' => $category->contextid",
          "404:         );",
          "405:         $event = \\core\\event\\question_category_deleted::create($params);",
          "406:         $event->trigger();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:     public function update_category($updateid, $newparent, $newname, $newinfo, $newinfoformat = FORMAT_HTML,",
          "464:         global $CFG, $DB;",
          "465:         if (empty($newname)) {",
          "466:             print_error('categorynamecantbeblank', 'question');",
          "",
          "[Removed Lines]",
          "463:             $idnumber = null) {",
          "",
          "[Added Lines]",
          "502:             $idnumber = null, $redirect = true) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "519:         }",
          "520:         $DB->update_record('question_categories', $cat);",
          "523:         if ($oldcat->name != $cat->name) {",
          "524:             $where = \"qtype = 'random' AND category = ? AND \" . $DB->sql_compare_text('questiontext') . \" = ?\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:         $params = array(",
          "563:             'objectid' => $cat->id,",
          "564:             'contextid' => $cat->contextid",
          "565:         );",
          "566:         $event = \\core\\event\\question_category_updated::create($params);",
          "567:         $event->trigger();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "540:         $this->pageurl->param('cat', $updateid . ',' . $tocontextid);",
          "542:     }",
          "543: }",
          "",
          "[Removed Lines]",
          "541:         redirect($this->pageurl);",
          "",
          "[Added Lines]",
          "588:         if ($redirect) {",
          "589:             redirect($this->pageurl); // Always redirect after successful action.",
          "590:         }",
          "",
          "---------------"
        ],
        "question/edit.php||question/edit.php": [
          "File: question/edit.php -> question/edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         $pagevars['qbshowtext'], $pagevars['qtagids']);",
          "58: echo \"</div>\\n\";",
          "60: echo $OUTPUT->footer();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: $categoryid = explode(',' , urldecode($pagevars['cat']));",
          "60: $params = array(",
          "61:     'objectid' => $categoryid[0],",
          "62:     'context' => $context",
          "63: );",
          "64: $event = \\core\\event\\question_category_viewed::create($params);",
          "65: $event->trigger();",
          "",
          "---------------"
        ],
        "question/export.php||question/export.php": [
          "File: question/export.php -> question/export.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     echo get_string('yourfileshoulddownload', 'question', $export_url->out());",
          "78:     echo $OUTPUT->box_end();",
          "81:     if (!defined('BEHAT_SITE_RUNNING')) {",
          "82:         $PAGE->requires->js_function_call('document.location.replace', array($export_url->out(false)), false, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         $eventparams = array(",
          "82:             'contextid' => $category->contextid,",
          "83:             'other' => array('format' => $from_form->format, 'categoryid' => $category->id)",
          "84:         );",
          "85:         $event = \\core\\event\\questions_exported::create($eventparams);",
          "86:         $event->trigger();",
          "",
          "---------------"
        ],
        "question/import.php||question/import.php": [
          "File: question/import.php -> question/import.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:         print_error('cannotimport', '', $thispageurl->out());",
          "130:     }",
          "132:     $params = $thispageurl->params() + array(",
          "133:         'category' => $qformat->category->id . ',' . $qformat->category->contextid);",
          "134:     echo $OUTPUT->continue_button(new moodle_url('edit.php', $params));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:         $eventparams = array(",
          "134:             'contextid' => $category->contextid,",
          "135:             'other' => array('format' => $form->format, 'categoryid' => $category->id)",
          "136:         );",
          "137:         $event = \\core\\event\\questions_imported::create($eventparams);",
          "138:         $event->trigger();",
          "",
          "---------------"
        ],
        "question/preview.php||question/preview.php": [
          "File: question/preview.php -> question/preview.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:             get_string('exportonequestion', 'question'));",
          "281: }",
          "284: $optionsform->display();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: $eventparams = array(",
          "285:     'context' => $context,",
          "286:     'objectid' => $question->id,",
          "287:     'other' => array('categoryid' => $question->category)",
          "288: );",
          "289: $newquestion = true;",
          "290: $event = \\core\\event\\question_previewed::create($eventparams);",
          "291: $event->trigger();",
          "",
          "---------------"
        ],
        "question/tests/events_test.php||question/tests/events_test.php": [
          "File: question/tests/events_test.php -> question/tests/events_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         $this->assertEventLegacyLogData($expected, $event);",
          "74:         $this->assertEventContextNotUsed($event);",
          "75:     }",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     public function test_question_category_deleted() {",
          "81:         $this->setAdminUser();",
          "82:         $course = $this->getDataGenerator()->create_course();",
          "83:         $quiz = $this->getDataGenerator()->create_module('quiz', array('course' => $course->id));",
          "85:         $contexts = new question_edit_contexts(context_module::instance($quiz->cmid));",
          "87:         $defaultcategoryobj = question_make_default_categories(array($contexts->lowest()));",
          "88:         $defaultcategory = $defaultcategoryobj->id . ',' . $defaultcategoryobj->contextid;",
          "90:         $qcobject = new question_category_object(",
          "91:             1,",
          "92:             new moodle_url('/mod/quiz/edit.php', array('cmid' => $quiz->cmid)),",
          "93:             $contexts->having_one_edit_tab_cap('categories'),",
          "94:             $defaultcategoryobj->id,",
          "95:             $defaultcategory,",
          "96:             null,",
          "97:             $contexts->having_cap('moodle/question:add'));",
          "100:         $categoryid = $qcobject->add_category($defaultcategory, 'newcategory', '', true);",
          "103:         $sink = $this->redirectEvents();",
          "104:         $qcobject->delete_category($categoryid);",
          "105:         $events = $sink->get_events();",
          "106:         $event = reset($events);",
          "109:         $this->assertInstanceOf('\\core\\event\\question_category_deleted', $event);",
          "110:         $this->assertEquals(context_module::instance($quiz->cmid), $event->get_context());",
          "111:         $this->assertEquals($categoryid, $event->objectid);",
          "112:         $this->assertDebuggingNotCalled();",
          "113:     }",
          "118:     public function test_question_category_updated() {",
          "119:         $this->setAdminUser();",
          "120:         $course = $this->getDataGenerator()->create_course();",
          "121:         $quiz = $this->getDataGenerator()->create_module('quiz', array('course' => $course->id));",
          "123:         $contexts = new question_edit_contexts(context_module::instance($quiz->cmid));",
          "125:         $defaultcategoryobj = question_make_default_categories(array($contexts->lowest()));",
          "126:         $defaultcategory = $defaultcategoryobj->id . ',' . $defaultcategoryobj->contextid;",
          "128:         $qcobject = new question_category_object(",
          "129:             1,",
          "130:             new moodle_url('/mod/quiz/edit.php', array('cmid' => $quiz->cmid)),",
          "131:             $contexts->having_one_edit_tab_cap('categories'),",
          "132:             $defaultcategoryobj->id,",
          "133:             $defaultcategory,",
          "134:             null,",
          "135:             $contexts->having_cap('moodle/question:add'));",
          "138:         $categoryid = $qcobject->add_category($defaultcategory, 'newcategory', '', true);",
          "141:         $sink = $this->redirectEvents();",
          "142:         $qcobject->update_category($categoryid, $defaultcategory, 'updatedcategory', '', FORMAT_HTML, '', false);",
          "143:         $events = $sink->get_events();",
          "144:         $event = reset($events);",
          "147:         $this->assertInstanceOf('\\core\\event\\question_category_updated', $event);",
          "148:         $this->assertEquals(context_module::instance($quiz->cmid), $event->get_context());",
          "149:         $this->assertEquals($categoryid, $event->objectid);",
          "150:         $this->assertDebuggingNotCalled();",
          "151:     }",
          "158:     public function test_question_category_viewed() {",
          "160:         $this->setAdminUser();",
          "161:         $course = $this->getDataGenerator()->create_course();",
          "162:         $quiz = $this->getDataGenerator()->create_module('quiz', array('course' => $course->id));",
          "164:         $contexts = new question_edit_contexts(context_module::instance($quiz->cmid));",
          "166:         $defaultcategoryobj = question_make_default_categories(array($contexts->lowest()));",
          "167:         $defaultcategory = $defaultcategoryobj->id . ',' . $defaultcategoryobj->contextid;",
          "169:         $qcobject = new question_category_object(",
          "170:             1,",
          "171:             new moodle_url('/mod/quiz/edit.php', array('cmid' => $quiz->cmid)),",
          "172:             $contexts->having_one_edit_tab_cap('categories'),",
          "173:             $defaultcategoryobj->id,",
          "174:             $defaultcategory,",
          "175:             null,",
          "176:             $contexts->having_cap('moodle/question:add'));",
          "179:         $categoryid = $qcobject->add_category($defaultcategory, 'newcategory', '', true);",
          "182:         $params = array(",
          "183:             'objectid' => $categoryid,",
          "184:             'context' => context_module::instance($quiz->cmid)",
          "185:         );",
          "187:         $event = \\core\\event\\question_category_viewed::create($params);",
          "190:         $sink = $this->redirectEvents();",
          "191:         $event->trigger();",
          "192:         $events = $sink->get_events();",
          "193:         $event = reset($events);",
          "196:         $this->assertInstanceOf('\\core\\event\\question_category_viewed', $event);",
          "197:         $this->assertEquals(context_module::instance($quiz->cmid), $event->get_context());",
          "198:         $this->assertEquals($categoryid, $event->objectid);",
          "199:         $this->assertDebuggingNotCalled();",
          "201:     }",
          "208:     public function test_questions_imported() {",
          "210:         $this->setAdminUser();",
          "211:         $course = $this->getDataGenerator()->create_course();",
          "212:         $quiz = $this->getDataGenerator()->create_module('quiz', array('course' => $course->id));",
          "214:         $contexts = new question_edit_contexts(context_module::instance($quiz->cmid));",
          "216:         $defaultcategoryobj = question_make_default_categories(array($contexts->lowest()));",
          "217:         $defaultcategory = $defaultcategoryobj->id . ',' . $defaultcategoryobj->contextid;",
          "219:         $qcobject = new question_category_object(",
          "220:             1,",
          "221:             new moodle_url('/mod/quiz/edit.php', array('cmid' => $quiz->cmid)),",
          "222:             $contexts->having_one_edit_tab_cap('categories'),",
          "223:             $defaultcategoryobj->id,",
          "224:             $defaultcategory,",
          "225:             null,",
          "226:             $contexts->having_cap('moodle/question:add'));",
          "229:         $categoryid = $qcobject->add_category($defaultcategory, 'newcategory', '', true);",
          "232:         $params = array(",
          "233:             'context' => context_module::instance($quiz->cmid),",
          "234:             'other' => array('categoryid' => $categoryid, 'format' => 'testformat')",
          "235:         );",
          "237:         $event = \\core\\event\\questions_imported::create($params);",
          "240:         $sink = $this->redirectEvents();",
          "241:         $event->trigger();",
          "242:         $events = $sink->get_events();",
          "243:         $event = reset($events);",
          "246:         $this->assertInstanceOf('\\core\\event\\questions_imported', $event);",
          "247:         $this->assertEquals(context_module::instance($quiz->cmid), $event->get_context());",
          "248:         $this->assertEquals($categoryid, $event->other['categoryid']);",
          "249:         $this->assertEquals('testformat', $event->other['format']);",
          "250:         $this->assertDebuggingNotCalled();",
          "252:     }",
          "259:     public function test_questions_exported() {",
          "261:         $this->setAdminUser();",
          "262:         $course = $this->getDataGenerator()->create_course();",
          "263:         $quiz = $this->getDataGenerator()->create_module('quiz', array('course' => $course->id));",
          "265:         $contexts = new question_edit_contexts(context_module::instance($quiz->cmid));",
          "267:         $defaultcategoryobj = question_make_default_categories(array($contexts->lowest()));",
          "268:         $defaultcategory = $defaultcategoryobj->id . ',' . $defaultcategoryobj->contextid;",
          "270:         $qcobject = new question_category_object(",
          "271:             1,",
          "272:             new moodle_url('/mod/quiz/edit.php', array('cmid' => $quiz->cmid)),",
          "273:             $contexts->having_one_edit_tab_cap('categories'),",
          "274:             $defaultcategoryobj->id,",
          "275:             $defaultcategory,",
          "276:             null,",
          "277:             $contexts->having_cap('moodle/question:add'));",
          "280:         $categoryid = $qcobject->add_category($defaultcategory, 'newcategory', '', true);",
          "283:         $params = array(",
          "284:             'context' => context_module::instance($quiz->cmid),",
          "285:             'other' => array('categoryid' => $categoryid, 'format' => 'testformat')",
          "286:         );",
          "288:         $event = \\core\\event\\questions_exported::create($params);",
          "291:         $sink = $this->redirectEvents();",
          "292:         $event->trigger();",
          "293:         $events = $sink->get_events();",
          "294:         $event = reset($events);",
          "297:         $this->assertInstanceOf('\\core\\event\\questions_exported', $event);",
          "298:         $this->assertEquals(context_module::instance($quiz->cmid), $event->get_context());",
          "299:         $this->assertEquals($categoryid, $event->other['categoryid']);",
          "300:         $this->assertEquals('testformat', $event->other['format']);",
          "301:         $this->assertDebuggingNotCalled();",
          "303:     }",
          "308:     public function test_question_created() {",
          "310:         $this->setAdminUser();",
          "311:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "313:         $cat = $generator->create_question_category(array(",
          "314:                 'name' => 'My category', 'sortorder' => 1));",
          "317:         $sink = $this->redirectEvents();",
          "318:         $questiondata = $generator->create_question('description', null, array('category' => $cat->id));",
          "319:         $question = question_bank::load_question($questiondata->id);",
          "321:         $events = $sink->get_events();",
          "322:         $event = reset($events);",
          "325:         $this->assertInstanceOf('\\core\\event\\question_created', $event);",
          "326:         $this->assertEquals($question->id, $event->objectid);",
          "327:         $this->assertEquals($cat->id, $event->other['categoryid']);",
          "328:         $this->assertDebuggingNotCalled();",
          "330:     }",
          "335:     public function test_question_deleted() {",
          "337:         $this->setAdminUser();",
          "338:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "340:         $cat = $generator->create_question_category(array(",
          "341:                 'name' => 'My category', 'sortorder' => 1));",
          "343:         $questiondata = $generator->create_question('description', null, array('category' => $cat->id));",
          "344:         $question = question_bank::load_question($questiondata->id);",
          "347:         $sink = $this->redirectEvents();",
          "348:         question_delete_question($question->id);",
          "349:         $events = $sink->get_events();",
          "350:         $event = reset($events);",
          "353:         $this->assertInstanceOf('\\core\\event\\question_deleted', $event);",
          "354:         $this->assertEquals($question->id, $event->objectid);",
          "355:         $this->assertEquals($cat->id, $event->other['categoryid']);",
          "356:         $this->assertDebuggingNotCalled();",
          "358:     }",
          "363:     public function test_question_updated() {",
          "365:         global $CFG;",
          "366:         require_once($CFG->dirroot . '/question/type/description/questiontype.php');",
          "367:         require_once($CFG->dirroot . '/question/type/edit_question_form.php');",
          "368:         require_once($CFG->dirroot . '/question/type/description/edit_description_form.php');",
          "370:         $this->setAdminUser();",
          "371:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "373:         $cat = $generator->create_question_category(array(",
          "374:                 'name' => 'My category', 'sortorder' => 1));",
          "376:         $questiondata = $generator->create_question('description', null, array('category' => $cat->id));",
          "377:         $question = question_bank::load_question($questiondata->id);",
          "379:         $qtype = new qtype_description();",
          "380:         $formdata = test_question_maker::get_question_form_data('description');",
          "381:         $formdata->category = \"{$cat->id},{$cat->contextid}\";",
          "382:         qtype_description_edit_form::mock_submit((array)$formdata);",
          "384:         $form = qtype_description_test_helper::get_question_editing_form($cat, $questiondata);",
          "385:         $fromform = $form->get_data();",
          "388:         $sink = $this->redirectEvents();",
          "389:         $qtype->save_question($questiondata, $fromform);",
          "390:         $events = $sink->get_events();",
          "391:         $event = reset($events);",
          "394:         $this->assertInstanceOf('\\core\\event\\question_updated', $event);",
          "395:         $this->assertEquals($question->id, $event->objectid);",
          "396:         $this->assertEquals($cat->id, $event->other['categoryid']);",
          "397:         $this->assertDebuggingNotCalled();",
          "399:     }",
          "404:     public function test_question_moved() {",
          "406:         $this->setAdminUser();",
          "407:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "409:         $cat1 = $generator->create_question_category(array(",
          "410:                 'name' => 'My category 1', 'sortorder' => 1));",
          "412:         $cat2 = $generator->create_question_category(array(",
          "413:                 'name' => 'My category 2', 'sortorder' => 2));",
          "415:         $questiondata = $generator->create_question('description', null, array('category' => $cat1->id));",
          "416:         $question = question_bank::load_question($questiondata->id);",
          "419:         $sink = $this->redirectEvents();",
          "420:         question_move_questions_to_category(array($question->id), $cat2->id);",
          "421:         $events = $sink->get_events();",
          "422:         $event = reset($events);",
          "425:         $this->assertInstanceOf('\\core\\event\\question_moved', $event);",
          "426:         $this->assertEquals($question->id, $event->objectid);",
          "427:         $this->assertEquals($cat1->id, $event->other['oldcategoryid']);",
          "428:         $this->assertEquals($cat2->id, $event->other['newcategoryid']);",
          "429:         $this->assertDebuggingNotCalled();",
          "431:     }",
          "438:     public function test_question_viewed() {",
          "440:         $this->setAdminUser();",
          "441:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "443:         $cat = $generator->create_question_category(array(",
          "444:                 'name' => 'My category', 'sortorder' => 1));",
          "446:         $questiondata = $generator->create_question('description', null, array('category' => $cat->id));",
          "447:         $question = question_bank::load_question($questiondata->id);",
          "449:         $params = array(",
          "450:             'objectid' => $question->id,",
          "451:             'context' => context::instance_by_id($cat->contextid),",
          "452:             'other' => array('categoryid' => $question->category)",
          "453:         );",
          "455:         $event = \\core\\event\\question_previewed::create($params);",
          "458:         $sink = $this->redirectEvents();",
          "459:         $event->trigger();",
          "460:         $events = $sink->get_events();",
          "461:         $event = reset($events);",
          "464:         $this->assertInstanceOf('\\core\\event\\question_previewed', $event);",
          "465:         $this->assertEquals($question->id, $event->objectid);",
          "466:         $this->assertEquals($cat->id, $event->other['categoryid']);",
          "467:         $this->assertDebuggingNotCalled();",
          "469:     }",
          "",
          "---------------"
        ],
        "question/type/questiontypebase.php||question/type/questiontypebase.php": [
          "File: question/type/questiontypebase.php -> question/type/questiontypebase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:         }",
          "367:         if (empty($question->id)) {",
          "369:             $question->stamp = make_unique_id_code();",
          "370:             $question->createdby = $USER->id;",
          "371:             $question->timecreated = time();",
          "372:             $question->id = $DB->insert_record('question', $question);",
          "373:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:         $newquestion = false;",
          "374:             $newquestion = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:         }",
          "392:         $DB->update_record('question', $question);",
          "395:         $form->id = $question->id;",
          "396:         $form->qtype = $question->qtype;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:         if ($newquestion) {",
          "398:             $eventparams = array(",
          "399:                 'context' => $context,",
          "400:                 'objectid' => $question->id,",
          "401:                 'other' => array('categoryid' => $question->category)",
          "402:             );",
          "403:             $event = \\core\\event\\question_created::create($eventparams);",
          "404:             $event->trigger();",
          "405:         } else {",
          "407:             $eventparams = array(",
          "408:                 'context' => $context,",
          "409:                 'objectid' => $question->id,",
          "410:                 'other' => array('categoryid' => $question->category)",
          "411:             );",
          "412:             $event = \\core\\event\\question_updated::create($eventparams);",
          "413:             $event->trigger();",
          "414:         }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019042700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019042700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae0263de2b4ba084f62a43211af8e0e941ed0d2a",
      "candidate_info": {
        "commit_hash": "ae0263de2b4ba084f62a43211af8e0e941ed0d2a",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ae0263de2b4ba084f62a43211af8e0e941ed0d2a",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-67458 core: removing stale cohortroles and role assignments",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3790:     return true;",
          "3791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3790:     if ($oldversion < 2019120500.01) {",
          "3792:         $DB->delete_records_select('tool_cohortroles', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3795:         $DB->delete_records_select('role_assignments', \"roleid NOT IN (SELECT id FROM {role})\");",
          "3798:         upgrade_main_savepoint(true, 2019120500.01);",
          "3799:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "35: $release  = '3.9dev (Build: 20191205)'; // Human-friendly version name",
          "",
          "[Removed Lines]",
          "32: $version  = 2019120500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019120500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fef7d1c87a16d8a6bb655799205ea9887d3d549",
      "candidate_info": {
        "commit_hash": "4fef7d1c87a16d8a6bb655799205ea9887d3d549",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4fef7d1c87a16d8a6bb655799205ea9887d3d549",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.10;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191018)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.11;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191022)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}