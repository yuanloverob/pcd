{
  "cve_id": "CVE-2023-46739",
  "cve_desc": "CubeFS is an open-source cloud-native file storage system. A vulnerability was found during in the CubeFS master component in versions prior to 3.3.1 that could allow an untrusted attacker to steal user passwords by carrying out a timing attack. The root case of the vulnerability was that CubeFS used raw string comparison of passwords. The vulnerable part of CubeFS was the UserService of the master component. The UserService gets instantiated when starting the server of the master component. The issue has been patched in v3.3.1. For impacted users, there is no other way to mitigate the issue besides upgrading.",
  "repo": "cubefs/cubefs",
  "patch_hash": "6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
  "patch_info": {
    "commit_hash": "6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
    "repo": "cubefs/cubefs",
    "commit_url": "https://github.com/cubefs/cubefs/commit/6a0d5fa45a77ff20c752fa9e44738bf5d86c84bd",
    "files": [
      "master/gapi_user.go"
    ],
    "message": "enhance(gapi):Timing attack can leak user passwords\n\nSigned-off-by: leonrayang <chl696@sina.com>",
    "before_after_code_files": [
      "master/gapi_user.go||master/gapi_user.go"
    ]
  },
  "patch_diff": {
    "master/gapi_user.go||master/gapi_user.go": [
      "File: master/gapi_user.go -> master/gapi_user.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"context\"",
      "5:  \"fmt\"",
      "6:  \"github.com/cubefs/cubefs/proto\"",
      "7:  \"github.com/cubefs/cubefs/util/log\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  \"crypto/sha256\"",
      "6:  \"encoding/hex\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "347:  if err != nil {",
      "348:   return nil, err",
      "349:  }",
      "352:   log.LogWarnf(\"user:[%s] login pass word has err\", args.UserID)",
      "353:   return nil, fmt.Errorf(\"user or password has err\")",
      "354:  }",
      "",
      "[Removed Lines]",
      "351:  if ak.Password != args.Password {",
      "",
      "[Added Lines]",
      "352:  hashedPassword := sha256.Sum256([]byte(args.Password))",
      "353:  hashedPasswordStr := hex.EncodeToString(hashedPassword[:])",
      "355:  hashedPassword_ := sha256.Sum256([]byte(ak.Password))",
      "356:  hashedPasswordStr_ := hex.EncodeToString(hashedPassword_[:])",
      "358:  if hashedPasswordStr != hashedPasswordStr_ {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "30b1778f54664ef588483541c87577b7ab2fbfee",
      "candidate_info": {
        "commit_hash": "30b1778f54664ef588483541c87577b7ab2fbfee",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/30b1778f54664ef588483541c87577b7ab2fbfee",
        "files": [
          "metanode/dentry.go",
          "metanode/partition_fsmop_dentry.go"
        ],
        "message": "fix(meta): fix the bug that when overwrite deleted dentry in snapshot before.\n\nSigned-off-by: Victor1319 <834863182@qq.com>",
        "before_after_code_files": [
          "metanode/dentry.go||metanode/dentry.go",
          "metanode/partition_fsmop_dentry.go||metanode/partition_fsmop_dentry.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/dentry.go||metanode/dentry.go": [
          "File: metanode/dentry.go -> metanode/dentry.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  return len(d.multiSnap.dentryList)",
          "72: }",
          "74: func (d *Dentry) setVerSeq(verSeq uint64) {",
          "75:  if verSeq == 0 {",
          "76:   return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: func (d *Dentry) addVersion(ver uint64) {",
          "75:  dn := d.CopyDirectly().(*Dentry)",
          "76:  dn.setVerSeq(d.getSeqFiled())",
          "77:  d.setVerSeq(ver)",
          "78:  d.multiSnap.dentryList = append([]*Dentry{dn}, d.multiSnap.dentryList...)",
          "79: }",
          "",
          "---------------"
        ],
        "metanode/partition_fsmop_dentry.go||metanode/partition_fsmop_dentry.go": [
          "File: metanode/partition_fsmop_dentry.go -> metanode/partition_fsmop_dentry.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   if d.isDeleted() {",
          "101:    log.LogDebugf(\"action[fsmCreateDentry] mp %v newest dentry %v be set deleted flag\", mp.config.PartitionId, d)",
          "102:    d.Inode = dentry.Inode",
          "104:    d.Type = dentry.Type",
          "105:    d.ParentId = dentry.ParentId",
          "106:    log.LogDebugf(\"action[fsmCreateDentry.ver] mp %v latest dentry already deleted.Now create new one [%v]\", mp.config.PartitionId, dentry)",
          "",
          "[Removed Lines]",
          "103:    d.setVerSeq(dentry.getSeqFiled())",
          "",
          "[Added Lines]",
          "103:    if d.getVerSeq() == dentry.getVerSeq() {",
          "104:     d.setVerSeq(dentry.getSeqFiled())",
          "105:    } else {",
          "106:     d.addVersion(dentry.getSeqFiled())",
          "107:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6e3e05ddac16c5a940fb45ca4284a0cc2efe7a1",
      "candidate_info": {
        "commit_hash": "b6e3e05ddac16c5a940fb45ca4284a0cc2efe7a1",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/b6e3e05ddac16c5a940fb45ca4284a0cc2efe7a1",
        "files": [
          "metanode/manager.go"
        ],
        "message": "fix(metanode):loadPartitions not check the result of calling master\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "metanode/manager.go||metanode/manager.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/manager.go||metanode/manager.go": [
          "File: metanode/manager.go -> metanode/manager.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:  for i := 0; i < 3; i++ {",
          "398:   if metaNodeInfo, err = masterClient.NodeAPI().GetMetaNode(fmt.Sprintf(\"%s:%s\", m.metaNode.localAddr,",
          "399:    m.metaNode.listen)); err != nil {",
          "401:    continue",
          "402:   }",
          "403:   break",
          "404:  }",
          "406:  if len(metaNodeInfo.PersistenceMetaPartitions) == 0 {",
          "407:   log.LogWarnf(\"loadPartitions: length of PersistenceMetaPartitions is 0, ExpiredPartition check without effect\")",
          "408:  }",
          "",
          "[Removed Lines]",
          "400:    log.LogErrorf(\"loadPartitions: get MetaNode info fail: err(%v)\", err)",
          "",
          "[Added Lines]",
          "400:    log.LogWarnf(\"loadPartitions: get MetaNode info fail: err(%v)\", err)",
          "405:  if err != nil {",
          "406:   log.LogErrorf(\"loadPartitions: get MetaNode info fail: err(%v)\", err)",
          "407:   return",
          "408:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae58cb13c338389c87aa9fb1817c7daadbc745de",
      "candidate_info": {
        "commit_hash": "ae58cb13c338389c87aa9fb1817c7daadbc745de",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/ae58cb13c338389c87aa9fb1817c7daadbc745de",
        "files": [
          "metanode/partition_free_list.go"
        ],
        "message": "fix(metanode).inode with layer len large than 0 should be deleted\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "metanode/partition_free_list.go||metanode/partition_free_list.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/partition_free_list.go||metanode/partition_free_list.go": [
          "File: metanode/partition_free_list.go -> metanode/partition_free_list.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   log.LogDebugf(\"[deleteMarkedInodes] . mp %v inode [%v] inode.Extents: %v, ino verList: %v\",",
          "267:    mp.config.PartitionId, ino, inode.Extents, inode.GetMultiVerString())",
          "270:    log.LogErrorf(\"[deleteMarkedInodes] deleteMarkedInodes. mp %v inode [%v] verlist len %v should not drop\",",
          "271:     mp.config.PartitionId, ino, inode.getLayerLen())",
          "272:    return",
          "",
          "[Removed Lines]",
          "269:   if inode.getLayerLen() > 1 {",
          "",
          "[Added Lines]",
          "269:   if inode.getLayerLen() > 0 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f1bbe8e67b0f689774604a2b5de94f2a3ebd4d4",
      "candidate_info": {
        "commit_hash": "9f1bbe8e67b0f689774604a2b5de94f2a3ebd4d4",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/9f1bbe8e67b0f689774604a2b5de94f2a3ebd4d4",
        "files": [
          "datanode/wrap_operator.go",
          "proto/packet.go",
          "sdk/data/stream/extent_cache.go",
          "sdk/data/stream/extent_handler.go",
          "sdk/data/stream/stream_writer.go"
        ],
        "message": "enhance(client): reconstruct process of try init extentHandler by last ek\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "datanode/wrap_operator.go||datanode/wrap_operator.go",
          "proto/packet.go||proto/packet.go",
          "sdk/data/stream/extent_cache.go||sdk/data/stream/extent_cache.go",
          "sdk/data/stream/extent_handler.go||sdk/data/stream/extent_handler.go",
          "sdk/data/stream/stream_writer.go||sdk/data/stream/stream_writer.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "datanode/wrap_operator.go||datanode/wrap_operator.go": [
          "File: datanode/wrap_operator.go -> datanode/wrap_operator.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   tpLabels map[string]string",
          "84:   tpObject *exporter.TimePointCount",
          "85:  )",
          "87:  shallDegrade := p.ShallDegrade()",
          "88:  sz := p.Size",
          "89:  if !shallDegrade {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:  log.LogDebugf(\"action[OperatePacket] %v, pack [%v]\", p.GetOpMsg(), p)",
          "",
          "---------------"
        ],
        "proto/packet.go||proto/packet.go": [
          "File: proto/packet.go -> proto/packet.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "354: }",
          "356: func (p *Packet) String() string {",
          "359: }",
          "",
          "[Removed Lines]",
          "357:  return fmt.Sprintf(\"ReqID(%v)Op(%v)PartitionID(%v)ResultCode(%v)ExID(%v)ExtOffset(%v)KernelOff(%v)Type(%v)Seq(%v)\",",
          "358:   p.ReqID, p.GetOpMsg(), p.PartitionID, p.GetResultMsg(), p.ExtentID, p.ExtentOffset, p.KernelOffset, p.ExtentType, p.VerSeq)",
          "",
          "[Added Lines]",
          "357:  return fmt.Sprintf(\"ReqID(%v)Op(%v)PartitionID(%v)ResultCode(%v)ExID(%v)ExtOffset(%v)KernelOff(%v)Type(%v)Seq(%v)Size(%v)\",",
          "358:   p.ReqID, p.GetOpMsg(), p.PartitionID, p.GetResultMsg(), p.ExtentID, p.ExtentOffset, p.KernelOffset, p.ExtentType, p.VerSeq, p.Size)",
          "",
          "---------------"
        ],
        "sdk/data/stream/extent_cache.go||sdk/data/stream/extent_cache.go": [
          "File: sdk/data/stream/extent_cache.go -> sdk/data/stream/extent_cache.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:  cache.root.DescendLessOrEqual(pivot, func(i btree.Item) bool {",
          "507:   ek := i.(*proto.ExtentKey)",
          "508:   lower.FileOffset = ek.FileOffset",
          "510:   return false",
          "511:  })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:   log.LogDebugf(\"action[ExtentCache.PrepareWriteRequests] ek [%v], pivot[%v]\", ek, pivot)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:   ekStart := int(ek.FileOffset)",
          "516:   ekEnd := int(ek.FileOffset) + int(ek.Size)",
          "520:   if start <= ekStart {",
          "521:    if end <= ekStart {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:   log.LogDebugf(\"action[ExtentCache.PrepareWriteRequests]: ino(%v) start(%v) end(%v) ekStart(%v) ekEnd(%v)\", cache.inode, start, end, ekStart, ekEnd)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554:   }",
          "555:  })",
          "558:  if start < end {",
          "560:   req := NewExtentRequest(start, end-start, data[start-offset:end-offset], nil)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:  log.LogDebugf(\"PrepareWriteRequests: ino(%v) start(%v) end(%v)\", cache.inode, start, end)",
          "",
          "---------------"
        ],
        "sdk/data/stream/extent_handler.go||sdk/data/stream/extent_handler.go": [
          "File: sdk/data/stream/extent_handler.go -> sdk/data/stream/extent_handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: func (eh *ExtentHandler) String() string {",
          "142: }",
          "144: func (eh *ExtentHandler) write(data []byte, offset, size int, direct bool) (ek *proto.ExtentKey, err error) {",
          "",
          "[Removed Lines]",
          "140:  return fmt.Sprintf(\"ExtentHandler{ID(%v)Inode(%v)FileOffset(%v)StoreMode(%v)Status(%v)}\",",
          "141:   eh.id, eh.inode, eh.fileOffset, eh.storeMode, eh.status)",
          "",
          "[Added Lines]",
          "140:  return fmt.Sprintf(\"ExtentHandler{ID(%v)Inode(%v)FileOffset(%v)StoreMode(%v)Status(%v)Dp(%v)}\",",
          "141:   eh.id, eh.inode, eh.fileOffset, eh.storeMode, eh.status, eh.dp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   case packet := <-eh.request:",
          "220:    if eh.getStatus() >= ExtentStatusRecovery {",
          "221:     log.LogWarnf(\"sender in recovery: eh(%v) packet(%v)\", eh, packet)",
          "222:     eh.reply <- packet",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:    log.LogDebugf(\"ExtentHandler sender begin: eh(%v) packet(%v)\", eh, packet)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:    }",
          "260:    packet.StartT = time.Now().UnixNano()",
          "264:    if err = packet.writeToConn(eh.conn); err != nil {",
          "265:     log.LogWarnf(\"sender writeTo: failed, eh(%v) err(%v) packet(%v)\", eh, err, packet)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:    log.LogDebugf(\"ExtentHandler sender: extent allocated, eh(%v) dp(%v) extID(%v) packet(%v)\", eh, eh.dp, eh.extID, packet.GetUniqueLogId())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:   case packet := <-eh.reply:",
          "288:    eh.processReply(packet)",
          "290:   case <-eh.doneReceiver:",
          "291:    log.LogDebugf(\"receiver done: eh(%v) size(%v) ek(%v)\", eh, eh.size, eh.key)",
          "292:    return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:    log.LogDebugf(\"receiver begin: eh(%v) packet(%v)\", eh, packet.GetUniqueLogId())",
          "289:    log.LogDebugf(\"receiver end: eh(%v) packet(%v)\", eh, packet.GetUniqueLogId())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:  if reply.ResultCode != proto.OpOk {",
          "326:   if reply.ResultCode != proto.ErrCodeVersionOpError {",
          "327:    errmsg := fmt.Sprintf(\"reply NOK: reply(%v)\", reply)",
          "328:    eh.processReplyError(packet, errmsg)",
          "329:    return",
          "330:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:    log.LogDebugf(\"processReply packet (%v) errmsg (%v)\", packet, errmsg)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "367:    ExtentOffset: extOffset,",
          "368:    Size:         packet.Size,",
          "369:    SnapInfo: &proto.ExtSnapInfo{",
          "371:    },",
          "372:   }",
          "373:  } else {",
          "",
          "[Removed Lines]",
          "370:     VerSeq: eh.stream.verSeq,",
          "",
          "[Added Lines]",
          "371:     VerSeq: reply.VerSeq,",
          "",
          "---------------"
        ],
        "sdk/data/stream/stream_writer.go||sdk/data/stream/stream_writer.go": [
          "File: sdk/data/stream/stream_writer.go -> sdk/data/stream/stream_writer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "694: func (s *Streamer) tryInitExtentHandlerByLastEk(offset, size int) (isLastEkVerNotEqual bool) {",
          "695:  storeMode := s.GetStoreMod(offset, size)",
          "707:    }",
          "740:    }",
          "742:   } else {",
          "744:   }",
          "745:  }",
          "",
          "[Removed Lines]",
          "698:  if storeMode == proto.NormalExtentType && (s.handler == nil || s.handler != nil && s.handler.fileOffset+s.handler.size != offset) {",
          "699:   if currentEK := s.extents.GetEndForAppendWrite(uint64(offset), s.verSeq, false); currentEK != nil && !storage.IsTinyExtent(currentEK.ExtentId) {",
          "700:    if currentEK.GetSeq() != s.verSeq {",
          "701:     log.LogDebugf(\"tryInitExtentHandlerByLastEk. exist ek seq %v vs request seq %v\", currentEK.GetSeq(), s.verSeq)",
          "702:     if int(currentEK.ExtentOffset)+int(currentEK.Size)+size > util.ExtentSize {",
          "703:      s.closeOpenHandler()",
          "704:      return",
          "705:     }",
          "706:     isLastEkVerNotEqual = true",
          "709:    log.LogDebugf(\"tryInitExtentHandlerByLastEk: found ek in ExtentCache, extent_id(%v) offset(%v) size(%v), ekoffset(%v) eksize(%v) exist ek seq %v vs request seq %v\",",
          "710:     currentEK.ExtentId, offset, size, currentEK.FileOffset, currentEK.Size, currentEK.GetSeq(), s.verSeq)",
          "711:    _, pidErr := s.client.dataWrapper.GetDataPartition(currentEK.PartitionId)",
          "712:    if pidErr == nil {",
          "713:     seq := currentEK.GetSeq()",
          "714:     if isLastEkVerNotEqual {",
          "715:      seq = s.verSeq",
          "716:     }",
          "717:     handler := NewExtentHandler(s, int(currentEK.FileOffset), storeMode, int(currentEK.Size))",
          "718:     handler.key = &proto.ExtentKey{",
          "719:      FileOffset:   currentEK.FileOffset,",
          "720:      PartitionId:  currentEK.PartitionId,",
          "721:      ExtentId:     currentEK.ExtentId,",
          "722:      ExtentOffset: currentEK.ExtentOffset,",
          "723:      Size:         currentEK.Size,",
          "724:      SnapInfo: &proto.ExtSnapInfo{",
          "725:       VerSeq: seq,",
          "726:      },",
          "727:     }",
          "729:     if s.handler != nil {",
          "730:      log.LogDebugf(\"tryInitExtentHandlerByLastEk: close old handler, currentEK.PartitionId(%v)\",",
          "731:       currentEK.PartitionId)",
          "732:      s.closeOpenHandler()",
          "733:     }",
          "735:     s.handler = handler",
          "736:     s.dirty = false",
          "737:     log.LogDebugf(\"tryInitExtentHandlerByLastEk: currentEK.PartitionId(%v) found\", currentEK.PartitionId)",
          "738:    } else {",
          "739:     log.LogDebugf(\"tryInitExtentHandlerByLastEk: currentEK.PartitionId(%v) not found\", currentEK.PartitionId)",
          "743:    log.LogDebugf(\"tryInitExtentHandlerByLastEk: not found ek in ExtentCache, offset(%v) size(%v)\", offset, size)",
          "",
          "[Added Lines]",
          "696:  getEndEkFunc := func() *proto.ExtentKey {",
          "697:   if ek := s.extents.GetEndForAppendWrite(uint64(offset), s.verSeq, false); ek != nil && !storage.IsTinyExtent(ek.ExtentId) {",
          "698:    return ek",
          "699:   }",
          "700:   return nil",
          "701:  }",
          "702:  initExtentHandlerFunc := func(currentEK *proto.ExtentKey) {",
          "703:   if currentEK.GetSeq() != s.verSeq {",
          "704:    log.LogDebugf(\"tryInitExtentHandlerByLastEk. exist ek seq %v vs request seq %v\", currentEK.GetSeq(), s.verSeq)",
          "705:    if int(currentEK.ExtentOffset)+int(currentEK.Size)+size > util.ExtentSize {",
          "706:     s.closeOpenHandler()",
          "707:     return",
          "708:    }",
          "709:    isLastEkVerNotEqual = true",
          "710:   }",
          "712:   log.LogDebugf(\"tryInitExtentHandlerByLastEk: found ek in ExtentCache, extent_id(%v) req_offset(%v) req_size(%v), currentEK [%v] streamer seq %v\",",
          "713:    currentEK.ExtentId, offset, size, currentEK, s.verSeq)",
          "714:   _, pidErr := s.client.dataWrapper.GetDataPartition(currentEK.PartitionId)",
          "715:   if pidErr == nil {",
          "716:    seq := currentEK.GetSeq()",
          "717:    if isLastEkVerNotEqual {",
          "718:     seq = s.verSeq",
          "720:    handler := NewExtentHandler(s, int(currentEK.FileOffset), storeMode, int(currentEK.Size))",
          "721:    handler.key = &proto.ExtentKey{",
          "722:     FileOffset:   currentEK.FileOffset,",
          "723:     PartitionId:  currentEK.PartitionId,",
          "724:     ExtentId:     currentEK.ExtentId,",
          "725:     ExtentOffset: currentEK.ExtentOffset,",
          "726:     Size:         currentEK.Size,",
          "727:     SnapInfo: &proto.ExtSnapInfo{",
          "728:      VerSeq: seq,",
          "729:     },",
          "730:    }",
          "733:    if s.handler != nil {",
          "734:     log.LogDebugf(\"tryInitExtentHandlerByLastEk: close old handler, currentEK.PartitionId(%v)\",",
          "735:      currentEK.PartitionId)",
          "736:     s.closeOpenHandler()",
          "737:    }",
          "739:    s.handler = handler",
          "740:    s.dirty = false",
          "741:    log.LogDebugf(\"tryInitExtentHandlerByLastEk: currentEK.PartitionId(%v) found\", currentEK.PartitionId)",
          "742:   } else {",
          "743:    log.LogDebugf(\"tryInitExtentHandlerByLastEk: currentEK.PartitionId(%v) not found\", currentEK.PartitionId)",
          "744:   }",
          "745:  }",
          "747:  if storeMode == proto.NormalExtentType {",
          "748:   if s.handler == nil {",
          "749:    log.LogDebugf(\"tryInitExtentHandlerByLastEk: handler nil\")",
          "750:    if ek := getEndEkFunc(); ek != nil {",
          "751:     initExtentHandlerFunc(ek)",
          "754:    if s.handler.fileOffset+s.handler.size == offset {",
          "755:     if s.extents.Max().GetSeq() == s.verSeq {",
          "756:      log.LogDebugf(\"tryInitExtentHandlerByLastEk: seq %vequal\", s.verSeq)",
          "757:      return",
          "758:     }",
          "759:     log.LogDebugf(\"tryInitExtentHandlerByLastEk: seq not equal %v:%v\", s.extents.Max().GetSeq(), s.verSeq)",
          "760:     initExtentHandlerFunc(s.extents.Max())",
          "761:     return",
          "762:    } else {",
          "763:     if ek := getEndEkFunc(); ek != nil {",
          "764:      log.LogDebugf(\"tryInitExtentHandlerByLastEk: getEndEkFunc get ek %v\", ek)",
          "765:      initExtentHandlerFunc(ek)",
          "766:     } else {",
          "767:      log.LogDebugf(\"tryInitExtentHandlerByLastEk: not found ek\")",
          "768:     }",
          "769:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "761:  if proto.IsHot(s.client.volumeType) {",
          "762:   if reUseEk {",
          "763:    if isLastEkVerNotEqual := s.tryInitExtentHandlerByLastEk(offset, size); isLastEkVerNotEqual {",
          "765:     status = LastEKVersionNotEqual",
          "766:     return",
          "767:    }",
          "768:   }",
          "769:   for i := 0; i < MaxNewHandlerRetry; i++ {",
          "770:    if s.handler == nil {",
          "771:     s.handler = NewExtentHandler(s, offset, storeMode, 0)",
          "",
          "[Removed Lines]",
          "764:     log.LogDebugf(\"doAppendWrite enter: ino(%v) tryInitExtentHandlerByLastEk worked\", s.inode)",
          "",
          "[Added Lines]",
          "790:     log.LogDebugf(\"doAppendWrite enter: ino(%v) tryInitExtentHandlerByLastEk worked but seq not equal\", s.inode)",
          "794:   } else if s.handler != nil {",
          "795:    s.closeOpenHandler()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "776:     continue",
          "777:    }",
          "778:    ek, err = s.handler.write(data, offset, size, direct)",
          "779:    if err == nil && ek != nil {",
          "780:     if !s.dirty {",
          "781:      s.dirtylist.Put(s.handler)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "808:    ek.SetSeq(s.verSeq)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da3e39371840ebf9c450bf664da989a9d665d447",
      "candidate_info": {
        "commit_hash": "da3e39371840ebf9c450bf664da989a9d665d447",
        "repo": "cubefs/cubefs",
        "commit_url": "https://github.com/cubefs/cubefs/commit/da3e39371840ebf9c450bf664da989a9d665d447",
        "files": [
          "metanode/extend.go"
        ],
        "message": "fix(metanode):xattr read snapshot according verlist which arranged in reverse order\n\nSigned-off-by: leonrayang <chl696@sina.com>",
        "before_after_code_files": [
          "metanode/extend.go||metanode/extend.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cubefs/cubefs/pull/2761"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "metanode/extend.go||metanode/extend.go": [
          "File: metanode/extend.go -> metanode/extend.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   return e",
          "62:  }",
          "63:  if isInitSnapVer(ver) {",
          "65:    return nil",
          "66:   }",
          "68:  }",
          "69:  e.versionMu.RLock()",
          "70:  defer e.versionMu.RUnlock()",
          "72:   if e.multiVers[i].verSeq <= ver {",
          "73:    return e.multiVers[i]",
          "74:   }",
          "",
          "[Removed Lines]",
          "64:   if e.multiVers[0].verSeq != 0 {",
          "67:   return e.multiVers[0]",
          "71:  for i := len(e.multiVers) - 1; i >= 0; i-- {",
          "",
          "[Added Lines]",
          "64:   if e.GetMinVer() != 0 {",
          "67:   return e.multiVers[len(e.multiVers)-1]",
          "71:  for i := 0; i < len(e.multiVers)-1; i++ {",
          "",
          "---------------"
        ]
      }
    }
  ]
}