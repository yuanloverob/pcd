{
  "cve_id": "CVE-2023-3635",
  "cve_desc": "GzipSource does not handle an exception that might be raised when parsing a malformed gzip buffer. This may lead to denial of service of the Okio client when handling a crafted GZIP archive, by using the GzipSource class.\n\n",
  "repo": "square/okio",
  "patch_hash": "81bce1a30af244550b0324597720e4799281da7b",
  "patch_info": {
    "commit_hash": "81bce1a30af244550b0324597720e4799281da7b",
    "repo": "square/okio",
    "commit_url": "https://github.com/square/okio/commit/81bce1a30af244550b0324597720e4799281da7b",
    "files": [
      "okio/src/jvmMain/kotlin/okio/GzipSource.kt",
      "okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt"
    ],
    "message": "Fix a bug where xlen larger than 0x7fff was rejected (#1280)\n\nWe treated this short value as unsigned and it should have been\ntreated as signed.",
    "before_after_code_files": [
      "okio/src/jvmMain/kotlin/okio/GzipSource.kt||okio/src/jvmMain/kotlin/okio/GzipSource.kt",
      "okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt||okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt"
    ]
  },
  "patch_diff": {
    "okio/src/jvmMain/kotlin/okio/GzipSource.kt||okio/src/jvmMain/kotlin/okio/GzipSource.kt": [
      "File: okio/src/jvmMain/kotlin/okio/GzipSource.kt -> okio/src/jvmMain/kotlin/okio/GzipSource.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:     if (flags.getBit(FEXTRA)) {",
      "118:       source.require(2)",
      "119:       if (fhcrc) updateCrc(source.buffer, 0, 2)",
      "121:       source.require(xlen)",
      "122:       if (fhcrc) updateCrc(source.buffer, 0, xlen)",
      "123:       source.skip(xlen)",
      "",
      "[Removed Lines]",
      "120:       val xlen = source.buffer.readShortLe().toLong()",
      "",
      "[Added Lines]",
      "120:       val xlen = (source.buffer.readShortLe().toInt() and 0xffff).toLong()",
      "",
      "---------------"
    ],
    "okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt||okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt": [
      "File: okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt -> okio/src/jvmTest/kotlin/okio/GzipKotlinTest.kt",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: class GzipKotlinTest {",
      "24:   @Test fun sink() {",
      "25:     val data = Buffer()",
      "28:     assertEquals(\"1f8b0800000000000000f3c8540400dac59e7903000000\", data.readByteString().hex())",
      "29:   }",
      "31:   @Test fun source() {",
      "32:     val buffer = Buffer().write(\"1f8b0800000000000000f3c8540400dac59e7903000000\".decodeHex())",
      "35:   }",
      "36: }",
      "",
      "[Removed Lines]",
      "26:     val gzip = (data as Sink).gzip()",
      "27:     gzip.buffer().writeUtf8(\"Hi!\").close()",
      "33:     val gzip = (buffer as Source).gzip()",
      "34:     assertEquals(\"Hi!\", gzip.buffer().readUtf8())",
      "",
      "[Added Lines]",
      "26:     (data as Sink).gzip().buffer().use { gzip ->",
      "27:       gzip.writeUtf8(\"Hi!\")",
      "28:     }",
      "34:     (buffer as Source).gzip().buffer().use { gzip ->",
      "35:       assertEquals(\"Hi!\", gzip.readUtf8())",
      "36:     }",
      "37:   }",
      "39:   @Test fun extraLongXlen() {",
      "40:     val xlen = 0xffff",
      "41:     val buffer = Buffer()",
      "42:       .write(\"1f8b0804000000000000\".decodeHex())",
      "43:       .writeShort(xlen)",
      "44:       .write(ByteArray(xlen))",
      "45:       .write(\"f3c8540400dac59e7903000000\".decodeHex())",
      "46:     (buffer as Source).gzip().buffer().use { gzip ->",
      "47:       assertEquals(\"Hi!\", gzip.readUtf8())",
      "48:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4fa875dc24950680c386e4b1c593660ce4f7839",
      "candidate_info": {
        "commit_hash": "b4fa875dc24950680c386e4b1c593660ce4f7839",
        "repo": "square/okio",
        "commit_url": "https://github.com/square/okio/commit/b4fa875dc24950680c386e4b1c593660ce4f7839",
        "files": [
          "okio/src/main/java/okio/GzipSource.java",
          "okio/src/test/java/okio/GzipSourceTest.java"
        ],
        "message": "Fix a bug where xlen larger than 0x7fff was rejected (#1334)\n\nBackported from 81bce1a30af244550b0324597720e4799281da7b",
        "before_after_code_files": [
          "okio/src/main/java/okio/GzipSource.java||okio/src/main/java/okio/GzipSource.java",
          "okio/src/test/java/okio/GzipSourceTest.java||okio/src/test/java/okio/GzipSourceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "okio/src/main/java/okio/GzipSource.java||okio/src/main/java/okio/GzipSource.java": [
          "File: okio/src/main/java/okio/GzipSource.java -> okio/src/main/java/okio/GzipSource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     if (((flags >> FEXTRA) & 1) == 1) {",
          "128:       source.require(2);",
          "129:       if (fhcrc) updateCrc(source.buffer(), 0, 2);",
          "131:       source.require(xlen);",
          "132:       if (fhcrc) updateCrc(source.buffer(), 0, xlen);",
          "133:       source.skip(xlen);",
          "",
          "[Removed Lines]",
          "130:       int xlen = source.buffer().readShortLe();",
          "",
          "[Added Lines]",
          "130:       int xlen = source.buffer().readShortLe() & 0xffff;",
          "",
          "---------------"
        ],
        "okio/src/test/java/okio/GzipSourceTest.java||okio/src/test/java/okio/GzipSourceTest.java": [
          "File: okio/src/test/java/okio/GzipSourceTest.java -> okio/src/test/java/okio/GzipSourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package okio;",
          "18: import java.io.IOException;",
          "19: import java.util.zip.CRC32;",
          "22: import static okio.Util.UTF_8;",
          "23: import static org.junit.Assert.assertEquals;",
          "",
          "[Removed Lines]",
          "20: import org.junit.Test;",
          "",
          "[Added Lines]",
          "18: import org.junit.Test;",
          "20: import java.io.ByteArrayOutputStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:     }",
          "183:   }",
          "185:   private ByteString gzipHeaderWithFlags(byte flags) {",
          "186:     byte[] result = gzipHeader.toByteArray();",
          "187:     result[3] = flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:   @Test public void extraLongXlen() throws Exception {",
          "188:     int xlen = 0xffff;",
          "189:     Buffer gzippedSource = new Buffer()",
          "190:         .write(gzipHeaderWithFlags((byte) 0x04));",
          "191:     gzippedSource.writeShort((short) xlen);",
          "192:     gzippedSource.write(new byte[xlen]);",
          "193:     gzippedSource.write(ByteString.decodeHex(\"f3c8540400dac59e7903000000\"));",
          "195:     Buffer gunzipped = gunzip(gzippedSource);",
          "196:     assertEquals(\"Hi!\", gunzipped.readUtf8());",
          "197:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}