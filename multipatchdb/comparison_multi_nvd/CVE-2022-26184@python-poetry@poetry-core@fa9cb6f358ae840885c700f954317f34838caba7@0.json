{
  "cve_id": "CVE-2022-26184",
  "cve_desc": "Poetry v1.1.9 and below was discovered to contain an untrusted search path which causes the application to behave in unexpected ways when users execute Poetry commands in a directory containing malicious content. This vulnerability occurs when the application is ran on Windows OS.",
  "repo": "python-poetry/poetry-core",
  "patch_hash": "fa9cb6f358ae840885c700f954317f34838caba7",
  "patch_info": {
    "commit_hash": "fa9cb6f358ae840885c700f954317f34838caba7",
    "repo": "python-poetry/poetry-core",
    "commit_url": "https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7",
    "files": [
      "poetry/core/vcs/git.py",
      "tests/vcs/test_vcs.py"
    ],
    "message": "Ensure the full path to git is used on Windows\n\n# Conflicts:\n#\tpoetry/core/vcs/git.py\n#\ttests/vcs/test_vcs.py",
    "before_after_code_files": [
      "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
      "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
    ]
  },
  "patch_diff": {
    "poetry/core/vcs/git.py||poetry/core/vcs/git.py": [
      "File: poetry/core/vcs/git.py -> poetry/core/vcs/git.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: from typing import Any",
      "7: from typing import Optional",
      "9: from poetry.core.utils._compat import Path",
      "10: from poetry.core.utils._compat import decode",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: from poetry.core.utils._compat import PY36",
      "10: from poetry.core.utils._compat import WINDOWS",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "154: GitUrl = namedtuple(\"GitUrl\", [\"url\", \"revision\"])",
      "157: class GitConfig:",
      "158:     def __init__(self, requires_git_presence=False):  # type: (bool) -> None",
      "159:         self._config = {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159: _executable = None",
      "162: def executable():",
      "163:     global _executable",
      "165:     if _executable is not None:",
      "166:         return _executable",
      "168:     if WINDOWS and PY36:",
      "169:         # Finding git via where.exe",
      "170:         where = \"%WINDIR%\\\\System32\\\\where.exe\"",
      "171:         paths = decode(",
      "172:             subprocess.check_output([where, \"git\"], shell=True, encoding=\"oem\")",
      "173:         ).split(\"\\n\")",
      "174:         for path in paths:",
      "175:             if not path:",
      "176:                 continue",
      "178:             path = Path(path.strip())",
      "179:             try:",
      "180:                 path.relative_to(Path.cwd())",
      "181:             except ValueError:",
      "182:                 _executable = str(path)",
      "184:                 break",
      "185:     else:",
      "186:         _executable = \"git\"",
      "188:     if _executable is None:",
      "189:         raise RuntimeError(\"Unable to find a valid git executable\")",
      "191:     return _executable",
      "194: def _reset_executable():",
      "195:     global _executable",
      "197:     _executable = None",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "161:         try:",
      "162:             config_list = decode(",
      "163:                 subprocess.check_output(",
      "165:                 )",
      "166:             )",
      "",
      "[Removed Lines]",
      "164:                     [\"git\", \"config\", \"-l\"], stderr=subprocess.STDOUT",
      "",
      "[Added Lines]",
      "207:                     [executable(), \"config\", \"-l\"], stderr=subprocess.STDOUT",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "310:             ) + args",
      "312:         return decode(",
      "314:         ).strip()",
      "316:     def _check_parameter(self, parameter):  # type: (str) -> None",
      "",
      "[Removed Lines]",
      "313:             subprocess.check_output([\"git\"] + list(args), stderr=subprocess.STDOUT)",
      "",
      "[Added Lines]",
      "356:             subprocess.check_output(",
      "357:                 [executable()] + list(args), stderr=subprocess.STDOUT",
      "358:             )",
      "",
      "---------------"
    ],
    "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py": [
      "File: tests/vcs/test_vcs.py -> tests/vcs/test_vcs.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "3: from poetry.core.utils._compat import Path",
      "4: from poetry.core.vcs.git import Git",
      "5: from poetry.core.vcs.git import GitError",
      "6: from poetry.core.vcs.git import GitUrl",
      "7: from poetry.core.vcs.git import ParsedUrl",
      "10: @pytest.mark.parametrize(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import subprocess",
      "5: from poetry.core.utils._compat import PY36",
      "6: from poetry.core.utils._compat import WINDOWS",
      "12: from poetry.core.vcs.git import _reset_executable",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "276: def test_git_rev_parse_raises_error_on_invalid_repository():",
      "277:     with pytest.raises(GitError):",
      "278:         Git().rev_parse(\"-u./payload\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286: @pytest.mark.skipif(",
      "287:     not WINDOWS or not PY36,",
      "288:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
      "289: )",
      "290: def test_ensure_absolute_path_to_git(mocker):",
      "291:     _reset_executable()",
      "293:     def checkout_output(cmd, *args, **kwargs):",
      "294:         if Path(cmd[0]).name == \"where.exe\":",
      "295:             return \"\\n\".join(",
      "296:                 [str(Path.cwd().joinpath(\"git.exe\")), \"C:\\\\Git\\\\cmd\\\\git.exe\"]",
      "297:             )",
      "299:         return b\"\"",
      "301:     mock = mocker.patch.object(subprocess, \"check_output\", side_effect=checkout_output)",
      "303:     Git().run(\"config\")",
      "305:     assert mock.call_args_list[-1][0][0] == [",
      "306:         \"C:\\\\Git\\\\cmd\\\\git.exe\",",
      "307:         \"config\",",
      "308:     ]",
      "311: @pytest.mark.skipif(",
      "312:     not WINDOWS or not PY36,",
      "313:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
      "314: )",
      "315: def test_ensure_existing_git_executable_is_found(mocker):",
      "316:     mock = mocker.patch.object(subprocess, \"check_output\", return_value=b\"\")",
      "318:     Git().run(\"config\")",
      "320:     cmd = Path(mock.call_args_list[-1][0][0][0])",
      "322:     assert cmd.is_absolute()",
      "323:     assert cmd.name == \"git.exe\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e1a109a1009daaab2367ce90c997f0cbbb0c1d1",
      "candidate_info": {
        "commit_hash": "1e1a109a1009daaab2367ce90c997f0cbbb0c1d1",
        "repo": "python-poetry/poetry-core",
        "commit_url": "https://github.com/python-poetry/poetry-core/commit/1e1a109a1009daaab2367ce90c997f0cbbb0c1d1",
        "files": [
          "poetry/core/vcs/git.py",
          "tests/vcs/test_vcs.py"
        ],
        "message": "Ensure the full path to git is used on Windows",
        "before_after_code_files": [
          "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
          "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
            "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
          ],
          "candidate": [
            "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
            "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
          ]
        }
      },
      "candidate_diff": {
        "poetry/core/vcs/git.py||poetry/core/vcs/git.py": [
          "File: poetry/core/vcs/git.py -> poetry/core/vcs/git.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from typing import Any",
          "7: from typing import Optional",
          "10: pattern_formats = {",
          "11:     \"protocol\": r\"\\w+\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from poetry.core.utils._compat import WINDOWS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183: GitUrl = namedtuple(\"GitUrl\", [\"url\", \"revision\", \"subdirectory\"])",
          "186: class GitConfig:",
          "187:     def __init__(self, requires_git_presence: bool = False) -> None:",
          "188:         self._config = {}",
          "190:         try:",
          "191:             config_list = subprocess.check_output(",
          "193:             ).decode()",
          "195:             m = re.findall(\"(?ms)^([^=]+)=(.*?)$\", config_list)",
          "",
          "[Removed Lines]",
          "192:                 [\"git\", \"config\", \"-l\"], stderr=subprocess.STDOUT",
          "",
          "[Added Lines]",
          "188: _executable: Optional[str] = None",
          "191: def executable():",
          "192:     global _executable",
          "194:     if _executable is not None:",
          "195:         return _executable",
          "197:     if WINDOWS:",
          "198:         # Finding git via where.exe",
          "199:         where = \"%WINDIR%\\\\System32\\\\where.exe\"",
          "200:         paths = subprocess.check_output(",
          "201:             [where, \"git\"], shell=True, encoding=\"oem\"",
          "202:         ).split(\"\\n\")",
          "203:         for path in paths:",
          "204:             if not path:",
          "205:                 continue",
          "207:             path = Path(path.strip())",
          "208:             try:",
          "209:                 path.relative_to(Path.cwd())",
          "210:             except ValueError:",
          "211:                 _executable = str(path)",
          "213:                 break",
          "214:     else:",
          "215:         _executable = \"git\"",
          "217:     if _executable is None:",
          "218:         raise RuntimeError(\"Unable to find a valid git executable\")",
          "220:     return _executable",
          "223: def _reset_executable():",
          "224:     global _executable",
          "226:     _executable = None",
          "235:                 [executable(), \"config\", \"-l\"], stderr=subprocess.STDOUT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344:             ) + args",
          "346:         return (",
          "348:             .decode()",
          "349:             .strip()",
          "350:         )",
          "",
          "[Removed Lines]",
          "347:             subprocess.check_output([\"git\"] + list(args), stderr=subprocess.STDOUT)",
          "",
          "[Added Lines]",
          "390:             subprocess.check_output(",
          "391:                 [executable()] + list(args), stderr=subprocess.STDOUT",
          "392:             )",
          "",
          "---------------"
        ],
        "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py": [
          "File: tests/vcs/test_vcs.py -> tests/vcs/test_vcs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from pathlib import Path",
          "3: import pytest",
          "5: from poetry.core.vcs.git import Git",
          "6: from poetry.core.vcs.git import GitError",
          "7: from poetry.core.vcs.git import GitUrl",
          "8: from poetry.core.vcs.git import ParsedUrl",
          "11: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import subprocess",
          "7: from poetry.core.utils._compat import WINDOWS",
          "12: from poetry.core.vcs.git import _reset_executable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366: def test_git_rev_parse_raises_error_on_invalid_repository():",
          "367:     with pytest.raises(GitError):",
          "368:         Git().rev_parse(\"-u./payload\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: @pytest.mark.skipif(",
          "376:     not WINDOWS,",
          "377:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
          "378: )",
          "379: def test_ensure_absolute_path_to_git(mocker):",
          "380:     _reset_executable()",
          "382:     def checkout_output(cmd, *args, **kwargs):",
          "383:         if Path(cmd[0]).name == \"where.exe\":",
          "384:             return \"\\n\".join(",
          "385:                 [",
          "386:                     str(Path.cwd().joinpath(\"git.exe\")),",
          "387:                     \"C:\\\\Git\\\\cmd\\\\git.exe\",",
          "388:                 ]",
          "389:             )",
          "391:         return b\"\"",
          "393:     mock = mocker.patch.object(subprocess, \"check_output\", side_effect=checkout_output)",
          "395:     Git().run(\"config\")",
          "397:     assert mock.call_args_list[-1][0][0] == [",
          "398:         \"C:\\\\Git\\\\cmd\\\\git.exe\",",
          "399:         \"config\",",
          "400:     ]",
          "403: @pytest.mark.skipif(",
          "404:     not WINDOWS,",
          "405:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
          "406: )",
          "407: def test_ensure_existing_git_executable_is_found(mocker):",
          "408:     mock = mocker.patch.object(subprocess, \"check_output\", return_value=b\"\")",
          "410:     Git().run(\"config\")",
          "412:     cmd = Path(mock.call_args_list[-1][0][0][0])",
          "414:     assert cmd.is_absolute()",
          "415:     assert cmd.name == \"git.exe\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa9cb6f358ae840885c700f954317f34838caba7",
      "candidate_info": {
        "commit_hash": "fa9cb6f358ae840885c700f954317f34838caba7",
        "repo": "python-poetry/poetry-core",
        "commit_url": "https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7",
        "files": [
          "poetry/core/vcs/git.py",
          "tests/vcs/test_vcs.py"
        ],
        "message": "Ensure the full path to git is used on Windows\n\n# Conflicts:\n#\tpoetry/core/vcs/git.py\n#\ttests/vcs/test_vcs.py",
        "before_after_code_files": [
          "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
          "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
            "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
          ],
          "candidate": [
            "poetry/core/vcs/git.py||poetry/core/vcs/git.py",
            "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py"
          ]
        }
      },
      "candidate_diff": {
        "poetry/core/vcs/git.py||poetry/core/vcs/git.py": [
          "File: poetry/core/vcs/git.py -> poetry/core/vcs/git.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from typing import Any",
          "7: from typing import Optional",
          "9: from poetry.core.utils._compat import Path",
          "10: from poetry.core.utils._compat import decode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from poetry.core.utils._compat import PY36",
          "10: from poetry.core.utils._compat import WINDOWS",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: GitUrl = namedtuple(\"GitUrl\", [\"url\", \"revision\"])",
          "157: class GitConfig:",
          "158:     def __init__(self, requires_git_presence=False):  # type: (bool) -> None",
          "159:         self._config = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: _executable = None",
          "162: def executable():",
          "163:     global _executable",
          "165:     if _executable is not None:",
          "166:         return _executable",
          "168:     if WINDOWS and PY36:",
          "169:         # Finding git via where.exe",
          "170:         where = \"%WINDIR%\\\\System32\\\\where.exe\"",
          "171:         paths = decode(",
          "172:             subprocess.check_output([where, \"git\"], shell=True, encoding=\"oem\")",
          "173:         ).split(\"\\n\")",
          "174:         for path in paths:",
          "175:             if not path:",
          "176:                 continue",
          "178:             path = Path(path.strip())",
          "179:             try:",
          "180:                 path.relative_to(Path.cwd())",
          "181:             except ValueError:",
          "182:                 _executable = str(path)",
          "184:                 break",
          "185:     else:",
          "186:         _executable = \"git\"",
          "188:     if _executable is None:",
          "189:         raise RuntimeError(\"Unable to find a valid git executable\")",
          "191:     return _executable",
          "194: def _reset_executable():",
          "195:     global _executable",
          "197:     _executable = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:         try:",
          "162:             config_list = decode(",
          "163:                 subprocess.check_output(",
          "165:                 )",
          "166:             )",
          "",
          "[Removed Lines]",
          "164:                     [\"git\", \"config\", \"-l\"], stderr=subprocess.STDOUT",
          "",
          "[Added Lines]",
          "207:                     [executable(), \"config\", \"-l\"], stderr=subprocess.STDOUT",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "310:             ) + args",
          "312:         return decode(",
          "314:         ).strip()",
          "316:     def _check_parameter(self, parameter):  # type: (str) -> None",
          "",
          "[Removed Lines]",
          "313:             subprocess.check_output([\"git\"] + list(args), stderr=subprocess.STDOUT)",
          "",
          "[Added Lines]",
          "356:             subprocess.check_output(",
          "357:                 [executable()] + list(args), stderr=subprocess.STDOUT",
          "358:             )",
          "",
          "---------------"
        ],
        "tests/vcs/test_vcs.py||tests/vcs/test_vcs.py": [
          "File: tests/vcs/test_vcs.py -> tests/vcs/test_vcs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "3: from poetry.core.utils._compat import Path",
          "4: from poetry.core.vcs.git import Git",
          "5: from poetry.core.vcs.git import GitError",
          "6: from poetry.core.vcs.git import GitUrl",
          "7: from poetry.core.vcs.git import ParsedUrl",
          "10: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import subprocess",
          "5: from poetry.core.utils._compat import PY36",
          "6: from poetry.core.utils._compat import WINDOWS",
          "12: from poetry.core.vcs.git import _reset_executable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276: def test_git_rev_parse_raises_error_on_invalid_repository():",
          "277:     with pytest.raises(GitError):",
          "278:         Git().rev_parse(\"-u./payload\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286: @pytest.mark.skipif(",
          "287:     not WINDOWS or not PY36,",
          "288:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
          "289: )",
          "290: def test_ensure_absolute_path_to_git(mocker):",
          "291:     _reset_executable()",
          "293:     def checkout_output(cmd, *args, **kwargs):",
          "294:         if Path(cmd[0]).name == \"where.exe\":",
          "295:             return \"\\n\".join(",
          "296:                 [str(Path.cwd().joinpath(\"git.exe\")), \"C:\\\\Git\\\\cmd\\\\git.exe\"]",
          "297:             )",
          "299:         return b\"\"",
          "301:     mock = mocker.patch.object(subprocess, \"check_output\", side_effect=checkout_output)",
          "303:     Git().run(\"config\")",
          "305:     assert mock.call_args_list[-1][0][0] == [",
          "306:         \"C:\\\\Git\\\\cmd\\\\git.exe\",",
          "307:         \"config\",",
          "308:     ]",
          "311: @pytest.mark.skipif(",
          "312:     not WINDOWS or not PY36,",
          "313:     reason=\"Retrieving the complete path to git is only necessary on Windows, for security reasons\",",
          "314: )",
          "315: def test_ensure_existing_git_executable_is_found(mocker):",
          "316:     mock = mocker.patch.object(subprocess, \"check_output\", return_value=b\"\")",
          "318:     Git().run(\"config\")",
          "320:     cmd = Path(mock.call_args_list[-1][0][0][0])",
          "322:     assert cmd.is_absolute()",
          "323:     assert cmd.name == \"git.exe\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}