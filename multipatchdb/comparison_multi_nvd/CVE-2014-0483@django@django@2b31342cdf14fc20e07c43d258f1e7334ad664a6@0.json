{
  "cve_id": "CVE-2014-0483",
  "cve_desc": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI.",
  "repo": "django/django",
  "patch_hash": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
  "patch_info": {
    "commit_hash": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
    "repo": "django/django",
    "commit_url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6",
    "files": [
      "django/contrib/admin/exceptions.py",
      "django/contrib/admin/options.py",
      "django/contrib/admin/views/main.py",
      "docs/ref/exceptions.txt",
      "docs/releases/1.4.14.txt",
      "docs/releases/1.5.9.txt",
      "docs/releases/1.6.6.txt",
      "tests/admin_views/tests.py"
    ],
    "message": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.\n\nThis is a security fix. Disclosure following shortly.",
    "before_after_code_files": [
      "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
      "django/contrib/admin/options.py||django/contrib/admin/options.py",
      "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
      "tests/admin_views/tests.py||tests/admin_views/tests.py"
    ]
  },
  "patch_diff": {
    "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py": [
      "File: django/contrib/admin/exceptions.py -> django/contrib/admin/exceptions.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: class DisallowedModelAdminLookup(SuspiciousOperation):",
      "5:     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"",
      "6:     pass",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: class DisallowedModelAdminToField(SuspiciousOperation):",
      "10:     \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"",
      "11:     pass",
      "",
      "---------------"
    ],
    "django/contrib/admin/options.py||django/contrib/admin/options.py": [
      "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from django.contrib.admin import validation",
      "12: from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,",
      "13:     InlineModelAdminChecks)",
      "14: from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,",
      "15:     get_deleted_objects, model_format_dict, NestedObjects,",
      "16:     lookup_needs_distinct)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: from django.contrib.admin.exceptions import DisallowedModelAdminToField",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "434:                 valid_lookups.append(filter_item)",
      "435:         return clean_lookup in valid_lookups",
      "437:     def has_add_permission(self, request):",
      "438:         \"\"\"",
      "439:         Returns True if the given request has permission to add an object.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "438:     def to_field_allowed(self, request, to_field):",
      "439:         opts = self.model._meta",
      "441:         try:",
      "442:             field = opts.get_field(to_field)",
      "443:         except FieldDoesNotExist:",
      "444:             return False",
      "446:         # Make sure at least one of the models registered for this site",
      "447:         # references this field.",
      "448:         registered_models = self.admin_site._registry",
      "449:         for related_object in opts.get_all_related_objects():",
      "450:             if (related_object.model in registered_models and",
      "451:                     field in related_object.field.foreign_related_fields):",
      "452:                 return True",
      "454:         return False",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1325:     @transaction.atomic",
      "1326:     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):",
      "1328:         model = self.model",
      "1329:         opts = model._meta",
      "1330:         add = object_id is None",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1347:         to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))",
      "1348:         if to_field and not self.to_field_allowed(request, to_field):",
      "1349:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1397:             original=obj,",
      "1398:             is_popup=(IS_POPUP_VAR in request.POST or",
      "1399:                       IS_POPUP_VAR in request.GET),",
      "1402:             media=media,",
      "1403:             inline_admin_formsets=inline_formsets,",
      "1404:             errors=helpers.AdminErrorList(form, formsets),",
      "",
      "[Removed Lines]",
      "1400:             to_field=request.POST.get(TO_FIELD_VAR,",
      "1401:                                       request.GET.get(TO_FIELD_VAR)),",
      "",
      "[Added Lines]",
      "1423:             to_field=to_field,",
      "",
      "---------------"
    ],
    "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py": [
      "File: django/contrib/admin/views/main.py -> django/contrib/admin/views/main.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: from django.utils.http import urlencode",
      "16: from django.contrib.admin import FieldListFilter",
      "18: from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR",
      "19: from django.contrib.admin.utils import (quote, get_fields_from_path,",
      "20:     lookup_needs_distinct, prepare_lookup_value)",
      "",
      "[Removed Lines]",
      "17: from django.contrib.admin.exceptions import DisallowedModelAdminLookup",
      "",
      "[Added Lines]",
      "17: from django.contrib.admin.exceptions import (",
      "18:     DisallowedModelAdminLookup, DisallowedModelAdminToField,",
      "19: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:             self.page_num = 0",
      "90:         self.show_all = ALL_VAR in request.GET",
      "91:         self.is_popup = _is_changelist_popup(request)",
      "93:         self.params = dict(request.GET.items())",
      "94:         if PAGE_VAR in self.params:",
      "95:             del self.params[PAGE_VAR]",
      "",
      "[Removed Lines]",
      "92:         self.to_field = request.GET.get(TO_FIELD_VAR)",
      "",
      "[Added Lines]",
      "94:         to_field = request.GET.get(TO_FIELD_VAR)",
      "95:         if to_field and not model_admin.to_field_allowed(request, to_field):",
      "96:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
      "97:         self.to_field = to_field",
      "",
      "---------------"
    ],
    "tests/admin_views/tests.py||tests/admin_views/tests.py": [
      "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: from django.contrib.admin import ModelAdmin",
      "19: from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME",
      "20: from django.contrib.admin.models import LogEntry, DELETION",
      "21: from django.contrib.admin.templatetags.admin_static import static",
      "22: from django.contrib.admin.templatetags.admin_urls import add_preserved_filters",
      "23: from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: from django.contrib.admin.options import TO_FIELD_VAR",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "599:         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)",
      "600:         self.assertEqual(response.status_code, 200)",
      "602:     def test_allowed_filtering_15103(self):",
      "603:         \"\"\"",
      "604:         Regressions test for ticket 15103 - filtering on fields defined in a",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:     def test_disallowed_to_field(self):",
      "604:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "605:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})",
      "606:             self.assertEqual(response.status_code, 400)",
      "607:             self.assertEqual(len(calls), 1)",
      "609:         # Specifying a field that is not refered by any other model registered",
      "610:         # to this admin site should raise an exception.",
      "611:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "612:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
      "613:             self.assertEqual(response.status_code, 400)",
      "614:             self.assertEqual(len(calls), 1)",
      "616:         # Specifying a field referenced by another model should be allowed.",
      "617:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
      "618:         self.assertEqual(response.status_code, 200)",
      "620:         # We also want to prevent the add and change view from leaking a",
      "621:         # disallowed field value.",
      "622:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "623:             response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})",
      "624:             self.assertEqual(response.status_code, 400)",
      "625:             self.assertEqual(len(calls), 1)",
      "627:         section = Section.objects.create()",
      "628:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
      "629:             response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})",
      "630:             self.assertEqual(response.status_code, 400)",
      "631:             self.assertEqual(len(calls), 1)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2310:         \"\"\"Ensure that the to_field GET parameter is preserved when a search",
      "2311:         is performed. Refs #10918.",
      "2312:         \"\"\"",
      "2315:         self.assertContains(response, \"\\n1 user\\n\")",
      "2318:     def test_exact_matches(self):",
      "2319:         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')",
      "",
      "[Removed Lines]",
      "2313:         from django.contrib.admin.views.main import TO_FIELD_VAR",
      "2314:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)",
      "2316:         self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)",
      "",
      "[Added Lines]",
      "2344:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)",
      "2346:         self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4883516bea2aebff38b193f4c9707928040d0f8a",
      "candidate_info": {
        "commit_hash": "4883516bea2aebff38b193f4c9707928040d0f8a",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/4883516bea2aebff38b193f4c9707928040d0f8a",
        "files": [
          "django/contrib/admin/options.py",
          "docs/releases/1.4.15.txt",
          "docs/releases/1.5.10.txt",
          "docs/releases/1.6.7.txt",
          "docs/releases/index.txt",
          "tests/admin_views/admin.py",
          "tests/admin_views/models.py",
          "tests/admin_views/tests.py"
        ],
        "message": "[1.7.x] Fixed #23329 -- Allowed inherited and m2m fields to be referenced in the admin.\n\nThanks to Trac alias Markush2010 and ross for the detailed reports.\n\nBackport of 3cbb7590cb from master",
        "before_after_code_files": [
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "tests/admin_views/admin.py||tests/admin_views/admin.py",
          "tests/admin_views/models.py||tests/admin_views/models.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:             return False",
          "446:         # Make sure at least one of the models registered for this site",
          "448:         registered_models = self.admin_site._registry",
          "452:                 return True",
          "454:         return False",
          "",
          "[Removed Lines]",
          "447:         # references this field.",
          "449:         for related_object in opts.get_all_related_objects():",
          "450:             if (related_object.model in registered_models and",
          "451:                     field in related_object.field.foreign_related_fields):",
          "",
          "[Added Lines]",
          "447:         # references this field through a FK or a M2M relationship.",
          "449:         for related_object in (opts.get_all_related_objects() +",
          "450:                                opts.get_all_related_many_to_many_objects()):",
          "451:             related_model = related_object.model",
          "452:             if (any(issubclass(model, related_model) for model in registered_models) and",
          "453:                     related_object.field.rel.get_related_field() == field):",
          "",
          "---------------"
        ],
        "tests/admin_views/admin.py||tests/admin_views/admin.py": [
          "File: tests/admin_views/admin.py -> tests/admin_views/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     UnchangeableObject, UserMessenger, Simple, Choice, ShortMessage, Telegram,",
          "36:     FilteredManager, EmptyModelHidden, EmptyModelVisible, EmptyModelMixin,",
          "37:     State, City, Restaurant, Worker, ParentWithDependentChildren,",
          "41: def callable_year(dt_value):",
          "",
          "[Removed Lines]",
          "38:     DependentChild, StumpJoke, FieldOverridePost, FunkyTag)",
          "",
          "[Added Lines]",
          "38:     DependentChild, StumpJoke, FieldOverridePost, FunkyTag,",
          "39:     ReferencedByParent, ChildOfReferer, M2MReference)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "881: site.register(Restaurant, RestaurantAdmin)",
          "882: site.register(Worker, WorkerAdmin)",
          "883: site.register(FunkyTag, FunkyTagAdmin)",
          "885: # We intentionally register Promo and ChapterXtra1 but not Chapter nor ChapterXtra2.",
          "886: # That way we cover all four cases:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: site.register(ReferencedByParent)",
          "886: site.register(ChildOfReferer)",
          "887: site.register(M2MReference)",
          "",
          "---------------"
        ],
        "tests/admin_views/models.py||tests/admin_views/models.py": [
          "File: tests/admin_views/models.py -> tests/admin_views/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "822:     work_at = models.ForeignKey(Restaurant)",
          "823:     name = models.CharField(max_length=50)",
          "824:     surname = models.CharField(max_length=50)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "827: # Models for #23329",
          "828: class ReferencedByParent(models.Model):",
          "829:     pass",
          "832: class ParentWithFK(models.Model):",
          "833:     fk = models.ForeignKey(ReferencedByParent)",
          "836: class ChildOfReferer(ParentWithFK):",
          "837:     pass",
          "840: class M2MReference(models.Model):",
          "841:     ref = models.ManyToManyField('self')",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
          "618:         self.assertEqual(response.status_code, 200)",
          "620:         # We also want to prevent the add and change view from leaking a",
          "621:         # disallowed field value.",
          "622:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:         # Specifying a field referenced by another model though a m2m should be allowed.",
          "621:         response = self.client.get(\"/test_admin/admin/admin_views/m2mreference/\", {TO_FIELD_VAR: 'id'})",
          "622:         self.assertEqual(response.status_code, 200)",
          "624:         # Specifying a field that is not refered by any other model directly registered",
          "625:         # to this admin site but registered through inheritance should be allowed.",
          "626:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyparent/\", {TO_FIELD_VAR: 'id'})",
          "627:         self.assertEqual(response.status_code, 200)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a20bccda984e6d516bba3eb7e8f307185754a3b",
      "candidate_info": {
        "commit_hash": "2a20bccda984e6d516bba3eb7e8f307185754a3b",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/2a20bccda984e6d516bba3eb7e8f307185754a3b",
        "files": [
          "django/contrib/admin/options.py",
          "docs/releases/1.4.17.txt",
          "docs/releases/1.5.12.txt",
          "docs/releases/1.6.9.txt",
          "docs/releases/1.7.2.txt",
          "docs/releases/index.txt",
          "tests/admin_views/admin.py",
          "tests/admin_views/models.py",
          "tests/admin_views/tests.py"
        ],
        "message": "[1.7.x] Fixed #23754 -- Always allowed reference to the primary key in the admin\n\nThis change allows dynamically created inlines \"Add related\" button to work\ncorrecly as long as their associated foreign key is pointing to the primary\nkey of the related model.\n\nThanks to amorce for the report, Julien Phalip for the initial patch,\nand Collin Anderson for the review.\n\nBackport of f9c4e14aeca7df79991bca8ac2d743953cbd095c from master",
        "before_after_code_files": [
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "tests/admin_views/admin.py||tests/admin_views/admin.py",
          "tests/admin_views/models.py||tests/admin_views/models.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "450:         except FieldDoesNotExist:",
          "451:             return False",
          "456:             return True",
          "458:         # Make sure at least one of the models registered for this site",
          "",
          "[Removed Lines]",
          "453:         # Check whether this model is the origin of a M2M relationship",
          "454:         # in which case to_field has to be the pk on this model.",
          "455:         if opts.many_to_many and field.primary_key:",
          "",
          "[Added Lines]",
          "453:         # Always allow referencing the primary key since it's already possible",
          "454:         # to get this information from the change view URL.",
          "455:         if field.primary_key:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:             for inline in admin.inlines:",
          "464:                 registered_models.add(inline.model)",
          "468:             related_model = related_object.model",
          "469:             if (any(issubclass(model, related_model) for model in registered_models) and",
          "470:                     related_object.field.rel.get_related_field() == field):",
          "",
          "[Removed Lines]",
          "466:         for related_object in (opts.get_all_related_objects(include_hidden=True) +",
          "467:                                opts.get_all_related_many_to_many_objects()):",
          "",
          "[Added Lines]",
          "466:         for related_object in opts.get_all_related_objects(include_hidden=True):",
          "",
          "---------------"
        ],
        "tests/admin_views/admin.py||tests/admin_views/admin.py": [
          "File: tests/admin_views/admin.py -> tests/admin_views/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     FilteredManager, EmptyModelHidden, EmptyModelVisible, EmptyModelMixin,",
          "37:     State, City, Restaurant, Worker, ParentWithDependentChildren,",
          "38:     DependentChild, StumpJoke, FieldOverridePost, FunkyTag,",
          "43: def callable_year(dt_value):",
          "",
          "[Removed Lines]",
          "39:     ReferencedByParent, ChildOfReferer, M2MReference, ReferencedByInline,",
          "40:     InlineReference, InlineReferer, Ingredient)",
          "",
          "[Added Lines]",
          "39:     ReferencedByParent, ChildOfReferer, ReferencedByInline,",
          "40:     InlineReference, InlineReferer, Recipe, Ingredient, NotReferenced)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893: site.register(FunkyTag, FunkyTagAdmin)",
          "894: site.register(ReferencedByParent)",
          "895: site.register(ChildOfReferer)",
          "897: site.register(ReferencedByInline)",
          "898: site.register(InlineReferer, InlineRefererAdmin)",
          "",
          "[Removed Lines]",
          "896: site.register(M2MReference)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "932: site.register(EmptyModelVisible, EmptyModelVisibleAdmin)",
          "933: site.register(EmptyModelMixin, EmptyModelMixinAdmin)",
          "934: site.register(StumpJoke)",
          "935: site.register(Ingredient)",
          "937: # Register core models we need in our tests",
          "938: from django.contrib.auth.models import User, Group",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "934: site.register(Recipe)",
          "936: site.register(NotReferenced)",
          "",
          "---------------"
        ],
        "tests/admin_views/models.py||tests/admin_views/models.py": [
          "File: tests/admin_views/models.py -> tests/admin_views/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "827: # Models for #23329",
          "828: class ReferencedByParent(models.Model):",
          "832: class ParentWithFK(models.Model):",
          "836: class ChildOfReferer(ParentWithFK):",
          "837:     pass",
          "844: # Models for #23431",
          "845: class ReferencedByInline(models.Model):",
          "849: class InlineReference(models.Model):",
          "853: class InlineReferer(models.Model):",
          "",
          "[Removed Lines]",
          "829:     pass",
          "833:     fk = models.ForeignKey(ReferencedByParent)",
          "840: class M2MReference(models.Model):",
          "841:     ref = models.ManyToManyField('self')",
          "846:     pass",
          "850:     fk = models.ForeignKey(ReferencedByInline, related_name='hidden+')",
          "",
          "[Added Lines]",
          "829:     name = models.CharField(max_length=20, unique=True)",
          "833:     fk = models.ForeignKey(",
          "834:         ReferencedByParent, to_field='name', related_name='hidden+',",
          "835:     )",
          "844:     name = models.CharField(max_length=20, unique=True)",
          "848:     fk = models.ForeignKey(",
          "849:         ReferencedByInline, to_field='name', related_name='hidden+',",
          "850:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "857: # Models for #23604",
          "858: class Recipe(models.Model):",
          "862: class Ingredient(models.Model):",
          "",
          "[Removed Lines]",
          "859:     name = models.CharField(max_length=20)",
          "863:     name = models.CharField(max_length=20)",
          "864:     recipes = models.ManyToManyField('Recipe', related_name='ingredients')",
          "",
          "[Added Lines]",
          "859:     pass",
          "863:     recipes = models.ManyToManyField(Recipe)",
          "866: # Model for #23839",
          "867: class NotReferenced(models.Model):",
          "868:     # Don't point any FK at this model.",
          "869:     pass",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:             self.assertEqual(response.status_code, 400)",
          "614:             self.assertEqual(len(calls), 1)",
          "618:         self.assertEqual(response.status_code, 200)",
          "620:         # Specifying a field referenced by another model though a m2m should be allowed.",
          "622:         self.assertEqual(response.status_code, 200)",
          "625:         response = self.client.get(\"/test_admin/admin/admin_views/ingredient/\", {TO_FIELD_VAR: 'id'})",
          "626:         self.assertEqual(response.status_code, 200)",
          "628:         # #23329 - Specifying a field that is not referred by any other model directly registered",
          "629:         # to this admin site but registered through inheritance should be allowed.",
          "631:         self.assertEqual(response.status_code, 200)",
          "633:         # #23431 - Specifying a field that is only referred to by a inline of a registered",
          "634:         # model should be allowed.",
          "636:         self.assertEqual(response.status_code, 200)",
          "638:         # We also want to prevent the add and change view from leaking a",
          "",
          "[Removed Lines]",
          "616:         # Specifying a field referenced by another model should be allowed.",
          "617:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
          "621:         response = self.client.get(\"/test_admin/admin/admin_views/m2mreference/\", {TO_FIELD_VAR: 'id'})",
          "624:         # #23604 - Specifying the pk of this model should be allowed when this model defines a m2m relationship",
          "630:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyparent/\", {TO_FIELD_VAR: 'id'})",
          "635:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyinline/\", {TO_FIELD_VAR: 'id'})",
          "",
          "[Added Lines]",
          "616:         # #23839 - Primary key should always be allowed, even if the referenced model isn't registered.",
          "617:         response = self.client.get(\"/test_admin/admin/admin_views/notreferenced/\", {TO_FIELD_VAR: 'id'})",
          "621:         # XXX: We're not testing against a non-primary key field since the admin doesn't",
          "622:         # support it yet, ref #23862",
          "623:         response = self.client.get(\"/test_admin/admin/admin_views/recipe/\", {TO_FIELD_VAR: 'id'})",
          "626:         # #23604 - Specifying a field referenced through a reverse m2m relationship should be allowed.",
          "627:         # XXX: We're not testing against a non-primary key field since the admin doesn't",
          "628:         # support it yet, ref #23862",
          "634:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyparent/\", {TO_FIELD_VAR: 'name'})",
          "639:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyinline/\", {TO_FIELD_VAR: 'name'})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b32adda5935baa7cf99886c6c41a4eda358d2ef",
      "candidate_info": {
        "commit_hash": "6b32adda5935baa7cf99886c6c41a4eda358d2ef",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/6b32adda5935baa7cf99886c6c41a4eda358d2ef",
        "files": [
          "django/contrib/admin/static/admin/js/SelectFilter2.js",
          "django/contrib/auth/tests/test_forms.py",
          "django/contrib/gis/db/models/sql/query.py",
          "django/contrib/gis/gdal/srs.py",
          "django/core/serializers/xml_serializer.py",
          "tests/admin_checks/tests.py",
          "tests/admin_validation/tests.py",
          "tests/admin_views/tests.py",
          "tests/admin_widgets/tests.py",
          "tests/backends/tests.py",
          "tests/commands_sql/tests.py",
          "tests/custom_columns_regress/tests.py",
          "tests/expressions/tests.py",
          "tests/model_forms/tests.py",
          "tests/model_inheritance/tests.py",
          "tests/schema/tests.py",
          "tests/serializers_regress/tests.py",
          "tests/signed_cookies_tests/tests.py",
          "tests/update_only_fields/tests.py",
          "tests/validation/tests.py"
        ],
        "message": "[1.7.x] Fixed typos using https://github.com/vlajos/misspell_fixer\n\nBackport of a71a2ea756 from master",
        "before_after_code_files": [
          "django/contrib/admin/static/admin/js/SelectFilter2.js||django/contrib/admin/static/admin/js/SelectFilter2.js",
          "django/contrib/auth/tests/test_forms.py||django/contrib/auth/tests/test_forms.py",
          "django/contrib/gis/db/models/sql/query.py||django/contrib/gis/db/models/sql/query.py",
          "django/contrib/gis/gdal/srs.py||django/contrib/gis/gdal/srs.py",
          "django/core/serializers/xml_serializer.py||django/core/serializers/xml_serializer.py",
          "tests/admin_checks/tests.py||tests/admin_checks/tests.py",
          "tests/admin_validation/tests.py||tests/admin_validation/tests.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py",
          "tests/admin_widgets/tests.py||tests/admin_widgets/tests.py",
          "tests/backends/tests.py||tests/backends/tests.py",
          "tests/commands_sql/tests.py||tests/commands_sql/tests.py",
          "tests/custom_columns_regress/tests.py||tests/custom_columns_regress/tests.py",
          "tests/expressions/tests.py||tests/expressions/tests.py",
          "tests/model_forms/tests.py||tests/model_forms/tests.py",
          "tests/model_inheritance/tests.py||tests/model_inheritance/tests.py",
          "tests/schema/tests.py||tests/schema/tests.py",
          "tests/serializers_regress/tests.py||tests/serializers_regress/tests.py",
          "tests/signed_cookies_tests/tests.py||tests/signed_cookies_tests/tests.py",
          "tests/update_only_fields/tests.py||tests/update_only_fields/tests.py",
          "tests/validation/tests.py||tests/validation/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/static/admin/js/SelectFilter2.js||django/contrib/admin/static/admin/js/SelectFilter2.js": [
          "File: django/contrib/admin/static/admin/js/SelectFilter2.js -> django/contrib/admin/static/admin/js/SelectFilter2.js"
        ],
        "django/contrib/auth/tests/test_forms.py||django/contrib/auth/tests/test_forms.py": [
          "File: django/contrib/auth/tests/test_forms.py -> django/contrib/auth/tests/test_forms.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:         self.assertFalse(form.is_valid())",
          "387:         self.assertEqual(form['email'].errors, [_('Enter a valid email address.')])",
          "390:         \"\"\"",
          "391:         Test nonexistent email address. This should not fail because it would",
          "392:         expose information about registered users.",
          "",
          "[Removed Lines]",
          "389:     def test_nonexistant_email(self):",
          "",
          "[Added Lines]",
          "389:     def test_nonexistent_email(self):",
          "",
          "---------------"
        ],
        "django/contrib/gis/db/models/sql/query.py||django/contrib/gis/db/models/sql/query.py": [
          "File: django/contrib/gis/db/models/sql/query.py -> django/contrib/gis/db/models/sql/query.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     \"\"\"",
          "15:     A single spatial SQL query.",
          "16:     \"\"\"",
          "18:     query_terms = ALL_TERMS",
          "19:     aggregates_module = gis_aggregates",
          "",
          "[Removed Lines]",
          "17:     # Overridding the valid query terms.",
          "",
          "[Added Lines]",
          "17:     # Overriding the valid query terms.",
          "",
          "---------------"
        ],
        "django/contrib/gis/gdal/srs.py||django/contrib/gis/gdal/srs.py": [
          "File: django/contrib/gis/gdal/srs.py -> django/contrib/gis/gdal/srs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"",
          "4:   Example:",
          "5:   >>> from django.contrib.gis.gdal import SpatialReference",
          "",
          "[Removed Lines]",
          "2:   The Spatial Reference class, represensents OGR Spatial Reference objects.",
          "",
          "[Added Lines]",
          "2:   The Spatial Reference class, represents OGR Spatial Reference objects.",
          "",
          "---------------"
        ],
        "django/core/serializers/xml_serializer.py||django/core/serializers/xml_serializer.py": [
          "File: django/core/serializers/xml_serializer.py -> django/core/serializers/xml_serializer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         m2m_data = {}",
          "189:         model_fields = Model._meta.get_all_field_names()",
          "191:         for field_node in node.getElementsByTagName(\"field\"):",
          "192:             # If the field is missing the name attribute, bail (are you",
          "193:             # sensing a pattern here?)",
          "",
          "[Removed Lines]",
          "190:         # Deseralize each field.",
          "",
          "[Added Lines]",
          "190:         # Deserialize each field.",
          "",
          "---------------"
        ],
        "tests/admin_checks/tests.py||tests/admin_checks/tests.py": [
          "File: tests/admin_checks/tests.py -> tests/admin_checks/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:         errors = SongAdmin.check(model=Song)",
          "408:         self.assertEqual(errors, [])",
          "411:         class SongAdmin(admin.ModelAdmin):",
          "412:             readonly_fields = (\"title\", \"nonexistent\")",
          "",
          "[Removed Lines]",
          "410:     def test_nonexistant_field(self):",
          "",
          "[Added Lines]",
          "410:     def test_nonexistent_field(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:         ]",
          "424:         self.assertEqual(errors, expected)",
          "427:         class CityInline(admin.TabularInline):",
          "428:             model = City",
          "429:             readonly_fields = ['i_dont_exist']  # Missing attribute",
          "",
          "[Removed Lines]",
          "426:     def test_nonexistant_field_on_inline(self):",
          "",
          "[Added Lines]",
          "426:     def test_nonexistent_field_on_inline(self):",
          "",
          "---------------"
        ],
        "tests/admin_validation/tests.py||tests/admin_validation/tests.py": [
          "File: tests/admin_validation/tests.py -> tests/admin_validation/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "212:             warnings.filterwarnings('ignore', module='django.contrib.admin.options')",
          "213:             SongAdmin.validate(Song)",
          "216:         class SongAdmin(admin.ModelAdmin):",
          "217:             readonly_fields = (\"title\", \"nonexistent\")",
          "",
          "[Removed Lines]",
          "215:     def test_nonexistant_field(self):",
          "",
          "[Added Lines]",
          "215:     def test_nonexistent_field(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:             SongAdmin.validate,",
          "223:             Song)",
          "226:         class CityInline(admin.TabularInline):",
          "227:             model = City",
          "228:             readonly_fields = ['i_dont_exist']  # Missing attribute",
          "",
          "[Removed Lines]",
          "225:     def test_nonexistant_field_on_inline(self):",
          "",
          "[Added Lines]",
          "225:     def test_nonexistent_field_on_inline(self):",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:         response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield': '5'})",
          "481:         self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)",
          "484:         response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield__whatever': '5'})",
          "485:         self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)",
          "",
          "[Removed Lines]",
          "483:         # Spanning relationships through an inexistant related object (Refs #16716)",
          "",
          "[Added Lines]",
          "483:         # Spanning relationships through a nonexistent related object (Refs #16716)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606:             self.assertEqual(response.status_code, 400)",
          "607:             self.assertEqual(len(calls), 1)",
          "610:         # to this admin site should raise an exception.",
          "611:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "612:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
          "",
          "[Removed Lines]",
          "609:         # Specifying a field that is not refered by any other model registered",
          "",
          "[Added Lines]",
          "609:         # Specifying a field that is not referred by any other model registered",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "625:         response = self.client.get(\"/test_admin/admin/admin_views/ingredient/\", {TO_FIELD_VAR: 'id'})",
          "626:         self.assertEqual(response.status_code, 200)",
          "629:         # to this admin site but registered through inheritance should be allowed.",
          "630:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyparent/\", {TO_FIELD_VAR: 'id'})",
          "631:         self.assertEqual(response.status_code, 200)",
          "634:         # model should be allowed.",
          "635:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyinline/\", {TO_FIELD_VAR: 'id'})",
          "636:         self.assertEqual(response.status_code, 200)",
          "",
          "[Removed Lines]",
          "628:         # #23329 - Specifying a field that is not refered by any other model directly registered",
          "633:         # #23431 - Specifying a field that is only refered to by a inline of a registered",
          "",
          "[Added Lines]",
          "628:         # #23329 - Specifying a field that is not referred by any other model directly registered",
          "633:         # #23431 - Specifying a field that is only referred to by a inline of a registered",
          "",
          "---------------"
        ],
        "tests/admin_widgets/tests.py||tests/admin_widgets/tests.py": [
          "File: tests/admin_widgets/tests.py -> tests/admin_widgets/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "903:                          str(self.jenny.id), str(self.john.id)])",
          "905:             # -----------------------------------------------------------------",
          "907:             # 'to' box.",
          "908:             input.send_keys('a')",
          "909:             self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])",
          "",
          "[Removed Lines]",
          "906:             # Check that chosing a filtered option sends it properly to the",
          "",
          "[Added Lines]",
          "906:             # Check that choosing a filtered option sends it properly to the",
          "",
          "---------------"
        ],
        "tests/backends/tests.py||tests/backends/tests.py": [
          "File: tests/backends/tests.py -> tests/backends/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:     available_apps = ['backends']",
          "954:         obj = models.Object.objects.create()",
          "955:         ref = models.ObjectReference.objects.create(obj=obj)",
          "956:         self.assertEqual(ref.obj, obj)",
          "",
          "[Removed Lines]",
          "953:     def test_can_reference_existant(self):",
          "",
          "[Added Lines]",
          "953:     def test_can_reference_existent(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "958:         ref = models.ObjectReference.objects.get(obj=obj)",
          "959:         self.assertEqual(ref.obj, obj)",
          "962:         self.assertFalse(models.Object.objects.filter(id=12345).exists())",
          "963:         ref = models.ObjectReference.objects.create(obj_id=12345)",
          "964:         ref_new = models.ObjectReference.objects.get(obj_id=12345)",
          "",
          "[Removed Lines]",
          "961:     def test_can_reference_non_existant(self):",
          "",
          "[Added Lines]",
          "961:     def test_can_reference_non_existent(self):",
          "",
          "---------------"
        ],
        "tests/commands_sql/tests.py||tests/commands_sql/tests.py": [
          "File: tests/commands_sql/tests.py -> tests/commands_sql/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:             if 'CHECK' in statement:",
          "55:                 success = True",
          "56:         if not success:",
          "59:     def test_sql_delete(self):",
          "60:         app_config = apps.get_app_config('commands_sql')",
          "",
          "[Removed Lines]",
          "57:             self.fail(\"'CHECK' not found in ouput %s\" % output)",
          "",
          "[Added Lines]",
          "57:             self.fail(\"'CHECK' not found in output %s\" % output)",
          "",
          "---------------"
        ],
        "tests/custom_columns_regress/tests.py||tests/custom_columns_regress/tests.py": [
          "File: tests/custom_columns_regress/tests.py -> tests/custom_columns_regress/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     def test_author_get(self):",
          "39:         self.assertEqual(self.a1, Author.objects.get(first_name__exact='John'))",
          "42:         self.assertRaisesMessage(",
          "43:             FieldError,",
          "44:             \"Cannot resolve keyword 'firstname' into field. Choices are: Author_ID, article, first_name, last_name, primary_set\",",
          "",
          "[Removed Lines]",
          "41:     def test_filter_on_nonexistant_field(self):",
          "",
          "[Added Lines]",
          "41:     def test_filter_on_nonexistent_field(self):",
          "",
          "---------------"
        ],
        "tests/expressions/tests.py||tests/expressions/tests.py": [
          "File: tests/expressions/tests.py -> tests/expressions/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:         # Another similar case for F() than above. Now we have the same join",
          "268:         # in two filter kwargs, one in the lhs lookup, one in F. Here pre",
          "269:         # #18375 the amount of joins generated was random if dict",
          "271:         # on which clause was seen first.",
          "272:         qs = Employee.objects.filter(",
          "273:             company_ceo_set__num_employees=F('pk'),",
          "",
          "[Removed Lines]",
          "270:         # randomization was enabled, that is the generated query dependend",
          "",
          "[Added Lines]",
          "270:         # randomization was enabled, that is the generated query dependent",
          "",
          "---------------"
        ],
        "tests/model_forms/tests.py||tests/model_forms/tests.py": [
          "File: tests/model_forms/tests.py -> tests/model_forms/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1097:         self.assertEqual(f.cleaned_data['slug'], 'entertainment')",
          "1098:         self.assertEqual(f.cleaned_data['url'], 'entertainment')",
          "1099:         c1 = f.save()",
          "1101:         # ORM... not the fastest way...",
          "1103:         self.assertEqual(Category.objects.count(), 1)",
          "",
          "[Removed Lines]",
          "1100:         # Testing wether the same object is returned from the",
          "",
          "[Added Lines]",
          "1100:         # Testing whether the same object is returned from the",
          "",
          "---------------"
        ],
        "tests/model_inheritance/tests.py||tests/model_inheritance/tests.py": [
          "File: tests/model_inheritance/tests.py -> tests/model_inheritance/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:             .defer(\"italianrestaurant__serves_gnocchi\")",
          "282:             .order_by(\"rating\"))",
          "285:         with self.assertNumQueries(2):",
          "286:             objs = list(qs.all())",
          "287:             self.assertTrue(objs[1].italianrestaurant.serves_gnocchi)",
          "",
          "[Removed Lines]",
          "284:         # Test that the field was actually defered",
          "",
          "[Added Lines]",
          "284:         # Test that the field was actually deferred",
          "",
          "---------------"
        ],
        "tests/schema/tests.py||tests/schema/tests.py": [
          "File: tests/schema/tests.py -> tests/schema/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:         else:",
          "523:             self.fail(\"No FK constraint for author_id found\")",
          "526:         \"\"\"",
          "527:         Should be able to convert an implicit \"id\" field to an explicit \"id\"",
          "528:         primary key field.",
          "",
          "[Removed Lines]",
          "525:     def test_alter_implicit_id_to_explict(self):",
          "",
          "[Added Lines]",
          "525:     def test_alter_implicit_id_to_explicit(self):",
          "",
          "---------------"
        ],
        "tests/serializers_regress/tests.py||tests/serializers_regress/tests.py": [
          "File: tests/serializers_regress/tests.py -> tests/serializers_regress/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:             serializers.get_serializer(\"nonsense\")",
          "420:         self.assertEqual(cm.exception.args, (\"nonsense\",))",
          "423:         with self.assertRaises(SerializerDoesNotExist):",
          "424:             serializers.unregister_serializer(\"nonsense\")",
          "427:         with self.assertRaises(SerializerDoesNotExist):",
          "428:             serializers.get_deserializer(\"nonsense\")",
          "",
          "[Removed Lines]",
          "422:     def test_unregister_unkown_serializer(self):",
          "426:     def test_get_unkown_deserializer(self):",
          "",
          "[Added Lines]",
          "422:     def test_unregister_unknown_serializer(self):",
          "426:     def test_get_unknown_deserializer(self):",
          "",
          "---------------"
        ],
        "tests/signed_cookies_tests/tests.py||tests/signed_cookies_tests/tests.py": [
          "File: tests/signed_cookies_tests/tests.py -> tests/signed_cookies_tests/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         self.assertRaises(signing.BadSignature,",
          "38:             request.get_signed_cookie, 'c')",
          "41:         response = HttpResponse()",
          "42:         response.set_signed_cookie('c', 'hello')",
          "43:         request = HttpRequest()",
          "",
          "[Removed Lines]",
          "40:     def test_default_argument_supresses_exceptions(self):",
          "",
          "[Added Lines]",
          "40:     def test_default_argument_suppresses_exceptions(self):",
          "",
          "---------------"
        ],
        "tests/update_only_fields/tests.py||tests/update_only_fields/tests.py": [
          "File: tests/update_only_fields/tests.py -> tests/update_only_fields/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         with self.assertNumQueries(1):",
          "74:             s1.save()",
          "75:         # Test that the deferred class does not remember that gender was",
          "77:         s1 = Person.objects.only('name').get(pk=s.pk)",
          "78:         with self.assertNumQueries(1):",
          "79:             s1.save()",
          "",
          "[Removed Lines]",
          "76:         # set, instead the instace should remember this.",
          "",
          "[Added Lines]",
          "76:         # set, instead the instance should remember this.",
          "",
          "---------------"
        ],
        "tests/validation/tests.py||tests/validation/tests.py": [
          "File: tests/validation/tests.py -> tests/validation/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:         mtv = ModelToValidate(number=10, name='Some Name', url='not a url')",
          "52:         self.assertFieldFailsValidationWithMessage(mtv.full_clean, 'url', ['Enter a valid URL.'])",
          "55:         mtv = ModelToValidate(number=10, name='Some Name' * 100)",
          "56:         self.assertFailsValidation(mtv.full_clean, ['name'])",
          "",
          "[Removed Lines]",
          "54:     def test_text_greater_that_charfields_max_length_raises_erros(self):",
          "",
          "[Added Lines]",
          "54:     def test_text_greater_that_charfields_max_length_raises_errors(self):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c4fb019cb76eb3314357a18e225a63e113dc1fd",
      "candidate_info": {
        "commit_hash": "9c4fb019cb76eb3314357a18e225a63e113dc1fd",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/9c4fb019cb76eb3314357a18e225a63e113dc1fd",
        "files": [
          "django/contrib/admin/options.py",
          "docs/releases/1.4.16.txt",
          "docs/releases/1.5.11.txt",
          "docs/releases/1.6.8.txt",
          "docs/releases/1.7.1.txt",
          "docs/releases/index.txt",
          "tests/admin_views/admin.py",
          "tests/admin_views/models.py",
          "tests/admin_views/tests.py"
        ],
        "message": "[1.7.x] Fixed #23431 -- Allowed inline and hidden references to admin fields.\n\nThis fixes a regression introduced by the 53ff096982 security fix.\n\nThanks to @a1tus for the report and Tim for the review.\n\nrefs #23329.\n\nBackport of 342ccbddc1 from master",
        "before_after_code_files": [
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "tests/admin_views/admin.py||tests/admin_views/admin.py",
          "tests/admin_views/models.py||tests/admin_views/models.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:         return clean_lookup in valid_lookups",
          "438:     def to_field_allowed(self, request, to_field):",
          "439:         opts = self.model._meta",
          "441:         try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:         \"\"\"",
          "440:         Returns True if the model associated with this admin should be",
          "441:         allowed to be referenced by the specified field.",
          "442:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "446:         # Make sure at least one of the models registered for this site",
          "447:         # references this field through a FK or a M2M relationship.",
          "450:                                opts.get_all_related_many_to_many_objects()):",
          "451:             related_model = related_object.model",
          "452:             if (any(issubclass(model, related_model) for model in registered_models) and",
          "",
          "[Removed Lines]",
          "448:         registered_models = self.admin_site._registry",
          "449:         for related_object in (opts.get_all_related_objects() +",
          "",
          "[Added Lines]",
          "452:         registered_models = set()",
          "453:         for model, admin in self.admin_site._registry.items():",
          "454:             registered_models.add(model)",
          "455:             for inline in admin.inlines:",
          "456:                 registered_models.add(inline.model)",
          "458:         for related_object in (opts.get_all_related_objects(include_hidden=True) +",
          "",
          "---------------"
        ],
        "tests/admin_views/admin.py||tests/admin_views/admin.py": [
          "File: tests/admin_views/admin.py -> tests/admin_views/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     FilteredManager, EmptyModelHidden, EmptyModelVisible, EmptyModelMixin,",
          "37:     State, City, Restaurant, Worker, ParentWithDependentChildren,",
          "38:     DependentChild, StumpJoke, FieldOverridePost, FunkyTag,",
          "42: def callable_year(dt_value):",
          "",
          "[Removed Lines]",
          "39:     ReferencedByParent, ChildOfReferer, M2MReference)",
          "",
          "[Added Lines]",
          "39:     ReferencedByParent, ChildOfReferer, M2MReference, ReferencedByInline,",
          "40:     InlineReference, InlineReferer)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "826:     list_display = ('name', 'content_object')",
          "829: site = admin.AdminSite(name=\"admin\")",
          "830: site.register(Article, ArticleAdmin)",
          "831: site.register(CustomArticle, CustomArticleAdmin)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830: class InlineReferenceInline(admin.TabularInline):",
          "831:     model = InlineReference",
          "834: class InlineRefererAdmin(admin.ModelAdmin):",
          "835:     inlines = [InlineReferenceInline]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885: site.register(ReferencedByParent)",
          "886: site.register(ChildOfReferer)",
          "887: site.register(M2MReference)",
          "889: # We intentionally register Promo and ChapterXtra1 but not Chapter nor ChapterXtra2.",
          "890: # That way we cover all four cases:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897: site.register(ReferencedByInline)",
          "898: site.register(InlineReferer, InlineRefererAdmin)",
          "",
          "---------------"
        ],
        "tests/admin_views/models.py||tests/admin_views/models.py": [
          "File: tests/admin_views/models.py -> tests/admin_views/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "840: class M2MReference(models.Model):",
          "841:     ref = models.ManyToManyField('self')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844: # Models for #23431",
          "845: class ReferencedByInline(models.Model):",
          "846:     pass",
          "849: class InlineReference(models.Model):",
          "850:     fk = models.ForeignKey(ReferencedByInline, related_name='hidden+')",
          "853: class InlineReferer(models.Model):",
          "854:     refs = models.ManyToManyField(InlineReference)",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:         response = self.client.get(\"/test_admin/admin/admin_views/m2mreference/\", {TO_FIELD_VAR: 'id'})",
          "622:         self.assertEqual(response.status_code, 200)",
          "625:         # to this admin site but registered through inheritance should be allowed.",
          "626:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyparent/\", {TO_FIELD_VAR: 'id'})",
          "627:         self.assertEqual(response.status_code, 200)",
          "629:         # We also want to prevent the add and change view from leaking a",
          "630:         # disallowed field value.",
          "631:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "",
          "[Removed Lines]",
          "624:         # Specifying a field that is not refered by any other model directly registered",
          "",
          "[Added Lines]",
          "624:         # #23329 - Specifying a field that is not refered by any other model directly registered",
          "629:         # #23431 - Specifying a field that is only refered to by a inline of a registered",
          "630:         # model should be allowed.",
          "631:         response = self.client.get(\"/test_admin/admin/admin_views/referencedbyinline/\", {TO_FIELD_VAR: 'id'})",
          "632:         self.assertEqual(response.status_code, 200)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7c494f2506250b8cb5923714360a3642ed63e0f",
      "candidate_info": {
        "commit_hash": "f7c494f2506250b8cb5923714360a3642ed63e0f",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/f7c494f2506250b8cb5923714360a3642ed63e0f",
        "files": [
          "django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py",
          "docs/ref/exceptions.txt",
          "docs/releases/1.4.14.txt",
          "docs/releases/1.5.9.txt",
          "docs/releases/1.6.6.txt",
          "tests/admin_views/tests.py"
        ],
        "message": "[1.6.x] Prevented data leakage in contrib.admin via query string manipulation.\n\nThis is a security fix. Disclosure following shortly.",
        "before_after_code_files": [
          "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
          "django/contrib/admin/options.py||django/contrib/admin/options.py",
          "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
          "tests/admin_views/tests.py||tests/admin_views/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ],
          "candidate": [
            "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py",
            "django/contrib/admin/options.py||django/contrib/admin/options.py",
            "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py",
            "tests/admin_views/tests.py||tests/admin_views/tests.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/admin/exceptions.py||django/contrib/admin/exceptions.py": [
          "File: django/contrib/admin/exceptions.py -> django/contrib/admin/exceptions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class DisallowedModelAdminLookup(SuspiciousOperation):",
          "5:     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"",
          "6:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: class DisallowedModelAdminToField(SuspiciousOperation):",
          "10:     \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"",
          "11:     pass",
          "",
          "---------------"
        ],
        "django/contrib/admin/options.py||django/contrib/admin/options.py": [
          "File: django/contrib/admin/options.py -> django/contrib/admin/options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:         clean_lookup = LOOKUP_SEP.join(parts)",
          "328:         return clean_lookup in self.list_filter or clean_lookup == self.date_hierarchy",
          "330:     def has_add_permission(self, request):",
          "331:         \"\"\"",
          "332:         Returns True if the given request has permission to add an object.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:     def to_field_allowed(self, request, to_field):",
          "331:         opts = self.model._meta",
          "333:         try:",
          "334:             field = opts.get_field(to_field)",
          "335:         except FieldDoesNotExist:",
          "336:             return False",
          "338:         # Make sure at least one of the models registered for this site",
          "339:         # references this field.",
          "340:         registered_models = self.admin_site._registry",
          "341:         for related_object in opts.get_all_related_objects():",
          "342:             if (related_object.model in registered_models and",
          "343:                     field in related_object.field.foreign_related_fields):",
          "344:                 return True",
          "346:         return False",
          "",
          "---------------"
        ],
        "django/contrib/admin/views/main.py||django/contrib/admin/views/main.py": [
          "File: django/contrib/admin/views/main.py -> django/contrib/admin/views/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from django.utils.http import urlencode",
          "16: from django.contrib.admin import FieldListFilter",
          "18: from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR",
          "19: from django.contrib.admin.util import (quote, get_fields_from_path,",
          "20:     lookup_needs_distinct, prepare_lookup_value)",
          "",
          "[Removed Lines]",
          "17: from django.contrib.admin.exceptions import DisallowedModelAdminLookup",
          "",
          "[Added Lines]",
          "17: from django.contrib.admin.exceptions import DisallowedModelAdminLookup, DisallowedModelAdminToField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:             self.page_num = 0",
          "91:         self.show_all = ALL_VAR in request.GET",
          "92:         self.is_popup = _is_changelist_popup(request)",
          "94:         self.params = dict(request.GET.items())",
          "95:         if PAGE_VAR in self.params:",
          "96:             del self.params[PAGE_VAR]",
          "",
          "[Removed Lines]",
          "93:         self.to_field = request.GET.get(TO_FIELD_VAR)",
          "",
          "[Added Lines]",
          "93:         to_field = request.GET.get(TO_FIELD_VAR)",
          "94:         if to_field and not model_admin.to_field_allowed(request, to_field):",
          "95:             raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)",
          "96:         self.to_field = to_field",
          "",
          "---------------"
        ],
        "tests/admin_views/tests.py||tests/admin_views/tests.py": [
          "File: tests/admin_views/tests.py -> tests/admin_views/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from django.contrib import admin",
          "15: from django.contrib.auth import get_permission_codename",
          "16: from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME",
          "17: from django.contrib.admin.models import LogEntry, DELETION",
          "18: from django.contrib.admin.sites import LOGIN_FORM_KEY",
          "19: from django.contrib.admin.templatetags.admin_urls import add_preserved_filters",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: from django.contrib.admin.views.main import TO_FIELD_VAR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)",
          "578:         self.assertEqual(response.status_code, 200)",
          "580:     def test_allowed_filtering_15103(self):",
          "581:         \"\"\"",
          "582:         Regressions test for ticket 15103 - filtering on fields defined in a",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581:     def test_disallowed_to_field(self):",
          "582:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "583:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})",
          "584:             self.assertEqual(response.status_code, 400)",
          "585:             self.assertEqual(len(calls), 1)",
          "587:         # Specifying a field that is not refered by any other model registered",
          "588:         # to this admin site should raise an exception.",
          "589:         with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:",
          "590:             response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})",
          "591:             self.assertEqual(response.status_code, 400)",
          "592:             self.assertEqual(len(calls), 1)",
          "594:         # Specifying a field referenced by another model should be allowed.",
          "595:         response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})",
          "596:         self.assertEqual(response.status_code, 200)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2204:         \"\"\"Ensure that the to_field GET parameter is preserved when a search",
          "2205:         is performed. Refs #10918.",
          "2206:         \"\"\"",
          "2209:         self.assertContains(response, \"\\n1 user\\n\")",
          "2212:     def test_exact_matches(self):",
          "2213:         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')",
          "",
          "[Removed Lines]",
          "2207:         from django.contrib.admin.views.main import TO_FIELD_VAR",
          "2208:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)",
          "2210:         self.assertContains(response, '<input type=\"hidden\" name=\"t\" value=\"username\"/>', html=True)",
          "",
          "[Added Lines]",
          "2225:         response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)",
          "2227:         self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)",
          "",
          "---------------"
        ]
      }
    }
  ]
}