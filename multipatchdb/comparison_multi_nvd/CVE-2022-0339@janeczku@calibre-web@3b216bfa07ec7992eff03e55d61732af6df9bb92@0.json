{
  "cve_id": "CVE-2022-0339",
  "cve_desc": "Server-Side Request Forgery (SSRF) in Pypi calibreweb prior to 0.6.16.",
  "repo": "janeczku/calibre-web",
  "patch_hash": "3b216bfa07ec7992eff03e55d61732af6df9bb92",
  "patch_info": {
    "commit_hash": "3b216bfa07ec7992eff03e55d61732af6df9bb92",
    "repo": "janeczku/calibre-web",
    "commit_url": "https://github.com/janeczku/calibre-web/commit/3b216bfa07ec7992eff03e55d61732af6df9bb92",
    "files": [
      "cps/admin.py",
      "cps/editbooks.py",
      "cps/kobo_auth.py",
      "cps/static/js/main.js",
      "cps/templates/generate_kobo_auth_url.html"
    ],
    "message": "Kobo sync token is now also created if accessed from localhost(fixes #1990) Create kobo sync token button is now \"unclicked\" after closing dialog Additional localhost route is catched If book format is deleted this also deletes the book synced to kobo status",
    "before_after_code_files": [
      "cps/admin.py||cps/admin.py",
      "cps/editbooks.py||cps/editbooks.py",
      "cps/kobo_auth.py||cps/kobo_auth.py",
      "cps/static/js/main.js||cps/static/js/main.js",
      "cps/templates/generate_kobo_auth_url.html||cps/templates/generate_kobo_auth_url.html"
    ]
  },
  "patch_diff": {
    "cps/admin.py||cps/admin.py": [
      "File: cps/admin.py -> cps/admin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1426:             for kobo_entry in kobo_entries:",
      "1427:                 ub.session.delete(kobo_entry)",
      "1428:             ub.session_commit()",
      "1431:         else:",
      "1434:     else:",
      "1439: def _handle_edit_user(to_save, content, languages, translations, kobo_support):",
      "",
      "[Removed Lines]",
      "1429:             log.info(u\"User {} deleted\".format(content.name))",
      "1430:             return(_(u\"User '%(nick)s' deleted\", nick=content.name))",
      "1432:             log.warning(_(u\"Can't delete Guest User\"))",
      "1433:             raise Exception(_(u\"Can't delete Guest User\"))",
      "1435:         log.warning(u\"No admin user remaining, can't delete user\")",
      "1436:         raise Exception(_(u\"No admin user remaining, can't delete user\"))",
      "",
      "[Added Lines]",
      "1429:             log.info(\"User {} deleted\".format(content.name))",
      "1430:             return(_(\"User '%(nick)s' deleted\", nick=content.name))",
      "1432:             log.warning(_(\"Can't delete Guest User\"))",
      "1433:             raise Exception(_(\"Can't delete Guest User\"))",
      "1435:         log.warning(\"No admin user remaining, can't delete user\")",
      "1436:         raise Exception(_(\"No admin user remaining, can't delete user\"))",
      "",
      "---------------"
    ],
    "cps/editbooks.py||cps/editbooks.py": [
      "File: cps/editbooks.py -> cps/editbooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "341:                 else:",
      "342:                     calibre_db.session.query(db.Data).filter(db.Data.book == book.id).\\",
      "343:                         filter(db.Data.format == book_format).delete()",
      "344:                 calibre_db.session.commit()",
      "345:             except Exception as ex:",
      "346:                 log.debug_or_exception(ex)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344:                     kobo_sync_status.remove_synced_book(book.id, True)",
      "",
      "---------------"
    ],
    "cps/kobo_auth.py||cps/kobo_auth.py": [
      "File: cps/kobo_auth.py -> cps/kobo_auth.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "118: @kobo_auth.route(\"/generate_auth_token/<int:user_id>\")",
      "119: @login_required",
      "120: def generate_auth_token(user_id):",
      "121:     host_list = request.host.rsplit(':')",
      "122:     if len(host_list) == 1:",
      "123:         host = ':'.join(host_list)",
      "124:     else:",
      "125:         host = ':'.join(host_list[0:-1])",
      "166: @kobo_auth.route(\"/deleteauthtoken/<int:user_id>\", methods=[\"POST\"])",
      "167: @login_required",
      "168: def delete_auth_token(user_id):",
      "170:     ub.session.query(ub.RemoteAuthToken).filter(ub.RemoteAuthToken.user_id == user_id)\\",
      "171:         .filter(ub.RemoteAuthToken.token_type==1).delete()",
      "",
      "[Removed Lines]",
      "126:     if host.startswith('127.') or host.lower() == 'localhost' or host.startswith('[::ffff:7f'):",
      "127:         warning = _('PLease access calibre-web from non localhost to get valid api_endpoint for kobo device')",
      "128:         return render_title_template(",
      "129:             \"generate_kobo_auth_url.html\",",
      "130:             title=_(u\"Kobo Setup\"),",
      "131:             warning = warning",
      "132:         )",
      "133:     else:",
      "134:         # Invalidate any prevously generated Kobo Auth token for this user.",
      "135:         auth_token = ub.session.query(ub.RemoteAuthToken).filter(",
      "136:             ub.RemoteAuthToken.user_id == user_id",
      "137:         ).filter(ub.RemoteAuthToken.token_type==1).first()",
      "139:         if not auth_token:",
      "140:             auth_token = ub.RemoteAuthToken()",
      "141:             auth_token.user_id = user_id",
      "142:             auth_token.expiration = datetime.max",
      "143:             auth_token.auth_token = (hexlify(urandom(16))).decode(\"utf-8\")",
      "144:             auth_token.token_type = 1",
      "146:             ub.session.add(auth_token)",
      "147:             ub.session_commit()",
      "149:         books = calibre_db.session.query(db.Books).join(db.Data).all()",
      "151:         for book in books:",
      "152:             formats = [data.format for data in book.data]",
      "153:             if not 'KEPUB' in formats and config.config_kepubifypath and 'EPUB' in formats:",
      "154:                 helper.convert_book_format(book.id, config.config_calibre_dir, 'EPUB', 'KEPUB', current_user.name)",
      "156:         return render_title_template(",
      "157:             \"generate_kobo_auth_url.html\",",
      "158:             title=_(u\"Kobo Setup\"),",
      "159:             kobo_auth_url=url_for(",
      "160:                 \"kobo.TopLevelEndpoint\", auth_token=auth_token.auth_token, _external=True",
      "161:             ),",
      "162:             warning = False",
      "163:         )",
      "169:     # Invalidate any prevously generated Kobo Auth token for this user.",
      "",
      "[Added Lines]",
      "121:     warning = False",
      "127:     if host.startswith('127.') or host.lower() == 'localhost' or host.startswith('[::ffff:7f') or host == \"[::1]\":",
      "128:         warning = _('Please access Calibre-Web from non localhost to get valid api_endpoint for kobo device')",
      "130:     # Generate auth token if none is existing for this user",
      "131:     auth_token = ub.session.query(ub.RemoteAuthToken).filter(",
      "132:         ub.RemoteAuthToken.user_id == user_id",
      "133:     ).filter(ub.RemoteAuthToken.token_type==1).first()",
      "135:     if not auth_token:",
      "136:         auth_token = ub.RemoteAuthToken()",
      "137:         auth_token.user_id = user_id",
      "138:         auth_token.expiration = datetime.max",
      "139:         auth_token.auth_token = (hexlify(urandom(16))).decode(\"utf-8\")",
      "140:         auth_token.token_type = 1",
      "142:         ub.session.add(auth_token)",
      "143:         ub.session_commit()",
      "145:     books = calibre_db.session.query(db.Books).join(db.Data).all()",
      "147:     for book in books:",
      "148:         formats = [data.format for data in book.data]",
      "149:         if not 'KEPUB' in formats and config.config_kepubifypath and 'EPUB' in formats:",
      "150:             helper.convert_book_format(book.id, config.config_calibre_dir, 'EPUB', 'KEPUB', current_user.name)",
      "152:     return render_title_template(",
      "153:         \"generate_kobo_auth_url.html\",",
      "154:         title=_(u\"Kobo Setup\"),",
      "155:         auth_token=auth_token.auth_token,",
      "156:         warning = warning",
      "157:     )",
      "163:     # Invalidate any previously generated Kobo Auth token for this user",
      "",
      "---------------"
    ],
    "cps/static/js/main.js||cps/static/js/main.js": [
      "File: cps/static/js/main.js -> cps/static/js/main.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "536:     $(\"#modal_kobo_token\")",
      "537:         .on(\"show.bs.modal\", function(e) {",
      "538:             var $modalBody = $(this).find(\".modal-body\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "538:             $(e.relatedTarget).one('focus', function(e){$(this).blur();});",
      "",
      "---------------"
    ],
    "cps/templates/generate_kobo_auth_url.html||cps/templates/generate_kobo_auth_url.html": [
      "File: cps/templates/generate_kobo_auth_url.html -> cps/templates/generate_kobo_auth_url.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: {% extends \"fragment.html\" %}",
      "2: {% block body %}",
      "3: <div class=\"well\">",
      "6:   </p>",
      "11: </div>",
      "12: {% endblock %}",
      "",
      "[Removed Lines]",
      "4:   <p>",
      "5:     {{_('Open the .kobo/Kobo eReader.conf file in a text editor and add (or edit):')}}</a>",
      "7:   <p>",
      "8:     {% if not warning %}api_endpoint={{kobo_auth_url}}{% else %}{{warning}}{% endif %}</a>",
      "9:   </p>",
      "10:   <p>",
      "",
      "[Added Lines]",
      "4: <p>",
      "5:   {% if not warning %}",
      "6:       {{_('Open the .kobo/Kobo eReader.conf file in a text editor and add (or edit):')}}",
      "7:     </p><p>",
      "8:       api_endpoint={{url_for(\"kobo.TopLevelEndpoint\", auth_token=auth_token, _external=True)}}",
      "9:   {% else %}",
      "10:       {{warning}}",
      "11:     </p><p>{{_('Kobo Token:')}} {{ auth_token }}",
      "12:   {% endif %}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f85b587d0a6d2e35a648337d7952b980d28caf39",
      "candidate_info": {
        "commit_hash": "f85b587d0a6d2e35a648337d7952b980d28caf39",
        "repo": "janeczku/calibre-web",
        "commit_url": "https://github.com/janeczku/calibre-web/commit/f85b587d0a6d2e35a648337d7952b980d28caf39",
        "files": [
          "cps/kobo_auth.py",
          "cps/tasks/convert.py"
        ],
        "message": "Prevent converting of kepub on every new user (#2446) Added error logging message if convert fails If convert only task, only convert book message is logged",
        "before_after_code_files": [
          "cps/kobo_auth.py||cps/kobo_auth.py",
          "cps/tasks/convert.py||cps/tasks/convert.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cps/kobo_auth.py||cps/kobo_auth.py"
          ],
          "candidate": [
            "cps/kobo_auth.py||cps/kobo_auth.py"
          ]
        }
      },
      "candidate_diff": {
        "cps/kobo_auth.py||cps/kobo_auth.py": [
          "File: cps/kobo_auth.py -> cps/kobo_auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     for book in books:",
          "109:         formats = [data.format for data in book.data]",
          "111:             helper.convert_book_format(book.id, config.config_calibre_dir, 'EPUB', 'KEPUB', current_user.name)",
          "113:     return render_title_template(",
          "",
          "[Removed Lines]",
          "110:         if not 'KEPUB' in formats and config.config_kepubifypath and 'EPUB' in formats:",
          "",
          "[Added Lines]",
          "110:         if 'KEPUB' not in formats and config.config_kepubifypath and 'EPUB' in formats:",
          "",
          "---------------"
        ],
        "cps/tasks/convert.py||cps/tasks/convert.py": [
          "File: cps/tasks/convert.py -> cps/tasks/convert.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         log.info(\"ebook converter failed with error while converting book\")",
          "189:         if not error_message:",
          "190:             error_message = N_('Ebook converter failed with unknown error')",
          "191:         self._handleError(error_message)",
          "192:         return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:         else:",
          "192:             log.error(error_message)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273:         return N_(\"Convert\")",
          "275:     def __str__(self):",
          "278:     @property",
          "279:     def is_cancellable(self):",
          "",
          "[Removed Lines]",
          "276:         return \"Convert {} {}\".format(self.book_id, self.ereader_mail)",
          "",
          "[Added Lines]",
          "278:         if self.ereader_mail:",
          "279:             return \"Convert {} {}\".format(self.book_id, self.ereader_mail)",
          "280:         else:",
          "281:             return \"Convert {}\".format(self.book_id)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4379669cf89b440ecd83d562966d290d9a6ac9b3",
      "candidate_info": {
        "commit_hash": "4379669cf89b440ecd83d562966d290d9a6ac9b3",
        "repo": "janeczku/calibre-web",
        "commit_url": "https://github.com/janeczku/calibre-web/commit/4379669cf89b440ecd83d562966d290d9a6ac9b3",
        "files": [
          "cps/admin.py",
          "cps/db.py",
          "cps/editbooks.py",
          "cps/gdrive.py",
          "cps/gdriveutils.py",
          "cps/helper.py",
          "cps/logger.py",
          "cps/metadata_provider/amazon.py",
          "cps/oauth_bb.py",
          "cps/services/worker.py",
          "cps/shelf.py",
          "cps/tasks/mail.py",
          "cps/ub.py",
          "cps/updater.py",
          "cps/web.py"
        ],
        "message": "Database error is more detailed renamed debug_or_exception to error_or_exception",
        "before_after_code_files": [
          "cps/admin.py||cps/admin.py",
          "cps/db.py||cps/db.py",
          "cps/editbooks.py||cps/editbooks.py",
          "cps/gdrive.py||cps/gdrive.py",
          "cps/gdriveutils.py||cps/gdriveutils.py",
          "cps/helper.py||cps/helper.py",
          "cps/logger.py||cps/logger.py",
          "cps/metadata_provider/amazon.py||cps/metadata_provider/amazon.py",
          "cps/oauth_bb.py||cps/oauth_bb.py",
          "cps/services/worker.py||cps/services/worker.py",
          "cps/shelf.py||cps/shelf.py",
          "cps/tasks/mail.py||cps/tasks/mail.py",
          "cps/ub.py||cps/ub.py",
          "cps/updater.py||cps/updater.py",
          "cps/web.py||cps/web.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ],
          "candidate": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ]
        }
      },
      "candidate_diff": {
        "cps/admin.py||cps/admin.py": [
          "File: cps/admin.py -> cps/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1217:         # gdrive_error drive setup",
          "1218:         gdrive_error = _configuration_gdrive_helper(to_save)",
          "1220:         ub.session.rollback()",
          "1223:     try:",
          "1224:         metadata_db = os.path.join(to_save['config_calibre_dir'], \"metadata.db\")",
          "1225:         if config.config_use_google_drive and is_gdrive_ready() and not os.path.exists(metadata_db):",
          "",
          "[Removed Lines]",
          "1219:     except (OperationalError, InvalidRequestError):",
          "1221:         log.error(\"Settings DB is not Writeable\")",
          "1222:         _db_configuration_result(_(\"Settings DB is not Writeable\"), gdrive_error)",
          "",
          "[Added Lines]",
          "1219:     except (OperationalError, InvalidRequestError) as e:",
          "1221:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "1222:         _db_configuration_result(_(u\"Database error: %(error)s.\", error=e.orig), gdrive_error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1332:             unrar_status = helper.check_unrar(config.config_rarfile_location)",
          "1333:             if unrar_status:",
          "1334:                 return _configuration_result(unrar_status)",
          "1336:         ub.session.rollback()",
          "1340:     config.save()",
          "1341:     if reboot_required:",
          "",
          "[Removed Lines]",
          "1335:     except (OperationalError, InvalidRequestError):",
          "1337:         log.error(\"Settings DB is not Writeable\")",
          "1338:         _configuration_result(_(\"Settings DB is not Writeable\"))",
          "",
          "[Added Lines]",
          "1335:     except (OperationalError, InvalidRequestError) as e:",
          "1337:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "1338:         _configuration_result(_(u\"Database error: %(error)s.\", error=e.orig))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1430:         ub.session.rollback()",
          "1431:         log.error(\"Found an existing account for {} or {}\".format(content.name, content.email))",
          "1432:         flash(_(\"Found an existing account for this e-mail address or name.\"), category=\"error\")",
          "1434:         ub.session.rollback()",
          "1439: def _delete_user(content):",
          "",
          "[Removed Lines]",
          "1433:     except OperationalError:",
          "1435:         log.error(\"Settings DB is not Writeable\")",
          "1436:         flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "1433:     except OperationalError as e:",
          "1435:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "1436:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1547:         ub.session.rollback()",
          "1548:         log.error(\"An unknown error occurred while changing user: {}\".format(str(ex)))",
          "1549:         flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")",
          "1551:         ub.session.rollback()",
          "1554:     return \"\"",
          "",
          "[Removed Lines]",
          "1550:     except OperationalError:",
          "1552:         log.error(\"Settings DB is not Writeable\")",
          "1553:         flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "1550:     except OperationalError as e:",
          "1552:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "1553:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1616:         _config_int(to_save, \"mail_size\", lambda y: int(y)*1024*1024)",
          "1617:     try:",
          "1618:         config.save()",
          "1620:         ub.session.rollback()",
          "1623:         return edit_mailsettings()",
          "1625:     if to_save.get(\"test\"):",
          "",
          "[Removed Lines]",
          "1619:     except (OperationalError, InvalidRequestError):",
          "1621:         log.error(\"Settings DB is not Writeable\")",
          "1622:         flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "1619:     except (OperationalError, InvalidRequestError) as e:",
          "1621:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "1622:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1851:     try:",
          "1852:         new_users = services.ldap.get_group_members(config.config_ldap_group_name)",
          "1853:     except (services.ldap.LDAPException, TypeError, AttributeError, KeyError) as e:",
          "1855:         showtext['text'] = _(u'Error: %(ldaperror)s', ldaperror=e)",
          "1856:         return json.dumps(showtext)",
          "1857:     if not new_users:",
          "",
          "[Removed Lines]",
          "1854:         log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "1854:         log.error_or_exception(e)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1879:         try:",
          "1880:             user_data = services.ldap.get_object_details(user=user_identifier, query_filter=query_filter)",
          "1881:         except AttributeError as ex:",
          "1883:             continue",
          "1884:         if user_data:",
          "1885:             user_count, message = ldap_import_create_user(user, user_data)",
          "",
          "[Removed Lines]",
          "1882:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "1882:             log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/db.py||cps/db.py": [
          "File: cps/db.py -> cps/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:                 cc = conn.execute(text(\"SELECT id, datatype FROM custom_columns\"))",
          "598:                 cls.setup_db_cc_classes(cc)",
          "599:             except OperationalError as e:",
          "602:         cls.session_factory = scoped_session(sessionmaker(autocommit=False,",
          "603:                                                           autoflush=True,",
          "",
          "[Removed Lines]",
          "600:                 log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "600:                 log.error_or_exception(e)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "769:                                     len(query.all()))",
          "770:             entries = query.order_by(*order).offset(off).limit(pagesize).all()",
          "771:         except Exception as ex:",
          "773:         # display authors in right order",
          "774:         entries = self.order_authors(entries, True, join_archive_read)",
          "775:         return entries, randm, pagination",
          "",
          "[Removed Lines]",
          "772:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "772:             log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:                 results = self.session.query(Authors).filter(Authors.sort == auth.lstrip().strip()).all()",
          "793:                 # ToDo: How to handle not found author name",
          "794:                 if not len(results):",
          "796:                     # error = True",
          "797:                     break",
          "798:                 for r in results:",
          "",
          "[Removed Lines]",
          "795:                     log.error(\"Author {} not found to display name in right order\".format(auth))",
          "",
          "[Added Lines]",
          "795:                     log.error(\"Author {} not found to display name in right order\".format(auth.strip()))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "974:         return unidecode.unidecode(s.lower())",
          "975:     except Exception as ex:",
          "976:         log = logger.create()",
          "978:         return s.lower()",
          "",
          "[Removed Lines]",
          "977:         log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "977:         log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/editbooks.py||cps/editbooks.py": [
          "File: cps/editbooks.py -> cps/editbooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:                         kobo_sync_status.remove_synced_book(book.id, True)",
          "338:                 calibre_db.session.commit()",
          "339:             except Exception as ex:",
          "341:                 calibre_db.session.rollback()",
          "342:                 if jsonResponse:",
          "343:                     return json.dumps([{\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "",
          "[Removed Lines]",
          "340:                 log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "340:                 log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "663:                     calibre_db.update_title_sort(config)",
          "664:                 except (OperationalError, IntegrityError) as e:",
          "665:                     calibre_db.session.rollback()",
          "668:                     return redirect(url_for('web.show_book', book_id=book.id))",
          "670:             # Queue uploader info",
          "",
          "[Removed Lines]",
          "666:                     log.error('Database error: %s', e)",
          "667:                     flash(_(u\"Database error: %(error)s.\", error=e), category=\"error\")",
          "",
          "[Added Lines]",
          "666:                     log.error_or_exception(\"Database error: {}\".format(e))",
          "667:                     flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "756:     try:",
          "757:         calibre_db.update_title_sort(config)",
          "758:     except sqliteOperationalError as e:",
          "760:         calibre_db.session.rollback()",
          "762:     # Show form",
          "",
          "[Removed Lines]",
          "759:         log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "759:         log.error_or_exception(e)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864:         calibre_db.session.rollback()",
          "865:         flash(str(e), category=\"error\")",
          "866:         return redirect(url_for('web.show_book', book_id=book.id))",
          "867:     except Exception as ex:",
          "869:         calibre_db.session.rollback()",
          "870:         flash(_(\"Error editing book, please check logfile for details\"), category=\"error\")",
          "871:         return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "[Removed Lines]",
          "868:         log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "867:     except (OperationalError, IntegrityError) as e:",
          "868:         log.error_or_exception(\"Database error: {}\".format(e))",
          "869:         calibre_db.session.rollback()",
          "870:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "871:         return redirect(url_for('web.show_book', book_id=book.id))",
          "873:         log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1103:                         return Response(json.dumps(resp), mimetype='application/json')",
          "1104:             except (OperationalError, IntegrityError) as e:",
          "1105:                 calibre_db.session.rollback()",
          "1108:         return Response(json.dumps({\"location\": url_for(\"web.index\")}), mimetype='application/json')",
          "",
          "[Removed Lines]",
          "1106:                 log.error(\"Database error: %s\", e)",
          "1107:                 flash(_(u\"Database error: %(error)s.\", error=e), category=\"error\")",
          "",
          "[Added Lines]",
          "1111:                 log.error_or_exception(\"Database error: {}\".format(e))",
          "1112:                 flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1234:             calibre_db.session.commit()",
          "1235:     except (OperationalError, IntegrityError) as e:",
          "1236:         calibre_db.session.rollback()",
          "1238:         ret = Response(json.dumps({'success': False,",
          "1239:                                    'msg': 'Database error: {}'.format(e.orig)}),",
          "1240:                        mimetype='application/json')",
          "",
          "[Removed Lines]",
          "1237:         log.error(\"Database error: {}\".format(e))",
          "",
          "[Added Lines]",
          "1242:         log.error_or_exception(\"Database error: {}\".format(e))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1344:                 calibre_db.session.commit()",
          "1345:             except (OperationalError, IntegrityError) as e:",
          "1346:                 calibre_db.session.rollback()",
          "1348:                 return json.dumps({'success': False})",
          "1350:             if config.config_use_google_drive:",
          "",
          "[Removed Lines]",
          "1347:                 log.error(\"Database error: %s\", e)",
          "",
          "[Added Lines]",
          "1352:                 log.error_or_exception(\"Database error: %s\", e)",
          "",
          "---------------"
        ],
        "cps/gdrive.py||cps/gdrive.py": [
          "File: cps/gdrive.py -> cps/gdrive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:                     move(os.path.join(tmp_dir, \"tmp_metadata.db\"), dbpath)",
          "153:                     calibre_db.reconnect_db(config, ub.app_DB_path)",
          "154:         except Exception as ex:",
          "156:         return ''",
          "157: except AttributeError:",
          "158:     pass",
          "",
          "[Removed Lines]",
          "155:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "155:             log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/gdriveutils.py||cps/gdriveutils.py": [
          "File: cps/gdriveutils.py -> cps/gdriveutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:             except RefreshError as e:",
          "216:                 log.error(\"Google Drive error: %s\", e)",
          "217:             except Exception as ex:",
          "219:         else:",
          "220:             # Initialize the saved creds",
          "221:             gauth.Authorize()",
          "",
          "[Removed Lines]",
          "218:                 log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "218:                 log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/helper.py||cps/helper.py": [
          "File: cps/helper.py -> cps/helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "713:                     log.error('%s/cover.jpg not found on Google Drive', book.path)",
          "714:                     return get_cover_on_failure(use_generic_cover_on_failure)",
          "715:             except Exception as ex:",
          "717:                 return get_cover_on_failure(use_generic_cover_on_failure)",
          "718:         else:",
          "719:             cover_file_path = os.path.join(config.config_calibre_dir, book.path)",
          "",
          "[Removed Lines]",
          "716:                 log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "716:                 log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:             log.debug(\"unrar version %s\", version)",
          "863:     except (OSError, UnicodeDecodeError) as err:",
          "865:         return _('Error excecuting UnRar')",
          "",
          "[Removed Lines]",
          "864:         log.debug_or_exception(err)",
          "",
          "[Added Lines]",
          "864:         log.error_or_exception(err)",
          "",
          "---------------"
        ],
        "cps/logger.py||cps/logger.py": [
          "File: cps/logger.py -> cps/logger.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: class _Logger(logging.Logger):",
          "46:         if sys.version_info > (3, 7):",
          "47:             if is_debug_enabled():",
          "48:                 self.exception(message, stacklevel=stacklevel, *args, **kwargs)",
          "",
          "[Removed Lines]",
          "45:     def debug_or_exception(self, message, stacklevel=2, *args, **kwargs):",
          "",
          "[Added Lines]",
          "45:     def error_or_exception(self, message, stacklevel=2, *args, **kwargs):",
          "",
          "---------------"
        ],
        "cps/metadata_provider/amazon.py||cps/metadata_provider/amazon.py": [
          "File: cps/metadata_provider/amazon.py -> cps/metadata_provider/amazon.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:                         match.cover = \"\"",
          "106:                     return match, index",
          "107:             except Exception as e:",
          "109:                 return",
          "111:         val = list()",
          "",
          "[Removed Lines]",
          "108:                 log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "108:                 log.error_or_exception(e)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:             result = list(filter(lambda x: x, val))",
          "127:             return [x[0] for x in sorted(result, key=itemgetter(1))] #sort by amazons listing order for best relevance",
          "128:         except requests.exceptions.HTTPError as e:",
          "130:             return []",
          "",
          "[Removed Lines]",
          "129:             log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "129:             log.error_or_exception(e)",
          "",
          "---------------"
        ],
        "cps/oauth_bb.py||cps/oauth_bb.py": [
          "File: cps/oauth_bb.py -> cps/oauth_bb.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:                     log.info(\"Link to {} Succeeded\".format(provider_name))",
          "150:                     return redirect(url_for('web.profile'))",
          "151:                 except Exception as ex:",
          "153:                     ub.session.rollback()",
          "154:             else:",
          "155:                 flash(_(u\"Login failed, No User Linked With OAuth Account\"), category=\"error\")",
          "",
          "[Removed Lines]",
          "152:                     log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "152:                     log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:                 flash(_(u\"Unlink to %(oauth)s Succeeded\", oauth=oauth_check[provider]), category=\"success\")",
          "198:                 log.info(\"Unlink to {} Succeeded\".format(oauth_check[provider]))",
          "199:             except Exception as ex:",
          "201:                 ub.session.rollback()",
          "202:                 flash(_(u\"Unlink to %(oauth)s Failed\", oauth=oauth_check[provider]), category=\"error\")",
          "203:     except NoResultFound:",
          "",
          "[Removed Lines]",
          "200:                 log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "200:                 log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/services/worker.py||cps/services/worker.py": [
          "File: cps/services/worker.py -> cps/services/worker.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:             self.run(*args)",
          "179:         except Exception as ex:",
          "180:             self._handleError(str(ex))",
          "183:         self.end_time = datetime.now()",
          "",
          "[Removed Lines]",
          "181:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "181:             log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/shelf.py||cps/shelf.py": [
          "File: cps/shelf.py -> cps/shelf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     try:",
          "95:         ub.session.merge(shelf)",
          "96:         ub.session.commit()",
          "98:         ub.session.rollback()",
          "101:         if \"HTTP_REFERER\" in request.environ:",
          "102:             return redirect(request.environ[\"HTTP_REFERER\"])",
          "103:         else:",
          "",
          "[Removed Lines]",
          "97:     except (OperationalError, InvalidRequestError):",
          "99:         log.error(\"Settings DB is not Writeable\")",
          "100:         flash(_(u\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "97:     except (OperationalError, InvalidRequestError) as e:",
          "99:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "100:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:             ub.session.merge(shelf)",
          "155:             ub.session.commit()",
          "156:             flash(_(u\"Books have been added to shelf: %(sname)s\", sname=shelf.name), category=\"success\")",
          "158:             ub.session.rollback()",
          "161:     else:",
          "162:         log.error(\"Could not add books to shelf: {}\".format(shelf.name))",
          "163:         flash(_(u\"Could not add books to shelf: %(sname)s\", sname=shelf.name), category=\"error\")",
          "",
          "[Removed Lines]",
          "157:         except (OperationalError, InvalidRequestError):",
          "159:             log.error(\"Settings DB is not Writeable\")",
          "160:             flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "157:         except (OperationalError, InvalidRequestError) as e:",
          "159:             log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "160:             flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:             ub.session.delete(book_shelf)",
          "198:             shelf.last_modified = datetime.utcnow()",
          "199:             ub.session.commit()",
          "201:             ub.session.rollback()",
          "204:             if \"HTTP_REFERER\" in request.environ:",
          "205:                 return redirect(request.environ[\"HTTP_REFERER\"])",
          "206:             else:",
          "",
          "[Removed Lines]",
          "200:         except (OperationalError, InvalidRequestError):",
          "202:             log.error(\"Settings DB is not Writeable\")",
          "203:             flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "200:         except (OperationalError, InvalidRequestError) as e:",
          "202:             log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "203:             flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:                 return redirect(url_for('shelf.show_shelf', shelf_id=shelf.id))",
          "274:             except (OperationalError, InvalidRequestError) as ex:",
          "275:                 ub.session.rollback()",
          "279:             except Exception as ex:",
          "280:                 ub.session.rollback()",
          "282:                 flash(_(u\"There was an error\"), category=\"error\")",
          "283:     return render_title_template('shelf_edit.html',",
          "284:                                  shelf=shelf,",
          "",
          "[Removed Lines]",
          "276:                 log.debug_or_exception(ex)",
          "277:                 log.error(\"Settings DB is not Writeable\")",
          "278:                 flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "281:                 log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "276:                 log.error_or_exception(ex)",
          "277:                 log.error_or_exception(\"Settings Database error: {}\".format(ex))",
          "278:                 flash(_(u\"Database error: %(error)s.\", error=ex.orig), category=\"error\")",
          "281:                 log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "337:             flash(_(\"Error deleting Shelf\"), category=\"error\")",
          "338:         else:",
          "339:             flash(_(\"Shelf successfully deleted\"), category=\"success\")",
          "341:         ub.session.rollback()",
          "344:     return redirect(url_for('web.index'))",
          "",
          "[Removed Lines]",
          "340:     except InvalidRequestError:",
          "342:         log.error(\"Settings DB is not Writeable\")",
          "343:         flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "340:     except InvalidRequestError as e:",
          "342:         log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "343:         flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:                 # if order diffrent from before -> shelf.last_modified = datetime.utcnow()",
          "375:             try:",
          "376:                 ub.session.commit()",
          "378:                 ub.session.rollback()",
          "382:         result = list()",
          "383:         if shelf:",
          "",
          "[Removed Lines]",
          "377:             except (OperationalError, InvalidRequestError):",
          "379:                 log.error(\"Settings DB is not Writeable\")",
          "380:                 flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "377:             except (OperationalError, InvalidRequestError) as e:",
          "379:                 log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "380:                 flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "450:             try:",
          "451:                 ub.session.query(ub.BookShelf).filter(ub.BookShelf.book_id == entry.book_id).delete()",
          "452:                 ub.session.commit()",
          "454:                 ub.session.rollback()",
          "458:         return render_title_template(page,",
          "459:                                      entries=result,",
          "",
          "[Removed Lines]",
          "453:             except (OperationalError, InvalidRequestError):",
          "455:                 log.error(\"Settings DB is not Writeable\")",
          "456:                 flash(_(\"Settings DB is not Writeable\"), category=\"error\")",
          "",
          "[Added Lines]",
          "453:             except (OperationalError, InvalidRequestError) as e:",
          "455:                 log.error_or_exception(\"Settings Database error: {}\".format(e))",
          "456:                 flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "",
          "---------------"
        ],
        "cps/tasks/mail.py||cps/tasks/mail.py": [
          "File: cps/tasks/mail.py -> cps/tasks/mail.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:             else:",
          "168:                 self.send_gmail_email(msg)",
          "169:         except MemoryError as e:",
          "171:             self._handleError(u'MemoryError sending e-mail: {}'.format(str(e)))",
          "172:         except (smtplib.SMTPException, smtplib.SMTPAuthenticationError) as e:",
          "174:             if hasattr(e, \"smtp_error\"):",
          "175:                 text = e.smtp_error.decode('utf-8').replace(\"\\n\", '. ')",
          "176:             elif hasattr(e, \"message\"):",
          "",
          "[Removed Lines]",
          "170:             log.debug_or_exception(e, stacklevel=3)",
          "173:             log.debug_or_exception(e, stacklevel=3)",
          "",
          "[Added Lines]",
          "170:             log.error_or_exception(e, stacklevel=3)",
          "173:             log.error_or_exception(e, stacklevel=3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:                 text = ''",
          "182:             self._handleError(u'Smtplib Error sending e-mail: {}'.format(text))",
          "183:         except (socket.error) as e:",
          "185:             self._handleError(u'Socket Error sending e-mail: {}'.format(e.strerror))",
          "186:         except Exception as ex:",
          "188:             self._handleError(u'Error sending e-mail: {}'.format(ex))",
          "190:     def send_standard_email(self, msg):",
          "",
          "[Removed Lines]",
          "184:             log.debug_or_exception(e, stacklevel=3)",
          "187:             log.debug_or_exception(ex, stacklevel=3)",
          "",
          "[Added Lines]",
          "184:             log.error_or_exception(e, stacklevel=3)",
          "187:             log.error_or_exception(ex, stacklevel=3)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:                 data = file_.read()",
          "258:                 file_.close()",
          "259:             except IOError as e:",
          "261:                 log.error(u'The requested file could not be read. Maybe wrong permissions?')",
          "262:                 return None",
          "263:         return data",
          "",
          "[Removed Lines]",
          "260:                 log.debug_or_exception(e, stacklevel=3)",
          "",
          "[Added Lines]",
          "260:                 log.error_or_exception(e, stacklevel=3)",
          "",
          "---------------"
        ],
        "cps/ub.py||cps/ub.py": [
          "File: cps/ub.py -> cps/ub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "853:             log.info(success)",
          "854:     except (exc.OperationalError, exc.InvalidRequestError) as e:",
          "855:         s.rollback()",
          "857:     return \"\"",
          "",
          "[Removed Lines]",
          "856:         log.debug_or_exception(e)",
          "",
          "[Added Lines]",
          "856:         log.error_or_exception(e)",
          "",
          "---------------"
        ],
        "cps/updater.py||cps/updater.py": [
          "File: cps/updater.py -> cps/updater.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         except (IOError, OSError) as ex:",
          "118:             self.status = 12",
          "119:             log.error(u'Possible Reason for error: update file could not be saved in temp dir')",
          "121:         self.pause()",
          "122:         return False",
          "",
          "[Removed Lines]",
          "120:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "120:             log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/web.py||cps/web.py": [
          "File: cps/web.py -> cps/web.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1375:         try:",
          "1376:             q = adv_search_custom_columns(cc, term, q)",
          "1377:         except AttributeError as ex:",
          "1379:             flash(_(\"Error on search for custom columns, please restart Calibre-Web\"), category=\"error\")",
          "1381:     q = q.order_by(*sort_param).all()",
          "",
          "[Removed Lines]",
          "1378:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "1378:             log.error_or_exception(ex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1437:             df = getFileFromEbooksFolder(book.path, data.name + \".\" + book_format)",
          "1438:             return do_gdrive_download(df, headers, (book_format.upper() == 'TXT'))",
          "1439:         except AttributeError as ex:",
          "1441:             return \"File Not Found\"",
          "1442:     else:",
          "1443:         if book_format.upper() == 'TXT':",
          "",
          "[Removed Lines]",
          "1440:             log.debug_or_exception(ex)",
          "",
          "[Added Lines]",
          "1440:             log.error_or_exception(ex)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35f6f4c727c887f8f3607fe3233dbc1980d15020",
      "candidate_info": {
        "commit_hash": "35f6f4c727c887f8f3607fe3233dbc1980d15020",
        "repo": "janeczku/calibre-web",
        "commit_url": "https://github.com/janeczku/calibre-web/commit/35f6f4c727c887f8f3607fe3233dbc1980d15020",
        "files": [
          "cps/editbooks.py",
          "cps/helper.py",
          "cps/kobo_sync_status.py",
          "cps/tasks/convert.py",
          "cps/ub.py",
          "test/Calibre-Web TestSummary_Linux.html"
        ],
        "message": "Deleted book formats remove book from synced to kobo table updated teststatus",
        "before_after_code_files": [
          "cps/editbooks.py||cps/editbooks.py",
          "cps/helper.py||cps/helper.py",
          "cps/kobo_sync_status.py||cps/kobo_sync_status.py",
          "cps/tasks/convert.py||cps/tasks/convert.py",
          "cps/ub.py||cps/ub.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cps/editbooks.py||cps/editbooks.py"
          ],
          "candidate": [
            "cps/editbooks.py||cps/editbooks.py"
          ]
        }
      },
      "candidate_diff": {
        "cps/editbooks.py||cps/editbooks.py": [
          "File: cps/editbooks.py -> cps/editbooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:                 else:",
          "342:                     calibre_db.session.query(db.Data).filter(db.Data.book == book.id).\\",
          "343:                         filter(db.Data.format == book_format).delete()",
          "345:                 calibre_db.session.commit()",
          "346:             except Exception as ex:",
          "347:                 log.debug_or_exception(ex)",
          "",
          "[Removed Lines]",
          "344:                     kobo_sync_status.remove_synced_book(book.id, True)",
          "",
          "[Added Lines]",
          "344:                     if book_format.upper() in ['KEPUB', 'EPUB', 'EPUB3']:",
          "345:                         kobo_sync_status.remove_synced_book(book.id, True)",
          "",
          "---------------"
        ],
        "cps/helper.py||cps/helper.py": [
          "File: cps/helper.py -> cps/helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #  You should have received a copy of the GNU General Public License",
          "18: #  along with this program. If not, see <http://www.gnu.org/licenses/>.",
          "21: import os",
          "22: import io",
          "23: import mimetypes",
          "24: import re",
          "25: import shutil",
          "27: import unicodedata",
          "28: from datetime import datetime, timedelta",
          "29: from tempfile import gettempdir",
          "31: import requests",
          "32: from babel.dates import format_datetime",
          "33: from babel.units import format_unit",
          "34: from flask import send_from_directory, make_response, redirect, abort, url_for",
          "",
          "[Removed Lines]",
          "20: import sys",
          "26: import time",
          "",
          "[Added Lines]",
          "25: import socket",
          "29: from urllib.parse import urlparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "584: # saves book cover from url",
          "585: def save_cover_from_url(url, book_path):",
          "586:     try:",
          "587:         img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling",
          "588:         img.raise_for_status()",
          "589:         return save_cover(img, book_path)",
          "591:             requests.exceptions.ConnectionError,",
          "592:             requests.exceptions.Timeout) as ex:",
          "593:         log.info(u'Cover Download Error %s', ex)",
          "",
          "[Removed Lines]",
          "590:     except (requests.exceptions.HTTPError,",
          "",
          "[Added Lines]",
          "587:         # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]",
          "588:         ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]",
          "589:         if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\":",
          "590:             log.error(\"Localhost was accessed for cover upload\")",
          "591:             return False, _(\"You are not allowed to access localhost for cover uploads\")",
          "595:     except (socket.gaierror,",
          "596:             requests.exceptions.HTTPError,",
          "",
          "---------------"
        ],
        "cps/kobo_sync_status.py||cps/kobo_sync_status.py": [
          "File: cps/kobo_sync_status.py -> cps/kobo_sync_status.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from . import ub",
          "22: import datetime",
          "23: from sqlalchemy.sql.expression import or_, and_, true",
          "25: # Add the current book id to kobo_synced_books table for current user, if entry is already present,",
          "26: # do nothing (safety precaution)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from sqlalchemy import exc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: # Select all entries of current book in kobo_synced_books table, which are from current user and delete them",
          "40:     if not all:",
          "41:         user = ub.KoboSyncedBooks.user_id == current_user.id",
          "42:     else:",
          "43:         user = true()",
          "49: def change_archived_books(book_id, state=None, message=None):",
          "",
          "[Removed Lines]",
          "39: def remove_synced_book(book_id, all=False):",
          "44:     ub.session.query(ub.KoboSyncedBooks).filter(ub.KoboSyncedBooks.book_id == book_id) \\",
          "45:         .filter(user).delete()",
          "46:     ub.session_commit()",
          "",
          "[Added Lines]",
          "40: def remove_synced_book(book_id, all=False, session=None):",
          "45:     if not session:",
          "46:         ub.session.query(ub.KoboSyncedBooks).filter(ub.KoboSyncedBooks.book_id == book_id).filter(user).delete()",
          "47:         ub.session_commit()",
          "48:     else:",
          "49:         session.query(ub.KoboSyncedBooks).filter(ub.KoboSyncedBooks.book_id == book_id).filter(user).delete()",
          "50:         ub.session_commit(sess=session)",
          "",
          "---------------"
        ],
        "cps/tasks/convert.py||cps/tasks/convert.py": [
          "File: cps/tasks/convert.py -> cps/tasks/convert.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #  You should have received a copy of the GNU General Public License",
          "17: #  along with this program. If not, see <http://www.gnu.org/licenses/>.",
          "20: import os",
          "21: import re",
          "",
          "[Removed Lines]",
          "19: import sys",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: from cps import logger, config",
          "32: from cps.subproc_wrapper import process_open",
          "33: from flask_babel import gettext as _",
          "36: from cps.tasks.mail import TaskEmail",
          "37: from cps import gdriveutils",
          "",
          "[Removed Lines]",
          "34: from flask import url_for",
          "",
          "[Added Lines]",
          "33: from cps.kobo_sync_status import remove_synced_book",
          "34: from cps.ub import ini",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:                 try:",
          "148:                     local_db.session.merge(new_format)",
          "149:                     local_db.session.commit()",
          "150:                 except SQLAlchemyError as e:",
          "151:                     local_db.session.rollback()",
          "152:                     log.error(\"Database error: %s\", e)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:                     if self.settings['new_book_format'].upper() in ['KEPUB', 'EPUB', 'EPUB3']:",
          "151:                         ub_session = ini()",
          "152:                         remove_synced_book(book_id, True, ub_session)",
          "153:                         ub_session.close()",
          "",
          "---------------"
        ],
        "cps/ub.py||cps/ub.py": [
          "File: cps/ub.py -> cps/ub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     except Exception:",
          "774:         session.rollback()",
          "777: def init_db(app_db_path):",
          "778:     # Open session for database connection",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776: def ini():",
          "777:     global app_DB_path",
          "778:     engine = create_engine(u'sqlite:///{0}'.format(app_DB_path), echo=False)",
          "780:     Session = scoped_session(sessionmaker())",
          "781:     Session.configure(bind=engine)",
          "782:     return Session()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "830:             except Exception:",
          "831:                 pass",
          "834:     try:",
          "836:         if success:",
          "837:             log.info(success)",
          "838:     except (exc.OperationalError, exc.InvalidRequestError) as e:",
          "840:         log.debug_or_exception(e)",
          "841:     return \"\"",
          "",
          "[Removed Lines]",
          "833: def session_commit(success=None):",
          "835:         session.commit()",
          "839:         session.rollback()",
          "",
          "[Added Lines]",
          "841: def session_commit(success=None, sess=None):",
          "842:     s = sess if sess else session",
          "844:         s.commit()",
          "848:         s.rollback()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4545f4a20d9ff90b99bbd4e3e34b6de4441d6367",
      "candidate_info": {
        "commit_hash": "4545f4a20d9ff90b99bbd4e3e34b6de4441d6367",
        "repo": "janeczku/calibre-web",
        "commit_url": "https://github.com/janeczku/calibre-web/commit/4545f4a20d9ff90b99bbd4e3e34b6de4441d6367",
        "files": [
          "cps.py",
          "cps/__init__.py",
          "cps/admin.py",
          "cps/db.py",
          "cps/editbooks.py",
          "cps/epub.py",
          "cps/helper.py",
          "cps/opds.py",
          "cps/pagination.py",
          "cps/remotelogin.py",
          "cps/templates/book_edit.html",
          "cps/templates/book_table.html",
          "cps/templates/detail.html",
          "cps/templates/layout.html",
          "cps/usermanagement.py",
          "cps/web.py",
          "optional-requirements.txt",
          "requirements.txt"
        ],
        "message": "Better epub cover parsing with multiple cover-image items Code cosmetics renamed variables refactored xml page generation refactored prepare author",
        "before_after_code_files": [
          "cps.py||cps.py",
          "cps/__init__.py||cps/__init__.py",
          "cps/admin.py||cps/admin.py",
          "cps/db.py||cps/db.py",
          "cps/editbooks.py||cps/editbooks.py",
          "cps/epub.py||cps/epub.py",
          "cps/helper.py||cps/helper.py",
          "cps/opds.py||cps/opds.py",
          "cps/pagination.py||cps/pagination.py",
          "cps/remotelogin.py||cps/remotelogin.py",
          "cps/templates/book_edit.html||cps/templates/book_edit.html",
          "cps/templates/book_table.html||cps/templates/book_table.html",
          "cps/templates/detail.html||cps/templates/detail.html",
          "cps/templates/layout.html||cps/templates/layout.html",
          "cps/usermanagement.py||cps/usermanagement.py",
          "cps/web.py||cps/web.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ],
          "candidate": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ]
        }
      },
      "candidate_diff": {
        "cps.py||cps.py": [
          "File: cps.py -> cps.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: from cps.shelf import shelf",
          "41: from cps.admin import admi",
          "42: from cps.gdrive import gdrive",
          "44: from cps.remotelogin import remotelogin",
          "45: from cps.search_metadata import meta",
          "46: from cps.error_handler import init_errorhandler",
          "",
          "[Removed Lines]",
          "43: from cps.editbooks import editbook",
          "",
          "[Added Lines]",
          "43: from cps.editbooks import EditBook",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     app.register_blueprint(remotelogin)",
          "74:     app.register_blueprint(meta)",
          "75:     app.register_blueprint(gdrive)",
          "77:     if kobo_available:",
          "78:         app.register_blueprint(kobo)",
          "79:         app.register_blueprint(kobo_auth)",
          "",
          "[Removed Lines]",
          "76:     app.register_blueprint(editbook)",
          "",
          "[Added Lines]",
          "76:     app.register_blueprint(EditBook)",
          "",
          "---------------"
        ],
        "cps/__init__.py||cps/__init__.py": [
          "File: cps/__init__.py -> cps/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         services.goodreads_support.connect(config.config_goodreads_api_key,",
          "157:                                            config.config_goodreads_api_secret,",
          "158:                                            config.config_use_goodreads)",
          "160:     return app",
          "162: @babel.localeselector",
          "",
          "[Removed Lines]",
          "159:     config.store_calibre_uuid(calibre_db, db.Library_Id)",
          "",
          "[Added Lines]",
          "159:     config.store_calibre_uuid(calibre_db, db.LibraryId)",
          "",
          "---------------"
        ],
        "cps/admin.py||cps/admin.py": [
          "File: cps/admin.py -> cps/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import time",
          "28: import operator",
          "29: from datetime import datetime, timedelta",
          "32: from babel.dates import format_datetime",
          "33: from flask import Blueprint, flash, redirect, url_for, abort, request, make_response, send_from_directory, g, Response",
          "34: from flask_login import login_required, current_user, logout_user, confirm_login",
          "",
          "[Removed Lines]",
          "31: from babel import Locale as LC",
          "",
          "[Added Lines]",
          "30: from functools import wraps",
          "32: from babel import Locale",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: from .render_template import render_title_template, get_sidebar_config",
          "48: from . import debug_info, _BABEL_TRANSLATIONS",
          "52: log = logger.create()",
          "",
          "[Removed Lines]",
          "50: from functools import wraps",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:         else:",
          "190:             commit = version['version']",
          "193:     email_settings = config.get_mail_settings()",
          "194:     kobo_support = feature_support['kobo'] and config.config_kobo_sync",
          "196:                                  feature_support=feature_support, kobo_support=kobo_support,",
          "197:                                  title=_(u\"Admin page\"), page=\"admin\")",
          "",
          "[Removed Lines]",
          "192:     allUser = ub.session.query(ub.User).all()",
          "195:     return render_title_template(\"admin.html\", allUser=allUser, email=email_settings, config=config, commit=commit,",
          "",
          "[Added Lines]",
          "192:     all_user = ub.session.query(ub.User).all()",
          "195:     return render_title_template(\"admin.html\", allUser=all_user, email=email_settings, config=config, commit=commit,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242: @login_required",
          "243: @admin_required",
          "244: def view_configuration():",
          "249:     languages = calibre_db.speaking_language()",
          "251:     return render_title_template(\"config_view_edit.html\", conf=config, readColumns=read_column,",
          "252:                                  restrictColumns=restrict_columns,",
          "253:                                  languages=languages,",
          "",
          "[Removed Lines]",
          "245:     read_column = calibre_db.session.query(db.Custom_Columns)\\",
          "246:         .filter(and_(db.Custom_Columns.datatype == 'bool', db.Custom_Columns.mark_for_delete == 0)).all()",
          "247:     restrict_columns = calibre_db.session.query(db.Custom_Columns)\\",
          "248:         .filter(and_(db.Custom_Columns.datatype == 'text', db.Custom_Columns.mark_for_delete == 0)).all()",
          "250:     translations = [LC('en')] + babel.list_translations()",
          "",
          "[Added Lines]",
          "245:     read_column = calibre_db.session.query(db.CustomColumns)\\",
          "246:         .filter(and_(db.CustomColumns.datatype == 'bool', db.CustomColumns.mark_for_delete == 0)).all()",
          "247:     restrict_columns = calibre_db.session.query(db.CustomColumns)\\",
          "248:         .filter(and_(db.CustomColumns.datatype == 'text', db.CustomColumns.mark_for_delete == 0)).all()",
          "250:     translations = [Locale('en')] + babel.list_translations()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261: def edit_user_table():",
          "262:     visibility = current_user.view_settings.get('useredit', {})",
          "263:     languages = calibre_db.speaking_language()",
          "266:     tags = calibre_db.session.query(db.Tags)\\",
          "267:         .join(db.books_tags_link)\\",
          "268:         .join(db.Books)\\",
          "",
          "[Removed Lines]",
          "264:     translations = babel.list_translations() + [LC('en')]",
          "265:     allUser = ub.session.query(ub.User)",
          "",
          "[Added Lines]",
          "264:     translations = babel.list_translations() + [Locale('en')]",
          "265:     all_user = ub.session.query(ub.User)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "274:     else:",
          "275:         custom_values = []",
          "276:     if not config.config_anonbrowse:",
          "278:     kobo_support = feature_support['kobo'] and config.config_kobo_sync",
          "279:     return render_title_template(\"user_table.html\",",
          "281:                                  tags=tags,",
          "282:                                  custom_values=custom_values,",
          "283:                                  translations=translations,",
          "",
          "[Removed Lines]",
          "277:         allUser = allUser.filter(ub.User.role.op('&')(constants.ROLE_ANONYMOUS) != constants.ROLE_ANONYMOUS)",
          "280:                                  users=allUser.all(),",
          "",
          "[Added Lines]",
          "277:         all_user = all_user.filter(ub.User.role.op('&')(constants.ROLE_ANONYMOUS) != constants.ROLE_ANONYMOUS)",
          "280:                                  users=all_user.all(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "332:         if user.default_language == \"all\":",
          "333:             user.default = _(\"All\")",
          "334:         else:",
          "337:     table_entries = {'totalNotFiltered': total_count, 'total': filtered_count, \"rows\": users}",
          "338:     js_list = json.dumps(table_entries, cls=db.AlchemyEncoder)",
          "",
          "[Removed Lines]",
          "335:             user.default = LC.parse(user.default_language).get_language_name(get_locale())",
          "",
          "[Added Lines]",
          "335:             user.default = Locale.parse(user.default_language).get_language_name(get_locale())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "380: @login_required",
          "381: @admin_required",
          "382: def table_get_locale():",
          "384:     ret = list()",
          "385:     current_locale = get_locale()",
          "386:     for loc in locale:",
          "",
          "[Removed Lines]",
          "383:     locale = babel.list_translations() + [LC('en')]",
          "",
          "[Added Lines]",
          "383:     locale = babel.list_translations() + [Locale('en')]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "444:                 elif param.endswith('role'):",
          "445:                     value = int(vals['field_index'])",
          "446:                     if user.name == \"Guest\" and value in \\",
          "448:                         raise Exception(_(\"Guest can't have this role\"))",
          "449:                     # check for valid value, last on checks for power of 2 value",
          "450:                     if value > 0 and value <= constants.ROLE_VIEWER and (value & value-1 == 0 or value == 1):",
          "",
          "[Removed Lines]",
          "447:                                  [constants.ROLE_ADMIN, constants.ROLE_PASSWD, constants.ROLE_EDIT_SHELFS]:",
          "",
          "[Added Lines]",
          "447:                             [constants.ROLE_ADMIN, constants.ROLE_PASSWD, constants.ROLE_EDIT_SHELFS]:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "525: def check_valid_read_column(column):",
          "526:     if column != \"0\":",
          "529:             return False",
          "530:     return True",
          "533: def check_valid_restricted_column(column):",
          "534:     if column != \"0\":",
          "537:             return False",
          "538:     return True",
          "",
          "[Removed Lines]",
          "527:         if not calibre_db.session.query(db.Custom_Columns).filter(db.Custom_Columns.id == column) \\",
          "528:               .filter(and_(db.Custom_Columns.datatype == 'bool', db.Custom_Columns.mark_for_delete == 0)).all():",
          "535:         if not calibre_db.session.query(db.Custom_Columns).filter(db.Custom_Columns.id == column) \\",
          "536:               .filter(and_(db.Custom_Columns.datatype == 'text', db.Custom_Columns.mark_for_delete == 0)).all():",
          "",
          "[Added Lines]",
          "527:         if not calibre_db.session.query(db.CustomColumns).filter(db.CustomColumns.id == column) \\",
          "528:               .filter(and_(db.CustomColumns.datatype == 'bool', db.CustomColumns.mark_for_delete == 0)).all():",
          "535:         if not calibre_db.session.query(db.CustomColumns).filter(db.CustomColumns.id == column) \\",
          "536:               .filter(and_(db.CustomColumns.datatype == 'text', db.CustomColumns.mark_for_delete == 0)).all():",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1078:     reboot_required = False",
          "1079:     for element in oauthblueprints:",
          "1080:         if to_save[\"config_\" + str(element['id']) + \"_oauth_client_id\"] != element['oauth_client_id'] \\",
          "1082:             reboot_required = True",
          "1083:             element['oauth_client_id'] = to_save[\"config_\" + str(element['id']) + \"_oauth_client_id\"]",
          "1084:             element['oauth_client_secret'] = to_save[\"config_\" + str(element['id']) + \"_oauth_client_secret\"]",
          "1085:         if to_save[\"config_\" + str(element['id']) + \"_oauth_client_id\"] \\",
          "1087:             active_oauths += 1",
          "1088:             element[\"active\"] = 1",
          "1089:         else:",
          "",
          "[Removed Lines]",
          "1081:             or to_save[\"config_\" + str(element['id']) + \"_oauth_client_secret\"] != element['oauth_client_secret']:",
          "1086:             and to_save[\"config_\" + str(element['id']) + \"_oauth_client_secret\"]:",
          "",
          "[Added Lines]",
          "1081:                 or to_save[\"config_\" + str(element['id']) + \"_oauth_client_secret\"] != element['oauth_client_secret']:",
          "1086:                 and to_save[\"config_\" + str(element['id']) + \"_oauth_client_secret\"]:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1136:     if not config.config_ldap_provider_url \\",
          "1137:         or not config.config_ldap_port \\",
          "1138:         or not config.config_ldap_dn \\",
          "1140:         return reboot_required, _configuration_result(_('Please Enter a LDAP Provider, '",
          "1141:                                                         'Port, DN and User Object Identifier'))",
          "",
          "[Removed Lines]",
          "1139:         or not config.config_ldap_user_object:",
          "",
          "[Added Lines]",
          "1139:             or not config.config_ldap_user_object:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1211:                                            '',",
          "1212:                                            to_save['config_calibre_dir'],",
          "1213:                                            flags=re.IGNORECASE)",
          "1214:     try:",
          "1215:         db_change, db_valid = _db_simulate_change()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1214:     db_valid = False",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1229:         return _db_configuration_result('{}'.format(ex), gdrive_error)",
          "1231:     if db_change or not db_valid or not config.db_configured \\",
          "1233:         if not calibre_db.setup_db(to_save['config_calibre_dir'], ub.app_DB_path):",
          "1234:             return _db_configuration_result(_('DB Location is not Valid, Please Enter Correct Path'),",
          "1235:                                             gdrive_error)",
          "1237:         # if db changed -> delete shelfs, delete download books, delete read books, kobo sync...",
          "1238:         if db_change:",
          "1239:             log.info(\"Calibre Database changed, delete all Calibre-Web info related to old Database\")",
          "",
          "[Removed Lines]",
          "1232:           or config.config_calibre_dir != to_save[\"config_calibre_dir\"]:",
          "1236:         config.store_calibre_uuid(calibre_db, db.Library_Id)",
          "",
          "[Added Lines]",
          "1233:             or config.config_calibre_dir != to_save[\"config_calibre_dir\"]:",
          "1237:         config.store_calibre_uuid(calibre_db, db.LibraryId)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1272:         _config_checkbox_int(to_save, \"config_unicode_filename\")",
          "1273:         # Reboot on config_anonbrowse with enabled ldap, as decoraters are changed in this case",
          "1274:         reboot_required |= (_config_checkbox_int(to_save, \"config_anonbrowse\")",
          "1276:         _config_checkbox_int(to_save, \"config_public_reg\")",
          "1277:         _config_checkbox_int(to_save, \"config_register_email\")",
          "1278:         reboot_required |= _config_checkbox_int(to_save, \"config_kobo_sync\")",
          "",
          "[Removed Lines]",
          "1275:                              and config.config_login_type == constants.LOGIN_LDAP)",
          "",
          "[Added Lines]",
          "1276:                             and config.config_login_type == constants.LOGIN_LDAP)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1560: def new_user():",
          "1561:     content = ub.User()",
          "1562:     languages = calibre_db.speaking_language()",
          "1564:     kobo_support = feature_support['kobo'] and config.config_kobo_sync",
          "1565:     if request.method == \"POST\":",
          "1566:         to_save = request.form.to_dict()",
          "",
          "[Removed Lines]",
          "1563:     translations = [LC('en')] + babel.list_translations()",
          "",
          "[Added Lines]",
          "1564:     translations = [Locale('en')] + babel.list_translations()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1647:         flash(_(u\"User not found\"), category=\"error\")",
          "1648:         return redirect(url_for('admin.admin'))",
          "1649:     languages = calibre_db.speaking_language(return_all_languages=True)",
          "1651:     kobo_support = feature_support['kobo'] and config.config_kobo_sync",
          "1652:     if request.method == \"POST\":",
          "1653:         to_save = request.form.to_dict()",
          "",
          "[Removed Lines]",
          "1650:     translations = babel.list_translations() + [LC('en')]",
          "",
          "[Added Lines]",
          "1651:     translations = babel.list_translations() + [Locale('en')]",
          "",
          "---------------"
        ],
        "cps/db.py||cps/db.py": [
          "File: cps/db.py -> cps/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #  You should have received a copy of the GNU General Public License",
          "18: #  along with this program. If not, see <http://www.gnu.org/licenses/>.",
          "21: import os",
          "22: import re",
          "23: import ast",
          "24: import json",
          "25: from datetime import datetime",
          "26: from urllib.parse import quote",
          "28: from sqlalchemy import create_engine",
          "29: from sqlalchemy import Table, Column, ForeignKey, CheckConstraint",
          "",
          "[Removed Lines]",
          "20: import copy",
          "",
          "[Added Lines]",
          "26: import unidecode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: from weakref import WeakSet",
          "58: log = logger.create()",
          "",
          "[Removed Lines]",
          "52: try:",
          "53:     import unidecode",
          "54:     use_unidecode = True",
          "55: except ImportError:",
          "56:     use_unidecode = False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:                               )",
          "97:     __tablename__ = 'library_id'",
          "98:     id = Column(Integer, primary_key=True)",
          "99:     uuid = Column(String, nullable=False)",
          "",
          "[Removed Lines]",
          "96: class Library_Id(Base):",
          "",
          "[Added Lines]",
          "91: class LibraryId(Base):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:         self.type = id_type",
          "113:         self.book = book",
          "116:         format_type = self.type.lower()",
          "117:         if format_type == 'amazon':",
          "118:             return u\"Amazon\"",
          "",
          "[Removed Lines]",
          "115:     def formatType(self):",
          "",
          "[Added Lines]",
          "110:     def format_type(self):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "184:     book = Column(Integer, ForeignKey('books.id'), nullable=False, unique=True)",
          "185:     text = Column(String(collation='NOCASE'), nullable=False)",
          "189:         self.book = book",
          "191:     def get(self):",
          "",
          "[Removed Lines]",
          "187:     def __init__(self, text, book):",
          "188:         self.text = text",
          "",
          "[Added Lines]",
          "182:     def __init__(self, comment, book):",
          "183:         self.text = comment",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376:     @property",
          "377:     def atom_timestamp(self):",
          "382:     __tablename__ = 'custom_columns'",
          "384:     id = Column(Integer, primary_key=True)",
          "",
          "[Removed Lines]",
          "378:         return (self.timestamp.strftime('%Y-%m-%dT%H:%M:%S+00:00') or '')",
          "381: class Custom_Columns(Base):",
          "",
          "[Added Lines]",
          "372:         return self.timestamp.strftime('%Y-%m-%dT%H:%M:%S+00:00') or ''",
          "375: class CustomColumns(Base):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "436:         return json.JSONEncoder.default(self, o)",
          "440:     _init = False",
          "441:     engine = None",
          "442:     config = None",
          "",
          "[Removed Lines]",
          "439: class CalibreDB():",
          "",
          "[Added Lines]",
          "433: class CalibreDB:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "450:         \"\"\"",
          "451:         self.session = None",
          "452:         if self._init:",
          "455:         self.instances.add(self)",
          "458:         self.session = self.session_factory()",
          "459:         self.session.expire_on_commit = expire_on_commit",
          "460:         self.update_title_sort(self.config)",
          "462:     @classmethod",
          "464:         cc_ids = []",
          "465:         books_custom_column_links = {}",
          "466:         for row in cc:",
          "",
          "[Removed Lines]",
          "453:             self.initSession(expire_on_commit)",
          "457:     def initSession(self, expire_on_commit=True):",
          "463:     def setup_db_cc_classes(self, cc):",
          "",
          "[Added Lines]",
          "447:             self.init_session(expire_on_commit)",
          "451:     def init_session(self, expire_on_commit=True):",
          "457:     def setup_db_cc_classes(cls, cc):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "539:             return False, False",
          "540:         try:",
          "541:             check_engine = create_engine('sqlite://',",
          "546:             with check_engine.begin() as connection:",
          "547:                 connection.execute(text(\"attach database '{}' as calibre;\".format(dbpath)))",
          "548:                 connection.execute(text(\"attach database '{}' as app_settings;\".format(app_db_path)))",
          "549:                 local_session = scoped_session(sessionmaker())",
          "550:                 local_session.configure(bind=connection)",
          "552:                 # local_session.dispose()",
          "554:             check_engine.connect()",
          "",
          "[Removed Lines]",
          "542:                           echo=False,",
          "543:                           isolation_level=\"SERIALIZABLE\",",
          "544:                           connect_args={'check_same_thread': False},",
          "545:                           poolclass=StaticPool)",
          "551:                 database_uuid = local_session().query(Library_Id).one_or_none()",
          "",
          "[Added Lines]",
          "536:                                          echo=False,",
          "537:                                          isolation_level=\"SERIALIZABLE\",",
          "538:                                          connect_args={'check_same_thread': False},",
          "539:                                          poolclass=StaticPool)",
          "545:                 database_uuid = local_session().query(LibraryId).one_or_none()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "603:                                                           autoflush=True,",
          "604:                                                           bind=cls.engine))",
          "605:         for inst in cls.instances:",
          "608:         cls._init = True",
          "609:         return True",
          "",
          "[Removed Lines]",
          "606:             inst.initSession()",
          "",
          "[Added Lines]",
          "600:             inst.init_session()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "644:     # Language and content filters for displaying in the UI",
          "645:     def common_filters(self, allow_show_archived=False, return_all_languages=False):",
          "646:         if not allow_show_archived:",
          "653:             archived_book_ids = [archived_book.book_id for archived_book in archived_books]",
          "654:             archived_filter = Books.id.notin_(archived_book_ids)",
          "655:         else:",
          "",
          "[Removed Lines]",
          "647:             archived_books = (",
          "648:                 ub.session.query(ub.ArchivedBook)",
          "649:                     .filter(ub.ArchivedBook.user_id == int(current_user.id))",
          "650:                     .filter(ub.ArchivedBook.is_archived == True)",
          "651:                     .all()",
          "652:             )",
          "",
          "[Added Lines]",
          "641:             archived_books = (ub.session.query(ub.ArchivedBook)",
          "642:                               .filter(ub.ArchivedBook.user_id == int(current_user.id))",
          "643:                               .filter(ub.ArchivedBook.is_archived == True)",
          "644:                               .all())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "668:                 pos_cc_list = current_user.allowed_column_value.split(',')",
          "669:                 pos_content_cc_filter = true() if pos_cc_list == [''] else \\",
          "670:                     getattr(Books, 'custom_column_' + str(self.config.config_restricted_column)). \\",
          "672:                 neg_cc_list = current_user.denied_column_value.split(',')",
          "673:                 neg_content_cc_filter = false() if neg_cc_list == [''] else \\",
          "674:                     getattr(Books, 'custom_column_' + str(self.config.config_restricted_column)). \\",
          "676:             except (KeyError, AttributeError):",
          "677:                 pos_content_cc_filter = false()",
          "678:                 neg_content_cc_filter = true()",
          "",
          "[Removed Lines]",
          "671:                         any(cc_classes[self.config.config_restricted_column].value.in_(pos_cc_list))",
          "675:                         any(cc_classes[self.config.config_restricted_column].value.in_(neg_cc_list))",
          "",
          "[Added Lines]",
          "663:                     any(cc_classes[self.config.config_restricted_column].value.in_(pos_cc_list))",
          "667:                     any(cc_classes[self.config.config_restricted_column].value.in_(neg_cc_list))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "728:                 query = (self.session.query(database, ub.ReadBook.read_status, ub.ArchivedBook.is_archived)",
          "729:                          .select_from(Books)",
          "730:                          .outerjoin(ub.ReadBook,",
          "732:             else:",
          "733:                 try:",
          "734:                     read_column = cc_classes[config_read_column]",
          "",
          "[Removed Lines]",
          "731:                                and_(ub.ReadBook.user_id == int(current_user.id), ub.ReadBook.book_id == Books.id)))",
          "",
          "[Added Lines]",
          "723:                                     and_(ub.ReadBook.user_id == int(current_user.id), ub.ReadBook.book_id == Books.id)))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "738:                 except (KeyError, AttributeError):",
          "739:                     log.error(\"Custom Column No.%d is not existing in calibre database\", read_column)",
          "740:                     # Skip linking read column and return None instead of read status",
          "742:             query = query.outerjoin(ub.ArchivedBook, and_(Books.id == ub.ArchivedBook.book_id,",
          "743:                                                           int(current_user.id) == ub.ArchivedBook.user_id))",
          "744:         else:",
          "",
          "[Removed Lines]",
          "741:                     query =self.session.query(database, None, ub.ArchivedBook.is_archived)",
          "",
          "[Added Lines]",
          "733:                     query = self.session.query(database, None, ub.ArchivedBook.is_archived)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "872:                 ))",
          "874:     # read search results from calibre-database and return it (function is used for feed and simple search",
          "876:                            config_read_column=False, *join):",
          "877:         order = order[0] if order else [Books.sort]",
          "878:         pagination = None",
          "",
          "[Removed Lines]",
          "875:     def get_search_results(self, term, offset=None, order=None, limit=None, allow_show_archived=False,",
          "",
          "[Added Lines]",
          "866:     def get_search_results(self, term, offset=None, order=None, limit=None,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "973:     try:",
          "974:         return unidecode.unidecode(s.lower())",
          "975:     except Exception as ex:",
          "978:         return s.lower()",
          "",
          "[Removed Lines]",
          "976:         log = logger.create()",
          "977:         log.error_or_exception(ex)",
          "",
          "[Added Lines]",
          "966:         _log = logger.create()",
          "967:         _log.error_or_exception(ex)",
          "",
          "---------------"
        ],
        "cps/editbooks.py||cps/editbooks.py": [
          "File: cps/editbooks.py -> cps/editbooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: try:",
          "32:     from lxml.html.clean import clean_html",
          "33: except ImportError:",
          "36: from flask import Blueprint, request, flash, redirect, url_for, abort, Markup, Response",
          "37: from flask_babel import gettext as _",
          "",
          "[Removed Lines]",
          "34:     pass",
          "",
          "[Added Lines]",
          "34:     clean_html = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: from .kobo_sync_status import change_archived_books",
          "52: log = logger.create()",
          "",
          "[Removed Lines]",
          "51: editbook = Blueprint('editbook', __name__)",
          "",
          "[Added Lines]",
          "51: EditBook = Blueprint('edit-book', __name__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     else:",
          "129:         db_filter = db_object.name",
          "130:     for add_element in add_elements:",
          "132:         db_element = db_session.query(db_object).filter(db_filter == add_element).first()",
          "133:         # if no element is found add it",
          "134:         if db_type == 'author':",
          "",
          "[Removed Lines]",
          "131:         # check if a element with that name exists",
          "",
          "[Added Lines]",
          "134:         # check if an element with that name exists",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:             db_book_object.append(new_element)",
          "148:         else:",
          "149:             db_element = create_objects_for_addition(db_element, add_element, db_type)",
          "151:             # add element to book",
          "152:             changed = True",
          "153:             db_book_object.append(db_element)",
          "",
          "[Removed Lines]",
          "150:             changed = True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:     return db_element",
          "182: # because they are no longer used, than check if elements have to be added to database",
          "183: def modify_database_object(input_elements, db_book_object, db_object, db_session, db_type):",
          "184:     # passing input_elements not as a list may lead to undesired results",
          "",
          "[Removed Lines]",
          "181: # Modifies different Database objects, first check if elements if elements have to be deleted,",
          "",
          "[Added Lines]",
          "183: # Modifies different Database objects, first check if elements have to be deleted,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:     input_dict = dict([(identifier.type.lower(), identifier) for identifier in input_identifiers])",
          "208:     if len(input_identifiers) != len(input_dict):",
          "209:         error = True",
          "211:     # delete db identifiers not present in input or modify them with input val",
          "212:     for identifier_type, identifier in db_dict.items():",
          "213:         if identifier_type not in input_dict.keys():",
          "",
          "[Removed Lines]",
          "210:     db_dict = dict([(identifier.type.lower(), identifier) for identifier in db_identifiers ])",
          "",
          "[Added Lines]",
          "212:     db_dict = dict([(identifier.type.lower(), identifier) for identifier in db_identifiers])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "224:             changed = True",
          "225:     return changed, error",
          "228: @login_required",
          "229: def delete_book_from_details(book_id):",
          "230:     return Response(delete_book_from_table(book_id, \"\", True), mimetype='application/json')",
          "235: @login_required",
          "236: def delete_book_ajax(book_id, book_format):",
          "237:     return delete_book_from_table(book_id, book_format, False)",
          "",
          "[Removed Lines]",
          "227: @editbook.route(\"/ajax/delete/<int:book_id>\", methods=[\"POST\"])",
          "233: @editbook.route(\"/delete/<int:book_id>\", defaults={'book_format': \"\"}, methods=[\"POST\"])",
          "234: @editbook.route(\"/delete/<int:book_id>/<string:book_format>\", methods=[\"POST\"])",
          "",
          "[Added Lines]",
          "230: @EditBook.route(\"/ajax/delete/<int:book_id>\", methods=[\"POST\"])",
          "236: @EditBook.route(\"/delete/<int:book_id>\", defaults={'book_format': \"\"}, methods=[\"POST\"])",
          "237: @EditBook.route(\"/delete/<int:book_id>/<string:book_format>\", methods=[\"POST\"])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "252:     modify_database_object([u''], book.languages, db.Languages, calibre_db.session, 'languages')",
          "253:     modify_database_object([u''], book.publishers, db.Publishers, calibre_db.session, 'publishers')",
          "257:     for c in cc:",
          "258:         cc_string = \"custom_column_\" + str(c.id)",
          "259:         if not c.is_multiple:",
          "",
          "[Removed Lines]",
          "255:     cc = calibre_db.session.query(db.Custom_Columns). \\",
          "256:         filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "[Added Lines]",
          "258:     cc = calibre_db.session.query(db.CustomColumns). \\",
          "259:         filter(db.CustomColumns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283:     calibre_db.session.query(db.Books).filter(db.Books.id == book_id).delete()",
          "287:     if book_format:",
          "290:                                          \"type\": \"success\",",
          "291:                                          \"format\": book_format,",
          "292:                                          \"message\": _('Book Format Successfully Deleted')}])",
          "293:         else:",
          "294:             flash(_('Book Format Successfully Deleted'), category=\"success\")",
          "296:     else:",
          "298:             return json.dumps([warning, {\"location\": url_for('web.index'),",
          "299:                                          \"type\": \"success\",",
          "300:                                          \"format\": book_format,",
          "",
          "[Removed Lines]",
          "286: def render_delete_book_result(book_format, jsonResponse, warning, book_id):",
          "288:         if jsonResponse:",
          "289:             return json.dumps([warning, {\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "295:             return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "297:         if jsonResponse:",
          "",
          "[Added Lines]",
          "289: def render_delete_book_result(book_format, json_response, warning, book_id):",
          "291:         if json_response:",
          "292:             return json.dumps([warning, {\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "298:             return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "300:         if json_response:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "304:             return redirect(url_for('web.index'))",
          "308:     warning = {}",
          "309:     if current_user.role_delete_books():",
          "310:         book = calibre_db.get_book(book_id)",
          "",
          "[Removed Lines]",
          "307: def delete_book_from_table(book_id, book_format, jsonResponse):",
          "",
          "[Added Lines]",
          "310: def delete_book_from_table(book_id, book_format, json_response):",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:             try:",
          "313:                 result, error = helper.delete_book(book, config.config_calibre_dir, book_format=book_format.upper())",
          "314:                 if not result:",
          "320:                     else:",
          "321:                         flash(error, category=\"error\")",
          "323:                 if error:",
          "329:                     else:",
          "330:                         flash(error, category=\"warning\")",
          "331:                 if not book_format:",
          "",
          "[Removed Lines]",
          "315:                     if jsonResponse:",
          "316:                         return json.dumps([{\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "317:                                            \"type\": \"danger\",",
          "318:                                            \"format\": \"\",",
          "319:                                            \"message\": error}])",
          "322:                         return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "324:                     if jsonResponse:",
          "325:                         warning = {\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "326:                                                 \"type\": \"warning\",",
          "327:                                                 \"format\": \"\",",
          "328:                                                 \"message\": error}",
          "",
          "[Added Lines]",
          "318:                     if json_response:",
          "319:                         return json.dumps([{\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "320:                                             \"type\": \"danger\",",
          "321:                                             \"format\": \"\",",
          "322:                                             \"message\": error}])",
          "325:                         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "327:                     if json_response:",
          "328:                         warning = {\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "329:                                    \"type\": \"warning\",",
          "330:                                    \"format\": \"\",",
          "331:                                    \"message\": error}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "339:             except Exception as ex:",
          "340:                 log.error_or_exception(ex)",
          "341:                 calibre_db.session.rollback()",
          "344:                                         \"type\": \"danger\",",
          "345:                                         \"format\": \"\",",
          "346:                                         \"message\": ex}])",
          "347:                 else:",
          "348:                     flash(str(ex), category=\"error\")",
          "351:         else:",
          "352:             # book not found",
          "353:             log.error('Book with id \"%s\" could not be deleted: not found', book_id)",
          "355:     message = _(\"You are missing permissions to delete books\")",
          "358:                            \"type\": \"danger\",",
          "359:                            \"format\": \"\",",
          "360:                            \"message\": message})",
          "361:     else:",
          "362:         flash(message, category=\"error\")",
          "366: def render_edit_book(book_id):",
          "368:     book = calibre_db.get_filtered_book(book_id, allow_show_archived=True)",
          "369:     if not book:",
          "371:         return redirect(url_for(\"web.index\"))",
          "373:     for lang in book.languages:",
          "",
          "[Removed Lines]",
          "342:                 if jsonResponse:",
          "343:                     return json.dumps([{\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "349:                     return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "354:         return render_delete_book_result(book_format, jsonResponse, warning, book_id)",
          "356:     if jsonResponse:",
          "357:         return json.dumps({\"location\": url_for(\"editbook.edit_book\", book_id=book_id),",
          "363:         return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "367:     cc = calibre_db.session.query(db.Custom_Columns).filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions)).all()",
          "370:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")",
          "",
          "[Added Lines]",
          "345:                 if json_response:",
          "346:                     return json.dumps([{\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "352:                     return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "357:         return render_delete_book_result(book_format, json_response, warning, book_id)",
          "359:     if json_response:",
          "360:         return json.dumps({\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "366:         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "370:     cc = calibre_db.session.query(db.CustomColumns).filter(db.CustomColumns.datatype.notin_(db.cc_exceptions)).all()",
          "373:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),",
          "374:               category=\"error\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "380:         author_names.append(authr.name.replace('|', ','))",
          "382:     # Option for showing convertbook button",
          "384:     allowed_conversion_formats = list()",
          "386:     if config.config_converterpath:",
          "387:         for file in book.data:",
          "388:             if file.format.lower() in constants.EXTENSIONS_CONVERT_FROM:",
          "",
          "[Removed Lines]",
          "383:     valid_source_formats=list()",
          "385:     kepub_possible=None",
          "",
          "[Added Lines]",
          "387:     valid_source_formats = list()",
          "389:     kepub_possible = None",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "447: def edit_book_series_index(series_index, book):",
          "448:     # Add default series_index to book",
          "450:     series_index = series_index or '1'",
          "451:     if not series_index.replace('.', '', 1).isdigit():",
          "452:         flash(_(\"%(seriesindex)s is not a valid number, skipping\", seriesindex=series_index), category=\"warning\")",
          "453:         return False",
          "454:     if str(book.series_index) != series_index:",
          "455:         book.series_index = series_index",
          "460: # Handle book comments/description",
          "461: def edit_book_comments(comments, book):",
          "463:     if comments:",
          "464:         comments = clean_html(comments)",
          "465:     if len(book.comments):",
          "466:         if book.comments[0].text != comments:",
          "467:             book.comments[0].text = comments",
          "469:     else:",
          "470:         if comments:",
          "477:     input_languages = languages.split(',')",
          "478:     unknown_languages = []",
          "480:         input_l = isoLanguages.get_language_codes(get_locale(), input_languages, unknown_languages)",
          "481:     else:",
          "482:         input_l = isoLanguages.get_valid_language_codes(get_locale(), input_languages, unknown_languages)",
          "485:         if isinstance(invalid, list):",
          "487:         else:",
          "489:     # ToDo: Not working correct",
          "491:         # If the language of the file is excluded from the users view, it's not imported, to allow the user to view",
          "492:         # the book it's language is set to the filter language",
          "493:         if input_l[0] != current_user.filter_language() and current_user.filter_language() != \"all\":",
          "",
          "[Removed Lines]",
          "449:     modif_date = False",
          "456:         modif_date = True",
          "457:     return modif_date",
          "462:     modif_date = False",
          "468:             modif_date = True",
          "471:             book.comments.append(db.Comments(text=comments, book=book.id))",
          "472:             modif_date = True",
          "473:     return modif_date",
          "476: def edit_book_languages(languages, book, upload=False, invalid=None):",
          "479:     if not upload:",
          "483:     for l in unknown_languages:",
          "484:         log.error(\"'%s' is not a valid language\", l)",
          "486:             invalid.append(l)",
          "488:             raise ValueError(_(u\"'%(langname)s' is not a valid language\", langname=l))",
          "490:     if upload and len(input_l) == 1:",
          "",
          "[Added Lines]",
          "454:     modify_date = False",
          "461:         modify_date = True",
          "462:     return modify_date",
          "467:     modify_date = False",
          "473:             modify_date = True",
          "476:             book.comments.append(db.Comments(comment=comments, book=book.id))",
          "477:             modify_date = True",
          "478:     return modify_date",
          "481: def edit_book_languages(languages, book, upload_mode=False, invalid=None):",
          "484:     if not upload_mode:",
          "488:     for lang in unknown_languages:",
          "489:         log.error(\"'%s' is not a valid language\", lang)",
          "491:             invalid.append(lang)",
          "493:             raise ValueError(_(u\"'%(langname)s' is not a valid language\", langname=lang))",
          "495:     if upload_mode and len(input_l) == 1:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "571:         getattr(book, cc_string).append(new_cc)",
          "572:     return changed, to_save",
          "574: def edit_single_cc_data(book_id, book, column_id, to_save):",
          "578:           .all())",
          "579:     return edit_cc_data(book_id, book, to_save, cc)",
          "581: def edit_all_cc_data(book_id, book, to_save):",
          "583:     return edit_cc_data(book_id, book, to_save, cc)",
          "585: def edit_cc_data(book_id, book, to_save, cc):",
          "586:     changed = False",
          "587:     for c in cc:",
          "",
          "[Removed Lines]",
          "575:     cc = (calibre_db.session.query(db.Custom_Columns)",
          "576:           .filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions))",
          "577:           .filter(db.Custom_Columns.id == column_id)",
          "582:     cc = calibre_db.session.query(db.Custom_Columns).filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "[Added Lines]",
          "581:     cc = (calibre_db.session.query(db.CustomColumns)",
          "582:           .filter(db.CustomColumns.datatype.notin_(db.cc_exceptions))",
          "583:           .filter(db.CustomColumns.id == column_id)",
          "589:     cc = calibre_db.session.query(db.CustomColumns).filter(db.CustomColumns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "614:                                               'custom')",
          "615:     return changed",
          "618:     # Check and handle Uploaded file",
          "621:         # check for empty request",
          "622:         if requested_file.filename != '':",
          "623:             if not current_user.role_upload():",
          "",
          "[Removed Lines]",
          "617: def upload_single_file(request, book, book_id):",
          "619:     if 'btn-upload-format' in request.files:",
          "620:         requested_file = request.files['btn-upload-format']",
          "",
          "[Added Lines]",
          "626: def upload_single_file(file_request, book, book_id):",
          "628:     if 'btn-upload-format' in file_request.files:",
          "629:         requested_file = file_request.files['btn-upload-format']",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "670:             # Queue uploader info",
          "671:             link = '<a href=\"{}\">{}</a>'.format(url_for('web.show_book', book_id=book.id), escape(book.title))",
          "675:             return uploader.process(",
          "676:                 saved_filename, *os.path.splitext(requested_file.filename),",
          "677:                 rarExecutable=config.config_rarfile_location)",
          "683:         # check for empty request",
          "684:         if requested_file.filename != '':",
          "685:             if not current_user.role_upload():",
          "",
          "[Removed Lines]",
          "672:             uploadText=_(u\"File format %(ext)s added to %(book)s\", ext=file_ext.upper(), book=link)",
          "673:             WorkerThread.add(current_user.name, TaskUpload(uploadText, escape(book.title)))",
          "680: def upload_cover(request, book):",
          "681:     if 'btn-upload-cover' in request.files:",
          "682:         requested_file = request.files['btn-upload-cover']",
          "",
          "[Added Lines]",
          "681:             upload_text = _(u\"File format %(ext)s added to %(book)s\", ext=file_ext.upper(), book=link)",
          "682:             WorkerThread.add(current_user.name, TaskUpload(upload_text, escape(book.title)))",
          "689: def upload_cover(cover_request, book):",
          "690:     if 'btn-upload-cover' in cover_request.files:",
          "691:         requested_file = cover_request.files['btn-upload-cover']",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "707: def handle_author_on_edit(book, author_name, update_stored=True):",
          "708:     # handle author(s)",
          "711:     input_authors = list(map(lambda it: it.strip().replace(',', '|'), input_authors))",
          "712:     # Remove duplicates in authors list",
          "713:     input_authors = helper.uniq(input_authors)",
          "",
          "[Removed Lines]",
          "709:     # renamed = False",
          "710:     input_authors = author_name.split('&')",
          "",
          "[Added Lines]",
          "718:     input_authors, renamed = prepare_authors(author_name)",
          "719:     '''input_authors = author_name.split('&')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "725:             sorted_renamed_author = helper.get_sorted_author(renamed_author.name)",
          "726:             sorted_old_author = helper.get_sorted_author(in_aut)",
          "727:             for one_book in all_books:",
          "730:     change = modify_database_object(input_authors, book.authors, db.Authors, calibre_db.session, 'author')",
          "",
          "[Removed Lines]",
          "728:                 one_book.author_sort = one_book.author_sort.replace(sorted_renamed_author, sorted_old_author)",
          "",
          "[Added Lines]",
          "737:                 one_book.author_sort = one_book.author_sort.replace(sorted_renamed_author, sorted_old_author)'''",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "746:     return input_authors, change, renamed",
          "750: @login_required_if_no_ano",
          "751: @edit_required",
          "752: def edit_book(book_id):",
          "755:     # create the function for sorting...",
          "756:     try:",
          "",
          "[Removed Lines]",
          "749: @editbook.route(\"/admin/book/<int:book_id>\", methods=['GET', 'POST'])",
          "753:     modif_date = False",
          "",
          "[Added Lines]",
          "758: @EditBook.route(\"/admin/book/<int:book_id>\", methods=['GET', 'POST'])",
          "762:     modify_date = False",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "768:     # Book not found",
          "769:     if not book:",
          "771:         return redirect(url_for(\"web.index\"))",
          "773:     meta = upload_single_file(request, book, book_id)",
          "774:     if upload_cover(request, book) is True:",
          "775:         book.has_cover = 1",
          "777:     try:",
          "778:         to_save = request.form.to_dict()",
          "779:         merge_metadata(to_save, meta)",
          "",
          "[Removed Lines]",
          "770:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")",
          "776:         modif_date = True",
          "",
          "[Added Lines]",
          "779:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),",
          "780:               category=\"error\")",
          "786:         modify_date = True",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "786:         input_authors, authorchange, renamed = handle_author_on_edit(book, to_save[\"author_name\"])",
          "787:         if authorchange or title_change:",
          "788:             edited_books_id = book.id",
          "791:         if config.config_use_google_drive:",
          "792:             gdriveutils.updateGdriveCalibreFromLocal()",
          "795:         if edited_books_id:",
          "796:             error = helper.update_dir_structure(edited_books_id, config.config_calibre_dir, input_authors[0],",
          "799:         if not error:",
          "800:             if \"cover_url\" in to_save:",
          "",
          "[Removed Lines]",
          "789:             modif_date = True",
          "794:         error = False",
          "797:                                                renamed_author=renamed)",
          "",
          "[Added Lines]",
          "799:             modify_date = True",
          "804:         error = \"\"",
          "807:                                                 renamed_author=renamed)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "808:                         result, error = helper.save_cover_from_url(to_save[\"cover_url\"], book.path)",
          "809:                         if result is True:",
          "810:                             book.has_cover = 1",
          "812:                         else:",
          "813:                             flash(error, category=\"error\")",
          "815:             # Add default series_index to book",
          "817:             # Handle book comments/description",
          "819:             # Handle identifiers",
          "820:             input_identifiers = identifier_list(to_save, book)",
          "821:             modification, warning = modify_identifiers(input_identifiers, book.identifiers, calibre_db.session)",
          "822:             if warning:",
          "823:                 flash(_(\"Identifiers are not Case Sensitive, Overwriting Old Identifier\"), category=\"warning\")",
          "825:             # Handle book tags",
          "827:             # Handle book series",
          "829:             # handle book publisher",
          "831:             # handle book languages",
          "833:             # handle book ratings",
          "835:             # handle cc data",
          "838:             if to_save[\"pubdate\"]:",
          "839:                 try:",
          "",
          "[Removed Lines]",
          "811:                             modif_date = True",
          "816:             modif_date |= edit_book_series_index(to_save[\"series_index\"], book)",
          "818:             modif_date |= edit_book_comments(Markup(to_save['description']).unescape(), book)",
          "824:             modif_date |= modification",
          "826:             modif_date |= edit_book_tags(to_save['tags'], book)",
          "828:             modif_date |= edit_book_series(to_save[\"series\"], book)",
          "830:             modif_date |= edit_book_publisher(to_save['publisher'], book)",
          "832:             modif_date |= edit_book_languages(to_save['languages'], book)",
          "834:             modif_date |= edit_book_ratings(to_save, book)",
          "836:             modif_date |= edit_all_cc_data(book_id, book, to_save)",
          "",
          "[Added Lines]",
          "821:                             modify_date = True",
          "826:             modify_date |= edit_book_series_index(to_save[\"series_index\"], book)",
          "828:             modify_date |= edit_book_comments(Markup(to_save['description']).unescape(), book)",
          "834:             modify_date |= modification",
          "836:             modify_date |= edit_book_tags(to_save['tags'], book)",
          "838:             modify_date |= edit_book_series(to_save[\"series\"], book)",
          "840:             modify_date |= edit_book_publisher(to_save['publisher'], book)",
          "842:             modify_date |= edit_book_languages(to_save['languages'], book)",
          "844:             modify_date |= edit_book_ratings(to_save, book)",
          "846:             modify_date |= edit_all_cc_data(book_id, book, to_save)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "843:             else:",
          "844:                 book.pubdate = db.Books.DEFAULT_PUBDATE",
          "847:                 book.last_modified = datetime.utcnow()",
          "848:                 kobo_sync_status.remove_synced_book(edited_books_id, all=True)",
          "",
          "[Removed Lines]",
          "846:             if modif_date:",
          "",
          "[Added Lines]",
          "856:             if modify_date:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "905:     return result",
          "916:     # handle authors",
          "917:     input_authors = authr.split('&')",
          "918:     # handle_authors(input_authors)",
          "",
          "[Removed Lines]",
          "908: def prepare_authors_on_upload(title, authr):",
          "909:     if title != _(u'Unknown') and authr != _(u'Unknown'):",
          "910:         entry = calibre_db.check_exists_book(authr, title)",
          "911:         if entry:",
          "912:             log.info(\"Uploaded book probably exists in library\")",
          "913:             flash(_(u\"Uploaded book probably exists in the library, consider to change before upload new: \")",
          "914:                   + Markup(render_title_template('book_exists_flash.html', entry=entry)), category=\"warning\")",
          "",
          "[Added Lines]",
          "918: def prepare_authors(authr):",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "935:             sorted_old_author = helper.get_sorted_author(in_aut)",
          "936:             for one_book in all_books:",
          "937:                 one_book.author_sort = one_book.author_sort.replace(sorted_renamed_author, sorted_old_author)",
          "939:     sort_authors_list = list()",
          "940:     db_author = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "941:     return input_authors, renamed",
          "944: def prepare_authors_on_upload(title, authr):",
          "945:     if title != _(u'Unknown') and authr != _(u'Unknown'):",
          "946:         entry = calibre_db.check_exists_book(authr, title)",
          "947:         if entry:",
          "948:             log.info(\"Uploaded book probably exists in library\")",
          "949:             flash(_(u\"Uploaded book probably exists in the library, consider to change before upload new: \")",
          "950:                   + Markup(render_title_template('book_exists_flash.html', entry=entry)), category=\"warning\")",
          "952:     input_authors, renamed = prepare_authors(authr)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "955:     return sort_authors, input_authors, db_author, renamed",
          "959:     title = meta.title",
          "960:     authr = meta.author",
          "961:     sort_authors, input_authors, db_author, renamed_authors = prepare_authors_on_upload(title, authr)",
          "",
          "[Removed Lines]",
          "958: def create_book_on_upload(modif_date, meta):",
          "",
          "[Added Lines]",
          "973: def create_book_on_upload(modify_date, meta):",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "963:     title_dir = helper.get_valid_filename(title, chars=96)",
          "964:     author_dir = helper.get_valid_filename(db_author.name, chars=96)",
          "967:     path = os.path.join(author_dir, title_dir).replace('\\\\', '/')",
          "969:     # Calibre adds books with utc as timezone",
          "970:     db_book = db.Books(title, \"\", sort_authors, datetime.utcnow(), datetime(101, 1, 1),",
          "971:                        '1', datetime.utcnow(), path, meta.cover, db_author, [], \"\")",
          "976:     # Add series_index to book",
          "979:     # add languages",
          "982:     if invalid:",
          "986:     # handle tags",
          "989:     # handle publisher",
          "992:     # handle series",
          "995:     # Add file to book",
          "996:     file_size = os.path.getsize(meta.file_path)",
          "",
          "[Removed Lines]",
          "966:     # combine path and normalize path from windows systems",
          "973:     modif_date |= modify_database_object(input_authors, db_book.authors, db.Authors, calibre_db.session,",
          "974:                                          'author')",
          "977:     modif_date |= edit_book_series_index(meta.series_id, db_book)",
          "980:     invalid=[]",
          "981:     modif_date |= edit_book_languages(meta.languages, db_book, upload=True, invalid=invalid)",
          "983:         for l in invalid:",
          "984:             flash(_(u\"'%(langname)s' is not a valid language\", langname=l), category=\"warning\")",
          "987:     modif_date |= edit_book_tags(meta.tags, db_book)",
          "990:     modif_date |= edit_book_publisher(meta.publisher, db_book)",
          "993:     modif_date |= edit_book_series(meta.series, db_book)",
          "",
          "[Added Lines]",
          "981:     # combine path and normalize path from Windows systems",
          "988:     modify_date |= modify_database_object(input_authors, db_book.authors, db.Authors, calibre_db.session,",
          "989:                                           'author')",
          "992:     modify_date |= edit_book_series_index(meta.series_id, db_book)",
          "995:     invalid = []",
          "996:     modify_date |= edit_book_languages(meta.languages, db_book, upload_mode=True, invalid=invalid)",
          "998:         for lang in invalid:",
          "999:             flash(_(u\"'%(langname)s' is not a valid language\", langname=lang), category=\"warning\")",
          "1002:     modify_date |= edit_book_tags(meta.tags, db_book)",
          "1005:     modify_date |= edit_book_publisher(meta.publisher, db_book)",
          "1008:     modify_date |= edit_book_series(meta.series, db_book)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1045:               category=\"error\")",
          "1049: @login_required_if_no_ano",
          "1050: @upload_required",
          "1051: def upload():",
          "",
          "[Removed Lines]",
          "1048: @editbook.route(\"/upload\", methods=[\"POST\"])",
          "",
          "[Added Lines]",
          "1064: @EditBook.route(\"/upload\", methods=[\"POST\"])",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1054:     if request.method == 'POST' and 'btn-upload' in request.files:",
          "1055:         for requested_file in request.files.getlist(\"btn-upload\"):",
          "1056:             try:",
          "1058:                 # create the function for sorting...",
          "1059:                 calibre_db.update_title_sort(config)",
          "1060:                 calibre_db.session.connection().connection.connection.create_function('uuid4', 0, lambda: str(uuid4()))",
          "",
          "[Removed Lines]",
          "1057:                 modif_date = False",
          "",
          "[Added Lines]",
          "1073:                 modify_date = False",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1063:                 if error:",
          "1064:                     return error",
          "1071:                 book_id = db_book.id",
          "1072:                 title = db_book.title",
          "",
          "[Removed Lines]",
          "1066:                 db_book, input_authors, title_dir, renamed_authors = create_book_on_upload(modif_date, meta)",
          "1068:                 # Comments needs book id therefore only possible after flush",
          "1069:                 modif_date |= edit_book_comments(Markup(meta.description).unescape(), db_book)",
          "",
          "[Added Lines]",
          "1082:                 db_book, input_authors, title_dir, renamed_authors = create_book_on_upload(modify_date, meta)",
          "1084:                 # Comments need book id therefore only possible after flush",
          "1085:                 modify_date |= edit_book_comments(Markup(meta.description).unescape(), db_book)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1096:                 if error:",
          "1097:                     flash(error, category=\"error\")",
          "1098:                 link = '<a href=\"{}\">{}</a>'.format(url_for('web.show_book', book_id=book_id), escape(title))",
          "1102:                 if len(request.files.getlist(\"btn-upload\")) < 2:",
          "1103:                     if current_user.role_edit() or current_user.role_admin():",
          "1105:                         return Response(json.dumps(resp), mimetype='application/json')",
          "1106:                     else:",
          "1107:                         resp = {\"location\": url_for('web.show_book', book_id=book_id)}",
          "",
          "[Removed Lines]",
          "1099:                 uploadText = _(u\"File %(file)s uploaded\", file=link)",
          "1100:                 WorkerThread.add(current_user.name, TaskUpload(uploadText, escape(title)))",
          "1104:                         resp = {\"location\": url_for('editbook.edit_book', book_id=book_id)}",
          "",
          "[Added Lines]",
          "1115:                 upload_text = _(u\"File %(file)s uploaded\", file=link)",
          "1116:                 WorkerThread.add(current_user.name, TaskUpload(upload_text, escape(title)))",
          "1120:                         resp = {\"location\": url_for('edit-book.edit_book', book_id=book_id)}",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1113:         return Response(json.dumps({\"location\": url_for(\"web.index\")}), mimetype='application/json')",
          "1117: @login_required_if_no_ano",
          "1118: @edit_required",
          "1119: def convert_bookformat(book_id):",
          "",
          "[Removed Lines]",
          "1116: @editbook.route(\"/admin/book/convert/<int:book_id>\", methods=['POST'])",
          "",
          "[Added Lines]",
          "1132: @EditBook.route(\"/admin/book/convert/<int:book_id>\", methods=['POST'])",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1124:     if (book_format_from is None) or (book_format_to is None):",
          "1125:         flash(_(u\"Source or destination format for conversion missing\"), category=\"error\")",
          "1128:     log.info('converting: book id: %s from: %s to: %s', book_id, book_format_from, book_format_to)",
          "1129:     rtn = helper.convert_book_format(book_id, config.config_calibre_dir, book_format_from.upper(),",
          "",
          "[Removed Lines]",
          "1126:         return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "1142:         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1132:     if rtn is None:",
          "1133:         flash(_(u\"Book successfully queued for converting to %(book_format)s\",",
          "1136:     else:",
          "1137:         flash(_(u\"There was an error converting this book: %(res)s\", res=rtn), category=\"error\")",
          "1141: @login_required",
          "1142: def table_get_custom_enum(c_id):",
          "1143:     ret = list()",
          "1147:     ret.append({'value': \"\", 'text': \"\"})",
          "1148:     for idx, en in enumerate(cc.get_display_dict()['enum_values']):",
          "1149:         ret.append({'value': en, 'text': en})",
          "1150:     return json.dumps(ret)",
          "1154: @login_required_if_no_ano",
          "1155: @edit_required",
          "1156: def edit_list_book(param):",
          "1157:     vals = request.form.to_dict()",
          "1158:     book = calibre_db.get_book(vals['pk'])",
          "1159:     # ret = \"\"",
          "1160:     try:",
          "1161:         if param == 'series_index':",
          "",
          "[Removed Lines]",
          "1134:                     book_format=book_format_to),",
          "1135:                     category=\"success\")",
          "1138:     return redirect(url_for('editbook.edit_book', book_id=book_id))",
          "1140: @editbook.route(\"/ajax/getcustomenum/<int:c_id>\")",
          "1144:     cc = (calibre_db.session.query(db.Custom_Columns)",
          "1145:               .filter(db.Custom_Columns.id == c_id)",
          "1146:               .filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions)).one_or_none())",
          "1153: @editbook.route(\"/ajax/editbooks/<param>\", methods=['POST'])",
          "",
          "[Added Lines]",
          "1150:                 book_format=book_format_to),",
          "1151:               category=\"success\")",
          "1154:     return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "1157: @EditBook.route(\"/ajax/getcustomenum/<int:c_id>\")",
          "1161:     cc = (calibre_db.session.query(db.CustomColumns)",
          "1162:           .filter(db.CustomColumns.id == c_id)",
          "1163:           .filter(db.CustomColumns.datatype.notin_(db.cc_exceptions)).one_or_none())",
          "1170: @EditBook.route(\"/ajax/editbooks/<param>\", methods=['POST'])",
          "1176:     sort_param = \"\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1172:         elif param == 'publishers':",
          "1173:             edit_book_publisher(vals['value'], book)",
          "1174:             ret = Response(json.dumps({'success': True,",
          "1176:                            mimetype='application/json')",
          "1177:         elif param == 'languages':",
          "1178:             invalid = list()",
          "",
          "[Removed Lines]",
          "1175:                                         'newValue': ', '.join([publisher.name for publisher in book.publishers])}),",
          "",
          "[Added Lines]",
          "1193:                                        'newValue': ', '.join([publisher.name for publisher in book.publishers])}),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1186:                 for lang in book.languages:",
          "1187:                     lang_names.append(isoLanguages.get_language_name(get_locale(), lang.lang_code))",
          "1188:                 ret = Response(json.dumps({'success': True, 'newValue':  ', '.join(lang_names)}),",
          "1190:         elif param == 'author_sort':",
          "1191:             book.author_sort = vals['value']",
          "1192:             ret = Response(json.dumps({'success': True, 'newValue':  book.author_sort}),",
          "1193:                            mimetype='application/json')",
          "1194:         elif param == 'title':",
          "1196:             handle_title_on_edit(book, vals.get('value', \"\"))",
          "1197:             helper.update_dir_structure(book.id, config.config_calibre_dir)",
          "1198:             ret = Response(json.dumps({'success': True, 'newValue':  book.title}),",
          "",
          "[Removed Lines]",
          "1189:                                 mimetype='application/json')",
          "1195:             sort = book.sort",
          "",
          "[Added Lines]",
          "1207:                                mimetype='application/json')",
          "1213:             sort_param = book.sort",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1208:         elif param == 'authors':",
          "1209:             input_authors, __, renamed = handle_author_on_edit(book, vals['value'], vals.get('checkA', None) == \"true\")",
          "1210:             helper.update_dir_structure(book.id, config.config_calibre_dir, input_authors[0], renamed_author=renamed)",
          "1214:         elif param == 'is_archived':",
          "1215:             is_archived = change_archived_books(book.id, vals['value'] == \"True\",",
          "1217:             if is_archived:",
          "1218:                 kobo_sync_status.remove_synced_book(book.id)",
          "1219:             return \"\"",
          "",
          "[Removed Lines]",
          "1211:             ret = Response(json.dumps({'success': True,",
          "1212:                                        'newValue':  ' & '.join([author.replace('|',',') for author in input_authors])}),",
          "1213:                            mimetype='application/json')",
          "1216:                                                 message=\"Book {} archivebit set to: {}\".format(book.id, vals['value']))",
          "",
          "[Added Lines]",
          "1229:             ret = Response(json.dumps({",
          "1230:                 'success': True,",
          "1231:                 'newValue':  ' & '.join([author.replace('|', ',') for author in input_authors])}),",
          "1232:                 mimetype='application/json')",
          "1235:                                                 message=\"Book {} archive bit set to: {}\".format(book.id, vals['value']))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1238:         calibre_db.session.commit()",
          "1239:         # revert change for sort if automatic fields link is deactivated",
          "1240:         if param == 'title' and vals.get('checkT') == \"false\":",
          "1242:             calibre_db.session.commit()",
          "1243:     except (OperationalError, IntegrityError) as e:",
          "1244:         calibre_db.session.rollback()",
          "",
          "[Removed Lines]",
          "1241:             book.sort = sort",
          "",
          "[Added Lines]",
          "1260:             book.sort = sort_param",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1249:     return ret",
          "1253: @login_required",
          "1254: def get_sorted_entry(field, bookid):",
          "1255:     if field in ['title', 'authors', 'sort', 'author_sort']:",
          "",
          "[Removed Lines]",
          "1252: @editbook.route(\"/ajax/sort_value/<field>/<int:bookid>\")",
          "",
          "[Added Lines]",
          "1271: @EditBook.route(\"/ajax/sort_value/<field>/<int:bookid>\")",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1266:     return \"\"",
          "1270: @login_required",
          "1271: @edit_required",
          "1272: def simulate_merge_list_book():",
          "",
          "[Removed Lines]",
          "1269: @editbook.route(\"/ajax/simulatemerge\", methods=['POST'])",
          "",
          "[Added Lines]",
          "1288: @EditBook.route(\"/ajax/simulatemerge\", methods=['POST'])",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1282:     return \"\"",
          "1286: @login_required",
          "1287: @edit_required",
          "1288: def merge_list_book():",
          "",
          "[Removed Lines]",
          "1285: @editbook.route(\"/ajax/mergebooks\", methods=['POST'])",
          "",
          "[Added Lines]",
          "1304: @EditBook.route(\"/ajax/mergebooks\", methods=['POST'])",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1295:         if to_book:",
          "1296:             for file in to_book.data:",
          "1297:                 to_file.append(file.format)",
          "1300:             for book_id in vals:",
          "1301:                 from_book = calibre_db.get_book(book_id)",
          "1302:                 if from_book:",
          "",
          "[Removed Lines]",
          "1298:             to_name = helper.get_valid_filename(to_book.title, chars=96) + ' - ' + \\",
          "1299:                       helper.get_valid_filename(to_book.authors[0].name, chars=96)",
          "",
          "[Added Lines]",
          "1317:             to_name = helper.get_valid_filename(to_book.title,",
          "1318:                                                 chars=96) + ' - ' + helper.get_valid_filename(to_book.authors[0].name,",
          "1319:                                                                                               chars=96)",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1314:                                                         element.format,",
          "1315:                                                         element.uncompressed_size,",
          "1316:                                                         to_name))",
          "1318:                     return json.dumps({'success': True})",
          "1319:     return \"\"",
          "1323: @login_required",
          "1324: @edit_required",
          "1325: def table_xchange_author_title():",
          "1326:     vals = request.get_json().get('xchange')",
          "1327:     if vals:",
          "1328:         for val in vals:",
          "1330:             book = calibre_db.get_book(val)",
          "1331:             authors = book.title",
          "1332:             book.authors = calibre_db.order_authors([book])",
          "",
          "[Removed Lines]",
          "1317:                     delete_book_from_table(from_book.id,\"\", True)",
          "1322: @editbook.route(\"/ajax/xchange\", methods=['POST'])",
          "1329:             modif_date = False",
          "",
          "[Added Lines]",
          "1337:                     delete_book_from_table(from_book.id, \"\", True)",
          "1342: @EditBook.route(\"/ajax/xchange\", methods=['POST'])",
          "1347:     edited_books_id = False",
          "1350:             modify_date = False",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1338:             input_authors, authorchange, renamed = handle_author_on_edit(book, authors)",
          "1339:             if authorchange or title_change:",
          "1340:                 edited_books_id = book.id",
          "1343:             if config.config_use_google_drive:",
          "1344:                 gdriveutils.updateGdriveCalibreFromLocal()",
          "1346:             if edited_books_id:",
          "1347:                 helper.update_dir_structure(edited_books_id, config.config_calibre_dir, input_authors[0],",
          "1350:                 book.last_modified = datetime.utcnow()",
          "1351:             try:",
          "1352:                 calibre_db.session.commit()",
          "",
          "[Removed Lines]",
          "1341:                 modif_date = True",
          "1348:                                            renamed_author=renamed)",
          "1349:             if modif_date:",
          "",
          "[Added Lines]",
          "1362:                 modify_date = True",
          "1369:                                             renamed_author=renamed)",
          "1370:             if modify_date:",
          "",
          "---------------"
        ],
        "cps/epub.py||cps/epub.py": [
          "File: cps/epub.py -> cps/epub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     txt = epub_zip.read('META-INF/container.xml')",
          "55:     tree = etree.fromstring(txt)",
          "58:     tree = etree.fromstring(cf)",
          "62:     p = tree.xpath('/pkg:package/pkg:metadata', namespaces=ns)[0]",
          "",
          "[Removed Lines]",
          "56:     cfname = tree.xpath('n:rootfiles/n:rootfile/@full-path', namespaces=ns)[0]",
          "57:     cf = epub_zip.read(cfname)",
          "60:     coverpath = os.path.dirname(cfname)",
          "",
          "[Added Lines]",
          "56:     cf_name = tree.xpath('n:rootfiles/n:rootfile/@full-path', namespaces=ns)[0]",
          "57:     cf = epub_zip.read(cf_name)",
          "60:     cover_path = os.path.dirname(cf_name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     epub_metadata = parse_epub_series(ns, tree, epub_metadata)",
          "95:     if not epub_metadata['title']:",
          "96:         title = original_file_name",
          "",
          "[Removed Lines]",
          "93:     cover_file = parse_epub_cover(ns, tree, epub_zip, coverpath, tmp_file_path)",
          "",
          "[Added Lines]",
          "93:     cover_file = parse_epub_cover(ns, tree, epub_zip, cover_path, tmp_file_path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: def parse_epub_cover(ns, tree, epub_zip, cover_path, tmp_file_path):",
          "115:     cover_section = tree.xpath(\"/pkg:package/pkg:manifest/pkg:item[@id='cover-image']/@href\", namespaces=ns)",
          "116:     cover_file = None",
          "120:         meta_cover = tree.xpath(\"/pkg:package/pkg:metadata/pkg:meta[@name='cover']/@content\", namespaces=ns)",
          "121:         if len(meta_cover) > 0:",
          "122:             cover_section = tree.xpath(",
          "",
          "[Removed Lines]",
          "117:     if len(cover_section) > 0:",
          "118:         cover_file = _extract_cover(epub_zip, cover_section[0], cover_path, tmp_file_path)",
          "119:     else:",
          "",
          "[Added Lines]",
          "117:     # if len(cover_section) > 0:",
          "118:     for cs in cover_section:",
          "119:         cover_file = _extract_cover(epub_zip, cs, cover_path, tmp_file_path)",
          "120:         if cover_file:",
          "121:             break",
          "122:     if not cover_file:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:                     cover_file = _extract_cover(epub_zip, filename, \"\", tmp_file_path)",
          "144:             else:",
          "145:                 cover_file = _extract_cover(epub_zip, cs, cover_path, tmp_file_path)",
          "148:     return cover_file",
          "",
          "[Removed Lines]",
          "146:             if cover_file:",
          "147:                 break",
          "",
          "[Added Lines]",
          "149:             if cover_file: break",
          "",
          "---------------"
        ],
        "cps/helper.py||cps/helper.py": [
          "File: cps/helper.py -> cps/helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import re",
          "24: import shutil",
          "25: import socket",
          "27: from datetime import datetime, timedelta",
          "28: from tempfile import gettempdir",
          "30: import requests",
          "32: from babel.dates import format_datetime",
          "33: from babel.units import format_unit",
          "",
          "[Removed Lines]",
          "26: import unicodedata",
          "29: from urllib.parse import urlparse",
          "",
          "[Added Lines]",
          "29: import unidecode",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: from markupsafe import escape",
          "42: from urllib.parse import quote",
          "44: try:",
          "47: except ImportError:",
          "50: from . import calibre_db, cli",
          "51: from .tasks.convert import TaskConvert",
          "53: from . import gdriveutils as gd",
          "54: from .constants import STATIC_DIR as _STATIC_DIR",
          "55: from .subproc_wrapper import process_wait",
          "",
          "[Removed Lines]",
          "45:     import unidecode",
          "46:     use_unidecode = True",
          "48:     use_unidecode = False",
          "52: from . import logger, config, get_locale, db, ub, kobo_sync_status",
          "",
          "[Added Lines]",
          "45:     import advocate",
          "46:     from advocate.exceptions import UnacceptableAddressException",
          "47:     use_advocate = True",
          "49:     use_advocate = False",
          "50:     advocate = requests",
          "51:     UnacceptableAddressException = MissingSchema = BaseException",
          "55: from . import logger, config, get_locale, db, ub",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:                             'text': _('Convert %(orig)s to %(format)s and send to Kindle',",
          "144:                                       orig='Epub',",
          "145:                                       format='Mobi')})",
          "147:         bookformats.append({'format': 'Mobi',",
          "148:                             'convert': 2,",
          "149:                             'text': _('Convert %(orig)s to %(format)s and send to Kindle',",
          "",
          "[Removed Lines]",
          "146:     if 'AZW3' in formats and not 'MOBI' in formats:",
          "",
          "[Added Lines]",
          "149:     if 'AZW3' in formats and 'MOBI' not in formats:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185: # Check if a reader is existing for any of the book formats, if not, return empty list, otherwise return",
          "186: # list with supported formats",
          "187: def check_read_formats(entry):",
          "189:     bookformats = list()",
          "190:     if len(entry.data):",
          "191:         for ele in iter(entry.data):",
          "193:                 bookformats.append(ele.format.lower())",
          "194:     return bookformats",
          "",
          "[Removed Lines]",
          "188:     EXTENSIONS_READER = {'TXT', 'PDF', 'EPUB', 'CBZ', 'CBT', 'CBR', 'DJVU'}",
          "192:             if ele.format.upper() in EXTENSIONS_READER:",
          "",
          "[Added Lines]",
          "191:     extensions_reader = {'TXT', 'PDF', 'EPUB', 'CBZ', 'CBT', 'CBR', 'DJVU'}",
          "195:             if ele.format.upper() in extensions_reader:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:         if entry.format.upper() == book_format.upper():",
          "214:             converted_file_name = entry.name + '.' + book_format.lower()",
          "215:             link = '<a href=\"{}\">{}</a>'.format(url_for('web.show_book', book_id=book_id), escape(book.title))",
          "217:             WorkerThread.add(user_id, TaskEmail(_(u\"Send to Kindle\"), book.path, converted_file_name,",
          "218:                              config.get_mail_settings(), kindle_mail,",
          "220:             return",
          "221:     return _(u\"The requested file could not be read. Maybe wrong permissions?\")",
          "",
          "[Removed Lines]",
          "216:             EmailText = _(u\"%(book)s send to Kindle\", book=link)",
          "219:                              EmailText, _(u'This e-mail has been sent via Calibre-Web.')))",
          "",
          "[Added Lines]",
          "219:             email_text = _(u\"%(book)s send to Kindle\", book=link)",
          "222:                              email_text, _(u'This e-mail has been sent via Calibre-Web.')))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:     if value[-1:] == u'.':",
          "230:         value = value[:-1]+u'_'",
          "231:     value = value.replace(\"/\", \"_\").replace(\":\", \"_\").strip('\\0')",
          "241:     if replace_whitespace:",
          "242:         #  *+:\\\"/<>? are replaced by _",
          "243:         value = re.sub(r'[*+:\\\\\\\"/<>?]+', u'_', value, flags=re.U)",
          "",
          "[Removed Lines]",
          "232:     if use_unidecode:",
          "233:         if config.config_unicode_filename:",
          "234:             value = (unidecode.unidecode(value))",
          "235:     else:",
          "236:         value = value.replace(u'\u00a7', u'SS')",
          "237:         value = value.replace(u'\u00df', u'ss')",
          "238:         value = unicodedata.normalize('NFKD', value)",
          "239:         re_slugify = re.compile(r'[\\W\\s-]', re.UNICODE)",
          "240:         value = re_slugify.sub('', value)",
          "",
          "[Added Lines]",
          "235:     if config.config_unicode_filename:",
          "236:         value = (unidecode.unidecode(value))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "268: def get_sorted_author(value):",
          "269:     try:",
          "270:         if ',' not in value:",
          "271:             regexes = [r\"^(JR|SR)\\.?$\", r\"^I{1,3}\\.?$\", r\"^IV\\.?$\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     value2 = None",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "303:             else:",
          "304:                 book.read_status = ub.ReadBook.STATUS_FINISHED if read_status else ub.ReadBook.STATUS_UNREAD",
          "305:         else:",
          "309:         if not book.kobo_reading_state:",
          "310:             kobo_reading_state = ub.KoboReadingState(user_id=current_user.id, book_id=book_id)",
          "311:             kobo_reading_state.current_bookmark = ub.KoboBookmark()",
          "",
          "[Removed Lines]",
          "306:             readBook = ub.ReadBook(user_id=current_user.id, book_id = book_id)",
          "307:             readBook.read_status = ub.ReadBook.STATUS_FINISHED",
          "308:             book = readBook",
          "",
          "[Added Lines]",
          "304:             read_book = ub.ReadBook(user_id=current_user.id, book_id=book_id)",
          "305:             read_book.read_status = ub.ReadBook.STATUS_FINISHED",
          "306:             book = read_book",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:         except (KeyError, AttributeError):",
          "333:             log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "334:             return \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column)",
          "336:             calibre_db.session.rollback()",
          "339:     return \"\"",
          "341: # Deletes a book fro the local filestorage, returns True if deleting is successfull, otherwise false",
          "342: def delete_book_file(book, calibrepath, book_format=None):",
          "343:     # check that path is 2 elements deep, check that target path has no subfolders",
          "",
          "[Removed Lines]",
          "335:         except (OperationalError, InvalidRequestError) as e:",
          "337:             log.error(u\"Read status could not set: {}\".format(e))",
          "338:             return _(\"Read status could not set: {}\".format(e.orig))",
          "",
          "[Added Lines]",
          "333:         except (OperationalError, InvalidRequestError) as ex:",
          "335:             log.error(u\"Read status could not set: {}\".format(ex))",
          "336:             return _(\"Read status could not set: {}\".format(ex.orig))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "361:                                            id=book.id,",
          "362:                                            path=book.path)",
          "363:                     shutil.rmtree(path)",
          "367:                 authorpath = os.path.join(calibrepath, os.path.split(book.path)[0])",
          "368:                 if not os.listdir(authorpath):",
          "369:                     try:",
          "370:                         shutil.rmtree(authorpath)",
          "373:                 return True, None",
          "375:     log.error(\"Deleting book %s from database only, book path in database not valid: %s\",",
          "",
          "[Removed Lines]",
          "364:                 except (IOError, OSError) as e:",
          "365:                     log.error(\"Deleting book %s failed: %s\", book.id, e)",
          "366:                     return False, _(\"Deleting book %(id)s failed: %(message)s\", id=book.id, message=e)",
          "371:                     except (IOError, OSError) as e:",
          "372:                         log.error(\"Deleting authorpath for book %s failed: %s\", book.id, e)",
          "",
          "[Added Lines]",
          "363:                 except (IOError, OSError) as ex:",
          "364:                     log.error(\"Deleting book %s failed: %s\", book.id, ex)",
          "365:                     return False, _(\"Deleting book %(id)s failed: %(message)s\", id=book.id, message=ex)",
          "370:                     except (IOError, OSError) as ex:",
          "371:                         log.error(\"Deleting authorpath for book %s failed: %s\", book.id, ex)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "395:                 all_titledir = book.path.split('/')[1]",
          "396:                 all_new_path = os.path.join(calibre_path, all_new_authordir, all_titledir)",
          "397:                 all_new_name = get_valid_filename(book.title, chars=42) + ' - ' \\",
          "399:                 # change location in database to new author/title path",
          "400:                 book.path = os.path.join(all_new_authordir, all_titledir).replace('\\\\', '/')",
          "401:                 for file_format in book.data:",
          "402:                     if not gdrive:",
          "403:                         shutil.move(os.path.normcase(os.path.join(all_new_path,",
          "404:                                                                   file_format.name + '.' + file_format.format.lower())),",
          "407:                     else:",
          "413:                         else:",
          "414:                             log.error(\"File {} not found on gdrive\"",
          "415:                                       .format(all_new_path, file_format.name + '.' + file_format.format.lower()))",
          "",
          "[Removed Lines]",
          "398:                                + get_valid_filename(new_author.name, chars=42)",
          "405:                             os.path.normcase(os.path.join(all_new_path,",
          "406:                                                           all_new_name + '.' + file_format.format.lower())))",
          "408:                         gFile = gd.getFileFromEbooksFolder(all_new_path,",
          "409:                                                            file_format.name + '.' + file_format.format.lower())",
          "410:                         if gFile:",
          "411:                             gd.moveGdriveFileRemote(gFile, all_new_name + u'.' + file_format.format.lower())",
          "412:                             gd.updateDatabaseOnEdit(gFile['id'], all_new_name + u'.' + file_format.format.lower())",
          "",
          "[Added Lines]",
          "397:                     + get_valid_filename(new_author.name, chars=42)",
          "404:                                     os.path.normcase(os.path.join(all_new_path,",
          "405:                                                                   all_new_name + '.' + file_format.format.lower())))",
          "407:                         g_file = gd.getFileFromEbooksFolder(all_new_path,",
          "408:                                                             file_format.name + '.' + file_format.format.lower())",
          "409:                         if g_file:",
          "410:                             gd.moveGdriveFileRemote(g_file, all_new_name + u'.' + file_format.format.lower())",
          "411:                             gd.updateDatabaseOnEdit(g_file['id'], all_new_name + u'.' + file_format.format.lower())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "426:             old_author_dir = get_valid_filename(r, chars=96)",
          "427:             new_author_rename_dir = get_valid_filename(new_author.name, chars=96)",
          "428:             if gdrive:",
          "432:             else:",
          "433:                 if os.path.isdir(os.path.join(calibre_path, old_author_dir)):",
          "434:                     try:",
          "435:                         old_author_path = os.path.join(calibre_path, old_author_dir)",
          "436:                         new_author_path = os.path.join(calibre_path, new_author_rename_dir)",
          "437:                         shutil.move(os.path.normcase(old_author_path), os.path.normcase(new_author_path))",
          "439:                         log.error(\"Rename author from: %s to %s: %s\", old_author_path, new_author_path, ex)",
          "440:                         log.debug(ex, exc_info=True)",
          "441:                         return _(\"Rename author from: '%(src)s' to '%(dest)s' failed with error: %(error)s\",",
          "",
          "[Removed Lines]",
          "429:                 gFile = gd.getFileFromEbooksFolder(None, old_author_dir)",
          "430:                 if gFile:",
          "431:                     gd.moveGdriveFolderRemote(gFile, new_author_rename_dir)",
          "438:                     except (OSError) as ex:",
          "",
          "[Added Lines]",
          "428:                 g_file = gd.getFileFromEbooksFolder(None, old_author_dir)",
          "429:                 if g_file:",
          "430:                     gd.moveGdriveFolderRemote(g_file, new_author_rename_dir)",
          "437:                     except OSError as ex:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "485: def upload_new_file_gdrive(book_id, first_author, renamed_author, title, title_dir, original_filepath, filename_ext):",
          "487:     book = calibre_db.get_book(book_id)",
          "488:     file_name = get_valid_filename(title, chars=42) + ' - ' + \\",
          "491:     rename_all_authors(first_author, renamed_author, gdrive=True)",
          "492:     gdrive_path = os.path.join(get_valid_filename(first_author, chars=96),",
          "493:                                title_dir + \" (\" + str(book_id) + \")\")",
          "",
          "[Removed Lines]",
          "486:     error = False",
          "489:                 get_valid_filename(first_author, chars=42) + \\",
          "490:                 filename_ext",
          "",
          "[Added Lines]",
          "488:         get_valid_filename(first_author, chars=42) + filename_ext",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "505:     new_titledir = get_valid_filename(book.title, chars=96) + u\" (\" + str(book_id) + u\")\"",
          "507:     if titledir != new_titledir:",
          "511:             book.path = book.path.split('/')[0] + u'/' + new_titledir",
          "513:         else:",
          "514:             return _(u'File %(file)s not found on Google Drive', file=book.path)  # file not found",
          "516:     if authordir != new_authordir and authordir not in renamed_author:",
          "520:             book.path = new_authordir + u'/' + book.path.split('/')[1]",
          "522:         else:",
          "523:             return _(u'File %(file)s not found on Google Drive', file=authordir)  # file not found",
          "",
          "[Removed Lines]",
          "508:         gFile = gd.getFileFromEbooksFolder(os.path.dirname(book.path), titledir)",
          "509:         if gFile:",
          "510:             gd.moveGdriveFileRemote(gFile, new_titledir)",
          "512:             gd.updateDatabaseOnEdit(gFile['id'], book.path)     # only child folder affected",
          "517:         gFile = gd.getFileFromEbooksFolder(os.path.dirname(book.path), new_titledir)",
          "518:         if gFile:",
          "519:             gd.moveGdriveFolderRemote(gFile, new_authordir)",
          "521:             gd.updateDatabaseOnEdit(gFile['id'], book.path)",
          "",
          "[Added Lines]",
          "506:         g_file = gd.getFileFromEbooksFolder(os.path.dirname(book.path), titledir)",
          "507:         if g_file:",
          "508:             gd.moveGdriveFileRemote(g_file, new_titledir)",
          "510:             gd.updateDatabaseOnEdit(g_file['id'], book.path)     # only child folder affected",
          "515:         g_file = gd.getFileFromEbooksFolder(os.path.dirname(book.path), new_titledir)",
          "516:         if g_file:",
          "517:             gd.moveGdriveFolderRemote(g_file, new_authordir)",
          "519:             gd.updateDatabaseOnEdit(g_file['id'], book.path)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "542:                 # move original path to new path",
          "543:                 log.debug(\"Moving title: %s to %s\", path, new_path)",
          "544:                 shutil.move(os.path.normcase(path), os.path.normcase(new_path))",
          "546:                 log.info(\"Moving title: %s into existing: %s\", path, new_path)",
          "547:                 # Take all files and subfolder from old path (strange command)",
          "548:                 for dir_name, __, file_list in os.walk(path):",
          "549:                     for file in file_list:",
          "550:                         shutil.move(os.path.normcase(os.path.join(dir_name, file)),",
          "552:         # change location in database to new author/title path",
          "554:     except OSError as ex:",
          "555:         log.error(\"Rename title from: %s to %s: %s\", path, new_path, ex)",
          "556:         log.debug(ex, exc_info=True)",
          "",
          "[Removed Lines]",
          "545:             else: # path is valid copy only files to new location (merge)",
          "551:                                         os.path.normcase(os.path.join(new_path + dir_name[len(path):], file)))",
          "553:         localbook.path = os.path.join(new_authordir, new_titledir).replace('\\\\','/')",
          "",
          "[Added Lines]",
          "543:             else:  # path is valid copy only files to new location (merge)",
          "549:                                     os.path.normcase(os.path.join(new_path + dir_name[len(path):], file)))",
          "551:         localbook.path = os.path.join(new_authordir, new_titledir).replace('\\\\', '/')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "587:         for entry in book.data:",
          "588:             if entry.format.upper() == book_format:",
          "589:                 name = entry.name + '.' + book_format",
          "591:     else:",
          "596:     else:",
          "597:         error = _(u'Book path %(path)s not found on Google Drive', path=book.path)  # file not found",
          "",
          "[Removed Lines]",
          "590:         gFile = gd.getFileFromEbooksFolder(book.path, name)",
          "592:         gFile = gd.getFileFromEbooksFolder(os.path.dirname(book.path), book.path.split('/')[1])",
          "593:     if gFile:",
          "594:         gd.deleteDatabaseEntry(gFile['id'])",
          "595:         gFile.Trash()",
          "",
          "[Added Lines]",
          "588:         g_file = gd.getFileFromEbooksFolder(book.path, name)",
          "590:         g_file = gd.getFileFromEbooksFolder(os.path.dirname(book.path), book.path.split('/')[1])",
          "591:     if g_file:",
          "592:         gd.deleteDatabaseEntry(g_file['id'])",
          "593:         g_file.Trash()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "625: def uniq(inpt):",
          "626:     output = []",
          "628:     for x in inpt:",
          "629:         if x not in output:",
          "630:             output.append(x)",
          "631:     return output",
          "633: def check_email(email):",
          "634:     email = valid_email(email)",
          "635:     if ub.session.query(ub.User).filter(func.lower(ub.User.email) == email.lower()).first():",
          "",
          "[Removed Lines]",
          "627:     inpt = [ \" \".join(inp.split()) for inp in inpt]",
          "",
          "[Added Lines]",
          "625:     inpt = [\" \".join(inp.split()) for inp in inpt]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "642:     username = username.strip()",
          "643:     if ub.session.query(ub.User).filter(func.lower(ub.User.name) == username.lower()).scalar():",
          "644:         log.error(u\"This username is already taken\")",
          "646:     return username",
          "",
          "[Removed Lines]",
          "645:         raise Exception (_(u\"This username is already taken\"))",
          "",
          "[Added Lines]",
          "644:         raise Exception(_(u\"This username is already taken\"))",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "728: # saves book cover from url",
          "729: def save_cover_from_url(url, book_path):",
          "730:     try:",
          "738:         img.raise_for_status()",
          "739:         return save_cover(img, book_path)",
          "740:     except (socket.gaierror,",
          "",
          "[Removed Lines]",
          "731:         if not cli.allow_localhost:",
          "732:             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]",
          "733:             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]",
          "734:             if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":",
          "735:                 log.error(\"Localhost was accessed for cover upload\")",
          "736:                 return False, _(\"You are not allowed to access localhost for cover uploads\")",
          "737:         img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling",
          "",
          "[Added Lines]",
          "730:         if cli.allow_localhost:",
          "731:             img = requests.get(url, timeout=(10, 200), allow_redirects=False)  # ToDo: Error Handling",
          "732:         elif use_advocate:",
          "733:             img = advocate.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling",
          "734:         else:",
          "735:             log.error(\"python modul advocate is not installed but is needed\")",
          "736:             return False, _(\"Python modul 'advocate' is not installed but is needed for cover downloads\")",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "746:     except MissingDelegateError as ex:",
          "747:         log.info(u'File Format Error %s', ex)",
          "748:         return False, _(\"Cover Format Error\")",
          "751: def save_cover_from_filestorage(filepath, saved_filename, img):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:     except UnacceptableAddressException:",
          "749:         log.error(\"Localhost was accessed for cover upload\")",
          "750:         return False, _(\"You are not allowed to access localhost for cover uploads\")",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "808:             os.mkdir(tmp_dir)",
          "809:         ret, message = save_cover_from_filestorage(tmp_dir, \"uploaded_cover.jpg\", img)",
          "810:         if ret is True:",
          "812:                                         os.path.join(tmp_dir, \"uploaded_cover.jpg\"))",
          "813:             log.info(\"Cover is saved on Google Drive\")",
          "814:             return True, None",
          "",
          "[Removed Lines]",
          "811:             gd.uploadFileToEbooksFolder(os.path.join(book_path, 'cover.jpg').replace(\"\\\\\",\"/\"),",
          "",
          "[Added Lines]",
          "813:             gd.uploadFileToEbooksFolder(os.path.join(book_path, 'cover.jpg').replace(\"\\\\\", \"/\"),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "821: def do_download_file(book, book_format, client, data, headers):",
          "822:     if config.config_use_google_drive:",
          "824:         df = gd.getFileFromEbooksFolder(book.path, data.name + \".\" + book_format)",
          "826:         if df:",
          "827:             return gd.do_gdrive_download(df, headers)",
          "828:         else:",
          "",
          "[Removed Lines]",
          "823:         #startTime = time.time()",
          "825:         #log.debug('%s', time.time() - startTime)",
          "",
          "[Added Lines]",
          "825:         # startTime = time.time()",
          "827:         # log.debug('%s', time.time() - startTime)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "846: ##################################",
          "851:         return",
          "854:         return _('Unrar binary file not found')",
          "856:     try:",
          "859:         if value:",
          "860:             version = value.group(1)",
          "861:             log.debug(\"unrar version %s\", version)",
          "",
          "[Removed Lines]",
          "849: def check_unrar(unrarLocation):",
          "850:     if not unrarLocation:",
          "853:     if not os.path.exists(unrarLocation):",
          "857:         unrarLocation = [unrarLocation]",
          "858:         value = process_wait(unrarLocation, pattern='UNRAR (.*) freeware')",
          "",
          "[Added Lines]",
          "851: def check_unrar(unrar_location):",
          "852:     if not unrar_location:",
          "855:     if not os.path.exists(unrar_location):",
          "859:         unrar_location = [unrar_location]",
          "860:         value = process_wait(unrar_location, pattern='UNRAR (.*) freeware')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "883: # helper function for displaying the runtime of tasks",
          "884: def format_runtime(runtime):",
          "886:     if runtime.days:",
          "888:     mins, seconds = divmod(runtime.seconds, 60)",
          "889:     hours, minutes = divmod(mins, 60)",
          "890:     # ToDo: locale.number_symbols._data['timeSeparator'] -> localize time separator ?",
          "891:     if hours:",
          "893:     elif minutes:",
          "895:     else:",
          "900: # helper function to apply localize status information in tasklist entries",
          "",
          "[Removed Lines]",
          "885:     retVal = \"\"",
          "887:         retVal = format_unit(runtime.days, 'duration-day', length=\"long\", locale=get_locale()) + ', '",
          "892:         retVal += '{:d}:{:02d}:{:02d}s'.format(hours, minutes, seconds)",
          "894:         retVal += '{:2d}:{:02d}s'.format(minutes, seconds)",
          "896:         retVal += '{:2d}s'.format(seconds)",
          "897:     return retVal",
          "",
          "[Added Lines]",
          "887:     ret_val = \"\"",
          "889:         ret_val = format_unit(runtime.days, 'duration-day', length=\"long\", locale=get_locale()) + ', '",
          "894:         ret_val += '{:d}:{:02d}:{:02d}s'.format(hours, minutes, seconds)",
          "896:         ret_val += '{:2d}:{:02d}s'.format(minutes, seconds)",
          "898:         ret_val += '{:2d}s'.format(seconds)",
          "899:     return ret_val",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "953: def get_cc_columns(filter_config_custom_read=False):",
          "956:     cc = []",
          "957:     r = None",
          "958:     if config.config_columns_to_ignore:",
          "",
          "[Removed Lines]",
          "954:     tmpcc = calibre_db.session.query(db.Custom_Columns)\\",
          "955:         .filter(db.Custom_Columns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "[Added Lines]",
          "956:     tmpcc = calibre_db.session.query(db.CustomColumns)\\",
          "957:         .filter(db.CustomColumns.datatype.notin_(db.cc_exceptions)).all()",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "971: def get_download_link(book_id, book_format, client):",
          "972:     book_format = book_format.split(\".\")[0]",
          "973:     book = calibre_db.get_filtered_book(book_id, allow_show_archived=True)",
          "974:     if book:",
          "975:         data1 = calibre_db.get_book_format(book.id, book_format.upper())",
          "976:     else:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "976:     data1= \"\"",
          "",
          "---------------"
        ],
        "cps/opds.py||cps/opds.py": [
          "File: cps/opds.py -> cps/opds.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: from flask_login import current_user",
          "29: from sqlalchemy.sql.expression import func, text, or_, and_, true",
          "30: from werkzeug.security import check_password_hash",
          "32: from . import constants, logger, config, db, calibre_db, ub, services, get_locale, isoLanguages",
          "33: from .helper import get_download_link, get_book_cover",
          "34: from .pagination import Pagination",
          "",
          "[Removed Lines]",
          "31: from tornado.httputil import HTTPServerRequest",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99: @opds.route(\"/opds/books\")",
          "100: @requires_basic_auth_if_no_ano",
          "101: def feed_booksindex():",
          "124: @opds.route(\"/opds/books/letter/<book_id>\")",
          "",
          "[Removed Lines]",
          "102:     shift = 0",
          "103:     off = int(request.args.get(\"offset\") or 0)",
          "104:     entries = calibre_db.session.query(func.upper(func.substr(db.Books.sort, 1, 1)).label('id'))\\",
          "105:         .filter(calibre_db.common_filters()).group_by(func.upper(func.substr(db.Books.sort, 1, 1))).all()",
          "107:     elements = []",
          "108:     if off == 0:",
          "109:         elements.append({'id': \"00\", 'name':_(\"All\")})",
          "110:         shift = 1",
          "111:     for entry in entries[",
          "112:                  off + shift - 1:",
          "113:                  int(off + int(config.config_books_per_page) - shift)]:",
          "114:         elements.append({'id': entry.id, 'name': entry.id})",
          "116:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1), config.config_books_per_page,",
          "117:                             len(entries) + 1)",
          "118:     return render_xml_template('feed.xml',",
          "119:                                letterelements=elements,",
          "120:                                folder='opds.feed_letter_books',",
          "121:                                pagination=pagination)",
          "",
          "[Added Lines]",
          "101:     return render_element_index(db.Books.sort, None, 'opds.feed_letter_books')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     hot_books = all_books.offset(off).limit(config.config_books_per_page)",
          "172:     entries = list()",
          "173:     for book in hot_books:",
          "176:             entries.append(",
          "177:                 calibre_db.get_filtered_book(book.Downloads.book_id)",
          "178:             )",
          "179:         else:",
          "180:             ub.delete_download(book.Downloads.book_id)",
          "182:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1),",
          "184:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "187: @opds.route(\"/opds/author\")",
          "188: @requires_basic_auth_if_no_ano",
          "189: def feed_authorindex():",
          "213: @opds.route(\"/opds/author/letter/<book_id>\")",
          "",
          "[Removed Lines]",
          "174:         downloadBook = calibre_db.get_book(book.Downloads.book_id)",
          "175:         if downloadBook:",
          "181:     numBooks = entries.__len__()",
          "183:                             config.config_books_per_page, numBooks)",
          "190:     shift = 0",
          "191:     off = int(request.args.get(\"offset\") or 0)",
          "192:     entries = calibre_db.session.query(func.upper(func.substr(db.Authors.sort, 1, 1)).label('id'))\\",
          "193:         .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters())\\",
          "194:         .group_by(func.upper(func.substr(db.Authors.sort, 1, 1))).all()",
          "196:     elements = []",
          "197:     if off == 0:",
          "198:         elements.append({'id': \"00\", 'name':_(\"All\")})",
          "199:         shift = 1",
          "200:     for entry in entries[",
          "201:                  off + shift - 1:",
          "202:                  int(off + int(config.config_books_per_page) - shift)]:",
          "203:         elements.append({'id': entry.id, 'name': entry.id})",
          "205:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1), config.config_books_per_page,",
          "206:                             len(entries) + 1)",
          "207:     return render_xml_template('feed.xml',",
          "208:                                letterelements=elements,",
          "209:                                folder='opds.feed_letter_author',",
          "210:                                pagination=pagination)",
          "",
          "[Added Lines]",
          "154:         download_book = calibre_db.get_book(book.Downloads.book_id)",
          "155:         if download_book:",
          "161:     num_books = entries.__len__()",
          "163:                             config.config_books_per_page, num_books)",
          "170:     return render_element_index(db.Authors.sort, db.books_authors_link, 'opds.feed_letter_author')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228: @opds.route(\"/opds/author/<int:book_id>\")",
          "229: @requires_basic_auth_if_no_ano",
          "230: def feed_author(book_id):",
          "239: @opds.route(\"/opds/publisher\")",
          "",
          "[Removed Lines]",
          "231:     off = request.args.get(\"offset\") or 0",
          "232:     entries, __, pagination = calibre_db.fill_indexpage((int(off) / (int(config.config_books_per_page)) + 1), 0,",
          "233:                                                         db.Books,",
          "234:                                                         db.Books.authors.any(db.Authors.id == book_id),",
          "235:                                                         [db.Books.timestamp.desc()])",
          "236:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "",
          "[Added Lines]",
          "191:     return render_xml_dataset(db.Authors, book_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "254: @opds.route(\"/opds/publisher/<int:book_id>\")",
          "255: @requires_basic_auth_if_no_ano",
          "256: def feed_publisher(book_id):",
          "265: @opds.route(\"/opds/category\")",
          "266: @requires_basic_auth_if_no_ano",
          "267: def feed_categoryindex():",
          "289: @opds.route(\"/opds/category/letter/<book_id>\")",
          "290: @requires_basic_auth_if_no_ano",
          "",
          "[Removed Lines]",
          "257:     off = request.args.get(\"offset\") or 0",
          "258:     entries, __, pagination = calibre_db.fill_indexpage((int(off) / (int(config.config_books_per_page)) + 1), 0,",
          "259:                                                         db.Books,",
          "260:                                                         db.Books.publishers.any(db.Publishers.id == book_id),",
          "261:                                                         [db.Books.timestamp.desc()])",
          "262:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "268:     shift = 0",
          "269:     off = int(request.args.get(\"offset\") or 0)",
          "270:     entries = calibre_db.session.query(func.upper(func.substr(db.Tags.name, 1, 1)).label('id'))\\",
          "271:         .join(db.books_tags_link).join(db.Books).filter(calibre_db.common_filters())\\",
          "272:         .group_by(func.upper(func.substr(db.Tags.name, 1, 1))).all()",
          "273:     elements = []",
          "274:     if off == 0:",
          "275:         elements.append({'id': \"00\", 'name':_(\"All\")})",
          "276:         shift = 1",
          "277:     for entry in entries[",
          "278:                  off + shift - 1:",
          "279:                  int(off + int(config.config_books_per_page) - shift)]:",
          "280:         elements.append({'id': entry.id, 'name': entry.id})",
          "282:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1), config.config_books_per_page,",
          "283:                             len(entries) + 1)",
          "284:     return render_xml_template('feed.xml',",
          "285:                                letterelements=elements,",
          "286:                                folder='opds.feed_letter_category',",
          "287:                                pagination=pagination)",
          "",
          "[Added Lines]",
          "212:     return render_xml_dataset(db.Publishers, book_id)",
          "218:     return render_element_index(db.Tags.name, db.books_tags_link, 'opds.feed_letter_category')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "306: @opds.route(\"/opds/category/<int:book_id>\")",
          "307: @requires_basic_auth_if_no_ano",
          "308: def feed_category(book_id):",
          "317: @opds.route(\"/opds/series\")",
          "318: @requires_basic_auth_if_no_ano",
          "319: def feed_seriesindex():",
          "340: @opds.route(\"/opds/series/letter/<book_id>\")",
          "341: @requires_basic_auth_if_no_ano",
          "",
          "[Removed Lines]",
          "309:     off = request.args.get(\"offset\") or 0",
          "310:     entries, __, pagination = calibre_db.fill_indexpage((int(off) / (int(config.config_books_per_page)) + 1), 0,",
          "311:                                                         db.Books,",
          "312:                                                         db.Books.tags.any(db.Tags.id == book_id),",
          "313:                                                         [db.Books.timestamp.desc()])",
          "314:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "320:     shift = 0",
          "321:     off = int(request.args.get(\"offset\") or 0)",
          "322:     entries = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('id'))\\",
          "323:         .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters())\\",
          "324:         .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()",
          "325:     elements = []",
          "326:     if off == 0:",
          "327:         elements.append({'id': \"00\", 'name':_(\"All\")})",
          "328:         shift = 1",
          "329:     for entry in entries[",
          "330:                  off + shift - 1:",
          "331:                  int(off + int(config.config_books_per_page) - shift)]:",
          "332:         elements.append({'id': entry.id, 'name': entry.id})",
          "333:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1), config.config_books_per_page,",
          "334:                             len(entries) + 1)",
          "335:     return render_xml_template('feed.xml',",
          "336:                                letterelements=elements,",
          "337:                                folder='opds.feed_letter_series',",
          "338:                                pagination=pagination)",
          "",
          "[Added Lines]",
          "241:     return render_xml_dataset(db.Tags, book_id)",
          "247:     return render_element_index(db.Series.sort, db.books_series_link, 'opds.feed_letter_series')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "370: def feed_ratingindex():",
          "371:     off = request.args.get(\"offset\") or 0",
          "372:     entries = calibre_db.session.query(db.Ratings, func.count('books_ratings_link.book').label('count'),",
          "374:         .join(db.books_ratings_link)\\",
          "375:         .join(db.Books)\\",
          "376:         .filter(calibre_db.common_filters()) \\",
          "",
          "[Removed Lines]",
          "373:                                (db.Ratings.rating / 2).label('name')) \\",
          "",
          "[Added Lines]",
          "283:                                        (db.Ratings.rating / 2).label('name')) \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "388: @opds.route(\"/opds/ratings/<book_id>\")",
          "389: @requires_basic_auth_if_no_ano",
          "390: def feed_ratings(book_id):",
          "399: @opds.route(\"/opds/formats\")",
          "",
          "[Removed Lines]",
          "391:     off = request.args.get(\"offset\") or 0",
          "392:     entries, __, pagination = calibre_db.fill_indexpage((int(off) / (int(config.config_books_per_page)) + 1), 0,",
          "393:                                                         db.Books,",
          "394:                                                         db.Books.ratings.any(db.Ratings.id == book_id),",
          "395:                                                         [db.Books.timestamp.desc()])",
          "396:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "",
          "[Added Lines]",
          "301:     return render_xml_dataset(db.Tags, book_id)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "491: @requires_basic_auth_if_no_ano",
          "492: def opds_download_link(book_id, book_format):",
          "493:     # I gave up with this: With enabled ldap login, the user doesn't get logged in, therefore it's always guest",
          "495:     # in case of anonymous browsing user is None",
          "496:     user = load_user_from_request(request) or current_user",
          "497:     if not user.role_download():",
          "",
          "[Removed Lines]",
          "494:     # workaround, loading the user from the request and checking it's download rights here",
          "",
          "[Added Lines]",
          "399:     # workaround, loading the user from the request and checking its download rights here",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "517:         return \"\"",
          "520: def feed_search(term):",
          "521:     if term:",
          "522:         entries, __, ___ = calibre_db.get_search_results(term, config_read_column=config.config_read_column)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "425: @opds.route(\"/opds/thumb_240_240/<book_id>\")",
          "426: @opds.route(\"/opds/cover_240_240/<book_id>\")",
          "427: @opds.route(\"/opds/cover_90_90/<book_id>\")",
          "428: @opds.route(\"/opds/cover/<book_id>\")",
          "429: @requires_basic_auth_if_no_ano",
          "430: def feed_get_cover(book_id):",
          "431:     return get_book_cover(book_id)",
          "434: @opds.route(\"/opds/readbooks\")",
          "435: @requires_basic_auth_if_no_ano",
          "436: def feed_read_books():",
          "437:     off = request.args.get(\"offset\") or 0",
          "438:     result, pagination = render_read_books(int(off) / (int(config.config_books_per_page)) + 1, True, True)",
          "439:     return render_xml_template('feed.xml', entries=result, pagination=pagination)",
          "442: @opds.route(\"/opds/unreadbooks\")",
          "443: @requires_basic_auth_if_no_ano",
          "444: def feed_unread_books():",
          "445:     off = request.args.get(\"offset\") or 0",
          "446:     result, pagination = render_read_books(int(off) / (int(config.config_books_per_page)) + 1, False, True)",
          "447:     return render_xml_template('feed.xml', entries=result, pagination=pagination)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "538:     if bool(user and check_password_hash(str(user.password), password)):",
          "539:         return True",
          "540:     else:",
          "543:         return False",
          "",
          "[Removed Lines]",
          "541:         ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "542:         log.warning('OPDS Login failed for user \"%s\" IP-address: %s', username.decode('utf-8'), ip_Address)",
          "",
          "[Added Lines]",
          "471:         ip_address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "472:         log.warning('OPDS Login failed for user \"%s\" IP-address: %s', username.decode('utf-8'), ip_address)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "559:     return response",
          "574:     off = request.args.get(\"offset\") or 0",
          "",
          "[Removed Lines]",
          "562: @opds.route(\"/opds/thumb_240_240/<book_id>\")",
          "563: @opds.route(\"/opds/cover_240_240/<book_id>\")",
          "564: @opds.route(\"/opds/cover_90_90/<book_id>\")",
          "565: @opds.route(\"/opds/cover/<book_id>\")",
          "566: @requires_basic_auth_if_no_ano",
          "567: def feed_get_cover(book_id):",
          "568:     return get_book_cover(book_id)",
          "571: @opds.route(\"/opds/readbooks\")",
          "572: @requires_basic_auth_if_no_ano",
          "573: def feed_read_books():",
          "575:     result, pagination = render_read_books(int(off) / (int(config.config_books_per_page)) + 1, True, True)",
          "576:     return render_xml_template('feed.xml', entries=result, pagination=pagination)",
          "579: @opds.route(\"/opds/unreadbooks\")",
          "580: @requires_basic_auth_if_no_ano",
          "581: def feed_unread_books():",
          "582:     off = request.args.get(\"offset\") or 0",
          "583:     result, pagination = render_read_books(int(off) / (int(config.config_books_per_page)) + 1, False, True)",
          "584:     return render_xml_template('feed.xml', entries=result, pagination=pagination)",
          "",
          "[Added Lines]",
          "492: def render_xml_dataset(data_table, book_id):",
          "494:     entries, __, pagination = calibre_db.fill_indexpage((int(off) / (int(config.config_books_per_page)) + 1), 0,",
          "495:                                                         db.Books,",
          "496:                                                         data_table.any(data_table.id == book_id),",
          "497:                                                         [db.Books.timestamp.desc()])",
          "498:     return render_xml_template('feed.xml', entries=entries, pagination=pagination)",
          "501: def render_element_index(database_column, linked_table, folder):",
          "502:     shift = 0",
          "503:     off = int(request.args.get(\"offset\") or 0)",
          "504:     entries = calibre_db.session.query(func.upper(func.substr(database_column, 1, 1)).label('id'))",
          "505:     if linked_table:",
          "506:         entries = entries.join(linked_table).join(db.Books)",
          "507:     entries = entries.filter(calibre_db.common_filters()).group_by(func.upper(func.substr(database_column, 1, 1))).all()",
          "508:     elements = []",
          "509:     if off == 0:",
          "510:         elements.append({'id': \"00\", 'name': _(\"All\")})",
          "511:         shift = 1",
          "512:     for entry in entries[",
          "513:                  off + shift - 1:",
          "514:                  int(off + int(config.config_books_per_page) - shift)]:",
          "515:         elements.append({'id': entry.id, 'name': entry.id})",
          "516:     pagination = Pagination((int(off) / (int(config.config_books_per_page)) + 1), config.config_books_per_page,",
          "517:                             len(entries) + 1)",
          "518:     return render_xml_template('feed.xml',",
          "519:                                letterelements=elements,",
          "520:                                folder=folder,",
          "521:                                pagination=pagination)",
          "",
          "---------------"
        ],
        "cps/pagination.py||cps/pagination.py": [
          "File: cps/pagination.py -> cps/pagination.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     def has_next(self):",
          "58:         return self.page < self.pages",
          "64:     def iter_pages(self, left_edge=2, left_current=2,",
          "65:                    right_current=4, right_edge=2):",
          "66:         last = 0",
          "",
          "[Removed Lines]",
          "60:     # right_edge: last right_edges count of all pages are shown as number, means, if 10 pages are paginated -> 9,10 shwn",
          "61:     # left_edge: first left_edges count of all pages are shown as number                                    -> 1,2 shwn",
          "62:     # left_current: left_current count below current page are shown as number, means if current page 5      -> 3,4 shwn",
          "63:     # left_current: right_current count above current page are shown as number, means if current page 5     -> 6,7 shwn",
          "",
          "[Added Lines]",
          "60:     # right_edge: last right_edges count of all pages are shown as number, means, if 10 pages are paginated -> 9,10 shown",
          "61:     # left_edge: first left_edges count of all pages are shown as number                                    -> 1,2 shown",
          "62:     # left_current: left_current count below current page are shown as number, means if current page 5      -> 3,4 shown",
          "63:     # left_current: right_current count above current page are shown as number, means if current page 5     -> 6,7 shown",
          "",
          "---------------"
        ],
        "cps/remotelogin.py||cps/remotelogin.py": [
          "File: cps/remotelogin.py -> cps/remotelogin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import json",
          "24: from datetime import datetime",
          "26: from flask import Blueprint, request, make_response, abort, url_for, flash, redirect",
          "27: from flask_login import login_required, current_user, login_user",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from functools import wraps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: from . import config, logger, ub",
          "32: from .render_template import render_title_template",
          "39: remotelogin = Blueprint('remotelogin', __name__)",
          "40: log = logger.create()",
          "",
          "[Removed Lines]",
          "34: try:",
          "35:     from functools import wraps",
          "36: except ImportError:",
          "37:     pass  # We're not using Python 3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cps/templates/book_edit.html||cps/templates/book_edit.html": [
          "File: cps/templates/book_edit.html -> cps/templates/book_edit.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: {%  if source_formats|length > 0 and conversion_formats|length > 0 %}",
          "24:   <div class=\"text-center more-stuff\"><h4>{{_('Convert book format:')}}</h4>",
          "26:           <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">",
          "27:           <div class=\"form-group\">",
          "28:               <div class=\"text-left\">",
          "",
          "[Removed Lines]",
          "25:       <form class=\"padded-bottom\" action=\"{{ url_for('editbook.convert_bookformat', book_id=book.id) }}\" method=\"post\" id=\"book_convert_frm\">",
          "",
          "[Added Lines]",
          "25:       <form class=\"padded-bottom\" action=\"{{ url_for('edit-book.convert_bookformat', book_id=book.id) }}\" method=\"post\" id=\"book_convert_frm\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: {% endif %}",
          "50:   </div>",
          "52:   <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">",
          "53:   <div class=\"col-sm-9 col-xs-12\">",
          "54:     <div class=\"form-group\">",
          "",
          "[Removed Lines]",
          "51: <form role=\"form\" action=\"{{ url_for('editbook.edit_book', book_id=book.id) }}\" method=\"post\" enctype=\"multipart/form-data\" id=\"book_edit_frm\">",
          "",
          "[Added Lines]",
          "51: <form role=\"form\" action=\"{{ url_for('edit-book.edit_book', book_id=book.id) }}\" method=\"post\" enctype=\"multipart/form-data\" id=\"book_edit_frm\">",
          "",
          "---------------"
        ],
        "cps/templates/book_table.html||cps/templates/book_table.html": [
          "File: cps/templates/book_table.html -> cps/templates/book_table.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     data-escape=\"true\"",
          "7:     {% if g.user.role_edit() %}",
          "8:         data-editable-type=\"text\"",
          "10:         data-editable-title=\"{{ edit_text }}\"",
          "11:         data-edit=\"true\"",
          "12:         {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\" {% endif %}",
          "",
          "[Removed Lines]",
          "9:         data-editable-url=\"{{ url_for('editbook.edit_list_book', param=parameter)}}\"",
          "",
          "[Added Lines]",
          "9:         data-editable-url=\"{{ url_for('edit-book.edit_list_book', param=parameter)}}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             {{ text_table_row('authors', _('Enter Authors'),_('Authors'), true, true) }}",
          "67:             {{ text_table_row('tags', _('Enter Categories'),_('Categories'), false, true) }}",
          "68:             {{ text_table_row('series', _('Enter Series'),_('Series'), false, true) }}",
          "70:             {{ text_table_row('languages', _('Enter Languages'),_('Languages'), false, true) }}",
          "71:             <!--th data-field=\"pubdate\" data-type=\"date\" data-visible=\"{{visiblility.get('pubdate')}}\" data-viewformat=\"dd.mm.yyyy\" id=\"pubdate\" data-sortable=\"true\">{{_('Publishing Date')}}</th-->",
          "72:             {{ text_table_row('publishers', _('Enter Publishers'),_('Publishers'), false, true) }}",
          "74:             {% if g.user.check_visibility(32768) %}",
          "75:                 {{ book_checkbox_row('is_archived', _('Archiv Status'), false)}}",
          "76:             {%  endif %}",
          "77:             {{ book_checkbox_row('read_status', _('Read Status'), false)}}",
          "78:             {% for c in cc %}",
          "79:               {% if c.datatype == \"int\" %}",
          "81:               {% elif c.datatype == \"rating\" %}",
          "83:               {% elif c.datatype == \"float\" %}",
          "85:               {% elif c.datatype == \"enumeration\" %}",
          "87:               {% elif c.datatype in [\"datetime\"] %}",
          "88:                   <!-- missing -->",
          "89:               {% elif c.datatype == \"text\" %}",
          "90:                  {{ text_table_row('custom_column_' + c.id|string, _('Enter ') + c.name, c.name, false, false) }}",
          "91:               {% elif c.datatype == \"comments\" %}",
          "93:               {% elif c.datatype == \"bool\" %}",
          "94:                   {{ book_checkbox_row('custom_column_' + c.id|string, c.name, false)}}",
          "95:               {% else %}",
          "",
          "[Removed Lines]",
          "69:             <th data-field=\"series_index\" id=\"series_index\" data-visible=\"{{visiblility.get('series_index')}}\" data-edit-validate=\"{{ _('This Field is Required') }}\" data-sortable=\"true\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-min=\"0\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='series_index')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter Title')}}\"{% endif %}>{{_('Series Index')}}</th>",
          "73:             <th data-field=\"comments\" id=\"comments\" data-escape=\"true\" data-editable-mode=\"popup\"  data-visible=\"{{visiblility.get('comments')}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"wysihtml5\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='comments')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter comments')}}\"{% endif %}>{{_('Comments')}}</th>",
          "80:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"1\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "82:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-formatter=\"ratingFormatter\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.5\" data-editable-step=\"1\" data-editable-min=\"1\" data-editable-max=\"5\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "84:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "86:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"select\" data-editable-source={{ url_for('editbook.table_get_custom_enum', c_id=c.id)  }} data-editable-url=\"{{ url_for('editbook.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "92:                   <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-escape=\"true\" data-editable-mode=\"popup\"  data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"wysihtml5\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "",
          "[Added Lines]",
          "69:             <th data-field=\"series_index\" id=\"series_index\" data-visible=\"{{visiblility.get('series_index')}}\" data-edit-validate=\"{{ _('This Field is Required') }}\" data-sortable=\"true\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-min=\"0\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='series_index')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter Title')}}\"{% endif %}>{{_('Series Index')}}</th>",
          "73:             <th data-field=\"comments\" id=\"comments\" data-escape=\"true\" data-editable-mode=\"popup\"  data-visible=\"{{visiblility.get('comments')}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"wysihtml5\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='comments')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter comments')}}\"{% endif %}>{{_('Comments')}}</th>",
          "80:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"1\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "82:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-formatter=\"ratingFormatter\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.5\" data-editable-step=\"1\" data-editable-min=\"1\" data-editable-max=\"5\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "84:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "86:                 <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"select\" data-editable-source={{ url_for('edit-book.table_get_custom_enum', c_id=c.id)  }} data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "92:                   <th data-field=\"custom_column_{{ c.id|string }}\" id=\"custom_column_{{ c.id|string }}\" data-escape=\"true\" data-editable-mode=\"popup\"  data-visible=\"{{visiblility.get('custom_column_'+ c.id|string)}}\" data-sortable=\"false\" {% if g.user.role_edit() %} data-editable-type=\"wysihtml5\" data-editable-url=\"{{ url_for('edit-book.edit_list_book', param='custom_column_'+ c.id|string)}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter ') + c.name}}\"{% endif %}>{{c.name}}</th>",
          "",
          "---------------"
        ],
        "cps/templates/detail.html||cps/templates/detail.html": [
          "File: cps/templates/detail.html -> cps/templates/detail.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:         <p>",
          "139:         <span class=\"glyphicon glyphicon-link\"></span>",
          "140:         {% for identifier in entry.identifiers %}",
          "142:         {%endfor%}",
          "143:       </p>",
          "144:       </div>",
          "",
          "[Removed Lines]",
          "141:           <a href=\"{{identifier}}\" target=\"_blank\" class=\"btn btn-xs btn-success\" role=\"button\">{{identifier.formatType()}}</a>",
          "",
          "[Added Lines]",
          "141:           <a href=\"{{identifier}}\" target=\"_blank\" class=\"btn btn-xs btn-success\" role=\"button\">{{identifier.format_type()}}</a>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:       {% if g.user.role_edit() %}",
          "296:       <div class=\"btn-toolbar\" role=\"toolbar\">",
          "297:         <div class=\"btn-group\" role=\"group\" aria-label=\"Edit/Delete book\">",
          "299:         </div>",
          "300:       </div>",
          "301:       {% endif %}",
          "",
          "[Removed Lines]",
          "298:           <a href=\"{{ url_for('editbook.edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>",
          "",
          "[Added Lines]",
          "298:           <a href=\"{{ url_for('edit-book.edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>",
          "",
          "---------------"
        ],
        "cps/templates/layout.html||cps/templates/layout.html": [
          "File: cps/templates/layout.html -> cps/templates/layout.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:             {% if g.user.is_authenticated or g.allow_anonymous %}",
          "61:               {% if g.user.role_upload() and g.allow_upload %}",
          "62:                   <li>",
          "64:                       <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">",
          "65:                       <div class=\"form-group\">",
          "66:                         <span class=\"btn btn-default btn-file\">{{_('Upload')}}<input id=\"btn-upload\" name=\"btn-upload\"",
          "",
          "[Removed Lines]",
          "63:                     <form id=\"form-upload\" class=\"navbar-form\" action=\"{{ url_for('editbook.upload') }}\" data-title=\"{{_('Uploading...')}}\" data-footer=\"{{_('Close')}}\" data-failed=\"{{_('Error')}}\" data-message=\"{{_('Upload done, processing, please wait...')}}\" method=\"post\" enctype=\"multipart/form-data\">",
          "",
          "[Added Lines]",
          "63:                     <form id=\"form-upload\" class=\"navbar-form\" action=\"{{ url_for('edit-book.upload') }}\" data-title=\"{{_('Uploading...')}}\" data-footer=\"{{_('Close')}}\" data-failed=\"{{_('Error')}}\" data-message=\"{{_('Upload done, processing, please wait...')}}\" method=\"post\" enctype=\"multipart/form-data\">",
          "",
          "---------------"
        ],
        "cps/usermanagement.py||cps/usermanagement.py": [
          "File: cps/usermanagement.py -> cps/usermanagement.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import base64",
          "20: import binascii",
          "22: from sqlalchemy.sql.expression import func",
          "23: from werkzeug.security import check_password_hash",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from functools import wraps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: from . import lm, ub, config, constants, services",
          "33: def login_required_if_no_ano(func):",
          "34:     @wraps(func)",
          "",
          "[Removed Lines]",
          "28: try:",
          "29:     from functools import wraps",
          "30: except ImportError:",
          "31:     pass  # We're not using Python 3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cps/web.py||cps/web.py": [
          "File: cps/web.py -> cps/web.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from functools import wraps",
          "31: from babel.dates import format_date",
          "33: from flask import Blueprint, jsonify",
          "34: from flask import request, redirect, send_from_directory, make_response, flash, abort, url_for",
          "35: from flask import session as flask_session",
          "",
          "[Removed Lines]",
          "32: from babel import Locale as LC",
          "",
          "[Added Lines]",
          "32: from babel import Locale",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: try:",
          "71:     from .oauth_bb import oauth_check, register_user_with_oauth, logout_oauth_user, get_oauth_status",
          "72:     feature_support['oauth'] = True",
          "73: except ImportError:",
          "74:     feature_support['oauth'] = False",
          "75:     oauth_check = {}",
          "77: try:",
          "78:     from natsort import natsorted as sort",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     register_user_with_oauth = logout_oauth_user = get_oauth_status = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83: @app.after_request",
          "84: def add_security_headers(resp):",
          "87:         resp.headers['Content-Security-Policy'] += \" *\"",
          "88:     elif request.endpoint == \"web.read_book\":",
          "89:         resp.headers['Content-Security-Policy'] += \" blob:;style-src-elem 'self' blob: 'unsafe-inline';\"",
          "",
          "[Removed Lines]",
          "85:     resp.headers['Content-Security-Policy'] = \"default-src 'self'\" + ''.join([' '+host for host in config.config_trustedhosts.strip().split(',')]) + \" 'unsafe-inline' 'unsafe-eval'; font-src 'self' data:; img-src 'self' data:\"",
          "86:     if request.endpoint == \"editbook.edit_book\" or config.config_use_google_drive:",
          "",
          "[Added Lines]",
          "86:     csp = \"default-src 'self'\"",
          "87:     csp += ''.join([' ' + host for host in config.config_trustedhosts.strip().split(',')])",
          "88:     csp += \" 'unsafe-inline' 'unsafe-eval'; font-src 'self' data:; img-src 'self' data:\"",
          "89:     resp.headers['Content-Security-Policy'] = csp",
          "90:     if request.endpoint == \"edit-book.edit_book\" or config.config_use_google_drive:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:         ub.session_commit()",
          "141:         return \"\", 204",
          "148:     ub.session_commit(\"Bookmark for user {} in book {} created\".format(current_user.id, book_id))",
          "149:     return \"\", 201",
          "",
          "[Removed Lines]",
          "143:     lbookmark = ub.Bookmark(user_id=current_user.id,",
          "144:                             book_id=book_id,",
          "145:                             format=book_format,",
          "146:                             bookmark_key=bookmark_key)",
          "147:     ub.session.merge(lbookmark)",
          "",
          "[Added Lines]",
          "149:     l_bookmark = ub.Bookmark(user_id=current_user.id,",
          "150:                              book_id=book_id,",
          "151:                              format=book_format,",
          "152:                              bookmark_key=bookmark_key)",
          "153:     ub.session.merge(l_bookmark)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162: @web.route(\"/ajax/togglearchived/<int:book_id>\", methods=['POST'])",
          "163: @login_required",
          "164: def toggle_archived(book_id):",
          "166:     if is_archived:",
          "167:         remove_synced_book(book_id)",
          "168:     return \"\"",
          "",
          "[Removed Lines]",
          "165:     is_archived = change_archived_books(book_id, message=\"Book {} archivebit toggled\".format(book_id))",
          "",
          "[Added Lines]",
          "171:     is_archived = change_archived_books(book_id, message=\"Book {} archive bit toggled\".format(book_id))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "297:     return json_dumps",
          "300: def get_sort_function(sort_param, data):",
          "301:     order = [db.Books.timestamp.desc()]",
          "302:     if sort_param == 'stored':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: def generate_char_list(data_colum, db_link):",
          "308:     return (calibre_db.session.query(func.upper(func.substr(data_colum, 1, 1)).label('char'))",
          "309:             .join(db_link).join(db.Books).filter(calibre_db.common_filters())",
          "310:             .group_by(func.upper(func.substr(data_colum, 1, 1))).all())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "373:     else:",
          "374:         website = data or \"newest\"",
          "375:         entries, random, pagination = calibre_db.fill_indexpage(page, 0, db.Books, True, order[0],",
          "377:                                                                 db.books_series_link,",
          "378:                                                                 db.Books.id == db.books_series_link.c.book,",
          "379:                                                                 db.Series)",
          "",
          "[Removed Lines]",
          "376:                       False, 0,",
          "",
          "[Added Lines]",
          "389:                                                                 False, 0,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "407:     else:",
          "408:         abort(404)",
          "410: def render_hot_books(page, order):",
          "411:     if current_user.check_visibility(constants.SIDEBAR_HOT):",
          "412:         if order[1] not in ['hotasc', 'hotdesc']:",
          "416:             order = [func.count(ub.Downloads.book_id).desc()], 'hotdesc'",
          "417:         if current_user.show_detail_random():",
          "418:             random = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\",
          "",
          "[Removed Lines]",
          "413:         # Unary expression comparsion only working (for this expression) in sqlalchemy 1.4+",
          "414:         #if not (order[0][0].compare(func.count(ub.Downloads.book_id).desc()) or",
          "415:         #        order[0][0].compare(func.count(ub.Downloads.book_id).asc())):",
          "",
          "[Added Lines]",
          "427:             # Unary expression comparsion only working (for this expression) in sqlalchemy 1.4+",
          "428:             # if not (order[0][0].compare(func.count(ub.Downloads.book_id).desc()) or",
          "429:             #        order[0][0].compare(func.count(ub.Downloads.book_id).asc())):",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "420:         else:",
          "421:             random = false()",
          "422:         off = int(int(config.config_books_per_page) * (page - 1))",
          "424:             .order_by(*order[0]).group_by(ub.Downloads.book_id)",
          "425:         hot_books = all_books.offset(off).limit(config.config_books_per_page)",
          "426:         entries = list()",
          "427:         for book in hot_books:",
          "429:                 db.Books.id == book.Downloads.book_id).first()",
          "432:             else:",
          "433:                 ub.delete_download(book.Downloads.book_id)",
          "436:         return render_title_template('index.html', random=random, entries=entries, pagination=pagination,",
          "437:                                      title=_(u\"Hot Books (Most Downloaded)\"), page=\"hot\", order=order[1])",
          "438:     else:",
          "",
          "[Removed Lines]",
          "423:         all_books = ub.session.query(ub.Downloads, func.count(ub.Downloads.book_id))\\",
          "428:             downloadBook = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).filter(",
          "430:             if downloadBook:",
          "431:                 entries.append(downloadBook)",
          "434:         numBooks = entries.__len__()",
          "435:         pagination = Pagination(page, config.config_books_per_page, numBooks)",
          "",
          "[Added Lines]",
          "437:         all_books = ub.session.query(ub.Downloads, func.count(ub.Downloads.book_id)) \\",
          "442:             download_book = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).filter(",
          "444:             if download_book:",
          "445:                 entries.append(download_book)",
          "448:         num_books = entries.__len__()",
          "449:         pagination = Pagination(page, config.config_books_per_page, num_books)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "462:                                                             db.Series,",
          "463:                                                             ub.Downloads, db.Books.id == ub.Downloads.book_id)",
          "464:         for book in entries:",
          "467:                 ub.delete_download(book.id)",
          "468:         user = ub.session.query(ub.User).filter(ub.User.id == user_id).first()",
          "469:         return render_title_template('index.html',",
          "",
          "[Removed Lines]",
          "465:             if not calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\",
          "466:                              .filter(db.Books.id == book.id).first():",
          "",
          "[Added Lines]",
          "479:             if not calibre_db.session.query(db.Books).\\",
          "480:                                             filter(calibre_db.common_filters()).filter(db.Books.id == book.id).first():",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "471:                                      entries=entries,",
          "472:                                      pagination=pagination,",
          "473:                                      id=user_id,",
          "475:                                      page=\"download\",",
          "476:                                      order=order[1])",
          "477:     else:",
          "",
          "[Removed Lines]",
          "474:                                      title=_(u\"Downloaded books by %(user)s\",user=user.name),",
          "",
          "[Added Lines]",
          "488:                                      title=_(u\"Downloaded books by %(user)s\", user=user.name),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "639:                         column=config.config_read_column),",
          "640:                       category=\"error\")",
          "641:                 return redirect(url_for(\"web.index\"))",
          "644:     if as_xml:",
          "645:         return entries, pagination",
          "646:     else:",
          "647:         if are_read:",
          "648:             name = _(u'Read Books') + ' (' + str(pagination.total_count) + ')'",
          "650:         else:",
          "651:             name = _(u'Unread Books') + ' (' + str(pagination.total_count) + ')'",
          "653:         return render_title_template('index.html', random=random, entries=entries, pagination=pagination,",
          "657: def render_archived_books(page, sort_param):",
          "658:     order = sort_param[0] or []",
          "665:     archived_book_ids = [archived_book.book_id for archived_book in archived_books]",
          "667:     archived_filter = db.Books.id.in_(archived_book_ids)",
          "",
          "[Removed Lines]",
          "642:             return [] # ToDo: Handle error Case for opds",
          "649:             pagename = \"read\"",
          "652:             pagename = \"unread\"",
          "654:                                      title=name, page=pagename, order=order[1])",
          "659:     archived_books = (",
          "660:         ub.session.query(ub.ArchivedBook)",
          "661:         .filter(ub.ArchivedBook.user_id == int(current_user.id))",
          "662:         .filter(ub.ArchivedBook.is_archived == True)",
          "663:         .all()",
          "664:     )",
          "",
          "[Added Lines]",
          "656:             return []  # ToDo: Handle error Case for opds",
          "663:             page_name = \"read\"",
          "666:             page_name = \"unread\"",
          "668:                                      title=name, page=page_name, order=order[1])",
          "673:     archived_books = (ub.session.query(ub.ArchivedBook)",
          "674:                       .filter(ub.ArchivedBook.user_id == int(current_user.id))",
          "675:                       .filter(ub.ArchivedBook.is_archived == True)",
          "676:                       .all())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "674:                                                                                 False, 0)",
          "676:     name = _(u'Archived Books') + ' (' + str(len(archived_book_ids)) + ')'",
          "678:     return render_title_template('index.html', random=random, entries=entries, pagination=pagination,",
          "682: def render_prepare_search_form(cc):",
          "683:     # prepare data for search-form",
          "687:         .filter(calibre_db.common_filters()) \\",
          "689:         .order_by(db.Tags.name).all()",
          "693:         .filter(calibre_db.common_filters()) \\",
          "696:         .filter(calibre_db.common_filters()).all()",
          "699:         .order_by(ub.Shelf.name).all()",
          "702:         .filter(calibre_db.common_filters()) \\",
          "704:         .order_by(db.Data.format).all()",
          "705:     if current_user.filter_language() == u\"all\":",
          "706:         languages = calibre_db.speaking_language()",
          "707:     else:",
          "708:         languages = None",
          "709:     return render_title_template('search_form.html', tags=tags, languages=languages, extensions=extensions,",
          "713: def render_search_results(term, offset=None, order=None, limit=None):",
          "",
          "[Removed Lines]",
          "677:     pagename = \"archived\"",
          "679:                                  title=name, page=pagename, order=sort_param[1])",
          "684:     tags = calibre_db.session.query(db.Tags)\\",
          "685:         .join(db.books_tags_link)\\",
          "686:         .join(db.Books)\\",
          "688:         .group_by(text('books_tags_link.tag'))\\",
          "690:     series = calibre_db.session.query(db.Series)\\",
          "691:         .join(db.books_series_link)\\",
          "692:         .join(db.Books)\\",
          "694:         .group_by(text('books_series_link.series'))\\",
          "695:         .order_by(db.Series.name)\\",
          "697:     shelves = ub.session.query(ub.Shelf)\\",
          "698:         .filter(or_(ub.Shelf.is_public == 1, ub.Shelf.user_id == int(current_user.id)))\\",
          "700:     extensions = calibre_db.session.query(db.Data)\\",
          "701:         .join(db.Books)\\",
          "703:         .group_by(db.Data.format)\\",
          "710:                                  series=series,shelves=shelves, title=_(u\"Advanced Search\"), cc=cc, page=\"advsearch\")",
          "",
          "[Added Lines]",
          "689:     page_name = \"archived\"",
          "691:                                  title=name, page=page_name, order=sort_param[1])",
          "696:     tags = calibre_db.session.query(db.Tags) \\",
          "697:         .join(db.books_tags_link) \\",
          "698:         .join(db.Books) \\",
          "700:         .group_by(text('books_tags_link.tag')) \\",
          "702:     series = calibre_db.session.query(db.Series) \\",
          "703:         .join(db.books_series_link) \\",
          "704:         .join(db.Books) \\",
          "706:         .group_by(text('books_series_link.series')) \\",
          "707:         .order_by(db.Series.name) \\",
          "709:     shelves = ub.session.query(ub.Shelf) \\",
          "710:         .filter(or_(ub.Shelf.is_public == 1, ub.Shelf.user_id == int(current_user.id))) \\",
          "712:     extensions = calibre_db.session.query(db.Data) \\",
          "713:         .join(db.Books) \\",
          "715:         .group_by(db.Data.format) \\",
          "722:                                  series=series, shelves=shelves, title=_(u\"Advanced Search\"), cc=cc, page=\"advsearch\")",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "716:                                                                       offset,",
          "717:                                                                       order,",
          "718:                                                                       limit,",
          "720:                                                                       config.config_read_column,",
          "722:     return render_title_template('search.html',",
          "",
          "[Removed Lines]",
          "719:                                                                       False,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "759:     return render_title_template('book_table.html', title=_(u\"Books List\"), cc=cc, page=\"book_table\",",
          "760:                                  visiblility=visibility)",
          "762: @web.route(\"/ajax/listbooks\")",
          "763: @login_required",
          "764: def list_books():",
          "765:     off = int(request.args.get(\"offset\") or 0)",
          "766:     limit = int(request.args.get(\"limit\") or config.config_books_per_page)",
          "768:     sort_param = request.args.get(\"sort\", \"id\")",
          "769:     order = request.args.get(\"order\", \"\").lower()",
          "770:     state = None",
          "",
          "[Removed Lines]",
          "767:     search = request.args.get(\"search\")",
          "",
          "[Added Lines]",
          "779:     search_param = request.args.get(\"search\")",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "784:     elif sort_param == \"authors\":",
          "785:         order = [db.Authors.name.asc(), db.Series.name, db.Books.series_index] if order == \"asc\" \\",
          "786:             else [db.Authors.name.desc(), db.Series.name.desc(), db.Books.series_index.desc()]",
          "789:     elif sort_param == \"languages\":",
          "790:         order = [db.Languages.lang_code.asc()] if order == \"asc\" else [db.Languages.lang_code.desc()]",
          "791:         join = db.books_languages_link, db.Books.id == db.books_languages_link.c.book, db.Languages",
          "",
          "[Removed Lines]",
          "787:         join = db.books_authors_link, db.Books.id == db.books_authors_link.c.book, db.Authors, \\",
          "788:                db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series",
          "",
          "[Added Lines]",
          "799:         join = db.books_authors_link, db.Books.id == db.books_authors_link.c.book, db.Authors, db.books_series_link, \\",
          "800:             db.Books.id == db.books_series_link.c.book, db.Series",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "794:     elif not state:",
          "795:         order = [db.Books.timestamp.desc()]",
          "798:     if state is not None:",
          "801:             filtered_count = len(books)",
          "802:         else:",
          "803:             if not config.config_read_column:",
          "",
          "[Removed Lines]",
          "797:     total_count = filtered_count = calibre_db.session.query(db.Books).filter(calibre_db.common_filters(allow_show_archived=True)).count()",
          "799:         if search:",
          "800:             books = calibre_db.search_query(search, config.config_read_column).all()",
          "",
          "[Added Lines]",
          "809:     total_count = filtered_count = calibre_db.session.query(db.Books).filter(",
          "810:         calibre_db.common_filters(allow_show_archived=True)).count()",
          "812:         if search_param:",
          "813:             books = calibre_db.search_query(search_param, config.config_read_column).all()",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "818:                     # Skip linking read column and return None instead of read status",
          "819:                     books = calibre_db.session.query(db.Books, None, ub.ArchivedBook.is_archived)",
          "820:             books = (books.outerjoin(ub.ArchivedBook, and_(db.Books.id == ub.ArchivedBook.book_id,",
          "822:                      .filter(calibre_db.common_filters(allow_show_archived=True)).all())",
          "823:         entries = calibre_db.get_checkbox_sorted(books, state, off, limit, order, True)",
          "826:                                                                     off,",
          "828:                                                                     limit,",
          "830:                                                                     config.config_read_column,",
          "832:     else:",
          "",
          "[Removed Lines]",
          "821:                                                           int(current_user.id) == ub.ArchivedBook.user_id))",
          "824:     elif search:",
          "825:         entries, filtered_count, __ = calibre_db.get_search_results(search,",
          "827:                                                                     [order,''],",
          "829:                                                                     True,",
          "",
          "[Added Lines]",
          "834:                                                            int(current_user.id) == ub.ArchivedBook.user_id))",
          "837:     elif search_param:",
          "838:         entries, filtered_count, __ = calibre_db.get_search_results(search_param,",
          "840:                                                                     [order, ''],",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "845:         val = entry[0]",
          "846:         val.read_status = entry[1] == ub.ReadBook.STATUS_FINISHED",
          "847:         val.is_archived = entry[2] is True",
          "851:         result.append(val)",
          "853:     table_entries = {'totalNotFiltered': total_count, 'total': filtered_count, \"rows\": result}",
          "",
          "[Removed Lines]",
          "848:         for index in range(0, len(val.languages)):",
          "849:             val.languages[index].language_name = isoLanguages.get_language_name(get_locale(), val.languages[",
          "850:                 index].lang_code)",
          "",
          "[Added Lines]",
          "860:         for lang_index in range(0, len(val.languages)):",
          "861:             val.languages[lang_index].language_name = isoLanguages.get_language_name(get_locale(), val.languages[",
          "862:                 lang_index].lang_code)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "886:         entries = calibre_db.session.query(db.Authors, func.count('books_authors_link.book').label('count')) \\",
          "887:             .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "888:             .group_by(text('books_authors_link.author')).order_by(order).all()",
          "892:         # If not creating a copy, readonly databases can not display authornames with \"|\" in it as changing the name",
          "893:         # starts a change session",
          "896:             entry.Authors.name = entry.Authors.name.replace('|', ',')",
          "898:                                      title=u\"Authors\", page=\"authorlist\", data='author', order=order_no)",
          "899:     else:",
          "900:         abort(404)",
          "902: @web.route(\"/downloadlist\")",
          "903: @login_required_if_no_ano",
          "904: def download_list():",
          "",
          "[Removed Lines]",
          "889:         charlist = calibre_db.session.query(func.upper(func.substr(db.Authors.sort, 1, 1)).label('char')) \\",
          "890:             .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "891:             .group_by(func.upper(func.substr(db.Authors.sort, 1, 1))).all()",
          "894:         autor_copy = copy.deepcopy(entries)",
          "895:         for entry in autor_copy:",
          "897:         return render_title_template('list.html', entries=autor_copy, folder='web.books_list', charlist=charlist,",
          "",
          "[Added Lines]",
          "902:         char_list = generate_char_list(db.Authors.sort, db.books_authors_link)",
          "905:         author_copy = copy.deepcopy(entries)",
          "906:         for entry in author_copy:",
          "908:         return render_title_template('list.html', entries=author_copy, folder='web.books_list', charlist=char_list,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "909:         order = ub.User.name.asc()",
          "910:         order_no = 1",
          "911:     if current_user.check_visibility(constants.SIDEBAR_DOWNLOAD) and current_user.role_admin():",
          "913:             .join(ub.Downloads).group_by(ub.Downloads.user_id).order_by(order).all()",
          "915:             .filter(ub.User.role.op('&')(constants.ROLE_ANONYMOUS) != constants.ROLE_ANONYMOUS) \\",
          "916:             .group_by(func.upper(func.substr(ub.User.name, 1, 1))).all()",
          "918:                                      title=_(u\"Downloads\"), page=\"downloadlist\", data=\"download\", order=order_no)",
          "919:     else:",
          "920:         abort(404)",
          "",
          "[Removed Lines]",
          "912:         entries = ub.session.query(ub.User, func.count(ub.Downloads.book_id).label('count'))\\",
          "914:         charlist = ub.session.query(func.upper(func.substr(ub.User.name, 1, 1)).label('char')) \\",
          "917:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,",
          "",
          "[Added Lines]",
          "924:         entries = ub.session.query(ub.User, func.count(ub.Downloads.book_id).label('count')) \\",
          "926:         char_list = ub.session.query(func.upper(func.substr(ub.User.name, 1, 1)).label('char')) \\",
          "929:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=char_list,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "933:         entries = calibre_db.session.query(db.Publishers, func.count('books_publishers_link.book').label('count')) \\",
          "934:             .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "935:             .group_by(text('books_publishers_link.publisher')).order_by(order).all()",
          "940:                                      title=_(u\"Publishers\"), page=\"publisherlist\", data=\"publisher\", order=order_no)",
          "941:     else:",
          "942:         abort(404)",
          "",
          "[Removed Lines]",
          "936:         charlist = calibre_db.session.query(func.upper(func.substr(db.Publishers.name, 1, 1)).label('char')) \\",
          "937:             .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "938:             .group_by(func.upper(func.substr(db.Publishers.name, 1, 1))).all()",
          "939:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,",
          "",
          "[Added Lines]",
          "948:         char_list = generate_char_list(db.Publishers.name, db.books_publishers_link)",
          "949:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=char_list,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "952:         else:",
          "953:             order = db.Series.sort.asc()",
          "954:             order_no = 1",
          "955:         if current_user.get_view_property('series', 'series_view') == 'list':",
          "956:             entries = calibre_db.session.query(db.Series, func.count('books_series_link.book').label('count')) \\",
          "957:                 .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "958:                 .group_by(text('books_series_link.series')).order_by(order).all()",
          "963:                                          title=_(u\"Series\"), page=\"serieslist\", data=\"series\", order=order_no)",
          "964:         else:",
          "965:             entries = calibre_db.session.query(db.Books, func.count('books_series_link').label('count'),",
          "966:                                                func.max(db.Books.series_index), db.Books.id) \\",
          "968:                 .group_by(text('books_series_link.series')).order_by(order).all()",
          "974:                                          title=_(u\"Series\"), page=\"serieslist\", data=\"series\", bodyClass=\"grid-view\",",
          "975:                                          order=order_no)",
          "976:     else:",
          "",
          "[Removed Lines]",
          "959:             charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\",
          "960:                 .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "961:                 .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()",
          "962:             return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,",
          "967:                 .join(db.books_series_link).join(db.Series).filter(calibre_db.common_filters())\\",
          "969:             charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\",
          "970:                 .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "971:                 .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()",
          "973:             return render_title_template('grid.html', entries=entries, folder='web.books_list', charlist=charlist,",
          "",
          "[Added Lines]",
          "965:         char_list = generate_char_list(db.Series.sort, db.books_series_link)",
          "970:             return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=char_list,",
          "975:                 .join(db.books_series_link).join(db.Series).filter(calibre_db.common_filters()) \\",
          "977:             return render_title_template('grid.html', entries=entries, folder='web.books_list', charlist=char_list,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "988:             order = db.Ratings.rating.asc()",
          "989:             order_no = 1",
          "990:         entries = calibre_db.session.query(db.Ratings, func.count('books_ratings_link.book').label('count'),",
          "992:             .join(db.books_ratings_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "993:             .group_by(text('books_ratings_link.rating')).order_by(order).all()",
          "994:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=list(),",
          "",
          "[Removed Lines]",
          "991:                                    (db.Ratings.rating / 2).label('name')) \\",
          "",
          "[Added Lines]",
          "995:                                            (db.Ratings.rating / 2).label('name')) \\",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1023: def language_overview():",
          "1024:     if current_user.check_visibility(constants.SIDEBAR_LANGUAGE) and current_user.filter_language() == u\"all\":",
          "1025:         order_no = 0 if current_user.get_view_property('language', 'dir') == 'desc' else 1",
          "1027:         languages = calibre_db.speaking_language(reverse_order=not order_no, with_count=True)",
          "1028:         for lang in languages:",
          "1029:             upper_lang = lang[0].name[0].upper()",
          "1032:         return render_title_template('languages.html', languages=languages,",
          "1034:                                      data=\"language\", order=order_no)",
          "1035:     else:",
          "1036:         abort(404)",
          "",
          "[Removed Lines]",
          "1026:         charlist = list()",
          "1030:             if upper_lang not in charlist:",
          "1031:                 charlist.append(upper_lang)",
          "1033:                                      charlist=charlist, title=_(u\"Languages\"), page=\"langlist\",",
          "",
          "[Added Lines]",
          "1030:         char_list = list()",
          "1034:             if upper_lang not in char_list:",
          "1035:                 char_list.append(upper_lang)",
          "1037:                                      charlist=char_list, title=_(u\"Languages\"), page=\"langlist\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1049:         entries = calibre_db.session.query(db.Tags, func.count('books_tags_link.book').label('count')) \\",
          "1050:             .join(db.books_tags_link).join(db.Books).order_by(order).filter(calibre_db.common_filters()) \\",
          "1051:             .group_by(text('books_tags_link.tag')).all()",
          "1056:                                      title=_(u\"Categories\"), page=\"catlist\", data=\"category\", order=order_no)",
          "1057:     else:",
          "1058:         abort(404)",
          "",
          "[Removed Lines]",
          "1052:         charlist = calibre_db.session.query(func.upper(func.substr(db.Tags.name, 1, 1)).label('char')) \\",
          "1053:             .join(db.books_tags_link).join(db.Books).filter(calibre_db.common_filters()) \\",
          "1054:             .group_by(func.upper(func.substr(db.Tags.name, 1, 1))).all()",
          "1055:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,",
          "",
          "[Added Lines]",
          "1056:         char_list = generate_char_list(db.Tags.name, db.books_tags_link)",
          "1057:         return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=char_list,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1176:     return q",
          "1180:     for extension in include_extension_inputs:",
          "1181:         q = q.filter(db.Books.data.any(db.Data.format == extension))",
          "1182:     for extension in exclude_extension_inputs:",
          "",
          "[Removed Lines]",
          "1179: def adv_search_extension(q, include_extension_inputs, exclude_extension_inputs):",
          "",
          "[Added Lines]",
          "1181: def adv_search_text(q, include_inputs, exclude_inputs, data_value):",
          "1182:     for inp in include_inputs:",
          "1183:         q = q.filter(db.Books.data.any(data_value == inp))",
          "1184:     for excl in exclude_inputs:",
          "1185:         q = q.filter(not_(db.Books.data.any(data_value == excl)))",
          "1186:     return q",
          "1189: '''def adv_search_extension(q, include_extension_inputs, exclude_extension_inputs):",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1197:         q = q.filter(db.Books.series.any(db.Series.id == serie))",
          "1198:     for serie in exclude_series_inputs:",
          "1199:         q = q.filter(not_(db.Books.series.any(db.Series.id == serie)))",
          "1202: def adv_search_shelf(q, include_shelf_inputs, exclude_shelf_inputs):",
          "1204:         .filter(or_(ub.BookShelf.shelf == None, ub.BookShelf.shelf.notin_(exclude_shelf_inputs)))",
          "1205:     if len(include_shelf_inputs) > 0:",
          "1206:         q = q.filter(ub.BookShelf.shelf.in_(include_shelf_inputs))",
          "1207:     return q",
          "1209: def extend_search_term(searchterm,",
          "1210:                        author_name,",
          "1211:                        book_title,",
          "",
          "[Removed Lines]",
          "1200:     return q",
          "1203:     q = q.outerjoin(ub.BookShelf, db.Books.id == ub.BookShelf.book_id)\\",
          "",
          "[Added Lines]",
          "1210:     return q'''",
          "1214:     q = q.outerjoin(ub.BookShelf, db.Books.id == ub.BookShelf.book_id) \\",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1232:                                            format='medium', locale=get_locale())])",
          "1233:         except ValueError:",
          "1234:             pub_end = u\"\"",
          "1236:     for key, db_element in elements.items():",
          "1237:         tag_names = calibre_db.session.query(db_element).filter(db_element.id.in_(tags['include_' + key])).all()",
          "1238:         searchterm.extend(tag.name for tag in tag_names)",
          "",
          "[Removed Lines]",
          "1235:     elements = {'tag': db.Tags, 'serie':db.Series, 'shelf':ub.Shelf}",
          "",
          "[Added Lines]",
          "1247:     elements = {'tag': db.Tags, 'serie': db.Series, 'shelf': ub.Shelf}",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1284:     query = query.outerjoin(ub.ArchivedBook, and_(db.Books.id == ub.ArchivedBook.book_id,",
          "1285:                                                   int(current_user.id) == ub.ArchivedBook.user_id))",
          "1289:         .filter(calibre_db.common_filters(True))",
          "1291:     # parse multiselects to a complete dict",
          "",
          "[Removed Lines]",
          "1287:     q = query.outerjoin(db.books_series_link, db.Books.id == db.books_series_link.c.book)\\",
          "1288:         .outerjoin(db.Series)\\",
          "",
          "[Added Lines]",
          "1299:     q = query.outerjoin(db.books_series_link, db.Books.id == db.books_series_link.c.book) \\",
          "1300:         .outerjoin(db.Series) \\",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1311:     if publisher:",
          "1312:         publisher = publisher.strip().lower()",
          "1315:     cc_present = False",
          "1316:     for c in cc:",
          "1317:         if c.datatype == \"datetime\":",
          "1318:             column_start = term.get('custom_column_' + str(c.id) + '_start')",
          "1319:             column_end = term.get('custom_column_' + str(c.id) + '_end')",
          "1320:             if column_start:",
          "1326:                 cc_present = True",
          "1327:             if column_end:",
          "1333:                 cc_present = True",
          "1334:         elif term.get('custom_column_' + str(c.id)):",
          "1336:             cc_present = True",
          "1351:         # q = q.filter()",
          "1352:         if author_name:",
          "1353:             q = q.filter(db.Books.authors.any(func.lower(db.Authors.name).ilike(\"%\" + author_name + \"%\")))",
          "",
          "[Removed Lines]",
          "1314:     searchterm = []",
          "1321:                 searchterm.extend([u\"{} >= {}\".format(c.name,",
          "1322:                                                       format_date(datetime.strptime(column_start, \"%Y-%m-%d\").date(),",
          "1323:                                                                       format='medium',",
          "1324:                                                                       locale=get_locale())",
          "1325:                                                       )])",
          "1328:                 searchterm.extend([u\"{} <= {}\".format(c.name,",
          "1329:                                                       format_date(datetime.strptime(column_end, \"%Y-%m-%d\").date(),",
          "1330:                                                                       format='medium',",
          "1331:                                                                       locale=get_locale())",
          "1332:                                                       )])",
          "1335:             searchterm.extend([(u\"{}: {}\".format(c.name, term.get('custom_column_' + str(c.id))))])",
          "1339:     if any(tags.values()) or author_name or book_title or publisher or pub_start or pub_end or rating_low \\",
          "1340:        or rating_high or description or cc_present or read_status:",
          "1341:         searchterm, pub_start, pub_end = extend_search_term(searchterm,",
          "1342:                                                             author_name,",
          "1343:                                                             book_title,",
          "1344:                                                             publisher,",
          "1345:                                                             pub_start,",
          "1346:                                                             pub_end,",
          "1347:                                                             tags,",
          "1348:                                                             rating_high,",
          "1349:                                                             rating_low,",
          "1350:                                                             read_status)",
          "",
          "[Added Lines]",
          "1326:     search_term = []",
          "1333:                 search_term.extend([u\"{} >= {}\".format(c.name,",
          "1334:                                                        format_date(datetime.strptime(column_start, \"%Y-%m-%d\").date(),",
          "1335:                                                                    format='medium',",
          "1336:                                                                    locale=get_locale())",
          "1337:                                                        )])",
          "1340:                 search_term.extend([u\"{} <= {}\".format(c.name,",
          "1341:                                                        format_date(datetime.strptime(column_end, \"%Y-%m-%d\").date(),",
          "1342:                                                                    format='medium',",
          "1343:                                                                    locale=get_locale())",
          "1344:                                                        )])",
          "1347:             search_term.extend([(u\"{}: {}\".format(c.name, term.get('custom_column_' + str(c.id))))])",
          "1350:     if any(tags.values()) or author_name or book_title or \\",
          "1351:         publisher or pub_start or pub_end or rating_low or rating_high \\",
          "1352:             or description or cc_present or read_status:",
          "1353:         search_term, pub_start, pub_end = extend_search_term(search_term,",
          "1354:                                                              author_name,",
          "1355:                                                              book_title,",
          "1356:                                                              publisher,",
          "1357:                                                              pub_start,",
          "1358:                                                              pub_end,",
          "1359:                                                              tags,",
          "1360:                                                              rating_high,",
          "1361:                                                              rating_low,",
          "1362:                                                              read_status)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1360:         q = adv_search_read_status(q, read_status)",
          "1361:         if publisher:",
          "1362:             q = q.filter(db.Books.publishers.any(func.lower(db.Publishers.name).ilike(\"%\" + publisher + \"%\")))",
          "1365:         q = adv_search_shelf(q, tags['include_shelf'], tags['exclude_shelf'])",
          "1370:         if description:",
          "1371:             q = q.filter(db.Books.comments.any(func.lower(db.Comments.text).ilike(\"%\" + description + \"%\")))",
          "",
          "[Removed Lines]",
          "1363:         q = adv_search_tag(q, tags['include_tag'], tags['exclude_tag'])",
          "1364:         q = adv_search_serie(q, tags['include_serie'], tags['exclude_serie'])",
          "1366:         q = adv_search_extension(q, tags['include_extension'], tags['exclude_extension'])",
          "1367:         q = adv_search_language(q, tags['include_language'], tags['exclude_language'])",
          "1368:         q = adv_search_ratings(q, rating_high, rating_low)",
          "",
          "[Added Lines]",
          "1375:         q = adv_search_text(q, tags['include_tag'], tags['exclude_tag'], db.Tags.id)",
          "1376:         q = adv_search_text(q, tags['include_serie'], tags['exclude_serie'], db.Series.id)",
          "1377:         q = adv_search_text(q, tags['include_extension'], tags['exclude_extension'], db.Data.format)",
          "1379:         q = adv_search_language(q, tags['include_language'], tags['exclude_language'], )",
          "1380:         q = adv_search_ratings(q, rating_high, rating_low, )",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1390:         limit_all = result_count",
          "1391:     entries = calibre_db.order_authors(q[offset:limit_all], list_return=True, combined=True)",
          "1392:     return render_title_template('search.html',",
          "1394:                                  pagination=pagination,",
          "1395:                                  entries=entries,",
          "1396:                                  result_count=result_count,",
          "",
          "[Removed Lines]",
          "1393:                                  adv_searchterm=searchterm,",
          "",
          "[Added Lines]",
          "1405:                                  adv_searchterm=search_term,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1561:                       category=\"success\")",
          "1562:                 return redirect_back(url_for(\"web.index\"))",
          "1563:             elif login_result is None and user and check_password_hash(str(user.password), form['password']) \\",
          "1565:                 login_user(user, remember=bool(form.get('remember_me')))",
          "1566:                 ub.store_user_session()",
          "1567:                 log.info(\"Local Fallback Login as: '%s'\", user.name)",
          "",
          "[Removed Lines]",
          "1564:                 and user.name != \"Guest\":",
          "",
          "[Added Lines]",
          "1578:                     and user.name != \"Guest\":",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1573:                 log.info(error)",
          "1574:                 flash(_(u\"Could not login: %(message)s\", message=error), category=\"error\")",
          "1575:             else:",
          "1578:                 flash(_(u\"Wrong Username or Password\"), category=\"error\")",
          "1579:         else:",
          "1581:             if 'forgot' in form and form['forgot'] == 'forgot':",
          "1582:                 if user is not None and user.name != \"Guest\":",
          "1583:                     ret, __ = reset_password(user.id)",
          "1584:                     if ret == 1:",
          "1585:                         flash(_(u\"New Password was send to your email address\"), category=\"info\")",
          "1587:                     else:",
          "1588:                         log.error(u\"An unknown error occurred. Please try again later\")",
          "1589:                         flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")",
          "1590:                 else:",
          "1591:                     flash(_(u\"Please enter valid username to reset password\"), category=\"error\")",
          "1593:             else:",
          "1594:                 if user and check_password_hash(str(user.password), form['password']) and user.name != \"Guest\":",
          "1595:                     login_user(user, remember=bool(form.get('remember_me')))",
          "",
          "[Removed Lines]",
          "1576:                 ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "1577:                 log.warning('LDAP Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)",
          "1580:             ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "1586:                         log.info('Password reset for user \"%s\" IP-address: %s', form['username'], ip_Address)",
          "1592:                     log.warning('Username missing for password reset IP-address: %s', ip_Address)",
          "",
          "[Added Lines]",
          "1590:                 ip_address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "1591:                 log.warning('LDAP Login failed for user \"%s\" IP-address: %s', form['username'], ip_address)",
          "1594:             ip_address = request.headers.get('X-Forwarded-For', request.remote_addr)",
          "1600:                         log.info('Password reset for user \"%s\" IP-address: %s', form['username'], ip_address)",
          "1606:                     log.warning('Username missing for password reset IP-address: %s', ip_address)",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1599:                     config.config_is_initial = False",
          "1600:                     return redirect_back(url_for(\"web.index\"))",
          "1601:                 else:",
          "1603:                     flash(_(u\"Wrong Username or Password\"), category=\"error\")",
          "1605:     next_url = request.args.get('next', default=url_for(\"web.index\"), type=str)",
          "",
          "[Removed Lines]",
          "1602:                     log.warning('Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)",
          "",
          "[Added Lines]",
          "1616:                     log.warning('Login failed for user \"%s\" IP-address: %s', form['username'], ip_address)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1617: @login_required",
          "1618: def logout():",
          "1619:     if current_user is not None and current_user.is_authenticated:",
          "1621:         logout_user()",
          "1622:         if feature_support['oauth'] and (config.config_login_type == 2 or config.config_login_type == 3):",
          "1623:             logout_oauth_user()",
          "",
          "[Removed Lines]",
          "1620:         ub.delete_user_session(current_user.id, flask_session.get('_id',\"\"))",
          "",
          "[Added Lines]",
          "1634:         ub.delete_user_session(current_user.id, flask_session.get('_id', \"\"))",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1639:             current_user.email = check_email(to_save[\"email\"])",
          "1640:         if current_user.role_admin():",
          "1641:             if to_save.get(\"name\", current_user.name) != current_user.name:",
          "1643:                 current_user.name = check_username(to_save[\"name\"])",
          "1644:         current_user.random_books = 1 if to_save.get(\"show_random\") == \"on\" else 0",
          "1645:         if to_save.get(\"default_language\"):",
          "",
          "[Removed Lines]",
          "1642:                 # Query User name, if not existing, change",
          "",
          "[Added Lines]",
          "1656:                 # Query username, if not existing, change",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1693: @login_required",
          "1694: def profile():",
          "1695:     languages = calibre_db.speaking_language()",
          "1697:     kobo_support = feature_support['kobo'] and config.config_kobo_sync",
          "1698:     if feature_support['oauth'] and config.config_login_type == 2:",
          "1699:         oauth_status = get_oauth_status()",
          "",
          "[Removed Lines]",
          "1696:     translations = babel.list_translations() + [LC('en')]",
          "",
          "[Added Lines]",
          "1710:     translations = babel.list_translations() + [Locale('en')]",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1727:     book.ordered_authors = calibre_db.order_authors([book], False)",
          "1729:     if not book:",
          "1731:         log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")",
          "1732:         return redirect(url_for(\"web.index\"))",
          "",
          "[Removed Lines]",
          "1730:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")",
          "",
          "[Added Lines]",
          "1744:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),",
          "1745:               category=\"error\")",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1768:                 return render_title_template('readcbr.html', comicfile=all_name, title=title,",
          "1769:                                              extension=fileExt)",
          "1770:         log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")",
          "1772:         return redirect(url_for(\"web.index\"))",
          "",
          "[Removed Lines]",
          "1771:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")",
          "",
          "[Added Lines]",
          "1786:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),",
          "1787:               category=\"error\")",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1782:         entry = entries[0]",
          "1783:         entry.read_status = read_book == ub.ReadBook.STATUS_FINISHED",
          "1784:         entry.is_archived = archived_book",
          "1788:         cc = get_cc_columns(filter_config_custom_read=True)",
          "1790:         shelfs = ub.session.query(ub.BookShelf).filter(ub.BookShelf.book_id == book_id).all()",
          "1791:         for sh in shelfs:",
          "1794:         entry.tags = sort(entry.tags, key=lambda tag: tag.name)",
          "",
          "[Removed Lines]",
          "1785:         for index in range(0, len(entry.languages)):",
          "1786:             entry.languages[index].language_name = isoLanguages.get_language_name(get_locale(), entry.languages[",
          "1787:                 index].lang_code)",
          "1789:         book_in_shelfs = []",
          "1792:             book_in_shelfs.append(sh.shelf)",
          "",
          "[Added Lines]",
          "1801:         for lang_index in range(0, len(entry.languages)):",
          "1802:             entry.languages[lang_index].language_name = isoLanguages.get_language_name(get_locale(), entry.languages[",
          "1803:                 lang_index].lang_code)",
          "1805:         book_in_shelves = []",
          "1808:             book_in_shelves.append(sh.shelf)",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1806:         return render_title_template('detail.html',",
          "1807:                                      entry=entry,",
          "1808:                                      cc=cc,",
          "1810:                                      title=entry.title,",
          "1812:                                      page=\"book\")",
          "1813:     else:",
          "1814:         log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")",
          "",
          "[Removed Lines]",
          "1809:                                      is_xhr=request.headers.get('X-Requested-With')=='XMLHttpRequest',",
          "1811:                                      books_shelfs=book_in_shelfs,",
          "",
          "[Added Lines]",
          "1825:                                      is_xhr=request.headers.get('X-Requested-With') == 'XMLHttpRequest',",
          "1827:                                      books_shelfs=book_in_shelves,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cb5989c97b2adeb15f11f38b8e2dec3efcbaf5a",
      "candidate_info": {
        "commit_hash": "8cb5989c97b2adeb15f11f38b8e2dec3efcbaf5a",
        "repo": "janeczku/calibre-web",
        "commit_url": "https://github.com/janeczku/calibre-web/commit/8cb5989c97b2adeb15f11f38b8e2dec3efcbaf5a",
        "files": [
          "cps/admin.py",
          "cps/db.py",
          "cps/editbooks.py",
          "cps/helper.py",
          "cps/render_template.py",
          "cps/templates/detail.html",
          "cps/ub.py",
          "cps/web.py",
          "optional-requirements.txt",
          "test/Calibre-Web TestSummary_Linux.html"
        ],
        "message": "Catch additional error on not existing custom column linked to read column (#2341) Prevent metadata changes are lost on edit books with errors (#2326) Better log output Renamed log message on database delete",
        "before_after_code_files": [
          "cps/admin.py||cps/admin.py",
          "cps/db.py||cps/db.py",
          "cps/editbooks.py||cps/editbooks.py",
          "cps/helper.py||cps/helper.py",
          "cps/render_template.py||cps/render_template.py",
          "cps/templates/detail.html||cps/templates/detail.html",
          "cps/ub.py||cps/ub.py",
          "cps/web.py||cps/web.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ],
          "candidate": [
            "cps/admin.py||cps/admin.py",
            "cps/editbooks.py||cps/editbooks.py"
          ]
        }
      },
      "candidate_diff": {
        "cps/admin.py||cps/admin.py": [
          "File: cps/admin.py -> cps/admin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:         config.store_calibre_uuid(calibre_db, db.LibraryId)",
          "1238:         # if db changed -> delete shelfs, delete download books, delete read books, kobo sync...",
          "1239:         if db_change:",
          "1241:             ub.session.query(ub.Downloads).delete()",
          "1242:             ub.session.query(ub.ArchivedBook).delete()",
          "1243:             ub.session.query(ub.ReadBook).delete()",
          "",
          "[Removed Lines]",
          "1240:             log.info(\"Calibre Database changed, delete all Calibre-Web info related to old Database\")",
          "",
          "[Added Lines]",
          "1240:             log.info(\"Calibre Database changed, all Calibre-Web info related to old Database gets deleted\")",
          "",
          "---------------"
        ],
        "cps/db.py||cps/db.py": [
          "File: cps/db.py -> cps/db.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "620:                 bd = (self.session.query(Books, read_column.value, ub.ArchivedBook.is_archived).select_from(Books)",
          "621:                       .join(read_column, read_column.book == book_id,",
          "622:                       isouter=True))",
          "625:                 # Skip linking read column and return None instead of read status",
          "626:                 bd = self.session.query(Books, None, ub.ArchivedBook.is_archived)",
          "627:         return (bd.filter(Books.id == book_id)",
          "",
          "[Removed Lines]",
          "623:             except (KeyError, AttributeError):",
          "624:                 log.error(\"Custom Column No.%d is not existing in calibre database\", read_column)",
          "",
          "[Added Lines]",
          "623:             except (KeyError, AttributeError, IndexError):",
          "624:                 log.error(\"Custom Column No.{} is not existing in calibre database\".format(read_column))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "665:                 neg_content_cc_filter = false() if neg_cc_list == [''] else \\",
          "666:                     getattr(Books, 'custom_column_' + str(self.config.config_restricted_column)). \\",
          "667:                     any(cc_classes[self.config.config_restricted_column].value.in_(neg_cc_list))",
          "669:                 pos_content_cc_filter = false()",
          "670:                 neg_content_cc_filter = true()",
          "673:                 flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",",
          "674:                         column=self.config.config_restricted_column),",
          "675:                       category=\"error\")",
          "",
          "[Removed Lines]",
          "668:             except (KeyError, AttributeError):",
          "671:                 log.error(u\"Custom Column No.%d is not existing in calibre database\",",
          "672:                           self.config.config_restricted_column)",
          "",
          "[Added Lines]",
          "668:             except (KeyError, AttributeError, IndexError):",
          "671:                 log.error(\"Custom Column No.{} is not existing in calibre database\".format(",
          "672:                     self.config.config_restricted_column))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "727:                     query = (self.session.query(database, read_column.value, ub.ArchivedBook.is_archived)",
          "728:                              .select_from(Books)",
          "729:                              .outerjoin(read_column, read_column.book == Books.id))",
          "732:                     # Skip linking read column and return None instead of read status",
          "733:                     query = self.session.query(database, None, ub.ArchivedBook.is_archived)",
          "734:             query = query.outerjoin(ub.ArchivedBook, and_(Books.id == ub.ArchivedBook.book_id,",
          "",
          "[Removed Lines]",
          "730:                 except (KeyError, AttributeError):",
          "731:                     log.error(\"Custom Column No.%d is not existing in calibre database\", read_column)",
          "",
          "[Added Lines]",
          "730:                 except (KeyError, AttributeError, IndexError):",
          "731:                     log.error(\"Custom Column No.{} is not existing in calibre database\".format(read_column))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "839:                 read_column = cc_classes[config_read_column]",
          "840:                 query = (self.session.query(Books, ub.ArchivedBook.is_archived, read_column.value).select_from(Books)",
          "841:                          .outerjoin(read_column, read_column.book == Books.id))",
          "844:                 # Skip linking read column",
          "845:                 query = self.session.query(Books, ub.ArchivedBook.is_archived, None)",
          "846:         query = query.outerjoin(ub.ArchivedBook, and_(Books.id == ub.ArchivedBook.book_id,",
          "",
          "[Removed Lines]",
          "842:             except (KeyError, AttributeError):",
          "843:                 log.error(\"Custom Column No.%d is not existing in calibre database\", config_read_column)",
          "",
          "[Added Lines]",
          "842:             except (KeyError, AttributeError, IndexError):",
          "843:                 log.error(\"Custom Column No.{} is not existing in calibre database\".format(config_read_column))",
          "",
          "---------------"
        ],
        "cps/editbooks.py||cps/editbooks.py": [
          "File: cps/editbooks.py -> cps/editbooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: def render_delete_book_result(book_format, json_response, warning, book_id):",
          "290:     if book_format:",
          "291:         if json_response:",
          "293:                                          \"type\": \"success\",",
          "294:                                          \"format\": book_format,",
          "295:                                          \"message\": _('Book Format Successfully Deleted')}])",
          "296:         else:",
          "297:             flash(_('Book Format Successfully Deleted'), category=\"success\")",
          "299:     else:",
          "300:         if json_response:",
          "301:             return json.dumps([warning, {\"location\": url_for('web.index'),",
          "",
          "[Removed Lines]",
          "292:             return json.dumps([warning, {\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "298:             return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "292:             return json.dumps([warning, {\"location\": url_for(\"edit-book.show_edit_book\", book_id=book_id),",
          "298:             return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:                 result, error = helper.delete_book(book, config.config_calibre_dir, book_format=book_format.upper())",
          "317:                 if not result:",
          "318:                     if json_response:",
          "320:                                             \"type\": \"danger\",",
          "321:                                             \"format\": \"\",",
          "322:                                             \"message\": error}])",
          "323:                     else:",
          "324:                         flash(error, category=\"error\")",
          "326:                 if error:",
          "327:                     if json_response:",
          "329:                                    \"type\": \"warning\",",
          "330:                                    \"format\": \"\",",
          "331:                                    \"message\": error}",
          "",
          "[Removed Lines]",
          "319:                         return json.dumps([{\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "325:                         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "328:                         warning = {\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "",
          "[Added Lines]",
          "319:                         return json.dumps([{\"location\": url_for(\"edit-book.show_edit_book\", book_id=book_id),",
          "325:                         return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "328:                         warning = {\"location\": url_for(\"edit-book.show_edit_book\", book_id=book_id),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:                 log.error_or_exception(ex)",
          "344:                 calibre_db.session.rollback()",
          "345:                 if json_response:",
          "347:                                         \"type\": \"danger\",",
          "348:                                         \"format\": \"\",",
          "349:                                         \"message\": ex}])",
          "350:                 else:",
          "351:                     flash(str(ex), category=\"error\")",
          "354:         else:",
          "355:             # book not found",
          "",
          "[Removed Lines]",
          "346:                     return json.dumps([{\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "352:                     return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "346:                     return json.dumps([{\"location\": url_for(\"edit-book.show_edit_book\", book_id=book_id),",
          "352:                     return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "357:         return render_delete_book_result(book_format, json_response, warning, book_id)",
          "358:     message = _(\"You are missing permissions to delete books\")",
          "359:     if json_response:",
          "361:                            \"type\": \"danger\",",
          "362:                            \"format\": \"\",",
          "363:                            \"message\": message})",
          "364:     else:",
          "365:         flash(message, category=\"error\")",
          "369: def render_edit_book(book_id):",
          "",
          "[Removed Lines]",
          "360:         return json.dumps({\"location\": url_for(\"edit-book.edit_book\", book_id=book_id),",
          "366:         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "360:         return json.dumps({\"location\": url_for(\"edit-book.show_edit_book\", book_id=book_id),",
          "366:         return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "414: def edit_book_ratings(to_save, book):",
          "415:     changed = False",
          "417:         old_rating = False",
          "418:         if len(book.ratings) > 0:",
          "419:             old_rating = book.ratings[0].rating",
          "422:             changed = True",
          "424:             if is_rating:",
          "425:                 book.ratings.append(is_rating)",
          "426:             else:",
          "428:                 book.ratings.append(new_rating)",
          "429:             if old_rating:",
          "430:                 book.ratings.remove(book.ratings[0])",
          "",
          "[Removed Lines]",
          "416:     if to_save[\"rating\"].strip():",
          "420:         ratingx2 = int(float(to_save[\"rating\"]) * 2)",
          "421:         if ratingx2 != old_rating:",
          "423:             is_rating = calibre_db.session.query(db.Ratings).filter(db.Ratings.rating == ratingx2).first()",
          "427:                 new_rating = db.Ratings(rating=ratingx2)",
          "",
          "[Added Lines]",
          "416:     if to_save.get(\"rating\",\"\").strip():",
          "420:         rating_x2 = int(float(to_save.get(\"rating\",\"\")) * 2)",
          "421:         if rating_x2 != old_rating:",
          "423:             is_rating = calibre_db.session.query(db.Ratings).filter(db.Ratings.rating == rating_x2).first()",
          "427:                 new_rating = db.Ratings(rating=rating_x2)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "622:                                               'custom')",
          "623:     return changed",
          "626: def upload_single_file(file_request, book, book_id):",
          "627:     # Check and handle Uploaded file",
          "630:         # check for empty request",
          "631:         if requested_file.filename != '':",
          "632:             if not current_user.role_upload():",
          "634:             if '.' in requested_file.filename:",
          "635:                 file_ext = requested_file.filename.rsplit('.', 1)[-1].lower()",
          "636:                 if file_ext not in constants.EXTENSIONS_UPLOAD and '' not in constants.EXTENSIONS_UPLOAD:",
          "637:                     flash(_(\"File extension '%(ext)s' is not allowed to be uploaded to this server\", ext=file_ext),",
          "638:                           category=\"error\")",
          "640:             else:",
          "641:                 flash(_('File to be uploaded must have an extension'), category=\"error\")",
          "644:             file_name = book.path.rsplit('/', 1)[-1]",
          "645:             filepath = os.path.normpath(os.path.join(config.config_calibre_dir, book.path))",
          "",
          "[Removed Lines]",
          "628:     if 'btn-upload-format' in file_request.files:",
          "629:         requested_file = file_request.files['btn-upload-format']",
          "633:                 abort(403)",
          "639:                     return redirect(url_for('web.show_book', book_id=book.id))",
          "642:                 return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "[Added Lines]",
          "625: # returns None if no file is uploaded",
          "626: # returns False if an error occours, in all other cases the ebook metadata is returned",
          "629:     requested_file = file_request.files.get('btn-upload-format', None)",
          "630:     if requested_file:",
          "634:                 flash(_(u\"User has no rights to upload additional file formats\"), category=\"error\")",
          "635:                 return False",
          "641:                     return False",
          "644:                 return False",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "651:                     os.makedirs(filepath)",
          "652:                 except OSError:",
          "653:                     flash(_(u\"Failed to create path %(path)s (Permission denied).\", path=filepath), category=\"error\")",
          "655:             try:",
          "656:                 requested_file.save(saved_filename)",
          "657:             except OSError:",
          "658:                 flash(_(u\"Failed to store file %(file)s.\", file=saved_filename), category=\"error\")",
          "661:             file_size = os.path.getsize(saved_filename)",
          "662:             is_format = calibre_db.get_book_format(book_id, file_ext.upper())",
          "",
          "[Removed Lines]",
          "654:                     return redirect(url_for('web.show_book', book_id=book.id))",
          "659:                 return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "[Added Lines]",
          "656:                     return False",
          "661:                 return False",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "674:                     calibre_db.session.rollback()",
          "675:                     log.error_or_exception(\"Database error: {}\".format(e))",
          "676:                     flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")",
          "679:             # Queue uploader info",
          "680:             link = '<a href=\"{}\">{}</a>'.format(url_for('web.show_book', book_id=book.id), escape(book.title))",
          "",
          "[Removed Lines]",
          "677:                     return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "[Added Lines]",
          "679:                     return False # return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "684:             return uploader.process(",
          "685:                 saved_filename, *os.path.splitext(requested_file.filename),",
          "686:                 rarExecutable=config.config_rarfile_location)",
          "689: def upload_cover(cover_request, book):",
          "692:         # check for empty request",
          "693:         if requested_file.filename != '':",
          "694:             if not current_user.role_upload():",
          "696:             ret, message = helper.save_cover(requested_file, book.path)",
          "697:             if ret is True:",
          "698:                 return True",
          "",
          "[Removed Lines]",
          "690:     if 'btn-upload-cover' in cover_request.files:",
          "691:         requested_file = cover_request.files['btn-upload-cover']",
          "695:                 abort(403)",
          "",
          "[Added Lines]",
          "689:     return None",
          "692:     requested_file = cover_request.files.get('btn-upload-cover', None)",
          "693:     if requested_file:",
          "697:                 flash(_(u\"User has no rights to upload cover\"), category=\"error\")",
          "698:                 return False",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "716: def handle_author_on_edit(book, author_name, update_stored=True):",
          "717:     # handle author(s)",
          "718:     input_authors, renamed = prepare_authors(author_name)",
          "739:     change = modify_database_object(input_authors, book.authors, db.Authors, calibre_db.session, 'author')",
          "",
          "[Removed Lines]",
          "719:     '''input_authors = author_name.split('&')",
          "720:     input_authors = list(map(lambda it: it.strip().replace(',', '|'), input_authors))",
          "721:     # Remove duplicates in authors list",
          "722:     input_authors = helper.uniq(input_authors)",
          "723:     # we have all author names now",
          "724:     if input_authors == ['']:",
          "725:         input_authors = [_(u'Unknown')]  # prevent empty Author",
          "727:     renamed = list()",
          "728:     for in_aut in input_authors:",
          "729:         renamed_author = calibre_db.session.query(db.Authors).filter(db.Authors.name == in_aut).first()",
          "730:         if renamed_author and in_aut != renamed_author.name:",
          "731:             renamed.append(renamed_author.name)",
          "732:             all_books = calibre_db.session.query(db.Books) \\",
          "733:                 .filter(db.Books.authors.any(db.Authors.name == renamed_author.name)).all()",
          "734:             sorted_renamed_author = helper.get_sorted_author(renamed_author.name)",
          "735:             sorted_old_author = helper.get_sorted_author(in_aut)",
          "736:             for one_book in all_books:",
          "737:                 one_book.author_sort = one_book.author_sort.replace(sorted_renamed_author, sorted_old_author)'''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "754:         change = True",
          "755:     return input_authors, change, renamed",
          "759: @login_required_if_no_ano",
          "760: @edit_required",
          "761: def edit_book(book_id):",
          "762:     modify_date = False",
          "764:     # create the function for sorting...",
          "765:     try:",
          "",
          "[Removed Lines]",
          "758: @EditBook.route(\"/admin/book/<int:book_id>\", methods=['GET', 'POST'])",
          "",
          "[Added Lines]",
          "741: @EditBook.route(\"/admin/book/<int:book_id>\", methods=['GET'])",
          "742: @login_required_if_no_ano",
          "743: @edit_required",
          "744: def show_edit_book(book_id):",
          "745:     return render_edit_book(book_id)",
          "748: @EditBook.route(\"/admin/book/<int:book_id>\", methods=['POST'])",
          "753:     edit_error = False",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "768:         log.error_or_exception(e)",
          "769:         calibre_db.session.rollback()",
          "775:     book = calibre_db.get_filtered_book(book_id, allow_show_archived=True)",
          "777:     # Book not found",
          "778:     if not book:",
          "779:         flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),",
          "780:               category=\"error\")",
          "781:         return redirect(url_for(\"web.index\"))",
          "787:     try:",
          "791:         edited_books_id = None",
          "794:         title_change = handle_title_on_edit(book, to_save[\"book_title\"])",
          "798:             edited_books_id = book.id",
          "799:             modify_date = True",
          "801:         if config.config_use_google_drive:",
          "802:             gdriveutils.updateGdriveCalibreFromLocal()",
          "853:             else:",
          "854:                 book.pubdate = db.Books.DEFAULT_PUBDATE",
          "869:         else:",
          "872:             return render_edit_book(book_id)",
          "873:     except ValueError as e:",
          "874:         calibre_db.session.rollback()",
          "875:         flash(str(e), category=\"error\")",
          "876:         return redirect(url_for('web.show_book', book_id=book.id))",
          "",
          "[Removed Lines]",
          "771:     # Show form",
          "772:     if request.method != 'POST':",
          "773:         return render_edit_book(book_id)",
          "783:     meta = upload_single_file(request, book, book_id)",
          "784:     if upload_cover(request, book) is True:",
          "785:         book.has_cover = 1",
          "786:         modify_date = True",
          "788:         to_save = request.form.to_dict()",
          "789:         merge_metadata(to_save, meta)",
          "790:         # Update book",
          "793:         # handle book title",
          "796:         input_authors, authorchange, renamed = handle_author_on_edit(book, to_save[\"author_name\"])",
          "797:         if authorchange or title_change:",
          "804:         error = \"\"",
          "805:         if edited_books_id:",
          "806:             error = helper.update_dir_structure(edited_books_id, config.config_calibre_dir, input_authors[0],",
          "807:                                                 renamed_author=renamed)",
          "809:         if not error:",
          "810:             if \"cover_url\" in to_save:",
          "811:                 if to_save[\"cover_url\"]:",
          "812:                     if not current_user.role_upload():",
          "813:                         calibre_db.session.rollback()",
          "814:                         return \"\", 403",
          "815:                     if to_save[\"cover_url\"].endswith('/static/generic_cover.jpg'):",
          "816:                         book.has_cover = 0",
          "817:                     else:",
          "818:                         result, error = helper.save_cover_from_url(to_save[\"cover_url\"], book.path)",
          "819:                         if result is True:",
          "820:                             book.has_cover = 1",
          "821:                             modify_date = True",
          "822:                         else:",
          "823:                             flash(error, category=\"error\")",
          "825:             # Add default series_index to book",
          "826:             modify_date |= edit_book_series_index(to_save[\"series_index\"], book)",
          "827:             # Handle book comments/description",
          "828:             modify_date |= edit_book_comments(Markup(to_save['description']).unescape(), book)",
          "829:             # Handle identifiers",
          "830:             input_identifiers = identifier_list(to_save, book)",
          "831:             modification, warning = modify_identifiers(input_identifiers, book.identifiers, calibre_db.session)",
          "832:             if warning:",
          "833:                 flash(_(\"Identifiers are not Case Sensitive, Overwriting Old Identifier\"), category=\"warning\")",
          "834:             modify_date |= modification",
          "835:             # Handle book tags",
          "836:             modify_date |= edit_book_tags(to_save['tags'], book)",
          "837:             # Handle book series",
          "838:             modify_date |= edit_book_series(to_save[\"series\"], book)",
          "839:             # handle book publisher",
          "840:             modify_date |= edit_book_publisher(to_save['publisher'], book)",
          "841:             # handle book languages",
          "842:             modify_date |= edit_book_languages(to_save['languages'], book)",
          "843:             # handle book ratings",
          "844:             modify_date |= edit_book_ratings(to_save, book)",
          "845:             # handle cc data",
          "846:             modify_date |= edit_all_cc_data(book_id, book, to_save)",
          "848:             if to_save[\"pubdate\"]:",
          "849:                 try:",
          "850:                     book.pubdate = datetime.strptime(to_save[\"pubdate\"], \"%Y-%m-%d\")",
          "851:                 except ValueError:",
          "852:                     book.pubdate = db.Books.DEFAULT_PUBDATE",
          "856:             if modify_date:",
          "857:                 book.last_modified = datetime.utcnow()",
          "858:                 kobo_sync_status.remove_synced_book(edited_books_id, all=True)",
          "860:             calibre_db.session.merge(book)",
          "861:             calibre_db.session.commit()",
          "862:             if config.config_use_google_drive:",
          "863:                 gdriveutils.updateGdriveCalibreFromLocal()",
          "864:             if \"detail_view\" in to_save:",
          "865:                 return redirect(url_for('web.show_book', book_id=book.id))",
          "866:             else:",
          "867:                 flash(_(\"Metadata successfully updated\"), category=\"success\")",
          "868:                 return render_edit_book(book_id)",
          "870:             calibre_db.session.rollback()",
          "871:             flash(error, category=\"error\")",
          "",
          "[Added Lines]",
          "769:     to_save = request.form.to_dict()",
          "772:         # Update folder of book on local disk",
          "774:         title_author_error = None",
          "775:         # handle book title change",
          "777:         # handle book author change",
          "778:         input_authors, author_change, renamed = handle_author_on_edit(book, to_save[\"author_name\"])",
          "779:         if author_change or title_change:",
          "782:             title_author_error = helper.update_dir_structure(edited_books_id,",
          "783:                                                              config.config_calibre_dir,",
          "784:                                                              input_authors[0],",
          "785:                                                              renamed_author=renamed)",
          "786:         if title_author_error:",
          "787:             flash(title_author_error, category=\"error\")",
          "788:             calibre_db.session.rollback()",
          "789:             book = calibre_db.get_filtered_book(book_id, allow_show_archived=True)",
          "791:         # handle upload other formats from local disk",
          "792:         meta = upload_single_file(request, book, book_id)",
          "793:         # only merge metadata if file was uploaded and no error occurred (meta equals not false or none)",
          "794:         if meta:",
          "795:             merge_metadata(to_save, meta)",
          "796:         # handle upload covers from local disk",
          "797:         cover_upload_success = upload_cover(request, book)",
          "798:         if cover_upload_success:",
          "799:             book.has_cover = 1",
          "800:             modify_date = True",
          "802:         # upload new covers or new file formats to google drive",
          "806:         if to_save.get(\"cover_url\", None):",
          "807:             if not current_user.role_upload():",
          "808:                 edit_error = True",
          "809:                 flash(_(u\"User has no rights to upload cover\"), category=\"error\")",
          "810:             if to_save[\"cover_url\"].endswith('/static/generic_cover.jpg'):",
          "811:                 book.has_cover = 0",
          "813:                 result, error = helper.save_cover_from_url(to_save[\"cover_url\"], book.path)",
          "814:                 if result is True:",
          "815:                     book.has_cover = 1",
          "816:                     modify_date = True",
          "817:                 else:",
          "818:                     flash(error, category=\"error\")",
          "820:         # Add default series_index to book",
          "821:         modify_date |= edit_book_series_index(to_save[\"series_index\"], book)",
          "822:         # Handle book comments/description",
          "823:         modify_date |= edit_book_comments(Markup(to_save['description']).unescape(), book)",
          "824:         # Handle identifiers",
          "825:         input_identifiers = identifier_list(to_save, book)",
          "826:         modification, warning = modify_identifiers(input_identifiers, book.identifiers, calibre_db.session)",
          "827:         if warning:",
          "828:             flash(_(\"Identifiers are not Case Sensitive, Overwriting Old Identifier\"), category=\"warning\")",
          "829:         modify_date |= modification",
          "830:         # Handle book tags",
          "831:         modify_date |= edit_book_tags(to_save['tags'], book)",
          "832:         # Handle book series",
          "833:         modify_date |= edit_book_series(to_save[\"series\"], book)",
          "834:         # handle book publisher",
          "835:         modify_date |= edit_book_publisher(to_save['publisher'], book)",
          "836:         # handle book languages",
          "837:         try:",
          "838:             modify_date |= edit_book_languages(to_save['languages'], book)",
          "839:         except ValueError as e:",
          "840:             flash(str(e), category=\"error\")",
          "841:             edit_error = True",
          "842:         # handle book ratings",
          "843:         modify_date |= edit_book_ratings(to_save, book)",
          "844:         # handle cc data",
          "845:         modify_date |= edit_all_cc_data(book_id, book, to_save)",
          "847:         if to_save.get(\"pubdate\", None):",
          "848:             try:",
          "849:                 book.pubdate = datetime.strptime(to_save[\"pubdate\"], \"%Y-%m-%d\")",
          "850:             except ValueError as e:",
          "852:                 flash(str(e), category=\"error\")",
          "853:                 edit_error = True",
          "854:         else:",
          "855:             book.pubdate = db.Books.DEFAULT_PUBDATE",
          "857:         if modify_date:",
          "858:             book.last_modified = datetime.utcnow()",
          "859:             kobo_sync_status.remove_synced_book(edited_books_id, all=True)",
          "861:         calibre_db.session.merge(book)",
          "862:         calibre_db.session.commit()",
          "863:         if config.config_use_google_drive:",
          "864:             gdriveutils.updateGdriveCalibreFromLocal()",
          "865:         if meta is not False \\",
          "866:             and edit_error is not True \\",
          "867:                 and title_author_error is not True \\",
          "868:                 and cover_upload_success is not False:",
          "869:             flash(_(\"Metadata successfully updated\"), category=\"success\")",
          "870:         if \"detail_view\" in to_save:",
          "871:             return redirect(url_for('web.show_book', book_id=book.id))",
          "875:         log.error_or_exception(\"Error: {}\".format(e))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "882:     except Exception as ex:",
          "883:         log.error_or_exception(ex)",
          "884:         calibre_db.session.rollback()",
          "886:         return redirect(url_for('web.show_book', book_id=book.id))",
          "889: def merge_metadata(to_save, meta):",
          "891:         to_save['author_name'] = ''",
          "893:         to_save['book_title'] = ''",
          "894:     for s_field, m_field in [",
          "895:             ('tags', 'tags'), ('author_name', 'author'), ('series', 'series'),",
          "",
          "[Removed Lines]",
          "885:         flash(_(\"Error editing book, please check logfile for details\"), category=\"error\")",
          "890:     if to_save['author_name'] == _(u'Unknown'):",
          "892:     if to_save['book_title'] == _(u'Unknown'):",
          "",
          "[Added Lines]",
          "887:         flash(_(\"Error editing book: {}\".format(ex)), category=\"error\")",
          "892:     if to_save.get('author_name', \"\") == _(u'Unknown'):",
          "894:     if to_save.get('book_title', \"\") == _(u'Unknown'):",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1118:                 if len(request.files.getlist(\"btn-upload\")) < 2:",
          "1119:                     if current_user.role_edit() or current_user.role_admin():",
          "1121:                         return Response(json.dumps(resp), mimetype='application/json')",
          "1122:                     else:",
          "1123:                         resp = {\"location\": url_for('web.show_book', book_id=book_id)}",
          "",
          "[Removed Lines]",
          "1120:                         resp = {\"location\": url_for('edit-book.edit_book', book_id=book_id)}",
          "",
          "[Added Lines]",
          "1122:                         resp = {\"location\": url_for('edit-book.show_edit_book', book_id=book_id)}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1140:     if (book_format_from is None) or (book_format_to is None):",
          "1141:         flash(_(u\"Source or destination format for conversion missing\"), category=\"error\")",
          "1144:     log.info('converting: book id: %s from: %s to: %s', book_id, book_format_from, book_format_to)",
          "1145:     rtn = helper.convert_book_format(book_id, config.config_calibre_dir, book_format_from.upper(),",
          "",
          "[Removed Lines]",
          "1142:         return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "1144:         return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1151:               category=\"success\")",
          "1152:     else:",
          "1153:         flash(_(u\"There was an error converting this book: %(res)s\", res=rtn), category=\"error\")",
          "1157: @EditBook.route(\"/ajax/getcustomenum/<int:c_id>\")",
          "",
          "[Removed Lines]",
          "1154:     return redirect(url_for('edit-book.edit_book', book_id=book_id))",
          "",
          "[Added Lines]",
          "1156:     return redirect(url_for('edit-book.show_edit_book', book_id=book_id))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1211:                            mimetype='application/json')",
          "1212:         elif param == 'title':",
          "1213:             sort_param = book.sort",
          "1218:         elif param == 'sort':",
          "1219:             book.sort = vals['value']",
          "1220:             ret = Response(json.dumps({'success': True, 'newValue':  book.sort}),",
          "",
          "[Removed Lines]",
          "1214:             handle_title_on_edit(book, vals.get('value', \"\"))",
          "1215:             helper.update_dir_structure(book.id, config.config_calibre_dir)",
          "1216:             ret = Response(json.dumps({'success': True, 'newValue':  book.title}),",
          "1217:                            mimetype='application/json')",
          "",
          "[Added Lines]",
          "1216:             if handle_title_on_edit(book, vals.get('value', \"\")):",
          "1217:                 rename_error = helper.update_dir_structure(book.id, config.config_calibre_dir)",
          "1218:                 if not rename_error:",
          "1219:                     ret = Response(json.dumps({'success': True, 'newValue':  book.title}),",
          "1220:                                    mimetype='application/json')",
          "1221:                 else:",
          "1222:                     ret = Response(json.dumps({'success': False,",
          "1223:                                                'msg': rename_error}),",
          "1224:                                    mimetype='application/json')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1225:                            mimetype='application/json')",
          "1226:         elif param == 'authors':",
          "1227:             input_authors, __, renamed = handle_author_on_edit(book, vals['value'], vals.get('checkA', None) == \"true\")",
          "1233:         elif param == 'is_archived':",
          "1234:             is_archived = change_archived_books(book.id, vals['value'] == \"True\",",
          "1235:                                                 message=\"Book {} archive bit set to: {}\".format(book.id, vals['value']))",
          "",
          "[Removed Lines]",
          "1228:             helper.update_dir_structure(book.id, config.config_calibre_dir, input_authors[0], renamed_author=renamed)",
          "1229:             ret = Response(json.dumps({",
          "1230:                 'success': True,",
          "1231:                 'newValue':  ' & '.join([author.replace('|', ',') for author in input_authors])}),",
          "1232:                 mimetype='application/json')",
          "",
          "[Added Lines]",
          "1235:             rename_error = helper.update_dir_structure(book.id, config.config_calibre_dir, input_authors[0],",
          "1236:                                                        renamed_author=renamed)",
          "1237:             if not rename_error:",
          "1238:                 ret = Response(json.dumps({",
          "1239:                     'success': True,",
          "1240:                     'newValue':  ' & '.join([author.replace('|', ',') for author in input_authors])}),",
          "1241:                     mimetype='application/json')",
          "1242:             else:",
          "1243:                 ret = Response(json.dumps({'success': False,",
          "1244:                                            'msg': rename_error}),",
          "1245:                                mimetype='application/json')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1356:                 author_names.append(authr.name.replace('|', ','))",
          "1358:             title_change = handle_title_on_edit(book, \" \".join(author_names))",
          "1361:                 edited_books_id = book.id",
          "1362:                 modify_date = True",
          "",
          "[Removed Lines]",
          "1359:             input_authors, authorchange, renamed = handle_author_on_edit(book, authors)",
          "1360:             if authorchange or title_change:",
          "",
          "[Added Lines]",
          "1372:             input_authors, author_change, renamed = handle_author_on_edit(book, authors)",
          "1373:             if author_change or title_change:",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1365:                 gdriveutils.updateGdriveCalibreFromLocal()",
          "1367:             if edited_books_id:",
          "1370:             if modify_date:",
          "1371:                 book.last_modified = datetime.utcnow()",
          "1372:             try:",
          "",
          "[Removed Lines]",
          "1368:                 helper.update_dir_structure(edited_books_id, config.config_calibre_dir, input_authors[0],",
          "1369:                                             renamed_author=renamed)",
          "",
          "[Added Lines]",
          "1381:                 # toDo: Handle error",
          "1382:                 edit_error = helper.update_dir_structure(edited_books_id, config.config_calibre_dir, input_authors[0],",
          "1383:                                                          renamed_author=renamed)",
          "",
          "---------------"
        ],
        "cps/helper.py||cps/helper.py": [
          "File: cps/helper.py -> cps/helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:                 new_cc = cc_class(value=read_status or 1, book=book_id)",
          "328:                 calibre_db.session.add(new_cc)",
          "329:                 calibre_db.session.commit()",
          "332:             return \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column)",
          "333:         except (OperationalError, InvalidRequestError) as ex:",
          "334:             calibre_db.session.rollback()",
          "",
          "[Removed Lines]",
          "330:         except (KeyError, AttributeError):",
          "331:             log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "",
          "[Added Lines]",
          "330:         except (KeyError, AttributeError, IndexError):",
          "331:             log.error(",
          "332:                 \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435:                         new_author_path = os.path.join(calibre_path, new_author_rename_dir)",
          "436:                         shutil.move(os.path.normcase(old_author_path), os.path.normcase(new_author_path))",
          "437:                     except OSError as ex:",
          "439:                         return _(\"Rename author from: '%(src)s' to '%(dest)s' failed with error: %(error)s\",",
          "440:                                  src=old_author_path, dest=new_author_path, error=str(ex))",
          "441:     else:",
          "",
          "[Removed Lines]",
          "438:                         log.error_or_exception(\"Rename author from: %s to %s: %s\", old_author_path, new_author_path, ex)",
          "",
          "[Added Lines]",
          "439:                         log.error(\"Rename author from: %s to %s: %s\", old_author_path, new_author_path, ex)",
          "440:                         log.debug(ex, exc_info=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446: # Moves files in file storage during author/title rename, or from temp dir to file storage",
          "447: def update_dir_structure_file(book_id, calibre_path, first_author, original_filepath, db_filename, renamed_author):",
          "448:     # get book database entry from id, if original path overwrite source with original_filepath",
          "450:     if original_filepath:",
          "451:         path = original_filepath",
          "452:     else:",
          "462:     if first_author:",
          "463:         if first_author.lower() in [r.lower() for r in renamed_author]:",
          "470:         error = move_files_on_change(calibre_path,",
          "474:                                      db_filename,",
          "475:                                      original_filepath,",
          "476:                                      path)",
          "",
          "[Removed Lines]",
          "449:     localbook = calibre_db.get_book(book_id)",
          "453:         path = os.path.join(calibre_path, localbook.path)",
          "455:     # Create (current) authordir and titledir from database",
          "456:     authordir = localbook.path.split('/')[0]",
          "457:     titledir = localbook.path.split('/')[1]",
          "459:     # Create new_authordir from parameter or from database",
          "460:     # Create new titledir from database and add id",
          "461:     new_authordir = rename_all_authors(first_author, renamed_author, calibre_path, localbook)",
          "464:             if os.path.isdir(os.path.join(calibre_path, new_authordir)):",
          "465:                 path = os.path.join(calibre_path, new_authordir, titledir)",
          "467:     new_titledir = get_valid_filename(localbook.title, chars=96) + \" (\" + str(book_id) + \")\"",
          "469:     if titledir != new_titledir or authordir != new_authordir or original_filepath:",
          "471:                                      new_authordir,",
          "472:                                      new_titledir,",
          "473:                                      localbook,",
          "",
          "[Added Lines]",
          "451:     local_book = calibre_db.get_book(book_id)",
          "455:         path = os.path.join(calibre_path, local_book.path)",
          "457:     # Create (current) author_dir and title_dir from database",
          "458:     author_dir = local_book.path.split('/')[0]",
          "459:     title_dir = local_book.path.split('/')[1]",
          "461:     # Create new_author_dir from parameter or from database",
          "462:     # Create new title_dir from database and add id",
          "463:     new_author_dir = rename_all_authors(first_author, renamed_author, calibre_path, local_book)",
          "466:             if os.path.isdir(os.path.join(calibre_path, new_author_dir)):",
          "467:                 path = os.path.join(calibre_path, new_author_dir, title_dir)",
          "469:     new_title_dir = get_valid_filename(local_book.title, chars=96) + \" (\" + str(book_id) + \")\"",
          "471:     if title_dir != new_title_dir or author_dir != new_author_dir or original_filepath:",
          "473:                                      new_author_dir,",
          "474:                                      new_title_dir,",
          "475:                                      local_book,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "478:             return error",
          "480:     # Rename all files from old names to new names",
          "484: def upload_new_file_gdrive(book_id, first_author, renamed_author, title, title_dir, original_filepath, filename_ext):",
          "",
          "[Removed Lines]",
          "481:     return rename_files_on_change(first_author, renamed_author, localbook, original_filepath, path, calibre_path)",
          "",
          "[Added Lines]",
          "483:     return rename_files_on_change(first_author, renamed_author, local_book, original_filepath, path, calibre_path)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "490:                                title_dir + \" (\" + str(book_id) + \")\")",
          "491:     book.path = gdrive_path.replace(\"\\\\\", \"/\")",
          "492:     gd.uploadFileToEbooksFolder(os.path.join(gdrive_path, file_name).replace(\"\\\\\", \"/\"), original_filepath)",
          "496: def update_dir_structure_gdrive(book_id, first_author, renamed_author):",
          "",
          "[Removed Lines]",
          "493:     return rename_files_on_change(first_author, renamed_author, localbook=book, gdrive=True)",
          "",
          "[Added Lines]",
          "495:     return rename_files_on_change(first_author, renamed_author, local_book=book, gdrive=True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "549:         # change location in database to new author/title path",
          "550:         localbook.path = os.path.join(new_authordir, new_titledir).replace('\\\\', '/')",
          "551:     except OSError as ex:",
          "553:         return _(\"Rename title from: '%(src)s' to '%(dest)s' failed with error: %(error)s\",",
          "554:                  src=path, dest=new_path, error=str(ex))",
          "555:     return False",
          "",
          "[Removed Lines]",
          "552:         log.error_or_exception(\"Rename title from: %s to %s: %s\", path, new_path, ex)",
          "",
          "[Added Lines]",
          "554:         log.error_or_exception(\"Rename title from {} to {} failed with error: {}\".format(path, new_path, ex))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "558: def rename_files_on_change(first_author,",
          "559:                            renamed_author,",
          "562:                            path=\"\",",
          "563:                            calibre_path=\"\",",
          "564:                            gdrive=False):",
          "",
          "[Removed Lines]",
          "560:                            localbook,",
          "561:                            orignal_filepath=\"\",",
          "",
          "[Added Lines]",
          "562:                            local_book,",
          "563:                            original_filepath=\"\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "566:     try:",
          "567:         clean_author_database(renamed_author, calibre_path, gdrive=gdrive)",
          "568:         if first_author and first_author not in renamed_author:",
          "571:             shutil.rmtree(os.path.dirname(path))",
          "572:     except (OSError, FileNotFoundError) as ex:",
          "575:     return False",
          "",
          "[Removed Lines]",
          "569:             clean_author_database([first_author], calibre_path, localbook, gdrive)",
          "570:         if not gdrive and not renamed_author and not orignal_filepath and len(os.listdir(os.path.dirname(path))) == 0:",
          "573:         log.error_or_exception(\"Error in rename file in path %s\", ex)",
          "574:         return _(\"Error in rename file in path: %(error)s\", error=str(ex))",
          "",
          "[Added Lines]",
          "571:             clean_author_database([first_author], calibre_path, local_book, gdrive)",
          "572:         if not gdrive and not renamed_author and not original_filepath and len(os.listdir(os.path.dirname(path))) == 0:",
          "575:         log.error_or_exception(\"Error in rename file in path {}\".format(ex))",
          "576:         return _(\"Error in rename file in path: {}\".format(str(ex)))",
          "",
          "---------------"
        ],
        "cps/render_template.py||cps/render_template.py": [
          "File: cps/render_template.py -> cps/render_template.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:             readBooks = calibre_db.session.query(db.cc_classes[config.config_read_column])\\",
          "111:                 .filter(db.cc_classes[config.config_read_column].value == True).all()",
          "112:             return frozenset([x.book for x in readBooks])",
          "115:             return []",
          "117: # Returns the template for rendering and includes the instance name",
          "",
          "[Removed Lines]",
          "113:         except (KeyError, AttributeError):",
          "114:             log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "",
          "[Added Lines]",
          "113:         except (KeyError, AttributeError, IndexError):",
          "114:             log.error(\"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------"
        ],
        "cps/templates/detail.html||cps/templates/detail.html": [
          "File: cps/templates/detail.html -> cps/templates/detail.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:       {% if g.user.role_edit() %}",
          "296:       <div class=\"btn-toolbar\" role=\"toolbar\">",
          "297:         <div class=\"btn-group\" role=\"group\" aria-label=\"Edit/Delete book\">",
          "299:         </div>",
          "300:       </div>",
          "301:       {% endif %}",
          "",
          "[Removed Lines]",
          "298:           <a href=\"{{ url_for('edit-book.edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>",
          "",
          "[Added Lines]",
          "298:           <a href=\"{{ url_for('edit-book.show_edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>",
          "",
          "---------------"
        ],
        "cps/ub.py||cps/ub.py": [
          "File: cps/ub.py -> cps/ub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     else:",
          "86:         log.error(\"No user id in session\")",
          "88: def delete_user_session(user_id, session_key):",
          "89:     try:",
          "90:         log.debug(\"Deleted session_key: \" + session_key)",
          "93:         session.commit()",
          "95:         session.rollback()",
          "99: def check_user_session(user_id, session_key):",
          "",
          "[Removed Lines]",
          "91:         session.query(User_Sessions).filter(User_Sessions.user_id==user_id,",
          "92:                                             User_Sessions.session_key==session_key).delete()",
          "94:     except (exc.OperationalError, exc.InvalidRequestError) as e:",
          "96:         log.exception(e)",
          "",
          "[Added Lines]",
          "93:         session.query(User_Sessions).filter(User_Sessions.user_id == user_id,",
          "94:                                             User_Sessions.session_key == session_key).delete()",
          "96:     except (exc.OperationalError, exc.InvalidRequestError) as ex:",
          "98:         log.exception(ex)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:             pass",
          "210:         try:",
          "211:             session.commit()",
          "213:             session.rollback()",
          "216:     def __repr__(self):",
          "217:         return '<User %r>' % self.name",
          "",
          "[Removed Lines]",
          "212:         except (exc.OperationalError, exc.InvalidRequestError):",
          "214:             # ToDo: Error message",
          "",
          "[Added Lines]",
          "214:         except (exc.OperationalError, exc.InvalidRequestError) as e:",
          "216:             log.error_or_exception(e)",
          "",
          "---------------"
        ],
        "cps/web.py||cps/web.py": [
          "File: cps/web.py -> cps/web.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     csp += ''.join([' ' + host for host in config.config_trustedhosts.strip().split(',')])",
          "88:     csp += \" 'unsafe-inline' 'unsafe-eval'; font-src 'self' data:; img-src 'self' data:\"",
          "89:     resp.headers['Content-Security-Policy'] = csp",
          "91:         resp.headers['Content-Security-Policy'] += \" *\"",
          "92:     elif request.endpoint == \"web.read_book\":",
          "93:         resp.headers['Content-Security-Policy'] += \" blob:;style-src-elem 'self' blob: 'unsafe-inline';\"",
          "",
          "[Removed Lines]",
          "90:     if request.endpoint == \"edit-book.edit_book\" or config.config_use_google_drive:",
          "",
          "[Added Lines]",
          "90:     if request.endpoint == \"edit-book.show_edit_book\" or config.config_use_google_drive:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:                                                                     db.Books.id == db.books_series_link.c.book,",
          "647:                                                                     db.Series,",
          "648:                                                                     db.cc_classes[config.config_read_column])",
          "651:             if not as_xml:",
          "652:                 flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",",
          "653:                         column=config.config_read_column),",
          "",
          "[Removed Lines]",
          "649:         except (KeyError, AttributeError):",
          "650:             log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "",
          "[Added Lines]",
          "649:         except (KeyError, AttributeError, IndexError):",
          "650:             log.error(\"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "826:                     books = (calibre_db.session.query(db.Books, read_column.value, ub.ArchivedBook.is_archived)",
          "827:                              .select_from(db.Books)",
          "828:                              .outerjoin(read_column, read_column.book == db.Books.id))",
          "831:                     # Skip linking read column and return None instead of read status",
          "832:                     books = calibre_db.session.query(db.Books, None, ub.ArchivedBook.is_archived)",
          "833:             books = (books.outerjoin(ub.ArchivedBook, and_(db.Books.id == ub.ArchivedBook.book_id,",
          "",
          "[Removed Lines]",
          "829:                 except (KeyError, AttributeError):",
          "830:                     log.error(\"Custom Column No.%d is not existing in calibre database\", read_column)",
          "",
          "[Added Lines]",
          "829:                 except (KeyError, AttributeError, IndexError):",
          "830:                     log.error(",
          "831:                         \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1139:                 else:",
          "1140:                     q = q.join(db.cc_classes[config.config_read_column], isouter=True) \\",
          "1141:                         .filter(coalesce(db.cc_classes[config.config_read_column].value, False) != True)",
          "1144:                 flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",",
          "1145:                         column=config.config_read_column),",
          "1146:                       category=\"error\")",
          "",
          "[Removed Lines]",
          "1142:             except (KeyError, AttributeError):",
          "1143:                 log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "",
          "[Added Lines]",
          "1143:             except (KeyError, AttributeError, IndexError):",
          "1144:                 log.error(",
          "1145:                     \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1262:             query = (calibre_db.session.query(db.Books, ub.ArchivedBook.is_archived, read_column.value)",
          "1263:                      .select_from(db.Books)",
          "1264:                      .outerjoin(read_column, read_column.book == db.Books.id))",
          "1267:             # Skip linking read column",
          "1268:             query = calibre_db.session.query(db.Books, ub.ArchivedBook.is_archived, None)",
          "1269:     query = query.outerjoin(ub.ArchivedBook, and_(db.Books.id == ub.ArchivedBook.book_id,",
          "",
          "[Removed Lines]",
          "1265:         except (KeyError, AttributeError):",
          "1266:             log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)",
          "",
          "[Added Lines]",
          "1267:         except (KeyError, AttributeError, IndexError):",
          "1268:             log.error(\"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column))",
          "",
          "---------------"
        ]
      }
    }
  ]
}