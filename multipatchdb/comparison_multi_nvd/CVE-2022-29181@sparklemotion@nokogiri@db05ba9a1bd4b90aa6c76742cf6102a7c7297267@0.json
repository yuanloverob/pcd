{
  "cve_id": "CVE-2022-29181",
  "cve_desc": "Nokogiri is an open source XML and HTML library for Ruby. Nokogiri prior to version 1.13.6 does not type-check all inputs into the XML and HTML4 SAX parsers, allowing specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory. Version 1.13.6 contains a patch for this issue. As a workaround, ensure the untrusted input is a `String` by calling `#to_s` or equivalent.",
  "repo": "sparklemotion/nokogiri",
  "patch_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "patch_info": {
    "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
    "repo": "sparklemotion/nokogiri",
    "commit_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
    "files": [
      "CHANGELOG.md",
      "ext/java/nokogiri/Html4SaxParserContext.java",
      "ext/java/nokogiri/XmlSaxParserContext.java",
      "ext/java/nokogiri/internals/ParserContext.java",
      "ext/nokogiri/html4_sax_parser_context.c",
      "ext/nokogiri/xml_sax_parser_context.c",
      "lib/nokogiri/html4/sax/parser.rb",
      "test/html4/sax/test_parser.rb",
      "test/html4/sax/test_parser_context.rb",
      "test/xml/sax/test_parser.rb",
      "test/xml/sax/test_parser_context.rb"
    ],
    "message": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
    "before_after_code_files": [
      "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java",
      "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java",
      "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java",
      "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c",
      "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c",
      "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb",
      "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb",
      "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb",
      "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb",
      "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb"
    ]
  },
  "patch_diff": {
    "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java": [
      "File: ext/java/nokogiri/Html4SaxParserContext.java -> ext/java/nokogiri/Html4SaxParserContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "231:              IRubyObject data,",
      "232:              IRubyObject encoding)",
      "233:   {",
      "234:     Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);",
      "235:     ctx.setInputSourceFile(context, data);",
      "236:     String javaEncoding = findEncodingName(context, encoding);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "234:     if (!(data instanceof RubyString)) {",
      "235:       throw context.getRuntime().newTypeError(\"data must be kind_of String\");",
      "236:     }",
      "237:     if (!(encoding instanceof RubyString)) {",
      "238:       throw context.getRuntime().newTypeError(\"data must be kind_of String\");",
      "239:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "247:            IRubyObject data,",
      "248:            IRubyObject encoding)",
      "249:   {",
      "250:     Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);",
      "251:     ctx.setIOInputSource(context, data, context.nil);",
      "252:     String javaEncoding = findEncodingName(context, encoding);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "257:     if (!(encoding instanceof RubyFixnum)) {",
      "258:       throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");",
      "259:     }",
      "",
      "---------------"
    ],
    "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java": [
      "File: ext/java/nokogiri/XmlSaxParserContext.java -> ext/java/nokogiri/XmlSaxParserContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "131:   parse_io(ThreadContext context,",
      "132:            IRubyObject klazz,",
      "133:            IRubyObject data,",
      "135:   {",
      "137:     final Ruby runtime = context.runtime;",
      "138:     XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);",
      "139:     ctx.initialize(runtime);",
      "",
      "[Removed Lines]",
      "134:            IRubyObject enc)",
      "",
      "[Added Lines]",
      "134:            IRubyObject encoding)",
      "137:     if (!(encoding instanceof RubyFixnum)) {",
      "138:       throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");",
      "139:     }",
      "",
      "---------------"
    ],
    "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java": [
      "File: ext/java/nokogiri/internals/ParserContext.java -> ext/java/nokogiri/internals/ParserContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     source = new InputSource();",
      "61:     ParserContext.setUrl(context, source, url);",
      "63:     source.setByteStream(new IOInputStream(data));",
      "64:     if (java_encoding != null) {",
      "65:       source.setEncoding(java_encoding);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     Ruby ruby = context.getRuntime();",
      "65:     if (!(data.respondsTo(\"read\"))) {",
      "66:       throw ruby.newTypeError(\"must respond to :read\");",
      "67:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     Ruby ruby = context.getRuntime();",
      "77:     if (!(data instanceof RubyString)) {",
      "79:     }",
      "81:     RubyString stringData = (RubyString) data;",
      "",
      "[Removed Lines]",
      "78:       throw ruby.newArgumentError(\"must be kind_of String\");",
      "",
      "[Added Lines]",
      "84:       throw ruby.newTypeError(\"must be kind_of String\");",
      "",
      "---------------"
    ],
    "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c": [
      "File: ext/nokogiri/html4_sax_parser_context.c -> ext/nokogiri/html4_sax_parser_context.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: {",
      "20:   htmlParserCtxtPtr ctxt;",
      "25:   if (!(int)RSTRING_LEN(data)) {",
      "26:     rb_raise(rb_eRuntimeError, \"data cannot be empty\");",
      "27:   }",
      "",
      "[Removed Lines]",
      "22:   if (NIL_P(data)) {",
      "23:     rb_raise(rb_eArgError, \"data cannot be nil\");",
      "24:   }",
      "",
      "[Added Lines]",
      "22:   Check_Type(data, T_STRING);",
      "",
      "---------------"
    ],
    "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c": [
      "File: ext/nokogiri/xml_sax_parser_context.c -> ext/nokogiri/xml_sax_parser_context.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: VALUE cNokogiriXmlSaxParserContext ;",
      "5: static void",
      "6: deallocate(xmlParserCtxtPtr ctxt)",
      "7: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: static ID id_read;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:   xmlParserCtxtPtr ctxt;",
      "27:   xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);",
      "29:   ctxt = xmlCreateIOParserCtxt(NULL, NULL,",
      "30:                                (xmlInputReadCallback)noko_io_read,",
      "31:                                (xmlInputCloseCallback)noko_io_close,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31:   if (!rb_respond_to(io, id_read)) {",
      "32:     rb_raise(rb_eTypeError, \"argument expected to respond to :read\");",
      "33:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "62: {",
      "63:   xmlParserCtxtPtr ctxt;",
      "68:   if (!(int)RSTRING_LEN(data)) {",
      "69:     rb_raise(rb_eRuntimeError, \"data cannot be empty\");",
      "70:   }",
      "",
      "[Removed Lines]",
      "65:   if (NIL_P(data)) {",
      "66:     rb_raise(rb_eArgError, \"data cannot be nil\");",
      "67:   }",
      "",
      "[Added Lines]",
      "71:   Check_Type(data, T_STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "278:   rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);",
      "279:   rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);",
      "280:   rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);",
      "281: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287:   id_read = rb_intern(\"read\");",
      "",
      "---------------"
    ],
    "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb": [
      "File: lib/nokogiri/html4/sax/parser.rb -> lib/nokogiri/html4/sax/parser.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "28:         ###",
      "29:         # Parse html stored in +data+ using +encoding+",
      "30:         def parse_memory(data, encoding = \"UTF-8\")",
      "32:           return if data.empty?",
      "34:           ctx = ParserContext.memory(data, encoding)",
      "",
      "[Removed Lines]",
      "31:           raise ArgumentError unless data",
      "",
      "[Added Lines]",
      "31:           raise TypeError unless String === data",
      "",
      "---------------"
    ],
    "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb": [
      "File: test/html4/sax/test_parser.rb -> test/html4/sax/test_parser.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:         end",
      "56:         def test_parse_memory_nil",
      "58:             @parser.parse_memory(nil)",
      "59:           end",
      "60:         end",
      "",
      "[Removed Lines]",
      "57:           assert_raises(ArgumentError) do",
      "",
      "[Added Lines]",
      "57:           assert_raises(TypeError) do",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "161:         def test_empty_processing_instruction",
      "162:           @parser.parse_memory(\"<strong>this will segfault<?strong>\")",
      "163:         end",
      "164:       end",
      "165:     end",
      "166:   end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "165:         it \"handles invalid types gracefully\" do",
      "166:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse(0xcafecafe) }",
      "167:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_memory(0xcafecafe) }",
      "168:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_io(0xcafecafe) }",
      "169:         end",
      "",
      "---------------"
    ],
    "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb": [
      "File: test/html4/sax/test_parser_context.rb -> test/html4/sax/test_parser_context.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:           ctx.parse_with(parser)",
      "41:           # end",
      "42:         end",
      "43:       end",
      "44:     end",
      "45:   end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:         def test_graceful_handling_of_invalid_types",
      "45:           assert_raises(TypeError) { ParserContext.new(0xcafecafe) }",
      "46:           assert_raises(TypeError) { ParserContext.memory(0xcafecafe, \"UTF-8\") }",
      "47:           assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }",
      "48:           assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }",
      "49:           assert_raises(TypeError) { ParserContext.file(0xcafecafe, \"UTF-8\") }",
      "50:           assert_raises(TypeError) { ParserContext.file(\"path/to/file\", 0xcafecafe) }",
      "51:         end",
      "",
      "---------------"
    ],
    "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb": [
      "File: test/xml/sax/test_parser.rb -> test/xml/sax/test_parser.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:           end",
      "74:         end",
      "76:         it :test_namespace_declaration_order_is_saved do",
      "77:           parser.parse(<<~EOF)",
      "78:             <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:         it \"handles invalid types gracefully\" do",
      "77:           assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse(0xcafecafe) }",
      "78:           assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_memory(0xcafecafe) }",
      "79:           assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_io(0xcafecafe) }",
      "80:         end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "263:         end",
      "265:         it :test_render_parse_nil_param do",
      "267:         end",
      "269:         it :test_bad_encoding_args do",
      "",
      "[Removed Lines]",
      "266:           assert_raises(ArgumentError) { parser.parse_memory(nil) }",
      "",
      "[Added Lines]",
      "272:           assert_raises(TypeError) { parser.parse_memory(nil) }",
      "",
      "---------------"
    ],
    "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb": [
      "File: test/xml/sax/test_parser_context.rb -> test/xml/sax/test_parser_context.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:           assert(pc.recovery)",
      "81:         end",
      "83:         def test_from_io",
      "84:           ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")",
      "85:           assert(ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83:         def test_graceful_handling_of_invalid_types",
      "84:           assert_raises(TypeError) { ParserContext.new(0xcafecafe) }",
      "85:           assert_raises(TypeError) { ParserContext.memory(0xcafecafe) }",
      "86:           assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }",
      "87:           assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }",
      "88:         end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "83cc451c3f29df397caa890afc3b714eae6ab8f7",
      "candidate_info": {
        "commit_hash": "83cc451c3f29df397caa890afc3b714eae6ab8f7",
        "repo": "sparklemotion/nokogiri",
        "commit_url": "https://github.com/sparklemotion/nokogiri/commit/83cc451c3f29df397caa890afc3b714eae6ab8f7",
        "files": [
          "ext/java/nokogiri/Html4SaxParserContext.java",
          "ext/java/nokogiri/XmlSaxParserContext.java",
          "ext/java/nokogiri/internals/ParserContext.java",
          "ext/nokogiri/html4_sax_parser_context.c",
          "ext/nokogiri/xml_sax_parser_context.c",
          "lib/nokogiri/html4/sax/parser.rb",
          "test/html4/sax/test_parser.rb",
          "test/html4/sax/test_parser_context.rb",
          "test/xml/sax/test_parser.rb",
          "test/xml/sax/test_parser_context.rb"
        ],
        "message": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
        "before_after_code_files": [
          "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java",
          "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java",
          "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java",
          "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c",
          "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c",
          "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb",
          "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb",
          "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb",
          "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb",
          "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java",
            "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java",
            "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java",
            "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c",
            "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c",
            "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb",
            "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb",
            "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb",
            "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb",
            "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb"
          ],
          "candidate": [
            "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java",
            "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java",
            "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java",
            "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c",
            "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c",
            "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb",
            "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb",
            "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb",
            "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb",
            "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb"
          ]
        }
      },
      "candidate_diff": {
        "ext/java/nokogiri/Html4SaxParserContext.java||ext/java/nokogiri/Html4SaxParserContext.java": [
          "File: ext/java/nokogiri/Html4SaxParserContext.java -> ext/java/nokogiri/Html4SaxParserContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:              IRubyObject data,",
          "232:              IRubyObject encoding)",
          "233:   {",
          "234:     Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);",
          "235:     ctx.setInputSourceFile(context, data);",
          "236:     String javaEncoding = findEncodingName(context, encoding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:     if (!(data instanceof RubyString)) {",
          "235:       throw context.getRuntime().newTypeError(\"data must be kind_of String\");",
          "236:     }",
          "237:     if (!(encoding instanceof RubyString)) {",
          "238:       throw context.getRuntime().newTypeError(\"data must be kind_of String\");",
          "239:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:            IRubyObject data,",
          "248:            IRubyObject encoding)",
          "249:   {",
          "250:     Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);",
          "251:     ctx.setIOInputSource(context, data, context.nil);",
          "252:     String javaEncoding = findEncodingName(context, encoding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:     if (!(encoding instanceof RubyFixnum)) {",
          "258:       throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");",
          "259:     }",
          "",
          "---------------"
        ],
        "ext/java/nokogiri/XmlSaxParserContext.java||ext/java/nokogiri/XmlSaxParserContext.java": [
          "File: ext/java/nokogiri/XmlSaxParserContext.java -> ext/java/nokogiri/XmlSaxParserContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   parse_io(ThreadContext context,",
          "131:            IRubyObject klazz,",
          "132:            IRubyObject data,",
          "134:   {",
          "136:     final Ruby runtime = context.runtime;",
          "137:     XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);",
          "138:     ctx.initialize(runtime);",
          "",
          "[Removed Lines]",
          "133:            IRubyObject enc)",
          "",
          "[Added Lines]",
          "133:            IRubyObject encoding)",
          "136:     if (!(encoding instanceof RubyFixnum)) {",
          "137:       throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");",
          "138:     }",
          "",
          "---------------"
        ],
        "ext/java/nokogiri/internals/ParserContext.java||ext/java/nokogiri/internals/ParserContext.java": [
          "File: ext/java/nokogiri/internals/ParserContext.java -> ext/java/nokogiri/internals/ParserContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     source = new InputSource();",
          "59:     ParserContext.setUrl(context, source, url);",
          "61:     source.setByteStream(new IOInputStream(data));",
          "62:     if (java_encoding != null) {",
          "63:       source.setEncoding(java_encoding);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     Ruby ruby = context.getRuntime();",
          "63:     if (!(data.respondsTo(\"read\"))) {",
          "64:       throw ruby.newTypeError(\"must respond to :read\");",
          "65:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     Ruby ruby = context.getRuntime();",
          "75:     if (!(data instanceof RubyString)) {",
          "77:     }",
          "79:     RubyString stringData = (RubyString) data;",
          "",
          "[Removed Lines]",
          "76:       throw ruby.newArgumentError(\"must be kind_of String\");",
          "",
          "[Added Lines]",
          "82:       throw ruby.newTypeError(\"must be kind_of String\");",
          "",
          "---------------"
        ],
        "ext/nokogiri/html4_sax_parser_context.c||ext/nokogiri/html4_sax_parser_context.c": [
          "File: ext/nokogiri/html4_sax_parser_context.c -> ext/nokogiri/html4_sax_parser_context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: {",
          "20:   htmlParserCtxtPtr ctxt;",
          "25:   if (!(int)RSTRING_LEN(data)) {",
          "26:     rb_raise(rb_eRuntimeError, \"data cannot be empty\");",
          "27:   }",
          "",
          "[Removed Lines]",
          "22:   if (NIL_P(data)) {",
          "23:     rb_raise(rb_eArgError, \"data cannot be nil\");",
          "24:   }",
          "",
          "[Added Lines]",
          "22:   Check_Type(data, T_STRING);",
          "",
          "---------------"
        ],
        "ext/nokogiri/xml_sax_parser_context.c||ext/nokogiri/xml_sax_parser_context.c": [
          "File: ext/nokogiri/xml_sax_parser_context.c -> ext/nokogiri/xml_sax_parser_context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: VALUE cNokogiriXmlSaxParserContext ;",
          "5: static void",
          "6: deallocate(xmlParserCtxtPtr ctxt)",
          "7: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: static ID id_read;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   xmlParserCtxtPtr ctxt;",
          "27:   xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);",
          "29:   ctxt = xmlCreateIOParserCtxt(NULL, NULL,",
          "30:                                (xmlInputReadCallback)noko_io_read,",
          "31:                                (xmlInputCloseCallback)noko_io_close,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   if (!rb_respond_to(io, id_read)) {",
          "32:     rb_raise(rb_eTypeError, \"argument expected to respond to :read\");",
          "33:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: {",
          "63:   xmlParserCtxtPtr ctxt;",
          "68:   if (!(int)RSTRING_LEN(data)) {",
          "69:     rb_raise(rb_eRuntimeError, \"data cannot be empty\");",
          "70:   }",
          "",
          "[Removed Lines]",
          "65:   if (NIL_P(data)) {",
          "66:     rb_raise(rb_eArgError, \"data cannot be nil\");",
          "67:   }",
          "",
          "[Added Lines]",
          "71:   Check_Type(data, T_STRING);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:   rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);",
          "279:   rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);",
          "280:   rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);",
          "281: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:   id_read = rb_intern(\"read\");",
          "",
          "---------------"
        ],
        "lib/nokogiri/html4/sax/parser.rb||lib/nokogiri/html4/sax/parser.rb": [
          "File: lib/nokogiri/html4/sax/parser.rb -> lib/nokogiri/html4/sax/parser.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:         ###",
          "29:         # Parse html stored in +data+ using +encoding+",
          "30:         def parse_memory(data, encoding = \"UTF-8\")",
          "32:           return if data.empty?",
          "34:           ctx = ParserContext.memory(data, encoding)",
          "",
          "[Removed Lines]",
          "31:           raise ArgumentError unless data",
          "",
          "[Added Lines]",
          "31:           raise TypeError unless String === data",
          "",
          "---------------"
        ],
        "test/html4/sax/test_parser.rb||test/html4/sax/test_parser.rb": [
          "File: test/html4/sax/test_parser.rb -> test/html4/sax/test_parser.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         end",
          "56:         def test_parse_memory_nil",
          "58:             @parser.parse_memory(nil)",
          "59:           end",
          "60:         end",
          "",
          "[Removed Lines]",
          "57:           assert_raises(ArgumentError) do",
          "",
          "[Added Lines]",
          "57:           assert_raises(TypeError) do",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         def test_empty_processing_instruction",
          "162:           @parser.parse_memory(\"<strong>this will segfault<?strong>\")",
          "163:         end",
          "164:       end",
          "165:     end",
          "166:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:         it \"handles invalid types gracefully\" do",
          "166:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse(0xcafecafe) }",
          "167:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_memory(0xcafecafe) }",
          "168:           assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_io(0xcafecafe) }",
          "169:         end",
          "",
          "---------------"
        ],
        "test/html4/sax/test_parser_context.rb||test/html4/sax/test_parser_context.rb": [
          "File: test/html4/sax/test_parser_context.rb -> test/html4/sax/test_parser_context.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:           ctx.parse_with(parser)",
          "41:           # end",
          "42:         end",
          "43:       end",
          "44:     end",
          "45:   end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:         def test_graceful_handling_of_invalid_types",
          "45:           assert_raises(TypeError) { ParserContext.new(0xcafecafe) }",
          "46:           assert_raises(TypeError) { ParserContext.memory(0xcafecafe, \"UTF-8\") }",
          "47:           assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }",
          "48:           assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }",
          "49:           assert_raises(TypeError) { ParserContext.file(0xcafecafe, \"UTF-8\") }",
          "50:           assert_raises(TypeError) { ParserContext.file(\"path/to/file\", 0xcafecafe) }",
          "51:         end",
          "",
          "---------------"
        ],
        "test/xml/sax/test_parser.rb||test/xml/sax/test_parser.rb": [
          "File: test/xml/sax/test_parser.rb -> test/xml/sax/test_parser.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:       end",
          "72:     end",
          "74:     it :test_namespace_declaration_order_is_saved do",
          "75:       parser.parse(<<~EOF)",
          "76:         <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     it \"handles invalid types gracefully\" do",
          "75:       assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse(0xcafecafe) }",
          "76:       assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_memory(0xcafecafe) }",
          "77:       assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_io(0xcafecafe) }",
          "78:     end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:     end",
          "263:     it :test_render_parse_nil_param do",
          "265:     end",
          "267:     it :test_bad_encoding_args do",
          "",
          "[Removed Lines]",
          "264:       assert_raises(ArgumentError) { parser.parse_memory(nil) }",
          "",
          "[Added Lines]",
          "270:       assert_raises(TypeError) { parser.parse_memory(nil) }",
          "",
          "---------------"
        ],
        "test/xml/sax/test_parser_context.rb||test/xml/sax/test_parser_context.rb": [
          "File: test/xml/sax/test_parser_context.rb -> test/xml/sax/test_parser_context.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:           assert(pc.recovery)",
          "81:         end",
          "83:         def test_from_io",
          "84:           ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")",
          "85:           assert(ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         def test_graceful_handling_of_invalid_types",
          "84:           assert_raises(TypeError) { ParserContext.new(0xcafecafe) }",
          "85:           assert_raises(TypeError) { ParserContext.memory(0xcafecafe) }",
          "86:           assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }",
          "87:           assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }",
          "88:         end",
          "",
          "---------------"
        ]
      }
    }
  ]
}