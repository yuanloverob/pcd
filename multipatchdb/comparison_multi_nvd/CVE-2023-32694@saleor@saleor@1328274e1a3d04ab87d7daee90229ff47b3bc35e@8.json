{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af8b744e95afeac871ff9691ec35c8f2b2abca81",
      "candidate_info": {
        "commit_hash": "af8b744e95afeac871ff9691ec35c8f2b2abca81",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/af8b744e95afeac871ff9691ec35c8f2b2abca81",
        "files": [
          "saleor/checkout/calculations.py",
          "saleor/core/tests/test_url.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Apply changes after review",
        "before_after_code_files": [
          "saleor/checkout/calculations.py||saleor/checkout/calculations.py",
          "saleor/core/tests/test_url.py||saleor/core/tests/test_url.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/test_utils.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/calculations.py||saleor/checkout/calculations.py": [
          "File: saleor/checkout/calculations.py -> saleor/checkout/calculations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     return quantize_price(calculated_checkout_subtotal, checkout.currency)",
          "46:     checkout: \"Checkout\", discounts: Optional[Iterable[DiscountInfo]] = None",
          "47: ) -> \"TaxedMoney\":",
          "48:     total = (",
          "",
          "[Removed Lines]",
          "45: def calculate_checkout_total(",
          "",
          "[Added Lines]",
          "45: def calculate_checkout_total_with_gift_cards(",
          "",
          "---------------"
        ],
        "saleor/core/tests/test_url.py||saleor/core/tests/test_url.py": [
          "File: saleor/core/tests/test_url.py -> saleor/core/tests/test_url.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     redirect_url = \"https://www.example.com\"",
          "8:     params = urlencode({\"param1\": \"abc\", \"param2\": \"xyz\"})",
          "9:     result = prepare_url(params, redirect_url)",
          "",
          "[Removed Lines]",
          "10:     assert result == \"https://www.example.com?param1=abc&param2=xyz\"",
          "",
          "[Added Lines]",
          "10:     assert result == f\"{redirect_url}?param1=abc&param2=xyz\"",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from ...account.error_codes import AccountErrorCode",
          "10: from ...checkout import models",
          "12: from ...checkout.error_codes import CheckoutErrorCode",
          "13: from ...checkout.utils import (",
          "14:     abort_order_data,",
          "",
          "[Removed Lines]",
          "11: from ...checkout.calculations import calculate_checkout_total",
          "",
          "[Added Lines]",
          "11: from ...checkout.calculations import calculate_checkout_total_with_gift_cards",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:     @classmethod",
          "778:     def validate_payment_amount(cls, discounts, payment, checkout):",
          "780:             gateway.payment_refund_or_void(payment)",
          "781:             raise ValidationError(",
          "782:                 \"Payment does not cover all checkout value.\",",
          "",
          "[Removed Lines]",
          "779:         if payment.total != calculate_checkout_total(checkout, discounts).gross.amount:",
          "",
          "[Added Lines]",
          "779:         if (",
          "780:             payment.total",
          "781:             != calculate_checkout_total_with_gift_cards(",
          "782:                 checkout, discounts",
          "783:             ).gross.amount",
          "784:         ):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "875:         if txn.customer_id and user.is_authenticated:",
          "876:             store_customer_id(user, payment.gateway, txn.customer_id)",
          "880:         order = None",
          "882:         if not txn.action_required:",
          "",
          "[Removed Lines]",
          "878:         confirmation_needed = False",
          "879:         confirmation_data = {}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "890:             # remove checkout after order is successfully paid",
          "891:             checkout.delete()",
          "899:         return CheckoutComplete(",
          "900:             order=order,",
          "903:         )",
          "",
          "[Removed Lines]",
          "893:         else:",
          "894:             # If gateway returns information that additional steps are required we need",
          "895:             # to inform the frontend and pass all required data",
          "896:             confirmation_needed = True",
          "897:             confirmation_data = txn.action_required_data",
          "901:             confirmation_needed=confirmation_needed,",
          "902:             confirmation_data=confirmation_data,",
          "",
          "[Added Lines]",
          "896:         # If gateway returns information that additional steps are required we need",
          "897:         # to inform the frontend and pass all required data",
          "900:             confirmation_needed=txn.action_required,",
          "901:             confirmation_data=txn.action_required_data if txn.action_required else {},",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout.py||saleor/graphql/checkout/tests/test_checkout.py": [
          "File: saleor/graphql/checkout/tests/test_checkout.py -> saleor/graphql/checkout/tests/test_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:     checkout_line_quantity = checkout_line.quantity",
          "1709:     checkout_line_variant = checkout_line.variant",
          "1712:     payment = payment_dummy",
          "1713:     payment.is_active = True",
          "1714:     payment.order = None",
          "",
          "[Removed Lines]",
          "1711:     total = calculations.calculate_checkout_total(checkout=checkout)",
          "",
          "[Added Lines]",
          "1711:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1911:     checkout.store_value_in_private_metadata(items={\"accepted\": \"false\"})",
          "1912:     checkout.save()",
          "1915:     payment = payment_dummy_credit_card",
          "1916:     payment.is_active = True",
          "1917:     payment.order = None",
          "",
          "[Removed Lines]",
          "1914:     total = calculations.calculate_checkout_total(checkout=checkout)",
          "",
          "[Added Lines]",
          "1914:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2331:     checkout_line_quantity = checkout_line.quantity",
          "2332:     checkout_line_variant = checkout_line.variant",
          "2335:     payment = payment_dummy",
          "2336:     payment.is_active = True",
          "2337:     payment.order = None",
          "",
          "[Removed Lines]",
          "2334:     total = calculations.calculate_checkout_total(checkout=checkout)",
          "",
          "[Added Lines]",
          "2334:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from django.conf import settings",
          "3: from django.core.exceptions import ValidationError",
          "6: from ...checkout.utils import cancel_active_payments",
          "7: from ...core.permissions import OrderPermissions",
          "8: from ...core.utils import get_client_ip",
          "",
          "[Removed Lines]",
          "5: from ...checkout.calculations import calculate_checkout_total",
          "",
          "[Added Lines]",
          "5: from ...checkout.calculations import calculate_checkout_total_with_gift_cards",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:         cls.validate_token(info.context.plugins, gateway, data)",
          "156:         cls.validate_return_url(data)",
          "159:         amount = data.get(\"amount\", checkout_total.gross.amount)",
          "160:         clean_checkout_shipping(",
          "161:             checkout, list(checkout), info.context.discounts, PaymentErrorCode",
          "",
          "[Removed Lines]",
          "158:         checkout_total = calculate_checkout_total(checkout, info.context.discounts)",
          "",
          "[Added Lines]",
          "158:         checkout_total = calculate_checkout_total_with_gift_cards(",
          "159:             checkout, info.context.discounts",
          "160:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         \"Notification user\": {",
          "144:             \"type\": ConfigurationTypeField.STRING,",
          "145:             \"help_text\": (",
          "147:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "148:                 \"set-up-notifications-in-your-customer-area \"",
          "149:                 \"The Saleor webhook url is \"",
          "",
          "[Removed Lines]",
          "146:                 \"Base User provided on the Adyen side for authenticate incoming \"",
          "",
          "[Added Lines]",
          "146:                 \"Base User provided on the Adyen side to authenticate incoming \"",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/test_utils.py": [
          "File: saleor/payment/gateways/adyen/tests/test_utils.py -> saleor/payment/gateways/adyen/tests/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from .... import PaymentError",
          "10: from ..utils import (",
          "11:     append_klarna_data,",
          "14:     get_shopper_locale_value,",
          "15:     request_data_for_gateway_config,",
          "16:     request_data_for_payment,",
          "17:     update_payment_with_action_required_data,",
          "18: )",
          "",
          "[Removed Lines]",
          "12:     convert_adyen_price_format,",
          "13:     get_price_amount,",
          "",
          "[Added Lines]",
          "12:     from_adyen_price,",
          "16:     to_adyen_price,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     result = append_klarna_data(dummy_payment_data, payment_data)",
          "43:     # then",
          "45:         line.variant.price_amount * line.quantity, line.variant.currency",
          "46:     )",
          "47:     assert result == {",
          "",
          "[Removed Lines]",
          "44:     total = get_price_amount(",
          "",
          "[Added Lines]",
          "44:     total = to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:                 \"description\": line.variant.product.description,",
          "98:                 \"quantity\": line.quantity,",
          "99:                 \"id\": line.variant.sku,",
          "101:                 \"taxPercentage\": tax_percent,",
          "104:             }",
          "105:         ],",
          "106:     }",
          "",
          "[Removed Lines]",
          "100:                 \"taxAmount\": get_price_amount((gross - net).amount, \"USD\"),",
          "102:                 \"amountExcludingTax\": get_price_amount(net.amount, \"USD\"),",
          "103:                 \"amountIncludingTax\": get_price_amount(gross.amount, \"USD\"),",
          "",
          "[Added Lines]",
          "100:                 \"taxAmount\": to_adyen_price((gross - net).amount, \"USD\"),",
          "102:                 \"amountExcludingTax\": to_adyen_price(net.amount, \"USD\"),",
          "103:                 \"amountIncludingTax\": to_adyen_price(gross.amount, \"USD\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:     # then",
          "148:     assert result == {",
          "149:         \"amount\": {",
          "151:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "152:             ),",
          "153:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "150:             \"value\": get_price_amount(",
          "",
          "[Added Lines]",
          "150:             \"value\": to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:     dummy_payment_data.data = data",
          "182:     klarna_result = {",
          "183:         \"amount\": {",
          "185:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "186:             ),",
          "187:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "184:             \"value\": get_price_amount(",
          "",
          "[Added Lines]",
          "184:             \"value\": to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "216:         (Decimal(51), \"US\", Decimal(\"0.51\")),",
          "217:     ],",
          "218: )",
          "220:     # when",
          "223:     # then",
          "224:     assert result == expected_result",
          "",
          "[Removed Lines]",
          "219: def test_convert_adyen_price_format(value, currency, expected_result):",
          "221:     result = convert_adyen_price_format(value, currency)",
          "",
          "[Added Lines]",
          "219: def test_from_adyen_price(value, currency, expected_result):",
          "221:     result = from_adyen_price(value, currency)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:         (Decimal(100), \"US\", \"10000\"),",
          "233:     ],",
          "234: )",
          "236:     # when",
          "239:     # then",
          "240:     assert result == expected_result",
          "",
          "[Removed Lines]",
          "235: def test_get_price_amount(value, currency, expected_result):",
          "237:     result = get_price_amount(value, currency)",
          "",
          "[Added Lines]",
          "235: def test_to_adyen_price(value, currency, expected_result):",
          "237:     result = to_adyen_price(value, currency)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from ......order import OrderStatus",
          "8: from ..... import ChargeStatus, TransactionKind",
          "10: from ...webhooks import (",
          "11:     create_new_transaction,",
          "12:     handle_authorization,",
          "",
          "[Removed Lines]",
          "9: from ...utils import get_price_amount",
          "",
          "[Added Lines]",
          "9: from ...utils import to_adyen_price",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "28:     notification = notification(",
          "29:         merchant_reference=payment_id,",
          "31:     )",
          "32:     config = adyen_plugin().config",
          "33:     handle_authorization(notification, config)",
          "",
          "[Removed Lines]",
          "30:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "30:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "46:     notification = notification(",
          "47:         merchant_reference=payment_id,",
          "49:     )",
          "50:     config = adyen_plugin().config",
          "51:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "[Removed Lines]",
          "48:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "48:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:     notification = notification(",
          "65:         psp_reference=\"853596537720508F\",",
          "66:         merchant_reference=payment_id,",
          "68:     )",
          "69:     config = adyen_plugin().config",
          "70:     config.auto_capture = True",
          "",
          "[Removed Lines]",
          "67:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "67:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "89:     notification = notification(",
          "90:         merchant_reference=payment_id,",
          "92:     )",
          "93:     config = adyen_plugin().config",
          "94:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "[Removed Lines]",
          "91:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "91:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "104:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "105:     notification = notification(",
          "106:         merchant_reference=payment_id,",
          "108:     )",
          "109:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "107:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "107:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "127:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "128:     notification = notification(",
          "129:         merchant_reference=payment_id,",
          "131:     )",
          "132:     config = adyen_plugin().config",
          "133:     create_new_transaction(notification, payment, TransactionKind.CANCEL)",
          "",
          "[Removed Lines]",
          "130:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "130:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "145:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "146:     notification = notification(",
          "147:         merchant_reference=payment_id,",
          "149:     )",
          "150:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "148:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "148:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "172:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "173:     notification = notification(",
          "174:         merchant_reference=payment_id,",
          "176:     )",
          "177:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "175:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "175:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "195:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "196:     notification = notification(",
          "197:         merchant_reference=payment_id,",
          "199:     )",
          "200:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "198:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "198:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "219:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "220:     notification = notification(",
          "221:         merchant_reference=payment_id,",
          "223:     )",
          "224:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "222:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "222:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "238:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "239:     notification = notification(",
          "240:         merchant_reference=payment_id,",
          "242:     )",
          "243:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "241:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "241:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "259:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "260:     notification = notification(",
          "261:         merchant_reference=payment_id,",
          "263:     )",
          "264:     config = adyen_plugin().config",
          "265:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "[Removed Lines]",
          "262:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "262:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "282:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "283:     notification = notification(",
          "284:         merchant_reference=payment_id,",
          "286:     )",
          "287:     config = adyen_plugin().config",
          "288:     create_new_transaction(notification, payment, TransactionKind.PENDING)",
          "",
          "[Removed Lines]",
          "285:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "285:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "303:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "304:     notification = notification(",
          "305:         merchant_reference=payment_id,",
          "307:     )",
          "308:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "306:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "306:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "333:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "334:     notification = notification(",
          "335:         merchant_reference=payment_id,",
          "337:     )",
          "338:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "339:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "336:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "336:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "354:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "355:     notification = notification(",
          "356:         merchant_reference=payment_id,",
          "358:     )",
          "359:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "357:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "357:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "373:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "374:     notification = notification(",
          "375:         merchant_reference=payment_id,",
          "377:     )",
          "378:     config = adyen_plugin().config",
          "379:     create_new_transaction(notification, payment, TransactionKind.REFUND_ONGOING)",
          "",
          "[Removed Lines]",
          "376:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "376:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "396:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "397:     notification = notification(",
          "398:         merchant_reference=payment_id,",
          "400:     )",
          "401:     config = adyen_plugin().config",
          "402:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "",
          "[Removed Lines]",
          "399:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "399:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "416:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "417:     notification = notification(",
          "418:         merchant_reference=payment_id,",
          "420:     )",
          "421:     config = adyen_plugin().config",
          "422:     handle_reversed_refund(notification, config)",
          "",
          "[Removed Lines]",
          "419:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "419:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "437:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "438:     notification = notification(",
          "439:         merchant_reference=payment_id,",
          "441:     )",
          "442:     config = adyen_plugin().config",
          "443:     create_new_transaction(notification, payment, TransactionKind.REFUND_REVERSED)",
          "",
          "[Removed Lines]",
          "440:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "440:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "455:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "456:     notification = notification(",
          "457:         merchant_reference=payment_id,",
          "459:     )",
          "460:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "458:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "458:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "474:     config = adyen_plugin().config",
          "475:     notification = notification(",
          "476:         merchant_reference=payment_id,",
          "478:     )",
          "479:     notification[\"additionalData\"][\"modification.action\"] = \"refund\"",
          "",
          "[Removed Lines]",
          "477:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "477:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "492:     config = adyen_plugin().config",
          "493:     notification = notification(",
          "494:         merchant_reference=payment_id,",
          "496:     )",
          "497:     notification[\"additionalData\"][\"modification.action\"] = \"cancel\"",
          "",
          "[Removed Lines]",
          "495:         value=get_price_amount(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "495:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: AUTH_STATUS = \"authorised\"",
          "29:     value = Decimal(value)",
          "30:     precision = get_currency_precision(currency)",
          "31:     number_places = Decimal(10) ** -precision",
          "32:     return value * number_places",
          "36:     \"\"\"Adyen doesn't use values with comma.",
          "38:     Take the value, discover the precision of currency and multiply value by",
          "",
          "[Removed Lines]",
          "28: def convert_adyen_price_format(value: str, currency: str):",
          "35: def get_price_amount(value: Decimal, currency: str):",
          "",
          "[Added Lines]",
          "28: def from_adyen_price(value: str, currency: str):",
          "35: def to_adyen_price(value: Decimal, currency: str):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     request_data = {",
          "86:         \"amount\": {",
          "88:                 payment_information.amount, payment_information.currency",
          "89:             ),",
          "90:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "87:             \"value\": get_price_amount(",
          "",
          "[Added Lines]",
          "87:             \"value\": to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:         tax_amount = total.tax.amount",
          "128:         line_data = {",
          "129:             \"quantity\": line.quantity,",
          "131:             \"taxPercentage\": round(tax_amount / total_gross * 100),",
          "132:             \"description\": line.variant.product.description,",
          "133:             \"id\": line.variant.sku,",
          "136:         }",
          "137:         line_items.append(line_data)",
          "138:     payment_data[\"lineItems\"] = line_items",
          "",
          "[Removed Lines]",
          "130:             \"amountExcludingTax\": get_price_amount(total_net, currency),",
          "134:             \"taxAmount\": get_price_amount(tax_amount, currency),",
          "135:             \"amountIncludingTax\": get_price_amount(total_gross, currency),",
          "",
          "[Added Lines]",
          "130:             \"amountExcludingTax\": to_adyen_price(total_net, currency),",
          "134:             \"taxAmount\": to_adyen_price(tax_amount, currency),",
          "135:             \"amountIncludingTax\": to_adyen_price(total_gross, currency),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:         \"countryCode\": country_code,",
          "184:         \"channel\": channel,",
          "185:         \"amount\": {",
          "187:             \"currency\": checkout.currency,",
          "188:         },",
          "189:     }",
          "",
          "[Removed Lines]",
          "186:             \"value\": get_price_amount(total.gross.amount, checkout.currency),",
          "",
          "[Added Lines]",
          "186:             \"value\": to_adyen_price(total.gross.amount, checkout.currency),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:     return {",
          "196:         \"merchantAccount\": merchant_account,",
          "197:         \"modificationAmount\": {",
          "199:                 payment_information.amount, payment_information.currency",
          "200:             ),",
          "201:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "198:             \"value\": get_price_amount(",
          "",
          "[Added Lines]",
          "198:             \"value\": to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:     return {",
          "212:         \"merchantAccount\": merchant_account,",
          "213:         \"modificationAmount\": {",
          "215:                 payment_information.amount, payment_information.currency",
          "216:             ),",
          "217:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "214:             \"value\": get_price_amount(",
          "",
          "[Added Lines]",
          "214:             \"value\": to_adyen_price(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "248:     token: str,",
          "249:     adyen_client: Adyen.Adyen,",
          "250: ):",
          "251:     request = request_for_payment_capture(",
          "252:         payment_information=payment_information,",
          "253:         merchant_account=merchant_account,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     # https://docs.adyen.com/checkout/capture#make-an-api-call-to-capture-a-payment",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: from ...gateway import capture",
          "35: from ...interface import GatewayConfig, GatewayResponse",
          "36: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "40: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Removed Lines]",
          "37: from .utils import FAILED_STATUSES, api_call, convert_adyen_price_format",
          "",
          "[Added Lines]",
          "37: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: def create_new_transaction(notification, payment, kind):",
          "56:     transaction_id = notification.get(\"pspReference\")",
          "57:     currency = notification.get(\"amount\", {}).get(\"currency\")",
          "61:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "63:     gateway_response = GatewayResponse(",
          "",
          "[Removed Lines]",
          "58:     amount = convert_adyen_price_format(",
          "59:         notification.get(\"amount\", {}).get(\"value\"), currency",
          "60:     )",
          "",
          "[Added Lines]",
          "58:     amount = from_adyen_price(notification.get(\"amount\", {}).get(\"value\"), currency)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0f450f980a38cc8ad9087d1939b49867fe68285",
      "candidate_info": {
        "commit_hash": "f0f450f980a38cc8ad9087d1939b49867fe68285",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/f0f450f980a38cc8ad9087d1939b49867fe68285",
        "files": [
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Improve the content of notification",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:         return",
          "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
          "95:     create_payment_notification_for_order(",
          "96:         payment, success_msg, failed_msg, transaction.is_success",
          "97:     )",
          "",
          "[Removed Lines]",
          "93:     success_msg = \"Adyen: The payment request was successful.\"",
          "94:     failed_msg = \"Adyen: The payment request failed.\"",
          "",
          "[Added Lines]",
          "92:     reason = notification.get(\"reason\", \"-\")",
          "94:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "95:     failed_msg = f\"Adyen: The payment {transaction_id} request failed. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     )",
          "112:     gateway_postprocess(new_transaction, payment)",
          "116:     create_payment_notification_for_order(",
          "117:         payment, success_msg, failed_msg, transaction.is_success",
          "118:     )",
          "",
          "[Removed Lines]",
          "114:     success_msg = \"Adyen: The cancel request was successful.\"",
          "115:     failed_msg = \"Adyen: The request failed.\"",
          "",
          "[Added Lines]",
          "115:     reason = notification.get(\"reason\", \"-\")",
          "116:     success_msg = f\"Adyen: The cancel {transaction_id} request was successful.\"",
          "117:     failed_msg = f\"Adyen: The camcel {transaction_id} request failed. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:     )",
          "145:     gateway_postprocess(new_transaction, payment)",
          "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
          "149:     create_payment_notification_for_order(",
          "150:         payment, success_msg, failed_msg, transaction.is_success",
          "151:     )",
          "",
          "[Removed Lines]",
          "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
          "",
          "[Added Lines]",
          "149:     reason = notification.get(\"reason\", \"-\")",
          "151:     failed_msg = f\"Adyen: The capture {transaction_id} request failed. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:     )",
          "169:     gateway_postprocess(new_transaction, payment)",
          "172:     create_payment_notification_for_order(payment, msg, None, True)",
          "",
          "[Removed Lines]",
          "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
          "",
          "[Added Lines]",
          "174:     reason = notification.get(\"reason\", \"-\")",
          "175:     msg = (",
          "176:         f\"Adyen: The capture for {transaction_id} failed due to a technical issue. \"",
          "177:         f\"Reason: {reason}\"",
          "178:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:     )",
          "191:     gateway_postprocess(new_transaction, payment)",
          "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
          "",
          "[Removed Lines]",
          "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
          "",
          "[Added Lines]",
          "200:     reason = notification.get(\"reason\", \"-\")",
          "201:     msg = f\"Adyen: The transaction {transaction_id} is pending. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208:     )",
          "209:     gateway_postprocess(new_transaction, payment)",
          "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
          "213:     create_payment_notification_for_order(",
          "214:         payment, success_msg, failed_msg, transaction.is_success",
          "215:     )",
          "",
          "[Removed Lines]",
          "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
          "",
          "[Added Lines]",
          "219:     reason = notification.get(\"reason\", \"-\")",
          "221:     failed_msg = f\"Adyen: The refund {transaction_id} request failed. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:     )",
          "230:     gateway_postprocess(new_transaction, payment)",
          "232:     msg = (",
          "235:     )",
          "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
          "",
          "[Removed Lines]",
          "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
          "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
          "",
          "[Added Lines]",
          "241:     reason = notification.get(\"reason\", \"-\")",
          "243:         f\"Adyen: The refund {transaction_id} failed due to a technical issue. If you\"",
          "244:         f\" receive more than two failures on the same refund, contact Adyen Support \"",
          "245:         f\"Team. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "254:         notification, payment, TransactionKind.REFUND_REVERSED",
          "255:     )",
          "256:     gateway_postprocess(new_transaction, payment)",
          "257:     msg = (",
          "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
          "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
          "261:     )",
          "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
          "",
          "[Removed Lines]",
          "260:         f\"is no longer valid\"",
          "",
          "[Added Lines]",
          "269:     reason = notification.get(\"reason\", \"-\")",
          "273:         f\"is no longer valid. Reason: {reason}\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "278:         notification, payment, TransactionKind.REFUND",
          "279:     )",
          "280:     gateway_postprocess(new_transaction, payment)",
          "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
          "283:     create_payment_notification_for_order(",
          "284:         payment, success_msg, failed_msg, transaction.is_success",
          "285:     )",
          "",
          "[Removed Lines]",
          "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
          "",
          "[Added Lines]",
          "295:     reason = notification.get(\"reason\", \"-\")",
          "297:     failed_msg = f\"Adyen: The refund {transaction_id} request failed. Reason: {reason}\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22c7407a664a97498f81110d164759f2612624a8",
      "candidate_info": {
        "commit_hash": "22c7407a664a97498f81110d164759f2612624a8",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/22c7407a664a97498f81110d164759f2612624a8",
        "files": [
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Uncomment webhook logic commented by mistake",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:     if not validate_auth_user(request.headers, gateway_config):",
          "478:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
          "484:     return HttpResponseNotFound()",
          "",
          "[Removed Lines]",
          "480:     # event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
          "481:     # if event_handler:",
          "482:     #     event_handler(notification, gateway_config)",
          "483:     return HttpResponse(\"[accepted]\")",
          "",
          "[Added Lines]",
          "480:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
          "481:     if event_handler:",
          "482:         event_handler(notification, gateway_config)",
          "483:         return HttpResponse(\"[accepted]\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4946aa7d4818ccc6f64bb839f67b263418f77772",
      "candidate_info": {
        "commit_hash": "4946aa7d4818ccc6f64bb839f67b263418f77772",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/4946aa7d4818ccc6f64bb839f67b263418f77772",
        "files": [
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/cassettes/test_handle_authorization_with_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment_with_adyen_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment_with_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Add auto capture flags for Adyen and Saleor (#5956)\n\n* Add autocapture for Saleor and for Adyen\n\n* Update saleor/payment/gateways/adyen/plugin.py\n\nfix the typo\n\nCo-authored-by: Iga Karbowiak <40886528+IKarbowiak@users.noreply.github.com>\n\nCo-authored-by: Iga Karbowiak <40886528+IKarbowiak@users.noreply.github.com>",
        "before_after_code_files": [
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     response, error = _fetch_gateway_response(",
          "123:         plugin_manager.capture_payment, payment.gateway, payment_data",
          "124:     )",
          "126:         update_card_details(payment, response)",
          "127:     return create_transaction(",
          "128:         payment=payment,",
          "",
          "[Removed Lines]",
          "125:     if response.card_info:",
          "",
          "[Added Lines]",
          "125:     if response and response.card_info:",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: from ..utils import get_supported_currencies",
          "16: from .utils import (",
          "17:     api_call,",
          "18:     request_data_for_gateway_config,",
          "19:     request_data_for_payment,",
          "21:     request_for_payment_refund,",
          "22: )",
          "23: from .webhooks import handle_webhook",
          "",
          "[Removed Lines]",
          "20:     request_for_payment_capture,",
          "",
          "[Added Lines]",
          "18:     call_capture,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     return wrapped",
          "38: FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "41: class AdyenGatewayPlugin(BasePlugin):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: # https://docs.adyen.com/checkout/payment-result-codes",
          "40: PENDING_STATUSES = [\"pending\", \"received\"]",
          "41: AUTH_STATUS = \"authorised\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "51:         {\"name\": \"Live\", \"value\": \"\"},",
          "52:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
          "53:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
          "54:         {\"name\": \"Notification user\", \"value\": \"\"},",
          "55:         {\"name\": \"Notification password\", \"value\": \"\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         {\"name\": \"Automatic payment capture\", \"value\": False},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         \"Automatically mark payment as a capture\": {",
          "117:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "118:             \"help_text\": (",
          "127:             ),",
          "128:             \"label\": \"Automatically mark payment as a capture\",",
          "129:         },",
          "130:         \"HMAC secret key\": {",
          "131:             \"type\": ConfigurationTypeField.SECRET,",
          "132:             \"help_text\": (",
          "",
          "[Removed Lines]",
          "119:                 \"Saleor by default doesn't receive notification which payment has \"",
          "120:                 \"status capture, all sucess payment can be marked as a capture by \"",
          "121:                 \"default.\"",
          "122:                 \"A payment that is automatically captured does not trigger a \"",
          "123:                 \"separate CAPTURE notification. If you are using delayed automatic \"",
          "124:                 \"capture (by having a Capture Delay of a fixed number of days), you \"",
          "125:                 \"can optionally receive CAPTURE notifications. To enable this \"",
          "126:                 \"functionality, contact with Adyen Support Team.\"",
          "",
          "[Added Lines]",
          "123:                 \"All authorized payments will be marked as paid. This should be enabled\"",
          "124:                 \" when Adyen uses automatically auto-capture. Saleor doesn't support \"",
          "125:                 \"delayed automatically capture.\"",
          "129:         \"Automatic payment capture\": {",
          "130:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "131:             \"help_text\": \"Determines if Saleor should automaticaly capture payments.\",",
          "132:             \"label\": \"Automatic payment capture\",",
          "133:         },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "167:         self.config = GatewayConfig(",
          "168:             gateway_name=GATEWAY_NAME,",
          "170:             supported_currencies=configuration[\"Supported currencies\"],",
          "171:             connection_params={",
          "172:                 \"api_key\": configuration[\"API key\"],",
          "",
          "[Removed Lines]",
          "169:             auto_capture=configuration[\"Automatically mark payment as a capture\"],",
          "",
          "[Added Lines]",
          "173:             auto_capture=configuration[\"Automatic payment capture\"],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
          "179:                 \"webhook_user\": configuration[\"Notification user\"],",
          "180:                 \"webhook_user_password\": configuration[\"Notification password\"],",
          "181:             },",
          "182:         )",
          "183:         api_key = self.config.connection_params[\"api_key\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:                 \"adyen_auto_capture\": configuration[",
          "186:                     \"Automatically mark payment as a capture\"",
          "187:                 ],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "233:             origin_url=self.config.connection_params[\"origin_url\"],",
          "234:         )",
          "236:         result = api_call(request_data, self.adyen.checkout.payments)",
          "239:             kind = TransactionKind.CAPTURE",
          "242:         return GatewayResponse(",
          "243:             is_success=is_success,",
          "244:             action_required=\"action\" in result.message,",
          "",
          "[Removed Lines]",
          "237:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "238:         if self.config.auto_capture:",
          "240:         else:",
          "241:             kind = TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "243:         result_code = result.message[\"resultCode\"].strip().lower()",
          "244:         is_success = result_code not in FAILED_STATUSES",
          "245:         adyen_auto_capture = self.config.connection_params[\"adyen_auto_capture\"]",
          "246:         kind = TransactionKind.AUTH",
          "247:         if adyen_auto_capture:",
          "249:         elif result_code in PENDING_STATUSES:",
          "250:             kind = TransactionKind.PENDING",
          "252:         # If auto capture is enabled, let's make a capture the auth payment",
          "253:         if self.config.auto_capture and result_code == AUTH_STATUS:",
          "254:             kind = TransactionKind.CAPTURE",
          "255:             result = call_capture(",
          "256:                 payment_information=payment_information,",
          "257:                 merchant_account=self.config.connection_params[\"merchant_account\"],",
          "258:                 token=result.message.get(\"pspReference\"),",
          "259:                 adyen_client=self.adyen,",
          "260:             )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:     ) -> \"GatewayResponse\":",
          "296:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "297:         transaction = (",
          "298:             Transaction.objects.filter(",
          "299:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:         # we take Auth kind because it contains the transaction id that we need",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "338:         if not transaction:",
          "339:             raise PaymentError(\"Cannot find a payment reference to capture.\")",
          "342:             payment_information=payment_information,",
          "343:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "344:             token=transaction.token,",
          "345:         )",
          "347:         return GatewayResponse(",
          "348:             is_success=True,",
          "349:             action_required=False,",
          "",
          "[Removed Lines]",
          "341:         request = request_for_payment_capture(",
          "346:         result = api_call(request, self.adyen.payment.capture)",
          "",
          "[Added Lines]",
          "362:         result = call_capture(",
          "366:             adyen_client=self.adyen,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         return_url=None,",
          "16:         origin_key=None,",
          "17:         origin_url=None,",
          "18:         auto_capture=None,",
          "19:     ):",
          "20:         api_key = api_key or \"test_key\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:         adyen_auto_capture=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         return_url = return_url or \"http://127.0.0.1:3000/\"",
          "23:         origin_key = origin_key or \"test_origin_key\"",
          "24:         origin_url = origin_url or \"http://127.0.0.1:3000\"",
          "25:         auto_capture = auto_capture or False",
          "26:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "27:         manager = get_plugins_manager()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         adyen_auto_capture = adyen_auto_capture or False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "38:                     {",
          "39:                         \"name\": \"Automatically mark payment as a capture\",",
          "41:                     },",
          "42:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "43:                 ],",
          "44:             },",
          "",
          "[Removed Lines]",
          "40:                         \"value\": auto_capture,",
          "",
          "[Added Lines]",
          "42:                         \"value\": adyen_auto_capture,",
          "44:                     {\"name\": \"Automatic payment capture\", \"value\": auto_capture},",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     }",
          "29:     assert config[1][\"field\"] == \"config\"",
          "30:     config = json.loads(config[1][\"value\"])",
          "34: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "31:     assert isinstance(config, list)",
          "",
          "[Added Lines]",
          "31:     assert isinstance(config, dict)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     assert response.error is None",
          "51: @pytest.mark.vcr",
          "52: def test_process_payment_with_auto_capture(",
          "53:     payment_adyen_for_checkout, checkout_with_items, adyen_plugin",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: @pytest.mark.vcr",
          "52: def test_process_payment_with_adyen_auto_capture(",
          "53:     payment_adyen_for_checkout, checkout_with_items, adyen_plugin",
          "54: ):",
          "55:     payment_info = create_payment_information(",
          "56:         payment_adyen_for_checkout,",
          "57:         additional_data={\"paymentMethod\": {\"paymentdata\": \"\"}},",
          "58:     )",
          "59:     adyen_plugin = adyen_plugin(adyen_auto_capture=True)",
          "60:     response = adyen_plugin.process_payment(payment_info, None)",
          "61:     assert response.is_success is True",
          "62:     assert response.action_required is False",
          "63:     assert response.kind == TransactionKind.CAPTURE",
          "64:     assert response.amount == Decimal(\"1234\")",
          "65:     assert response.currency == checkout_with_items.currency",
          "66:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "67:     assert response.error is None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     assert response.kind == TransactionKind.CAPTURE",
          "64:     assert response.amount == Decimal(\"1234\")",
          "65:     assert response.currency == checkout_with_items.currency",
          "67:     assert response.error is None",
          "",
          "[Removed Lines]",
          "66:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "",
          "[Added Lines]",
          "85:     assert response.transaction_id == \"853596624248395G\"  # ID returned by Adyen",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     assert transaction.kind == TransactionKind.AUTH",
          "75:     notification, adyen_plugin, payment_adyen_for_order",
          "76: ):",
          "77:     payment = payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "74: def test_handle_authorization_with_autocapture(",
          "",
          "[Added Lines]",
          "74: def test_handle_authorization_with_adyen_auto_capture(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         value=get_price_amount(payment.total, payment.currency),",
          "82:     )",
          "83:     config = adyen_plugin().config",
          "84:     config.auto_capture = True",
          "85:     handle_authorization(notification, config)",
          "91:     notification, adyen_plugin, payment_adyen_for_order",
          "92: ):",
          "93:     payment = payment_adyen_for_order",
          "94:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "95:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "96:     notification = notification(",
          "97:         merchant_reference=payment_id,",
          "98:         value=get_price_amount(payment.total, payment.currency),",
          "99:     )",
          "100:     config = adyen_plugin().config",
          "102:     handle_authorization(notification, config)",
          "104:     # payment already has a charge status no need to handle auth action",
          "",
          "[Removed Lines]",
          "87:     assert payment.transactions.count() == 0",
          "90: def test_handle_authorization_with_autocapture_and_payment_charged(",
          "101:     config.auto_capture = True",
          "",
          "[Added Lines]",
          "84:     config.connection_params[\"adyen_auto_capture\"] = True",
          "85:     handle_authorization(notification, config)",
          "87:     assert payment.transactions.count() == 1",
          "88:     assert payment.transactions.get().kind == TransactionKind.CAPTURE",
          "91: @pytest.mark.vcr",
          "92: def test_handle_authorization_with_auto_capture(",
          "93:     notification, adyen_plugin, payment_adyen_for_order",
          "94: ):",
          "95:     payment = payment_adyen_for_order",
          "96:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "97:     notification = notification(",
          "98:         psp_reference=\"853596537720508F\",",
          "99:         merchant_reference=payment_id,",
          "100:         value=get_price_amount(payment.total, payment.currency),",
          "101:     )",
          "102:     config = adyen_plugin().config",
          "104:     config.connection_params[\"adyen_auto_capture\"] = False",
          "108:     payment.refresh_from_db()",
          "109:     assert payment.transactions.count() == 2",
          "110:     assert payment.transactions.first().kind == TransactionKind.AUTH",
          "111:     assert payment.transactions.last().kind == TransactionKind.CAPTURE",
          "112:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "115: def test_handle_authorization_with_adyen_auto_capture_and_payment_charged(",
          "120:     payment.save()",
          "127:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:     assert payment.charge_status == ChargeStatus.PENDING",
          "263:     notification, adyen_plugin, payment_adyen_for_order",
          "264: ):",
          "265:     payment = payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "262: def test_handle_pending_with_autocapture(",
          "",
          "[Added Lines]",
          "288: def test_handle_pending_with_adyen_auto_capture(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:         value=get_price_amount(payment.total, payment.currency),",
          "270:     )",
          "271:     config = adyen_plugin().config",
          "274:     handle_pending(notification, config)",
          "276:     # in case of autocapture we don't want to store the pending status as all payments",
          "277:     # by default get capture status.",
          "279:     payment.refresh_from_db()",
          "283: def test_handle_pending_already_pending(",
          "",
          "[Removed Lines]",
          "272:     config.auto_capture = True",
          "278:     assert payment.transactions.count() == 0",
          "280:     assert payment.charge_status != ChargeStatus.PENDING",
          "",
          "[Added Lines]",
          "298:     config.connection_params[\"adyen_auto_capture\"] = True",
          "304:     assert payment.transactions.count() == 1",
          "305:     assert payment.transactions.get().kind == TransactionKind.PENDING",
          "307:     assert payment.charge_status == ChargeStatus.PENDING",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "172: def request_for_payment_capture(",
          "174: ) -> Dict[str, Any]:",
          "175:     return {",
          "176:         \"merchantAccount\": merchant_account,",
          "",
          "[Removed Lines]",
          "173:     payment_information: \"PaymentData\", merchant_account, token",
          "",
          "[Added Lines]",
          "173:     payment_information: \"PaymentData\", merchant_account: str, token: str",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:         \"originalReference\": token,",
          "184:         \"reference\": payment_information.payment_id,",
          "185:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: def call_capture(",
          "189:     payment_information: \"PaymentData\",",
          "190:     merchant_account: str,",
          "191:     token: str,",
          "192:     adyen_client: Adyen.Adyen,",
          "193: ):",
          "194:     request = request_for_payment_capture(",
          "195:         payment_information=payment_information,",
          "196:         merchant_account=merchant_account,",
          "197:         token=token,",
          "198:     )",
          "199:     return api_call(request, adyen_client.payment.capture)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from ....order.events import external_notification_event",
          "21: from ....payment.models import Payment, Transaction",
          "22: from ... import ChargeStatus, TransactionKind",
          "23: from ...interface import GatewayConfig, GatewayResponse",
          "24: from ...utils import create_transaction, gateway_postprocess",
          "25: from .utils import convert_adyen_price_format",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from ...gateway import capture",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:         ChargeStatus.PARTIALLY_CHARGED,",
          "91:     }:",
          "92:         return",
          "98:     transaction_id = notification.get(\"pspReference\")",
          "102:         return",
          "105:     reason = notification.get(\"reason\", \"-\")",
          "107:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "",
          "[Removed Lines]",
          "93:     mark_capture = gateway_config.auto_capture",
          "94:     if mark_capture:",
          "95:         # If we mark order as a capture by default we don't need to handle auth actions",
          "96:         return",
          "99:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
          "100:     if transaction:",
          "101:         # We already marked it as Auth",
          "104:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
          "",
          "[Added Lines]",
          "95:     kind = TransactionKind.AUTH",
          "96:     adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "97:     if adyen_auto_capture:",
          "98:         kind = TransactionKind.CAPTURE",
          "101:     transaction = payment.transactions.filter(",
          "102:         token=transaction_id, kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE]",
          "103:     ).first()",
          "105:     if transaction and transaction.is_success:",
          "106:         # We already have this transaction",
          "109:     transaction = create_new_transaction(notification, payment, kind)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     create_payment_notification_for_order(",
          "110:         payment, success_msg, failed_msg, transaction.is_success",
          "111:     )",
          "113:         order_authorized(payment.order, None, transaction.amount, payment)",
          "116: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "112:     if payment.order:",
          "",
          "[Added Lines]",
          "117:     if not payment.order:",
          "118:         return",
          "120:     # If saleor has enabled auto capture we need to proceed the capture action.",
          "121:     if gateway_config.auto_capture:",
          "122:         capture(payment, amount=transaction.amount)",
          "124:     if kind == TransactionKind.AUTH:",
          "126:     elif kind == TransactionKind.CAPTURE:",
          "127:         order_captured(payment.order, None, transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "208:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "209:     # event-codes\"",
          "214:     payment = get_payment(notification.get(\"merchantReference\"))",
          "215:     if not payment:",
          "216:         return",
          "",
          "[Removed Lines]",
          "210:     mark_capture = gateway_config.auto_capture",
          "211:     if mark_capture:",
          "212:         # If we mark order as a capture by default we don't need to handle this action",
          "213:         return",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad463728907adb3d8a05a1262f461d201cc24a87",
      "candidate_info": {
        "commit_hash": "ad463728907adb3d8a05a1262f461d201cc24a87",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/ad463728907adb3d8a05a1262f461d201cc24a87",
        "files": [
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/schema.graphql",
          "saleor/order/events.py",
          "saleor/payment/__init__.py",
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/cassettes/test_void_payment.yaml",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/dummy/tests/test_dummy.py",
          "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "saleor/payment/interface.py",
          "saleor/payment/migrations/0019_auto_20200812_1028.py",
          "saleor/payment/models.py",
          "saleor/payment/tests/test_payment.py",
          "saleor/payment/utils.py",
          "saleor/tests/fixtures.py"
        ],
        "message": "Adyen add void, rebuild confirm, lock payment changes  (#5985)\n\n* Add void. rebuild confirm proces\n\n* Clean up for new transaction kind\n\n* Check if transaction is already proessed\n\n* Put post_process inside transaction\n\n* Apply changes after review",
        "before_after_code_files": [
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/order/events.py||saleor/order/events.py",
          "saleor/payment/__init__.py||saleor/payment/__init__.py",
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/dummy/tests/test_dummy.py||saleor/payment/gateways/dummy/tests/test_dummy.py",
          "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py||saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/payment/migrations/0019_auto_20200812_1028.py||saleor/payment/migrations/0019_auto_20200812_1028.py",
          "saleor/payment/models.py||saleor/payment/models.py",
          "saleor/payment/tests/test_payment.py||saleor/payment/tests/test_payment.py",
          "saleor/payment/utils.py||saleor/payment/utils.py",
          "saleor/tests/fixtures.py||saleor/tests/fixtures.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/__init__.py||saleor/payment/__init__.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/__init__.py||saleor/payment/__init__.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         )",
          "206:         try:",
          "207:             gateway.capture(payment, amount)",
          "208:         except PaymentError as e:",
          "209:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "210:         return PaymentCapture(payment=payment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:             payment.refresh_from_db()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:         )",
          "225:         try:",
          "226:             gateway.refund(payment, amount=amount)",
          "227:         except PaymentError as e:",
          "228:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "229:         return PaymentRefund(payment=payment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:             payment.refresh_from_db()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:         )",
          "249:         try:",
          "250:             gateway.void(payment)",
          "251:         except PaymentError as e:",
          "252:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "253:         return PaymentVoid(payment=payment)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:             payment.refresh_from_db()",
          "",
          "---------------"
        ],
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "5028: enum TransactionKind {",
          "5029:   AUTH",
          "5030:   PENDING",
          "5031:   REFUND",
          "5032:   REFUND_ONGOING",
          "5033:   CAPTURE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5031:   ACTION_TO_CONFIRM",
          "",
          "---------------"
        ],
        "saleor/order/events.py||saleor/order/events.py": [
          "File: saleor/order/events.py -> saleor/order/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: def external_notification_event(",
          "265: ) -> OrderEvent:",
          "266:     if not _user_is_valid(user):",
          "267:         user = None",
          "273:     return OrderEvent.objects.create(",
          "274:         order=order,",
          "",
          "[Removed Lines]",
          "268:     parameters = {\"message\": message}",
          "270:     if payment:",
          "271:         parameters.update({\"service\": payment.gateway, \"id\": payment.token})",
          "",
          "[Added Lines]",
          "268:     parameters = parameters or {}",
          "269:     parameters[\"message\"] = message",
          "",
          "---------------"
        ],
        "saleor/payment/__init__.py||saleor/payment/__init__.py": [
          "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     AUTH = \"auth\"",
          "61:     CAPTURE = \"capture\"",
          "62:     CAPTURE_FAILED = \"capture_failed\"",
          "63:     VOID = \"void\"",
          "64:     PENDING = \"pending\"",
          "65:     REFUND = \"refund\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     ACTION_TO_CONFIRM = \"action_to_confirm\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     CHOICES = [",
          "75:         (AUTH, \"Authorization\"),",
          "76:         (PENDING, \"Pending\"),",
          "77:         (REFUND, \"Refund\"),",
          "78:         (REFUND_ONGOING, \"Refund in progress\"),",
          "79:         (CAPTURE, \"Capture\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         (ACTION_TO_CONFIRM, \"Action to confirm\"),",
          "",
          "---------------"
        ],
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from decimal import Decimal",
          "3: from typing import TYPE_CHECKING, Callable, List, Optional",
          "5: from ..payment.interface import TokenConfig",
          "6: from ..plugins.manager import get_plugins_manager",
          "7: from . import GatewayError, PaymentError, TransactionKind",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from django.db import transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     clean_authorize,",
          "11:     clean_capture,",
          "12:     create_payment_information,",
          "14:     gateway_postprocess,",
          "15:     update_payment_method_details,",
          "16:     validate_gateway_response,",
          "17: )",
          "",
          "[Removed Lines]",
          "13:     create_transaction,",
          "",
          "[Added Lines]",
          "16:     get_already_processed_transaction_or_create_new_transaction,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     return wrapped",
          "58: @raise_payment_error",
          "59: @require_active_payment",
          "60: def process_payment(",
          "61:     payment: Payment,",
          "62:     token: str,",
          "",
          "[Removed Lines]",
          "57: @payment_postprocess",
          "",
          "[Added Lines]",
          "59: def with_locked_payment(fn: Callable) -> Callable:",
          "60:     \"\"\"Lock payment to protect from asynchronous modification.\"\"\"",
          "62:     def wrapped(payment: Payment, *args, **kwargs):",
          "63:         with transaction.atomic():",
          "64:             payment = Payment.objects.select_for_update().get(id=payment.id)",
          "65:             return fn(payment, *args, **kwargs)",
          "67:     return wrapped",
          "72: @with_locked_payment",
          "73: @payment_postprocess",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         store_source=store_source,",
          "71:         additional_data=additional_data,",
          "72:     )",
          "73:     response, error = _fetch_gateway_response(",
          "74:         plugin_manager.process_payment, payment.gateway, payment_data",
          "75:     )",
          "76:     action_required = response is not None and response.action_required",
          "77:     if response and response.payment_method_info:",
          "78:         update_payment_method_details(payment, response)",
          "80:         payment=payment,",
          "81:         kind=TransactionKind.CAPTURE,",
          "82:         action_required=action_required,",
          "",
          "[Removed Lines]",
          "79:     return create_transaction(",
          "",
          "[Added Lines]",
          "94:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:     )",
          "90: @raise_payment_error",
          "91: @require_active_payment",
          "92: def authorize(payment: Payment, token: str, store_source: bool = False) -> Transaction:",
          "93:     plugin_manager = get_plugins_manager()",
          "94:     clean_authorize(payment)",
          "",
          "[Removed Lines]",
          "89: @payment_postprocess",
          "",
          "[Added Lines]",
          "106: @with_locked_payment",
          "107: @payment_postprocess",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "100:     )",
          "101:     if response and response.payment_method_info:",
          "102:         update_payment_method_details(payment, response)",
          "104:         payment=payment,",
          "105:         kind=TransactionKind.AUTH,",
          "106:         payment_information=payment_data,",
          "",
          "[Removed Lines]",
          "103:     return create_transaction(",
          "",
          "[Added Lines]",
          "119:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "112: @payment_postprocess",
          "113: @raise_payment_error",
          "114: @require_active_payment",
          "115: def capture(",
          "116:     payment: Payment, amount: Decimal = None, store_source: bool = False",
          "117: ) -> Transaction:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: @with_locked_payment",
          "132: @payment_postprocess",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "128:     )",
          "129:     if response and response.payment_method_info:",
          "130:         update_payment_method_details(payment, response)",
          "132:         payment=payment,",
          "133:         kind=TransactionKind.CAPTURE,",
          "134:         payment_information=payment_data,",
          "",
          "[Removed Lines]",
          "131:     return create_transaction(",
          "",
          "[Added Lines]",
          "149:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "137:     )",
          "141: @raise_payment_error",
          "142: @require_active_payment",
          "143: def refund(payment: Payment, amount: Decimal = None) -> Transaction:",
          "144:     plugin_manager = get_plugins_manager()",
          "145:     if amount is None:",
          "",
          "[Removed Lines]",
          "140: @payment_postprocess",
          "",
          "[Added Lines]",
          "160: @with_locked_payment",
          "161: @payment_postprocess",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "154:     response, error = _fetch_gateway_response(",
          "155:         plugin_manager.refund_payment, payment.gateway, payment_data",
          "156:     )",
          "158:         payment=payment,",
          "159:         kind=TransactionKind.REFUND,",
          "160:         payment_information=payment_data,",
          "",
          "[Removed Lines]",
          "157:     return create_transaction(",
          "",
          "[Added Lines]",
          "176:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "163:     )",
          "167: @raise_payment_error",
          "168: @require_active_payment",
          "169: def void(payment: Payment) -> Transaction:",
          "170:     plugin_manager = get_plugins_manager()",
          "171:     token = _get_past_transaction_token(payment, TransactionKind.AUTH)",
          "",
          "[Removed Lines]",
          "166: @payment_postprocess",
          "",
          "[Added Lines]",
          "187: @with_locked_payment",
          "188: @payment_postprocess",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "173:     response, error = _fetch_gateway_response(",
          "174:         plugin_manager.void_payment, payment.gateway, payment_data",
          "175:     )",
          "177:         payment=payment,",
          "178:         kind=TransactionKind.VOID,",
          "179:         payment_information=payment_data,",
          "",
          "[Removed Lines]",
          "176:     return create_transaction(",
          "",
          "[Added Lines]",
          "196:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "182:     )",
          "186: @raise_payment_error",
          "187: @require_active_payment",
          "188: def confirm(payment: Payment, additional_data: Optional[dict] = None) -> Transaction:",
          "189:     plugin_manager = get_plugins_manager()",
          "191:     payment_data = create_payment_information(",
          "192:         payment=payment, payment_token=token, additional_data=additional_data",
          "193:     )",
          "194:     response, error = _fetch_gateway_response(",
          "195:         plugin_manager.confirm_payment, payment.gateway, payment_data",
          "196:     )",
          "198:         payment=payment,",
          "199:         kind=TransactionKind.CONFIRM,",
          "200:         payment_information=payment_data,",
          "",
          "[Removed Lines]",
          "185: @payment_postprocess",
          "190:     token = _get_past_transaction_token(payment, TransactionKind.CAPTURE)",
          "197:     return create_transaction(",
          "",
          "[Added Lines]",
          "207: @with_locked_payment",
          "208: @payment_postprocess",
          "211:     token = _get_past_transaction_token(payment, TransactionKind.ACTION_TO_CONFIRM)",
          "218:     return get_already_processed_transaction_or_create_new_transaction(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "237: def _get_past_transaction_token(",
          "238:     payment: Payment, kind: str  # for kind use \"TransactionKind\"",
          "241:     if txn is None:",
          "242:         raise PaymentError(f\"Cannot find successful {kind} transaction.\")",
          "243:     return txn.token",
          "",
          "[Removed Lines]",
          "239: ):",
          "240:     txn = payment.transactions.filter(kind=kind, is_success=True).first()",
          "",
          "[Added Lines]",
          "260: ) -> Optional[str]:",
          "261:     txn = payment.transactions.filter(kind=kind, is_success=True).last()",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     call_capture,",
          "25:     request_data_for_gateway_config,",
          "26:     request_data_for_payment,",
          "27:     request_for_payment_refund,",
          "28:     update_payment_with_action_required_data,",
          "29: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     request_for_payment_cancel,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:             return handle_webhook(request, config)",
          "200:         elif path.startswith(ADDITIONAL_ACTION_PATH):",
          "201:             return handle_additional_actions(",
          "206:             )",
          "207:         return HttpResponseNotFound()",
          "",
          "[Removed Lines]",
          "202:                 request,",
          "203:                 self.adyen.checkout.payments_details,",
          "204:                 config.connection_params[\"adyen_auto_capture\"],",
          "205:                 config.auto_capture,",
          "",
          "[Added Lines]",
          "203:                 request, self.adyen.checkout.payments_details,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "276:         elif adyen_auto_capture:",
          "277:             kind = TransactionKind.CAPTURE",
          "279:         # If auto capture is enabled, let's make a capture the auth payment",
          "281:             kind = TransactionKind.CAPTURE",
          "282:             result = call_capture(",
          "283:                 payment_information=payment_information,",
          "",
          "[Removed Lines]",
          "280:         if self.config.auto_capture and result_code == AUTH_STATUS:",
          "",
          "[Added Lines]",
          "277:         action = result.message.get(\"action\")",
          "278:         error_message = result.message.get(\"refusalReason\")",
          "279:         if action:",
          "280:             update_payment_with_action_required_data(",
          "281:                 payment, action, result.message.get(\"details\", []),",
          "282:             )",
          "284:         elif self.config.auto_capture and result_code == AUTH_STATUS:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "285:                 token=result.message.get(\"pspReference\"),",
          "286:                 adyen_client=self.adyen,",
          "287:             )",
          "296:         return GatewayResponse(",
          "297:             is_success=is_success,",
          "298:             action_required=\"action\" in result.message,",
          "",
          "[Removed Lines]",
          "289:         action = result.message.get(\"action\")",
          "290:         error_message = result.message.get(\"refusalReason\")",
          "291:         if action:",
          "292:             update_payment_with_action_required_data(",
          "293:                 payment, action, result.message.get(\"details\", []),",
          "294:             )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323:         config = self._get_gateway_config()",
          "324:         return get_supported_currencies(config, GATEWAY_NAME)",
          "326:     @require_active_plugin",
          "327:     def confirm_payment(",
          "328:         self, payment_information: \"PaymentData\", previous_value",
          "329:     ) -> \"GatewayResponse\":",
          "331:         # The additional checks are proceed asynchronously so we try to confirm that",
          "332:         # the payment is already processed",
          "333:         payment = Payment.objects.filter(id=payment_information.payment_id).first()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     def _process_additional_action(self, payment_information: \"PaymentData\", kind: str):",
          "323:         config = self._get_gateway_config()",
          "324:         additional_data = payment_information.data",
          "325:         if not additional_data:",
          "326:             raise PaymentError(\"Unable to finish the payment.\")",
          "328:         result = api_call(additional_data, self.adyen.checkout.payments)",
          "329:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "330:         # For enabled auto_capture on Saleor side we need to proceed an additional",
          "331:         # action",
          "332:         if is_success and config.auto_capture:",
          "333:             response = self.capture_payment(",
          "334:                 payment_information, amount=payment_information.amount",
          "335:             )",
          "336:             is_success = response.is_success",
          "338:         return GatewayResponse(",
          "339:             is_success=is_success,",
          "340:             action_required=\"action\" in result.message,",
          "341:             kind=kind,",
          "342:             amount=payment_information.amount,",
          "343:             currency=payment_information.currency,",
          "344:             transaction_id=result.get(\"pspReference\", \"\"),",
          "345:             error=result.message.get(\"refusalReason\"),",
          "346:             raw_response=result.message,",
          "347:         )",
          "353:         config = self._get_gateway_config()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "337:         transaction = (",
          "338:             payment.transactions.filter(",
          "341:                 is_success=True,",
          "342:             )",
          "343:             .exclude(token__isnull=True, token__exact=\"\")",
          "344:             .last()",
          "345:         )",
          "358:             )",
          "365:         return GatewayResponse(",
          "366:             is_success=is_success,",
          "374:         )",
          "376:     @require_active_plugin",
          "377:     def refund_payment(",
          "378:         self, payment_information: \"PaymentData\", previous_value",
          "379:     ) -> \"GatewayResponse\":",
          "381:         # we take Auth kind because it contains the transaction id that we need",
          "382:         transaction = (",
          "383:             Transaction.objects.filter(",
          "",
          "[Removed Lines]",
          "339:                 payment__id=payment_information.payment_id,",
          "340:                 kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "346:         if transaction:",
          "347:             # We already have the Auth/Capture transaction which means that payment was",
          "348:             # confirmed asynchronous",
          "349:             return GatewayResponse(",
          "350:                 is_success=transaction.is_success,",
          "351:                 action_required=False,",
          "352:                 kind=TransactionKind.CONFIRM,",
          "353:                 amount=transaction.amount,",
          "354:                 currency=transaction.currency,",
          "355:                 transaction_id=transaction.token,",
          "356:                 error=None,",
          "357:                 raw_response={},",
          "359:         additional_data = payment_information.data",
          "360:         if not additional_data:",
          "361:             raise PaymentError(\"Unable to finish the payment.\")",
          "363:         result = api_call(additional_data, self.adyen.checkout.payments)",
          "364:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "367:             action_required=\"action\" in result.message,",
          "368:             kind=TransactionKind.CONFIRM,",
          "369:             amount=payment_information.amount,",
          "370:             currency=payment_information.currency,",
          "371:             transaction_id=result.get(\"pspReference\", \"\"),",
          "372:             error=result.message.get(\"refusalReason\"),",
          "373:             raw_response=result.message,",
          "",
          "[Added Lines]",
          "362:                 kind=TransactionKind.ACTION_TO_CONFIRM,",
          "364:                 action_required=False,",
          "370:         adyen_auto_capture = self.config.connection_params[\"adyen_auto_capture\"]",
          "371:         kind = TransactionKind.AUTH",
          "372:         if adyen_auto_capture or config.auto_capture:",
          "373:             kind = TransactionKind.CAPTURE",
          "375:         if not transaction:",
          "376:             # We don't have async notification for this payment so we try to proceed",
          "377:             # standard flow for confirming an additional action",
          "378:             return self._process_additional_action(payment_information, kind)",
          "380:         # We already have the ACTION_TO_CONFIRM transaction, it means that",
          "381:         # payment was processed asynchronous and no additional action is required",
          "383:         # Check if we didn't process this transaction asynchronously",
          "384:         transaction_already_processed = payment.transactions.filter(",
          "385:             kind=kind,",
          "386:             is_success=True,",
          "387:             action_required=False,",
          "388:             amount=payment_information.amount,",
          "389:             currency=payment_information.currency,",
          "390:         ).first()",
          "391:         is_success = True",
          "392:         if not transaction_already_processed and config.auto_capture:",
          "393:             response = self.capture_payment(",
          "394:                 payment_information, amount=transaction.amount",
          "396:             is_success = response.is_success",
          "398:         token = transaction.token",
          "399:         if transaction_already_processed:",
          "400:             token = transaction_already_processed.token",
          "404:             action_required=False,",
          "405:             kind=kind,",
          "406:             amount=payment_information.amount,  # type: ignore",
          "407:             currency=payment_information.currency,  # type: ignore",
          "408:             transaction_id=token,  # type: ignore",
          "409:             error=None,",
          "410:             raw_response={},",
          "411:             transaction_already_processed=bool(transaction_already_processed),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "442:             error=\"\",",
          "443:             raw_response=result.message,",
          "444:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:     @require_active_plugin",
          "484:     def void_payment(",
          "485:         self, payment_information: \"PaymentData\", previous_value",
          "486:     ) -> \"GatewayResponse\":",
          "487:         request = request_for_payment_cancel(",
          "488:             payment_information=payment_information,",
          "489:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "490:             token=payment_information.token,  # type: ignore",
          "491:         )",
          "492:         result = api_call(request, self.adyen.payment.cancel)",
          "494:         return GatewayResponse(",
          "495:             is_success=True,",
          "496:             action_required=False,",
          "497:             kind=TransactionKind.VOID,",
          "498:             amount=payment_information.amount,",
          "499:             currency=payment_information.currency,",
          "500:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "501:             error=\"\",",
          "502:             raw_response=result.message,",
          "503:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "211: def test_confirm_payment(payment_adyen_for_order, adyen_plugin):",
          "212:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "213:     gateway_response = GatewayResponse(",
          "215:         action_required=False,",
          "216:         transaction_id=\"882595494831959A\",",
          "217:         is_success=True,",
          "",
          "[Removed Lines]",
          "214:         kind=TransactionKind.AUTH,",
          "",
          "[Added Lines]",
          "214:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         raw_response={},",
          "222:     )",
          "225:         payment=payment_adyen_for_order,",
          "226:         payment_information=payment_info,",
          "227:         kind=TransactionKind.AUTH,",
          "",
          "[Removed Lines]",
          "224:     auth_transaction = create_transaction(",
          "",
          "[Added Lines]",
          "224:     action_transaction = create_transaction(",
          "225:         payment=payment_adyen_for_order,",
          "226:         payment_information=payment_info,",
          "227:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "228:         gateway_response=gateway_response,",
          "229:     )",
          "230:     adyen_plugin = adyen_plugin()",
          "231:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "233:     assert response is not None",
          "234:     assert response.is_success is True",
          "235:     assert response.kind == TransactionKind.AUTH",
          "236:     assert response.amount == action_transaction.amount",
          "237:     assert response.currency == action_transaction.currency",
          "240: def test_confirm_already_processed_payment(payment_adyen_for_order, adyen_plugin):",
          "241:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "242:     gateway_response = GatewayResponse(",
          "243:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "244:         action_required=False,",
          "245:         transaction_id=\"882595494831959A\",",
          "246:         is_success=True,",
          "247:         amount=payment_info.amount,",
          "248:         currency=payment_info.currency,",
          "249:         error=\"\",",
          "250:         raw_response={},",
          "251:     )",
          "252:     create_transaction(",
          "253:         payment=payment_adyen_for_order,",
          "254:         payment_information=payment_info,",
          "255:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "256:         gateway_response=gateway_response,",
          "257:     )",
          "258:     gateway_response.kind = TransactionKind.AUTH",
          "259:     action_transaction = create_transaction(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "233:     assert response is not None",
          "234:     assert response.is_success is True",
          "236:     assert response.amount == auth_transaction.amount",
          "237:     assert response.currency == auth_transaction.currency",
          "",
          "[Removed Lines]",
          "235:     assert response.kind == TransactionKind.CONFIRM",
          "",
          "[Added Lines]",
          "269:     assert response.transaction_already_processed is True",
          "271:     assert response.kind == TransactionKind.AUTH",
          "272:     assert response.amount == action_transaction.amount",
          "273:     assert response.currency == action_transaction.currency",
          "274:     assert payment_adyen_for_order.transactions.count() == 2",
          "277: def test_confirm_payment_with_adyen_auto_capture(payment_adyen_for_order, adyen_plugin):",
          "278:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "279:     gateway_response = GatewayResponse(",
          "280:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "281:         action_required=False,",
          "282:         transaction_id=\"882595494831959A\",",
          "283:         is_success=True,",
          "284:         amount=payment_info.amount,",
          "285:         currency=payment_info.currency,",
          "286:         error=\"\",",
          "287:         raw_response={},",
          "288:     )",
          "290:     auth_transaction = create_transaction(",
          "291:         payment=payment_adyen_for_order,",
          "292:         payment_information=payment_info,",
          "293:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "294:         gateway_response=gateway_response,",
          "295:     )",
          "296:     adyen_plugin = adyen_plugin(adyen_auto_capture=True)",
          "297:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "299:     assert response is not None",
          "300:     assert response.is_success is True",
          "301:     assert response.kind == TransactionKind.CAPTURE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:     assert response.transaction_id == \"882595499620961A\"  # ID returned by Adyen",
          "281: @pytest.mark.vcr",
          "282: def test_capture_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "283:     payment_info = create_payment_information(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: @pytest.mark.vcr",
          "348: def test_void_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "349:     payment_info = create_payment_information(payment_adyen_for_order,)",
          "350:     gateway_response = GatewayResponse(",
          "351:         kind=TransactionKind.AUTH,",
          "352:         action_required=False,",
          "353:         transaction_id=\"883597146907178J\",",
          "354:         is_success=True,",
          "355:         amount=payment_info.amount,",
          "356:         currency=payment_info.currency,",
          "357:         error=\"\",",
          "358:         raw_response={},",
          "359:     )",
          "360:     create_transaction(",
          "361:         payment=payment_adyen_for_order,",
          "362:         payment_information=payment_info,",
          "363:         kind=TransactionKind.AUTH,",
          "364:         gateway_response=gateway_response,",
          "365:     )",
          "367:     response = adyen_plugin().void_payment(payment_info, None)",
          "369:     assert response.is_success is True",
          "370:     assert response.action_required is False",
          "371:     assert response.kind == TransactionKind.VOID",
          "372:     assert response.amount == Decimal(\"1234\")",
          "373:     assert response.currency == order_with_lines.currency",
          "374:     assert response.transaction_id == \"853597151490739D\"  # ID returned by Adyen",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import graphene",
          "8: from ..... import PaymentError, TransactionKind",
          "10: from ...webhooks import handle_additional_actions",
          "",
          "[Removed Lines]",
          "9: from .....models import Transaction",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     api_call_mock.return_value.message = message",
          "37:     # when",
          "42:     # then",
          "43:     payment_adyen_for_checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "38:     response = handle_additional_actions(",
          "39:         request_mock, payment_details_mock, False, False",
          "40:     )",
          "",
          "[Added Lines]",
          "37:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "50:     )",
          "51:     transaction = payment_adyen_for_checkout.transactions.last()",
          "55: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "",
          "[Removed Lines]",
          "52:     assert transaction.kind == \"auth\"",
          "",
          "[Added Lines]",
          "49:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:     api_call_mock.return_value.message = message",
          "82:     # when",
          "131:     # then",
          "132:     payment_adyen_for_checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "83:     response = handle_additional_actions(",
          "84:         request_mock, payment_details_mock, False, False",
          "85:     )",
          "87:     # then",
          "88:     payment_adyen_for_checkout.refresh_from_db()",
          "89:     assert response.status_code == 302",
          "90:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "91:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "92:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "93:     assert (",
          "94:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "95:     )",
          "96:     transaction = payment_adyen_for_checkout.transactions.last()",
          "97:     assert transaction.kind == \"auth\"",
          "100: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "101: def test_handle_additional_actions_adyen_auto_capture(",
          "102:     api_call_mock, payment_adyen_for_checkout",
          "103: ):",
          "104:     # given",
          "105:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "106:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "107:     )",
          "108:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "110:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "112:     checkout = payment_adyen_for_checkout.checkout",
          "113:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "114:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "116:     request_mock = mock.Mock()",
          "117:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "118:     request_mock.POST = {\"payload\": \"test\"}",
          "120:     payment_details_mock = mock.Mock()",
          "121:     message = {",
          "122:         \"resultCode\": \"Test\",",
          "123:     }",
          "124:     api_call_mock.return_value.message = message",
          "126:     # when",
          "127:     response = handle_additional_actions(",
          "128:         request_mock, payment_details_mock, True, False",
          "129:     )",
          "",
          "[Added Lines]",
          "80:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 1",
          "139:     )",
          "140:     transaction = payment_adyen_for_checkout.transactions.last()",
          "202: def test_handle_additional_actions_more_action_required(payment_adyen_for_checkout):",
          "",
          "[Removed Lines]",
          "141:     assert transaction.kind == \"capture\"",
          "144: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.capture\")",
          "145: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "146: def test_handle_additional_actions_auto_capture(",
          "147:     api_call_mock, capture_mock, payment_adyen_for_checkout",
          "148: ):",
          "149:     # given",
          "150:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "151:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "152:     )",
          "153:     payment_adyen_for_checkout.save(update_fields=[\"extra_data\"])",
          "155:     payment_adyen_for_checkout.transactions.create(",
          "156:         amount=payment_adyen_for_checkout.total,",
          "157:         kind=TransactionKind.AUTH,",
          "158:         gateway_response={},",
          "159:         is_success=True,",
          "160:     )",
          "162:     transaction_count = payment_adyen_for_checkout.transactions.all().count()",
          "164:     checkout = payment_adyen_for_checkout.checkout",
          "165:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "166:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "168:     request_mock = mock.Mock()",
          "169:     request_mock.GET = {\"payment\": payment_id, \"checkout\": checkout.pk}",
          "170:     request_mock.POST = {\"payload\": \"test\"}",
          "172:     payment_details_mock = mock.Mock()",
          "173:     message = {",
          "174:         \"resultCode\": \"Test\",",
          "175:     }",
          "176:     api_call_mock.return_value.message = message",
          "178:     capture_mock.return_value = Transaction.objects.create(",
          "179:         payment=payment_adyen_for_checkout,",
          "180:         action_required=False,",
          "181:         kind=TransactionKind.CAPTURE,",
          "182:         gateway_response={},",
          "183:         is_success=True,",
          "184:     )",
          "186:     # when",
          "187:     response = handle_additional_actions(",
          "188:         request_mock, payment_details_mock, False, True",
          "189:     )",
          "191:     # then",
          "192:     payment_adyen_for_checkout.refresh_from_db()",
          "193:     assert response.status_code == 302",
          "194:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "195:     assert f\"resultCode={message['resultCode']}\" in response.url",
          "196:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "197:     assert (",
          "198:         payment_adyen_for_checkout.transactions.all().count() == transaction_count + 2",
          "199:     )",
          "",
          "[Added Lines]",
          "92:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:     payment_details_mock.return_value.message = message",
          "230:     # when",
          "235:     # then",
          "236:     assert response.status_code == 302",
          "",
          "[Removed Lines]",
          "231:     response = handle_additional_actions(",
          "232:         request_mock, payment_details_mock, False, False",
          "233:     )",
          "",
          "[Added Lines]",
          "124:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:     assert f\"checkout={quote_plus(checkout_id)}\" in response.url",
          "243:     assert f\"payment={quote_plus(payment_id)}\" in response.url",
          "246: def test_handle_additional_actions_payment_does_not_exist(payment_adyen_for_checkout):",
          "247:     # given",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     transaction = payment_adyen_for_checkout.transactions.last()",
          "137:     assert transaction.kind == TransactionKind.ACTION_TO_CONFIRM",
          "138:     assert transaction.action_required is True",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "266:     payment_adyen_for_checkout.delete()",
          "268:     # when",
          "273:     # then",
          "274:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "269:     response = handle_additional_actions(",
          "270:         request_mock, payment_details_mock, False, False",
          "271:     )",
          "",
          "[Added Lines]",
          "164:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "302:     }",
          "304:     # when",
          "309:     # then",
          "310:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "305:     response = handle_additional_actions(",
          "306:         request_mock, payment_details_mock, False, False",
          "307:     )",
          "",
          "[Added Lines]",
          "198:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "332:     payment_details_mock.return_value.message = message",
          "334:     # when",
          "339:     # then",
          "340:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "335:     response = handle_additional_actions(",
          "336:         request_mock, payment_details_mock, False, False",
          "337:     )",
          "",
          "[Added Lines]",
          "226:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "362:     payment_details_mock.return_value.message = message",
          "364:     # when",
          "369:     # then",
          "370:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "365:     response = handle_additional_actions(",
          "366:         request_mock, payment_details_mock, False, False",
          "367:     )",
          "",
          "[Added Lines]",
          "254:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "397:     payment_details_mock.return_value.message = message",
          "399:     # when",
          "404:     # then",
          "405:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "400:     response = handle_additional_actions(",
          "401:         request_mock, payment_details_mock, False, False",
          "402:     )",
          "",
          "[Added Lines]",
          "287:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "438:     payment_details_mock.return_value.message = message",
          "440:     # when",
          "445:     # then",
          "446:     assert response.status_code == 400",
          "",
          "[Removed Lines]",
          "441:     response = handle_additional_actions(",
          "442:         request_mock, payment_details_mock, False, False",
          "443:     )",
          "",
          "[Added Lines]",
          "326:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "469:     payment_details_mock.return_value.message = message",
          "471:     # when",
          "476:     # then",
          "477:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "472:     response = handle_additional_actions(",
          "473:         request_mock, payment_details_mock, False, False",
          "474:     )",
          "",
          "[Added Lines]",
          "355:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "505:     payment_details_mock.return_value.message = message",
          "507:     # when",
          "512:     # then",
          "513:     assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "508:     response = handle_additional_actions(",
          "509:         request_mock, payment_details_mock, False, False",
          "510:     )",
          "",
          "[Added Lines]",
          "389:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "541:     api_call_mock.return_value.message = message",
          "543:     # when",
          "548:     # then",
          "549:     payment_adyen_for_checkout.refresh_from_db()",
          "",
          "[Removed Lines]",
          "544:     response = handle_additional_actions(",
          "545:         request_mock, payment_details_mock, False, False",
          "546:     )",
          "",
          "[Added Lines]",
          "423:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         token=token,",
          "257:     )",
          "258:     return api_call(request, adyen_client.payment.capture)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261: def request_for_payment_cancel(",
          "262:     payment_information: \"PaymentData\", merchant_account: str, token: str,",
          "263: ):",
          "264:     return {",
          "265:         \"merchantAccount\": merchant_account,",
          "266:         \"originalReference\": token,",
          "267:         \"reference\": payment_information.graphql_payment_id,",
          "268:     }",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "41:     if not payment_id:",
          "42:         return None",
          "45:     return payment",
          "48: def get_transaction(",
          "49:     payment: \"Payment\", transaction_id: Optional[str], kind: str,",
          "50: ) -> Optional[Transaction]:",
          "52:     return transaction",
          "",
          "[Removed Lines]",
          "43:     _type, payment_id = from_global_id(payment_id)",
          "44:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
          "51:     transaction = payment.transactions.filter(kind=kind, token=transaction_id).first()",
          "",
          "[Added Lines]",
          "43:     try:",
          "44:         _type, db_payment_id = from_global_id(payment_id)",
          "45:     except UnicodeDecodeError:",
          "46:         return None",
          "47:     payment = (",
          "48:         Payment.objects.prefetch_related(\"order\")",
          "49:         .select_related()",
          "50:         .filter(id=db_payment_id)",
          "51:         .first()",
          "52:     )",
          "59:     transaction = payment.transactions.filter(kind=kind, token=transaction_id).last()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     msg = success_msg if is_success else failed_msg",
          "88:     external_notification_event(",
          "90:     )",
          "",
          "[Removed Lines]",
          "89:         order=payment.order, user=None, message=msg, payment=payment",
          "",
          "[Added Lines]",
          "97:         order=payment.order,",
          "98:         user=None,",
          "99:         message=msg,",
          "100:         parameters={\"service\": payment.gateway, \"id\": payment.token},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     transaction_id = notification.get(\"pspReference\")",
          "110:     transaction = payment.transactions.filter(",
          "115:         # We already have this transaction",
          "116:         return",
          "",
          "[Removed Lines]",
          "111:         token=transaction_id, kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE]",
          "112:     ).first()",
          "114:     if transaction and transaction.is_success:",
          "",
          "[Added Lines]",
          "122:         token=transaction_id,",
          "123:         action_required=False,",
          "124:         is_success=True,",
          "125:         kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "126:     ).last()",
          "128:     if transaction:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:     if event_handler:",
          "505:         event_handler(notification, gateway_config)",
          "506:         return HttpResponse(\"[accepted]\")",
          "510: def handle_additional_actions(",
          "515: ):",
          "516:     payment_id = request.GET.get(\"payment\")",
          "517:     checkout_pk = request.GET.get(\"checkout\")",
          "",
          "[Removed Lines]",
          "507:     return HttpResponseNotFound()",
          "511:     request: WSGIRequest,",
          "512:     payment_details: Callable,",
          "513:     adyen_auto_capture: bool,",
          "514:     auto_capture: bool,",
          "",
          "[Added Lines]",
          "521:     return HttpResponse(\"[accepted]\")",
          "525:     request: WSGIRequest, payment_details: Callable,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "552:     except PaymentError as e:",
          "553:         return HttpResponseBadRequest(str(e))",
          "557:     redirect_url = prepare_redirect_url(payment_id, checkout_pk, result, return_url)",
          "558:     return redirect(redirect_url)",
          "",
          "[Removed Lines]",
          "555:     handle_api_response(payment, result, adyen_auto_capture, auto_capture)",
          "",
          "[Added Lines]",
          "566:     handle_api_response(payment, result)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "607: def handle_api_response(",
          "612: ):",
          "617:     payment_data = create_payment_information(",
          "618:         payment=payment, payment_token=payment.token,",
          "619:     )",
          "",
          "[Removed Lines]",
          "608:     payment: Payment,",
          "609:     response: Adyen.Adyen,",
          "610:     adyen_auto_capture: bool,",
          "611:     auto_capture: bool,",
          "613:     kind = TransactionKind.AUTH",
          "614:     if adyen_auto_capture:",
          "615:         kind = TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "619:     payment: Payment, response: Adyen.Adyen,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "623:     result_code = response.message[\"resultCode\"].strip().lower()",
          "624:     is_success = result_code not in FAILED_STATUSES",
          "629:     gateway_response = GatewayResponse(",
          "630:         is_success=is_success,",
          "633:         amount=payment_data.amount,",
          "634:         currency=payment_data.currency,",
          "635:         transaction_id=response.message.get(\"pspReference\", \"\"),",
          "",
          "[Removed Lines]",
          "626:     # action_required is True as we want to call gateway.confirm from the",
          "627:     # checkoutComplete mutation",
          "631:         action_required=True,",
          "632:         kind=kind,",
          "",
          "[Added Lines]",
          "630:     action_required = False",
          "631:     if \"action\" in response.message:",
          "632:         action_required = True",
          "636:         action_required=action_required,",
          "637:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "638:         action_required_data=response.message.get(\"action\"),",
          "639:     )",
          "642:         payment=payment,",
          "645:         payment_information=payment_data,",
          "646:         gateway_response=gateway_response,",
          "647:     )",
          "",
          "[Removed Lines]",
          "641:     transaction = create_transaction(",
          "643:         kind=kind,",
          "644:         action_required=True,",
          "649:     if auto_capture:",
          "650:         transaction = capture(payment, amount=transaction.amount)",
          "652:     gateway_postprocess(transaction, payment)",
          "",
          "[Added Lines]",
          "646:     create_transaction(",
          "648:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "649:         action_required=action_required,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/dummy/tests/test_dummy.py||saleor/payment/gateways/dummy/tests/test_dummy.py": [
          "File: saleor/payment/gateways/dummy/tests/test_dummy.py -> saleor/payment/gateways/dummy/tests/test_dummy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     payment.captured_amount = initial_captured_amount",
          "167:     payment.save()",
          "168:     txn = gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "169:     assert txn.kind == TransactionKind.REFUND",
          "170:     assert txn.is_success",
          "171:     assert txn.payment == payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     payment.refresh_from_db()",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py||saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py": [
          "File: saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py -> saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: )",
          "171: def test_capture_success(amount, charge_status, token, payment_txn_preauth):",
          "172:     payment_txn_preauth.gateway = \"mirumee.payments.dummy_credit_card\"",
          "173:     transaction = payment_txn_preauth.transactions.last()",
          "174:     transaction.token = token",
          "175:     transaction.save()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:     payment_txn_preauth.save()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:     payment.captured_amount = initial_captured_amount",
          "265:     payment.save()",
          "266:     txn = gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "267:     assert txn.kind == TransactionKind.REFUND",
          "268:     assert txn.is_success",
          "269:     assert txn.payment == payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     payment.refresh_from_db()",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     payment_method_info: Optional[PaymentMethodInfo] = None",
          "38:     raw_response: Optional[Dict[str, str]] = None",
          "39:     action_required_data: Optional[JSONType] = None",
          "42: @dataclass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     # Some gateway can process transaction asynchronously. This value define if we",
          "41:     # should create new transaction based on this response",
          "42:     transaction_already_processed: bool = False",
          "",
          "---------------"
        ],
        "saleor/payment/migrations/0019_auto_20200812_1028.py||saleor/payment/migrations/0019_auto_20200812_1028.py": [
          "File: saleor/payment/migrations/0019_auto_20200812_1028.py -> saleor/payment/migrations/0019_auto_20200812_1028.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 3.1 on 2020-08-12 10:28",
          "3: from django.db import migrations, models",
          "6: class Migration(migrations.Migration):",
          "8:     dependencies = [",
          "9:         (\"payment\", \"0018_auto_20200810_1310\"),",
          "10:     ]",
          "12:     operations = [",
          "13:         migrations.AddField(",
          "14:             model_name=\"transaction\",",
          "15:             name=\"already_processed\",",
          "16:             field=models.BooleanField(default=False),",
          "17:         ),",
          "18:         migrations.AlterField(",
          "19:             model_name=\"transaction\",",
          "20:             name=\"kind\",",
          "21:             field=models.CharField(",
          "22:                 choices=[",
          "23:                     (\"auth\", \"Authorization\"),",
          "24:                     (\"pending\", \"Pending\"),",
          "25:                     (\"action_to_confirm\", \"Action to confirm\"),",
          "26:                     (\"refund\", \"Refund\"),",
          "27:                     (\"refund_ongoing\", \"Refund in progress\"),",
          "28:                     (\"capture\", \"Capture\"),",
          "29:                     (\"void\", \"Void\"),",
          "30:                     (\"confirm\", \"Confirm\"),",
          "31:                     (\"cancel\", \"Cancel\"),",
          "32:                 ],",
          "33:                 max_length=25,",
          "34:             ),",
          "35:         ),",
          "36:     ]",
          "",
          "---------------"
        ],
        "saleor/payment/models.py||saleor/payment/models.py": [
          "File: saleor/payment/models.py -> saleor/payment/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:         authorized_txns = [",
          "126:             txn",
          "127:             for txn in transactions",
          "129:         ]",
          "131:         # Calculate authorized amount from all succeeded auth transactions",
          "",
          "[Removed Lines]",
          "128:             if txn.kind == TransactionKind.AUTH and txn.is_success",
          "",
          "[Added Lines]",
          "128:             if txn.kind == TransactionKind.AUTH",
          "129:             and txn.is_success",
          "130:             and not txn.action_required",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     def is_authorized(self):",
          "148:         return any(",
          "149:             [",
          "151:                 for txn in self.transactions.all()",
          "152:             ]",
          "153:         )",
          "",
          "[Removed Lines]",
          "150:                 txn.kind == TransactionKind.AUTH and txn.is_success",
          "",
          "[Added Lines]",
          "152:                 txn.kind == TransactionKind.AUTH",
          "153:                 and txn.is_success",
          "154:                 and not txn.action_required",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:     )",
          "215:     customer_id = models.CharField(max_length=256, null=True)",
          "216:     gateway_response = JSONField(encoder=DjangoJSONEncoder)",
          "218:     class Meta:",
          "219:         ordering = (\"pk\",)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     already_processed = models.BooleanField(default=False)",
          "",
          "---------------"
        ],
        "saleor/payment/tests/test_payment.py||saleor/payment/tests/test_payment.py": [
          "File: saleor/payment/tests/test_payment.py -> saleor/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:     assert exc.value.message == \"Amount should be a positive number.\"",
          "266:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "267:     with pytest.raises(PaymentError) as exc:",
          "268:         gateway.capture(payment, Decimal(\"10\"))",
          "269:     assert exc.value.message == \"This payment cannot be captured.\"",
          "271:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "272:     with pytest.raises(PaymentError) as exc:",
          "273:         gateway.capture(payment, Decimal(\"1000000\"))",
          "274:     assert exc.value.message == (\"Unable to charge more than un-captured amount.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:     payment.save()",
          "273:     payment.save()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:     assert exc.value.message == \"Amount should be a positive number.\"",
          "287:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "288:     with pytest.raises(PaymentError) as exc:",
          "289:         gateway.refund(payment, Decimal(\"1\"))",
          "290:     assert exc.value.message == \"This payment cannot be refunded.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:     payment.save()",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:     return payment",
          "135: def create_transaction(",
          "136:     payment: Payment,",
          "137:     kind: str,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: def get_already_processed_transaction(",
          "136:     payment: \"Payment\", gateway_response: GatewayResponse",
          "137: ):",
          "138:     transaction = payment.transactions.filter(",
          "139:         is_success=gateway_response.is_success,",
          "140:         action_required=gateway_response.action_required,",
          "141:         token=gateway_response.transaction_id,",
          "142:         kind=gateway_response.kind,",
          "143:         amount=gateway_response.amount,",
          "144:         currency=gateway_response.currency,",
          "145:     ).last()",
          "146:     return transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:     return txn",
          "174: def clean_capture(payment: Payment, amount: Decimal):",
          "175:     \"\"\"Check if payment can be captured.\"\"\"",
          "176:     if amount <= 0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: def get_already_processed_transaction_or_create_new_transaction(",
          "189:     payment: Payment,",
          "190:     kind: str,",
          "191:     payment_information: PaymentData,",
          "192:     action_required: bool = False,",
          "193:     gateway_response: GatewayResponse = None,",
          "194:     error_msg=None,",
          "195: ) -> Transaction:",
          "196:     if gateway_response and gateway_response.transaction_already_processed:",
          "197:         transaction = get_already_processed_transaction(payment, gateway_response)",
          "198:         if transaction:",
          "199:             return transaction",
          "200:     return create_transaction(",
          "201:         payment,",
          "202:         kind,",
          "203:         payment_information,",
          "204:         action_required,",
          "205:         gateway_response,",
          "206:         error_msg,",
          "207:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212: def gateway_postprocess(transaction, payment):",
          "213:     if not transaction.is_success:",
          "214:         return",
          "216:     if transaction.action_required:",
          "217:         payment.to_confirm = True",
          "218:         payment.save(update_fields=[\"to_confirm\"])",
          "219:         return",
          "221:     changed_fields = []",
          "222:     # to_confirm is defined by the transaction.action_required. Payment doesn't",
          "223:     # require confirmation when we got action_required == False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     if transaction.already_processed:",
          "256:         return",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:     if transaction_kind in {",
          "231:         TransactionKind.CAPTURE,",
          "233:         TransactionKind.REFUND_REVERSED,",
          "234:     }:",
          "235:         payment.captured_amount += transaction.amount",
          "",
          "[Removed Lines]",
          "232:         TransactionKind.CONFIRM,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:             changed_fields += [\"charge_status\", \"captured_amount\", \"modified\"]",
          "272:     if changed_fields:",
          "273:         payment.save(update_fields=changed_fields)",
          "276: def fetch_customer_id(user: User, gateway: str):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     transaction.already_processed = True",
          "310:     transaction.save(update_fields=[\"already_processed\"])",
          "",
          "---------------"
        ],
        "saleor/tests/fixtures.py||saleor/tests/fixtures.py": [
          "File: saleor/tests/fixtures.py -> saleor/tests/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:     payment.transactions.create(",
          "1528:         amount=payment.total,",
          "1530:         gateway_response={},",
          "1531:         is_success=True,",
          "1532:         action_required=True,",
          "",
          "[Removed Lines]",
          "1529:         kind=TransactionKind.CAPTURE,",
          "",
          "[Added Lines]",
          "1529:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "",
          "---------------"
        ]
      }
    }
  ]
}