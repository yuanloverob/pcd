{
  "cve_id": "CVE-2023-34411",
  "cve_desc": "The xml-rs crate before 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid <! token (such as <!DOCTYPEs/%<!A nesting) in an XML document. The earliest affected version is 0.8.9.",
  "repo": "00xc/xml-rs",
  "patch_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
  "patch_info": {
    "commit_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "repo": "00xc/xml-rs",
    "commit_url": "https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "files": [
      "README.md",
      "src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs"
    ],
    "message": "Parse DOCTYPE markup declarations",
    "before_after_code_files": [
      "src/reader/lexer.rs||src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs||tests/xmlconf.rs"
    ]
  },
  "patch_diff": {
    "src/reader/lexer.rs||src/reader/lexer.rs": [
      "File: src/reader/lexer.rs -> src/reader/lexer.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     ReferenceStart,",
      "56:     ReferenceEnd,",
      "57: }",
      "59: impl fmt::Display for Token {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     MarkupDeclarationStart,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:     }",
      "144: }",
      "146: enum State {",
      "148:     Normal,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: #[derive(Copy, Clone)]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "154:     CommentStarted,",
      "156:     DoctypeStarted(DoctypeStartedSubstate),",
      "160:     CDataStarted(CDataStartedSubstate),",
      "",
      "[Removed Lines]",
      "158:     DoctypeFinishing(u8),",
      "",
      "[Added Lines]",
      "161:     InsideMarkupDeclaration,",
      "163:     InsideDoctype,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "174:     InsideCdata,",
      "176:     InsideProcessingInstruction,",
      "177: }",
      "179: #[derive(Copy, Clone)]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:     InsideMarkupDeclarationQuotedString(QuoteStyle),",
      "184: }",
      "186: #[derive(Copy, Clone, Eq, PartialEq)]",
      "187: enum QuoteStyle {",
      "188:     Single, Double",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "229:     head_pos: TextPosition,",
      "230:     char_queue: VecDeque<char>,",
      "231:     st: State,",
      "232:     skip_errors: bool,",
      "233:     inside_token: bool,",
      "234:     eof_handled: bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:     normal_state: State,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "248:             head_pos: TextPosition::new(),",
      "249:             char_queue: VecDeque::with_capacity(4),  // TODO: check size",
      "250:             st: State::Normal,",
      "251:             skip_errors: false,",
      "252:             inside_token: false,",
      "253:             eof_handled: false",
      "254:         }",
      "255:     }",
      "268:     #[inline]",
      "",
      "[Removed Lines]",
      "259:     #[inline]",
      "260:     pub fn enable_errors(&mut self) { self.skip_errors = false; }",
      "264:     #[inline]",
      "265:     pub fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "[Added Lines]",
      "265:             normal_state: State::Normal,",
      "274:     pub(crate) fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "326:             State::TagStarted | State::CommentOrCDataOrDoctypeStarted |",
      "327:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
      "328:             State::CommentClosing(ClosingSubstate::Second) |",
      "330:             State::InsideProcessingInstruction | State::ProcessingInstructionClosing |",
      "332:                 Err(self.error(\"Unexpected end of stream\")),",
      "333:             State::EmptyTagClosing =>",
      "334:                 Ok(Some(Token::Character('/'))),",
      "",
      "[Removed Lines]",
      "329:             State::InsideComment |",
      "331:             State::DoctypeFinishing(_) =>",
      "",
      "[Added Lines]",
      "338:             State::InsideComment | State::InsideMarkupDeclaration |",
      "340:             State::InsideDoctype | State::InsideMarkupDeclarationQuotedString(_) =>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "369:             State::CommentStarted                 => self.comment_started(c),",
      "370:             State::CDataStarted(s)                => self.cdata_started(c, s),",
      "371:             State::DoctypeStarted(s)              => self.doctype_started(c, s),",
      "373:             State::EmptyTagClosing                => self.empty_element_closing(c),",
      "374:             State::CommentClosing(s)              => self.comment_closing(c, s),",
      "375:             State::CDataClosing(s)                => self.cdata_closing(c, s),",
      "",
      "[Removed Lines]",
      "372:             State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),",
      "",
      "[Added Lines]",
      "381:             State::InsideDoctype                  => self.inside_doctype(c),",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "378:             State::InsideCdata                    => self.inside_cdata(c),",
      "379:             State::InsideProcessingInstruction    => self.inside_processing_instruction(c),",
      "380:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
      "381:         }",
      "382:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390:             State::InsideMarkupDeclaration       => self.markup_declaration(c),",
      "391:             State::InsideMarkupDeclarationQuotedString(q) => self.markup_declaration_string(c, q),",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "393:         Ok(Some(token))",
      "394:     }",
      "396:     #[inline]",
      "397:     fn move_to_with_unread(&mut self, st: State, cs: &[char], token: Token) -> Result {",
      "398:         self.char_queue.extend(cs.iter().copied());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "407:     #[inline]",
      "408:     fn move_to_and_reset_normal(&mut self, st: State, token: Token) -> Result {",
      "409:         self.normal_state = st;",
      "410:         self.st = st;",
      "411:         Ok(Some(token))",
      "412:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "461:     fn tag_opened(&mut self, c: char) -> Result {",
      "462:         match c {",
      "463:             '?'                        => self.move_to_with(State::InsideProcessingInstruction, Token::ProcessingInstructionStart),",
      "465:             '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),",
      "468:             _                          => self.handle_error(\"<\", c)",
      "469:         }",
      "470:     }",
      "",
      "[Removed Lines]",
      "464:             '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),",
      "466:             _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "467:             _ if is_name_char(c)       => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "",
      "[Added Lines]",
      "483:             '/'                        => self.move_to_with(self.normal_state, Token::ClosingTagStart),",
      "485:             _ if is_whitespace_char(c) => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "486:             _ if is_name_char(c)       => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "475:             '-' => self.move_to(State::CommentStarted),",
      "476:             '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),",
      "477:             'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),",
      "478:             _ => self.handle_error(\"<!\", c),",
      "479:         }",
      "480:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "497:             'E' | 'A' | 'N' if matches!(self.normal_state, State::InsideDoctype) => self.move_to_with(State::InsideMarkupDeclaration, Token::MarkupDeclarationStart),",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "500:         )",
      "501:     }",
      "504:     fn doctype_started(&mut self, c: char, s: DoctypeStartedSubstate) -> Result {",
      "505:         use self::DoctypeStartedSubstate::{D, DO, DOC, DOCT, DOCTY, DOCTYP};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "524:     fn markup_declaration(&mut self, c: char) -> Result {",
      "525:         match c {",
      "526:             '<'                        => self.handle_error(\"<!\", c),",
      "527:             '>'                        => self.move_to_with(self.normal_state, Token::TagEnd),",
      "528:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "529:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "530:             '\"'                        => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Double), Token::DoubleQuote),",
      "531:             '\\''                       => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Single), Token::SingleQuote),",
      "532:             _ => Ok(None),",
      "533:         }",
      "534:     }",
      "536:     fn markup_declaration_string(&mut self, c: char, q: QuoteStyle) -> Result {",
      "537:         match c {",
      "538:             '\"' if q == QuoteStyle::Double  => self.move_to_with(State::InsideMarkupDeclaration, Token::DoubleQuote),",
      "539:             '\\'' if q == QuoteStyle::Single => self.move_to_with(State::InsideMarkupDeclaration, Token::SingleQuote),",
      "540:             _ => Ok(None),",
      "541:         }",
      "542:     }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "509:             DOC    ; 'T' ; DOCT   ; \"<!DOC\",",
      "510:             DOCT   ; 'Y' ; DOCTY  ; \"<!DOCT\",",
      "511:             DOCTY  ; 'P' ; DOCTYP ; \"<!DOCTY\";",
      "513:         )",
      "514:     }",
      "518:         match c {",
      "522:             _ => Ok(None),",
      "523:         }",
      "524:     }",
      "",
      "[Removed Lines]",
      "512:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_with(State::DoctypeFinishing(1), Token::DoctypeStart)",
      "517:     fn doctype_finishing(&mut self, c: char, d: u8) -> Result {",
      "519:             '<' => self.move_to(State::DoctypeFinishing(d + 1)),",
      "520:             '>' if d == 1 => self.move_to_with(State::Normal, Token::TagEnd),",
      "521:             '>' => self.move_to(State::DoctypeFinishing(d - 1)),",
      "",
      "[Added Lines]",
      "553:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_and_reset_normal(State::InsideDoctype, Token::DoctypeStart)",
      "558:     fn inside_doctype(&mut self, c: char) -> Result {",
      "560:             '>' => self.move_to_and_reset_normal(State::Normal, Token::TagEnd),",
      "561:             '<'                        => self.move_to(State::TagStarted),",
      "562:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "563:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "527:     fn processing_instruction_closing(&mut self, c: char) -> Result {",
      "528:         match c {",
      "530:             _ => self.move_to_with_unread(State::InsideProcessingInstruction, &[c], Token::Character('?')),",
      "531:         }",
      "532:     }",
      "",
      "[Removed Lines]",
      "529:             '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),",
      "",
      "[Added Lines]",
      "571:             '>' => self.move_to_with(self.normal_state, Token::ProcessingInstructionEnd),",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "535:     fn empty_element_closing(&mut self, c: char) -> Result {",
      "536:         match c {",
      "539:         }",
      "540:     }",
      "",
      "[Removed Lines]",
      "537:             '>' => self.move_to_with(State::Normal, Token::EmptyTagEnd),",
      "538:             _ => self.move_to_with_unread(State::Normal, &[c], Token::Character('/')),",
      "",
      "[Added Lines]",
      "579:             '>' => self.move_to_with(self.normal_state, Token::EmptyTagEnd),",
      "580:             _ => self.move_to_with_unread(self.normal_state, &[c], Token::Character('/')),",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "547:                 _ => self.move_to_with_unread(State::InsideComment, &[c], Token::Character('-')),",
      "548:             },",
      "549:             ClosingSubstate::Second => match c {",
      "552:                 _ => self.handle_error(\"--\", c),",
      "553:             },",
      "",
      "[Removed Lines]",
      "550:                 '>' => self.move_to_with(State::Normal, Token::CommentEnd),",
      "",
      "[Added Lines]",
      "592:                 '>' => self.move_to_with(self.normal_state, Token::CommentEnd),",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "576:                 _ => self.move_to_with_unread(State::Normal, &[c], Token::Character(']')),",
      "577:             },",
      "578:             ClosingSubstate::Second => match c {",
      "580:                 _ => self.move_to_with_unread(State::Normal, &[']', c], Token::Character(']')),",
      "581:             },",
      "582:         }",
      "",
      "[Removed Lines]",
      "579:                 '>' => self.move_to_with(State::Normal, Token::CDataEnd),",
      "",
      "[Added Lines]",
      "621:                 '>' => self.move_to_with(self.normal_state, Token::CDataEnd),",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "825:     #[test]",
      "826:     fn doctype_with_internal_subset_test() {",
      "827:         let (mut lex, mut buf) = make_lex_and_buf(",
      "829:         );",
      "830:         assert_oks!(for lex and buf ;",
      "831:             Token::OpeningTagStart",
      "832:             Token::Character('a')",
      "833:             Token::TagEnd",
      "834:             Token::DoctypeStart",
      "835:             Token::TagEnd",
      "836:             Token::Whitespace(' ')",
      "837:         );",
      "838:         assert_none!(for lex and buf);",
      "839:     }",
      "841:     #[test]",
      "842:     fn end_of_stream_handling_ok() {",
      "843:         macro_rules! eof_check(",
      "",
      "[Removed Lines]",
      "828:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba> ]> \"#",
      "",
      "[Added Lines]",
      "870:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba \">>>>>\"> ]> \"#",
      "877:             Token::MarkupDeclarationStart",
      "878:             Token::DoubleQuote",
      "879:             Token::DoubleQuote",
      "880:             Token::TagEnd",
      "881:             Token::TagEnd",
      "882:             Token::Whitespace(' ')",
      "883:         );",
      "884:         assert_none!(for lex and buf);",
      "885:     }",
      "887:     #[test]",
      "888:     fn doctype_internal_pi_comment() {",
      "889:         let (mut lex, mut buf) = make_lex_and_buf(",
      "890:             \"<!DOCTYPE a [\\n<!ELEMENT leopard ANY> <!-- <?non?>--> <?pi > ?> \\n]>\"",
      "891:         );",
      "892:         assert_oks!(for lex and buf ;",
      "893:             Token::DoctypeStart",
      "894:             Token::MarkupDeclarationStart",
      "896:             Token::CommentStart",
      "898:             Token::Character('<')",
      "899:             Token::Character('?')",
      "900:             Token::Character('n')",
      "901:             Token::Character('o')",
      "902:             Token::Character('n')",
      "903:             Token::Character('?')",
      "904:             Token::Character('>')",
      "905:             Token::CommentEnd",
      "906:             Token::ProcessingInstructionStart",
      "907:             Token::Character('p')",
      "908:             Token::Character('i')",
      "909:             Token::Whitespace(' ')",
      "910:             Token::TagEnd // not really",
      "911:             Token::Whitespace(' ')",
      "912:             Token::ProcessingInstructionEnd",
      "913:             Token::TagEnd // DTD",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
      "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:     pub fn inside_cdata(&mut self, t: Token) -> Option<Result> {",
      "8:         match t {",
      "9:             Token::CDataEnd => {",
      "11:                 let event = if self.config.cdata_to_characters {",
      "12:                     None",
      "13:                 } else {",
      "",
      "[Removed Lines]",
      "10:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
      "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:     pub fn inside_doctype(&mut self, t: Token) -> Option<Result> {",
      "7:         match t {",
      "8:             Token::TagEnd => {",
      "10:                 self.into_state_continue(State::OutsideTag)",
      "11:             }",
      "13:             _ => None,",
      "14:         }",
      "15:     }",
      "",
      "[Removed Lines]",
      "9:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "12:             Token::MarkupDeclarationStart => {",
      "13:                 self.into_state_continue(State::InsideDoctypeMarkupDeclaration)",
      "14:             },",
      "16:             _ => None,",
      "17:         }",
      "18:     }",
      "20:     pub fn inside_doctype_markup_declaration(&mut self, t: Token) -> Option<Result> {",
      "21:         match t {",
      "22:             Token::TagEnd => {",
      "23:                 self.into_state_continue(State::InsideDoctype)",
      "24:             }",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
      "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:             ProcessingInstructionSubstate::PIInsideData => match t {",
      "70:                 Token::ProcessingInstructionEnd => {",
      "72:                     let name = self.data.take_name();",
      "73:                     let data = self.take_buf();",
      "74:                     self.into_state_emit(",
      "",
      "[Removed Lines]",
      "71:                     self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/mod.rs||src/reader/parser/mod.rs": [
      "File: src/reader/parser/mod.rs -> src/reader/parser/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     InsideCData,",
      "140:     InsideDeclaration(DeclarationSubstate),",
      "141:     InsideDoctype,",
      "142:     InsideReference(Box<State>),",
      "143: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     InsideDoctypeMarkupDeclaration,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "337:             State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),",
      "338:             State::InsideDeclaration(s)           => self.inside_declaration(t, s),",
      "339:             State::InsideDoctype                  => self.inside_doctype(t),",
      "340:             State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),",
      "341:             State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),",
      "342:             State::InsideComment                  => self.inside_comment(t),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:             State::InsideDoctypeMarkupDeclaration => self.inside_doctype_markup_declaration(t),",
      "",
      "---------------"
    ],
    "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
      "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:                         self.next_pos();",
      "85:                         self.into_state(State::InsideDoctype, next_event)",
      "86:                     }",
      "",
      "[Removed Lines]",
      "84:                         self.lexer.disable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/xmlconf.rs||tests/xmlconf.rs": [
      "File: tests/xmlconf.rs -> tests/xmlconf.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:         \"rmt-e2e-18\", // External entity containing start of entity declaration is base URI for system identifier",
      "117:         \"rmt-e2e-19\", // Parameter entities and character references are included-in-literal, but general entities are bypassed.",
      "118:         \"rmt-e2e-22\", // UTF-8 entities may start with a BOM",
      "120:         \"rmt-e2e-34\", // A non-deterministic content model is an error even if the element type is not used.",
      "121:         \"rmt-e2e-50\", // All line-ends are normalized, even those not passed to the application. NB this can only be tested effectively in XML 1.1, since CR is in the S production; in 1.1 we can use NEL which isn't.",
      "122:         \"rmt-e2e-55\", // A reference to an unparsed entity in an entity value is an error rather than forbidden (unless the entity is referenced, of course)",
      "",
      "[Removed Lines]",
      "119:         \"rmt-e2e-24\", // Either the built-in entity or a character reference can be used to represent greater-than after two close-square-brackets",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "279: #[test] fn oasis() {",
      "280:     run_suite(\"oasis/oasis.xml\", &[",
      "285:         \"o-p01fail1\", // S cannot occur before the prolog",
      "286:         \"o-p01fail2\", // comments cannot occur before the prolog",
      "287:         \"o-p01fail3\", // only one document element",
      "288:         \"o-p09fail1\", // EntityValue excludes '%'",
      "289:         \"o-p09fail2\", // EntityValue excludes '&'",
      "290:         \"o-p09fail3\", // incomplete character reference",
      "296:         \"o-p12fail2\", // '\\' excluded",
      "297:         \"o-p12fail3\", // entity references excluded",
      "298:         \"o-p12fail6\", // built-in entity refs excluded",
      "299:         \"o-p12fail7\", // The public ID has a tab character, which is disallowed",
      "300:         \"o-p14fail3\", // \"]]>\" excluded",
      "",
      "[Removed Lines]",
      "281:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "282:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "291:         \"o-p09fail4\", // quote types must match",
      "292:         \"o-p09fail5\", // quote types must match",
      "293:         \"o-p11fail1\", // quote types must match",
      "294:         \"o-p11fail2\", // cannot contain delimiting quotes",
      "295:         \"o-p12fail1\", // '\"' excluded",
      "",
      "[Added Lines]",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "288:         \"o-p11pass1\", // p11pass1.xml       system literals may not contain     URI fragments",
      "289:         \"o-p12fail1\", // p12fail1.xml       '\"' excluded",
      "292:         \"o-p12fail4\", // p12fail4.xml       '>' excluded",
      "293:         \"o-p12fail5\", // p12fail5.xml       '<' excluded",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:         \"o-p22fail2\", // prolog must start with XML decl",
      "304:         \"o-p23fail1\", // \"xml\" must be lower-case",
      "305:         \"o-p27fail1\", // References aren't allowed in Misc,     even if they would resolve to valid Misc.",
      "307:         \"o-p30fail1\", // An XML declaration is not the same as a TextDecl",
      "308:         \"o-p31fail1\", // external subset excludes doctypedecl",
      "309:         \"o-p32fail3\", // initial S is required",
      "310:         \"o-p40fail1\", // S is required between attributes",
      "311:         \"o-p44fail4\", // Whitespace required between attributes.",
      "313:         \"o-p45fail2\", // S before contentspec is required.",
      "314:         \"o-p45fail3\", // only one content spec",
      "315:         \"o-p45fail4\", // no comments in declarations (contrast with SGML)",
      "",
      "[Removed Lines]",
      "306:         \"o-p29fail1\", // A processor must not pass unknown declaration types.",
      "312:         \"o-p45fail1\", // ELEMENT must be upper case.",
      "",
      "[Added Lines]",
      "306:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "371:         \"o-p64fail1\", // section delimiters must balance",
      "372:         \"o-p64fail2\", // section delimiters must balance",
      "373:         \"o-p66fail5\", // no references to non-characters",
      "374:         \"o-p69fail1\", // terminating ';' is required",
      "375:         \"o-p69fail2\", // no S after '%'",
      "376:         \"o-p69fail3\", // no S before ';'",
      "377:         \"o-p70fail1\", // This is neither",
      "378:         \"o-p71fail1\", // S is required before EntityDef",
      "379:         \"o-p71fail2\", // Entity name is a Name, not an NMToken",
      "381:         \"o-p71fail4\", // S is required after \"<!ENTITY\"",
      "382:         \"o-p72fail1\", // S is required after \"<!ENTITY\"",
      "383:         \"o-p72fail2\", // S is required after '%'",
      "384:         \"o-p72fail3\", // S is required after name",
      "385:         \"o-p72fail4\", // Entity name is a name, not an NMToken",
      "386:         \"o-p73fail1\", // No typed replacement text",
      "387:         \"o-p73fail2\", // Only one replacement value",
      "",
      "[Removed Lines]",
      "380:         \"o-p71fail3\", // no S after \"<!\"",
      "",
      "[Added Lines]",
      "369:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "380:         \"o-p76fail4\", // p76fail4.xml       notation names are Names",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "438:         \"content02\", // No whitespace before \"*\" in content model",
      "439:         \"content03\", // No whitespace before \"+\" in content model",
      "440:         \"decl01\", // External entities may not have standalone decls.",
      "443:         \"dtd02\", // PE name immediately after \"%\"",
      "444:         \"dtd03\", // PE name immediately followed by \";\"",
      "445:         \"dtd04\", // PUBLIC literal must be quoted",
      "",
      "[Removed Lines]",
      "441:         \"nwf-dtd00\", // Comma mandatory in content model",
      "442:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "451:         \"encoding04\", // Illegal character \":\" in encoding name",
      "452:         \"encoding05\", // Illegal character \"@\" in encoding name",
      "453:         \"encoding06\", // Illegal character \"+\" in encoding name",
      "454:         \"pubid01\", // Illegal entity ref in public ID",
      "455:         \"pubid02\", // Illegal characters in public ID",
      "456:         \"pubid03\", // Illegal characters in public ID",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:         \"nwf-dtd00\", // Comma mandatory in content model",
      "449:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "450:         \"pi\", // pi.xml      No space between PI target name and data",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "502:         \"not-wf-sa-060\", // Invalid type NAME defined in ATTLIST.",
      "503:         \"not-wf-sa-061\", // External entity declarations require whitespace between public     and system IDs.",
      "504:         \"not-wf-sa-062\", // Entity declarations need space after the entity name.",
      "506:         \"not-wf-sa-064\", // Space is required between attribute type and default values     in <!ATTLIST...> declarations.",
      "507:         \"not-wf-sa-065\", // Space is required between attribute name and type     in <!ATTLIST...> declarations.",
      "508:         \"not-wf-sa-066\", // Required whitespace is missing.",
      "",
      "[Removed Lines]",
      "505:         \"not-wf-sa-063\", // Conditional sections may only appear in the external     DTD subset.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "523:         \"not-wf-sa-101\", // Space is not permitted in an encoding name.",
      "524:         \"not-wf-sa-105\", // Invalid placement of CDATA section.",
      "525:         \"not-wf-sa-106\", // Invalid placement of entity declaration.",
      "527:         \"not-wf-sa-113\", // Parameter entity values must use valid reference syntax;     this reference is malformed.",
      "528:         \"not-wf-sa-114\", // General entity values must use valid reference syntax;     this reference is malformed.",
      "529:         \"not-wf-sa-121\", // A name of an ENTITY was started with an invalid character.",
      "",
      "[Removed Lines]",
      "526:         \"not-wf-sa-107\", // Invalid document type declaration.  CDATA alone is invalid.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "566:         \"not-wf-sa-174\", // Character FFFF is not legal anywhere in an XML document.",
      "567:         \"not-wf-sa-175\", // Character FFFF is not legal anywhere in an XML document.",
      "568:         \"not-wf-sa-177\", // Character FFFF is not legal anywhere in an XML document.",
      "570:         \"not-wf-sa-180\", // The Entity Declared WFC requires entities to be declared     before they are used in an attribute list declaration.",
      "571:         \"not-wf-sa-183\", // Mixed content declarations may not include content particles.",
      "572:         \"not-wf-sa-184\", // In mixed content models, element names must not be     parenthesized.",
      "",
      "[Removed Lines]",
      "569:         \"not-wf-sa-179\", // Invalid syntax matching double quote is missing.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f37af927341350f384fedfdd8e30092f089952a8",
      "candidate_info": {
        "commit_hash": "f37af927341350f384fedfdd8e30092f089952a8",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/f37af927341350f384fedfdd8e30092f089952a8",
        "files": [
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs",
          "tests/oasis.fail.txt",
          "tests/xmltest.fail.txt"
        ],
        "message": "Emit character tokens in DTD state",
        "before_after_code_files": [
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "376:             State::InsideCdata                    => self.inside_cdata(c),",
          "377:             State::InsideProcessingInstruction    => self.inside_processing_instruction(c),",
          "378:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
          "380:             State::InsideMarkupDeclarationQuotedString(q) => self.markup_declaration_string(c, q),",
          "381:         }",
          "382:     }",
          "",
          "[Removed Lines]",
          "379:             State::InsideMarkupDeclaration       => self.markup_declaration(c),",
          "",
          "[Added Lines]",
          "379:             State::InsideMarkupDeclaration        => self.markup_declaration(c),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:             '-' => self.move_to(State::CommentStarted),",
          "484:             '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),",
          "485:             'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),",
          "487:             _ => self.handle_error(\"<!\", c),",
          "488:         }",
          "489:     }",
          "",
          "[Removed Lines]",
          "486:             'E' | 'A' | 'N' if matches!(self.normal_state, State::InsideDoctype) => self.move_to_with(State::InsideMarkupDeclaration, Token::MarkupDeclarationStart),",
          "",
          "[Added Lines]",
          "486:             'E' | 'A' | 'N' if matches!(self.normal_state, State::InsideDoctype) => {",
          "487:                 self.move_to_with_unread(State::InsideMarkupDeclaration, &[c], Token::MarkupDeclarationStart)",
          "488:             },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "518:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "519:             '\"'                        => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Double), Token::DoubleQuote),",
          "520:             '\\''                       => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Single), Token::SingleQuote),",
          "522:         }",
          "523:     }",
          "",
          "[Removed Lines]",
          "521:             _ => Ok(None),",
          "",
          "[Added Lines]",
          "523:             _                          => Ok(Some(Token::Character(c))),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "526:         match c {",
          "527:             '\"' if q == QuoteStyle::Double  => self.move_to_with(State::InsideMarkupDeclaration, Token::DoubleQuote),",
          "528:             '\\'' if q == QuoteStyle::Single => self.move_to_with(State::InsideMarkupDeclaration, Token::SingleQuote),",
          "530:         }",
          "531:     }",
          "",
          "[Removed Lines]",
          "529:             _ => Ok(None),",
          "",
          "[Added Lines]",
          "531:             _                               => Ok(Some(Token::Character(c))),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "857:     #[test]",
          "858:     fn doctype_with_internal_subset_test() {",
          "859:         let (mut lex, mut buf) = make_lex_and_buf(",
          "861:         );",
          "862:         assert_oks!(for lex and buf ;",
          "863:             Token::OpeningTagStart",
          "",
          "[Removed Lines]",
          "860:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba \">>>>>\"> ]> \"#",
          "",
          "[Added Lines]",
          "862:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba \">>>\"> ]> \"#",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "865:             Token::TagEnd",
          "866:             Token::DoctypeStart",
          "867:             Token::MarkupDeclarationStart",
          "868:             Token::DoubleQuote",
          "869:             Token::DoubleQuote",
          "870:             Token::TagEnd",
          "871:             Token::TagEnd",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "870:             Token::Character('E')",
          "871:             Token::Character('L')",
          "872:             Token::Character('E')",
          "873:             Token::Character('M')",
          "874:             Token::Character('E')",
          "875:             Token::Character('N')",
          "876:             Token::Character('T')",
          "877:             Token::Character(' ')",
          "878:             Token::Character('b')",
          "879:             Token::Character('a')",
          "880:             Token::Character(' ')",
          "882:             Token::Character('>')",
          "883:             Token::Character('>')",
          "884:             Token::Character('>')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "877:     #[test]",
          "878:     fn doctype_internal_pi_comment() {",
          "879:         let (mut lex, mut buf) = make_lex_and_buf(",
          "881:         );",
          "882:         assert_oks!(for lex and buf ;",
          "883:             Token::DoctypeStart",
          "884:             Token::MarkupDeclarationStart",
          "885:             Token::TagEnd",
          "886:             Token::CommentStart",
          "887:             Token::Character(' ')",
          "",
          "[Removed Lines]",
          "880:             \"<!DOCTYPE a [\\n<!ELEMENT leopard ANY> <!-- <?non?>--> <?pi > ?> \\n]>\"",
          "",
          "[Added Lines]",
          "896:             \"<!DOCTYPE a [\\n<!ELEMENT l ANY> <!-- <?non?>--> <?pi > ?> \\n]>\"",
          "901:             Token::Character('E')",
          "902:             Token::Character('L')",
          "903:             Token::Character('E')",
          "904:             Token::Character('M')",
          "905:             Token::Character('E')",
          "906:             Token::Character('N')",
          "907:             Token::Character('T')",
          "908:             Token::Character(' ')",
          "909:             Token::Character('l')",
          "910:             Token::Character(' ')",
          "911:             Token::Character('A')",
          "912:             Token::Character('N')",
          "913:             Token::Character('Y')",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:     InsideCData,",
          "142:     InsideDeclaration(DeclarationSubstate),",
          "143:     InsideDoctype,",
          "144:     InsideDoctypeMarkupDeclaration,",
          "145:     InsideReference,",
          "146: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     DoctypeMarkupDeclarationStart,",
          "145:     DoctypeMarkupDeclarationArgs,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:             State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),",
          "341:             State::InsideDeclaration(s)           => self.inside_declaration(t, s),",
          "342:             State::InsideDoctype                  => self.inside_doctype(t),",
          "343:             State::InsideDoctypeMarkupDeclaration => self.inside_doctype_markup_declaration(t),",
          "344:             State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),",
          "345:             State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:             State::DoctypeMarkupDeclarationStart  => self.doctype_markup_declaration_start(t),",
          "346:             State::DoctypeMarkupDeclarationArgs   => self.doctype_markup_declaration_args(t),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use super::{PullParser, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::reader::lexer::Token;",
          "",
          "[Added Lines]",
          "1: use crate::{reader::lexer::Token, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:             }",
          "12:             Token::MarkupDeclarationStart => {",
          "14:             },",
          "16:             _ => None,",
          "",
          "[Removed Lines]",
          "13:                 self.into_state_continue(State::InsideDoctypeMarkupDeclaration)",
          "",
          "[Added Lines]",
          "13:                 self.buf.clear();",
          "14:                 self.into_state_continue(State::DoctypeMarkupDeclarationStart)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:             _ => None,",
          "27:         }",
          "28:     }",
          "29: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     pub fn doctype_markup_declaration_args(&mut self, t: Token) -> Option<Result> {",
          "32:         match t {",
          "33:             Token::TagEnd => {",
          "34:                 self.into_state_continue(State::InsideDoctype)",
          "35:             }",
          "36:             _ => None,",
          "37:         }",
          "38:     }",
          "40:     pub fn doctype_markup_declaration_start(&mut self, t: Token) -> Option<Result> {",
          "41:         match t {",
          "42:             Token::TagEnd => {",
          "43:                 self.into_state_continue(State::InsideDoctype)",
          "44:             }",
          "45:             Token::Character(c @ 'A'..='Z') => {",
          "46:                 self.buf.push(c);",
          "47:                 None",
          "48:             },",
          "49:             Token::Character(c) if is_whitespace_char(c) => {",
          "50:                 match self.buf.as_str() {",
          "51:                     \"ENTITY\" | \"NOTATION\" | \"ELEMENT\" | \"ATTLIST\" => self.into_state_continue(State::DoctypeMarkupDeclarationArgs),",
          "52:                     s => Some(self_error!(self; \"Unknown markup declaration: {}\", s)),",
          "53:                 }",
          "55:             },",
          "56:             _ => Some(self_error!(self; \"Incomplete markup declaration: {}\", t)),",
          "57:         }",
          "58:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fa93e3531acfd30b8a4fb2bd01e9bcb3e99a38f",
      "candidate_info": {
        "commit_hash": "1fa93e3531acfd30b8a4fb2bd01e9bcb3e99a38f",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/1fa93e3531acfd30b8a4fb2bd01e9bcb3e99a38f",
        "files": [
          "src/lib.rs",
          "src/reader/error.rs",
          "src/reader/lexer.rs",
          "src/util.rs",
          "src/writer/config.rs",
          "src/writer/emitter.rs"
        ],
        "message": "Remove unused",
        "before_after_code_files": [
          "src/lib.rs||src/lib.rs",
          "src/reader/error.rs||src/reader/error.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/util.rs||src/util.rs",
          "src/writer/config.rs||src/writer/config.rs",
          "src/writer/emitter.rs||src/writer/emitter.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #![forbid(non_camel_case_types)]",
          "5: #![forbid(unsafe_code)]",
          "6: #![allow(clippy::redundant_closure_for_method_calls)]",
          "",
          "[Removed Lines]",
          "2: #![allow(dead_code)]",
          "3: #![allow(unused_variables)]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: pub mod attribute;",
          "21: pub mod common;",
          "22: pub mod escape;",
          "23: pub mod macros;",
          "24: pub mod name;",
          "25: pub mod namespace;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #[doc(hidden)] // FIXME: not supposed to be public",
          "",
          "---------------"
        ],
        "src/reader/error.rs||src/reader/error.rs": [
          "File: src/reader/error.rs -> src/reader/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: }",
          "22: #[derive(Debug, Clone, PartialEq)]",
          "23: pub(crate) enum SyntaxError {",
          "24:     CannotRedefineXmlnsPrefix,",
          "25:     CannotRedefineXmlPrefix,",
          "29:     EntityTooBig,",
          "31:     EmptyEntity,",
          "32:     NoRootElement,",
          "33:     ProcessingInstructionWithoutName,",
          "",
          "[Removed Lines]",
          "27:     DoubleDashInComment,",
          "",
          "[Added Lines]",
          "23: #[non_exhaustive]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     UnexpectedTokenInEntity(Token),",
          "44:     UnexpectedTokenInClosingTag(Token),",
          "45:     UnexpectedTokenInOpeningTag(Token),",
          "47:     InvalidQualifiedName(Box<str>),",
          "48:     UnboundAttribute(Box<str>),",
          "49:     UnboundElementPrefix(Box<str>),",
          "50:     UnexpectedClosingTag(Box<str>),",
          "51:     UnexpectedName(Box<str>),",
          "55:     CannotUndefinePrefix(Box<str>),",
          "56:     InvalidCharacterEntity(u32),",
          "57:     InvalidDefaultNamespace(Box<str>),",
          "",
          "[Removed Lines]",
          "46:     UnexpectedTokenInsideXml(Token),",
          "52:     UnexpectedProcessingInstruction(Box<str>, Token),",
          "",
          "[Added Lines]",
          "51:     UnexpectedProcessingInstruction(Box<str>, Token),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         match *self {",
          "85:             Self::CannotRedefineXmlnsPrefix => \"Cannot redefine XMLNS prefix\".into(),",
          "86:             Self::CannotRedefineXmlPrefix => \"Default XMLNS prefix cannot be rebound to another value\".into(),",
          "88:             Self::EmptyEntity => \"Encountered empty entity\".into(),",
          "89:             Self::EntityTooBig => \"Entity too big\".into(),",
          "90:             Self::NoRootElement => \"Unexpected end of stream: no root element found\".into(),",
          "",
          "[Removed Lines]",
          "87:             Self::DoubleDashInComment => \"Double dash \\\"--\\\" is not allowed in comments\".into(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:             Self::UnexpectedTokenInClosingTag(token) => format!(\"Unexpected token inside closing tag: {token}\").into(),",
          "119:             Self::UnexpectedTokenInEntity(token) => format!(\"Unexpected token inside entity: {token}\").into(),",
          "120:             Self::UnexpectedTokenInOpeningTag(token) => format!(\"Unexpected token inside opening tag: {token}\").into(),",
          "122:             Self::UnexpectedTokenOutsideRoot(token) => format!(\"Unexpected characters outside the root element: {token}\").into(),",
          "123:             Self::UnexpectedXmlVersion(ref version) => format!(\"Invalid XML version: {version}\").into(),",
          "124:             Self::UnknownMarkupDeclaration(ref v) => format!(\"Unknown markup declaration: {v}\").into(),",
          "",
          "[Removed Lines]",
          "121:             Self::UnexpectedTokenInsideXml(token) => format!(\"Unexpected token inside XML declaration: {token}\").into(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     char_queue: VecDeque<char>,",
          "237:     normal_state: State,",
          "239:     inside_token: bool,",
          "240:     eof_handled: bool,",
          "241:     reparse_depth: u8,",
          "242: }",
          "244: impl Position for Lexer {",
          "",
          "[Removed Lines]",
          "238:     skip_errors: bool,",
          "",
          "[Added Lines]",
          "241:     #[cfg(test)]",
          "242:     skip_errors: bool,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:             char_queue: VecDeque::with_capacity(4),  // TODO: check size",
          "258:             st: State::Normal,",
          "259:             normal_state: State::Normal,",
          "261:             inside_token: false,",
          "262:             eof_handled: false,",
          "263:             reparse_depth: 0,",
          "264:         }",
          "265:     }",
          "",
          "[Removed Lines]",
          "260:             skip_errors: false,",
          "",
          "[Added Lines]",
          "264:             #[cfg(test)]",
          "265:             skip_errors: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:     #[inline]",
          "",
          "[Removed Lines]",
          "277:     pub(crate) fn disable_errors(&mut self) { self.skip_errors = true; }",
          "",
          "[Added Lines]",
          "279:     #[cfg(test)] fn disable_errors(&mut self) { self.skip_errors = true; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "450:     fn handle_error(&mut self, chunk: &'static str, c: char) -> Result {",
          "451:         debug_assert!(!chunk.is_empty());",
          "453:         if self.skip_errors {",
          "454:             let mut chars = chunk.chars();",
          "455:             let first = chars.next().unwrap_or('\\0');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:         #[cfg(test)]",
          "",
          "---------------"
        ],
        "src/util.rs||src/util.rs": [
          "File: src/util.rs -> src/util.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:         struct ErrorReader;",
          "292:         impl io::Read for ErrorReader {",
          "294:                 Err(io::Error::new(io::ErrorKind::Other, \"test error\"))",
          "295:             }",
          "296:         }",
          "",
          "[Removed Lines]",
          "293:             fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "",
          "[Added Lines]",
          "293:             fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {",
          "",
          "---------------"
        ],
        "src/writer/config.rs||src/writer/config.rs": [
          "File: src/writer/config.rs -> src/writer/config.rs"
        ],
        "src/writer/emitter.rs||src/writer/emitter.rs": [
          "File: src/writer/emitter.rs -> src/writer/emitter.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         }",
          "134:     }",
          "143:     fn write_newline<W: Write>(&mut self, target: &mut W, level: usize) -> Result<()> {",
          "144:         target.write_all(self.config.line_separator.as_bytes())?;",
          "145:         for _ in 0..level {",
          "",
          "[Removed Lines]",
          "136:     #[inline]",
          "137:     fn reset_state(&mut self) {",
          "138:         if let Some(e) = self.indent_stack.last_mut() {",
          "140:         }",
          "141:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bea0c88d9765a07b746e48284465e33cea9de20c",
      "candidate_info": {
        "commit_hash": "bea0c88d9765a07b746e48284465e33cea9de20c",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/bea0c88d9765a07b746e48284465e33cea9de20c",
        "files": [
          "src/escape.rs",
          "src/name.rs",
          "src/reader/error.rs",
          "src/reader/lexer.rs",
          "src/reader/mod.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/inside_reference.rs",
          "src/reader/parser/outside_tag.rs",
          "tests/event_reader.rs"
        ],
        "message": "Refactored internal error type",
        "before_after_code_files": [
          "src/escape.rs||src/escape.rs",
          "src/name.rs||src/name.rs",
          "src/reader/error.rs||src/reader/error.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/mod.rs||src/reader/mod.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/inside_reference.rs||src/reader/parser/inside_reference.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "tests/event_reader.rs||tests/event_reader.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/escape.rs||src/escape.rs": [
          "File: src/escape.rs -> src/escape.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: #[inline]",
          "121:     escape_str::<AttributeEscapes>(s)",
          "122: }",
          "",
          "[Removed Lines]",
          "120: pub fn escape_str_attribute(s: &str) -> Cow<'_, str> {",
          "",
          "[Added Lines]",
          "120: #[must_use] pub fn escape_str_attribute(s: &str) -> Cow<'_, str> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: #[inline]",
          "137:     escape_str::<PcDataEscapes>(s)",
          "138: }",
          "",
          "[Removed Lines]",
          "136: pub fn escape_str_pcdata(s: &str) -> Cow<'_, str> {",
          "",
          "[Added Lines]",
          "136: #[must_use] pub fn escape_str_pcdata(s: &str) -> Cow<'_, str> {",
          "",
          "---------------"
        ],
        "src/name.rs||src/name.rs": [
          "File: src/name.rs -> src/name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "180: pub struct OwnedName {",
          "182:     pub local_name: String,",
          "",
          "[Removed Lines]",
          "179: #[derive(Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]",
          "",
          "[Added Lines]",
          "179: #[derive(Clone, PartialEq, Eq, Hash, Debug)]",
          "",
          "---------------"
        ],
        "src/reader/error.rs||src/reader/error.rs": [
          "File: src/reader/error.rs -> src/reader/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::borrow::Cow;",
          "2: use std::error;",
          "3: use std::error::Error as _;",
          "4: use std::fmt;",
          "5: use std::io;",
          "6: use std::str;",
          "9: use crate::common::{Position, TextPosition};",
          "10: use crate::util;",
          "12: #[derive(Debug)]",
          "13: pub enum ErrorKind {",
          "15:     Io(io::Error),",
          "16:     Utf8(str::Utf8Error),",
          "17:     UnexpectedEof,",
          "18: }",
          "35:     NoRootElement,",
          "36:     UnbalancedRootElement,",
          "39:     UnexpectedOpeningTag,",
          "45:     UnexpectedTokenOutsideRoot(Token),",
          "46:     UnexpectedToken(Token),",
          "47:     UnexpectedTokenInEntity(Token),",
          "48:     UnexpectedTokenInClosingTag(Token),",
          "49:     UnexpectedTokenInOpeningTag(Token),",
          "74: }",
          "76: impl fmt::Display for SyntaxError {",
          "77:     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "121:         }",
          "122:     }",
          "123: }",
          "",
          "[Removed Lines]",
          "7: use std::error;",
          "14:     Syntax(SyntaxError),",
          "20: impl fmt::Display for ErrorKind {",
          "21:     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "22:         use self::ErrorKind::*;",
          "23:         match self {",
          "24:             Syntax(err) => write!(f, \"Syntax error: {}\", err),",
          "25:             Io(err) => write!(f, \"IO error: {}\", err),",
          "26:             Utf8(err) => write!(f, \"Utf8 encoding error: {}\", err),",
          "27:             UnexpectedEof => write!(f, \"Unexpected EOF\"),",
          "28:         }",
          "29:     }",
          "30: }",
          "32: #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]",
          "33: pub enum SyntaxError {",
          "34:     UnexpectedEof,",
          "37:     InvalidQualifiedName(String),",
          "38:     UnexpectedQualifiedName(Token),",
          "40:     MissingNamespace(OwnedName),",
          "41:     UnboundAttribute(OwnedName),",
          "42:     UnboundPrefix(OwnedName),",
          "43:     UnexpectedClosingTag(OwnedName, OwnedName),",
          "44:     UnexpectedTokenBefore(&'static str, char),",
          "50:     UnexpectedName(OwnedName),",
          "51:     ProcessingInstructionWithoutName,",
          "54:     InvalidXmlProcessingInstruction(String),",
          "55:     InvalidProcessingInstruction(String),",
          "56:     UnexpectedProcessingInstruction(String, Token),",
          "57:     InvalidNamePrefix(Option<String>),",
          "58:     RedefinedAttribute(OwnedName),",
          "59:     CannotUndefinePrefix(String),",
          "60:     CannotRedefineXmlnsPrefix,",
          "61:     CannotRedefineXmlPrefix,",
          "62:     UnexpectedTokenInsideXml(Token),",
          "63:     UnexpectedNameInsideXml(OwnedName),",
          "64:     UnexpectedXmlVersion(Option<XmlVersion>),",
          "65:     InvalidStandaloneDeclaration(String),",
          "66:     EmptyEntity,",
          "67:     NullCharacterEntity,",
          "68:     InvalidHexCharacterEntity(String),",
          "69:     InvalidDecCharacterEntity(String),",
          "70:     UnexpectedEntity(String),",
          "71:     InvalidDefaultNamespace(String),",
          "73:     DoubleDashInComment,",
          "78:         use self::SyntaxError::*;",
          "79:         match self {",
          "80:             UnexpectedEof => write!(f, \"Unexpected end of stream\"),",
          "81:             NoRootElement => write!(f, \"Unexpected end of stream: no root element found\"),",
          "82:             UnbalancedRootElement => write!(f, \"Unexpected end of stream: still inside the root element\"),",
          "83:             InvalidQualifiedName(e) => write!(f, \"Qualified name is invalid: {}\", e),",
          "84:             UnexpectedQualifiedName(e) => write!(f, \"Unexpected token inside qualified name: {}\", e),",
          "85:             UnexpectedOpeningTag => write!(f, \"Unexpected token inside attribute value: <\"),",
          "86:             MissingNamespace(name) => write!(f, \"Element {} prefix is unbound\", name),",
          "87:             UnboundAttribute(name) => write!(f, \"Attribute {} prefix is unbound\", name),",
          "88:             UnboundPrefix(name) => write!(f, \"Element {} prefix is unbound\", name),",
          "89:             UnexpectedClosingTag(expected_name, got_name) => write!(f, \"Unexpected closing tag: {}, expected {}\", expected_name, got_name),",
          "90:             UnexpectedToken(token) => write!(f, \"Unexpected token: {}\", token),",
          "91:             UnexpectedTokenBefore(before, c) => write!(f, \"Unexpected token '{}' before '{}'\", before, c),",
          "92:             UnexpectedTokenOutsideRoot(token) => write!(f, \"Unexpected characters outside the root element: {}\", token),",
          "93:             UnexpectedTokenInOpeningTag(token) => write!(f, \"Unexpected token inside opening tag: {}\", token),",
          "94:             UnexpectedTokenInClosingTag(token) => write!(f, \"Unexpected token inside closing tag: {}\", token),",
          "95:             UnexpectedTokenInEntity(token) => write!(f, \"Unexpected token inside entity: {}\", token),",
          "96:             UnexpectedName(name) => write!(f, \"Unexpected name: {}\", name),",
          "97:             ProcessingInstructionWithoutName => write!(f, \"Encountered processing instruction without name\"),",
          "98:             InvalidXmlProcessingInstruction(name) => write!(f,",
          "99:                 \"Invalid processing instruction: <?{} - \\\"<?xml\\\"-like PI is \\",
          "100:                  only valid at the beginning of the document\", name),",
          "101:             InvalidProcessingInstruction(name) => write!(f, \"Invalid processing instruction: <?{}\", name),",
          "102:             UnexpectedProcessingInstruction(buf, token) => write!(f, \"Unexpected token inside processing instruction: <?{}{}\", buf, token),",
          "103:             InvalidNamePrefix(Some(prefix)) => write!(f, \"'{}' cannot be an element name prefix\", prefix),",
          "104:             InvalidNamePrefix(None) => write!(f, \"Empty element name prefix\"),",
          "105:             RedefinedAttribute(name) => write!(f, \"Attribute '{}' is redefined\", name),",
          "106:             CannotUndefinePrefix(ln) => write!(f, \"Cannot undefine prefix '{}'\", ln),",
          "107:             CannotRedefineXmlnsPrefix => write!(f, \"Cannot redefine XMLNS prefix '{}'\", NS_XMLNS_PREFIX),",
          "108:             CannotRedefineXmlPrefix => write!(f, \"Prefix '{}' cannot be rebound to another value\", NS_XML_PREFIX),",
          "109:             UnexpectedTokenInsideXml(token) => write!(f, \"Unexpected token inside XML declaration: {}\", token),",
          "110:             UnexpectedNameInsideXml(name) => write!(f, \"Unexpected name inside XML declaration: {}\", name),",
          "111:             UnexpectedXmlVersion(Some(version)) => write!(f, \"Invalid XML version: {}\", version),",
          "112:             UnexpectedXmlVersion(None) => write!(f, \"No XML version specified\"),",
          "113:             InvalidStandaloneDeclaration(value) => write!(f, \"Invalid standalone declaration value: {}\", value),",
          "114:             EmptyEntity => write!(f, \"Encountered empty entity\"),",
          "115:             NullCharacterEntity => write!(f, \"Null character entity is not allowed\"),",
          "116:             InvalidHexCharacterEntity(name) => write!(f, \"Invalid hexadecimal character number in an entity: {}\", name),",
          "117:             InvalidDecCharacterEntity(name) => write!(f, \"Invalid decimal character number in an entity: {}\", name),",
          "118:             UnexpectedEntity(name) => write!(f, \"Unexpected entity: {}\", name),",
          "119:             InvalidDefaultNamespace(name) => write!(f,  \"Namespace '{}' cannot be default\", name),",
          "120:             DoubleDashInComment => write!(f, \"Unexpected double dash inside a comment: \\\"--\\\"\"),",
          "",
          "[Added Lines]",
          "1: use crate::Encoding;",
          "2: use crate::reader::lexer::Token;",
          "16:     Syntax(Cow<'static, str>),",
          "22: #[derive(Debug, Clone, PartialEq)]",
          "23: pub(crate) enum SyntaxError {",
          "24:     CannotRedefineXmlnsPrefix,",
          "25:     CannotRedefineXmlPrefix,",
          "27:     DoubleDashInComment,",
          "29:     EntityTooBig,",
          "31:     EmptyEntity,",
          "33:     ProcessingInstructionWithoutName,",
          "35:     UnexpectedEof,",
          "38:     UnclosedCdata,",
          "39:     UnexpectedCdataEnd,",
          "40:     UnexpectedQualifiedName(Token),",
          "46:     UnexpectedTokenInsideXml(Token),",
          "47:     InvalidQualifiedName(Box<str>),",
          "48:     MissingNamespace(Box<str>),",
          "49:     UnboundAttribute(Box<str>),",
          "50:     UnboundPrefix(Box<str>),",
          "51:     UnexpectedClosingTag(Box<str>),",
          "52:     UnexpectedName(Box<str>),",
          "53:     UnexpectedProcessingInstruction(Box<str>, Token),",
          "56:     CannotUndefinePrefix(Box<str>),",
          "57:     InvalidCharacterEntity(u32),",
          "58:     InvalidDefaultNamespace(Box<str>),",
          "59:     InvalidNamePrefix(Box<str>),",
          "60:     InvalidNumericEntity(Box<str>),",
          "61:     InvalidProcessingInstruction(Box<str>),",
          "62:     InvalidStandaloneDeclaration(Box<str>),",
          "63:     InvalidXmlProcessingInstruction(Box<str>),",
          "64:     RedefinedAttribute(Box<str>),",
          "65:     UndefinedEntity(Box<str>),",
          "66:     UndefinedPEntity(Box<str>),",
          "67:     UnexpectedEntity(Box<str>),",
          "68:     UnexpectedNameInsideXml(Box<str>),",
          "69:     UnsupportedEncoding(Box<str>),",
          "71:     UnknownMarkupDeclaration(Box<str>),",
          "72:     UnexpectedXmlVersion(Box<str>),",
          "73:     ConflictingEncoding(Encoding, Encoding),",
          "74:     UnexpectedTokenBefore(&'static str, char),",
          "79:         self.to_cow().fmt(f)",
          "80:     }",
          "81: }",
          "83: impl SyntaxError {",
          "84:     #[inline(never)]",
          "85:     #[cold]",
          "86:     pub(crate) fn to_cow(&self) -> Cow<'static, str> {",
          "87:         match *self {",
          "88:             Self::CannotRedefineXmlnsPrefix => \"Cannot redefine XMLNS prefix\".into(),",
          "89:             Self::CannotRedefineXmlPrefix => \"Default XMLNS prefix cannot be rebound to another value\".into(),",
          "90:             Self::DoubleDashInComment => \"Unexpected double dash inside a comment: \\\"--\\\"\".into(),",
          "91:             Self::EmptyEntity => \"Encountered empty entity\".into(),",
          "92:             Self::EntityTooBig => \"Entity too big\".into(),",
          "93:             Self::NoRootElement => \"Unexpected end of stream: no root element found\".into(),",
          "94:             Self::ProcessingInstructionWithoutName => \"Encountered processing instruction without name\".into(),",
          "95:             Self::UnbalancedRootElement => \"Unexpected end of stream: still inside the root element\".into(),",
          "96:             Self::UnclosedCdata => \"Unclosed <![CDATA[\".into(),",
          "97:             Self::UnexpectedCdataEnd => \"]]> in text\".into(),",
          "98:             Self::UnexpectedEof => \"Unexpected end of stream\".into(),",
          "99:             Self::UnexpectedOpeningTag => \"'<' is not allowed in attributes\".into(),",
          "100:             Self::CannotUndefinePrefix(ref ln) => format!(\"Cannot undefine prefix '{ln}'\").into(),",
          "101:             Self::ConflictingEncoding(a, b) => format!(\"Declared encoding {a}, but uses {b}\").into(),",
          "102:             Self::InvalidCharacterEntity(num) => format!(\"Invalid character U+{num:04X}\").into(),",
          "103:             Self::InvalidDefaultNamespace(ref name) => format!( \"Namespace '{name}' cannot be default\").into(),",
          "104:             Self::InvalidNamePrefix(ref prefix) => format!(\"'{prefix}' cannot be an element name prefix\").into(),",
          "105:             Self::InvalidNumericEntity(ref v) => format!(\"Invalid numeric entity: {v}\").into(),",
          "106:             Self::InvalidProcessingInstruction(ref name) => format!(\"Invalid processing instruction: <?{name}\").into(),",
          "107:             Self::InvalidQualifiedName(ref e) => format!(\"Qualified name is invalid: {e}\").into(),",
          "108:             Self::InvalidStandaloneDeclaration(ref value) => format!(\"Invalid standalone declaration value: {value}\").into(),",
          "109:             Self::InvalidXmlProcessingInstruction(ref name) => format!(\"Invalid processing instruction: <?{name} - \\\"<?xml\\\"-like PI is only valid at the beginning of the document\").into(),",
          "110:             Self::MissingNamespace(ref name) => format!(\"Element {name} prefix is unbound\").into(),",
          "111:             Self::RedefinedAttribute(ref name) => format!(\"Attribute '{name}' is redefined\").into(),",
          "112:             Self::UnboundAttribute(ref name) => format!(\"Attribute {name} prefix is unbound\").into(),",
          "113:             Self::UnboundPrefix(ref name) => format!(\"Element {name} prefix is unbound\").into(),",
          "114:             Self::UndefinedEntity(ref v) => format!(\"Undefined entity: {v}\").into(),",
          "115:             Self::UndefinedPEntity(ref v) => format!(\"Undefined p entity: {v}\").into(),",
          "116:             Self::UnexpectedClosingTag(ref expected_got) => format!(\"Unexpected closing tag: {expected_got}\").into(),",
          "117:             Self::UnexpectedEntity(ref name) => format!(\"Unexpected entity: {name}\").into(),",
          "118:             Self::UnexpectedName(ref name) => format!(\"Unexpected name: {name}\").into(),",
          "119:             Self::UnexpectedNameInsideXml(ref name) => format!(\"Unexpected name inside XML declaration: {name}\").into(),",
          "120:             Self::UnexpectedProcessingInstruction(ref buf, token) => format!(\"Unexpected token inside processing instruction: <?{buf}{token}\").into(),",
          "121:             Self::UnexpectedQualifiedName(e) => format!(\"Unexpected token inside qualified name: {e}\").into(),",
          "122:             Self::UnexpectedToken(token) => format!(\"Unexpected token: {token}\").into(),",
          "123:             Self::UnexpectedTokenBefore(before, c) => format!(\"Unexpected token '{before}' before '{c}'\").into(),",
          "124:             Self::UnexpectedTokenInClosingTag(token) => format!(\"Unexpected token inside closing tag: {token}\").into(),",
          "125:             Self::UnexpectedTokenInEntity(token) => format!(\"Unexpected token inside entity: {token}\").into(),",
          "126:             Self::UnexpectedTokenInOpeningTag(token) => format!(\"Unexpected token inside opening tag: {token}\").into(),",
          "127:             Self::UnexpectedTokenInsideXml(token) => format!(\"Unexpected token inside XML declaration: {token}\").into(),",
          "128:             Self::UnexpectedTokenOutsideRoot(token) => format!(\"Unexpected characters outside the root element: {token}\").into(),",
          "129:             Self::UnexpectedXmlVersion(ref version) => format!(\"Invalid XML version: {version}\").into(),",
          "130:             Self::UnknownMarkupDeclaration(ref v) => format!(\"Unknown markup declaration: {v}\").into(),",
          "131:             Self::UnsupportedEncoding(ref v) => format!(\"Unsupported encoding: {v}\").into(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: #[derive(Clone, PartialEq, Eq, Debug)]",
          "129: pub struct Error {",
          "132: }",
          "134: impl fmt::Display for Error {",
          "",
          "[Removed Lines]",
          "130:     pub pos: TextPosition,",
          "131:     pub kind: ErrorKind,",
          "",
          "[Added Lines]",
          "141:     pub(crate) pos: TextPosition,",
          "142:     pub(crate) kind: ErrorKind,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     #[cold]",
          "156:     #[doc(hidden)]",
          "157:     #[allow(deprecated)]",
          "159:         use self::ErrorKind::{Io, Syntax, UnexpectedEof, Utf8};",
          "160:         match &self.kind {",
          "161:             Io(io_error) => io_error.description(),",
          "",
          "[Removed Lines]",
          "158:     pub fn msg(&self) -> &str {",
          "",
          "[Added Lines]",
          "169:     #[must_use] pub fn msg(&self) -> &str {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     }",
          "204: }",
          "213: impl From<io::Error> for Error {",
          "214:     #[cold]",
          "215:     fn from(e: io::Error) -> Self {",
          "216:         Error {",
          "217:             pos: TextPosition::new(),",
          "219:         }",
          "220:     }",
          "221: }",
          "",
          "[Removed Lines]",
          "206: impl error::Error for Error { }",
          "208: impl Error {",
          "209:     #[inline]",
          "210:     fn kind(&self) -> &ErrorKind { &self.kind }",
          "211: }",
          "218:             kind: ErrorKind::Io(e)",
          "",
          "[Added Lines]",
          "222:             kind: ErrorKind::Io(e),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "251:     }",
          "252: }",
          "253: impl Eq for ErrorKind {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #[test]",
          "259: fn err_size() {",
          "260:     assert_eq!(24, std::mem::size_of::<SyntaxError>());",
          "261: }",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use std::collections::VecDeque;",
          "7: use std::fmt;",
          "8: use std::io::Read;",
          "9: use std::result;",
          "11: use crate::common::{is_name_char, is_whitespace_char, Position, TextPosition};",
          "12: use crate::reader::Error;",
          "13: use crate::util::{CharReader, Encoding};",
          "",
          "[Removed Lines]",
          "5: use std::borrow::Cow;",
          "",
          "[Added Lines]",
          "6: use crate::reader::ErrorKind;",
          "7: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:         self.reparse_depth = 0;",
          "314:         loop {",
          "315:             let c = match self.reader.next_char_from(b)? {",
          "318:                 },",
          "319:                 Some(c) => c,  // got next char",
          "320:                 None => break, // nothing to read left",
          "",
          "[Removed Lines]",
          "316:                 Some('\\0' ..= '\\x08' | '\\x0B'..= '\\x0C' | '\\x0E'..= '\\x1F'| '\\u{7F}'..='\\u{84}' | '\\u{86}'..='\\u{9F}' | '\\u{fffe}'..='\\u{ffff}') => {",
          "317:                     return Err(self.error(\"Invalid char\"))",
          "",
          "[Added Lines]",
          "317:                 Some(c @ ('\\0' ..= '\\x08' | '\\x0B'..= '\\x0C' | '\\x0E'..= '\\x1F'| '\\u{7F}'..='\\u{84}' | '\\u{86}'..='\\u{9F}' | '\\u{fffe}'..='\\u{ffff}')) => {",
          "318:                     return Err(self.error(SyntaxError::InvalidCharacterEntity(c as u32)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:         self.eof_handled = true;",
          "347:         self.pos = self.head_pos;",
          "348:         match self.st {",
          "351:             State::TagStarted | State::CommentOrCDataOrDoctypeStarted |",
          "352:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
          "353:             State::CommentClosing(ClosingSubstate::Second) |",
          "354:             State::InsideComment | State::InsideMarkupDeclaration |",
          "355:             State::InsideProcessingInstruction | State::ProcessingInstructionClosing |",
          "356:             State::InsideDoctype | State::InsideMarkupDeclarationQuotedString(_) =>",
          "358:             State::EmptyTagClosing =>",
          "359:                 Ok(Some(Token::Character('/'))),",
          "360:             State::CommentClosing(ClosingSubstate::First) =>",
          "",
          "[Removed Lines]",
          "349:             State::InsideCdata | State::CDataClosing(_) => Err(self.error(\"Unclosed CDATA\")),",
          "357:                 Err(self.error(\"Unexpected end of stream\")),",
          "",
          "[Added Lines]",
          "350:             State::InsideCdata | State::CDataClosing(_) => Err(self.error(SyntaxError::UnclosedCdata)),",
          "357:                 Err(self.error(SyntaxError::UnexpectedEof)),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:         }",
          "371:     }",
          "376:     }",
          "",
          "[Removed Lines]",
          "373:     #[inline]",
          "374:     fn error<M: Into<SyntaxError>>(&self, msg: M) -> Error {",
          "375:         (self, msg).into()",
          "",
          "[Added Lines]",
          "373:     #[cold]",
          "374:     fn error(&self, e: SyntaxError) -> Error {",
          "375:         Error {",
          "376:             pos: self.position(),",
          "377:             kind: ErrorKind::Syntax(e.to_cow()),",
          "378:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:         self.reparse_depth += 1;",
          "434:         if self.reparse_depth > MAX_ENTITY_EXPANSION_DEPTH || self.char_queue.len() > MAX_ENTITY_EXPANSION_LENGTH {",
          "436:         }",
          "438:         self.eof_handled = false;",
          "",
          "[Removed Lines]",
          "435:             return Err(self.error(\"Entity too big\".to_string()))",
          "",
          "[Added Lines]",
          "438:             return Err(self.error(SyntaxError::EntityTooBig))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "444:         Ok(())",
          "445:     }",
          "448:         debug_assert!(!chunk.is_empty());",
          "450:         if self.skip_errors {",
          "",
          "[Removed Lines]",
          "447:     fn handle_error(&mut self, chunk: &str, c: char) -> Result {",
          "",
          "[Added Lines]",
          "450:     fn handle_error(&mut self, chunk: &'static str, c: char) -> Result {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "454:             self.char_queue.push_back(c);",
          "455:             return self.move_to_with(State::Normal, Token::Character(first));",
          "456:         }",
          "458:     }",
          "",
          "[Removed Lines]",
          "457:         Err(self.error(format!(\"Unexpected token '{chunk}' before '{c}'\")))",
          "",
          "[Added Lines]",
          "460:         Err(self.error(SyntaxError::UnexpectedTokenBefore(chunk, c)))",
          "",
          "---------------"
        ],
        "src/reader/mod.rs||src/reader/mod.rs": [
          "File: src/reader/mod.rs -> src/reader/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: mod parser;",
          "23: mod error;",
          "27: pub type Result<T, E = Error> = result::Result<T, E>;",
          "",
          "[Removed Lines]",
          "24: pub use self::error::{Error, SyntaxError, ErrorKind};",
          "",
          "[Added Lines]",
          "24: pub use self::error::{Error, ErrorKind};",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::collections::HashMap;",
          "5: use std::io::prelude::*;",
          "",
          "[Removed Lines]",
          "3: use std::borrow::Cow;",
          "",
          "[Added Lines]",
          "4: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: use crate::reader::events::XmlEvent;",
          "14: use crate::reader::lexer::{Lexer, Token};",
          "16: macro_rules! gen_takes(",
          "17:     ($($field:ident -> $method:ident, $t:ty, $def:expr);+) => (",
          "18:         $(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: use super::{Error, ErrorKind};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     attributes   -> take_attributes, Vec<OwnedAttribute>, vec!()",
          "42: );",
          "49: mod inside_cdata;",
          "50: mod inside_closing_tag_name;",
          "51: mod inside_comment;",
          "",
          "[Removed Lines]",
          "44: macro_rules! self_error(",
          "45:     ($this:ident; $msg:expr) => ($this.error($msg));",
          "46:     ($this:ident; $fmt:expr, $($arg:expr),+) => ($this.error(format!($fmt, $($arg),+)))",
          "47: );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:             if self.encountered == Encountered::Element && self.st == State::OutsideTag {  // all is ok",
          "357:                 Ok(XmlEvent::EndDocument)",
          "358:             } else if self.encountered < Encountered::Element {",
          "360:             } else {  // self.st != State::OutsideTag",
          "362:             }",
          "363:         } else if self.config.c.ignore_end_of_stream {",
          "364:             self.final_result = None;",
          "365:             self.lexer.reset_eof_handled();",
          "367:         } else {",
          "369:         };",
          "370:         self.set_final_result(ev)",
          "371:     }",
          "",
          "[Removed Lines]",
          "359:                 self_error!(self; \"Unexpected end of stream: no root element found\")",
          "361:                 self_error!(self; SyntaxError::UnexpectedEof)  // TODO: add expected hint?",
          "366:             return self_error!(self; \"Unexpected end of stream: still inside the root element\");",
          "368:             self_error!(self; \"Unexpected end of stream: still inside the root element\")",
          "",
          "[Added Lines]",
          "357:                 self.error(SyntaxError::NoRootElement)",
          "359:                 self.error(SyntaxError::UnexpectedEof)  // TODO: add expected hint?",
          "364:             return self.error(SyntaxError::UnbalancedRootElement);",
          "366:             self.error(SyntaxError::UnbalancedRootElement)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379:     }",
          "381:     #[cold]",
          "384:     }",
          "386:     #[inline]",
          "",
          "[Removed Lines]",
          "382:     fn error<M: Into<Cow<'static, str>>>(&self, msg: M) -> Result {",
          "383:         Err((&self.lexer, msg).into())",
          "",
          "[Added Lines]",
          "380:     fn error(&self, e: SyntaxError) -> Result {",
          "381:         Err(Error {",
          "382:             pos: self.lexer.position(),",
          "383:             kind: ErrorKind::Syntax(e.to_cow()),",
          "384:         })",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "467:             let name = this.take_buf();",
          "468:             match name.parse() {",
          "469:                 Ok(name) => on_name(this, t, name),",
          "471:             }",
          "472:         };",
          "",
          "[Removed Lines]",
          "470:                 Err(_) => Some(self_error!(this; \"Qualified name is invalid: {}\", name)),",
          "",
          "[Added Lines]",
          "471:                 Err(_) => Some(this.error(SyntaxError::InvalidQualifiedName(name.into())))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "493:             Token::Character(c) if is_whitespace_char(c) => invoke_callback(self, t),",
          "496:         }",
          "497:     }",
          "",
          "[Removed Lines]",
          "495:             _ => Some(self_error!(self; SyntaxError::UnexpectedQualifiedName(t)))",
          "",
          "[Added Lines]",
          "496:             _ => Some(self.error(SyntaxError::UnexpectedQualifiedName(t)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "528:             },",
          "530:             Token::OpeningTagStart =>",
          "534:             _ if self.data.quote.is_some() => {",
          "",
          "[Removed Lines]",
          "531:                 Some(self_error!(self; \"Unexpected token inside attribute value: {}\", t)),",
          "",
          "[Added Lines]",
          "532:                 Some(self.error(SyntaxError::UnexpectedOpeningTag)),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "536:                 None",
          "537:             }",
          "540:         }",
          "541:     }",
          "",
          "[Removed Lines]",
          "539:             _ => Some(self_error!(self; \"Unexpected token inside attribute value: {}\", t)),",
          "",
          "[Added Lines]",
          "540:             _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "548:         match self.nst.get(name.borrow().prefix_repr()) {",
          "549:             Some(\"\") => name.namespace = None,  // default namespace",
          "550:             Some(ns) => name.namespace = Some(ns.into()),",
          "552:         }",
          "",
          "[Removed Lines]",
          "551:             None => return Some(self_error!(self; SyntaxError::MissingNamespace(name)))",
          "",
          "[Added Lines]",
          "552:             None => return Some(self.error(SyntaxError::MissingNamespace(name.to_string().into())))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "557:                 let new_ns = match self.nst.get(pfx) {",
          "558:                     Some(\"\") => None, // default namespace",
          "559:                     Some(ns) => Some(ns.into()),",
          "561:                 };",
          "562:                 attr.name.namespace = new_ns;",
          "563:             }",
          "",
          "[Removed Lines]",
          "560:                     None => return Some(self_error!(self; SyntaxError::UnboundAttribute(attr.name.clone())))",
          "",
          "[Added Lines]",
          "561:                     None => return Some(self.error(SyntaxError::UnboundAttribute(attr.name.to_string().into())))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "586:         match self.nst.get(name.borrow().prefix_repr()) {",
          "587:             Some(\"\") => name.namespace = None, // default namespace",
          "588:             Some(ns) => name.namespace = Some(ns.into()),",
          "590:         }",
          "592:         let op_name = self.est.pop()?;",
          "",
          "[Removed Lines]",
          "589:             None => return Some(self_error!(self; \"Element {} prefix is unbound\", name)),",
          "",
          "[Added Lines]",
          "590:             None => return Some(self.error(SyntaxError::UnboundPrefix(name.to_string().into())))",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "595:             self.pop_namespace = true;",
          "596:             self.into_state_emit(State::OutsideTag, Ok(XmlEvent::EndElement { name }))",
          "597:         } else {",
          "599:         }",
          "600:     }",
          "601: }",
          "",
          "[Removed Lines]",
          "598:             Some(self_error!(self; SyntaxError::UnexpectedClosingTag(name, op_name)))",
          "",
          "[Added Lines]",
          "599:             Some(self.error(SyntaxError::UnexpectedClosingTag(format!(\"{name} != {op_name}\").into())))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "603: #[cfg(test)]",
          "604: mod tests {",
          "605:     use std::io::BufReader;",
          "607:     use crate::attribute::OwnedAttribute;",
          "609:     use crate::name::OwnedName;",
          "610:     use crate::reader::events::XmlEvent;",
          "611:     use crate::reader::parser::PullParser;",
          "",
          "[Removed Lines]",
          "608:     use crate::common::{Position, TextPosition};",
          "",
          "[Added Lines]",
          "608:     use crate::common::TextPosition;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "619:         ($r:expr, $p:expr, $t:pat) => (",
          "620:             match $p.next(&mut $r) {",
          "621:                 $t => {}",
          "623:             }",
          "624:         );",
          "625:         ($r:expr, $p:expr, $t:pat => $c:expr ) => (",
          "626:             match $p.next(&mut $r) {",
          "627:                 $t if $c => {}",
          "629:             }",
          "630:         )",
          "631:     );",
          "",
          "[Removed Lines]",
          "622:                 e => panic!(\"Unexpected event: {:?}\", e)",
          "628:                 e => panic!(\"Unexpected event: {:?}\", e)",
          "",
          "[Added Lines]",
          "622:                 e => panic!(\"Unexpected event: {e:?}\\nExpected: {}\", stringify!($t))",
          "628:                 e => panic!(\"Unexpected event: {e:?}\\nExpected: {} if {}\", stringify!($t), stringify!($c))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "694:     #[test]",
          "695:     fn opening_tag_in_attribute_value() {",
          "698:         let (mut r, mut p) = test_data!(r#\"",
          "699:             <a attr=\"zzz<zzz\" />",
          "",
          "[Removed Lines]",
          "696:         use reader::error::{SyntaxError, Error, ErrorKind};",
          "",
          "[Added Lines]",
          "696:         use crate::reader::error::{SyntaxError, Error, ErrorKind};",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "702:         expect_event!(r, p, Ok(XmlEvent::StartDocument { .. }));",
          "703:         expect_event!(r, p, Err(ref e) =>",
          "706:                 pos: TextPosition { row: 1, column: 24 }",
          "707:             }",
          "708:         );",
          "",
          "[Removed Lines]",
          "705:                 kind: ErrorKind::Syntax(SyntaxError::UnexpectedOpeningTag),",
          "",
          "[Added Lines]",
          "705:                 kind: ErrorKind::Syntax(SyntaxError::UnexpectedOpeningTag.to_cow()),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs": [
          "File: src/reader/parser/inside_closing_tag_name.rs -> src/reader/parser/inside_closing_tag_name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::{common::is_whitespace_char, namespace};",
          "3: use crate::reader::lexer::Token;",
          "5: use super::{ClosingTagSubstate, PullParser, QualifiedNameTarget, Result, State};",
          "7: impl PullParser {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:                 match name.prefix_ref() {",
          "12:                     Some(prefix) if prefix == namespace::NS_XML_PREFIX ||",
          "13:                                     prefix == namespace::NS_XMLNS_PREFIX =>",
          "15:                     _ => {",
          "16:                         this.data.element_name = Some(name.clone());",
          "17:                         match token {",
          "18:                             Token::TagEnd => this.emit_end_element(),",
          "19:                             Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideClosingTag(ClosingTagSubstate::CTAfterName)),",
          "21:                         }",
          "22:                     }",
          "23:                 }",
          "",
          "[Removed Lines]",
          "14:                         Some(self_error!(this; SyntaxError::InvalidNamePrefix(name.prefix.clone()))),",
          "20:                             _ => Some(self_error!(this; \"Unexpected token inside closing tag: {}\", token))",
          "",
          "[Added Lines]",
          "13:                         Some(this.error(SyntaxError::InvalidNamePrefix(prefix.into()))),",
          "19:                             _ => Some(this.error(SyntaxError::UnexpectedTokenInClosingTag(token)))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25:             ClosingTagSubstate::CTAfterName => match t {",
          "26:                 Token::TagEnd => self.emit_end_element(),",
          "27:                 Token::Character(c) if is_whitespace_char(c) => None,  //  Skip whitespace",
          "29:             }",
          "30:         }",
          "31:     }",
          "",
          "[Removed Lines]",
          "28:                 _ => Some(self_error!(self; \"Unexpected token inside closing tag: {}\", t))",
          "",
          "[Added Lines]",
          "27:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInClosingTag(t)))",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs": [
          "File: src/reader/parser/inside_declaration.rs -> src/reader/parser/inside_declaration.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::common::{is_whitespace_char, XmlVersion};",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "5: use crate::util::Encoding;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:             let new_encoding = match new_encoding.parse() {",
          "24:                 Ok(e) => e,",
          "25:                 Err(_) if self.config.ignore_invalid_encoding_declarations => Encoding::Latin1,",
          "27:             };",
          "28:             let current_encoding = self.lexer.encoding();",
          "29:             if current_encoding != new_encoding {",
          "",
          "[Removed Lines]",
          "26:                 Err(_) => return Some(self_error!(self; \"Unknown encoding: {}\", new_encoding)),",
          "",
          "[Added Lines]",
          "26:                 Err(_) => return Some(self.error(SyntaxError::UnsupportedEncoding(new_encoding.into()))),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:                     (Encoding::Unknown | Encoding::Default, new) if new != Encoding::Utf16 => new,",
          "32:                     (Encoding::Utf16Be | Encoding::Utf16Le, Encoding::Utf16) => current_encoding,",
          "33:                     _ if self.config.ignore_invalid_encoding_declarations => current_encoding,",
          "35:                 };",
          "36:                 self.lexer.set_encoding(set);",
          "37:             }",
          "",
          "[Removed Lines]",
          "34:                     _ => return Some(self_error!(self; \"Conflicting encoding declared {}, used {}\", new_encoding, current_encoding)),",
          "",
          "[Added Lines]",
          "34:                     _ => return Some(self.error(SyntaxError::ConflictingEncoding(new_encoding, current_encoding))),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:             DeclarationSubstate::BeforeVersion => match t {",
          "53:                 Token::Character('v') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersion)),",
          "54:                 Token::Character(c) if is_whitespace_char(c) => None,  // continue",
          "56:             },",
          "58:             DeclarationSubstate::InsideVersion => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "55:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "55:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "65:                                 DeclarationSubstate::AfterVersion",
          "66:                             }",
          "67:                         )),",
          "69:                 }",
          "70:             }),",
          "72:             DeclarationSubstate::AfterVersion => match t {",
          "73:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersionValue)),",
          "74:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "76:             },",
          "78:             DeclarationSubstate::InsideVersionValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "68:                     _ => Some(this.error(SyntaxError::UnexpectedNameInsideXml(name))),",
          "75:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "68:                     _ => Some(this.error(SyntaxError::UnexpectedNameInsideXml(name.to_string().into()))),",
          "75:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "84:                 if this.data.version.is_some() {",
          "85:                     this.into_state_continue(State::InsideDeclaration(DeclarationSubstate::AfterVersionValue))",
          "86:                 } else {",
          "88:                 }",
          "89:             }),",
          "",
          "[Removed Lines]",
          "87:                     Some(this.error(SyntaxError::UnexpectedXmlVersion(this.data.version)))",
          "",
          "[Added Lines]",
          "87:                     Some(this.error(SyntaxError::UnexpectedXmlVersion(value.into())))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "93:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "94:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "95:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "97:             },",
          "99:             DeclarationSubstate::InsideEncoding => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "96:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "96:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "102:                         this.into_state_continue(State::InsideDeclaration(",
          "103:                             if token == Token::EqualsSign { DeclarationSubstate::InsideEncodingValue } else { DeclarationSubstate::AfterEncoding }",
          "104:                         )),",
          "106:                 }",
          "107:             }),",
          "109:             DeclarationSubstate::AfterEncoding => match t {",
          "110:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncodingValue)),",
          "111:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "113:             },",
          "115:             DeclarationSubstate::InsideEncodingValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "105:                     _ => Some(this.error(SyntaxError::UnexpectedName(name)))",
          "112:                 _ => unexpected_token!(t),",
          "",
          "[Added Lines]",
          "105:                     _ => Some(this.error(SyntaxError::UnexpectedName(name.to_string().into())))",
          "112:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "121:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "122:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "123:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "125:             },",
          "127:             DeclarationSubstate::InsideStandaloneDecl => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "124:                 _ => unexpected_token!(t),",
          "",
          "[Added Lines]",
          "124:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "134:                                 DeclarationSubstate::AfterStandaloneDecl",
          "135:                             }",
          "136:                         )),",
          "138:                 }",
          "139:             }),",
          "141:             DeclarationSubstate::AfterStandaloneDecl => match t {",
          "142:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDeclValue)),",
          "143:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "145:             },",
          "147:             DeclarationSubstate::InsideStandaloneDeclValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "137:                     _ => Some(this.error(SyntaxError::UnexpectedName(name))),",
          "144:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "137:                     _ => Some(this.error(SyntaxError::UnexpectedName(name.to_string().into()))),",
          "144:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "154:                     this.data.standalone = standalone;",
          "155:                     this.into_state_continue(State::InsideDeclaration(DeclarationSubstate::AfterStandaloneDeclValue))",
          "156:                 } else {",
          "158:                 }",
          "159:             }),",
          "161:             DeclarationSubstate::AfterStandaloneDeclValue => match t {",
          "162:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "163:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "165:             },",
          "166:         }",
          "167:     }",
          "",
          "[Removed Lines]",
          "157:                     Some(self_error!(this; SyntaxError::InvalidStandaloneDeclaration(value)))",
          "164:                 _ => unexpected_token!(t),",
          "",
          "[Added Lines]",
          "157:                     Some(this.error(SyntaxError::InvalidStandaloneDeclaration(value.into())))",
          "164:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use super::{DoctypeSubstate, PullParser, QuoteToken, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::{",
          "2:     common::{is_name_char, is_name_start_char, is_whitespace_char},",
          "3:     reader::lexer::Token,",
          "4: };",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "2: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "3: use crate::reader::lexer::Token;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:                     self.data.quote = Some(super::QuoteToken::from_token(&t));",
          "28:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::String))",
          "29:                 },",
          "32:                 _ => None,",
          "33:             },",
          "",
          "[Removed Lines]",
          "30:                 Token::CDataEnd | Token::CDataStart => Some(self_error!(self; \"Unexpected token {}\", t)),",
          "",
          "[Added Lines]",
          "29:                 Token::CDataEnd | Token::CDataStart => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:                     match self.buf.as_str() {",
          "56:                         \"ENTITY\" => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::BeforeEntityName)),",
          "57:                         \"NOTATION\" | \"ELEMENT\" | \"ATTLIST\" => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)),",
          "59:                     }",
          "61:                 },",
          "63:             },",
          "64:             DoctypeSubstate::BeforeEntityName => {",
          "65:                 self.data.name.clear();",
          "",
          "[Removed Lines]",
          "58:                         s => Some(self_error!(self; \"Unknown markup declaration: {}\", s)),",
          "62:                 _ => Some(self_error!(self; \"Incomplete markup declaration: {}\", t)),",
          "",
          "[Added Lines]",
          "57:                         s => Some(self.error(SyntaxError::UnknownMarkupDeclaration(s.into()))),",
          "61:                 _ => Some(self.error(SyntaxError::UnexpectedToken(t))),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73:                         self.data.name.push(c);",
          "74:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityName))",
          "75:                     },",
          "77:                 }",
          "78:             },",
          "79:             DoctypeSubstate::EntityName => match t {",
          "",
          "[Removed Lines]",
          "76:                     _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "",
          "[Added Lines]",
          "75:                     _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:                     self.data.name.push(c);",
          "85:                     None",
          "86:                 },",
          "88:             },",
          "89:             DoctypeSubstate::BeforeEntityValue => {",
          "90:                 self.buf.clear();",
          "",
          "[Removed Lines]",
          "87:                 _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "",
          "[Added Lines]",
          "86:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "101:                         self.data.quote = Some(super::QuoteToken::from_token(&t));",
          "102:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "103:                     },",
          "105:                 }",
          "106:             },",
          "107:             DoctypeSubstate::EntityValue => match t {",
          "",
          "[Removed Lines]",
          "104:                     _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "",
          "[Added Lines]",
          "103:                     _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "127:                     self.buf.push(c);",
          "128:                     None",
          "129:                 },",
          "131:             },",
          "132:             DoctypeSubstate::PEReferenceDefinitionStart => match t {",
          "133:                 Token::Character(c) if is_whitespace_char(c) => {",
          "",
          "[Removed Lines]",
          "130:                 _ => Some(self_error!(self; \"Expected entity value, found {}\", t)),",
          "",
          "[Added Lines]",
          "129:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "138:                     self.data.name.push(c);",
          "139:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::PEReferenceDefinition))",
          "140:                 },",
          "142:             },",
          "143:             DoctypeSubstate::PEReferenceDefinition => match t {",
          "144:                 Token::Character(c) if is_name_char(c) => {",
          "",
          "[Removed Lines]",
          "141:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "140:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "148:                 Token::Character(c) if is_whitespace_char(c) => {",
          "149:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::BeforeEntityValue))",
          "150:                 },",
          "152:             },",
          "153:             DoctypeSubstate::PEReferenceInDtd => match t {",
          "154:                 Token::Character(c) if is_name_char(c) => {",
          "",
          "[Removed Lines]",
          "151:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "150:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "164:                             }",
          "165:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Outside))",
          "166:                         },",
          "168:                     }",
          "169:                 },",
          "171:             },",
          "172:             DoctypeSubstate::PEReferenceInValue => match t {",
          "173:                 Token::Character(c) if is_name_char(c) => {",
          "",
          "[Removed Lines]",
          "167:                         None => Some(self_error!(self; \"Undefined PE entity {}\", name)),",
          "170:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "166:                         None => Some(self.error(SyntaxError::UndefinedPEntity(name.into()))),",
          "169:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "181:                             self.buf.push_str(ent);",
          "182:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "183:                         },",
          "185:                     }",
          "186:                 },",
          "188:             },",
          "189:             DoctypeSubstate::NumericReferenceStart => match t {",
          "190:                 Token::Character('#') => {",
          "",
          "[Removed Lines]",
          "184:                         None => Some(self_error!(self; \"Undefined PE entity {}\", name)),",
          "187:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "183:                         None => Some(self.error(SyntaxError::UndefinedPEntity(name.into()))),",
          "186:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "197:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "198:                 },",
          "200:             },",
          "201:             DoctypeSubstate::NumericReference => match t {",
          "202:                 Token::ReferenceEnd | Token::Character(';') => {",
          "",
          "[Removed Lines]",
          "199:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "198:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "207:                             self.buf.push(c);",
          "208:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "209:                         }",
          "211:                     }",
          "212:                 },",
          "213:                 Token::Character(c) => {",
          "214:                     self.data.ref_data.push(c);",
          "215:                     None",
          "216:                 },",
          "218:             },",
          "219:             DoctypeSubstate::SkipDeclaration => match t {",
          "220:                 Token::TagEnd => {",
          "",
          "[Removed Lines]",
          "210:                         Err(e) => Some(self_error!(self; e)),",
          "217:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "",
          "[Added Lines]",
          "209:                         Err(e) => Some(self.error(e)),",
          "216:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs": [
          "File: src/reader/parser/inside_opening_tag.rs -> src/reader/parser/inside_opening_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::common::is_name_start_char;",
          "2: use crate::namespace;",
          "3: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:                 match name.prefix_ref() {",
          "14:                     Some(prefix) if prefix == namespace::NS_XML_PREFIX ||",
          "15:                                     prefix == namespace::NS_XMLNS_PREFIX =>",
          "17:                     _ => {",
          "18:                         this.data.element_name = Some(name.clone());",
          "19:                         match token {",
          "",
          "[Removed Lines]",
          "16:                         Some(self_error!(this; SyntaxError::InvalidNamePrefix(name.prefix.clone()))),",
          "",
          "[Added Lines]",
          "17:                         Some(this.error(SyntaxError::InvalidNamePrefix(prefix.into()))),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:                     self.buf.push(c);",
          "35:                     self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeName))",
          "36:                 }",
          "38:             },",
          "40:             OpeningTagSubstate::InsideAttributeName => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "37:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "38:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInOpeningTag(t)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:             OpeningTagSubstate::AfterAttributeName => match t {",
          "50:                 Token::EqualsSign => self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeValue)),",
          "51:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "53:             },",
          "55:             OpeningTagSubstate::InsideAttributeValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "52:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "53:                 _ => Some(self.error(SyntaxError::UnexpectedTokenInOpeningTag(t)))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "59:                 if this.data.attributes.iter().any(|a| a.name == name) {  // TODO: looks bad",
          "63:                 } else {",
          "64:                     match name.prefix_ref() {",
          "",
          "[Removed Lines]",
          "62:                     Some(self_error!(this; SyntaxError::RedefinedAttribute(name)))",
          "",
          "[Added Lines]",
          "63:                     Some(this.error(SyntaxError::RedefinedAttribute(name.to_string().into())))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "67:                         Some(namespace::NS_XMLNS_PREFIX) => {",
          "68:                             let ln = &*name.local_name;",
          "69:                             if ln == namespace::NS_XMLNS_PREFIX {",
          "71:                             } else if ln == namespace::NS_XML_PREFIX && &*value != namespace::NS_XML_URI {",
          "73:                             } else if value.is_empty() {",
          "75:                             } else {",
          "76:                                 this.nst.put(name.local_name.clone(), value);",
          "77:                                 this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag))",
          "",
          "[Removed Lines]",
          "70:                                 Some(self_error!(this; \"Cannot redefine prefix '{}'\", namespace::NS_XMLNS_PREFIX))",
          "72:                                 Some(self_error!(this; \"Prefix '{}' cannot be rebound to another value\", namespace::NS_XML_PREFIX))",
          "74:                                 Some(self_error!(this; SyntaxError::CannotUndefinePrefix(ln.to_string())))",
          "",
          "[Added Lines]",
          "71:                                 Some(this.error(SyntaxError::CannotRedefineXmlnsPrefix))",
          "73:                                 Some(this.error(SyntaxError::CannotRedefineXmlPrefix))",
          "75:                                 Some(this.error(SyntaxError::CannotUndefinePrefix(ln.into())))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "82:                         None if &*name.local_name == namespace::NS_XMLNS_PREFIX =>",
          "83:                             match &*value {",
          "84:                                 namespace::NS_XMLNS_PREFIX | namespace::NS_XML_PREFIX | namespace::NS_XML_URI | namespace::NS_XMLNS_URI =>",
          "86:                                 _ => {",
          "87:                                     this.nst.put(namespace::NS_NO_PREFIX, value.clone());",
          "88:                                     this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag))",
          "",
          "[Removed Lines]",
          "85:                                     Some(self_error!(this; \"Namespace '{}' cannot be default\", value)),",
          "",
          "[Added Lines]",
          "86:                                     Some(this.error(SyntaxError::InvalidDefaultNamespace(value.into()))),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
          "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "3: use crate::reader::events::XmlEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:                     match &*name {",
          "27:                         \"xml\"|\"xmL\"|\"xMl\"|\"xML\"|\"Xml\"|\"XmL\"|\"XMl\"|\"XML\" =>",
          "31:                         _ => {",
          "",
          "[Removed Lines]",
          "23:                         \"\" => Some(self_error!(self; SyntaxError::ProcessingInstructionWithoutName)),",
          "28:                             Some(self_error!(self; SyntaxError::InvalidXmlProcessingInstruction(name))),",
          "",
          "[Added Lines]",
          "24:                         \"\" => Some(self.error(SyntaxError::ProcessingInstructionWithoutName)),",
          "29:                             Some(self.error(SyntaxError::InvalidXmlProcessingInstruction(name.into()))),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:                         \"xml\"|\"xmL\"|\"xMl\"|\"xML\"|\"Xml\"|\"XmL\"|\"XMl\"|\"XML\" =>",
          "58:                         _ => {",
          "",
          "[Removed Lines]",
          "55:                             Some(self_error!(self; \"Invalid processing instruction: <?{}\", name)),",
          "",
          "[Added Lines]",
          "56:                             Some(self.error(SyntaxError::InvalidProcessingInstruction(name.into()))),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:                     }",
          "63:                 }",
          "66:             },",
          "68:             ProcessingInstructionSubstate::PIInsideData => match t {",
          "",
          "[Removed Lines]",
          "65:                 _ => Some(self_error!(self; \"Unexpected token: <?{}{}\", self.buf, t)),",
          "",
          "[Added Lines]",
          "66:                 _ => {",
          "67:                     let buf = self.take_buf();",
          "68:                     Some(self.error(SyntaxError::UnexpectedProcessingInstruction(buf.into(), t)))",
          "69:                 }",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_reference.rs||src/reader/parser/inside_reference.rs": [
          "File: src/reader/parser/inside_reference.rs -> src/reader/parser/inside_reference.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::char;",
          "3: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "5: use crate::reader::lexer::Token;",
          "7: use super::{PullParser, Result, State};",
          "9: impl PullParser {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:             Token::ReferenceEnd => {",
          "19:                 let name = self.data.take_ref_data();",
          "20:                 if name.is_empty() {",
          "22:                 }",
          "24:                 let c = match &*name {",
          "",
          "[Removed Lines]",
          "21:                     return Some(self_error!(self; \"Encountered empty entity\"));",
          "",
          "[Added Lines]",
          "19:                     return Some(self.error(SyntaxError::EmptyEntity));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:                     \"quot\" => Some('\"'),",
          "30:                     _ if name.starts_with('#') => match self.numeric_reference_from_str(&name[1..]) {",
          "31:                         Ok(c) => Some(c),",
          "33:                     },",
          "34:                     _ => None,",
          "35:                 };",
          "",
          "[Removed Lines]",
          "32:                         Err(e) => return Some(self_error!(self; e))",
          "",
          "[Added Lines]",
          "30:                         Err(e) => return Some(self.error(e))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "49:                         self.buf.push_str(v);",
          "50:                     }",
          "51:                 } else {",
          "53:                 }",
          "54:                 let prev_st = self.state_after_reference;",
          "55:                 if prev_st == State::OutsideTag && !is_whitespace_char(self.buf.chars().last().unwrap_or('\\0')) {",
          "",
          "[Removed Lines]",
          "52:                     return Some(self_error!(self; \"Unexpected entity: {}\", name));",
          "",
          "[Added Lines]",
          "50:                     return Some(self.error(SyntaxError::UnexpectedEntity(name.into())));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "58:                 self.into_state_continue(prev_st)",
          "59:             }",
          "62:         }",
          "63:     }",
          "66:         let val = if let Some(hex) = num_str.strip_prefix('x') {",
          "68:         } else {",
          "70:         };",
          "71:         match char::from_u32(val) {",
          "73:             Some(c) => Ok(c),",
          "74:             None if self.config.c.replace_unknown_entity_references => {",
          "75:                 Ok('\\u{fffd}')",
          "76:             },",
          "78:         }",
          "79:     }",
          "80: }",
          "",
          "[Removed Lines]",
          "61:             _ => Some(self_error!(self; \"Unexpected token inside an entity: {}\", t)),",
          "65:     pub(crate) fn numeric_reference_from_str(&self, num_str: &str) -> std::result::Result<char, String> {",
          "67:             u32::from_str_radix(hex, 16).map_err(move |_| format!(\"Invalid hexadecimal character number in an entity: {num_str}\"))?",
          "69:             u32::from_str_radix(num_str, 10).map_err(move |_| format!(\"Invalid character number in an entity: {num_str}\"))?",
          "72:             Some('\\0' | '\\u{fffe}' | '\\u{ffff}') => Err(\"character is not allowed\".into()),",
          "77:             None => Err(format!(\"Invalid character U+{val:X}\")),",
          "",
          "[Added Lines]",
          "59:             _ => Some(self.error(SyntaxError::UnexpectedTokenInEntity(t))),",
          "63:     pub(crate) fn numeric_reference_from_str(&self, num_str: &str) -> std::result::Result<char, SyntaxError> {",
          "65:             u32::from_str_radix(hex, 16).map_err(move |_| SyntaxError::InvalidNumericEntity(num_str.into()))?",
          "67:             u32::from_str_radix(num_str, 10).map_err(move |_| SyntaxError::InvalidNumericEntity(num_str.into()))?",
          "70:             Some('\\0' | '\\u{fffe}' | '\\u{ffff}') => Err(SyntaxError::InvalidCharacterEntity(val)),",
          "75:             None => Err(SyntaxError::InvalidCharacterEntity(val)),",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::common::is_whitespace_char;",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use crate::reader::error::SyntaxError;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             }",
          "31:             _ if t.contains_char_data() && self.depth() == 0 => {",
          "33:             }",
          "37:             Token::ReferenceEnd if self.depth() > 0 => { // Semi-colon in a text outside an entity",
          "38:                 self.inside_whitespace = false;",
          "",
          "[Removed Lines]",
          "32:                 Some(self_error!(self; \"Unexpected characters outside the root element: {}\", t))",
          "35:             Token::CDataEnd => Some(self_error!(self; \"]]> in text\")),",
          "",
          "[Added Lines]",
          "32:                 Some(self.error(SyntaxError::UnexpectedTokenOutsideRoot(t)))",
          "35:             Token::CDataEnd => Some(self.error(SyntaxError::UnexpectedCdataEnd)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:                         self.into_state(State::InsideCData, next_event)",
          "119:                     }",
          "122:                 }",
          "123:             }",
          "124:         }",
          "",
          "[Removed Lines]",
          "121:                     _ => Some(self_error!(self; \"Unexpected token: {}\", t)),",
          "",
          "[Added Lines]",
          "121:                     _ => Some(self.error(SyntaxError::UnexpectedToken(t)))",
          "",
          "---------------"
        ],
        "tests/event_reader.rs||tests/event_reader.rs": [
          "File: tests/event_reader.rs -> tests/event_reader.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "251: fn bad_1() {",
          "252:     test(",
          "253:         br#\"<?xml&.,\"#,",
          "255:         ParserConfig::new(),",
          "256:         false,",
          "257:     );",
          "",
          "[Removed Lines]",
          "254:         br#\"1:6 Unexpected token: <?xml&\"#,",
          "",
          "[Added Lines]",
          "254:         br#\"1:6 Unexpected token inside processing instruction: <?xml&\"#,",
          "",
          "---------------"
        ]
      }
    }
  ]
}