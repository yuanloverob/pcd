{
  "cve_id": "CVE-2022-31083",
  "cve_desc": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Prior to versions 4.10.11 and 5.2.2, the certificate in the Parse Server Apple Game Center auth adapter not validated. As a result, authentication could potentially be bypassed by making a fake certificate accessible via certain Apple domains and providing the URL to that certificate in an authData object. Versions 4.0.11 and 5.2.2 prevent this by introducing a new `rootCertificateUrl` property to the Parse Server Apple Game Center auth adapter which takes the URL to the root certificate of Apple's Game Center authentication certificate. If no value is set, the `rootCertificateUrl` property defaults to the URL of the current root certificate as of May 27, 2022. Keep in mind that the root certificate can change at any time and that it is the developer's responsibility to keep the root certificate URL up-to-date when using the Parse Server Apple Game Center auth adapter. There are no known workarounds for this issue.",
  "repo": "parse-community/parse-server",
  "patch_hash": "ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
  "patch_info": {
    "commit_hash": "ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
    "repo": "parse-community/parse-server",
    "commit_url": "https://github.com/parse-community/parse-server/commit/ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
    "files": [
      "release.config.js",
      "spec/AuthenticationAdapters.spec.js",
      "spec/support/cert/game_center.pem",
      "src/Adapters/Auth/gcenter.js"
    ],
    "message": "fix: certificate in Apple Game Center auth adapter not validated; this fixes a security vulnerability in which authentication could be bypassed using a fake certificate; if you are using the Apple Gamer Center auth adapter it is your responsibility to keep its root certificate up-to-date and we advice you read the security advisory ([GHSA-rh9j-f5f8-rvgc](https://github.com/parse-community/parse-server/security/advisories/GHSA-rh9j-f5f8-rvgc))",
    "before_after_code_files": [
      "release.config.js||release.config.js",
      "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
      "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem",
      "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
    ]
  },
  "patch_diff": {
    "release.config.js||release.config.js": [
      "File: release.config.js -> release.config.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:       ['@semantic-release/git', {",
      "84:         assets: [changelogFile, 'package.json', 'package-lock.json', 'npm-shrinkwrap.json'],",
      "85:       }],",
      "86:       [",
      "87:         \"@saithodev/semantic-release-backmerge\",",
      "88:         {",
      "89:           \"branches\": [",
      "90:             { from: \"beta\", to: \"alpha\" },",
      "91:             { from: \"release\", to: \"beta\" },",
      "93:           ]",
      "94:         }",
      "95:       ],",
      "101:     ],",
      "102:   };",
      "",
      "[Removed Lines]",
      "92:             { from: \"release\", to: \"alpha\" },",
      "96:       ['@semantic-release/github', {",
      "97:         successComment: getReleaseComment(),",
      "98:         labels: ['type:ci'],",
      "99:         releasedLabels: ['state:released<%= nextRelease.channel ? `-\\${nextRelease.channel}` : \"\" %>']",
      "100:       }],",
      "",
      "[Added Lines]",
      "86:       ['@semantic-release/github', {",
      "87:         successComment: getReleaseComment(),",
      "88:         labels: ['type:ci'],",
      "89:         releasedLabels: ['state:released<%= nextRelease.channel ? `-\\${nextRelease.channel}` : \"\" %>']",
      "90:       }],",
      "",
      "---------------"
    ],
    "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
      "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1653: describe('Apple Game Center Auth adapter', () => {",
      "1654:   const gcenter = require('../lib/Adapters/Auth/gcenter');",
      "1656:   it('validateAuthData should validate', async () => {",
      "1658:     const authData = {",
      "1659:       id: 'G:1965586982',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1655:   const fs = require('fs');",
      "1656:   const testCert = fs.readFileSync(__dirname + '/support/cert/game_center.pem');",
      "1657:   it('can load adapter', async () => {",
      "1658:     const options = {",
      "1659:       gcenter: {",
      "1660:         rootCertificateUrl:",
      "1661:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
      "1662:       },",
      "1663:     };",
      "1664:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1665:       'gcenter',",
      "1666:       options",
      "1667:     );",
      "1668:     await adapter.validateAppId(",
      "1669:       appIds,",
      "1670:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1671:       providerOptions",
      "1672:     );",
      "1673:   });",
      "1675:     const options = {",
      "1676:       gcenter: {",
      "1677:         rootCertificateUrl:",
      "1678:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
      "1679:       },",
      "1680:     };",
      "1681:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1682:       'gcenter',",
      "1683:       options",
      "1684:     );",
      "1685:     await adapter.validateAppId(",
      "1686:       appIds,",
      "1687:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1688:       providerOptions",
      "1689:     );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1664:       salt: 'DzqqrQ==',",
      "1665:       bundleId: 'cloud.xtralife.gamecenterauth',",
      "1666:     };",
      "1668:     await gcenter.validateAuthData(authData);",
      "1669:   });",
      "1671:   it('validateAuthData invalid signature id', async () => {",
      "1672:     const authData = {",
      "1673:       id: 'G:1965586982',",
      "1675:       timestamp: 1565257031287,",
      "1676:       signature: '1234',",
      "1677:       salt: 'DzqqrQ==',",
      "1679:     };",
      "1687:   });",
      "1689:   it('validateAuthData invalid public key http url', async () => {",
      "1690:     const publicKeyUrls = [",
      "1691:       'example.com',",
      "1692:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
      "",
      "[Removed Lines]",
      "1674:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer',",
      "1678:       bundleId: 'cloud.xtralife.gamecenterauth',",
      "1681:     try {",
      "1682:       await gcenter.validateAuthData(authData);",
      "1683:       fail();",
      "1684:     } catch (e) {",
      "1685:       expect(e.message).toBe('Apple Game Center - invalid signature');",
      "1686:     }",
      "",
      "[Added Lines]",
      "1700:     gcenter.cache['https://static.gc.apple.com/public-key/gc-prod-4.cer'] = testCert;",
      "1705:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1706:       'gcenter',",
      "1707:       {}",
      "1708:     );",
      "1709:     await adapter.validateAppId(",
      "1710:       appIds,",
      "1711:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1712:       providerOptions",
      "1713:     );",
      "1716:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-6.cer',",
      "1720:       bundleId: 'com.example.com',",
      "1722:     await expectAsync(gcenter.validateAuthData(authData)).toBeRejectedWith(",
      "1723:       new Parse.Error(Parse.Error.SCRIPT_FAILED, 'Apple Game Center - invalid signature')",
      "1724:     );",
      "1728:     const options = {",
      "1729:       gcenter: {",
      "1730:         rootCertificateUrl:",
      "1731:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
      "1732:       },",
      "1733:     };",
      "1734:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1735:       'gcenter',",
      "1736:       options",
      "1737:     );",
      "1738:     await adapter.validateAppId(",
      "1739:       appIds,",
      "1740:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1741:       providerOptions",
      "1742:     );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1714:       )",
      "1715:     );",
      "1716:   });",
      "1717: });",
      "1719: describe('phant auth adapter', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1771:   it('should not validate Symantec Cert', async () => {",
      "1772:     const options = {",
      "1773:       gcenter: {",
      "1774:         rootCertificateUrl:",
      "1775:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
      "1776:       },",
      "1777:     };",
      "1778:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1779:       'gcenter',",
      "1780:       options",
      "1781:     );",
      "1782:     await adapter.validateAppId(",
      "1783:       appIds,",
      "1784:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1785:       providerOptions",
      "1786:     );",
      "1787:     expect(() =>",
      "1788:       gcenter.verifyPublicKeyIssuer(",
      "1789:         testCert,",
      "1790:         'https://static.gc.apple.com/public-key/gc-prod-4.cer'",
      "1791:       )",
      "1792:     );",
      "1793:   });",
      "1795:   it('adapter should load default cert', async () => {",
      "1796:     const options = {",
      "1797:       gcenter: {},",
      "1798:     };",
      "1799:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1800:       'gcenter',",
      "1801:       options",
      "1802:     );",
      "1803:     await adapter.validateAppId(",
      "1804:       appIds,",
      "1805:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1806:       providerOptions",
      "1807:     );",
      "1808:     const previous = new Date();",
      "1809:     await adapter.validateAppId(",
      "1810:       appIds,",
      "1811:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1812:       providerOptions",
      "1813:     );",
      "1815:     const duration = new Date().getTime() - previous.getTime();",
      "1816:     expect(duration).toEqual(0);",
      "1817:   });",
      "1819:   it('adapter should throw', async () => {",
      "1820:     const options = {",
      "1821:       gcenter: {",
      "1822:         rootCertificateUrl: 'https://example.com',",
      "1823:       },",
      "1824:     };",
      "1825:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
      "1826:       'gcenter',",
      "1827:       options",
      "1828:     );",
      "1829:     await expectAsync(",
      "1830:       adapter.validateAppId(",
      "1831:         appIds,",
      "1832:         { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
      "1833:         providerOptions",
      "1834:       )",
      "1835:     ).toBeRejectedWith(",
      "1836:       new Parse.Error(",
      "1837:         Parse.Error.OBJECT_NOT_FOUND,",
      "1838:         'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
      "1839:       )",
      "1840:     );",
      "1841:   });",
      "",
      "---------------"
    ],
    "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem": [
      "File: spec/support/cert/game_center.pem -> spec/support/cert/game_center.pem",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: -----BEGIN CERTIFICATE-----",
      "2: MIIEvDCCA6SgAwIBAgIQXRHxNXkw1L9z5/3EZ/T/hDANBgkqhkiG9w0BAQsFADB/",
      "3: MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd",
      "4: BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVj",
      "5: IENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xODA5MTcwMDAwMDBa",
      "6: Fw0xOTA5MTcyMzU5NTlaMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y",
      "7: bmlhMRIwEAYDVQQHDAlDdXBlcnRpbm8xFDASBgNVBAoMC0FwcGxlLCBJbmMuMQ8w",
      "8: DQYDVQQLDAZHQyBTUkUxFDASBgNVBAMMC0FwcGxlLCBJbmMuMIIBIjANBgkqhkiG",
      "9: 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA06fwIi8fgKrTQu7cBcFkJVF6+Tqvkg7MKJTM",
      "10: IOYPPQtPF3AZYPsbUoRKAD7/JXrxxOSVJ7vU1mP77tYG8TcUteZ3sAwvt2dkRbm7",
      "11: ZO6DcmSggv1Dg4k3goNw4GYyCY4Z2/8JSmsQ80Iv/UOOwynpBziEeZmJ4uck6zlA",
      "12: 17cDkH48LBpKylaqthym5bFs9gj11pto7mvyb5BTcVuohwi6qosvbs/4VGbC2Nsz",
      "13: ie416nUZfv+xxoXH995gxR2mw5cDdeCew7pSKxEhvYjT2nVdQF0q/hnPMFnOaEyT",
      "14: q79n3gwFXyt0dy8eP6KBF7EW9J6b7ubu/j7h+tQfxPM+gTXOBQIDAQABo4IBPjCC",
      "15: ATowCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH",
      "16: AwMwYQYDVR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYXaHR0cHM6Ly9k",
      "17: LnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNv",
      "18: bS9ycGEwHwYDVR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYDVR0fBCQw",
      "19: IjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwVwYIKwYBBQUHAQEE",
      "20: SzBJMB8GCCsGAQUFBzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUFBzAC",
      "21: hhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDANBgkqhkiG9w0BAQsFAAOCAQEA",
      "22: I/j/PcCNPebSAGrcqSFBSa2mmbusOX01eVBg8X0G/z8Z+ZWUfGFzDG0GQf89MPxV",
      "23: woec+nZuqui7o9Bg8s8JbHV0TC52X14CbTj9w/qBF748WbH9gAaTkrJYPm+MlNhu",
      "24: tjEuQdNl/YXVMvQW4O8UMHTi09GyJQ0NC4q92Wxvx1m/qzjvTLvrXHGQ9pEHhPyz",
      "25: vfBLxQkWpNoCNKU7UeESyH06XOrGc9MsII9deeKsDJp9a0jtx+pP4MFVtFME9SSQ",
      "26: tMBs0It7WwEf7qcRLpialxKwY2EzQ9g4WnANHqo18PrDBE10TFpZPzUh7JhMViVr",
      "27: EEbl0YdElmF8Hlamah/yNw==",
      "28: -----END CERTIFICATE-----",
      "",
      "---------------"
    ],
    "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
      "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: const { Parse } = require('parse/node');",
      "15: const crypto = require('crypto');",
      "16: const https = require('https');",
      "18: const cache = {}; // (publicKey -> cert) cache",
      "20: function verifyPublicKeyUrl(publicKeyUrl) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: const { pki } = require('node-forge');",
      "18: const ca = { cert: null, url: null };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:     path: url.pathname,",
      "53:     method: 'HEAD',",
      "54:   };",
      "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
      "57:   );",
      "58:   if (",
      "62:   ) {",
      "63:     throw new Parse.Error(",
      "64:       Parse.Error.OBJECT_NOT_FOUND,",
      "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
      "66:     );",
      "67:   }",
      "68:   return new Promise((resolve, reject) => {",
      "69:     https",
      "72:         res.on('data', chunk => {",
      "74:         });",
      "75:         res.on('end', () => {",
      "86:           }",
      "88:         });",
      "89:       })",
      "90:       .on('error', reject);",
      "",
      "[Removed Lines]",
      "55:   const headers = await new Promise((resolve, reject) =>",
      "59:     headers['content-type'] !== 'application/pkix-cert' ||",
      "60:     headers['content-length'] == null ||",
      "61:     headers['content-length'] > 10000",
      "70:       .get(publicKeyUrl, res => {",
      "71:         let data = '';",
      "73:           data += chunk.toString('base64');",
      "76:           const cert = convertX509CertToPEM(data);",
      "77:           if (res.headers['cache-control']) {",
      "78:             var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);",
      "79:             if (expire) {",
      "80:               cache[publicKeyUrl] = cert;",
      "82:               setTimeout(() => {",
      "83:                 delete cache[publicKeyUrl];",
      "84:               }, parseInt(expire[1], 10) * 1000);",
      "85:             }",
      "87:           resolve(cert);",
      "",
      "[Added Lines]",
      "56:   const cert_headers = await new Promise((resolve, reject) =>",
      "59:   const validContentTypes = ['application/x-x509-ca-cert', 'application/pkix-cert'];",
      "61:     !validContentTypes.includes(cert_headers['content-type']) ||",
      "62:     cert_headers['content-length'] == null ||",
      "63:     cert_headers['content-length'] > 10000",
      "70:   const { certificate, headers } = await getCertificate(publicKeyUrl);",
      "71:   if (headers['cache-control']) {",
      "72:     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);",
      "73:     if (expire) {",
      "74:       cache[publicKeyUrl] = certificate;",
      "76:       setTimeout(() => {",
      "77:         delete cache[publicKeyUrl];",
      "78:       }, parseInt(expire[1], 10) * 1000);",
      "79:     }",
      "80:   }",
      "81:   return verifyPublicKeyIssuer(certificate, publicKeyUrl);",
      "82: }",
      "84: function getCertificate(url, buffer) {",
      "87:       .get(url, res => {",
      "88:         const data = [];",
      "90:           data.push(chunk);",
      "93:           if (buffer) {",
      "94:             resolve({ certificate: Buffer.concat(data), headers: res.headers });",
      "95:             return;",
      "97:           let cert = '';",
      "98:           for (const chunk of data) {",
      "99:             cert += chunk.toString('base64');",
      "100:           }",
      "101:           const certificate = convertX509CertToPEM(cert);",
      "102:           resolve({ certificate, headers: res.headers });",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115:   }",
      "116: }",
      "119: async function validateAuthData(authData) {",
      "120:   if (!authData.id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133: function verifyPublicKeyIssuer(cert, publicKeyUrl) {",
      "134:   const publicKeyCert = pki.certificateFromPem(cert);",
      "135:   if (!ca.cert) {",
      "136:     throw new Parse.Error(",
      "137:       Parse.Error.OBJECT_NOT_FOUND,",
      "138:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
      "139:     );",
      "140:   }",
      "141:   try {",
      "142:     if (!ca.cert.verify(publicKeyCert)) {",
      "143:       throw new Parse.Error(",
      "144:         Parse.Error.OBJECT_NOT_FOUND,",
      "145:         `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
      "146:       );",
      "147:     }",
      "148:   } catch (e) {",
      "149:     throw new Parse.Error(",
      "150:       Parse.Error.OBJECT_NOT_FOUND,",
      "151:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
      "152:     );",
      "153:   }",
      "154:   return cert;",
      "155: }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "126: }",
      "131: }",
      "133: module.exports = {",
      "134:   validateAppId,",
      "135:   validateAuthData,",
      "136: };",
      "",
      "[Removed Lines]",
      "129: function validateAppId() {",
      "130:   return Promise.resolve();",
      "",
      "[Added Lines]",
      "168: async function validateAppId(appIds, authData, options = {}) {",
      "169:   if (!options.rootCertificateUrl) {",
      "170:     options.rootCertificateUrl =",
      "171:       'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';",
      "172:   }",
      "173:   if (ca.url === options.rootCertificateUrl) {",
      "174:     return;",
      "175:   }",
      "176:   const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);",
      "177:   if (",
      "178:     headers['content-type'] !== 'application/x-pem-file' ||",
      "179:     headers['content-length'] == null ||",
      "180:     headers['content-length'] > 10000",
      "181:   ) {",
      "182:     throw new Parse.Error(",
      "183:       Parse.Error.OBJECT_NOT_FOUND,",
      "184:       'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
      "185:     );",
      "186:   }",
      "187:   ca.cert = pki.certificateFromPem(certificate);",
      "188:   ca.url = options.rootCertificateUrl;",
      "194:   cache,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c411c48d49791667454021af0f1a2ca0a13d857e",
      "candidate_info": {
        "commit_hash": "c411c48d49791667454021af0f1a2ca0a13d857e",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/c411c48d49791667454021af0f1a2ca0a13d857e",
        "files": [
          "spec/support/cert/game_center.pem"
        ],
        "message": "Create game_center.pem",
        "before_after_code_files": [
          "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem"
          ],
          "candidate": [
            "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem"
          ]
        }
      },
      "candidate_diff": {
        "spec/support/cert/game_center.pem||spec/support/cert/game_center.pem": [
          "File: spec/support/cert/game_center.pem -> spec/support/cert/game_center.pem",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: -----BEGIN CERTIFICATE-----",
          "2: MIIEvDCCA6SgAwIBAgIQXRHxNXkw1L9z5/3EZ/T/hDANBgkqhkiG9w0BAQsFADB/",
          "3: MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd",
          "4: BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVj",
          "5: IENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xODA5MTcwMDAwMDBa",
          "6: Fw0xOTA5MTcyMzU5NTlaMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y",
          "7: bmlhMRIwEAYDVQQHDAlDdXBlcnRpbm8xFDASBgNVBAoMC0FwcGxlLCBJbmMuMQ8w",
          "8: DQYDVQQLDAZHQyBTUkUxFDASBgNVBAMMC0FwcGxlLCBJbmMuMIIBIjANBgkqhkiG",
          "9: 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA06fwIi8fgKrTQu7cBcFkJVF6+Tqvkg7MKJTM",
          "10: IOYPPQtPF3AZYPsbUoRKAD7/JXrxxOSVJ7vU1mP77tYG8TcUteZ3sAwvt2dkRbm7",
          "11: ZO6DcmSggv1Dg4k3goNw4GYyCY4Z2/8JSmsQ80Iv/UOOwynpBziEeZmJ4uck6zlA",
          "12: 17cDkH48LBpKylaqthym5bFs9gj11pto7mvyb5BTcVuohwi6qosvbs/4VGbC2Nsz",
          "13: ie416nUZfv+xxoXH995gxR2mw5cDdeCew7pSKxEhvYjT2nVdQF0q/hnPMFnOaEyT",
          "14: q79n3gwFXyt0dy8eP6KBF7EW9J6b7ubu/j7h+tQfxPM+gTXOBQIDAQABo4IBPjCC",
          "15: ATowCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH",
          "16: AwMwYQYDVR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYXaHR0cHM6Ly9k",
          "17: LnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNv",
          "18: bS9ycGEwHwYDVR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYDVR0fBCQw",
          "19: IjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwVwYIKwYBBQUHAQEE",
          "20: SzBJMB8GCCsGAQUFBzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUFBzAC",
          "21: hhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDANBgkqhkiG9w0BAQsFAAOCAQEA",
          "22: I/j/PcCNPebSAGrcqSFBSa2mmbusOX01eVBg8X0G/z8Z+ZWUfGFzDG0GQf89MPxV",
          "23: woec+nZuqui7o9Bg8s8JbHV0TC52X14CbTj9w/qBF748WbH9gAaTkrJYPm+MlNhu",
          "24: tjEuQdNl/YXVMvQW4O8UMHTi09GyJQ0NC4q92Wxvx1m/qzjvTLvrXHGQ9pEHhPyz",
          "25: vfBLxQkWpNoCNKU7UeESyH06XOrGc9MsII9deeKsDJp9a0jtx+pP4MFVtFME9SSQ",
          "26: tMBs0It7WwEf7qcRLpialxKwY2EzQ9g4WnANHqo18PrDBE10TFpZPzUh7JhMViVr",
          "27: EEbl0YdElmF8Hlamah/yNw==",
          "28: -----END CERTIFICATE-----",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07786c16660c6b9854ef97246e46f25015dafd77",
      "candidate_info": {
        "commit_hash": "07786c16660c6b9854ef97246e46f25015dafd77",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/07786c16660c6b9854ef97246e46f25015dafd77",
        "files": [
          "spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js"
        ],
        "message": "fix adapter",
        "before_after_code_files": [
          "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
          "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ],
          "candidate": [
            "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js",
            "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/AuthenticationAdapters.spec.js||spec/AuthenticationAdapters.spec.js": [
          "File: spec/AuthenticationAdapters.spec.js -> spec/AuthenticationAdapters.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1645: describe('Apple Game Center Auth adapter', () => {",
          "1646:   const gcenter = require('../lib/Adapters/Auth/gcenter');",
          "1648:   it('validateAuthData should validate', async () => {",
          "1650:     const authData = {",
          "1651:       id: 'G:1965586982',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1647:   const fs = require('fs');",
          "1648:   const testCert = fs.readFileSync(__dirname + '/support/cert/game_center.pem');",
          "1649:   it('can load adapter', async () => {",
          "1650:     const options = {",
          "1651:       gcenter: {",
          "1652:         rootCertificateUrl:",
          "1653:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1654:       },",
          "1655:     };",
          "1656:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1657:       'gcenter',",
          "1658:       options",
          "1659:     );",
          "1660:     await adapter.validateAppId(",
          "1661:       appIds,",
          "1662:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1663:       providerOptions",
          "1664:     );",
          "1665:   });",
          "1667:     const options = {",
          "1668:       gcenter: {",
          "1669:         rootCertificateUrl:",
          "1670:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1671:       },",
          "1672:     };",
          "1673:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1674:       'gcenter',",
          "1675:       options",
          "1676:     );",
          "1677:     await adapter.validateAppId(",
          "1678:       appIds,",
          "1679:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1680:       providerOptions",
          "1681:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656:       salt: 'DzqqrQ==',",
          "1657:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1658:     };",
          "1660:     await gcenter.validateAuthData(authData);",
          "1661:   });",
          "1663:   it('validateAuthData invalid signature id', async () => {",
          "1664:     const authData = {",
          "1665:       id: 'G:1965586982',",
          "1667:       timestamp: 1565257031287,",
          "1668:       signature: '1234',",
          "1669:       salt: 'DzqqrQ==',",
          "1671:     };",
          "1679:   });",
          "1681:   it('validateAuthData invalid public key http url', async () => {",
          "1682:     const publicKeyUrls = [",
          "1683:       'example.com',",
          "1684:       'http://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "",
          "[Removed Lines]",
          "1666:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer',",
          "1670:       bundleId: 'cloud.xtralife.gamecenterauth',",
          "1673:     try {",
          "1674:       await gcenter.validateAuthData(authData);",
          "1675:       fail();",
          "1676:     } catch (e) {",
          "1677:       expect(e.message).toBe('Apple Game Center - invalid signature');",
          "1678:     }",
          "",
          "[Added Lines]",
          "1692:     gcenter.cache['https://static.gc.apple.com/public-key/gc-prod-4.cer'] = testCert;",
          "1697:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1698:       'gcenter',",
          "1699:       {}",
          "1700:     );",
          "1701:     await adapter.validateAppId(",
          "1702:       appIds,",
          "1703:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1704:       providerOptions",
          "1705:     );",
          "1708:       publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-6.cer',",
          "1712:       bundleId: 'com.example.com',",
          "1714:     await expectAsync(gcenter.validateAuthData(authData)).toBeRejectedWith(",
          "1715:       new Parse.Error(Parse.Error.SCRIPT_FAILED, 'Apple Game Center - invalid signature')",
          "1716:     );",
          "1720:     const options = {",
          "1721:       gcenter: {",
          "1722:         rootCertificateUrl:",
          "1723:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1724:       },",
          "1725:     };",
          "1726:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1727:       'gcenter',",
          "1728:       options",
          "1729:     );",
          "1730:     await adapter.validateAppId(",
          "1731:       appIds,",
          "1732:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1733:       providerOptions",
          "1734:     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1706:       )",
          "1707:     );",
          "1708:   });",
          "1709: });",
          "1711: describe('phant auth adapter', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1763:   it('should not validate Symantec Cert', async () => {",
          "1764:     const options = {",
          "1765:       gcenter: {",
          "1766:         rootCertificateUrl:",
          "1767:           'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem',",
          "1768:       },",
          "1769:     };",
          "1770:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1771:       'gcenter',",
          "1772:       options",
          "1773:     );",
          "1774:     await adapter.validateAppId(",
          "1775:       appIds,",
          "1776:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1777:       providerOptions",
          "1778:     );",
          "1779:     expect(() =>",
          "1780:       gcenter.verifyPublicKeyIssuer(",
          "1781:         testCert,",
          "1782:         'https://static.gc.apple.com/public-key/gc-prod-4.cer'",
          "1783:       )",
          "1784:     );",
          "1785:   });",
          "1787:   it('adapter should load default cert', async () => {",
          "1788:     const options = {",
          "1789:       gcenter: {},",
          "1790:     };",
          "1791:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1792:       'gcenter',",
          "1793:       options",
          "1794:     );",
          "1795:     await adapter.validateAppId(",
          "1796:       appIds,",
          "1797:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1798:       providerOptions",
          "1799:     );",
          "1800:     const previous = new Date();",
          "1801:     await adapter.validateAppId(",
          "1802:       appIds,",
          "1803:       { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1804:       providerOptions",
          "1805:     );",
          "1807:     const duration = new Date().getTime() - previous.getTime();",
          "1808:     expect(duration).toEqual(0);",
          "1809:   });",
          "1811:   it('adapter should throw', async () => {",
          "1812:     const options = {",
          "1813:       gcenter: {",
          "1814:         rootCertificateUrl: 'https://example.com',",
          "1815:       },",
          "1816:     };",
          "1817:     const { adapter, appIds, providerOptions } = authenticationLoader.loadAuthAdapter(",
          "1818:       'gcenter',",
          "1819:       options",
          "1820:     );",
          "1821:     await expectAsync(",
          "1822:       adapter.validateAppId(",
          "1823:         appIds,",
          "1824:         { publicKeyUrl: 'https://static.gc.apple.com/public-key/gc-prod-4.cer' },",
          "1825:         providerOptions",
          "1826:       )",
          "1827:     ).toBeRejectedWith(",
          "1828:       new Parse.Error(",
          "1829:         Parse.Error.OBJECT_NOT_FOUND,",
          "1830:         'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'",
          "1831:       )",
          "1832:     );",
          "1833:   });",
          "",
          "---------------"
        ],
        "src/Adapters/Auth/gcenter.js||src/Adapters/Auth/gcenter.js": [
          "File: src/Adapters/Auth/gcenter.js -> src/Adapters/Auth/gcenter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: const { Parse } = require('parse/node');",
          "15: const crypto = require('crypto');",
          "16: const https = require('https');",
          "18: const cache = {}; // (publicKey -> cert) cache",
          "20: function verifyPublicKeyUrl(publicKeyUrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: const { pki } = require('node-forge');",
          "18: const ca = { cert: null, url: null };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     path: url.pathname,",
          "53:     method: 'HEAD',",
          "54:   };",
          "56:     https.get(headOptions, res => resolve(res.headers)).on('error', reject)",
          "57:   );",
          "58:   if (",
          "62:   ) {",
          "63:     throw new Parse.Error(",
          "64:       Parse.Error.OBJECT_NOT_FOUND,",
          "65:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "66:     );",
          "67:   }",
          "68:   return new Promise((resolve, reject) => {",
          "69:     https",
          "72:         res.on('data', chunk => {",
          "74:         });",
          "75:         res.on('end', () => {",
          "86:           }",
          "88:         });",
          "89:       })",
          "90:       .on('error', reject);",
          "",
          "[Removed Lines]",
          "55:   const headers = await new Promise((resolve, reject) =>",
          "59:     headers['content-type'] !== 'application/pkix-cert' ||",
          "60:     headers['content-length'] == null ||",
          "61:     headers['content-length'] > 10000",
          "70:       .get(publicKeyUrl, res => {",
          "71:         let data = '';",
          "73:           data += chunk.toString('base64');",
          "76:           const cert = convertX509CertToPEM(data);",
          "77:           if (res.headers['cache-control']) {",
          "78:             var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);",
          "79:             if (expire) {",
          "80:               cache[publicKeyUrl] = cert;",
          "82:               setTimeout(() => {",
          "83:                 delete cache[publicKeyUrl];",
          "84:               }, parseInt(expire[1], 10) * 1000);",
          "85:             }",
          "87:           resolve(cert);",
          "",
          "[Added Lines]",
          "56:   const cert_headers = await new Promise((resolve, reject) =>",
          "60:     cert_headers['content-type'] !== 'application/pkix-cert' ||",
          "61:     cert_headers['content-length'] == null ||",
          "62:     cert_headers['content-length'] > 10000",
          "69:   const {certificate, headers} = await getCertificate(publicKeyUrl);",
          "70:   if (headers['cache-control']) {",
          "71:     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);",
          "72:     if (expire) {",
          "73:       cache[publicKeyUrl] = certificate;",
          "75:       setTimeout(() => {",
          "76:         delete cache[publicKeyUrl];",
          "77:       }, parseInt(expire[1], 10) * 1000);",
          "78:     }",
          "79:   }",
          "80:   return verifyPublicKeyIssuer(certificate, publicKeyUrl);",
          "81: }",
          "83: function getCertificate(url, buffer) {",
          "86:       .get(url, res => {",
          "87:         const data = [];",
          "89:           data.push(chunk);",
          "92:           if (buffer) {",
          "93:             resolve({certificate: Buffer.concat(data), headers: res.headers});",
          "94:             return;",
          "96:           let cert = '';",
          "97:           for (const chunk of data) {",
          "98:             cert += chunk.toString('base64');",
          "99:           }",
          "100:           const certificate = convertX509CertToPEM(cert);",
          "101:           resolve({certificate, headers: res.headers});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:   }",
          "116: }",
          "119: async function validateAuthData(authData) {",
          "120:   if (!authData.id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: function verifyPublicKeyIssuer(cert, publicKeyUrl) {",
          "133:   const publicKeyCert = pki.certificateFromPem(cert);",
          "134:   if (!ca.cert) {",
          "135:     throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');",
          "136:   }",
          "137:   try {",
          "138:     if (!ca.cert.verify(publicKeyCert)) {",
          "139:       throw new Parse.Error(",
          "140:         Parse.Error.OBJECT_NOT_FOUND,",
          "141:         `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "142:       );",
          "143:     }",
          "144:   } catch (e) {",
          "145:     throw new Parse.Error(",
          "146:       Parse.Error.OBJECT_NOT_FOUND,",
          "147:       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`",
          "148:     );",
          "149:   }",
          "150:   return cert;",
          "151: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126: }",
          "131: }",
          "133: module.exports = {",
          "134:   validateAppId,",
          "135:   validateAuthData,",
          "136: };",
          "",
          "[Removed Lines]",
          "129: function validateAppId() {",
          "130:   return Promise.resolve();",
          "",
          "[Added Lines]",
          "164: async function validateAppId(appIds, authData, options = {}) {",
          "165:   if (!options.rootCertificateUrl) {",
          "166:     options.rootCertificateUrl = 'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem'",
          "167:   }",
          "168:   if (ca.url === options.rootCertificateUrl) {",
          "169:     return;",
          "170:   }",
          "171:   const {certificate, headers} = await getCertificate(options.rootCertificateUrl, true);",
          "172:   if (",
          "173:     headers['content-type'] !== 'application/x-pem-file' ||",
          "174:     headers['content-length'] == null ||",
          "175:     headers['content-length'] > 10000",
          "176:   ) {",
          "177:     throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');",
          "178:   }",
          "179:   ca.cert = pki.certificateFromPem(certificate);",
          "180:   ca.url = options.rootCertificateUrl",
          "186:   cache,",
          "",
          "---------------"
        ]
      }
    }
  ]
}