{
  "cve_id": "CVE-2017-12871",
  "cve_desc": "The aesEncrypt method in lib/SimpleSAML/Utils/Crypto.php in SimpleSAMLphp 1.14.x through 1.14.11 makes it easier for context-dependent attackers to bypass the encryption protection mechanism by leveraging use of the first 16 bytes of the secret key as the initialization vector (IV).",
  "repo": "simplesamlphp/simplesamlphp",
  "patch_hash": "77df6a932d46daa35e364925eb73a175010dc904",
  "patch_info": {
    "commit_hash": "77df6a932d46daa35e364925eb73a175010dc904",
    "repo": "simplesamlphp/simplesamlphp",
    "commit_url": "https://github.com/simplesamlphp/simplesamlphp/commit/77df6a932d46daa35e364925eb73a175010dc904",
    "files": [
      "lib/SimpleSAML/Utils/Crypto.php"
    ],
    "message": "Fix an issue with IV generation in SimpleSAML\\Utils\\Crypto::aesEncrypt().\n\nIVs must be random and one-time (never reused). Additionally, by deriving it from the key, the key length was effectively reduced to 128 bits.",
    "before_after_code_files": [
      "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
    ]
  },
  "patch_diff": {
    "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php": [
      "File: lib/SimpleSAML/Utils/Crypto.php -> lib/SimpleSAML/Utils/Crypto.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:         $key    = openssl_digest($secret, 'sha256');",
      "87:         $method = 'AES-256-CBC';",
      "88:         $ivSize = 16;",
      "91:         return $iv.openssl_encrypt($data, $method, $key, $raw, $iv);",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:         $iv     = substr($key, 0, $ivSize);",
      "",
      "[Added Lines]",
      "89:         $iv     = openssl_random_pseudo_bytes($ivSize);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de2984802c92edf43d21f736d68a89ba9b020fee",
      "candidate_info": {
        "commit_hash": "de2984802c92edf43d21f736d68a89ba9b020fee",
        "repo": "simplesamlphp/simplesamlphp",
        "commit_url": "https://github.com/simplesamlphp/simplesamlphp/commit/de2984802c92edf43d21f736d68a89ba9b020fee",
        "files": [
          "lib/SimpleSAML/Utils/Crypto.php",
          "tests/lib/SimpleSAML/Utils/CryptoTest.php"
        ],
        "message": "Make sure data encrypted with SimpleSAML\\Utils\\Crypto::aesEncrypt() is also authenticated.",
        "before_after_code_files": [
          "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php",
          "tests/lib/SimpleSAML/Utils/CryptoTest.php||tests/lib/SimpleSAML/Utils/CryptoTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ],
          "candidate": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php": [
          "File: lib/SimpleSAML/Utils/Crypto.php -> lib/SimpleSAML/Utils/Crypto.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:             throw new \\SimpleSAML_Error_Exception(\"The openssl PHP module is not loaded.\");",
          "32:         }",
          "42:     }",
          "",
          "[Removed Lines]",
          "34:         $raw    = defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true;",
          "35:         $key    = openssl_digest($secret, 'sha256');",
          "36:         $method = 'AES-256-CBC';",
          "37:         $ivSize = 16;",
          "38:         $iv     = substr($ciphertext, 0, $ivSize);",
          "39:         $data   = substr($ciphertext, $ivSize);",
          "41:         return openssl_decrypt($data, $method, $key, $raw, $iv);",
          "",
          "[Added Lines]",
          "35:         $key  = openssl_digest($secret, 'sha512');",
          "37:         $hmac = mb_substr($ciphertext, 0, 32, '8bit');",
          "38:         $iv   = mb_substr($ciphertext, 32, 16, '8bit');",
          "39:         $msg  = mb_substr($ciphertext, 48, null, '8bit');",
          "42:         if (self::secureCompare(hash_hmac('sha256', $iv.$msg, substr($key, 64, 64), true), $hmac)) {",
          "43:             $plaintext = openssl_decrypt(",
          "44:                 $msg,",
          "45:                 'AES-256-CBC',",
          "46:                 substr($key, 0, 64),",
          "47:                 defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true,",
          "48:                 $iv",
          "49:             );",
          "51:             if ($plaintext != false) {",
          "52:                 return $plaintext;",
          "53:             }",
          "54:         }",
          "56:         throw new \\SimpleSAML_Error_Exception(\"Failed to decrypt ciphertext.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             throw new \\SimpleSAML_Error_Exception('The openssl PHP module is not loaded.');",
          "83:         }",
          "92:     }",
          "",
          "[Removed Lines]",
          "85:         $raw    = defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true;",
          "86:         $key    = openssl_digest($secret, 'sha256');",
          "87:         $method = 'AES-256-CBC';",
          "88:         $ivSize = 16;",
          "89:         $iv     = openssl_random_pseudo_bytes($ivSize);",
          "91:         return $iv.openssl_encrypt($data, $method, $key, $raw, $iv);",
          "",
          "[Added Lines]",
          "101:         $key = openssl_digest($secret, 'sha512');",
          "104:         $iv = openssl_random_pseudo_bytes(16);",
          "107:         $ciphertext = $iv.openssl_encrypt(",
          "108:             $data,",
          "109:             'AES-256-CBC',",
          "110:             substr($key, 0, 64),",
          "111:             defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true,",
          "112:             $iv",
          "113:         );",
          "115:         if ($ciphertext === false) {",
          "116:             throw new \\SimpleSAML_Error_Exception(\"Failed to encrypt plaintext.\");",
          "117:         }",
          "120:         return hash_hmac('sha256', $ciphertext, substr($key, 64, 64), true).$ciphertext;",
          "",
          "---------------"
        ],
        "tests/lib/SimpleSAML/Utils/CryptoTest.php||tests/lib/SimpleSAML/Utils/CryptoTest.php": [
          "File: tests/lib/SimpleSAML/Utils/CryptoTest.php -> tests/lib/SimpleSAML/Utils/CryptoTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $m->setAccessible(true);",
          "61:         $plaintext = 'SUPER_SECRET_TEXT';",
          "63:         $this->assertEquals($plaintext, $m->invokeArgs(null, array(base64_decode($ciphertext), $secret)));",
          "64:     }",
          "",
          "[Removed Lines]",
          "62:         $ciphertext = 'NmRkODJlZGE2OTA3YTYwMm9En+KAReUk2z7Xi/b3c39kF/c1n6Vdj/zNARQt+UHU';",
          "",
          "[Added Lines]",
          "62:         $ciphertext = 'uR2Yu0r4itInKx91D/l9y/08L5CIQyev9nAr27fh3Sshous4vbXRRcMcjqHDOrquD+2vqLyw7ygnbA9jA9TpB4hLZocvAWcTN8tyO82hiSY=';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67dc1b150e0dd32fb2c839bc23c84a6c0c1895ae",
      "candidate_info": {
        "commit_hash": "67dc1b150e0dd32fb2c839bc23c84a6c0c1895ae",
        "repo": "simplesamlphp/simplesamlphp",
        "commit_url": "https://github.com/simplesamlphp/simplesamlphp/commit/67dc1b150e0dd32fb2c839bc23c84a6c0c1895ae",
        "files": [
          "lib/SimpleSAML/Utils/Config.php",
          "lib/SimpleSAML/Utils/Config/Metadata.php",
          "lib/SimpleSAML/Utils/Crypto.php",
          "lib/SimpleSAML/Utils/HTTP.php",
          "lib/SimpleSAML/Utils/Net.php",
          "lib/SimpleSAML/Utils/Random.php",
          "lib/SimpleSAML/Utils/System.php",
          "lib/SimpleSAML/Utils/Time.php",
          "lib/SimpleSAML/Utils/XML.php"
        ],
        "message": "Fix multiple issues in SimpleSAML/Utils/* detected with vimeo/psalm.",
        "before_after_code_files": [
          "lib/SimpleSAML/Utils/Config.php||lib/SimpleSAML/Utils/Config.php",
          "lib/SimpleSAML/Utils/Config/Metadata.php||lib/SimpleSAML/Utils/Config/Metadata.php",
          "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php",
          "lib/SimpleSAML/Utils/HTTP.php||lib/SimpleSAML/Utils/HTTP.php",
          "lib/SimpleSAML/Utils/Net.php||lib/SimpleSAML/Utils/Net.php",
          "lib/SimpleSAML/Utils/Random.php||lib/SimpleSAML/Utils/Random.php",
          "lib/SimpleSAML/Utils/System.php||lib/SimpleSAML/Utils/System.php",
          "lib/SimpleSAML/Utils/Time.php||lib/SimpleSAML/Utils/Time.php",
          "lib/SimpleSAML/Utils/XML.php||lib/SimpleSAML/Utils/XML.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ],
          "candidate": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/SimpleSAML/Utils/Config.php||lib/SimpleSAML/Utils/Config.php": [
          "File: lib/SimpleSAML/Utils/Config.php -> lib/SimpleSAML/Utils/Config.php"
        ],
        "lib/SimpleSAML/Utils/Config/Metadata.php||lib/SimpleSAML/Utils/Config/Metadata.php": [
          "File: lib/SimpleSAML/Utils/Config/Metadata.php -> lib/SimpleSAML/Utils/Config/Metadata.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:         \\SimpleSAML\\Logger::maskErrors(E_ALL);",
          "278:         $hidden = in_array(self::$HIDE_FROM_DISCOVERY, $metadata['EntityAttributes'][self::$ENTITY_CATEGORY]);",
          "279:         \\SimpleSAML\\Logger::popErrorMask();",
          "284:     }",
          "285: }",
          "",
          "[Removed Lines]",
          "280:         if (is_bool($hidden)) {",
          "281:             return $hidden;",
          "282:         }",
          "283:         return false;",
          "",
          "[Added Lines]",
          "280:         return $hidden;",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php": [
          "File: lib/SimpleSAML/Utils/Crypto.php -> lib/SimpleSAML/Utils/Crypto.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     private static function _aesDecrypt($ciphertext, $secret)",
          "26:     {",
          "28:             throw new \\InvalidArgumentException(",
          "29:                 'Input parameter \"$ciphertext\" must be a string with more than 48 characters.'",
          "30:             );",
          "",
          "[Removed Lines]",
          "27:         if (!is_string($ciphertext) || mb_strlen($ciphertext, '8bit') < 48) {",
          "",
          "[Added Lines]",
          "28:         $len = mb_strlen($ciphertext, '8bit');",
          "29:         if (!is_string($ciphertext) || $len < 48) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         $hmac = mb_substr($ciphertext, 0, 32, '8bit');",
          "40:         $iv   = mb_substr($ciphertext, 32, 16, '8bit');",
          "44:         if (self::secureCompare(hash_hmac('sha256', $iv.$msg, substr($key, 64, 64), true), $hmac)) {",
          "",
          "[Removed Lines]",
          "41:         $msg  = mb_substr($ciphertext, 48, mb_strlen($ciphertext, '8bit') - 48, '8bit');",
          "",
          "[Added Lines]",
          "43:         $msg  = mb_substr($ciphertext, 48, $len - 48, '8bit');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:                 $msg,",
          "47:                 'AES-256-CBC',",
          "48:                 substr($key, 0, 64),",
          "50:                 $iv",
          "51:             );",
          "",
          "[Removed Lines]",
          "49:                 defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true,",
          "",
          "[Added Lines]",
          "51:                 defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : 1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         $iv = openssl_random_pseudo_bytes(16);",
          "110:             $data,",
          "111:             'AES-256-CBC',",
          "112:             substr($key, 0, 64),",
          "114:             $iv",
          "115:         );",
          "",
          "[Removed Lines]",
          "109:         $ciphertext = $iv.openssl_encrypt(",
          "113:             defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : true,",
          "",
          "[Added Lines]",
          "112:         $ciphertext = openssl_encrypt(",
          "116:             defined('OPENSSL_RAW_DATA') ? OPENSSL_RAW_DATA : 1,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:         }",
          "123:     }",
          "",
          "[Removed Lines]",
          "122:         return hash_hmac('sha256', $ciphertext, substr($key, 64, 64), true).$ciphertext;",
          "",
          "[Added Lines]",
          "125:         return hash_hmac('sha256', $iv.$ciphertext, substr($key, 64, 64), true).$iv.$ciphertext;",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/HTTP.php||lib/SimpleSAML/Utils/HTTP.php": [
          "File: lib/SimpleSAML/Utils/HTTP.php -> lib/SimpleSAML/Utils/HTTP.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         $session = \\SimpleSAML_Session::getSessionFromRequest();",
          "28:         $id = self::savePOSTData($session, $destination, $data);",
          "33:         $url = Module::getModuleURL('core/postredirect.php', array('RedirInfo' => $info));",
          "34:         return preg_replace('#^https:#', 'http:', $url);",
          "",
          "[Removed Lines]",
          "31:         $info = base64_encode(Crypto::aesEncrypt($session->getSessionId().':'.$id));",
          "",
          "[Added Lines]",
          "32:         $session_id = $session->getSessionId();",
          "33:         if (is_null($session_id)) {",
          "35:             throw new \\SimpleSAML_Error_Exception('Cannot save POST data to a transient session.');",
          "36:         }",
          "39:         $info = base64_encode(Crypto::aesEncrypt($session_id.':'.$id));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:     public static function checkSessionCookie($retryURL = null)",
          "277:     {",
          "279:             throw new \\InvalidArgumentException('Invalid input parameters.');",
          "280:         }",
          "",
          "[Removed Lines]",
          "278:         if (!is_string($retryURL) && !is_null($retryURL)) {",
          "",
          "[Added Lines]",
          "288:         if (!is_null($retryURL) && !is_string($retryURL)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432:         $data = file_get_contents($url, false, $context);",
          "433:         if ($data === false) {",
          "434:             $error = error_get_last();",
          "436:         }",
          "",
          "[Removed Lines]",
          "435:             throw new \\SimpleSAML_Error_Exception('Error fetching '.var_export($url, true).':'.$error['message']);",
          "",
          "[Added Lines]",
          "445:             throw new \\SimpleSAML_Error_Exception('Error fetching '.var_export($url, true).':'.",
          "446:                 (is_array($error) ? $error['message'] : 'no error available'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "694:     {",
          "695:         $url = self::getBaseURL();",
          "698:         $length = strcspn($url, '/', $start);",
          "700:         return substr($url, $start, $length);",
          "",
          "[Removed Lines]",
          "697:         $start = strpos($url, '://') + 3;",
          "",
          "[Added Lines]",
          "709:         $colon = strpos($url, '://');",
          "710:         $start = $colon + 3;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "787:     public static function getSelfURLHost()",
          "788:     {",
          "789:         $url = self::getSelfURL();",
          "791:         $length = strcspn($url, '/', $start) + $start;",
          "792:         return substr($url, 0, $length);",
          "793:     }",
          "",
          "[Removed Lines]",
          "790:         $start = strpos($url, '://') + 3;",
          "",
          "[Added Lines]",
          "805:         $colon = strpos($url, '://');",
          "806:         $start = $colon + 3;",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/Net.php||lib/SimpleSAML/Utils/Net.php": [
          "File: lib/SimpleSAML/Utils/Net.php -> lib/SimpleSAML/Utils/Net.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         }",
          "35:         list ($net, $mask) = explode('/', $cidr);",
          "37:         $ip_ip = array();",
          "38:         $ip_net = array();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:         $mask = intval($mask);",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/Random.php||lib/SimpleSAML/Utils/Random.php": [
          "File: lib/SimpleSAML/Utils/Random.php -> lib/SimpleSAML/Utils/Random.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public static function generateID()",
          "27:     {",
          "29:     }",
          "30: }",
          "",
          "[Removed Lines]",
          "28:         return '_'.bin2hex(openssl_random_pseudo_bytes((self::ID_LENGTH - 1)/2));",
          "",
          "[Added Lines]",
          "28:         return '_'.bin2hex(openssl_random_pseudo_bytes((int)((self::ID_LENGTH - 1)/2)));",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/System.php||lib/SimpleSAML/Utils/System.php": [
          "File: lib/SimpleSAML/Utils/System.php -> lib/SimpleSAML/Utils/System.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:             if (!mkdir($tempDir, 0700, true)) {",
          "84:                 $error = error_get_last();",
          "85:                 throw new \\SimpleSAML_Error_Exception(",
          "87:                 );",
          "88:             }",
          "89:         } elseif (function_exists('posix_getuid')) {",
          "",
          "[Removed Lines]",
          "86:                     'Error creating temporary directory \"'.$tempDir.'\": '.$error['message']",
          "",
          "[Added Lines]",
          "86:                     'Error creating temporary directory \"'.$tempDir.'\": '.",
          "87:                     (is_array($error) ? $error['message'] : 'no error available')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:         if ($res === false) {",
          "183:             $error = error_get_last();",
          "184:             throw new \\SimpleSAML_Error_Exception(",
          "186:             );",
          "187:         }",
          "",
          "[Removed Lines]",
          "185:                 'Error saving file \"'.$tmpFile.'\": '.$error['message']",
          "",
          "[Added Lines]",
          "188:                 'Error saving file \"'.$tmpFile.'\": '.",
          "189:                 (is_array($error) ? $error['message'] : 'no error available')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:             if (!chmod($tmpFile, $mode)) {",
          "191:                 unlink($tmpFile);",
          "192:                 $error = error_get_last();",
          "193:                 throw new \\SimpleSAML_Error_Exception(",
          "195:                 );",
          "196:             }",
          "197:         }",
          "",
          "[Removed Lines]",
          "194:                     'Error changing file mode of \"'.$tmpFile.'\": '.$error['message']",
          "",
          "[Added Lines]",
          "199:                     'Error changing file mode of \"'.$tmpFile.'\": '.",
          "200:                     (is_array($error) ? $error['message'] : 'no error available')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "200:             unlink($tmpFile);",
          "201:             $error = error_get_last();",
          "202:             throw new \\SimpleSAML_Error_Exception(",
          "204:             );",
          "205:         }",
          "",
          "[Removed Lines]",
          "203:                 'Error moving \"'.$tmpFile.'\" to \"'.$filename.'\": '.$error['message']",
          "",
          "[Added Lines]",
          "209:                 'Error moving \"'.$tmpFile.'\" to \"'.$filename.'\": '.",
          "210:                 (is_array($error) ? $error['message'] : 'no error available')",
          "",
          "---------------"
        ],
        "lib/SimpleSAML/Utils/Time.php||lib/SimpleSAML/Utils/Time.php": [
          "File: lib/SimpleSAML/Utils/Time.php -> lib/SimpleSAML/Utils/Time.php"
        ],
        "lib/SimpleSAML/Utils/XML.php||lib/SimpleSAML/Utils/XML.php": [
          "File: lib/SimpleSAML/Utils/XML.php -> lib/SimpleSAML/Utils/XML.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     {",
          "152:         if (!is_string($indentBase)) {",
          "153:             throw new \\InvalidArgumentException('Invalid input parameters');",
          "",
          "[Removed Lines]",
          "150:     public static function formatDOMElement(\\DOMElement $root, $indentBase = '')",
          "",
          "[Added Lines]",
          "156:     public static function formatDOMElement(\\DOMNode $root, $indentBase = '')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     public static function getDOMText(\\DOMElement $element)",
          "310:     {",
          "315:         $txt = '';",
          "317:         for ($i = 0; $i < $element->childNodes->length; $i++) {",
          "318:             $child = $element->childNodes->item($i);",
          "319:             if (!($child instanceof \\DOMText)) {",
          "320:                 throw new \\SimpleSAML_Error_Exception($element->localName.' contained a non-text child node.');",
          "",
          "[Removed Lines]",
          "311:         if (!($element instanceof \\DOMElement)) {",
          "312:             throw new \\InvalidArgumentException('Invalid input parameters');",
          "313:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:         }",
          "427:         if ($res) {",
          "429:             $config = \\SimpleSAML_Configuration::getInstance();",
          "431:             $schemaFile = $schemaPath.$schema;",
          "433:             $res = $dom->schemaValidate($schemaFile);",
          "",
          "[Removed Lines]",
          "430:             $schemaPath = $config->resolvePath('schemas').'/';",
          "",
          "[Added Lines]",
          "434:             $schemaPath = $config->resolvePath('schemas');",
          "435:             $schemaPath .= './';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccf75981187aa88f7165abdb1b1965c0934acda0",
      "candidate_info": {
        "commit_hash": "ccf75981187aa88f7165abdb1b1965c0934acda0",
        "repo": "simplesamlphp/simplesamlphp",
        "commit_url": "https://github.com/simplesamlphp/simplesamlphp/commit/ccf75981187aa88f7165abdb1b1965c0934acda0",
        "files": [
          "lib/SimpleSAML/Utils/Crypto.php"
        ],
        "message": "Fix an issue with IV generation in SimpleSAML\\Utils\\Crypto::aesEncrypt().\n\nIVs must be random and one-time (never reused). Additionally, by deriving it from the key, the key length was effectively reduced to 128 bits.",
        "before_after_code_files": [
          "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ],
          "candidate": [
            "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/SimpleSAML/Utils/Crypto.php||lib/SimpleSAML/Utils/Crypto.php": [
          "File: lib/SimpleSAML/Utils/Crypto.php -> lib/SimpleSAML/Utils/Crypto.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         $key    = openssl_digest($secret, 'sha256');",
          "87:         $method = 'AES-256-CBC';",
          "88:         $ivSize = 16;",
          "91:         return $iv.openssl_encrypt($data, $method, $key, $raw, $iv);",
          "92:     }",
          "",
          "[Removed Lines]",
          "89:         $iv     = substr($key, 0, $ivSize);",
          "",
          "[Added Lines]",
          "89:         $iv     = openssl_random_pseudo_bytes($ivSize);",
          "",
          "---------------"
        ]
      }
    }
  ]
}