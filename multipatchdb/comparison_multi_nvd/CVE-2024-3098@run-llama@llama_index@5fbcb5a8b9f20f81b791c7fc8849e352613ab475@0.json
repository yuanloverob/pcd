{
  "cve_id": "CVE-2024-3098",
  "cve_desc": "A vulnerability was identified in the `exec_utils` class of the `llama_index` package, specifically within the `safe_eval` function, allowing for prompt injection leading to arbitrary code execution. This issue arises due to insufficient validation of input, which can be exploited to bypass method restrictions and execute unauthorized code. The vulnerability is a bypass of the previously addressed CVE-2023-39662, demonstrated through a proof of concept that creates a file on the system by exploiting the flaw.",
  "repo": "run-llama/llama_index",
  "patch_hash": "5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
  "patch_info": {
    "commit_hash": "5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
    "repo": "run-llama/llama_index",
    "commit_url": "https://github.com/run-llama/llama_index/commit/5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
    "files": [
      "llama-index-core/llama_index/core/exec_utils.py"
    ],
    "message": "stricter access to builting in pandas query engine",
    "before_after_code_files": [
      "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py"
    ]
  },
  "patch_diff": {
    "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py": [
      "File: llama-index-core/llama_index/core/exec_utils.py -> llama-index-core/llama_index/core/exec_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     \"float\": float,",
      "46:     \"format\": format,",
      "47:     \"frozenset\": frozenset,",
      "50:     \"hash\": hash,",
      "51:     \"hex\": hex,",
      "52:     \"int\": int,",
      "53:     \"isinstance\": isinstance,",
      "54:     \"issubclass\": issubclass,",
      "56:     \"len\": len,",
      "57:     \"list\": list,",
      "58:     \"map\": map,",
      "59:     \"max\": max,",
      "60:     \"min\": min,",
      "62:     \"oct\": oct,",
      "63:     \"ord\": ord,",
      "64:     \"pow\": pow,",
      "",
      "[Removed Lines]",
      "48:     \"getattr\": getattr,",
      "49:     \"hasattr\": hasattr,",
      "55:     \"iter\": iter,",
      "61:     \"next\": next,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:     \"reversed\": reversed,",
      "69:     \"round\": round,",
      "70:     \"set\": set,",
      "72:     \"slice\": slice,",
      "73:     \"sorted\": sorted,",
      "74:     \"str\": str,",
      "",
      "[Removed Lines]",
      "71:     \"setattr\": setattr,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "94: class DunderVisitor(ast.NodeVisitor):",
      "95:     def __init__(self) -> None:",
      "96:         self.has_access_to_private_entity = False",
      "98:     def visit_Name(self, node: ast.Name) -> None:",
      "99:         if node.id.startswith(\"_\"):",
      "100:             self.has_access_to_private_entity = True",
      "101:         self.generic_visit(node)",
      "103:     def visit_Attribute(self, node: ast.Attribute) -> None:",
      "104:         if node.attr.startswith(\"_\"):",
      "105:             self.has_access_to_private_entity = True",
      "106:         self.generic_visit(node)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92:         self.has_access_to_disallowed_builtin = False",
      "97:         if node.id not in ALLOWED_BUILTINS:",
      "98:             self.has_access_to_disallowed_builtin = True",
      "104:         if node.attr not in ALLOWED_BUILTINS:",
      "105:             self.has_access_to_disallowed_builtin = True",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:     tree = ast.parse(code)",
      "111:     dunder_visitor = DunderVisitor()",
      "112:     dunder_visitor.visit(tree)",
      "116: def _verify_source_safety(__source: Union[str, bytes, CodeType]) -> None:",
      "",
      "[Removed Lines]",
      "113:     return dunder_visitor.has_access_to_private_entity",
      "",
      "[Added Lines]",
      "113:     return (",
      "114:         dunder_visitor.has_access_to_private_entity",
      "115:         or dunder_visitor.has_access_to_disallowed_builtin",
      "116:     )",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "124:         __source = __source.decode()",
      "125:     if _contains_protected_access(__source):",
      "126:         raise RuntimeError(",
      "128:         )",
      "",
      "[Removed Lines]",
      "127:             \"Execution of code containing references to private or dunder methods is forbidden!\"",
      "",
      "[Added Lines]",
      "130:             \"Execution of code containing references to private or dunder methods, \"",
      "131:             \"or disallowed builtins, is forbidden!\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c92e88838a5f481d50840240b1dd3180066c6f5",
      "candidate_info": {
        "commit_hash": "2c92e88838a5f481d50840240b1dd3180066c6f5",
        "repo": "run-llama/llama_index",
        "commit_url": "https://github.com/run-llama/llama_index/commit/2c92e88838a5f481d50840240b1dd3180066c6f5",
        "files": [
          "llama-index-core/llama_index/core/exec_utils.py",
          "llama-index-core/tests/query_engine/test_pandas.py"
        ],
        "message": "stricter access to builting in pandas query engine (#12278)",
        "before_after_code_files": [
          "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py",
          "llama-index-core/tests/query_engine/test_pandas.py||llama-index-core/tests/query_engine/test_pandas.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/run-llama/llama_index/pull/12278"
        ],
        "olp_code_files": {
          "patch": [
            "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py"
          ],
          "candidate": [
            "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py"
          ]
        }
      },
      "candidate_diff": {
        "llama-index-core/llama_index/core/exec_utils.py||llama-index-core/llama_index/core/exec_utils.py": [
          "File: llama-index-core/llama_index/core/exec_utils.py -> llama-index-core/llama_index/core/exec_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     \"float\": float,",
          "46:     \"format\": format,",
          "47:     \"frozenset\": frozenset,",
          "50:     \"hash\": hash,",
          "51:     \"hex\": hex,",
          "52:     \"int\": int,",
          "53:     \"isinstance\": isinstance,",
          "54:     \"issubclass\": issubclass,",
          "56:     \"len\": len,",
          "57:     \"list\": list,",
          "58:     \"map\": map,",
          "59:     \"max\": max,",
          "60:     \"min\": min,",
          "62:     \"oct\": oct,",
          "63:     \"ord\": ord,",
          "64:     \"pow\": pow,",
          "",
          "[Removed Lines]",
          "48:     \"getattr\": getattr,",
          "49:     \"hasattr\": hasattr,",
          "55:     \"iter\": iter,",
          "61:     \"next\": next,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     \"reversed\": reversed,",
          "69:     \"round\": round,",
          "70:     \"set\": set,",
          "72:     \"slice\": slice,",
          "73:     \"sorted\": sorted,",
          "74:     \"str\": str,",
          "",
          "[Removed Lines]",
          "71:     \"setattr\": setattr,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94: class DunderVisitor(ast.NodeVisitor):",
          "95:     def __init__(self) -> None:",
          "96:         self.has_access_to_private_entity = False",
          "98:     def visit_Name(self, node: ast.Name) -> None:",
          "99:         if node.id.startswith(\"_\"):",
          "100:             self.has_access_to_private_entity = True",
          "101:         self.generic_visit(node)",
          "103:     def visit_Attribute(self, node: ast.Attribute) -> None:",
          "104:         if node.attr.startswith(\"_\"):",
          "105:             self.has_access_to_private_entity = True",
          "106:         self.generic_visit(node)",
          "109: def _contains_protected_access(code: str) -> bool:",
          "110:     tree = ast.parse(code)",
          "111:     dunder_visitor = DunderVisitor()",
          "112:     dunder_visitor.visit(tree)",
          "116: def _verify_source_safety(__source: Union[str, bytes, CodeType]) -> None:",
          "",
          "[Removed Lines]",
          "113:     return dunder_visitor.has_access_to_private_entity",
          "",
          "[Added Lines]",
          "92:         self.has_access_to_disallowed_builtin = False",
          "94:         builtins = globals()[\"__builtins__\"].keys()",
          "95:         self._builtins = builtins",
          "100:         if node.id not in ALLOWED_BUILTINS and node.id in self._builtins:",
          "101:             self.has_access_to_disallowed_builtin = True",
          "107:         if node.attr not in ALLOWED_BUILTINS and node.attr in self._builtins:",
          "108:             self.has_access_to_disallowed_builtin = True",
          "113:     # do not allow imports",
          "114:     imports_modules = False",
          "116:     for node in ast.iter_child_nodes(tree):",
          "117:         if isinstance(node, ast.Import):",
          "118:             imports_modules = True",
          "119:         elif isinstance(node, ast.ImportFrom):",
          "120:             imports_modules = True",
          "121:         else:",
          "122:             continue",
          "126:     return (",
          "127:         dunder_visitor.has_access_to_private_entity",
          "128:         or dunder_visitor.has_access_to_disallowed_builtin",
          "129:         or imports_modules",
          "130:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:         __source = __source.decode()",
          "125:     if _contains_protected_access(__source):",
          "126:         raise RuntimeError(",
          "128:         )",
          "",
          "[Removed Lines]",
          "127:             \"Execution of code containing references to private or dunder methods is forbidden!\"",
          "",
          "[Added Lines]",
          "144:             \"Execution of code containing references to private or dunder methods, \"",
          "145:             \"disallowed builtins, or any imports, is forbidden!\"",
          "",
          "---------------"
        ],
        "llama-index-core/tests/query_engine/test_pandas.py||llama-index-core/tests/query_engine/test_pandas.py": [
          "File: llama-index-core/tests/query_engine/test_pandas.py -> llama-index-core/tests/query_engine/test_pandas.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     output = parser.parse(injected_code)",
          "113:     assert (",
          "116:     ), \"Injected code executed successfully!\"",
          "",
          "[Removed Lines]",
          "114:         \"Execution of code containing references to private or dunder methods is forbidden!\"",
          "115:         in output",
          "",
          "[Added Lines]",
          "114:         \"Execution of code containing references to private or dunder methods\" in output",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert isinstance(response, Response)",
          "153:     # raw df should be equal to slice of dataframe that's just population at location 2",
          "154:     rmetadata = cast(Dict[str, Any], response.metadata)",
          "157:     # attack 1: fail!",
          "158:     print(\"[+] Attack 1 starts, it should fail!\")",
          "",
          "[Removed Lines]",
          "155:     assert rmetadata[\"raw_pandas_output\"] == str(df[\"population\"].iloc[2:3])",
          "",
          "[Added Lines]",
          "154:     assert rmetadata[\"raw_pandas_output\"] == str(df[\"population\"].iloc[2])",
          "",
          "---------------"
        ]
      }
    }
  ]
}