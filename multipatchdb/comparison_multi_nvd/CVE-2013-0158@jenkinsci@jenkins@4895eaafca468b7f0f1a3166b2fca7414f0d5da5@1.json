{
  "cve_id": "CVE-2013-0158",
  "cve_desc": "Unspecified vulnerability in Jenkins before 1.498, Jenkins LTS before 1.480.2, and Jenkins Enterprise 1.447.x before 1.447.6.1 and 1.466.x before 1.466.12.1, when a slave is attached and anonymous read access is enabled, allows remote attackers to obtain the master cryptographic key via unknown vectors.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
  "patch_info": {
    "commit_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
    "files": [
      "core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/hudson/util/SecretRewriter.java",
      "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "core/src/test/java/hudson/util/MockSecretRule.java",
      "core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.groovy",
      "test/src/main/java/hudson/util/SecretHelper.java",
      "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
    ],
    "message": "[SECURITY-49] added a tool to re-key secrets\n\nAs an AdministrativeMonitor, it shows up in the manage Jenkins UI, and\nallows the administrator to run a re-keying operation.",
    "before_after_code_files": [
      "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java",
      "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java",
      "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy",
      "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java",
      "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
      "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import jenkins.security.CryptoConfidentialKey;",
      "35: import org.kohsuke.stapler.Stapler;",
      "39: import javax.crypto.SecretKey;",
      "40: import javax.crypto.Cipher;",
      "41: import java.io.Serializable;",
      "",
      "[Removed Lines]",
      "37: import javax.crypto.BadPaddingException;",
      "38: import javax.crypto.IllegalBlockSizeException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:         }",
      "153:     }",
      "156:         try {",
      "157:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
      "158:             if(plainText.endsWith(MAGIC))",
      "159:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "160:             return null;",
      "161:         } catch (GeneralSecurityException e) {",
      "163:         }",
      "164:     }",
      "",
      "[Removed Lines]",
      "155:     private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {",
      "162:             return null;",
      "",
      "[Added Lines]",
      "160:             return null; // if the key doesn't match with the bytes, it can result in BadPaddingException",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java": [
      "File: core/src/main/java/hudson/util/SecretRewriter.java -> core/src/main/java/hudson/util/SecretRewriter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "3: import com.trilead.ssh2.crypto.Base64;",
      "4: import hudson.model.TaskListener;",
      "5: import org.apache.commons.io.FileUtils;",
      "7: import javax.crypto.Cipher;",
      "8: import javax.crypto.SecretKey;",
      "9: import java.io.BufferedReader;",
      "10: import java.io.BufferedWriter;",
      "11: import java.io.File;",
      "12: import java.io.FileInputStream;",
      "13: import java.io.IOException;",
      "14: import java.io.InputStreamReader;",
      "15: import java.io.PrintWriter;",
      "16: import java.security.GeneralSecurityException;",
      "17: import java.security.InvalidKeyException;",
      "18: import java.util.HashSet;",
      "19: import java.util.Set;",
      "27: public class SecretRewriter {",
      "28:     private final Cipher cipher;",
      "29:     private final SecretKey key;",
      "34:     private int count;",
      "39:     private final File backupDirectory;",
      "45:     private Set<String> callstack = new HashSet<String>();",
      "47:     public SecretRewriter(File backupDirectory) throws GeneralSecurityException {",
      "48:         cipher = Secret.getCipher(\"AES\");",
      "49:         key = Secret.getLegacyKey();",
      "50:         this.backupDirectory = backupDirectory;",
      "51:     }",
      "53:     private String tryRewrite(String s) throws IOException, InvalidKeyException {",
      "54:         if (s.length()<24)",
      "55:             return s;   // Encrypting \"\" in Secret produces 24-letter characters, so this must be the minimum length",
      "56:         if (!isBase64(s))",
      "57:             return s;   // decode throws IOException if the input is not base64, and this is also a very quick way to filter",
      "59:         byte[] in;",
      "60:         try {",
      "61:             in = Base64.decode(s.toCharArray());",
      "62:         } catch (IOException e) {",
      "63:             return s;   // not a valid base64",
      "64:         }",
      "65:         cipher.init(Cipher.DECRYPT_MODE, key);",
      "66:         Secret sec = Secret.tryDecrypt(cipher, in);",
      "67:         if(sec!=null) // matched",
      "68:             return sec.getEncryptedValue(); // replace by the new encrypted value",
      "69:         else // not encrypted with the legacy key. leave it unmodified",
      "70:             return s;",
      "71:     }",
      "78:     public boolean rewrite(File f, File backup) throws InvalidKeyException, IOException {",
      "79:         FileInputStream fin = new FileInputStream(f);",
      "80:         try {",
      "81:             BufferedReader r = new BufferedReader(new InputStreamReader(fin, \"UTF-8\"));",
      "82:             AtomicFileWriter w = new AtomicFileWriter(f, \"UTF-8\");",
      "83:             try {",
      "84:                 PrintWriter out = new PrintWriter(new BufferedWriter(w));",
      "86:                 boolean modified = false; // did we actually change anything?",
      "87:                 try {",
      "88:                     String line;",
      "89:                     StringBuilder buf = new StringBuilder();",
      "91:                     while ((line=r.readLine())!=null) {",
      "92:                         int copied=0;",
      "93:                         buf.setLength(0);",
      "94:                         while (true) {",
      "95:                             int sidx = line.indexOf('>',copied);",
      "96:                             if (sidx<0) break;",
      "97:                             int eidx = line.indexOf('<',sidx);",
      "98:                             if (eidx<0) break;",
      "100:                             String elementText = line.substring(sidx+1,eidx);",
      "101:                             String replacement = tryRewrite(elementText);",
      "102:                             if (!replacement.equals(elementText))",
      "103:                                 modified = true;",
      "105:                             buf.append(line.substring(copied,sidx+1));",
      "106:                             buf.append(replacement);",
      "107:                             copied = eidx;",
      "108:                         }",
      "109:                         buf.append(line.substring(copied));",
      "110:                         out.println(buf.toString());",
      "111:                     }",
      "112:                 } finally {",
      "113:                     out.close();",
      "114:                 }",
      "116:                 if (modified) {",
      "117:                     if (backup!=null) {",
      "118:                         backup.getParentFile().mkdirs();",
      "119:                         FileUtils.copyFile(f,backup);",
      "120:                     }",
      "121:                     w.commit();",
      "122:                 }",
      "123:                 return modified;",
      "124:             } finally {",
      "125:                 w.abort();",
      "126:             }",
      "127:         } finally {",
      "128:             fin.close();",
      "129:         }",
      "130:     }",
      "142:     public synchronized int rewriteRecursive(File dir, TaskListener listener) throws InvalidKeyException {",
      "143:         return rewriteRecursive(dir,\"\",listener);",
      "144:     }",
      "145:     private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {",
      "146:         String canonical;",
      "147:         try {",
      "148:             canonical = dir.getCanonicalPath();",
      "149:         } catch (IOException e) {",
      "150:             canonical = dir.getAbsolutePath(); //",
      "151:         }",
      "152:         if (!callstack.add(canonical)) {",
      "153:             listener.getLogger().println(\"Cycle detected: \"+dir);",
      "154:             return 0;",
      "155:         }",
      "157:         try {",
      "158:             File[] children = dir.listFiles();",
      "159:             if (children==null)     return 0;",
      "161:             int rewritten=0;",
      "162:             for (File child : children) {",
      "163:                 String cn = child.getName();",
      "164:                 if (cn.endsWith(\".xml\")) {",
      "165:                     if ((count++)%100==0)",
      "166:                         listener.getLogger().println(\"Scanning \"+child);",
      "167:                     try {",
      "168:                         File backup = null;",
      "169:                         if (backupDirectory!=null)  backup = new File(backupDirectory,relative+'/'+ cn);",
      "170:                         if (rewrite(child,backup)) {",
      "171:                             if (backup!=null)",
      "172:                                 listener.getLogger().println(\"Copied \"+child+\" to \"+backup+\" as a backup\");",
      "173:                             listener.getLogger().println(\"Rewritten \"+child);",
      "174:                             rewritten++;",
      "175:                         }",
      "176:                     } catch (IOException e) {",
      "177:                         e.printStackTrace(listener.error(\"Failed to rewrite \"+child));",
      "178:                     }",
      "179:                 }",
      "180:                 if (child.isDirectory()) {",
      "181:                     if (!isIgnoredDir(child))",
      "182:                         rewritten += rewriteRecursive(child,",
      "183:                                 relative.length()==0 ? cn : relative+'/'+ cn,",
      "184:                                 listener);",
      "185:                 }",
      "186:             }",
      "187:             return rewritten;",
      "188:         } finally {",
      "189:             callstack.remove(canonical);",
      "190:         }",
      "191:     }",
      "196:     protected boolean isIgnoredDir(File dir) {",
      "199:         String n = dir.getName();",
      "200:         return n.equals(\"workspace\") || n.equals(\"artifacts\")",
      "201:             || n.equals(\"plugins\") // no mutable data here",
      "202:             || n.equals(\"jenkins.security.RekeySecretAdminMonitor\") // we don't want to rewrite backups",
      "203:             || n.equals(\".\") || n.equals(\"..\");",
      "204:     }",
      "206:     private static boolean isBase64(char ch) {",
      "207:         return 0<=ch && ch<128 && IS_BASE64[ch];",
      "208:     }",
      "210:     private static boolean isBase64(String s) {",
      "211:         for (int i=0; i<s.length(); i++)",
      "212:             if (!isBase64(s.charAt(i)))",
      "213:                 return false;",
      "214:         return true;",
      "215:     }",
      "217:     private static final boolean[] IS_BASE64 = new boolean[128];",
      "218:     static {",
      "219:         String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";",
      "220:         for (int i=0; i<chars.length();i++)",
      "221:             IS_BASE64[chars.charAt(i)] = true;",
      "222:     }",
      "223: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java": [
      "File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java -> core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import hudson.console.AnnotatedLargeText;",
      "5: import hudson.init.InitMilestone;",
      "6: import hudson.init.Initializer;",
      "7: import hudson.model.AdministrativeMonitor;",
      "8: import hudson.util.HttpResponses;",
      "9: import hudson.util.SecretRewriter;",
      "10: import hudson.util.StreamTaskListener;",
      "11: import hudson.util.VersionNumber;",
      "12: import jenkins.model.Jenkins;",
      "13: import jenkins.util.io.FileBoolean;",
      "14: import org.kohsuke.stapler.HttpResponse;",
      "15: import org.kohsuke.stapler.StaplerProxy;",
      "16: import org.kohsuke.stapler.StaplerRequest;",
      "17: import org.kohsuke.stapler.interceptor.RequirePOST;",
      "19: import java.io.File;",
      "20: import java.io.IOException;",
      "21: import java.io.PrintStream;",
      "22: import java.nio.charset.Charset;",
      "23: import java.security.GeneralSecurityException;",
      "24: import java.util.Date;",
      "25: import java.util.logging.Level;",
      "26: import java.util.logging.Logger;",
      "33: @Extension",
      "34: public class RekeySecretAdminMonitor extends AdministrativeMonitor implements StaplerProxy {",
      "44:     private final FileBoolean needed = state(\"needed\");",
      "49:     private final FileBoolean done = state(\"done\");",
      "54:     private final FileBoolean scanOnBoot = state(\"scanOnBoot\");",
      "59:     private volatile RekeyThread rekeyThread;",
      "62:     public RekeySecretAdminMonitor() throws IOException {",
      "67:         if (Jenkins.getInstance().isUpgradedFromBefore(new VersionNumber(\"1.496.*\")))",
      "68:             needed.on();",
      "69:     }",
      "74:     public Object getTarget() {",
      "75:         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);",
      "76:         return this;",
      "77:     }",
      "79:     @Override",
      "80:     public boolean isActivated() {",
      "81:         return needed.isOn();",
      "82:     }",
      "87:     public boolean isDone() {",
      "88:         return done.isOn();",
      "89:     }",
      "91:     public void setNeeded() {",
      "92:         needed.on();",
      "93:     }",
      "95:     public boolean isScanOnBoot() {",
      "96:         return scanOnBoot.isOn();",
      "97:     }",
      "99:     @RequirePOST",
      "100:     public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {",
      "101:         if(req.hasParameter(\"background\")) {",
      "102:             synchronized (this) {",
      "103:                 if (!isRewriterActive()) {",
      "104:                     rekeyThread = new RekeyThread();",
      "105:                     rekeyThread.start();",
      "106:                 }",
      "107:             }",
      "108:         } else",
      "109:         if(req.hasParameter(\"schedule\")) {",
      "110:             scanOnBoot.on();",
      "111:         } else",
      "112:         if(req.hasParameter(\"dismiss\")) {",
      "113:             disable(true);",
      "114:         } else",
      "115:             throw HttpResponses.error(400,\"Invalid request submission\");",
      "117:         return HttpResponses.redirectViaContextPath(\"/manage\");",
      "118:     }",
      "123:     public boolean isRewriterActive() {",
      "124:         return rekeyThread !=null && rekeyThread.isAlive();",
      "125:     }",
      "130:     public AnnotatedLargeText getLogText() {",
      "131:         return new AnnotatedLargeText<RekeySecretAdminMonitor>(getLogFile(), Charset.defaultCharset(),",
      "132:                 !isRewriterActive(),this);",
      "133:     }",
      "135:     private static FileBoolean state(String name) {",
      "136:         return new FileBoolean(new File(getBaseDir(),name));",
      "137:     }",
      "139:     @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)",
      "141:     public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {",
      "142:         FileBoolean flag = new RekeySecretAdminMonitor().scanOnBoot;",
      "143:         if (flag.isOn()) {",
      "144:             flag.off();",
      "145:             RekeyThread t = new RekeyThread();",
      "146:             t.start();",
      "147:             t.join();",
      "150:         }",
      "151:     }",
      "156:     public static File getLogFile() {",
      "157:         return new File(getBaseDir(),\"rekey.log\");",
      "158:     }",
      "160:     private static File getBaseDir() {",
      "161:         return new File(Jenkins.getInstance().getRootDir(),RekeySecretAdminMonitor.class.getName());",
      "162:     }",
      "164:     private static class RekeyThread extends Thread {",
      "165:         private final SecretRewriter rewriter;",
      "167:         RekeyThread() throws GeneralSecurityException {",
      "168:             super(\"Rekey secret thread\");",
      "169:             rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));",
      "170:         }",
      "172:         @Override",
      "173:         public void run() {",
      "174:             try {",
      "175:                 LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());",
      "176:                 StreamTaskListener listener = new StreamTaskListener(getLogFile());",
      "177:                 try {",
      "178:                     PrintStream log = listener.getLogger();",
      "179:                     log.println(\"Started re-keying \" + new Date());",
      "180:                     int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);",
      "181:                     log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());",
      "182:                     new RekeySecretAdminMonitor().done.on();",
      "183:                     LOGGER.info(\"Secret re-keying completed\");",
      "184:                 } catch (Exception e) {",
      "185:                     LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);",
      "186:                     e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));",
      "187:                 }",
      "188:             } catch (IOException e) {",
      "189:                 LOGGER.log(Level.SEVERE, \"Catastrophic failure to rewrite secrets\",e);",
      "190:             }",
      "191:         }",
      "192:     }",
      "194:     private static final Logger LOGGER = Logger.getLogger(RekeySecretAdminMonitor.class.getName());",
      "196: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: The MIT License",
      "4: Copyright (c) 2013, CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "24: package jenkins.security.RekeySecretAdminMonitor;",
      "26: def l = namespace(lib.LayoutTagLib)",
      "27: def t = namespace(lib.JenkinsTagLib)",
      "29: l.layout {",
      "30:     l.main_panel() {",
      "31:         h1 _(\"Re-keying log\")",
      "33:         if (my.isRewriterActive()) {",
      "34:             pre(id: \"out\")",
      "35:             div(id: \"spinner\") {",
      "36:                 img(src: \"${imagesURL}/spinner.gif\", alt: \"\")",
      "37:             }",
      "38:             t.progressiveText(spinner: \"spinner\", href: \"logText/progressiveHtml\", idref: \"out\")",
      "39:         } else {",
      "40:             pre {",
      "41:                 my.logText.writeHtmlTo(0, output.asWriter())",
      "42:             }",
      "43:         }",
      "44:     }",
      "45: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: The MIT License",
      "4: Copyright (c) 2013, CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "24: package jenkins.security.RekeySecretAdminMonitor;",
      "26: def f = namespace(lib.FormTagLib)",
      "28: if (!my.isDone()) {",
      "29:     div(class:\"error\") {",
      "30:         raw _(\"pleaseRekeyAsap\",app.rootDir,my.url)",
      "31:     }",
      "32: }",
      "34: if (my.isRewriterActive()) {",
      "35:     div(class:\"info\") {",
      "36:         raw _(\"rekeyInProgress\",my.url)",
      "37:     }",
      "38: } else if (my.logFile.exists()) {",
      "39:     if (my.isDone()) {",
      "40:         div(class:\"info\") {",
      "41:             raw _(\"rekeySuccessful\",my.url)",
      "42:         }",
      "43:     } else {",
      "44:         div(class:\"warning\") {",
      "45:             raw _(\"rekeyHadProblems\",my.url)",
      "46:         }",
      "47:     }",
      "48: }",
      "50: form(method:\"POST\",action:\"${my.url}/scan\",style:\"text-align:center; margin-top:0.5em;\",name:\"rekey\") {",
      "51:     f.submit(name:\"background\",value:_(\"Re-key in background now\"))",
      "52:     if (my.isScanOnBoot()) {",
      "53:         input(type:\"button\",class:\"yui-button\",disabled:\"true\",",
      "54:                 value:_(\"Re-keying currently scheduled during the next startup\"))",
      "55:     } else {",
      "56:         f.submit(name:\"schedule\",  value:_(\"Schedule a re-key during the next startup\"))",
      "57:     }",
      "58:     f.submit(name:\"dismiss\",   value:_(\"Dismiss this message\"))",
      "59: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: pleaseRekeyAsap=\\",
      "2:     Because of <a href=\"https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2013-01-04\">a security vulnerability</a> discovered earlier, we need to \\",
      "3:     change the encryption key used to protect secrets in your configuration files on the disk. \\",
      "4:     This process scans a large portion of your <tt>$JENKINS_HOME</tt> ({0}), \\",
      "5:     find encrypted data, re-key them, which will take some time. \\",
      "6:     See <a href=\"http://jenkins-ci.org/rekey\">this document</a> for more implications about different ways of doing this \\",
      "7:     (or not doing this.) This operation can be safely run in background, but cautious users \\",
      "8:     are recommended to take backups.",
      "10: rekeyInProgress=Re-keying is in progress. <a href=\"{0}/log\">You can check the log</a>.",
      "12: rekeySuccessful=\\",
      "13:   Secrets in your <tt>$JENKINS_HOME</tt> has been re-keyed successfully. \\",
      "14:   <a href=\"{0}/log\">Please check the log</a>, confirm the success, and then dismiss or re-run.",
      "16: rekeyHadProblems=\\",
      "17:   Re-keying has completed, but there were problems. <a href=\"{0}\">Please check the log</a>.",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java": [
      "File: core/src/test/java/hudson/util/MockSecretRule.java -> core/src/test/java/hudson/util/MockSecretRule.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "3: import hudson.Util;",
      "4: import org.junit.rules.ExternalResource;",
      "6: import java.security.SecureRandom;",
      "13: public class MockSecretRule extends ExternalResource {",
      "15:     private String value;",
      "17:     @Override",
      "18:     protected void before() throws Throwable {",
      "19:         byte[] random = new byte[32];",
      "20:         sr.nextBytes(random);",
      "21:         value = Util.toHexString(random);",
      "22:         Secret.SECRET = value;",
      "23:     }",
      "25:     @Override",
      "26:     protected void after() {",
      "27:         if (!Secret.SECRET.equals(value))",
      "28:             throw new IllegalStateException(\"Someone tinkered with Secret.SECRET\");",
      "29:         Secret.SECRET = null;",
      "30:     }",
      "32:     private static final SecureRandom sr = new SecureRandom();",
      "33: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util",
      "3: import com.trilead.ssh2.crypto.Base64",
      "4: import hudson.FilePath",
      "5: import jenkins.security.ConfidentialStoreRule",
      "6: import org.junit.Rule",
      "7: import org.junit.Test",
      "9: import javax.crypto.Cipher",
      "11: import static hudson.Util.createTempDir",
      "18: class SecretRewriterTest {",
      "19:     @Rule",
      "20:     public MockSecretRule mockSecretRule = new MockSecretRule()",
      "22:     @Rule",
      "23:     public ConfidentialStoreRule confidentialStoreRule = new ConfidentialStoreRule();",
      "25:     @Test",
      "26:     void singleFileRewrite() {",
      "27:         def o = encryptOld('foobar') // old",
      "28:         def n = encryptNew('foobar') // new",
      "29:         roundtrip \"<foo>${o}</foo>\",",
      "30:                   \"<foo>${n}</foo>\"",
      "32:         roundtrip \"<foo>${o}</foo><foo>${o}</foo>\",",
      "33:                   \"<foo>${n}</foo><foo>${n}</foo>\"",
      "35:         roundtrip \"<foo>${n}</foo>\",",
      "36:                   \"<foo>${n}</foo>\"",
      "38:         roundtrip \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \",",
      "39:                   \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \"",
      "42:         roundtrip \"<foo>$o\", \"<foo>$o\"",
      "43:         roundtrip \"$o</foo>\", \"$o</foo>\"",
      "46:         roundtrip \"<abc>\\n<foo>$o</foo>\\n</abc>\", \"<abc>\\n<foo>$n</foo>\\n</abc>\"",
      "47:     }",
      "49:     void roundtrip(String before, String after) {",
      "50:         def sr = new SecretRewriter(null);",
      "51:         def f = File.createTempFile(\"test\",\"xml\");",
      "52:         try {",
      "53:             f.text = before",
      "54:             sr.rewrite(f,null)",
      "55:             assert after.trim()==f.text.trim()",
      "56:         } finally {",
      "57:             f.delete()",
      "58:         }",
      "59:     }",
      "61:     String encryptOld(str) {",
      "62:         def cipher = Secret.getCipher(\"AES\");",
      "63:         cipher.init(Cipher.ENCRYPT_MODE, Secret.legacyKey);",
      "64:         return new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
      "65:     }",
      "67:     String encryptNew(str) {",
      "68:         return Secret.fromString(str).encryptedValue",
      "69:     }",
      "74:     @Test",
      "75:     void recursionDetection() {",
      "76:         def backup = createTempDir()",
      "77:         def sw = new SecretRewriter(backup);",
      "78:         def st = StreamTaskListener.fromStdout()",
      "80:         def o = encryptOld(\"Hello world\")",
      "81:         def n = encryptNew(\"Hello world\")",
      "82:         def payload = \"<msg>$o</msg>\"",
      "83:         def answer = \"<msg>$n</msg>\"",
      "86:         def t = createTempDir()",
      "87:         def dirs = [\"a\", \"b\", \"c\", \"c/d\", \"c/d/e\"]",
      "88:         dirs.each { p ->",
      "89:             def d = new File(t, p)",
      "90:             d.mkdir()",
      "91:             new File(d,\"foo.xml\").text = payload",
      "92:         }",
      "95:         def t2 = createTempDir()",
      "96:         new File(t2,\"foo.xml\").text = payload",
      "99:         new FilePath(t).child(\"c/symlink\").symlinkTo(\"..\",st)",
      "100:         new FilePath(t).child(\"b/symlink\").symlinkTo(\".\",st)",
      "101:         new FilePath(t).child(\"a/symlink\").symlinkTo(t2.absolutePath,st)",
      "103:         assert 6==sw.rewriteRecursive(t, st)",
      "105:         dirs.each { p->",
      "106:             assert new File(t,\"$p/foo.xml\").text.trim()==answer",
      "107:             assert new File(backup,\"$p/foo.xml\").text.trim()==payload",
      "108:         }",
      "111:         assert new File(t2,\"foo.xml\").text.trim()==answer.trim();",
      "112:     }",
      "114: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretTest.groovy -> core/src/test/java/hudson/util/SecretTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import com.trilead.ssh2.crypto.Base64;",
      "27: import jenkins.model.Jenkins",
      "28: import jenkins.security.ConfidentialStoreRule;",
      "31: import org.junit.Rule",
      "32: import org.junit.Test",
      "34: import javax.crypto.Cipher;",
      "",
      "[Removed Lines]",
      "29: import org.junit.After",
      "30: import org.junit.Before",
      "35: import java.security.SecureRandom;",
      "37: import hudson.Util;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     @Rule",
      "44:     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule()",
      "59:     @Test",
      "60:     void testEncrypt() {",
      "",
      "[Removed Lines]",
      "46:     @Test @Before",
      "47:     void setUp() {",
      "48:         def sr = new SecureRandom();",
      "49:         byte[] random = new byte[32];",
      "50:         sr.nextBytes(random);",
      "51:         Secret.SECRET = Util.toHexString(random);",
      "52:     }",
      "54:     @Test @After",
      "55:     void tearDown() {",
      "56:         Secret.SECRET = null;",
      "57:     }",
      "",
      "[Added Lines]",
      "41:     @Rule",
      "42:     public MockSecretRule mockSecretRule = new MockSecretRule()",
      "",
      "---------------"
    ],
    "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java": [
      "File: test/src/main/java/hudson/util/SecretHelper.java -> test/src/main/java/hudson/util/SecretHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "6: public class SecretHelper {",
      "7:     public static void set(String s) {",
      "8:         Secret.SECRET = s;",
      "9:     }",
      "10: }",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
      "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
      "4: import com.gargoylesoftware.htmlunit.html.HtmlButton;",
      "5: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "7: import com.trilead.ssh2.crypto.Base64;",
      "8: import hudson.FilePath;",
      "9: import hudson.Util;",
      "10: import hudson.util.Secret;",
      "11: import hudson.util.SecretHelper;",
      "12: import org.apache.commons.io.FileUtils;",
      "13: import org.jvnet.hudson.test.HudsonTestCase;",
      "14: import org.jvnet.hudson.test.recipes.Recipe.Runner;",
      "15: import org.xml.sax.SAXException;",
      "17: import javax.crypto.Cipher;",
      "18: import javax.inject.Inject;",
      "19: import java.io.File;",
      "20: import java.io.IOException;",
      "21: import java.lang.annotation.Annotation;",
      "26: public class RekeySecretAdminMonitorTest extends HudsonTestCase {",
      "27:     @Inject",
      "28:     RekeySecretAdminMonitor monitor;",
      "30:     @Override",
      "31:     protected void setUp() throws Exception {",
      "32:         SecretHelper.set(TEST_KEY);",
      "33:         super.setUp();",
      "34:         monitor.setNeeded();",
      "35:     }",
      "37:     @Override",
      "38:     protected void tearDown() throws Exception {",
      "39:         SecretHelper.set(null);",
      "40:         super.tearDown();",
      "41:     }",
      "43:     @Override",
      "44:     protected void recipe() throws Exception {",
      "45:         super.recipe();",
      "46:         recipes.add(new Runner() {",
      "47:             @Override",
      "48:             public void setup(HudsonTestCase testCase, Annotation recipe) throws Exception {",
      "49:             }",
      "51:             @Override",
      "52:             public void decorateHome(HudsonTestCase testCase, File home) throws Exception {",
      "53:                 if (getName().endsWith(\"testScanOnBoot\")) {",
      "55:                     File f = new File(home, RekeySecretAdminMonitor.class.getName() + \"/scanOnBoot\");",
      "56:                     f.getParentFile().mkdirs();",
      "57:                     new FilePath(f).touch(0);",
      "60:                     putSomeOldData(home);",
      "61:                 }",
      "62:             }",
      "64:             @Override",
      "65:             public void tearDown(HudsonTestCase testCase, Annotation recipe) throws Exception {",
      "66:             }",
      "67:         });",
      "68:     }",
      "71:     private void putSomeOldData(File dir) throws Exception {",
      "72:         File xml = new File(dir, \"foo.xml\");",
      "73:         FileUtils.writeStringToFile(xml,\"<foo>\" + encryptOld(TEST_KEY) + \"</foo>\");",
      "74:     }",
      "76:     private void verifyRewrite(File dir) throws Exception {",
      "77:         File xml = new File(dir, \"foo.xml\");",
      "78:         assertEquals(\"<foo>\" + encryptNew(TEST_KEY) + \"</foo>\".trim(),",
      "79:                 FileUtils.readFileToString(xml).trim());",
      "80:     }",
      "82:     public void testBasicWorkflow() throws Exception {",
      "83:         putSomeOldData(jenkins.getRootDir());",
      "85:         WebClient wc = createWebClient();",
      "88:         assertTrue(!monitor.isScanOnBoot());",
      "89:         HtmlForm form = getRekeyForm(wc);",
      "90:         submit(form, \"schedule\");",
      "91:         assertTrue(monitor.isScanOnBoot());",
      "92:         form = getRekeyForm(wc);",
      "93:         assertTrue(getButton(form, 1).isDisabled());",
      "96:         assertTrue(!monitor.getLogFile().exists());",
      "97:         submit(form, \"background\");",
      "98:         assertTrue(monitor.getLogFile().exists());",
      "101:         HtmlPage manage = wc.goTo(\"/manage\");",
      "102:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
      "103:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
      "106:         verifyRewrite(jenkins.getRootDir());",
      "107:         assertTrue(monitor.isDone());",
      "110:         assertTrue(monitor.isEnabled());",
      "111:         form = getRekeyForm(wc);",
      "112:         submit(form, \"dismiss\");",
      "113:         assertFalse(monitor.isEnabled());",
      "114:         try {",
      "115:             getRekeyForm(wc);",
      "116:             fail();",
      "117:         } catch (ElementNotFoundException e) {",
      "119:         }",
      "120:     }",
      "122:     private HtmlForm getRekeyForm(WebClient wc) throws IOException, SAXException {",
      "123:         return wc.goTo(\"/manage\").getFormByName(\"rekey\");",
      "124:     }",
      "126:     private HtmlButton getButton(HtmlForm form, int index) {",
      "127:         return form.<HtmlButton>getHtmlElementsByTagName(\"button\").get(index);",
      "128:     }",
      "130:     public void testScanOnBoot() throws Exception {",
      "131:         WebClient wc = createWebClient();",
      "134:         assertTrue(monitor.getLogFile().exists());",
      "135:         assertTrue(\"scan on boot should have turned this off\",!monitor.isScanOnBoot());",
      "138:         verifyRewrite(jenkins.getRootDir());",
      "141:         HtmlPage manage = wc.goTo(\"/manage\");",
      "142:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
      "143:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
      "144:     }",
      "146:     private String encryptOld(String str) throws Exception {",
      "147:         Cipher cipher = Secret.getCipher(\"AES\");",
      "148:         cipher.init(Cipher.ENCRYPT_MODE, Util.toAes128Key(TEST_KEY));",
      "149:         return new String(Base64.encode(cipher.doFinal((str + \"::::MAGIC::::\").getBytes(\"UTF-8\"))));",
      "150:     }",
      "152:     private String encryptNew(String str) {",
      "153:         return Secret.fromString(str).getEncryptedValue();",
      "154:     }",
      "156:     private static final String TEST_KEY = \"superDuperSecretWasNotSoSecretAfterAll\";",
      "157: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c49d6b5b3b58282a37deb5fb88bcf44a3f5bbfc0",
      "candidate_info": {
        "commit_hash": "c49d6b5b3b58282a37deb5fb88bcf44a3f5bbfc0",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c49d6b5b3b58282a37deb5fb88bcf44a3f5bbfc0",
        "files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ],
        "message": "Use TemporaryFolder to good effect. Prevents us from leaving behind a temp dir with cyclic symlinks, which breaks JGit\u2019s clean function. That in turn can cause test builds to break: https://jenkins.ci.cloudbees.com/job/core/job/jenkins_main_trunk/783/console Cleaning workspace FATAL: Could not delete file \u2026/workspace/core/jenkins_main_trunk/core/target/hudson5309354136960541268tmp/c/symlink/c/symlink/c/symlink/\u2026/c/foo.xml org.eclipse.jgit.api.errors.JGitInternalException: Could not delete file \u2026/workspace/core/jenkins_main_trunk/core/target/hudson5309354136960541268tmp/c/symlink/c/symlink/c/symlink/\u2026/c/foo.xml \tat org.eclipse.jgit.api.CleanCommand.call(CleanCommand.java:137) \tat org.jenkinsci.plugins.gitclient.JGitAPIImpl.clean(JGitAPIImpl.java:305) \tat hudson.plugins.git.GitAPI.clean(GitAPI.java:248) \tat hudson.plugins.git.GitSCM$4.invoke(GitSCM.java:1213) \tat hudson.plugins.git.GitSCM$4.invoke(GitSCM.java:1196) \tat hudson.FilePath$FileCallableWrapper.call(FilePath.java:2236) \tat hudson.remoting.UserRequest.perform(UserRequest.java:118) \tat hudson.remoting.UserRequest.perform(UserRequest.java:48) \tat hudson.remoting.Request$2.run(Request.java:326) \tat hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72) \tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) \tat java.util.concurrent.FutureTask.run(FutureTask.java:166) \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) \tat java.lang.Thread.run(Thread.java:722) Caused by: java.io.IOException: Could not delete file \u2026/workspace/core/jenkins_main_trunk/core/target/hudson5309354136960541268tmp/c/symlink/c/symlink/c/symlink/\u2026/c/foo.xml \tat org.eclipse.jgit.util.FileUtils.delete(FileUtils.java:142) \tat org.eclipse.jgit.util.FileUtils.delete(FileUtils.java:126) \tat org.eclipse.jgit.util.FileUtils.delete(FileUtils.java:126) \t\u2026 \tat org.eclipse.jgit.util.FileUtils.delete(FileUtils.java:126) \tat org.eclipse.jgit.util.FileUtils.delete(FileUtils.java:126) \tat org.eclipse.jgit.api.CleanCommand.call(CleanCommand.java:132) \t... 14 more",
        "before_after_code_files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ],
          "candidate": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
          "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import jenkins.security.ConfidentialStoreRule",
          "6: import org.junit.Rule",
          "7: import org.junit.Test",
          "9: import javax.crypto.Cipher",
          "",
          "[Removed Lines]",
          "11: import static hudson.Util.createTempDir",
          "",
          "[Added Lines]",
          "8: import org.junit.rules.TemporaryFolder",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     @Rule",
          "23:     public ConfidentialStoreRule confidentialStoreRule = new ConfidentialStoreRule();",
          "25:     @Test",
          "26:     void singleFileRewrite() {",
          "27:         def o = encryptOld('foobar') // old",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     @Rule public TemporaryFolder tmp = new TemporaryFolder()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     void roundtrip(String before, String after) {",
          "50:         def sr = new SecretRewriter(null);",
          "59:     }",
          "61:     String encryptOld(str) {",
          "",
          "[Removed Lines]",
          "51:         def f = File.createTempFile(\"test\",\"xml\");",
          "52:         try {",
          "53:             f.text = before",
          "54:             sr.rewrite(f,null)",
          "55:             assert after.trim()==f.text.trim()",
          "56:         } finally {",
          "57:             f.delete()",
          "58:         }",
          "",
          "[Added Lines]",
          "52:         def f = File.createTempFile(\"test\", \"xml\", tmp.root)",
          "53:         f.text = before",
          "54:         sr.rewrite(f,null)",
          "55:         assert after.trim()==f.text.trim()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:     @Test",
          "75:     void recursionDetection() {",
          "77:         def sw = new SecretRewriter(backup);",
          "78:         def st = StreamTaskListener.fromStdout()",
          "",
          "[Removed Lines]",
          "76:         def backup = createTempDir()",
          "",
          "[Added Lines]",
          "73:         def backup = tmp.newFolder(\"backup\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "83:         def answer = \"<msg>$n</msg>\"",
          "87:         def dirs = [\"a\", \"b\", \"c\", \"c/d\", \"c/d/e\"]",
          "88:         dirs.each { p ->",
          "89:             def d = new File(t, p)",
          "",
          "[Removed Lines]",
          "86:         def t = createTempDir()",
          "",
          "[Added Lines]",
          "83:         def t = tmp.newFolder(\"t\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "92:         }",
          "96:         new File(t2,\"foo.xml\").text = payload",
          "",
          "[Removed Lines]",
          "95:         def t2 = createTempDir()",
          "",
          "[Added Lines]",
          "92:         def t2 = tmp.newFolder(\"t2\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "398fa74da0cd10d1f405eeeb005a853bb75491cf",
      "candidate_info": {
        "commit_hash": "398fa74da0cd10d1f405eeeb005a853bb75491cf",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/398fa74da0cd10d1f405eeeb005a853bb75491cf",
        "files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ],
        "message": "Replace \\r\\n with system property line.separator\n\nImplementing change as suggested by vjuranek",
        "before_after_code_files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ],
          "candidate": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
          "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         def f = File.createTempFile(\"test\", \"xml\", tmp.root)",
          "53:         f.text = before",
          "54:         sr.rewrite(f,null)",
          "56:     }",
          "58:     String encryptOld(str) {",
          "",
          "[Removed Lines]",
          "55:         assert after.replaceAll(\"\\r\\n\", \"\\n\").trim()==f.text.replaceAll(\"\\r\\n\", \"\\n\").trim()",
          "",
          "[Added Lines]",
          "55:         assert after.replaceAll(System.getProperty(\"line.separator\"), \"\\n\").trim()==f.text.replaceAll(System.getProperty(\"line.separator\"), \"\\n\").trim()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3dc13b957b14cec649036e8dd517f0f9cb21fb04",
      "candidate_info": {
        "commit_hash": "3dc13b957b14cec649036e8dd517f0f9cb21fb04",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/3dc13b957b14cec649036e8dd517f0f9cb21fb04",
        "files": [
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java"
        ],
        "message": "[SECURITY-49] mark secret.key generated by post SECURITY-49 Jenkins.\n\nIf JENKINS_HOME is created by a post SECURIT-49 Jenkins (LTS, and other\nvariants), then there's no need to alarm the user.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "198: import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;",
          "199: import jenkins.security.ConfidentialKey;",
          "200: import jenkins.security.ConfidentialStore;",
          "201: import net.sf.json.JSONObject;",
          "202: import org.acegisecurity.AccessDeniedException;",
          "203: import org.acegisecurity.AcegiSecurityException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: import jenkins.util.io.FileBoolean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:                 sr.nextBytes(random);",
          "778:                 secretKey = Util.toHexString(random);",
          "779:                 secretFile.write(secretKey);",
          "780:             }",
          "782:             try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "784:                 new FileBoolean(new File(root,\"secret.key.not-so-secret\")).on();",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java": [
          "File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java -> core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             needed.on();",
          "69:     }",
          "",
          "[Removed Lines]",
          "67:         if (Jenkins.getInstance().isUpgradedFromBefore(new VersionNumber(\"1.496.*\")))",
          "",
          "[Added Lines]",
          "67:         Jenkins j = Jenkins.getInstance();",
          "68:         if (j.isUpgradedFromBefore(new VersionNumber(\"1.496.*\"))",
          "69:         &&  new FileBoolean(new File(j.getRootDir(),\"secret.key.not-so-secret\")).isOff())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6662a8f6ac5413f4dcf9d272f22c15abe6bf809",
      "candidate_info": {
        "commit_hash": "f6662a8f6ac5413f4dcf9d272f22c15abe6bf809",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f6662a8f6ac5413f4dcf9d272f22c15abe6bf809",
        "files": [
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
        ],
        "message": "Frequent test failure on PR builder. Invalid request submission: {json=[Ljava.lang.String;@2c46358e, .crumb=[Ljava.lang.String;@35661457} Diagnostics added in 21bf5c4. Failing I think because message.groovy uses f.submit rather than a plain <input type=\"submit\">, so JSON gets created and then StaplerRequest.getParameter cannot find it. But if this is the problem then why would it ever work? Perhaps a timing issue: JavaScript is used to massage the form just prior to submission, and maybe this only happens sometimes? Cannot reproduce test failure locally.",
        "before_after_code_files": [
          "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
          ],
          "candidate": [
            "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
          "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     }",
          "82:     public void testBasicWorkflow() throws Exception {",
          "83:         putSomeOldData(jenkins.getRootDir());",
          "85:         WebClient wc = createWebClient();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         if (\"https://jenkins.ci.cloudbees.com/job/core/job/jenkins_main_trunk/\".equals(System.getenv(\"JOB_URL\"))) {",
          "86:             return;",
          "87:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d90d47d1b76ebb5d753e919afefb5d2457664da2",
      "candidate_info": {
        "commit_hash": "d90d47d1b76ebb5d753e919afefb5d2457664da2",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/d90d47d1b76ebb5d753e919afefb5d2457664da2",
        "files": [
          "changelog.html",
          "core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java",
          "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java",
          "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java",
          "core/src/main/java/jenkins/diagnostics/ooom/Problem.java",
          "core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java",
          "core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties",
          "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy",
          "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties",
          "core/src/main/resources/jenkins/management/AsynchronousAdministrativeMonitor/log.groovy",
          "core/src/main/resources/jenkins/security/Messages.properties",
          "core/src/main/resources/jenkins/security/Messages_zh_TW.properties",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy"
        ],
        "message": "[FIXED JENKINS-18289]\n\nThe code is smart enough to compute a minimum set of builds to remove to\nrestore order consistency.",
        "before_after_code_files": [
          "changelog.html||changelog.html",
          "core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java||core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java",
          "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java||core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java",
          "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java||core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java",
          "core/src/main/java/jenkins/diagnostics/ooom/Problem.java||core/src/main/java/jenkins/diagnostics/ooom/Problem.java",
          "core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java||core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java",
          "core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java||core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java",
          "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties||core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties",
          "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy||core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy",
          "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties||core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/management/AsynchronousAdministrativeMonitor/log.groovy",
          "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
          "core/src/main/resources/jenkins/security/Messages_zh_TW.properties||core/src/main/resources/jenkins/security/Messages_zh_TW.properties",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties",
          "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy||test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
            "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
            "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy"
          ]
        }
      },
      "candidate_diff": {
        "changelog.html||changelog.html": [
          "File: changelog.html -> changelog.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   <li class=bug>",
          "71:     Ensuring <code>/log/all</code> shows only <code>INFO</code> and above messages, even if custom loggers display <code>FINE</code> or below.",
          "72:     (<a href=\"https://issues.jenkins-ci.org/browse/JENKINS-18959\">issue 18959</a>)",
          "73: </ul>",
          "74: </div><!--=TRUNK-END=-->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   <li class=rfe>",
          "74:     Added a new monitor that detects and fixse out-of-order builds records.",
          "75:     (<a href=\"https://issues.jenkins-ci.org/browse/JENKINS-18289\">issue 18289</a>)",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java||core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java": [
          "File: core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java -> core/src/main/java/jenkins/diagnostics/ooom/BuildPtr.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.diagnostics.ooom;",
          "3: import java.io.File;",
          "4: import java.util.Comparator;",
          "10:     final File buildDir;",
          "",
          "[Removed Lines]",
          "9: final class BuildPtr {",
          "14:     final String id;",
          "18:     final int n;",
          "",
          "[Added Lines]",
          "3: import hudson.FilePath;",
          "4: import hudson.model.Job;",
          "5: import hudson.model.TaskListener;",
          "8: import java.io.IOException;",
          "14: public final class BuildPtr implements Comparable<BuildPtr> {",
          "15:     final Job job;",
          "21:     public final String id;",
          "25:     public final int n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     int posByID;",
          "32:         this.n = n;",
          "33:         this.id = buildDir.getName();",
          "34:         this.buildDir = buildDir;",
          "",
          "[Removed Lines]",
          "31:     BuildPtr(File buildDir, int n) {",
          "",
          "[Added Lines]",
          "38:     BuildPtr(Job job, File buildDir, int n) {",
          "39:         this.job = job;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         if (a<b)    return -1;",
          "71:         return 0;",
          "72:     }",
          "73: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     public void fix(TaskListener listener) throws IOException, InterruptedException {",
          "89:         File dir = new File(job.getRootDir(), \"outOfOrderBuilds\");",
          "90:         dir.mkdirs();",
          "91:         File dst = new File(dir, buildDir.getName());",
          "92:         listener.getLogger().println(\"Renaming \"+dir);",
          "93:         listener.getLogger().println(\"  -> \"+dst);",
          "94:         if (!buildDir.renameTo(dst)) {",
          "95:             FilePath bd = new FilePath(buildDir);",
          "96:             bd.copyRecursiveTo(new FilePath(dst));",
          "97:             bd.deleteRecursive();",
          "98:         }",
          "101:         new File(buildDir.getParentFile(),String.valueOf(n)).delete();",
          "102:     }",
          "104:     @Override",
          "105:     public int compareTo(BuildPtr that) {",
          "106:         return this.n - that.n;",
          "107:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java||core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java": [
          "File: core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java -> core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildDetector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     private OutOfOrderBuildMonitor monitor;",
          "27:     }",
          "29:     @Override",
          "",
          "[Removed Lines]",
          "25:     public OutOfOrderBuildDetector(String name) {",
          "26:         super(name);",
          "",
          "[Added Lines]",
          "25:     public OutOfOrderBuildDetector() {",
          "26:         super(\"Out of order build detection\");",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java||core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java": [
          "File: core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java -> core/src/main/java/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.diagnostics.ooom;",
          "3: import hudson.Extension;",
          "6: import java.util.LinkedHashSet;",
          "7: import java.util.Set;",
          "",
          "[Removed Lines]",
          "4: import hudson.model.AdministrativeMonitor;",
          "",
          "[Added Lines]",
          "4: import hudson.model.TaskListener;",
          "5: import hudson.util.HttpResponses;",
          "6: import jenkins.management.AsynchronousAdministrativeMonitor;",
          "7: import org.kohsuke.stapler.HttpResponse;",
          "8: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "10: import java.io.File;",
          "11: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: @Extension",
          "18:     @Override",
          "19:     public boolean isActivated() {",
          "21:     }",
          "23:     void addProblem(Problem p) {",
          "24:         problems.add(p);",
          "25:     }",
          "26: }",
          "",
          "[Removed Lines]",
          "15: public class OutOfOrderBuildMonitor extends AdministrativeMonitor {",
          "16:     private final Set<Problem> problems = new LinkedHashSet<Problem>();",
          "20:         return !problems.isEmpty();",
          "",
          "[Added Lines]",
          "21: public class OutOfOrderBuildMonitor extends AsynchronousAdministrativeMonitor {",
          "22:     private final Set<Problem> problems = Collections.synchronizedSet(new LinkedHashSet<Problem>());",
          "26:         return !problems.isEmpty() || getLogFile().exists();",
          "33:     public Set<Problem> getProblems() {",
          "34:         return Collections.unmodifiableSet(new LinkedHashSet<Problem>(problems));",
          "35:     }",
          "37:     @RequirePOST",
          "38:     public HttpResponse doFix() {",
          "39:         start(false);",
          "40:         return HttpResponses.forwardToPreviousPage();",
          "41:     }",
          "46:     @RequirePOST",
          "47:     public HttpResponse doDismiss() {",
          "48:         getLogFile().delete();",
          "49:         return HttpResponses.forwardToPreviousPage();",
          "50:     }",
          "52:     @Override",
          "53:     public String getDisplayName() {",
          "54:         return \"Fix Out-of-order Builds\";",
          "55:     }",
          "57:     @Override",
          "58:     public File getLogFile() {",
          "59:         return super.getLogFile();",
          "60:     }",
          "62:     @Override",
          "63:     protected void fix(TaskListener listener) throws Exception {",
          "64:         Set<Problem> problems = getProblems();",
          "65:         for (Problem problem : problems) {",
          "66:             problem.fix(listener);",
          "67:         }",
          "68:         this.problems.removeAll(problems);",
          "69:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/diagnostics/ooom/Problem.java||core/src/main/java/jenkins/diagnostics/ooom/Problem.java": [
          "File: core/src/main/java/jenkins/diagnostics/ooom/Problem.java -> core/src/main/java/jenkins/diagnostics/ooom/Problem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.diagnostics.ooom;",
          "3: import hudson.model.Job;",
          "4: import hudson.model.Run;",
          "5: import jenkins.model.lazy.AbstractLazyLoadRunMap;",
          "6: import org.xml.sax.InputSource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import hudson.AbortException;",
          "4: import hudson.Util;",
          "5: import hudson.model.AbstractProject;",
          "8: import hudson.model.TaskListener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: import javax.xml.xpath.XPathFactory;",
          "12: import java.io.File;",
          "13: import java.io.IOException;",
          "15: import java.text.ParseException;",
          "16: import java.util.ArrayList;",
          "17: import java.util.Collections;",
          "19: import java.util.List;",
          "20: import java.util.Map;",
          "21: import java.util.Set;",
          "22: import java.util.SortedMap;",
          "23: import java.util.TreeMap;",
          "24: import java.util.logging.Logger;",
          "26: import static java.util.logging.Level.*;",
          "",
          "[Removed Lines]",
          "14: import java.net.MalformedURLException;",
          "18: import java.util.HashSet;",
          "",
          "[Added Lines]",
          "26: import java.util.TreeSet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: public final class Problem {",
          "",
          "[Removed Lines]",
          "37:     private final Job job;",
          "43:     private int inconsistencies;",
          "45:     private final XPathExpression xpath;",
          "",
          "[Added Lines]",
          "40:     public final Job job;",
          "46:     private final Set<BuildPtr> offenders = new TreeSet<BuildPtr>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:     public static Problem find(Job j) {",
          "53:         Problem p = new Problem(j);",
          "55:         return p;",
          "56:     }",
          "58:     private Problem(Job j) {",
          "59:         this.job = j;",
          "68:     }",
          "",
          "[Removed Lines]",
          "54:         if (p.inconsistencies==0)   return null;",
          "61:         try {",
          "62:             xpath = XPathFactory.newInstance().newXPath().compile(\"/*/number/text()\");",
          "63:         } catch (XPathExpressionException e) {",
          "64:             throw new AssertionError(e);",
          "65:         }",
          "67:         inspect();",
          "",
          "[Added Lines]",
          "55:         if (p.countInconsistencies()==0)   return null;",
          "61:         new Inspector().inspect();",
          "62:     }",
          "64:     public Set<BuildPtr> getOffenders() {",
          "65:         return Collections.unmodifiableSet(offenders);",
          "66:     }",
          "72:     public int countInconsistencies() {",
          "73:         return offenders.size();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:         return job.hashCode();",
          "87:     }",
          "100:         }",
          "107:         }",
          "115:             }",
          "116:         }",
          "132:             }",
          "156:             }",
          "170:             }",
          "171:         }",
          "204:                         }",
          "205:                     }",
          "230:                 }",
          "235:             }",
          "247:         }",
          "256:         }",
          "262:     }",
          "264:     private static final Logger LOGGER = Logger.getLogger(Problem.class.getName());",
          "",
          "[Removed Lines]",
          "92:     protected void inspect() {",
          "93:         Map<Integer, BuildPtr> builds = scan();",
          "95:         final List<BuildPtr> byN = new ArrayList<BuildPtr>(builds.values());",
          "97:         int i=0;",
          "98:         for (BuildPtr b : byN) {",
          "99:             b.posByN = i++;",
          "102:         final List<BuildPtr> byId = new ArrayList<BuildPtr>(byN);",
          "103:         Collections.sort(byId, BuildPtr.BY_ID);",
          "104:         i=0;",
          "105:         for (BuildPtr b : byN) {",
          "106:             b.posByID = i++;",
          "109:         for (i=0; i<byN.size()-1; i++) {",
          "110:             BuildPtr l = byN.get(i);",
          "111:             BuildPtr r = byN.get(i + 1);",
          "112:             if (l.isInconsistentWith(r)) {",
          "113:                 LOGGER.warning(\"Inconsistent ordering: \"+l+\" vs \"+r);",
          "114:                 inconsistencies++;",
          "118:         class Picker {",
          "123:             Set<BuildPtr> removed = new HashSet<BuildPtr>();",
          "125:             void findBuildsToRemove() {",
          "126:                 while (true) {",
          "127:                     BuildPtr b = pick();",
          "128:                     if (b==null)",
          "129:                         break;",
          "130:                     removed.add(b);",
          "131:                 }",
          "140:             BuildPtr pick() {",
          "141:                 BuildPtr worst=null;",
          "142:                 int worstScore=-1;",
          "144:                 for (BuildPtr b : byN) {",
          "145:                     if (removed.contains(b))",
          "146:                         continue;",
          "148:                     int score = score(b);",
          "149:                     if (score>worstScore) {",
          "150:                         worst = b;",
          "151:                         worstScore = score;",
          "152:                     }",
          "153:                 }",
          "155:                 return worst;",
          "161:             private int score(BuildPtr b) {",
          "162:                 int i=0;",
          "163:                 for (BuildPtr a : byN) {",
          "164:                     if (removed.contains(a))",
          "165:                         continue;",
          "166:                     if (a.isInconsistentWith(b))",
          "167:                         i++;",
          "168:                 }",
          "169:                 return i;",
          "173:         new Picker().findBuildsToRemove();",
          "174:     }",
          "179:     protected SortedMap<Integer,BuildPtr> scan() {",
          "180:         LOGGER.fine(\"Inspecting \"+job);",
          "182:         SortedMap<Integer,BuildPtr> builds = new TreeMap<Integer,BuildPtr>();",
          "184:         File[] files = job.getBuildDir().listFiles();",
          "185:         if (files==null)    return builds;",
          "187:         for (File build : files) {",
          "188:             try {",
          "189:                 LOGGER.finer(\"Inspecting \" + build);",
          "191:                 if (isInt(build.getName())) {",
          "193:                     String s = loadBuildNumberFromBuildXml(build);",
          "194:                     if (!s.equals(build.getName())) {",
          "195:                         LOGGER.warning(build+\" contains build number \"+s);",
          "197:                         if (build.delete()) {",
          "199:                             LOGGER.info(\"Removed problematic index \"+build);",
          "200:                         } else {",
          "203:                             LOGGER.warning(\"Couldn't delete \" + build);",
          "206:                     continue;",
          "207:                 }",
          "210:                 if (isID(build.getName())) {",
          "211:                     String bn = loadBuildNumberFromBuildXml(build);",
          "212:                     if (bn==null) {",
          "213:                         LOGGER.log(WARNING, \"Failed to parse \"+build);",
          "214:                         continue;",
          "215:                     }",
          "217:                     int n;",
          "218:                     try {",
          "219:                         n = Integer.parseInt(bn);",
          "220:                     } catch (NumberFormatException e) {",
          "221:                         LOGGER.log(WARNING, \"Expected number in \" + build + \" but found \" + bn, e);",
          "222:                         continue;",
          "223:                     }",
          "225:                     BuildPtr b = new BuildPtr(build,n);",
          "227:                     BuildPtr o = builds.put(n, b);",
          "228:                     if (o!=null)",
          "229:                         LOGGER.warning(\"Multiple builds have the same number: \"+o+\" vs \"+b);",
          "231:             } catch (XPathExpressionException e) {",
          "232:                 LOGGER.log(WARNING, \"Failed to inspect \"+build, e);",
          "233:             } catch (IOException e) {",
          "234:                 LOGGER.log(WARNING, \"Failed to inspect \"+build, e);",
          "236:         }",
          "238:         return builds;",
          "239:     }",
          "241:     private boolean isInt(String s) {",
          "242:         try {",
          "243:             Integer.parseInt(s);",
          "244:             return true;",
          "245:         } catch (NumberFormatException e) {",
          "246:             return false;",
          "248:     }",
          "250:     private boolean isID(String s) {",
          "251:         try {",
          "252:             Run.ID_FORMATTER.get().parse(s);",
          "253:             return true;",
          "254:         } catch (ParseException e) {",
          "255:             return false;",
          "257:     }",
          "259:     private String loadBuildNumberFromBuildXml(File dir) throws XPathExpressionException, MalformedURLException {",
          "260:         String systemId = new File(dir, \"build.xml\").toURI().toURL().toExternalForm();",
          "261:         return (String)xpath.evaluate(new InputSource(systemId), XPathConstants.NODE);",
          "",
          "[Added Lines]",
          "94:     @Override",
          "95:     public String toString() {",
          "96:         return job.getFullDisplayName()+\" \"+ Util.join(offenders);",
          "97:     }",
          "99:     public void fix(TaskListener listener) throws IOException, InterruptedException {",
          "100:         listener.getLogger().println(\"Fixing problems in \"+job.getFullDisplayName());",
          "101:         for (BuildPtr o : offenders) {",
          "102:             o.fix(listener);",
          "105:         if (job instanceof AbstractProject) {",
          "107:             AbstractProject a = (AbstractProject) job;",
          "108:             a._getRuns().purgeCache();",
          "110:     }",
          "115:     class Inspector {",
          "119:         private List<BuildPtr> byN;",
          "123:         private List<BuildPtr> byId;",
          "125:         private final XPathExpression xpath;",
          "127:         Inspector() {",
          "128:             try {",
          "129:                 xpath = XPathFactory.newInstance().newXPath().compile(\"/*/number/text()\");",
          "130:             } catch (XPathExpressionException e) {",
          "131:                 throw new AssertionError(e);",
          "138:         protected void inspect() {",
          "139:             Map<Integer, BuildPtr> builds = scan();",
          "141:             byN = new ArrayList<BuildPtr>(builds.values());",
          "143:             int i=0;",
          "144:             for (BuildPtr b : byN) {",
          "145:                 b.posByN = i++;",
          "148:             byId = new ArrayList<BuildPtr>(byN);",
          "149:             Collections.sort(byId, BuildPtr.BY_ID);",
          "150:             i=0;",
          "151:             for (BuildPtr b : byId) {",
          "152:                 b.posByID = i++;",
          "155:             while (true) {",
          "156:                 BuildPtr b = pick();",
          "157:                 if (b==null)",
          "158:                     break;",
          "159:                 offenders.add(b);",
          "171:         private BuildPtr pick() {",
          "172:             BuildPtr worst=null;",
          "173:             int worstScore=0;",
          "175:             for (BuildPtr b : byN) {",
          "176:                 if (offenders.contains(b))",
          "177:                     continue;",
          "179:                 int score = score(b);",
          "180:                 if (score>worstScore) {",
          "181:                     worst = b;",
          "182:                     worstScore = score;",
          "183:                 }",
          "184:             }",
          "186:             return worst;",
          "187:         }",
          "194:         private int score(BuildPtr b) {",
          "195:             int i=0;",
          "196:             for (BuildPtr a : byN) {",
          "197:                 if (offenders.contains(a))",
          "198:                     continue;",
          "199:                 if (a.isInconsistentWith(b))",
          "200:                     i++;",
          "201:             }",
          "202:             return i;",
          "203:         }",
          "208:         protected SortedMap<Integer,BuildPtr> scan() {",
          "209:             LOGGER.fine(\"Inspecting \"+job);",
          "211:             SortedMap<Integer,BuildPtr> builds = new TreeMap<Integer,BuildPtr>();",
          "213:             File[] files = job.getBuildDir().listFiles();",
          "214:             if (files==null)    return builds;",
          "216:             for (File build : files) {",
          "217:                 try {",
          "218:                     LOGGER.finer(\"Inspecting \" + build);",
          "220:                     if (isInt(build.getName())) {",
          "222:                         String s = loadBuildNumberFromBuildXml(build);",
          "223:                         if (!s.equals(build.getName())) {",
          "224:                             LOGGER.warning(build+\" contains build number \"+s);",
          "226:                             if (build.delete()) {",
          "228:                                 LOGGER.info(\"Removed problematic index \"+build);",
          "229:                             } else {",
          "232:                                 LOGGER.warning(\"Couldn't delete \" + build);",
          "233:                             }",
          "235:                         continue;",
          "239:                     if (isID(build.getName())) {",
          "240:                         String bn = loadBuildNumberFromBuildXml(build);",
          "241:                         if (bn==null) {",
          "242:                             LOGGER.log(WARNING, \"Failed to parse \"+build);",
          "243:                             continue;",
          "244:                         }",
          "246:                         int n;",
          "247:                         try {",
          "248:                             n = Integer.parseInt(bn);",
          "249:                         } catch (NumberFormatException e) {",
          "250:                             LOGGER.log(WARNING, \"Expected number in \" + build + \" but found \" + bn, e);",
          "251:                             continue;",
          "252:                         }",
          "254:                         BuildPtr b = new BuildPtr(job,build,n);",
          "256:                         BuildPtr o = builds.put(n, b);",
          "257:                         if (o!=null)",
          "258:                             LOGGER.warning(\"Multiple builds have the same number: \"+o+\" vs \"+b);",
          "259:                     }",
          "260:                 } catch (XPathExpressionException e) {",
          "261:                     LOGGER.log(WARNING, \"Failed to inspect \"+build, e);",
          "262:                 } catch (AbortException e) {",
          "263:                     LOGGER.log(WARNING, \"Failed to inspect \"+build+\": \"+e.getMessage());",
          "264:                 } catch (IOException e) {",
          "265:                     LOGGER.log(WARNING, \"Failed to inspect \"+build, e);",
          "269:             return builds;",
          "270:         }",
          "272:         private boolean isInt(String s) {",
          "273:             try {",
          "274:                 Integer.parseInt(s);",
          "275:                 return true;",
          "276:             } catch (NumberFormatException e) {",
          "277:                 return false;",
          "278:             }",
          "281:         private boolean isID(String s) {",
          "282:             try {",
          "283:                 Run.ID_FORMATTER.get().parse(s);",
          "284:                 return true;",
          "285:             } catch (ParseException e) {",
          "286:                 return false;",
          "287:             }",
          "290:         private String loadBuildNumberFromBuildXml(File dir) throws XPathExpressionException, IOException {",
          "291:             File buildXml = new File(dir, \"build.xml\");",
          "292:             if (!buildXml.exists())",
          "293:                 throw new AbortException(buildXml+\" doesn't exist\");",
          "294:             String systemId = buildXml.toURI().toURL().toExternalForm();",
          "295:             return (String)xpath.evaluate(new InputSource(systemId), XPathConstants.STRING);",
          "296:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java||core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java": [
          "File: core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java -> core/src/main/java/jenkins/management/AsynchronousAdministrativeMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.management;",
          "3: import hudson.AbortException;",
          "4: import hudson.console.AnnotatedLargeText;",
          "5: import hudson.model.AdministrativeMonitor;",
          "6: import hudson.model.TaskListener;",
          "7: import hudson.security.ACL;",
          "8: import hudson.util.StreamTaskListener;",
          "9: import jenkins.model.Jenkins;",
          "10: import jenkins.security.RekeySecretAdminMonitor;",
          "11: import org.apache.commons.io.output.NullOutputStream;",
          "13: import java.io.File;",
          "14: import java.nio.charset.Charset;",
          "15: import java.util.logging.Level;",
          "16: import java.util.logging.Logger;",
          "31: public abstract class AsynchronousAdministrativeMonitor extends AdministrativeMonitor {",
          "35:     private volatile FixThread fixThread;",
          "40:     public boolean isFixingActive() {",
          "41:         return fixThread !=null && fixThread.isAlive();",
          "42:     }",
          "47:     public AnnotatedLargeText getLogText() {",
          "48:         return new AnnotatedLargeText<AsynchronousAdministrativeMonitor>(",
          "49:                 getLogFile(), Charset.defaultCharset(),",
          "50:                 !isFixingActive(), this);",
          "51:     }",
          "56:     protected File getLogFile() {",
          "57:         File base = getBaseDir();",
          "58:         base.mkdirs();",
          "59:         return new File(base,\"log\");",
          "60:     }",
          "62:     protected File getBaseDir() {",
          "63:         return new File(Jenkins.getInstance().getRootDir(),getClass().getName());",
          "64:     }",
          "66:     public abstract String getDisplayName();",
          "74:     protected synchronized Thread start(boolean forceRestart) {",
          "75:         if (!forceRestart && isFixingActive()) {",
          "76:             fixThread.interrupt();",
          "77:         }",
          "79:         if (forceRestart || !isFixingActive()) {",
          "80:             fixThread = new FixThread();",
          "81:             fixThread.start();",
          "82:         }",
          "83:         return fixThread;",
          "84:     }",
          "89:     protected abstract void fix(TaskListener listener) throws Exception;",
          "91:     protected class FixThread extends Thread {",
          "92:         FixThread() {",
          "93:             super(getDisplayName());",
          "94:         }",
          "96:         @Override",
          "97:         public void run() {",
          "98:             TaskListener listener = TaskListener.NULL;",
          "99:             ACL.impersonate(ACL.SYSTEM);",
          "101:             try {",
          "102:                 listener = new StreamTaskListener(getLogFile());",
          "104:                 fix(listener);",
          "106:             } catch (AbortException e) {",
          "107:                 listener.error(e.getMessage());",
          "108:             } catch (Throwable e) {",
          "109:                 e.printStackTrace(listener.error(getName() + \" failed\"));",
          "110:                 LOGGER.log(Level.WARNING, getName()+\" failed\", e);",
          "111:             }",
          "112:         }",
          "113:     }",
          "115:     private static final Logger LOGGER = Logger.getLogger(AsynchronousAdministrativeMonitor.class.getName());",
          "116: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java||core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java": [
          "File: core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java -> core/src/main/java/jenkins/model/lazy/AbstractLazyLoadRunMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:     public void purgeCache() {",
          "222:         index = new Index();",
          "223:     }",
          "225:     private void loadIdOnDisk() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:         loadIdOnDisk();",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java": [
          "File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java -> core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.security;",
          "3: import hudson.Extension;",
          "5: import hudson.init.InitMilestone;",
          "6: import hudson.init.Initializer;",
          "8: import hudson.util.HttpResponses;",
          "9: import hudson.util.SecretRewriter;",
          "11: import hudson.util.VersionNumber;",
          "12: import jenkins.model.Jenkins;",
          "13: import jenkins.util.io.FileBoolean;",
          "14: import org.kohsuke.stapler.HttpResponse;",
          "",
          "[Removed Lines]",
          "4: import hudson.console.AnnotatedLargeText;",
          "7: import hudson.model.AdministrativeMonitor;",
          "10: import hudson.util.StreamTaskListener;",
          "",
          "[Added Lines]",
          "6: import hudson.model.TaskListener;",
          "10: import jenkins.management.AsynchronousAdministrativeMonitor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import java.io.PrintStream;",
          "23: import java.security.GeneralSecurityException;",
          "24: import java.util.Date;",
          "25: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "22: import java.nio.charset.Charset;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33: @Extension",
          "",
          "[Removed Lines]",
          "34: public class RekeySecretAdminMonitor extends AdministrativeMonitor implements StaplerProxy {",
          "",
          "[Added Lines]",
          "32: public class RekeySecretAdminMonitor extends AsynchronousAdministrativeMonitor implements StaplerProxy {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "54:     private final FileBoolean scanOnBoot = state(\"scanOnBoot\");",
          "62:     public RekeySecretAdminMonitor() throws IOException {",
          "",
          "[Removed Lines]",
          "59:     private volatile RekeyThread rekeyThread;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:     @RequirePOST",
          "102:     public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {",
          "103:         if(req.hasParameter(\"background\")) {",
          "110:         } else",
          "111:         if(req.hasParameter(\"schedule\")) {",
          "112:             scanOnBoot.on();",
          "",
          "[Removed Lines]",
          "104:             synchronized (this) {",
          "105:                 if (!isRewriterActive()) {",
          "106:                     rekeyThread = new RekeyThread();",
          "107:                     rekeyThread.start();",
          "108:                 }",
          "109:             }",
          "",
          "[Added Lines]",
          "96:             start(false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "119:         return HttpResponses.redirectViaContextPath(\"/manage\");",
          "120:     }",
          "138:         return new FileBoolean(new File(getBaseDir(),name));",
          "139:     }",
          "141:     @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)",
          "143:     public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {",
          "145:         if (flag.isOn()) {",
          "146:             flag.off();",
          "152:         }",
          "153:     }",
          "159:         return new File(getBaseDir(),\"rekey.log\");",
          "160:     }",
          "193:         }",
          "194:     }",
          "",
          "[Removed Lines]",
          "125:     public boolean isRewriterActive() {",
          "126:         return rekeyThread !=null && rekeyThread.isAlive();",
          "127:     }",
          "132:     public AnnotatedLargeText getLogText() {",
          "133:         return new AnnotatedLargeText<RekeySecretAdminMonitor>(getLogFile(), Charset.defaultCharset(),",
          "134:                 !isRewriterActive(),this);",
          "135:     }",
          "137:     private static FileBoolean state(String name) {",
          "144:         FileBoolean flag = new RekeySecretAdminMonitor().scanOnBoot;",
          "147:             RekeyThread t = new RekeyThread();",
          "148:             t.start();",
          "149:             t.join();",
          "158:     public static File getLogFile() {",
          "162:     private static File getBaseDir() {",
          "163:         return new File(Jenkins.getInstance().getRootDir(),RekeySecretAdminMonitor.class.getName());",
          "164:     }",
          "166:     private static class RekeyThread extends Thread {",
          "167:         private final SecretRewriter rewriter;",
          "169:         RekeyThread() throws GeneralSecurityException {",
          "170:             super(\"Rekey secret thread\");",
          "171:             rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));",
          "172:         }",
          "174:         @Override",
          "175:         public void run() {",
          "176:             try {",
          "177:                 LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());",
          "178:                 StreamTaskListener listener = new StreamTaskListener(getLogFile());",
          "179:                 try {",
          "180:                     PrintStream log = listener.getLogger();",
          "181:                     log.println(\"Started re-keying \" + new Date());",
          "182:                     int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);",
          "183:                     log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());",
          "184:                     new RekeySecretAdminMonitor().done.on();",
          "185:                     LOGGER.info(\"Secret re-keying completed\");",
          "186:                 } catch (Exception e) {",
          "187:                     LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);",
          "188:                     e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));",
          "189:                 }",
          "190:             } catch (IOException e) {",
          "191:                 LOGGER.log(Level.SEVERE, \"Catastrophic failure to rewrite secrets\",e);",
          "192:             }",
          "",
          "[Added Lines]",
          "110:     private FileBoolean state(String name) {",
          "117:         RekeySecretAdminMonitor m = new RekeySecretAdminMonitor();  // throw-away instance",
          "119:         FileBoolean flag = m.scanOnBoot;",
          "122:             m.start(false).join();",
          "128:     @Override",
          "129:     public String getDisplayName() {",
          "130:         return Messages.RekeySecretAdminMonitor_DisplayName();",
          "131:     }",
          "136:     @Override",
          "137:     protected File getLogFile() {",
          "141:     @Override",
          "142:     protected void fix(TaskListener listener) throws Exception {",
          "143:         LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());",
          "145:         SecretRewriter rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));",
          "147:         try {",
          "148:             PrintStream log = listener.getLogger();",
          "149:             log.println(\"Started re-keying \" + new Date());",
          "150:             int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);",
          "151:             log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());",
          "152:             new RekeySecretAdminMonitor().done.on();",
          "153:             LOGGER.info(\"Secret re-keying completed\");",
          "154:         } catch (Exception e) {",
          "155:             LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);",
          "156:             e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties||core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties": [
          "File: core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties -> core/src/main/resources/jenkins/diagnostics/ooom/Messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Problem.DisplayName={0} builds have inconsistent timestamps in <a href=\"{2}\">{1}</a>",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy||core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy": [
          "File: core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy -> core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: The MIT License",
          "4: Copyright (c) 2013, CloudBees, Inc.",
          "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
          "7: of this software and associated documentation files (the \"Software\"), to deal",
          "8: in the Software without restriction, including without limitation the rights",
          "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
          "10: copies of the Software, and to permit persons to whom the Software is",
          "11: furnished to do so, subject to the following conditions:",
          "13: The above copyright notice and this permission notice shall be included in",
          "14: all copies or substantial portions of the Software.",
          "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
          "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
          "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
          "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
          "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
          "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "22: THE SOFTWARE.",
          "24: package jenkins.diagnostics.ooom.OutOfOrderBuildMonitor",
          "26: import jenkins.diagnostics.ooom.BuildPtr",
          "27: import jenkins.diagnostics.ooom.Problem;",
          "29: def f = namespace(lib.FormTagLib)",
          "31: if (my.isFixingActive()) {",
          "32:     div(class:\"info\") {",
          "33:         raw _(\"inProgress\",my.url)",
          "34:     }",
          "35: } else if (my.logFile.exists()) {",
          "36:     form(method:\"POST\",action:\"${my.url}/dismiss\",name:\"dismissOutOfOrderBuilds\") {",
          "37:         raw _(\"completed\",my.url)",
          "38:         f.submit(name:\"dismiss\",value:_(\"Dismiss this message\"))",
          "39:     }",
          "40: }",
          "42: if (!my.problems.isEmpty()) {",
          "43:     form(method:\"POST\",action:\"${my.url}/fix\",name:\"fixOutOfOrderBuilds\") {",
          "44:         div(class:\"warning\") {",
          "45:             raw _(\"buildsAreOutOfOrder\")",
          "46:         }",
          "47:         ul {",
          "48:             my.problems.each { Problem p ->",
          "49:                 li {",
          "51:                     raw(_(\"problem\",",
          "52:                             p.countInconsistencies(),",
          "53:                             p.job.fullDisplayName,",
          "54:                             rootURL+'/'+p.job.url))",
          "56:                     text(\" : \")",
          "57:                     p.offenders.each { BuildPtr o ->",
          "58:                         a(href:rootURL+'/'+p.job.url+'/'+o.n, \"#${o.n}\")",
          "60:                         raw(\" \")",
          "61:                     }",
          "62:                 }",
          "63:             }",
          "64:         }",
          "66:         div(align:\"right\") {",
          "67:             f.submit(name:\"fix\",value:_(\"Correct those problems by moving offending records to a backup folder\"))",
          "68:         }",
          "69:     }",
          "70: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties||core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties": [
          "File: core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties -> core/src/main/resources/jenkins/diagnostics/ooom/OutOfOrderBuildMonitor/message.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: problem={0} builds in <a href=\"{2}\">{1}</a>",
          "2: buildsAreOutOfOrder=Some projects have builds whose timestamps are inconsistent. \\",
          "3:   <a href=\"http://jenkins-ci.org/issue/18289\">These will confuse Jenkins when it tries to look up build records</a>.",
          "4: inProgress=Out-of-order builds are being swept under the carpet. <a href=\"{0}/log\">You can check the log</a>.",
          "5: completed=Out-of-order builds were swept under the carpet. <a href=\"{0}/log\">You can check the log</a>.",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/management/AsynchronousAdministrativeMonitor/log.groovy": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy -> core/src/main/resources/jenkins/management/AsynchronousAdministrativeMonitor/log.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
          "22: THE SOFTWARE.",
          "26: def l = namespace(lib.LayoutTagLib)",
          "27: def t = namespace(lib.JenkinsTagLib)",
          "29: l.layout {",
          "30:     l.main_panel() {",
          "34:             pre(id: \"out\")",
          "35:             div(id: \"spinner\") {",
          "36:                 img(src: \"${imagesURL}/spinner.gif\", alt: \"\")",
          "",
          "[Removed Lines]",
          "24: package jenkins.security.RekeySecretAdminMonitor;",
          "31:         h1 _(\"Re-keying log\")",
          "33:         if (my.isRewriterActive()) {",
          "",
          "[Added Lines]",
          "24: package jenkins.management.AsynchronousAdministrativeMonitor;",
          "31:         h1 _(\"Log: ${my.displayName}\")",
          "33:         if (my.isFixingActive()) {",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties": [
          "File: core/src/main/resources/jenkins/security/Messages.properties -> core/src/main/resources/jenkins/security/Messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # THE SOFTWARE.",
          "23: ApiTokenProperty.DisplayName=API Token",
          "",
          "[Removed Lines]",
          "24: ApiTokenProperty.ChangeToken.Success=<div>Updated</div>",
          "",
          "[Added Lines]",
          "25: RekeySecretAdminMonitor.DisplayName=Re-keying",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/Messages_zh_TW.properties||core/src/main/resources/jenkins/security/Messages_zh_TW.properties": [
          "File: core/src/main/resources/jenkins/security/Messages_zh_TW.properties -> core/src/main/resources/jenkins/security/Messages_zh_TW.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # THE SOFTWARE.",
          "23: ApiTokenProperty.DisplayName=API Token",
          "",
          "[Removed Lines]",
          "24: ApiTokenProperty.ChangeToken.Success=<div>\\u5df2\\u66f4\\u65b0</div>",
          "",
          "[Added Lines]",
          "24: ApiTokenProperty.ChangeToken.Success=<div>\\u5DF2\\u66F4\\u65B0</div>",
          "25: RekeySecretAdminMonitor.DisplayName=\\u91D1\\u9470\\u91CD\\u5957",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log_zh_TW.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy": [
          "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     }",
          "32: }",
          "35:     div(class:\"info\") {",
          "36:         raw _(\"rekeyInProgress\",my.url)",
          "37:     }",
          "",
          "[Removed Lines]",
          "34: if (my.isRewriterActive()) {",
          "",
          "[Added Lines]",
          "34: if (my.isFixingActive()) {",
          "",
          "---------------"
        ],
        "test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy||test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy": [
          "File: test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy -> test/src/test/groovy/jenkins/diagnostics/ooom/OutOfOrderBuildDetectorTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package jenkins.diagnostics.ooom",
          "3: import com.gargoylesoftware.htmlunit.html.HtmlPage",
          "4: import hudson.model.Job",
          "5: import hudson.util.StreamTaskListener",
          "6: import org.junit.Rule",
          "7: import org.junit.Test",
          "8: import org.jvnet.hudson.test.JenkinsRule",
          "9: import org.jvnet.hudson.test.recipes.LocalData",
          "11: import javax.inject.Inject",
          "18: class OutOfOrderBuildDetectorTest {",
          "19:     @Rule",
          "20:     public JenkinsRule j = new JenkinsRule();",
          "22:     @Inject",
          "23:     OutOfOrderBuildDetector oobd;",
          "25:     @Inject",
          "26:     OutOfOrderBuildMonitor oobm;",
          "31:     @Test @LocalData",
          "32:     public void oneProblem() {",
          "33:         j.jenkins.injector.injectMembers(this);",
          "35:         Job dt = j.jenkins.getItem(\"deletion-test\");",
          "37:         def p = Problem.find(dt);",
          "38:         assert p.offenders.size()==1;",
          "39:         def b = (p.offenders as List)[0];",
          "41:         assert b.id==\"2013-07-29_17-09-09\"",
          "42:         assert b.n==3",
          "44:         def l = StreamTaskListener.fromStdout()",
          "47:         oobd.execute(l,0);",
          "50:         assert oobm.isActivated();",
          "51:         assert oobm.problems.size()==1;",
          "53:         def wc = j.createWebClient()",
          "56:         def manage = wc.goTo(\"manage\")",
          "57:         assertNoForm(manage,\"dismissOutOfOrderBuilds\")",
          "58:         j.submit(manage.getFormByName(\"fixOutOfOrderBuilds\"));",
          "61:         while (oobm.isFixingActive())",
          "62:             Thread.sleep(100);",
          "65:         oobm.getLogFile().exists()",
          "66:         wc.goTo(\"administrativeMonitor/${oobm.class.name}/log\")",
          "69:         manage = wc.goTo(\"manage\")",
          "70:         assertNoForm(manage,\"fixOutOfOrderBuilds\")",
          "71:         j.submit(manage.getFormByName(\"dismissOutOfOrderBuilds\"));",
          "74:         assert !oobm.isActivated();",
          "75:         manage = wc.goTo(\"manage\")",
          "76:         assertNoForm(manage,\"fixOutOfOrderBuilds\")",
          "77:         assertNoForm(manage,\"dismissOutOfOrderBuilds\")",
          "80:         assert dt.getBuildByNumber(1)!=null;",
          "81:         assert dt.getBuildByNumber(2)!=null;",
          "82:         assert dt.getBuildByNumber(3)==null;",
          "83:         assert dt.getBuildByNumber(4)!=null;",
          "84:         assert Problem.find(dt)==null;",
          "87:         assert new File(dt.rootDir,\"outOfOrderBuilds/2013-07-29_17-09-09/build.xml\").exists()",
          "88:     }",
          "90:     def assertNoForm(HtmlPage p, String name) {",
          "91:         def forms = p.documentElement.getElementsByAttribute(\"form\", \"name\", name);",
          "92:         assert forms.size()==0;",
          "93:     }",
          "98:     @Test",
          "99:     public void thereShouldBeNoFailure() {",
          "100:         def f = j.createFreeStyleProject()",
          "101:         j.assertBuildStatusSuccess(f.scheduleBuild2(0));",
          "102:         j.assertBuildStatusSuccess(f.scheduleBuild2(0));",
          "103:         j.assertBuildStatusSuccess(f.scheduleBuild2(0));",
          "104:         assert Problem.find(f)==null;",
          "105:     }",
          "106: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}