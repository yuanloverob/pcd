{
  "cve_id": "CVE-2021-23463",
  "cve_desc": "The package com.h2database:h2 from 1.4.198 and before 2.0.202 are vulnerable to XML External Entity (XXE) Injection via the org.h2.jdbc.JdbcSQLXML class object, when it receives parsed string data from org.h2.jdbc.JdbcResultSet.getSQLXML() method. If it executes the getSource() method when the parameter is DOMSource.class it will trigger the vulnerability.",
  "repo": "h2database/h2database",
  "patch_hash": "d83285fd2e48fb075780ee95badee6f5a15ea7f8",
  "patch_info": {
    "commit_hash": "d83285fd2e48fb075780ee95badee6f5a15ea7f8",
    "repo": "h2database/h2database",
    "commit_url": "https://github.com/h2database/h2database/commit/d83285fd2e48fb075780ee95badee6f5a15ea7f8%23diff-008c2e4462609982199cd83e7cf6f1d6b41296b516783f6752c44b9f15dc7bc3",
    "files": [
      "h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
    ],
    "message": "fix for #3195 CQLXML XXE vulnerability",
    "before_after_code_files": [
      "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
    ]
  },
  "patch_diff": {
    "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java": [
      "File: h2/src/main/org/h2/jdbc/JdbcSQLXML.java -> h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import java.io.Writer;",
      "17: import java.sql.SQLException;",
      "18: import java.sql.SQLXML;",
      "20: import javax.xml.parsers.DocumentBuilderFactory;",
      "21: import javax.xml.stream.XMLInputFactory;",
      "22: import javax.xml.stream.XMLOutputFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.HashMap;",
      "20: import java.util.Map;",
      "22: import javax.xml.XMLConstants;",
      "23: import javax.xml.parsers.DocumentBuilder;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24: import javax.xml.transform.Source;",
      "25: import javax.xml.transform.Transformer;",
      "26: import javax.xml.transform.TransformerFactory;",
      "27: import javax.xml.transform.dom.DOMResult;",
      "28: import javax.xml.transform.dom.DOMSource;",
      "29: import javax.xml.transform.sax.SAXResult;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "31: import javax.xml.transform.URIResolver;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "39: import org.h2.message.TraceObject;",
      "40: import org.h2.value.Value;",
      "41: import org.w3c.dom.Node;",
      "42: import org.xml.sax.InputSource;",
      "47: public final class JdbcSQLXML extends JdbcLob implements SQLXML {",
      "49:     private DOMResult domResult;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import org.xml.sax.EntityResolver;",
      "49: import org.xml.sax.XMLReader;",
      "50: import org.xml.sax.helpers.DefaultHandler;",
      "51: import org.xml.sax.helpers.XMLReaderFactory;",
      "58:     private static final Map<String,Boolean> secureFeatureMap = new HashMap<>();",
      "59:     private static final EntityResolver NOOP_ENTITY_RESOLVER = (publicId, systemId) -> new InputSource(new StringReader(\"\"));",
      "60:     private static final URIResolver NOOP_URI_RESOLVER = (href, base) -> new StreamSource(new StringReader(\"\"));",
      "62:     static {",
      "63:         secureFeatureMap.put(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
      "64:         secureFeatureMap.put(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
      "65:         secureFeatureMap.put(\"http://xml.org/sax/features/external-general-entities\", false);",
      "66:         secureFeatureMap.put(\"http://xml.org/sax/features/external-parameter-entities\", false);",
      "67:         secureFeatureMap.put(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
      "68:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "107:                         \"getSource(\" + (sourceClass != null ? sourceClass.getSimpleName() + \".class\" : \"null\") + ')');",
      "108:             }",
      "109:             checkReadable();",
      "110:             if (sourceClass == null || sourceClass == DOMSource.class) {",
      "111:                 DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
      "113:             } else if (sourceClass == SAXSource.class) {",
      "115:             } else if (sourceClass == StAXSource.class) {",
      "116:                 XMLInputFactory xif = XMLInputFactory.newInstance();",
      "117:                 return (T) new StAXSource(xif.createXMLStreamReader(value.getInputStream()));",
      "118:             } else if (sourceClass == StreamSource.class) {",
      "119:                 return (T) new StreamSource(value.getInputStream());",
      "120:             }",
      "121:             throw unsupported(sourceClass.getName());",
      "",
      "[Removed Lines]",
      "112:                 return (T) new DOMSource(dbf.newDocumentBuilder().parse(new InputSource(value.getInputStream())));",
      "114:                 return (T) new SAXSource(new InputSource(value.getInputStream()));",
      "",
      "[Added Lines]",
      "134:                 for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {",
      "135:                     try {",
      "136:                         dbf.setFeature(entry.getKey(), entry.getValue());",
      "137:                     } catch (Exception ignore) {/**/}",
      "138:                 }",
      "139:                 dbf.setXIncludeAware(false);",
      "140:                 dbf.setExpandEntityReferences(false);",
      "141:                 dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");",
      "142:                 DocumentBuilder db = dbf.newDocumentBuilder();",
      "143:                 db.setEntityResolver(NOOP_ENTITY_RESOLVER);",
      "144:                 return (T) new DOMSource(db.parse(new InputSource(value.getInputStream())));",
      "146:                 XMLReader reader = XMLReaderFactory.createXMLReader();",
      "147:                 for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {",
      "148:                     try {",
      "149:                         reader.setFeature(entry.getKey(), entry.getValue());",
      "150:                     } catch (Exception ignore) {/**/}",
      "151:                 }",
      "152:                 reader.setEntityResolver(NOOP_ENTITY_RESOLVER);",
      "153:                 return (T) new SAXSource(reader, new InputSource(value.getInputStream()));",
      "156:                 xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "157:                 xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
      "158:                 xif.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);",
      "161:                 TransformerFactory tf = TransformerFactory.newInstance();",
      "162:                 tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
      "163:                 tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");",
      "164:                 tf.setURIResolver(NOOP_URI_RESOLVER);",
      "165:                 tf.newTransformer().transform(new StreamSource(value.getInputStream()), new SAXResult(new DefaultHandler()));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "165:         try {",
      "166:             if (isDebugEnabled()) {",
      "167:                 debugCode(",
      "169:             }",
      "170:             checkEditable();",
      "171:             if (resultClass == null || resultClass == DOMResult.class) {",
      "",
      "[Removed Lines]",
      "168:                         \"getSource(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');",
      "",
      "[Added Lines]",
      "215:                         \"setResult(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a21e3ca6457f2d0a3f5c9acef781d87ff740b8a5",
      "candidate_info": {
        "commit_hash": "a21e3ca6457f2d0a3f5c9acef781d87ff740b8a5",
        "repo": "h2database/h2database",
        "commit_url": "https://github.com/h2database/h2database/commit/a21e3ca6457f2d0a3f5c9acef781d87ff740b8a5",
        "files": [
          "h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
        ],
        "message": "Use SAXParserFactory instead of deprecated XMLReaderFactory",
        "before_after_code_files": [
          "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
          ],
          "candidate": [
            "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
          ]
        }
      },
      "candidate_diff": {
        "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java": [
          "File: h2/src/main/org/h2/jdbc/JdbcSQLXML.java -> h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import javax.xml.XMLConstants;",
          "23: import javax.xml.parsers.DocumentBuilder;",
          "24: import javax.xml.parsers.DocumentBuilderFactory;",
          "25: import javax.xml.stream.XMLInputFactory;",
          "26: import javax.xml.stream.XMLOutputFactory;",
          "27: import javax.xml.transform.Result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import javax.xml.parsers.SAXParserFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.xml.sax.InputSource;",
          "49: import org.xml.sax.XMLReader;",
          "50: import org.xml.sax.helpers.DefaultHandler;",
          "",
          "[Removed Lines]",
          "51: import org.xml.sax.helpers.XMLReaderFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:                 db.setEntityResolver(NOOP_ENTITY_RESOLVER);",
          "148:                 return (T) new DOMSource(db.parse(new InputSource(value.getInputStream())));",
          "149:             } else if (sourceClass == SAXSource.class) {",
          "151:                 for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {",
          "152:                     try {",
          "154:                     } catch (Exception ignore) {/**/}",
          "155:                 }",
          "156:                 reader.setEntityResolver(NOOP_ENTITY_RESOLVER);",
          "157:                 return (T) new SAXSource(reader, new InputSource(value.getInputStream()));",
          "158:             } else if (sourceClass == StAXSource.class) {",
          "",
          "[Removed Lines]",
          "150:                 XMLReader reader = XMLReaderFactory.createXMLReader();",
          "153:                         reader.setFeature(entry.getKey(), entry.getValue());",
          "",
          "[Added Lines]",
          "150:                 SAXParserFactory spf = SAXParserFactory.newInstance();",
          "153:                         spf.setFeature(entry.getKey(), entry.getValue());",
          "156:                 XMLReader reader = spf.newSAXParser().getXMLReader();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "814de578e1ced8c5e1b9511bfb84b2ff47756c88",
      "candidate_info": {
        "commit_hash": "814de578e1ced8c5e1b9511bfb84b2ff47756c88",
        "repo": "h2database/h2database",
        "commit_url": "https://github.com/h2database/h2database/commit/814de578e1ced8c5e1b9511bfb84b2ff47756c88",
        "files": [
          "h2/src/docsrc/html/changelog.html",
          "h2/src/main/org/h2/command/dml/Help.java",
          "h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
          "h2/src/main/org/h2/value/ValueLob.java"
        ],
        "message": "make Javadoc happy",
        "before_after_code_files": [
          "h2/src/docsrc/html/changelog.html||h2/src/docsrc/html/changelog.html",
          "h2/src/main/org/h2/command/dml/Help.java||h2/src/main/org/h2/command/dml/Help.java",
          "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
          "h2/src/main/org/h2/value/ValueLob.java||h2/src/main/org/h2/value/ValueLob.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
          ],
          "candidate": [
            "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java"
          ]
        }
      },
      "candidate_diff": {
        "h2/src/docsrc/html/changelog.html||h2/src/docsrc/html/changelog.html": [
          "File: h2/src/docsrc/html/changelog.html -> h2/src/docsrc/html/changelog.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: <h2>Next Version (unreleased)</h2>",
          "23: <ul>",
          "24: <li>Issue #3174: Add keyword AUTOCOMMIT on create linked table to control the commit mode",
          "25: <li>Issue #3130: Precision of NUMERIC values isn't verified in the Oracle compatibility mode",
          "26: </li>",
          "27: <li>Issue #3122: Documentation: Syntax diagram for RENAME CONSTRAINT incorrect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: </li>",
          "",
          "---------------"
        ],
        "h2/src/main/org/h2/command/dml/Help.java||h2/src/main/org/h2/command/dml/Help.java": [
          "File: h2/src/main/org/h2/command/dml/Help.java -> h2/src/main/org/h2/command/dml/Help.java"
        ],
        "h2/src/main/org/h2/jdbc/JdbcSQLXML.java||h2/src/main/org/h2/jdbc/JdbcSQLXML.java": [
          "File: h2/src/main/org/h2/jdbc/JdbcSQLXML.java -> h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: public final class JdbcSQLXML extends JdbcLob implements SQLXML {",
          "58:     private static final Map<String,Boolean> secureFeatureMap = new HashMap<>();",
          "60:     private static final URIResolver NOOP_URI_RESOLVER = (href, base) -> new StreamSource(new StringReader(\"\"));",
          "62:     static {",
          "",
          "[Removed Lines]",
          "59:     private static final EntityResolver NOOP_ENTITY_RESOLVER = (publicId, systemId) -> new InputSource(new StringReader(\"\"));",
          "",
          "[Added Lines]",
          "59:     private static final EntityResolver NOOP_ENTITY_RESOLVER = (pubId, sysId) -> new InputSource(new StringReader(\"\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:                 tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
          "163:                 tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");",
          "164:                 tf.setURIResolver(NOOP_URI_RESOLVER);",
          "166:                 return (T) new StreamSource(value.getInputStream());",
          "167:             }",
          "168:             throw unsupported(sourceClass.getName());",
          "",
          "[Removed Lines]",
          "165:                 tf.newTransformer().transform(new StreamSource(value.getInputStream()), new SAXResult(new DefaultHandler()));",
          "",
          "[Added Lines]",
          "165:                 tf.newTransformer().transform(new StreamSource(value.getInputStream()),",
          "166:                                                 new SAXResult(new DefaultHandler()));",
          "",
          "---------------"
        ],
        "h2/src/main/org/h2/value/ValueLob.java||h2/src/main/org/h2/value/ValueLob.java": [
          "File: h2/src/main/org/h2/value/ValueLob.java -> h2/src/main/org/h2/value/ValueLob.java"
        ]
      }
    }
  ]
}