{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bae88491a85ebd1d1a6caaac8c878903aca6a078",
      "candidate_info": {
        "commit_hash": "bae88491a85ebd1d1a6caaac8c878903aca6a078",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/bae88491a85ebd1d1a6caaac8c878903aca6a078",
        "files": [
          "saleor/account/utils.py",
          "saleor/checkout/complete_checkout.py",
          "saleor/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/order/bulk_mutations/orders.py",
          "saleor/graphql/order/mutations/draft_orders.py",
          "saleor/graphql/order/mutations/fulfillments.py",
          "saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_fulfillment.py",
          "saleor/graphql/order/tests/test_order.py",
          "saleor/order/actions.py",
          "saleor/order/tests/test_fulfullments_actions.py",
          "saleor/order/tests/test_order_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/tests/fixtures.py"
        ],
        "message": "Get rid of using get_plugins_manager method in order actions",
        "before_after_code_files": [
          "saleor/account/utils.py||saleor/account/utils.py",
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/checkout/tests/test_checkout_complete.py||saleor/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/order/bulk_mutations/orders.py||saleor/graphql/order/bulk_mutations/orders.py",
          "saleor/graphql/order/mutations/draft_orders.py||saleor/graphql/order/mutations/draft_orders.py",
          "saleor/graphql/order/mutations/fulfillments.py||saleor/graphql/order/mutations/fulfillments.py",
          "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_fulfillment.py||saleor/graphql/order/tests/test_fulfillment.py",
          "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py",
          "saleor/order/actions.py||saleor/order/actions.py",
          "saleor/order/tests/test_fulfullments_actions.py||saleor/order/tests/test_fulfullments_actions.py",
          "saleor/order/tests/test_order_actions.py||saleor/order/tests/test_order_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/tests/fixtures.py||saleor/tests/fixtures.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/account/utils.py||saleor/account/utils.py": [
          "File: saleor/account/utils.py -> saleor/account/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: def store_user_address(",
          "15: ):",
          "16:     \"\"\"Add address to user address book and set as default one.\"\"\"",
          "17:     address = manager.change_user_address(address, address_type, user)",
          "",
          "[Removed Lines]",
          "14:     user: User, address: \"Address\", address_type: str, manager: \"PluginsManager\"",
          "",
          "[Added Lines]",
          "14:     user: User,",
          "15:     address: \"Address\",",
          "16:     address_type: str,",
          "17:     manager: \"PluginsManager\",",
          "",
          "---------------"
        ],
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     \"\"\"Fetch, process and return shipping data from checkout.\"\"\"",
          "102:     billing_address = checkout_info.billing_address",
          "105:         store_user_address(",
          "106:             checkout_info.user, billing_address, AddressType.BILLING, manager=manager",
          "107:         )",
          "112:             billing_address = billing_address.get_copy()",
          "114:     return {",
          "",
          "[Removed Lines]",
          "104:     if checkout_info.user:",
          "108:         if (",
          "109:             billing_address",
          "110:             and checkout_info.user.addresses.filter(pk=billing_address.pk).exists()",
          "111:         ):",
          "",
          "[Added Lines]",
          "104:     if checkout_info.user and billing_address:",
          "108:         if checkout_info.user.addresses.filter(pk=billing_address.pk).exists():",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: @transaction.atomic",
          "330: def _create_order(",
          "332: ) -> Order:",
          "333:     \"\"\"Create an order from the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:     checkout_info: \"CheckoutInfo\",",
          "330:     order_data: dict,",
          "331:     user: User,",
          "332:     manager: \"PluginsManager\",",
          "333:     site_settings=None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "403:     order.private_metadata = checkout.private_metadata",
          "404:     order.save()",
          "408:     # Send the order confirmation email",
          "409:     transaction.on_commit(",
          "",
          "[Removed Lines]",
          "406:     transaction.on_commit(lambda: order_created(order=order, user=user))",
          "",
          "[Added Lines]",
          "408:     transaction.on_commit(",
          "409:         lambda: order_created(order=order, user=user, manager=manager)",
          "410:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590:                 checkout_info=checkout_info,",
          "591:                 order_data=order_data,",
          "592:                 user=user,  # type: ignore",
          "593:                 site_settings=site_settings,",
          "594:             )",
          "595:             # remove checkout after order is successfully created",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:                 manager=manager,",
          "",
          "---------------"
        ],
        "saleor/checkout/tests/test_checkout_complete.py||saleor/checkout/tests/test_checkout_complete.py": [
          "File: saleor/checkout/tests/test_checkout_complete.py -> saleor/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             discounts=None,",
          "54:         ),",
          "55:         user=customer_user,",
          "56:     )",
          "57:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:             discounts=None,",
          "194:         ),",
          "195:         user=AnonymousUser(),",
          "196:     )",
          "197:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:             discounts=None,",
          "326:         ),",
          "327:         user=customer_user,",
          "328:     )",
          "329:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "436:             discounts=None,",
          "437:         ),",
          "438:         user=AnonymousUser(),",
          "439:     )",
          "440:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "549:         checkout_info=checkout_info,",
          "550:         order_data=order_data,",
          "551:         user=customer_user,",
          "552:     )",
          "553:     assert order_1.checkout_token == checkout.token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "556:         checkout_info=checkout_info,",
          "557:         order_data=order_data,",
          "558:         user=customer_user,",
          "559:     )",
          "560:     assert order_1.pk == order_2.pk",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "604:             discounts=None,",
          "605:         ),",
          "606:         user=customer_user if not is_anonymous_user else AnonymousUser(),",
          "607:     )",
          "609:     assert order.gift_cards.count() == 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "647:             discounts=None,",
          "648:         ),",
          "649:         user=customer_user,",
          "650:     )",
          "652:     gift_card_used.refresh_from_db()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "657:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "704:             discounts=None,",
          "705:         ),",
          "706:         user=customer_user,",
          "707:     )",
          "709:     gift_card_created_by_staff.refresh_from_db()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "735:             discounts=None,",
          "736:         ),",
          "737:         user=customer_user,",
          "738:     )",
          "739:     assert order.customer_note == checkout_with_item.note",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:         manager=manager,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "763:         checkout_info=checkout_info,",
          "764:         order_data=order_data,",
          "765:         user=customer_user,",
          "766:     )",
          "767:     assert order_1.checkout_token == checkout.token",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776:         manager=manager,",
          "",
          "---------------"
        ],
        "saleor/graphql/order/bulk_mutations/orders.py||saleor/graphql/order/bulk_mutations/orders.py": [
          "File: saleor/graphql/order/bulk_mutations/orders.py -> saleor/graphql/order/bulk_mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     @classmethod",
          "34:     def bulk_action(cls, info, queryset, user):",
          "35:         for order in queryset:",
          "",
          "[Removed Lines]",
          "36:             cancel_order(order=order, user=user)",
          "",
          "[Added Lines]",
          "36:             cancel_order(order=order, user=user, manager=info.context.plugins)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/mutations/draft_orders.py||saleor/graphql/order/mutations/draft_orders.py": [
          "File: saleor/graphql/order/mutations/draft_orders.py -> saleor/graphql/order/mutations/draft_orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:                 except InsufficientStock as exc:",
          "385:                     errors = prepare_insufficient_stock_order_validation_errors(exc)",
          "386:                     raise ValidationError({\"lines\": errors})",
          "389:         return DraftOrderComplete(order=order)",
          "",
          "[Removed Lines]",
          "387:         order_created(order, user=info.context.user, from_draft=True)",
          "",
          "[Added Lines]",
          "387:         order_created(",
          "388:             order, user=info.context.user, manager=info.context.plugins, from_draft=True",
          "389:         )",
          "",
          "---------------"
        ],
        "saleor/graphql/order/mutations/fulfillments.py||saleor/graphql/order/mutations/fulfillments.py": [
          "File: saleor/graphql/order/mutations/fulfillments.py -> saleor/graphql/order/mutations/fulfillments.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         try:",
          "217:             fulfillments = create_fulfillments(",
          "219:             )",
          "220:         except InsufficientStock as exc:",
          "221:             errors = prepare_insufficient_stock_order_validation_errors(exc)",
          "",
          "[Removed Lines]",
          "218:                 user, order, dict(lines_for_warehouses), notify_customer",
          "",
          "[Added Lines]",
          "218:                 user,",
          "219:                 order,",
          "220:                 dict(lines_for_warehouses),",
          "221:                 info.context.plugins,",
          "222:                 notify_customer,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:         fulfillment.tracking_number = tracking_number",
          "252:         fulfillment.save()",
          "253:         order = fulfillment.order",
          "255:         input_data = data.get(\"input\", {})",
          "256:         notify_customer = input_data.get(\"notify_customer\")",
          "257:         if notify_customer:",
          "",
          "[Removed Lines]",
          "254:         fulfillment_tracking_updated(fulfillment, info.context.user, tracking_number)",
          "",
          "[Added Lines]",
          "258:         fulfillment_tracking_updated(",
          "259:             fulfillment, info.context.user, tracking_number, info.context.plugins",
          "260:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:             )",
          "296:         order = fulfillment.order",
          "298:         fulfillment.refresh_from_db(fields=[\"status\"])",
          "299:         order.refresh_from_db(fields=[\"status\"])",
          "300:         return FulfillmentCancel(fulfillment=fulfillment, order=order)",
          "",
          "[Removed Lines]",
          "297:         cancel_fulfillment(fulfillment, info.context.user, warehouse)",
          "",
          "[Added Lines]",
          "303:         cancel_fulfillment(",
          "304:             fulfillment, info.context.user, warehouse, info.context.plugins",
          "305:         )",
          "",
          "---------------"
        ],
        "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py": [
          "File: saleor/graphql/order/mutations/orders.py -> saleor/graphql/order/mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:             info.context.site.settings.include_taxes_in_prices,",
          "287:         )",
          "288:         # Post-process the results",
          "290:         return OrderUpdateShipping(order=order)",
          "",
          "[Removed Lines]",
          "289:         order_shipping_updated(order)",
          "",
          "[Added Lines]",
          "289:         order_shipping_updated(order, info.context.plugins)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:     def perform_mutation(cls, _root, info, **data):",
          "360:         order = cls.get_node_or_error(info, data.get(\"id\"), only_type=Order)",
          "361:         clean_order_cancel(order)",
          "363:         return OrderCancel(order=order)",
          "",
          "[Removed Lines]",
          "362:         cancel_order(order=order, user=info.context.user)",
          "",
          "[Added Lines]",
          "362:         cancel_order(order=order, user=info.context.user, manager=info.context.plugins)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "395:             order, info.context.user, None, clean_mark_order_as_paid, order",
          "396:         )",
          "399:         return OrderMarkAsPaid(order=order)",
          "",
          "[Removed Lines]",
          "398:         mark_order_as_paid(order, info.context.user, transaction_reference)",
          "",
          "[Added Lines]",
          "398:         mark_order_as_paid(",
          "399:             order, info.context.user, info.context.plugins, transaction_reference",
          "400:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "436:         # Confirm that we changed the status to capture. Some payment can receive",
          "437:         # asynchronous webhook with update status",
          "438:         if transaction.kind == TransactionKind.CAPTURE:",
          "440:         return OrderCapture(order=order)",
          "",
          "[Removed Lines]",
          "439:             order_captured(order, info.context.user, amount, payment)",
          "",
          "[Added Lines]",
          "441:             order_captured(",
          "442:                 order, info.context.user, amount, payment, info.context.plugins",
          "443:             )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "464:         # Confirm that we changed the status to void. Some payment can receive",
          "465:         # asynchronous webhook with update status",
          "466:         if transaction.kind == TransactionKind.VOID:",
          "468:         return OrderVoid(order=order)",
          "",
          "[Removed Lines]",
          "467:             order_voided(order, info.context.user, payment)",
          "",
          "[Added Lines]",
          "471:             order_voided(order, info.context.user, payment, info.context.plugins)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "547:         order.status = OrderStatus.UNFULFILLED",
          "548:         order.save(update_fields=[\"status\"])",
          "549:         payment = order.get_last_payment()",
          "550:         if payment and payment.is_authorized and payment.can_capture():",
          "551:             gateway.capture(payment)",
          "554:         return OrderConfirm(order=order)",
          "",
          "[Removed Lines]",
          "552:             order_captured(order, info.context.user, payment.total, payment)",
          "553:         order_confirmed(order, info.context.user, send_confirmation_email=True)",
          "",
          "[Added Lines]",
          "554:         manager = info.context.plugins",
          "557:             order_captured(order, info.context.user, payment.total, payment, manager)",
          "558:         order_confirmed(order, info.context.user, manager, send_confirmation_email=True)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_fulfillment.py||saleor/graphql/order/tests/test_fulfillment.py": [
          "File: saleor/graphql/order/tests/test_fulfillment.py -> saleor/graphql/order/tests/test_fulfillment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphene",
          "4: from django.contrib.auth.models import AnonymousUser",
          "",
          "[Removed Lines]",
          "1: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "1: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         ]",
          "78:     }",
          "79:     mock_create_fulfillments.assert_called_once_with(",
          "81:     )",
          "",
          "[Removed Lines]",
          "80:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "80:         staff_user, order, fulfillment_lines_for_warehouses, ANY, True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:         ]",
          "128:     }",
          "129:     mock_create_fulfillments.assert_called_once_with(",
          "131:     )",
          "",
          "[Removed Lines]",
          "130:         AnonymousUser(), order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "130:         AnonymousUser(), order, fulfillment_lines_for_warehouses, ANY, True",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:     }",
          "188:     mock_create_fulfillments.assert_called_once_with(",
          "190:     )",
          "",
          "[Removed Lines]",
          "189:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "189:         staff_user, order, fulfillment_lines_for_warehouses, ANY, True",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228:         str(warehouse.pk): [{\"order_line\": order_line, \"quantity\": 1}]",
          "229:     }",
          "230:     mock_create_fulfillments.assert_called_once_with(",
          "232:     )",
          "",
          "[Removed Lines]",
          "231:         staff_user, order, fulfillment_lines_for_warehouses, False",
          "",
          "[Added Lines]",
          "231:         staff_user, order, fulfillment_lines_for_warehouses, ANY, False",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "286:         str(warehouse.pk): [{\"order_line\": order_line2, \"quantity\": 2}]",
          "287:     }",
          "288:     mock_create_fulfillments.assert_called_once_with(",
          "290:     )",
          "",
          "[Removed Lines]",
          "289:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "289:         staff_user, order, fulfillment_lines_for_warehouses, ANY, True",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py": [
          "File: saleor/graphql/order/tests/test_order.py -> saleor/graphql/order/tests/test_order.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3210:     assert not data[\"orderErrors\"]",
          "3212:     mock_clean_order_cancel.assert_called_once_with(order)",
          "3216: @patch(\"saleor.graphql.order.mutations.orders.cancel_order\")",
          "",
          "[Removed Lines]",
          "3213:     mock_cancel_order.assert_called_once_with(order=order, user=staff_api_client.user)",
          "",
          "[Added Lines]",
          "3213:     mock_cancel_order.assert_called_once_with(",
          "3214:         order=order, user=staff_api_client.user, manager=ANY",
          "3215:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3233:     assert not data[\"orderErrors\"]",
          "3235:     mock_clean_order_cancel.assert_called_once_with(order)",
          "3239: def test_order_capture(",
          "",
          "[Removed Lines]",
          "3236:     mock_cancel_order.assert_called_once_with(order=order, user=AnonymousUser())",
          "",
          "[Added Lines]",
          "3238:     mock_cancel_order.assert_called_once_with(",
          "3239:         order=order, user=AnonymousUser(), manager=ANY",
          "3240:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4358:     assert data[\"count\"] == expected_count",
          "4359:     assert not data[\"orderErrors\"]",
          "4363:     mock_cancel_order.assert_has_calls(calls, any_order=True)",
          "4364:     mock_cancel_order.call_count == expected_count",
          "",
          "[Removed Lines]",
          "4361:     calls = [call(order=order, user=staff_api_client.user) for order in orders]",
          "",
          "[Added Lines]",
          "4365:     calls = [",
          "4366:         call(order=order, user=staff_api_client.user, manager=ANY) for order in orders",
          "4367:     ]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4387:     assert data[\"count\"] == expected_count",
          "4388:     assert not data[\"orderErrors\"]",
          "4392:     mock_cancel_order.assert_has_calls(calls, any_order=True)",
          "4393:     assert mock_cancel_order.call_count == expected_count",
          "",
          "[Removed Lines]",
          "4390:     calls = [call(order=order, user=AnonymousUser()) for order in orders]",
          "",
          "[Added Lines]",
          "4396:     calls = [call(order=order, user=AnonymousUser(), manager=ANY) for order in orders]",
          "",
          "---------------"
        ],
        "saleor/order/actions.py||saleor/order/actions.py": [
          "File: saleor/order/actions.py -> saleor/order/actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: )",
          "21: from ..payment.models import Payment, Transaction",
          "22: from ..payment.utils import create_payment",
          "24: from ..warehouse.management import (",
          "25:     deallocate_stock,",
          "26:     deallocate_stock_for_order,",
          "",
          "[Removed Lines]",
          "23: from ..plugins.manager import PluginsManager, get_plugins_manager",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: )",
          "61: if TYPE_CHECKING:",
          "62:     from ..warehouse.models import Warehouse",
          "64: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     from ..plugins.manager import PluginsManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: QuantityType = int",
          "72:     events.order_created_event(order=order, user=user, from_draft=from_draft)",
          "74:     manager.order_created(order)",
          "75:     payment = order.get_last_payment()",
          "76:     if payment:",
          "77:         if order.is_captured():",
          "78:             order_captured(",
          "80:             )",
          "81:         elif order.is_pre_authorized():",
          "82:             order_authorized(",
          "84:             )",
          "85:     site_settings = Site.objects.get_current().settings",
          "86:     if site_settings.automatically_confirm_all_new_orders:",
          "90: def order_confirmed(",
          "92: ):",
          "93:     \"\"\"Order confirmed.",
          "95:     Trigger event, plugin hooks and optionally confirmation email.",
          "96:     \"\"\"",
          "97:     events.order_confirmed_event(order=order, user=user)",
          "99:     manager.order_confirmed(order)",
          "100:     if send_confirmation_email:",
          "101:         send_order_confirmed.delay(order.pk, user.pk)",
          "105:     events.order_fully_paid_event(order=order, user=user)",
          "107:     if order.get_customer_email():",
          "",
          "[Removed Lines]",
          "71: def order_created(order: \"Order\", user: \"User\", from_draft: bool = False):",
          "73:     manager = get_plugins_manager()",
          "79:                 order=order, user=user, amount=payment.total, payment=payment",
          "83:                 order=order, user=user, amount=payment.total, payment=payment",
          "87:         order_confirmed(order, user)",
          "91:     order: \"Order\", user: \"User\", send_confirmation_email: bool = False",
          "98:     manager = get_plugins_manager()",
          "104: def handle_fully_paid_order(order: \"Order\", user: Optional[\"User\"] = None):",
          "",
          "[Added Lines]",
          "71: def order_created(",
          "72:     order: \"Order\", user: \"User\", manager: \"PluginsManager\", from_draft: bool = False",
          "73: ):",
          "80:                 order=order,",
          "81:                 user=user,",
          "82:                 amount=payment.total,",
          "83:                 payment=payment,",
          "84:                 manager=manager,",
          "88:                 order=order,",
          "89:                 user=user,",
          "90:                 amount=payment.total,",
          "91:                 payment=payment,",
          "92:                 manager=manager,",
          "96:         order_confirmed(order, user, manager)",
          "100:     order: \"Order\",",
          "101:     user: \"User\",",
          "102:     manager: \"PluginsManager\",",
          "103:     send_confirmation_email: bool = False,",
          "115: def handle_fully_paid_order(",
          "116:     manager: \"PluginsManager\", order: \"Order\", user: Optional[\"User\"] = None",
          "117: ):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:     except Exception:",
          "118:         # Analytics failing should not abort the checkout flow",
          "119:         logger.exception(\"Recording order in analytics failed\")",
          "121:     manager.order_fully_paid(order)",
          "122:     manager.order_updated(order)",
          "125: @transaction.atomic",
          "127:     \"\"\"Cancel order.",
          "129:     Release allocation of unfulfilled order items.",
          "",
          "[Removed Lines]",
          "120:     manager = get_plugins_manager()",
          "126: def cancel_order(order: \"Order\", user: Optional[\"User\"]):",
          "",
          "[Added Lines]",
          "138: def cancel_order(order: \"Order\", user: Optional[\"User\"], manager: \"PluginsManager\"):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     order.status = OrderStatus.CANCELED",
          "136:     order.save(update_fields=[\"status\"])",
          "139:     manager.order_cancelled(order)",
          "140:     manager.order_updated(order)",
          "",
          "[Removed Lines]",
          "138:     manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:     user: Optional[\"User\"],",
          "148:     amount: \"Decimal\",",
          "149:     payment: \"Payment\",",
          "151: ):",
          "152:     events.payment_refunded_event(",
          "153:         order=order, user=user, amount=amount, payment=payment",
          "154:     )",
          "157:     manager.order_updated(order)",
          "159:     send_order_refunded_confirmation(order, user, amount, payment.currency)",
          "163:     events.payment_voided_event(order=order, user=user, payment=payment)",
          "167: def order_returned(",
          "",
          "[Removed Lines]",
          "150:     manager: Optional[\"PluginsManager\"] = None,",
          "155:     if not manager:",
          "156:         manager = get_plugins_manager()",
          "162: def order_voided(order: \"Order\", user: \"User\", payment: \"Payment\"):",
          "164:     get_plugins_manager().order_updated(order)",
          "",
          "[Added Lines]",
          "161:     manager: \"PluginsManager\",",
          "171: def order_voided(",
          "172:     order: \"Order\", user: \"User\", payment: \"Payment\", manager: \"PluginsManager\"",
          "173: ):",
          "175:     manager.order_updated(order)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "180:     fulfillments: List[\"Fulfillment\"],",
          "181:     user: \"User\",",
          "182:     fulfillment_lines: List[\"FulfillmentLine\"],",
          "183:     notify_customer=True,",
          "184: ):",
          "185:     order = fulfillments[0].order",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:     manager: \"PluginsManager\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "187:     events.fulfillment_fulfilled_items_event(",
          "188:         order=order, user=user, fulfillment_lines=fulfillment_lines",
          "189:     )",
          "191:     manager.order_updated(order)",
          "193:     for fulfillment in fulfillments:",
          "",
          "[Removed Lines]",
          "190:     manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201:             send_fulfillment_confirmation_to_customer(order, fulfillment, user)",
          "205:     recalculate_order(order)",
          "209: def order_authorized(",
          "211: ):",
          "212:     events.payment_authorized_event(",
          "213:         order=order, user=user, amount=amount, payment=payment",
          "214:     )",
          "218: def order_captured(",
          "220: ):",
          "221:     events.payment_captured_event(",
          "222:         order=order, user=user, amount=amount, payment=payment",
          "223:     )",
          "225:     if order.is_fully_paid():",
          "229: def fulfillment_tracking_updated(",
          "231: ):",
          "232:     events.fulfillment_tracking_updated_event(",
          "233:         order=fulfillment.order,",
          "",
          "[Removed Lines]",
          "204: def order_shipping_updated(order: \"Order\"):",
          "206:     get_plugins_manager().order_updated(order)",
          "210:     order: \"Order\", user: Optional[\"User\"], amount: \"Decimal\", payment: \"Payment\"",
          "215:     get_plugins_manager().order_updated(order)",
          "219:     order: \"Order\", user: Optional[\"User\"], amount: \"Decimal\", payment: \"Payment\"",
          "224:     get_plugins_manager().order_updated(order)",
          "226:         handle_fully_paid_order(order, user)",
          "230:     fulfillment: \"Fulfillment\", user: \"User\", tracking_number: str",
          "",
          "[Added Lines]",
          "215: def order_shipping_updated(order: \"Order\", manager: \"PluginsManager\"):",
          "217:     manager.order_updated(order)",
          "221:     order: \"Order\",",
          "222:     user: Optional[\"User\"],",
          "223:     amount: \"Decimal\",",
          "224:     payment: \"Payment\",",
          "225:     manager: \"PluginsManager\",",
          "230:     manager.order_updated(order)",
          "234:     order: \"Order\",",
          "235:     user: Optional[\"User\"],",
          "236:     amount: \"Decimal\",",
          "237:     payment: \"Payment\",",
          "238:     manager: \"PluginsManager\",",
          "243:     manager.order_updated(order)",
          "245:         handle_fully_paid_order(manager, order, user)",
          "249:     fulfillment: \"Fulfillment\",",
          "250:     user: \"User\",",
          "251:     tracking_number: str,",
          "252:     manager: \"PluginsManager\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "235:         tracking_number=tracking_number,",
          "236:         fulfillment=fulfillment,",
          "237:     )",
          "241: @transaction.atomic",
          "242: def cancel_fulfillment(",
          "244: ):",
          "245:     \"\"\"Cancel fulfillment.",
          "",
          "[Removed Lines]",
          "238:     get_plugins_manager().order_updated(fulfillment.order)",
          "243:     fulfillment: \"Fulfillment\", user: \"User\", warehouse: \"Warehouse\"",
          "",
          "[Added Lines]",
          "260:     manager.order_updated(fulfillment.order)",
          "265:     fulfillment: \"Fulfillment\",",
          "266:     user: \"User\",",
          "267:     warehouse: \"Warehouse\",",
          "268:     manager: \"PluginsManager\",",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "260:     fulfillment.status = FulfillmentStatus.CANCELED",
          "261:     fulfillment.save(update_fields=[\"status\"])",
          "262:     update_order_status(fulfillment.order)",
          "266: @transaction.atomic",
          "267: def mark_order_as_paid(",
          "269: ):",
          "270:     \"\"\"Mark order as paid.",
          "",
          "[Removed Lines]",
          "263:     get_plugins_manager().order_updated(fulfillment.order)",
          "268:     order: \"Order\", request_user: \"User\", external_reference: Optional[str] = None",
          "",
          "[Added Lines]",
          "288:     manager.order_updated(fulfillment.order)",
          "293:     order: \"Order\",",
          "294:     request_user: \"User\",",
          "295:     manager: \"PluginsManager\",",
          "296:     external_reference: Optional[str] = None,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "299:     events.order_manually_marked_as_paid_event(",
          "300:         order=order, user=request_user, transaction_reference=external_reference",
          "301:     )",
          "303:     manager.order_fully_paid(order)",
          "304:     manager.order_updated(order)",
          "",
          "[Removed Lines]",
          "302:     manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "460:     requester: \"User\",",
          "461:     order: \"Order\",",
          "462:     fulfillment_lines_for_warehouses: Dict,",
          "463:     notify_customer: bool = True,",
          "464: ) -> List[Fulfillment]:",
          "465:     \"\"\"Fulfill order.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490:     manager: \"PluginsManager\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:                         ...",
          "482:                     ]",
          "483:                 }",
          "484:         notify_customer (bool): If `True` system send email about",
          "485:             fulfillments to customer.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:         manager (PluginsManager): Base manager for handling plugins logic.",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "512:             fulfillments,",
          "513:             requester,",
          "514:             fulfillment_lines,",
          "515:             notify_customer,",
          "516:         )",
          "517:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "544:             manager,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "977:     payment: Optional[Payment],",
          "978:     order_lines: List[OrderLineData],",
          "979:     fulfillment_lines: List[FulfillmentLineData],",
          "981:     refund: bool = False,",
          "982:     amount: Optional[Decimal] = None,",
          "983:     refund_shipping_costs=False,",
          "",
          "[Removed Lines]",
          "980:     plugin_manager: PluginsManager,",
          "",
          "[Added Lines]",
          "1010:     plugin_manager: \"PluginsManager\",",
          "",
          "---------------"
        ],
        "saleor/order/tests/test_fulfullments_actions.py||saleor/order/tests/test_fulfullments_actions.py": [
          "File: saleor/order/tests/test_fulfullments_actions.py -> saleor/order/tests/test_fulfullments_actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "5: from ...core.exceptions import InsufficientStock",
          "6: from ...tests.utils import flush_post_commit_hooks",
          "7: from ...warehouse.models import Allocation, Stock",
          "8: from ..actions import create_fulfillments",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: from ...plugins.manager import get_plugins_manager",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     }",
          "28:     [fulfillment] = create_fulfillments(",
          "30:     )",
          "31:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "29:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "30:         staff_user, order, fulfillment_lines_for_warehouses, get_plugins_manager(), True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     }",
          "77:     [fulfillment] = create_fulfillments(",
          "79:     )",
          "80:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "78:         staff_user, order, fulfillment_lines_for_warehouses, False",
          "",
          "[Added Lines]",
          "79:         staff_user,",
          "80:         order,",
          "81:         fulfillment_lines_for_warehouses,",
          "82:         get_plugins_manager(),",
          "83:         False,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     }",
          "135:     [fulfillment1, fulfillment2] = create_fulfillments(",
          "137:     )",
          "138:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "136:         staff_user, order, fulfillment_lines_for_warehouses, False",
          "",
          "[Added Lines]",
          "141:         staff_user,",
          "142:         order,",
          "143:         fulfillment_lines_for_warehouses,",
          "144:         get_plugins_manager(),",
          "145:         False,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:     }",
          "183:     [fulfillment] = create_fulfillments(",
          "185:     )",
          "186:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "184:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "193:         staff_user, order, fulfillment_lines_for_warehouses, get_plugins_manager(), True",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "227:     }",
          "229:     [fulfillment] = create_fulfillments(",
          "231:     )",
          "232:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "230:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "239:         staff_user, order, fulfillment_lines_for_warehouses, get_plugins_manager(), True",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "270:     }",
          "272:     [fulfillment] = create_fulfillments(",
          "274:     )",
          "275:     flush_post_commit_hooks()",
          "",
          "[Removed Lines]",
          "273:         staff_user, order, fulfillment_lines_for_warehouses, True",
          "",
          "[Added Lines]",
          "282:         staff_user, order, fulfillment_lines_for_warehouses, get_plugins_manager(), True",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "319:     }",
          "321:     with pytest.raises(InsufficientStock) as exc:",
          "324:     assert len(exc.value.items) == 2",
          "325:     assert {item.variant for item in exc.value.items} == {",
          "",
          "[Removed Lines]",
          "322:         create_fulfillments(staff_user, order, fulfillment_lines_for_warehouses, True)",
          "",
          "[Added Lines]",
          "331:         create_fulfillments(",
          "332:             staff_user,",
          "333:             order,",
          "334:             fulfillment_lines_for_warehouses,",
          "335:             get_plugins_manager(),",
          "336:             True,",
          "337:         )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "365:     }",
          "367:     with pytest.raises(InsufficientStock) as exc:",
          "370:     assert len(exc.value.items) == 1",
          "371:     assert exc.value.items[0].variant == order_line.variant",
          "",
          "[Removed Lines]",
          "368:         create_fulfillments(staff_user, order, fulfillment_lines_for_warehouses, True)",
          "",
          "[Added Lines]",
          "383:         create_fulfillments(",
          "384:             staff_user,",
          "385:             order,",
          "386:             fulfillment_lines_for_warehouses,",
          "387:             get_plugins_manager(),",
          "388:             True,",
          "389:         )",
          "",
          "---------------"
        ],
        "saleor/order/tests/test_order_actions.py||saleor/order/tests/test_order_actions.py": [
          "File: saleor/order/tests/test_order_actions.py -> saleor/order/tests/test_order_actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     order = order_with_digital_line",
          "75:     order.redirect_url = redirect_url",
          "76:     order.save()",
          "79:     fulfillment = order.fulfillments.first()",
          "",
          "[Removed Lines]",
          "77:     handle_fully_paid_order(order)",
          "",
          "[Added Lines]",
          "77:     manager = get_plugins_manager()",
          "78:     handle_fully_paid_order(manager, order)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: @patch(\"saleor.order.emails.send_payment_confirmation.delay\")",
          "110: def test_handle_fully_paid_order(mock_send_payment_confirmation, order):",
          "112:     event_order_paid, event_email_sent = order.events.all()",
          "113:     assert event_order_paid.type == OrderEvents.ORDER_FULLY_PAID",
          "",
          "[Removed Lines]",
          "111:     handle_fully_paid_order(order)",
          "",
          "[Added Lines]",
          "112:     manager = get_plugins_manager()",
          "113:     handle_fully_paid_order(manager, order)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125: def test_handle_fully_paid_order_no_email(mock_send_payment_confirmation, order):",
          "126:     order.user = None",
          "127:     order.user_email = \"\"",
          "130:     event = order.events.get()",
          "131:     assert event.type == OrderEvents.ORDER_FULLY_PAID",
          "132:     assert not mock_send_payment_confirmation.called",
          "135: def test_mark_as_paid(admin_user, draft_order):",
          "137:     payment = draft_order.payments.last()",
          "138:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "139:     assert payment.captured_amount == draft_order.total.gross.amount",
          "",
          "[Removed Lines]",
          "129:     handle_fully_paid_order(order)",
          "136:     mark_order_as_paid(draft_order, admin_user)",
          "",
          "[Added Lines]",
          "130:     manager = get_plugins_manager()",
          "132:     handle_fully_paid_order(manager, order)",
          "139:     manager = get_plugins_manager()",
          "140:     mark_order_as_paid(draft_order, admin_user, manager)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146: def test_mark_as_paid_with_external_reference(admin_user, draft_order):",
          "147:     external_reference = \"transaction_id\"",
          "149:     payment = draft_order.payments.last()",
          "150:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "151:     assert payment.captured_amount == draft_order.total.gross.amount",
          "",
          "[Removed Lines]",
          "148:     mark_order_as_paid(draft_order, admin_user, external_reference=external_reference)",
          "",
          "[Added Lines]",
          "152:     manager = get_plugins_manager()",
          "153:     mark_order_as_paid(",
          "154:         draft_order, admin_user, manager, external_reference=external_reference",
          "155:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "161:     draft_order.billing_address = None",
          "162:     draft_order.save()",
          "164:     with pytest.raises(Exception):",
          "168: def test_clean_mark_order_as_paid(payment_txn_preauth):",
          "",
          "[Removed Lines]",
          "165:         mark_order_as_paid(draft_order, admin_user)",
          "",
          "[Added Lines]",
          "171:     manager = get_plugins_manager()",
          "173:         mark_order_as_paid(draft_order, admin_user, manager)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:     fulfillment = fulfilled_order.fulfillments.first()",
          "176:     line_1, line_2 = fulfillment.lines.all()",
          "180:     fulfillment.refresh_from_db()",
          "181:     fulfilled_order.refresh_from_db()",
          "",
          "[Removed Lines]",
          "178:     cancel_fulfillment(fulfillment, None, warehouse)",
          "",
          "[Added Lines]",
          "186:     cancel_fulfillment(fulfillment, None, warehouse, get_plugins_manager())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "193:     stock = line.order_line.variant.stocks.get()",
          "194:     stock_quantity_before = stock.quantity",
          "198:     fulfillment.refresh_from_db()",
          "199:     line.refresh_from_db()",
          "",
          "[Removed Lines]",
          "196:     cancel_fulfillment(fulfillment, None, warehouse)",
          "",
          "[Added Lines]",
          "204:     cancel_fulfillment(fulfillment, None, warehouse, get_plugins_manager())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211: ):",
          "212:     # given",
          "213:     order = fulfilled_order_with_all_cancelled_fulfillments",
          "215:     assert Allocation.objects.filter(",
          "216:         order_line__order=order, quantity_allocated__gt=0",
          "217:     ).exists()",
          "219:     # when",
          "222:     # then",
          "223:     order_event = order.events.last()",
          "",
          "[Removed Lines]",
          "220:     cancel_order(order, None)",
          "",
          "[Added Lines]",
          "222:     manager = get_plugins_manager()",
          "229:     cancel_order(order, None, manager)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:         value=to_adyen_price(payment.total, payment.currency),",
          "303:     )",
          "304:     config = adyen_plugin().config",
          "308:     payment.order.refresh_from_db()",
          "309:     assert payment.transactions.count() == 2",
          "",
          "[Removed Lines]",
          "306:     handle_cancellation(notification, config)",
          "",
          "[Added Lines]",
          "305:     manager = get_plugins_manager()",
          "307:     handle_cancellation(notification, config, manager)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:     transaction_count = payment.transactions.count()",
          "333:     caplog.set_level(logging.WARNING)",
          "337:     payment.order.refresh_from_db()",
          "338:     assert payment.transactions.count() == transaction_count",
          "",
          "[Removed Lines]",
          "335:     handle_cancellation(notification, config)",
          "",
          "[Added Lines]",
          "335:     manager = get_plugins_manager()",
          "337:     handle_cancellation(notification, config, manager)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354:     )",
          "355:     config = adyen_plugin().config",
          "356:     create_new_transaction(notification, payment, TransactionKind.CANCEL)",
          "360:     assert payment.transactions.count() == 2",
          "",
          "[Removed Lines]",
          "358:     handle_cancellation(notification, config)",
          "",
          "[Added Lines]",
          "359:     manager = get_plugins_manager()",
          "361:     handle_cancellation(notification, config, manager)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "672:     assert payment.captured_amount == Decimal(\"0.00\")",
          "674:     mock_order_refunded.assert_called_once_with(",
          "676:     )",
          "677:     external_events = payment.order.events.filter(",
          "678:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "",
          "[Removed Lines]",
          "675:         payment.order, None, transaction.amount, payment",
          "",
          "[Added Lines]",
          "678:         payment.order, None, transaction.amount, payment, mock.ANY",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "970:     handle_cancel_or_refund(notification, config)",
          "975: def test_handle_cancel_or_refund_action_cancel_invalid_payment_id(",
          "",
          "[Removed Lines]",
          "972:     mock_handle_cancellation.assert_called_once_with(notification, config)",
          "",
          "[Added Lines]",
          "975:     mock_handle_cancellation.assert_called_once_with(notification, config, mock.ANY)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import json",
          "6: import logging",
          "7: from json.decoder import JSONDecodeError",
          "9: from urllib.parse import urlencode, urlparse",
          "11: import Adyen",
          "",
          "[Removed Lines]",
          "8: from typing import Any, Callable, Dict, Optional",
          "",
          "[Added Lines]",
          "8: from typing import TYPE_CHECKING, Any, Callable, Dict, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: logger = logging.getLogger(__name__)",
          "51: def get_payment(",
          "52:     payment_id: Optional[str],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: if TYPE_CHECKING:",
          "51:     from ....plugins.manager import PluginsManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:         return",
          "211:     checkout = get_checkout(payment)",
          "213:     adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "214:     kind = TransactionKind.AUTH",
          "215:     if adyen_auto_capture:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     manager = get_plugins_manager()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "232:             if new_transaction.is_success:",
          "233:                 gateway_postprocess(new_transaction, payment)",
          "234:                 if adyen_auto_capture:",
          "236:                 else:",
          "237:                     order_authorized(",
          "239:                     )",
          "240:     reason = notification.get(\"reason\", \"-\")",
          "241:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "",
          "[Removed Lines]",
          "235:                     order_captured(payment.order, None, new_transaction.amount, payment)",
          "238:                         payment.order, None, new_transaction.amount, payment",
          "",
          "[Added Lines]",
          "239:                     order_captured(",
          "240:                         payment.order, None, new_transaction.amount, payment, manager",
          "241:                     )",
          "244:                         payment.order, None, new_transaction.amount, payment, manager",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "250:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "251:     transaction_id = notification.get(\"pspReference\")",
          "252:     payment = get_payment(",
          "",
          "[Removed Lines]",
          "249: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Added Lines]",
          "255: def handle_cancellation(",
          "256:     notification: Dict[str, Any],",
          "257:     _gateway_config: GatewayConfig,",
          "258:     manager: \"PluginsManager\",",
          "259: ):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273:         payment, success_msg, failed_msg, new_transaction.is_success",
          "274:     )",
          "275:     if payment.order and new_transaction.is_success:",
          "279: def handle_cancel_or_refund(",
          "",
          "[Removed Lines]",
          "276:         cancel_order(payment.order, None)",
          "",
          "[Added Lines]",
          "286:         cancel_order(payment.order, None, manager)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "281: ):",
          "282:     # https://docs.adyen.com/checkout/cancel-or-refund#cancel-or-refund-notification",
          "283:     additional_data = notification.get(\"additionalData\")",
          "284:     if not additional_data:",
          "285:         return",
          "286:     action = additional_data.get(\"modification.action\")",
          "287:     if action == \"refund\":",
          "288:         handle_refund(notification, gateway_config)",
          "289:     elif action == \"cancel\":",
          "293: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "290:         handle_cancellation(notification, gateway_config)",
          "",
          "[Added Lines]",
          "294:     manager = get_plugins_manager()",
          "301:         handle_cancellation(notification, gateway_config, manager)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "298:         return",
          "299:     checkout = get_checkout(payment)",
          "301:     if not payment.order:",
          "302:         handle_not_created_order(",
          "303:             notification, payment, checkout, TransactionKind.CAPTURE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     manager = get_plugins_manager()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "313:         )",
          "314:         if new_transaction.is_success and not capture_transaction:",
          "315:             gateway_postprocess(new_transaction, payment)",
          "318:     reason = notification.get(\"reason\", \"-\")",
          "319:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "",
          "[Removed Lines]",
          "316:             order_captured(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Added Lines]",
          "328:             order_captured(",
          "329:                 payment.order, None, new_transaction.amount, payment, manager",
          "330:             )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "393:         payment, success_msg, failed_msg, new_transaction.is_success",
          "394:     )",
          "395:     if payment.order and new_transaction.is_success:",
          "399: def _get_kind(transaction: Optional[Transaction]) -> str:",
          "",
          "[Removed Lines]",
          "396:         order_refunded(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Added Lines]",
          "410:         order_refunded(",
          "411:             payment.order, None, new_transaction.amount, payment, get_plugins_manager()",
          "412:         )",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "642:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
          "643:     if event_handler:",
          "645:         return HttpResponse(\"[accepted]\")",
          "646:     return HttpResponse(\"[accepted]\")",
          "",
          "[Removed Lines]",
          "644:         event_handler(notification, gateway_config)",
          "",
          "[Added Lines]",
          "660:         event_handler(notification, gateway_config)  # type: ignore",
          "",
          "---------------"
        ],
        "saleor/tests/fixtures.py||saleor/tests/fixtures.py": [
          "File: saleor/tests/fixtures.py -> saleor/tests/fixtures.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: from ..payment import ChargeStatus, TransactionKind",
          "67: from ..payment.interface import GatewayConfig, PaymentData",
          "68: from ..payment.models import Payment",
          "69: from ..plugins.models import PluginConfiguration",
          "70: from ..plugins.vatlayer.plugin import VatlayerPlugin",
          "71: from ..product import ProductMediaTypes",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: from ..plugins.manager import get_plugins_manager",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2607:     fulfilled_order, staff_user, warehouse",
          "2608: ):",
          "2609:     fulfillment = fulfilled_order.fulfillments.get()",
          "2611:     return fulfilled_order",
          "",
          "[Removed Lines]",
          "2610:     cancel_fulfillment(fulfillment, staff_user, warehouse)",
          "",
          "[Added Lines]",
          "2611:     cancel_fulfillment(fulfillment, staff_user, warehouse, get_plugins_manager())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad99950b0e974959aea0e54541463815c9c3778e",
      "candidate_info": {
        "commit_hash": "ad99950b0e974959aea0e54541463815c9c3778e",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/ad99950b0e974959aea0e54541463815c9c3778e",
        "files": [
          "saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_order.py",
          "saleor/order/actions.py",
          "saleor/order/events.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/cassettes/test_confirm_payment.yaml",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py"
        ],
        "message": "Add tests for webhooks, fix not working parts of code",
        "before_after_code_files": [
          "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py",
          "saleor/order/actions.py||saleor/order/actions.py",
          "saleor/order/events.py||saleor/order/events.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/order/events.py||saleor/order/events.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py": [
          "File: saleor/graphql/order/mutations/orders.py -> saleor/graphql/order/mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:         # asynchronous webhook with update status",
          "395:         if transaction.kind == TransactionKind.CAPTURE:",
          "396:             order_captured(order, info.context.user, amount, payment)",
          "399:         return OrderCapture(order=order)",
          "",
          "[Removed Lines]",
          "397:         if order.is_fully_paid():",
          "398:             handle_fully_paid_order(order)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py": [
          "File: saleor/graphql/order/tests/test_order.py -> saleor/graphql/order/tests/test_order.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:     }",
          "1589:     assert event_order_fully_paid.type == order_events.OrderEvents.ORDER_FULLY_PAID",
          "1593:     assert event_email_sent.parameters == {",
          "1594:         \"email\": order.user_email,",
          "1595:         \"email_type\": order_events.OrderEventsEmails.PAYMENT,",
          "",
          "[Removed Lines]",
          "1590:     assert event_order_fully_paid.user is None",
          "1592:     assert event_email_sent.user is None",
          "",
          "[Added Lines]",
          "1590:     assert event_order_fully_paid.user == staff_user",
          "1592:     assert event_email_sent.user == staff_user",
          "",
          "---------------"
        ],
        "saleor/order/actions.py||saleor/order/actions.py": [
          "File: saleor/order/actions.py -> saleor/order/actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             order_authorized(",
          "44:                 order=order, user=user, amount=payment.total, payment=payment",
          "45:             )",
          "51:     events.order_fully_paid_event(order=order, user=user)",
          "53:     if order.get_customer_email():",
          "",
          "[Removed Lines]",
          "46:         if order.is_fully_paid():",
          "47:             handle_fully_paid_order(order=order, user=user)",
          "50: def handle_fully_paid_order(order: \"Order\", user: \"User\" = None):",
          "",
          "[Added Lines]",
          "48: def handle_fully_paid_order(order: \"Order\", user: Optional[\"User\"] = None):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         order=order, user=user, amount=amount, payment=payment",
          "147:     )",
          "148:     get_plugins_manager().order_updated(order)",
          "151: def fulfillment_tracking_updated(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     if order.is_fully_paid():",
          "148:         handle_fully_paid_order(order, user)",
          "",
          "---------------"
        ],
        "saleor/order/events.py||saleor/order/events.py": [
          "File: saleor/order/events.py -> saleor/order/events.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     parameters = {\"message\": message}",
          "270:     if payment:",
          "273:     return OrderEvent.objects.create(",
          "274:         order=order,",
          "",
          "[Removed Lines]",
          "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
          "",
          "[Added Lines]",
          "271:         parameters.update({\"plugin\": payment.gateway, \"payment_id\": payment.token})",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         \"Live\": {",
          "99:             \"type\": ConfigurationTypeField.STRING,",
          "100:             \"help_text\": (",
          "102:                 \" Adyen API you should submit HTTP POST requests to corresponding \"",
          "103:                 \"endpoints. These endpoints differ for test and live accounts, and also\"",
          "104:                 \" depend on the data format (SOAP, JSON, or FORM) you use to submit \"",
          "",
          "[Removed Lines]",
          "101:                 \"Live it blank when you want to use test env. To communicate with the\"",
          "",
          "[Added Lines]",
          "101:                 \"Leave it blank when you want to use test env. To communicate with the\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:             error=\"\",",
          "363:             raw_response=result.message,",
          "364:         )",
          "",
          "[Removed Lines]",
          "366:     def void_payment(",
          "367:         self, payment_information: \"PaymentData\", previous_value",
          "368:     ) -> \"GatewayResponse\":",
          "370:         pass",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from decimal import Decimal",
          "3: import pytest",
          "5: from .....plugins.manager import get_plugins_manager",
          "6: from ....utils import create_payment",
          "7: from ..plugin import AdyenGatewayPlugin",
          "10: @pytest.fixture",
          "11: def adyen_plugin(settings):",
          "12:     def fun(",
          "13:         api_key=None,",
          "14:         merchant_account=None,",
          "15:         return_url=None,",
          "16:         origin_key=None,",
          "17:         origin_url=None,",
          "18:         auto_capture=None,",
          "19:     ):",
          "20:         api_key = api_key or \"test_key\"",
          "21:         merchant_account = merchant_account or \"SaleorECOM\"",
          "22:         return_url = return_url or \"http://127.0.0.1:3000/\"",
          "23:         origin_key = origin_key or \"test_origin_key\"",
          "24:         origin_url = origin_url or \"http://127.0.0.1:3000\"",
          "25:         auto_capture = auto_capture or False",
          "26:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "27:         manager = get_plugins_manager()",
          "28:         manager.save_plugin_configuration(",
          "29:             AdyenGatewayPlugin.PLUGIN_ID,",
          "30:             {",
          "31:                 \"active\": True,",
          "32:                 \"configuration\": [",
          "33:                     {\"name\": \"API key\", \"value\": api_key},",
          "34:                     {\"name\": \"Merchant Account\", \"value\": merchant_account},",
          "35:                     {\"name\": \"Return Url\", \"value\": return_url},",
          "36:                     {\"name\": \"Origin Key\", \"value\": origin_key},",
          "37:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "38:                     {",
          "39:                         \"name\": \"Automatically mark payment as a capture\",",
          "40:                         \"value\": auto_capture,",
          "41:                     },",
          "42:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "43:                 ],",
          "44:             },",
          "45:         )",
          "47:         manager = get_plugins_manager()",
          "48:         return manager.plugins[0]",
          "50:     return fun",
          "53: @pytest.fixture",
          "54: def payment_adyen_for_checkout(checkout_with_items, address):",
          "55:     checkout_with_items.billing_address = address",
          "56:     checkout_with_items.save()",
          "57:     payment = create_payment(",
          "58:         gateway=AdyenGatewayPlugin.PLUGIN_ID,",
          "59:         payment_token=\"\",",
          "60:         total=Decimal(\"1234\"),",
          "61:         currency=checkout_with_items.currency,",
          "62:         email=checkout_with_items.email,",
          "63:         customer_ip_address=\"\",",
          "64:         checkout=checkout_with_items,",
          "65:     )",
          "66:     return payment",
          "69: @pytest.fixture",
          "70: def payment_adyen_for_order(payment_adyen_for_checkout, order_with_lines):",
          "71:     payment_adyen_for_checkout.checkout = None",
          "72:     payment_adyen_for_checkout.order = order_with_lines",
          "73:     payment_adyen_for_checkout.save()",
          "74:     return payment_adyen_for_checkout",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: from decimal import Decimal",
          "20: import pytest",
          "23: from .... import TransactionKind",
          "24: from ....interface import GatewayResponse",
          "74: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "4: # settings.PLUGINS = [\"saleor.plugins.avatax.plugin.AvataxPlugin\"]",
          "5: #     manager = get_plugins_manager()",
          "6: #     manager.save_plugin_configuration(",
          "7: #         AvataxPlugin.PLUGIN_ID,",
          "8: #         {",
          "9: #             \"configuration\": [",
          "10: #                 {\"name\": \"Username or account\", \"value\": \"test\"},",
          "11: #                 {\"name\": \"Password or license\", \"value\": \"test\"},",
          "12: #             ],",
          "13: #         },",
          "14: #     )",
          "15: #     manager.save_plugin_configuration(AvataxPlugin.PLUGIN_ID, {\"active\": True})",
          "16: #     plugin_configuration = PluginConfiguration.objects.get(",
          "17: #         identifier=AvataxPlugin.PLUGIN_ID",
          "18: #     )",
          "19: #     assert plugin_configuration.active",
          "22: from .....plugins.manager import get_plugins_manager",
          "25: from ....utils import create_payment, create_payment_information, create_transaction",
          "26: from ..plugin import AdyenGatewayPlugin",
          "29: @pytest.fixture",
          "30: def adyen_plugin(settings):",
          "31:     def fun(",
          "32:         api_key=None,",
          "33:         merchant_account=None,",
          "34:         return_url=None,",
          "35:         origin_key=None,",
          "36:         origin_url=None,",
          "37:         auto_capture=None,",
          "38:     ):",
          "39:         api_key = api_key or \"test_key\"",
          "40:         merchant_account = merchant_account or \"SaleorECOM\"  # \"test_merchant\"",
          "41:         return_url = return_url or \"http://127.0.0.1:3000/\"  # \"test_return_url\"",
          "42:         origin_key = (",
          "43:             origin_key or \"test_origin_key\"",
          "44:         )  # \"pub.v2.8015947108133280.aHR0cDovLzEyNy4wLjAuMTozMDAw.F13B5vHDsUw4vWEkRTUMUfICGgkS_Vdu4EbpiqZY6OU\"",
          "45:         origin_url = origin_url or \"http://127.0.0.1:3000\"  # \"test_origin_url\"",
          "46:         auto_capture = auto_capture or False",
          "47:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "48:         manager = get_plugins_manager()",
          "49:         manager.save_plugin_configuration(",
          "50:             AdyenGatewayPlugin.PLUGIN_ID,",
          "51:             {",
          "52:                 \"active\": True,",
          "53:                 \"configuration\": [",
          "54:                     {\"name\": \"API key\", \"value\": api_key},",
          "55:                     {\"name\": \"Merchant Account\", \"value\": merchant_account},",
          "56:                     {\"name\": \"Return Url\", \"value\": return_url},",
          "57:                     {\"name\": \"Origin Key\", \"value\": origin_key},",
          "58:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "59:                     {",
          "60:                         \"name\": \"Automatically mark payment as a capture\",",
          "61:                         \"value\": auto_capture,",
          "62:                     },",
          "63:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "64:                 ],",
          "65:             },",
          "66:         )",
          "68:         manager = get_plugins_manager()",
          "69:         return manager.plugins[0]",
          "71:     return fun",
          "",
          "[Added Lines]",
          "8: from ....utils import create_payment_information, create_transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     assert isinstance(config, list)",
          "121: @pytest.mark.vcr",
          "122: def test_process_payment(payment_adyen_for_checkout, checkout_with_items, adyen_plugin):",
          "123:     payment_info = create_payment_information(",
          "",
          "[Removed Lines]",
          "97: @pytest.fixture",
          "98: def payment_adyen_for_checkout(checkout_with_items, address):",
          "99:     checkout_with_items.billing_address = address",
          "100:     checkout_with_items.save()",
          "101:     payment = create_payment(",
          "102:         gateway=AdyenGatewayPlugin.PLUGIN_ID,",
          "103:         payment_token=\"\",",
          "104:         total=Decimal(\"1234\"),",
          "105:         currency=checkout_with_items.currency,",
          "106:         email=checkout_with_items.email,",
          "107:         customer_ip_address=\"\",",
          "108:         checkout=checkout_with_items,",
          "109:     )",
          "110:     return payment",
          "113: @pytest.fixture",
          "114: def payment_adyen_for_order(payment_adyen_for_checkout, order_with_lines):",
          "115:     payment_adyen_for_checkout.checkout = None",
          "116:     payment_adyen_for_checkout.order = order_with_lines",
          "117:     payment_adyen_for_checkout.save()",
          "118:     return payment_adyen_for_checkout",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from decimal import Decimal",
          "2: from unittest import mock",
          "4: import graphene",
          "5: import pytest",
          "6: from django.contrib.auth.hashers import make_password",
          "8: from saleor.order import OrderStatus",
          "9: from saleor.payment import ChargeStatus, TransactionKind",
          "11: from ..utils import get_price_amount",
          "12: from ..webhooks import (",
          "13:     create_new_transaction,",
          "14:     handle_authorization,",
          "15:     handle_cancel_or_refund,",
          "16:     handle_cancellation,",
          "17:     handle_capture,",
          "18:     handle_failed_capture,",
          "19:     handle_failed_refund,",
          "20:     handle_pending,",
          "21:     handle_refund,",
          "22:     handle_reversed_refund,",
          "23:     validate_auth_user,",
          "24:     validate_hmac_signature,",
          "25:     webhook_not_implemented,",
          "26: )",
          "29: @pytest.fixture()",
          "30: def notification():",
          "31:     def fun(",
          "32:         event_code=None,",
          "33:         success=None,",
          "34:         psp_reference=None,",
          "35:         merchant_reference=None,",
          "36:         value=None,",
          "37:     ):",
          "38:         event_code = event_code or \"AUTHORISATION\"",
          "39:         success = success or \"true\"",
          "40:         psp_reference = psp_reference or \"852595499936560C\"",
          "41:         merchant_reference = merchant_reference or \"UGF5bWVudDoxNw==\"",
          "42:         value = value or 1130",
          "44:         return {",
          "45:             \"additionalData\": {},",
          "46:             \"eventCode\": event_code,",
          "47:             \"success\": success,",
          "48:             \"eventDate\": \"2019-06-28T18:03:50+01:00\",",
          "49:             \"merchantAccountCode\": \"SaleorECOM\",",
          "50:             \"pspReference\": psp_reference,",
          "51:             \"merchantReference\": merchant_reference,",
          "52:             \"amount\": {\"value\": value, \"currency\": \"USD\"},",
          "53:         }",
          "55:     return fun",
          "58: def test_handle_authorization(notification, adyen_plugin, payment_adyen_for_order):",
          "59:     payment = payment_adyen_for_order",
          "60:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "61:     notification = notification(",
          "62:         merchant_reference=payment_id,",
          "63:         value=get_price_amount(payment.total, payment.currency),",
          "64:     )",
          "65:     config = adyen_plugin().config",
          "66:     handle_authorization(notification, config)",
          "68:     assert payment.transactions.count() == 1",
          "69:     transaction = payment.transactions.get()",
          "70:     assert transaction.is_success is True",
          "71:     assert transaction.kind == TransactionKind.AUTH",
          "74: def test_handle_authorization_with_autocapture(",
          "75:     notification, adyen_plugin, payment_adyen_for_order",
          "76: ):",
          "77:     payment = payment_adyen_for_order",
          "78:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "79:     notification = notification(",
          "80:         merchant_reference=payment_id,",
          "81:         value=get_price_amount(payment.total, payment.currency),",
          "82:     )",
          "83:     config = adyen_plugin().config",
          "84:     config.auto_capture = True",
          "85:     handle_authorization(notification, config)",
          "87:     assert payment.transactions.count() == 0",
          "90: def test_handle_authorization_with_autocapture_and_payment_charged(",
          "91:     notification, adyen_plugin, payment_adyen_for_order",
          "92: ):",
          "93:     payment = payment_adyen_for_order",
          "94:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "95:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "96:     notification = notification(",
          "97:         merchant_reference=payment_id,",
          "98:         value=get_price_amount(payment.total, payment.currency),",
          "99:     )",
          "100:     config = adyen_plugin().config",
          "101:     config.auto_capture = True",
          "102:     handle_authorization(notification, config)",
          "104:     # payment already has a charge status no need to handle auth action",
          "105:     assert payment.transactions.count() == 0",
          "108: def test_handle_cancel(notification, adyen_plugin, payment_adyen_for_order):",
          "109:     payment = payment_adyen_for_order",
          "110:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "111:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "112:     notification = notification(",
          "113:         merchant_reference=payment_id,",
          "114:         value=get_price_amount(payment.total, payment.currency),",
          "115:     )",
          "116:     config = adyen_plugin().config",
          "118:     handle_cancellation(notification, config)",
          "120:     payment.order.refresh_from_db()",
          "121:     assert payment.transactions.count() == 1",
          "122:     transaction = payment.transactions.get()",
          "123:     assert transaction.is_success is True",
          "124:     assert transaction.kind == TransactionKind.CANCEL",
          "126:     assert payment.order.status == OrderStatus.CANCELED",
          "129: def test_handle_cancel_already_canceleld(",
          "130:     notification, adyen_plugin, payment_adyen_for_order",
          "131: ):",
          "132:     payment = payment_adyen_for_order",
          "133:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "134:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "135:     notification = notification(",
          "136:         merchant_reference=payment_id,",
          "137:         value=get_price_amount(payment.total, payment.currency),",
          "138:     )",
          "139:     config = adyen_plugin().config",
          "140:     create_new_transaction(notification, payment, TransactionKind.CANCEL)",
          "142:     handle_cancellation(notification, config)",
          "144:     assert payment.transactions.count() == 1",
          "147: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_captured\")",
          "148: def test_handle_capture(",
          "149:     mocked_captured, notification, adyen_plugin, payment_adyen_for_order",
          "150: ):",
          "151:     payment = payment_adyen_for_order",
          "152:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "153:     notification = notification(",
          "154:         merchant_reference=payment_id,",
          "155:         value=get_price_amount(payment.total, payment.currency),",
          "156:     )",
          "157:     config = adyen_plugin().config",
          "159:     handle_capture(notification, config)",
          "161:     assert payment.transactions.count() == 1",
          "162:     transaction = payment.transactions.get()",
          "163:     assert transaction.is_success is True",
          "164:     assert transaction.kind == TransactionKind.CAPTURE",
          "165:     payment.refresh_from_db()",
          "166:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "167:     mocked_captured.assert_called_once_with(",
          "168:         payment.order, None, transaction.amount, payment",
          "169:     )",
          "172: def test_handle_capture_with_payment_already_charged(",
          "173:     notification, adyen_plugin, payment_adyen_for_order",
          "174: ):",
          "175:     payment = payment_adyen_for_order",
          "176:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "177:     payment.captured_amount = payment.total",
          "178:     payment.save()",
          "179:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "180:     notification = notification(",
          "181:         merchant_reference=payment_id,",
          "182:         value=get_price_amount(payment.total, payment.currency),",
          "183:     )",
          "184:     config = adyen_plugin().config",
          "186:     handle_capture(notification, config)",
          "188:     # Payment is already captured so no need to save capture transaction",
          "189:     assert payment.transactions.count() == 0",
          "192: @pytest.mark.parametrize(",
          "193:     \"charge_status\", [ChargeStatus.NOT_CHARGED, ChargeStatus.FULLY_CHARGED]",
          "194: )",
          "195: def test_handle_failed_capture(",
          "196:     charge_status, notification, adyen_plugin, payment_adyen_for_order",
          "197: ):",
          "198:     payment = payment_adyen_for_order",
          "199:     payment.charge_status = charge_status",
          "200:     payment.captured_amount = payment.total",
          "201:     payment.save()",
          "202:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "203:     notification = notification(",
          "204:         merchant_reference=payment_id,",
          "205:         value=get_price_amount(payment.total, payment.currency),",
          "206:     )",
          "207:     config = adyen_plugin().config",
          "209:     handle_failed_capture(notification, config)",
          "211:     assert payment.transactions.count() == 1",
          "212:     transaction = payment.transactions.get()",
          "213:     assert transaction.is_success is True",
          "214:     assert transaction.kind == TransactionKind.CAPTURE_FAILED",
          "215:     payment.refresh_from_db()",
          "216:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "219: def test_handle_failed_capture_partial_charge(",
          "220:     notification, adyen_plugin, payment_adyen_for_order",
          "221: ):",
          "222:     payment = payment_adyen_for_order",
          "223:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "224:     payment.captured_amount += payment.total * 2",
          "225:     payment.save()",
          "226:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "227:     notification = notification(",
          "228:         merchant_reference=payment_id,",
          "229:         value=get_price_amount(payment.total, payment.currency),",
          "230:     )",
          "231:     config = adyen_plugin().config",
          "233:     handle_failed_capture(notification, config)",
          "235:     assert payment.transactions.count() == 1",
          "236:     transaction = payment.transactions.get()",
          "237:     assert transaction.is_success is True",
          "238:     assert transaction.kind == TransactionKind.CAPTURE_FAILED",
          "239:     payment.refresh_from_db()",
          "240:     assert payment.charge_status == ChargeStatus.PARTIALLY_CHARGED",
          "243: def test_handle_pending(notification, adyen_plugin, payment_adyen_for_order):",
          "244:     payment = payment_adyen_for_order",
          "245:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "246:     notification = notification(",
          "247:         merchant_reference=payment_id,",
          "248:         value=get_price_amount(payment.total, payment.currency),",
          "249:     )",
          "250:     config = adyen_plugin().config",
          "252:     handle_pending(notification, config)",
          "254:     assert payment.transactions.count() == 1",
          "255:     transaction = payment.transactions.get()",
          "256:     assert transaction.is_success is True",
          "257:     assert transaction.kind == TransactionKind.PENDING",
          "258:     payment.refresh_from_db()",
          "259:     assert payment.charge_status == ChargeStatus.PENDING",
          "262: def test_handle_pending_with_autocapture(",
          "263:     notification, adyen_plugin, payment_adyen_for_order",
          "264: ):",
          "265:     payment = payment_adyen_for_order",
          "266:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "267:     notification = notification(",
          "268:         merchant_reference=payment_id,",
          "269:         value=get_price_amount(payment.total, payment.currency),",
          "270:     )",
          "271:     config = adyen_plugin().config",
          "272:     config.auto_capture = True",
          "274:     handle_pending(notification, config)",
          "276:     # in case of autocapture we don't want to store the pending status as all payments",
          "277:     # by default get capture status.",
          "278:     assert payment.transactions.count() == 0",
          "279:     payment.refresh_from_db()",
          "280:     assert payment.charge_status != ChargeStatus.PENDING",
          "283: def test_handle_pending_already_pending(",
          "284:     notification, adyen_plugin, payment_adyen_for_order",
          "285: ):",
          "286:     payment = payment_adyen_for_order",
          "287:     payment.charge_status = ChargeStatus.PENDING",
          "288:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "289:     notification = notification(",
          "290:         merchant_reference=payment_id,",
          "291:         value=get_price_amount(payment.total, payment.currency),",
          "292:     )",
          "293:     config = adyen_plugin().config",
          "294:     create_new_transaction(notification, payment, TransactionKind.PENDING)",
          "296:     handle_pending(notification, config)",
          "298:     assert payment.transactions.count() == 1",
          "301: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "302: def test_handle_refund(",
          "303:     mock_order_refunded, notification, adyen_plugin, payment_adyen_for_order",
          "304: ):",
          "305:     payment = payment_adyen_for_order",
          "306:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "307:     payment.captured_amount = payment.total",
          "308:     payment.save()",
          "309:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "310:     notification = notification(",
          "311:         merchant_reference=payment_id,",
          "312:         value=get_price_amount(payment.total, payment.currency),",
          "313:     )",
          "314:     config = adyen_plugin().config",
          "316:     handle_refund(notification, config)",
          "318:     assert payment.transactions.count() == 1",
          "319:     transaction = payment.transactions.get()",
          "320:     assert transaction.is_success is True",
          "321:     assert transaction.kind == TransactionKind.REFUND",
          "322:     payment.refresh_from_db()",
          "323:     assert payment.charge_status == ChargeStatus.FULLY_REFUNDED",
          "324:     assert payment.captured_amount == Decimal(\"0.00\")",
          "326:     mock_order_refunded.assert_called_once_with(",
          "327:         payment.order, None, transaction.amount, payment",
          "328:     )",
          "331: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "332: def test_handle_refund_already_refunded(",
          "333:     mock_order_refunded, notification, adyen_plugin, payment_adyen_for_order",
          "334: ):",
          "335:     payment = payment_adyen_for_order",
          "336:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "337:     payment.captured_amount = Decimal(\"0.00\")",
          "338:     payment.save()",
          "339:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "340:     notification = notification(",
          "341:         merchant_reference=payment_id,",
          "342:         value=get_price_amount(payment.total, payment.currency),",
          "343:     )",
          "344:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "345:     config = adyen_plugin().config",
          "347:     handle_refund(notification, config)",
          "349:     assert payment.transactions.count() == 1",
          "350:     assert not mock_order_refunded.called",
          "353: def test_handle_failed_refund_missing_transaction(",
          "354:     notification, adyen_plugin, payment_adyen_for_order",
          "355: ):",
          "356:     payment = payment_adyen_for_order",
          "357:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "358:     payment.captured_amount = payment.total",
          "359:     payment.save()",
          "360:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "361:     notification = notification(",
          "362:         merchant_reference=payment_id,",
          "363:         value=get_price_amount(payment.total, payment.currency),",
          "364:     )",
          "365:     config = adyen_plugin().config",
          "367:     handle_failed_refund(notification, config)",
          "369:     assert payment.transactions.count() == 0",
          "372: def test_handle_failed_refund_with_transaction_refund_ongoing(",
          "373:     notification, adyen_plugin, payment_adyen_for_order",
          "374: ):",
          "375:     payment = payment_adyen_for_order",
          "376:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "377:     payment.captured_amount = payment.total",
          "378:     payment.save()",
          "379:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "380:     notification = notification(",
          "381:         merchant_reference=payment_id,",
          "382:         value=get_price_amount(payment.total, payment.currency),",
          "383:     )",
          "384:     config = adyen_plugin().config",
          "385:     create_new_transaction(notification, payment, TransactionKind.REFUND_ONGOING)",
          "386:     handle_failed_refund(notification, config)",
          "388:     assert (",
          "389:         payment.transactions.count() == 3",
          "390:     )  # REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "391:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "392:     assert payment.total == payment.captured_amount",
          "395: def test_handle_failed_refund_with_transaction_refund(",
          "396:     notification, adyen_plugin, payment_adyen_for_order",
          "397: ):",
          "398:     payment = payment_adyen_for_order",
          "399:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "400:     payment.captured_amount = Decimal(\"0.0\")",
          "401:     payment.save()",
          "402:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "403:     notification = notification(",
          "404:         merchant_reference=payment_id,",
          "405:         value=get_price_amount(payment.total, payment.currency),",
          "406:     )",
          "407:     config = adyen_plugin().config",
          "408:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "409:     handle_failed_refund(notification, config)",
          "411:     payment.refresh_from_db()",
          "412:     assert payment.transactions.count() == 3  # REFUND, REFUND_FAILED, FULLY_CHARGED",
          "413:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "414:     assert payment.total == payment.captured_amount",
          "417: def test_handle_reversed_refund(notification, adyen_plugin, payment_adyen_for_order):",
          "418:     payment = payment_adyen_for_order",
          "419:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "420:     payment.captured_amount = Decimal(\"0.0\")",
          "421:     payment.save()",
          "422:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "423:     notification = notification(",
          "424:         merchant_reference=payment_id,",
          "425:         value=get_price_amount(payment.total, payment.currency),",
          "426:     )",
          "427:     config = adyen_plugin().config",
          "428:     handle_reversed_refund(notification, config)",
          "430:     payment.refresh_from_db()",
          "431:     assert payment.transactions.count() == 1  # REFUND_REVERSED",
          "432:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "433:     assert payment.total == payment.captured_amount",
          "436: def test_handle_reversed_refund_already_processed(",
          "437:     notification, adyen_plugin, payment_adyen_for_order",
          "438: ):",
          "439:     payment = payment_adyen_for_order",
          "440:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "441:     payment.captured_amount = payment.total",
          "442:     payment.save()",
          "443:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "444:     notification = notification(",
          "445:         merchant_reference=payment_id,",
          "446:         value=get_price_amount(payment.total, payment.currency),",
          "447:     )",
          "448:     config = adyen_plugin().config",
          "449:     create_new_transaction(notification, payment, TransactionKind.REFUND_REVERSED)",
          "450:     handle_reversed_refund(notification, config)",
          "452:     payment.refresh_from_db()",
          "453:     assert payment.transactions.count() == 1",
          "456: def test_webhook_not_implemented(notification, adyen_plugin, payment_adyen_for_order):",
          "457:     payment = payment_adyen_for_order",
          "458:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "459:     payment.captured_amount = payment.total",
          "460:     payment.save()",
          "461:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "462:     notification = notification(",
          "463:         merchant_reference=payment_id,",
          "464:         value=get_price_amount(payment.total, payment.currency),",
          "465:     )",
          "466:     config = adyen_plugin().config",
          "468:     webhook_not_implemented(notification, config)",
          "470:     assert payment.order.events.count() == 1",
          "473: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.handle_refund\")",
          "474: def test_handle_cancel_or_refund_action_refund(",
          "475:     mock_handle_refund, notification, adyen_plugin, payment_adyen_for_order",
          "476: ):",
          "478:     payment = payment_adyen_for_order",
          "479:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "480:     config = adyen_plugin().config",
          "481:     notification = notification(",
          "482:         merchant_reference=payment_id,",
          "483:         value=get_price_amount(payment.total, payment.currency),",
          "484:     )",
          "485:     notification[\"additionalData\"][\"modification.action\"] = \"refund\"",
          "487:     handle_cancel_or_refund(notification, config)",
          "489:     mock_handle_refund.assert_called_once_with(notification, config)",
          "492: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.handle_cancellation\")",
          "493: def test_handle_cancel_or_refund_action_cancel(",
          "494:     mock_handle_cancellation, notification, adyen_plugin, payment_adyen_for_order",
          "495: ):",
          "496:     payment = payment_adyen_for_order",
          "497:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "498:     config = adyen_plugin().config",
          "499:     notification = notification(",
          "500:         merchant_reference=payment_id,",
          "501:         value=get_price_amount(payment.total, payment.currency),",
          "502:     )",
          "503:     notification[\"additionalData\"][\"modification.action\"] = \"cancel\"",
          "505:     handle_cancel_or_refund(notification, config)",
          "507:     mock_handle_cancellation.assert_called_once_with(notification, config)",
          "510: @pytest.fixture",
          "511: def notification_with_hmac_signature():",
          "512:     return {",
          "513:         \"additionalData\": {",
          "514:             \"expiryDate\": \"12/2012\",",
          "515:             \" NAME1 \": \"VALUE1\",",
          "516:             \"cardSummary\": \"7777\",",
          "517:             \"totalFraudScore\": \"10\",",
          "518:             \"hmacSignature\": \"D4bKVtjx5AlBL2eeQZIh1p7G1Lh6vWjzwkDlzC+PoMo=\",",
          "519:             \"NAME2\": \"  VALUE2  \",",
          "520:             \"fraudCheck-6-ShopperIpUsage\": \"10\",",
          "521:         },",
          "522:         \"amount\": {\"currency\": \"GBP\", \"value\": 20150},",
          "523:         \"eventCode\": \"AUTHORISATION\",",
          "524:         \"eventDate\": \"2020-07-24T12:40:22+02:00\",",
          "525:         \"merchantAccountCode\": \"SaleorPOS\",",
          "526:         \"merchantReference\": \"8313842560770001\",",
          "527:         \"paymentMethod\": \"visa\",",
          "528:         \"pspReference\": \"test_AUTHORISATION_4\",",
          "529:         \"reason\": \"REFUSED\",",
          "530:         \"success\": \"false\",",
          "531:     }",
          "534: def test_validate_hmac_signature(adyen_plugin, notification_with_hmac_signature):",
          "535:     hmac_key = \"8E60EDDCA27F96095AD5882EF0AA3B05844864710EC089B7967F796AC44AE76E\"",
          "536:     plugin = adyen_plugin()",
          "537:     config = plugin.config",
          "538:     config.connection_params[\"webhook_hmac\"] = hmac_key",
          "539:     assert validate_hmac_signature(notification_with_hmac_signature, config) is True",
          "542: def test_validate_hmac_signature_missing_key_in_saleor(",
          "543:     adyen_plugin, notification_with_hmac_signature",
          "544: ):",
          "545:     plugin = adyen_plugin()",
          "546:     config = plugin.config",
          "547:     assert validate_hmac_signature(notification_with_hmac_signature, config) is False",
          "550: def test_validate_hmac_signature_missing_key_in_notification(",
          "551:     adyen_plugin, notification",
          "552: ):",
          "553:     hmac_key = \"8E60EDDCA27F96095AD5882EF0AA3B05844864710EC089B7967F796AC44AE76E\"",
          "554:     plugin = adyen_plugin()",
          "555:     config = plugin.config",
          "556:     config.connection_params[\"webhook_hmac\"] = hmac_key",
          "557:     assert validate_hmac_signature(notification(), config) is False",
          "560: def test_validate_hmac_signature_without_keys(adyen_plugin, notification):",
          "561:     plugin = adyen_plugin()",
          "562:     config = plugin.config",
          "563:     assert validate_hmac_signature(notification(), config) is True",
          "566: def test_validate_auth_user(adyen_plugin):",
          "567:     plugin = adyen_plugin()",
          "568:     config = plugin.config",
          "569:     config.connection_params[\"webhook_user\"] = \"admin@example.com\"",
          "570:     password = make_password(\"admin\")",
          "571:     config.connection_params[\"webhook_user_password\"] = password",
          "572:     is_valid = validate_auth_user(",
          "573:         headers={\"Authorization\": \"Basic YWRtaW5AZXhhbXBsZS5jb206YWRtaW4=\"},",
          "574:         gateway_config=config,",
          "575:     )",
          "576:     assert is_valid is True",
          "579: def validate_auth_user_when_header_is_missing(adyen_plugin):",
          "580:     plugin = adyen_plugin()",
          "581:     config = plugin.config",
          "582:     config.connection_params[\"webhook_user\"] = \"admin@example.com\"",
          "583:     password = make_password(\"admin\")",
          "584:     config.connection_params[\"webhook_user_password\"] = password",
          "585:     is_valid = validate_auth_user(headers={}, gateway_config=config)",
          "586:     assert is_valid is False",
          "589: def test_validate_auth_user_when_user_is_missing(adyen_plugin):",
          "590:     plugin = adyen_plugin()",
          "591:     config = plugin.config",
          "592:     is_valid = validate_auth_user(",
          "593:         headers={\"Authorization\": \"Basic YWRtaW5AZXhhbXBsZS5jb206YWRtaW4=\"},",
          "594:         gateway_config=config,",
          "595:     )",
          "596:     assert is_valid is False",
          "599: def test_validate_auth_user_when_auth_is_disabled(adyen_plugin):",
          "600:     plugin = adyen_plugin()",
          "601:     config = plugin.config",
          "602:     is_valid = validate_auth_user(headers={}, gateway_config=config)",
          "603:     assert is_valid is True",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from babel.numbers import get_currency_precision",
          "7: from django.conf import settings",
          "8: from django_countries.fields import Country",
          "10: from ....checkout.models import Checkout",
          "11: from ....core.prices import quantize_price",
          "12: from ... import PaymentError",
          "13: from ...interface import PaymentData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from graphql_relay import from_global_id",
          "13: from ....discount.utils import fetch_active_discounts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         raise PaymentError(\"Unable to process the payment request.\")",
          "46: def request_data_for_payment(",
          "47:     payment_information: \"PaymentData\", return_url, merchant_account, origin_url",
          "48: ) -> Dict[str, Any]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: def append_klarna_data(payment_information: \"PaymentData\", payment_data):",
          "49:     # FIXME Add klarna data",
          "50:     pass",
          "51:     # _type, payment_id = from_global_id(payment_information.payment_id)",
          "52:     # checkout = Checkout.objects.filter(payments__id=payment_data).first()",
          "53:     # if not checkout:",
          "54:     #     raise PaymentError(\"Unable to calculate products for klarna\")",
          "55:     # discounts = fetch_active_discounts()",
          "56:     # checkout.lines.prefetch_related(\"variant\").all()",
          "57:     # def resolve_total_price(self, info):",
          "58:     #     def calculate_total_price(discounts):",
          "59:     #         return info.context.plugins.calculate_checkout_line_total(",
          "60:     #             checkout_line=self, discounts=discounts",
          "61:     #         )",
          "62:     #",
          "63:     #     return (",
          "64:     #         DiscountsByDateTimeLoader(info.context)",
          "65:     #             .load(info.context.request_time)",
          "66:     #             .then(calculate_total_price)",
          "67:     #     )",
          "69:     # payment_data[\"shopperEmail\"] = payment_information.customer_email",
          "70:     # payment_data[\"lineItems\"] = [",
          "71:     #     {",
          "72:     #         \"quantity\": \"1\",",
          "73:     #         \"amountExcludingTax\": \"450\",",
          "74:     #         \"taxPercentage\": \"1111\",",
          "75:     #         \"description\": \"Sunglasses\",",
          "76:     #         \"id\": \"Item #1\",",
          "77:     #         \"taxAmount\": \"50\",",
          "78:     #         \"amountIncludingTax\": \"500\",",
          "79:     #         \"taxCategory\": \"High\"",
          "80:     #     },",
          "81:     #     {",
          "82:     #         \"quantity\": \"1\",",
          "83:     #         \"amountExcludingTax\": \"450\",",
          "84:     #         \"taxPercentage\": \"1111\",",
          "85:     #         \"description\": \"Headphones\",",
          "86:     #         \"id\": \"Item #2\",",
          "87:     #         \"taxAmount\": \"50\",",
          "88:     #         \"amountIncludingTax\": \"500\",",
          "89:     #         \"taxCategory\": \"High\"",
          "90:     #     }]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         # web1:https://shop.com, web2:https://shop1.com",
          "68:         extra_request_params[\"origin\"] = origin_url",
          "70:     request = {",
          "71:         \"amount\": {",
          "72:             \"value\": get_price_amount(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     method = payment_data[\"paymentMethod\"].get(\"type\", [])",
          "118:     if \"klarna\" in method:",
          "119:         # TODO",
          "120:         append_klarna_data()",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: )",
          "21: from ....order.events import payment_gateway_notification_event",
          "22: from ....payment.models import Payment, Transaction",
          "24: from ...interface import GatewayConfig, GatewayResponse",
          "25: from ...utils import create_transaction, gateway_postprocess",
          "26: from .utils import convert_adyen_price_format",
          "",
          "[Removed Lines]",
          "23: from ... import TransactionKind",
          "",
          "[Added Lines]",
          "23: from ... import ChargeStatus, TransactionKind",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "87:     payment = get_payment(notification.get(\"merchantReference\"))",
          "88:     if not payment:",
          "89:         # We don't know anything about that payment",
          "90:         return",
          "92:     transaction_id = notification.get(\"pspReference\")",
          "93:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
          "",
          "[Removed Lines]",
          "83:     mark_capture = gateway_config.auto_capture",
          "84:     if mark_capture:",
          "85:         # If we mark order as a capture by default we don't need to handle auth actions",
          "86:         return",
          "",
          "[Added Lines]",
          "87:     if payment.charge_status in {",
          "88:         ChargeStatus.FULLY_CHARGED,",
          "89:         ChargeStatus.PARTIALLY_CHARGED,",
          "90:     }:",
          "91:         return",
          "92:     mark_capture = gateway_config.auto_capture",
          "93:     if mark_capture:",
          "94:         # If we mark order as a capture by default we don't need to handle auth actions",
          "95:         return",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "111:     payment = get_payment(notification.get(\"merchantReference\"))",
          "112:     if not payment:",
          "113:         return",
          "114:     transaction_id = notification.get(\"pspReference\")",
          "115:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
          "117:         # it is already cancelled",
          "118:         return",
          "119:     new_transaction = create_new_transaction(",
          "",
          "[Removed Lines]",
          "116:     if transaction:",
          "",
          "[Added Lines]",
          "116:     \"https://docs.adyen.com/checkout/cancel#cancellation-notifciation\"",
          "122:     if transaction and transaction.is_success:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134: def handle_cancel_or_refund(",
          "135:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "136: ):",
          "137:     additional_data = notification.get(\"additionalData\")",
          "138:     action = additional_data.get(\"modification.action\")",
          "139:     if action == \"refund\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     \"https://docs.adyen.com/checkout/cancel-or-refund#cancel-or-refund-notification\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "147:     payment = get_payment(notification.get(\"merchantReference\"))",
          "148:     if not payment:",
          "149:         return",
          "150:     transaction_id = notification.get(\"pspReference\")",
          "154:         return",
          "156:     new_transaction = create_new_transaction(",
          "",
          "[Removed Lines]",
          "146:     # FIXME execute order_fully_paid event",
          "151:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
          "152:     if transaction and transaction.is_success:",
          "153:         # it is already captured",
          "",
          "[Added Lines]",
          "153:     \"https://docs.adyen.com/checkout/capture#capture-notification\"",
          "158:     if payment.charge_status == ChargeStatus.FULLY_CHARGED:",
          "159:         # the payment has already status captured.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "158:     )",
          "160:     gateway_postprocess(new_transaction, payment)",
          "164:     reason = notification.get(\"reason\", \"-\")",
          "165:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
          "",
          "[Removed Lines]",
          "161:     if payment.order:",
          "162:         handle_fully_paid_order(payment.order)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "168:         payment, success_msg, failed_msg, new_transaction.is_success",
          "169:     )",
          "170:     if payment.order:",
          "174: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "175:     payment = get_payment(notification.get(\"merchantReference\"))",
          "176:     if not payment:",
          "177:         return",
          "",
          "[Removed Lines]",
          "171:         order_captured(payment.orderm, None, transaction.amount, payment)",
          "",
          "[Added Lines]",
          "175:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "179:     \"https://docs.adyen.com/checkout/capture#failed-capture\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "199: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "200:     mark_capture = gateway_config.auto_capture",
          "201:     if mark_capture:",
          "202:         # If we mark order as a capture by default we don't need to handle this action",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     \"https://docs.adyen.com/development-resources/webhooks/understand-notifications#\"",
          "206:     \"event-codes\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "224: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "225:     payment = get_payment(notification.get(\"merchantReference\"))",
          "226:     if not payment:",
          "227:         return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     \"https://docs.adyen.com/checkout/refund#refund-notification\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "242:         payment, success_msg, failed_msg, new_transaction.is_success",
          "243:     )",
          "244:     if payment.order:",
          "249:     payment = get_payment(notification.get(\"merchantReference\"))",
          "250:     if not payment:",
          "251:         return",
          "252:     transaction_id = notification.get(\"pspReference\")",
          "262:     reason = notification.get(\"reason\", \"-\")",
          "263:     msg = (",
          "",
          "[Removed Lines]",
          "245:         order_refunded(payment.order, None, transaction.amount, payment)",
          "248: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "253:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
          "254:     if transaction and not transaction.is_success:",
          "255:         # The refund is already saved",
          "256:         return",
          "257:     new_transaction = create_new_transaction(",
          "258:         notification, payment, TransactionKind.REFUND",
          "259:     )",
          "260:     gateway_postprocess(new_transaction, payment)",
          "",
          "[Added Lines]",
          "253:         order_refunded(payment.order, None, new_transaction.amount, payment)",
          "256: def _get_kind(transaction: Optional[Transaction]) -> TransactionKind:",
          "257:     if transaction:",
          "258:         return transaction.kind",
          "259:     # To proceed the refund we already need to have the capture status so we will use it",
          "260:     return TransactionKind.CAPTURE",
          "263: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "264:     \"https://docs.adyen.com/checkout/refund#failed-refund\"",
          "270:     # take the last status of payment before we tried to perform the refund",
          "271:     last_transaction = payment.transactions.exclude(",
          "272:         kind__in=[",
          "273:             TransactionKind.REFUND_ONGOING,",
          "274:             TransactionKind.REFUND,",
          "275:             TransactionKind.REFUND_FAILED,",
          "276:         ]",
          "277:     ).last()",
          "278:     last_kind = _get_kind(last_transaction)",
          "280:     refund_transaction = payment.transactions.filter(",
          "281:         token=transaction_id,",
          "282:         kind__in=[",
          "283:             TransactionKind.REFUND_ONGOING,",
          "284:             TransactionKind.REFUND,",
          "285:             TransactionKind.REFUND_FAILED,",
          "286:         ],",
          "287:     ).last()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "265:         f\" receive more than two failures on the same refund, contact Adyen Support \"",
          "266:         f\"Team. Reason: {reason}\"",
          "267:     )",
          "271: def handle_reversed_refund(",
          "272:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "273: ):",
          "274:     payment = get_payment(notification.get(\"merchantReference\"))",
          "275:     if not payment:",
          "276:         return",
          "",
          "[Removed Lines]",
          "268:     create_payment_notification_for_order(payment, msg, msg, new_transaction.is_success)",
          "",
          "[Added Lines]",
          "295:     create_payment_notification_for_order(payment, msg, None, True)",
          "297:     if not refund_transaction:",
          "298:         # we don't know anything about refund so we have to skip the notification about",
          "299:         # failed refund.",
          "300:         return",
          "302:     if refund_transaction.kind == TransactionKind.REFUND_FAILED:",
          "303:         # The failed refund is already saved",
          "304:         return",
          "305:     elif refund_transaction.kind == TransactionKind.REFUND_ONGOING:",
          "306:         # create new failed transaction which will allows us to discover duplicated",
          "307:         # notification",
          "308:         create_new_transaction(notification, payment, TransactionKind.REFUND_FAILED)",
          "310:         # Refund ongoing doesnt do any action on payment.capture_amount so we set",
          "311:         # 0 to amount. Thanks to it we can create transaction with the same status and",
          "312:         # no worries that we will capture total in payment two times.",
          "313:         # (if gateway_postprocess gets transaction with capture it will subtract the",
          "314:         # amount from transaction",
          "315:         notification[\"amount\"][\"value\"] = 0",
          "316:         new_transaction = create_new_transaction(notification, payment, last_kind)",
          "317:         gateway_postprocess(new_transaction, payment)",
          "318:     elif refund_transaction.kind == TransactionKind.REFUND:",
          "319:         # create new failed transaction which will allows us to discover duplicated",
          "320:         # notification",
          "321:         create_new_transaction(notification, payment, TransactionKind.REFUND_FAILED)",
          "322:         new_transaction = create_new_transaction(notification, payment, last_kind)",
          "323:         gateway_postprocess(new_transaction, payment)",
          "329:     \"https://docs.adyen.com/checkout/refund#failed-refund\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "279:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
          "280:     )",
          "283:         # it is already refunded",
          "284:         return",
          "285:     new_transaction = create_new_transaction(",
          "",
          "[Removed Lines]",
          "282:     if transaction and not transaction.is_success:",
          "",
          "[Added Lines]",
          "338:     if transaction:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "299: def handle_refund_with_data(",
          "301: ):",
          "326: def webhook_not_implemented(",
          "",
          "[Removed Lines]",
          "300:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "303:     payment = get_payment(notification.get(\"merchantReference\"))",
          "304:     if not payment:",
          "305:         return",
          "306:     transaction_id = notification.get(\"pspReference\")",
          "307:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
          "308:     if transaction:",
          "309:         # it is already refunded",
          "310:         return",
          "311:     new_transaction = create_new_transaction(",
          "312:         notification, payment, TransactionKind.REFUND",
          "313:     )",
          "314:     gateway_postprocess(new_transaction, payment)",
          "316:     reason = notification.get(\"reason\", \"-\")",
          "317:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
          "318:     failed_msg = f\"Adyen: The refund {transaction_id} request failed. Reason: {reason}\"",
          "319:     create_payment_notification_for_order(",
          "320:         payment, success_msg, failed_msg, new_transaction.is_success",
          "321:     )",
          "322:     if payment.order:",
          "323:         order_refunded(payment.order, None, transaction.amount, payment)",
          "",
          "[Added Lines]",
          "356:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "358:     \"https://docs.adyen.com/checkout/refund#refund-with-data\"",
          "359:     handle_refund(notification, gateway_config)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "363: def validate_hmac_signature(",
          "364:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
          "365: ) -> bool:",
          "377:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
          "379:         return True",
          "382:     if not hmac_signature and hmac_key:",
          "383:         return False",
          "386:     if notification.get(\"success\", None) is None:",
          "387:         success = \"\"",
          "",
          "[Removed Lines]",
          "367:     \"\"\"",
          "368:     pspReference 7914073381342284",
          "369:     originalReference",
          "370:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
          "371:     merchantReference TestPayment-1407325143704",
          "372:     value 1130",
          "373:     currency EUR",
          "374:     eventCode AUTHORISATION",
          "375:     success true",
          "376:     \"\"\"",
          "378:     if not hmac_key:",
          "381:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
          "385:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
          "",
          "[Added Lines]",
          "402:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
          "404:     if not hmac_key and not hmac_signature:",
          "407:     if not hmac_key and hmac_signature:",
          "408:         return False",
          "413:     hmac_key = hmac_key.encode()",
          "415:     success = \"true\" if notification.get(\"success\", \"\") == \"true\" else \"false\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "391:         notification.get(\"originalReference\", \"\"),",
          "392:         notification.get(\"merchantAccountCode\", \"\"),",
          "393:         notification.get(\"merchantReference\", \"\"),",
          "396:         notification.get(\"eventCode\", \"\"),",
          "397:         success,",
          "398:     ]",
          "399:     payload = \":\".join(payload_list)",
          "401:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
          "402:     expected_merchant_sign = base64.b64encode(hm.digest())",
          "403:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
          "",
          "[Removed Lines]",
          "394:         notification.get(\"value\", \"\"),",
          "395:         notification.get(\"currency\", \"\"),",
          "",
          "[Added Lines]",
          "424:         str(notification.get(\"amount\", {}).get(\"value\", \"\")),",
          "425:         notification.get(\"amount\", {}).get(\"currency\", \"\"),",
          "431:     hmac_key = binascii.a2b_hex(hmac_key)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "409:     auth_header = headers.get(\"Authorization\")",
          "410:     if not auth_header and not username:",
          "411:         return True",
          "413:     split_auth = auth_header.split(maxsplit=1)",
          "414:     prefix = \"BASIC\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:     if auth_header and not username:",
          "444:         return False",
          "445:     if not auth_header and username:",
          "446:         return False",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "419:     auth = split_auth[1]",
          "420:     try:",
          "422:         user_is_correct = request_username == username",
          "423:         if user_is_correct and check_password(request_password, password):",
          "424:             return True",
          "",
          "[Removed Lines]",
          "421:         request_username, request_password = base64.b64decode(auth).split(\":\")",
          "",
          "[Added Lines]",
          "456:         decoded_auth = base64.b64decode(auth)",
          "457:         decoded_auth = decoded_auth.decode()",
          "458:         request_username, request_password = decoded_auth.split(\":\")",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "438:     if not validate_hmac_signature(notification, gateway_config):",
          "439:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
          "441:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
          "447:     return HttpResponseNotFound()",
          "",
          "[Removed Lines]",
          "440:     if not validate_auth_user(notification, gateway_config):",
          "443:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
          "444:     if event_handler:",
          "445:         event_handler(notification, gateway_config)",
          "446:         return HttpResponse(\"[accepted]\")",
          "",
          "[Added Lines]",
          "477:     if not validate_auth_user(request.headers, gateway_config):",
          "480:     # event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
          "481:     # if event_handler:",
          "482:     #     event_handler(notification, gateway_config)",
          "483:     return HttpResponse(\"[accepted]\")",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:         TransactionKind.REFUND_REVERSED,",
          "227:     }:",
          "228:         payment.captured_amount += transaction.amount",
          "230:         # Set payment charge status to fully charged",
          "231:         # only if there is no more amount needs to charge",
          "232:         payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:         payment.is_active = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:         }:",
          "266:             payment.captured_amount -= transaction.amount",
          "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
          "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
          "",
          "[Removed Lines]",
          "268:             if payment.get_charge_amount() <= 0:",
          "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "",
          "[Added Lines]",
          "268:             if payment.captured_amount <= 0:",
          "269:                 payment.charge_status = ChargeStatus.NOT_CHARGED",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d13d08ca654db937746e4632cdd209699bc2da18",
      "candidate_info": {
        "commit_hash": "d13d08ca654db937746e4632cdd209699bc2da18",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/d13d08ca654db937746e4632cdd209699bc2da18",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Clean up code. Add amount to paymentMethod request. reverse pending condition (#5982)",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/test_utils.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from ...models import Payment, Transaction",
          "18: from ..utils import get_supported_currencies",
          "19: from .utils import (",
          "20:     api_call,",
          "21:     call_capture,",
          "22:     request_data_for_gateway_config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:     AUTH_STATUS,",
          "21:     FAILED_STATUSES,",
          "22:     PENDING_STATUSES,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     return wrapped",
          "50: class AdyenGatewayPlugin(BasePlugin):",
          "51:     PLUGIN_ID = \"mirumee.payments.adyen\"",
          "52:     PLUGIN_NAME = GATEWAY_NAME",
          "",
          "[Removed Lines]",
          "44: # https://docs.adyen.com/checkout/payment-result-codes",
          "45: FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "46: PENDING_STATUSES = [\"pending\", \"received\"]",
          "47: AUTH_STATUS = \"authorised\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:         is_success = result_code not in FAILED_STATUSES",
          "275:         adyen_auto_capture = self.config.connection_params[\"adyen_auto_capture\"]",
          "276:         kind = TransactionKind.AUTH",
          "280:             kind = TransactionKind.PENDING",
          "282:         # If auto capture is enabled, let's make a capture the auth payment",
          "283:         if self.config.auto_capture and result_code == AUTH_STATUS:",
          "",
          "[Removed Lines]",
          "277:         if adyen_auto_capture:",
          "278:             kind = TransactionKind.CAPTURE",
          "279:         elif result_code in PENDING_STATUSES:",
          "",
          "[Added Lines]",
          "274:         if result_code in PENDING_STATUSES:",
          "276:         elif adyen_auto_capture:",
          "277:             kind = TransactionKind.CAPTURE",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_utils.py||saleor/payment/gateways/adyen/tests/test_utils.py": [
          "File: saleor/payment/gateways/adyen/tests/test_utils.py -> saleor/payment/gateways/adyen/tests/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     assert result == expected_result",
          "244:     # given",
          "246:     merchant_account = \"test_account\"",
          "248:     # when",
          "251:     # then",
          "252:     assert response_config == {",
          "253:         \"merchantAccount\": merchant_account,",
          "255:         \"channel\": \"web\",",
          "256:     }",
          "",
          "[Removed Lines]",
          "243: def test_request_data_for_gateway_config(checkout, address):",
          "245:     checkout.billing_address = address",
          "249:     response_config = request_data_for_gateway_config(checkout, merchant_account)",
          "254:         \"countryCode\": checkout.billing_address.country,",
          "",
          "[Added Lines]",
          "243: def test_request_data_for_gateway_config(checkout_with_item, address):",
          "245:     checkout_with_item.billing_address = address",
          "249:     response_config = request_data_for_gateway_config(",
          "250:         checkout_with_item, merchant_account",
          "251:     )",
          "256:         \"countryCode\": checkout_with_item.billing_address.country,",
          "258:         \"amount\": {\"currency\": \"USD\", \"value\": \"3000\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:         \"merchantAccount\": merchant_account,",
          "269:         \"countryCode\": settings.DEFAULT_COUNTRY,",
          "270:         \"channel\": \"web\",",
          "271:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:         \"amount\": {\"currency\": \"USD\", \"value\": \"0\"},",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from django.conf import settings",
          "9: from django_countries.fields import Country",
          "12: from ....checkout.models import Checkout",
          "13: from ....core.prices import quantize_price",
          "14: from ....discount.utils import fetch_active_discounts",
          "",
          "[Removed Lines]",
          "11: from ....checkout.calculations import checkout_line_total",
          "",
          "[Added Lines]",
          "11: from ....checkout.calculations import checkout_line_total, checkout_total",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "22: def convert_adyen_price_format(value: str, currency: str):",
          "23:     value = Decimal(value)",
          "24:     precision = get_currency_precision(currency)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: # https://docs.adyen.com/checkout/payment-result-codes",
          "23: FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "24: PENDING_STATUSES = [\"pending\", \"received\"]",
          "25: AUTH_STATUS = \"authorised\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159: def request_data_for_gateway_config(",
          "160:     checkout: \"Checkout\", merchant_account",
          "162:     address = checkout.billing_address or checkout.shipping_address",
          "164:     country = address.country if address else None",
          "165:     if country:",
          "",
          "[Removed Lines]",
          "161: ) -> Dict[str, str]:",
          "",
          "[Added Lines]",
          "167: ) -> Dict[str, Any]:",
          "169:     discounts = fetch_active_discounts()",
          "170:     lines = checkout.lines.prefetch_related(\"variant\").all()",
          "171:     total = checkout_total(checkout=checkout, lines=lines, discounts=discounts)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:         \"merchantAccount\": merchant_account,",
          "172:         \"countryCode\": country_code,",
          "173:         \"channel\": channel,",
          "174:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         \"amount\": {",
          "184:             \"value\": get_price_amount(total.gross.amount, checkout.currency),",
          "185:             \"currency\": checkout.currency,",
          "186:         },",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: from ...gateway import capture",
          "35: from ...interface import GatewayConfig, GatewayResponse",
          "36: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "40: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Removed Lines]",
          "37: from .utils import api_call, convert_adyen_price_format",
          "",
          "[Added Lines]",
          "37: from .utils import FAILED_STATUSES, api_call, convert_adyen_price_format",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:         payment=payment, payment_token=payment.token,",
          "623:     )",
          "626:     error_message = response.message.get(\"refusalReason\")",
          "630:     gateway_response = GatewayResponse(",
          "633:         kind=kind,",
          "634:         amount=payment_data.amount,",
          "635:         currency=payment_data.currency,",
          "",
          "[Removed Lines]",
          "625:     action_required = False",
          "627:     if \"action\" in response.message:",
          "628:         action_required = True",
          "631:         is_success=True if error_message else False,",
          "632:         action_required=action_required,",
          "",
          "[Added Lines]",
          "625:     result_code = response.message[\"resultCode\"].strip().lower()",
          "626:     is_success = result_code not in FAILED_STATUSES",
          "628:     # action_required is True as we want to call gateway.confirm from the",
          "629:     # checkoutComplete mutation",
          "632:         is_success=is_success,",
          "633:         action_required=True,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "642:     transaction = create_transaction(",
          "643:         payment=payment,",
          "644:         kind=kind,",
          "646:         payment_information=payment_data,",
          "647:         gateway_response=gateway_response,",
          "648:     )",
          "",
          "[Removed Lines]",
          "645:         action_required=action_required,",
          "",
          "[Added Lines]",
          "646:         action_required=True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "225a61fd23c83550d8525d37a1ab1a0eceff3ef4",
      "candidate_info": {
        "commit_hash": "225a61fd23c83550d8525d37a1ab1a0eceff3ef4",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/225a61fd23c83550d8525d37a1ab1a0eceff3ef4",
        "files": [
          "saleor/checkout/complete_checkout.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Fix capture notification",
        "before_after_code_files": [
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:         store_customer_id(user, payment.gateway, txn.customer_id)  # type: ignore",
          "168:     action_required = txn.action_required",
          "171:     if not action_required:",
          "172:         try:",
          "",
          "[Removed Lines]",
          "169:     action_data = txn.action_required_data if action_data else {}",
          "",
          "[Added Lines]",
          "169:     action_data = txn.action_required_data if action_required else {}",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:         transaction = (",
          "424:             Transaction.objects.filter(",
          "425:                 payment__id=payment_information.payment_id,",
          "427:                 is_success=True,",
          "428:             )",
          "429:             .exclude(token__isnull=True, token__exact=\"\")",
          "430:             .last()",
          "431:         )",
          "433:         if not transaction:",
          "434:             raise PaymentError(\"Cannot find a payment reference to refund.\")",
          "",
          "[Removed Lines]",
          "426:                 kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "",
          "[Added Lines]",
          "426:                 kind=TransactionKind.AUTH,",
          "432:         if not transaction:",
          "433:             # If we don't find the Auth kind we will try to get Capture kind",
          "434:             transaction = (",
          "435:                 Transaction.objects.filter(",
          "436:                     payment__id=payment_information.payment_id,",
          "437:                     kind=TransactionKind.CAPTURE,",
          "438:                     is_success=True,",
          "439:                 )",
          "440:                 .exclude(token__isnull=True, token__exact=\"\")",
          "441:                 .last()",
          "442:             )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     config = adyen_plugin().config",
          "206:     handle_capture(notification, config)",
          "210:     assert transaction.is_success is True",
          "214: def test_handle_capture_for_checkout(",
          "",
          "[Removed Lines]",
          "208:     assert payment.transactions.count() == 1",
          "209:     transaction = payment.transactions.get()",
          "211:     assert transaction.kind == TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "208:     payment.refresh_from_db()",
          "209:     assert payment.transactions.count() == 2",
          "210:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "212:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from ....checkout.models import Checkout",
          "28: from ....core.utils.url import prepare_url",
          "29: from ....discount.utils import fetch_active_discounts",
          "31: from ....order.events import external_notification_event",
          "32: from ....payment.models import Payment, Transaction",
          "33: from ... import ChargeStatus, PaymentError, TransactionKind",
          "",
          "[Removed Lines]",
          "30: from ....order.actions import cancel_order, order_refunded",
          "",
          "[Added Lines]",
          "30: from ....order.actions import cancel_order, order_captured, order_refunded",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:         return",
          "230:     transaction_id = notification.get(\"pspReference\")",
          "232:         token=transaction_id,",
          "233:         action_required=False,",
          "234:         is_success=True,",
          "235:         kind=TransactionKind.CAPTURE,",
          "236:     ).last()",
          "239:         # We already have this transaction",
          "240:         return",
          "248:     if not payment.order:",
          "249:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "250:         # storefront and we need to finalize the checkout asynchronously.",
          "251:         if not action_transaction:",
          "",
          "[Removed Lines]",
          "231:     transaction = payment.transactions.filter(",
          "238:     if transaction:",
          "242:     action_transaction = payment.transactions.filter(",
          "243:         token=transaction_id,",
          "244:         action_required=False,",
          "245:         is_success=True,",
          "246:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "247:     ).last()",
          "",
          "[Added Lines]",
          "231:     capture_transaction = payment.transactions.filter(",
          "238:     if capture_transaction:",
          "243:         action_transaction = payment.transactions.filter(",
          "244:             token=transaction_id,",
          "245:             action_required=False,",
          "246:             is_success=True,",
          "247:             kind=TransactionKind.ACTION_TO_CONFIRM,",
          "248:         ).last()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:             except ValidationError:",
          "267:                 payment_refund_or_void(payment)",
          "268:                 return",
          "270:     reason = notification.get(\"reason\", \"-\")",
          "271:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     else:",
          "270:         new_transaction = create_new_transaction(",
          "271:             notification, payment, TransactionKind.CAPTURE",
          "272:         )",
          "273:         gateway_postprocess(new_transaction, payment)",
          "274:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "347:     create_payment_notification_for_order(",
          "348:         payment, success_msg, failed_msg, new_transaction.is_success",
          "349:     )",
          "351:         order_refunded(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Removed Lines]",
          "350:     if payment.order:",
          "",
          "[Added Lines]",
          "356:     if payment.order and new_transaction.is_success:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94aa1f54c7580e0c42f8084f8a615e96b6ab13ee",
      "candidate_info": {
        "commit_hash": "94aa1f54c7580e0c42f8084f8a615e96b6ab13ee",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/94aa1f54c7580e0c42f8084f8a615e96b6ab13ee",
        "files": [
          "CHANGELOG.md",
          "saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py",
          "saleor/plugins/tests/test_views.py",
          "saleor/plugins/views.py",
          "saleor/urls.py"
        ],
        "message": "Fix/handle plugin webhook per plugin for 3.0 (#7334)\n\n* Add new configuration type field - OUTPUT\n\n* Add possibility to use webhook with plugins per channels\n\n* Update the changelog\n\n* Fix typo in function name",
        "before_after_code_files": [
          "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py",
          "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py",
          "saleor/plugins/tests/test_views.py||saleor/plugins/tests/test_views.py",
          "saleor/plugins/views.py||saleor/plugins/views.py",
          "saleor/urls.py||saleor/urls.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
          "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:   SECRET",
          "1303:   PASSWORD",
          "1304:   SECRETMULTILINE",
          "1305: }",
          "1307: type ConfirmAccount {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1305:   OUTPUT",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: from typing import List, Optional",
          "5: import Adyen",
          "6: import opentracing",
          "",
          "[Removed Lines]",
          "3: from urllib.parse import urlencode",
          "",
          "[Added Lines]",
          "3: from urllib.parse import urlencode, urljoin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "11: from django.core.handlers.wsgi import WSGIRequest",
          "12: from django.http import HttpResponse, HttpResponseNotFound",
          "13: from requests.exceptions import SSLError",
          "15: from ....checkout.models import Checkout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: from django.urls import reverse",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:             \"help_text\": (",
          "136:                 \"Provide secret key generated on Adyen side.\"",
          "137:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
          "140:             ),",
          "141:             \"label\": \"HMAC secret key\",",
          "142:         },",
          "",
          "[Removed Lines]",
          "138:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
          "139:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "139:                 \"ions-in-your-customer-area.\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:                 \"Base User provided on the Adyen side to authenticate incoming \"",
          "147:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "148:                 \"set-up-notifications-in-your-customer-area \"",
          "151:             ),",
          "152:             \"label\": \"Notification user\",",
          "153:         },",
          "",
          "[Removed Lines]",
          "149:                 \"The Saleor webhook url is \"",
          "150:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "157:                 \"User password provided on the Adyen side for authenticate incoming \"",
          "158:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "159:                 \"set-up-notifications-in-your-customer-area \"",
          "162:             ),",
          "163:             \"label\": \"Notification password\",",
          "164:         },",
          "",
          "[Removed Lines]",
          "160:                 \"The Saleor webhook url is \"",
          "161:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:             ),",
          "185:             \"label\": \"Apple Pay certificate\",",
          "186:         },",
          "187:     }",
          "189:     def __init__(self, *args, **kwargs):",
          "190:         super().__init__(*args, **kwargs)",
          "191:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "192:         self.config = GatewayConfig(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         \"webhook-endpoint\": {",
          "184:             \"type\": ConfigurationTypeField.OUTPUT,",
          "185:             \"help_text\": (",
          "186:                 \"Endpoint which should be used to activate Adyen's webhooks. \"",
          "187:                 \"More details can be find here: \"",
          "188:                 \"https://docs.adyen.com/development-resources/webhooks\"",
          "189:             ),",
          "190:             \"label\": \"Webhook endpoint\",",
          "191:         },",
          "195:         channel = kwargs[\"channel\"]",
          "196:         raw_configuration = kwargs[\"configuration\"].copy()",
          "197:         self._insert_webhook_endpoint_to_configuration(raw_configuration, channel)",
          "198:         kwargs[\"configuration\"] = raw_configuration",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:             xapikey=api_key, live_endpoint_prefix=live_endpoint, platform=platform",
          "215:         )",
          "217:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "218:         config = self._get_gateway_config()",
          "219:         if path.startswith(WEBHOOK_PATH):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:     def _insert_webhook_endpoint_to_configuration(self, raw_configuration, channel):",
          "228:         updated = False",
          "229:         for config in raw_configuration:",
          "230:             if config[\"name\"] == \"webhook-endpoint\":",
          "231:                 updated = True",
          "232:                 config[\"value\"] = self._generate_webhook_url(channel)",
          "233:         if not updated:",
          "234:             raw_configuration.append(",
          "235:                 {",
          "236:                     \"name\": \"webhook-endpoint\",",
          "237:                     \"value\": self._generate_webhook_url(channel),",
          "238:                 }",
          "239:             )",
          "241:     def _generate_webhook_url(self, channel) -> str:",
          "242:         api_path = reverse(",
          "243:             \"plugins-per-channel\",",
          "244:             kwargs={\"plugin_id\": self.PLUGIN_ID, \"channel_slug\": channel.slug},",
          "245:         )",
          "246:         base_url = build_absolute_uri(api_path)",
          "247:         return urljoin(base_url, \"webhooks\")  # type: ignore",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:         return_url = prepare_url(",
          "316:             params,",
          "317:             build_absolute_uri(",
          "320:         )",
          "321:         request_data = request_data_for_payment(",
          "322:             payment_information,",
          "",
          "[Removed Lines]",
          "318:                 f\"/plugins/{self.PLUGIN_ID}/additional-actions\"",
          "319:             ),  # type: ignore",
          "",
          "[Added Lines]",
          "350:                 f\"/plugins/channel/{self.channel.slug}/\"  # type: ignore",
          "351:                 f\"{self.PLUGIN_ID}/additional-actions\"",
          "352:             ),",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     SECRET = \"Secret\"",
          "42:     SECRET_MULTILINE = \"SecretMultiline\"",
          "43:     PASSWORD = \"Password\"",
          "44:     CHOICES = [",
          "45:         (STRING, \"Field is a String\"),",
          "46:         (MULTILINE, \"Field is a Multiline\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     OUTPUT = \"OUTPUT\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         (SECRET, \"Field is a Secret\"),",
          "49:         (PASSWORD, \"Field is a Password\"),",
          "50:         (SECRET_MULTILINE, \"Field is a Secret multiline\"),",
          "51:     ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         (OUTPUT, \"Field is a read only\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "667:                         and not isinstance(new_value, bool)",
          "668:                     ):",
          "669:                         new_value = new_value.lower() == \"true\"",
          "670:                     config_item.update([(\"value\", new_value)])",
          "672:         # Get new keys that don't exist in current_config and extend it.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672:                     if item_type == ConfigurationTypeField.OUTPUT:",
          "673:                         # OUTPUT field is read only. No need to update it",
          "674:                         continue",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "907:         default_value = False",
          "908:         return self.__run_method_on_plugins(\"fetch_taxes_data\", default_value)",
          "911:         split_path = request.path.split(plugin_id, maxsplit=1)",
          "912:         path = None",
          "913:         if len(split_path) == 2:",
          "914:             path = split_path[1]",
          "917:         default_value = HttpResponseNotFound()",
          "918:         plugin = self.get_plugin(plugin_id)",
          "919:         if not plugin:",
          "",
          "[Removed Lines]",
          "910:     def webhook(self, request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "916:         # FIXME",
          "",
          "[Added Lines]",
          "909:     def webhook_endpoint_without_channel(",
          "910:         self, request: WSGIRequest, plugin_id: str",
          "911:     ) -> HttpResponse:",
          "912:         # This should be removed in 3.0.0-a.25 as we want to give a possibility to have",
          "913:         # no downtime between RCs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:             plugin, \"webhook\", default_value, request, path",
          "923:         )",
          "925:     def notify(",
          "926:         self,",
          "927:         event: \"NotifyEventTypeChoice\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:     def webhook(",
          "928:         self, request: WSGIRequest, plugin_id: str, channel_slug: Optional[str] = None",
          "929:     ) -> HttpResponse:",
          "930:         split_path = request.path.split(plugin_id, maxsplit=1)",
          "931:         path = None",
          "932:         if len(split_path) == 2:",
          "933:             path = split_path[1]",
          "935:         default_value = HttpResponseNotFound()",
          "936:         plugin = self.get_plugin(plugin_id, channel_slug=channel_slug)",
          "937:         if not plugin:",
          "938:             return default_value",
          "940:         if not plugin.active:",
          "941:             return default_value",
          "943:         if plugin.CONFIGURATION_PER_CHANNEL and not channel_slug:",
          "944:             return HttpResponseNotFound(",
          "945:                 \"Incorrect endpoint. Use /plugins/channel/<channel_slug>/\"",
          "946:                 f\"{plugin.PLUGIN_ID}/\"",
          "947:             )",
          "949:         return self.__run_method_on_single_plugin(",
          "950:             plugin, \"webhook\", default_value, request, path",
          "951:         )",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/sample_plugins.py||saleor/plugins/tests/sample_plugins.py": [
          "File: saleor/plugins/tests/sample_plugins.py -> saleor/plugins/tests/sample_plugins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     }",
          "241: class PluginInactive(BasePlugin):",
          "242:     PLUGIN_ID = \"mirumee.taxes.plugin.inactive\"",
          "243:     PLUGIN_NAME = \"PluginInactive\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     }",
          "241: class InactiveChannelPluginSample(PluginSample):",
          "242:     PLUGIN_ID = \"channel.plugin.inactive.sample\"",
          "243:     PLUGIN_NAME = \"Inactive Channel Plugin\"",
          "244:     PLUGIN_DESCRIPTION = \"Test channel plugin\"",
          "245:     DEFAULT_ACTIVE = False",
          "246:     CONFIGURATION_PER_CHANNEL = True",
          "247:     DEFAULT_CONFIGURATION = [{\"name\": \"input-per-channel\", \"value\": None}]",
          "",
          "---------------"
        ],
        "saleor/plugins/tests/test_views.py||saleor/plugins/tests/test_views.py": [
          "File: saleor/plugins/tests/test_views.py -> saleor/plugins/tests/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import pytest",
          "6: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "3: from .sample_plugins import PluginInactive, PluginSample",
          "",
          "[Added Lines]",
          "3: from .sample_plugins import (",
          "4:     ChannelPluginSample,",
          "5:     InactiveChannelPluginSample,",
          "6:     PluginInactive,",
          "7:     PluginSample,",
          "8: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     response = client.post(f\"/plugins/{plugin_id}{plugin_path}\")",
          "23:     assert response.status_code == status_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: @pytest.mark.parametrize(",
          "32:     \"plugin_id, plugin_path, status_code\",",
          "33:     [",
          "34:         (PluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "35:         (ChannelPluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "36:         (InactiveChannelPluginSample.PLUGIN_ID, \"/webhook/paid\", 404),",
          "37:         (\"wrong.id\", \"/webhook/\", 404),",
          "38:     ],",
          "39: )",
          "40: def test_plugin_per_channel_webhook_view(",
          "41:     plugin_id, plugin_path, status_code, client, settings, monkeypatch, channel_PLN",
          "42: ):",
          "43:     settings.PLUGINS = [",
          "44:         \"saleor.plugins.tests.sample_plugins.PluginSample\",",
          "45:         \"saleor.plugins.tests.sample_plugins.ChannelPluginSample\",",
          "46:         \"saleor.plugins.tests.sample_plugins.InactiveChannelPluginSample\",",
          "47:     ]",
          "49:     response = client.post(",
          "50:         f\"/plugins/channel/{channel_PLN.slug}/{plugin_id}{plugin_path}\"",
          "51:     )",
          "52:     assert response.status_code == status_code",
          "55: @pytest.mark.parametrize(",
          "56:     \"plugin_id, plugin_path, status_code\",",
          "57:     [",
          "58:         (PluginSample.PLUGIN_ID, \"/webhook/paid\", 200),",
          "59:         (PluginInactive.PLUGIN_ID, \"/webhook/paid\", 404),",
          "60:         (\"wrong.id\", \"/webhook/\", 404),",
          "61:     ],",
          "62: )",
          "63: def test_plugin_global_webhook_view(",
          "64:     plugin_id, plugin_path, status_code, client, settings, monkeypatch, channel_PLN",
          "65: ):",
          "66:     settings.PLUGINS = [",
          "67:         \"saleor.plugins.tests.sample_plugins.PluginSample\",",
          "68:         \"saleor.plugins.tests.sample_plugins.PluginInactive\",",
          "69:     ]",
          "71:     response = client.post(f\"/plugins/global/{plugin_id}{plugin_path}\")",
          "72:     assert response.status_code == status_code",
          "",
          "---------------"
        ],
        "saleor/plugins/views.py||saleor/plugins/views.py": [
          "File: saleor/plugins/views.py -> saleor/plugins/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: def handle_plugin_webhook(request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "8:     manager = get_plugins_manager()",
          "",
          "[Removed Lines]",
          "9:     return manager.webhook(request, plugin_id)",
          "",
          "[Added Lines]",
          "9:     return manager.webhook_endpoint_without_channel(request, plugin_id)",
          "12: def handle_global_plugin_webhook(request: WSGIRequest, plugin_id: str) -> HttpResponse:",
          "13:     manager = get_plugins_manager()",
          "14:     return manager.webhook(request, plugin_id, channel_slug=None)",
          "17: def handle_plugin_per_channel_webhook(",
          "18:     request: WSGIRequest, plugin_id: str, channel_slug: str",
          "19: ) -> HttpResponse:",
          "20:     manager = get_plugins_manager()",
          "21:     return manager.webhook(request, plugin_id, channel_slug=channel_slug)",
          "",
          "---------------"
        ],
        "saleor/urls.py||saleor/urls.py": [
          "File: saleor/urls.py -> saleor/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from .graphql.api import schema",
          "8: from .graphql.views import GraphQLView",
          "10: from .product.views import digital_product",
          "12: urlpatterns = [",
          "",
          "[Removed Lines]",
          "9: from .plugins.views import handle_plugin_webhook",
          "",
          "[Added Lines]",
          "9: from .plugins.views import (",
          "10:     handle_global_plugin_webhook,",
          "11:     handle_plugin_per_channel_webhook,",
          "12:     handle_plugin_webhook,",
          "13: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:         digital_product,",
          "17:         name=\"digital-product\",",
          "18:     ),",
          "19:     url(",
          "20:         r\"plugins/(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "21:         handle_plugin_webhook,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     url(",
          "24:         r\"plugins/channel/(?P<channel_slug>[.0-9A-Za-z_\\-]+)/\"",
          "25:         r\"(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "26:         handle_plugin_per_channel_webhook,",
          "27:         name=\"plugins-per-channel\",",
          "28:     ),",
          "29:     url(",
          "30:         r\"plugins/global/(?P<plugin_id>[.0-9A-Za-z_\\-]+)/\",",
          "31:         handle_global_plugin_webhook,",
          "32:         name=\"plugins-global\",",
          "33:     ),",
          "",
          "---------------"
        ]
      }
    }
  ]
}