{
  "cve_id": "CVE-2022-1650",
  "cve_desc": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository eventsource/eventsource prior to v2.0.2.\n\n",
  "repo": "eventsource/eventsource",
  "patch_hash": "10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
  "patch_info": {
    "commit_hash": "10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
    "repo": "eventsource/eventsource",
    "commit_url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
    "files": [
      "lib/eventsource.js",
      "test/eventsource_test.js"
    ],
    "message": "fix: strip sensitive headers on redirect to different origin",
    "before_after_code_files": [
      "lib/eventsource.js||lib/eventsource.js",
      "test/eventsource_test.js||test/eventsource_test.js"
    ]
  },
  "patch_diff": {
    "lib/eventsource.js||lib/eventsource.js": [
      "File: lib/eventsource.js -> lib/eventsource.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: function EventSource (url, eventSourceInitDict) {",
      "34:   var readyState = EventSource.CONNECTING",
      "35:   Object.defineProperty(this, 'readyState', {",
      "36:     get: function () {",
      "37:       return readyState",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:   var headers = eventSourceInitDict && eventSourceInitDict.headers",
      "36:   var hasNewOrigin = false",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53:     readyState = EventSource.CONNECTING",
      "54:     _emit('error', new Event('error', {message: message}))",
      "58:     if (reconnectUrl) {",
      "59:       url = reconnectUrl",
      "60:       reconnectUrl = null",
      "61:     }",
      "62:     setTimeout(function () {",
      "63:       if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:       hasNewOrigin = false",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:   var req",
      "72:   var lastEventId = ''",
      "76:   }",
      "78:   var discardTrailingNewline = false",
      "",
      "[Removed Lines]",
      "73:   if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {",
      "74:     lastEventId = eventSourceInitDict.headers['Last-Event-ID']",
      "75:     delete eventSourceInitDict.headers['Last-Event-ID']",
      "",
      "[Added Lines]",
      "76:   if (headers && headers['Last-Event-ID']) {",
      "77:     lastEventId = headers['Last-Event-ID']",
      "78:     delete headers['Last-Event-ID']",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "86:     var isSecure = options.protocol === 'https:'",
      "87:     options.headers = { 'Cache-Control': 'no-cache', 'Accept': 'text/event-stream' }",
      "88:     if (lastEventId) options.headers['Last-Event-ID'] = lastEventId",
      "92:         if (header) {",
      "93:           options.headers[i] = header",
      "94:         }",
      "",
      "[Removed Lines]",
      "89:     if (eventSourceInitDict && eventSourceInitDict.headers) {",
      "90:       for (var i in eventSourceInitDict.headers) {",
      "91:         var header = eventSourceInitDict.headers[i]",
      "",
      "[Added Lines]",
      "92:     if (headers) {",
      "93:       var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers",
      "94:       for (var i in reqHeaders) {",
      "95:         var header = reqHeaders[i]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "150:       if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {",
      "153:           _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))",
      "154:           return",
      "155:         }",
      "156:         if (res.statusCode === 307) reconnectUrl = url",
      "158:         process.nextTick(connect)",
      "159:         return",
      "160:       }",
      "",
      "[Removed Lines]",
      "151:         if (!res.headers.location) {",
      "157:         url = res.headers.location",
      "",
      "[Added Lines]",
      "155:         var location = res.headers.location",
      "156:         if (!location) {",
      "161:         var prevOrigin = new URL(url).origin",
      "162:         var nextOrigin = new URL(location).origin",
      "163:         hasNewOrigin = prevOrigin !== nextOrigin",
      "165:         url = location",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "463:     }",
      "464:   }",
      "465: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482: function removeUnsafeHeaders (headers) {",
      "483:   var safe = {}",
      "484:   for (var key in headers) {",
      "485:     if (/^(cookie|authorization)$/i.test(key)) {",
      "486:       continue",
      "487:     }",
      "489:     safe[key] = headers[key]",
      "490:   }",
      "492:   return safe",
      "493: }",
      "",
      "---------------"
    ],
    "test/eventsource_test.js||test/eventsource_test.js": [
      "File: test/eventsource_test.js -> test/eventsource_test.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "581:       })",
      "582:     })",
      "584:     it('causes error event when response is ' + status + ' with missing location', function (done) {",
      "585:       createServer(function (err, server) {",
      "586:         if (err) return done(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "584:     it('follows http ' + status + ' redirects, drops sensitive headers on origin change', function (done) {",
      "585:       var redirectSuffix = '/foobar'",
      "586:       var clientRequestedRedirectUrl = false",
      "587:       var receivedHeaders = {}",
      "588:       createServer(function (err, server) {",
      "589:         if (err) return done(err)",
      "591:         var newServerUrl = server.url.replace('http://localhost', 'http://127.0.0.1')",
      "593:         server.on('request', function (req, res) {",
      "594:           if (req.url === '/') {",
      "595:             res.writeHead(status, {",
      "596:               'Connection': 'Close',",
      "597:               'Location': newServerUrl + redirectSuffix",
      "598:             })",
      "599:             res.end()",
      "600:           } else if (req.url === redirectSuffix) {",
      "601:             clientRequestedRedirectUrl = true",
      "602:             receivedHeaders = req.headers",
      "603:             res.writeHead(200, {'Content-Type': 'text/event-stream'})",
      "604:             res.end()",
      "605:           }",
      "606:         })",
      "608:         var es = new EventSource(server.url, {",
      "609:           headers: {",
      "610:             keep: 'me',",
      "611:             authorization: 'Bearer someToken',",
      "612:             cookie: 'some-cookie=yep'",
      "613:           }",
      "614:         })",
      "616:         es.onopen = function () {",
      "617:           assert.ok(clientRequestedRedirectUrl)",
      "618:           assert.equal(newServerUrl + redirectSuffix, es.url)",
      "619:           assert.equal(receivedHeaders.keep, 'me', 'safe header no longer present')",
      "620:           assert.equal(typeof receivedHeaders.authorization, 'undefined', 'authorization header still present')",
      "621:           assert.equal(typeof receivedHeaders.cookie, 'undefined', 'cookie header still present')",
      "622:           server.close(done)",
      "623:         }",
      "624:       })",
      "625:     })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc89cfd277ef2bb9946b14e4f5eed85242fc5458",
      "candidate_info": {
        "commit_hash": "dc89cfd277ef2bb9946b14e4f5eed85242fc5458",
        "repo": "eventsource/eventsource",
        "commit_url": "https://github.com/eventsource/eventsource/commit/dc89cfd277ef2bb9946b14e4f5eed85242fc5458",
        "files": [
          "lib/eventsource.js"
        ],
        "message": "refactor: reuse unsafe header regex pattern",
        "before_after_code_files": [
          "lib/eventsource.js||lib/eventsource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/eventsource.js||lib/eventsource.js"
          ],
          "candidate": [
            "lib/eventsource.js||lib/eventsource.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/eventsource.js||lib/eventsource.js": [
          "File: lib/eventsource.js -> lib/eventsource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: var carriageReturn = 13",
          "18: var maxBufferAheadAllocation = 1024 * 256",
          "20: function hasBom (buf) {",
          "21:   return bom.every(function (charCode, index) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: var reUnsafeHeader = /^(cookie|authorization)$/i",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482: function removeUnsafeHeaders (headers) {",
          "483:   var safe = {}",
          "484:   for (var key in headers) {",
          "486:       continue",
          "487:     }",
          "",
          "[Removed Lines]",
          "485:     if (/^(cookie|authorization)$/i.test(key)) {",
          "",
          "[Added Lines]",
          "487:     if (reUnsafeHeader.test(key)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9f6416567bff62c1af2f4314be51d9870e94bc2",
      "candidate_info": {
        "commit_hash": "f9f6416567bff62c1af2f4314be51d9870e94bc2",
        "repo": "eventsource/eventsource",
        "commit_url": "https://github.com/eventsource/eventsource/commit/f9f6416567bff62c1af2f4314be51d9870e94bc2",
        "files": [
          "lib/eventsource.js",
          "test/eventsource_test.js"
        ],
        "message": "fix: strip sensitive headers on redirect to different origin",
        "before_after_code_files": [
          "lib/eventsource.js||lib/eventsource.js",
          "test/eventsource_test.js||test/eventsource_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/eventsource.js||lib/eventsource.js",
            "test/eventsource_test.js||test/eventsource_test.js"
          ],
          "candidate": [
            "lib/eventsource.js||lib/eventsource.js",
            "test/eventsource_test.js||test/eventsource_test.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/eventsource.js||lib/eventsource.js": [
          "File: lib/eventsource.js -> lib/eventsource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: function EventSource (url, eventSourceInitDict) {",
          "33:   var readyState = EventSource.CONNECTING",
          "34:   Object.defineProperty(this, 'readyState', {",
          "35:     get: function () {",
          "36:       return readyState",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   var headers = eventSourceInitDict && eventSourceInitDict.headers",
          "35:   var hasNewOrigin = false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     readyState = EventSource.CONNECTING",
          "53:     _emit('error', new Event('error', {message: message}))",
          "57:     if (reconnectUrl) {",
          "58:       url = reconnectUrl",
          "59:       reconnectUrl = null",
          "60:     }",
          "61:     setTimeout(function () {",
          "62:       if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:       hasNewOrigin = false",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   var req",
          "71:   var lastEventId = ''",
          "75:   }",
          "77:   var discardTrailingNewline = false",
          "",
          "[Removed Lines]",
          "72:   if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {",
          "73:     lastEventId = eventSourceInitDict.headers['Last-Event-ID']",
          "74:     delete eventSourceInitDict.headers['Last-Event-ID']",
          "",
          "[Added Lines]",
          "75:   if (headers && headers['Last-Event-ID']) {",
          "76:     lastEventId = headers['Last-Event-ID']",
          "77:     delete headers['Last-Event-ID']",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     var isSecure = options.protocol === 'https:'",
          "86:     options.headers = { 'Cache-Control': 'no-cache', 'Accept': 'text/event-stream' }",
          "87:     if (lastEventId) options.headers['Last-Event-ID'] = lastEventId",
          "91:         if (header) {",
          "92:           options.headers[i] = header",
          "93:         }",
          "",
          "[Removed Lines]",
          "88:     if (eventSourceInitDict && eventSourceInitDict.headers) {",
          "89:       for (var i in eventSourceInitDict.headers) {",
          "90:         var header = eventSourceInitDict.headers[i]",
          "",
          "[Added Lines]",
          "91:     if (headers) {",
          "92:       var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers",
          "93:       for (var i in reqHeaders) {",
          "94:         var header = reqHeaders[i]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:       if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {",
          "152:           _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))",
          "153:           return",
          "154:         }",
          "155:         if (res.statusCode === 307) reconnectUrl = url",
          "157:         process.nextTick(connect)",
          "158:         return",
          "159:       }",
          "",
          "[Removed Lines]",
          "150:         if (!res.headers.location) {",
          "156:         url = res.headers.location",
          "",
          "[Added Lines]",
          "154:         var location = res.headers.location",
          "155:         if (!location) {",
          "160:         var prevOrigin = original(url)",
          "161:         var nextOrigin = original(location)",
          "162:         hasNewOrigin = prevOrigin !== nextOrigin",
          "164:         url = location",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443:     }",
          "444:   }",
          "445: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "462: function removeUnsafeHeaders (headers) {",
          "463:   var safe = {}",
          "464:   for (var key in headers) {",
          "465:     if (/^(cookie|authorization)$/i.test(key)) {",
          "466:       continue",
          "467:     }",
          "469:     safe[key] = headers[key]",
          "470:   }",
          "472:   return safe",
          "473: }",
          "",
          "---------------"
        ],
        "test/eventsource_test.js||test/eventsource_test.js": [
          "File: test/eventsource_test.js -> test/eventsource_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:       })",
          "582:     })",
          "584:     it('causes error event when response is ' + status + ' with missing location', function (done) {",
          "585:       createServer(function (err, server) {",
          "586:         if (err) return done(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584:     it('follows http ' + status + ' redirects, drops sensitive headers on origin change', function (done) {",
          "585:       var redirectSuffix = '/foobar'",
          "586:       var clientRequestedRedirectUrl = false",
          "587:       var receivedHeaders = {}",
          "588:       createServer(function (err, server) {",
          "589:         if (err) return done(err)",
          "591:         var newServerUrl = server.url.replace('http://localhost', 'http://127.0.0.1')",
          "593:         server.on('request', function (req, res) {",
          "594:           if (req.url === '/') {",
          "595:             res.writeHead(status, {",
          "596:               'Connection': 'Close',",
          "597:               'Location': newServerUrl + redirectSuffix",
          "598:             })",
          "599:             res.end()",
          "600:           } else if (req.url === redirectSuffix) {",
          "601:             clientRequestedRedirectUrl = true",
          "602:             receivedHeaders = req.headers",
          "603:             res.writeHead(200, {'Content-Type': 'text/event-stream'})",
          "604:             res.end()",
          "605:           }",
          "606:         })",
          "608:         var es = new EventSource(server.url, {",
          "609:           headers: {",
          "610:             keep: 'me',",
          "611:             authorization: 'Bearer someToken',",
          "612:             cookie: 'some-cookie=yep'",
          "613:           }",
          "614:         })",
          "616:         es.onopen = function () {",
          "617:           assert.ok(clientRequestedRedirectUrl)",
          "618:           assert.equal(newServerUrl + redirectSuffix, es.url)",
          "619:           assert.equal(receivedHeaders.keep, 'me', 'safe header no longer present')",
          "620:           assert.equal(typeof receivedHeaders.authorization, 'undefined', 'authorization header still present')",
          "621:           assert.equal(typeof receivedHeaders.cookie, 'undefined', 'cookie header still present')",
          "622:           server.close(done)",
          "623:         }",
          "624:       })",
          "625:     })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56d489ef853a891deca121bbd463c732fee94dce",
      "candidate_info": {
        "commit_hash": "56d489ef853a891deca121bbd463c732fee94dce",
        "repo": "eventsource/eventsource",
        "commit_url": "https://github.com/eventsource/eventsource/commit/56d489ef853a891deca121bbd463c732fee94dce",
        "files": [
          "example/eventsource-polyfill.js"
        ],
        "message": "chore: rebuild polyfill",
        "before_after_code_files": [
          "example/eventsource-polyfill.js||example/eventsource-polyfill.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "example/eventsource-polyfill.js||example/eventsource-polyfill.js": [
          "File: example/eventsource-polyfill.js -> example/eventsource-polyfill.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: \"use strict\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: if (typeof Object.create === 'function') {",
          "289:   module.exports = function inherits(ctor, superCtor) {",
          "290:     ctor.super_ = superCtor",
          "291:     ctor.prototype = Object.create(superCtor.prototype, {",
          "292:       constructor: {",
          "293:         value: ctor,",
          "294:         enumerable: false,",
          "295:         writable: true,",
          "296:         configurable: true",
          "297:       }",
          "298:     });",
          "299:   };",
          "300: } else {",
          "302:   module.exports = function inherits(ctor, superCtor) {",
          "303:     ctor.super_ = superCtor",
          "304:     var TempCtor = function () {}",
          "305:     TempCtor.prototype = superCtor.prototype",
          "306:     ctor.prototype = new TempCtor()",
          "307:     ctor.prototype.constructor = ctor",
          "308:   }",
          "309: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: var base64 = __webpack_require__(23)",
          "299: var ieee754 = __webpack_require__(24)",
          "302: exports.Buffer = Buffer",
          "303: exports.SlowBuffer = SlowBuffer",
          "",
          "[Removed Lines]",
          "300: var isArray = __webpack_require__(25)",
          "",
          "[Added Lines]",
          "329: var isArray = __webpack_require__(10)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2127: module.exports = Duplex;",
          "2134: var Readable = __webpack_require__(15);",
          "",
          "[Removed Lines]",
          "2130: var util = __webpack_require__(4);",
          "2131: util.inherits = __webpack_require__(5);",
          "",
          "[Added Lines]",
          "2159: var util = Object.create(__webpack_require__(5));",
          "2160: util.inherits = __webpack_require__(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2326:   return Object.prototype.toString.call(o);",
          "2327: }",
          "",
          "[Removed Lines]",
          "2335: if (typeof Object.create === 'function') {",
          "2337:   module.exports = function inherits(ctor, superCtor) {",
          "2338:     ctor.super_ = superCtor",
          "2339:     ctor.prototype = Object.create(superCtor.prototype, {",
          "2340:       constructor: {",
          "2341:         value: ctor,",
          "2342:         enumerable: false,",
          "2343:         writable: true,",
          "2344:         configurable: true",
          "2345:       }",
          "2346:     });",
          "2347:   };",
          "2348: } else {",
          "2350:   module.exports = function inherits(ctor, superCtor) {",
          "2351:     ctor.super_ = superCtor",
          "2352:     var TempCtor = function () {}",
          "2353:     TempCtor.prototype = superCtor.prototype",
          "2354:     ctor.prototype = new TempCtor()",
          "2355:     ctor.prototype.constructor = ctor",
          "2356:   }",
          "2357: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2364: \"use strict\";",
          "2368:     process.version.indexOf('v0.') === 0 ||",
          "2369:     process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {",
          "2370:   module.exports = { nextTick: nextTick };",
          "",
          "[Removed Lines]",
          "2367: if (!process.version ||",
          "",
          "[Added Lines]",
          "2367: if (typeof process === 'undefined' ||",
          "2368:     !process.version ||",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2416: \"use strict\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2418: var buffer = __webpack_require__(3)",
          "2419: var Buffer = buffer.Buffer",
          "2422: function copyProps (src, dst) {",
          "2423:   for (var key in src) {",
          "2424:     dst[key] = src[key]",
          "2425:   }",
          "2426: }",
          "2427: if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {",
          "2428:   module.exports = buffer",
          "2429: } else {",
          "2431:   copyProps(buffer, exports)",
          "2432:   exports.Buffer = SafeBuffer",
          "2433: }",
          "2435: function SafeBuffer (arg, encodingOrOffset, length) {",
          "2436:   return Buffer(arg, encodingOrOffset, length)",
          "2437: }",
          "2440: copyProps(Buffer, SafeBuffer)",
          "2442: SafeBuffer.from = function (arg, encodingOrOffset, length) {",
          "2443:   if (typeof arg === 'number') {",
          "2444:     throw new TypeError('Argument must not be a number')",
          "2445:   }",
          "2446:   return Buffer(arg, encodingOrOffset, length)",
          "2447: }",
          "2449: SafeBuffer.alloc = function (size, fill, encoding) {",
          "2450:   if (typeof size !== 'number') {",
          "2451:     throw new TypeError('Argument must be a number')",
          "2452:   }",
          "2453:   var buf = Buffer(size)",
          "2454:   if (fill !== undefined) {",
          "2455:     if (typeof encoding === 'string') {",
          "2456:       buf.fill(fill, encoding)",
          "2457:     } else {",
          "2458:       buf.fill(fill)",
          "2459:     }",
          "2460:   } else {",
          "2461:     buf.fill(0)",
          "2462:   }",
          "2463:   return buf",
          "2464: }",
          "2466: SafeBuffer.allocUnsafe = function (size) {",
          "2467:   if (typeof size !== 'number') {",
          "2468:     throw new TypeError('Argument must be a number')",
          "2469:   }",
          "2470:   return Buffer(size)",
          "2471: }",
          "2473: SafeBuffer.allocUnsafeSlow = function (size) {",
          "2474:   if (typeof size !== 'number') {",
          "2475:     throw new TypeError('Argument must be a number')",
          "2476:   }",
          "2477:   return buffer.SlowBuffer(size)",
          "2478: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2443: exports.parse = urlParse;",
          "2444: exports.resolve = urlResolve;",
          "",
          "[Removed Lines]",
          "2440: var punycode = __webpack_require__(30);",
          "2441: var util = __webpack_require__(32);",
          "",
          "[Added Lines]",
          "2509: var punycode = __webpack_require__(29);",
          "2510: var util = __webpack_require__(31);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2513:       'gopher:': true,",
          "2514:       'file:': true",
          "2515:     },",
          "2518: function urlParse(url, parseQueryString, slashesDenoteHost) {",
          "2519:   if (url && util.isObject(url) && url instanceof Url) return url;",
          "",
          "[Removed Lines]",
          "2516:     querystring = __webpack_require__(33);",
          "",
          "[Added Lines]",
          "2585:     querystring = __webpack_require__(32);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3224: \"use strict\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3176: function EventEmitter() {",
          "3179: }",
          "3180: module.exports = EventEmitter;",
          "3183: EventEmitter.EventEmitter = EventEmitter;",
          "3185: EventEmitter.prototype._events = undefined;",
          "3186: EventEmitter.prototype._maxListeners = undefined;",
          "3197:   this._maxListeners = n;",
          "3198:   return this;",
          "3199: };",
          "3220:     }",
          "3221:   }",
          "3226:     return false;",
          "3251:   }",
          "3253:   return true;",
          "3254: };",
          "3257:   var m;",
          "3286:     } else {",
          "3300:     }",
          "3301:   }",
          "3304: };",
          "3306: EventEmitter.prototype.on = EventEmitter.prototype.addListener;",
          "3321:   }",
          "3326:   return this;",
          "3327: };",
          "3355:       }",
          "3359:       return this;",
          "3413: };",
          "3424: };",
          "3431:       return 1;",
          "3433:       return evlistener.length;",
          "3434:   }",
          "3435:   return 0;",
          "3440: };",
          "3448: }",
          "3452: }",
          "3456: }",
          "3483: }",
          "3491:   }",
          "3493: }",
          "3503:     } else {",
          "3506:   } else {",
          "3508:   }",
          "3510: }",
          "3532: var response = __webpack_require__(13)",
          "3537: var http = exports",
          "",
          "[Removed Lines]",
          "3177:   this._events = this._events || {};",
          "3178:   this._maxListeners = this._maxListeners || undefined;",
          "3190: EventEmitter.defaultMaxListeners = 10;",
          "3194: EventEmitter.prototype.setMaxListeners = function(n) {",
          "3195:   if (!isNumber(n) || n < 0 || isNaN(n))",
          "3196:     throw TypeError('n must be a positive number');",
          "3201: EventEmitter.prototype.emit = function(type) {",
          "3202:   var er, handler, len, args, i, listeners;",
          "3204:   if (!this._events)",
          "3205:     this._events = {};",
          "3208:   if (type === 'error') {",
          "3209:     if (!this._events.error ||",
          "3210:         (isObject(this._events.error) && !this._events.error.length)) {",
          "3211:       er = arguments[1];",
          "3212:       if (er instanceof Error) {",
          "3213:         throw er; // Unhandled 'error' event",
          "3214:       } else {",
          "3216:         var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');",
          "3217:         err.context = er;",
          "3218:         throw err;",
          "3219:       }",
          "3223:   handler = this._events[type];",
          "3225:   if (isUndefined(handler))",
          "3228:   if (isFunction(handler)) {",
          "3229:     switch (arguments.length) {",
          "3231:       case 1:",
          "3232:         handler.call(this);",
          "3233:         break;",
          "3234:       case 2:",
          "3235:         handler.call(this, arguments[1]);",
          "3236:         break;",
          "3237:       case 3:",
          "3238:         handler.call(this, arguments[1], arguments[2]);",
          "3239:         break;",
          "3241:       default:",
          "3242:         args = Array.prototype.slice.call(arguments, 1);",
          "3243:         handler.apply(this, args);",
          "3244:     }",
          "3245:   } else if (isObject(handler)) {",
          "3246:     args = Array.prototype.slice.call(arguments, 1);",
          "3247:     listeners = handler.slice();",
          "3248:     len = listeners.length;",
          "3249:     for (i = 0; i < len; i++)",
          "3250:       listeners[i].apply(this, args);",
          "3256: EventEmitter.prototype.addListener = function(type, listener) {",
          "3259:   if (!isFunction(listener))",
          "3260:     throw TypeError('listener must be a function');",
          "3262:   if (!this._events)",
          "3263:     this._events = {};",
          "3267:   if (this._events.newListener)",
          "3268:     this.emit('newListener', type,",
          "3269:               isFunction(listener.listener) ?",
          "3270:               listener.listener : listener);",
          "3272:   if (!this._events[type])",
          "3274:     this._events[type] = listener;",
          "3275:   else if (isObject(this._events[type]))",
          "3277:     this._events[type].push(listener);",
          "3278:   else",
          "3280:     this._events[type] = [this._events[type], listener];",
          "3283:   if (isObject(this._events[type]) && !this._events[type].warned) {",
          "3284:     if (!isUndefined(this._maxListeners)) {",
          "3285:       m = this._maxListeners;",
          "3287:       m = EventEmitter.defaultMaxListeners;",
          "3288:     }",
          "3290:     if (m && m > 0 && this._events[type].length > m) {",
          "3291:       this._events[type].warned = true;",
          "3292:       console.error('(node) warning: possible EventEmitter memory ' +",
          "3293:                     'leak detected. %d listeners added. ' +",
          "3294:                     'Use emitter.setMaxListeners() to increase limit.',",
          "3295:                     this._events[type].length);",
          "3296:       if (typeof console.trace === 'function') {",
          "3298:         console.trace();",
          "3299:       }",
          "3303:   return this;",
          "3308: EventEmitter.prototype.once = function(type, listener) {",
          "3309:   if (!isFunction(listener))",
          "3310:     throw TypeError('listener must be a function');",
          "3312:   var fired = false;",
          "3314:   function g() {",
          "3315:     this.removeListener(type, g);",
          "3317:     if (!fired) {",
          "3318:       fired = true;",
          "3319:       listener.apply(this, arguments);",
          "3320:     }",
          "3323:   g.listener = listener;",
          "3324:   this.on(type, g);",
          "3330: EventEmitter.prototype.removeListener = function(type, listener) {",
          "3331:   var list, position, length, i;",
          "3333:   if (!isFunction(listener))",
          "3334:     throw TypeError('listener must be a function');",
          "3336:   if (!this._events || !this._events[type])",
          "3337:     return this;",
          "3339:   list = this._events[type];",
          "3340:   length = list.length;",
          "3341:   position = -1;",
          "3343:   if (list === listener ||",
          "3344:       (isFunction(list.listener) && list.listener === listener)) {",
          "3345:     delete this._events[type];",
          "3346:     if (this._events.removeListener)",
          "3347:       this.emit('removeListener', type, listener);",
          "3349:   } else if (isObject(list)) {",
          "3350:     for (i = length; i-- > 0;) {",
          "3351:       if (list[i] === listener ||",
          "3352:           (list[i].listener && list[i].listener === listener)) {",
          "3353:         position = i;",
          "3354:         break;",
          "3356:     }",
          "3358:     if (position < 0)",
          "3361:     if (list.length === 1) {",
          "3362:       list.length = 0;",
          "3363:       delete this._events[type];",
          "3364:     } else {",
          "3365:       list.splice(position, 1);",
          "3366:     }",
          "3368:     if (this._events.removeListener)",
          "3369:       this.emit('removeListener', type, listener);",
          "3370:   }",
          "3372:   return this;",
          "3373: };",
          "3375: EventEmitter.prototype.removeAllListeners = function(type) {",
          "3376:   var key, listeners;",
          "3378:   if (!this._events)",
          "3379:     return this;",
          "3382:   if (!this._events.removeListener) {",
          "3383:     if (arguments.length === 0)",
          "3384:       this._events = {};",
          "3385:     else if (this._events[type])",
          "3386:       delete this._events[type];",
          "3387:     return this;",
          "3388:   }",
          "3391:   if (arguments.length === 0) {",
          "3392:     for (key in this._events) {",
          "3393:       if (key === 'removeListener') continue;",
          "3394:       this.removeAllListeners(key);",
          "3395:     }",
          "3396:     this.removeAllListeners('removeListener');",
          "3397:     this._events = {};",
          "3398:     return this;",
          "3399:   }",
          "3401:   listeners = this._events[type];",
          "3403:   if (isFunction(listeners)) {",
          "3404:     this.removeListener(type, listeners);",
          "3405:   } else if (listeners) {",
          "3407:     while (listeners.length)",
          "3408:       this.removeListener(type, listeners[listeners.length - 1]);",
          "3409:   }",
          "3410:   delete this._events[type];",
          "3412:   return this;",
          "3415: EventEmitter.prototype.listeners = function(type) {",
          "3416:   var ret;",
          "3417:   if (!this._events || !this._events[type])",
          "3418:     ret = [];",
          "3419:   else if (isFunction(this._events[type]))",
          "3420:     ret = [this._events[type]];",
          "3421:   else",
          "3422:     ret = this._events[type].slice();",
          "3423:   return ret;",
          "3426: EventEmitter.prototype.listenerCount = function(type) {",
          "3427:   if (this._events) {",
          "3428:     var evlistener = this._events[type];",
          "3430:     if (isFunction(evlistener))",
          "3432:     else if (evlistener)",
          "3436: };",
          "3438: EventEmitter.listenerCount = function(emitter, type) {",
          "3439:   return emitter.listenerCount(type);",
          "3442: function isFunction(arg) {",
          "3443:   return typeof arg === 'function';",
          "3444: }",
          "3446: function isNumber(arg) {",
          "3447:   return typeof arg === 'number';",
          "3450: function isObject(arg) {",
          "3451:   return typeof arg === 'object' && arg !== null;",
          "3454: function isUndefined(arg) {",
          "3455:   return arg === void 0;",
          "3464: var buffer = __webpack_require__(2)",
          "3465: var Buffer = buffer.Buffer",
          "3468: function copyProps (src, dst) {",
          "3469:   for (var key in src) {",
          "3470:     dst[key] = src[key]",
          "3471:   }",
          "3472: }",
          "3473: if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {",
          "3474:   module.exports = buffer",
          "3475: } else {",
          "3477:   copyProps(buffer, exports)",
          "3478:   exports.Buffer = SafeBuffer",
          "3479: }",
          "3481: function SafeBuffer (arg, encodingOrOffset, length) {",
          "3482:   return Buffer(arg, encodingOrOffset, length)",
          "3486: copyProps(Buffer, SafeBuffer)",
          "3488: SafeBuffer.from = function (arg, encodingOrOffset, length) {",
          "3489:   if (typeof arg === 'number') {",
          "3490:     throw new TypeError('Argument must not be a number')",
          "3492:   return Buffer(arg, encodingOrOffset, length)",
          "3495: SafeBuffer.alloc = function (size, fill, encoding) {",
          "3496:   if (typeof size !== 'number') {",
          "3497:     throw new TypeError('Argument must be a number')",
          "3498:   }",
          "3499:   var buf = Buffer(size)",
          "3500:   if (fill !== undefined) {",
          "3501:     if (typeof encoding === 'string') {",
          "3502:       buf.fill(fill, encoding)",
          "3504:       buf.fill(fill)",
          "3505:     }",
          "3507:     buf.fill(0)",
          "3509:   return buf",
          "3512: SafeBuffer.allocUnsafe = function (size) {",
          "3513:   if (typeof size !== 'number') {",
          "3514:     throw new TypeError('Argument must be a number')",
          "3515:   }",
          "3516:   return Buffer(size)",
          "3517: }",
          "3519: SafeBuffer.allocUnsafeSlow = function (size) {",
          "3520:   if (typeof size !== 'number') {",
          "3521:     throw new TypeError('Argument must be a number')",
          "3522:   }",
          "3523:   return buffer.SlowBuffer(size)",
          "3524: }",
          "3533: var extend = __webpack_require__(48)",
          "3534: var statusCodes = __webpack_require__(49)",
          "3535: var url = __webpack_require__(7)",
          "",
          "[Added Lines]",
          "3248: var R = typeof Reflect === 'object' ? Reflect : null",
          "3249: var ReflectApply = R && typeof R.apply === 'function'",
          "3250:   ? R.apply",
          "3251:   : function ReflectApply(target, receiver, args) {",
          "3252:     return Function.prototype.apply.call(target, receiver, args);",
          "3253:   }",
          "3255: var ReflectOwnKeys",
          "3256: if (R && typeof R.ownKeys === 'function') {",
          "3257:   ReflectOwnKeys = R.ownKeys",
          "3258: } else if (Object.getOwnPropertySymbols) {",
          "3259:   ReflectOwnKeys = function ReflectOwnKeys(target) {",
          "3260:     return Object.getOwnPropertyNames(target)",
          "3261:       .concat(Object.getOwnPropertySymbols(target));",
          "3262:   };",
          "3263: } else {",
          "3264:   ReflectOwnKeys = function ReflectOwnKeys(target) {",
          "3265:     return Object.getOwnPropertyNames(target);",
          "3266:   };",
          "3267: }",
          "3269: function ProcessEmitWarning(warning) {",
          "3270:   if (console && console.warn) console.warn(warning);",
          "3271: }",
          "3273: var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {",
          "3274:   return value !== value;",
          "3275: }",
          "3278:   EventEmitter.init.call(this);",
          "3281: module.exports.once = once;",
          "3287: EventEmitter.prototype._eventsCount = 0;",
          "3292: var defaultMaxListeners = 10;",
          "3294: function checkListener(listener) {",
          "3295:   if (typeof listener !== 'function') {",
          "3296:     throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);",
          "3297:   }",
          "3298: }",
          "3300: Object.defineProperty(EventEmitter, 'defaultMaxListeners', {",
          "3301:   enumerable: true,",
          "3302:   get: function() {",
          "3303:     return defaultMaxListeners;",
          "3304:   },",
          "3305:   set: function(arg) {",
          "3306:     if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {",
          "3307:       throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');",
          "3308:     }",
          "3309:     defaultMaxListeners = arg;",
          "3310:   }",
          "3311: });",
          "3313: EventEmitter.init = function() {",
          "3315:   if (this._events === undefined ||",
          "3316:       this._events === Object.getPrototypeOf(this)._events) {",
          "3317:     this._events = Object.create(null);",
          "3318:     this._eventsCount = 0;",
          "3319:   }",
          "3321:   this._maxListeners = this._maxListeners || undefined;",
          "3322: };",
          "3326: EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {",
          "3327:   if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {",
          "3328:     throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');",
          "3329:   }",
          "3334: function _getMaxListeners(that) {",
          "3335:   if (that._maxListeners === undefined)",
          "3336:     return EventEmitter.defaultMaxListeners;",
          "3337:   return that._maxListeners;",
          "3338: }",
          "3340: EventEmitter.prototype.getMaxListeners = function getMaxListeners() {",
          "3341:   return _getMaxListeners(this);",
          "3342: };",
          "3344: EventEmitter.prototype.emit = function emit(type) {",
          "3345:   var args = [];",
          "3346:   for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);",
          "3347:   var doError = (type === 'error');",
          "3349:   var events = this._events;",
          "3350:   if (events !== undefined)",
          "3351:     doError = (doError && events.error === undefined);",
          "3352:   else if (!doError)",
          "3353:     return false;",
          "3356:   if (doError) {",
          "3357:     var er;",
          "3358:     if (args.length > 0)",
          "3359:       er = args[0];",
          "3360:     if (er instanceof Error) {",
          "3363:       throw er; // Unhandled 'error' event",
          "3366:     var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));",
          "3367:     err.context = er;",
          "3368:     throw err; // Unhandled 'error' event",
          "3371:   var handler = events[type];",
          "3373:   if (handler === undefined)",
          "3376:   if (typeof handler === 'function') {",
          "3377:     ReflectApply(handler, this, args);",
          "3378:   } else {",
          "3379:     var len = handler.length;",
          "3380:     var listeners = arrayClone(handler, len);",
          "3381:     for (var i = 0; i < len; ++i)",
          "3382:       ReflectApply(listeners[i], this, args);",
          "3388: function _addListener(target, type, listener, prepend) {",
          "3390:   var events;",
          "3391:   var existing;",
          "3393:   checkListener(listener);",
          "3395:   events = target._events;",
          "3396:   if (events === undefined) {",
          "3397:     events = target._events = Object.create(null);",
          "3398:     target._eventsCount = 0;",
          "3399:   } else {",
          "3402:     if (events.newListener !== undefined) {",
          "3403:       target.emit('newListener', type,",
          "3404:                   listener.listener ? listener.listener : listener);",
          "3408:       events = target._events;",
          "3409:     }",
          "3410:     existing = events[type];",
          "3411:   }",
          "3413:   if (existing === undefined) {",
          "3415:     existing = events[type] = listener;",
          "3416:     ++target._eventsCount;",
          "3417:   } else {",
          "3418:     if (typeof existing === 'function') {",
          "3420:       existing = events[type] =",
          "3421:         prepend ? [listener, existing] : [existing, listener];",
          "3423:     } else if (prepend) {",
          "3424:       existing.unshift(listener);",
          "3426:       existing.push(listener);",
          "3427:     }",
          "3430:     m = _getMaxListeners(target);",
          "3431:     if (m > 0 && existing.length > m && !existing.warned) {",
          "3432:       existing.warned = true;",
          "3435:       var w = new Error('Possible EventEmitter memory leak detected. ' +",
          "3436:                           existing.length + ' ' + String(type) + ' listeners ' +",
          "3437:                           'added. Use emitter.setMaxListeners() to ' +",
          "3438:                           'increase limit');",
          "3439:       w.name = 'MaxListenersExceededWarning';",
          "3440:       w.emitter = target;",
          "3441:       w.type = type;",
          "3442:       w.count = existing.length;",
          "3443:       ProcessEmitWarning(w);",
          "3447:   return target;",
          "3448: }",
          "3450: EventEmitter.prototype.addListener = function addListener(type, listener) {",
          "3451:   return _addListener(this, type, listener, false);",
          "3456: EventEmitter.prototype.prependListener =",
          "3457:     function prependListener(type, listener) {",
          "3458:       return _addListener(this, type, listener, true);",
          "3459:     };",
          "3461: function onceWrapper() {",
          "3462:   if (!this.fired) {",
          "3463:     this.target.removeListener(this.type, this.wrapFn);",
          "3464:     this.fired = true;",
          "3465:     if (arguments.length === 0)",
          "3466:       return this.listener.call(this.target);",
          "3467:     return this.listener.apply(this.target, arguments);",
          "3469: }",
          "3471: function _onceWrap(target, type, listener) {",
          "3472:   var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };",
          "3473:   var wrapped = onceWrapper.bind(state);",
          "3474:   wrapped.listener = listener;",
          "3475:   state.wrapFn = wrapped;",
          "3476:   return wrapped;",
          "3477: }",
          "3479: EventEmitter.prototype.once = function once(type, listener) {",
          "3480:   checkListener(listener);",
          "3481:   this.on(type, _onceWrap(this, type, listener));",
          "3485: EventEmitter.prototype.prependOnceListener =",
          "3486:     function prependOnceListener(type, listener) {",
          "3487:       checkListener(listener);",
          "3488:       this.prependListener(type, _onceWrap(this, type, listener));",
          "3489:       return this;",
          "3490:     };",
          "3493: EventEmitter.prototype.removeListener =",
          "3494:     function removeListener(type, listener) {",
          "3495:       var list, events, position, i, originalListener;",
          "3497:       checkListener(listener);",
          "3499:       events = this._events;",
          "3500:       if (events === undefined)",
          "3501:         return this;",
          "3503:       list = events[type];",
          "3504:       if (list === undefined)",
          "3505:         return this;",
          "3507:       if (list === listener || list.listener === listener) {",
          "3508:         if (--this._eventsCount === 0)",
          "3509:           this._events = Object.create(null);",
          "3510:         else {",
          "3511:           delete events[type];",
          "3512:           if (events.removeListener)",
          "3513:             this.emit('removeListener', type, list.listener || listener);",
          "3514:         }",
          "3515:       } else if (typeof list !== 'function') {",
          "3516:         position = -1;",
          "3518:         for (i = list.length - 1; i >= 0; i--) {",
          "3519:           if (list[i] === listener || list[i].listener === listener) {",
          "3520:             originalListener = list[i].listener;",
          "3521:             position = i;",
          "3522:             break;",
          "3523:           }",
          "3524:         }",
          "3526:         if (position < 0)",
          "3527:           return this;",
          "3529:         if (position === 0)",
          "3530:           list.shift();",
          "3531:         else {",
          "3532:           spliceOne(list, position);",
          "3533:         }",
          "3535:         if (list.length === 1)",
          "3536:           events[type] = list[0];",
          "3538:         if (events.removeListener !== undefined)",
          "3539:           this.emit('removeListener', type, originalListener || listener);",
          "3543:     };",
          "3545: EventEmitter.prototype.off = EventEmitter.prototype.removeListener;",
          "3547: EventEmitter.prototype.removeAllListeners =",
          "3548:     function removeAllListeners(type) {",
          "3549:       var listeners, events, i;",
          "3551:       events = this._events;",
          "3552:       if (events === undefined)",
          "3553:         return this;",
          "3556:       if (events.removeListener === undefined) {",
          "3557:         if (arguments.length === 0) {",
          "3558:           this._events = Object.create(null);",
          "3559:           this._eventsCount = 0;",
          "3560:         } else if (events[type] !== undefined) {",
          "3561:           if (--this._eventsCount === 0)",
          "3562:             this._events = Object.create(null);",
          "3563:           else",
          "3564:             delete events[type];",
          "3565:         }",
          "3566:         return this;",
          "3567:       }",
          "3570:       if (arguments.length === 0) {",
          "3571:         var keys = Object.keys(events);",
          "3572:         var key;",
          "3573:         for (i = 0; i < keys.length; ++i) {",
          "3574:           key = keys[i];",
          "3575:           if (key === 'removeListener') continue;",
          "3576:           this.removeAllListeners(key);",
          "3577:         }",
          "3578:         this.removeAllListeners('removeListener');",
          "3579:         this._events = Object.create(null);",
          "3580:         this._eventsCount = 0;",
          "3581:         return this;",
          "3582:       }",
          "3584:       listeners = events[type];",
          "3586:       if (typeof listeners === 'function') {",
          "3587:         this.removeListener(type, listeners);",
          "3588:       } else if (listeners !== undefined) {",
          "3590:         for (i = listeners.length - 1; i >= 0; i--) {",
          "3591:           this.removeListener(type, listeners[i]);",
          "3592:         }",
          "3593:       }",
          "3595:       return this;",
          "3596:     };",
          "3598: function _listeners(target, type, unwrap) {",
          "3599:   var events = target._events;",
          "3601:   if (events === undefined)",
          "3602:     return [];",
          "3604:   var evlistener = events[type];",
          "3605:   if (evlistener === undefined)",
          "3606:     return [];",
          "3608:   if (typeof evlistener === 'function')",
          "3609:     return unwrap ? [evlistener.listener || evlistener] : [evlistener];",
          "3611:   return unwrap ?",
          "3612:     unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);",
          "3613: }",
          "3615: EventEmitter.prototype.listeners = function listeners(type) {",
          "3616:   return _listeners(this, type, true);",
          "3619: EventEmitter.prototype.rawListeners = function rawListeners(type) {",
          "3620:   return _listeners(this, type, false);",
          "3623: EventEmitter.listenerCount = function(emitter, type) {",
          "3624:   if (typeof emitter.listenerCount === 'function') {",
          "3625:     return emitter.listenerCount(type);",
          "3626:   } else {",
          "3627:     return listenerCount.call(emitter, type);",
          "3628:   }",
          "3629: };",
          "3631: EventEmitter.prototype.listenerCount = listenerCount;",
          "3632: function listenerCount(type) {",
          "3633:   var events = this._events;",
          "3635:   if (events !== undefined) {",
          "3636:     var evlistener = events[type];",
          "3638:     if (typeof evlistener === 'function') {",
          "3640:     } else if (evlistener !== undefined) {",
          "3642:     }",
          "3646: }",
          "3648: EventEmitter.prototype.eventNames = function eventNames() {",
          "3649:   return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];",
          "3652: function arrayClone(arr, n) {",
          "3653:   var copy = new Array(n);",
          "3654:   for (var i = 0; i < n; ++i)",
          "3655:     copy[i] = arr[i];",
          "3656:   return copy;",
          "3659: function spliceOne(list, index) {",
          "3660:   for (; index + 1 < list.length; index++)",
          "3661:     list[index] = list[index + 1];",
          "3662:   list.pop();",
          "3665: function unwrapListeners(arr) {",
          "3666:   var ret = new Array(arr.length);",
          "3667:   for (var i = 0; i < ret.length; ++i) {",
          "3668:     ret[i] = arr[i].listener || arr[i];",
          "3669:   }",
          "3670:   return ret;",
          "3673: function once(emitter, name) {",
          "3674:   return new Promise(function (resolve, reject) {",
          "3675:     function errorListener(err) {",
          "3676:       emitter.removeListener(name, resolver);",
          "3677:       reject(err);",
          "3678:     }",
          "3680:     function resolver() {",
          "3681:       if (typeof emitter.removeListener === 'function') {",
          "3682:         emitter.removeListener('error', errorListener);",
          "3683:       }",
          "3684:       resolve([].slice.call(arguments));",
          "3685:     };",
          "3687:     eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });",
          "3688:     if (name !== 'error') {",
          "3689:       addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });",
          "3690:     }",
          "3691:   });",
          "3694: function addErrorHandlerIfEventEmitter(emitter, handler, flags) {",
          "3695:   if (typeof emitter.on === 'function') {",
          "3696:     eventTargetAgnosticAddListener(emitter, 'error', handler, flags);",
          "3700: function eventTargetAgnosticAddListener(emitter, name, listener, flags) {",
          "3701:   if (typeof emitter.on === 'function') {",
          "3702:     if (flags.once) {",
          "3703:       emitter.once(name, listener);",
          "3705:       emitter.on(name, listener);",
          "3706:     }",
          "3707:   } else if (typeof emitter.addEventListener === 'function') {",
          "3710:     emitter.addEventListener(name, function wrapListener(arg) {",
          "3713:       if (flags.once) {",
          "3714:         emitter.removeEventListener(name, wrapListener);",
          "3715:       }",
          "3716:       listener(arg);",
          "3717:     });",
          "3719:     throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);",
          "3728: var toString = {}.toString;",
          "3730: module.exports = Array.isArray || function (arr) {",
          "3731:   return toString.call(arr) == '[object Array]';",
          "3732: };",
          "3741: var extend = __webpack_require__(45)",
          "3742: var statusCodes = __webpack_require__(46)",
          "3743: var url = __webpack_require__(8)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3733: var stream = __webpack_require__(14)",
          "3735: var rStates = exports.readyStates = {",
          "",
          "[Removed Lines]",
          "3702: if (typeof Object.create === 'function') {",
          "3704:   module.exports = function inherits(ctor, superCtor) {",
          "3705:     ctor.super_ = superCtor",
          "3706:     ctor.prototype = Object.create(superCtor.prototype, {",
          "3707:       constructor: {",
          "3708:         value: ctor,",
          "3709:         enumerable: false,",
          "3710:         writable: true,",
          "3711:         configurable: true",
          "3712:       }",
          "3713:     });",
          "3714:   };",
          "3715: } else {",
          "3717:   module.exports = function inherits(ctor, superCtor) {",
          "3718:     ctor.super_ = superCtor",
          "3719:     var TempCtor = function () {}",
          "3720:     TempCtor.prototype = superCtor.prototype",
          "3721:     ctor.prototype = new TempCtor()",
          "3722:     ctor.prototype.constructor = ctor",
          "3723:   }",
          "3724: }",
          "3732: var inherits = __webpack_require__(12)",
          "",
          "[Added Lines]",
          "3911: var inherits = __webpack_require__(2)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3963: exports.Stream = exports;",
          "3964: exports.Readable = exports;",
          "3965: exports.Writable = __webpack_require__(18);",
          "3967: exports.Transform = __webpack_require__(20);",
          "",
          "[Removed Lines]",
          "3966: exports.Duplex = __webpack_require__(3);",
          "3968: exports.PassThrough = __webpack_require__(46);",
          "",
          "[Added Lines]",
          "4145: exports.Duplex = __webpack_require__(4);",
          "4147: exports.PassThrough = __webpack_require__(43);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4004: module.exports = Readable;",
          "",
          "[Removed Lines]",
          "4007: var isArray = __webpack_require__(38);",
          "",
          "[Added Lines]",
          "4186: var isArray = __webpack_require__(10);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4014: Readable.ReadableState = ReadableState;",
          "4019: var EElistenerCount = function (emitter, type) {",
          "4020:   return emitter.listeners(type).length;",
          "",
          "[Removed Lines]",
          "4017: var EE = __webpack_require__(8).EventEmitter;",
          "",
          "[Added Lines]",
          "4196: var EE = __webpack_require__(9).EventEmitter;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4031: var OurUint8Array = global.Uint8Array || function () {};",
          "4032: function _uint8ArrayToBuffer(chunk) {",
          "4033:   return Buffer.from(chunk);",
          "",
          "[Removed Lines]",
          "4030: var Buffer = __webpack_require__(9).Buffer;",
          "",
          "[Added Lines]",
          "4209: var Buffer = __webpack_require__(7).Buffer;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4048: var debug = void 0;",
          "4049: if (debugUtil && debugUtil.debuglog) {",
          "4050:   debug = debugUtil.debuglog('stream');",
          "",
          "[Removed Lines]",
          "4042: var util = __webpack_require__(4);",
          "4043: util.inherits = __webpack_require__(5);",
          "4047: var debugUtil = __webpack_require__(39);",
          "",
          "[Added Lines]",
          "4221: var util = Object.create(__webpack_require__(5));",
          "4222: util.inherits = __webpack_require__(2);",
          "4226: var debugUtil = __webpack_require__(37);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4053: }",
          "4057: var destroyImpl = __webpack_require__(17);",
          "4058: var StringDecoder;",
          "",
          "[Removed Lines]",
          "4056: var BufferList = __webpack_require__(40);",
          "",
          "[Added Lines]",
          "4235: var BufferList = __webpack_require__(38);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4074: }",
          "4076: function ReadableState(options, stream) {",
          "4079:   options = options || {};",
          "",
          "[Removed Lines]",
          "4077:   Duplex = Duplex || __webpack_require__(3);",
          "",
          "[Added Lines]",
          "4256:   Duplex = Duplex || __webpack_require__(4);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4151: }",
          "4153: function Readable(options) {",
          "4156:   if (!(this instanceof Readable)) return new Readable(options);",
          "",
          "[Removed Lines]",
          "4154:   Duplex = Duplex || __webpack_require__(3);",
          "",
          "[Added Lines]",
          "4333:   Duplex = Duplex || __webpack_require__(4);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "5001: module.exports = __webpack_require__(8).EventEmitter;",
          "",
          "[Added Lines]",
          "5180: module.exports = __webpack_require__(9).EventEmitter;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5152: Writable.WritableState = WritableState;",
          "5160: var internalUtil = {",
          "5162: };",
          "",
          "[Removed Lines]",
          "5155: var util = __webpack_require__(4);",
          "5156: util.inherits = __webpack_require__(5);",
          "5161:   deprecate: __webpack_require__(44)",
          "",
          "[Added Lines]",
          "5334: var util = Object.create(__webpack_require__(5));",
          "5335: util.inherits = __webpack_require__(2);",
          "5340:   deprecate: __webpack_require__(42)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5172: var OurUint8Array = global.Uint8Array || function () {};",
          "5173: function _uint8ArrayToBuffer(chunk) {",
          "5174:   return Buffer.from(chunk);",
          "",
          "[Removed Lines]",
          "5171: var Buffer = __webpack_require__(9).Buffer;",
          "",
          "[Added Lines]",
          "5350: var Buffer = __webpack_require__(7).Buffer;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5186: function nop() {}",
          "5188: function WritableState(options, stream) {",
          "5191:   options = options || {};",
          "",
          "[Removed Lines]",
          "5189:   Duplex = Duplex || __webpack_require__(3);",
          "",
          "[Added Lines]",
          "5368:   Duplex = Duplex || __webpack_require__(4);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5336: }",
          "5338: function Writable(options) {",
          "",
          "[Removed Lines]",
          "5339:   Duplex = Duplex || __webpack_require__(3);",
          "",
          "[Added Lines]",
          "5518:   Duplex = Duplex || __webpack_require__(4);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5811: var isEncoding = Buffer.isEncoding || function (encoding) {",
          "",
          "[Removed Lines]",
          "5808: var Buffer = __webpack_require__(45).Buffer;",
          "",
          "[Added Lines]",
          "5987: var Buffer = __webpack_require__(7).Buffer;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "6150: module.exports = Transform;",
          "6159: util.inherits(Transform, Duplex);",
          "",
          "[Removed Lines]",
          "6152: var Duplex = __webpack_require__(3);",
          "6155: var util = __webpack_require__(4);",
          "6156: util.inherits = __webpack_require__(5);",
          "",
          "[Added Lines]",
          "6331: var Duplex = __webpack_require__(4);",
          "6334: var util = Object.create(__webpack_require__(5));",
          "6335: util.inherits = __webpack_require__(2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "6326: var httpsOptions = [",
          "6327:   'pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers',",
          "6329: ]",
          "6331: var bom = [239, 187, 191]",
          "",
          "[Removed Lines]",
          "6320: var parse = __webpack_require__(7).parse",
          "6321: var events = __webpack_require__(8)",
          "6322: var https = __webpack_require__(36)",
          "6323: var http = __webpack_require__(10)",
          "6324: var util = __webpack_require__(50)",
          "6328:   'rejectUnauthorized', 'secureProtocol', 'servername'",
          "",
          "[Added Lines]",
          "6499: var parse = __webpack_require__(8).parse",
          "6500: var events = __webpack_require__(9)",
          "6501: var https = __webpack_require__(35)",
          "6502: var http = __webpack_require__(11)",
          "6503: var util = __webpack_require__(47)",
          "6507:   'rejectUnauthorized', 'secureProtocol', 'servername', 'checkServerIdentity'",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6350: function EventSource (url, eventSourceInitDict) {",
          "6351:   var readyState = EventSource.CONNECTING",
          "6352:   Object.defineProperty(this, 'readyState', {",
          "6353:     get: function () {",
          "6354:       return readyState",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6531:   var headers = eventSourceInitDict && eventSourceInitDict.headers",
          "6532:   var hasNewOrigin = false",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6364:   var self = this",
          "6365:   self.reconnectInterval = 1000",
          "6368:     if (readyState === EventSource.CLOSED) return",
          "6369:     readyState = EventSource.CONNECTING",
          "6374:     if (reconnectUrl) {",
          "6375:       url = reconnectUrl",
          "6376:       reconnectUrl = null",
          "6377:     }",
          "6378:     setTimeout(function () {",
          "6380:         return",
          "6381:       }",
          "6382:       connect()",
          "6383:     }, self.reconnectInterval)",
          "6384:   }",
          "6386:   var req",
          "6387:   var lastEventId = ''",
          "6391:   }",
          "6393:   var discardTrailingNewline = false",
          "",
          "[Removed Lines]",
          "6367:   function onConnectionClosed () {",
          "6370:     _emit('error', new Event('error'))",
          "6379:       if (readyState !== EventSource.CONNECTING) {",
          "6388:   if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {",
          "6389:     lastEventId = eventSourceInitDict.headers['Last-Event-ID']",
          "6390:     delete eventSourceInitDict.headers['Last-Event-ID']",
          "",
          "[Added Lines]",
          "6547:   self.connectionInProgress = false",
          "6549:   function onConnectionClosed (message) {",
          "6552:     _emit('error', new Event('error', {message: message}))",
          "6559:       hasNewOrigin = false",
          "6562:       if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {",
          "6565:       self.connectionInProgress = true",
          "6572:   if (headers && headers['Last-Event-ID']) {",
          "6573:     lastEventId = headers['Last-Event-ID']",
          "6574:     delete headers['Last-Event-ID']",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6401:     var isSecure = options.protocol === 'https:'",
          "6402:     options.headers = { 'Cache-Control': 'no-cache', 'Accept': 'text/event-stream' }",
          "6403:     if (lastEventId) options.headers['Last-Event-ID'] = lastEventId",
          "6407:         if (header) {",
          "6408:           options.headers[i] = header",
          "6409:         }",
          "",
          "[Removed Lines]",
          "6404:     if (eventSourceInitDict && eventSourceInitDict.headers) {",
          "6405:       for (var i in eventSourceInitDict.headers) {",
          "6406:         var header = eventSourceInitDict.headers[i]",
          "",
          "[Added Lines]",
          "6588:     if (headers) {",
          "6589:       var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers",
          "6590:       for (var i in reqHeaders) {",
          "6591:         var header = reqHeaders[i]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6415:     options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized)",
          "6419:     var useProxy = eventSourceInitDict && eventSourceInitDict.proxy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6602:     if (eventSourceInitDict && eventSourceInitDict.createConnection !== undefined) {",
          "6603:       options.createConnection = eventSourceInitDict.createConnection",
          "6604:     }",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6449:     }",
          "6451:     req = (isSecure ? https : http).request(options, function (res) {",
          "6453:       if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {",
          "6455:         onConnectionClosed()",
          "6456:         return",
          "6457:       }",
          "6460:       if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {",
          "6464:           return",
          "6465:         }",
          "6466:         if (res.statusCode === 307) reconnectUrl = url",
          "6468:         process.nextTick(connect)",
          "6469:         return",
          "6470:       }",
          "6472:       if (res.statusCode !== 200) {",
          "6474:         return self.close()",
          "6475:       }",
          "",
          "[Removed Lines]",
          "6454:         _emit('error', new Event('error', {status: res.statusCode}))",
          "6461:         if (!res.headers.location) {",
          "6463:           _emit('error', new Event('error', {status: res.statusCode}))",
          "6467:         url = res.headers.location",
          "6473:         _emit('error', new Event('error', {status: res.statusCode}))",
          "",
          "[Added Lines]",
          "6641:       self.connectionInProgress = false",
          "6644:         _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))",
          "6651:         var location = res.headers.location",
          "6652:         if (!location) {",
          "6654:           _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))",
          "6657:         var prevOrigin = original(url)",
          "6658:         var nextOrigin = original(location)",
          "6659:         hasNewOrigin = prevOrigin !== nextOrigin",
          "6661:         url = location",
          "6667:         _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "6493:       var isFirst = true",
          "6494:       var buf",
          "6495:       res.on('data', function (chunk) {",
          "6496:         buf = buf ? Buffer.concat([buf, chunk]) : chunk",
          "6497:         if (isFirst && hasBom(buf)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6689:       var startingPos = 0",
          "6690:       var startingFieldLength = -1",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "6511:           }",
          "6513:           var lineLength = -1",
          "6515:           var c",
          "6518:             c = buf[i]",
          "6519:             if (c === colon) {",
          "6520:               if (fieldLength < 0) {",
          "",
          "[Removed Lines]",
          "6514:           var fieldLength = -1",
          "6517:           for (var i = pos; lineLength < 0 && i < length; ++i) {",
          "",
          "[Added Lines]",
          "6710:           var fieldLength = startingFieldLength",
          "6713:           for (var i = startingPos; lineLength < 0 && i < length; ++i) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "6529:           }",
          "6531:           if (lineLength < 0) {",
          "6532:             break",
          "6533:           }",
          "6535:           parseEventStreamLine(buf, pos, fieldLength, lineLength)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6728:             startingPos = length - pos",
          "6729:             startingFieldLength = fieldLength",
          "6731:           } else {",
          "6732:             startingPos = 0",
          "6733:             startingFieldLength = -1",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "6545:       })",
          "6546:     })",
          "6549:     if (req.setNoDelay) req.setNoDelay(true)",
          "6550:     req.end()",
          "6551:   }",
          "",
          "[Removed Lines]",
          "6548:     req.on('error', onConnectionClosed)",
          "",
          "[Added Lines]",
          "6749:     req.on('error', function (err) {",
          "6750:       self.connectionInProgress = false",
          "6751:       onConnectionClosed(err.message)",
          "6752:     })",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "6680:   }",
          "6681: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6895: EventSource.prototype.dispatchEvent = function dispatchEvent (event) {",
          "6896:   if (!event.type) {",
          "6897:     throw new Error('UNSPECIFIED_EVENT_TYPE_ERR')",
          "6898:   }",
          "6901:   this.emit(event.type, event.detail)",
          "6902: }",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "6727:     }",
          "6728:   }",
          "6729: }",
          "",
          "[Removed Lines]",
          "6722: function MessageEvent (type, eventInitDict) {",
          "6723:   Object.defineProperty(this, 'type', { writable: false, value: type, enumerable: true })",
          "6724:   for (var f in eventInitDict) {",
          "6725:     if (eventInitDict.hasOwnProperty(f)) {",
          "6726:       Object.defineProperty(this, f, { writable: false, value: eventInitDict[f], enumerable: true })",
          "",
          "[Added Lines]",
          "6943: function MessageEvent (type, eventInitDict) {",
          "6944:   Object.defineProperty(this, 'type', { writable: false, value: type, enumerable: true })",
          "6945:   for (var f in eventInitDict) {",
          "6946:     if (eventInitDict.hasOwnProperty(f)) {",
          "6947:       Object.defineProperty(this, f, { writable: false, value: eventInitDict[f], enumerable: true })",
          "6948:     }",
          "6949:   }",
          "6950: }",
          "6959: function removeUnsafeHeaders (headers) {",
          "6960:   var safe = {}",
          "6961:   for (var key in headers) {",
          "6962:     if (/^(cookie|authorization)$/i.test(key)) {",
          "6963:       continue",
          "6966:     safe[key] = headers[key]",
          "6969:   return safe",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "6802:     ? validLen - 4",
          "6803:     : validLen",
          "6806:     tmp =",
          "6807:       (revLookup[b64.charCodeAt(i)] << 18) |",
          "6808:       (revLookup[b64.charCodeAt(i + 1)] << 12) |",
          "",
          "[Removed Lines]",
          "6805:   for (var i = 0; i < len; i += 4) {",
          "",
          "[Added Lines]",
          "7046:   var i",
          "7047:   for (i = 0; i < len; i += 4) {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "6863:   for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {",
          "6867:   }",
          "",
          "[Removed Lines]",
          "6864:     parts.push(encodeChunk(",
          "6865:       uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)",
          "6866:     ))",
          "",
          "[Added Lines]",
          "7106:     parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "6996: \"use strict\";",
          "",
          "[Removed Lines]",
          "6985: var toString = {}.toString;",
          "6987: module.exports = Array.isArray || function (arr) {",
          "6988:   return toString.call(arr) == '[object Array]';",
          "6989: };",
          "6999: var parse = __webpack_require__(27);",
          "",
          "[Added Lines]",
          "7229: var parse = __webpack_require__(26);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "7049: \"use strict\";",
          "",
          "[Removed Lines]",
          "7052: var required = __webpack_require__(28)",
          "7053:   , qs = __webpack_require__(29)",
          "7054:   , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i",
          "7055:   , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;",
          "",
          "[Added Lines]",
          "7282: var required = __webpack_require__(27)",
          "7283:   , qs = __webpack_require__(28)",
          "7284:   , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\\\/]+/",
          "7285:   , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\\\/]{1,})?([\\S\\s]*)/i",
          "7286:   , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'",
          "7287:   , left = new RegExp('^'+ whitespace +'+');",
          "7295: function trimLeft(str) {",
          "7296:   return (str ? str : '').toString().replace(left, '');",
          "7297: }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "7104: function lolcation(loc) {",
          "7106:   loc = loc || location;",
          "7108:   var finaldestination = {}",
          "",
          "[Removed Lines]",
          "7105:   var location = global && global.location || {};",
          "",
          "[Added Lines]",
          "7347:   var globalVar;",
          "7349:   if (typeof window !== 'undefined') globalVar = window;",
          "7350:   else if (typeof global !== 'undefined') globalVar = global;",
          "7351:   else if (typeof self !== 'undefined') globalVar = self;",
          "7352:   else globalVar = {};",
          "7354:   var location = globalVar.location || {};",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "7146: function extractProtocol(address) {",
          "7149:   return {",
          "7153:   };",
          "7154: }",
          "",
          "[Removed Lines]",
          "7147:   var match = protocolre.exec(address);",
          "7150:     protocol: match[1] ? match[1].toLowerCase() : '',",
          "7151:     slashes: !!match[2],",
          "7152:     rest: match[3]",
          "",
          "[Added Lines]",
          "7396:   address = trimLeft(address);",
          "7398:   var match = protocolre.exec(address)",
          "7399:     , protocol = match[1] ? match[1].toLowerCase() : ''",
          "7400:     , slashes = !!(match[2] && match[2].length >= 2)",
          "7401:     , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];",
          "7404:     protocol: protocol,",
          "7405:     slashes: slashes,",
          "7406:     rest: rest",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "7164: function resolve(relative, base) {",
          "7165:   var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))",
          "7166:     , i = path.length",
          "7167:     , last = path[i - 1]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7419:   if (relative === '') return base;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "7204: function Url(address, location, parser) {",
          "7205:   if (!(this instanceof Url)) {",
          "7206:     return new Url(address, location, parser);",
          "7207:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7461:   address = trimLeft(address);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "7305:     url.pathname = resolve(url.pathname, location.pathname);",
          "7306:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7570:   if (url.pathname.charAt(0) !== '/' && url.hostname) {",
          "7571:     url.pathname = '/' + url.pathname;",
          "7572:   }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "7470: Url.extractProtocol = extractProtocol;",
          "7471: Url.location = lolcation;",
          "7472: Url.qs = qs;",
          "7474: module.exports = Url;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7738: Url.trimLeft = trimLeft;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "7527: \"use strict\";",
          "7539: function decode(input) {",
          "7541: }",
          "",
          "[Removed Lines]",
          "7530: var has = Object.prototype.hasOwnProperty;",
          "7540:   return decodeURIComponent(input.replace(/\\+/g, ' '));",
          "",
          "[Added Lines]",
          "7797: var has = Object.prototype.hasOwnProperty",
          "7798:   , undef;",
          "7808:   try {",
          "7809:     return decodeURIComponent(input.replace(/\\+/g, ' '));",
          "7810:   } catch (e) {",
          "7811:     return null;",
          "7812:   }",
          "7813: }",
          "7822: function encode(input) {",
          "7823:   try {",
          "7824:     return encodeURIComponent(input);",
          "7825:   } catch (e) {",
          "7826:     return null;",
          "7827:   }",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "7550: function querystring(query) {",
          "7552:     , result = {}",
          "7553:     , part;",
          "",
          "[Removed Lines]",
          "7551:   var parser = /([^=?&]+)=?([^&]*)/g",
          "",
          "[Added Lines]",
          "7838:   var parser = /([^=?#&]+)=?([^&]*)/g",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "7565:     result[key] = value;",
          "7566:   }",
          "",
          "[Removed Lines]",
          "7564:     if (key in result) continue;",
          "",
          "[Added Lines]",
          "7854:     if (key === null || value === null || key in result) continue;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "7579: function querystringify(obj, prefix) {",
          "7580:   prefix = prefix || '';",
          "7587:   if ('string' !== typeof prefix) prefix = '?';",
          "7590:     if (has.call(obj, key)) {",
          "7592:     }",
          "7593:   }",
          "",
          "[Removed Lines]",
          "7582:   var pairs = [];",
          "7589:   for (var key in obj) {",
          "7591:       pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));",
          "",
          "[Added Lines]",
          "7872:   var pairs = []",
          "7873:     , value",
          "7874:     , key;",
          "7881:   for (key in obj) {",
          "7883:       value = obj[key];",
          "7889:       if (!value && (value === null || value === undef || isNaN(value))) {",
          "7890:         value = '';",
          "7891:       }",
          "7893:       key = encode(key);",
          "7894:       value = encode(value);",
          "7900:       if (key === null || value === null) continue;",
          "7901:       pairs.push(key +'='+ value);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "8199: \"use strict\";",
          "8210: \"use strict\";",
          "",
          "[Removed Lines]",
          "8202: exports.decode = exports.parse = __webpack_require__(34);",
          "8203: exports.encode = exports.stringify = __webpack_require__(35);",
          "",
          "[Added Lines]",
          "8512: exports.decode = exports.parse = __webpack_require__(33);",
          "8513: exports.encode = exports.stringify = __webpack_require__(34);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "8396: var https = module.exports",
          "",
          "[Removed Lines]",
          "8393: var http = __webpack_require__(10)",
          "8394: var url = __webpack_require__(7)",
          "",
          "[Added Lines]",
          "8703: var http = __webpack_require__(11)",
          "8704: var url = __webpack_require__(8)",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "8432: var response = __webpack_require__(13)",
          "8433: var stream = __webpack_require__(14)",
          "8436: var IncomingMessage = response.IncomingMessage",
          "8437: var rStates = response.readyStates",
          "",
          "[Removed Lines]",
          "8431: var inherits = __webpack_require__(12)",
          "8434: var toArrayBuffer = __webpack_require__(47)",
          "",
          "[Added Lines]",
          "8741: var inherits = __webpack_require__(2)",
          "8744: var toArrayBuffer = __webpack_require__(44)",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "8755:  'via'",
          "8756: ]",
          "8781: \"use strict\";",
          "",
          "[Removed Lines]",
          "8764: var toString = {}.toString;",
          "8766: module.exports = Array.isArray || function (arr) {",
          "8767:   return toString.call(arr) == '[object Array]';",
          "8768: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "8784: function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }",
          "8789: function copyBuffer(src, target, offset) {",
          "8790:   src.copy(target, offset);",
          "",
          "[Removed Lines]",
          "8786: var Buffer = __webpack_require__(9).Buffer;",
          "8787: var util = __webpack_require__(41);",
          "",
          "[Added Lines]",
          "9085: var Buffer = __webpack_require__(7).Buffer;",
          "9086: var util = __webpack_require__(39);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "8922: };",
          "",
          "[Removed Lines]",
          "8925: __webpack_require__(43);",
          "",
          "[Added Lines]",
          "9224: __webpack_require__(41);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "9277: \"use strict\";",
          "",
          "[Removed Lines]",
          "9210: var buffer = __webpack_require__(2)",
          "9211: var Buffer = buffer.Buffer",
          "9214: function copyProps (src, dst) {",
          "9215:   for (var key in src) {",
          "9216:     dst[key] = src[key]",
          "9217:   }",
          "9218: }",
          "9219: if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {",
          "9220:   module.exports = buffer",
          "9221: } else {",
          "9223:   copyProps(buffer, exports)",
          "9224:   exports.Buffer = SafeBuffer",
          "9225: }",
          "9227: function SafeBuffer (arg, encodingOrOffset, length) {",
          "9228:   return Buffer(arg, encodingOrOffset, length)",
          "9229: }",
          "9232: copyProps(Buffer, SafeBuffer)",
          "9234: SafeBuffer.from = function (arg, encodingOrOffset, length) {",
          "9235:   if (typeof arg === 'number') {",
          "9236:     throw new TypeError('Argument must not be a number')",
          "9237:   }",
          "9238:   return Buffer(arg, encodingOrOffset, length)",
          "9239: }",
          "9241: SafeBuffer.alloc = function (size, fill, encoding) {",
          "9242:   if (typeof size !== 'number') {",
          "9243:     throw new TypeError('Argument must be a number')",
          "9244:   }",
          "9245:   var buf = Buffer(size)",
          "9246:   if (fill !== undefined) {",
          "9247:     if (typeof encoding === 'string') {",
          "9248:       buf.fill(fill, encoding)",
          "9249:     } else {",
          "9250:       buf.fill(fill)",
          "9251:     }",
          "9252:   } else {",
          "9253:     buf.fill(0)",
          "9254:   }",
          "9255:   return buf",
          "9256: }",
          "9258: SafeBuffer.allocUnsafe = function (size) {",
          "9259:   if (typeof size !== 'number') {",
          "9260:     throw new TypeError('Argument must be a number')",
          "9261:   }",
          "9262:   return Buffer(size)",
          "9263: }",
          "9265: SafeBuffer.allocUnsafeSlow = function (size) {",
          "9266:   if (typeof size !== 'number') {",
          "9267:     throw new TypeError('Argument must be a number')",
          "9268:   }",
          "9269:   return buffer.SlowBuffer(size)",
          "9270: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "9307: var Transform = __webpack_require__(20);",
          "9314: util.inherits(PassThrough, Transform);",
          "",
          "[Removed Lines]",
          "9310: var util = __webpack_require__(4);",
          "9311: util.inherits = __webpack_require__(5);",
          "",
          "[Added Lines]",
          "9541: var util = Object.create(__webpack_require__(5));",
          "9542: util.inherits = __webpack_require__(2);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "9324: };",
          "9332: module.exports = function (buf) {",
          "",
          "[Removed Lines]",
          "9330: var Buffer = __webpack_require__(2).Buffer",
          "",
          "[Added Lines]",
          "9561: var Buffer = __webpack_require__(3).Buffer",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "9479: var formatRegExp = /%[sdj%]/g;",
          "9480: exports.format = function(f) {",
          "9481:   if (!isString(f)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9710: var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||",
          "9711:   function getOwnPropertyDescriptors(obj) {",
          "9712:     var keys = Object.keys(obj);",
          "9713:     var descriptors = {};",
          "9714:     for (var i = 0; i < keys.length; i++) {",
          "9715:       descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);",
          "9716:     }",
          "9717:     return descriptors;",
          "9718:   };",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "9522: exports.deprecate = function(fn, msg) {",
          "9525:     return function() {",
          "9526:       return exports.deprecate(fn, msg).apply(this, arguments);",
          "9527:     };",
          "9528:   }",
          "9534:   var warned = false;",
          "9535:   function deprecated() {",
          "9536:     if (!warned) {",
          "",
          "[Removed Lines]",
          "9524:   if (isUndefined(global.process)) {",
          "9530:   if (process.noDeprecation === true) {",
          "9531:     return fn;",
          "9532:   }",
          "",
          "[Added Lines]",
          "9764:   if (typeof process !== 'undefined' && process.noDeprecation === true) {",
          "9765:     return fn;",
          "9766:   }",
          "9769:   if (typeof process === 'undefined') {",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "9980: }",
          "9981: exports.isPrimitive = isPrimitive;",
          "9985: function objectToString(o) {",
          "9986:   return Object.prototype.toString.call(o);",
          "",
          "[Removed Lines]",
          "9983: exports.isBuffer = __webpack_require__(51);",
          "",
          "[Added Lines]",
          "10224: exports.isBuffer = __webpack_require__(48);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "10029: exports._extend = function(origin, add) {",
          "",
          "[Removed Lines]",
          "10027: exports.inherits = __webpack_require__(52);",
          "",
          "[Added Lines]",
          "10268: exports.inherits = __webpack_require__(2);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "10042:   return Object.prototype.hasOwnProperty.call(obj, prop);",
          "10043: }",
          "10051: module.exports = function isBuffer(arg) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10286: var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;",
          "10288: exports.promisify = function promisify(original) {",
          "10289:   if (typeof original !== 'function')",
          "10290:     throw new TypeError('The \"original\" argument must be of type Function');",
          "10292:   if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {",
          "10293:     var fn = original[kCustomPromisifiedSymbol];",
          "10294:     if (typeof fn !== 'function') {",
          "10295:       throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');",
          "10296:     }",
          "10297:     Object.defineProperty(fn, kCustomPromisifiedSymbol, {",
          "10298:       value: fn, enumerable: false, writable: false, configurable: true",
          "10299:     });",
          "10300:     return fn;",
          "10301:   }",
          "10303:   function fn() {",
          "10304:     var promiseResolve, promiseReject;",
          "10305:     var promise = new Promise(function (resolve, reject) {",
          "10306:       promiseResolve = resolve;",
          "10307:       promiseReject = reject;",
          "10308:     });",
          "10310:     var args = [];",
          "10311:     for (var i = 0; i < arguments.length; i++) {",
          "10312:       args.push(arguments[i]);",
          "10313:     }",
          "10314:     args.push(function (err, value) {",
          "10315:       if (err) {",
          "10316:         promiseReject(err);",
          "10317:       } else {",
          "10318:         promiseResolve(value);",
          "10319:       }",
          "10320:     });",
          "10322:     try {",
          "10323:       original.apply(this, args);",
          "10324:     } catch (err) {",
          "10325:       promiseReject(err);",
          "10326:     }",
          "10328:     return promise;",
          "10329:   }",
          "10331:   Object.setPrototypeOf(fn, Object.getPrototypeOf(original));",
          "10333:   if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {",
          "10334:     value: fn, enumerable: false, writable: false, configurable: true",
          "10335:   });",
          "10336:   return Object.defineProperties(",
          "10337:     fn,",
          "10338:     getOwnPropertyDescriptors(original)",
          "10339:   );",
          "10340: }",
          "10342: exports.promisify.custom = kCustomPromisifiedSymbol",
          "10344: function callbackifyOnRejected(reason, cb) {",
          "10349:   if (!reason) {",
          "10350:     var newReason = new Error('Promise was rejected with a falsy value');",
          "10351:     newReason.reason = reason;",
          "10352:     reason = newReason;",
          "10353:   }",
          "10354:   return cb(reason);",
          "10355: }",
          "10357: function callbackify(original) {",
          "10358:   if (typeof original !== 'function') {",
          "10359:     throw new TypeError('The \"original\" argument must be of type Function');",
          "10360:   }",
          "10365:   function callbackified() {",
          "10366:     var args = [];",
          "10367:     for (var i = 0; i < arguments.length; i++) {",
          "10368:       args.push(arguments[i]);",
          "10369:     }",
          "10371:     var maybeCb = args.pop();",
          "10372:     if (typeof maybeCb !== 'function') {",
          "10373:       throw new TypeError('The last argument must be of type Function');",
          "10374:     }",
          "10375:     var self = this;",
          "10376:     var cb = function() {",
          "10377:       return maybeCb.apply(self, arguments);",
          "10378:     };",
          "10381:     original.apply(this, args)",
          "10382:       .then(function(ret) { process.nextTick(cb, null, ret) },",
          "10383:             function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });",
          "10384:   }",
          "10386:   Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));",
          "10387:   Object.defineProperties(callbackified,",
          "10388:                           getOwnPropertyDescriptors(original));",
          "10389:   return callbackified;",
          "10390: }",
          "10391: exports.callbackify = callbackify;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "10055:     && typeof arg.readUInt8 === 'function';",
          "10056: }",
          "",
          "[Removed Lines]",
          "10062: if (typeof Object.create === 'function') {",
          "10064:   module.exports = function inherits(ctor, superCtor) {",
          "10065:     ctor.super_ = superCtor",
          "10066:     ctor.prototype = Object.create(superCtor.prototype, {",
          "10067:       constructor: {",
          "10068:         value: ctor,",
          "10069:         enumerable: false,",
          "10070:         writable: true,",
          "10071:         configurable: true",
          "10072:       }",
          "10073:     });",
          "10074:   };",
          "10075: } else {",
          "10077:   module.exports = function inherits(ctor, superCtor) {",
          "10078:     ctor.super_ = superCtor",
          "10079:     var TempCtor = function () {}",
          "10080:     TempCtor.prototype = superCtor.prototype",
          "10081:     ctor.prototype = new TempCtor()",
          "10082:     ctor.prototype.constructor = ctor",
          "10083:   }",
          "10084: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}