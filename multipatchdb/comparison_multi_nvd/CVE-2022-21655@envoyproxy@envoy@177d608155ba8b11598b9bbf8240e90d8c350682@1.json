{
  "cve_id": "CVE-2022-21655",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The envoy common router will segfault if an internal redirect selects a route configured with direct response or redirect actions. This will result in a denial of service. As a workaround turn off internal redirects if direct response entries are configured on the same listener.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
  "patch_info": {
    "commit_hash": "177d608155ba8b11598b9bbf8240e90d8c350682",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/177d608155ba8b11598b9bbf8240e90d8c350682",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/router/router.cc",
      "test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc"
    ],
    "message": "CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/router/router.cc||source/common/router/router.cc",
      "test/common/router/router_test.cc||test/common/router/router_test.cc",
      "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1692:     return false;",
      "1693:   }",
      "1696:   for (const auto& predicate : policy.predicates()) {",
      "1697:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
      "1698:                                       !target_is_http)) {",
      "",
      "[Removed Lines]",
      "1695:   const auto& route_name = route->routeEntry()->routeName();",
      "",
      "[Added Lines]",
      "1695:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
      "1696:                                                         : route->routeEntry()->routeName();",
      "",
      "---------------"
    ],
    "test/common/router/router_test.cc||test/common/router/router_test.cc": [
      "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: using testing::Eq;",
      "57: using testing::InSequence;",
      "58: using testing::Invoke;",
      "59: using testing::MockFunction;",
      "60: using testing::NiceMock;",
      "61: using testing::Property;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: using testing::InvokeWithoutArgs;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:       sendLocalReply(Http::Code::ServiceUnavailable,",
      "320:                      testing::Eq(\"missing required header: :method\"), _, _,",
      "321:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
      "323:   router_.decodeHeaders(headers, true);",
      "324:   router_.onDestroy();",
      "325: }",
      "",
      "[Removed Lines]",
      "322:       .WillOnce(testing::InvokeWithoutArgs([] {}));",
      "",
      "[Added Lines]",
      "323:       .WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3416:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
      "",
      "[Removed Lines]",
      "3414:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
      "3415:   }));",
      "",
      "[Added Lines]",
      "3415:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4207:                    ->value());",
      "4208: }",
      "4210: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
      "4211:   enableRedirects();",
      "4212:   default_request_headers_.setForwardedProto(\"http\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4210: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
      "4211:   NiceMock<MockDirectResponseEntry> direct_response;",
      "4212:   std::string route_name(\"route-test-name\");",
      "4213:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
      "4215:   enableRedirects();",
      "4216:   sendRequest();",
      "4217:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
      "4219:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
      "4220:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
      "4221:   }));",
      "4222:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
      "4224:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
      "4225:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
      "4226:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
      "4227:                     .value());",
      "4230:   router_.onDestroy();",
      "4231:   EXPECT_EQ(1, callbacks_.streamInfo()",
      "4232:                    .filterState()",
      "4233:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
      "4234:                    ->value());",
      "4235: }",
      "",
      "---------------"
    ],
    "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
      "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:         ->set_value(3);",
      "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
      "42:     HttpProtocolIntegrationTest::initialize();",
      "43:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
      "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
      "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
      "45:     handle_by_direct_response.mutable_routes(0)",
      "46:         ->mutable_direct_response()",
      "47:         ->mutable_body()",
      "48:         ->set_inline_string(EMPTY_STRING);",
      "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "665:             response->headers().get(test_header_key_)[0]->value().getStringView());",
      "666: }",
      "668: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
      "669:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
      "670:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "677: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
      "678:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
      "680:   config_helper_.addConfigModifier(",
      "681:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "682:              hcm) { hcm.set_via(\"via_value\"); });",
      "683:   initialize();",
      "685:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "687:   default_request_headers_.setHost(\"handle.internal.redirect\");",
      "688:   IntegrationStreamDecoderPtr response =",
      "689:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
      "691:   waitForNextUpstreamRequest();",
      "693:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
      "694:   upstream_request_->encodeHeaders(redirect_response_, true);",
      "696:   ASSERT_TRUE(response->waitForEndStream());",
      "697:   ASSERT_TRUE(response->complete());",
      "698:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
      "699:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
      "700:                    ->value());",
      "702:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
      "703:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
      "704:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
      "705:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
      "707:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
      "708: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1c7055922a1bc5c24bc890a63ecc3c556ad393b",
      "candidate_info": {
        "commit_hash": "b1c7055922a1bc5c24bc890a63ecc3c556ad393b",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/b1c7055922a1bc5c24bc890a63ecc3c556ad393b",
        "files": [
          "envoy/http/BUILD",
          "envoy/http/async_client.h",
          "envoy/http/filter.h",
          "envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h",
          "source/common/router/router.cc",
          "source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h",
          "test/integration/BUILD",
          "test/integration/buffer_accounting_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h"
        ],
        "message": "Implement shadow streaming (#24365)\n\nCommit Message: Implement streaming for shadow requests.\nAdditional Description: Shadow/mirror requests will now be initialized on decodeHeaders. The router filter will copy and dispatch incoming data and trailers to shadow streams as they arrive. In order to prevent OOMs on shadow streams, shadow requests can now also apply backpressure downstream. Part of the goal is to decouple shadow request buffer limits from retry buffer limits.\nRisk Level: High\nTesting: unit testing in router_test.cc, and substantial integration testing in shadow_policy_integration_test.cc\nDocs Changes: None\nRelease Notes: None\nPlatform Specific Features: None\nOptional Runtime guard: envoy.reloadable_features.streaming_shadow -- off by default.\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* make requested changes\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* Move ManyCopiedBuffer and add tests\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* watermark propagation + unit test\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* 'fix' format\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* ASSERTs for adding callbacks\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* add buffer accounting\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* requested fixes\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* testing fixes + ENVOY_BUG\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* remove captureAndSendData + other fixes\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* fix async client test\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* remove watermark cbs on destruction\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* more streaming shadow i-testing\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* comment updates\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* remove debug log\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* fix shadow i-tests\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* remove ManyCopiedBuffer\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* ENVOY_BUG in setDecoderBufferLimit\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* misc fixes\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* wait for shadow counter in test\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* Inherit shadow buffer limit from route\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\n* Rename function\n\nSigned-off-by: Paul Gallagher <pgal@google.com>\n\nSigned-off-by: Paul Gallagher <pgal@google.com>",
        "before_after_code_files": [
          "envoy/http/async_client.h||envoy/http/async_client.h",
          "envoy/http/filter.h||envoy/http/filter.h",
          "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h",
          "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc",
          "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h",
          "source/common/router/router.cc||source/common/router/router.cc",
          "source/common/router/router.h||source/common/router/router.h",
          "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc",
          "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h",
          "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc",
          "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc",
          "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc",
          "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc",
          "test/common/router/router_test_base.h||test/common/router/router_test_base.h",
          "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc",
          "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc",
          "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc",
          "test/mocks/http/mocks.h||test/mocks/http/mocks.h",
          "test/mocks/router/mocks.h||test/mocks/router/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "envoy/http/async_client.h||envoy/http/async_client.h": [
          "File: envoy/http/async_client.h -> envoy/http/async_client.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <chrono>",
          "4: #include <memory>",
          "6: #include \"envoy/config/route/v3/route_components.pb.h\"",
          "7: #include \"envoy/event/dispatcher.h\"",
          "8: #include \"envoy/http/message.h\"",
          "9: #include \"envoy/stream_info/stream_info.h\"",
          "10: #include \"envoy/tracing/http_tracer.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"envoy/buffer/buffer.h\"",
          "9: #include \"envoy/http/filter.h\"",
          "10: #include \"envoy/http/header_map.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:     virtual void onReset() PURE;",
          "130:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:   using StreamDestructorCallbacks = std::function<void()>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:     virtual void reset() PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     virtual void setDestructorCallback(StreamDestructorCallbacks callback) PURE;",
          "182:     virtual void removeDestructorCallback() PURE;",
          "190:     virtual void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) PURE;",
          "195:     virtual void removeWatermarkCallbacks() PURE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:     virtual bool isAboveWriteBufferHighWatermark() const PURE;",
          "171:   };",
          "173:   virtual ~AsyncClient() = default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:   class OngoingRequest : public virtual Request, public virtual Stream {",
          "210:   public:",
          "215:     virtual void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) PURE;",
          "216:   };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:       return *this;",
          "217:     }",
          "220:     StreamOptions& setRetryPolicy(const envoy::config::route::v3::RetryPolicy& p) {",
          "221:       retry_policy = p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:     StreamOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "266:       account_ = account;",
          "267:       return *this;",
          "268:     }",
          "269:     StreamOptions& setBufferLimit(uint32_t limit) {",
          "270:       buffer_limit_ = limit;",
          "271:       return *this;",
          "272:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "259:     envoy::config::core::v3::Metadata metadata;",
          "261:     absl::optional<envoy::config::route::v3::RetryPolicy> retry_policy;",
          "263:     OptRef<Router::FilterConfig> filter_config_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:     Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "319:     absl::optional<uint32_t> buffer_limit_;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "318:       sampled_ = sampled;",
          "319:       return *this;",
          "320:     }",
          "323:     bool operator==(const RequestOptions& src) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     RequestOptions& setBufferAccount(const Buffer::BufferMemoryAccountSharedPtr& account) {",
          "382:       account_ = account;",
          "383:       return *this;",
          "384:     }",
          "385:     RequestOptions& setBufferLimit(uint32_t limit) {",
          "386:       buffer_limit_ = limit;",
          "387:       return *this;",
          "388:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:                         const RequestOptions& options) PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:   virtual OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "431:                                        const RequestOptions& options) PURE;",
          "",
          "---------------"
        ],
        "envoy/http/filter.h||envoy/http/filter.h": [
          "File: envoy/http/filter.h -> envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   virtual OptRef<DownstreamStreamFilterCallbacks> downstreamCallbacks() PURE;",
          "430: };",
          "437: public:",
          "",
          "[Removed Lines]",
          "436: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks {",
          "",
          "[Added Lines]",
          "432: class DecoderFilterWatermarkCallbacks {",
          "433: public:",
          "434:   virtual ~DecoderFilterWatermarkCallbacks() = default;",
          "444:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "450:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "451: };",
          "457: class StreamDecoderFilterCallbacks : public virtual StreamFilterCallbacks,",
          "458:                                      public virtual DecoderFilterWatermarkCallbacks {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:   virtual void encodeMetadata(MetadataMapPtr&& metadata_map) PURE;",
          "",
          "[Removed Lines]",
          "637:   virtual void onDecoderFilterAboveWriteBufferHighWatermark() PURE;",
          "643:   virtual void onDecoderFilterBelowWriteBufferLowWatermark() PURE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "envoy/router/shadow_writer.h||envoy/router/shadow_writer.h": [
          "File: envoy/router/shadow_writer.h -> envoy/router/shadow_writer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   virtual void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "29:                       const Http::AsyncClient::RequestOptions& options) PURE;",
          "30: };",
          "32: using ShadowWriterPtr = std::unique_ptr<ShadowWriter>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   virtual Http::AsyncClient::OngoingRequest*",
          "42:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "43:                   const Http::AsyncClient::RequestOptions& options) PURE;",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.cc||source/common/http/async_client_impl.cc": [
          "File: source/common/http/async_client_impl.cc -> source/common/http/async_client_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   }",
          "53: }",
          "60:   async_request->initialize();",
          "61:   std::unique_ptr<AsyncStreamImpl> new_request{async_request};",
          "",
          "[Removed Lines]",
          "55: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "56:                                             AsyncClient::Callbacks& callbacks,",
          "57:                                             const AsyncClient::RequestOptions& options) {",
          "58:   AsyncRequestImpl* async_request =",
          "59:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "",
          "[Added Lines]",
          "55: template <typename T> T* AsyncClientImpl::internalStartRequest(T* async_request) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   }",
          "71: }",
          "73: AsyncClient::Stream* AsyncClientImpl::start(AsyncClient::StreamCallbacks& callbacks,",
          "74:                                             const AsyncClient::StreamOptions& options) {",
          "75:   std::unique_ptr<AsyncStreamImpl> new_stream{new AsyncStreamImpl(*this, callbacks, options)};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: template AsyncRequestImpl*",
          "70: AsyncClientImpl::internalStartRequest<AsyncRequestImpl>(AsyncRequestImpl*);",
          "71: template AsyncOngoingRequestImpl*",
          "72: AsyncClientImpl::internalStartRequest<AsyncOngoingRequestImpl>(AsyncOngoingRequestImpl*);",
          "74: AsyncClient::Request* AsyncClientImpl::send(RequestMessagePtr&& request,",
          "75:                                             AsyncClient::Callbacks& callbacks,",
          "76:                                             const AsyncClient::RequestOptions& options) {",
          "77:   AsyncRequestImpl* async_request =",
          "78:       new AsyncRequestImpl(std::move(request), *this, callbacks, options);",
          "79:   return internalStartRequest(async_request);",
          "80: }",
          "82: AsyncClient::OngoingRequest*",
          "83: AsyncClientImpl::startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "84:                               const AsyncClient::RequestOptions& options) {",
          "85:   AsyncOngoingRequestImpl* async_request =",
          "86:       new AsyncOngoingRequestImpl(std::move(request_headers), *this, callbacks, options);",
          "87:   return internalStartRequest(async_request);",
          "88: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:       tracing_config_(Tracing::EgressConfig::get()),",
          "87:       route_(std::make_shared<RouteImpl>(parent_, options.timeout, options.hash_policy,",
          "88:                                          options.retry_policy)),",
          "89:       send_xff_(options.send_xff) {",
          "91:   stream_info_.dynamicMetadata().MergeFrom(options.metadata);",
          "92:   stream_info_.setIsShadow(options.is_shadow);",
          "94:   if (options.buffer_body_for_retry) {",
          "96:   }",
          "98:   router_.setDecoderFilterCallbacks(*this);",
          "",
          "[Removed Lines]",
          "95:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>();",
          "",
          "[Added Lines]",
          "106:       account_(options.account_), buffer_limit_(options.buffer_limit_),",
          "112:     buffered_body_ = std::make_unique<Buffer::OwnedImpl>(account_);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:   cleanup();",
          "253: }",
          "259:   if (nullptr != options.parent_span_) {",
          "260:     const std::string child_span_name =",
          "261:         options.child_span_name_.empty()",
          "",
          "[Removed Lines]",
          "255: AsyncRequestImpl::AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "256:                                    AsyncClient::Callbacks& callbacks,",
          "257:                                    const AsyncClient::RequestOptions& options)",
          "258:     : AsyncStreamImpl(parent, *this, options), request_(std::move(request)), callbacks_(callbacks) {",
          "",
          "[Added Lines]",
          "272: AsyncRequestSharedImpl::AsyncRequestSharedImpl(AsyncClientImpl& parent,",
          "273:                                                AsyncClient::Callbacks& callbacks,",
          "274:                                                const AsyncClient::RequestOptions& options)",
          "275:     : AsyncStreamImpl(parent, *this, options), callbacks_(callbacks) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285: }",
          "288:   callbacks_.onBeforeFinalizeUpstreamSpan(*child_span_, &response_->headers());",
          "290:   Tracing::HttpTracerUtility::finalizeUpstreamSpan(*child_span_, streamInfo(),",
          "",
          "[Removed Lines]",
          "287: void AsyncRequestImpl::onComplete() {",
          "",
          "[Added Lines]",
          "304: void AsyncOngoingRequestImpl::initialize() {",
          "305:   child_span_->injectContext(*request_headers_, nullptr);",
          "306:   sendHeaders(*request_headers_, false);",
          "307: }",
          "309: void AsyncRequestSharedImpl::onComplete() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "293:   callbacks_.onSuccess(*this, std::move(response_));",
          "294: }",
          "297:   const uint64_t response_code = Http::Utility::getResponseStatus(*headers);",
          "298:   streamInfo().response_code_ = response_code;",
          "299:   response_ = std::make_unique<ResponseMessageImpl>(std::move(headers));",
          "300: }",
          "303:   streamInfo().addBytesReceived(data.length());",
          "304:   response_->body().move(data);",
          "305: }",
          "308:   response_->trailers(std::move(trailers));",
          "309: }",
          "312:   if (!cancelled_) {",
          "",
          "[Removed Lines]",
          "296: void AsyncRequestImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "302: void AsyncRequestImpl::onData(Buffer::Instance& data, bool) {",
          "307: void AsyncRequestImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "311: void AsyncRequestImpl::onReset() {",
          "",
          "[Added Lines]",
          "318: void AsyncRequestSharedImpl::onHeaders(ResponseHeaderMapPtr&& headers, bool) {",
          "324: void AsyncRequestSharedImpl::onData(Buffer::Instance& data, bool) {",
          "329: void AsyncRequestSharedImpl::onTrailers(ResponseTrailerMapPtr&& trailers) {",
          "333: void AsyncRequestSharedImpl::onReset() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:   }",
          "329: }",
          "332:   cancelled_ = true;",
          "",
          "[Removed Lines]",
          "331: void AsyncRequestImpl::cancel() {",
          "",
          "[Added Lines]",
          "353: void AsyncRequestSharedImpl::cancel() {",
          "",
          "---------------"
        ],
        "source/common/http/async_client_impl.h||source/common/http/async_client_impl.h": [
          "File: source/common/http/async_client_impl.h -> source/common/http/async_client_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include <string>",
          "10: #include <vector>",
          "12: #include \"envoy/common/random_generator.h\"",
          "13: #include \"envoy/common/scope_tracker.h\"",
          "14: #include \"envoy/config/core/v3/base.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"envoy/buffer/buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: #include \"envoy/http/async_client.h\"",
          "19: #include \"envoy/http/codec.h\"",
          "20: #include \"envoy/http/context.h\"",
          "21: #include \"envoy/http/header_map.h\"",
          "22: #include \"envoy/http/message.h\"",
          "23: #include \"envoy/router/context.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"envoy/http/filter.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: } // namespace",
          "54: class AsyncStreamImpl;",
          "57: class AsyncClientImpl final : public AsyncClient {",
          "58: public:",
          "",
          "[Removed Lines]",
          "55: class AsyncRequestImpl;",
          "",
          "[Added Lines]",
          "57: class AsyncRequestSharedImpl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:   Request* send(RequestMessagePtr&& request, Callbacks& callbacks,",
          "68:                 const AsyncClient::RequestOptions& options) override;",
          "69:   Stream* start(StreamCallbacks& callbacks, const AsyncClient::StreamOptions& options) override;",
          "70:   Event::Dispatcher& dispatcher() override { return dispatcher_; }",
          "72: private:",
          "73:   Upstream::ClusterInfoConstSharedPtr cluster_;",
          "74:   Router::FilterConfig config_;",
          "75:   Event::Dispatcher& dispatcher_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:   OngoingRequest* startRequest(RequestHeaderMapPtr&& request_headers, Callbacks& callbacks,",
          "73:                                const AsyncClient::RequestOptions& options) override;",
          "77:   template <typename T> T* internalStartRequest(T* async_request);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:   Singleton::Manager& singleton_manager_;",
          "79:   friend class AsyncStreamImpl;",
          "81: };",
          "88:                         public StreamDecoderFilterCallbacks,",
          "89:                         public Event::DeferredDeletable,",
          "90:                         Logger::Loggable<Logger::Id::http>,",
          "",
          "[Removed Lines]",
          "80:   friend class AsyncRequestImpl;",
          "87: class AsyncStreamImpl : public AsyncClient::Stream,",
          "",
          "[Added Lines]",
          "85:   friend class AsyncRequestSharedImpl;",
          "92: class AsyncStreamImpl : public virtual AsyncClient::Stream,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93: public:",
          "94:   AsyncStreamImpl(AsyncClientImpl& parent, AsyncClient::StreamCallbacks& callbacks,",
          "95:                   const AsyncClient::StreamOptions& options);",
          "99:   void sendHeaders(RequestHeaderMap& headers, bool end_stream) override;",
          "",
          "[Removed Lines]",
          "96:   ~AsyncStreamImpl() override { router_.onDestroy(); }",
          "",
          "[Added Lines]",
          "101:   ~AsyncStreamImpl() override {",
          "102:     router_.onDestroy();",
          "104:     ENVOY_BUG(high_watermark_calls_ == 0, \"Excess high watermark calls after async stream ended.\");",
          "105:     if (destructor_callback_.has_value()) {",
          "106:       (*destructor_callback_)();",
          "107:     }",
          "108:   }",
          "110:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "111:     ASSERT(!destructor_callback_);",
          "112:     destructor_callback_.emplace(callback);",
          "113:   }",
          "115:   void removeDestructorCallback() override {",
          "116:     ASSERT(destructor_callback_);",
          "117:     destructor_callback_.reset();",
          "118:   }",
          "120:   void setWatermarkCallbacks(DecoderFilterWatermarkCallbacks& callbacks) override {",
          "121:     ASSERT(!watermark_callbacks_);",
          "122:     watermark_callbacks_.emplace(callbacks);",
          "123:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "124:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "125:     }",
          "126:   }",
          "128:   void removeWatermarkCallbacks() override {",
          "129:     ASSERT(watermark_callbacks_);",
          "130:     for (uint32_t i = 0; i < high_watermark_calls_; ++i) {",
          "131:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "132:     }",
          "133:     watermark_callbacks_.reset();",
          "134:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "108:   StreamInfo::StreamInfoImpl& streamInfo() override { return stream_info_; }",
          "110:   AsyncClientImpl& parent_;",
          "112: private:",
          "113:   struct NullHedgePolicy : public Router::HedgePolicy {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "152:   absl::optional<std::reference_wrapper<DecoderFilterWatermarkCallbacks>> watermark_callbacks_;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "360:   Upstream::ClusterInfoConstSharedPtr clusterInfo() override { return parent_.cluster_; }",
          "361:   uint64_t streamId() const override { return stream_id_; }",
          "364:   Tracing::Span& activeSpan() override { return active_span_; }",
          "365:   OptRef<const Tracing::Config> tracingConfig() const override {",
          "366:     return makeOptRef<const Tracing::Config>(tracing_config_);",
          "",
          "[Removed Lines]",
          "363:   Buffer::BufferMemoryAccountSharedPtr account() const override { return nullptr; }",
          "",
          "[Added Lines]",
          "405:   Buffer::BufferMemoryAccountSharedPtr account() const override { return account_; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "410:   void encodeTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "411:   ResponseTrailerMapOptRef responseTrailers() const override { return {}; }",
          "412:   void encodeMetadata(MetadataMapPtr&&) override {}",
          "414:   void onDecoderFilterBelowWriteBufferLowWatermark() override {",
          "415:     ASSERT(high_watermark_calls_ != 0);",
          "416:     --high_watermark_calls_;",
          "417:   }",
          "418:   void addDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "419:   void removeDownstreamWatermarkCallbacks(DownstreamWatermarkCallbacks&) override {}",
          "422:   bool recreateStream(const ResponseHeaderMap*) override { return false; }",
          "423:   const ScopeTrackedObject& scope() override { return *this; }",
          "424:   void restoreContextOnContinue(ScopeTrackedObjectStack& tracked_object_stack) override {",
          "",
          "[Removed Lines]",
          "413:   void onDecoderFilterAboveWriteBufferHighWatermark() override { ++high_watermark_calls_; }",
          "420:   void setDecoderBufferLimit(uint32_t) override {}",
          "421:   uint32_t decoderBufferLimit() override { return 0; }",
          "",
          "[Added Lines]",
          "455:   void onDecoderFilterAboveWriteBufferHighWatermark() override {",
          "456:     ++high_watermark_calls_;",
          "457:     if (watermark_callbacks_.has_value()) {",
          "458:       watermark_callbacks_->get().onDecoderFilterAboveWriteBufferHighWatermark();",
          "459:     }",
          "460:   }",
          "464:     if (watermark_callbacks_.has_value()) {",
          "465:       watermark_callbacks_->get().onDecoderFilterBelowWriteBufferLowWatermark();",
          "466:     }",
          "470:   void setDecoderBufferLimit(uint32_t) override {",
          "471:     IS_ENVOY_BUG(\"decoder buffer limits should not be overridden on async streams.\");",
          "472:   }",
          "473:   uint32_t decoderBufferLimit() override { return buffer_limit_.value_or(0); }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "456:   bool local_closed_{};",
          "457:   bool remote_closed_{};",
          "458:   Buffer::InstancePtr buffered_body_;",
          "459:   bool encoded_response_headers_{};",
          "460:   bool is_grpc_request_{};",
          "461:   bool is_head_request_{false};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:   Buffer::BufferMemoryAccountSharedPtr account_{nullptr};",
          "512:   absl::optional<uint32_t> buffer_limit_{absl::nullopt};",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "465:   friend class AsyncClientImplUnitTest;",
          "466: };",
          "471: public:",
          "478: private:",
          "479:   void initialize();",
          "489:   void addDecodedData(Buffer::Instance&, bool) override {",
          "",
          "[Removed Lines]",
          "468: class AsyncRequestImpl final : public AsyncClient::Request,",
          "469:                                AsyncStreamImpl,",
          "470:                                AsyncClient::StreamCallbacks {",
          "472:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "473:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options);",
          "476:   void cancel() override;",
          "482:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) override;",
          "483:   void onData(Buffer::Instance& data, bool end_stream) override;",
          "484:   void onTrailers(ResponseTrailerMapPtr&& trailers) override;",
          "485:   void onComplete() override;",
          "486:   void onReset() override;",
          "",
          "[Added Lines]",
          "522: class AsyncRequestSharedImpl : public virtual AsyncClient::Request,",
          "523:                                protected AsyncStreamImpl,",
          "524:                                protected AsyncClient::StreamCallbacks {",
          "526:   void cancel() final;",
          "528: protected:",
          "529:   AsyncRequestSharedImpl(AsyncClientImpl& parent, AsyncClient::Callbacks& callbacks,",
          "530:                          const AsyncClient::RequestOptions& options);",
          "531:   void onHeaders(ResponseHeaderMapPtr&& headers, bool end_stream) final;",
          "532:   void onData(Buffer::Instance& data, bool end_stream) final;",
          "533:   void onTrailers(ResponseTrailerMapPtr&& trailers) final;",
          "534:   void onComplete() final;",
          "535:   void onReset() final;",
          "537:   AsyncClient::Callbacks& callbacks_;",
          "538:   Tracing::SpanPtr child_span_;",
          "539:   std::unique_ptr<ResponseMessageImpl> response_;",
          "540:   bool cancelled_{};",
          "541: };",
          "543: class AsyncOngoingRequestImpl final : public AsyncClient::OngoingRequest,",
          "544:                                       public AsyncRequestSharedImpl {",
          "545: public:",
          "546:   AsyncOngoingRequestImpl(RequestHeaderMapPtr&& request_headers, AsyncClientImpl& parent,",
          "547:                           AsyncClient::Callbacks& callbacks,",
          "548:                           const AsyncClient::RequestOptions& options)",
          "549:       : AsyncRequestSharedImpl(parent, callbacks, options),",
          "550:         request_headers_(std::move(request_headers)) {",
          "551:     ASSERT(request_headers_);",
          "552:   }",
          "553:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "554:     request_trailers_ = std::move(trailers);",
          "555:     sendTrailers(*request_trailers_);",
          "556:   }",
          "561:   RequestHeaderMapPtr request_headers_;",
          "562:   RequestTrailerMapPtr request_trailers_;",
          "564:   friend class AsyncClientImpl;",
          "565: };",
          "567: class AsyncRequestImpl final : public AsyncRequestSharedImpl {",
          "568: public:",
          "569:   AsyncRequestImpl(RequestMessagePtr&& request, AsyncClientImpl& parent,",
          "570:                    AsyncClient::Callbacks& callbacks, const AsyncClient::RequestOptions& options)",
          "571:       : AsyncRequestSharedImpl(parent, callbacks, options), request_(std::move(request)) {}",
          "573: private:",
          "574:   void initialize();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "494:   void modifyDecodingBuffer(std::function<void(Buffer::Instance&)>) override {}",
          "496:   RequestMessagePtr request_;",
          "502:   friend class AsyncClientImpl;",
          "503: };",
          "",
          "[Removed Lines]",
          "497:   AsyncClient::Callbacks& callbacks_;",
          "498:   std::unique_ptr<ResponseMessageImpl> response_;",
          "499:   bool cancelled_{};",
          "500:   Tracing::SpanPtr child_span_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/common/router/router.h\"",
          "3: #include <chrono>",
          "4: #include <cstdint>",
          "5: #include <functional>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include <algorithm>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:   ASSERT(upstream_requests_.empty());",
          "284:   ASSERT(!retry_state_);",
          "285: }",
          "287: const FilterUtility::StrictHeaderChecker::HeaderCheckResult",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:   for (auto* shadow_stream : shadow_streams_) {",
          "289:     shadow_stream->removeDestructorCallback();",
          "290:     shadow_stream->removeWatermarkCallbacks();",
          "291:     shadow_stream->cancel();",
          "292:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:   LinkedList::moveIntoList(std::move(upstream_request), upstream_requests_);",
          "700:   upstream_requests_.front()->acceptHeadersFromRouter(end_stream);",
          "701:   if (end_stream) {",
          "702:     onRequestComplete();",
          "703:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709:   if (streaming_shadows_) {",
          "711:     for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "712:       const auto& shadow_policy = shadow_policy_wrapper.get();",
          "713:       const absl::optional<absl::string_view> shadow_cluster_name =",
          "714:           getShadowCluster(shadow_policy, *downstream_headers_);",
          "715:       if (!shadow_cluster_name.has_value()) {",
          "716:         continue;",
          "717:       }",
          "718:       auto shadow_headers = Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_);",
          "719:       auto options =",
          "720:           Http::AsyncClient::RequestOptions()",
          "721:               .setTimeout(timeout_.global_timeout_)",
          "722:               .setParentSpan(callbacks_->activeSpan())",
          "723:               .setChildSpanName(\"mirror\")",
          "724:               .setSampled(shadow_policy.traceSampled())",
          "725:               .setIsShadow(true)",
          "726:               .setBufferAccount(callbacks_->account())",
          "729:               .setBufferLimit(1 > retry_shadow_buffer_limit_ ? 1 : retry_shadow_buffer_limit_);",
          "730:       if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "731:         options.setFilterConfig(config_);",
          "732:       }",
          "733:       if (end_stream) {",
          "736:         Http::RequestMessagePtr request(new Http::RequestMessageImpl(",
          "737:             Http::createHeaderMap<Http::RequestHeaderMapImpl>(*shadow_headers_)));",
          "738:         config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "739:                                       options);",
          "740:       } else {",
          "741:         Http::AsyncClient::OngoingRequest* shadow_stream = config_.shadowWriter().streamingShadow(",
          "742:             std::string(shadow_cluster_name.value()), std::move(shadow_headers), options);",
          "743:         if (shadow_stream != nullptr) {",
          "744:           shadow_streams_.insert(shadow_stream);",
          "745:           shadow_stream->setDestructorCallback(",
          "746:               [this, shadow_stream]() { shadow_streams_.erase(shadow_stream); });",
          "747:           shadow_stream->setWatermarkCallbacks(*callbacks_);",
          "748:         }",
          "749:       }",
          "750:     }",
          "751:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "751:   ASSERT(upstream_requests_.size() <= 1);",
          "754:                    (route_entry_ && route_entry_->internalRedirectPolicy().enabled());",
          "755:   if (buffering &&",
          "756:       getLength(callbacks_->decodingBuffer()) + data.length() > retry_shadow_buffer_limit_) {",
          "",
          "[Removed Lines]",
          "753:   bool buffering = (retry_state_ && retry_state_->enabled()) || !active_shadow_policies_.empty() ||",
          "",
          "[Added Lines]",
          "804:   bool buffering = (retry_state_ && retry_state_->enabled()) ||",
          "805:                    (!active_shadow_policies_.empty() && !streaming_shadows_) ||",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "782:   ASSERT(buffering || !upstream_requests_.empty());",
          "790:     }",
          "799:     upstream_requests_.front()->acceptDataFromRouter(data, end_stream);",
          "800:   }",
          "",
          "[Removed Lines]",
          "784:   if (buffering) {",
          "787:     if (!upstream_requests_.empty()) {",
          "788:       Buffer::OwnedImpl copy(data);",
          "789:       upstream_requests_.front()->acceptDataFromRouter(copy, end_stream);",
          "797:     callbacks_->addDecodedData(data, true);",
          "798:   } else {",
          "",
          "[Added Lines]",
          "836:   for (auto* shadow_stream : shadow_streams_) {",
          "837:     if (end_stream) {",
          "838:       shadow_stream->removeDestructorCallback();",
          "839:       shadow_stream->removeWatermarkCallbacks();",
          "841:     Buffer::OwnedImpl copy(data);",
          "842:     shadow_stream->sendData(copy, end_stream);",
          "843:   }",
          "844:   if (end_stream) {",
          "845:     shadow_streams_.clear();",
          "846:   }",
          "847:   if (buffering) {",
          "848:     Buffer::OwnedImpl copy(data);",
          "849:     callbacks_->addDecodedData(copy, true);",
          "850:   }",
          "851:   if (!upstream_requests_.empty()) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "823:   if (!upstream_requests_.empty()) {",
          "824:     upstream_requests_.front()->acceptTrailersFromRouter(trailers);",
          "825:   }",
          "826:   onRequestComplete();",
          "827:   return Http::FilterTrailersStatus::StopIteration;",
          "828: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:   for (auto* shadow_stream : shadow_streams_) {",
          "880:     shadow_stream->removeDestructorCallback();",
          "881:     shadow_stream->removeWatermarkCallbacks();",
          "882:     shadow_stream->captureAndSendTrailers(",
          "883:         Http::createHeaderMap<Http::RequestTrailerMapImpl>(*shadow_trailers_));",
          "884:   }",
          "885:   shadow_streams_.clear();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "881:   for (const auto& shadow_policy_wrapper : active_shadow_policies_) {",
          "882:     const auto& shadow_policy = shadow_policy_wrapper.get();",
          "885:         getShadowCluster(shadow_policy, *downstream_headers_);",
          "889:       continue;",
          "890:     }",
          "",
          "[Removed Lines]",
          "884:     const absl::optional<absl::string_view> cluster_name =",
          "888:     if (!cluster_name.has_value()) {",
          "",
          "[Added Lines]",
          "945:     const absl::optional<absl::string_view> shadow_cluster_name =",
          "949:     if (!shadow_cluster_name.has_value()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "907:     if (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.closer_shadow_behavior\")) {",
          "908:       options.setFilterConfig(config_);",
          "909:     }",
          "911:   }",
          "912: }",
          "",
          "[Removed Lines]",
          "910:     config_.shadowWriter().shadow(std::string(cluster_name.value()), std::move(request), options);",
          "",
          "[Added Lines]",
          "971:     config_.shadowWriter().shadow(std::string(shadow_cluster_name.value()), std::move(request),",
          "972:                                   options);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "922:   if (!upstream_requests_.empty()) {",
          "927:     if (timeout_.global_timeout_.count() > 0) {",
          "928:       response_timeout_ = dispatcher.createTimer([this]() -> void { onResponseTimeout(); });",
          "",
          "[Removed Lines]",
          "925:     maybeDoShadowing();",
          "",
          "[Added Lines]",
          "987:     if (!streaming_shadows_) {",
          "988:       maybeDoShadowing();",
          "989:     }",
          "",
          "---------------"
        ],
        "source/common/router/router.h||source/common/router/router.h": [
          "File: source/common/router/router.h -> source/common/router/router.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   Filter(FilterConfig& config, FilterStats& stats)",
          "367:       : config_(config), stats_(stats), downstream_1xx_headers_encoded_(false),",
          "368:         downstream_response_started_(false), downstream_end_stream_(false), is_retry_(false),",
          "371:   ~Filter() override;",
          "",
          "[Removed Lines]",
          "369:         request_buffer_overflowed_(false) {}",
          "",
          "[Added Lines]",
          "369:         request_buffer_overflowed_(false), streaming_shadows_(Runtime::runtimeFeatureEnabled(",
          "370:                                                \"envoy.reloadable_features.streaming_shadow\")) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:   Network::TransportSocketOptionsConstSharedPtr transport_socket_options_;",
          "662:   Network::Socket::OptionsSharedPtr upstream_options_;",
          "663: };",
          "665: class ProdFilter : public Filter {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "665:   absl::flat_hash_set<Http::AsyncClient::OngoingRequest*> shadow_streams_;",
          "666:   const bool streaming_shadows_;",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.cc||source/common/router/shadow_writer_impl.cc": [
          "File: source/common/router/shadow_writer_impl.cc -> source/common/router/shadow_writer_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: namespace Envoy {",
          "12: namespace Router {",
          "14: void ShadowWriterImpl::shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "15:                               const Http::AsyncClient::RequestOptions& options) {",
          "19:   const auto thread_local_cluster = cm_.getThreadLocalCluster(cluster);",
          "20:   if (thread_local_cluster == nullptr) {",
          "21:     ENVOY_LOG(debug, \"shadow cluster '{}' does not exist\", cluster);",
          "23:   }",
          "39: }",
          "41: } // namespace Router",
          "",
          "[Removed Lines]",
          "22:     return;",
          "25:   ASSERT(!request->headers().getHostValue().empty());",
          "27:   auto parts = StringUtil::splitToken(request->headers().getHostValue(), \":\");",
          "28:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "29:   request->headers().setHost(parts.size() == 2",
          "30:                                  ? absl::StrJoin(parts, \"-shadow:\")",
          "31:                                  : absl::StrCat(request->headers().getHostValue(), \"-shadow\"));",
          "32:   const auto& shadow_options = options.is_shadow ? options : [options] {",
          "33:     Http::AsyncClient::RequestOptions actual_options(options);",
          "34:     actual_options.setIsShadow(true);",
          "35:     return actual_options;",
          "36:   }();",
          "38:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, shadow_options);",
          "",
          "[Added Lines]",
          "14: namespace {",
          "16: std::string shadowAppendedHost(absl::string_view host) {",
          "17:   ASSERT(!host.empty());",
          "20:   auto parts = StringUtil::splitToken(host, \":\");",
          "21:   ASSERT(!parts.empty() && parts.size() <= 2);",
          "22:   return parts.size() == 2 ? absl::StrJoin(parts, \"-shadow:\") : absl::StrCat(host, \"-shadow\");",
          "23: }",
          "25: } // namespace",
          "29:   const auto thread_local_cluster =",
          "30:       getClusterAndPreprocessHeadersAndOptions(cluster, request->headers(), options);",
          "31:   if (thread_local_cluster == nullptr) {",
          "32:     return;",
          "33:   }",
          "35:   thread_local_cluster->httpAsyncClient().send(std::move(request), *this, options);",
          "36: }",
          "38: Http::AsyncClient::OngoingRequest*",
          "39: ShadowWriterImpl::streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "40:                                   const Http::AsyncClient::RequestOptions& options) {",
          "41:   const auto thread_local_cluster =",
          "42:       getClusterAndPreprocessHeadersAndOptions(cluster, *headers, options);",
          "43:   if (thread_local_cluster == nullptr) {",
          "44:     return nullptr;",
          "45:   }",
          "46:   return thread_local_cluster->httpAsyncClient().startRequest(std::move(headers), *this, options);",
          "47: }",
          "49: Upstream::ThreadLocalCluster* ShadowWriterImpl::getClusterAndPreprocessHeadersAndOptions(",
          "50:     absl::string_view cluster, Http::RequestHeaderMap& headers,",
          "51:     const Http::AsyncClient::RequestOptions& options) {",
          "58:     return nullptr;",
          "61:   headers.setHost(shadowAppendedHost(headers.getHostValue()));",
          "63:   const_cast<Http::AsyncClient::RequestOptions&>(options).setIsShadow(true);",
          "64:   return thread_local_cluster;",
          "",
          "---------------"
        ],
        "source/common/router/shadow_writer_impl.h||source/common/router/shadow_writer_impl.h": [
          "File: source/common/router/shadow_writer_impl.h -> source/common/router/shadow_writer_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   void shadow(const std::string& cluster, Http::RequestMessagePtr&& request,",
          "24:               const Http::AsyncClient::RequestOptions& options) override;",
          "27:   void onSuccess(const Http::AsyncClient::Request&, Http::ResponseMessagePtr&&) override {}",
          "28:   void onFailure(const Http::AsyncClient::Request&, Http::AsyncClient::FailureReason) override {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:   Http::AsyncClient::OngoingRequest*",
          "27:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& headers,",
          "28:                   const Http::AsyncClient::RequestOptions& options) override;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:                                     const Http::ResponseHeaderMap*) override {}",
          "32: private:",
          "33:   Upstream::ClusterManager& cm_;",
          "34: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   Upstream::ThreadLocalCluster*",
          "38:   getClusterAndPreprocessHeadersAndOptions(absl::string_view cluster,",
          "39:                                            Http::RequestHeaderMap& headers,",
          "40:                                            const Http::AsyncClient::RequestOptions& options);",
          "",
          "---------------"
        ],
        "source/common/runtime/runtime_features.cc||source/common/runtime/runtime_features.cc": [
          "File: source/common/runtime/runtime_features.cc -> source/common/runtime/runtime_features.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: FALSE_RUNTIME_GUARD(envoy_reloadable_features_test_feature_false);",
          "82: FALSE_RUNTIME_GUARD(envoy_reloadable_features_unified_mux);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: FALSE_RUNTIME_GUARD(envoy_reloadable_features_streaming_shadow);",
          "",
          "---------------"
        ],
        "test/common/buffer/buffer_test.cc||test/common/buffer/buffer_test.cc": [
          "File: test/common/buffer/buffer_test.cc -> test/common/buffer/buffer_test.cc"
        ],
        "test/common/http/async_client_impl_test.cc||test/common/http/async_client_impl_test.cc": [
          "File: test/common/http/async_client_impl_test.cc -> test/common/http/async_client_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: using testing::NiceMock;",
          "37: using testing::Return;",
          "38: using testing::ReturnRef;",
          "40: namespace Envoy {",
          "41: namespace Http {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: using testing::StrictMock;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   TestRequestHeaderMapImpl headers_{};",
          "82:   RequestMessagePtr message_{new RequestMessageImpl()};",
          "83:   Stats::MockIsolatedStatsStore stats_store_;",
          "86:   NiceMock<Upstream::MockClusterManager> cm_;",
          "87:   NiceMock<MockRequestEncoder> stream_encoder_;",
          "88:   ResponseDecoder* response_decoder_{};",
          "",
          "[Removed Lines]",
          "84:   MockAsyncClientCallbacks callbacks_;",
          "85:   MockAsyncClientStreamCallbacks stream_callbacks_;",
          "",
          "[Added Lines]",
          "85:   NiceMock<MockAsyncClientCallbacks> callbacks_;",
          "86:   NiceMock<MockAsyncClientStreamCallbacks> stream_callbacks_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:                      .value());",
          "204: }",
          "206: TEST_F(AsyncClientImplTracingTest, Basic) {",
          "207:   Tracing::MockSpan* child_span{new Tracing::MockSpan()};",
          "208:   message_->body().add(\"test body\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: TEST_F(AsyncClientImplTest, BasicOngoingRequest) {",
          "208:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "209:   HttpTestUtility::addDefaultHeaders(*headers);",
          "210:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "212:   Buffer::OwnedImpl data(\"test data\");",
          "213:   const Buffer::OwnedImpl data_copy(data.toString());",
          "215:   auto trailers = std::make_unique<TestRequestTrailerMapImpl>();",
          "216:   trailers->addCopy(\"some\", \"trailer\");",
          "217:   const TestRequestTrailerMapImpl trailers_copy = *trailers;",
          "219:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "220:       .WillOnce(Invoke(",
          "221:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "222:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "223:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "224:                                   stream_info_, {});",
          "225:             response_decoder_ = &decoder;",
          "226:             return nullptr;",
          "227:           }));",
          "229:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "230:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "232:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "233:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "234:   EXPECT_CALL(stream_encoder_, encodeTrailers(HeaderMapEqualRef(&trailers_copy)));",
          "236:   AsyncClient::OngoingRequest* request =",
          "237:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "238:   EXPECT_NE(request, nullptr);",
          "240:   request->sendData(data, false);",
          "241:   request->captureAndSendTrailers(std::move(trailers));",
          "243:   expectSuccess(request, 200);",
          "245:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "246:   response_decoder_->decodeHeaders(std::move(response_headers), false);",
          "247:   Buffer::OwnedImpl response_data(\"test data\");",
          "248:   response_decoder_->decodeData(response_data, true);",
          "250:   EXPECT_EQ(",
          "251:       1UL,",
          "252:       cm_.thread_local_cluster_.cluster_.info_->stats_store_.counter(\"upstream_rq_200\").value());",
          "253:   EXPECT_EQ(1UL, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "254:                      .counter(\"internal.upstream_rq_200\")",
          "255:                      .value());",
          "256: }",
          "258: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarking) {",
          "259:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "260:   HttpTestUtility::addDefaultHeaders(*headers);",
          "261:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "262:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "263:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "265:   Buffer::OwnedImpl data(\"test data\");",
          "266:   const Buffer::OwnedImpl data_copy(data.toString());",
          "268:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "269:       .WillOnce(Invoke(",
          "270:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "271:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "272:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "273:                                   stream_info_, {});",
          "275:             dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "276:             response_decoder_ = &decoder;",
          "277:             return nullptr;",
          "278:           }));",
          "280:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "282:   auto* request =",
          "283:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "284:   EXPECT_NE(request, nullptr);",
          "285:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "287:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "288:   request->setWatermarkCallbacks(watermark_callbacks);",
          "291:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "292:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runLowWatermarkCallbacks();",
          "294:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "295:   request->sendData(data, false);",
          "297:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "298:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "301:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "302:   request->removeWatermarkCallbacks();",
          "304:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "305:   request->setWatermarkCallbacks(watermark_callbacks);",
          "307:   EXPECT_CALL(stream_encoder_, encodeData(BufferStringEqual(\"\"), true));",
          "308:   Buffer::OwnedImpl empty;",
          "309:   request->sendData(empty, true);",
          "311:   ResponseHeaderMapPtr response_headers(new TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "313:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "314:   response_decoder_->decodeHeaders(std::move(response_headers), true);",
          "315: }",
          "317: TEST_F(AsyncClientImplTest, OngoingRequestWithWatermarkingAndReset) {",
          "318:   auto headers = std::make_unique<TestRequestHeaderMapImpl>();",
          "319:   HttpTestUtility::addDefaultHeaders(*headers);",
          "320:   TestRequestHeaderMapImpl headers_copy = *headers;",
          "321:   headers_copy.addCopy(\"x-envoy-internal\", \"true\");",
          "322:   headers_copy.addCopy(\"x-forwarded-for\", \"127.0.0.1\");",
          "324:   Buffer::OwnedImpl data(\"test data\");",
          "325:   const Buffer::OwnedImpl data_copy(data.toString());",
          "327:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "328:       .WillOnce(Invoke(",
          "329:           [&](ResponseDecoder& decoder, ConnectionPool::Callbacks& callbacks,",
          "330:               const ConnectionPool::Instance::StreamOptions&) -> ConnectionPool::Cancellable* {",
          "331:             callbacks.onPoolReady(stream_encoder_, cm_.thread_local_cluster_.conn_pool_.host_,",
          "332:                                   stream_info_, {});",
          "333:             response_decoder_ = &decoder;",
          "334:             return nullptr;",
          "335:           }));",
          "337:   EXPECT_CALL(stream_encoder_, encodeHeaders(HeaderMapEqualRef(&headers_copy), false));",
          "339:   auto* request =",
          "340:       client_.startRequest(std::move(headers), callbacks_, AsyncClient::RequestOptions());",
          "341:   EXPECT_NE(request, nullptr);",
          "343:   StrictMock<MockStreamDecoderFilterCallbacks> watermark_callbacks;",
          "344:   request->setWatermarkCallbacks(watermark_callbacks);",
          "346:   EXPECT_CALL(stream_encoder_, encodeData(BufferEqual(&data_copy), false));",
          "347:   request->sendData(data, false);",
          "349:   EXPECT_CALL(watermark_callbacks, onDecoderFilterAboveWriteBufferHighWatermark());",
          "350:   dynamic_cast<MockStream&>(stream_encoder_.getStream()).runHighWatermarkCallbacks();",
          "353:   EXPECT_CALL(watermark_callbacks, onDecoderFilterBelowWriteBufferLowWatermark());",
          "354:   expectSuccess(request, 503);",
          "355:   stream_encoder_.getStream().resetStream(StreamResetReason::RemoteReset);",
          "356: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1120:   stream->sendData(*body, false);",
          "1122:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1124:   filter_callbacks->encodeHeaders(",
          "1125:       ResponseHeaderMapPtr(new TestResponseHeaderMapImpl{{\":status\", \"200\"}}), false, \"details\");",
          "1126:   dispatcher_.clearDeferredDeleteList();",
          "",
          "[Removed Lines]",
          "1123:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1275:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1661:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1662:   stream->sendHeaders(headers_, false);",
          "1663:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1665:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "1666:   EXPECT_TRUE(stream->isAboveWriteBufferHighWatermark());",
          "1667:   filter_callbacks->onDecoderFilterAboveWriteBufferHighWatermark();",
          "",
          "[Removed Lines]",
          "1664:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1816:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1677:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1678:   stream->sendHeaders(headers_, false);",
          "1679:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1681:   auto route = filter_callbacks->route();",
          "1682:   ASSERT_NE(nullptr, route);",
          "1683:   auto route_entry = route->routeEntry();",
          "",
          "[Removed Lines]",
          "1680:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1832:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1698: TEST_F(AsyncClientImplTest, DumpState) {",
          "1699:   AsyncClient::Stream* stream = client_.start(stream_callbacks_, AsyncClient::StreamOptions());",
          "1700:   Http::StreamDecoderFilterCallbacks* filter_callbacks =",
          "1703:   std::stringstream out;",
          "1704:   filter_callbacks->scope().dumpState(out);",
          "",
          "[Removed Lines]",
          "1701:       static_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "[Added Lines]",
          "1853:       dynamic_cast<Http::AsyncStreamImpl*>(stream);",
          "",
          "---------------"
        ],
        "test/common/router/router_2_test.cc||test/common/router/router_2_test.cc": [
          "File: test/common/router/router_2_test.cc -> test/common/router/router_2_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   Http::TestRequestHeaderMapImpl headers;",
          "31:   HttpTestUtility::addDefaultHeaders(headers);",
          "32:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, false));",
          "34:   EXPECT_FALSE(headers.has(\"x-envoy-expected-rq-timeout-ms\"));",
          "37:   EXPECT_CALL(cancellable_, cancel(_));",
          "39:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "40:   EXPECT_EQ(0U,",
          "41:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "33:   router_.decodeHeaders(headers, true);",
          "38:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "33:   router_->decodeHeaders(headers, true);",
          "38:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   Http::TestRequestHeaderMapImpl headers;",
          "56:   HttpTestUtility::addDefaultHeaders(headers);",
          "58: }",
          "",
          "[Removed Lines]",
          "57:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "57:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   Http::TestRequestHeaderMapImpl headers;",
          "72:   HttpTestUtility::addDefaultHeaders(headers);",
          "74:   EXPECT_EQ(1U,",
          "75:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "73:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "73:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:   Http::TestRequestHeaderMapImpl headers;",
          "104:   HttpTestUtility::addDefaultHeaders(headers);",
          "106: }",
          "108: class WatermarkTest : public RouterTestBase {",
          "",
          "[Removed Lines]",
          "105:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "105:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:               return nullptr;",
          "136:             }));",
          "137:     HttpTestUtility::addDefaultHeaders(headers_);",
          "139:     if (pool_ready) {",
          "140:       EXPECT_EQ(",
          "141:           1U, callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "138:     router_.decodeHeaders(headers_, header_only_request);",
          "",
          "[Added Lines]",
          "138:     router_->decodeHeaders(headers_, header_only_request);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "201: TEST_F(WatermarkTest, FilterWatermarks) {",
          "202:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "205:   sendRequest(false, false);",
          "208:   Buffer::OwnedImpl data(\"1234567890\");",
          "210:   EXPECT_EQ(0u, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "211:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "212:                     .value());",
          "",
          "[Removed Lines]",
          "203:   router_.setDecoderFilterCallbacks(callbacks_);",
          "209:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "203:   router_->setDecoderFilterCallbacks(callbacks_);",
          "209:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:   Buffer::OwnedImpl last_byte(\"!\");",
          "218:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "219:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "220:                     .value());",
          "",
          "[Removed Lines]",
          "217:   router_.decodeData(last_byte, true);",
          "",
          "[Added Lines]",
          "217:   router_->decodeData(last_byte, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238: TEST_F(WatermarkTest, FilterWatermarksUnwound) {",
          "239:   num_add_callbacks_ = 0;",
          "240:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(3)).WillRepeatedly(Return(10));",
          "243:   sendRequest(false, false);",
          "246:   Buffer::OwnedImpl data(\"1234567890!\");",
          "248:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "249:                     .counter(\"upstream_flow_control_backed_up_total\")",
          "250:                     .value());",
          "",
          "[Removed Lines]",
          "241:   router_.setDecoderFilterCallbacks(callbacks_);",
          "247:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "241:   router_->setDecoderFilterCallbacks(callbacks_);",
          "247:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "262: TEST_F(WatermarkTest, RetryRequestNotComplete) {",
          "263:   EXPECT_CALL(callbacks_, decoderBufferLimit()).Times(AtLeast(2)).WillRepeatedly(Return(10));",
          "265:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "266:   Http::ResponseDecoder* response_decoder = nullptr;",
          "267:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "264:   router_.setDecoderFilterCallbacks(callbacks_);",
          "",
          "[Added Lines]",
          "264:   router_->setDecoderFilterCallbacks(callbacks_);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "273:   HttpTestUtility::addDefaultHeaders(headers);",
          "275:   Buffer::OwnedImpl data(\"1234567890123\");",
          "281:   EXPECT_EQ(1U,",
          "282:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "274:   router_.decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_.decodeData(data, false);",
          "",
          "[Added Lines]",
          "274:   router_->decodeHeaders(headers, false);",
          "276:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "277:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "278:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "280:   router_->decodeData(data, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "321:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "322:       .WillOnce(Return(child_span));",
          "323:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "325:   EXPECT_EQ(1U,",
          "326:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "324:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "324:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "370:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "371:       .WillOnce(Return(child_span));",
          "372:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "374:   EXPECT_EQ(1U,",
          "375:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "373:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "373:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "423:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "424:       .WillOnce(Return(child_span));",
          "425:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "427:   EXPECT_EQ(1U,",
          "428:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "426:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "426:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443:   EXPECT_CALL(*child_span,",
          "444:               setTag(Eq(Tracing::Tags::get().Canceled), Eq(Tracing::Tags::get().True)));",
          "445:   EXPECT_CALL(*child_span, finishSpan());",
          "447: }",
          "",
          "[Removed Lines]",
          "446:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "446:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "472:   EXPECT_CALL(callbacks_.active_span_, spawnChild_(_, \"router observability_name egress\", _))",
          "473:       .WillOnce(Return(child_span_1));",
          "474:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "476:   EXPECT_EQ(1U,",
          "477:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "475:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "475:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "492:   EXPECT_CALL(*child_span_1, setTag(Eq(Tracing::Tags::get().ErrorReason), Eq(\"remote reset\")));",
          "493:   EXPECT_CALL(*child_span_1, finishSpan());",
          "496:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "495:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "495:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "505:                      -> Http::ConnectionPool::Cancellable* {",
          "506:             response_decoder = &decoder;",
          "507:             EXPECT_CALL(*child_span_2, injectContext(_, _));",
          "509:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "510:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "511:             return nullptr;",
          "",
          "[Removed Lines]",
          "508:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "508:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "516:   EXPECT_CALL(callbacks_, tracingConfig()).Times(2);",
          "517:   EXPECT_CALL(*child_span_2, setTag(Eq(Tracing::Tags::get().RetryCount), Eq(\"1\")));",
          "520:   EXPECT_EQ(2U,",
          "521:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "519:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "519:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "566:   Http::TestRequestHeaderMapImpl headers;",
          "567:   HttpTestUtility::addDefaultHeaders(headers);",
          "569:   EXPECT_EQ(1U,",
          "570:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "568:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "568:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "632:         EXPECT_TRUE(end_stream);",
          "633:       }));",
          "636:   EXPECT_EQ(callbacks_.details(),",
          "637:             fmt::format(\"request_headers_failed_strict_check{{{}}}\", checked_header));",
          "638: }",
          "",
          "[Removed Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(req_headers, true));",
          "",
          "[Added Lines]",
          "635:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(req_headers, true));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "662:   HttpTestUtility::addDefaultHeaders(headers);",
          "664:   expectResponseTimerCreate();",
          "667: }",
          "669: const std::vector<std::string> SUPPORTED_STRICT_CHECKED_HEADERS = {",
          "",
          "[Removed Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "666:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "665:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "666:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "701:         EXPECT_FALSE(end_stream);",
          "702:       }));",
          "705:   EXPECT_THAT(callbacks_.details(),",
          "706:               StartsWith(fmt::format(\"request_headers_failed_strict_check{{\")));",
          "708: }",
          "",
          "[Removed Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_.decodeHeaders(headers, true));",
          "707:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "704:   EXPECT_EQ(Http::FilterHeadersStatus::StopIteration, router_->decodeHeaders(headers, true));",
          "707:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "769:   Http::TestRequestHeaderMapImpl headers{",
          "770:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "771:   HttpTestUtility::addDefaultHeaders(headers);",
          "773:   Buffer::OwnedImpl data;",
          "775:   EXPECT_EQ(1U,",
          "776:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "772:   router_.decodeHeaders(headers, false);",
          "774:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "772:   router_->decodeHeaders(headers, false);",
          "774:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "782:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "783:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "784:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "786:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "787:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "788:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "785:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "785:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "822:   Http::TestRequestHeaderMapImpl headers{",
          "823:       {\"x-envoy-internal\", \"true\"}, {\"content-type\", \"application/grpc\"}, {\"grpc-timeout\", \"20S\"}};",
          "824:   HttpTestUtility::addDefaultHeaders(headers);",
          "826:   Buffer::OwnedImpl data;",
          "828:   EXPECT_EQ(1U,",
          "829:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "825:   router_.decodeHeaders(headers, false);",
          "827:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "825:   router_->decodeHeaders(headers, false);",
          "827:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "835:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "836:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "837:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "839:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "840:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "841:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "838:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "838:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     EXPECT_CALL(",
          "123:         cm_.thread_local_cluster_.cluster_.info_->request_response_size_stats_store_,",
          "124:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_headers_size\"), 74ull));",
          "127:     EXPECT_CALL(callbacks_.dispatcher_, createTimer_);",
          "128:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "125:     router_.decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "125:     router_->decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         deliverHistogramToSinks(Property(&Stats::Metric::name, \"upstream_rq_body_size\"), 5ull));",
          "131:     Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "132:     EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer,",
          "135:     if (with_trailers) {",
          "136:       Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "138:     }",
          "140:     EXPECT_CALL(",
          "",
          "[Removed Lines]",
          "133:               router_.decodeData(*body_data, !with_trailers));",
          "137:       router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "133:               router_->decodeData(*body_data, !with_trailers));",
          "137:       router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:       response_decoder->decodeTrailers(std::move(response_trailers));",
          "160:     }",
          "163:   }",
          "165:   void testAutoSniOptions(",
          "",
          "[Removed Lines]",
          "162:     router_.onDestroy();",
          "",
          "[Added Lines]",
          "162:     router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:     expectResponseTimerCreate();",
          "181:     HttpTestUtility::addDefaultHeaders(headers);",
          "183:     EXPECT_EQ(server_name,",
          "184:               stream_info.filterState()",
          "185:                   ->getDataReadOnly<Network::UpstreamServerName>(Network::UpstreamServerName::key())",
          "",
          "[Removed Lines]",
          "182:     router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "182:     router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:                                      ->value()[0]);",
          "192:     }",
          "193:     EXPECT_CALL(cancellable_, cancel(_));",
          "195:     EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "196:     EXPECT_EQ(0U,",
          "197:               callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "194:     router_.onDestroy();",
          "",
          "[Added Lines]",
          "194:     router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "294:   HttpTestUtility::addDefaultHeaders(headers);",
          "295:   EXPECT_CALL(callbacks_, route()).WillOnce(Return(nullptr));",
          "298:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_route\").value());",
          "299:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "300:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "297:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "297:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "322:                      testing::Eq(\"missing required header: :method\"), _, _,",
          "323:                      \"filter_removed_required_request_headers{missing_required_header:_:method}\"))",
          "324:       .WillOnce(InvokeWithoutArgs([] {}));",
          "327: }",
          "329: TEST_F(RouterTest, ClusterNotFound) {",
          "",
          "[Removed Lines]",
          "325:   router_.decodeHeaders(headers, true);",
          "326:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "325:   router_->decodeHeaders(headers, true);",
          "326:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "332:   Http::TestRequestHeaderMapImpl headers;",
          "333:   HttpTestUtility::addDefaultHeaders(headers);",
          "334:   ON_CALL(cm_, getThreadLocalCluster(_)).WillByDefault(Return(nullptr));",
          "336:   EXPECT_EQ(1UL, stats_store_.counter(\"test.no_cluster\").value());",
          "337:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "338:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "335:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "335:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "344:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "345:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "346:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "348:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "349:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "350:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "347:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "[Added Lines]",
          "347:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "364:   Http::TestRequestHeaderMapImpl headers;",
          "365:   HttpTestUtility::addDefaultHeaders(headers);",
          "367:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "369:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "366:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "366:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "376:   ON_CALL(callbacks_.route_->route_entry_, priority())",
          "377:       .WillByDefault(Return(Upstream::ResourcePriority::High));",
          "378:   EXPECT_CALL(cm_.thread_local_cluster_,",
          "380:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "381:       .WillOnce(Invoke([&](Http::StreamDecoder&, Http::ConnectionPool::Callbacks& callbacks,",
          "382:                            const Http::ConnectionPool::Instance::StreamOptions&)",
          "",
          "[Removed Lines]",
          "379:               httpConnPool(Upstream::ResourcePriority::High, _, &router_));",
          "",
          "[Added Lines]",
          "379:               httpConnPool(Upstream::ResourcePriority::High, _, router_.get()));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "396:   Http::TestRequestHeaderMapImpl headers;",
          "397:   HttpTestUtility::addDefaultHeaders(headers);",
          "399:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "401:   EXPECT_EQ(0U,",
          "",
          "[Removed Lines]",
          "398:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "398:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "414:   HttpTestUtility::addDefaultHeaders(headers);",
          "415:   EXPECT_CALL(callbacks_.route_->route_entry_, finalizeRequestHeaders(_, _, true));",
          "418:   EXPECT_EQ(\"10\", headers.get_(\"x-envoy-expected-rq-timeout-ms\"));",
          "421:   EXPECT_CALL(cancellable_, cancel(_));",
          "423:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "424:   EXPECT_EQ(0U,",
          "425:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "417:   router_.decodeHeaders(headers, true);",
          "422:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "417:   router_->decodeHeaders(headers, true);",
          "422:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "434:   Http::TestRequestHeaderMapImpl headers;",
          "435:   HttpTestUtility::addDefaultHeaders(headers);",
          "440:   EXPECT_CALL(cancellable_, cancel(_));",
          "442:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "443:   EXPECT_EQ(0U,",
          "444:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "437:   router_.decodeHeaders(headers, true);",
          "441:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "437:   router_->decodeHeaders(headers, true);",
          "441:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "462:   Http::TestRequestHeaderMapImpl headers;",
          "463:   HttpTestUtility::addDefaultHeaders(headers);",
          "467:   EXPECT_CALL(cancellable_, cancel(_));",
          "469:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "470:   EXPECT_EQ(0U,",
          "471:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "464:   router_.decodeHeaders(headers, true);",
          "468:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "464:   router_->decodeHeaders(headers, true);",
          "468:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "476:       .WillByDefault(Return(&callbacks_.route_->route_entry_.hash_policy_));",
          "477:   EXPECT_CALL(callbacks_.route_->route_entry_.hash_policy_, generateHash(_, _, _, _))",
          "478:       .WillOnce(Return(absl::optional<uint64_t>()));",
          "480:       .WillOnce(Invoke([&](Upstream::ResourcePriority, absl::optional<Http::Protocol>,",
          "481:                            Upstream::LoadBalancerContext* context) {",
          "482:         EXPECT_FALSE(context->computeHashKey());",
          "",
          "[Removed Lines]",
          "479:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, &router_))",
          "",
          "[Added Lines]",
          "479:   EXPECT_CALL(cm_.thread_local_cluster_, httpConnPool(_, _, router_.get()))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "489:   Http::TestRequestHeaderMapImpl headers;",
          "490:   HttpTestUtility::addDefaultHeaders(headers);",
          "494:   EXPECT_CALL(cancellable_, cancel(_));",
          "496:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "497:   EXPECT_EQ(0U,",
          "498:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "491:   router_.decodeHeaders(headers, true);",
          "495:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "491:   router_->decodeHeaders(headers, true);",
          "495:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "501: TEST_F(RouterTest, HashKeyNoHashPolicy) {",
          "502:   ON_CALL(callbacks_.route_->route_entry_, hashPolicy()).WillByDefault(Return(nullptr));",
          "504: }",
          "506: TEST_F(RouterTest, AddCookie) {",
          "",
          "[Removed Lines]",
          "503:   EXPECT_FALSE(router_.computeHashKey().has_value());",
          "",
          "[Added Lines]",
          "503:   EXPECT_FALSE(router_->computeHashKey().has_value());",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "537:   Http::TestRequestHeaderMapImpl headers;",
          "538:   HttpTestUtility::addDefaultHeaders(headers);",
          "541:   Http::ResponseHeaderMapPtr response_headers(",
          "542:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "543:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "544:   EXPECT_EQ(callbacks_.details(), \"via_upstream\");",
          "547: }",
          "549: TEST_F(RouterTest, AddCookieNoDuplicate) {",
          "",
          "[Removed Lines]",
          "539:   router_.decodeHeaders(headers, true);",
          "546:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "539:   router_->decodeHeaders(headers, true);",
          "546:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "580:   Http::TestRequestHeaderMapImpl headers;",
          "581:   HttpTestUtility::addDefaultHeaders(headers);",
          "584:   Http::ResponseHeaderMapPtr response_headers(",
          "585:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"set-cookie\", \"foo=baz\"}});",
          "586:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "589: }",
          "591: TEST_F(RouterTest, AddMultipleCookies) {",
          "",
          "[Removed Lines]",
          "582:   router_.decodeHeaders(headers, true);",
          "588:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "582:   router_->decodeHeaders(headers, true);",
          "588:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "630:   Http::TestRequestHeaderMapImpl headers;",
          "631:   HttpTestUtility::addDefaultHeaders(headers);",
          "634:   Http::ResponseHeaderMapPtr response_headers(",
          "635:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "636:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "638: }",
          "642: TEST_F(RouterTest, MetadataMatchCriteria) {",
          "643:   ON_CALL(callbacks_.route_->route_entry_, metadataMatchCriteria())",
          "",
          "[Removed Lines]",
          "632:   router_.decodeHeaders(headers, true);",
          "637:   router_.onDestroy();",
          "640: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_.metadataMatchCriteria()); }",
          "",
          "[Added Lines]",
          "632:   router_->decodeHeaders(headers, true);",
          "637:   router_->onDestroy();",
          "640: TEST_F(RouterTest, MetadataNoOp) { EXPECT_EQ(nullptr, router_->metadataMatchCriteria()); }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "656:   Http::TestRequestHeaderMapImpl headers;",
          "657:   HttpTestUtility::addDefaultHeaders(headers);",
          "661:   EXPECT_CALL(cancellable_, cancel(_));",
          "663: }",
          "665: TEST_F(RouterTest, MetadataMatchCriteriaFromRequest) {",
          "",
          "[Removed Lines]",
          "658:   router_.decodeHeaders(headers, true);",
          "662:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "658:   router_->decodeHeaders(headers, true);",
          "662:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "685:   Http::TestRequestHeaderMapImpl headers;",
          "686:   HttpTestUtility::addDefaultHeaders(headers);",
          "690:   EXPECT_CALL(cancellable_, cancel(_));",
          "692: }",
          "694: TEST_F(RouterTest, CancelBeforeBoundToPool) {",
          "",
          "[Removed Lines]",
          "687:   router_.decodeHeaders(headers, true);",
          "691:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "687:   router_->decodeHeaders(headers, true);",
          "691:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "699:   Http::TestRequestHeaderMapImpl headers;",
          "700:   HttpTestUtility::addDefaultHeaders(headers);",
          "704:   EXPECT_CALL(cancellable_, cancel(_));",
          "706:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "707:   EXPECT_EQ(0U,",
          "708:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "701:   router_.decodeHeaders(headers, true);",
          "705:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "701:   router_->decodeHeaders(headers, true);",
          "705:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "721:   Http::TestRequestHeaderMapImpl headers;",
          "722:   HttpTestUtility::addDefaultHeaders(headers);",
          "724:   EXPECT_EQ(0U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "725:                     .counter(\"upstream_rq_maintenance_mode\")",
          "726:                     .value());",
          "",
          "[Removed Lines]",
          "723:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "723:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "744:   Http::TestRequestHeaderMapImpl headers;",
          "745:   HttpTestUtility::addDefaultHeaders(headers);",
          "747:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "748:                     .counter(\"upstream_rq_maintenance_mode\")",
          "749:                     .value());",
          "",
          "[Removed Lines]",
          "746:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "746:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "765:   Http::TestRequestHeaderMapImpl headers;",
          "766:   HttpTestUtility::addDefaultHeaders(headers);",
          "769:   Http::ResponseHeaderMapPtr response_headers(",
          "770:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "767:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "767:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "783:   Http::TestRequestHeaderMapImpl headers;",
          "784:   HttpTestUtility::addDefaultHeaders(headers);",
          "787:   Http::ResponseHeaderMapPtr response_headers(",
          "788:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "785:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "785:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "844:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "845:   HttpTestUtility::addDefaultHeaders(headers);",
          "847:   EXPECT_EQ(1U,",
          "848:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "846:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "846:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "851:   EXPECT_EQ(1, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "855:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "856:       std::make_shared<Network::Socket::Options>()};",
          "857:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "854:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "854:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "867:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "871:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "872:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "873:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "875:   EXPECT_EQ(2U,",
          "876:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "868:             router_.upstreamSocketOptions());",
          "874:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "868:             router_->upstreamSocketOptions());",
          "874:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "879:   EXPECT_EQ(2, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "883:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "884:       .Times(0);",
          "885:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "882:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "882:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "883:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "943:   Http::TestRequestHeaderMapImpl headers;",
          "944:   HttpTestUtility::addDefaultHeaders(headers);",
          "947:   EXPECT_EQ(0U,",
          "948:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "945:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "946:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "964:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "965:   HttpTestUtility::addDefaultHeaders(headers);",
          "967:   EXPECT_EQ(1U,",
          "968:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "969:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "973:   Http::ResponseHeaderMapPtr response_headers1(",
          "974:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "975:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "966:   router_.decodeHeaders(headers, true);",
          "972:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "967:   router_->decodeHeaders(headers, true);",
          "973:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "981:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "982:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "983:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "985:   EXPECT_EQ(2U,",
          "986:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "987:   EXPECT_EQ(2U, callbacks_.stream_info_.attemptCount().value());",
          "991:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "992:       .Times(0);",
          "993:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "984:   router_.retry_state_->callback_();",
          "990:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "985:   router_->retry_state_->callback_();",
          "991:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "992:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1067:   Http::TestRequestHeaderMapImpl headers;",
          "1068:   HttpTestUtility::addDefaultHeaders(headers);",
          "1070:   EXPECT_EQ(0U,",
          "1071:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1072:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "1069:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1071:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1081:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1082:   HttpTestUtility::addDefaultHeaders(headers);",
          "1084:   EXPECT_EQ(1U,",
          "1085:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1089:   Http::ResponseHeaderMapPtr response_headers1(",
          "1090:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1091:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1083:   router_.decodeHeaders(headers, true);",
          "1088:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1085:   router_->decodeHeaders(headers, true);",
          "1090:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1097:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "1098:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "1099:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "1101:   EXPECT_EQ(2U,",
          "1102:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1105:   EXPECT_CALL(callbacks_.stream_info_, setResponseFlag(StreamInfo::ResponseFlag::UpstreamOverflow));",
          "1107:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "1108:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "1109:       .Times(0);",
          "",
          "[Removed Lines]",
          "1100:   router_.retry_state_->callback_();",
          "1106:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "1102:   router_->retry_state_->callback_();",
          "1108:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1140:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _))",
          "1141:       .Times(!upstream_filters);",
          "1144:   EXPECT_EQ(1U,",
          "1145:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "1147: }",
          "1149: TEST_F(RouterTest, UpstreamTimeoutAllStatsEmission) {",
          "",
          "[Removed Lines]",
          "1143:   router_.decodeHeaders(headers, true);",
          "1146:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "1145:   router_->decodeHeaders(headers, true);",
          "1148:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1156:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1157:   HttpTestUtility::addDefaultHeaders(headers);",
          "1159:   Buffer::OwnedImpl data;",
          "1161:   EXPECT_EQ(1U,",
          "1162:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1158:   router_.decodeHeaders(headers, false);",
          "1160:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1160:   router_->decodeHeaders(headers, false);",
          "1162:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1188:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "1189:   HttpTestUtility::addDefaultHeaders(headers);",
          "1191:   Buffer::OwnedImpl data;",
          "1193:   EXPECT_EQ(1U,",
          "1194:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1190:   router_.decodeHeaders(headers, false);",
          "1192:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1192:   router_->decodeHeaders(headers, false);",
          "1194:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1200:       {\":status\", \"504\"}, {\"content-length\", \"24\"}, {\"content-type\", \"text/plain\"}};",
          "1201:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1202:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1204:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1205:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1206:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1203:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1205:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1227:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1228:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1229:   HttpTestUtility::addDefaultHeaders(headers);",
          "1231:   Buffer::OwnedImpl data;",
          "1233:   EXPECT_EQ(1U,",
          "1234:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1230:   router_.decodeHeaders(headers, false);",
          "1232:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1232:   router_->decodeHeaders(headers, false);",
          "1234:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1263:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1264:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"200\"}};",
          "1265:   HttpTestUtility::addDefaultHeaders(headers);",
          "1267:   Buffer::OwnedImpl data;",
          "1269:   EXPECT_EQ(1U,",
          "1270:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1266:   router_.decodeHeaders(headers, false);",
          "1268:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1268:   router_->decodeHeaders(headers, false);",
          "1270:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1298:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "1299:   HttpTestUtility::addDefaultHeaders(headers);",
          "1301:   Buffer::OwnedImpl data;",
          "1303:   EXPECT_EQ(1U,",
          "1304:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1300:   router_.decodeHeaders(headers, false);",
          "1302:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1302:   router_->decodeHeaders(headers, false);",
          "1304:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1333:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1334:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"100\"}};",
          "1335:   HttpTestUtility::addDefaultHeaders(headers);",
          "1337:   Buffer::OwnedImpl data;",
          "1339:   EXPECT_EQ(1U,",
          "1340:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1336:   router_.decodeHeaders(headers, false);",
          "1338:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1338:   router_->decodeHeaders(headers, false);",
          "1340:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1354:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1356:   Http::ResponseHeaderMapPtr response_headers1(",
          "1357:       new Http::TestResponseHeaderMapImpl{{\":status\", \"504\"}});",
          "1358:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1355:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1357:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1367:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1369:   expectPerTryTimerCreate();",
          "1371:   EXPECT_EQ(2U,",
          "1372:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1370:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1372:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1391:   test_time_.advanceTimeWait(std::chrono::milliseconds(100));",
          "1392:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1393:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1395:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1396:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1397:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1394:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _));",
          "",
          "[Added Lines]",
          "1396:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _));",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1416:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"400\"},",
          "1417:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"320\"}};",
          "1418:   HttpTestUtility::addDefaultHeaders(headers);",
          "1420:   Buffer::OwnedImpl data;",
          "1422:   EXPECT_EQ(1U,",
          "1423:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1419:   router_.decodeHeaders(headers, false);",
          "1421:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1421:   router_->decodeHeaders(headers, false);",
          "1423:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1434:       .Times(0);",
          "1438:   Http::ResponseHeaderMapPtr response_headers1(",
          "1439:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "1440:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "1437:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "1439:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1449:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "1450:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "1451:   expectPerTryTimerCreate();",
          "1453:   EXPECT_EQ(2U,",
          "1454:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1452:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "1454:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1474:   test_time_.advanceTimeWait(std::chrono::milliseconds(240));",
          "1475:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), false));",
          "1476:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "1478:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1479:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "1480:   response_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "1477:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1479:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1497:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1498:                                          {\"grpc-timeout\", \"20S\"}};",
          "1499:   HttpTestUtility::addDefaultHeaders(headers);",
          "1501:   EXPECT_EQ(1U,",
          "1502:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1500:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1502:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1519:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1520:                                          {\"grpc-timeout\", \"20S\"}};",
          "1521:   HttpTestUtility::addDefaultHeaders(headers);",
          "1523:   EXPECT_EQ(1U,",
          "1524:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1522:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1524:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1541:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1542:                                          {\"grpc-timeout\", \"20S\"}};",
          "1543:   HttpTestUtility::addDefaultHeaders(headers);",
          "1545:   EXPECT_EQ(1U,",
          "1546:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1544:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1546:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1564:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1565:                                          {\"grpc-timeout\", \"20S\"}};",
          "1566:   HttpTestUtility::addDefaultHeaders(headers);",
          "1568:   EXPECT_EQ(1U,",
          "1569:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1567:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1569:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1587:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1588:                                          {\"grpc-timeout\", \"20S\"}};",
          "1589:   HttpTestUtility::addDefaultHeaders(headers);",
          "1591:   EXPECT_EQ(1U,",
          "1592:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1590:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1592:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1613:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1614:                                          {\"grpc-timeout\", \"20S\"}};",
          "1615:   HttpTestUtility::addDefaultHeaders(headers);",
          "1617:   EXPECT_EQ(1U,",
          "1618:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1616:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1618:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1640:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1641:                                          {\"grpc-timeout\", \"20S\"}};",
          "1642:   HttpTestUtility::addDefaultHeaders(headers);",
          "1644:   EXPECT_EQ(1U,",
          "1645:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1643:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1645:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1671:   Http::TestRequestHeaderMapImpl headers{{\"content-type\", \"application/grpc\"},",
          "1672:                                          {\"grpc-timeout\", \"20S\"}};",
          "1673:   HttpTestUtility::addDefaultHeaders(headers);",
          "1675:   EXPECT_EQ(1U,",
          "1676:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1674:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "1676:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1696:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"},",
          "1697:                                          {\"x-envoy-internal\", \"true\"}};",
          "1698:   HttpTestUtility::addDefaultHeaders(headers);",
          "1700:   Buffer::OwnedImpl data;",
          "1702:   EXPECT_EQ(1U,",
          "1703:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1699:   router_.decodeHeaders(headers, false);",
          "1701:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1701:   router_->decodeHeaders(headers, false);",
          "1703:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1707:   EXPECT_CALL(encoder.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "1708:   Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"204\"}};",
          "1709:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "1711:   EXPECT_CALL(",
          "1712:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "1713:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(204)));",
          "",
          "[Removed Lines]",
          "1710:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "1712:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1731:   bool filter_state_verified = false;",
          "1733:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "1734:         filter_state_verified =",
          "1735:             stream_info.hasResponseFlag(StreamInfo::ResponseFlag::StreamIdleTimeout);",
          "",
          "[Removed Lines]",
          "1732:   router_.config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "1734:   router_->config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1752:   Http::TestRequestHeaderMapImpl headers;",
          "1753:   HttpTestUtility::addDefaultHeaders(headers);",
          "1756:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1757:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1759:   Buffer::OwnedImpl data;",
          "1762:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1763:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1754:   router_.decodeHeaders(headers, false);",
          "1760:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1756:   router_->decodeHeaders(headers, false);",
          "1762:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1815:   Http::TestRequestHeaderMapImpl headers;",
          "1816:   HttpTestUtility::addDefaultHeaders(headers);",
          "1819:   response_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1820:   EXPECT_CALL(*response_timeout_, enableTimer(_, _));",
          "1822:   Buffer::OwnedImpl data;",
          "1825:   per_try_idle_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1826:   EXPECT_CALL(*per_try_idle_timeout_, enableTimer(std::chrono::milliseconds(3000), _));",
          "",
          "[Removed Lines]",
          "1817:   router_.decodeHeaders(headers, false);",
          "1823:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1819:   router_->decodeHeaders(headers, false);",
          "1825:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1854:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1855:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1856:   HttpTestUtility::addDefaultHeaders(headers);",
          "",
          "[Removed Lines]",
          "1857:   router_.decodeHeaders(headers, false);",
          "",
          "[Added Lines]",
          "1859:   router_->decodeHeaders(headers, false);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1862:   expectResponseTimerCreate();",
          "1864:   Buffer::OwnedImpl data;",
          "1866:   EXPECT_EQ(1U,",
          "1867:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "1865:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1867:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1904:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1905:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1906:   HttpTestUtility::addDefaultHeaders(headers);",
          "1910:   expectResponseTimerCreate();",
          "1911:   Buffer::OwnedImpl data;",
          "1915:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "1907:   router_.decodeHeaders(headers, false);",
          "1912:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1909:   router_->decodeHeaders(headers, false);",
          "1914:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1961:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "1962:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "1963:   HttpTestUtility::addDefaultHeaders(headers);",
          "1965:   Buffer::OwnedImpl data;",
          "1968:   per_try_timeout_ = new Event::MockTimer(&callbacks_.dispatcher_);",
          "1969:   EXPECT_CALL(*per_try_timeout_, enableTimer(_, _));",
          "",
          "[Removed Lines]",
          "1964:   router_.decodeHeaders(headers, false);",
          "1966:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "1966:   router_->decodeHeaders(headers, false);",
          "1968:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2013:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2014:                      -> Http::ConnectionPool::Cancellable* {",
          "2015:             response_decoder1 = &decoder;",
          "2017:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2018:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2019:             return nullptr;",
          "",
          "[Removed Lines]",
          "2016:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2018:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2024:       .Times(2);",
          "2025:   expectPerTryTimerCreate();",
          "2026:   expectResponseTimerCreate();",
          "2030:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2031:   HttpTestUtility::addDefaultHeaders(headers);",
          "2033:   EXPECT_EQ(1U,",
          "2034:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2027:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2028:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "2032:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2029:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2030:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "2034:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2039:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2040:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2041:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2043:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2044:   per_try_timeout_->invokeCallback();",
          "2045:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2042:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2044:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2048:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2049:                      -> Http::ConnectionPool::Cancellable* {",
          "2050:             response_decoder2 = &decoder;",
          "2052:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2053:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2054:             return nullptr;",
          "2055:           }));",
          "2057:   expectPerTryTimerCreate();",
          "2059:   EXPECT_EQ(2U,",
          "2060:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2051:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2058:   router_.retry_state_->callback_();",
          "2061:   EXPECT_EQ(2U, router_.upstreamRequests().size());",
          "2062:   EXPECT_TRUE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2053:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2060:   router_->retry_state_->callback_();",
          "2063:   EXPECT_EQ(2U, router_->upstreamRequests().size());",
          "2064:   EXPECT_TRUE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2070:   Http::ResponseHeaderMapPtr response_headers(",
          "2071:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2073:       .WillOnce(Return(RetryState::RetryDecision::NoRetry));",
          "2074:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2075:               putHttpResponseCode(200));",
          "",
          "[Removed Lines]",
          "2072:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2074:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2084:   ASSERT(response_decoder1);",
          "2085:   response_decoder1->decodeHeaders(std::move(response_headers), true);",
          "2086:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "2091: }",
          "",
          "[Removed Lines]",
          "2087:   EXPECT_EQ(0U, router_.upstreamRequests().size());",
          "2088:   EXPECT_FALSE(router_.finalUpstreamRequest() == nullptr);",
          "",
          "[Added Lines]",
          "2089:   EXPECT_EQ(0U, router_->upstreamRequests().size());",
          "2090:   EXPECT_FALSE(router_->finalUpstreamRequest() == nullptr);",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2108:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2109:                      -> Http::ConnectionPool::Cancellable* {",
          "2110:             response_decoder1 = &decoder;",
          "2112:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2113:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2114:             return nullptr;",
          "",
          "[Removed Lines]",
          "2111:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2113:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2123:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2124:   HttpTestUtility::addDefaultHeaders(headers);",
          "2126:   EXPECT_EQ(1U,",
          "2127:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2125:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2127:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2132:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2133:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2134:   Http::ResponseDecoder* response_decoder2 = nullptr;",
          "2136:   per_try_timeout_->invokeCallback();",
          "2138:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "2135:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2137:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2141:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2142:                      -> Http::ConnectionPool::Cancellable* {",
          "2143:             response_decoder2 = &decoder;",
          "2145:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2146:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2147:             return nullptr;",
          "2148:           }));",
          "2149:   expectPerTryTimerCreate();",
          "2151:   EXPECT_EQ(2U,",
          "2152:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2144:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2150:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2146:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2152:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2163:               putHttpResponseCode(500));",
          "2164:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2165:   EXPECT_CALL(encoder2.stream_, resetStream(_));",
          "2167:       .WillOnce(Return(RetryStatus::NoOverflow));",
          "2169:   ASSERT(response_decoder2);",
          "",
          "[Removed Lines]",
          "2166:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2168:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2219:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2220:                      -> Http::ConnectionPool::Cancellable* {",
          "2221:             response_decoder1 = &decoder;",
          "2223:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(111);",
          "2224:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2225:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2222:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2224:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2231:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2232:   HttpTestUtility::addDefaultHeaders(headers);",
          "2234:   EXPECT_EQ(1U,",
          "2235:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2233:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2235:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2247:               putHttpResponseCode(500));",
          "2248:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2249:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2252:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2250:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "2252:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2259:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2260:                      -> Http::ConnectionPool::Cancellable* {",
          "2261:             response_decoder2 = &decoder;",
          "2263:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(222);",
          "2264:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2265:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2266:             return nullptr;",
          "2267:           }));",
          "2268:   expectPerTryTimerCreate();",
          "2270:   EXPECT_EQ(2U,",
          "2271:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2273:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "2277:   EXPECT_CALL(",
          "2278:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2279:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "",
          "[Removed Lines]",
          "2262:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2269:   router_.retry_state_->callback_();",
          "2276:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2264:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2271:   router_->retry_state_->callback_();",
          "2278:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2285:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2286:                      -> Http::ConnectionPool::Cancellable* {",
          "2287:             response_decoder3 = &decoder;",
          "2289:             upstream_stream_info_.downstream_connection_info_provider_->setConnectionID(333);",
          "2290:             callbacks.onPoolReady(encoder3, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2291:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2288:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2290:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2295:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2296:   per_try_timeout_->invokeCallback();",
          "2297:   expectPerTryTimerCreate();",
          "2299:   EXPECT_EQ(3U,",
          "2300:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2301:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2298:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2300:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2315:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "2316:         EXPECT_TRUE(end_stream);",
          "2317:       }));",
          "2320:   response_decoder3->decodeHeaders(std::move(response_headers2), true);",
          "2321:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "2318:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2320:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2321:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2338:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2339:                      -> Http::ConnectionPool::Cancellable* {",
          "2340:             response_decoder1 = &decoder;",
          "2342:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2343:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2344:             return nullptr;",
          "",
          "[Removed Lines]",
          "2341:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2344:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2353:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2354:   HttpTestUtility::addDefaultHeaders(headers);",
          "2357:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2359:   EXPECT_CALL(",
          "2360:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2361:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2363:   per_try_timeout_->invokeCallback();",
          "2365:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2355:   router_.decodeHeaders(headers, true);",
          "2362:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2358:   router_->decodeHeaders(headers, true);",
          "2365:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2370:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2371:                      -> Http::ConnectionPool::Cancellable* {",
          "2372:             response_decoder2 = &decoder;",
          "2374:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2375:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2376:             return nullptr;",
          "2377:           }));",
          "2379:   expectPerTryTimerCreate();",
          "2383:   Http::ResponseHeaderMapPtr response_headers1(",
          "2384:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2385:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2386:               putHttpResponseCode(500));",
          "2389:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2390:   ASSERT(response_decoder1);",
          "2391:   response_decoder1->decodeHeaders(std::move(response_headers1), true);",
          "",
          "[Removed Lines]",
          "2373:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2380:   router_.retry_state_->callback_();",
          "2387:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2388:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2376:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2383:   router_->retry_state_->callback_();",
          "2390:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2391:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2412:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2413:                      -> Http::ConnectionPool::Cancellable* {",
          "2414:             response_decoder1 = &decoder;",
          "2416:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2417:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2418:             return nullptr;",
          "",
          "[Removed Lines]",
          "2415:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2418:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2427:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2428:   HttpTestUtility::addDefaultHeaders(headers);",
          "2431:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2433:   EXPECT_CALL(",
          "2434:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2435:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2437:   per_try_timeout_->invokeCallback();",
          "2439:   expectPerTryTimerCreate();",
          "",
          "[Removed Lines]",
          "2429:   router_.decodeHeaders(headers, true);",
          "2436:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2432:   router_->decodeHeaders(headers, true);",
          "2439:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2444:       new Http::TestResponseHeaderMapImpl{{\":status\", \"500\"}});",
          "2445:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2446:               putHttpResponseCode(500));",
          "2449:       .WillOnce(Return(RetryState::RetryDecision::RetryWithBackoff));",
          "2450:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2451:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "2447:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2448:   EXPECT_CALL(*router_.retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2450:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "2451:   EXPECT_CALL(*router_->retry_state_, wouldRetryFromHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2460:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2461:                      -> Http::ConnectionPool::Cancellable* {",
          "2462:             response_decoder2 = &decoder;",
          "2464:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2465:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2466:             return nullptr;",
          "2467:           }));",
          "2470:   Http::ResponseHeaderMapPtr response_headers2(",
          "2471:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "2473:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2474:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool end_stream) -> void {",
          "2475:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "2463:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2468:   router_.retry_state_->callback_();",
          "2472:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "2466:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2471:   router_->retry_state_->callback_();",
          "2475:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "2476:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2495:   Http::TestRequestHeaderMapImpl headers{",
          "2496:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2497:   HttpTestUtility::addDefaultHeaders(headers);",
          "2501:   EXPECT_CALL(*retry_options_predicate, updateOptions(_));",
          "2502:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2504:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2505:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2506:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2508:   EXPECT_EQ(2U,",
          "2509:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2510:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2498:   router_.decodeHeaders(headers, false);",
          "2500:   router_.retry_state_->expectResetRetry();",
          "2507:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2502:   router_->decodeHeaders(headers, false);",
          "2504:   router_->retry_state_->expectResetRetry();",
          "2511:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2513:   const std::string body(\"body\");",
          "2514:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body), true));",
          "2515:   Buffer::OwnedImpl buf(body);",
          "2519:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2516:   router_.decodeData(buf, true);",
          "",
          "[Added Lines]",
          "2520:   router_->decodeData(buf, true);",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2544:   Http::TestRequestHeaderMapImpl headers{",
          "2545:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2546:   HttpTestUtility::addDefaultHeaders(headers);",
          "2548:   const std::string body1(\"body1\");",
          "2549:   Buffer::OwnedImpl buf1(body1);",
          "2554:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2556:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2547:   router_.decodeHeaders(headers, false);",
          "2550:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2551:   router_.decodeData(buf1, false);",
          "2553:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "2551:   router_->decodeHeaders(headers, false);",
          "2554:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2555:   router_->decodeData(buf1, false);",
          "2557:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2559:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2560:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2562:   EXPECT_EQ(2U,",
          "2563:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2564:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2561:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2565:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2567:   const std::string body2(\"body2\");",
          "2568:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body2), true));",
          "2569:   Buffer::OwnedImpl buf2(body2);",
          "2574:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2570:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2571:   router_.decodeData(buf2, true);",
          "",
          "[Added Lines]",
          "2574:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2575:   router_->decodeData(buf2, true);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2598:   Http::TestRequestHeaderMapImpl headers{",
          "2599:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2600:   HttpTestUtility::addDefaultHeaders(headers);",
          "2602:   const std::string body1(\"body1\");",
          "2603:   Buffer::OwnedImpl buf1(body1);",
          "2608:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2610:   const std::string body2(\"body2\");",
          "2611:   Buffer::OwnedImpl buf2(body2);",
          "2614:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2615:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2617:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2618:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), false));",
          "2620:   EXPECT_EQ(2U,",
          "2621:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2622:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2601:   router_.decodeHeaders(headers, false);",
          "2604:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2605:   router_.decodeData(buf1, false);",
          "2607:   router_.retry_state_->expectResetRetry();",
          "2612:   router_.decodeData(buf2, false);",
          "2619:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2605:   router_->decodeHeaders(headers, false);",
          "2608:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(3).WillRepeatedly(Return(true));",
          "2609:   router_->decodeData(buf1, false);",
          "2611:   router_->retry_state_->expectResetRetry();",
          "2616:   router_->decodeData(buf2, false);",
          "2623:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2625:   const std::string body3(\"body3\");",
          "2626:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body3), true));",
          "2627:   Buffer::OwnedImpl buf3(body3);",
          "2631:   Http::ResponseHeaderMapPtr response_headers(",
          "",
          "[Removed Lines]",
          "2628:   router_.decodeData(buf3, true);",
          "",
          "[Added Lines]",
          "2632:   router_->decodeData(buf3, true);",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2654:   Http::TestRequestHeaderMapImpl headers{",
          "2655:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2656:   HttpTestUtility::addDefaultHeaders(headers);",
          "2658:   const std::string body1(\"body1\");",
          "2659:   Buffer::OwnedImpl buf1(body1);",
          "2664:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2667:   const std::string body2(\"body2\");",
          "2668:   Buffer::OwnedImpl buf2(body2);",
          "2671:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2672:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "2674:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2675:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1 + body2), true));",
          "2677:   EXPECT_EQ(2U,",
          "2678:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2679:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2657:   router_.decodeHeaders(headers, false);",
          "2660:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2661:   router_.decodeData(buf1, false);",
          "2663:   router_.retry_state_->expectResetRetry();",
          "2669:   router_.decodeData(buf2, true);",
          "2676:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2661:   router_->decodeHeaders(headers, false);",
          "2664:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2665:   router_->decodeData(buf1, false);",
          "2667:   router_->retry_state_->expectResetRetry();",
          "2673:   router_->decodeData(buf2, true);",
          "2680:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2705:   Http::TestRequestHeaderMapImpl headers{",
          "2706:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2707:   HttpTestUtility::addDefaultHeaders(headers);",
          "2709:   const std::string body1(\"body1\");",
          "2710:   Buffer::OwnedImpl buf1(body1);",
          "2715:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2718:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "2721:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "2722:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "",
          "[Removed Lines]",
          "2708:   router_.decodeHeaders(headers, false);",
          "2711:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "2712:   router_.decodeData(buf1, false);",
          "2714:   router_.retry_state_->expectResetRetry();",
          "2719:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "2712:   router_->decodeHeaders(headers, false);",
          "2715:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "2716:   router_->decodeData(buf1, false);",
          "2718:   router_->retry_state_->expectResetRetry();",
          "2723:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2724:   EXPECT_CALL(encoder2, encodeHeaders(HeaderHasValueRef(\"myheader\", \"present\"), false));",
          "2725:   EXPECT_CALL(encoder2, encodeData(BufferStringEqual(body1), false));",
          "2726:   EXPECT_CALL(encoder2, encodeTrailers(HeaderMapEqualRef(&trailers)));",
          "2728:   EXPECT_EQ(2U,",
          "2729:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "2730:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "2727:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2731:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2757:   Http::TestRequestHeaderMapImpl headers{",
          "2758:       {\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}, {\"myheader\", \"present\"}};",
          "2759:   HttpTestUtility::addDefaultHeaders(headers);",
          "2761:   const std::string body1(\"body1\");",
          "2762:   Buffer::OwnedImpl buf1(body1);",
          "2767:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "2770:   const std::string body2(50, 'a');",
          "2771:   Buffer::OwnedImpl buf2(body2);",
          "2774:   EXPECT_EQ(callbacks_.details(), \"request_payload_exceeded_retry_buffer_limit\");",
          "2775:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "",
          "[Removed Lines]",
          "2760:   router_.decodeHeaders(headers, false);",
          "2763:   EXPECT_CALL(*router_.retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2764:   router_.decodeData(buf1, false);",
          "2766:   router_.retry_state_->expectResetRetry();",
          "2772:   router_.decodeData(buf2, false);",
          "",
          "[Added Lines]",
          "2764:   router_->decodeHeaders(headers, false);",
          "2767:   EXPECT_CALL(*router_->retry_state_, enabled()).Times(2).WillRepeatedly(Return(true));",
          "2768:   router_->decodeData(buf1, false);",
          "2770:   router_->retry_state_->expectResetRetry();",
          "2776:   router_->decodeData(buf2, false);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2791:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2792:                      -> Http::ConnectionPool::Cancellable* {",
          "2793:             response_decoder1 = &decoder;",
          "2795:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2796:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2797:             return nullptr;",
          "",
          "[Removed Lines]",
          "2794:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2798:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2806:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2807:   HttpTestUtility::addDefaultHeaders(headers);",
          "2809:   EXPECT_EQ(1U,",
          "2810:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2808:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2812:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2814:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2815:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2816:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2818:   per_try_timeout_->invokeCallback();",
          "2820:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2817:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2821:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2825:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2826:                      -> Http::ConnectionPool::Cancellable* {",
          "2827:             response_decoder2 = &decoder;",
          "2829:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2830:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2831:             return nullptr;",
          "2832:           }));",
          "2833:   expectPerTryTimerCreate();",
          "2835:   EXPECT_EQ(2U,",
          "2836:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2828:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "2834:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2832:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "2838:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2867:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2868:                      -> Http::ConnectionPool::Cancellable* {",
          "2869:             response_decoder1 = &decoder;",
          "2871:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2872:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2873:             return nullptr;",
          "",
          "[Removed Lines]",
          "2870:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2874:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2881:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2882:   HttpTestUtility::addDefaultHeaders(headers);",
          "2884:   EXPECT_EQ(1U,",
          "2885:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2883:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2887:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2889:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2890:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2891:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2893:   per_try_timeout_->invokeCallback();",
          "2895:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2892:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2896:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2900:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "2901:                      -> Http::ConnectionPool::Cancellable* {",
          "2902:             response_decoder2 = &decoder;",
          "2904:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "2905:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "2906:             return nullptr;",
          "",
          "[Removed Lines]",
          "2903:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "2907:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2909:               putResult(Upstream::Outlier::Result::LocalOriginConnectSuccess,",
          "2910:                         absl::optional<uint64_t>(absl::nullopt)));",
          "2911:   expectPerTryTimerCreate();",
          "2913:   EXPECT_EQ(2U,",
          "2914:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2912:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2916:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2921:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "2922:               putHttpResponseCode(503));",
          "2925:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "2926:   ASSERT(response_decoder2);",
          "2927:   response_decoder2->decodeHeaders(std::move(bad_response_headers1), true);",
          "",
          "[Removed Lines]",
          "2924:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "[Added Lines]",
          "2928:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2941:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "2942:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "",
          "[Removed Lines]",
          "2939:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "2943:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2969:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "2970:   HttpTestUtility::addDefaultHeaders(headers);",
          "2972:   EXPECT_EQ(1U,",
          "2973:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2971:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "2975:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2977:       putResult(Upstream::Outlier::Result::LocalOriginTimeout, absl::optional<uint64_t>(504)));",
          "2978:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "2979:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _)).Times(0);",
          "2981:   per_try_timeout_->invokeCallback();",
          "2983:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "",
          "[Removed Lines]",
          "2980:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "[Added Lines]",
          "2984:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2985:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder2, Http::Protocol::Http10);",
          "2987:   expectPerTryTimerCreate();",
          "2989:   EXPECT_EQ(2U,",
          "2990:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "2988:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "2992:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "3005:   Http::ResponseHeaderMapPtr response_headers(",
          "3006:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3009:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3010:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3011:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3002:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3008:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3006:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3012:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3013:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "3027:   NiceMock<Http::MockRequestEncoder> encoder;",
          "3028:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3030:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "3032:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3029:   router_.retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "3034:   router_->retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "3036:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3037:   HttpTestUtility::addDefaultHeaders(headers);",
          "3040:   expectPerTryTimerCreate();",
          "3041:   expectResponseTimerCreate();",
          "3042:   Buffer::OwnedImpl body(\"test body\");",
          "3043:   EXPECT_CALL(encoder, encodeData(_, _));",
          "3044:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3048:   EXPECT_CALL(",
          "3049:       cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3038:   router_.decodeHeaders(headers, false);",
          "3045:   router_.retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3046:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "3043:   router_->decodeHeaders(headers, false);",
          "3050:   router_->retry_state_->expectHedgedPerTryTimeoutRetry();",
          "3051:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "3059:                            const Http::ConnectionPool::Instance::StreamOptions& options)",
          "3060:                            -> Http::ConnectionPool::Cancellable* {",
          "3061:         EXPECT_FALSE(options.can_send_early_data_);",
          "3063:         EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3064:                     putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3065:         callbacks.onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3066:                                 absl::string_view(), cm_.thread_local_cluster_.conn_pool_.host_);",
          "3067:         return nullptr;",
          "3068:       }));",
          "3070:               shouldRetryReset(_, /*http3_used=*/RetryState::Http3Used::Unknown, _))",
          "3071:       .WillOnce(Return(RetryStatus::NoRetryLimitExceeded));",
          "3072:   ON_CALL(callbacks_, decodingBuffer()).WillByDefault(Return(body_data.get()));",
          "3075:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "",
          "[Removed Lines]",
          "3062:         EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3069:   EXPECT_CALL(*router_.retry_state_,",
          "3073:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3067:         EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3074:   EXPECT_CALL(*router_->retry_state_,",
          "3078:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "3084:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _))",
          "3085:       .WillOnce(Invoke([&](Http::ResponseHeaderMap& headers, bool) -> void {",
          "3086:         EXPECT_EQ(headers.Status()->value(), \"200\");",
          "",
          "[Removed Lines]",
          "3083:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3088:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "3105:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3106:   HttpTestUtility::addDefaultHeaders(headers);",
          "3110:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3111:               putResult(Upstream::Outlier::Result::LocalOriginConnectFailed, _));",
          "3112:   encoder1.stream_.resetStream(Http::StreamResetReason::LocalReset);",
          "",
          "[Removed Lines]",
          "3107:   router_.decodeHeaders(headers, true);",
          "3109:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3112:   router_->decodeHeaders(headers, true);",
          "3114:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "3118:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "3119:   EXPECT_CALL(callbacks_.stream_info_,",
          "3120:               setResponseFlag(StreamInfo::ResponseFlag::NoHealthyUpstream));",
          "3122:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3124:   EXPECT_EQ(1U,",
          "",
          "[Removed Lines]",
          "3121:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3126:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "3135:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3136:   HttpTestUtility::addDefaultHeaders(headers);",
          "3139:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3140:   Buffer::OwnedImpl body(\"test body\");",
          "3142:   EXPECT_EQ(1U,",
          "3143:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3146:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3147:                               RetryState::DoRetryResetCallback callback) {",
          "3148:         EXPECT_EQ(RetryState::Http3Used::No, http3_used);",
          "3150:         return RetryStatus::Yes;",
          "3151:       }));",
          "3152:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3137:   router_.decodeHeaders(headers, false);",
          "3138:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3141:   router_.decodeData(body, true);",
          "3145:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3149:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "[Added Lines]",
          "3142:   router_->decodeHeaders(headers, false);",
          "3143:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3146:   router_->decodeData(body, true);",
          "3150:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3154:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/false); };",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "3170:             return nullptr;",
          "3171:           }));",
          "3174:   EXPECT_EQ(2U,",
          "3175:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3176:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3180:   Http::ResponseHeaderMapPtr response_headers(",
          "3181:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3182:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3173:   router_.retry_state_->callback_();",
          "3179:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3178:   router_->retry_state_->callback_();",
          "3184:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3185:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "3188: TEST_F(RouterTest, RetryHttp3UpstreamReset) {",
          "3189:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3190:   Http::ResponseDecoder* response_decoder = nullptr;",
          "3192:   expectNewStreamWithImmediateEncoder(encoder1, &response_decoder, Http::Protocol::Http3);",
          "3193:   expectResponseTimerCreate();",
          "3195:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3196:   HttpTestUtility::addDefaultHeaders(headers);",
          "3199:   EXPECT_CALL(callbacks_, addDecodedData(_, _));",
          "3200:   Buffer::OwnedImpl body(\"test body\");",
          "3202:   EXPECT_EQ(1U,",
          "3203:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3205:       .WillOnce(Invoke([this](const Http::StreamResetReason, RetryState::Http3Used http3_used,",
          "3206:                               RetryState::DoRetryResetCallback callback) {",
          "3207:         EXPECT_EQ(RetryState::Http3Used::Yes, http3_used);",
          "3209:         return RetryStatus::Yes;",
          "3210:       }));",
          "",
          "[Removed Lines]",
          "3191:   router_.retry_425_response_ = true;",
          "3197:   router_.decodeHeaders(headers, false);",
          "3198:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3201:   router_.decodeData(body, true);",
          "3204:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3208:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "[Added Lines]",
          "3197:   router_->retry_425_response_ = true;",
          "3203:   router_->decodeHeaders(headers, false);",
          "3204:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3207:   router_->decodeData(body, true);",
          "3210:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(Http::StreamResetReason::RemoteReset, _, _))",
          "3214:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_http3=*/true); };",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "3231:             return nullptr;",
          "3232:           }));",
          "3235:   EXPECT_EQ(2U,",
          "3236:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3237:   EXPECT_TRUE(verifyHostUpstreamStats(0, 1));",
          "3241:   Http::ResponseHeaderMapPtr response_headers(",
          "3242:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3243:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3234:   router_.retry_state_->callback_();",
          "3240:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3240:   router_->retry_state_->callback_();",
          "3246:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3247:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "3255:   EXPECT_CALL(callbacks_.route_->route_entry_, retryShadowBufferLimit()).WillOnce(Return(0));",
          "3256:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3257:   HttpTestUtility::addDefaultHeaders(headers);",
          "3261:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "3262:   Buffer::OwnedImpl body(\"t\");",
          "3264:   EXPECT_EQ(1U,",
          "3265:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3258:   router_.decodeHeaders(headers, false);",
          "3260:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3263:   router_.decodeData(body, false);",
          "",
          "[Added Lines]",
          "3265:   router_->decodeHeaders(headers, false);",
          "3267:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3270:   router_->decodeData(body, false);",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "3281:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3282:                      -> Http::ConnectionPool::Cancellable* {",
          "3283:             response_decoder = &decoder;",
          "3285:             callbacks.onPoolReady(encoder1, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3286:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3287:             return nullptr;",
          "",
          "[Removed Lines]",
          "3284:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3291:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "3294:                                          {\"x-envoy-internal\", \"true\"},",
          "3295:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3296:   HttpTestUtility::addDefaultHeaders(headers);",
          "3298:   EXPECT_EQ(1U,",
          "3299:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3302:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3303:               putResult(Upstream::Outlier::Result::LocalOriginTimeout, _));",
          "3304:   per_try_timeout_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3297:   router_.decodeHeaders(headers, true);",
          "3301:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3304:   router_->decodeHeaders(headers, true);",
          "3308:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "3308:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3310:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "3311:       .WillOnce(",
          "3312:           Invoke([&](Http::ResponseDecoder& decoder, Http::ConnectionPool::Callbacks& callbacks,",
          "",
          "[Removed Lines]",
          "3309:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "",
          "[Added Lines]",
          "3316:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "3322:           }));",
          "3324:   expectPerTryTimerCreate();",
          "3326:   EXPECT_EQ(2U,",
          "3327:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3331:   Http::ResponseHeaderMapPtr response_headers(",
          "3332:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3333:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3325:   router_.retry_state_->callback_();",
          "3330:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3332:   router_->retry_state_->callback_();",
          "3337:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3338:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "3353:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3354:   HttpTestUtility::addDefaultHeaders(headers);",
          "3361:   conn_pool_callbacks->onPoolFailure(ConnectionPool::PoolFailureReason::RemoteConnectionFailure,",
          "3362:                                      absl::string_view(), nullptr);",
          "",
          "[Removed Lines]",
          "3355:   router_.decodeHeaders(headers, true);",
          "3357:   EXPECT_CALL(*router_.retry_state_, onHostAttempted(_)).Times(0);",
          "3359:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3363:   router_->decodeHeaders(headers, true);",
          "3365:   EXPECT_CALL(*router_->retry_state_, onHostAttempted(_)).Times(0);",
          "3367:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "3373:                      const Http::ConnectionPool::Instance::StreamOptions&)",
          "3374:                      -> Http::ConnectionPool::Cancellable* {",
          "3375:             response_decoder = &decoder;",
          "3377:             callbacks.onPoolReady(encoder2, cm_.thread_local_cluster_.conn_pool_.host_,",
          "3378:                                   upstream_stream_info_, Http::Protocol::Http10);",
          "3379:             return nullptr;",
          "3380:           }));",
          "3383:   EXPECT_EQ(1U,",
          "3384:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3388:   Http::ResponseHeaderMapPtr response_headers(",
          "3389:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3390:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3376:             EXPECT_CALL(*router_.retry_state_, onHostAttempted(_));",
          "3382:   router_.retry_state_->callback_();",
          "3387:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3384:             EXPECT_CALL(*router_->retry_state_, onHostAttempted(_));",
          "3390:   router_->retry_state_->callback_();",
          "3395:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3396:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "3404:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-internal\", \"true\"},",
          "3405:                                          {\"x-envoy-upstream-rq-per-try-timeout-ms\", \"5\"}};",
          "3406:   HttpTestUtility::addDefaultHeaders(headers);",
          "3408:   EXPECT_EQ(1U,",
          "3409:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3413:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3414:   Http::ResponseHeaderMapPtr response_headers(",
          "3415:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3407:   router_.decodeHeaders(headers, true);",
          "3412:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3416:   router_->decodeHeaders(headers, true);",
          "3421:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3422:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "3438:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3439:   HttpTestUtility::addDefaultHeaders(headers);",
          "3441:   EXPECT_EQ(1U,",
          "3442:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3446:   EXPECT_CALL(callbacks_, encodeHeaders_(_, false));",
          "3447:   Http::ResponseHeaderMapPtr response_headers(",
          "3448:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "3440:   router_.decodeHeaders(headers, true);",
          "3445:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3450:   router_->decodeHeaders(headers, true);",
          "3455:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3456:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "3476:   Http::TestRequestHeaderMapImpl headers;",
          "3477:   HttpTestUtility::addDefaultHeaders(headers);",
          "3479:   EXPECT_EQ(1U,",
          "3480:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "3478:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "3489:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "3529:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3530:   HttpTestUtility::addDefaultHeaders(headers);",
          "3532:   EXPECT_EQ(1U,",
          "3533:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3539:   EXPECT_CALL(callbacks_, encode1xxHeaders_(_));",
          "3540:   Http::ResponseHeaderMapPtr continue_headers(",
          "3541:       new Http::TestResponseHeaderMapImpl{{\":status\", \"100\"}});",
          "",
          "[Removed Lines]",
          "3531:   router_.decodeHeaders(headers, true);",
          "3537:   EXPECT_CALL(*router_.retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3538:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "[Added Lines]",
          "3542:   router_->decodeHeaders(headers, true);",
          "3548:   EXPECT_CALL(*router_->retry_state_, shouldRetryReset(_, _, _)).Times(0);",
          "3549:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _)).Times(0);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "3561:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3562:   HttpTestUtility::addDefaultHeaders(headers);",
          "3564:   EXPECT_EQ(1U,",
          "3565:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3569:   Http::ResponseHeaderMapPtr response_headers1(",
          "3570:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3571:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3563:   router_.decodeHeaders(headers, true);",
          "3568:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3574:   router_->decodeHeaders(headers, true);",
          "3579:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "3578:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3579:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3582:   EXPECT_EQ(2U,",
          "3583:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3587:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "3588:       .Times(0);",
          "3589:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "3581:   router_.retry_state_->callback_();",
          "3586:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3592:   router_->retry_state_->callback_();",
          "3597:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3598:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "3604:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3605:   HttpTestUtility::addDefaultHeaders(headers);",
          "3607:   EXPECT_EQ(1U,",
          "3608:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3612:   Http::ResponseHeaderMapPtr response_headers1(",
          "3613:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3614:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3606:   router_.decodeHeaders(headers, true);",
          "3611:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3618:   router_->decodeHeaders(headers, true);",
          "3623:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "3641:   Http::TestRequestHeaderMapImpl headers;",
          "3642:   HttpTestUtility::addDefaultHeaders(headers);",
          "3644:   max_stream_duration_timer_->invokeCallback();",
          "3647:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3648: }",
          "",
          "[Removed Lines]",
          "3643:   router_.decodeHeaders(headers, false);",
          "3646:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3655:   router_->decodeHeaders(headers, false);",
          "3658:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "3659:   Http::TestRequestHeaderMapImpl headers;",
          "3660:   HttpTestUtility::addDefaultHeaders(headers);",
          "3664:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3665: }",
          "",
          "[Removed Lines]",
          "3661:   router_.decodeHeaders(headers, false);",
          "3663:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3673:   router_->decodeHeaders(headers, false);",
          "3675:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "3675:   Http::TestRequestHeaderMapImpl headers;",
          "3676:   HttpTestUtility::addDefaultHeaders(headers);",
          "3680:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "3681: }",
          "",
          "[Removed Lines]",
          "3677:   router_.decodeHeaders(headers, false);",
          "3679:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3689:   router_->decodeHeaders(headers, false);",
          "3691:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "3691:   Http::TestRequestHeaderMapImpl headers;",
          "3692:   HttpTestUtility::addDefaultHeaders(headers);",
          "3694:   Http::ResponseHeaderMapPtr response_headers(",
          "3695:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3696:   response_decoder->decodeHeaders(std::move(response_headers), false);",
          "3697:   max_stream_duration_timer_->invokeCallback();",
          "3700:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "3701: }",
          "",
          "[Removed Lines]",
          "3693:   router_.decodeHeaders(headers, false);",
          "3699:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "3705:   router_->decodeHeaders(headers, false);",
          "3711:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "3712:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"reset\"},",
          "3713:                                          {\"x-envoy-internal\", \"true\"}};",
          "3714:   HttpTestUtility::addDefaultHeaders(headers);",
          "3718:   max_stream_duration_timer_->invokeCallback();",
          "",
          "[Removed Lines]",
          "3715:   router_.decodeHeaders(headers, false);",
          "3717:   router_.retry_state_->expectResetRetry();",
          "",
          "[Added Lines]",
          "3727:   router_->decodeHeaders(headers, false);",
          "3729:   router_->retry_state_->expectResetRetry();",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "3723:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3725:   expectMaxStreamDurationTimerCreate(std::chrono::milliseconds(500));",
          "3729:   Http::ResponseHeaderMapPtr response_headers(",
          "3730:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "3731:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "",
          "[Removed Lines]",
          "3726:   router_.retry_state_->callback_();",
          "3728:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3738:   router_->retry_state_->callback_();",
          "3740:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3741:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "3741:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3742:   HttpTestUtility::addDefaultHeaders(headers);",
          "3744:   EXPECT_EQ(1U,",
          "3745:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3749:   Http::ResponseHeaderMapPtr response_headers1(",
          "3750:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3751:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3743:   router_.decodeHeaders(headers, true);",
          "3748:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3756:   router_->decodeHeaders(headers, true);",
          "3761:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "3761:         response_decoder = &decoder;",
          "3762:         return &cancellable;",
          "3763:       }));",
          "3767:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3764:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3777:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "3793:                                          {\"x-envoy-internal\", \"true\"},",
          "3794:                                          {\"x-envoy-upstream-rq-timeout-alt-response\", \"204\"}};",
          "3795:   HttpTestUtility::addDefaultHeaders(headers);",
          "3797:   EXPECT_EQ(1U,",
          "3798:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3802:   Http::ResponseHeaderMapPtr response_headers1(",
          "3803:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3804:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3796:   router_.decodeHeaders(headers, true);",
          "3801:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3809:   router_->decodeHeaders(headers, true);",
          "3814:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "3814:         response_decoder = &decoder;",
          "3815:         return &cancellable;",
          "3816:       }));",
          "3820:   EXPECT_CALL(cancellable, cancel(_));",
          "",
          "[Removed Lines]",
          "3817:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "3830:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "3841:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3842:   HttpTestUtility::addDefaultHeaders(headers);",
          "3845:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3847:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3850:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3852:   EXPECT_EQ(1U,",
          "3853:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3857:   Http::ResponseHeaderMapPtr response_headers1(",
          "3858:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3859:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3843:   router_.decodeHeaders(headers, false);",
          "3846:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3848:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3851:   router_.decodeTrailers(trailers);",
          "3856:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3856:   router_->decodeHeaders(headers, false);",
          "3859:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3861:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3864:   router_->decodeTrailers(trailers);",
          "3869:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "3870:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "3871:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "3872:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "3874:   EXPECT_EQ(2U,",
          "3875:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3879:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "3880:               putHttpResponseCode(200));",
          "3881:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_, putResponseTime(_));",
          "",
          "[Removed Lines]",
          "3873:   router_.retry_state_->callback_();",
          "3878:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3886:   router_->retry_state_->callback_();",
          "3891:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3892:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "3914:                                          {\"content-type\", \"application/grpc\"},",
          "3915:                                          {\"grpc-timeout\", \"20S\"}};",
          "3916:   HttpTestUtility::addDefaultHeaders(headers);",
          "3918:   EXPECT_EQ(1U,",
          "3919:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3923:   Http::ResponseHeaderMapPtr response_headers1(",
          "3924:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"1\"}});",
          "3925:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3917:   router_.decodeHeaders(headers, true);",
          "3922:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3931:   router_->decodeHeaders(headers, true);",
          "3936:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "3932:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "3933:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "3936:   EXPECT_EQ(2U,",
          "3937:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3941:   Http::ResponseHeaderMapPtr response_headers(",
          "3942:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}, {\"grpc-status\", \"0\"}});",
          "3943:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->outlier_detector_,",
          "",
          "[Removed Lines]",
          "3935:   router_.retry_state_->callback_();",
          "3940:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "3949:   router_->retry_state_->callback_();",
          "3954:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "3955:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "3951: TEST_F(RouterTest, RetryRespectsMaxHostSelectionCount) {",
          "3954:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "3955:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "3952:   router_.reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "3967:   router_->reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "3960:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "3961:   HttpTestUtility::addDefaultHeaders(headers);",
          "3968:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "3970:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "3973:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "3975:   EXPECT_EQ(1U,",
          "3976:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "3980:   Http::ResponseHeaderMapPtr response_headers1(",
          "3981:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "3982:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "3962:   router_.decodeHeaders(headers, false);",
          "3964:   ON_CALL(*router_.retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3966:   EXPECT_EQ(1, router_.hostSelectionRetryCount());",
          "3969:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "3971:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "3974:   router_.decodeTrailers(trailers);",
          "3979:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "3977:   router_->decodeHeaders(headers, false);",
          "3979:   ON_CALL(*router_->retry_state_, hostSelectionMaxAttempts()).WillByDefault(Return(3));",
          "3981:   EXPECT_EQ(1, router_->hostSelectionRetryCount());",
          "3984:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "3986:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "3989:   router_->decodeTrailers(trailers);",
          "3994:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "3993:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "3994:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "3995:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "3997:   EXPECT_EQ(2U,",
          "3998:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4005:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4006:       .Times(0);",
          "4007:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "3996:   router_.retry_state_->callback_();",
          "4001:   EXPECT_EQ(3, router_.hostSelectionRetryCount());",
          "4004:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4011:   router_->retry_state_->callback_();",
          "4016:   EXPECT_EQ(3, router_->hostSelectionRetryCount());",
          "4019:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4020:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "4017: TEST_F(RouterTest, RetryRespectsRetryHostPredicate) {",
          "4020:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "4021:   Http::ResponseDecoder* response_decoder = nullptr;",
          "",
          "[Removed Lines]",
          "4018:   router_.reject_all_hosts_ = true;",
          "",
          "[Added Lines]",
          "4034:   router_->reject_all_hosts_ = true;",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "4026:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "4027:   HttpTestUtility::addDefaultHeaders(headers);",
          "4030:   NiceMock<Upstream::MockHost> host;",
          "4034:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4036:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4039:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4041:   EXPECT_EQ(1U,",
          "4042:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4046:   Http::ResponseHeaderMapPtr response_headers1(",
          "4047:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "4048:   EXPECT_CALL(encoder1.stream_, resetStream(Http::StreamResetReason::LocalReset));",
          "",
          "[Removed Lines]",
          "4028:   router_.decodeHeaders(headers, false);",
          "4032:   EXPECT_FALSE(router_.shouldSelectAnotherHost(host));",
          "4035:   EXPECT_CALL(*router_.retry_state_, enabled()).WillOnce(Return(true));",
          "4037:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4040:   router_.decodeTrailers(trailers);",
          "4045:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "4044:   router_->decodeHeaders(headers, false);",
          "4048:   EXPECT_FALSE(router_->shouldSelectAnotherHost(host));",
          "4051:   EXPECT_CALL(*router_->retry_state_, enabled()).WillOnce(Return(true));",
          "4053:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4056:   router_->decodeTrailers(trailers);",
          "4061:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "4059:   EXPECT_CALL(encoder2, encodeHeaders(_, false));",
          "4060:   EXPECT_CALL(encoder2, encodeData(_, false));",
          "4061:   EXPECT_CALL(encoder2, encodeTrailers(_));",
          "4063:   EXPECT_EQ(2U,",
          "4064:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4071:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "4072:       .Times(0);",
          "4073:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "4062:   router_.retry_state_->callback_();",
          "4067:   EXPECT_TRUE(router_.shouldSelectAnotherHost(host));",
          "4070:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "4078:   router_->retry_state_->callback_();",
          "4083:   EXPECT_TRUE(router_->shouldSelectAnotherHost(host));",
          "4086:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "4087:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "4172:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"random_fake_data\"));",
          "4173:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4176:   EXPECT_CALL(callbacks_.downstream_callbacks_, clearRouteCache());",
          "4177:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "",
          "[Removed Lines]",
          "4174:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, true));",
          "",
          "[Added Lines]",
          "4191:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, true));",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "4187:                     .value());",
          "4191:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4192:                    .filterState()",
          "4193:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4190:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4207:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "4250:                     .value());",
          "4254:   EXPECT_EQ(3, callbacks_.streamInfo()",
          "4255:                    .filterState()",
          "4256:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4253:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4270:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "4279:                     .value());",
          "4283:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4284:                    .filterState()",
          "4285:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "",
          "[Removed Lines]",
          "4282:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4299:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "4301:                     .value());",
          "4305:   EXPECT_EQ(\"/\", default_request_headers_.getPathValue());",
          "4306: }",
          "",
          "[Removed Lines]",
          "4304:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4321:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "4323:                     .value());",
          "4327:   EXPECT_EQ(\"/#fragment\", default_request_headers_.getPathValue());",
          "4328: }",
          "",
          "[Removed Lines]",
          "4326:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4343:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "4345:                     .value());",
          "4349: }",
          "4351: TEST_F(RouterTest, CrossSchemeRedirectAllowedByPolicy) {",
          "",
          "[Removed Lines]",
          "4348:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4365:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "4368:                     .value());",
          "4372: }",
          "4374: namespace {",
          "",
          "[Removed Lines]",
          "4371:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4388:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "4395: } // namespace",
          "4398:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4399:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4400:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4397: TEST_F(RouterTest, ShadowWithClusterHeader) {",
          "",
          "[Added Lines]",
          "4414: class RouterShadowingTest : public RouterTest, public testing::WithParamInterface<bool> {",
          "4415: public:",
          "4416:   RouterShadowingTest() : streaming_shadow_(GetParam()) {",
          "4417:     scoped_runtime_.mergeValues(",
          "4418:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "4420:     router_ = std::make_unique<RouterTestFilter>(config_, config_.default_stats_);",
          "4421:     router_->setDecoderFilterCallbacks(callbacks_);",
          "4422:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4423:         ->setLocalAddress(host_address_);",
          "4424:     router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "4425:         ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "4426:   }",
          "4428: protected:",
          "4429:   bool streaming_shadow_;",
          "4430:   TestScopedRuntime scoped_runtime_;",
          "4431: };",
          "4433: INSTANTIATE_TEST_SUITE_P(StreamingShadow, RouterShadowingTest, testing::Bool());",
          "4435: TEST_P(RouterShadowingTest, BufferingShadowWithClusterHeader) {",
          "4436:   if (streaming_shadow_) {",
          "4437:     GTEST_SKIP();",
          "4438:   }",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "4414:   HttpTestUtility::addDefaultHeaders(headers);",
          "4415:   headers.addCopy(\"some_header\", \"some_cluster\");",
          "4419:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4420:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4423:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4424:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "4425:       .Times(AtLeast(2))",
          "4426:       .WillRepeatedly(Return(body_data.get()));",
          "4428:   EXPECT_CALL(*shadow_writer_, shadow_(\"some_cluster\", _, _))",
          "4429:       .WillOnce(Invoke([](const std::string&, Http::RequestMessagePtr& request,",
          "4430:                           const Http::AsyncClient::RequestOptions& options) -> void {",
          "",
          "[Removed Lines]",
          "4417:   router_.decodeHeaders(headers, false);",
          "4421:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4458:   router_->decodeHeaders(headers, false);",
          "4464:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "4433:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4434:         EXPECT_TRUE(options.sampled_.value());",
          "4435:       }));",
          "4437:   EXPECT_EQ(1U,",
          "4438:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4436:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4479:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "4443:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4444: }",
          "4447:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4448:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4449:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4446: TEST_F(RouterTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "[Added Lines]",
          "4489: TEST_P(RouterShadowingTest, ShadowNoClusterHeaderInHeader) {",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "4461:   expectResponseTimerCreate();",
          "4462:   Http::TestRequestHeaderMapImpl headers;",
          "4463:   HttpTestUtility::addDefaultHeaders(headers);",
          "4466:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4470:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4472:   EXPECT_EQ(1U,",
          "4473:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4464:   router_.decodeHeaders(headers, false);",
          "4467:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4468:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4471:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4507:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4508:   router_->decodeHeaders(headers, false);",
          "4511:   if (!streaming_shadow_) {",
          "4512:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4513:   }",
          "4514:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4517:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "4480:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4481: }",
          "4484:   ShadowPolicyPtr policy = makeShadowPolicy(\"\", \"some_header\", \"bar\");",
          "4485:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4486:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4483: TEST_F(RouterTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "[Added Lines]",
          "4529: TEST_P(RouterShadowingTest, ShadowClusterNameEmptyInHeader) {",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "4499:   Http::TestRequestHeaderMapImpl headers;",
          "4500:   HttpTestUtility::addDefaultHeaders(headers);",
          "4501:   headers.addCopy(\"some_header\", \"\");",
          "4504:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4508:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4510:   EXPECT_EQ(1U,",
          "4511:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4502:   router_.decodeHeaders(headers, false);",
          "4505:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4506:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4509:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4548:   EXPECT_CALL(*shadow_writer_, streamingShadow_(_, _, _)).Times(0);",
          "4549:   router_->decodeHeaders(headers, false);",
          "4552:   if (!streaming_shadow_) {",
          "4553:     EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4554:   }",
          "4555:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4558:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "4517:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4518: }",
          "4521:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4522:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4523:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "",
          "[Removed Lines]",
          "4520: TEST_F(RouterTest, Shadow) {",
          "",
          "[Added Lines]",
          "4569: TEST_P(RouterShadowingTest, StreamingShadow) {",
          "4570:   if (!streaming_shadow_) {",
          "4571:     GTEST_SKIP();",
          "4572:   }",
          "4573:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\", \"\", \"bar\");",
          "4574:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4575:   policy = makeShadowPolicy(\"fizz\", \"\", \"buzz\", envoy::type::v3::FractionalPercent(), false);",
          "4576:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4577:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "4579:   NiceMock<Http::MockRequestEncoder> encoder;",
          "4580:   Http::ResponseDecoder* response_decoder = nullptr;",
          "4581:   expectNewStreamWithImmediateEncoder(encoder, &response_decoder, Http::Protocol::Http10);",
          "4583:   expectResponseTimerCreate();",
          "4585:   EXPECT_CALL(",
          "4586:       runtime_.snapshot_,",
          "4587:       featureEnabled(\"bar\", testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)),",
          "4588:                      43))",
          "4589:       .WillOnce(Return(true));",
          "4590:   EXPECT_CALL(",
          "4591:       runtime_.snapshot_,",
          "4592:       featureEnabled(\"buzz\",",
          "4593:                      testing::Matcher<const envoy::type::v3::FractionalPercent&>(Percent(0)), 43))",
          "4594:       .WillOnce(Return(true));",
          "4596:   Http::TestRequestHeaderMapImpl headers;",
          "4597:   HttpTestUtility::addDefaultHeaders(headers);",
          "4598:   NiceMock<Http::MockAsyncClient> foo_client;",
          "4599:   NiceMock<Http::MockAsyncClientOngoingRequest> foo_request(&foo_client);",
          "4600:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"foo\", _, _))",
          "4601:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4602:                            const Http::AsyncClient::RequestOptions& options) {",
          "4603:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4604:         EXPECT_TRUE(options.sampled_.value());",
          "4605:         return &foo_request;",
          "4606:       }));",
          "4607:   NiceMock<Http::MockAsyncClient> fizz_client;",
          "4608:   NiceMock<Http::MockAsyncClientOngoingRequest> fizz_request(&fizz_client);",
          "4609:   EXPECT_CALL(*shadow_writer_, streamingShadow_(\"fizz\", _, _))",
          "4610:       .Times(1)",
          "4611:       .WillOnce(Invoke([&](const std::string&, Http::RequestHeaderMapPtr&,",
          "4612:                            const Http::AsyncClient::RequestOptions& options) {",
          "4613:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4614:         EXPECT_FALSE(options.sampled_.value());",
          "4615:         return &fizz_request;",
          "4616:       }));",
          "4617:   router_->decodeHeaders(headers, false);",
          "4619:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4620:   EXPECT_CALL(callbacks_, addDecodedData(_, _)).Times(0);",
          "4621:   EXPECT_CALL(foo_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4622:   EXPECT_CALL(fizz_request, sendData(BufferStringEqual(\"hello\"), false));",
          "4623:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4625:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4626:   EXPECT_CALL(callbacks_, decodingBuffer()).Times(0);",
          "4627:   EXPECT_CALL(foo_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4628:   EXPECT_CALL(fizz_request, captureAndSendTrailers_(Http::HeaderValueOf(\"some\", \"trailer\")));",
          "4629:   router_->decodeTrailers(trailers);",
          "4630:   EXPECT_EQ(1U,",
          "4631:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4633:   Http::ResponseHeaderMapPtr response_headers(",
          "4634:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "4635:   response_decoder->decodeHeaders(std::move(response_headers), true);",
          "4636:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4637: }",
          "4639: TEST_P(RouterShadowingTest, BufferingShadow) {",
          "4640:   if (streaming_shadow_) {",
          "4641:     GTEST_SKIP();",
          "4642:   }",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "4544:   Http::TestRequestHeaderMapImpl headers;",
          "4545:   HttpTestUtility::addDefaultHeaders(headers);",
          "4548:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4549:   EXPECT_CALL(callbacks_, addDecodedData(_, true));",
          "4552:   Http::TestRequestTrailerMapImpl trailers{{\"some\", \"trailer\"}};",
          "4553:   EXPECT_CALL(callbacks_, decodingBuffer())",
          "",
          "[Removed Lines]",
          "4546:   router_.decodeHeaders(headers, false);",
          "4550:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "",
          "[Added Lines]",
          "4668:   router_->decodeHeaders(headers, false);",
          "4672:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "4569:         EXPECT_EQ(absl::optional<std::chrono::milliseconds>(10), options.timeout);",
          "4570:         EXPECT_FALSE(options.sampled_.value());",
          "4571:       }));",
          "4573:   EXPECT_EQ(1U,",
          "4574:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4572:   router_.decodeTrailers(trailers);",
          "",
          "[Added Lines]",
          "4694:   router_->decodeTrailers(trailers);",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "4579:   EXPECT_TRUE(verifyHostUpstreamStats(1, 0));",
          "4580: }",
          "4583:   ShadowPolicyPtr policy = makeShadowPolicy(\"foo\");",
          "4584:   callbacks_.route_->route_entry_.shadow_policies_.push_back(policy);",
          "4585:   ON_CALL(callbacks_, streamId()).WillByDefault(Return(43));",
          "",
          "[Removed Lines]",
          "4582: TEST_F(RouterTest, NoShadowForConnect) {",
          "",
          "[Added Lines]",
          "4704: TEST_P(RouterShadowingTest, NoShadowForConnect) {",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "4587:   Http::TestRequestHeaderMapImpl headers;",
          "4588:   HttpTestUtility::addDefaultHeaders(headers);",
          "4589:   headers.setMethod(\"CONNECT\");",
          "4592:   Buffer::InstancePtr body_data(new Buffer::OwnedImpl(\"hello\"));",
          "4593:   EXPECT_CALL(callbacks_, addDecodedData(_, true)).Times(0);",
          "4597: }",
          "4599: TEST_F(RouterTest, AltStatName) {",
          "",
          "[Removed Lines]",
          "4590:   router_.decodeHeaders(headers, false);",
          "4594:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_.decodeData(*body_data, false));",
          "4596:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "4712:   router_->decodeHeaders(headers, false);",
          "4716:   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, router_->decodeData(*body_data, false));",
          "4718:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "4609:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-alt-stat-name\", \"alt_stat\"},",
          "4610:                                          {\"x-envoy-internal\", \"true\"}};",
          "4611:   HttpTestUtility::addDefaultHeaders(headers);",
          "4613:   EXPECT_EQ(1U,",
          "4614:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4612:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4734:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "4658:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4659:   Http::TestRequestHeaderMapImpl headers;",
          "4660:   HttpTestUtility::addDefaultHeaders(headers);",
          "4662:   EXPECT_EQ(0U,",
          "4663:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4664:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4661:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4783:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "4682:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4683:   Http::TestRequestHeaderMapImpl headers;",
          "4684:   HttpTestUtility::addDefaultHeaders(headers);",
          "4686:   EXPECT_EQ(0U,",
          "4687:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4688:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "",
          "[Removed Lines]",
          "4685:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4807:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "4703:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4704:   Http::TestRequestHeaderMapImpl headers;",
          "4705:   HttpTestUtility::addDefaultHeaders(headers);",
          "4707:   EXPECT_EQ(0U,",
          "4708:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4709:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4710:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4712: }",
          "4714: TEST_F(RouterTest, DirectResponseWithBody) {",
          "",
          "[Removed Lines]",
          "4706:   router_.decodeHeaders(headers, true);",
          "4711:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4828:   router_->decodeHeaders(headers, true);",
          "4833:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "4728:   EXPECT_CALL(callbacks_, encodeData(_, true));",
          "4729:   Http::TestRequestHeaderMapImpl headers;",
          "4730:   HttpTestUtility::addDefaultHeaders(headers);",
          "4732:   EXPECT_EQ(0U,",
          "4733:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4734:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4735:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4737: }",
          "4739: TEST_F(RouterTest, DirectResponseWithLocation) {",
          "",
          "[Removed Lines]",
          "4731:   router_.decodeHeaders(headers, true);",
          "4736:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4853:   router_->decodeHeaders(headers, true);",
          "4858:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "4752:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4753:   Http::TestRequestHeaderMapImpl headers;",
          "4754:   HttpTestUtility::addDefaultHeaders(headers);",
          "4756:   EXPECT_EQ(0U,",
          "4757:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4758:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4759:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4761: }",
          "4763: TEST_F(RouterTest, DirectResponseWithoutLocation) {",
          "",
          "[Removed Lines]",
          "4755:   router_.decodeHeaders(headers, true);",
          "4760:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4877:   router_->decodeHeaders(headers, true);",
          "4882:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "4775:   EXPECT_CALL(callbacks_, encodeHeaders_(HeaderMapEqualRef(&response_headers), true));",
          "4776:   Http::TestRequestHeaderMapImpl headers;",
          "4777:   HttpTestUtility::addDefaultHeaders(headers);",
          "4779:   EXPECT_EQ(0U,",
          "4780:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "4781:   EXPECT_FALSE(callbacks_.stream_info_.attemptCount().has_value());",
          "4782:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "4784: }",
          "",
          "[Removed Lines]",
          "4778:   router_.decodeHeaders(headers, true);",
          "4783:   EXPECT_EQ(1UL, router_.stats().rq_direct_response_.value());",
          "",
          "[Added Lines]",
          "4900:   router_->decodeHeaders(headers, true);",
          "4905:   EXPECT_EQ(1UL, router_->stats().rq_direct_response_.value());",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "4793:   bool filter_state_verified = false;",
          "4795:       std::make_shared<TestAccessLog>([&](const auto& stream_info) {",
          "4796:         filter_state_verified =",
          "4797:             stream_info.upstreamInfo()->upstreamFilterState()->hasDataWithName(\"upstream data\");",
          "",
          "[Removed Lines]",
          "4794:   router_.config().upstream_logs_.push_back(",
          "",
          "[Added Lines]",
          "4916:   router_->config().upstream_logs_.push_back(",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "4806:   Http::TestRequestHeaderMapImpl headers{};",
          "4807:   HttpTestUtility::addDefaultHeaders(headers);",
          "4810:   Http::ResponseHeaderMapPtr response_headers(",
          "4811:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "4808:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4930:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "4833:   Http::TestRequestHeaderMapImpl headers{};",
          "4834:   HttpTestUtility::addDefaultHeaders(headers);",
          "4836:   EXPECT_EQ(1U,",
          "4837:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4835:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "4957:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "4864:   Http::TestRequestHeaderMapImpl headers{};",
          "4865:   HttpTestUtility::addDefaultHeaders(headers);",
          "4868:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "4869:   Buffer::OwnedImpl data;",
          "4871:   EXPECT_EQ(1U,",
          "4872:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4866:   router_.decodeHeaders(headers, false);",
          "4870:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "4988:   router_->decodeHeaders(headers, false);",
          "4992:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "4918:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}};",
          "4919:   HttpTestUtility::addDefaultHeaders(headers);",
          "4924:   test_time_.advanceTimeWait(std::chrono::milliseconds(32));",
          "4925:   Buffer::OwnedImpl data;",
          "4927:   EXPECT_EQ(1U,",
          "4928:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4920:   router_.decodeHeaders(headers, false);",
          "4922:   router_.retry_state_->expectHeadersRetry();",
          "4926:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5042:   router_->decodeHeaders(headers, false);",
          "5044:   router_->retry_state_->expectHeadersRetry();",
          "5048:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "4937:   response_decoder->decodeHeaders(std::move(bad_response_headers), true);",
          "4941:   MonotonicTime retry_time = test_time_.monotonicTime();",
          "4943:   Http::ResponseHeaderMapPtr good_response_headers(",
          "",
          "[Removed Lines]",
          "4939:   router_.retry_state_->callback_();",
          "4940:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "5061:   router_->retry_state_->callback_();",
          "5062:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "5063:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "4989:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-rq-timeout-ms\", \"50\"}};",
          "4990:   HttpTestUtility::addDefaultHeaders(headers);",
          "4992:   auto& upstream_timing = stream_info.upstreamInfo()->upstreamTiming();",
          "4993:   EXPECT_FALSE(upstream_timing.last_upstream_rx_byte_received_.has_value());",
          "4995:   test_time_.advanceTimeWait(std::chrono::milliseconds(13));",
          "4996:   Buffer::OwnedImpl data;",
          "4998:   EXPECT_EQ(1U,",
          "4999:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "4991:   router_.decodeHeaders(headers, false);",
          "4997:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5114:   router_->decodeHeaders(headers, false);",
          "5120:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "5600:   const absl::optional<std::string> virtual_cluster_name =",
          "5601:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5602:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5604:   EXPECT_EQ(1U,",
          "5605:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5603:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5726:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "5632:   const absl::optional<std::string> virtual_cluster_name =",
          "5633:       absl::optional<std::string>(\"fake_virtual_cluster\");",
          "5634:   EXPECT_CALL(callbacks_.stream_info_, setVirtualClusterName(virtual_cluster_name));",
          "5636:   EXPECT_EQ(1U,",
          "5637:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5635:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "5758:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "5679:       .WillOnce(InvokeWithoutArgs([] {}));",
          "5680:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(true));",
          "5681:   EXPECT_CALL(callbacks_.route_->route_entry_, appendXfh()).WillOnce(Return(true));",
          "5683:   EXPECT_EQ(1U,",
          "5684:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5686: }",
          "5688: TEST_F(RouterTest, AutoHostRewriteDisabled) {",
          "",
          "[Removed Lines]",
          "5682:   router_.decodeHeaders(incoming_headers, true);",
          "5685:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5805:   router_->decodeHeaders(incoming_headers, true);",
          "5808:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "5709:       }));",
          "5711:   EXPECT_CALL(callbacks_.route_->route_entry_, autoHostRewrite()).WillOnce(Return(false));",
          "5713:   EXPECT_EQ(1U,",
          "5714:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "5716: }",
          "5718: TEST_F(RouterTest, UpstreamSocketOptionsReturnedEmpty) {",
          "5720:   EXPECT_EQ(options.get(), nullptr);",
          "5721: }",
          "",
          "[Removed Lines]",
          "5712:   router_.decodeHeaders(incoming_headers, true);",
          "5715:   router_.onDestroy();",
          "5719:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5835:   router_->decodeHeaders(incoming_headers, true);",
          "5838:   router_->onDestroy();",
          "5842:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "5730:   Http::TestRequestHeaderMapImpl headers;",
          "5731:   HttpTestUtility::addDefaultHeaders(headers);",
          "5732:   headers.setMethod(\"CONNECT\");",
          "5736:   EXPECT_EQ(expected_options->size(), options->size());",
          "5738:   for (size_t i = 0; i < 2; i++) {",
          "",
          "[Removed Lines]",
          "5733:   router_.decodeHeaders(headers, false);",
          "5735:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5856:   router_->decodeHeaders(headers, false);",
          "5858:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "5742:     auto returned_details = options->at(i)->getOptionDetails(dummy_socket, state);",
          "5743:     EXPECT_TRUE(expected_details == returned_details);",
          "5744:   }",
          "5746: }",
          "5748: TEST_F(RouterTest, RedirectRecords) {",
          "",
          "[Removed Lines]",
          "5745:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5868:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "5750:   memcpy(redirect_records->buf_, reinterpret_cast<void*>(redirect_records_data_.data()),",
          "5751:          redirect_records_data_.size());",
          "5752:   redirect_records->buf_size_ = redirect_records_data_.size();",
          "5754:       Network::UpstreamSocketOptionsFilterState::key(),",
          "5755:       std::make_unique<Network::UpstreamSocketOptionsFilterState>(),",
          "5756:       StreamInfo::FilterState::StateType::Mutable, StreamInfo::FilterState::LifeSpan::Connection);",
          "5758:       ->getDataMutable<Network::UpstreamSocketOptionsFilterState>(",
          "5759:           Network::UpstreamSocketOptionsFilterState::key())",
          "5760:       ->addOption(Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records));",
          "5761:   Http::TestRequestHeaderMapImpl headers;",
          "5762:   HttpTestUtility::addDefaultHeaders(headers);",
          "5763:   headers.setMethod(\"CONNECT\");",
          "5766:   Network::Socket::OptionsSharedPtr expected_options =",
          "5767:       Network::SocketOptionFactory::buildWFPRedirectRecordsOptions(*redirect_records);",
          "5769:   EXPECT_EQ(1, options->size());",
          "5771:   NiceMock<Network::MockConnectionSocket> dummy_socket;",
          "",
          "[Removed Lines]",
          "5753:   router_.downstream_connection_.stream_info_.filterState()->setData(",
          "5757:   router_.downstream_connection_.stream_info_.filterState()",
          "5764:   router_.decodeHeaders(headers, false);",
          "5768:   auto options = router_.upstreamSocketOptions();",
          "",
          "[Added Lines]",
          "5876:   router_->downstream_connection_.stream_info_.filterState()->setData(",
          "5880:   router_->downstream_connection_.stream_info_.filterState()",
          "5887:   router_->decodeHeaders(headers, false);",
          "5891:   auto options = router_->upstreamSocketOptions();",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "5773:   auto expected_details = expected_options->at(0)->getOptionDetails(dummy_socket, state);",
          "5774:   auto returned_details = options->at(0)->getOptionDetails(dummy_socket, state);",
          "5775:   EXPECT_TRUE(expected_details == returned_details);",
          "5777: }",
          "5779: TEST_F(RouterTest, ApplicationProtocols) {",
          "",
          "[Removed Lines]",
          "5776:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5899:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "5802:   Http::TestRequestHeaderMapImpl headers;",
          "5803:   HttpTestUtility::addDefaultHeaders(headers);",
          "5807:   EXPECT_CALL(cancellable_, cancel(_));",
          "5809:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "5810:   EXPECT_EQ(0U,",
          "5811:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "5804:   router_.decodeHeaders(headers, true);",
          "5808:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5927:   router_->decodeHeaders(headers, true);",
          "5931:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "5825:   HttpTestUtility::addDefaultHeaders(headers);",
          "5826:   headers.setMethod(\"CONNECT\");",
          "5827:   headers.removePath();",
          "5831:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "5832:   Buffer::OwnedImpl data;",
          "5836:   EXPECT_CALL(encoder, encodeData(_, _));",
          "",
          "[Removed Lines]",
          "5828:   router_.decodeHeaders(headers, false);",
          "5833:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "5951:   router_->decodeHeaders(headers, false);",
          "5956:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "5868:   Http::TestRequestHeaderMapImpl headers;",
          "5869:   HttpTestUtility::addDefaultHeaders(headers);",
          "5870:   headers.setMethod(\"CONNECT\");",
          "5874: }",
          "",
          "[Removed Lines]",
          "5871:   EXPECT_ENVOY_BUG(router_.decodeHeaders(headers, false), \"envoy bug failure: factory != nullptr.\");",
          "5873:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "5994:   EXPECT_ENVOY_BUG(router_->decodeHeaders(headers, false),",
          "5995:                    \"envoy bug failure: factory != nullptr.\");",
          "5997:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "5894:   HttpTestUtility::addDefaultHeaders(headers);",
          "5895:   headers.setMethod(\"CONNECT\");",
          "5896:   headers.removePath();",
          "5900:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "5901:   Buffer::OwnedImpl data;",
          "5905:   EXPECT_CALL(encoder, encodeData(_, _)).Times(0);",
          "",
          "[Removed Lines]",
          "5897:   router_.decodeHeaders(headers, false);",
          "5902:   router_.decodeData(data, true);",
          "",
          "[Added Lines]",
          "6021:   router_->decodeHeaders(headers, false);",
          "6026:   router_->decodeData(data, true);",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "5925:   HttpTestUtility::addDefaultHeaders(headers);",
          "5926:   headers.setMethod(\"CONNECT\");",
          "5927:   headers.removePath();",
          "5931: }",
          "5933: TEST_F(RouterTest, PostExplicitTcpUpstream) {",
          "",
          "[Removed Lines]",
          "5928:   router_.decodeHeaders(headers, false);",
          "5930:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6052:   router_->decodeHeaders(headers, false);",
          "6054:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "5947:   Http::TestRequestHeaderMapImpl headers;",
          "5948:   HttpTestUtility::addDefaultHeaders(headers);",
          "5949:   headers.setMethod(\"POST\");",
          "5953: }",
          "5955: TEST_F(RouterTest, PostHttpUpstream) {",
          "",
          "[Removed Lines]",
          "5950:   router_.decodeHeaders(headers, false);",
          "5952:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6074:   router_->decodeHeaders(headers, false);",
          "6076:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "5969:   Http::TestRequestHeaderMapImpl headers;",
          "5970:   HttpTestUtility::addDefaultHeaders(headers);",
          "5971:   headers.setMethod(\"POST\");",
          "5975: }",
          "5977: TEST_F(RouterTest, SetDynamicMaxStreamDuration) {",
          "",
          "[Removed Lines]",
          "5972:   router_.decodeHeaders(headers, false);",
          "5974:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6096:   router_->decodeHeaders(headers, false);",
          "6098:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "5983:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"500\"}};",
          "5985:   HttpTestUtility::addDefaultHeaders(headers);",
          "5987:   max_stream_duration_timer_->invokeCallback();",
          "5990:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "5991: }",
          "",
          "[Removed Lines]",
          "5986:   router_.decodeHeaders(headers, false);",
          "5989:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6110:   router_->decodeHeaders(headers, false);",
          "6113:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "6000:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-upstream-stream-duration-ms\", \"0\"}};",
          "6001:   HttpTestUtility::addDefaultHeaders(headers);",
          "6005:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "6006: }",
          "",
          "[Removed Lines]",
          "6002:   router_.decodeHeaders(headers, false);",
          "6004:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6126:   router_->decodeHeaders(headers, false);",
          "6128:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "6039:                                          {\"x-envoy-internal\", \"true\"},",
          "6040:                                          {\"x-envoy-upstream-rq-timeout-ms\", \"200\"}};",
          "6041:   HttpTestUtility::addDefaultHeaders(headers);",
          "6043:   EXPECT_EQ(1U,",
          "6044:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6042:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "6166:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "6050:   EXPECT_EQ(200, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6054:   Upstream::RetryOptionsPredicate::UpdateOptionsReturn update_options_return{",
          "6055:       std::make_shared<Network::Socket::Options>()};",
          "6056:   EXPECT_CALL(*retry_options_predicate, updateOptions(_)).WillOnce(Return(update_options_return));",
          "",
          "[Removed Lines]",
          "6053:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6177:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "6066:   EXPECT_EQ(update_options_return.new_upstream_socket_options_.value(),",
          "6070:   EXPECT_CALL(encoder1.stream_, resetStream(_)).Times(0);",
          "6071:   NiceMock<Http::MockRequestEncoder> encoder2;",
          "6072:   expectNewStreamWithImmediateEncoder(encoder2, &response_decoder, Http::Protocol::Http10);",
          "6075:   EXPECT_EQ(2U,",
          "6076:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "6067:             router_.upstreamSocketOptions());",
          "6074:   router_.retry_state_->callback_();",
          "",
          "[Added Lines]",
          "6191:             router_->upstreamSocketOptions());",
          "6198:   router_->retry_state_->callback_();",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "6081:   EXPECT_EQ(150, atoi(std::string(headers.getEnvoyExpectedRequestTimeoutMsValue()).c_str()));",
          "6085:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_.host_->health_checker_, setUnhealthy(_))",
          "6086:       .Times(0);",
          "6087:   Http::ResponseHeaderMapPtr response_headers2(",
          "",
          "[Removed Lines]",
          "6084:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6208:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6209:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "6196:   HttpTestUtility::addDefaultHeaders(headers);",
          "6199:   NiceMock<Http::MockRequestEncoder> encoder1;",
          "6200:   Http::ResponseDecoder* response_decoder1 = nullptr;",
          "6201:   EXPECT_CALL(cm_.thread_local_cluster_.conn_pool_, newStream(_, _, _))",
          "",
          "[Removed Lines]",
          "6198:   router_.retry_425_response_ = true;",
          "",
          "[Added Lines]",
          "6323:   router_->retry_425_response_ = true;",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "6212:           }));",
          "6213:   expectResponseTimerCreate();",
          "6214:   EXPECT_CALL(encoder1, encodeHeaders(_, _));",
          "6217:   Http::ResponseHeaderMapPtr response_headers1(",
          "6218:       new Http::TestResponseHeaderMapImpl{{\":status\", \"425\"}});",
          "6220:       .WillOnce(Invoke([this](const Http::ResponseHeaderMap&, const Http::RequestHeaderMap&,",
          "6221:                               RetryState::DoRetryHeaderCallback callback) {",
          "6223:         return RetryStatus::Yes;",
          "6224:       }));",
          "6225:   ASSERT(response_decoder1);",
          "",
          "[Removed Lines]",
          "6215:   router_.decodeHeaders(headers, true);",
          "6219:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6222:         router_.retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "[Added Lines]",
          "6340:   router_->decodeHeaders(headers, true);",
          "6344:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, HeaderMapEqualRef(&headers), _))",
          "6347:         router_->retry_state_->callback_ = [callback]() { callback(/*disable_early_data=*/true); };",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "6242:             return nullptr;",
          "6243:           }));",
          "6244:   EXPECT_CALL(encoder2, encodeHeaders(HeaderMapEqualRef(&headers), _));",
          "6247:   Http::ResponseHeaderMapPtr response_headers2(",
          "6248:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6250:   EXPECT_CALL(callbacks_, encodeHeaders_(_, _));",
          "6251:   response_decoder2->decodeHeaders(std::move(response_headers2), true);",
          "6252:   EXPECT_TRUE(verifyHostUpstreamStats(1, 1));",
          "",
          "[Removed Lines]",
          "6245:   router_.retry_state_->callback_();",
          "6249:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "",
          "[Added Lines]",
          "6370:   router_->retry_state_->callback_();",
          "6374:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6375:       .WillOnce(Return(RetryStatus::No));",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "6274:   EXPECT_CALL(callbacks_, upstreamOverrideHost())",
          "6275:       .WillOnce(Return(absl::make_optional<absl::string_view>(\"1.2.3.4\")));",
          "6278:   EXPECT_EQ(\"1.2.3.4\", override_host.value());",
          "6280:   Http::TestRequestHeaderMapImpl headers{{\"x-envoy-retry-on\", \"5xx\"}, {\"x-envoy-internal\", \"true\"}};",
          "6281:   HttpTestUtility::addDefaultHeaders(headers);",
          "6288:   Http::ResponseHeaderMapPtr response_headers_503(",
          "6289:       new Http::TestResponseHeaderMapImpl{{\":status\", \"503\"}});",
          "6290:   ASSERT(response_decoder != nullptr);",
          "",
          "[Removed Lines]",
          "6277:   auto override_host = router_.overrideHostToSelect();",
          "6284:   router_.decodeHeaders(headers, true);",
          "6287:   router_.retry_state_->expectHeadersRetry();",
          "",
          "[Added Lines]",
          "6403:   auto override_host = router_->overrideHostToSelect();",
          "6410:   router_->decodeHeaders(headers, true);",
          "6413:   router_->retry_state_->expectHeadersRetry();",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "6303:                               upstream_stream_info_, Http::Protocol::Http10);",
          "6304:         return nullptr;",
          "6305:       }));",
          "6310:   EXPECT_CALL(callbacks_, upstreamOverrideHost()).Times(0);",
          "6314:   Http::ResponseHeaderMapPtr response_headers_200(",
          "6315:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "6318:   ASSERT(response_decoder != nullptr);",
          "6320:   response_decoder->decodeHeaders(std::move(response_headers_200), true);",
          "6322:   EXPECT_EQ(2, callbacks_.stream_info_.attemptCount().value());",
          "6325: }",
          "6327: } // namespace Router",
          "",
          "[Removed Lines]",
          "6306:   router_.retry_state_->callback_();",
          "6311:   EXPECT_EQ(absl::nullopt, router_.overrideHostToSelect());",
          "6317:   EXPECT_CALL(*router_.retry_state_, shouldRetryHeaders(_, _, _)).WillOnce(Return(RetryStatus::No));",
          "6324:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "6432:   router_->retry_state_->callback_();",
          "6437:   EXPECT_EQ(absl::nullopt, router_->overrideHostToSelect());",
          "6443:   EXPECT_CALL(*router_->retry_state_, shouldRetryHeaders(_, _, _))",
          "6444:       .WillOnce(Return(RetryStatus::No));",
          "6451:   router_->onDestroy();",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.cc||test/common/router/router_test_base.cc": [
          "File: test/common/router/router_test_base.cc -> test/common/router/router_test_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:               ShadowWriterPtr{shadow_writer_}, true, start_child_span, suppress_envoy_headers,",
          "20:               false, suppress_grpc_request_failure_code_stats, std::move(strict_headers_to_check),",
          "21:               test_time_.timeSystem(), http_context_, router_context_),",
          "24:   upstream_locality_.set_zone(\"to_az\");",
          "25:   cm_.initializeThreadLocalClusters({\"fake_cluster\"});",
          "26:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, address())",
          "27:       .WillByDefault(Return(host_address_));",
          "28:   ON_CALL(*cm_.thread_local_cluster_.conn_pool_.host_, locality())",
          "29:       .WillByDefault(ReturnRef(upstream_locality_));",
          "33:       ->setRemoteAddress(Network::Utility::parseInternetAddressAndPort(\"1.2.3.4:80\"));",
          "",
          "[Removed Lines]",
          "22:       router_(config_, config_.default_stats_) {",
          "23:   router_.setDecoderFilterCallbacks(callbacks_);",
          "30:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_->setLocalAddress(",
          "31:       host_address_);",
          "32:   router_.downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "[Added Lines]",
          "22:       router_(std::make_unique<RouterTestFilter>(config_, config_.default_stats_)) {",
          "23:   router_->setDecoderFilterCallbacks(callbacks_);",
          "30:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "31:       ->setLocalAddress(host_address_);",
          "32:   router_->downstream_connection_.stream_info_.downstream_connection_info_provider_",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:   Http::TestRequestHeaderMapImpl headers;",
          "142:   HttpTestUtility::addDefaultHeaders(headers);",
          "146:   EXPECT_CALL(cancellable_, cancel(_));",
          "148: }",
          "150: void RouterTestBase::verifyAttemptCountInRequestBasic(bool set_include_attempt_count_in_request,",
          "",
          "[Removed Lines]",
          "143:   router_.decodeHeaders(headers, true);",
          "147:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "143:   router_->decodeHeaders(headers, true);",
          "147:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:   if (preset_count) {",
          "162:     headers.setEnvoyAttemptCount(preset_count.value());",
          "163:   }",
          "166:   EXPECT_EQ(expected_count, atoi(std::string(headers.getEnvoyAttemptCountValue()).c_str()));",
          "167:   EXPECT_EQ(1U, callbacks_.stream_info_.attemptCount().value());",
          "170:   EXPECT_CALL(cancellable_, cancel(_));",
          "172:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "173:   EXPECT_EQ(0U,",
          "174:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "164:   router_.decodeHeaders(headers, true);",
          "171:   router_.onDestroy();",
          "",
          "[Added Lines]",
          "164:   router_->decodeHeaders(headers, true);",
          "171:   router_->onDestroy();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:   Http::TestRequestHeaderMapImpl headers;",
          "190:   HttpTestUtility::addDefaultHeaders(headers);",
          "193:   Http::ResponseHeaderMapPtr response_headers(",
          "194:       new Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}});",
          "",
          "[Removed Lines]",
          "191:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "191:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:                                       Http::Protocol::Http10);",
          "219:   HttpTestUtility::addDefaultHeaders(default_request_headers_, false);",
          "221: }",
          "223: void RouterTestBase::enableRedirects(uint32_t max_internal_redirects) {",
          "",
          "[Removed Lines]",
          "220:   router_.decodeHeaders(default_request_headers_, end_stream);",
          "",
          "[Added Lines]",
          "220:   router_->decodeHeaders(default_request_headers_, end_stream);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "290:   Http::TestRequestHeaderMapImpl headers;",
          "291:   HttpTestUtility::addDefaultHeaders(headers);",
          "293:   EXPECT_EQ(1U,",
          "294:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "292:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "292:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "335:   Http::TestRequestHeaderMapImpl headers;",
          "336:   HttpTestUtility::addDefaultHeaders(headers);",
          "338:   EXPECT_EQ(1U,",
          "339:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "337:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "337:   router_->decodeHeaders(headers, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "383:   Http::TestRequestHeaderMapImpl headers;",
          "384:   HttpTestUtility::addDefaultHeaders(headers);",
          "386:   EXPECT_EQ(0U,",
          "387:             callbacks_.route_->route_entry_.virtual_cluster_.stats().upstream_rq_total_.value());",
          "388:   EXPECT_TRUE(verifyHostUpstreamStats(0, 0));",
          "",
          "[Removed Lines]",
          "385:   router_.decodeHeaders(headers, true);",
          "",
          "[Added Lines]",
          "385:   router_->decodeHeaders(headers, true);",
          "",
          "---------------"
        ],
        "test/common/router/router_test_base.h||test/common/router/router_test_base.h": [
          "File: test/common/router/router_test_base.h -> test/common/router/router_test_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   MockShadowWriter* shadow_writer_;",
          "105:   NiceMock<LocalInfo::MockLocalInfo> local_info_;",
          "106:   FilterConfig config_;",
          "108:   Event::MockTimer* response_timeout_{};",
          "109:   Event::MockTimer* per_try_timeout_{};",
          "110:   Event::MockTimer* per_try_idle_timeout_{};",
          "",
          "[Removed Lines]",
          "107:   RouterTestFilter router_;",
          "",
          "[Added Lines]",
          "107:   std::unique_ptr<RouterTestFilter> router_;",
          "",
          "---------------"
        ],
        "test/integration/buffer_accounting_integration_test.cc||test/integration/buffer_accounting_integration_test.cc": [
          "File: test/integration/buffer_accounting_integration_test.cc -> test/integration/buffer_accounting_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include \"test/integration/tracked_watermark_buffer.h\"",
          "16: #include \"test/integration/utility.h\"",
          "17: #include \"test/mocks/http/mocks.h\"",
          "19: #include \"fake_upstream.h\"",
          "20: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"test/test_common/test_runtime.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:       public HttpIntegrationTest {",
          "97: public:",
          "98:   std::vector<IntegrationStreamDecoderPtr>",
          "100:     std::vector<IntegrationStreamDecoderPtr> responses;",
          "102:     Http::TestRequestHeaderMapImpl header_map{",
          "",
          "[Removed Lines]",
          "99:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size) {",
          "",
          "[Added Lines]",
          "100:   sendRequests(uint32_t num_responses, uint32_t request_body_size, uint32_t response_body_size,",
          "101:                absl::string_view cluster_to_wait_for = \"\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     for (uint32_t idx = 0; idx < num_responses; ++idx) {",
          "110:       responses.emplace_back(codec_client_->makeRequestWithBody(header_map, request_body_size));",
          "111:     }",
          "113:     return responses;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:       if (!cluster_to_wait_for.empty()) {",
          "114:         test_server_->waitForGaugeEq(",
          "115:             absl::StrCat(\"cluster.\", cluster_to_wait_for, \".upstream_rq_active\"), idx + 1);",
          "116:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "346:   if (streamBufferAccounting()) {",
          "",
          "[Removed Lines]",
          "343:   auto responses = sendRequests(num_requests, request_body_size, response_body_size);",
          "",
          "[Added Lines]",
          "349:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "358:   }",
          "359: }",
          "361: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToDownstream) {",
          "362:   const int num_requests = 5;",
          "363:   const uint32_t request_body_size = 4096;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368: TEST_P(Http2BufferWatermarksTest, ShouldTrackAllocatedBytesToShadowUpstream) {",
          "369:   const int num_requests = 5;",
          "370:   const uint32_t request_body_size = 4096;",
          "371:   const uint32_t response_body_size = 4096;",
          "372:   TestScopedRuntime scoped_runtime;",
          "373:   scoped_runtime.mergeValues({{\"envoy.reloadable_features.streaming_shadow\", \"true\"}});",
          "375:   autonomous_upstream_ = true;",
          "376:   autonomous_allow_incomplete_streams_ = true;",
          "377:   setUpstreamCount(2);",
          "378:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bootstrap) {",
          "379:     auto* cluster = bootstrap.mutable_static_resources()->add_clusters();",
          "380:     cluster->MergeFrom(bootstrap.static_resources().clusters()[0]);",
          "381:     cluster->set_name(\"cluster_1\");",
          "382:   });",
          "383:   config_helper_.addConfigModifier(",
          "384:       [=](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "385:               hcm) -> void {",
          "386:         auto* mirror_policy = hcm.mutable_route_config()",
          "387:                                   ->mutable_virtual_hosts(0)",
          "388:                                   ->mutable_routes(0)",
          "389:                                   ->mutable_route()",
          "390:                                   ->add_request_mirror_policies();",
          "391:         mirror_policy->set_cluster(\"cluster_1\");",
          "392:       });",
          "393:   initialize();",
          "395:   buffer_factory_->setExpectedAccountBalance(request_body_size, num_requests);",
          "398:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "399:   write_matcher_->setWriteReturnsEgain();",
          "401:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "403:   auto responses = sendRequests(num_requests, request_body_size, response_body_size,",
          "407:   for (auto& response : responses) {",
          "408:     ASSERT_TRUE(response->waitForEndStream());",
          "409:     ASSERT_TRUE(response->complete());",
          "410:   }",
          "413:   if (streamBufferAccounting()) {",
          "414:     EXPECT_TRUE(",
          "415:         buffer_factory_->waitForExpectedAccountBalanceWithTimeout(TestUtility::DefaultTimeout))",
          "416:         << \"buffer total: \" << buffer_factory_->totalBufferSize() << \"\\n\"",
          "417:         << \" buffer max: \" << buffer_factory_->maxBufferSize() << \"\\n\"",
          "418:         << printAccounts();",
          "419:   }",
          "421:   write_matcher_->setResumeWrites();",
          "422:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", num_requests);",
          "423: }",
          "",
          "---------------"
        ],
        "test/integration/shadow_policy_integration_test.cc||test/integration/shadow_policy_integration_test.cc": [
          "File: test/integration/shadow_policy_integration_test.cc -> test/integration/shadow_policy_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <string>",
          "3: #include \"envoy/extensions/access_loggers/file/v3/file.pb.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <chrono>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: #include \"test/integration/filters/repick_cluster_filter.h\"",
          "8: #include \"test/integration/http_integration.h\"",
          "10: namespace Envoy {",
          "11: namespace {",
          "15: public:",
          "17:     setUpstreamProtocol(Http::CodecType::HTTP2);",
          "18:     autonomous_upstream_ = true;",
          "19:     setUpstreamCount(2);",
          "",
          "[Removed Lines]",
          "13: class ShadowPolicyIntegrationTest : public testing::TestWithParam<Network::Address::IpVersion>,",
          "14:                                     public HttpIntegrationTest {",
          "16:   ShadowPolicyIntegrationTest() : HttpIntegrationTest(Http::CodecType::HTTP2, GetParam()) {",
          "",
          "[Added Lines]",
          "10: #include \"test/integration/socket_interface_swap.h\"",
          "11: #include \"test/test_common/test_runtime.h\"",
          "16: class ShadowPolicyIntegrationTest",
          "17:     : public testing::TestWithParam<std::tuple<Network::Address::IpVersion, bool>>,",
          "18:       public HttpIntegrationTest,",
          "19:       public SocketInterfaceSwap {",
          "21:   ShadowPolicyIntegrationTest()",
          "22:       : HttpIntegrationTest(Http::CodecType::HTTP2, std::get<0>(GetParam())) {",
          "23:     scoped_runtime_.mergeValues(",
          "24:         {{\"envoy.reloadable_features.streaming_shadow\", streaming_shadow_ ? \"true\" : \"false\"}});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:       EXPECT_EQ(10U, response->body().size());",
          "74:     }",
          "75:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "78:     upstream_headers_ =",
          "79:         reinterpret_cast<AutonomousUpstream*>(fake_upstreams_[0].get())->lastRequestHeaders();",
          "",
          "[Removed Lines]",
          "76:     test_server_->waitForCounterEq(\"cluster.cluster_1.internal.upstream_rq_completed\", 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     cleanupUpstreamAndDownstream();",
          "86:   }",
          "88:   absl::optional<int> cluster_with_custom_filter_;",
          "89:   std::string filter_name_ = \"on-local-reply-filter\";",
          "90:   std::unique_ptr<Http::TestRequestHeaderMapImpl> upstream_headers_;",
          "91:   std::unique_ptr<Http::TestRequestHeaderMapImpl> mirror_headers_;",
          "92: };",
          "99: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithCluster) {",
          "",
          "[Removed Lines]",
          "94: INSTANTIATE_TEST_SUITE_P(IpVersions, ShadowPolicyIntegrationTest,",
          "95:                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),",
          "96:                          TestUtility::ipTestParamsToString);",
          "",
          "[Added Lines]",
          "95:   const bool streaming_shadow_ = std::get<1>(GetParam());",
          "100:   TestScopedRuntime scoped_runtime_;",
          "103: INSTANTIATE_TEST_SUITE_P(",
          "104:     IpVersionsAndStreaming, ShadowPolicyIntegrationTest,",
          "105:     testing::Combine(testing::ValuesIn(TestEnvironment::getIpVersionsForTest()), testing::Bool()),",
          "106:     [](const ::testing::TestParamInfo<ShadowPolicyIntegrationTest::ParamType>& params) {",
          "107:       return absl::StrCat(std::get<0>(params.param) == Network::Address::IpVersion::v4 ? \"IPv4\"",
          "108:                                                                                        : \"IPv6\",",
          "109:                           \"_\", std::get<1>(params.param) ? \"streaming_shadow\" : \"buffered_shadow\");",
          "110:     });",
          "112: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithDownstreamReset) {",
          "113:   if (!streaming_shadow_) {",
          "114:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "115:   }",
          "116:   autonomous_upstream_ = false;",
          "117:   initialConfigSetup(\"cluster_1\", \"\");",
          "118:   initialize();",
          "120:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "121:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "122:   request_headers.addCopy(\"potato\", \"salad\");",
          "123:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "124:       codec_client_->startRequest(request_headers, false);",
          "125:   auto& encoder = result.first;",
          "126:   auto response = std::move(result.second);",
          "128:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "129:   FakeStreamPtr upstream_request_main;",
          "130:   ASSERT_TRUE(",
          "131:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "132:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "133:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "134:   FakeStreamPtr upstream_request_shadow;",
          "135:   ASSERT_TRUE(",
          "136:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "137:   ASSERT_TRUE(",
          "138:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "139:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "140:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "141:   EXPECT_EQ(upstream_request_main->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "142:             \"salad\");",
          "143:   EXPECT_EQ(upstream_request_shadow->headers().get(Http::LowerCaseString(\"potato\"))[0]->value(),",
          "144:             \"salad\");",
          "146:   codec_client_->sendReset(encoder);",
          "148:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "149:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "150:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "151:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "152:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "153:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "155:   EXPECT_FALSE(upstream_request_main->complete());",
          "156:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "157:   EXPECT_FALSE(response->complete());",
          "159:   cleanupUpstreamAndDownstream();",
          "161:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "162:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "163:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "164:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "165:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "166:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "167: }",
          "169: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithMainUpstreamReset) {",
          "170:   if (!streaming_shadow_) {",
          "171:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "172:   }",
          "173:   autonomous_upstream_ = false;",
          "174:   initialConfigSetup(\"cluster_1\", \"\");",
          "175:   initialize();",
          "177:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "178:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "179:   request_headers.addCopy(\"potato\", \"salad\");",
          "180:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "181:       codec_client_->startRequest(request_headers, false);",
          "182:   auto response = std::move(result.second);",
          "184:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "185:   FakeStreamPtr upstream_request_main;",
          "186:   ASSERT_TRUE(",
          "187:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "188:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "189:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "190:   FakeStreamPtr upstream_request_shadow;",
          "191:   ASSERT_TRUE(",
          "192:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "193:   ASSERT_TRUE(",
          "194:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "195:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "196:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "199:   upstream_request_main->encodeResetStream();",
          "200:   ASSERT_TRUE(response->waitForReset());",
          "201:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "203:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "204:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "205:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "206:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "207:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "209:   EXPECT_FALSE(upstream_request_main->complete());",
          "210:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "211:   EXPECT_TRUE(response->complete());",
          "213:   cleanupUpstreamAndDownstream();",
          "215:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "216:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "218:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_rx_reset\")->value(), 1);",
          "219:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "220:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "221:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "222: }",
          "224: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowUpstreamReset) {",
          "225:   if (!streaming_shadow_) {",
          "226:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "227:   }",
          "228:   autonomous_upstream_ = false;",
          "229:   initialConfigSetup(\"cluster_1\", \"\");",
          "230:   initialize();",
          "232:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "233:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "234:   request_headers.addCopy(\"potato\", \"salad\");",
          "235:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "236:       codec_client_->startRequest(request_headers, false);",
          "237:   auto& encoder = result.first;",
          "238:   auto response = std::move(result.second);",
          "240:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "241:   FakeStreamPtr upstream_request_main;",
          "242:   ASSERT_TRUE(",
          "243:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "244:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "245:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "246:   FakeStreamPtr upstream_request_shadow;",
          "247:   ASSERT_TRUE(",
          "248:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "249:   ASSERT_TRUE(",
          "250:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "251:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "252:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "255:   upstream_request_shadow->encodeResetStream();",
          "256:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_rx_reset\", 1,",
          "257:                                  std::chrono::milliseconds(1000));",
          "259:   codec_client_->sendData(encoder, 20, true);",
          "260:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 20));",
          "261:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "262:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "263:   ASSERT_TRUE(response->waitForEndStream());",
          "264:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "265:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "266:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "267:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "269:   EXPECT_TRUE(upstream_request_main->complete());",
          "270:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "271:   EXPECT_TRUE(response->complete());",
          "273:   cleanupUpstreamAndDownstream();",
          "275:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "276:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "278:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_rx_reset\")->value(), 1);",
          "279:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "280:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "281: }",
          "284: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithEarlyDownstreamTimeout) {",
          "285:   if (!streaming_shadow_) {",
          "286:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "287:   }",
          "288:   autonomous_upstream_ = false;",
          "289:   config_helper_.addConfigModifier(",
          "290:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "291:              hcm) {",
          "293:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "294:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "295:       });",
          "296:   initialConfigSetup(\"cluster_1\", \"\");",
          "297:   config_helper_.disableDelayClose();",
          "298:   initialize();",
          "300:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "301:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "302:   request_headers.addCopy(\"potato\", \"salad\");",
          "303:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "304:       codec_client_->startRequest(request_headers, false);",
          "305:   auto response = std::move(result.second);",
          "307:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "308:   FakeStreamPtr upstream_request_main;",
          "309:   ASSERT_TRUE(",
          "310:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "311:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "312:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "313:   FakeStreamPtr upstream_request_shadow;",
          "314:   ASSERT_TRUE(",
          "315:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "316:   ASSERT_TRUE(",
          "317:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "318:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "319:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "322:   ASSERT_TRUE(response->waitForReset());",
          "323:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "324:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "327:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "328:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "329:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "330:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "332:   EXPECT_FALSE(upstream_request_main->complete());",
          "333:   EXPECT_FALSE(upstream_request_shadow->complete());",
          "335:   cleanupUpstreamAndDownstream();",
          "337:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "338:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "339:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "340:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "341:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "342:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "343: }",
          "347: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithLateDownstreamTimeoutAndShadowComplete) {",
          "348:   if (!streaming_shadow_) {",
          "349:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "350:   }",
          "351:   autonomous_upstream_ = false;",
          "352:   initialConfigSetup(\"cluster_1\", \"\");",
          "353:   config_helper_.addConfigModifier(",
          "354:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "355:              hcm) {",
          "357:         hcm.mutable_stream_idle_timeout()->set_seconds(0);",
          "358:         hcm.mutable_stream_idle_timeout()->set_nanos(100 * 1000 * 1000);",
          "359:       });",
          "360:   config_helper_.disableDelayClose();",
          "361:   initialize();",
          "363:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "364:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "365:   request_headers.addCopy(\"potato\", \"salad\");",
          "367:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "368:       codec_client_->startRequest(request_headers, true);",
          "369:   auto response = std::move(result.second);",
          "371:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "372:   FakeStreamPtr upstream_request_main;",
          "373:   ASSERT_TRUE(",
          "374:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "375:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "376:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "377:   FakeStreamPtr upstream_request_shadow;",
          "378:   ASSERT_TRUE(",
          "379:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "380:   ASSERT_TRUE(",
          "381:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "382:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "383:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "384:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "386:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "387:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "388:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "391:   ASSERT_TRUE(response->waitForEndStream());",
          "392:   ASSERT_TRUE(upstream_request_main->waitForReset());",
          "393:   EXPECT_TRUE(response->complete());",
          "394:   EXPECT_EQ(response->headers().getStatusValue(), \"504\");",
          "397:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "398:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "400:   cleanupUpstreamAndDownstream();",
          "402:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "403:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "404:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_tx_reset\")->value(), 1);",
          "405:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 0);",
          "406:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 0);",
          "407:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "408: }",
          "411: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowOnlyTimeout) {",
          "412:   if (!streaming_shadow_) {",
          "413:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "414:   }",
          "415:   autonomous_upstream_ = false;",
          "416:   initialConfigSetup(\"cluster_1\", \"\");",
          "417:   config_helper_.addConfigModifier(",
          "418:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "419:              hcm) {",
          "421:         auto* route_config = hcm.mutable_route_config();",
          "422:         auto* virtual_host = route_config->mutable_virtual_hosts(0);",
          "423:         auto* route = virtual_host->mutable_routes(0)->mutable_route();",
          "424:         route->mutable_timeout()->set_seconds(0);",
          "425:         route->mutable_timeout()->set_nanos(100 * 1000 * 1000);",
          "426:       });",
          "427:   config_helper_.disableDelayClose();",
          "428:   initialize();",
          "430:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "431:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "432:   request_headers.addCopy(\"potato\", \"salad\");",
          "434:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "435:       codec_client_->startRequest(request_headers, true);",
          "436:   auto response = std::move(result.second);",
          "438:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "439:   FakeStreamPtr upstream_request_main;",
          "440:   ASSERT_TRUE(",
          "441:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "442:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "443:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "444:   FakeStreamPtr upstream_request_shadow;",
          "445:   ASSERT_TRUE(",
          "446:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "447:   ASSERT_TRUE(",
          "448:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "449:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "450:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "452:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "453:   ASSERT_TRUE(response->waitForEndStream());",
          "454:   EXPECT_TRUE(response->complete());",
          "457:   ASSERT_TRUE(upstream_request_shadow->waitForReset());",
          "460:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "461:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "463:   cleanupUpstreamAndDownstream();",
          "465:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "466:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "467:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_tx_reset\")->value(), 1);",
          "468:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_timeout\")->value(), 1);",
          "469: }",
          "471: TEST_P(ShadowPolicyIntegrationTest, MainRequestOverBufferLimit) {",
          "472:   if (!streaming_shadow_) {",
          "473:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "474:   }",
          "475:   autonomous_upstream_ = true;",
          "476:   cluster_with_custom_filter_ = 0;",
          "477:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "478:   initialConfigSetup(\"cluster_1\", \"\");",
          "479:   config_helper_.setBufferLimits(1024, 1024);",
          "480:   config_helper_.disableDelayClose();",
          "481:   initialize();",
          "483:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "484:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "485:   request_headers.addCopy(\"potato\", \"salad\");",
          "487:   auto response = codec_client_->makeRequestWithBody(",
          "488:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "489:                                      {\":path\", \"/dynamo/url\"},",
          "490:                                      {\":scheme\", \"http\"},",
          "491:                                      {\":authority\", \"sni.lyft.com\"},",
          "492:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "493:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "494:       1024 * 65);",
          "496:   ASSERT_TRUE(response->waitForEndStream());",
          "497:   EXPECT_TRUE(response->complete());",
          "499:   cleanupUpstreamAndDownstream();",
          "501:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "502:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "503:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_rq_completed\", 1);",
          "504: }",
          "506: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverBufferLimit) {",
          "507:   if (!streaming_shadow_) {",
          "508:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "509:   }",
          "510:   autonomous_upstream_ = true;",
          "511:   cluster_with_custom_filter_ = 1;",
          "512:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "513:   initialConfigSetup(\"cluster_1\", \"\");",
          "514:   config_helper_.setBufferLimits(1024, 1024);",
          "515:   config_helper_.disableDelayClose();",
          "516:   initialize();",
          "518:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "519:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "520:   request_headers.addCopy(\"potato\", \"salad\");",
          "522:   auto response = codec_client_->makeRequestWithBody(",
          "523:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "524:                                      {\":path\", \"/dynamo/url\"},",
          "525:                                      {\":scheme\", \"http\"},",
          "526:                                      {\":authority\", \"sni.lyft.com\"},",
          "527:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "528:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "529:       1024 * 65);",
          "531:   ASSERT_TRUE(response->waitForEndStream());",
          "532:   EXPECT_TRUE(response->complete());",
          "533:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "535:   cleanupUpstreamAndDownstream();",
          "537:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "538:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "539:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "541:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "542: }",
          "544: TEST_P(ShadowPolicyIntegrationTest, ShadowRequestOverRouteBufferLimit) {",
          "545:   if (!streaming_shadow_) {",
          "546:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "547:   }",
          "548:   autonomous_upstream_ = true;",
          "549:   cluster_with_custom_filter_ = 1;",
          "550:   filter_name_ = \"encoder-decoder-buffer-filter\";",
          "551:   initialConfigSetup(\"cluster_1\", \"\");",
          "552:   config_helper_.addConfigModifier([](ConfigHelper::HttpConnectionManager& hcm) {",
          "553:     hcm.mutable_route_config()",
          "554:         ->mutable_virtual_hosts(0)",
          "555:         ->mutable_per_request_buffer_limit_bytes()",
          "556:         ->set_value(0);",
          "557:   });",
          "558:   config_helper_.disableDelayClose();",
          "559:   initialize();",
          "561:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "562:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "563:   request_headers.addCopy(\"potato\", \"salad\");",
          "565:   auto response = codec_client_->makeRequestWithBody(",
          "566:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "567:                                      {\":path\", \"/dynamo/url\"},",
          "568:                                      {\":scheme\", \"http\"},",
          "569:                                      {\":authority\", \"sni.lyft.com\"},",
          "570:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "571:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "572:       1024 * 65);",
          "574:   ASSERT_TRUE(response->waitForEndStream());",
          "575:   EXPECT_TRUE(response->complete());",
          "576:   EXPECT_EQ(response->headers().getStatusValue(), \"200\");",
          "578:   cleanupUpstreamAndDownstream();",
          "580:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "581:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "582:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "584:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 0);",
          "585: }",
          "587: TEST_P(ShadowPolicyIntegrationTest, BackedUpConnectionBeforeShadowBegins) {",
          "588:   if (!streaming_shadow_) {",
          "589:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "590:   }",
          "591:   autonomous_upstream_ = true;",
          "592:   autonomous_allow_incomplete_streams_ = true;",
          "593:   initialConfigSetup(\"cluster_1\", \"\");",
          "595:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "596:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "597:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "598:   });",
          "601:   config_helper_.addConfigModifier(",
          "602:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "603:              hcm) {",
          "604:         auto* route_1 = hcm.mutable_route_config()->mutable_virtual_hosts(0)->add_routes();",
          "605:         route_1->mutable_route()->set_cluster(\"cluster_1\");",
          "606:         route_1->mutable_match()->set_prefix(\"/shadow\");",
          "607:         hcm.mutable_route_config()",
          "608:             ->mutable_virtual_hosts(0)",
          "609:             ->mutable_routes(0)",
          "610:             ->mutable_match()",
          "611:             ->set_prefix(\"/main\");",
          "612:       });",
          "613:   config_helper_.addRuntimeOverride(Runtime::defer_processing_backedup_streams, \"true\");",
          "614:   initialize();",
          "616:   write_matcher_->setDestinationPort(fake_upstreams_[1]->localAddress()->ip()->port());",
          "617:   write_matcher_->setWriteReturnsEgain();",
          "619:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "621:   auto shadow_direct_response = codec_client_->makeRequestWithBody(",
          "622:       Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "623:                                      {\":path\", \"/shadow\"},",
          "624:                                      {\":scheme\", \"http\"},",
          "625:                                      {\":authority\", \"sni.lyft.com\"},",
          "626:                                      {\"x-forwarded-for\", \"10.0.0.1\"},",
          "627:                                      {\"x-envoy-retry-on\", \"5xx\"}},",
          "628:       1024 * 3);",
          "631:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "632:       codec_client_->startRequest(Http::TestRequestHeaderMapImpl{{\":method\", \"POST\"},",
          "633:                                                                  {\":path\", \"/main\"},",
          "634:                                                                  {\":scheme\", \"http\"},",
          "635:                                                                  {\":authority\", \"sni.lyft.com\"},",
          "636:                                                                  {\"x-forwarded-for\", \"10.0.0.1\"},",
          "637:                                                                  {\"x-envoy-retry-on\", \"5xx\"}},",
          "638:                                   false);",
          "639:   auto& encoder = result.first;",
          "640:   auto main_response = std::move(result.second);",
          "643:   test_server_->waitForCounterEq(\"http.config_test.downstream_flow_control_paused_reading_total\", 1,",
          "644:                                  std::chrono::milliseconds(500));",
          "646:   codec_client_->sendData(encoder, 1023, false);",
          "648:   codec_client_->sendData(encoder, 10, true);",
          "650:   EXPECT_FALSE(main_response->waitForEndStream(std::chrono::milliseconds(500)));",
          "653:   write_matcher_->setResumeWrites();",
          "655:   EXPECT_TRUE(main_response->waitForEndStream());",
          "656:   EXPECT_TRUE(main_response->complete());",
          "657:   EXPECT_EQ(main_response->headers().getStatusValue(), \"200\");",
          "658:   EXPECT_TRUE(shadow_direct_response->waitForEndStream());",
          "659:   EXPECT_TRUE(shadow_direct_response->complete());",
          "660:   EXPECT_EQ(shadow_direct_response->headers().getStatusValue(), \"200\");",
          "663:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "664:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 2);",
          "665:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "666:                 ->value(),",
          "667:             1);",
          "668: }",
          "670: TEST_P(ShadowPolicyIntegrationTest, RequestMirrorPolicyWithShadowBackpressure) {",
          "671:   if (!streaming_shadow_) {",
          "672:     GTEST_SKIP() << \"Not applicable for non-streaming shadows.\";",
          "673:   }",
          "674:   autonomous_upstream_ = false;",
          "675:   initialConfigSetup(\"cluster_1\", \"\");",
          "677:   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bs) {",
          "678:     auto* shadow_cluster = bs.mutable_static_resources()->mutable_clusters(1);",
          "679:     shadow_cluster->mutable_per_connection_buffer_limit_bytes()->set_value(1024);",
          "680:   });",
          "681:   initialize();",
          "683:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "684:   Http::TestRequestHeaderMapImpl request_headers = default_request_headers_;",
          "685:   request_headers.addCopy(\"potato\", \"salad\");",
          "686:   std::pair<Http::RequestEncoder&, IntegrationStreamDecoderPtr> result =",
          "687:       codec_client_->startRequest(request_headers, false);",
          "688:   auto& encoder = result.first;",
          "689:   auto response = std::move(result.second);",
          "691:   FakeHttpConnectionPtr fake_upstream_connection_main;",
          "692:   FakeStreamPtr upstream_request_main;",
          "693:   ASSERT_TRUE(",
          "694:       fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_main));",
          "695:   ASSERT_TRUE(fake_upstream_connection_main->waitForNewStream(*dispatcher_, upstream_request_main));",
          "696:   FakeHttpConnectionPtr fake_upstream_connection_shadow;",
          "697:   FakeStreamPtr upstream_request_shadow;",
          "698:   ASSERT_TRUE(",
          "699:       fake_upstreams_[1]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_shadow));",
          "700:   ASSERT_TRUE(",
          "701:       fake_upstream_connection_shadow->waitForNewStream(*dispatcher_, upstream_request_shadow));",
          "702:   ASSERT_TRUE(upstream_request_main->waitForHeadersComplete());",
          "703:   ASSERT_TRUE(upstream_request_shadow->waitForHeadersComplete());",
          "707:   codec_client_->sendData(encoder, 2048, false);",
          "708:   test_server_->waitForCounterGe(\"http.config_test.downstream_flow_control_paused_reading_total\",",
          "709:                                  1);",
          "710:   codec_client_->sendData(encoder, 2048, true);",
          "711:   ASSERT_TRUE(upstream_request_main->waitForData(*dispatcher_, 2048 * 2));",
          "712:   ASSERT_TRUE(upstream_request_shadow->waitForData(*dispatcher_, 2048 * 2));",
          "714:   ASSERT_TRUE(upstream_request_main->waitForEndStream(*dispatcher_));",
          "715:   ASSERT_TRUE(upstream_request_shadow->waitForEndStream(*dispatcher_));",
          "716:   upstream_request_main->encodeHeaders(default_response_headers_, true);",
          "717:   upstream_request_shadow->encodeHeaders(default_response_headers_, true);",
          "718:   ASSERT_TRUE(response->waitForEndStream());",
          "719:   ASSERT_TRUE(fake_upstream_connection_main->close());",
          "720:   ASSERT_TRUE(fake_upstream_connection_shadow->close());",
          "721:   ASSERT_TRUE(fake_upstream_connection_main->waitForDisconnect());",
          "722:   ASSERT_TRUE(fake_upstream_connection_shadow->waitForDisconnect());",
          "723:   EXPECT_TRUE(upstream_request_main->complete());",
          "724:   EXPECT_TRUE(upstream_request_shadow->complete());",
          "725:   EXPECT_TRUE(response->complete());",
          "727:   cleanupUpstreamAndDownstream();",
          "729:   EXPECT_EQ(test_server_->counter(\"http.config_test.downstream_flow_control_paused_reading_total\")",
          "730:                 ->value(),",
          "731:             1);",
          "732:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_cx_total\")->value(), 1);",
          "733:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_cx_total\")->value(), 1);",
          "735:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_0.upstream_rq_completed\")->value(), 1);",
          "736:   EXPECT_EQ(test_server_->counter(\"cluster.cluster_1.upstream_rq_completed\")->value(), 1);",
          "737: }",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.cc||test/mocks/http/mocks.cc": [
          "File: test/mocks/http/mocks.cc -> test/mocks/http/mocks.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: MockAsyncClientRequest::~MockAsyncClientRequest() { client_->onRequestDestroy(); }",
          "215: MockAsyncClientStream::MockAsyncClientStream() = default;",
          "218: MockFilterChainFactoryCallbacks::MockFilterChainFactoryCallbacks() = default;",
          "219: MockFilterChainFactoryCallbacks::~MockFilterChainFactoryCallbacks() = default;",
          "",
          "[Removed Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() = default;",
          "",
          "[Added Lines]",
          "216: MockAsyncClientStream::~MockAsyncClientStream() {",
          "217:   if (destructor_callback_) {",
          "218:     (*destructor_callback_)();",
          "219:   }",
          "220: };",
          "",
          "---------------"
        ],
        "test/mocks/http/mocks.h||test/mocks/http/mocks.h": [
          "File: test/mocks/http/mocks.h -> test/mocks/http/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:                 const RequestOptions& args) override {",
          "480:     return send_(request, callbacks, args);",
          "481:   }",
          "483:   MOCK_METHOD(Request*, send_,",
          "484:               (RequestMessagePtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "486:   MOCK_METHOD(Stream*, start, (StreamCallbacks & callbacks, const StreamOptions& args));",
          "488:   MOCK_METHOD(Event::Dispatcher&, dispatcher, ());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:   OngoingRequest* startRequest(RequestHeaderMapPtr&& headers, Callbacks& callbacks,",
          "483:                                const RequestOptions& args) override {",
          "484:     return startRequest_(headers, callbacks, args);",
          "485:   }",
          "488:   MOCK_METHOD(OngoingRequest*, startRequest_,",
          "489:               (RequestHeaderMapPtr & request, Callbacks& callbacks, const RequestOptions& args));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   MOCK_METHOD(void, onReset, ());",
          "526: };",
          "529: public:",
          "530:   MockAsyncClientRequest(MockAsyncClient* client);",
          "531:   ~MockAsyncClientRequest() override;",
          "",
          "[Removed Lines]",
          "528: class MockAsyncClientRequest : public AsyncClient::Request {",
          "",
          "[Added Lines]",
          "532: class MockAsyncClientRequest : public virtual AsyncClient::Request {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "535:   MockAsyncClient* client_;",
          "536: };",
          "539: public:",
          "540:   MockAsyncClientStream();",
          "541:   ~MockAsyncClientStream() override;",
          "",
          "[Removed Lines]",
          "538: class MockAsyncClientStream : public AsyncClient::Stream {",
          "",
          "[Added Lines]",
          "542: class MockAsyncClientStream : public virtual AsyncClient::Stream {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:   MOCK_METHOD(void, sendTrailers, (RequestTrailerMap & trailers));",
          "546:   MOCK_METHOD(void, reset, ());",
          "547:   MOCK_METHOD(bool, isAboveWriteBufferHighWatermark, (), (const));",
          "548: };",
          "550: class MockDownstreamWatermarkCallbacks : public DownstreamWatermarkCallbacks {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:   void setDestructorCallback(AsyncClient::StreamDestructorCallbacks callback) override {",
          "553:     destructor_callback_ = callback;",
          "554:   }",
          "555:   void removeDestructorCallback() override { destructor_callback_.reset(); }",
          "556:   MOCK_METHOD(void, setWatermarkCallbacks, (DecoderFilterWatermarkCallbacks & callback),",
          "557:               (override));",
          "558:   MOCK_METHOD(void, removeWatermarkCallbacks, (), (override));",
          "560: private:",
          "561:   absl::optional<AsyncClient::StreamDestructorCallbacks> destructor_callback_;",
          "562: };",
          "564: class MockAsyncClientOngoingRequest : public virtual AsyncClient::OngoingRequest,",
          "565:                                       public MockAsyncClientStream,",
          "566:                                       public MockAsyncClientRequest {",
          "567: public:",
          "568:   MockAsyncClientOngoingRequest(MockAsyncClient* client) : MockAsyncClientRequest(client) {}",
          "569:   void captureAndSendTrailers(RequestTrailerMapPtr&& trailers) override {",
          "570:     return captureAndSendTrailers_(*trailers);",
          "571:   }",
          "572:   MOCK_METHOD(void, captureAndSendTrailers_, (RequestTrailerMap & trailers), ());",
          "",
          "---------------"
        ],
        "test/mocks/router/mocks.h||test/mocks/router/mocks.h": [
          "File: test/mocks/router/mocks.h -> test/mocks/router/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   MOCK_METHOD(void, shadow_,",
          "268:               (const std::string& cluster, Http::RequestMessagePtr& request,",
          "269:                const Http::AsyncClient::RequestOptions& options));",
          "270: };",
          "272: class TestVirtualCluster : public VirtualCluster {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   Http::AsyncClient::OngoingRequest*",
          "272:   streamingShadow(const std::string& cluster, Http::RequestHeaderMapPtr&& request,",
          "273:                   const Http::AsyncClient::RequestOptions& options) override {",
          "274:     return streamingShadow_(cluster, request, options);",
          "275:   }",
          "276:   MOCK_METHOD(Http::AsyncClient::OngoingRequest*, streamingShadow_,",
          "277:               (const std::string& cluster, Http::RequestHeaderMapPtr& request,",
          "278:                const Http::AsyncClient::RequestOptions& options));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "511b35e7c59f4e78a1dd8538b0f3c97ea6718e64",
      "candidate_info": {
        "commit_hash": "511b35e7c59f4e78a1dd8538b0f3c97ea6718e64",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/511b35e7c59f4e78a1dd8538b0f3c97ea6718e64",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.19] CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1576:     return false;",
          "1577:   }",
          "1580:   for (const auto& predicate : policy.predicates()) {",
          "1581:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1582:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1579:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1579:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1580:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: using testing::Eq;",
          "56: using testing::InSequence;",
          "57: using testing::Invoke;",
          "58: using testing::MockFunction;",
          "59: using testing::NiceMock;",
          "60: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:       sendLocalReply(Http::Code::ServiceUnavailable,",
          "245:                      testing::Eq(\"missing required header: :method\"), _, _,",
          "246:                      \"filter_removed_required_request_headers{missing required header: :method}\"))",
          "248:   router_.decodeHeaders(headers, true);",
          "249:   router_.onDestroy();",
          "250: }",
          "",
          "[Removed Lines]",
          "247:       .WillOnce(testing::InvokeWithoutArgs([] {}));",
          "",
          "[Added Lines]",
          "248:       .WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3528:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3526:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3527:   }));",
          "",
          "[Added Lines]",
          "3527:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4485:                    .value());",
          "4486: }",
          "4488: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4489:   enableRedirects();",
          "4490:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4488: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4489:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4490:   std::string route_name(\"route-test-name\");",
          "4491:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4493:   enableRedirects();",
          "4494:   sendRequest();",
          "4495:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4497:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4498:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4499:   }));",
          "4500:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4502:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4503:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4504:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4505:                     .value());",
          "4508:   router_.onDestroy();",
          "4509:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4510:                    .filterState()",
          "4511:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "4512:                    .value());",
          "4513: }",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         ->set_value(3);",
          "43:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "45:     HttpProtocolIntegrationTest::initialize();",
          "46:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "46:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "47:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "48:     handle_by_direct_response.mutable_routes(0)",
          "49:         ->mutable_direct_response()",
          "50:         ->mutable_body()",
          "51:         ->set_inline_string(EMPTY_STRING);",
          "52:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "802: }",
          "804: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "805:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "806:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "814:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "816:   config_helper_.addConfigModifier(",
          "817:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "818:              hcm) { hcm.set_via(\"via_value\"); });",
          "819:   initialize();",
          "821:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "823:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "824:   IntegrationStreamDecoderPtr response =",
          "825:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "827:   waitForNextUpstreamRequest();",
          "829:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "830:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "832:   ASSERT_TRUE(response->waitForEndStream());",
          "833:   ASSERT_TRUE(response->complete());",
          "834:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "835:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "836:                    ->value());",
          "838:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "839:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "840:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "841:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "843:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "844: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0bb2219112d8cdb4c4e8b346834f962925362ca",
      "candidate_info": {
        "commit_hash": "f0bb2219112d8cdb4c4e8b346834f962925362ca",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/f0bb2219112d8cdb4c4e8b346834f962925362ca",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.20] CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624:     return false;",
          "1625:   }",
          "1628:   for (const auto& predicate : policy.predicates()) {",
          "1629:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1630:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1627:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1627:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1628:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: using testing::Eq;",
          "56: using testing::InSequence;",
          "57: using testing::Invoke;",
          "58: using testing::MockFunction;",
          "59: using testing::NiceMock;",
          "60: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:       sendLocalReply(Http::Code::ServiceUnavailable,",
          "324:                      testing::Eq(\"missing required header: :method\"), _, _,",
          "325:                      \"filter_removed_required_request_headers{missing required header: :method}\"))",
          "327:   router_.decodeHeaders(headers, true);",
          "328:   router_.onDestroy();",
          "329: }",
          "",
          "[Removed Lines]",
          "326:       .WillOnce(testing::InvokeWithoutArgs([] {}));",
          "",
          "[Added Lines]",
          "327:       .WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3780:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3778:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3779:   }));",
          "",
          "[Added Lines]",
          "3779:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4736:                    .value());",
          "4737: }",
          "4739: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4740:   enableRedirects();",
          "4741:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4739: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4740:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4741:   std::string route_name(\"route-test-name\");",
          "4742:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4744:   enableRedirects();",
          "4745:   sendRequest();",
          "4746:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4748:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4749:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4750:   }));",
          "4751:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4753:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4754:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4755:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4756:                     .value());",
          "4759:   router_.onDestroy();",
          "4760:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4761:                    .filterState()",
          "4762:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "4763:                    .value());",
          "4764: }",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         ->set_value(3);",
          "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "42:     HttpProtocolIntegrationTest::initialize();",
          "43:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "45:     handle_by_direct_response.mutable_routes(0)",
          "46:         ->mutable_direct_response()",
          "47:         ->mutable_body()",
          "48:         ->set_inline_string(EMPTY_STRING);",
          "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "598: }",
          "600: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "601:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "602:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "610:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "612:   config_helper_.addConfigModifier(",
          "613:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "614:              hcm) { hcm.set_via(\"via_value\"); });",
          "615:   initialize();",
          "617:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "619:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "620:   IntegrationStreamDecoderPtr response =",
          "621:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "623:   waitForNextUpstreamRequest();",
          "625:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "626:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "628:   ASSERT_TRUE(response->waitForEndStream());",
          "629:   ASSERT_TRUE(response->complete());",
          "630:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "631:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "632:                    ->value());",
          "634:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "635:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "636:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "637:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "639:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "640: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18871dbfb168d3512a10c78dd267ff7c03f564c6",
      "candidate_info": {
        "commit_hash": "18871dbfb168d3512a10c78dd267ff7c03f564c6",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/18871dbfb168d3512a10c78dd267ff7c03f564c6",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.18] CVE-2022-21655\n\nCrash with direct_response\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1590:     return false;",
          "1591:   }",
          "1594:   for (const auto& predicate : policy.predicates()) {",
          "1595:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1596:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1593:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1593:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1594:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: using testing::Eq;",
          "60: using testing::InSequence;",
          "61: using testing::Invoke;",
          "62: using testing::MockFunction;",
          "63: using testing::NiceMock;",
          "64: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3446:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3444:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3445:   }));",
          "",
          "[Added Lines]",
          "3445:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4403:                    .value());",
          "4404: }",
          "4406: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4407:   enableRedirects();",
          "4408:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4403:                    .value());",
          "4404: }",
          "4406: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4407:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4408:   std::string route_name(\"route-test-name\");",
          "4409:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4411:   enableRedirects();",
          "4412:   sendRequest();",
          "4413:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4415:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4416:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4417:   }));",
          "4418:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4420:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4421:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4422:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4423:                     .value());",
          "4426:   router_.onDestroy();",
          "4427:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         ->set_value(3);",
          "43:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "45:     HttpProtocolIntegrationTest::initialize();",
          "46:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "46:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "47:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "48:     handle_by_direct_response.mutable_routes(0)",
          "49:         ->mutable_direct_response()",
          "50:         ->mutable_body()",
          "51:         ->set_inline_string(EMPTY_STRING);",
          "52:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "802: }",
          "804: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "805:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "806:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "813: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "814:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "816:   config_helper_.addConfigModifier(",
          "817:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "818:              hcm) { hcm.set_via(\"via_value\"); });",
          "819:   initialize();",
          "821:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "823:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "824:   IntegrationStreamDecoderPtr response =",
          "825:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "827:   waitForNextUpstreamRequest();",
          "829:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "830:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "832:   ASSERT_TRUE(response->waitForEndStream());",
          "833:   ASSERT_TRUE(response->complete());",
          "834:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "835:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "836:                    ->value());",
          "838:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "839:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "840:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "841:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "843:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "844: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
      "candidate_info": {
        "commit_hash": "5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/5bf9b0f1e7f247a4eee7180849cb0823926f7fff",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/router/router.cc",
          "test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc"
        ],
        "message": "[1.21] CVE-2022-21655\n\nSigned-off-by: Otto van der Schaaf <ovanders@redhat.com>",
        "before_after_code_files": [
          "source/common/router/router.cc||source/common/router/router.cc",
          "test/common/router/router_test.cc||test/common/router/router_test.cc",
          "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ],
          "candidate": [
            "source/common/router/router.cc||source/common/router/router.cc",
            "test/common/router/router_test.cc||test/common/router/router_test.cc",
            "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/router/router.cc||source/common/router/router.cc": [
          "File: source/common/router/router.cc -> source/common/router/router.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1660:     return false;",
          "1661:   }",
          "1664:   for (const auto& predicate : policy.predicates()) {",
          "1665:     if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,",
          "1666:                                       !target_is_http)) {",
          "",
          "[Removed Lines]",
          "1663:   const auto& route_name = route->routeEntry()->routeName();",
          "",
          "[Added Lines]",
          "1663:   const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()",
          "1664:                                                         : route->routeEntry()->routeName();",
          "",
          "---------------"
        ],
        "test/common/router/router_test.cc||test/common/router/router_test.cc": [
          "File: test/common/router/router_test.cc -> test/common/router/router_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: using testing::Eq;",
          "57: using testing::InSequence;",
          "58: using testing::Invoke;",
          "59: using testing::MockFunction;",
          "60: using testing::NiceMock;",
          "61: using testing::Property;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: using testing::InvokeWithoutArgs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3695:   encoder1.stream_.resetStream(Http::StreamResetReason::RemoteReset);",
          "",
          "[Removed Lines]",
          "3693:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(testing::InvokeWithoutArgs([] {",
          "3694:   }));",
          "",
          "[Added Lines]",
          "3694:   EXPECT_CALL(callbacks_, sendLocalReply(_, _, _, _, _)).WillOnce(InvokeWithoutArgs([] {}));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4654:                    .value());",
          "4655: }",
          "4657: TEST_F(RouterTest, InternalRedirectStripsFragment) {",
          "4658:   enableRedirects();",
          "4659:   default_request_headers_.setForwardedProto(\"http\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4657: TEST_F(RouterTest, HttpInternalRedirectMatchedToDirectResponseSucceeded) {",
          "4658:   NiceMock<MockDirectResponseEntry> direct_response;",
          "4659:   std::string route_name(\"route-test-name\");",
          "4660:   EXPECT_CALL(direct_response, routeName()).WillOnce(ReturnRef(route_name));",
          "4662:   enableRedirects();",
          "4663:   sendRequest();",
          "4664:   EXPECT_CALL(callbacks_, clearRouteCache()).WillOnce(InvokeWithoutArgs([&]() -> void {",
          "4666:     EXPECT_CALL(*callbacks_.route_, routeEntry()).WillRepeatedly(Return(nullptr));",
          "4667:     EXPECT_CALL(*callbacks_.route_, directResponseEntry()).WillRepeatedly(Return(&direct_response));",
          "4668:   }));",
          "4669:   EXPECT_CALL(callbacks_, recreateStream(_)).WillOnce(Return(true));",
          "4671:   response_decoder_->decodeHeaders(std::move(redirect_headers_), false);",
          "4672:   EXPECT_EQ(1U, cm_.thread_local_cluster_.cluster_.info_->stats_store_",
          "4673:                     .counter(\"upstream_internal_redirect_succeeded_total\")",
          "4674:                     .value());",
          "4677:   router_.onDestroy();",
          "4678:   EXPECT_EQ(1, callbacks_.streamInfo()",
          "4679:                    .filterState()",
          "4680:                    ->getDataMutable<StreamInfo::UInt32Accessor>(\"num_internal_redirects\")",
          "4681:                    .value());",
          "4682: }",
          "",
          "---------------"
        ],
        "test/integration/redirect_integration_test.cc||test/integration/redirect_integration_test.cc": [
          "File: test/integration/redirect_integration_test.cc -> test/integration/redirect_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         ->set_value(3);",
          "40:     config_helper_.addVirtualHost(handle_max_3_hop);",
          "42:     HttpProtocolIntegrationTest::initialize();",
          "43:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     auto handle_by_direct_response = config_helper_.createVirtualHost(\"handle.direct.response\");",
          "43:     handle_by_direct_response.mutable_routes(0)->set_name(\"direct_response\");",
          "44:     handle_by_direct_response.mutable_routes(0)->mutable_direct_response()->set_status(204);",
          "45:     handle_by_direct_response.mutable_routes(0)",
          "46:         ->mutable_direct_response()",
          "47:         ->mutable_body()",
          "48:         ->set_inline_string(EMPTY_STRING);",
          "49:     config_helper_.addVirtualHost(handle_by_direct_response);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:             response->headers().get(test_header_key_)[0]->value().getStringView());",
          "662: }",
          "664: INSTANTIATE_TEST_SUITE_P(Protocols, RedirectIntegrationTest,",
          "665:                          testing::ValuesIn(HttpProtocolIntegrationTest::getProtocolTestParams()),",
          "666:                          HttpProtocolIntegrationTest::protocolTestParamsToString);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "673: TEST_P(RedirectIntegrationTest, InternalRedirectHandledByDirectResponse) {",
          "674:   useAccessLog(\"%RESPONSE_FLAGS% %RESPONSE_CODE% %RESPONSE_CODE_DETAILS% %RESP(test-header)%\");",
          "676:   config_helper_.addConfigModifier(",
          "677:       [](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "678:              hcm) { hcm.set_via(\"via_value\"); });",
          "679:   initialize();",
          "681:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "683:   default_request_headers_.setHost(\"handle.internal.redirect\");",
          "684:   IntegrationStreamDecoderPtr response =",
          "685:       codec_client_->makeHeaderOnlyRequest(default_request_headers_);",
          "687:   waitForNextUpstreamRequest();",
          "689:   redirect_response_.setLocation(\"http://handle.direct.response/\");",
          "690:   upstream_request_->encodeHeaders(redirect_response_, true);",
          "692:   ASSERT_TRUE(response->waitForEndStream());",
          "693:   ASSERT_TRUE(response->complete());",
          "694:   EXPECT_EQ(\"204\", response->headers().getStatusValue());",
          "695:   EXPECT_EQ(1, test_server_->counter(\"cluster.cluster_0.upstream_internal_redirect_succeeded_total\")",
          "696:                    ->value());",
          "698:   EXPECT_EQ(0, test_server_->counter(\"http.config_test.downstream_rq_3xx\")->value());",
          "699:   EXPECT_EQ(1, test_server_->counter(\"http.config_test.downstream_rq_2xx\")->value());",
          "700:   EXPECT_THAT(waitForAccessLog(access_log_name_, 0),",
          "701:               HasSubstr(\"302 internal_redirect test-header-value\\n\"));",
          "703:   EXPECT_THAT(waitForAccessLog(access_log_name_, 1), HasSubstr(\"204 direct_response -\\n\"));",
          "704: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}