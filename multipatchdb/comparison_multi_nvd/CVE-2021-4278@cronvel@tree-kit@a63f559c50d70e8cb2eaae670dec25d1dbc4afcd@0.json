{
  "cve_id": "CVE-2021-4278",
  "cve_desc": "A vulnerability classified as problematic has been found in cronvel tree-kit up to 0.6.x. This affects an unknown part. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). Upgrading to version 0.7.0 is able to address this issue. The name of the patch is a63f559c50d70e8cb2eaae670dec25d1dbc4afcd. It is recommended to upgrade the affected component. The identifier VDB-216765 was assigned to this vulnerability.",
  "repo": "cronvel/tree-kit",
  "patch_hash": "a63f559c50d70e8cb2eaae670dec25d1dbc4afcd",
  "patch_info": {
    "commit_hash": "a63f559c50d70e8cb2eaae670dec25d1dbc4afcd",
    "repo": "cronvel/tree-kit",
    "commit_url": "https://github.com/cronvel/tree-kit/commit/a63f559c50d70e8cb2eaae670dec25d1dbc4afcd",
    "files": [
      "CHANGELOG",
      "browser/tree-kit.js",
      "browser/tree-kit.min.js",
      "package.json"
    ],
    "message": "BREAKING CHANGE -- .path()/.dotPath(): drop the function's subtree support, fix prototype pollution",
    "before_after_code_files": [
      "browser/tree-kit.js||browser/tree-kit.js",
      "browser/tree-kit.min.js||browser/tree-kit.min.js"
    ]
  },
  "patch_diff": {
    "browser/tree-kit.js||browser/tree-kit.js": [
      "File: browser/tree-kit.js -> browser/tree-kit.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "3:  Tree Kit",
      "7:  The MIT License (MIT)",
      "",
      "[Removed Lines]",
      "5:  Copyright (c) 2014 - 2019 C\u00e9dric Ronvel",
      "",
      "[Added Lines]",
      "5:  Copyright (c) 2014 - 2021 C\u00e9dric Ronvel",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: module.exports = tree ;",
      "38: tree.extend = require( './extend.js' ) ;",
      "39: tree.clone = require( './clone.js' ) ;",
      "40: tree.path = require( './path.js' ) ;",
      "44:  Tree Kit",
      "48:  The MIT License (MIT)",
      "",
      "[Removed Lines]",
      "34: var tree = {} ;",
      "42: },{\"./clone.js\":2,\"./extend.js\":3,\"./path.js\":4}],2:[function(require,module,exports){",
      "46:  Copyright (c) 2014 - 2019 C\u00e9dric Ronvel",
      "",
      "[Added Lines]",
      "34: const tree = {} ;",
      "42: tree.dotPath = require( './dotPath.js' ) ;",
      "45: },{\"./clone.js\":2,\"./dotPath.js\":3,\"./extend.js\":4,\"./path.js\":5}],2:[function(require,module,exports){",
      "49:  Copyright (c) 2014 - 2021 C\u00e9dric Ronvel",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "153:  Tree Kit",
      "157:  The MIT License (MIT)",
      "",
      "[Removed Lines]",
      "155:  Copyright (c) 2014 - 2019 C\u00e9dric Ronvel",
      "",
      "[Added Lines]",
      "158:  Copyright (c) 2014 - 2021 C\u00e9dric Ronvel",
      "160:  The MIT License (MIT)",
      "162:  Permission is hereby granted, free of charge, to any person obtaining a copy",
      "163:  of this software and associated documentation files (the \"Software\"), to deal",
      "164:  in the Software without restriction, including without limitation the rights",
      "165:  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "166:  copies of the Software, and to permit persons to whom the Software is",
      "167:  furnished to do so, subject to the following conditions:",
      "169:  The above copyright notice and this permission notice shall be included in all",
      "170:  copies or substantial portions of the Software.",
      "172:  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "173:  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "174:  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "175:  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "176:  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "177:  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "178:  SOFTWARE.",
      "181: \"use strict\" ;",
      "185: const dotPath = {} ;",
      "186: module.exports = dotPath ;",
      "190: const EMPTY_PATH = [] ;",
      "191: const PROTO_POLLUTION_MESSAGE = 'This would pollute prototype' ;",
      "195: function toPathArray( path ) {",
      "196:  if ( Array.isArray( path ) ) { return path ; }",
      "197:  else if ( ! path ) { return EMPTY_PATH ; }",
      "198:  else if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
      "200:  throw new TypeError( '[tree.dotPath]: the path argument should be a string or an array' ) ;",
      "201: }",
      "206: function walk( object , pathArray , maxOffset = 0 ) {",
      "207:  var i , iMax , key ,",
      "208:   pointer = object ;",
      "210:  for ( i = 0 , iMax = pathArray.length + maxOffset ; i < iMax ; i ++ ) {",
      "211:   key = pathArray[ i ] ;",
      "213:   if ( key === '__proto__' || typeof pointer === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "214:   if ( ! pointer || typeof pointer !== 'object' ) { return undefined ; }",
      "216:   pointer = pointer[ key ] ;",
      "217:  }",
      "219:  return pointer ;",
      "220: }",
      "227: function pave( object , pathArray ) {",
      "228:  var i , iMax , key ,",
      "229:   pointer = object ;",
      "231:  for ( i = 0 , iMax = pathArray.length - 1 ; i < iMax ; i ++ ) {",
      "232:   key = pathArray[ i ] ;",
      "234:   if ( key === '__proto__' || typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "235:   if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) { pointer[ key ] = {} ; }",
      "237:   pointer = pointer[ key ] ;",
      "238:  }",
      "240:  return pointer ;",
      "241: }",
      "245: dotPath.get = ( object , path ) => walk( object , toPathArray( path ) ) ;",
      "249: dotPath.set = ( object , path , value ) => {",
      "250:  if ( ! object || typeof object !== 'object' ) {",
      "252:   return undefined ;",
      "253:  }",
      "255:  var pathArray = toPathArray( path ) ,",
      "256:   key = pathArray[ pathArray.length - 1 ] ;",
      "258:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "260:  var pointer = pave( object , pathArray ) ;",
      "262:  pointer[ key ] = value ;",
      "264:  return value ;",
      "265: } ;",
      "269: dotPath.define = ( object , path , value ) => {",
      "270:  if ( ! object || typeof object !== 'object' ) {",
      "272:   return undefined ;",
      "273:  }",
      "275:  var pathArray = toPathArray( path ) ,",
      "276:   key = pathArray[ pathArray.length - 1 ] ;",
      "278:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "280:  var pointer = pave( object , pathArray ) ;",
      "282:  if ( ! ( key in pointer ) ) { pointer[ key ] = value ; }",
      "284:  return value ;",
      "285: } ;",
      "289: dotPath.inc = ( object , path , value ) => {",
      "290:  if ( ! object || typeof object !== 'object' ) {",
      "292:   return undefined ;",
      "293:  }",
      "295:  var pathArray = toPathArray( path ) ,",
      "296:   key = pathArray[ pathArray.length - 1 ] ;",
      "298:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "300:  var pointer = pave( object , pathArray ) ;",
      "302:  if ( typeof pointer[ key ] === 'number' ) { pointer[ key ] ++ ; }",
      "303:  else if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) { pointer[ key ] = 1 ; }",
      "305:  return value ;",
      "306: } ;",
      "310: dotPath.dec = ( object , path , value ) => {",
      "311:  if ( ! object || typeof object !== 'object' ) {",
      "313:   return undefined ;",
      "314:  }",
      "316:  var pathArray = toPathArray( path ) ,",
      "317:   key = pathArray[ pathArray.length - 1 ] ;",
      "319:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "321:  var pointer = pave( object , pathArray ) ;",
      "323:  if ( typeof pointer[ key ] === 'number' ) { pointer[ key ] -- ; }",
      "324:  else if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) { pointer[ key ] = -1 ; }",
      "326:  return value ;",
      "327: } ;",
      "331: dotPath.concat = ( object , path , value ) => {",
      "332:  if ( ! object || typeof object !== 'object' ) {",
      "334:   return undefined ;",
      "335:  }",
      "337:  var pathArray = toPathArray( path ) ,",
      "338:   key = pathArray[ pathArray.length - 1 ] ;",
      "340:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "342:  var pointer = pave( object , pathArray ) ;",
      "344:  if ( ! pointer[ key ] ) { pointer[ key ] = value ; }",
      "345:  else if ( Array.isArray( pointer[ key ] ) && Array.isArray( value ) ) {",
      "346:   pointer[ key ] = pointer[ key ].concat( value ) ;",
      "347:  }",
      "350:  return value ;",
      "351: } ;",
      "355: dotPath.insert = ( object , path , value ) => {",
      "356:  if ( ! object || typeof object !== 'object' ) {",
      "358:   return undefined ;",
      "359:  }",
      "361:  var pathArray = toPathArray( path ) ,",
      "362:   key = pathArray[ pathArray.length - 1 ] ;",
      "364:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "366:  var pointer = pave( object , pathArray ) ;",
      "368:  if ( ! pointer[ key ] ) { pointer[ key ] = value ; }",
      "369:  else if ( Array.isArray( pointer[ key ] ) && Array.isArray( value ) ) {",
      "370:   pointer[ key ] = value.concat( pointer[ key ] ) ;",
      "371:  }",
      "374:  return value ;",
      "375: } ;",
      "379: dotPath.delete = ( object , path ) => {",
      "380:  var pathArray = toPathArray( path ) ,",
      "381:   key = pathArray[ pathArray.length - 1 ] ;",
      "383:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "385:  var pointer = walk( object , pathArray , -1 ) ;",
      "387:  if ( ! pointer || typeof pointer !== 'object' ) { return false ; }",
      "389:  return delete pointer[ key ] ;",
      "390: } ;",
      "394: dotPath.autoPush = ( object , path , value ) => {",
      "395:  if ( ! object || typeof object !== 'object' ) {",
      "397:   return undefined ;",
      "398:  }",
      "400:  var pathArray = toPathArray( path ) ,",
      "401:   key = pathArray[ pathArray.length - 1 ] ;",
      "403:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "405:  var pointer = pave( object , pathArray ) ;",
      "407:  if ( pointer[ key ] === undefined ) { pointer[ key ] = value ; }",
      "408:  else if ( Array.isArray( pointer[ key ] ) ) { pointer[ key ].push( value ) ; }",
      "409:  else { pointer[ key ] = [ pointer[ key ] , value ] ; }",
      "411:  return pointer[ key ] ;",
      "412: } ;",
      "416: dotPath.append = ( object , path , value ) => {",
      "417:  if ( ! object || typeof object !== 'object' ) {",
      "419:   return undefined ;",
      "420:  }",
      "422:  var pathArray = toPathArray( path ) ,",
      "423:   key = pathArray[ pathArray.length - 1 ] ;",
      "425:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "427:  var pointer = pave( object , pathArray ) ;",
      "429:  if ( ! pointer[ key ] ) { pointer[ key ] = [ value ] ; }",
      "430:  else if ( Array.isArray( pointer[ key ] ) ) { pointer[ key ].push( value ) ; }",
      "433:  return pointer[ key ] ;",
      "434: } ;",
      "438: dotPath.prepend = ( object , path , value ) => {",
      "439:  if ( ! object || typeof object !== 'object' ) {",
      "441:   return undefined ;",
      "442:  }",
      "444:  var pathArray = toPathArray( path ) ,",
      "445:   key = pathArray[ pathArray.length - 1 ] ;",
      "447:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "449:  var pointer = pave( object , pathArray ) ;",
      "451:  if ( ! pointer[ key ] ) { pointer[ key ] = [ value ] ; }",
      "452:  else if ( Array.isArray( pointer[ key ] ) ) { pointer[ key ].unshift( value ) ; }",
      "455:  return pointer[ key ] ;",
      "456: } ;",
      "459: },{}],4:[function(require,module,exports){",
      "461:  Tree Kit",
      "463:  Copyright (c) 2014 - 2021 C\u00e9dric Ronvel",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "455: }",
      "460:  Tree Kit",
      "464:  The MIT License (MIT)",
      "",
      "[Removed Lines]",
      "458: },{}],4:[function(require,module,exports){",
      "462:  Copyright (c) 2014 - 2019 C\u00e9dric Ronvel",
      "",
      "[Added Lines]",
      "766: },{}],5:[function(require,module,exports){",
      "770:  Copyright (c) 2014 - 2021 C\u00e9dric Ronvel",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "490: module.exports = treePath ;",
      "495:  var i , parts , last , pointer , key , isArray = false , pathArrayMode = false , isGenericSet , canBeEmpty = true ;",
      "501:  if ( typeof path === 'string' ) {",
      "",
      "[Removed Lines]",
      "489: var treePath = {} ;",
      "494: treePath.op = function op( type , object , path , value ) {",
      "497:  if ( ! object || ( typeof object !== 'object' && typeof object !== 'function' ) ) {",
      "498:   return ;",
      "499:  }",
      "",
      "[Added Lines]",
      "797: const treePath = {} ;",
      "802: const PROTO_POLLUTION_MESSAGE = 'This would pollute prototype' ;",
      "806: treePath.op = function( type , object , path , value ) {",
      "809:  if ( ! object || typeof object !== 'object' ) { return ; }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "544:   if ( pathArrayMode ) {",
      "545:    if ( key === undefined ) {",
      "546:     key = parts[ i ] ;",
      "547:     continue ;",
      "548:    }",
      "551:     if ( ! isGenericSet ) { return undefined ; }",
      "552:     pointer[ key ] = {} ;",
      "553:    }",
      "555:    pointer = pointer[ key ] ;",
      "556:    key = parts[ i ] ;",
      "558:    continue ;",
      "559:   }",
      "560:   else if ( parts[ i ] === '.' ) {",
      "",
      "[Removed Lines]",
      "550:    if ( ! pointer[ key ] || ( typeof pointer[ key ] !== 'object' && typeof pointer[ key ] !== 'function' ) ) {",
      "",
      "[Added Lines]",
      "857:     if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "861:    if ( typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "862:    if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) {",
      "869:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "569:     key = '' ;",
      "570:    }",
      "573:     if ( ! isGenericSet ) { return undefined ; }",
      "574:     pointer[ key ] = {} ;",
      "575:    }",
      "",
      "[Removed Lines]",
      "572:    if ( ! pointer[ key ] || ( typeof pointer[ key ] !== 'object' && typeof pointer[ key ] !== 'function' ) ) {",
      "",
      "[Added Lines]",
      "884:    if ( typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "885:    if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "589:     continue ;",
      "590:    }",
      "592:    if ( ! pointer[ key ] || ! Array.isArray( pointer[ key ] ) ) {",
      "593:     if ( ! isGenericSet ) { return undefined ; }",
      "594:     pointer[ key ] = [] ;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "905:    if ( typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "607:   canBeEmpty = false ;",
      "611:   switch ( parts[ i ] ) {",
      "612:    case 'length' :",
      "614:     break ;",
      "",
      "[Removed Lines]",
      "609:   if ( ! isArray ) { key = parts[ i ] ; continue ; }",
      "613:     key = parts[ i ] ;",
      "",
      "[Added Lines]",
      "923:   if ( ! isArray ) {",
      "924:    key = parts[ i ] ;",
      "925:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
      "926:    continue ;",
      "927:   }",
      "931:     key = 'length' ;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "731:  Object.defineProperties( object , {",
      "732:   get: { value: treePath.op.bind( undefined , 'get' , object ) } ,",
      "733:   delete: { value: treePath.op.bind( undefined , 'delete' , object ) } ,",
      "",
      "[Removed Lines]",
      "730: treePath.upgrade = function upgrade( object ) {",
      "",
      "[Added Lines]",
      "1048: treePath.upgrade = function( object ) {",
      "",
      "---------------"
    ],
    "browser/tree-kit.min.js||browser/tree-kit.min.js": [
      "File: browser/tree-kit.min.js -> browser/tree-kit.min.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: (function(e){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=e()}else if(typeof define===\"function\"&&define.amd){define([],e)}else{var t;if(typeof window!==\"undefined\"){t=window}else if(typeof global!==\"undefined\"){t=global}else if(typeof self!==\"undefined\"){t=self}else{t=this}t.treeKit=e()}})(function(){var e,t,n;return function(){function e(t,n,r){function i(o,u){if(!n[o]){if(!t[o]){var s=\"function\"==typeof require&&require;if(!u&&s)return s(o,!0);if(f)return f(o,!0);var a=new Error(\"Cannot find module '\"+o+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[o]={exports:{}};t[o][0].call(c.exports,function(e){var n=t[o][1][e];return i(n||e)},c,c.exports,e,t,n,r)}return n[o].exports}for(var f=\"function\"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}return e}()({1:[function(e,t,n){\"use strict\";var r={};t.exports=r;r.extend=e(\"./extend.js\");r.clone=e(\"./clone.js\");r.path=e(\"./path.js\")},{\"./clone.js\":2,\"./extend.js\":3,\"./path.js\":4}],2:[function(e,t,n){\"use strict\";function r(e,t){var n=Object.getPrototypeOf(e);if(r.opaque.has(n)){return r.opaque.get(n)(e)}var i,f,o,u,s,a,c=[{source:e,target:Array.isArray(e)?[]:Object.create(n)}],p=c[0].target,d=new Map;d.set(e,p);while(u=c.shift()){o=Object.getOwnPropertyNames(u.source);for(i=0;i<o.length;i++){f=Object.getOwnPropertyDescriptor(u.source,o[i]);if(!f.value||typeof f.value!==\"object\"){Object.defineProperty(u.target,o[i],f);continue}s=f.value;if(t){if(d.has(s)){f.value=d.get(s);Object.defineProperty(u.target,o[i],f);continue}}a=Object.getPrototypeOf(f.value);if(r.opaque.has(a)){f.value=r.opaque.get(a)(f.value);Object.defineProperty(u.target,o[i],f);continue}f.value=Array.isArray(s)?[]:Object.create(a);if(t){d.set(s,f.value)}Object.defineProperty(u.target,o[i],f);c.push({source:s,target:f.value})}}return p}t.exports=r;r.opaque=new Map;r.opaque.set(Date.prototype,e=>new Date(e))},{}],3:[function(e,t,n){\"use strict\";function r(e,t,...n){var r,f,o=false,u=n.length;if(!u){return t}if(!e||typeof e!==\"object\"){e={}}var s={depth:0,prefix:\"\"};if(e.deep){if(Array.isArray(e.deep)){e.deep=new Set(e.deep)}else if(!(e.deep instanceof Set)){e.deep=true}}if(e.immutables){if(Array.isArray(e.immutables)){e.immutables=new Set(e.immutables)}else if(!(e.immutables instanceof Set)){delete e.immutables}}if(!e.maxDepth&&e.deep&&!e.circular){e.maxDepth=100}if(e.deepFunc){e.deep=true}if(e.flat){e.deep=true;e.proto=false;e.inherit=false;e.unflat=false;if(typeof e.flat!==\"string\"){e.flat=\".\"}}if(e.unflat){e.deep=false;e.proto=false;e.inherit=false;e.flat=false;if(typeof e.unflat!==\"string\"){e.unflat=\".\"}}if(e.inherit){e.own=true;e.proto=false}else if(e.proto){e.own=true}if(!t||typeof t!==\"object\"&&typeof t!==\"function\"){o=true}if(!e.skipRoot&&(e.inherit||e.proto)){for(r=u-1;r>=0;r--){f=n[r];if(f&&(typeof f===\"object\"||typeof f===\"function\")){if(e.inherit){if(o){t=Object.create(f)}else{Object.setPrototypeOf(t,f)}}else if(e.proto){if(o){t=Object.create(Object.getPrototypeOf(f))}else{Object.setPrototypeOf(t,Object.getPrototypeOf(f))}}break}}}else if(o){t={}}s.references={sources:[],targets:[]};for(r=0;r<u;r++){f=n[r];if(!f||typeof f!==\"object\"&&typeof f!==\"function\"){continue}i(s,e,t,f)}return t}t.exports=r;function i(e,t,n,r){var f,o,u,s,a,c,p,d,l,b,y,h=-1;if(t.maxDepth&&e.depth>t.maxDepth){throw new Error(\"[tree] extend(): max depth reached(\"+t.maxDepth+\")\")}if(t.circular){e.references.sources.push(r);e.references.targets.push(n)}if(t.own){if(t.nonEnum){u=Object.getOwnPropertyNames(r)}else{u=Object.keys(r)}}else{u=r}for(s in u){if(t.own){s=u[s]}if(s===\"__proto__\"){continue}if(t.descriptor){d=Object.getOwnPropertyDescriptor(r,s);a=d.value}else{a=r[s]}b=n;l=e.prefix+s;if(t.nofunc&&typeof a===\"function\"){continue}if(t.unflat&&e.depth===0){y=s.split(t.unflat);o=y.length-1;if(o){for(f=0;f<o;f++){if(!b[y[f]]||typeof b[y[f]]!==\"object\"&&typeof b[y[f]]!==\"function\"){b[y[f]]={}}b=b[y[f]]}l=e.prefix+y[o]}}if(t.deep&&a&&(typeof a===\"object\"||t.deepFunc&&typeof a===\"function\")&&(!t.descriptor||!d.get)&&((c=Object.getPrototypeOf(a))||true)&&(!(t.deep instanceof Set)||t.deep.has(c))&&(!t.immutables||!t.immutables.has(c))){if(t.circular){h=e.references.sources.indexOf(a)}if(t.flat){if(h>=0){continue}i({depth:e.depth+1,prefix:e.prefix+s+t.flat,references:e.references},t,b,a)}else{if(h>=0){if(t.descriptor){Object.defineProperty(b,l,{value:e.references.targets[h],enumerable:d.enumerable,writable:d.writable,configurable:d.configurable})}else{b[l]=e.references.targets[h]}continue}if(!b[l]||!Object.prototype.hasOwnProperty.call(b,l)||typeof b[l]!==\"object\"&&typeof b[l]!==\"function\"){if(Array.isArray(a)){p=[]}else if(t.proto){p=Object.create(c)}else if(t.inherit){p=Object.create(a)}else{p={}}if(t.descriptor){Object.defineProperty(b,l,{value:p,enumerable:d.enumerable,writable:d.writable,configurable:d.configurable})}else{b[l]=p}}else if(t.proto&&Object.getPrototypeOf(b[l])!==c){Object.setPrototypeOf(b[l],c)}else if(t.inherit&&Object.getPrototypeOf(b[l])!==a){Object.setPrototypeOf(b[l],a)}if(t.circular){e.references.sources.push(a);e.references.targets.push(b[l])}i({depth:e.depth+1,prefix:\"\",references:e.references},t,b[l],a)}}else if(t.preserve&&b[l]!==undefined){continue}else if(!t.inherit){if(t.descriptor){Object.defineProperty(b,l,d)}else{b[l]=a}}if(t.move){delete r[s]}}}},{}],4:[function(e,t,n){\"use strict\";var r={};t.exports=r;r.op=function e(t,n,r,i){var f,o,u,s,a,c=false,p=false,d,l=true;if(!n||typeof n!==\"object\"&&typeof n!==\"function\"){return}if(typeof r===\"string\"){if(r){o=r.match(/([.#[\\]]|[^.#[\\]]+)/g)}else{o=[\"\"]}if(o[0]===\".\"){o.unshift(\"\")}if(o[o.length-1]===\".\"){o.push(\"\")}}else if(Array.isArray(r)){o=r;p=true}else{throw new TypeError(\"[tree.path] .\"+t+\"(): the path argument should be a string or an array\")}switch(t){case\"get\":case\"delete\":d=false;break;case\"set\":case\"define\":case\"inc\":case\"dec\":case\"append\":case\"prepend\":case\"concat\":case\"insert\":case\"autoPush\":d=true;break;default:throw new TypeError(\"[tree.path] .op(): wrong type of operation '\"+t+\"'\")}s=n;u=o.length-1;for(f=0;f<=u;f++){if(p){if(a===undefined){a=o[f];continue}if(!s[a]||typeof s[a]!==\"object\"&&typeof s[a]!==\"function\"){if(!d){return undefined}s[a]={}}s=s[a];a=o[f];continue}else if(o[f]===\".\"){c=false;if(a===undefined){if(!l){l=true;continue}a=\"\"}if(!s[a]||typeof s[a]!==\"object\"&&typeof s[a]!==\"function\"){if(!d){return undefined}s[a]={}}s=s[a];l=true;continue}else if(o[f]===\"#\"||o[f]===\"[\"){c=true;l=false;if(a===undefined){if(!Array.isArray(s)){return undefined}continue}if(!s[a]||!Array.isArray(s[a])){if(!d){return undefined}s[a]=[]}s=s[a];continue}else if(o[f]===\"]\"){l=false;continue}l=false;if(!c){a=o[f];continue}switch(o[f]){case\"length\":a=o[f];break;case\"first\":a=0;break;case\"last\":a=s.length-1;if(a<0){a=0}break;case\"next\":if(!d){return undefined}a=s.length;break;case\"insert\":if(!d){return undefined}s.unshift(undefined);a=0;break;default:a=parseInt(o[f],10)}}switch(t){case\"get\":return s[a];case\"delete\":if(c&&typeof a===\"number\"){s.splice(a,1)}else{delete s[a]}return;case\"set\":s[a]=i;return s[a];case\"define\":if(!(a in s)){s[a]=i}return s[a];case\"inc\":if(typeof s[a]===\"number\"){s[a]++}else if(!s[a]||typeof s[a]!==\"object\"){s[a]=1}return s[a];case\"dec\":if(typeof s[a]===\"number\"){s[a]--}else if(!s[a]||typeof s[a]!==\"object\"){s[a]=-1}return s[a];case\"append\":if(!s[a]){s[a]=[i]}else if(Array.isArray(s[a])){s[a].push(i)}return s[a];case\"prepend\":if(!s[a]){s[a]=[i]}else if(Array.isArray(s[a])){s[a].unshift(i)}return s[a];case\"concat\":if(!s[a]){s[a]=i}else if(Array.isArray(s[a])&&Array.isArray(i)){s[a]=s[a].concat(i)}return s[a];case\"insert\":if(!s[a]){s[a]=i}else if(Array.isArray(s[a])&&Array.isArray(i)){s[a]=i.concat(s[a])}return s[a];case\"autoPush\":if(s[a]===undefined){s[a]=i}else if(Array.isArray(s[a])){s[a].push(i)}else{s[a]=[s[a],i]}return s[a]}};r.get=r.op.bind(undefined,\"get\");r.delete=r.op.bind(undefined,\"delete\");r.set=r.op.bind(undefined,\"set\");r.define=r.op.bind(undefined,\"define\");r.inc=r.op.bind(undefined,\"inc\");r.dec=r.op.bind(undefined,\"dec\");r.append=r.op.bind(undefined,\"append\");r.prepend=r.op.bind(undefined,\"prepend\");r.concat=r.op.bind(undefined,\"concat\");r.insert=r.op.bind(undefined,\"insert\");r.autoPush=r.op.bind(undefined,\"autoPush\");r.prototype={get:function(e){return r.get(this,e)},delete:function(e){return r.delete(this,e)},set:function(e,t){return r.set(this,e,t)},define:function(e,t){return r.define(this,e,t)},inc:function(e,t){return r.inc(this,e,t)},dec:function(e,t){return r.dec(this,e,t)},append:function(e,t){return r.append(this,e,t)},prepend:function(e,t){return r.prepend(this,e,t)},concat:function(e,t){return r.concat(this,e,t)},insert:function(e,t){return r.insert(this,e,t)},autoPush:function(e,t){return r.autoPush(this,e,t)}};r.upgrade=function e(t){Object.defineProperties(t,{get:{value:r.op.bind(undefined,\"get\",t)},delete:{value:r.op.bind(undefined,\"delete\",t)},set:{value:r.op.bind(undefined,\"set\",t)},define:{value:r.op.bind(undefined,\"define\",t)},inc:{value:r.op.bind(undefined,\"inc\",t)},dec:{value:r.op.bind(undefined,\"dec\",t)},append:{value:r.op.bind(undefined,\"append\",t)},prepend:{value:r.op.bind(undefined,\"prepend\",t)},concat:{value:r.op.bind(undefined,\"concat\",t)},insert:{value:r.op.bind(undefined,\"insert\",t)},autoPush:{value:r.op.bind(undefined,\"autoPush\",t)}})}},{}]},{},[1])(1)});",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a0838571f9206d60390844f8e457aab50c56f332",
      "candidate_info": {
        "commit_hash": "a0838571f9206d60390844f8e457aab50c56f332",
        "repo": "cronvel/tree-kit",
        "commit_url": "https://github.com/cronvel/tree-kit/commit/a0838571f9206d60390844f8e457aab50c56f332",
        "files": [
          "CHANGELOG",
          "browser/tree-kit.js",
          "browser/tree-kit.min.js",
          "package.json"
        ],
        "message": "dotPath: empty path part support",
        "before_after_code_files": [
          "browser/tree-kit.js||browser/tree-kit.js",
          "browser/tree-kit.min.js||browser/tree-kit.min.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "browser/tree-kit.js||browser/tree-kit.js",
            "browser/tree-kit.min.js||browser/tree-kit.min.js"
          ],
          "candidate": [
            "browser/tree-kit.js||browser/tree-kit.js",
            "browser/tree-kit.min.js||browser/tree-kit.min.js"
          ]
        }
      },
      "candidate_diff": {
        "browser/tree-kit.js||browser/tree-kit.js": [
          "File: browser/tree-kit.js -> browser/tree-kit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:  }",
          "206:  if ( ! path ) { return EMPTY_PATH ; }",
          "209:  throw new TypeError( '[tree.dotPath]: the path argument should be a string or an array' ) ;",
          "210: }",
          "",
          "[Removed Lines]",
          "207:  if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
          "",
          "[Added Lines]",
          "207:  if ( typeof path === 'string' ) {",
          "208:   return path[ path.length - 1 ] === '.' ? path.slice( 0 , -1 ).split( '.' ) : path.split( '.' ) ;",
          "209:  }",
          "",
          "---------------"
        ],
        "browser/tree-kit.min.js||browser/tree-kit.min.js": [
          "File: browser/tree-kit.min.js -> browser/tree-kit.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: (function(e){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=e()}else if(typeof define===\"function\"&&define.amd){define([],e)}else{var t;if(typeof window!==\"undefined\"){t=window}else if(typeof global!==\"undefined\"){t=global}else if(typeof self!==\"undefined\"){t=self}else{t=this}t.treeKit=e()}})(function(){var e,t,r;return function(){function e(t,r,n){function i(f,u){if(!r[f]){if(!t[f]){var a=\"function\"==typeof require&&require;if(!u&&a)return a(f,!0);if(o)return o(f,!0);var s=new Error(\"Cannot find module '\"+f+\"'\");throw s.code=\"MODULE_NOT_FOUND\",s}var c=r[f]={exports:{}};t[f][0].call(c.exports,function(e){var r=t[f][1][e];return i(r||e)},c,c.exports,e,t,r,n)}return r[f].exports}for(var o=\"function\"==typeof require&&require,f=0;f<n.length;f++)i(n[f]);return i}return e}()({1:[function(e,t,r){\"use strict\";const n={};t.exports=n;n.extend=e(\"./extend.js\");n.clone=e(\"./clone.js\");n.path=e(\"./path.js\");n.dotPath=e(\"./dotPath.js\")},{\"./clone.js\":2,\"./dotPath.js\":3,\"./extend.js\":4,\"./path.js\":5}],2:[function(e,t,r){\"use strict\";function n(e,t){var r=Object.getPrototypeOf(e);if(n.opaque.has(r)){return n.opaque.get(r)(e)}var i,o,f,u,a,s,c=[{source:e,target:Array.isArray(e)?[]:Object.create(r)}],p=c[0].target,d=new Map;d.set(e,p);while(u=c.shift()){f=Object.getOwnPropertyNames(u.source);for(i=0;i<f.length;i++){o=Object.getOwnPropertyDescriptor(u.source,f[i]);if(!o.value||typeof o.value!==\"object\"){Object.defineProperty(u.target,f[i],o);continue}a=o.value;if(t){if(d.has(a)){o.value=d.get(a);Object.defineProperty(u.target,f[i],o);continue}}s=Object.getPrototypeOf(o.value);if(n.opaque.has(s)){o.value=n.opaque.get(s)(o.value);Object.defineProperty(u.target,f[i],o);continue}o.value=Array.isArray(a)?[]:Object.create(s);if(t){d.set(a,o.value)}Object.defineProperty(u.target,f[i],o);c.push({source:a,target:o.value})}}return p}t.exports=n;n.opaque=new Map;n.opaque.set(Date.prototype,e=>new Date(e))},{}],3:[function(e,t,r){\"use strict\";const n={};t.exports=n;const i=[];const o=\"This would cause prototype pollution\";function f(e){if(Array.isArray(e)){return e}if(!e){return i}if(typeof e===\"string\"){return e.split(\".\")}throw new TypeError(\"[tree.dotPath]: the path argument should be a string or an array\")}function u(e,t,r=0){var n,i,f,u=e;for(n=0,i=t.length+r;n<i;n++){f=t[n];if(typeof f===\"object\"||f===\"__proto__\"||typeof u===\"function\"){throw new Error(o)}if(!u||typeof u!==\"object\"){return undefined}u=u[f]}return u}function a(e,t){var r,n,i,f=e;for(r=0,n=t.length-1;r<n;r++){i=t[r];if(typeof i===\"object\"||i===\"__proto__\"||typeof f[i]===\"function\"){throw new Error(o)}if(!f[i]||typeof f[i]!==\"object\"){f[i]={}}f=f[i]}return f}n.get=((e,t)=>u(e,f(t)));n.set=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);u[i]=r;return r});n.define=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!(i in u)){u[i]=r}return r});n.inc=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(typeof u[i]===\"number\"){u[i]++}else if(!u[i]||typeof u[i]!==\"object\"){u[i]=1}return r});n.dec=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(typeof u[i]===\"number\"){u[i]--}else if(!u[i]||typeof u[i]!==\"object\"){u[i]=-1}return r});n.concat=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=r}else if(Array.isArray(u[i])&&Array.isArray(r)){u[i]=u[i].concat(r)}return r});n.insert=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=r}else if(Array.isArray(u[i])&&Array.isArray(r)){u[i]=r.concat(u[i])}return r});n.delete=((e,t)=>{var r=f(t),n=r[r.length-1];if(typeof n===\"object\"||n===\"__proto__\"){throw new Error(o)}var i=u(e,r,-1);if(!i||typeof i!==\"object\"){return false}return delete i[n]});n.autoPush=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(u[i]===undefined){u[i]=r}else if(Array.isArray(u[i])){u[i].push(r)}else{u[i]=[u[i],r]}return u[i]});n.append=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=[r]}else if(Array.isArray(u[i])){u[i].push(r)}return u[i]});n.prepend=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(typeof i===\"object\"||i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=[r]}else if(Array.isArray(u[i])){u[i].unshift(r)}return u[i]})},{}],4:[function(e,t,r){\"use strict\";function n(e,t,...r){var n,o,f=false,u=r.length;if(!u){return t}if(!e||typeof e!==\"object\"){e={}}var a={depth:0,prefix:\"\"};if(e.deep){if(Array.isArray(e.deep)){e.deep=new Set(e.deep)}else if(!(e.deep instanceof Set)){e.deep=true}}if(e.immutables){if(Array.isArray(e.immutables)){e.immutables=new Set(e.immutables)}else if(!(e.immutables instanceof Set)){delete e.immutables}}if(!e.maxDepth&&e.deep&&!e.circular){e.maxDepth=100}if(e.deepFunc){e.deep=true}if(e.flat){e.deep=true;e.proto=false;e.inherit=false;e.unflat=false;if(typeof e.flat!==\"string\"){e.flat=\".\"}}if(e.unflat){e.deep=false;e.proto=false;e.inherit=false;e.flat=false;if(typeof e.unflat!==\"string\"){e.unflat=\".\"}}if(e.inherit){e.own=true;e.proto=false}else if(e.proto){e.own=true}if(!t||typeof t!==\"object\"&&typeof t!==\"function\"){f=true}if(!e.skipRoot&&(e.inherit||e.proto)){for(n=u-1;n>=0;n--){o=r[n];if(o&&(typeof o===\"object\"||typeof o===\"function\")){if(e.inherit){if(f){t=Object.create(o)}else{Object.setPrototypeOf(t,o)}}else if(e.proto){if(f){t=Object.create(Object.getPrototypeOf(o))}else{Object.setPrototypeOf(t,Object.getPrototypeOf(o))}}break}}}else if(f){t={}}a.references={sources:[],targets:[]};for(n=0;n<u;n++){o=r[n];if(!o||typeof o!==\"object\"&&typeof o!==\"function\"){continue}i(a,e,t,o,e.mask<=n+1)}return t}t.exports=n;function i(e,t,r,n,o){var f,u,a,s,c,p,d,l,y,b,h,j,w,g=-1;if(t.maxDepth&&e.depth>t.maxDepth){throw new Error(\"[tree] extend(): max depth reached(\"+t.maxDepth+\")\")}if(t.circular){e.references.sources.push(n);e.references.targets.push(r)}if(t.own){if(t.nonEnum){s=Object.getOwnPropertyNames(n)}else{s=Object.keys(n)}}else{s=n}for(c in s){if(t.own){c=s[c]}if(c===\"__proto__\"){continue}if(t.descriptor){y=Object.getOwnPropertyDescriptor(n,c);p=y.value}else{p=n[c]}h=r;b=e.prefix+c;if(t.nofunc&&typeof p===\"function\"){continue}if(t.unflat&&e.depth===0){a=c.split(t.unflat);u=a.length-1;if(u){for(f=0;f<u;f++){if(!h[a[f]]||typeof h[a[f]]!==\"object\"&&typeof h[a[f]]!==\"function\"){h[a[f]]={}}h=h[a[f]]}b=e.prefix+a[u]}}j=h[b];w=j&&(typeof j===\"object\"||typeof j===\"function\");d=p&&(typeof p===\"object\"||typeof p===\"function\");if(t.deep&&p&&(typeof p===\"object\"||t.deepFunc&&typeof p===\"function\")&&(!t.descriptor||!y.get)&&((l=Object.getPrototypeOf(p))||true)&&(!(t.deep instanceof Set)||t.deep.has(l))&&(!t.immutables||!t.immutables.has(l))&&(!t.preserve||w)&&(!o||w)){if(t.circular){g=e.references.sources.indexOf(p)}if(t.flat){if(g>=0){continue}i({depth:e.depth+1,prefix:e.prefix+c+t.flat,references:e.references},t,h,p,o)}else{if(g>=0){j=e.references.targets[g];if(t.descriptor){Object.defineProperty(h,b,{value:j,enumerable:y.enumerable,writable:y.writable,configurable:y.configurable})}else{h[b]=j}continue}if(!w||!Object.prototype.hasOwnProperty.call(h,b)){if(Array.isArray(p)){j=[]}else if(t.proto){j=Object.create(l)}else if(t.inherit){j=Object.create(p)}else{j={}}if(t.descriptor){Object.defineProperty(h,b,{value:j,enumerable:y.enumerable,writable:y.writable,configurable:y.configurable})}else{h[b]=j}}else if(t.proto&&Object.getPrototypeOf(j)!==l){Object.setPrototypeOf(j,l)}else if(t.inherit&&Object.getPrototypeOf(j)!==p){Object.setPrototypeOf(j,p)}if(t.circular){e.references.sources.push(p);e.references.targets.push(j)}i({depth:e.depth+1,prefix:\"\",references:e.references},t,j,p,o)}}else if(o&&(j===undefined||w||d)){continue}else if(t.preserve&&j!==undefined){continue}else if(!t.inherit){if(t.descriptor){Object.defineProperty(h,b,y)}else{h[b]=j=p}}if(t.move){delete n[c]}}}},{}],5:[function(e,t,r){\"use strict\";const n={};t.exports=n;const i=\"This would cause prototype pollution\";n.op=function(e,t,r,n){var o,f,u,a,s,c=false,p=false,d,l=true;if(!t||typeof t!==\"object\"){return}if(typeof r===\"string\"){if(r){f=r.match(/([.#[\\]]|[^.#[\\]]+)/g)}else{f=[\"\"]}if(f[0]===\".\"){f.unshift(\"\")}if(f[f.length-1]===\".\"){f.push(\"\")}}else if(Array.isArray(r)){f=r;p=true}else{throw new TypeError(\"[tree.path] .\"+e+\"(): the path argument should be a string or an array\")}switch(e){case\"get\":case\"delete\":d=false;break;case\"set\":case\"define\":case\"inc\":case\"dec\":case\"append\":case\"prepend\":case\"concat\":case\"insert\":case\"autoPush\":d=true;break;default:throw new TypeError(\"[tree.path] .op(): wrong type of operation '\"+e+\"'\")}a=t;u=f.length-1;for(o=0;o<=u;o++){if(p){if(s===undefined){s=f[o];if(typeof s===\"object\"||s===\"__proto__\"){throw new Error(i)}continue}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||typeof a[s]!==\"object\"){if(!d){return undefined}a[s]={}}a=a[s];s=f[o];if(typeof s===\"object\"||s===\"__proto__\"){throw new Error(i)}continue}else if(f[o]===\".\"){c=false;if(s===undefined){if(!l){l=true;continue}s=\"\"}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||typeof a[s]!==\"object\"){if(!d){return undefined}a[s]={}}a=a[s];l=true;continue}else if(f[o]===\"#\"||f[o]===\"[\"){c=true;l=false;if(s===undefined){if(!Array.isArray(a)){return undefined}continue}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||!Array.isArray(a[s])){if(!d){return undefined}a[s]=[]}a=a[s];continue}else if(f[o]===\"]\"){l=false;continue}l=false;if(!c){s=f[o];if(typeof s===\"object\"||s===\"__proto__\"){throw new Error(i)}continue}switch(f[o]){case\"length\":s=\"length\";break;case\"first\":s=0;break;case\"last\":s=a.length-1;if(s<0){s=0}break;case\"next\":if(!d){return undefined}s=a.length;break;case\"insert\":if(!d){return undefined}a.unshift(undefined);s=0;break;default:s=parseInt(f[o],10)}}switch(e){case\"get\":return a[s];case\"delete\":if(c&&typeof s===\"number\"){a.splice(s,1)}else{delete a[s]}return;case\"set\":a[s]=n;return a[s];case\"define\":if(!(s in a)){a[s]=n}return a[s];case\"inc\":if(typeof a[s]===\"number\"){a[s]++}else if(!a[s]||typeof a[s]!==\"object\"){a[s]=1}return a[s];case\"dec\":if(typeof a[s]===\"number\"){a[s]--}else if(!a[s]||typeof a[s]!==\"object\"){a[s]=-1}return a[s];case\"append\":if(!a[s]){a[s]=[n]}else if(Array.isArray(a[s])){a[s].push(n)}return a[s];case\"prepend\":if(!a[s]){a[s]=[n]}else if(Array.isArray(a[s])){a[s].unshift(n)}return a[s];case\"concat\":if(!a[s]){a[s]=n}else if(Array.isArray(a[s])&&Array.isArray(n)){a[s]=a[s].concat(n)}return a[s];case\"insert\":if(!a[s]){a[s]=n}else if(Array.isArray(a[s])&&Array.isArray(n)){a[s]=n.concat(a[s])}return a[s];case\"autoPush\":if(a[s]===undefined){a[s]=n}else if(Array.isArray(a[s])){a[s].push(n)}else{a[s]=[a[s],n]}return a[s]}};n.get=n.op.bind(undefined,\"get\");n.delete=n.op.bind(undefined,\"delete\");n.set=n.op.bind(undefined,\"set\");n.define=n.op.bind(undefined,\"define\");n.inc=n.op.bind(undefined,\"inc\");n.dec=n.op.bind(undefined,\"dec\");n.append=n.op.bind(undefined,\"append\");n.prepend=n.op.bind(undefined,\"prepend\");n.concat=n.op.bind(undefined,\"concat\");n.insert=n.op.bind(undefined,\"insert\");n.autoPush=n.op.bind(undefined,\"autoPush\");n.prototype={get:function(e){return n.get(this,e)},delete:function(e){return n.delete(this,e)},set:function(e,t){return n.set(this,e,t)},define:function(e,t){return n.define(this,e,t)},inc:function(e,t){return n.inc(this,e,t)},dec:function(e,t){return n.dec(this,e,t)},append:function(e,t){return n.append(this,e,t)},prepend:function(e,t){return n.prepend(this,e,t)},concat:function(e,t){return n.concat(this,e,t)},insert:function(e,t){return n.insert(this,e,t)},autoPush:function(e,t){return n.autoPush(this,e,t)}};n.upgrade=function(e){Object.defineProperties(e,{get:{value:n.op.bind(undefined,\"get\",e)},delete:{value:n.op.bind(undefined,\"delete\",e)},set:{value:n.op.bind(undefined,\"set\",e)},define:{value:n.op.bind(undefined,\"define\",e)},inc:{value:n.op.bind(undefined,\"inc\",e)},dec:{value:n.op.bind(undefined,\"dec\",e)},append:{value:n.op.bind(undefined,\"append\",e)},prepend:{value:n.op.bind(undefined,\"prepend\",e)},concat:{value:n.op.bind(undefined,\"concat\",e)},insert:{value:n.op.bind(undefined,\"insert\",e)},autoPush:{value:n.op.bind(undefined,\"autoPush\",e)}})}},{}]},{},[1])(1)});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9af686d739a57ec5a006b3f445e6108aa622205",
      "candidate_info": {
        "commit_hash": "b9af686d739a57ec5a006b3f445e6108aa622205",
        "repo": "cronvel/tree-kit",
        "commit_url": "https://github.com/cronvel/tree-kit/commit/b9af686d739a57ec5a006b3f445e6108aa622205",
        "files": [
          "CHANGELOG",
          "bench/path-vs-dotPath.js",
          "browser/tree-kit.js",
          "browser/tree-kit.min.js",
          "lib/dotPath.js",
          "lib/path.js",
          "package.json",
          "test/dotPath-test.js",
          "test/path-test.js"
        ],
        "message": "path/dotPath with path in array mode now checks that there is no object in the array",
        "before_after_code_files": [
          "bench/path-vs-dotPath.js||bench/path-vs-dotPath.js",
          "browser/tree-kit.js||browser/tree-kit.js",
          "browser/tree-kit.min.js||browser/tree-kit.min.js",
          "lib/dotPath.js||lib/dotPath.js",
          "lib/path.js||lib/path.js",
          "test/dotPath-test.js||test/dotPath-test.js",
          "test/path-test.js||test/path-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "browser/tree-kit.js||browser/tree-kit.js",
            "browser/tree-kit.min.js||browser/tree-kit.min.js"
          ],
          "candidate": [
            "browser/tree-kit.js||browser/tree-kit.js",
            "browser/tree-kit.min.js||browser/tree-kit.min.js"
          ]
        }
      },
      "candidate_diff": {
        "bench/path-vs-dotPath.js||bench/path-vs-dotPath.js": [
          "File: bench/path-vs-dotPath.js -> bench/path-vs-dotPath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   output = path.get( data , 'array.3.3.1' ) ;",
          "38:  } ) ;",
          "40:  competitor( 'dotPath.get()' , () => {",
          "41:   var output ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  competitor( 'path.get() with path-array' , () => {",
          "41:   var output ;",
          "43:   output = path.get( data , ['propertyA'] ) ;",
          "44:   output = path.get( data , ['object'] ) ;",
          "45:   output = path.get( data , ['object','propertyC'] ) ;",
          "46:   output = path.get( data , ['object','long','nested','path','to','a','value'] ) ;",
          "47:   output = path.get( data , ['array'] ) ;",
          "48:   output = path.get( data , ['array',0] ) ;",
          "49:   output = path.get( data , ['array',1] ) ;",
          "50:   output = path.get( data , ['array',3] ) ;",
          "51:   output = path.get( data , ['array',3,1] ) ;",
          "52:   output = path.get( data , ['array',3,3,1] ) ;",
          "53:  } ) ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   output = dotPath.get( data , 'array.3.1' ) ;",
          "52:   output = dotPath.get( data , 'array.3.3.1' ) ;",
          "53:  } ) ;",
          "54: } ) ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  competitor( 'dotPath.get() with path-array' , () => {",
          "71:   var output ;",
          "73:   output = dotPath.get( data , ['propertyA'] ) ;",
          "74:   output = dotPath.get( data , ['object'] ) ;",
          "75:   output = dotPath.get( data , ['object','propertyC'] ) ;",
          "76:   output = dotPath.get( data , ['object','long','nested','path','to','a','value'] ) ;",
          "77:   output = dotPath.get( data , ['array'] ) ;",
          "78:   output = dotPath.get( data , ['array',0] ) ;",
          "79:   output = dotPath.get( data , ['array',1] ) ;",
          "80:   output = dotPath.get( data , ['array',3] ) ;",
          "81:   output = dotPath.get( data , ['array',3,1] ) ;",
          "82:   output = dotPath.get( data , ['array',3,3,1] ) ;",
          "83:  } ) ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   output = path.get( data , 'array.3.3.3.0.0.0' ) ;",
          "74:  } ) ;",
          "76:  competitor( 'dotPath.get()' , () => {",
          "77:   var output ;",
          "78:   output = dotPath.get( data , 'object.long.nested.dotPath.to.a.value' ) ;",
          "79:   output = dotPath.get( data , 'array.3.3.3.0.0.0' ) ;",
          "80:  } ) ;",
          "81: } ) ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  competitor( 'path.get() with path-array' , () => {",
          "107:   var output ;",
          "108:   output = path.get( data , ['object','long','nested','path','to','a','value'] ) ;",
          "109:   output = path.get( data , ['array',3,3,3,0,0,0] ) ;",
          "110:  } ) ;",
          "118:  competitor( 'dotPath.get() with path-array' , () => {",
          "119:   var output ;",
          "120:   output = dotPath.get( data , ['object','long','nested','dotPath','to','a','value'] ) ;",
          "121:   output = dotPath.get( data , ['array',3,3,3,0,0,0] ) ;",
          "122:  } ) ;",
          "",
          "---------------"
        ],
        "browser/tree-kit.js||browser/tree-kit.js": [
          "File: browser/tree-kit.js -> browser/tree-kit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: const EMPTY_PATH = [] ;",
          "195: function toPathArray( path ) {",
          "200:  throw new TypeError( '[tree.dotPath]: the path argument should be a string or an array' ) ;",
          "201: }",
          "",
          "[Removed Lines]",
          "191: const PROTO_POLLUTION_MESSAGE = 'This would pollute prototype' ;",
          "196:  if ( Array.isArray( path ) ) { return path ; }",
          "197:  else if ( ! path ) { return EMPTY_PATH ; }",
          "198:  else if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
          "",
          "[Added Lines]",
          "191: const PROTO_POLLUTION_MESSAGE = 'This would cause prototype pollution' ;",
          "196:  if ( Array.isArray( path ) ) {",
          "198:   let i , iMax = path.length ;",
          "199:   for ( i = 0 ; i < iMax ; i ++ ) {",
          "200:    if ( typeof path[ i ] !== 'string' || typeof path[ i ] !== 'number' ) { path[ i ] = '' + path[ i ] ; }",
          "201:   }",
          "203:   return path ;",
          "204:  }",
          "206:  if ( ! path ) { return EMPTY_PATH ; }",
          "207:  if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "210:  for ( i = 0 , iMax = pathArray.length + maxOffset ; i < iMax ; i ++ ) {",
          "211:   key = pathArray[ i ] ;",
          "214:   if ( ! pointer || typeof pointer !== 'object' ) { return undefined ; }",
          "216:   pointer = pointer[ key ] ;",
          "",
          "[Removed Lines]",
          "213:   if ( key === '__proto__' || typeof pointer === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "222:   if ( typeof key === 'object' || key === '__proto__' || typeof pointer === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:  for ( i = 0 , iMax = pathArray.length - 1 ; i < iMax ; i ++ ) {",
          "232:   key = pathArray[ i ] ;",
          "235:   if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) { pointer[ key ] = {} ; }",
          "237:   pointer = pointer[ key ] ;",
          "",
          "[Removed Lines]",
          "234:   if ( key === '__proto__' || typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "243:   if ( typeof key === 'object' || key === '__proto__' || typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "255:  var pathArray = toPathArray( path ) ,",
          "256:   key = pathArray[ pathArray.length - 1 ] ;",
          "260:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "258:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "267:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:  var pathArray = toPathArray( path ) ,",
          "276:   key = pathArray[ pathArray.length - 1 ] ;",
          "280:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "278:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "287:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:  var pathArray = toPathArray( path ) ,",
          "296:   key = pathArray[ pathArray.length - 1 ] ;",
          "300:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "298:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "307:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:  var pathArray = toPathArray( path ) ,",
          "317:   key = pathArray[ pathArray.length - 1 ] ;",
          "321:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "319:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "328:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "337:  var pathArray = toPathArray( path ) ,",
          "338:   key = pathArray[ pathArray.length - 1 ] ;",
          "342:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "340:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "349:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "361:  var pathArray = toPathArray( path ) ,",
          "362:   key = pathArray[ pathArray.length - 1 ] ;",
          "366:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "364:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "373:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "380:  var pathArray = toPathArray( path ) ,",
          "381:   key = pathArray[ pathArray.length - 1 ] ;",
          "385:  var pointer = walk( object , pathArray , -1 ) ;",
          "",
          "[Removed Lines]",
          "383:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "392:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "400:  var pathArray = toPathArray( path ) ,",
          "401:   key = pathArray[ pathArray.length - 1 ] ;",
          "405:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "403:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "412:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "422:  var pathArray = toPathArray( path ) ,",
          "423:   key = pathArray[ pathArray.length - 1 ] ;",
          "427:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "425:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "434:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "444:  var pathArray = toPathArray( path ) ,",
          "445:   key = pathArray[ pathArray.length - 1 ] ;",
          "449:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "447:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "456:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "802: const PROTO_POLLUTION_MESSAGE = 'This would pollute prototype' ;",
          "",
          "[Added Lines]",
          "811: const PROTO_POLLUTION_MESSAGE = 'This would cause prototype pollution' ;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "819:  else if ( Array.isArray( path ) ) {",
          "820:   parts = path ;",
          "821:   pathArrayMode = true ;",
          "822:  }",
          "823:  else {",
          "824:   throw new TypeError( '[tree.path] .' + type + '(): the path argument should be a string or an array' ) ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "832:   for ( i = 0 ; i < parts.length ; i ++ ) {",
          "833:    if ( typeof parts[ i ] !== 'string' || typeof parts[ i ] !== 'number' ) { parts[ i ] = '' + parts[ i ] ; }",
          "834:   }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "854:   if ( pathArrayMode ) {",
          "855:    if ( key === undefined ) {",
          "856:     key = parts[ i ] ;",
          "858:     continue ;",
          "859:    }",
          "",
          "[Removed Lines]",
          "857:     if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "871:     if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "867:    pointer = pointer[ key ] ;",
          "868:    key = parts[ i ] ;",
          "870:    continue ;",
          "871:   }",
          "872:   else if ( parts[ i ] === '.' ) {",
          "",
          "[Removed Lines]",
          "869:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "883:    if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "923:   if ( ! isArray ) {",
          "924:    key = parts[ i ] ;",
          "926:    continue ;",
          "927:   }",
          "",
          "[Removed Lines]",
          "925:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "939:    if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------"
        ],
        "browser/tree-kit.min.js||browser/tree-kit.min.js": [
          "File: browser/tree-kit.min.js -> browser/tree-kit.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: (function(e){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=e()}else if(typeof define===\"function\"&&define.amd){define([],e)}else{var t;if(typeof window!==\"undefined\"){t=window}else if(typeof global!==\"undefined\"){t=global}else if(typeof self!==\"undefined\"){t=self}else{t=this}t.treeKit=e()}})(function(){var e,t,r;return function(){function e(t,r,n){function i(f,u){if(!r[f]){if(!t[f]){var a=\"function\"==typeof require&&require;if(!u&&a)return a(f,!0);if(o)return o(f,!0);var s=new Error(\"Cannot find module '\"+f+\"'\");throw s.code=\"MODULE_NOT_FOUND\",s}var c=r[f]={exports:{}};t[f][0].call(c.exports,function(e){var r=t[f][1][e];return i(r||e)},c,c.exports,e,t,r,n)}return r[f].exports}for(var o=\"function\"==typeof require&&require,f=0;f<n.length;f++)i(n[f]);return i}return e}()({1:[function(e,t,r){\"use strict\";const n={};t.exports=n;n.extend=e(\"./extend.js\");n.clone=e(\"./clone.js\");n.path=e(\"./path.js\");n.dotPath=e(\"./dotPath.js\")},{\"./clone.js\":2,\"./dotPath.js\":3,\"./extend.js\":4,\"./path.js\":5}],2:[function(e,t,r){\"use strict\";function n(e,t){var r=Object.getPrototypeOf(e);if(n.opaque.has(r)){return n.opaque.get(r)(e)}var i,o,f,u,a,s,c=[{source:e,target:Array.isArray(e)?[]:Object.create(r)}],p=c[0].target,d=new Map;d.set(e,p);while(u=c.shift()){f=Object.getOwnPropertyNames(u.source);for(i=0;i<f.length;i++){o=Object.getOwnPropertyDescriptor(u.source,f[i]);if(!o.value||typeof o.value!==\"object\"){Object.defineProperty(u.target,f[i],o);continue}a=o.value;if(t){if(d.has(a)){o.value=d.get(a);Object.defineProperty(u.target,f[i],o);continue}}s=Object.getPrototypeOf(o.value);if(n.opaque.has(s)){o.value=n.opaque.get(s)(o.value);Object.defineProperty(u.target,f[i],o);continue}o.value=Array.isArray(a)?[]:Object.create(s);if(t){d.set(a,o.value)}Object.defineProperty(u.target,f[i],o);c.push({source:a,target:o.value})}}return p}t.exports=n;n.opaque=new Map;n.opaque.set(Date.prototype,e=>new Date(e))},{}],3:[function(e,t,r){\"use strict\";const n={};t.exports=n;const i=[];const o=\"This would pollute prototype\";function f(e){if(Array.isArray(e)){return e}else if(!e){return i}else if(typeof e===\"string\"){return e.split(\".\")}throw new TypeError(\"[tree.dotPath]: the path argument should be a string or an array\")}function u(e,t,r=0){var n,i,f,u=e;for(n=0,i=t.length+r;n<i;n++){f=t[n];if(f===\"__proto__\"||typeof u===\"function\"){throw new Error(o)}if(!u||typeof u!==\"object\"){return undefined}u=u[f]}return u}function a(e,t){var r,n,i,f=e;for(r=0,n=t.length-1;r<n;r++){i=t[r];if(i===\"__proto__\"||typeof f[i]===\"function\"){throw new Error(o)}if(!f[i]||typeof f[i]!==\"object\"){f[i]={}}f=f[i]}return f}n.get=((e,t)=>u(e,f(t)));n.set=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);u[i]=r;return r});n.define=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!(i in u)){u[i]=r}return r});n.inc=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(typeof u[i]===\"number\"){u[i]++}else if(!u[i]||typeof u[i]!==\"object\"){u[i]=1}return r});n.dec=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(typeof u[i]===\"number\"){u[i]--}else if(!u[i]||typeof u[i]!==\"object\"){u[i]=-1}return r});n.concat=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=r}else if(Array.isArray(u[i])&&Array.isArray(r)){u[i]=u[i].concat(r)}return r});n.insert=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=r}else if(Array.isArray(u[i])&&Array.isArray(r)){u[i]=r.concat(u[i])}return r});n.delete=((e,t)=>{var r=f(t),n=r[r.length-1];if(n===\"__proto__\"){throw new Error(o)}var i=u(e,r,-1);if(!i||typeof i!==\"object\"){return false}return delete i[n]});n.autoPush=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(u[i]===undefined){u[i]=r}else if(Array.isArray(u[i])){u[i].push(r)}else{u[i]=[u[i],r]}return u[i]});n.append=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=[r]}else if(Array.isArray(u[i])){u[i].push(r)}return u[i]});n.prepend=((e,t,r)=>{if(!e||typeof e!==\"object\"){return undefined}var n=f(t),i=n[n.length-1];if(i===\"__proto__\"){throw new Error(o)}var u=a(e,n);if(!u[i]){u[i]=[r]}else if(Array.isArray(u[i])){u[i].unshift(r)}return u[i]})},{}],4:[function(e,t,r){\"use strict\";function n(e,t,...r){var n,o,f=false,u=r.length;if(!u){return t}if(!e||typeof e!==\"object\"){e={}}var a={depth:0,prefix:\"\"};if(e.deep){if(Array.isArray(e.deep)){e.deep=new Set(e.deep)}else if(!(e.deep instanceof Set)){e.deep=true}}if(e.immutables){if(Array.isArray(e.immutables)){e.immutables=new Set(e.immutables)}else if(!(e.immutables instanceof Set)){delete e.immutables}}if(!e.maxDepth&&e.deep&&!e.circular){e.maxDepth=100}if(e.deepFunc){e.deep=true}if(e.flat){e.deep=true;e.proto=false;e.inherit=false;e.unflat=false;if(typeof e.flat!==\"string\"){e.flat=\".\"}}if(e.unflat){e.deep=false;e.proto=false;e.inherit=false;e.flat=false;if(typeof e.unflat!==\"string\"){e.unflat=\".\"}}if(e.inherit){e.own=true;e.proto=false}else if(e.proto){e.own=true}if(!t||typeof t!==\"object\"&&typeof t!==\"function\"){f=true}if(!e.skipRoot&&(e.inherit||e.proto)){for(n=u-1;n>=0;n--){o=r[n];if(o&&(typeof o===\"object\"||typeof o===\"function\")){if(e.inherit){if(f){t=Object.create(o)}else{Object.setPrototypeOf(t,o)}}else if(e.proto){if(f){t=Object.create(Object.getPrototypeOf(o))}else{Object.setPrototypeOf(t,Object.getPrototypeOf(o))}}break}}}else if(f){t={}}a.references={sources:[],targets:[]};for(n=0;n<u;n++){o=r[n];if(!o||typeof o!==\"object\"&&typeof o!==\"function\"){continue}i(a,e,t,o)}return t}t.exports=n;function i(e,t,r,n){var o,f,u,a,s,c,p,d,l,y,h,b=-1;if(t.maxDepth&&e.depth>t.maxDepth){throw new Error(\"[tree] extend(): max depth reached(\"+t.maxDepth+\")\")}if(t.circular){e.references.sources.push(n);e.references.targets.push(r)}if(t.own){if(t.nonEnum){u=Object.getOwnPropertyNames(n)}else{u=Object.keys(n)}}else{u=n}for(a in u){if(t.own){a=u[a]}if(a===\"__proto__\"){continue}if(t.descriptor){d=Object.getOwnPropertyDescriptor(n,a);s=d.value}else{s=n[a]}y=r;l=e.prefix+a;if(t.nofunc&&typeof s===\"function\"){continue}if(t.unflat&&e.depth===0){h=a.split(t.unflat);f=h.length-1;if(f){for(o=0;o<f;o++){if(!y[h[o]]||typeof y[h[o]]!==\"object\"&&typeof y[h[o]]!==\"function\"){y[h[o]]={}}y=y[h[o]]}l=e.prefix+h[f]}}if(t.deep&&s&&(typeof s===\"object\"||t.deepFunc&&typeof s===\"function\")&&(!t.descriptor||!d.get)&&((c=Object.getPrototypeOf(s))||true)&&(!(t.deep instanceof Set)||t.deep.has(c))&&(!t.immutables||!t.immutables.has(c))){if(t.circular){b=e.references.sources.indexOf(s)}if(t.flat){if(b>=0){continue}i({depth:e.depth+1,prefix:e.prefix+a+t.flat,references:e.references},t,y,s)}else{if(b>=0){if(t.descriptor){Object.defineProperty(y,l,{value:e.references.targets[b],enumerable:d.enumerable,writable:d.writable,configurable:d.configurable})}else{y[l]=e.references.targets[b]}continue}if(!y[l]||!Object.prototype.hasOwnProperty.call(y,l)||typeof y[l]!==\"object\"&&typeof y[l]!==\"function\"){if(Array.isArray(s)){p=[]}else if(t.proto){p=Object.create(c)}else if(t.inherit){p=Object.create(s)}else{p={}}if(t.descriptor){Object.defineProperty(y,l,{value:p,enumerable:d.enumerable,writable:d.writable,configurable:d.configurable})}else{y[l]=p}}else if(t.proto&&Object.getPrototypeOf(y[l])!==c){Object.setPrototypeOf(y[l],c)}else if(t.inherit&&Object.getPrototypeOf(y[l])!==s){Object.setPrototypeOf(y[l],s)}if(t.circular){e.references.sources.push(s);e.references.targets.push(y[l])}i({depth:e.depth+1,prefix:\"\",references:e.references},t,y[l],s)}}else if(t.preserve&&y[l]!==undefined){continue}else if(!t.inherit){if(t.descriptor){Object.defineProperty(y,l,d)}else{y[l]=s}}if(t.move){delete n[a]}}}},{}],5:[function(e,t,r){\"use strict\";const n={};t.exports=n;const i=\"This would pollute prototype\";n.op=function(e,t,r,n){var o,f,u,a,s,c=false,p=false,d,l=true;if(!t||typeof t!==\"object\"){return}if(typeof r===\"string\"){if(r){f=r.match(/([.#[\\]]|[^.#[\\]]+)/g)}else{f=[\"\"]}if(f[0]===\".\"){f.unshift(\"\")}if(f[f.length-1]===\".\"){f.push(\"\")}}else if(Array.isArray(r)){f=r;p=true}else{throw new TypeError(\"[tree.path] .\"+e+\"(): the path argument should be a string or an array\")}switch(e){case\"get\":case\"delete\":d=false;break;case\"set\":case\"define\":case\"inc\":case\"dec\":case\"append\":case\"prepend\":case\"concat\":case\"insert\":case\"autoPush\":d=true;break;default:throw new TypeError(\"[tree.path] .op(): wrong type of operation '\"+e+\"'\")}a=t;u=f.length-1;for(o=0;o<=u;o++){if(p){if(s===undefined){s=f[o];if(s===\"__proto__\"){throw new Error(i)}continue}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||typeof a[s]!==\"object\"){if(!d){return undefined}a[s]={}}a=a[s];s=f[o];if(s===\"__proto__\"){throw new Error(i)}continue}else if(f[o]===\".\"){c=false;if(s===undefined){if(!l){l=true;continue}s=\"\"}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||typeof a[s]!==\"object\"){if(!d){return undefined}a[s]={}}a=a[s];l=true;continue}else if(f[o]===\"#\"||f[o]===\"[\"){c=true;l=false;if(s===undefined){if(!Array.isArray(a)){return undefined}continue}if(typeof a[s]===\"function\"){throw new Error(i)}if(!a[s]||!Array.isArray(a[s])){if(!d){return undefined}a[s]=[]}a=a[s];continue}else if(f[o]===\"]\"){l=false;continue}l=false;if(!c){s=f[o];if(s===\"__proto__\"){throw new Error(i)}continue}switch(f[o]){case\"length\":s=\"length\";break;case\"first\":s=0;break;case\"last\":s=a.length-1;if(s<0){s=0}break;case\"next\":if(!d){return undefined}s=a.length;break;case\"insert\":if(!d){return undefined}a.unshift(undefined);s=0;break;default:s=parseInt(f[o],10)}}switch(e){case\"get\":return a[s];case\"delete\":if(c&&typeof s===\"number\"){a.splice(s,1)}else{delete a[s]}return;case\"set\":a[s]=n;return a[s];case\"define\":if(!(s in a)){a[s]=n}return a[s];case\"inc\":if(typeof a[s]===\"number\"){a[s]++}else if(!a[s]||typeof a[s]!==\"object\"){a[s]=1}return a[s];case\"dec\":if(typeof a[s]===\"number\"){a[s]--}else if(!a[s]||typeof a[s]!==\"object\"){a[s]=-1}return a[s];case\"append\":if(!a[s]){a[s]=[n]}else if(Array.isArray(a[s])){a[s].push(n)}return a[s];case\"prepend\":if(!a[s]){a[s]=[n]}else if(Array.isArray(a[s])){a[s].unshift(n)}return a[s];case\"concat\":if(!a[s]){a[s]=n}else if(Array.isArray(a[s])&&Array.isArray(n)){a[s]=a[s].concat(n)}return a[s];case\"insert\":if(!a[s]){a[s]=n}else if(Array.isArray(a[s])&&Array.isArray(n)){a[s]=n.concat(a[s])}return a[s];case\"autoPush\":if(a[s]===undefined){a[s]=n}else if(Array.isArray(a[s])){a[s].push(n)}else{a[s]=[a[s],n]}return a[s]}};n.get=n.op.bind(undefined,\"get\");n.delete=n.op.bind(undefined,\"delete\");n.set=n.op.bind(undefined,\"set\");n.define=n.op.bind(undefined,\"define\");n.inc=n.op.bind(undefined,\"inc\");n.dec=n.op.bind(undefined,\"dec\");n.append=n.op.bind(undefined,\"append\");n.prepend=n.op.bind(undefined,\"prepend\");n.concat=n.op.bind(undefined,\"concat\");n.insert=n.op.bind(undefined,\"insert\");n.autoPush=n.op.bind(undefined,\"autoPush\");n.prototype={get:function(e){return n.get(this,e)},delete:function(e){return n.delete(this,e)},set:function(e,t){return n.set(this,e,t)},define:function(e,t){return n.define(this,e,t)},inc:function(e,t){return n.inc(this,e,t)},dec:function(e,t){return n.dec(this,e,t)},append:function(e,t){return n.append(this,e,t)},prepend:function(e,t){return n.prepend(this,e,t)},concat:function(e,t){return n.concat(this,e,t)},insert:function(e,t){return n.insert(this,e,t)},autoPush:function(e,t){return n.autoPush(this,e,t)}};n.upgrade=function(e){Object.defineProperties(e,{get:{value:n.op.bind(undefined,\"get\",e)},delete:{value:n.op.bind(undefined,\"delete\",e)},set:{value:n.op.bind(undefined,\"set\",e)},define:{value:n.op.bind(undefined,\"define\",e)},inc:{value:n.op.bind(undefined,\"inc\",e)},dec:{value:n.op.bind(undefined,\"dec\",e)},append:{value:n.op.bind(undefined,\"append\",e)},prepend:{value:n.op.bind(undefined,\"prepend\",e)},concat:{value:n.op.bind(undefined,\"concat\",e)},insert:{value:n.op.bind(undefined,\"insert\",e)},autoPush:{value:n.op.bind(undefined,\"autoPush\",e)}})}},{}]},{},[1])(1)});",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/dotPath.js||lib/dotPath.js": [
          "File: lib/dotPath.js -> lib/dotPath.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: function toPathArray( path ) {",
          "46:  throw new TypeError( '[tree.dotPath]: the path argument should be a string or an array' ) ;",
          "47: }",
          "",
          "[Removed Lines]",
          "42:  if ( Array.isArray( path ) ) { return path ; }",
          "43:  else if ( ! path ) { return EMPTY_PATH ; }",
          "44:  else if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
          "",
          "[Added Lines]",
          "42:  if ( Array.isArray( path ) ) {",
          "44:   let i , iMax = path.length ;",
          "45:   for ( i = 0 ; i < iMax ; i ++ ) {",
          "46:    if ( typeof path[ i ] !== 'string' || typeof path[ i ] !== 'number' ) { path[ i ] = '' + path[ i ] ; }",
          "47:   }",
          "49:   return path ;",
          "50:  }",
          "52:  if ( ! path ) { return EMPTY_PATH ; }",
          "53:  if ( typeof path === 'string' ) { return path.split( '.' ) ; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  for ( i = 0 , iMax = pathArray.length + maxOffset ; i < iMax ; i ++ ) {",
          "57:   key = pathArray[ i ] ;",
          "60:   if ( ! pointer || typeof pointer !== 'object' ) { return undefined ; }",
          "62:   pointer = pointer[ key ] ;",
          "",
          "[Removed Lines]",
          "59:   if ( key === '__proto__' || typeof pointer === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "68:   if ( typeof key === 'object' || key === '__proto__' || typeof pointer === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:  for ( i = 0 , iMax = pathArray.length - 1 ; i < iMax ; i ++ ) {",
          "78:   key = pathArray[ i ] ;",
          "81:   if ( ! pointer[ key ] || typeof pointer[ key ] !== 'object' ) { pointer[ key ] = {} ; }",
          "83:   pointer = pointer[ key ] ;",
          "",
          "[Removed Lines]",
          "80:   if ( key === '__proto__' || typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "89:   if ( typeof key === 'object' || key === '__proto__' || typeof pointer[ key ] === 'function' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:  var pathArray = toPathArray( path ) ,",
          "102:   key = pathArray[ pathArray.length - 1 ] ;",
          "106:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "104:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "113:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:  var pathArray = toPathArray( path ) ,",
          "122:   key = pathArray[ pathArray.length - 1 ] ;",
          "126:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "124:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "133:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:  var pathArray = toPathArray( path ) ,",
          "142:   key = pathArray[ pathArray.length - 1 ] ;",
          "146:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "144:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "153:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:  var pathArray = toPathArray( path ) ,",
          "163:   key = pathArray[ pathArray.length - 1 ] ;",
          "167:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "165:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "174:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "183:  var pathArray = toPathArray( path ) ,",
          "184:   key = pathArray[ pathArray.length - 1 ] ;",
          "188:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "186:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "195:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:  var pathArray = toPathArray( path ) ,",
          "208:   key = pathArray[ pathArray.length - 1 ] ;",
          "212:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "210:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "219:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "226:  var pathArray = toPathArray( path ) ,",
          "227:   key = pathArray[ pathArray.length - 1 ] ;",
          "231:  var pointer = walk( object , pathArray , -1 ) ;",
          "",
          "[Removed Lines]",
          "229:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "238:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "246:  var pathArray = toPathArray( path ) ,",
          "247:   key = pathArray[ pathArray.length - 1 ] ;",
          "251:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "249:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "258:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "268:  var pathArray = toPathArray( path ) ,",
          "269:   key = pathArray[ pathArray.length - 1 ] ;",
          "273:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "271:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "280:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "290:  var pathArray = toPathArray( path ) ,",
          "291:   key = pathArray[ pathArray.length - 1 ] ;",
          "295:  var pointer = pave( object , pathArray ) ;",
          "",
          "[Removed Lines]",
          "293:  if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "302:  if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------"
        ],
        "lib/path.js||lib/path.js": [
          "File: lib/path.js -> lib/path.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  else if ( Array.isArray( path ) ) {",
          "54:   parts = path ;",
          "55:   pathArrayMode = true ;",
          "56:  }",
          "57:  else {",
          "58:   throw new TypeError( '[tree.path] .' + type + '(): the path argument should be a string or an array' ) ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   for ( i = 0 ; i < parts.length ; i ++ ) {",
          "58:    if ( typeof parts[ i ] !== 'string' || typeof parts[ i ] !== 'number' ) { parts[ i ] = '' + parts[ i ] ; }",
          "59:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   if ( pathArrayMode ) {",
          "89:    if ( key === undefined ) {",
          "90:     key = parts[ i ] ;",
          "92:     continue ;",
          "93:    }",
          "",
          "[Removed Lines]",
          "91:     if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "96:     if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:    pointer = pointer[ key ] ;",
          "102:    key = parts[ i ] ;",
          "104:    continue ;",
          "105:   }",
          "106:   else if ( parts[ i ] === '.' ) {",
          "",
          "[Removed Lines]",
          "103:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "108:    if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:   if ( ! isArray ) {",
          "158:    key = parts[ i ] ;",
          "160:    continue ;",
          "161:   }",
          "",
          "[Removed Lines]",
          "159:    if ( key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "[Added Lines]",
          "164:    if ( typeof key === 'object' || key === '__proto__' ) { throw new Error( PROTO_POLLUTION_MESSAGE ) ; }",
          "",
          "---------------"
        ],
        "test/dotPath-test.js||test/dotPath-test.js": [
          "File: test/dotPath-test.js -> test/dotPath-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:   expect( () => path.delete( {} , '__proto__.hack' , 'hacked' ) ).to.throw() ;",
          "595:  } ) ;",
          "597:  it( \"Prototype pollution using .constructor\" , () => {",
          "598:   expect( () => path.set( {} , 'constructor.prototype' , 'hacked' ) ).to.throw() ;",
          "599:   expect( () => path.set( {} , 'constructor.prototype.hack' , 'hacked' ) ).to.throw() ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:   expect( () => path.delete( {} , '__proto__.hack' , 'hacked' ) ).to.throw() ;",
          "595:  } ) ;",
          "597:  it( \"Prototype pollution using a path array: [['__proto__']]\" , () => {",
          "598:   expect( () => path.set( {} , [['__proto__'],'hack'] , 'hacked' ) ).to.throw() ;",
          "599:   expect( Object.prototype.hack ).to.be.undefined() ;",
          "600:   expect( () => path.set( {} , '__proto__' , 'hacked' ) ).to.throw() ;",
          "",
          "---------------"
        ],
        "test/path-test.js||test/path-test.js": [
          "File: test/path-test.js -> test/path-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "948:   expect( () => path.delete( {} , '__proto__.hack' , 'hacked' ) ).to.throw() ;",
          "949:  } ) ;",
          "951:  it( \"Prototype pollution using .constructor\" , () => {",
          "952:   expect( () => path.set( {} , 'constructor.prototype' , 'hacked' ) ).to.throw() ;",
          "953:   expect( () => path.set( {} , 'constructor.prototype.hack' , 'hacked' ) ).to.throw() ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:   expect( () => path.delete( {} , '__proto__.hack' , 'hacked' ) ).to.throw() ;",
          "949:  } ) ;",
          "951:  it( \"Prototype pollution using a path array: [['__proto__']]\" , () => {",
          "952:   expect( () => path.set( {} , [['__proto__'],'hack'] , 'hacked' ) ).to.throw() ;",
          "953:   expect( Object.prototype.hack ).to.be.undefined() ;",
          "954:   expect( () => path.set( {} , '__proto__' , 'hacked' ) ).to.throw() ;",
          "955:   expect( () => path.set( {a:{}} , 'a.__proto__' , 'hacked' ) ).to.throw() ;",
          "956:   expect( () => path.delete( {} , '__proto__' , 'hacked' ) ).to.throw() ;",
          "",
          "---------------"
        ]
      }
    }
  ]
}