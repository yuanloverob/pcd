{
  "cve_id": "CVE-2024-29190",
  "cve_desc": "Mobile Security Framework (MobSF) is a pen-testing, malware analysis and security assessment framework capable of performing static and dynamic analysis. In version 3.9.5 Beta and prior, MobSF does not perform any input validation when extracting the hostnames in `android:host`, so requests can also be sent to local hostnames. This can lead to server-side request forgery. An attacker can cause the server to make a connection to internal-only services within the organization's infrastructure. Commit 5a8eeee73c5f504a6c3abdf2a139a13804efdb77 has a hotfix for this issue.\n",
  "repo": "MobSF/Mobile-Security-Framework-MobSF",
  "patch_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
  "patch_info": {
    "commit_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "repo": "MobSF/Mobile-Security-Framework-MobSF",
    "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "files": [
      ".github/workflows/docker-release.yml",
      ".github/workflows/docker-test.yml",
      "mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock",
      "pyproject.toml"
    ],
    "message": "HOTFIX:[SECURITY] Fix GHSA-wfgj-wrgh-h3r3, dep bump, docker build qa",
    "before_after_code_files": [
      "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
      "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: logger = logging.getLogger(__name__)",
      "14: BANNER = \"\"\"",
      "15:   __  __       _    ____  _____       _____ ___",
      "16:  |  \\/  | ___ | |__/ ___||  ___|_   _|___ // _ \\",
      "",
      "[Removed Lines]",
      "13: VERSION = '3.9.5'",
      "",
      "[Added Lines]",
      "13: VERSION = '3.9.6'",
      "",
      "---------------"
    ],
    "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py": [
      "File: mobsf/MobSF/utils.py -> mobsf/MobSF/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import string",
      "17: import subprocess",
      "18: import stat",
      "19: import sqlite3",
      "20: import unicodedata",
      "21: import threading",
      "22: from pathlib import Path",
      "23: from distutils.version import StrictVersion",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import socket",
      "23: from urllib.parse import urlparse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848: def id_generator(size=6, chars=string.ascii_uppercase + string.digits):",
      "849:     \"\"\"Generate random string.\"\"\"",
      "850:     return ''.join(random.choice(chars) for _ in range(size))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855: def valid_host(host):",
      "856:     \"\"\"Check if host is valid.\"\"\"",
      "857:     try:",
      "858:         prefixs = ('http://', 'https://')",
      "859:         if not host.startswith(prefixs):",
      "860:             host = f'http://{host}'",
      "861:         parsed = urlparse(host)",
      "862:         domain = parsed.netloc",
      "863:         path = parsed.path",
      "864:         if len(domain) == 0:",
      "865:             # No valid domain",
      "866:             return False",
      "867:         if len(path) > 0:",
      "868:             # Only host is allowed",
      "869:             return False",
      "870:         if ':' in domain:",
      "871:             # IPv6",
      "872:             return False",
      "873:         # Local network",
      "874:         invalid_prefix = (",
      "875:             '127.',",
      "876:             '192.',",
      "877:             '10.',",
      "878:             '172.',",
      "879:             '169',",
      "880:             '0.',",
      "881:             'localhost')",
      "882:         if domain.startswith(invalid_prefix):",
      "883:             return False",
      "884:         ip = socket.gethostbyname(domain)",
      "885:         if ip.startswith(invalid_prefix):",
      "886:             # Resolve dns to get IP",
      "887:             return False",
      "888:         return True",
      "889:     except Exception:",
      "890:         return False",
      "",
      "---------------"
    ],
    "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py": [
      "File: mobsf/StaticAnalyzer/views/android/manifest_analysis.py -> mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from concurrent.futures import ThreadPoolExecutor",
      "9: from mobsf.MobSF.utils import (",
      "10:     upstream_proxy,",
      "11: )",
      "12: from mobsf.StaticAnalyzer.views.android import (",
      "13:     android_manifest_desc,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:     is_number,",
      "12:     valid_host,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:                           and scheme in ('http', 'https')",
      "149:                           and host",
      "150:                           and host != '*'):",
      "152:                         shost = f'{scheme}://{host}'",
      "154:                             c_url = f'{shost}:{port}{well_known_path}'",
      "155:                         else:",
      "156:                             c_url = f'{shost}{well_known_path}'",
      "",
      "[Removed Lines]",
      "151:                         host = host.replace('*.', '')",
      "153:                         if port:",
      "",
      "[Added Lines]",
      "153:                         host = host.replace('*.', '').replace('#', '')",
      "154:                         if not valid_host(host):",
      "155:                             continue",
      "157:                         if port and is_number(port):",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: [[package]]",
      "102: name = \"apkinspector\"",
      "104: description = \"apkInspector is a tool designed to provide detailed insights into the zip structure of APK files, offering the capability to extract content and decode the AndroidManifest.xml file.\"",
      "105: optional = false",
      "106: python-versions = \">=3.5,<4.0\"",
      "107: files = [",
      "110: ]",
      "112: [[package]]",
      "",
      "[Removed Lines]",
      "103: version = \"1.2.1\"",
      "108:     {file = \"apkinspector-1.2.1-py3-none-any.whl\", hash = \"sha256:4736719884e92dfbe3203103ad46deb22b4683e208ae66972236a052c5d23e37\"},",
      "109:     {file = \"apkinspector-1.2.1.tar.gz\", hash = \"sha256:6c1fd678246760e75f8386e6f4d9686b640cc6bd88256f0865dfacbd49e8e0dd\"},",
      "",
      "[Added Lines]",
      "103: version = \"1.2.2\"",
      "108:     {file = \"apkinspector-1.2.2-py3-none-any.whl\", hash = \"sha256:ad55200bd72eb1edeeb5fb114e3bb576ec825feef54fb8727173f1f02fa12bb7\"},",
      "109:     {file = \"apkinspector-1.2.2.tar.gz\", hash = \"sha256:ea7e56090e95eb791b593e9beedf4f1056eb269c4483558e13d5d5ef4b479c60\"},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "951: [[package]]",
      "952: name = \"fonttools\"",
      "954: description = \"Tools to manipulate font files\"",
      "955: optional = false",
      "956: python-versions = \">=3.8\"",
      "957: files = [",
      "1000: ]",
      "1002: [package.extras]",
      "",
      "[Removed Lines]",
      "953: version = \"4.49.0\"",
      "958:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d970ecca0aac90d399e458f0b7a8a597e08f95de021f17785fb68e2dc0b99717\"},",
      "959:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac9a745b7609f489faa65e1dc842168c18530874a5f5b742ac3dd79e26bca8bc\"},",
      "960:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0ba0e00620ca28d4ca11fc700806fd69144b463aa3275e1b36e56c7c09915559\"},",
      "961:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cdee3ab220283057e7840d5fb768ad4c2ebe65bdba6f75d5d7bf47f4e0ed7d29\"},",
      "962:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:ce7033cb61f2bb65d8849658d3786188afd80f53dad8366a7232654804529532\"},",
      "963:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:07bc5ea02bb7bc3aa40a1eb0481ce20e8d9b9642a9536cde0218290dd6085828\"},",
      "964:     {file = \"fonttools-4.49.0-cp310-cp310-win32.whl\", hash = \"sha256:86eef6aab7fd7c6c8545f3ebd00fd1d6729ca1f63b0cb4d621bccb7d1d1c852b\"},",
      "965:     {file = \"fonttools-4.49.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:1fac1b7eebfce75ea663e860e7c5b4a8831b858c17acd68263bc156125201abf\"},",
      "966:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:edc0cce355984bb3c1d1e89d6a661934d39586bb32191ebff98c600f8957c63e\"},",
      "967:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:83a0d9336de2cba86d886507dd6e0153df333ac787377325a39a2797ec529814\"},",
      "968:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:36c8865bdb5cfeec88f5028e7e592370a0657b676c6f1d84a2108e0564f90e22\"},",
      "969:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:33037d9e56e2562c710c8954d0f20d25b8386b397250d65581e544edc9d6b942\"},",
      "970:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8fb022d799b96df3eaa27263e9eea306bd3d437cc9aa981820850281a02b6c9a\"},",
      "971:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:33c584c0ef7dc54f5dd4f84082eabd8d09d1871a3d8ca2986b0c0c98165f8e86\"},",
      "972:     {file = \"fonttools-4.49.0-cp311-cp311-win32.whl\", hash = \"sha256:cbe61b158deb09cffdd8540dc4a948d6e8f4d5b4f3bf5cd7db09bd6a61fee64e\"},",
      "973:     {file = \"fonttools-4.49.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fc11e5114f3f978d0cea7e9853627935b30d451742eeb4239a81a677bdee6bf6\"},",
      "974:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d647a0e697e5daa98c87993726da8281c7233d9d4ffe410812a4896c7c57c075\"},",
      "975:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:f3bbe672df03563d1f3a691ae531f2e31f84061724c319652039e5a70927167e\"},",
      "976:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bebd91041dda0d511b0d303180ed36e31f4f54b106b1259b69fade68413aa7ff\"},",
      "977:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4145f91531fd43c50f9eb893faa08399816bb0b13c425667c48475c9f3a2b9b5\"},",
      "978:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ea329dafb9670ffbdf4dbc3b0e5c264104abcd8441d56de77f06967f032943cb\"},",
      "979:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:c076a9e548521ecc13d944b1d261ff3d7825048c338722a4bd126d22316087b7\"},",
      "980:     {file = \"fonttools-4.49.0-cp312-cp312-win32.whl\", hash = \"sha256:b607ea1e96768d13be26d2b400d10d3ebd1456343eb5eaddd2f47d1c4bd00880\"},",
      "981:     {file = \"fonttools-4.49.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a974c49a981e187381b9cc2c07c6b902d0079b88ff01aed34695ec5360767034\"},",
      "982:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:b85ec0bdd7bdaa5c1946398cbb541e90a6dfc51df76dfa88e0aaa41b335940cb\"},",
      "983:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:af20acbe198a8a790618ee42db192eb128afcdcc4e96d99993aca0b60d1faeb4\"},",
      "984:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4d418b1fee41a1d14931f7ab4b92dc0bc323b490e41d7a333eec82c9f1780c75\"},",
      "985:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b44a52b8e6244b6548851b03b2b377a9702b88ddc21dcaf56a15a0393d425cb9\"},",
      "986:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:7c7125068e04a70739dad11857a4d47626f2b0bd54de39e8622e89701836eabd\"},",
      "987:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:29e89d0e1a7f18bc30f197cfadcbef5a13d99806447c7e245f5667579a808036\"},",
      "988:     {file = \"fonttools-4.49.0-cp38-cp38-win32.whl\", hash = \"sha256:9d95fa0d22bf4f12d2fb7b07a46070cdfc19ef5a7b1c98bc172bfab5bf0d6844\"},",
      "989:     {file = \"fonttools-4.49.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:768947008b4dc552d02772e5ebd49e71430a466e2373008ce905f953afea755a\"},",
      "990:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:08877e355d3dde1c11973bb58d4acad1981e6d1140711230a4bfb40b2b937ccc\"},",
      "991:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:fdb54b076f25d6b0f0298dc706acee5052de20c83530fa165b60d1f2e9cbe3cb\"},",
      "992:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0af65c720520710cc01c293f9c70bd69684365c6015cc3671db2b7d807fe51f2\"},",
      "993:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1f255ce8ed7556658f6d23f6afd22a6d9bbc3edb9b96c96682124dc487e1bf42\"},",
      "994:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d00af0884c0e65f60dfaf9340e26658836b935052fdd0439952ae42e44fdd2be\"},",
      "995:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:263832fae27481d48dfafcc43174644b6706639661e242902ceb30553557e16c\"},",
      "996:     {file = \"fonttools-4.49.0-cp39-cp39-win32.whl\", hash = \"sha256:0404faea044577a01bb82d47a8fa4bc7a54067fa7e324785dd65d200d6dd1133\"},",
      "997:     {file = \"fonttools-4.49.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:b050d362df50fc6e38ae3954d8c29bf2da52be384649ee8245fdb5186b620836\"},",
      "998:     {file = \"fonttools-4.49.0-py3-none-any.whl\", hash = \"sha256:af281525e5dd7fa0b39fb1667b8d5ca0e2a9079967e14c4bfe90fd1cd13e0f18\"},",
      "999:     {file = \"fonttools-4.49.0.tar.gz\", hash = \"sha256:ebf46e7f01b7af7861310417d7c49591a85d99146fc23a5ba82fdb28af156321\"},",
      "",
      "[Added Lines]",
      "953: version = \"4.50.0\"",
      "958:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:effd303fb422f8ce06543a36ca69148471144c534cc25f30e5be752bc4f46736\"},",
      "959:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:7913992ab836f621d06aabac118fc258b9947a775a607e1a737eb3a91c360335\"},",
      "960:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e0a1c5bd2f63da4043b63888534b52c5a1fd7ae187c8ffc64cbb7ae475b9dab\"},",
      "961:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d40fc98540fa5360e7ecf2c56ddf3c6e7dd04929543618fd7b5cc76e66390562\"},",
      "962:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9fff65fbb7afe137bac3113827855e0204482727bddd00a806034ab0d3951d0d\"},",
      "963:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b1aeae3dd2ee719074a9372c89ad94f7c581903306d76befdaca2a559f802472\"},",
      "964:     {file = \"fonttools-4.50.0-cp310-cp310-win32.whl\", hash = \"sha256:e9623afa319405da33b43c85cceb0585a6f5d3a1d7c604daf4f7e1dd55c03d1f\"},",
      "965:     {file = \"fonttools-4.50.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:778c5f43e7e654ef7fe0605e80894930bc3a7772e2f496238e57218610140f54\"},",
      "966:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3dfb102e7f63b78c832e4539969167ffcc0375b013080e6472350965a5fe8048\"},",
      "967:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:9e58fe34cb379ba3d01d5d319d67dd3ce7ca9a47ad044ea2b22635cd2d1247fc\"},",
      "968:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2c673ab40d15a442a4e6eb09bf007c1dda47c84ac1e2eecbdf359adacb799c24\"},",
      "969:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9b3ac35cdcd1a4c90c23a5200212c1bb74fa05833cc7c14291d7043a52ca2aaa\"},",
      "970:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8844e7a2c5f7ecf977e82eb6b3014f025c8b454e046d941ece05b768be5847ae\"},",
      "971:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:f849bd3c5c2249b49c98eca5aaebb920d2bfd92b3c69e84ca9bddf133e9f83f0\"},",
      "972:     {file = \"fonttools-4.50.0-cp311-cp311-win32.whl\", hash = \"sha256:39293ff231b36b035575e81c14626dfc14407a20de5262f9596c2cbb199c3625\"},",
      "973:     {file = \"fonttools-4.50.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:c33d5023523b44d3481624f840c8646656a1def7630ca562f222eb3ead16c438\"},",
      "974:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:b4a886a6dbe60100ba1cd24de962f8cd18139bd32808da80de1fa9f9f27bf1dc\"},",
      "975:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ca1837bfbe5eafa11313dbc7edada79052709a1fffa10cea691210af4aa1fa\"},",
      "976:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0493dd97ac8977e48ffc1476b932b37c847cbb87fd68673dee5182004906828\"},",
      "977:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:77844e2f1b0889120b6c222fc49b2b75c3d88b930615e98893b899b9352a27ea\"},",
      "978:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:3566bfb8c55ed9100afe1ba6f0f12265cd63a1387b9661eb6031a1578a28bad1\"},",
      "979:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:35e10ddbc129cf61775d58a14f2d44121178d89874d32cae1eac722e687d9019\"},",
      "980:     {file = \"fonttools-4.50.0-cp312-cp312-win32.whl\", hash = \"sha256:cc8140baf9fa8f9b903f2b393a6c413a220fa990264b215bf48484f3d0bf8710\"},",
      "981:     {file = \"fonttools-4.50.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:0ccc85fd96373ab73c59833b824d7a73846670a0cb1f3afbaee2b2c426a8f931\"},",
      "982:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:e270a406219af37581d96c810172001ec536e29e5593aa40d4c01cca3e145aa6\"},",
      "983:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ac2463de667233372e9e1c7e9de3d914b708437ef52a3199fdbf5a60184f190c\"},",
      "984:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:47abd6669195abe87c22750dbcd366dc3a0648f1b7c93c2baa97429c4dc1506e\"},",
      "985:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:074841375e2e3d559aecc86e1224caf78e8b8417bb391e7d2506412538f21adc\"},",
      "986:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:0743fd2191ad7ab43d78cd747215b12033ddee24fa1e088605a3efe80d6984de\"},",
      "987:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:3d7080cce7be5ed65bee3496f09f79a82865a514863197ff4d4d177389e981b0\"},",
      "988:     {file = \"fonttools-4.50.0-cp38-cp38-win32.whl\", hash = \"sha256:a467ba4e2eadc1d5cc1a11d355abb945f680473fbe30d15617e104c81f483045\"},",
      "989:     {file = \"fonttools-4.50.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:f77e048f805e00870659d6318fd89ef28ca4ee16a22b4c5e1905b735495fc422\"},",
      "990:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:b6245eafd553c4e9a0708e93be51392bd2288c773523892fbd616d33fd2fda59\"},",
      "991:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:a4062cc7e8de26f1603323ef3ae2171c9d29c8a9f5e067d555a2813cd5c7a7e0\"},",
      "992:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:34692850dfd64ba06af61e5791a441f664cb7d21e7b544e8f385718430e8f8e4\"},",
      "993:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:678dd95f26a67e02c50dcb5bf250f95231d455642afbc65a3b0bcdacd4e4dd38\"},",
      "994:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:4f2ce7b0b295fe64ac0a85aef46a0f2614995774bd7bc643b85679c0283287f9\"},",
      "995:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:d346f4dc2221bfb7ab652d1e37d327578434ce559baf7113b0f55768437fe6a0\"},",
      "996:     {file = \"fonttools-4.50.0-cp39-cp39-win32.whl\", hash = \"sha256:a51eeaf52ba3afd70bf489be20e52fdfafe6c03d652b02477c6ce23c995222f4\"},",
      "997:     {file = \"fonttools-4.50.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:8639be40d583e5d9da67795aa3eeeda0488fb577a1d42ae11a5036f18fb16d93\"},",
      "998:     {file = \"fonttools-4.50.0-py3-none-any.whl\", hash = \"sha256:48fa36da06247aa8282766cfd63efff1bb24e55f020f29a335939ed3844d20d3\"},",
      "999:     {file = \"fonttools-4.50.0.tar.gz\", hash = \"sha256:fa5cf61058c7dbb104c2ac4e782bf1b2016a8cf2f69de6e4dd6a865d2c969bb5\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2538: [[package]]",
      "2539: name = \"pyqt5-qt5\"",
      "2541: description = \"The subset of a Qt installation needed by PyQt5.\"",
      "2542: optional = false",
      "2543: python-versions = \"*\"",
      "2544: files = [",
      "2549: ]",
      "2551: [[package]]",
      "",
      "[Removed Lines]",
      "2540: version = \"5.15.2\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.2-py3-none-macosx_10_13_intel.whl\", hash = \"sha256:76980cd3d7ae87e3c7a33bfebfaee84448fd650bad6840471d6cae199b56e154\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.2-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:1988f364ec8caf87a6ee5d5a3a5210d57539988bf8e84714c7d60972692e2f4a\"},",
      "2547:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win32.whl\", hash = \"sha256:9cc7a768b1921f4b982ebc00a318ccb38578e44e45316c7a4a850e953e1dd327\"},",
      "2548:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win_amd64.whl\", hash = \"sha256:750b78e4dba6bdf1607febedc08738e318ea09e9b10aea9ff0d73073f11f6962\"},",
      "",
      "[Added Lines]",
      "2540: version = \"5.15.13\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_10_13_x86_64.whl\", hash = \"sha256:92575a9e96a27c4ed67c56c7048ded7461a1655d5d21f0e05064664e6e9fcbdf\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:141859f2ffe04cc6c5db970e2b6ad9f98897805d886a14c52614e3799daab6d6\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "680ca5d3026d0d1b40d86870a17ca3419ff40d4e",
      "candidate_info": {
        "commit_hash": "680ca5d3026d0d1b40d86870a17ca3419ff40d4e",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/680ca5d3026d0d1b40d86870a17ca3419ff40d4e",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/security.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/views/api/api_static_analysis.py",
          "mobsf/MobSF/views/helpers.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/MobSF/views/scanning.py",
          "mobsf/StaticAnalyzer/tests.py",
          "mobsf/StaticAnalyzer/tools/bundletool-all-1.16.0.jar",
          "mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/android/xapk.py",
          "mobsf/StaticAnalyzer/views/common/shared_func.py",
          "mobsf/StaticAnalyzer/views/ios/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/windows/windows.py",
          "mobsf/templates/general/home.html",
          "mobsf/templates/general/recent.html",
          "pyproject.toml"
        ],
        "message": "[HOTFIX] Support AAB with MobSF, Convert AAB to APK, Fixes #2387 (#2391)\n\n* AAB to APK conversion\n* relative urls fix for recent scan",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/security.py||mobsf/MobSF/security.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/views/api/api_static_analysis.py||mobsf/MobSF/views/api/api_static_analysis.py",
          "mobsf/MobSF/views/helpers.py||mobsf/MobSF/views/helpers.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/MobSF/views/scanning.py||mobsf/MobSF/views/scanning.py",
          "mobsf/StaticAnalyzer/tests.py||mobsf/StaticAnalyzer/tests.py",
          "mobsf/StaticAnalyzer/views/android/static_analyzer.py||mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/android/xapk.py||mobsf/StaticAnalyzer/views/android/xapk.py",
          "mobsf/StaticAnalyzer/views/common/shared_func.py||mobsf/StaticAnalyzer/views/common/shared_func.py",
          "mobsf/StaticAnalyzer/views/ios/static_analyzer.py||mobsf/StaticAnalyzer/views/ios/static_analyzer.py",
          "mobsf/StaticAnalyzer/views/windows/windows.py||mobsf/StaticAnalyzer/views/windows/windows.py",
          "mobsf/templates/general/home.html||mobsf/templates/general/home.html",
          "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: logger = logging.getLogger(__name__)",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _  _    ___",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / _ \\",
          "",
          "[Removed Lines]",
          "13: VERSION = '4.0.1'",
          "",
          "[Added Lines]",
          "13: VERSION = '4.0.2'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/security.py||mobsf/MobSF/security.py": [
          "File: mobsf/MobSF/security.py -> mobsf/MobSF/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         settings.JTOOL_BINARY,",
          "105:         settings.CLASSDUMP_BINARY,",
          "106:         settings.CLASSDUMP_SWIFT_BINARY,",
          "107:     ]",
          "108:     for ubin in user_defined_bins:",
          "109:         if ubin:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:         getattr(settings, 'BUNDLE_TOOL', ''),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         hashes['signature'] = signature",
          "131:         EXECUTABLE_HASH_MAP = hashes",
          "132:     except Exception:",
          "138: def subprocess_hook(oldfunc, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "133:         logger.warning('Cannot calculate executable hashes, '",
          "134:                        'disabling runtime executable '",
          "135:                        'tampering detection')",
          "",
          "[Added Lines]",
          "134:         logger.exception('Cannot calculate executable hashes, '",
          "135:                          'disabling runtime executable '",
          "136:                          'tampering detection')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "149:     for arg in agmtz:",
          "150:         if arg.endswith('.jar'):",
          "151:             exec2 = Path(arg).as_posix()",
          "152:     if '/' in exec1 or '\\\\' in exec1:",
          "153:         exec1 = Path(exec1).as_posix()",
          "154:     else:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:             break",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     'application/x-zip-compressed',",
          "87:     'binary/octet-stream',",
          "88:     'application/java-archive',",
          "89: ]",
          "90: IPA_MIME = [",
          "91:     'application/iphone',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     'application/x-authorware-bin',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     'application/vns.ms-appx',",
          "108:     'application/x-zip-compressed',",
          "109: ]",
          "111: # REST API only mode",
          "112: # Set MOBSF_API_ONLY to 1 to enable REST API only mode",
          "113: # In this mode, web UI related urls are disabled.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: # Supported File Extensions",
          "112: ANDROID_EXTS = (",
          "113:     'apk', 'xapk', 'apks', 'zip',",
          "114:     'aab', 'so', 'jar', 'aar',",
          "115: )",
          "116: IOS_EXTS = ('ipa', 'dylib', 'a')",
          "117: WINDOWS_EXTS = ('appx',)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "420:     \"\"\"",
          "422:     # Android 3P Tools",
          "423:     JADX_BINARY = os.getenv('MOBSF_JADX_BINARY', '')",
          "424:     BACKSMALI_BINARY = os.getenv('MOBSF_BACKSMALI_BINARY', '')",
          "425:     VD2SVG_BINARY = os.getenv('MOBSF_VD2SVG_BINARY', '')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:     BUNDLE_TOOL = os.getenv('MOBSF_BUNDLE_TOOL', '')",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/api/api_static_analysis.py||mobsf/MobSF/views/api/api_static_analysis.py": [
          "File: mobsf/MobSF/views/api/api_static_analysis.py -> mobsf/MobSF/views/api/api_static_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"MobSF REST API V 1.\"\"\"",
          "3: from django.http import HttpResponse",
          "4: from django.views.decorators.csrf import csrf_exempt",
          "6: from mobsf.StaticAnalyzer.models import (",
          "7:     RecentScansDB,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from django.conf import settings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             {'error': 'The file is not uploaded/available'}, 500)",
          "67:     scan_type = robj[0].SCAN_TYPE",
          "68:     # APK, Source Code (Android/iOS) ZIP, SO, JAR, AAR",
          "70:         resp = static_analyzer(request, checksum, True)",
          "71:         if 'type' in resp:",
          "72:             resp = static_analyzer_ios(request, checksum, True)",
          "",
          "[Removed Lines]",
          "69:     if scan_type in {'xapk', 'apk', 'apks', 'zip', 'so', 'jar', 'aar'}:",
          "",
          "[Added Lines]",
          "70:     if scan_type in settings.ANDROID_EXTS:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         else:",
          "76:             response = make_api_response(resp, 200)",
          "77:     # IPA",
          "79:         resp = static_analyzer_ios(request, checksum, True)",
          "80:         if 'error' in resp:",
          "81:             response = make_api_response(resp, 500)",
          "82:         else:",
          "83:             response = make_api_response(resp, 200)",
          "84:     # APPX",
          "86:         resp = windows.staticanalyzer_windows(request, checksum, True)",
          "87:         if 'error' in resp:",
          "88:             response = make_api_response(resp, 500)",
          "",
          "[Removed Lines]",
          "78:     elif scan_type in {'ipa', 'dylib', 'a'}:",
          "85:     elif scan_type == 'appx':",
          "",
          "[Added Lines]",
          "79:     elif scan_type in settings.IOS_EXTS:",
          "86:     elif scan_type in settings.WINDOWS_EXTS:",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/helpers.py||mobsf/MobSF/views/helpers.py": [
          "File: mobsf/MobSF/views/helpers.py -> mobsf/MobSF/views/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:                 or self.is_ipa()",
          "45:                 or self.is_appx()",
          "46:                 or self.is_apks()",
          "47:                 or self.is_jar()",
          "48:                 or self.is_aar()):",
          "49:             return True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:                 or self.is_aab()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         return (self.file_type in settings.APK_MIME",
          "58:                 and self.file_name_lower.endswith('.xapk'))",
          "60:     def is_apk(self):",
          "61:         return (self.file_type in settings.APK_MIME",
          "62:                 and self.file_name_lower.endswith('.apk'))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     def is_aab(self):",
          "62:         return (self.file_type in settings.APK_MIME",
          "63:                 and self.file_name_lower.endswith('.aab'))",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:              + settings.IPA_MIME",
          "62:              + settings.ZIP_MIME",
          "63:              + settings.APPX_MIME)",
          "64:     context = {",
          "65:         'version': settings.MOBSF_VER,",
          "66:         'mimes': mimes,",
          "67:     }",
          "68:     template = 'general/home.html'",
          "69:     return render(request, template, context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     exts = (settings.ANDROID_EXTS",
          "65:             + settings.IOS_EXTS",
          "66:             + settings.WINDOWS_EXTS)",
          "70:         'exts': '|'.join(exts),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:             return scanning.scan_xapk()",
          "155:         elif self.file_type.is_apks():",
          "156:             return scanning.scan_apks()",
          "157:         elif self.file_type.is_jar():",
          "158:             return scanning.scan_jar()",
          "159:         elif self.file_type.is_aar():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:         elif self.file_type.is_aab():",
          "162:             return scanning.scan_aab()",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/scanning.py||mobsf/MobSF/views/scanning.py": [
          "File: mobsf/MobSF/views/scanning.py -> mobsf/MobSF/views/scanning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         logger.info('Performing Static Analysis of Android Split APK')",
          "99:         return self.data",
          "101:     def scan_jar(self):",
          "102:         \"\"\"Java JAR file.\"\"\"",
          "103:         md5 = handle_uploaded_file(self.file, '.jar')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     def scan_aab(self):",
          "102:         \"\"\"Android App Bundle.\"\"\"",
          "103:         md5 = handle_uploaded_file(self.file, '.aab')",
          "104:         self.data['hash'] = md5",
          "105:         self.data['scan_type'] = 'aab'",
          "106:         add_to_recent_scan(self.data)",
          "107:         logger.info('Performing Static Analysis of Android App Bundle')",
          "108:         return self.data",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tests.py||mobsf/StaticAnalyzer/tests.py": [
          "File: mobsf/StaticAnalyzer/tests.py -> mobsf/StaticAnalyzer/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: RESCAN = False",
          "16: # Set RESCAN to True if Static Analyzer Code is modified",
          "30: def static_analysis_test():",
          "",
          "[Removed Lines]",
          "17: EXTS = (",
          "18:     '.xapk',",
          "19:     '.apk',",
          "20:     '.ipa',",
          "21:     '.appx',",
          "22:     '.zip',",
          "23:     '.a',",
          "24:     '.so',",
          "25:     '.dylib',",
          "26:     '.aar',",
          "27:     '.jar')",
          "",
          "[Added Lines]",
          "17: EXTS = settings.ANDROID_EXTS + settings.IOS_EXTS + settings.WINDOWS_EXTS",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/static_analyzer.py||mobsf/StaticAnalyzer/views/android/static_analyzer.py": [
          "File: mobsf/StaticAnalyzer/views/android/static_analyzer.py -> mobsf/StaticAnalyzer/views/android/static_analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     get_strings_metadata,",
          "72: )",
          "73: from mobsf.StaticAnalyzer.views.android.xapk import (",
          "74:     handle_split_apk,",
          "75:     handle_xapk,",
          "76: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     handle_aab,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:                 api)",
          "132:         typ = robj[0].SCAN_TYPE",
          "133:         filename = robj[0].FILE_NAME",
          "138:         if (not filename.lower().endswith(allowed_exts)",
          "140:             return print_n_send_error_response(",
          "141:                 request,",
          "142:                 'Invalid file extension or file type',",
          "",
          "[Removed Lines]",
          "134:         allowed_exts = (",
          "135:             '.apk', '.xapk', '.zip', '.apks',",
          "136:             '.jar', '.aar', '.so')",
          "137:         allowed_typ = [i.replace('.', '') for i in allowed_exts]",
          "139:                 or typ not in allowed_typ):",
          "",
          "[Added Lines]",
          "135:         allowed_exts = tuple(f'.{i}' for i in settings.ANDROID_EXTS)",
          "137:                 or typ not in settings.ANDROID_EXTS):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:             if not handle_split_apk(app_dic):",
          "164:                 raise Exception('Invalid Split APK File')",
          "165:             typ = 'apk'",
          "166:         if typ == 'apk':",
          "167:             app_dic['app_file'] = app_dic['md5'] + '.apk'  # NEW FILENAME",
          "168:             app_dic['app_path'] = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:         elif typ == 'aab':",
          "165:             # Convert AAB to APK",
          "166:             if not handle_aab(app_dic):",
          "167:                 raise Exception('Invalid AAB File')",
          "168:             typ = 'apk'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:             err = ('Only APK, JAR, AAR, SO and Zipped '",
          "505:                    'Android/iOS Source code supported now!')",
          "506:             logger.error(err)",
          "507:     except Exception as excep:",
          "508:         logger.exception('Error Performing Static Analysis')",
          "509:         msg = str(excep)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:             raise Exception(err)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/xapk.py||mobsf/StaticAnalyzer/views/android/xapk.py": [
          "File: mobsf/StaticAnalyzer/views/android/xapk.py -> mobsf/StaticAnalyzer/views/android/xapk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf_8 -*-",
          "2: \"\"\"Handle XAPK File.\"\"\"",
          "3: import logging",
          "4: from json import load",
          "5: from shutil import move",
          "7: from mobsf.StaticAnalyzer.views.common.shared_func import unzip",
          "10: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "8: from mobsf.MobSF.utils import is_safe_path",
          "",
          "[Added Lines]",
          "4: import subprocess",
          "7: from pathlib import Path",
          "9: from django.conf import settings",
          "12: from mobsf.MobSF.utils import (",
          "13:     find_java_binary,",
          "14:     is_file_exists,",
          "15:     is_safe_path,",
          "16: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     manifest = app_dic['app_dir'] / 'AndroidManifest.xml'",
          "48:     if manifest.exists():",
          "49:         return True",
          "56:                 return True",
          "57:     return None",
          "",
          "[Removed Lines]",
          "50:     files = unzip(apks.as_posix(), app_dic['app_dir'])",
          "51:     for apk in files:",
          "52:         if not apk.startswith('config.') and apk.endswith('.apk'):",
          "53:             full_path = app_dic['app_dir'] / apk",
          "54:             if is_safe_path(app_dic['app_dir'], full_path):",
          "55:                 move(full_path, apks)",
          "",
          "[Added Lines]",
          "58:     for apk in unzip(apks.as_posix(), app_dic['app_dir']):",
          "59:         full_path = app_dic['app_dir'] / apk",
          "60:         safe_path = is_safe_path(app_dic['app_dir'], full_path)",
          "61:         if (not apk.startswith('config.')",
          "62:                 and apk.endswith('.apk')",
          "63:                 and safe_path):",
          "64:             move(full_path, apks)",
          "65:             return True",
          "66:     return None",
          "69: def handle_aab(app_dic):",
          "70:     \"\"\"Convert AAB to APK using bundletool.\"\"\"",
          "71:     try:",
          "72:         checksum = app_dic['md5']",
          "73:         aab_path = app_dic['app_dir'] / f'{checksum}.aab'",
          "74:         apks = aab_path.with_suffix('.apks')",
          "75:         apk = aab_path.with_suffix('.apk')",
          "76:         tools_dir = app_dic['tools_dir']",
          "77:         # Check if previously converted",
          "78:         manifest = app_dic['app_dir'] / 'AndroidManifest.xml'",
          "79:         if manifest.exists():",
          "80:             return True",
          "81:         logger.info('Converting AAB to APK')",
          "82:         if (getattr(settings, 'BUNDLE_TOOL', '')",
          "83:                 and len(settings.BUNDLE_TOOL) > 0",
          "84:                 and is_file_exists(settings.BUNDLE_TOOL)):",
          "85:             bundletool = settings.BUNDLE_TOOL",
          "86:         else:",
          "87:             bundletool = Path(tools_dir) / 'bundletool-all-1.16.0.jar'",
          "88:             bundletool = bundletool.as_posix()",
          "89:         args = [",
          "90:             find_java_binary(),",
          "91:             '-jar',",
          "92:             bundletool,",
          "93:             'build-apks',",
          "94:             f'--bundle={aab_path.as_posix()}',",
          "95:             f'--output={apks.as_posix()}',",
          "96:             '--mode=universal',",
          "97:         ]",
          "98:         if not apks.exists() and aab_path.exists():",
          "99:             # Convert AAB to APKS",
          "100:             subprocess.run(args, timeout=300)",
          "101:             # Remove AAB",
          "102:             aab_path.unlink()",
          "103:         # Extract APK from APKS",
          "104:         for apk_file in unzip(apks.as_posix(), app_dic['app_dir']):",
          "105:             full_path = app_dic['app_dir'] / apk_file",
          "106:             safe_path = is_safe_path(app_dic['app_dir'], full_path)",
          "107:             if apk_file == 'universal.apk' and safe_path:",
          "108:                 move(full_path, apk)",
          "109:                 apks.unlink()",
          "111:         raise Exception('Unable to convert AAB to APK')",
          "112:     except subprocess.TimeoutExpired:",
          "113:         logger.warning('Converting AAB to APK timed out')",
          "114:     except Exception:",
          "115:         logger.exception('Converting AAB to APK')",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/shared_func.py||mobsf/StaticAnalyzer/views/common/shared_func.py": [
          "File: mobsf/StaticAnalyzer/views/common/shared_func.py -> mobsf/StaticAnalyzer/views/common/shared_func.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:             return print_n_send_error_response(request, msg)",
          "412:         with open(sfile, 'rb') as f:",
          "413:             libchecksum = handle_uploaded_file(f, ext)",
          "415:             static_analyzer = 'static_analyzer_ios'",
          "416:         elif ext == '.appx':",
          "417:             # Not applicable, but still set it",
          "418:             static_analyzer = 'windows_static_analyzer'",
          "420:             static_analyzer = 'static_analyzer'",
          "421:         else:",
          "422:             msg = 'Extension not supported'",
          "",
          "[Removed Lines]",
          "414:         if ext in ('.ipa', '.dylib', '.a'):",
          "419:         elif ext in ('.zip', '.so', '.jar', '.aar', '.apk', '.xapk'):",
          "",
          "[Added Lines]",
          "414:         if ext in [f'.{i}' for i in settings.IOS_EXTS]:",
          "419:         elif ext in [f'.{i}' for i in settings.ANDROID_EXTS]:",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/static_analyzer.py||mobsf/StaticAnalyzer/views/ios/static_analyzer.py": [
          "File: mobsf/StaticAnalyzer/views/ios/static_analyzer.py -> mobsf/StaticAnalyzer/views/ios/static_analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         if file_type == 'dylib' and not Path(filename).suffix:",
          "106:             # Force dylib extension on Frameworks",
          "107:             filename = f'{filename}.dylib'",
          "110:         if (not filename.lower().endswith(allowed_exts)",
          "112:             return print_n_send_error_response(",
          "113:                 request,",
          "114:                 'Invalid file extension or file type',",
          "",
          "[Removed Lines]",
          "108:         allowed_exts = ('ios', '.ipa', '.zip', '.dylib', '.a')",
          "109:         allowed_typ = [i.replace('.', '') for i in allowed_exts]",
          "111:                 or file_type not in allowed_typ):",
          "",
          "[Added Lines]",
          "108:         ios_exts = tuple(f'.{i}' for i in settings.IOS_EXTS)",
          "109:         allowed_exts = ios_exts + ('.zip', 'ios')",
          "110:         allowed_types = settings.IOS_EXTS + ('zip', 'ios')",
          "112:                 or file_type not in allowed_types):",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/windows/windows.py||mobsf/StaticAnalyzer/views/windows/windows.py": [
          "File: mobsf/StaticAnalyzer/views/windows/windows.py -> mobsf/StaticAnalyzer/views/windows/windows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                 api)",
          "92:         typ = robj[0].SCAN_TYPE",
          "93:         filename = robj[0].FILE_NAME",
          "95:             return print_n_send_error_response(",
          "96:                 request,",
          "97:                 'File type not supported',",
          "",
          "[Removed Lines]",
          "94:         if typ != 'appx':",
          "",
          "[Added Lines]",
          "94:         if typ not in settings.WINDOWS_EXTS:",
          "",
          "---------------"
        ],
        "mobsf/templates/general/home.html||mobsf/templates/general/home.html": [
          "File: mobsf/templates/general/home.html -> mobsf/templates/general/home.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:           function isValidExt(file_name){",
          "217:                 var val = file_name.toLowerCase();",
          "219:                 val = val.replace(/^.*[\\\\\\/]/, '');",
          "220:                 if (!(regex.test(val))) {",
          "222:                     return false;",
          "223:                 }",
          "224:                 return true;",
          "",
          "[Removed Lines]",
          "218:                 var regex = new RegExp(\"^(.{1,300}?)\\.(ipa|apk|apks|xapk|jar|aar|so|dylib|a|zip|appx)$\");",
          "221:                     _('status').innerText = \"MobSF only supports APK, APKS, XAPK, JAR, AAR, SO, IPA, DYLIB, A, ZIP, and APPX files.\";",
          "",
          "[Added Lines]",
          "218:                 var regex = new RegExp(\"^(.{1,300}?)\\.({{exts}})$\");",
          "221:                     _('status').innerText = \"MobSF only supports APK, APKS, XAPK, AAB, JAR, AAR, SO, IPA, DYLIB, A, ZIP, and APPX files.\";",
          "",
          "---------------"
        ],
        "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html": [
          "File: mobsf/templates/general/recent.html -> mobsf/templates/general/recent.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                                     {% endif %}",
          "68:                                     {% endif %}",
          "69:                                   {% endif %}",
          "72:                                     <a  class=\"btn btn-success btn-sm {% if not e.DYNAMIC_REPORT_EXISTS %}disabled{% endif %}\" href=\"{% url \"dynamic_report\" checksum=e.MD5 %}\"><i class=\"fa fa-mobile\"></i> Dynamic Report</a>",
          "73:                                   {% elif '.ipa' == e.FILE_NAME|slice:\"-4:\" %}",
          "74:                                     {% if e.PACKAGE_NAME %}",
          "",
          "[Removed Lines]",
          "70:                                   <p><a class=\"btn btn-primary btn-sm\" href=\"../{{ e.ANALYZER }}/{{e.MD5}}/\"><i class=\"fas fa-eye\"></i> Static Report</a>",
          "71:                                   {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\"%}",
          "",
          "[Added Lines]",
          "70:                                   <p><a class=\"btn btn-primary btn-sm\" href=\"../../../{{ e.ANALYZER }}/{{e.MD5}}/\"><i class=\"fas fa-eye\"></i> Static Report</a>",
          "71:                                   {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\" or '.aab' == e.FILE_NAME|slice:\"-4:\" %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:                                 {% if '.apk' == e.FILE_NAME|slice:\"-4:\"%}<i class=\"fab fa-android fa-3x\"></i>",
          "87:                                 {% elif '.xapk' == e.FILE_NAME|slice:\"-5:\"%}<i class=\"fab fa-android fa-3x\"></i>",
          "88:                                 {% elif '.apks' == e.FILE_NAME|slice:\"-5:\"%}<i class=\"fab fa-android fa-3x\"></i>",
          "89:                                 {% elif '.jar' == e.FILE_NAME|slice:\"-4:\"%}<i class=\"fab fa-java fa-3x\"></i>",
          "90:                                 {% elif '.aar' == e.FILE_NAME|slice:\"-4:\"%}<i class=\"fas fa-table fa-3x\"></i>",
          "91:                                 {% elif '.so' == e.FILE_NAME|slice:\"-3:\"%}<i class=\"fa fa-th-large fa-3x\"></i>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:                                 {% elif '.aab' == e.FILE_NAME|slice:\"-4:\"%}<i class=\"fab fa-android fa-3x\"></i>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:                             <td>{{ e.TIMESTAMP }}</td>",
          "101:                             <td><p>",
          "102:                                    <a class=\"btn btn-outline-primary btn-sm\" href=\"{% url \"pdf\" checksum=e.MD5%}\"><i class=\"fas fa-file-pdf\"></i></a>",
          "104:                                 </p>",
          "106:                                 <p><a class=\"diffButton btn btn-warning btn-sm\" id=\"{{ e.MD5 }}_{{ e.FILE_NAME }}\"><i class=\"fas fa-not-equal\"></i> Diff or Compare</a>",
          "107:                                 </p>",
          "108:                             {% endif %}",
          "",
          "[Removed Lines]",
          "103:                                    <a class=\"btn btn-outline-info btn-sm\" href=\"../{{ e.ANALYZER }}/{{e.MD5}}/?rescan=1\"><i class=\"fas fa-sync-alt\"></i></a>",
          "105:                             {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\"%}",
          "",
          "[Added Lines]",
          "104:                                    <a class=\"btn btn-outline-info btn-sm\" href=\"../../../{{ e.ANALYZER }}/{{e.MD5}}/?rescan=1\"><i class=\"fas fa-sync-alt\"></i></a>",
          "106:                             {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\" or '.aab' == e.FILE_NAME|slice:\"-4:\"%}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5af3a8219e2a7b4078fab6a3b5d5a66900e7cf1",
      "candidate_info": {
        "commit_hash": "e5af3a8219e2a7b4078fab6a3b5d5a66900e7cf1",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/e5af3a8219e2a7b4078fab6a3b5d5a66900e7cf1",
        "files": [
          ".sonarcloud.properties",
          "docker-compose.yml",
          "docker/docker-compose.yml",
          "docker/docker-compose_swarm.yml",
          "docker/nginx.conf",
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/utils.py",
          "mobsf/MobSF/views/api/api_middleware.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/tests.py",
          "mobsf/StaticAnalyzer/tools/ios/CgbiPngFix/CgbiPngFix.exe",
          "mobsf/StaticAnalyzer/tools/ios/CgbiPngFix/CgbiPngFix_amd64",
          "mobsf/StaticAnalyzer/tools/ios/CgbiPngFix/CgbiPngFix_arm64",
          "mobsf/StaticAnalyzer/views/android/views/source_tree.py",
          "mobsf/StaticAnalyzer/views/ios/icon_analysis.py",
          "mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "4.1.5 (#2445)\n\n* Support custom home from environment variables\n* Reduce iOS binary findings severity to warning from high\n* Code QA and dependency updates\n* docker-compose QA, added example nginx config\n* Added docker-compose_swarm.yml by @antonkap add support for docker secrets\n* IPA PNG Uncrush support for Windows and Linux #2397",
        "before_after_code_files": [
          ".sonarcloud.properties||.sonarcloud.properties",
          "docker/nginx.conf||docker/nginx.conf",
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
          "mobsf/MobSF/views/api/api_middleware.py||mobsf/MobSF/views/api/api_middleware.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/tests.py||mobsf/StaticAnalyzer/tests.py",
          "mobsf/StaticAnalyzer/views/android/views/source_tree.py||mobsf/StaticAnalyzer/views/android/views/source_tree.py",
          "mobsf/StaticAnalyzer/views/ios/icon_analysis.py||mobsf/StaticAnalyzer/views/ios/icon_analysis.py",
          "mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py||mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        ".sonarcloud.properties||.sonarcloud.properties": [
          "File: .sonarcloud.properties -> .sonarcloud.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: sonar.sources=.",
          "2: sonar.exclusions=mobsf/static/**/*,mobsf/templates/**/*",
          "3: sonar.sourceEncoding=UTF-8",
          "",
          "[Removed Lines]",
          "4: sonar.python.version=3.10, 3.11",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "docker/nginx.conf||docker/nginx.conf": [
          "File: docker/nginx.conf -> docker/nginx.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: user  nginx;",
          "2: events {",
          "3:     worker_connections   1000;",
          "4: }",
          "5: http {",
          "6:         server {",
          "7:               listen 4000;",
          "8:               location / {",
          "9:                 proxy_set_header        X-Forwarded-Host    $host;",
          "10:                 proxy_set_header        X-Forwarded-Port    443;",
          "11:                 proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;",
          "13:                 proxy_pass http://mobsf:8000;",
          "14:                 proxy_redirect         off;",
          "15:                 proxy_read_timeout     900;",
          "16:                 proxy_buffering        on;",
          "17:               }",
          "18:               client_max_body_size 256M;",
          "19:         }",
          "20: }",
          "",
          "---------------"
        ],
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import sys",
          "7: import shutil",
          "8: import threading",
          "9: from importlib import (",
          "10:     machinery,",
          "11:     util,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: from hashlib import sha256",
          "10: from pathlib import Path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: logger = logging.getLogger(__name__)",
          "20: BANNER = r\"\"\"",
          "21:   __  __       _    ____  _____       _  _    _",
          "22:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / |",
          "",
          "[Removed Lines]",
          "19: VERSION = '4.1.4'",
          "",
          "[Added Lines]",
          "21: VERSION = '4.1.5'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: def first_run(secret_file, base_dir, mobsf_home):",
          "31:     # Based on https://gist.github.com/ndarville/3452907#file-secret-key-gen-py",
          "33:         secret_key = os.environ['MOBSF_SECRET_KEY']",
          "36:     else:",
          "37:         try:",
          "38:             secret_key = get_random()",
          "42:         except IOError:",
          "43:             raise Exception('Secret file generation failed' % secret_file)",
          "44:         # Run Once",
          "",
          "[Removed Lines]",
          "32:     if 'MOBSF_SECRET_KEY' in os.environ:",
          "34:     elif os.path.isfile(secret_file):",
          "35:         secret_key = open(secret_file).read().strip()",
          "39:             secret = open(secret_file, 'w')",
          "40:             secret.write(secret_key)",
          "41:             secret.close()",
          "",
          "[Added Lines]",
          "34:     base_dir = Path(base_dir)",
          "35:     mobsf_home = Path(mobsf_home)",
          "36:     secret_file = Path(secret_file)",
          "37:     if os.getenv('MOBSF_SECRET_KEY'):",
          "39:     elif secret_file.exists() and secret_file.is_file():",
          "40:         secret_key = secret_file.read_text().strip()",
          "44:             secret_file.write_text(secret_key)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "48:         thread = threading.Thread(",
          "49:             target=install_jadx,",
          "50:             name='install_jadx',",
          "52:         thread.start()",
          "53:         # Windows Setup",
          "55:     return secret_key",
          "58: def create_user_conf(mobsf_home, base_dir):",
          "59:     try:",
          "65:             config = []",
          "66:             add = False",
          "67:             for line in dat:",
          "",
          "[Removed Lines]",
          "51:             args=(mobsf_home,))",
          "54:         windows_config_local(mobsf_home)",
          "60:         config_path = os.path.join(mobsf_home, 'config.py')",
          "61:         if not os.path.isfile(config_path):",
          "62:             sample_conf = os.path.join(base_dir, 'MobSF/settings.py')",
          "63:             with open(sample_conf, 'r') as f:",
          "64:                 dat = f.readlines()",
          "",
          "[Added Lines]",
          "54:             args=(mobsf_home.as_posix(),))",
          "57:         windows_config_local(mobsf_home.as_posix())",
          "63:         config_path = mobsf_home / 'config.py'",
          "64:         if not config_path.exists():",
          "65:             sample_conf = base_dir / 'MobSF' / 'settings.py'",
          "66:             dat = sample_conf.read_text().splitlines()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "72:                 if add:",
          "73:                     config.append(line.lstrip())",
          "74:             config.pop(0)",
          "78:     except Exception:",
          "79:         logger.exception('Cannot create config file')",
          "82: def django_operation(cmds, base_dir):",
          "83:     \"\"\"Generic Function for Djano operations.\"\"\"",
          "86:         # Bail out for package",
          "87:         return",
          "89:     args.extend(cmds)",
          "90:     subprocess.call(args)",
          "",
          "[Removed Lines]",
          "75:             conf_str = ''.join(config)",
          "76:             with open(config_path, 'w') as f:",
          "77:                 f.write(conf_str)",
          "84:     manage = os.path.join(base_dir, '../manage.py')",
          "85:     if not os.path.exists(manage):",
          "88:     args = [sys.executable, manage]",
          "",
          "[Added Lines]",
          "77:             conf_str = '\\n'.join(config)",
          "78:             config_path.write_text(conf_str)",
          "85:     manage = base_dir.parent / 'manage.py'",
          "86:     if manage.exists() and manage.is_file():",
          "89:     print(manage)",
          "90:     args = [sys.executable, manage.as_posix()]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "117: def get_mobsf_home(use_home, base_dir):",
          "118:     try:",
          "119:         mobsf_home = ''",
          "120:         if use_home:",
          "122:             # MobSF Home Directory",
          "125:             create_user_conf(mobsf_home, base_dir)",
          "126:         else:",
          "127:             mobsf_home = base_dir",
          "128:         # Download Directory",
          "132:         # Screenshot Directory",
          "136:         # Upload Directory",
          "140:         # Downloaded tools",
          "146:         if use_home:",
          "148:             try:",
          "149:                 shutil.copytree(src, sig_dir, dirs_exist_ok=True)",
          "150:             except Exception:",
          "151:                 pass",
          "155:     except Exception:",
          "156:         logger.exception('Creating MobSF Home Directory')",
          "",
          "[Removed Lines]",
          "121:             mobsf_home = os.path.join(os.path.expanduser('~'), '.MobSF')",
          "123:             if not os.path.exists(mobsf_home):",
          "124:                 os.makedirs(mobsf_home)",
          "129:         dwd_dir = os.path.join(mobsf_home, 'downloads/')",
          "130:         if not os.path.exists(dwd_dir):",
          "131:             os.makedirs(dwd_dir)",
          "133:         screen_dir = os.path.join(dwd_dir, 'screen/')",
          "134:         if not os.path.exists(screen_dir):",
          "135:             os.makedirs(screen_dir)",
          "137:         upload_dir = os.path.join(mobsf_home, 'uploads/')",
          "138:         if not os.path.exists(upload_dir):",
          "139:             os.makedirs(upload_dir)",
          "141:         downloaded_tools_dir = os.path.join(mobsf_home, 'tools/')",
          "142:         if not os.path.exists(downloaded_tools_dir):",
          "143:             os.makedirs(downloaded_tools_dir)",
          "144:         # Signature Directory",
          "145:         sig_dir = os.path.join(mobsf_home, 'signatures/')",
          "147:             src = os.path.join(base_dir, 'signatures/')",
          "152:         elif not os.path.exists(sig_dir):",
          "153:             os.makedirs(sig_dir)",
          "154:         return mobsf_home",
          "",
          "[Added Lines]",
          "121:         base_dir = Path(base_dir)",
          "124:             mobsf_home = Path.home() / '.MobSF'",
          "125:             custom_home = os.getenv('MOBSF_HOME_DIR')",
          "126:             if custom_home:",
          "127:                 p = Path(custom_home)",
          "128:                 if p.exists() and p.is_absolute() and p.is_dir():",
          "129:                     mobsf_home = p",
          "131:             if not mobsf_home.exists():",
          "132:                 mobsf_home.mkdir(parents=True, exist_ok=True)",
          "137:         dwd_dir = mobsf_home / 'downloads'",
          "138:         dwd_dir.mkdir(parents=True, exist_ok=True)",
          "140:         screen_dir = mobsf_home / 'screen'",
          "141:         screen_dir.mkdir(parents=True, exist_ok=True)",
          "143:         upload_dir = mobsf_home / 'uploads'",
          "144:         upload_dir.mkdir(parents=True, exist_ok=True)",
          "146:         downloaded_tools_dir = mobsf_home / 'tools'",
          "147:         downloaded_tools_dir.mkdir(parents=True, exist_ok=True)",
          "148:         # Signatures Directory",
          "149:         sig_dir = mobsf_home / 'signatures'",
          "150:         sig_dir.mkdir(parents=True, exist_ok=True)",
          "152:             src = Path(base_dir) / 'signatures'",
          "157:         return mobsf_home.as_posix()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:     module = util.module_from_spec(spec)",
          "167:     loader.exec_module(module)",
          "168:     return module",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: def get_docker_secret_by_file(secret_key):",
          "175:     try:",
          "176:         secret_path = os.environ.get(secret_key)",
          "177:         path = Path(secret_path)",
          "178:         if path.exists() and path.is_file():",
          "179:             return path.read_text().strip()",
          "180:     except Exception:",
          "181:         logger.exception('Cannot read secret from %s', secret_path)",
          "182:     raise Exception('Cannot read secret from file')",
          "185: def get_secret_from_file_or_env(env_secret_key):",
          "186:     docker_secret_key = f'{env_secret_key}_FILE'",
          "187:     if os.environ.get(docker_secret_key):",
          "188:         return get_docker_secret_by_file(docker_secret_key)",
          "189:     else:",
          "190:         return os.environ[env_secret_key]",
          "193: def api_key(home_dir):",
          "194:     \"\"\"Print REST API Key.\"\"\"",
          "195:     # Form Docker Secrets",
          "196:     if os.environ.get('MOBSF_API_KEY_FILE'):",
          "197:         logger.info('\\nAPI Key read from docker secrets')",
          "198:         try:",
          "199:             return get_docker_secret_by_file('MOBSF_API_KEY_FILE')",
          "200:         except Exception:",
          "201:             logger.exception('Cannot read API Key from docker secrets')",
          "202:     # From Environment Variable",
          "203:     if os.environ.get('MOBSF_API_KEY'):",
          "204:         logger.info('\\nAPI Key read from environment variable')",
          "205:         return os.environ['MOBSF_API_KEY']",
          "206:     home_dir = Path(home_dir)",
          "207:     secret_file = home_dir / 'secret'",
          "208:     if secret_file.exists() and secret_file.is_file():",
          "209:         try:",
          "210:             _api_key = secret_file.read_bytes().strip()",
          "211:             return sha256(_api_key).hexdigest()",
          "212:         except Exception:",
          "213:             logger.exception('Cannot Read API Key')",
          "214:     return None",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     first_run,",
          "13:     get_mobsf_home,",
          "14:     get_mobsf_version,",
          "15:     load_source,",
          "16: )",
          "18: logger = logging.getLogger(__name__)",
          "20: # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
          "21: #       MOBSF CONFIGURATION",
          "22: # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:     get_secret_from_file_or_env,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: # MobSF Data Directory",
          "29: BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",
          "31: # Download Directory",
          "33: # Screenshot Directory",
          "35: # Upload Directory",
          "37: # Database Directory",
          "39: # Signatures used by modules",
          "41: # Tools Directory",
          "42: TOOLS_DIR = os.path.join(BASE_DIR, 'DynamicAnalyzer/tools/')",
          "43: # Downloaded Tools Directory",
          "45: # Secret File",
          "48: # ==========Load MobSF User Settings==========",
          "49: try:",
          "50:     if USE_HOME:",
          "52:         sett = load_source('user_settings', USER_CONFIG)",
          "53:         locals().update(  # lgtm [py/modification-of-locals]",
          "54:             {k: v for k, v in list(sett.__dict__.items())",
          "",
          "[Removed Lines]",
          "30: MobSF_HOME = get_mobsf_home(USE_HOME, BASE_DIR)",
          "32: DWD_DIR = os.path.join(MobSF_HOME, 'downloads/')",
          "34: SCREEN_DIR = os.path.join(MobSF_HOME, 'downloads/screen/')",
          "36: UPLD_DIR = os.path.join(MobSF_HOME, 'uploads/')",
          "38: DB_DIR = os.path.join(MobSF_HOME, 'db.sqlite3')",
          "40: SIGNATURE_DIR = os.path.join(MobSF_HOME, 'signatures/')",
          "44: DOWNLOADED_TOOLS_DIR = os.path.join(MobSF_HOME, 'tools/')",
          "46: SECRET_FILE = os.path.join(MobSF_HOME, 'secret')",
          "51:         USER_CONFIG = os.path.join(MobSF_HOME, 'config.py')",
          "",
          "[Added Lines]",
          "30: MOBSF_HOME = get_mobsf_home(USE_HOME, BASE_DIR)",
          "32: DWD_DIR = os.path.join(MOBSF_HOME, 'downloads/')",
          "34: SCREEN_DIR = os.path.join(MOBSF_HOME, 'downloads/screen/')",
          "36: UPLD_DIR = os.path.join(MOBSF_HOME, 'uploads/')",
          "38: DB_DIR = os.path.join(MOBSF_HOME, 'db.sqlite3')",
          "40: SIGNATURE_DIR = os.path.join(MOBSF_HOME, 'signatures/')",
          "44: DOWNLOADED_TOOLS_DIR = os.path.join(MOBSF_HOME, 'tools/')",
          "46: SECRET_FILE = os.path.join(MOBSF_HOME, 'secret')",
          "51:         USER_CONFIG = os.path.join(MOBSF_HOME, 'config.py')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     CONFIG_HOME = False",
          "63: # ===MOBSF SECRET GENERATION AND DB MIGRATION====",
          "66: # =============ALLOWED DOWNLOAD EXTENSIONS=====",
          "67: ALLOWED_EXTENSIONS = {",
          "",
          "[Removed Lines]",
          "64: SECRET_KEY = first_run(SECRET_FILE, BASE_DIR, MobSF_HOME)",
          "",
          "[Added Lines]",
          "64: SECRET_KEY = first_run(SECRET_FILE, BASE_DIR, MOBSF_HOME)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150: # Database",
          "151: # https://docs.djangoproject.com/en/dev/ref/settings/#databases",
          "152: if (os.environ.get('POSTGRES_USER')",
          "154:         and os.environ.get('POSTGRES_HOST')):",
          "155:     # Postgres support",
          "156:     default = {",
          "157:         'ENGINE': 'django.db.backends.postgresql_psycopg2',",
          "158:         'NAME': os.getenv('POSTGRES_DB', 'mobsf'),",
          "159:         'USER': os.environ['POSTGRES_USER'],",
          "161:         'HOST': os.environ['POSTGRES_HOST'],",
          "162:         'PORT': int(os.getenv('POSTGRES_PORT', 5432)),",
          "163:     }",
          "",
          "[Removed Lines]",
          "153:         and os.environ.get('POSTGRES_PASSWORD')",
          "160:         'PASSWORD': os.environ['POSTGRES_PASSWORD'],",
          "",
          "[Added Lines]",
          "153:         and (os.environ.get('POSTGRES_PASSWORD')",
          "154:              or os.environ.get('POSTGRES_PASSWORD_FILE'))",
          "161:         'PASSWORD': get_secret_from_file_or_env('POSTGRES_PASSWORD'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:         'logfile': {",
          "292:             'level': 'DEBUG',",
          "293:             'class': 'logging.FileHandler',",
          "295:             'formatter': 'standard',",
          "296:         },",
          "297:         'console': {",
          "",
          "[Removed Lines]",
          "294:             'filename': os.path.join(MobSF_HOME, 'debug.log'),",
          "",
          "[Added Lines]",
          "295:             'filename': os.path.join(MOBSF_HOME, 'debug.log'),",
          "",
          "---------------"
        ],
        "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py": [
          "File: mobsf/MobSF/utils.py -> mobsf/MobSF/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: from django.utils import timezone",
          "37: from mobsf.StaticAnalyzer.models import RecentScansDB",
          "39: from . import settings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: from mobsf.MobSF. init import api_key",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     return proxies, verify",
          "109: def print_version():",
          "110:     \"\"\"Print MobSF Version.\"\"\"",
          "111:     logger.info(settings.BANNER)",
          "112:     ver = settings.MOBSF_VER",
          "113:     logger.info('Author: Ajin Abraham | opensecurity.in')",
          "114:     if platform.system() == 'Windows':",
          "115:         logger.info('Mobile Security Framework %s', ver)",
          "117:         print('Default Credentials: mobsf/mobsf')",
          "118:     else:",
          "119:         logger.info(",
          "120:             '%sMobile Security Framework %s%s', Color.GREY, ver, Color.END)",
          "122:         print(f'Default Credentials: {Color.BOLD}mobsf/mobsf{Color.END}')",
          "123:     os = platform.system()",
          "124:     pltfm = platform.platform()",
          "",
          "[Removed Lines]",
          "94: def api_key():",
          "95:     \"\"\"Print REST API Key.\"\"\"",
          "96:     if os.environ.get('MOBSF_API_KEY'):",
          "97:         logger.info('\\nAPI Key read from environment variable')",
          "98:         return os.environ['MOBSF_API_KEY']",
          "100:     secret_file = os.path.join(settings.MobSF_HOME, 'secret')",
          "101:     if is_file_exists(secret_file):",
          "102:         try:",
          "103:             _api_key = open(secret_file).read().strip()",
          "104:             return gen_sha256_hash(_api_key)",
          "105:         except Exception:",
          "106:             logger.exception('Cannot Read API Key')",
          "116:         print('REST API Key: ' + api_key())",
          "121:         print(f'REST API Key: {Color.BOLD}{api_key()}{Color.END}')",
          "",
          "[Added Lines]",
          "100:     mobsf_api_key = api_key(settings.MOBSF_HOME)",
          "103:         print(f'REST API Key: {mobsf_api_key}')",
          "108:         print(f'REST API Key: {Color.BOLD}{mobsf_api_key}{Color.END}')",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/api/api_middleware.py||mobsf/MobSF/views/api/api_middleware.py": [
          "File: mobsf/MobSF/views/api/api_middleware.py -> mobsf/MobSF/views/api/api_middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf_8 -*-",
          "2: \"\"\"REST API Middleware.\"\"\"",
          "3: from django.http import JsonResponse",
          "4: from django.utils.deprecation import MiddlewareMixin",
          "8: OK = 200",
          "",
          "[Removed Lines]",
          "6: from mobsf.MobSF.utils import api_key",
          "",
          "[Added Lines]",
          "3: from hmac import compare_digest",
          "7: from django.conf import settings",
          "9: from mobsf.MobSF.init import api_key",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: def api_auth(meta):",
          "24:     \"\"\"Check if API Key Matches.\"\"\"",
          "25:     if 'HTTP_X_MOBSF_API_KEY' in meta:",
          "27:     elif 'HTTP_AUTHORIZATION' in meta:",
          "29:     return False",
          "",
          "[Removed Lines]",
          "26:         return bool(api_key() == meta['HTTP_X_MOBSF_API_KEY'])",
          "28:         return bool(api_key() == meta['HTTP_AUTHORIZATION'])",
          "",
          "[Added Lines]",
          "28:     mobsf_api_key = api_key(settings.MOBSF_HOME)",
          "30:         return compare_digest(mobsf_api_key, meta['HTTP_X_MOBSF_API_KEY'])",
          "32:         return compare_digest(mobsf_api_key, meta['HTTP_AUTHORIZATION'])",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: from mobsf.MobSF.forms import FormUtil, UploadFileForm",
          "24: from mobsf.MobSF.utils import (",
          "25:     MD5_REGEX,",
          "27:     get_md5,",
          "28:     is_dir_exists,",
          "29:     is_file_exists,",
          "",
          "[Removed Lines]",
          "26:     api_key,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:     print_n_send_error_response,",
          "34:     python_dict,",
          "35: )",
          "36: from mobsf.MobSF.views.helpers import FileType",
          "37: from mobsf.MobSF.views.scanning import Scanning",
          "38: from mobsf.MobSF.views.apk_downloader import apk_download",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: from mobsf.MobSF.init import api_key",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:         if (settings.DISABLE_AUTHENTICATION == '1'",
          "196:                 or request.user.is_staff",
          "197:                 or request.user.groups.filter(name=MAINTAINER_GROUP).exists()):",
          "199:     except Exception:",
          "200:         logger.exception('[ERROR] Failed to get API key')",
          "201:     context = {",
          "",
          "[Removed Lines]",
          "198:             key = api_key()",
          "",
          "[Added Lines]",
          "198:             key = api_key(settings.MOBSF_HOME)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tests.py||mobsf/StaticAnalyzer/tests.py": [
          "File: mobsf/StaticAnalyzer/tests.py -> mobsf/StaticAnalyzer/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import os",
          "5: import platform",
          "7: from django.conf import settings",
          "8: from django.http import HttpResponse",
          "9: from django.test import Client, TestCase",
          "13: logger = logging.getLogger(__name__)",
          "15: RESCAN = False",
          "",
          "[Removed Lines]",
          "11: from mobsf.MobSF.utils import api_key",
          "",
          "[Added Lines]",
          "7: from mobsf.MobSF.init import api_key",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175: def api_test():",
          "176:     \"\"\"View for Handling REST API Test.\"\"\"",
          "177:     logger.info('\\nRunning REST API Unit test')",
          "179:     try:",
          "180:         uploaded = []",
          "181:         logger.info('Running Test on Upload API')",
          "",
          "[Removed Lines]",
          "178:     auth = api_key()",
          "",
          "[Added Lines]",
          "178:     auth = api_key(settings.MOBSF_HOME)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/views/source_tree.py||mobsf/StaticAnalyzer/views/android/views/source_tree.py": [
          "File: mobsf/StaticAnalyzer/views/android/views/source_tree.py -> mobsf/StaticAnalyzer/views/android/views/source_tree.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     render,",
          "11: )",
          "13: from mobsf.MobSF.utils import (",
          "15:     is_md5,",
          "16:     print_n_send_error_response,",
          "17: )",
          "",
          "[Removed Lines]",
          "14:     api_key,",
          "",
          "[Added Lines]",
          "13: from mobsf.MobSF.init import api_key",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:             'hash': md5,",
          "72:             'source_type': typ,",
          "73:             'version': settings.MOBSF_VER,",
          "75:         }",
          "76:         template = 'static_analysis/source_tree.html'",
          "77:         return render(request, template, context)",
          "",
          "[Removed Lines]",
          "74:             'api_key': api_key(),",
          "",
          "[Added Lines]",
          "74:             'api_key': api_key(settings.MOBSF_HOME),",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/icon_analysis.py||mobsf/StaticAnalyzer/views/ios/icon_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/ios/icon_analysis.py -> mobsf/StaticAnalyzer/views/ios/icon_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             return",
          "38:         icon_file = icons.pop()",
          "39:         outfile = Path(settings.DWD_DIR) / f'{md5}-icon.png'",
          "41:             args = ['xcrun', '-sdk', 'iphoneos', 'pngcrush', '-q',",
          "42:                     '-revert-iphone-optimizations',",
          "43:                     icon_file, outfile.as_posix()]",
          "46:             try:",
          "47:                 out = subprocess.run(args, capture_output=True)",
          "48:                 if b'libpng error:' in out.stdout:",
          "",
          "[Removed Lines]",
          "40:         if platform.system() == 'Darwin':",
          "44:             # Uncrush PNG. CgBI -> PNG, Mac only",
          "45:             # https://iphonedevwiki.net/index.php/CgBI_file_format",
          "",
          "[Added Lines]",
          "40:         tools_dir = Path(settings.BASE_DIR) / 'StaticAnalyzer' / 'tools' / 'ios'",
          "41:         cgbipng_bin = None",
          "42:         arch = platform.machine()",
          "43:         system = platform.system()",
          "44:         # Uncrush PNG. CgBI -> PNG",
          "45:         # https://iphonedevwiki.net/index.php/CgBI_file_format",
          "46:         if system == 'Darwin':",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:                     raise ValueError('PNG is not CgBI')",
          "51:             except Exception:",
          "52:                 shutil.copy2(icon_file, outfile.as_posix())",
          "53:         else:",
          "54:             shutil.copy2(icon_file, outfile.as_posix())",
          "55:         app_dict['icon_path'] = outfile.name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:         elif system == 'Windows' and arch in ('AMD64', 'x86'):",
          "58:             cgbipng_bin = 'CgbiPngFix.exe'",
          "59:         elif system == 'Linux' and arch == 'x86_64':",
          "60:             cgbipng_bin = 'CgbiPngFix_amd64'",
          "61:         elif system == 'Linux' and arch == 'aarch64':",
          "62:             cgbipng_bin = 'CgbiPngFix_arm64'",
          "63:         if cgbipng_bin:",
          "64:             cbin = tools_dir / 'CgbiPngFix' / cgbipng_bin",
          "65:             args = [cbin.as_posix(), '-i',",
          "66:                     icon_file, '-o', outfile.as_posix()]",
          "67:             try:",
          "68:                 out = subprocess.run(args, capture_output=True)",
          "69:             except Exception:",
          "70:                 # Fails or PNG is not crushed",
          "71:                 shutil.copy2(icon_file, outfile.as_posix())",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py||mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py": [
          "File: mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py -> mobsf/StaticAnalyzer/views/ios/rules/ipa_rules.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"IPA Binary Analysis Rules.\"\"\"",
          "3: from libsast.standards import get_standards",
          "6: STDS = get_standards()",
          "7: IPA_RULES = [",
          "8:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: HIGH = 'high'",
          "6: WARNING = 'warning'",
          "7: INFO = 'info'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:             rb'\\b_wcslen\\n\\b|\\b_wcsncat\\n\\b|\\b_wcsncpy\\n\\b|\\b_wcstok\\n\\b|'",
          "21:             rb'\\b_wmemcpy\\n\\b|\\b_fopen\\n\\b|\\b_chmod\\n\\b|\\b_chown\\n\\b|'",
          "22:             rb'\\b_stat\\n\\b|\\b_mktemp\\n\\b'),",
          "24:         'input_case': 'exact',",
          "25:         'cvss': 6,",
          "26:         'cwe': STDS['cwe']['cwe-676'],",
          "",
          "[Removed Lines]",
          "23:         'severity': 'high',",
          "",
          "[Added Lines]",
          "25:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:             rb'\\bkCCAlgorithmRC4\\b|'",
          "40:             rb'\\bkCCOptionECBMode\\b|'",
          "41:             rb'\\bkCCOptionCBCMode\\b'),",
          "43:         'input_case': 'exact',",
          "44:         'cvss': 3,",
          "45:         'cwe': STDS['cwe']['cwe-327'],",
          "",
          "[Removed Lines]",
          "42:         'severity': 'high',",
          "",
          "[Added Lines]",
          "44:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:             rb'SecTrustSetVerifyDate\\b|\\bSecCertificateRef\\b|\\b'",
          "89:             rb'SecIdentityRef\\b|\\bSecKeyRef\\b|\\bSecPolicyRef\\b|\\b'",
          "90:             rb'SecTrustRef\\b'),",
          "92:         'input_case': 'exact',",
          "93:         'cvss': 0,",
          "94:         'cwe': '',",
          "",
          "[Removed Lines]",
          "91:         'severity': 'info',",
          "",
          "[Added Lines]",
          "93:         'severity': INFO,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:             rb'CC_SHA1_Update\\b|\\b'",
          "114:             rb'CC_SHA1_Final\\b|\\bCC_SHA1\\b|\\bSHA1_Init\\b|\\b'",
          "115:             rb'SHA1_Update\\b|\\bSHA1_Final\\b'),",
          "117:         'input_case': 'exact',",
          "118:         'cvss': 3,",
          "119:         'cwe': STDS['cwe']['cwe-327'],",
          "",
          "[Removed Lines]",
          "116:         'severity': 'high',",
          "",
          "[Added Lines]",
          "118:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:             rb'CC_SHA512_Update\\b|\\bCC_SHA512_Final\\b|\\b'",
          "141:             rb'CC_SHA512\\b|\\bSHA512_Init\\b|\\b'",
          "142:             rb'SHA512_Update\\b|\\bSHA512_Final\\b'),",
          "144:         'input_case': 'exact',",
          "145:         'cvss': 0,",
          "146:         'cwe': '',",
          "",
          "[Removed Lines]",
          "143:         'severity': 'info',",
          "",
          "[Added Lines]",
          "145:         'severity': INFO,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "154:             'insecure Random function(s) {}'),",
          "155:         'type': 'Regex',",
          "156:         'pattern': rb'\\b_srand\\n\\b|\\b_random\\n\\b',",
          "158:         'input_case': 'exact',",
          "159:         'cvss': 3,",
          "160:         'cwe': STDS['cwe']['cwe-330'],",
          "",
          "[Removed Lines]",
          "157:         'severity': 'high',",
          "",
          "[Added Lines]",
          "159:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "167:             'The binary may use {} function for logging.'),",
          "168:         'type': 'Regex',",
          "169:         'pattern': rb'\\b_NSLog\\n\\b',",
          "171:         'input_case': 'exact',",
          "172:         'cvss': 7.5,",
          "173:         'cwe': STDS['cwe']['cwe-532'],",
          "",
          "[Removed Lines]",
          "170:         'severity': 'info',",
          "",
          "[Added Lines]",
          "172:         'severity': INFO,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "180:             'The binary may use {} function instead of calloc'),",
          "181:         'type': 'Regex',",
          "182:         'pattern': rb'_malloc\\n',",
          "184:         'input_case': 'exact',",
          "185:         'cvss': 2,",
          "186:         'cwe': STDS['cwe']['cwe-789'],",
          "",
          "[Removed Lines]",
          "183:         'severity': 'high',",
          "",
          "[Added Lines]",
          "185:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "197:             ' from AppStore.'),",
          "198:         'type': 'Regex',",
          "199:         'pattern': rb'\\b_ptrace\\b',",
          "201:         'input_case': 'exact',",
          "202:         'cvss': 0,",
          "203:         'cwe': '',",
          "",
          "[Removed Lines]",
          "200:         'severity': 'warning',",
          "",
          "[Added Lines]",
          "202:         'severity': WARNING,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "209:         'detailed_desc': 'The binary may use UIWebView Component.',",
          "210:         'type': 'Regex',",
          "211:         'pattern': b'UIWebView',",
          "213:         'input_case': 'exact',",
          "214:         'cvss': 0,",
          "215:         'cwe': '',",
          "",
          "[Removed Lines]",
          "212:         'severity': 'info',",
          "",
          "[Added Lines]",
          "214:         'severity': INFO,",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "2387: [[package]]",
          "2388: name = \"rpds-py\"",
          "2390: description = \"Python bindings to Rust's persistent data structures (rpds)\"",
          "2391: optional = false",
          "2393: files = [",
          "2497: ]",
          "2499: [[package]]",
          "",
          "[Removed Lines]",
          "2389: version = \"0.20.1\"",
          "2392: python-versions = \">=3.8\"",
          "2394:     {file = \"rpds_py-0.20.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:a649dfd735fff086e8a9d0503a9f0c7d01b7912a333c7ae77e1515c08c146dad\"},",
          "2395:     {file = \"rpds_py-0.20.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:f16bc1334853e91ddaaa1217045dd7be166170beec337576818461268a3de67f\"},",
          "2396:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:14511a539afee6f9ab492b543060c7491c99924314977a55c98bfa2ee29ce78c\"},",
          "2397:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:3ccb8ac2d3c71cda472b75af42818981bdacf48d2e21c36331b50b4f16930163\"},",
          "2398:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c142b88039b92e7e0cb2552e8967077e3179b22359e945574f5e2764c3953dcf\"},",
          "2399:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f19169781dddae7478a32301b499b2858bc52fc45a112955e798ee307e294977\"},",
          "2400:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:13c56de6518e14b9bf6edde23c4c39dac5b48dcf04160ea7bce8fca8397cdf86\"},",
          "2401:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:925d176a549f4832c6f69fa6026071294ab5910e82a0fe6c6228fce17b0706bd\"},",
          "2402:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:78f0b6877bfce7a3d1ff150391354a410c55d3cdce386f862926a4958ad5ab7e\"},",
          "2403:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:3dd645e2b0dcb0fd05bf58e2e54c13875847687d0b71941ad2e757e5d89d4356\"},",
          "2404:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:4f676e21db2f8c72ff0936f895271e7a700aa1f8d31b40e4e43442ba94973899\"},",
          "2405:     {file = \"rpds_py-0.20.1-cp310-none-win32.whl\", hash = \"sha256:648386ddd1e19b4a6abab69139b002bc49ebf065b596119f8f37c38e9ecee8ff\"},",
          "2406:     {file = \"rpds_py-0.20.1-cp310-none-win_amd64.whl\", hash = \"sha256:d9ecb51120de61e4604650666d1f2b68444d46ae18fd492245a08f53ad2b7711\"},",
          "2407:     {file = \"rpds_py-0.20.1-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:762703bdd2b30983c1d9e62b4c88664df4a8a4d5ec0e9253b0231171f18f6d75\"},",
          "2408:     {file = \"rpds_py-0.20.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:0b581f47257a9fce535c4567782a8976002d6b8afa2c39ff616edf87cbeff712\"},",
          "2409:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:842c19a6ce894493563c3bd00d81d5100e8e57d70209e84d5491940fdb8b9e3a\"},",
          "2410:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:42cbde7789f5c0bcd6816cb29808e36c01b960fb5d29f11e052215aa85497c93\"},",
          "2411:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:6c8e9340ce5a52f95fa7d3b552b35c7e8f3874d74a03a8a69279fd5fca5dc751\"},",
          "2412:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8ba6f89cac95c0900d932c9efb7f0fb6ca47f6687feec41abcb1bd5e2bd45535\"},",
          "2413:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4a916087371afd9648e1962e67403c53f9c49ca47b9680adbeef79da3a7811b0\"},",
          "2414:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:200a23239781f46149e6a415f1e870c5ef1e712939fe8fa63035cd053ac2638e\"},",
          "2415:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:58b1d5dd591973d426cbb2da5e27ba0339209832b2f3315928c9790e13f159e8\"},",
          "2416:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:6b73c67850ca7cae0f6c56f71e356d7e9fa25958d3e18a64927c2d930859b8e4\"},",
          "2417:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:d8761c3c891cc51e90bc9926d6d2f59b27beaf86c74622c8979380a29cc23ac3\"},",
          "2418:     {file = \"rpds_py-0.20.1-cp311-none-win32.whl\", hash = \"sha256:cd945871335a639275eee904caef90041568ce3b42f402c6959b460d25ae8732\"},",
          "2419:     {file = \"rpds_py-0.20.1-cp311-none-win_amd64.whl\", hash = \"sha256:7e21b7031e17c6b0e445f42ccc77f79a97e2687023c5746bfb7a9e45e0921b84\"},",
          "2420:     {file = \"rpds_py-0.20.1-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:36785be22066966a27348444b40389f8444671630063edfb1a2eb04318721e17\"},",
          "2421:     {file = \"rpds_py-0.20.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:142c0a5124d9bd0e2976089484af5c74f47bd3298f2ed651ef54ea728d2ea42c\"},",
          "2422:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dbddc10776ca7ebf2a299c41a4dde8ea0d8e3547bfd731cb87af2e8f5bf8962d\"},",
          "2423:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:15a842bb369e00295392e7ce192de9dcbf136954614124a667f9f9f17d6a216f\"},",
          "2424:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:be5ef2f1fc586a7372bfc355986226484e06d1dc4f9402539872c8bb99e34b01\"},",
          "2425:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dbcf360c9e3399b056a238523146ea77eeb2a596ce263b8814c900263e46031a\"},",
          "2426:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ecd27a66740ffd621d20b9a2f2b5ee4129a56e27bfb9458a3bcc2e45794c96cb\"},",
          "2427:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:d0b937b2a1988f184a3e9e577adaa8aede21ec0b38320d6009e02bd026db04fa\"},",
          "2428:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6889469bfdc1eddf489729b471303739bf04555bb151fe8875931f8564309afc\"},",
          "2429:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:19b73643c802f4eaf13d97f7855d0fb527fbc92ab7013c4ad0e13a6ae0ed23bd\"},",
          "2430:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:3c6afcf2338e7f374e8edc765c79fbcb4061d02b15dd5f8f314a4af2bdc7feb5\"},",
          "2431:     {file = \"rpds_py-0.20.1-cp312-none-win32.whl\", hash = \"sha256:dc73505153798c6f74854aba69cc75953888cf9866465196889c7cdd351e720c\"},",
          "2432:     {file = \"rpds_py-0.20.1-cp312-none-win_amd64.whl\", hash = \"sha256:8bbe951244a838a51289ee53a6bae3a07f26d4e179b96fc7ddd3301caf0518eb\"},",
          "2433:     {file = \"rpds_py-0.20.1-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:6ca91093a4a8da4afae7fe6a222c3b53ee4eef433ebfee4d54978a103435159e\"},",
          "2434:     {file = \"rpds_py-0.20.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:b9c2fe36d1f758b28121bef29ed1dee9b7a2453e997528e7d1ac99b94892527c\"},",
          "2435:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f009c69bc8c53db5dfab72ac760895dc1f2bc1b62ab7408b253c8d1ec52459fc\"},",
          "2436:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:6740a3e8d43a32629bb9b009017ea5b9e713b7210ba48ac8d4cb6d99d86c8ee8\"},",
          "2437:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:32b922e13d4c0080d03e7b62991ad7f5007d9cd74e239c4b16bc85ae8b70252d\"},",
          "2438:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fe00a9057d100e69b4ae4a094203a708d65b0f345ed546fdef86498bf5390982\"},",
          "2439:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:49fe9b04b6fa685bd39237d45fad89ba19e9163a1ccaa16611a812e682913496\"},",
          "2440:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:aa7ac11e294304e615b43f8c441fee5d40094275ed7311f3420d805fde9b07b4\"},",
          "2441:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:6aa97af1558a9bef4025f8f5d8c60d712e0a3b13a2fe875511defc6ee77a1ab7\"},",
          "2442:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:483b29f6f7ffa6af845107d4efe2e3fa8fb2693de8657bc1849f674296ff6a5a\"},",
          "2443:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:37fe0f12aebb6a0e3e17bb4cd356b1286d2d18d2e93b2d39fe647138458b4bcb\"},",
          "2444:     {file = \"rpds_py-0.20.1-cp313-none-win32.whl\", hash = \"sha256:a624cc00ef2158e04188df5e3016385b9353638139a06fb77057b3498f794782\"},",
          "2445:     {file = \"rpds_py-0.20.1-cp313-none-win_amd64.whl\", hash = \"sha256:b71b8666eeea69d6363248822078c075bac6ed135faa9216aa85f295ff009b1e\"},",
          "2446:     {file = \"rpds_py-0.20.1-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:5b48e790e0355865197ad0aca8cde3d8ede347831e1959e158369eb3493d2191\"},",
          "2447:     {file = \"rpds_py-0.20.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:3e310838a5801795207c66c73ea903deda321e6146d6f282e85fa7e3e4854804\"},",
          "2448:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2249280b870e6a42c0d972339e9cc22ee98730a99cd7f2f727549af80dd5a963\"},",
          "2449:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e79059d67bea28b53d255c1437b25391653263f0e69cd7dec170d778fdbca95e\"},",
          "2450:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2b431c777c9653e569986ecf69ff4a5dba281cded16043d348bf9ba505486f36\"},",
          "2451:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:da584ff96ec95e97925174eb8237e32f626e7a1a97888cdd27ee2f1f24dd0ad8\"},",
          "2452:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:02a0629ec053fc013808a85178524e3cb63a61dbc35b22499870194a63578fb9\"},",
          "2453:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:fbf15aff64a163db29a91ed0868af181d6f68ec1a3a7d5afcfe4501252840bad\"},",
          "2454:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:07924c1b938798797d60c6308fa8ad3b3f0201802f82e4a2c41bb3fafb44cc28\"},",
          "2455:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:4a5a844f68776a7715ecb30843b453f07ac89bad393431efbf7accca3ef599c1\"},",
          "2456:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:518d2ca43c358929bf08f9079b617f1c2ca6e8848f83c1225c88caeac46e6cbc\"},",
          "2457:     {file = \"rpds_py-0.20.1-cp38-none-win32.whl\", hash = \"sha256:3aea7eed3e55119635a74bbeb80b35e776bafccb70d97e8ff838816c124539f1\"},",
          "2458:     {file = \"rpds_py-0.20.1-cp38-none-win_amd64.whl\", hash = \"sha256:7dca7081e9a0c3b6490a145593f6fe3173a94197f2cb9891183ef75e9d64c425\"},",
          "2459:     {file = \"rpds_py-0.20.1-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:b41b6321805c472f66990c2849e152aff7bc359eb92f781e3f606609eac877ad\"},",
          "2460:     {file = \"rpds_py-0.20.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0a90c373ea2975519b58dece25853dbcb9779b05cc46b4819cb1917e3b3215b6\"},",
          "2461:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:16d4477bcb9fbbd7b5b0e4a5d9b493e42026c0bf1f06f723a9353f5153e75d30\"},",
          "2462:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:84b8382a90539910b53a6307f7c35697bc7e6ffb25d9c1d4e998a13e842a5e83\"},",
          "2463:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:4888e117dd41b9d34194d9e31631af70d3d526efc363085e3089ab1a62c32ed1\"},",
          "2464:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5265505b3d61a0f56618c9b941dc54dc334dc6e660f1592d112cd103d914a6db\"},",
          "2465:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e75ba609dba23f2c95b776efb9dd3f0b78a76a151e96f96cc5b6b1b0004de66f\"},",
          "2466:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:1791ff70bc975b098fe6ecf04356a10e9e2bd7dc21fa7351c1742fdeb9b4966f\"},",
          "2467:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:d126b52e4a473d40232ec2052a8b232270ed1f8c9571aaf33f73a14cc298c24f\"},",
          "2468:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:c14937af98c4cc362a1d4374806204dd51b1e12dded1ae30645c298e5a5c4cb1\"},",
          "2469:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:3d089d0b88996df627693639d123c8158cff41c0651f646cd8fd292c7da90eaf\"},",
          "2470:     {file = \"rpds_py-0.20.1-cp39-none-win32.whl\", hash = \"sha256:653647b8838cf83b2e7e6a0364f49af96deec64d2a6578324db58380cff82aca\"},",
          "2471:     {file = \"rpds_py-0.20.1-cp39-none-win_amd64.whl\", hash = \"sha256:fa41a64ac5b08b292906e248549ab48b69c5428f3987b09689ab2441f267d04d\"},",
          "2472:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7a07ced2b22f0cf0b55a6a510078174c31b6d8544f3bc00c2bcee52b3d613f74\"},",
          "2473:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:68cb0a499f2c4a088fd2f521453e22ed3527154136a855c62e148b7883b99f9a\"},",
          "2474:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fa3060d885657abc549b2a0f8e1b79699290e5d83845141717c6c90c2df38311\"},",
          "2475:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:95f3b65d2392e1c5cec27cff08fdc0080270d5a1a4b2ea1d51d5f4a2620ff08d\"},",
          "2476:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2cc3712a4b0b76a1d45a9302dd2f53ff339614b1c29603a911318f2357b04dd2\"},",
          "2477:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5d4eea0761e37485c9b81400437adb11c40e13ef513375bbd6973e34100aeb06\"},",
          "2478:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7f5179583d7a6cdb981151dd349786cbc318bab54963a192692d945dd3f6435d\"},",
          "2479:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2fbb0ffc754490aff6dabbf28064be47f0f9ca0b9755976f945214965b3ace7e\"},",
          "2480:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:a94e52537a0e0a85429eda9e49f272ada715506d3b2431f64b8a3e34eb5f3e75\"},",
          "2481:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:92b68b79c0da2a980b1c4197e56ac3dd0c8a149b4603747c4378914a68706979\"},",
          "2482:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:93da1d3db08a827eda74356f9f58884adb254e59b6664f64cc04cdff2cc19b0d\"},",
          "2483:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:754bbed1a4ca48479e9d4182a561d001bbf81543876cdded6f695ec3d465846b\"},",
          "2484:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:ca449520e7484534a2a44faf629362cae62b660601432d04c482283c47eaebab\"},",
          "2485:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:9c4cb04a16b0f199a8c9bf807269b2f63b7b5b11425e4a6bd44bd6961d28282c\"},",
          "2486:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb63804105143c7e24cee7db89e37cb3f3941f8e80c4379a0b355c52a52b6780\"},",
          "2487:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:55cd1fa4ecfa6d9f14fbd97ac24803e6f73e897c738f771a9fe038f2f11ff07c\"},",
          "2488:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:0f8f741b6292c86059ed175d80eefa80997125b7c478fb8769fd9ac8943a16c0\"},",
          "2489:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:0fc212779bf8411667234b3cdd34d53de6c2b8b8b958e1e12cb473a5f367c338\"},",
          "2490:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0ad56edabcdb428c2e33bbf24f255fe2b43253b7d13a2cdbf05de955217313e6\"},",
          "2491:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:0a3a1e9ee9728b2c1734f65d6a1d376c6f2f6fdcc13bb007a08cc4b1ff576dc5\"},",
          "2492:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:e13de156137b7095442b288e72f33503a469aa1980ed856b43c353ac86390519\"},",
          "2493:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:07f59760ef99f31422c49038964b31c4dfcfeb5d2384ebfc71058a7c9adae2d2\"},",
          "2494:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:59240685e7da61fb78f65a9f07f8108e36a83317c53f7b276b4175dc44151684\"},",
          "2495:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:83cba698cfb3c2c5a7c3c6bac12fe6c6a51aae69513726be6411076185a8b24a\"},",
          "2496:     {file = \"rpds_py-0.20.1.tar.gz\", hash = \"sha256:e1791c4aabd117653530dccd24108fa03cc6baf21f58b950d0a73c3b3b29a350\"},",
          "",
          "[Added Lines]",
          "2389: version = \"0.21.0\"",
          "2392: python-versions = \">=3.9\"",
          "2394:     {file = \"rpds_py-0.21.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:a017f813f24b9df929674d0332a374d40d7f0162b326562daae8066b502d0590\"},",
          "2395:     {file = \"rpds_py-0.21.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:20cc1ed0bcc86d8e1a7e968cce15be45178fd16e2ff656a243145e0b439bd250\"},",
          "2396:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ad116dda078d0bc4886cb7840e19811562acdc7a8e296ea6ec37e70326c1b41c\"},",
          "2397:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:808f1ac7cf3b44f81c9475475ceb221f982ef548e44e024ad5f9e7060649540e\"},",
          "2398:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:de552f4a1916e520f2703ec474d2b4d3f86d41f353e7680b597512ffe7eac5d0\"},",
          "2399:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:efec946f331349dfc4ae9d0e034c263ddde19414fe5128580f512619abed05f1\"},",
          "2400:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b80b4690bbff51a034bfde9c9f6bf9357f0a8c61f548942b80f7b66356508bf5\"},",
          "2401:     {file = \"rpds_py-0.21.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:085ed25baac88953d4283e5b5bd094b155075bb40d07c29c4f073e10623f9f2e\"},",
          "2402:     {file = \"rpds_py-0.21.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:daa8efac2a1273eed2354397a51216ae1e198ecbce9036fba4e7610b308b6153\"},",
          "2403:     {file = \"rpds_py-0.21.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:95a5bad1ac8a5c77b4e658671642e4af3707f095d2b78a1fdd08af0dfb647624\"},",
          "2404:     {file = \"rpds_py-0.21.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:3e53861b29a13d5b70116ea4230b5f0f3547b2c222c5daa090eb7c9c82d7f664\"},",
          "2405:     {file = \"rpds_py-0.21.0-cp310-none-win32.whl\", hash = \"sha256:ea3a6ac4d74820c98fcc9da4a57847ad2cc36475a8bd9683f32ab6d47a2bd682\"},",
          "2406:     {file = \"rpds_py-0.21.0-cp310-none-win_amd64.whl\", hash = \"sha256:b8f107395f2f1d151181880b69a2869c69e87ec079c49c0016ab96860b6acbe5\"},",
          "2407:     {file = \"rpds_py-0.21.0-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:5555db3e618a77034954b9dc547eae94166391a98eb867905ec8fcbce1308d95\"},",
          "2408:     {file = \"rpds_py-0.21.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:97ef67d9bbc3e15584c2f3c74bcf064af36336c10d2e21a2131e123ce0f924c9\"},",
          "2409:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4ab2c2a26d2f69cdf833174f4d9d86118edc781ad9a8fa13970b527bf8236027\"},",
          "2410:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:4e8921a259f54bfbc755c5bbd60c82bb2339ae0324163f32868f63f0ebb873d9\"},",
          "2411:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8a7ff941004d74d55a47f916afc38494bd1cfd4b53c482b77c03147c91ac0ac3\"},",
          "2412:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5145282a7cd2ac16ea0dc46b82167754d5e103a05614b724457cffe614f25bd8\"},",
          "2413:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:de609a6f1b682f70bb7163da745ee815d8f230d97276db049ab447767466a09d\"},",
          "2414:     {file = \"rpds_py-0.21.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:40c91c6e34cf016fa8e6b59d75e3dbe354830777fcfd74c58b279dceb7975b75\"},",
          "2415:     {file = \"rpds_py-0.21.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:d2132377f9deef0c4db89e65e8bb28644ff75a18df5293e132a8d67748397b9f\"},",
          "2416:     {file = \"rpds_py-0.21.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:0a9e0759e7be10109645a9fddaaad0619d58c9bf30a3f248a2ea57a7c417173a\"},",
          "2417:     {file = \"rpds_py-0.21.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:9e20da3957bdf7824afdd4b6eeb29510e83e026473e04952dca565170cd1ecc8\"},",
          "2418:     {file = \"rpds_py-0.21.0-cp311-none-win32.whl\", hash = \"sha256:f71009b0d5e94c0e86533c0b27ed7cacc1239cb51c178fd239c3cfefefb0400a\"},",
          "2419:     {file = \"rpds_py-0.21.0-cp311-none-win_amd64.whl\", hash = \"sha256:e168afe6bf6ab7ab46c8c375606298784ecbe3ba31c0980b7dcbb9631dcba97e\"},",
          "2420:     {file = \"rpds_py-0.21.0-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:30b912c965b2aa76ba5168fd610087bad7fcde47f0a8367ee8f1876086ee6d1d\"},",
          "2421:     {file = \"rpds_py-0.21.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:ca9989d5d9b1b300bc18e1801c67b9f6d2c66b8fd9621b36072ed1df2c977f72\"},",
          "2422:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6f54e7106f0001244a5f4cf810ba8d3f9c542e2730821b16e969d6887b664266\"},",
          "2423:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:fed5dfefdf384d6fe975cc026886aece4f292feaf69d0eeb716cfd3c5a4dd8be\"},",
          "2424:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:590ef88db231c9c1eece44dcfefd7515d8bf0d986d64d0caf06a81998a9e8cab\"},",
          "2425:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f983e4c2f603c95dde63df633eec42955508eefd8d0f0e6d236d31a044c882d7\"},",
          "2426:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b229ce052ddf1a01c67d68166c19cb004fb3612424921b81c46e7ea7ccf7c3bf\"},",
          "2427:     {file = \"rpds_py-0.21.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:ebf64e281a06c904a7636781d2e973d1f0926a5b8b480ac658dc0f556e7779f4\"},",
          "2428:     {file = \"rpds_py-0.21.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:998a8080c4495e4f72132f3d66ff91f5997d799e86cec6ee05342f8f3cda7dca\"},",
          "2429:     {file = \"rpds_py-0.21.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:98486337f7b4f3c324ab402e83453e25bb844f44418c066623db88e4c56b7c7b\"},",
          "2430:     {file = \"rpds_py-0.21.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:a78d8b634c9df7f8d175451cfeac3810a702ccb85f98ec95797fa98b942cea11\"},",
          "2431:     {file = \"rpds_py-0.21.0-cp312-none-win32.whl\", hash = \"sha256:a58ce66847711c4aa2ecfcfaff04cb0327f907fead8945ffc47d9407f41ff952\"},",
          "2432:     {file = \"rpds_py-0.21.0-cp312-none-win_amd64.whl\", hash = \"sha256:e860f065cc4ea6f256d6f411aba4b1251255366e48e972f8a347cf88077b24fd\"},",
          "2433:     {file = \"rpds_py-0.21.0-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:ee4eafd77cc98d355a0d02f263efc0d3ae3ce4a7c24740010a8b4012bbb24937\"},",
          "2434:     {file = \"rpds_py-0.21.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:688c93b77e468d72579351a84b95f976bd7b3e84aa6686be6497045ba84be560\"},",
          "2435:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c38dbf31c57032667dd5a2f0568ccde66e868e8f78d5a0d27dcc56d70f3fcd3b\"},",
          "2436:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:2d6129137f43f7fa02d41542ffff4871d4aefa724a5fe38e2c31a4e0fd343fb0\"},",
          "2437:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:520ed8b99b0bf86a176271f6fe23024323862ac674b1ce5b02a72bfeff3fff44\"},",
          "2438:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:aaeb25ccfb9b9014a10eaf70904ebf3f79faaa8e60e99e19eef9f478651b9b74\"},",
          "2439:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:af04ac89c738e0f0f1b913918024c3eab6e3ace989518ea838807177d38a2e94\"},",
          "2440:     {file = \"rpds_py-0.21.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b9b76e2afd585803c53c5b29e992ecd183f68285b62fe2668383a18e74abe7a3\"},",
          "2441:     {file = \"rpds_py-0.21.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:5afb5efde74c54724e1a01118c6e5c15e54e642c42a1ba588ab1f03544ac8c7a\"},",
          "2442:     {file = \"rpds_py-0.21.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:52c041802a6efa625ea18027a0723676a778869481d16803481ef6cc02ea8cb3\"},",
          "2443:     {file = \"rpds_py-0.21.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:ee1e4fc267b437bb89990b2f2abf6c25765b89b72dd4a11e21934df449e0c976\"},",
          "2444:     {file = \"rpds_py-0.21.0-cp313-none-win32.whl\", hash = \"sha256:0c025820b78817db6a76413fff6866790786c38f95ea3f3d3c93dbb73b632202\"},",
          "2445:     {file = \"rpds_py-0.21.0-cp313-none-win_amd64.whl\", hash = \"sha256:320c808df533695326610a1b6a0a6e98f033e49de55d7dc36a13c8a30cfa756e\"},",
          "2446:     {file = \"rpds_py-0.21.0-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:2c51d99c30091f72a3c5d126fad26236c3f75716b8b5e5cf8effb18889ced928\"},",
          "2447:     {file = \"rpds_py-0.21.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:cbd7504a10b0955ea287114f003b7ad62330c9e65ba012c6223dba646f6ffd05\"},",
          "2448:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6dcc4949be728ede49e6244eabd04064336012b37f5c2200e8ec8eb2988b209c\"},",
          "2449:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:f414da5c51bf350e4b7960644617c130140423882305f7574b6cf65a3081cecb\"},",
          "2450:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9afe42102b40007f588666bc7de82451e10c6788f6f70984629db193849dced1\"},",
          "2451:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3b929c2bb6e29ab31f12a1117c39f7e6d6450419ab7464a4ea9b0b417174f044\"},",
          "2452:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8404b3717da03cbf773a1d275d01fec84ea007754ed380f63dfc24fb76ce4592\"},",
          "2453:     {file = \"rpds_py-0.21.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:e12bb09678f38b7597b8346983d2323a6482dcd59e423d9448108c1be37cac9d\"},",
          "2454:     {file = \"rpds_py-0.21.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:58a0e345be4b18e6b8501d3b0aa540dad90caeed814c515e5206bb2ec26736fd\"},",
          "2455:     {file = \"rpds_py-0.21.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:c3761f62fcfccf0864cc4665b6e7c3f0c626f0380b41b8bd1ce322103fa3ef87\"},",
          "2456:     {file = \"rpds_py-0.21.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:c2b2f71c6ad6c2e4fc9ed9401080badd1469fa9889657ec3abea42a3d6b2e1ed\"},",
          "2457:     {file = \"rpds_py-0.21.0-cp39-none-win32.whl\", hash = \"sha256:b21747f79f360e790525e6f6438c7569ddbfb1b3197b9e65043f25c3c9b489d8\"},",
          "2458:     {file = \"rpds_py-0.21.0-cp39-none-win_amd64.whl\", hash = \"sha256:0626238a43152918f9e72ede9a3b6ccc9e299adc8ade0d67c5e142d564c9a83d\"},",
          "2459:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:6b4ef7725386dc0762857097f6b7266a6cdd62bfd209664da6712cb26acef035\"},",
          "2460:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:6bc0e697d4d79ab1aacbf20ee5f0df80359ecf55db33ff41481cf3e24f206919\"},",
          "2461:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:da52d62a96e61c1c444f3998c434e8b263c384f6d68aca8274d2e08d1906325c\"},",
          "2462:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:98e4fe5db40db87ce1c65031463a760ec7906ab230ad2249b4572c2fc3ef1f9f\"},",
          "2463:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:30bdc973f10d28e0337f71d202ff29345320f8bc49a31c90e6c257e1ccef4333\"},",
          "2464:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:faa5e8496c530f9c71f2b4e1c49758b06e5f4055e17144906245c99fa6d45356\"},",
          "2465:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:32eb88c30b6a4f0605508023b7141d043a79b14acb3b969aa0b4f99b25bc7d4a\"},",
          "2466:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a89a8ce9e4e75aeb7fa5d8ad0f3fecdee813802592f4f46a15754dcb2fd6b061\"},",
          "2467:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:241e6c125568493f553c3d0fdbb38c74babf54b45cef86439d4cd97ff8feb34d\"},",
          "2468:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:3b766a9f57663396e4f34f5140b3595b233a7b146e94777b97a8413a1da1be18\"},",
          "2469:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:af4a644bf890f56e41e74be7d34e9511e4954894d544ec6b8efe1e21a1a8da6c\"},",
          "2470:     {file = \"rpds_py-0.21.0-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:3e30a69a706e8ea20444b98a49f386c17b26f860aa9245329bab0851ed100677\"},",
          "2471:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:031819f906bb146561af051c7cef4ba2003d28cff07efacef59da973ff7969ba\"},",
          "2472:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:b876f2bc27ab5954e2fd88890c071bd0ed18b9c50f6ec3de3c50a5ece612f7a6\"},",
          "2473:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dc5695c321e518d9f03b7ea6abb5ea3af4567766f9852ad1560f501b17588c7b\"},",
          "2474:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:b4de1da871b5c0fd5537b26a6fc6814c3cc05cabe0c941db6e9044ffbb12f04a\"},",
          "2475:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:878f6fea96621fda5303a2867887686d7a198d9e0f8a40be100a63f5d60c88c9\"},",
          "2476:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a8eeec67590e94189f434c6d11c426892e396ae59e4801d17a93ac96b8c02a6c\"},",
          "2477:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1ff2eba7f6c0cb523d7e9cff0903f2fe1feff8f0b2ceb6bd71c0e20a4dcee271\"},",
          "2478:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a429b99337062877d7875e4ff1a51fe788424d522bd64a8c0a20ef3021fdb6ed\"},",
          "2479:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:d167e4dbbdac48bd58893c7e446684ad5d425b407f9336e04ab52e8b9194e2ed\"},",
          "2480:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:4eb2de8a147ffe0626bfdc275fc6563aa7bf4b6db59cf0d44f0ccd6ca625a24e\"},",
          "2481:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:e78868e98f34f34a88e23ee9ccaeeec460e4eaf6db16d51d7a9b883e5e785a5e\"},",
          "2482:     {file = \"rpds_py-0.21.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:4991ca61656e3160cdaca4851151fd3f4a92e9eba5c7a530ab030d6aee96ec89\"},",
          "2483:     {file = \"rpds_py-0.21.0.tar.gz\", hash = \"sha256:ed6378c9d66d0de903763e7706383d60c33829581f0adff47b6535f1802fa6db\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fba86ca87b29f3062b50962bb39685cb18ce11ae",
      "candidate_info": {
        "commit_hash": "fba86ca87b29f3062b50962bb39685cb18ce11ae",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/fba86ca87b29f3062b50962bb39685cb18ce11ae",
        "files": [
          "mobsf/MobSF/init.py",
          "pyproject.toml"
        ],
        "message": "Version bump",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "22: BANNER = r\"\"\"",
          "23:   __  __       _    ____  _____       _  _    ____",
          "24:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  |___ \\",
          "",
          "[Removed Lines]",
          "21: VERSION = '4.2.1'",
          "",
          "[Added Lines]",
          "21: VERSION = '4.2.2'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b46c0037ace3422cc92ee9e1cffb32ccd222b594",
      "candidate_info": {
        "commit_hash": "b46c0037ace3422cc92ee9e1cffb32ccd222b594",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/b46c0037ace3422cc92ee9e1cffb32ccd222b594",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/authentication.py",
          "mobsf/MobSF/views/saml2.py",
          "mobsf/templates/403.html",
          "mobsf/templates/404.html",
          "mobsf/templates/500.html",
          "mobsf/templates/auth/login.html",
          "mobsf/templates/base/nav.html",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "[EFR][HOTFIX] SSO Support + Okta SSO Documentation (#2389)\n\n* Add support for SSO with SAML2.0\n* Bump Deps\n* Docs Updated\n* Bump MobSF version",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/authentication.py||mobsf/MobSF/views/authentication.py",
          "mobsf/MobSF/views/saml2.py||mobsf/MobSF/views/saml2.py",
          "mobsf/templates/403.html||mobsf/templates/403.html",
          "mobsf/templates/404.html||mobsf/templates/404.html",
          "mobsf/templates/500.html||mobsf/templates/500.html",
          "mobsf/templates/auth/login.html||mobsf/templates/auth/login.html",
          "mobsf/templates/base/nav.html||mobsf/templates/base/nav.html",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: logger = logging.getLogger(__name__)",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _  _    ___",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / _ \\",
          "",
          "[Removed Lines]",
          "13: VERSION = '4.0.0'",
          "",
          "[Added Lines]",
          "13: VERSION = '4.0.1'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: # ENTERPRISE FEATURE REQUESTS",
          "331: # ===========================",
          "332: EFR_01 = os.getenv('EFR_01', '0')",
          "333: # USER CONFIGURATION",
          "334: # ===================",
          "335: if CONFIG_HOME:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: # SAML SSO",
          "334: IDP_METADATA_URL = os.getenv('MOBSF_IDP_METADATA_URL')",
          "335: IDP_ENTITY_ID = os.getenv('MOBSF_IDP_ENTITY_ID')",
          "336: IDP_SSO_URL = os.getenv('MOBSF_IDP_SSO_URL')",
          "337: IDP_X509CERT = os.getenv('MOBSF_IDP_X509CERT')",
          "338: IDP_IS_ADFS = os.getenv('MOBSF_IDP_IS_ADFS', '0')",
          "339: SP_ALLOW_PASSWORD = os.getenv('MOBSF_SP_ALLOW_PASSWORD', '0')",
          "340: # ===================",
          "",
          "---------------"
        ],
        "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py": [
          "File: mobsf/MobSF/urls.py -> mobsf/MobSF/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     authentication,",
          "27:     authorization,",
          "28:     home,",
          "29: )",
          "30: from mobsf.MobSF.views.api import api_static_analysis as api_sz",
          "31: from mobsf.MobSF.views.api import api_android_dynamic_analysis as api_dz",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     saml2,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     re_path(r'^delete_user/$',",
          "72:             authorization.delete_user,",
          "73:             name='delete_user'),",
          "74:     # REST API",
          "75:     # Static Analysis",
          "76:     re_path(r'^api/v1/upload$', api_sz.api_upload),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     # SAML2",
          "76:     re_path(r'^sso/$',",
          "77:             saml2.saml_login,",
          "78:             name='saml_login'),",
          "79:     re_path(r'^sso/acs/$',",
          "80:             saml2.saml_acs,",
          "81:             name='saml_acs'),",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/authentication.py||mobsf/MobSF/views/authentication.py": [
          "File: mobsf/MobSF/views/authentication.py -> mobsf/MobSF/views/authentication.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     \"\"\"Login Controller.\"\"\"",
          "47:     if settings.DISABLE_AUTHENTICATION == '1':",
          "48:         return redirect('/')",
          "49:     nextp = request.GET.get('next', '')",
          "50:     redirect_url = nextp if nextp.startswith('/') else '/'",
          "51:     if request.user.is_authenticated:",
          "52:         return redirect(redirect_url)",
          "53:     if request.method == 'POST':",
          "54:         form = AuthenticationForm(request, request.POST)",
          "55:         if form.is_valid():",
          "56:             user = form.get_user()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     sso = (settings.IDP_METADATA_URL",
          "50:            or (settings.IDP_SSO_URL",
          "51:                and settings.IDP_ENTITY_ID",
          "52:                and settings.IDP_X509CERT))",
          "53:     if not sso:",
          "54:         allow_pwd = True",
          "55:     elif bool(settings.SP_ALLOW_PASSWORD == '1'):",
          "56:         allow_pwd = True",
          "57:     else:",
          "58:         allow_pwd = False",
          "64:         if sso and not allow_pwd:",
          "65:             return redirect('/')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         'version': settings.VERSION,",
          "64:         'next': redirect_url,",
          "65:         'form': form,",
          "66:     }",
          "67:     return render(request, 'auth/login.html', context)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         'sso': sso,",
          "79:         'allow_pwd': allow_pwd,",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/saml2.py||mobsf/MobSF/views/saml2.py": [
          "File: mobsf/MobSF/views/saml2.py -> mobsf/MobSF/views/saml2.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"SAML2 SSO logic.\"\"\"",
          "2: import logging",
          "4: from onelogin.saml2.auth import (",
          "5:     OneLogin_Saml2_Auth,",
          "6: )",
          "7: from onelogin.saml2.idp_metadata_parser import (",
          "8:     OneLogin_Saml2_IdPMetadataParser,",
          "9: )",
          "11: from django.conf import settings",
          "12: from django.contrib.auth.models import (",
          "13:     Group,",
          "14:     User,",
          "15: )",
          "16: from django.contrib.auth import login",
          "17: from django.urls import reverse",
          "18: from django.shortcuts import redirect",
          "19: from django.views.decorators.http import require_http_methods",
          "21: from mobsf.MobSF.views.authorization import (",
          "22:     MAINTAINER_GROUP,",
          "23:     VIEWER_GROUP,",
          "24: )",
          "25: from mobsf.MobSF.utils import (",
          "26:     print_n_send_error_response,",
          "27: )",
          "29: logger = logging.getLogger(__name__)",
          "30: ASSERTION_IDS = set()",
          "33: def init_saml_auth(req):",
          "34:     \"\"\"Initialize SAML auth.\"\"\"",
          "35:     try:",
          "36:         host = req['http_host']",
          "37:         if req['https'] == 'on':",
          "38:             host = f'https://{host}'",
          "39:         else:",
          "40:             host = f'http://{host}'",
          "41:         acs_route = reverse('saml_acs')",
          "42:         saml_settings = {",
          "43:             'strict': True,",
          "44:             'debug': True,",
          "45:             'sp': {",
          "46:                 'entityId': f'{host}{acs_route}',",
          "47:                 'assertionConsumerService': {",
          "48:                     'url': f'{host}{acs_route}',",
          "49:                     'binding': ('urn:oasis:names:tc:'",
          "50:                                 'SAML:2.0:bindings:HTTP-POST'),",
          "51:                 },",
          "52:             },",
          "53:             'idp': {",
          "54:                 'entityId': settings.IDP_ENTITY_ID,",
          "55:                 'singleSignOnService': {",
          "56:                     'url': settings.IDP_SSO_URL,",
          "57:                     'binding': ('urn:oasis:names:tc:'",
          "58:                                 'SAML:2.0:bindings:HTTP-Redirect'),",
          "59:                 },",
          "60:                 'x509cert': settings.IDP_X509CERT,",
          "61:             },",
          "62:         }",
          "63:         try:",
          "64:             idp_data = None",
          "65:             if settings.IDP_METADATA_URL:",
          "66:                 idp_data = OneLogin_Saml2_IdPMetadataParser.parse_remote(",
          "67:                     settings.IDP_METADATA_URL,",
          "68:                     timeout=5)",
          "69:             if idp_data:",
          "70:                 saml_settings['idp'] = idp_data['idp']",
          "71:         except Exception:",
          "72:             logger.exception('[ERROR] parsing IdP metadata URL.')",
          "73:         auth = OneLogin_Saml2_Auth(req, saml_settings)",
          "74:     except Exception:",
          "75:         logger.exception('[ERROR] initializing SAML auth.')",
          "76:     return auth",
          "79: def prepare_django_request(request):",
          "80:     \"\"\"Prepare Django request for SAML.\"\"\"",
          "81:     result = {",
          "82:         'https': 'on' if request.is_secure() else 'off',",
          "83:         'http_host': request.META['HTTP_HOST'],",
          "84:         'script_name': request.META['PATH_INFO'],",
          "85:         'server_port': request.META['SERVER_PORT'],",
          "86:         'get_data': request.GET.copy(),",
          "87:         'post_data': request.POST.copy(),",
          "88:         'lowercase_urlencoding': bool(settings.IDP_IS_ADFS == '1'),",
          "89:         'query_string': request.META['QUERY_STRING'],",
          "90:     }",
          "91:     return result",
          "94: def check_replay(auth):",
          "95:     \"\"\"Check for replay attack.\"\"\"",
          "96:     request_id = auth.get_last_assertion_id()",
          "97:     if request_id:",
          "98:         if request_id in ASSERTION_IDS:",
          "99:             raise Exception('Replay attack detected.')",
          "100:         ASSERTION_IDS.add(request_id)",
          "103: def get_redirect_url(req):",
          "104:     \"\"\"Check for open redirect and return redirect url.\"\"\"",
          "105:     redirect_url = '/'",
          "106:     if 'RelayState' not in req['post_data']:",
          "107:         return redirect_url",
          "108:     relay_state = req['post_data']['RelayState']",
          "109:     # Allow only relative URLs",
          "110:     if (relay_state and relay_state.startswith('/')):",
          "111:         redirect_url = relay_state",
          "112:     return redirect_url",
          "115: def get_user_role(roles):",
          "116:     \"\"\"Get user role.\"\"\"",
          "117:     mrole = any(MAINTAINER_GROUP.lower() in gp.lower() for gp in roles)",
          "118:     if mrole:",
          "119:         return MAINTAINER_GROUP",
          "120:     return VIEWER_GROUP",
          "123: @require_http_methods(['GET'])",
          "124: def saml_login(request):",
          "125:     \"\"\"Handle SSO Login.\"\"\"",
          "126:     try:",
          "127:         if settings.DISABLE_AUTHENTICATION == '1':",
          "128:             return redirect('/')",
          "129:         req = prepare_django_request(request)",
          "130:         auth = init_saml_auth(req)",
          "131:         nextp = request.GET.get('next', '')",
          "132:         redirect_url = nextp if nextp.startswith('/') else '/'",
          "133:         return redirect(auth.login(return_to=redirect_url))",
          "134:     except Exception as exp:",
          "135:         return print_n_send_error_response(",
          "136:             request,",
          "137:             exp,",
          "138:             False)",
          "141: @require_http_methods(['POST'])",
          "142: def saml_acs(request):",
          "143:     \"\"\"Handle SSO Assertion Consumer Service.\"\"\"",
          "144:     try:",
          "145:         if settings.DISABLE_AUTHENTICATION == '1':",
          "146:             return redirect('/')",
          "147:         req = prepare_django_request(request)",
          "148:         auth = init_saml_auth(req)",
          "149:         auth.process_response()",
          "150:         check_replay(auth)",
          "151:         if not auth.is_authenticated():",
          "152:             raise Exception(",
          "153:                 'SAML authentication failed.')",
          "154:         # Extract user attributes for AuthZ and AuthN",
          "155:         attributes = auth.get_attributes()",
          "156:         if not attributes.get('email'):",
          "157:             raise Exception(",
          "158:                 'email attribute not found in SAML response.')",
          "159:         if not attributes.get('role'):",
          "160:             raise Exception(",
          "161:                 'role attribute not found in SAML response.')",
          "162:         email = attributes['email'][0]",
          "163:         role = get_user_role(attributes['role'])",
          "164:         if User.objects.filter(username=email).exists():",
          "165:             user = User.objects.get(username=email)",
          "166:             user.groups.clear()",
          "167:             user.groups.add(Group.objects.get(name=role))",
          "168:             login(request, user)",
          "169:         else:",
          "170:             user = User.objects.create_user(",
          "171:                 username=email,",
          "172:                 email=email)",
          "173:             user.is_staff = False",
          "174:             user.groups.add(Group.objects.get(name=role))",
          "175:             login(request, user)",
          "176:         return redirect(get_redirect_url(req))",
          "177:     except Exception as exp:",
          "178:         return print_n_send_error_response(",
          "179:             request,",
          "180:             exp,",
          "181:             False)",
          "",
          "---------------"
        ],
        "mobsf/templates/403.html||mobsf/templates/403.html": [
          "File: mobsf/templates/403.html -> mobsf/templates/403.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: </head>",
          "20: <body class=\"hold-transition sidebar-collapse layout-fixed layout-navbar-fixed\">",
          "21: <div class=\"wrapper\">",
          "24: <div class=\"content-wrapper\">",
          "25:     <div class=\"content-header\">",
          "26:     </div>",
          "",
          "[Removed Lines]",
          "22:  {% include \"base/nav.html\" %}",
          "",
          "[Added Lines]",
          "22:  {% include \"base/nav.html\" %}",
          "",
          "---------------"
        ],
        "mobsf/templates/404.html||mobsf/templates/404.html": [
          "File: mobsf/templates/404.html -> mobsf/templates/404.html"
        ],
        "mobsf/templates/500.html||mobsf/templates/500.html": [
          "File: mobsf/templates/500.html -> mobsf/templates/500.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: </head>",
          "20: <body class=\"hold-transition sidebar-collapse layout-fixed layout-navbar-fixed\">",
          "21: <div class=\"wrapper\">",
          "24:  <div class=\"content-wrapper\">",
          "25:   <div class=\"content-header\">",
          "",
          "[Removed Lines]",
          "22:  {% include \"base/nav.html\" %}",
          "",
          "[Added Lines]",
          "23:     <!-- Navbar -->",
          "24:     <nav class=\"main-header navbar navbar-expand navbar-dark navbar-primary\">",
          "25:       <ul class=\"navbar-nav\">",
          "26:         <li class=\"nav-item\">",
          "27:             <a id=\"nbar\" class=\"nav-link\" data-widget=\"pushmenu\" href=\"#\"><i class=\"fas fa-bars\"></i></a>",
          "28:           </li>",
          "29:       </ul>",
          "30:       <!-- Right navbar links -->",
          "31:       <ul class=\"navbar-nav ml-auto\">",
          "32:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'recent' %}\" class=\"nav-link\">RECENT SCANS</a></li>",
          "33:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'home' %}\" class=\"nav-link\">STATIC ANALYZER</a></li>",
          "34:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'dynamic' %}\" class=\"nav-link\">DYNAMIC ANALYZER</a></li>",
          "35:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'api_docs' %}\" class=\"nav-link\">API</a></li>",
          "36:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'donate' %}\" class=\"nav-link\">DONATE \u2665</a></li>",
          "37:           <li class=\"nav-item d-none d-sm-inline-block\"><a target=\"_blank\" href=\"https://mobsf.github.io/docs/#/\" class=\"nav-link\">DOCS</a></li>",
          "38:           <li class=\"nav-item d-none d-sm-inline-block\"><a href=\"{% url 'about' %}\" class=\"nav-link\">ABOUT</a></li>",
          "40:       <!-- SEARCH FORM -->",
          "41:       <form class=\"form-inline ml-3\" action=\"/search\" method=\"GET\">",
          "42:         <div class=\"input-group input-group-sm\">",
          "43:           <input class=\"form-control form-control-navbar\" id=\"navbar-search-input\" type=\"search\" placeholder=\"Search MD5\" name=\"md5\" aria-label=\"Search\">",
          "44:           <div class=\"input-group-append\">",
          "45:             <button class=\"btn btn-navbar\" type=\"submit\">",
          "46:               <i class=\"fas fa-search\"></i>",
          "47:             </button>",
          "48:           </div>",
          "49:         </div>",
          "50:       </form>",
          "52:     </ul>",
          "53:     </nav>",
          "54:     <!-- /.navbar -->",
          "",
          "---------------"
        ],
        "mobsf/templates/auth/login.html||mobsf/templates/auth/login.html": [
          "File: mobsf/templates/auth/login.html -> mobsf/templates/auth/login.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:                               <h1 class=\"display-2 h-100 d-flex align-items-center justify-content-center\">",
          "23:                                  Mob<strong>SF</strong>",
          "24:                               </h1>",
          "25:                               <form method=\"post\" action=\"{% url 'login' %}?next={{next}}\">",
          "26:                                  {% csrf_token %}",
          "27:                                  {{ form.non_field_errors }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:                               {% if allow_pwd %}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:                                        </label>",
          "57:                                        </div>",
          "58:                                        </div> -->",
          "62:                                  </div>",
          "63:                               </form>",
          "64:                            </div>",
          "65:                         </div>",
          "66:                      </div>",
          "",
          "[Removed Lines]",
          "59:                                     <div class=\"col-4\">",
          "60:                                        <button type=\"submit\" class=\"btn btn-primary btn-block\">Sign In</button>",
          "61:                                     </div>",
          "",
          "[Added Lines]",
          "60:                                  </div>",
          "61:                                  <div class=\"col-12\">",
          "62:                                     <button type=\"submit\" class=\"btn btn-primary btn-block\">Sign In</button>",
          "65:                               {% endif %}",
          "66:                               {% if sso %}",
          "67:                               <hr>",
          "68:                               <p>",
          "69:                               <div class=\"col-12\">",
          "70:                                  <a href=\"{% url 'saml_login' %}?next={{next}}\" class=\"btn btn-primary btn-block\">Sign in with SSO</a>",
          "71:                               </div>",
          "72:                               </p>",
          "73:                               {% endif %}",
          "",
          "---------------"
        ],
        "mobsf/templates/base/nav.html||mobsf/templates/base/nav.html": [
          "File: mobsf/templates/base/nav.html -> mobsf/templates/base/nav.html"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "737: [[package]]",
          "738: name = \"frida\"",
          "740: description = \"Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers\"",
          "741: optional = false",
          "742: python-versions = \">=3.7\"",
          "743: files = [",
          "757: ]",
          "759: [package.dependencies]",
          "",
          "[Removed Lines]",
          "739: version = \"16.2.3\"",
          "744:     {file = \"frida-16.2.3-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:900ffc5b0b39b35f4b5d79ded37f0c99d1ef436c6ebac5e0a0c8872534e4a5ff\"},",
          "745:     {file = \"frida-16.2.3-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:b860e9798b632c9a34c1719df4fb9b7e3a243bc9f06094662a8ebd08586301b1\"},",
          "746:     {file = \"frida-16.2.3-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:916acd3487dbf4b9841fad903e10554a840c749e2b7935a6355680ea4acac078\"},",
          "747:     {file = \"frida-16.2.3-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:a51dceea8efb2194e60db48189389af45619da94a0ff13cd0f0309bf9c33f5b2\"},",
          "748:     {file = \"frida-16.2.3-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:c2b85bb0233deb6b533a8f5a2a293f9942716063d7ac8fd7937d63088d2b6c0d\"},",
          "749:     {file = \"frida-16.2.3-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:8da4c869d3646f3ca3a562302220d75240131a805eb55ae19b45860054d6b713\"},",
          "750:     {file = \"frida-16.2.3-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:ad700c4f5d21a24ccd4f159531a3e704d0dc434c65a6b1937d529fb8b36479e6\"},",
          "751:     {file = \"frida-16.2.3-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:87f4719838a87f7013c3fbaa272986670de2fa6919056fbb53e880cddffb8284\"},",
          "752:     {file = \"frida-16.2.3-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:1b07ef143800f1c6917aa91cfba8720a8b49bf2e1bb8410090b079c14ce5ec50\"},",
          "753:     {file = \"frida-16.2.3-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:1476a1c686a97f04184368ab67f025e019ab4b3fca994df27682c43a43e3ac0c\"},",
          "754:     {file = \"frida-16.2.3-cp37-abi3-win32.whl\", hash = \"sha256:d0541841d1c51dd642d868cbab4148b2c1347763c666d1cd44f862d3b0dc04f6\"},",
          "755:     {file = \"frida-16.2.3-cp37-abi3-win_amd64.whl\", hash = \"sha256:945dfbcaef5001ba3b67e55607235a9aeb09abe218a187d8c680b59b985139a3\"},",
          "756:     {file = \"frida-16.2.3.tar.gz\", hash = \"sha256:81cac61530ce7dc1dcfeb1359d3366eff99205f288469ee5044786a1a65cac4b\"},",
          "",
          "[Added Lines]",
          "739: version = \"16.2.5\"",
          "744:     {file = \"frida-16.2.5-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:2ad75fce6507641b92e9910be81d894631ae7d4b0c61a7cd0f2224edb963e186\"},",
          "745:     {file = \"frida-16.2.5-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:746286dc3e44c21beec3e7818038ce175df2debd850780343564b27995f78d6c\"},",
          "746:     {file = \"frida-16.2.5-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:6ff76a814e1a1fbf492a380c5ace4e415a71bd71f40d250f1593517a31bcc504\"},",
          "747:     {file = \"frida-16.2.5-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:9f05a10c63ce2ef2063e2288ac497c8be311c39664b658f4757003a3ff6a546b\"},",
          "748:     {file = \"frida-16.2.5-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:d0c6082a37c7814d45daddb9744febd52dba691e5c0ef5db2660e66e1b266b6e\"},",
          "749:     {file = \"frida-16.2.5-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:af2d6077aced6c47fe94014f5a0680e541c49897b030b383b8666acd70f015e0\"},",
          "750:     {file = \"frida-16.2.5-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:f53212a24fb190aa10738021f2f8e402ee305621f0bbc528b8de3ff1182d6d0c\"},",
          "751:     {file = \"frida-16.2.5-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:06779eb8e8412c407c55dd1476a18f43232a916dc5fc80dcf1247d2bc1ded553\"},",
          "752:     {file = \"frida-16.2.5-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:d3dfd8206f05e832c00163ba9630a007b0ad83a766225c72f3a3134b50f0d808\"},",
          "753:     {file = \"frida-16.2.5-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:3a1dcf378e370e58af76c8dff5ea93d3c59025193d493b69dc23c48170dafe65\"},",
          "754:     {file = \"frida-16.2.5-cp37-abi3-win32.whl\", hash = \"sha256:6ee90623b2945964b72169a56de12a6d23996b1c93d4310ab3942060cca5e42e\"},",
          "755:     {file = \"frida-16.2.5-cp37-abi3-win_amd64.whl\", hash = \"sha256:42650e5a0595e527cb8fd909e2b32b9d6601ac4dd23b0d051ea46241d13cd6a7\"},",
          "756:     {file = \"frida-16.2.5.tar.gz\", hash = \"sha256:4804e136fd344bbd5d22fee10e38bcbd6762a6f388e36e5146c55ea64b8cbe52\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "894:     {file = \"IP2Location-8.10.0.tar.gz\", hash = \"sha256:f0eea26c655f701406fa9379a38a0b56cc0dc7d0c6a221d44bda5280978a75ab\"},",
          "895: ]",
          "897: [[package]]",
          "898: name = \"itsdangerous\"",
          "899: version = \"2.2.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897: [[package]]",
          "898: name = \"isodate\"",
          "899: version = \"0.6.1\"",
          "900: description = \"An ISO 8601 date/time/duration parser and formatter\"",
          "901: optional = false",
          "902: python-versions = \"*\"",
          "903: files = [",
          "904:     {file = \"isodate-0.6.1-py2.py3-none-any.whl\", hash = \"sha256:0751eece944162659049d35f4f549ed815792b38793f07cf73381c1c87cbed96\"},",
          "905:     {file = \"isodate-0.6.1.tar.gz\", hash = \"sha256:48c5881de7e8b0a0d648cb024c8062dc84e7b840ed81e864c7614fd3c127bde9\"},",
          "906: ]",
          "908: [package.dependencies]",
          "909: six = \"*\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1756: [package.extras]",
          "1757: test = [\"coverage\", \"pycodestyle\", \"pyflakes\", \"pylint\", \"pytest\", \"pytest-cov\"]",
          "1759: [[package]]",
          "1760: name = \"pyyaml\"",
          "1761: version = \"6.0.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1773: [[package]]",
          "1774: name = \"python3-saml\"",
          "1775: version = \"1.16.0\"",
          "1776: description = \"Saml Python Toolkit. Add SAML support to your Python software using this library\"",
          "1777: optional = false",
          "1778: python-versions = \"*\"",
          "1779: files = [",
          "1780:     {file = \"python3-saml-1.16.0.tar.gz\", hash = \"sha256:97c9669aecabc283c6e5fb4eb264f446b6e006f5267d01c9734f9d8bffdac133\"},",
          "1781:     {file = \"python3_saml-1.16.0-py2-none-any.whl\", hash = \"sha256:c49097863c278ff669a337a96c46dc1f25d16307b4bb2679d2d1733cc4f5176a\"},",
          "1782:     {file = \"python3_saml-1.16.0-py3-none-any.whl\", hash = \"sha256:20b97d11b04f01ee22e98f4a38242e2fea2e28fbc7fbc9bdd57cab5ac7fc2d0d\"},",
          "1783: ]",
          "1785: [package.dependencies]",
          "1786: isodate = \">=0.6.1\"",
          "1787: lxml = \">=4.6.5,<4.7.0 || >4.7.0\"",
          "1788: xmlsec = \">=1.3.9\"",
          "1790: [package.extras]",
          "1791: test = [\"coverage (>=4.5.2)\", \"flake8 (>=3.6.0,<=5.0.0)\", \"freezegun (>=0.3.11,<=1.1.0)\", \"pytest (>=4.6)\"]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1819: [[package]]",
          "1820: name = \"requests\"",
          "1822: description = \"Python HTTP for Humans.\"",
          "1823: optional = false",
          "1824: python-versions = \">=3.8\"",
          "1825: files = [",
          "1828: ]",
          "1830: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1821: version = \"2.32.0\"",
          "1826:     {file = \"requests-2.32.0-py3-none-any.whl\", hash = \"sha256:f2c3881dddb70d056c5bd7600a4fae312b2a300e39be6a118d30b90bd27262b5\"},",
          "1827:     {file = \"requests-2.32.0.tar.gz\", hash = \"sha256:fa5490319474c82ef1d2c9bc459d3652e3ae4ef4c4ebdd18a21145a47ca4b6b8\"},",
          "",
          "[Added Lines]",
          "1855: version = \"2.32.2\"",
          "1860:     {file = \"requests-2.32.2-py3-none-any.whl\", hash = \"sha256:fc06670dd0ed212426dfeb94fc1b983d917c4f9847c863f313c9dfaaffb7c23c\"},",
          "1861:     {file = \"requests-2.32.2.tar.gz\", hash = \"sha256:dd951ff5ecf3e3b3aa26b40703ba77495dab41da839ae72ef3c8e5d8e2433289\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1840: [[package]]",
          "1841: name = \"requests-file\"",
          "1843: description = \"File transport adapter for Requests\"",
          "1844: optional = false",
          "1845: python-versions = \"*\"",
          "1846: files = [",
          "1849: ]",
          "1851: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1842: version = \"2.0.0\"",
          "1847:     {file = \"requests-file-2.0.0.tar.gz\", hash = \"sha256:20c5931629c558fda566cacc10cfe2cd502433e628f568c34c80d96a0cc95972\"},",
          "1848:     {file = \"requests_file-2.0.0-py2.py3-none-any.whl\", hash = \"sha256:3e493d390adb44aa102ebea827a48717336d5268968c370eaf19abaf5cae13bf\"},",
          "",
          "[Added Lines]",
          "1876: version = \"2.1.0\"",
          "1881:     {file = \"requests_file-2.1.0-py2.py3-none-any.whl\", hash = \"sha256:cf270de5a4c5874e84599fc5778303d496c10ae5e870bfa378818f35d21bda5c\"},",
          "1882:     {file = \"requests_file-2.1.0.tar.gz\", hash = \"sha256:0f549a3f3b0699415ac04d167e9cb39bccfb730cb832b4d20be3d9867356e658\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2464: [package.dependencies]",
          "2465: h11 = \">=0.9.0,<1\"",
          "2467: [[package]]",
          "2468: name = \"yara-python-dex\"",
          "2469: version = \"1.0.6\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2501: [[package]]",
          "2502: name = \"xmlsec\"",
          "2503: version = \"1.3.14\"",
          "2504: description = \"Python bindings for the XML Security Library\"",
          "2505: optional = false",
          "2506: python-versions = \">=3.5\"",
          "2507: files = [",
          "2508:     {file = \"xmlsec-1.3.14-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:4dea6df3ffcb65d0b215678c3a0fe7bbc66785d6eae81291296e372498bad43a\"},",
          "2509:     {file = \"xmlsec-1.3.14-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:1fa1311f7489d050dde9028f5a2b5849c2927bb09c9a93491cb2f28fdc563912\"},",
          "2510:     {file = \"xmlsec-1.3.14-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:28cd9f513cf01dc0c5b9d9f0728714ecde2e7f46b3b6f63de91f4ae32f3008b3\"},",
          "2511:     {file = \"xmlsec-1.3.14-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:77749b338503fb6e151052c664064b34264f4168e2cb0cca1de78b7e5312a783\"},",
          "2512:     {file = \"xmlsec-1.3.14-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4af81ce8044862ec865782efd353d22abdcd95b92364eef3c934de57ae6d5852\"},",
          "2513:     {file = \"xmlsec-1.3.14-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:cf35a25be3eb6263b2e0544ba26294651113fab79064f994d347a2ca5973e8e2\"},",
          "2514:     {file = \"xmlsec-1.3.14-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:004e8a82e26728bf8a60f8ece1ef3ffafdac30ef538139dfe28870e8503ca64a\"},",
          "2515:     {file = \"xmlsec-1.3.14-cp310-cp310-win32.whl\", hash = \"sha256:e6cbc914d77678db0c8bc39e723d994174633d18f9d6be4665ec29cce978a96d\"},",
          "2516:     {file = \"xmlsec-1.3.14-cp310-cp310-win_amd64.whl\", hash = \"sha256:4922afa9234d1c5763950b26c328a5320019e55eb6000272a79dfe54fee8e704\"},",
          "2517:     {file = \"xmlsec-1.3.14-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:7799a9ff3593f9dd43464e18b1a621640bffc40456c47c23383727f937dca7fc\"},",
          "2518:     {file = \"xmlsec-1.3.14-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:1fe23c2dd5f5dbcb24f40e2c1061e2672a32aabee7cf8ac5337036a485607d72\"},",
          "2519:     {file = \"xmlsec-1.3.14-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0be3b7a28e54a03b87faf07fb3c6dc3e50a2c79b686718c3ad08300b8bf6bb67\"},",
          "2520:     {file = \"xmlsec-1.3.14-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:48e894ad3e7de373f56efc09d6a56f7eae73a8dd4cec8943313134849e9c6607\"},",
          "2521:     {file = \"xmlsec-1.3.14-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:204d3c586b8bd6f02a5d4c59850a8157205569d40c32567f49576fa5795d897d\"},",
          "2522:     {file = \"xmlsec-1.3.14-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:6679cec780386d848e7351d4b0de92c4483289ea4f0a2187e216159f939a4c6b\"},",
          "2523:     {file = \"xmlsec-1.3.14-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:c4d41c83c8a2b8d8030204391ebeb6174fbdb044f0331653c4b5a4ce4150bcc0\"},",
          "2524:     {file = \"xmlsec-1.3.14-cp311-cp311-win32.whl\", hash = \"sha256:df4aa0782a53032fd35e18dcd6d328d6126324bfcfdef0cb5c2856f25b4b6f94\"},",
          "2525:     {file = \"xmlsec-1.3.14-cp311-cp311-win_amd64.whl\", hash = \"sha256:1072878301cb9243a54679e0520e6a5be2266c07a28b0ecef9e029d05a90ffcd\"},",
          "2526:     {file = \"xmlsec-1.3.14-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:1eb3dcf244a52f796377112d8f238dbb522eb87facffb498425dc8582a84a6bf\"},",
          "2527:     {file = \"xmlsec-1.3.14-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:330147ce59fbe56a9be5b2085d739c55a569f112576b3f1b33681f87416eaf33\"},",
          "2528:     {file = \"xmlsec-1.3.14-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ed4034939d8566ccdcd3b4e4f23c63fd807fb8763ae5668d59a19e11640a8242\"},",
          "2529:     {file = \"xmlsec-1.3.14-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a98eadfcb0c3b23ccceb7a2f245811f8d784bd287640dcfe696a26b9db1e2fc0\"},",
          "2530:     {file = \"xmlsec-1.3.14-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:86ff7b2711557c1087b72b0a1a88d82eafbf2a6d38b97309a6f7101d4a7041c3\"},",
          "2531:     {file = \"xmlsec-1.3.14-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:774d5d1e45f07f953c1cc14fd055c1063f0725f7248b6b0e681f59fd8638934d\"},",
          "2532:     {file = \"xmlsec-1.3.14-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:bd10ca3201f164482775a7ce61bf7ee9aade2e7d032046044dd0f6f52c91d79d\"},",
          "2533:     {file = \"xmlsec-1.3.14-cp312-cp312-win32.whl\", hash = \"sha256:19c86bab1498e4c2e56d8e2c878f461ccb6e56b67fd7522b0c8fda46d8910781\"},",
          "2534:     {file = \"xmlsec-1.3.14-cp312-cp312-win_amd64.whl\", hash = \"sha256:d0762f4232bce2c7f6c0af329db8b821b4460bbe123a2528fb5677d03db7a4b5\"},",
          "2535:     {file = \"xmlsec-1.3.14-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:03ccba7dacf197850de954666af0221c740a5de631a80136362a1559223fab75\"},",
          "2536:     {file = \"xmlsec-1.3.14-cp36-cp36m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c12900e1903e289deb84eb893dca88591d6884d3e3cda4fb711b8812118416e8\"},",
          "2537:     {file = \"xmlsec-1.3.14-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6566434e2e5c58e472362a6187f208601f1627a148683a6f92bd16479f1d9e20\"},",
          "2538:     {file = \"xmlsec-1.3.14-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:2401e162aaab7d9416c3405bac7a270e5f370988a0f1f46f0f29b735edba87e1\"},",
          "2539:     {file = \"xmlsec-1.3.14-cp36-cp36m-win32.whl\", hash = \"sha256:ba3b39c493e3b04354615068a3218f30897fcc2f42c6d8986d0c1d63aca87782\"},",
          "2540:     {file = \"xmlsec-1.3.14-cp36-cp36m-win_amd64.whl\", hash = \"sha256:4edd8db4df04bbac9c4a5ab4af855b74fe2bf2c248d07cac2e6d92a485f1a685\"},",
          "2541:     {file = \"xmlsec-1.3.14-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:b6dd86f440fec9242515c64f0be93fec8b4289287db1f6de2651eee9995aaecb\"},",
          "2542:     {file = \"xmlsec-1.3.14-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ad1634cabe0915fe2a12e142db0ed2daf5be80cbe3891a2cecbba0750195cc6b\"},",
          "2543:     {file = \"xmlsec-1.3.14-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dba457ff87c39cbae3c5020475a728d24bbd9d00376df9af9724cd3bb59ff07a\"},",
          "2544:     {file = \"xmlsec-1.3.14-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:12d90059308bb0c1b94bde065784e6852999d08b91bcb2048c17e62b954acb07\"},",
          "2545:     {file = \"xmlsec-1.3.14-cp37-cp37m-win32.whl\", hash = \"sha256:ce4e165a1436697e5e39587c4fba24db4545a5c9801e0d749f1afd09ad3ab901\"},",
          "2546:     {file = \"xmlsec-1.3.14-cp37-cp37m-win_amd64.whl\", hash = \"sha256:7e8e0171916026cbe8e2022c959558d02086655fd3c3466f2bc0451b09cf9ee8\"},",
          "2547:     {file = \"xmlsec-1.3.14-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:c42735cc68fdb4c6065cf0a0701dfff3a12a1734c63a36376349af9a5481f27b\"},",
          "2548:     {file = \"xmlsec-1.3.14-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:38e035bf48300b7dbde2dd01d3b8569f8584fc9c73809be13886e6b6c77b74fb\"},",
          "2549:     {file = \"xmlsec-1.3.14-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:73eabf5ef58189d81655058cf328c1dfa9893d89f1bff5fc941481f08533f338\"},",
          "2550:     {file = \"xmlsec-1.3.14-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:bddd2a2328b4e08c8a112e06cf2cd2b4d281f4ad94df15b4cef18f06cdc49d78\"},",
          "2551:     {file = \"xmlsec-1.3.14-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:57fed3bc7943681c9ed4d2221600ab440f060d8d1a8f92f346f2b41effe175b8\"},",
          "2552:     {file = \"xmlsec-1.3.14-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:147934bd39dfd840663fb6b920ea9201455fa886427975713f1b42d9f20b9b29\"},",
          "2553:     {file = \"xmlsec-1.3.14-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:e732a75fcb6b84872b168f972fbbf3749baf76308635f14015d1d35ed0c5719c\"},",
          "2554:     {file = \"xmlsec-1.3.14-cp38-cp38-win32.whl\", hash = \"sha256:b109cdf717257fd4daa77c1d3ec8a3fb2a81318a6d06a36c55a8a53ae381ae5e\"},",
          "2555:     {file = \"xmlsec-1.3.14-cp38-cp38-win_amd64.whl\", hash = \"sha256:b7ba2ea38e3d9efa520b14f3c0b7d99a7c055244ae5ba8bc9f4ca73b18f3a215\"},",
          "2556:     {file = \"xmlsec-1.3.14-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:1b9b5de6bc69fdec23147e5f712cb05dc86df105462f254f140d743cc680cc7b\"},",
          "2557:     {file = \"xmlsec-1.3.14-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:82ac81deb7d7bf5cc8a748148948e5df5386597ff43fb92ec651cc5c7addb0e7\"},",
          "2558:     {file = \"xmlsec-1.3.14-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0bae37b2920115cf00759ee9fb7841cbdebcef3a8a92734ab93ae8fa41ac581d\"},",
          "2559:     {file = \"xmlsec-1.3.14-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4fac2a787ae3b9fb761f9aec6b9f10f2d1c1b87abb574ebd8ff68435bdc97e3d\"},",
          "2560:     {file = \"xmlsec-1.3.14-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:34c61ec0c0e70fda710290ae74b9efe1928d9242ed82c4eecf97aa696cff68e6\"},",
          "2561:     {file = \"xmlsec-1.3.14-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:995e87acecc263a2f6f2aa3cc204268f651cac8f4d7a2047f11b2cd49979cc38\"},",
          "2562:     {file = \"xmlsec-1.3.14-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:2f84a1c509c52773365645a87949081ee9ea9c535cd452048cc8ca4ad3b45666\"},",
          "2563:     {file = \"xmlsec-1.3.14-cp39-cp39-win32.whl\", hash = \"sha256:7882963e9cb9c0bd0e8c2715a29159a366417ff4a30d8baf42b05bc5cf249446\"},",
          "2564:     {file = \"xmlsec-1.3.14-cp39-cp39-win_amd64.whl\", hash = \"sha256:a487c3d144f791c32f5e560aa27a705fba23171728b8a8511f36de053ff6bc93\"},",
          "2565:     {file = \"xmlsec-1.3.14.tar.gz\", hash = \"sha256:934f804f2f895bcdb86f1eaee236b661013560ee69ec108d29cdd6e5f292a2d9\"},",
          "2566: ]",
          "2568: [package.dependencies]",
          "2569: lxml = \">=3.8\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2612: [metadata]",
          "2613: lock-version = \"2.0\"",
          "2614: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "2615: content-hash = \"fbcdae67b3139e83d0995900b0e098cf357dfefc1cc1a8a35e0963ed23347113\"",
          "",
          "[Added Lines]",
          "2719: content-hash = \"567fcab0de90d19561ea0dc4becd78490609a4341063f2825d55ba7b3291688b\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "003ee165195a0bef1462658de104251b3cf24e29",
      "candidate_info": {
        "commit_hash": "003ee165195a0bef1462658de104251b3cf24e29",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/003ee165195a0bef1462658de104251b3cf24e29",
        "files": [
          ".github/CONTRIBUTING.md",
          ".github/ISSUE_TEMPLATE/bug_report.md",
          ".github/SECURITY.md",
          ".github/SUPPORT.md",
          ".github/workflows/auto-comment.yml",
          "README.md",
          "mobsf/DynamicAnalyzer/views/common/shared.py",
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/common/async_task.py",
          "mobsf/StaticAnalyzer/views/ios/ipa.py",
          "mobsf/templates/general/recent.html",
          "mobsf/templates/general/tasks.html",
          "pyproject.toml"
        ],
        "message": "4.2.1 (#2451)\n\n* Improvements in scan queue\n* Fix TOCTOU in delete scans view",
        "before_after_code_files": [
          "mobsf/DynamicAnalyzer/views/common/shared.py||mobsf/DynamicAnalyzer/views/common/shared.py",
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/common/async_task.py||mobsf/StaticAnalyzer/views/common/async_task.py",
          "mobsf/StaticAnalyzer/views/ios/ipa.py||mobsf/StaticAnalyzer/views/ios/ipa.py",
          "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html",
          "mobsf/templates/general/tasks.html||mobsf/templates/general/tasks.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/DynamicAnalyzer/views/common/shared.py||mobsf/DynamicAnalyzer/views/common/shared.py": [
          "File: mobsf/DynamicAnalyzer/views/common/shared.py -> mobsf/DynamicAnalyzer/views/common/shared.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         return data",
          "161:     return HttpResponse(",
          "162:         json.dumps(data),",
          "166: def invalid_params(api=False):",
          "",
          "[Removed Lines]",
          "163:         content_type='application/json')",
          "",
          "[Added Lines]",
          "163:         content_type='application/json; charset=utf-8')",
          "",
          "---------------"
        ],
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "22: BANNER = r\"\"\"",
          "23:   __  __       _    ____  _____       _  _    ____",
          "24:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  |___ \\",
          "",
          "[Removed Lines]",
          "21: VERSION = '4.2.0'",
          "",
          "[Added Lines]",
          "21: VERSION = '4.2.1'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: from mobsf.MobSF.views.scanning import Scanning",
          "39: from mobsf.MobSF.views.apk_downloader import apk_download",
          "40: from mobsf.StaticAnalyzer.models import (",
          "41:     RecentScansDB,",
          "42:     StaticAnalyzerAndroid,",
          "43:     StaticAnalyzerIOS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     EnqueuedTask,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "516: @login_required",
          "517: @permission_required(Permissions.DELETE)",
          "518: def delete_scan(request, api=False):",
          "519:     \"\"\"Delete Scan from DB and remove the scan related files.\"\"\"",
          "520:     try:",
          "556:     except Exception as exp:",
          "557:         msg = str(exp)",
          "558:         exp_doc = exp.__doc__",
          "",
          "[Removed Lines]",
          "521:         if request.method == 'POST':",
          "522:             if api:",
          "523:                 md5_hash = request.POST['hash']",
          "524:             else:",
          "525:                 md5_hash = request.POST['md5']",
          "526:             data = {'deleted': 'scan hash not found'}",
          "527:             if re.match(MD5_REGEX, md5_hash):",
          "528:                 # Delete DB Entries",
          "529:                 scan = RecentScansDB.objects.filter(MD5=md5_hash)",
          "530:                 if scan.exists():",
          "531:                     RecentScansDB.objects.filter(MD5=md5_hash).delete()",
          "532:                     StaticAnalyzerAndroid.objects.filter(MD5=md5_hash).delete()",
          "533:                     StaticAnalyzerIOS.objects.filter(MD5=md5_hash).delete()",
          "534:                     StaticAnalyzerWindows.objects.filter(MD5=md5_hash).delete()",
          "535:                     # Delete Upload Dir Contents",
          "536:                     app_upload_dir = os.path.join(settings.UPLD_DIR, md5_hash)",
          "537:                     if is_dir_exists(app_upload_dir):",
          "538:                         shutil.rmtree(app_upload_dir)",
          "539:                     # Delete Download Dir Contents",
          "540:                     dw_dir = settings.DWD_DIR",
          "541:                     for item in os.listdir(dw_dir):",
          "542:                         item_path = os.path.join(dw_dir, item)",
          "543:                         valid_item = item.startswith(md5_hash + '-')",
          "544:                         # Delete all related files",
          "545:                         if is_file_exists(item_path) and valid_item:",
          "546:                             os.remove(item_path)",
          "547:                         # Delete related directories",
          "548:                         if is_dir_exists(item_path) and valid_item:",
          "549:                             shutil.rmtree(item_path)",
          "550:                     data = {'deleted': 'yes'}",
          "551:             if api:",
          "552:                 return data",
          "553:             else:",
          "554:                 ctype = 'application/json; charset=utf-8'",
          "555:                 return HttpResponse(json.dumps(data), content_type=ctype)",
          "",
          "[Added Lines]",
          "519: @require_http_methods(['POST'])",
          "523:         if api:",
          "524:             md5_hash = request.POST['hash']",
          "525:         else:",
          "526:             md5_hash = request.POST['md5']",
          "528:         if not re.match(MD5_REGEX, md5_hash):",
          "529:             return send_response({'deleted': 'Invalid scan hash'}, api)",
          "531:         # Delete DB Entries",
          "532:         scan = RecentScansDB.objects.filter(MD5=md5_hash)",
          "533:         if not scan.exists():",
          "534:             return send_response({'deleted': 'Scan not found in Database'}, api)",
          "535:         if settings.ASYNC_ANALYSIS:",
          "536:             # Handle Async Tasks",
          "537:             et = EnqueuedTask.objects.filter(checksum=md5_hash).first()",
          "538:             if et and not et.completed_at:",
          "539:                 # Queue is in progress, cannot delete the task",
          "540:                 return send_response({",
          "541:                     'deleted': 'A scan can only be deleted after it is completed'}, api)",
          "542:         # Delete all related DB entries",
          "543:         EnqueuedTask.objects.filter(checksum=md5_hash).all().delete()",
          "544:         RecentScansDB.objects.filter(MD5=md5_hash).delete()",
          "545:         StaticAnalyzerAndroid.objects.filter(MD5=md5_hash).delete()",
          "546:         StaticAnalyzerIOS.objects.filter(MD5=md5_hash).delete()",
          "547:         StaticAnalyzerWindows.objects.filter(MD5=md5_hash).delete()",
          "548:         # Delete Upload Dir Contents",
          "549:         app_upload_dir = os.path.join(settings.UPLD_DIR, md5_hash)",
          "550:         if is_dir_exists(app_upload_dir):",
          "551:             shutil.rmtree(app_upload_dir)",
          "552:         # Delete Download Dir Contents",
          "553:         dw_dir = settings.DWD_DIR",
          "554:         for item in os.listdir(dw_dir):",
          "555:             item_path = os.path.join(dw_dir, item)",
          "556:             valid_item = item.startswith(md5_hash + '-')",
          "557:             # Delete all related files",
          "558:             if is_file_exists(item_path) and valid_item:",
          "559:                 os.remove(item_path)",
          "560:             # Delete related directories",
          "561:             if is_dir_exists(item_path) and valid_item:",
          "562:                 shutil.rmtree(item_path)",
          "563:         return send_response({'deleted': 'yes'}, api)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py": [
          "File: mobsf/StaticAnalyzer/views/android/apk.py -> mobsf/StaticAnalyzer/views/android/apk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     \"\"\"Log scan subject.\"\"\"",
          "126:     app_name = app_dic['real_name']",
          "127:     pkg_name = man_data['packagename']",
          "129:     if app_name and pkg_name:",
          "130:         subject = f'{app_name} ({pkg_name})'",
          "131:     elif pkg_name:",
          "",
          "[Removed Lines]",
          "128:     subject = ''",
          "",
          "[Added Lines]",
          "128:     subject = 'Android App'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     msg = f'Performing Static Analysis on: {subject}'",
          "136:     logger.info(msg)",
          "137:     append_scan_status(checksum, msg)",
          "138:     return subject",
          "141: def apk_analysis_task(checksum, app_dic, rescan, queue=False):",
          "142:     \"\"\"APK Analysis Task.\"\"\"",
          "159:         append_scan_status(checksum, msg)",
          "160:         if queue:",
          "161:             return update_enqueued_task(",
          "259: def generate_dynamic_context(request, app_dic, checksum, context, api):",
          "",
          "[Removed Lines]",
          "143:     if queue:",
          "144:         settings.ASYNC_ANALYSIS = True",
          "145:     append_scan_status(checksum, 'init')",
          "146:     initialize_app_dic(checksum, app_dic, 'apk')",
          "147:     msg = 'Extracting APK'",
          "148:     logger.info(msg)",
          "149:     append_scan_status(checksum, msg)",
          "150:     app_dic['files'] = unzip(",
          "151:         checksum,",
          "152:         app_dic['app_path'],",
          "153:         app_dic['app_dir'])",
          "154:     logger.info('APK Extracted')",
          "155:     if not app_dic['files']:",
          "156:         # Can't Analyze APK, bail out.",
          "157:         msg = 'APK file is invalid or corrupt'",
          "158:         logger.error(msg)",
          "162:                 checksum, 'Failed', 'Failed')",
          "163:         return None, msg",
          "164:     app_dic['zipped'] = 'apk'",
          "165:     app_dic['certz'] = get_hardcoded_cert_keystore(",
          "166:         checksum,",
          "167:         app_dic['files'])",
          "168:     # Parse APK with Androguard",
          "169:     andro_apk = parse_apk(",
          "170:         checksum,",
          "171:         app_dic['app_path'])",
          "172:     # Manifest Data",
          "173:     man_data, man_analysis = get_manifest_data(",
          "174:         checksum,",
          "175:         app_dic,",
          "176:         andro_apk)",
          "177:     # Get App name",
          "178:     app_dic['real_name'] = get_app_name(",
          "179:         andro_apk,",
          "180:         app_dic['app_dir'],",
          "181:         True)",
          "182:     # Print scan subject",
          "183:     subject = print_scan_subject(checksum, app_dic, man_data)",
          "184:     app_dic['playstore'] = get_app_details(",
          "185:         checksum,",
          "186:         man_data['packagename'])",
          "187:     # Malware Permission check",
          "188:     mal_perms = permissions.check_malware_permission(",
          "189:         checksum,",
          "190:         man_data['perm'])",
          "191:     man_analysis['malware_permissions'] = mal_perms",
          "192:     # Get icon",
          "193:     # apktool should run before this",
          "194:     get_icon_apk(andro_apk, app_dic)",
          "195:     elf_dict = library_analysis(",
          "196:         checksum,",
          "197:         app_dic['app_dir'],",
          "198:         'elf')",
          "199:     cert_dic = cert_info(",
          "200:         andro_apk,",
          "201:         app_dic,",
          "202:         man_data)",
          "203:     apkid_results = apkid.apkid_analysis(",
          "204:         checksum,",
          "205:         app_dic['app_path'])",
          "206:     trackers = Trackers.Trackers(",
          "207:         checksum,",
          "208:         app_dic['app_dir'],",
          "209:         app_dic['tools_dir']).get_trackers()",
          "210:     apk_2_java(",
          "211:         checksum,",
          "212:         app_dic['app_path'],",
          "213:         app_dic['app_dir'],",
          "214:         settings.DOWNLOADED_TOOLS_DIR)",
          "215:     dex_2_smali(",
          "216:         checksum,",
          "217:         app_dic['app_dir'],",
          "218:         app_dic['tools_dir'])",
          "219:     code_an_dic = code_analysis(",
          "220:         checksum,",
          "221:         app_dic['app_dir'],",
          "222:         app_dic['zipped'],",
          "223:         app_dic['manifest_file'],",
          "224:         man_data['perm'])",
          "225:     # Get the strings and metadata",
          "226:     get_strings_metadata(",
          "227:         checksum,",
          "228:         andro_apk,",
          "229:         app_dic['app_dir'],",
          "230:         elf_dict['elf_strings'],",
          "231:         app_dic['zipped'],",
          "232:         ['.java'],",
          "233:         code_an_dic)",
          "234:     # Firebase DB Check",
          "235:     code_an_dic['firebase'] = firebase_analysis(",
          "236:         checksum,",
          "237:         code_an_dic)",
          "238:     # Domain Extraction and Malware Check",
          "239:     code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "240:         checksum,",
          "241:         code_an_dic['urls_list'])",
          "242:     context = save_get_ctx(",
          "243:         app_dic,",
          "244:         man_data,",
          "245:         man_analysis,",
          "246:         code_an_dic,",
          "247:         cert_dic,",
          "248:         elf_dict['elf_analysis'],",
          "249:         apkid_results,",
          "250:         trackers,",
          "251:         rescan,",
          "252:     )",
          "253:     if queue:",
          "254:         return update_enqueued_task(",
          "255:             checksum, subject, 'Success')",
          "256:     return context, None",
          "",
          "[Added Lines]",
          "138:     if subject == 'Failed':",
          "139:         subject = f'({subject})'",
          "145:     context = None",
          "146:     try:",
          "147:         if queue:",
          "148:             settings.ASYNC_ANALYSIS = True",
          "149:         append_scan_status(checksum, 'init')",
          "150:         initialize_app_dic(checksum, app_dic, 'apk')",
          "151:         msg = 'Extracting APK'",
          "152:         logger.info(msg)",
          "154:         app_dic['files'] = unzip(",
          "155:             checksum,",
          "156:             app_dic['app_path'],",
          "157:             app_dic['app_dir'])",
          "158:         logger.info('APK Extracted')",
          "159:         if not app_dic['files']:",
          "160:             # Can't Analyze APK, bail out.",
          "161:             msg = 'APK file is invalid or corrupt'",
          "162:             logger.error(msg)",
          "163:             append_scan_status(checksum, msg)",
          "164:             if queue:",
          "165:                 return update_enqueued_task(",
          "166:                     checksum, 'Failed', msg)",
          "167:             return context, msg",
          "168:         app_dic['zipped'] = 'apk'",
          "169:         app_dic['certz'] = get_hardcoded_cert_keystore(",
          "170:             checksum,",
          "171:             app_dic['files'])",
          "172:         # Parse APK with Androguard",
          "173:         andro_apk = parse_apk(",
          "174:             checksum,",
          "175:             app_dic['app_path'])",
          "176:         # Manifest Data",
          "177:         man_data, man_analysis = get_manifest_data(",
          "178:             checksum,",
          "179:             app_dic,",
          "180:             andro_apk)",
          "181:         # Get App name",
          "182:         app_dic['real_name'] = get_app_name(",
          "183:             andro_apk,",
          "184:             app_dic['app_dir'],",
          "185:             True)",
          "186:         # Print scan subject",
          "187:         subject = print_scan_subject(checksum, app_dic, man_data)",
          "188:         app_dic['playstore'] = get_app_details(",
          "189:             checksum,",
          "190:             man_data['packagename'])",
          "191:         # Malware Permission check",
          "192:         mal_perms = permissions.check_malware_permission(",
          "193:             checksum,",
          "194:             man_data['perm'])",
          "195:         man_analysis['malware_permissions'] = mal_perms",
          "196:         # Get icon",
          "197:         # apktool should run before this",
          "198:         get_icon_apk(andro_apk, app_dic)",
          "199:         elf_dict = library_analysis(",
          "200:             checksum,",
          "201:             app_dic['app_dir'],",
          "202:             'elf')",
          "203:         cert_dic = cert_info(",
          "204:             andro_apk,",
          "205:             app_dic,",
          "206:             man_data)",
          "207:         apkid_results = apkid.apkid_analysis(",
          "208:             checksum,",
          "209:             app_dic['app_path'])",
          "210:         trackers = Trackers.Trackers(",
          "211:             checksum,",
          "212:             app_dic['app_dir'],",
          "213:             app_dic['tools_dir']).get_trackers()",
          "214:         apk_2_java(",
          "215:             checksum,",
          "216:             app_dic['app_path'],",
          "217:             app_dic['app_dir'],",
          "218:             settings.DOWNLOADED_TOOLS_DIR)",
          "219:         dex_2_smali(",
          "220:             checksum,",
          "221:             app_dic['app_dir'],",
          "222:             app_dic['tools_dir'])",
          "223:         code_an_dic = code_analysis(",
          "224:             checksum,",
          "225:             app_dic['app_dir'],",
          "226:             app_dic['zipped'],",
          "227:             app_dic['manifest_file'],",
          "228:             man_data['perm'])",
          "229:         # Get the strings and metadata",
          "230:         get_strings_metadata(",
          "231:             checksum,",
          "232:             andro_apk,",
          "233:             app_dic['app_dir'],",
          "234:             elf_dict['elf_strings'],",
          "235:             app_dic['zipped'],",
          "236:             ['.java'],",
          "237:             code_an_dic)",
          "238:         # Firebase DB Check",
          "239:         code_an_dic['firebase'] = firebase_analysis(",
          "240:             checksum,",
          "241:             code_an_dic)",
          "242:         # Domain Extraction and Malware Check",
          "243:         code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "244:             checksum,",
          "245:             code_an_dic['urls_list'])",
          "246:         context = save_get_ctx(",
          "247:             app_dic,",
          "248:             man_data,",
          "249:             man_analysis,",
          "250:             code_an_dic,",
          "251:             cert_dic,",
          "252:             elf_dict['elf_analysis'],",
          "253:             apkid_results,",
          "254:             trackers,",
          "255:             rescan,",
          "256:         )",
          "259:                 checksum, subject, 'Success')",
          "260:         return context, None",
          "261:     except Exception as exp:",
          "262:         if queue:",
          "263:             return update_enqueued_task(",
          "264:                 checksum, 'Failed', repr(exp))",
          "265:         return context, repr(exp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295: def src_analysis_task(checksum, app_dic, rescan, pro_type, queue=False):",
          "296:     \"\"\"Android ZIP Source Code Analysis Begins.\"\"\"",
          "377:     return context",
          "",
          "[Removed Lines]",
          "297:     if queue:",
          "298:         settings.ASYNC_ANALYSIS = True",
          "299:     cert_dic = {",
          "300:         'certificate_info': '',",
          "301:         'certificate_status': '',",
          "302:         'description': '',",
          "303:     }",
          "304:     app_dic['strings'] = []",
          "305:     app_dic['secrets'] = []",
          "306:     # Above fields are only available for APK and not ZIP",
          "307:     app_dic['zipped'] = pro_type",
          "308:     app_dic['certz'] = get_hardcoded_cert_keystore(",
          "309:         checksum,",
          "310:         app_dic['files'])",
          "311:     # Manifest Data",
          "312:     man_data, man_analysis = get_manifest_data(",
          "313:         checksum,",
          "314:         app_dic)",
          "315:     # Get app name",
          "316:     app_dic['real_name'] = get_app_name(",
          "317:         None,",
          "318:         app_dic['app_dir'],",
          "319:         False)",
          "320:     # Print scan subject",
          "321:     subject = print_scan_subject(checksum, app_dic, man_data)",
          "322:     app_dic['playstore'] = get_app_details(",
          "323:         checksum,",
          "324:         man_data['packagename'])",
          "325:     # Malware Permission check",
          "326:     mal_perms = permissions.check_malware_permission(",
          "327:         checksum,",
          "328:         man_data['perm'])",
          "329:     man_analysis['malware_permissions'] = mal_perms",
          "330:     # Get icon",
          "331:     get_icon_from_src(",
          "332:         app_dic,",
          "333:         man_data['icons'])",
          "334:     code_an_dic = code_analysis(",
          "335:         checksum,",
          "336:         app_dic['app_dir'],",
          "337:         app_dic['zipped'],",
          "338:         app_dic['manifest_file'],",
          "339:         man_data['perm'])",
          "340:     # Get the strings and metadata",
          "341:     get_strings_metadata(",
          "342:         checksum,",
          "343:         None,",
          "344:         app_dic['app_dir'],",
          "345:         None,",
          "346:         app_dic['zipped'],",
          "347:         ['.java', '.kt'],",
          "348:         code_an_dic)",
          "349:     # Firebase DB Check",
          "350:     code_an_dic['firebase'] = firebase_analysis(",
          "351:         checksum,",
          "352:         code_an_dic)",
          "353:     # Domain Extraction and Malware Check",
          "354:     code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "355:         checksum,",
          "356:         code_an_dic['urls_list'])",
          "357:     # Extract Trackers from Domains",
          "358:     trackers = Trackers.Trackers(",
          "359:         checksum,",
          "360:         None,",
          "361:         app_dic['tools_dir']).get_trackers_domains_or_deps(",
          "362:             code_an_dic['domains'], [])",
          "363:     context = save_get_ctx(",
          "364:         app_dic,",
          "365:         man_data,",
          "366:         man_analysis,",
          "367:         code_an_dic,",
          "368:         cert_dic,",
          "369:         [],",
          "370:         {},",
          "371:         trackers,",
          "372:         rescan,",
          "373:     )",
          "374:     if queue:",
          "375:         return update_enqueued_task(",
          "376:             checksum, subject, 'Success')",
          "",
          "[Added Lines]",
          "306:     context = None",
          "307:     try:",
          "308:         if queue:",
          "309:             settings.ASYNC_ANALYSIS = True",
          "310:         cert_dic = {",
          "311:             'certificate_info': '',",
          "312:             'certificate_status': '',",
          "313:             'description': '',",
          "314:         }",
          "315:         app_dic['strings'] = []",
          "316:         app_dic['secrets'] = []",
          "317:         # Above fields are only available for APK and not ZIP",
          "318:         app_dic['zipped'] = pro_type",
          "319:         app_dic['certz'] = get_hardcoded_cert_keystore(",
          "320:             checksum,",
          "321:             app_dic['files'])",
          "322:         # Manifest Data",
          "323:         man_data, man_analysis = get_manifest_data(",
          "324:             checksum,",
          "325:             app_dic)",
          "326:         # Get app name",
          "327:         app_dic['real_name'] = get_app_name(",
          "328:             None,",
          "329:             app_dic['app_dir'],",
          "330:             False)",
          "331:         # Print scan subject",
          "332:         subject = print_scan_subject(checksum, app_dic, man_data)",
          "333:         app_dic['playstore'] = get_app_details(",
          "334:             checksum,",
          "335:             man_data['packagename'])",
          "336:         # Malware Permission check",
          "337:         mal_perms = permissions.check_malware_permission(",
          "338:             checksum,",
          "339:             man_data['perm'])",
          "340:         man_analysis['malware_permissions'] = mal_perms",
          "341:         # Get icon",
          "342:         get_icon_from_src(",
          "343:             app_dic,",
          "344:             man_data['icons'])",
          "345:         code_an_dic = code_analysis(",
          "346:             checksum,",
          "347:             app_dic['app_dir'],",
          "348:             app_dic['zipped'],",
          "349:             app_dic['manifest_file'],",
          "350:             man_data['perm'])",
          "351:         # Get the strings and metadata",
          "352:         get_strings_metadata(",
          "353:             checksum,",
          "354:             None,",
          "355:             app_dic['app_dir'],",
          "356:             None,",
          "357:             app_dic['zipped'],",
          "358:             ['.java', '.kt'],",
          "359:             code_an_dic)",
          "360:         # Firebase DB Check",
          "361:         code_an_dic['firebase'] = firebase_analysis(",
          "362:             checksum,",
          "363:             code_an_dic)",
          "364:         # Domain Extraction and Malware Check",
          "365:         code_an_dic['domains'] = MalwareDomainCheck().scan(",
          "366:             checksum,",
          "367:             code_an_dic['urls_list'])",
          "368:         # Extract Trackers from Domains",
          "369:         trackers = Trackers.Trackers(",
          "370:             checksum,",
          "371:             None,",
          "372:             app_dic['tools_dir']).get_trackers_domains_or_deps(",
          "373:                 code_an_dic['domains'], [])",
          "374:         context = save_get_ctx(",
          "375:             app_dic,",
          "376:             man_data,",
          "377:             man_analysis,",
          "378:             code_an_dic,",
          "379:             cert_dic,",
          "380:             [],",
          "381:             {},",
          "382:             trackers,",
          "383:             rescan,",
          "384:         )",
          "385:         if queue:",
          "386:             return update_enqueued_task(",
          "387:                 checksum, subject, 'Success')",
          "388:     except Exception as exp:",
          "389:         if queue:",
          "390:             return update_enqueued_task(",
          "391:                 checksum, 'Failed', repr(exp))",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/async_task.py||mobsf/StaticAnalyzer/views/common/async_task.py": [
          "File: mobsf/StaticAnalyzer/views/common/async_task.py -> mobsf/StaticAnalyzer/views/common/async_task.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Views to handle asynchronous tasks.\"\"\"",
          "2: import logging",
          "5: from django.utils import timezone",
          "6: from django.shortcuts import render",
          "",
          "[Removed Lines]",
          "3: from datetime import timedelta",
          "",
          "[Added Lines]",
          "3: from datetime import (",
          "4:     timedelta,",
          "5: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: from django_q.tasks import async_task",
          "17: from mobsf.MobSF.views.authentication import (",
          "18:     login_required,",
          "19: )",
          "",
          "[Removed Lines]",
          "16: from mobsf.StaticAnalyzer.models import EnqueuedTask",
          "",
          "[Added Lines]",
          "18: from mobsf.StaticAnalyzer.models import (",
          "19:     EnqueuedTask,",
          "20:     RecentScansDB,",
          "21: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: def async_analysis(checksum, app_name, func, *args):",
          "32:         checksum=checksum,",
          "34:     ).exists()",
          "38:     # Clear old tasks",
          "39:     queue_size = settings.QUEUE_MAX_SIZE",
          "40:     task_count = EnqueuedTask.objects.count()",
          "",
          "[Removed Lines]",
          "29:     # Check if there is any task with the same checksum",
          "30:     # created within the last 1 minute",
          "31:     recent_task_exists = EnqueuedTask.objects.filter(",
          "33:         created_at__gte=timezone.now() - timedelta(minutes=1),",
          "35:     if recent_task_exists:",
          "36:         logger.info('Analysis already in progress')",
          "37:         return HttpResponseRedirect('/tasks')",
          "",
          "[Added Lines]",
          "34:     \"\"\"Async Analysis Task.\"\"\"",
          "35:     # Check if the task is already completed",
          "36:     recent = RecentScansDB.objects.filter(MD5=checksum)",
          "37:     scan_completed = recent[0].APP_NAME or recent[0].PACKAGE_NAME",
          "38:     # Check if the task is updated within the last 60 minutes",
          "39:     active_recently = recent[0].TIMESTAMP >= timezone.now() - timedelta(minutes=60)",
          "40:     # Check if the task is already enqueued within the last 60 minutes",
          "41:     queued_recently = EnqueuedTask.objects.filter(",
          "43:         created_at__gte=timezone.now() - timedelta(minutes=60),",
          "46:     # Additional checks on recent queue",
          "47:     if queued_recently:",
          "48:         if scan_completed:",
          "49:             # scan already completed recently",
          "50:             logger.warning('Analysis already completed in the last 60 minutes')",
          "51:             return HttpResponseRedirect('/tasks?q=completed')",
          "52:         elif active_recently:",
          "53:             # scan not completed but active recently",
          "54:             logger.warning('Analysis already enqueued in the last 60 minutes')",
          "55:             return HttpResponseRedirect('/tasks?q=queued')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75: def get_live_status(enq):",
          "76:     \"\"\"Get Live Status of the Task.\"\"\"",
          "81:     return enq.status",
          "",
          "[Removed Lines]",
          "77:     if enq.status not in {'Success', 'Failed'}:",
          "78:         logs = get_scan_logs(enq.checksum)",
          "79:         if logs:",
          "80:             return logs[-1]",
          "",
          "[Added Lines]",
          "96:     if enq.status == 'Success' or enq.app_name == 'Failed':",
          "97:         return enq.status",
          "98:     logs = get_scan_logs(enq.checksum)",
          "99:     if logs:",
          "100:         return logs[-1]",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/ios/ipa.py||mobsf/StaticAnalyzer/views/ios/ipa.py": [
          "File: mobsf/StaticAnalyzer/views/ios/ipa.py -> mobsf/StaticAnalyzer/views/ios/ipa.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:     \"\"\"Get Scan Subject.\"\"\"",
          "141:     app_name = None",
          "142:     pkg_name = None",
          "143:     if bin_dict.get('bin_path'):",
          "144:         app_name = bin_dict['bin_path'].name if bin_dict['bin_path'] else None",
          "145:     if app_dic.get('infoplist'):",
          "146:         pkg_name = app_dic['infoplist'].get('id')",
          "148:     if app_name and pkg_name:",
          "150:     elif pkg_name:",
          "152:     elif app_name:",
          "158: def ipa_analysis_task(checksum, app_dic, rescan, queue=False):",
          "159:     \"\"\"IPA Analysis Task.\"\"\"",
          "172:         if queue:",
          "221: def generate_dynamic_context(request, app_dic, context, checksum, api):",
          "",
          "[Removed Lines]",
          "149:         return f'{app_name} ({pkg_name})'",
          "151:         return pkg_name",
          "153:         return app_name",
          "154:     else:",
          "155:         return 'iOS Binary'",
          "160:     if queue:",
          "161:         settings.ASYNC_ANALYSIS = True",
          "162:     scan_type = 'ipa'",
          "163:     append_scan_status(checksum, 'init')",
          "164:     msg = 'iOS Binary (IPA) Analysis Started'",
          "165:     logger.info(msg)",
          "166:     append_scan_status(checksum, msg)",
          "167:     initialize_app_dic(app_dic, checksum, scan_type)",
          "169:     if not extract_and_check_ipa(checksum, app_dic):",
          "170:         msg = ('IPA is malformed! MobSF cannot find Payload directory')",
          "171:         append_scan_status(checksum, 'IPA is malformed', msg)",
          "173:             return update_enqueued_task(",
          "174:                 checksum, 'Failed', 'Failed')",
          "175:         return None, msg",
          "176:     common_analysis(scan_type, app_dic, checksum)",
          "178:     # IPA Binary Analysis",
          "179:     bin_dict = binary_analysis(",
          "180:         checksum,",
          "181:         app_dic['bin_dir'],",
          "182:         app_dic['tools_dir'],",
          "183:         app_dic['app_dir'],",
          "184:         app_dic['infoplist'].get('bin'))",
          "185:     # Analyze dylibs and frameworks",
          "186:     lb = library_analysis(",
          "187:         checksum,",
          "188:         app_dic['bin_dir'],",
          "189:         'macho')",
          "190:     bin_dict['dylib_analysis'] = lb['macho_analysis']",
          "191:     bin_dict['framework_analysis'] = lb['framework_analysis']",
          "192:     # Extract String metadata from binary",
          "193:     code_dict = get_strings_metadata(",
          "194:         app_dic,",
          "195:         bin_dict,",
          "196:         app_dic['all_files'],",
          "197:         lb['macho_strings'])",
          "198:     # Domain Extraction and Malware Check",
          "199:     code_dict['domains'] = MalwareDomainCheck().scan(",
          "200:         checksum,",
          "201:         code_dict['urls_list'])",
          "202:     # Get Icon",
          "203:     get_icon_from_ipa(app_dic)",
          "204:     # Firebase and Trackers",
          "205:     common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "207:     code_dict['api'] = {}",
          "208:     code_dict['code_anal'] = {}",
          "209:     context = save_get_ctx(",
          "210:         app_dic,",
          "211:         code_dict,",
          "212:         bin_dict,",
          "213:         rescan)",
          "214:     if queue:",
          "215:         subject = get_scan_subject(app_dic, bin_dict)",
          "216:         return update_enqueued_task(",
          "217:             checksum, subject, 'Success')",
          "218:     return context, None",
          "",
          "[Added Lines]",
          "143:     subject = 'iOS App'",
          "150:         subject = f'{app_name} ({pkg_name})'",
          "152:         subject = pkg_name",
          "154:         subject = app_name",
          "155:     if subject == 'Failed':",
          "156:         subject = f'({subject})'",
          "157:     return subject",
          "162:     context = None",
          "163:     try:",
          "165:             settings.ASYNC_ANALYSIS = True",
          "166:         scan_type = 'ipa'",
          "167:         append_scan_status(checksum, 'init')",
          "168:         msg = 'iOS Binary (IPA) Analysis Started'",
          "169:         logger.info(msg)",
          "170:         append_scan_status(checksum, msg)",
          "171:         initialize_app_dic(app_dic, checksum, scan_type)",
          "173:         if not extract_and_check_ipa(checksum, app_dic):",
          "174:             msg = ('IPA is malformed! MobSF cannot find Payload directory')",
          "175:             append_scan_status(checksum, 'IPA is malformed', msg)",
          "176:             if queue:",
          "177:                 return update_enqueued_task(",
          "178:                     checksum, 'Failed', msg)",
          "179:             return context, msg",
          "180:         common_analysis(scan_type, app_dic, checksum)",
          "182:         # IPA Binary Analysis",
          "183:         bin_dict = binary_analysis(",
          "184:             checksum,",
          "185:             app_dic['bin_dir'],",
          "186:             app_dic['tools_dir'],",
          "187:             app_dic['app_dir'],",
          "188:             app_dic['infoplist'].get('bin'))",
          "189:         # Analyze dylibs and frameworks",
          "190:         lb = library_analysis(",
          "191:             checksum,",
          "192:             app_dic['bin_dir'],",
          "193:             'macho')",
          "194:         bin_dict['dylib_analysis'] = lb['macho_analysis']",
          "195:         bin_dict['framework_analysis'] = lb['framework_analysis']",
          "196:         # Extract String metadata from binary",
          "197:         code_dict = get_strings_metadata(",
          "198:             app_dic,",
          "199:             bin_dict,",
          "200:             app_dic['all_files'],",
          "201:             lb['macho_strings'])",
          "202:         # Domain Extraction and Malware Check",
          "203:         code_dict['domains'] = MalwareDomainCheck().scan(",
          "204:             checksum,",
          "205:             code_dict['urls_list'])",
          "206:         # Get Icon",
          "207:         get_icon_from_ipa(app_dic)",
          "208:         # Firebase and Trackers",
          "209:         common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "211:         code_dict['api'] = {}",
          "212:         code_dict['code_anal'] = {}",
          "213:         context = save_get_ctx(",
          "214:             app_dic,",
          "215:             code_dict,",
          "216:             bin_dict,",
          "217:             rescan)",
          "218:         if queue:",
          "219:             subject = get_scan_subject(app_dic, bin_dict)",
          "220:             return update_enqueued_task(",
          "221:                 checksum, subject, 'Success')",
          "222:         return context, None",
          "223:     except Exception as exp:",
          "224:         if queue:",
          "225:             return update_enqueued_task(",
          "226:                 checksum, 'Failed', repr(exp))",
          "227:         return context, repr(exp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255: def ios_analysis_task(checksum, app_dic, rescan, queue=False):",
          "256:     \"\"\"IOS Analysis Task.\"\"\"",
          "302:     return context",
          "",
          "[Removed Lines]",
          "257:     if queue:",
          "258:         settings.ASYNC_ANALYSIS = True",
          "259:     scan_type = 'zip'",
          "260:     logger.info('iOS Source Code Analysis Started')",
          "261:     initialize_app_dic(app_dic, checksum, scan_type)",
          "263:     # ANALYSIS BEGINS - Already Unzipped",
          "264:     # append_scan_status init done in android static analyzer",
          "265:     common_analysis(scan_type, app_dic, checksum)",
          "267:     # IOS Source Code Analysis",
          "268:     code_dict = ios_source_analysis(",
          "269:         checksum,",
          "270:         app_dic['app_dir'])",
          "271:     # Extract Strings and entropies from source code",
          "272:     ios_strs = strings_and_entropies(",
          "273:         checksum,",
          "274:         Path(app_dic['app_dir']),",
          "275:         ['.swift', '.m', '.h', '.plist', '.json'])",
          "276:     if ios_strs['secrets']:",
          "277:         app_dic['secrets'].extend(list(ios_strs['secrets']))",
          "278:     # Get App Icon",
          "279:     get_icon_source(app_dic)",
          "280:     # Firebase and Trackers",
          "281:     common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "283:     bin_dict = {",
          "284:         'checksec': {},",
          "285:         'libraries': [],",
          "286:         'bin_code_analysis': {},",
          "287:         'strings': list(ios_strs['strings']),",
          "288:         'bin_info': {},",
          "289:         'bin_type': code_dict['source_type'],",
          "290:         'dylib_analysis': {},",
          "291:         'framework_analysis': {},",
          "292:     }",
          "293:     context = save_get_ctx(",
          "294:         app_dic,",
          "295:         code_dict,",
          "296:         bin_dict,",
          "297:         rescan)",
          "298:     if queue:",
          "299:         subject = get_scan_subject(app_dic, bin_dict)",
          "300:         return update_enqueued_task(",
          "301:             checksum, subject, 'Success')",
          "",
          "[Added Lines]",
          "266:     context = None",
          "267:     try:",
          "268:         if queue:",
          "269:             settings.ASYNC_ANALYSIS = True",
          "270:         scan_type = 'zip'",
          "271:         logger.info('iOS Source Code Analysis Started')",
          "272:         initialize_app_dic(app_dic, checksum, scan_type)",
          "274:         # ANALYSIS BEGINS - Already Unzipped",
          "275:         # append_scan_status init done in android static analyzer",
          "276:         common_analysis(scan_type, app_dic, checksum)",
          "278:         # IOS Source Code Analysis",
          "279:         code_dict = ios_source_analysis(",
          "280:             checksum,",
          "281:             app_dic['app_dir'])",
          "282:         # Extract Strings and entropies from source code",
          "283:         ios_strs = strings_and_entropies(",
          "284:             checksum,",
          "285:             Path(app_dic['app_dir']),",
          "286:             ['.swift', '.m', '.h', '.plist', '.json'])",
          "287:         if ios_strs['secrets']:",
          "288:             app_dic['secrets'].extend(list(ios_strs['secrets']))",
          "289:         # Get App Icon",
          "290:         get_icon_source(app_dic)",
          "291:         # Firebase and Trackers",
          "292:         common_firebase_and_trackers(code_dict, app_dic, checksum)",
          "294:         bin_dict = {",
          "295:             'checksec': {},",
          "296:             'libraries': [],",
          "297:             'bin_code_analysis': {},",
          "298:             'strings': list(ios_strs['strings']),",
          "299:             'bin_info': {},",
          "300:             'bin_type': code_dict['source_type'],",
          "301:             'dylib_analysis': {},",
          "302:             'framework_analysis': {},",
          "303:         }",
          "304:         context = save_get_ctx(",
          "305:             app_dic,",
          "306:             code_dict,",
          "307:             bin_dict,",
          "308:             rescan)",
          "309:         if queue:",
          "310:             subject = get_scan_subject(app_dic, bin_dict)",
          "311:             return update_enqueued_task(",
          "312:                 checksum, subject, 'Success')",
          "313:     except Exception as exp:",
          "314:         if queue:",
          "315:             return update_enqueued_task(",
          "316:                 checksum, 'Failed', repr(exp))",
          "",
          "---------------"
        ],
        "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html": [
          "File: mobsf/templates/general/recent.html -> mobsf/templates/general/recent.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:                                 md5: md5_hash,",
          "289:                                 },",
          "290:                             success : function(json) {",
          "292:                                     Swal.fire(",
          "293:                                         'Deleted!',",
          "294:                                         'The scan result is deleted!',",
          "",
          "[Removed Lines]",
          "291:                                 if (json.deleted==='yes'){",
          "",
          "[Added Lines]",
          "291:                                 if (json.deleted ==='yes'){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:                                 else {",
          "301:                                     Swal.fire(",
          "302:                                     'Delete Failed',",
          "304:                                     'error'",
          "305:                                     )",
          "306:                                 }",
          "",
          "[Removed Lines]",
          "303:                                     'Cannot delete the scan result!',",
          "",
          "[Added Lines]",
          "303:                                     json.deleted,",
          "",
          "---------------"
        ],
        "mobsf/templates/general/tasks.html||mobsf/templates/general/tasks.html": [
          "File: mobsf/templates/general/tasks.html -> mobsf/templates/general/tasks.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:       sidebar-collapse",
          "6: {% endblock %}",
          "7: {% block extra_css %}",
          "8: <style>",
          "10:     .loader {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: <link href=\"{% static \"adminlte/plugins/sweetalert2/sweetalert2.min.css\" %}\" rel=\"stylesheet\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: </div>",
          "71: {% endblock %}",
          "72: {% block extra_scripts %}",
          "73: <script>",
          "74:    document.addEventListener(\"DOMContentLoaded\", function () {",
          "75:     const tasksTableBody = document.querySelector(\"#tasks-table tbody\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: <script src=\"{% static \"adminlte/plugins/sweetalert2/sweetalert2.min.js\" %}\"></script>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:             addLoader(statusCell);",
          "129:         } else {",
          "130:             completedCell.textContent = new Date(task.completed_at).toLocaleString();",
          "135:                 statusCell.classList.add(\"text-success\");",
          "136:                 statusCell.classList.remove(\"text-warning\");",
          "139:                 addReportLink(task, statusCell);",
          "140:             }",
          "141:         }",
          "142:         addAppName(task, statusCell);",
          "",
          "[Removed Lines]",
          "131:             if (task.status === \"Failed\") {",
          "132:                 statusCell.classList.add(\"text-danger\");",
          "133:                 statusCell.classList.remove(\"text-warning\");",
          "134:             } else if (task.status === \"Success\") {",
          "137:             }",
          "138:             if (task.status === \"Success\") {",
          "",
          "[Added Lines]",
          "133:             if (task.status === \"Success\") {",
          "137:             } else if (task.app_name === \"Failed\")  {",
          "138:                 statusCell.classList.add(\"text-danger\");",
          "139:                 statusCell.classList.remove(\"text-warning\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:     setInterval(updateTaskStatuses, 5000); // Update every 5 seconds",
          "229: });",
          "231:     </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:     function getQueryParam(paramName) {",
          "231:         const urlParams = new URLSearchParams(window.location.search); // Get the query string",
          "232:         return urlParams.has(paramName) ? urlParams.get(paramName) : null;",
          "233:     }",
          "235:     const q = getQueryParam('q');",
          "237:     if (q && q === 'completed') {",
          "238:         Swal.fire(",
          "239:             'Scan Task Recently Completed!',",
          "240:             'The scan was recently completed.',",
          "241:             'warning'",
          "242:         )",
          "243:     } else if (q && q === 'queued') {",
          "244:         Swal.fire(",
          "245:             'Scan Task Already Added!',",
          "246:             'This scan task has already been added to the scan queue.',",
          "247:             'warning'",
          "248:         )",
          "249:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}