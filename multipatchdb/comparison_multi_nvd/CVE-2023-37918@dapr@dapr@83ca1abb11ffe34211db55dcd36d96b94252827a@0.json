{
  "cve_id": "CVE-2023-37918",
  "cve_desc": "Dapr is a portable, event-driven, runtime for building distributed applications across cloud and edge. A vulnerability has been found in Dapr that allows bypassing API token authentication, which is used by the Dapr sidecar to authenticate calls coming from the application, with a well-crafted HTTP request. Users who leverage API token authentication are encouraged to upgrade Dapr to 1.10.9 or to 1.11.2. This vulnerability impacts Dapr users who have configured API token authentication. An attacker could craft a request that is always allowed by the Dapr sidecar over HTTP, even if the `dapr-api-token` in the request is invalid or missing. The issue has been fixed in Dapr 1.10.9 or to 1.11.2. There are no known workarounds for this vulnerability.\n",
  "repo": "dapr/dapr",
  "patch_hash": "83ca1abb11ffe34211db55dcd36d96b94252827a",
  "patch_info": {
    "commit_hash": "83ca1abb11ffe34211db55dcd36d96b94252827a",
    "repo": "dapr/dapr",
    "commit_url": "https://github.com/dapr/dapr/commit/83ca1abb11ffe34211db55dcd36d96b94252827a",
    "files": [
      "docs/release_notes/v1.11.2.md",
      "pkg/http/server.go",
      "pkg/runtime/security/token.go",
      "pkg/runtime/security/token_test.go"
    ],
    "message": "Fixed API token authentication bypassed when path contains `/healthz`\n\nThe APITokenAuthMiddleware allowed bypassing the check if the path included `/healthz`. An attacker only needed to include `/healthz` in the URL, even the querystring, to bypass the API token check, for example `/v1.0/invoke/myapp/method/something?foo=/healthz`.\n\nAdditionally, this was not checking the method of the request, so requests to `POST /healthz` would cause a service invocation to happen.\n\nThis fixes the issue by making the check a lot more strict. The API token check can be bypassed only if:\n\n- The path is exactly `/v1.0/healthz` or `/v1.0/healthz/outbound` (slashes are trimmed on each side)\n- The method is `GET`\n\nSigned-off-by: ItalyPaleAle <43508+ItalyPaleAle@users.noreply.github.com>",
    "before_after_code_files": [
      "pkg/http/server.go||pkg/http/server.go",
      "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
      "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
    ]
  },
  "patch_diff": {
    "pkg/http/server.go||pkg/http/server.go": [
      "File: pkg/http/server.go -> pkg/http/server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "288:  return func(ctx *fasthttp.RequestCtx) {",
      "289:   v := ctx.Request.Header.Peek(authConsts.APITokenHeader)",
      "294:    ctx.Error(\"invalid api token\", http.StatusUnauthorized)",
      "295:   }",
      "296:  }",
      "297: }",
      "",
      "[Removed Lines]",
      "290:   if auth.ExcludedRoute(string(ctx.Request.URI().FullURI())) || string(v) == token {",
      "291:    ctx.Request.Header.Del(authConsts.APITokenHeader)",
      "292:    next(ctx)",
      "293:   } else {",
      "",
      "[Added Lines]",
      "290:   if string(v) != token && !isRouteExcludedFromAPITokenAuth(string(ctx.Request.Header.Method()), string(ctx.Request.URI().FullURI())) {",
      "292:    return",
      "295:   ctx.Request.Header.Del(authConsts.APITokenHeader)",
      "296:   next(ctx)",
      "297:  }",
      "298: }",
      "300: func isRouteExcludedFromAPITokenAuth(method string, urlString string) bool {",
      "301:  u, err := url.Parse(urlString)",
      "302:  if err != nil {",
      "303:   return false",
      "304:  }",
      "305:  path := strings.Trim(u.Path, \"/\")",
      "306:  switch path {",
      "307:  case apiVersionV1 + \"/healthz\":",
      "308:   return method == http.MethodGet",
      "309:  case apiVersionV1 + \"/healthz/outbound\":",
      "310:   return method == http.MethodGet",
      "311:  default:",
      "312:   return false",
      "",
      "---------------"
    ],
    "pkg/runtime/security/token.go||pkg/runtime/security/token.go": [
      "File: pkg/runtime/security/token.go -> pkg/runtime/security/token.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import (",
      "17:  \"os\"",
      "20:  \"github.com/dapr/dapr/pkg/runtime/security/consts\"",
      "21: )",
      "26: func GetAPIToken() string {",
      "27:  return os.Getenv(consts.APITokenEnvVar)",
      "",
      "[Removed Lines]",
      "18:  \"strings\"",
      "23: var excludedRoutes = []string{\"/healthz\"}",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: func GetAppToken() string {",
      "32:  return os.Getenv(consts.AppAPITokenEnvVar)",
      "33: }",
      "",
      "[Removed Lines]",
      "36: func ExcludedRoute(route string) bool {",
      "37:  for _, r := range excludedRoutes {",
      "38:   if strings.Contains(route, r) {",
      "39:    return true",
      "40:   }",
      "41:  }",
      "42:  return false",
      "43: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go": [
      "File: pkg/runtime/security/token_test.go -> pkg/runtime/security/token_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   assert.Equal(t, \"\", token)",
      "55:  })",
      "56: }",
      "",
      "[Removed Lines]",
      "58: func TestExcludedRoute(t *testing.T) {",
      "59:  t.Run(\"healthz route is excluded\", func(t *testing.T) {",
      "60:   route := \"v1.0/healthz\"",
      "61:   excluded := ExcludedRoute(route)",
      "62:   assert.True(t, excluded)",
      "63:  })",
      "65:  t.Run(\"custom route is not excluded\", func(t *testing.T) {",
      "66:   route := \"v1.0/state\"",
      "67:   excluded := ExcludedRoute(route)",
      "68:   assert.False(t, excluded)",
      "69:  })",
      "70: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99d6799c97b79397443c8c96737c9b893126a1ae",
      "candidate_info": {
        "commit_hash": "99d6799c97b79397443c8c96737c9b893126a1ae",
        "repo": "dapr/dapr",
        "commit_url": "https://github.com/dapr/dapr/commit/99d6799c97b79397443c8c96737c9b893126a1ae",
        "files": [
          "docs/release_notes/v1.10.9.md",
          "pkg/http/server.go",
          "pkg/runtime/security/token.go",
          "pkg/runtime/security/token_test.go"
        ],
        "message": "Fixed API token authentication bypassed when path contains `/healthz`\n\nThe APITokenAuthMiddleware allowed bypassing the check if the path included `/healthz`. An attacker only needed to include `/healthz` in the URL, even the querystring, to bypass the API token check, for example `/v1.0/invoke/myapp/method/something?foo=/healthz`.\n\nAdditionally, this was not checking the method of the request, so requests to `POST /healthz` would cause a service invocation to happen.\n\nThis fixes the issue by making the check a lot more strict. The API token check can be bypassed only if:\n\n- The path is exactly `/v1.0/healthz` or `/v1.0/healthz/outbound` (slashes are trimmed on each side)\n- The method is `GET`\n\nSigned-off-by: ItalyPaleAle <43508+ItalyPaleAle@users.noreply.github.com>",
        "before_after_code_files": [
          "pkg/http/server.go||pkg/http/server.go",
          "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
          "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/http/server.go||pkg/http/server.go",
            "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
            "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
          ],
          "candidate": [
            "pkg/http/server.go||pkg/http/server.go",
            "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
            "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/http/server.go||pkg/http/server.go": [
          "File: pkg/http/server.go -> pkg/http/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:  return func(ctx *fasthttp.RequestCtx) {",
          "289:   v := ctx.Request.Header.Peek(authConsts.APITokenHeader)",
          "294:    ctx.Error(\"invalid api token\", http.StatusUnauthorized)",
          "295:   }",
          "296:  }",
          "297: }",
          "",
          "[Removed Lines]",
          "290:   if auth.ExcludedRoute(string(ctx.Request.URI().FullURI())) || string(v) == token {",
          "291:    ctx.Request.Header.Del(authConsts.APITokenHeader)",
          "292:    next(ctx)",
          "293:   } else {",
          "",
          "[Added Lines]",
          "290:   if string(v) != token && !isRouteExcludedFromAPITokenAuth(string(ctx.Request.Header.Method()), string(ctx.Request.URI().FullURI())) {",
          "292:    return",
          "295:   ctx.Request.Header.Del(authConsts.APITokenHeader)",
          "296:   next(ctx)",
          "297:  }",
          "298: }",
          "300: func isRouteExcludedFromAPITokenAuth(method string, urlString string) bool {",
          "301:  u, err := url.Parse(urlString)",
          "302:  if err != nil {",
          "303:   return false",
          "304:  }",
          "305:  path := strings.Trim(u.Path, \"/\")",
          "306:  switch path {",
          "307:  case apiVersionV1 + \"/healthz\":",
          "308:   return method == http.MethodGet",
          "309:  case apiVersionV1 + \"/healthz/outbound\":",
          "310:   return method == http.MethodGet",
          "311:  default:",
          "312:   return false",
          "",
          "---------------"
        ],
        "pkg/runtime/security/token.go||pkg/runtime/security/token.go": [
          "File: pkg/runtime/security/token.go -> pkg/runtime/security/token.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"os\"",
          "20:  \"github.com/dapr/dapr/pkg/runtime/security/consts\"",
          "21: )",
          "26: func GetAPIToken() string {",
          "27:  return os.Getenv(consts.APITokenEnvVar)",
          "",
          "[Removed Lines]",
          "18:  \"strings\"",
          "23: var excludedRoutes = []string{\"/healthz\"}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: func GetAppToken() string {",
          "32:  return os.Getenv(consts.AppAPITokenEnvVar)",
          "33: }",
          "",
          "[Removed Lines]",
          "36: func ExcludedRoute(route string) bool {",
          "37:  for _, r := range excludedRoutes {",
          "38:   if strings.Contains(route, r) {",
          "39:    return true",
          "40:   }",
          "41:  }",
          "42:  return false",
          "43: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go": [
          "File: pkg/runtime/security/token_test.go -> pkg/runtime/security/token_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   assert.Equal(t, \"\", token)",
          "55:  })",
          "56: }",
          "",
          "[Removed Lines]",
          "58: func TestExcludedRoute(t *testing.T) {",
          "59:  t.Run(\"healthz route is excluded\", func(t *testing.T) {",
          "60:   route := \"v1.0/healthz\"",
          "61:   excluded := ExcludedRoute(route)",
          "62:   assert.True(t, excluded)",
          "63:  })",
          "65:  t.Run(\"custom route is not excluded\", func(t *testing.T) {",
          "66:   route := \"v1.0/state\"",
          "67:   excluded := ExcludedRoute(route)",
          "68:   assert.False(t, excluded)",
          "69:  })",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c265f8803338bf7eb7afcaa42b6e2933d5e9e94e",
      "candidate_info": {
        "commit_hash": "c265f8803338bf7eb7afcaa42b6e2933d5e9e94e",
        "repo": "dapr/dapr",
        "commit_url": "https://github.com/dapr/dapr/commit/c265f8803338bf7eb7afcaa42b6e2933d5e9e94e",
        "files": [
          "docs/release_notes/v1.9.7.md",
          "pkg/http/server.go",
          "pkg/runtime/security/token.go",
          "pkg/runtime/security/token_test.go"
        ],
        "message": "fixed API token authentication bypass (#6735)\n\nSigned-off-by: Mukundan Sundararajan <65565396+mukundansundar@users.noreply.github.com>",
        "before_after_code_files": [
          "pkg/http/server.go||pkg/http/server.go",
          "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
          "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/http/server.go||pkg/http/server.go",
            "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
            "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
          ],
          "candidate": [
            "pkg/http/server.go||pkg/http/server.go",
            "pkg/runtime/security/token.go||pkg/runtime/security/token.go",
            "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/http/server.go||pkg/http/server.go": [
          "File: pkg/http/server.go -> pkg/http/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:  return func(ctx *fasthttp.RequestCtx) {",
          "279:   v := ctx.Request.Header.Peek(authConsts.APITokenHeader)",
          "284:    ctx.Error(\"invalid api token\", http.StatusUnauthorized)",
          "285:   }",
          "286:  }",
          "287: }",
          "",
          "[Removed Lines]",
          "280:   if auth.ExcludedRoute(string(ctx.Request.URI().FullURI())) || string(v) == token {",
          "281:    ctx.Request.Header.Del(authConsts.APITokenHeader)",
          "282:    next(ctx)",
          "283:   } else {",
          "",
          "[Added Lines]",
          "280:   if string(v) != token && !isRouteExcludedFromAPITokenAuth(string(ctx.Request.Header.Method()), string(ctx.Request.URI().FullURI())) {",
          "282:    return",
          "284:   ctx.Request.Header.Del(authConsts.APITokenHeader)",
          "285:   next(ctx)",
          "286:  }",
          "287: }",
          "289: func isRouteExcludedFromAPITokenAuth(method string, urlString string) bool {",
          "290:  u, err := url.Parse(urlString)",
          "291:  if err != nil {",
          "292:   return false",
          "293:  }",
          "294:  path := strings.Trim(u.Path, \"/\")",
          "295:  switch path {",
          "296:  case apiVersionV1 + \"/healthz\":",
          "297:   return method == http.MethodGet",
          "298:  case apiVersionV1 + \"/healthz/outbound\":",
          "299:   return method == http.MethodGet",
          "300:  default:",
          "301:   return false",
          "",
          "---------------"
        ],
        "pkg/runtime/security/token.go||pkg/runtime/security/token.go": [
          "File: pkg/runtime/security/token.go -> pkg/runtime/security/token.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"os\"",
          "20:  \"github.com/dapr/dapr/pkg/runtime/security/consts\"",
          "21: )",
          "26: func GetAPIToken() string {",
          "27:  return os.Getenv(consts.APITokenEnvVar)",
          "",
          "[Removed Lines]",
          "18:  \"strings\"",
          "23: var excludedRoutes = []string{\"/healthz\"}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: func GetAppToken() string {",
          "32:  return os.Getenv(consts.AppAPITokenEnvVar)",
          "33: }",
          "",
          "[Removed Lines]",
          "36: func ExcludedRoute(route string) bool {",
          "37:  for _, r := range excludedRoutes {",
          "38:   if strings.Contains(route, r) {",
          "39:    return true",
          "40:   }",
          "41:  }",
          "42:  return false",
          "43: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/runtime/security/token_test.go||pkg/runtime/security/token_test.go": [
          "File: pkg/runtime/security/token_test.go -> pkg/runtime/security/token_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:   assert.Equal(t, \"\", token)",
          "55:  })",
          "56: }",
          "",
          "[Removed Lines]",
          "58: func TestExcludedRoute(t *testing.T) {",
          "59:  t.Run(\"healthz route is excluded\", func(t *testing.T) {",
          "60:   route := \"v1.0/healthz\"",
          "61:   excluded := ExcludedRoute(route)",
          "62:   assert.True(t, excluded)",
          "63:  })",
          "65:  t.Run(\"custom route is not excluded\", func(t *testing.T) {",
          "66:   route := \"v1.0/state\"",
          "67:   excluded := ExcludedRoute(route)",
          "68:   assert.False(t, excluded)",
          "69:  })",
          "70: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}