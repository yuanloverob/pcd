{
  "cve_id": "CVE-2022-2922",
  "cve_desc": "Relative Path Traversal in GitHub repository dnnsoftware/dnn.platform prior to 9.11.0.",
  "repo": "dnnsoftware/dnn.platform",
  "patch_hash": "9b17351592fbde376506ba6705dbcc7a74a2a195",
  "patch_info": {
    "commit_hash": "9b17351592fbde376506ba6705dbcc7a74a2a195",
    "repo": "dnnsoftware/dnn.platform",
    "commit_url": "https://github.com/dnnsoftware/dnn.platform/commit/9b17351592fbde376506ba6705dbcc7a74a2a195",
    "files": [
      "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
    ],
    "message": "Restrict log viewing to files only",
    "before_after_code_files": [
      "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
    ]
  },
  "patch_diff": {
    "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs": [
      "File: Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs -> Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \ufeff// Licensed to the .NET Foundation under one or more agreements.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:         {",
      "53:             try",
      "54:             {",
      "56:                 return this.CreateLogFileResponse(logFilePath);",
      "57:             }",
      "58:             catch (ArgumentException exc)",
      "",
      "[Removed Lines]",
      "55:                 var logFilePath = Path.Combine(Globals.ApplicationMapPath, @\"portals\\_default\\logs\", fileName);",
      "",
      "[Added Lines]",
      "55:                 var cleanedFileName = Path.GetFileName(fileName);",
      "56:                 var logFilePath = Path.Combine(Globals.ApplicationMapPath, @\"portals\\_default\\logs\", cleanedFileName);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "72:             try",
      "73:             {",
      "74:                 var providerPath = DataProvider.Instance().GetProviderPath();",
      "76:                 return this.CreateLogFileResponse(logFilePath);",
      "77:             }",
      "78:             catch (ArgumentException exc)",
      "",
      "[Removed Lines]",
      "75:                 var logFilePath = Path.Combine(providerPath, logName);",
      "",
      "[Added Lines]",
      "76:                 var cleanedLogName = Path.GetFileName(logName);",
      "77:                 var logFilePath = Path.Combine(providerPath, cleanedLogName);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3697c5344cef8d49214230f0cc2efcd9e93a00a8",
      "candidate_info": {
        "commit_hash": "3697c5344cef8d49214230f0cc2efcd9e93a00a8",
        "repo": "dnnsoftware/dnn.platform",
        "commit_url": "https://github.com/dnnsoftware/dnn.platform/commit/3697c5344cef8d49214230f0cc2efcd9e93a00a8",
        "files": [
          "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
        ],
        "message": "Restrict log viewing to files only",
        "before_after_code_files": [
          "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
          ],
          "candidate": [
            "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs"
          ]
        }
      },
      "candidate_diff": {
        "Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs||Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs": [
          "File: Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs -> Dnn.AdminExperience/Dnn.PersonaBar.Extensions/Services/ServerSettingsLogsController.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeff// Licensed to the .NET Foundation under one or more agreements.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         {",
          "53:             try",
          "54:             {",
          "56:                 return this.CreateLogFileResponse(logFilePath);",
          "57:             }",
          "58:             catch (ArgumentException exc)",
          "",
          "[Removed Lines]",
          "55:                 var logFilePath = Path.Combine(Globals.ApplicationMapPath, @\"portals\\_default\\logs\", fileName);",
          "",
          "[Added Lines]",
          "55:                 var cleanedFileName = Path.GetFileName(fileName);",
          "56:                 var logFilePath = Path.Combine(Globals.ApplicationMapPath, @\"portals\\_default\\logs\", cleanedFileName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:             try",
          "73:             {",
          "74:                 var providerPath = DataProvider.Instance().GetProviderPath();",
          "76:                 return this.CreateLogFileResponse(logFilePath);",
          "77:             }",
          "78:             catch (ArgumentException exc)",
          "",
          "[Removed Lines]",
          "75:                 var logFilePath = Path.Combine(providerPath, logName);",
          "",
          "[Added Lines]",
          "76:                 var cleanedLogName = Path.GetFileName(logName);",
          "77:                 var logFilePath = Path.Combine(providerPath, cleanedLogName);",
          "",
          "---------------"
        ]
      }
    }
  ]
}