{
  "cve_id": "CVE-2024-29190",
  "cve_desc": "Mobile Security Framework (MobSF) is a pen-testing, malware analysis and security assessment framework capable of performing static and dynamic analysis. In version 3.9.5 Beta and prior, MobSF does not perform any input validation when extracting the hostnames in `android:host`, so requests can also be sent to local hostnames. This can lead to server-side request forgery. An attacker can cause the server to make a connection to internal-only services within the organization's infrastructure. Commit 5a8eeee73c5f504a6c3abdf2a139a13804efdb77 has a hotfix for this issue.\n",
  "repo": "MobSF/Mobile-Security-Framework-MobSF",
  "patch_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
  "patch_info": {
    "commit_hash": "5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "repo": "MobSF/Mobile-Security-Framework-MobSF",
    "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/5a8eeee73c5f504a6c3abdf2a139a13804efdb77",
    "files": [
      ".github/workflows/docker-release.yml",
      ".github/workflows/docker-test.yml",
      "mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock",
      "pyproject.toml"
    ],
    "message": "HOTFIX:[SECURITY] Fix GHSA-wfgj-wrgh-h3r3, dep bump, docker build qa",
    "before_after_code_files": [
      "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
      "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py",
      "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
      "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: logger = logging.getLogger(__name__)",
      "14: BANNER = \"\"\"",
      "15:   __  __       _    ____  _____       _____ ___",
      "16:  |  \\/  | ___ | |__/ ___||  ___|_   _|___ // _ \\",
      "",
      "[Removed Lines]",
      "13: VERSION = '3.9.5'",
      "",
      "[Added Lines]",
      "13: VERSION = '3.9.6'",
      "",
      "---------------"
    ],
    "mobsf/MobSF/utils.py||mobsf/MobSF/utils.py": [
      "File: mobsf/MobSF/utils.py -> mobsf/MobSF/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: import string",
      "17: import subprocess",
      "18: import stat",
      "19: import sqlite3",
      "20: import unicodedata",
      "21: import threading",
      "22: from pathlib import Path",
      "23: from distutils.version import StrictVersion",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import socket",
      "23: from urllib.parse import urlparse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "848: def id_generator(size=6, chars=string.ascii_uppercase + string.digits):",
      "849:     \"\"\"Generate random string.\"\"\"",
      "850:     return ''.join(random.choice(chars) for _ in range(size))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855: def valid_host(host):",
      "856:     \"\"\"Check if host is valid.\"\"\"",
      "857:     try:",
      "858:         prefixs = ('http://', 'https://')",
      "859:         if not host.startswith(prefixs):",
      "860:             host = f'http://{host}'",
      "861:         parsed = urlparse(host)",
      "862:         domain = parsed.netloc",
      "863:         path = parsed.path",
      "864:         if len(domain) == 0:",
      "865:             # No valid domain",
      "866:             return False",
      "867:         if len(path) > 0:",
      "868:             # Only host is allowed",
      "869:             return False",
      "870:         if ':' in domain:",
      "871:             # IPv6",
      "872:             return False",
      "873:         # Local network",
      "874:         invalid_prefix = (",
      "875:             '127.',",
      "876:             '192.',",
      "877:             '10.',",
      "878:             '172.',",
      "879:             '169',",
      "880:             '0.',",
      "881:             'localhost')",
      "882:         if domain.startswith(invalid_prefix):",
      "883:             return False",
      "884:         ip = socket.gethostbyname(domain)",
      "885:         if ip.startswith(invalid_prefix):",
      "886:             # Resolve dns to get IP",
      "887:             return False",
      "888:         return True",
      "889:     except Exception:",
      "890:         return False",
      "",
      "---------------"
    ],
    "mobsf/StaticAnalyzer/views/android/manifest_analysis.py||mobsf/StaticAnalyzer/views/android/manifest_analysis.py": [
      "File: mobsf/StaticAnalyzer/views/android/manifest_analysis.py -> mobsf/StaticAnalyzer/views/android/manifest_analysis.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from concurrent.futures import ThreadPoolExecutor",
      "9: from mobsf.MobSF.utils import (",
      "10:     upstream_proxy,",
      "11: )",
      "12: from mobsf.StaticAnalyzer.views.android import (",
      "13:     android_manifest_desc,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:     is_number,",
      "12:     valid_host,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "148:                           and scheme in ('http', 'https')",
      "149:                           and host",
      "150:                           and host != '*'):",
      "152:                         shost = f'{scheme}://{host}'",
      "154:                             c_url = f'{shost}:{port}{well_known_path}'",
      "155:                         else:",
      "156:                             c_url = f'{shost}{well_known_path}'",
      "",
      "[Removed Lines]",
      "151:                         host = host.replace('*.', '')",
      "153:                         if port:",
      "",
      "[Added Lines]",
      "153:                         host = host.replace('*.', '').replace('#', '')",
      "154:                         if not valid_host(host):",
      "155:                             continue",
      "157:                         if port and is_number(port):",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "101: [[package]]",
      "102: name = \"apkinspector\"",
      "104: description = \"apkInspector is a tool designed to provide detailed insights into the zip structure of APK files, offering the capability to extract content and decode the AndroidManifest.xml file.\"",
      "105: optional = false",
      "106: python-versions = \">=3.5,<4.0\"",
      "107: files = [",
      "110: ]",
      "112: [[package]]",
      "",
      "[Removed Lines]",
      "103: version = \"1.2.1\"",
      "108:     {file = \"apkinspector-1.2.1-py3-none-any.whl\", hash = \"sha256:4736719884e92dfbe3203103ad46deb22b4683e208ae66972236a052c5d23e37\"},",
      "109:     {file = \"apkinspector-1.2.1.tar.gz\", hash = \"sha256:6c1fd678246760e75f8386e6f4d9686b640cc6bd88256f0865dfacbd49e8e0dd\"},",
      "",
      "[Added Lines]",
      "103: version = \"1.2.2\"",
      "108:     {file = \"apkinspector-1.2.2-py3-none-any.whl\", hash = \"sha256:ad55200bd72eb1edeeb5fb114e3bb576ec825feef54fb8727173f1f02fa12bb7\"},",
      "109:     {file = \"apkinspector-1.2.2.tar.gz\", hash = \"sha256:ea7e56090e95eb791b593e9beedf4f1056eb269c4483558e13d5d5ef4b479c60\"},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "951: [[package]]",
      "952: name = \"fonttools\"",
      "954: description = \"Tools to manipulate font files\"",
      "955: optional = false",
      "956: python-versions = \">=3.8\"",
      "957: files = [",
      "1000: ]",
      "1002: [package.extras]",
      "",
      "[Removed Lines]",
      "953: version = \"4.49.0\"",
      "958:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d970ecca0aac90d399e458f0b7a8a597e08f95de021f17785fb68e2dc0b99717\"},",
      "959:     {file = \"fonttools-4.49.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac9a745b7609f489faa65e1dc842168c18530874a5f5b742ac3dd79e26bca8bc\"},",
      "960:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0ba0e00620ca28d4ca11fc700806fd69144b463aa3275e1b36e56c7c09915559\"},",
      "961:     {file = \"fonttools-4.49.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cdee3ab220283057e7840d5fb768ad4c2ebe65bdba6f75d5d7bf47f4e0ed7d29\"},",
      "962:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:ce7033cb61f2bb65d8849658d3786188afd80f53dad8366a7232654804529532\"},",
      "963:     {file = \"fonttools-4.49.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:07bc5ea02bb7bc3aa40a1eb0481ce20e8d9b9642a9536cde0218290dd6085828\"},",
      "964:     {file = \"fonttools-4.49.0-cp310-cp310-win32.whl\", hash = \"sha256:86eef6aab7fd7c6c8545f3ebd00fd1d6729ca1f63b0cb4d621bccb7d1d1c852b\"},",
      "965:     {file = \"fonttools-4.49.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:1fac1b7eebfce75ea663e860e7c5b4a8831b858c17acd68263bc156125201abf\"},",
      "966:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:edc0cce355984bb3c1d1e89d6a661934d39586bb32191ebff98c600f8957c63e\"},",
      "967:     {file = \"fonttools-4.49.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:83a0d9336de2cba86d886507dd6e0153df333ac787377325a39a2797ec529814\"},",
      "968:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:36c8865bdb5cfeec88f5028e7e592370a0657b676c6f1d84a2108e0564f90e22\"},",
      "969:     {file = \"fonttools-4.49.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:33037d9e56e2562c710c8954d0f20d25b8386b397250d65581e544edc9d6b942\"},",
      "970:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8fb022d799b96df3eaa27263e9eea306bd3d437cc9aa981820850281a02b6c9a\"},",
      "971:     {file = \"fonttools-4.49.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:33c584c0ef7dc54f5dd4f84082eabd8d09d1871a3d8ca2986b0c0c98165f8e86\"},",
      "972:     {file = \"fonttools-4.49.0-cp311-cp311-win32.whl\", hash = \"sha256:cbe61b158deb09cffdd8540dc4a948d6e8f4d5b4f3bf5cd7db09bd6a61fee64e\"},",
      "973:     {file = \"fonttools-4.49.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fc11e5114f3f978d0cea7e9853627935b30d451742eeb4239a81a677bdee6bf6\"},",
      "974:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d647a0e697e5daa98c87993726da8281c7233d9d4ffe410812a4896c7c57c075\"},",
      "975:     {file = \"fonttools-4.49.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:f3bbe672df03563d1f3a691ae531f2e31f84061724c319652039e5a70927167e\"},",
      "976:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bebd91041dda0d511b0d303180ed36e31f4f54b106b1259b69fade68413aa7ff\"},",
      "977:     {file = \"fonttools-4.49.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4145f91531fd43c50f9eb893faa08399816bb0b13c425667c48475c9f3a2b9b5\"},",
      "978:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ea329dafb9670ffbdf4dbc3b0e5c264104abcd8441d56de77f06967f032943cb\"},",
      "979:     {file = \"fonttools-4.49.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:c076a9e548521ecc13d944b1d261ff3d7825048c338722a4bd126d22316087b7\"},",
      "980:     {file = \"fonttools-4.49.0-cp312-cp312-win32.whl\", hash = \"sha256:b607ea1e96768d13be26d2b400d10d3ebd1456343eb5eaddd2f47d1c4bd00880\"},",
      "981:     {file = \"fonttools-4.49.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a974c49a981e187381b9cc2c07c6b902d0079b88ff01aed34695ec5360767034\"},",
      "982:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:b85ec0bdd7bdaa5c1946398cbb541e90a6dfc51df76dfa88e0aaa41b335940cb\"},",
      "983:     {file = \"fonttools-4.49.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:af20acbe198a8a790618ee42db192eb128afcdcc4e96d99993aca0b60d1faeb4\"},",
      "984:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4d418b1fee41a1d14931f7ab4b92dc0bc323b490e41d7a333eec82c9f1780c75\"},",
      "985:     {file = \"fonttools-4.49.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b44a52b8e6244b6548851b03b2b377a9702b88ddc21dcaf56a15a0393d425cb9\"},",
      "986:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:7c7125068e04a70739dad11857a4d47626f2b0bd54de39e8622e89701836eabd\"},",
      "987:     {file = \"fonttools-4.49.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:29e89d0e1a7f18bc30f197cfadcbef5a13d99806447c7e245f5667579a808036\"},",
      "988:     {file = \"fonttools-4.49.0-cp38-cp38-win32.whl\", hash = \"sha256:9d95fa0d22bf4f12d2fb7b07a46070cdfc19ef5a7b1c98bc172bfab5bf0d6844\"},",
      "989:     {file = \"fonttools-4.49.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:768947008b4dc552d02772e5ebd49e71430a466e2373008ce905f953afea755a\"},",
      "990:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:08877e355d3dde1c11973bb58d4acad1981e6d1140711230a4bfb40b2b937ccc\"},",
      "991:     {file = \"fonttools-4.49.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:fdb54b076f25d6b0f0298dc706acee5052de20c83530fa165b60d1f2e9cbe3cb\"},",
      "992:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0af65c720520710cc01c293f9c70bd69684365c6015cc3671db2b7d807fe51f2\"},",
      "993:     {file = \"fonttools-4.49.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1f255ce8ed7556658f6d23f6afd22a6d9bbc3edb9b96c96682124dc487e1bf42\"},",
      "994:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d00af0884c0e65f60dfaf9340e26658836b935052fdd0439952ae42e44fdd2be\"},",
      "995:     {file = \"fonttools-4.49.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:263832fae27481d48dfafcc43174644b6706639661e242902ceb30553557e16c\"},",
      "996:     {file = \"fonttools-4.49.0-cp39-cp39-win32.whl\", hash = \"sha256:0404faea044577a01bb82d47a8fa4bc7a54067fa7e324785dd65d200d6dd1133\"},",
      "997:     {file = \"fonttools-4.49.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:b050d362df50fc6e38ae3954d8c29bf2da52be384649ee8245fdb5186b620836\"},",
      "998:     {file = \"fonttools-4.49.0-py3-none-any.whl\", hash = \"sha256:af281525e5dd7fa0b39fb1667b8d5ca0e2a9079967e14c4bfe90fd1cd13e0f18\"},",
      "999:     {file = \"fonttools-4.49.0.tar.gz\", hash = \"sha256:ebf46e7f01b7af7861310417d7c49591a85d99146fc23a5ba82fdb28af156321\"},",
      "",
      "[Added Lines]",
      "953: version = \"4.50.0\"",
      "958:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:effd303fb422f8ce06543a36ca69148471144c534cc25f30e5be752bc4f46736\"},",
      "959:     {file = \"fonttools-4.50.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:7913992ab836f621d06aabac118fc258b9947a775a607e1a737eb3a91c360335\"},",
      "960:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e0a1c5bd2f63da4043b63888534b52c5a1fd7ae187c8ffc64cbb7ae475b9dab\"},",
      "961:     {file = \"fonttools-4.50.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d40fc98540fa5360e7ecf2c56ddf3c6e7dd04929543618fd7b5cc76e66390562\"},",
      "962:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9fff65fbb7afe137bac3113827855e0204482727bddd00a806034ab0d3951d0d\"},",
      "963:     {file = \"fonttools-4.50.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b1aeae3dd2ee719074a9372c89ad94f7c581903306d76befdaca2a559f802472\"},",
      "964:     {file = \"fonttools-4.50.0-cp310-cp310-win32.whl\", hash = \"sha256:e9623afa319405da33b43c85cceb0585a6f5d3a1d7c604daf4f7e1dd55c03d1f\"},",
      "965:     {file = \"fonttools-4.50.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:778c5f43e7e654ef7fe0605e80894930bc3a7772e2f496238e57218610140f54\"},",
      "966:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3dfb102e7f63b78c832e4539969167ffcc0375b013080e6472350965a5fe8048\"},",
      "967:     {file = \"fonttools-4.50.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:9e58fe34cb379ba3d01d5d319d67dd3ce7ca9a47ad044ea2b22635cd2d1247fc\"},",
      "968:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2c673ab40d15a442a4e6eb09bf007c1dda47c84ac1e2eecbdf359adacb799c24\"},",
      "969:     {file = \"fonttools-4.50.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9b3ac35cdcd1a4c90c23a5200212c1bb74fa05833cc7c14291d7043a52ca2aaa\"},",
      "970:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:8844e7a2c5f7ecf977e82eb6b3014f025c8b454e046d941ece05b768be5847ae\"},",
      "971:     {file = \"fonttools-4.50.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:f849bd3c5c2249b49c98eca5aaebb920d2bfd92b3c69e84ca9bddf133e9f83f0\"},",
      "972:     {file = \"fonttools-4.50.0-cp311-cp311-win32.whl\", hash = \"sha256:39293ff231b36b035575e81c14626dfc14407a20de5262f9596c2cbb199c3625\"},",
      "973:     {file = \"fonttools-4.50.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:c33d5023523b44d3481624f840c8646656a1def7630ca562f222eb3ead16c438\"},",
      "974:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:b4a886a6dbe60100ba1cd24de962f8cd18139bd32808da80de1fa9f9f27bf1dc\"},",
      "975:     {file = \"fonttools-4.50.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ca1837bfbe5eafa11313dbc7edada79052709a1fffa10cea691210af4aa1fa\"},",
      "976:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0493dd97ac8977e48ffc1476b932b37c847cbb87fd68673dee5182004906828\"},",
      "977:     {file = \"fonttools-4.50.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:77844e2f1b0889120b6c222fc49b2b75c3d88b930615e98893b899b9352a27ea\"},",
      "978:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:3566bfb8c55ed9100afe1ba6f0f12265cd63a1387b9661eb6031a1578a28bad1\"},",
      "979:     {file = \"fonttools-4.50.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:35e10ddbc129cf61775d58a14f2d44121178d89874d32cae1eac722e687d9019\"},",
      "980:     {file = \"fonttools-4.50.0-cp312-cp312-win32.whl\", hash = \"sha256:cc8140baf9fa8f9b903f2b393a6c413a220fa990264b215bf48484f3d0bf8710\"},",
      "981:     {file = \"fonttools-4.50.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:0ccc85fd96373ab73c59833b824d7a73846670a0cb1f3afbaee2b2c426a8f931\"},",
      "982:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:e270a406219af37581d96c810172001ec536e29e5593aa40d4c01cca3e145aa6\"},",
      "983:     {file = \"fonttools-4.50.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ac2463de667233372e9e1c7e9de3d914b708437ef52a3199fdbf5a60184f190c\"},",
      "984:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:47abd6669195abe87c22750dbcd366dc3a0648f1b7c93c2baa97429c4dc1506e\"},",
      "985:     {file = \"fonttools-4.50.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:074841375e2e3d559aecc86e1224caf78e8b8417bb391e7d2506412538f21adc\"},",
      "986:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:0743fd2191ad7ab43d78cd747215b12033ddee24fa1e088605a3efe80d6984de\"},",
      "987:     {file = \"fonttools-4.50.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:3d7080cce7be5ed65bee3496f09f79a82865a514863197ff4d4d177389e981b0\"},",
      "988:     {file = \"fonttools-4.50.0-cp38-cp38-win32.whl\", hash = \"sha256:a467ba4e2eadc1d5cc1a11d355abb945f680473fbe30d15617e104c81f483045\"},",
      "989:     {file = \"fonttools-4.50.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:f77e048f805e00870659d6318fd89ef28ca4ee16a22b4c5e1905b735495fc422\"},",
      "990:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:b6245eafd553c4e9a0708e93be51392bd2288c773523892fbd616d33fd2fda59\"},",
      "991:     {file = \"fonttools-4.50.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:a4062cc7e8de26f1603323ef3ae2171c9d29c8a9f5e067d555a2813cd5c7a7e0\"},",
      "992:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:34692850dfd64ba06af61e5791a441f664cb7d21e7b544e8f385718430e8f8e4\"},",
      "993:     {file = \"fonttools-4.50.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:678dd95f26a67e02c50dcb5bf250f95231d455642afbc65a3b0bcdacd4e4dd38\"},",
      "994:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:4f2ce7b0b295fe64ac0a85aef46a0f2614995774bd7bc643b85679c0283287f9\"},",
      "995:     {file = \"fonttools-4.50.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:d346f4dc2221bfb7ab652d1e37d327578434ce559baf7113b0f55768437fe6a0\"},",
      "996:     {file = \"fonttools-4.50.0-cp39-cp39-win32.whl\", hash = \"sha256:a51eeaf52ba3afd70bf489be20e52fdfafe6c03d652b02477c6ce23c995222f4\"},",
      "997:     {file = \"fonttools-4.50.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:8639be40d583e5d9da67795aa3eeeda0488fb577a1d42ae11a5036f18fb16d93\"},",
      "998:     {file = \"fonttools-4.50.0-py3-none-any.whl\", hash = \"sha256:48fa36da06247aa8282766cfd63efff1bb24e55f020f29a335939ed3844d20d3\"},",
      "999:     {file = \"fonttools-4.50.0.tar.gz\", hash = \"sha256:fa5cf61058c7dbb104c2ac4e782bf1b2016a8cf2f69de6e4dd6a865d2c969bb5\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2538: [[package]]",
      "2539: name = \"pyqt5-qt5\"",
      "2541: description = \"The subset of a Qt installation needed by PyQt5.\"",
      "2542: optional = false",
      "2543: python-versions = \"*\"",
      "2544: files = [",
      "2549: ]",
      "2551: [[package]]",
      "",
      "[Removed Lines]",
      "2540: version = \"5.15.2\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.2-py3-none-macosx_10_13_intel.whl\", hash = \"sha256:76980cd3d7ae87e3c7a33bfebfaee84448fd650bad6840471d6cae199b56e154\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.2-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:1988f364ec8caf87a6ee5d5a3a5210d57539988bf8e84714c7d60972692e2f4a\"},",
      "2547:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win32.whl\", hash = \"sha256:9cc7a768b1921f4b982ebc00a318ccb38578e44e45316c7a4a850e953e1dd327\"},",
      "2548:     {file = \"PyQt5_Qt5-5.15.2-py3-none-win_amd64.whl\", hash = \"sha256:750b78e4dba6bdf1607febedc08738e318ea09e9b10aea9ff0d73073f11f6962\"},",
      "",
      "[Added Lines]",
      "2540: version = \"5.15.13\"",
      "2545:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_10_13_x86_64.whl\", hash = \"sha256:92575a9e96a27c4ed67c56c7048ded7461a1655d5d21f0e05064664e6e9fcbdf\"},",
      "2546:     {file = \"PyQt5_Qt5-5.15.13-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:141859f2ffe04cc6c5db970e2b6ad9f98897805d886a14c52614e3799daab6d6\"},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9de0335d44767b0c7c48bcff3a9f1d9f5d31c20",
      "candidate_info": {
        "commit_hash": "a9de0335d44767b0c7c48bcff3a9f1d9f5d31c20",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/a9de0335d44767b0c7c48bcff3a9f1d9f5d31c20",
        "files": [
          "mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js",
          "mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py",
          "mobsf/DynamicAnalyzer/views/android/environment.py",
          "mobsf/DynamicAnalyzer/views/android/frida_core.py",
          "mobsf/DynamicAnalyzer/views/android/tests_common.py",
          "mobsf/DynamicAnalyzer/views/ios/frida_core.py",
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/urls.py",
          "mobsf/templates/dynamic_analysis/android/dynamic_analysis.html",
          "mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html",
          "mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "[HOTFIX] AppSec PNW 2024, Deeplink Trigger Support for Android Dynamic Analyzer (#2402)\n\n* iOS  Dynamic Analyzer String Compare Frida script improvement\n* Android Dynamic Analyzer Deeplink UI trigger support \n* Android & iOS Dynamic Analyzer UI Improvements\n* Android & iOS Dynamic Analyzer Bug fixes",
        "before_after_code_files": [
          "mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js||mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js",
          "mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py||mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py",
          "mobsf/DynamicAnalyzer/views/android/environment.py||mobsf/DynamicAnalyzer/views/android/environment.py",
          "mobsf/DynamicAnalyzer/views/android/frida_core.py||mobsf/DynamicAnalyzer/views/android/frida_core.py",
          "mobsf/DynamicAnalyzer/views/android/tests_common.py||mobsf/DynamicAnalyzer/views/android/tests_common.py",
          "mobsf/DynamicAnalyzer/views/ios/frida_core.py||mobsf/DynamicAnalyzer/views/ios/frida_core.py",
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py",
          "mobsf/templates/dynamic_analysis/android/dynamic_analysis.html||mobsf/templates/dynamic_analysis/android/dynamic_analysis.html",
          "mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html||mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html",
          "mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html||mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js||mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js": [
          "File: mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js -> mobsf/DynamicAnalyzer/tools/frida_scripts/ios/auxiliary/string-compare.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   send('Capturing string comparisons')",
          "3:   Interceptor.attach(ObjC.classes.__NSCFString['- isEqualToString:'].implementation, {",
          "4:     onEnter: function (args) {",
          "5:       var str = new ObjC.Object(ptr(args[2])).toString()",
          "7:     }",
          "8:   });",
          "9: }",
          "",
          "[Removed Lines]",
          "6:       send('[AUXILIARY] [__NSCFString isEqualToString:] -> '+ str);",
          "",
          "[Added Lines]",
          "5:       var src = new ObjC.Object(ptr(args[0])).toString()",
          "7:       send('[AUXILIARY] [__NSCFString isEqualToString:] -> \\nstring 1: '+ src + '\\nstring 2: '+ str);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: function captureStringCompare2(){",
          "12:   Interceptor.attach(ObjC.classes.NSTaggedPointerString['- isEqualToString:'].implementation, {",
          "13:     onEnter: function (args) {",
          "14:       var str = new ObjC.Object(ptr(args[2])).toString()",
          "16:     }",
          "17:   });",
          "18: }",
          "",
          "[Removed Lines]",
          "15:       send('[AUXILIARY] NSTaggedPointerString[- isEqualToString:] -> '+ str);",
          "",
          "[Added Lines]",
          "15:       var src = new ObjC.Object(ptr(args[0])).toString()",
          "17:       send('[AUXILIARY] NSTaggedPointerString[- isEqualToString:] -> \\nstring 1: '+ src + '\\nstring 2: '+ str);",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py||mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py": [
          "File: mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py -> mobsf/DynamicAnalyzer/views/android/dynamic_analyzer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     get_proxy_ip,",
          "35:     is_md5,",
          "36:     print_n_send_error_response,",
          "37:     python_list,",
          "38:     strict_package_check,",
          "39: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:     python_dict,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:                 static_android_db.EXPORTED_ACTIVITIES)",
          "156:             activities = python_list(",
          "157:                 static_android_db.ACTIVITIES)",
          "158:         except ObjectDoesNotExist:",
          "159:             logger.warning(",
          "161:                 'Static Analysis not completed for the app.')",
          "162:         env = Environment(identifier)",
          "163:         if not env.connect_n_mount():",
          "",
          "[Removed Lines]",
          "160:                 'Failed to get Activities. '",
          "",
          "[Added Lines]",
          "159:             deeplinks = python_dict(",
          "160:                 static_android_db.BROWSABLE_ACTIVITIES)",
          "163:                 'Failed to get Activities/Deeplinks. '",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:                    'version': settings.MOBSF_VER,",
          "219:                    'activities': activities,",
          "220:                    'exported_activities': exported_activities,",
          "221:                    'title': 'Dynamic Analyzer'}",
          "222:         template = 'dynamic_analysis/android/dynamic_analyzer.html'",
          "223:         if api:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:                    'deeplinks': deeplinks,",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/environment.py||mobsf/DynamicAnalyzer/views/android/environment.py": [
          "File: mobsf/DynamicAnalyzer/views/android/environment.py -> mobsf/DynamicAnalyzer/views/android/environment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:             return 'emulator'",
          "369:         elif (b'genymotion' in out.lower()",
          "370:                 or any(char.isdigit() for char in ver)):",
          "372:             return 'genymotion'",
          "373:         elif b'corellium' in out:",
          "374:             logger.info('Found Corellium ARM Android VM')",
          "",
          "[Removed Lines]",
          "371:             logger.info('Found Genymotion x86 Android VM')",
          "",
          "[Added Lines]",
          "371:             logger.info('Found Genymotion Android VM')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "652:         elif arch == 'x86_64':",
          "653:             frida_arch = 'x86_64'",
          "654:         else:",
          "656:                          ' or Android Studio Emulator'",
          "657:                          ' instance is running')",
          "658:             return",
          "",
          "[Removed Lines]",
          "655:             logger.error('Make sure a Genymotion Android x86 VM'",
          "",
          "[Added Lines]",
          "655:             logger.error('Make sure a Genymotion Android VM'",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/frida_core.py||mobsf/DynamicAnalyzer/views/android/frida_core.py": [
          "File: mobsf/DynamicAnalyzer/views/android/frida_core.py -> mobsf/DynamicAnalyzer/views/android/frida_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         loaded_class_methods = []",
          "229:         implementations = []",
          "230:         try:",
          "231:             raction = self.extras.get('rclass_action')",
          "232:             rclass = self.extras.get('rclass_name')",
          "233:             rclass_pattern = self.extras.get('rclass_pattern')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:             if not self.extras:",
          "232:                 return",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/android/tests_common.py||mobsf/DynamicAnalyzer/views/android/tests_common.py": [
          "File: mobsf/DynamicAnalyzer/views/android/tests_common.py -> mobsf/DynamicAnalyzer/views/android/tests_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     stop_httptools,",
          "29: )",
          "30: from mobsf.MobSF.utils import (",
          "31:     is_md5,",
          "32:     python_list,",
          "33: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     cmd_injection_check,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: @permission_required(Permissions.SCAN)",
          "51: @require_http_methods(['POST'])",
          "52: def start_activity(request, api=False):",
          "54:     try:",
          "55:         env = Environment()",
          "56:         activity = request.POST['activity']",
          "",
          "[Removed Lines]",
          "53:     \"\"\"Lunch a specific activity.\"\"\"",
          "",
          "[Added Lines]",
          "54:     \"\"\"Launch a specific activity.\"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:         data = {'status': 'failed', 'message': str(exp)}",
          "78:     return send_response(data, api)",
          "81: # AJAX",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: # AJAX",
          "84: @login_required",
          "85: @permission_required(Permissions.SCAN)",
          "86: @require_http_methods(['POST'])",
          "87: def start_deeplink(request, api=False):",
          "88:     \"\"\"Launch a specific deeplink.\"\"\"",
          "89:     try:",
          "90:         env = Environment()",
          "91:         url = request.POST['url']",
          "92:         md5_hash = request.POST['hash']",
          "94:         valid_md5 = is_md5(md5_hash)",
          "95:         if cmd_injection_check(url) or not valid_md5:",
          "96:             return invalid_params(api)",
          "97:         env.adb_command(",
          "98:             ['am', 'start', '-a',",
          "99:              'android.intent.action.VIEW',",
          "100:              '-d', url], True)",
          "101:         data = {'status': 'ok'}",
          "102:     except Exception as exp:",
          "103:         logger.exception('Start Activity')",
          "104:         data = {'status': 'failed', 'message': str(exp)}",
          "105:     return send_response(data, api)",
          "",
          "---------------"
        ],
        "mobsf/DynamicAnalyzer/views/ios/frida_core.py||mobsf/DynamicAnalyzer/views/ios/frida_core.py": [
          "File: mobsf/DynamicAnalyzer/views/ios/frida_core.py -> mobsf/DynamicAnalyzer/views/ios/frida_core.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:                 self.container_file.write_text(self.app_container)",
          "269:             except frida.InvalidOperationError:",
          "270:                 pass",
          "271:             raction = self.extras.get('rclass_action')",
          "272:             rclass = self.extras.get('rclass_name')",
          "273:             rclass_pattern = self.extras.get('rclass_pattern')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:             if not self.extras:",
          "272:                 return",
          "",
          "---------------"
        ],
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: logger = logging.getLogger(__name__)",
          "14: BANNER = \"\"\"",
          "15:   __  __       _    ____  _____       _  _    ___",
          "16:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / _ \\",
          "",
          "[Removed Lines]",
          "13: VERSION = '4.0.3'",
          "",
          "[Added Lines]",
          "13: VERSION = '4.0.4'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py": [
          "File: mobsf/MobSF/urls.py -> mobsf/MobSF/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:         re_path(r'^start_activity/$',",
          "282:                 tests_common.start_activity,",
          "283:                 name='start_activity'),",
          "284:         re_path(r'^download_data/$', tests_common.download_data),",
          "285:         re_path(r'^collect_logs/$', tests_common.collect_logs),",
          "286:         re_path(r'^tls_tests/$', tests_common.tls_tests),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:         re_path(r'^start_deeplink/$',",
          "285:                 tests_common.start_deeplink,",
          "286:                 name='start_deeplink'),",
          "",
          "---------------"
        ],
        "mobsf/templates/dynamic_analysis/android/dynamic_analysis.html||mobsf/templates/dynamic_analysis/android/dynamic_analysis.html": [
          "File: mobsf/templates/dynamic_analysis/android/dynamic_analysis.html -> mobsf/templates/dynamic_analysis/android/dynamic_analysis.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                      <div class=\"col-md-9\">",
          "89:                         <h4>MobSF Dynamic Analyzer Supports</h4>",
          "90:                         <h5>",
          "92:                           <strong>\u2022 Android Emulator AVD</strong> (non production) version 5.0 - 9.0 (arm, arm64, x86, and x86_64 upto API 28)<br/>",
          "93:                           <strong>\u2022 Corellium Android VM</strong> (userdebug builds) version 7.1.2 - 11.0 (arm64 upto API 30)",
          "94:                         </h5>",
          "95:                         <p>",
          "96:                           {% if android_version %}",
          "98:                             Detected Android Version: <strong>{{android_version}}</strong>, SDK: <strong>{{ android_sdk }}</strong> <br/>",
          "99:                             {% if android_sdk|floatformat > android_supported|floatformat %}",
          "100:                               <script src=\"{% static \"adminlte/plugins/sweetalert2/sweetalert2.min.js\" %}\"></script>",
          "",
          "[Removed Lines]",
          "91:                           <strong>\u2022 Genymotion Android VM</strong> version 4.1 - 11.0 (x86, upto API 30)<br/>",
          "97:                             Recommended Android version is <strong>9.0</strong><br/>",
          "",
          "[Added Lines]",
          "91:                           <strong>\u2022 Genymotion Android VM</strong> version 4.1 - 11.0 (arm64, x86, upto API 30)<br/>",
          "97:                             Android version >= <strong>9.0</strong> recommended<br/>",
          "",
          "---------------"
        ],
        "mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html||mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html": [
          "File: mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html -> mobsf/templates/dynamic_analysis/android/dynamic_analyzer.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:           <!-- /.col -->",
          "111:             <div class=\"card card-default\">",
          "112:               <!-- /.card-header -->",
          "113:               <div class=\"card-body\">",
          "",
          "[Removed Lines]",
          "110:           <div class=\"col-md-4\">",
          "",
          "[Added Lines]",
          "110:           <div class=\"col-md-3\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:           </div>",
          "144:           <!-- /.col -->",
          "147:             <div class=\"card card-default\">",
          "148:               <!-- /.card-header -->",
          "149:               <div class=\"card-body\">",
          "",
          "[Removed Lines]",
          "146:            <div class=\"col-md-{% if android_version < 5 %}8{% else %}4{% endif %}\">",
          "",
          "[Added Lines]",
          "146:            <div class=\"col-md-{% if android_version < 5 %}9{% else %}4{% endif %}\">",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:                 <button id=\"run_app\" class=\"btn btn-success\"><i class=\"fas fa-play\"></i> Run App</button>",
          "170:                 {% endif %}",
          "171:                 <!--box-->",
          "176:                     <!-- /.box-header -->",
          "177:                     <!-- form start -->",
          "178:                     <form role=\"form\">",
          "179:                       <div class=\"box-body\">",
          "199:                             <label>",
          "202:                               </label>",
          "207:                             <label>",
          "208:                             <input name=\"auxiliary\" type=\"checkbox\" value=\"enum_class\" id=\"enum_class\">",
          "209:                               Enumerate Loaded Classes",
          "",
          "[Removed Lines]",
          "172:                 <div id=\"frida_options\" class=\"box box-primary\">",
          "173:                     <div class=\"box-header with-border\">",
          "174:                       <h3 class=\"box-title\">Frida Scripts</h3>",
          "175:                     </div>",
          "180:                         <div class=\"form-group\">",
          "181:                             <hr/>",
          "182:                         <h4> Default </h4>",
          "183:                           <label>",
          "184:                               <input name=\"default_hooks\" type=\"checkbox\" value=\"api_monitor\" checked>",
          "185:                               API Monitoring",
          "186:                             </label>",
          "187:                              <label>",
          "188:                               <input name=\"default_hooks\" type=\"checkbox\" value=\"ssl_pinning_bypass\" checked>",
          "189:                               SSL Pinning Bypass",
          "190:                             </label>",
          "191:                              <label>",
          "192:                              <input name=\"default_hooks\" type=\"checkbox\"  value=\"root_bypass\" checked>",
          "193:                               Root Detection Bypass",
          "194:                             </label>",
          "195:                              <label>",
          "196:                             <input name=\"default_hooks\" type=\"checkbox\" value=\"debugger_check_bypass\" checked>",
          "197:                               Debugger Check Bypass",
          "198:                             </label>",
          "200:                               <input name=\"default_hooks\" type=\"checkbox\" value=\"dump_clipboard\" checked>",
          "201:                                Clipboard Monitor",
          "203:                         </div>",
          "204:                                            <hr/>",
          "205:                         <div class=\"form-group\">",
          "206:                         <h4> Auxiliary </h4>",
          "",
          "[Added Lines]",
          "172:                 <div class=\"box box-primary\">",
          "177:                       <div id=\"frida_options\">",
          "178:                         <hr/>",
          "179:                           <div class=\"form-group\">",
          "180:                           <h4> Default Frida Scripts </h4>",
          "182:                                 <input name=\"default_hooks\" type=\"checkbox\" value=\"api_monitor\" checked>",
          "183:                                 API Monitoring",
          "185:                               <label>",
          "186:                                 <input name=\"default_hooks\" type=\"checkbox\" value=\"ssl_pinning_bypass\" checked>",
          "187:                                 SSL Pinning Bypass",
          "188:                               </label>",
          "189:                               <label>",
          "190:                               <input name=\"default_hooks\" type=\"checkbox\"  value=\"root_bypass\" checked>",
          "191:                                 Root Detection Bypass",
          "192:                               </label>",
          "193:                               <label>",
          "194:                               <input name=\"default_hooks\" type=\"checkbox\" value=\"debugger_check_bypass\" checked>",
          "195:                                 Debugger Check Bypass",
          "196:                               </label>",
          "197:                               <label>",
          "198:                                 <input name=\"default_hooks\" type=\"checkbox\" value=\"dump_clipboard\" checked>",
          "199:                                 Clipboard Monitor",
          "200:                                 </label>",
          "201:                           </div>",
          "202:                         <hr/>",
          "203:                        <div class=\"form-group\">",
          "204:                         <h4> Auxiliary Frida Scripts</h4>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                               Trace Class Methods",
          "234:                             </label>",
          "235:                              <input type=\"text\" class=\"form-control\" id=\"class_trace\" placeholder=\"java.net.Socket,java.io.File,java.lang.String\">",
          "236:                         </div>",
          "240:                       </div>",
          "241:                       <!-- /.box-body -->",
          "249:                     </form>",
          "250:                   </div>",
          "269:               <!--tab end-->",
          "271:                   </div>",
          "273:                   <div class=\"tab-pane fade\" id=\"errors\" role=\"tabpanel\" aria-labelledby=\"errors-tab\">",
          "276:                     <iframe sandbox frameborder=\"0\" width=\"100%\" height=\"650px\" id=\"er\"></iframe>",
          "279:                   </div>",
          "280:                 </div>",
          "281:               </div>",
          "",
          "[Removed Lines]",
          "242:                       <div class=\"box-footer\">",
          "243:                         <button id=\"frida_spawn\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"far fa-play-circle\"></i> Spawn & Inject</button>",
          "244:                         <button id=\"frida_session\" type=\"submit\" class=\"btn btn-success btn-sm\" disabled><i class=\"fas fa-redo\"></i> Inject </button>",
          "245:                         <button id=\"frida_attach\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"fas fa-bug\"></i> Attach </button>",
          "246:                         <button id=\"frida_get\" class=\"btn btn-primary btn-sm\" hidden><i class=\"fas fa-code\"></i> Injected Code</button>",
          "247:                       </div>",
          "251:             {% if activities or exported_activities %}",
          "252:             <div class=\"form-group\" id=\"start_activity_form\">",
          "253:               <label class=\"box-title\" for=\"activities\">Start Activity</label>",
          "254:               <select class=\"form-select form-control\" name=\"activities\" id=\"activities\">",
          "255:                 <optgroup label=\"Activities\">",
          "256:                             {% for activity in activities %}",
          "257:                   <option value=\"{{ activity }}\">{{ activity }}</option>",
          "258:                             {% endfor %}",
          "259:                 </optgroup>",
          "260:                 <optgroup label=\"Exported Activities\">",
          "261:                             {% for activity in exported_activities %}",
          "262:                   <option value=\"{{ activity }}\">{{ activity }}</option>",
          "263:                             {% endfor %}",
          "264:                 </optgroup>",
          "265:               </select>",
          "266:                 <button id=\"start_activity\" type=\"submit\" class=\"btn btn-primary btn-sm\">Start Activity</button>",
          "267:             </div>",
          "268:             {% endif %}",
          "",
          "[Added Lines]",
          "234:                        </div>",
          "236:                         <hr/>",
          "237:                         <div class=\"form-group\">",
          "238:                           <h4> Instrumentation </h4>",
          "241:                         <div class=\"box-footer\">",
          "242:                           <button id=\"frida_spawn\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"far fa-play-circle\"></i> Spawn & Inject</button>",
          "243:                           <button id=\"frida_session\" type=\"submit\" class=\"btn btn-success btn-sm\" disabled><i class=\"fas fa-redo\"></i> Inject </button>",
          "244:                           <button id=\"frida_attach\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"fas fa-bug\"></i> Attach </button>",
          "245:                           <button id=\"frida_get\" class=\"btn btn-primary btn-sm\" hidden><i class=\"fas fa-code\"></i> Injected Code</button>",
          "246:                        </div>",
          "247:                       </div>  <!--Frida options, hidden for xposed -->",
          "250:                         <hr/>",
          "251:                         <div class=\"form-group\">",
          "252:                           <h4> User Interface </h4>",
          "253:                         </div>",
          "255:                         {% if activities or exported_activities %}",
          "256:                         <label class=\"box-title\" for=\"activities\">Activities</label>",
          "257:                         <div class=\"form-group form-inline\" id=\"start_activity_form\">",
          "258:                           <select style=\"width: 15rem\" class=\"form-select form-control form-group mb-2\" name=\"activities\" id=\"activities\">",
          "259:                             <optgroup label=\"Exported Activities\">",
          "260:                               {% for activity in exported_activities %}",
          "261:                             <option value=\"{{ activity }}\">{{ activity }}</option>",
          "262:                                       {% endfor %}",
          "263:                             </optgroup>",
          "264:                             <optgroup label=\"Activities\">",
          "265:                                         {% for activity in activities %}",
          "266:                               <option value=\"{{ activity }}\">{{ activity }}</option>",
          "267:                                         {% endfor %}",
          "268:                             </optgroup>",
          "269:                           </select>",
          "270:                           <button id=\"start_activity\" type=\"submit\" class=\"btn btn-primary btn-sm form-group mb-2\">\u2662 Start Activity</button>",
          "271:                         </div>",
          "272:                         {% endif %}",
          "274:                         {% if deeplinks %}",
          "275:                         <label class=\"box-title\" for=\"deeplinks\">Deep Links</label>",
          "276:                         <div class=\"form-group form-inline\">",
          "277:                           <!--Schemes-->",
          "278:                           <select class=\"form-select form-control form-group mb-2\" name=\"schemes\" id=\"schemes\">",
          "279:                           {% for activity, intent in deeplinks.items %}",
          "280:                             <optgroup label=\"{{ activity }} - Schemes\">",
          "281:                               {% for scheme in intent.schemes %}",
          "282:                                 <option value=\"{{ scheme }}\">{{ scheme }}</option>",
          "283:                               {% endfor %}",
          "284:                             </optgroup>",
          "285:                           {% endfor %}",
          "286:                           </select>",
          "287:                           <!--Hosts-->",
          "288:                           <select class=\"form-select form-control form-group mb-2\" name=\"hosts\" id=\"hosts\">",
          "289:                             {% for activity, intent in deeplinks.items %}",
          "290:                               <optgroup label=\"{{ activity }} - Hosts\">",
          "291:                                 {% for host in intent.hosts %}",
          "292:                                   <option value=\"{{ host }}\">{{ host }}</option>",
          "293:                                 {% endfor %}",
          "294:                                 <option value=\"\"></option>",
          "295:                               </optgroup>",
          "296:                             {% endfor %}",
          "297:                             </select>",
          "298:                             <!--Path Prefixs/Paths-->",
          "299:                             <select class=\"form-select form-control form-group mb-2\" name=\"paths\" id=\"paths\">",
          "300:                               {% for activity, intent in deeplinks.items %}",
          "301:                                 <optgroup label=\"{{ activity }} - Paths/PathPrefixes\">",
          "302:                                   {% for path in intent.paths %}",
          "303:                                     <option value=\"{{ path }}\">{{ path }}</option>",
          "304:                                   {% endfor %}",
          "305:                                   {% for path_prefix in intent.path_prefixs %}",
          "306:                                     <option value=\"{{ path_prefix }}\">{{ path_prefix }}</option>",
          "307:                                   {% endfor %}",
          "308:                                   <option value=\"\"></option>",
          "309:                                 </optgroup>",
          "310:                               {% endfor %}",
          "311:                               </select>",
          "312:                             <!--Query-->",
          "313:                             <input type=\"text\" class=\"form-control form-group mb-2\" id=\"query\" placeholder=\"/foo?bar=\">",
          "314:                             <button id=\"start_deeplink\" type=\"submit\" class=\"btn btn-primary btn-sm form-group mb-2\">\u25b6 Deeplink</button>",
          "315:                         </div>",
          "316:                         {% endif %}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:           </div>",
          "291:           <!-- /.col -->",
          "294:             <div class=\"card card-default\">",
          "295:               <div class=\"card-header\">",
          "296:                 <h3 class=\"card-title\"><i class=\"fa fa-code\"></i> Frida Code Editor </h3>",
          "",
          "[Removed Lines]",
          "293:            <div class=\"col-md-4\" id=\"codeedit\">",
          "",
          "[Added Lines]",
          "349:            <div class=\"col-md-5\" id=\"codeedit\">",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "808:   return false;",
          "809: });",
          "812: {% if android_version < 5 %}",
          "813:   $('#frida_options').hide()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868: $(\"#start_deeplink\").click(function(){",
          "869:   let scheme = $('#schemes option:selected').val();",
          "870:   let host = $('#hosts option:selected').val();",
          "871:   let path = $('#paths option:selected').val();",
          "872:   let query = $('#query').val();",
          "874:   if (scheme === undefined && host === undefined){",
          "875:     print_status(\"Please select a valid scheme and host.\")",
          "876:     return false;",
          "877:   }",
          "878:   if (path === undefined)",
          "879:     path = '';",
          "880:   let url = scheme + host + path + query;",
          "881:   print_status(\"Triggering Deeplink: \" + url);",
          "882:   start_deeplink(url)",
          "883:   return false;",
          "884: });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1111:   });",
          "1112: }",
          "1114: function activity_tester(test){",
          "1115:   action(document.location.origin + '/activity_tester/', {hash: '{{ hash }}', 'test': test}, function(json) {",
          "1116:     if (json.status === \"ok\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1190: function start_deeplink(url){",
          "1191:   action('{% url \"start_deeplink\" %}', {hash: '{{ hash }}', 'url': url}, function(json) {",
          "1192:     if (json.status === \"ok\")",
          "1193:       print_status(\"Deeplink Triggered\");",
          "1194:     else",
          "1195:       print_status(json.message);",
          "1196:   });",
          "1197: }",
          "",
          "---------------"
        ],
        "mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html||mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html": [
          "File: mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html -> mobsf/templates/dynamic_analysis/ios/dynamic_analyzer.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:           <!-- /.col -->",
          "100:             <div class=\"card card-default\">",
          "101:               <!-- /.card-header -->",
          "102:               <div class=\"card-body\">",
          "",
          "[Removed Lines]",
          "99:           <div class=\"col-md-4\">",
          "",
          "[Added Lines]",
          "99:           <div class=\"col-md-3\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:                   <textarea id=\"stat\"></textarea>",
          "161:                 <!--box-->",
          "162:                 <div id=\"frida_options\" class=\"box box-primary\">",
          "166:                     <!-- /.box-header -->",
          "167:                     <!-- form start -->",
          "168:                     <form role=\"form\">",
          "169:                       <div class=\"box-body\">",
          "170:                         <div class=\"form-group\">",
          "171:                             <hr/>",
          "173:                              <label>",
          "174:                              <input name=\"default_hooks\" type=\"checkbox\" value=\"jailbreak_bypass\" checked>",
          "175:                               Jailbreak Detection Bypass",
          "",
          "[Removed Lines]",
          "163:                     <div class=\"box-header with-border\">",
          "164:                       <h3 class=\"box-title\">Frida Scripts</h3>",
          "165:                     </div>",
          "172:                         <h4> Default </h4>",
          "",
          "[Added Lines]",
          "169:                         <h4> Default Frida Scripts</h4>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:                         </div>",
          "179:                         <hr/>",
          "180:                           <div class=\"form-group\">",
          "182:                         <label>",
          "183:                           <input name=\"dump_hooks\" type=\"checkbox\" value=\"network\" checked>",
          "184:                             Network",
          "",
          "[Removed Lines]",
          "181:                       <h4> Trace </h4>",
          "",
          "[Added Lines]",
          "178:                       <h4> Trace Frida Scripts</h4>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:                       </div>",
          "235:                      <hr/>",
          "236:                         <div class=\"form-group\">",
          "238:                             <label>",
          "239:                             <input name=\"auxiliary\" type=\"checkbox\" value=\"enum_class\" id=\"enum_class\">",
          "240:                               Enumerate Classes",
          "",
          "[Removed Lines]",
          "237:                         <h4> Auxiliary </h4>",
          "",
          "[Added Lines]",
          "234:                         <h4> Auxiliary Frida Scripts</h4>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:                       </div>",
          "278:                       <!-- /.box-body -->",
          "280:                       <div class=\"box-footer\">",
          "281:                       <button id=\"run\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"fas fa-play\"></i> Run</button>",
          "282:                       <button id=\"frida_spawn\" type=\"submit\" class=\"btn btn-success btn-sm\"><i class=\"far fa-play-circle\"></i> Spawn & Inject</button>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:                       <hr/>",
          "277:                       <div class=\"form-group\">",
          "278:                         <h4> Instrumentation </h4>",
          "279:                       </div>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "306:           </div>",
          "307:           <!-- /.col -->",
          "310:             <div class=\"card card-default\">",
          "311:               <div class=\"card-header\">",
          "312:                 <h3 class=\"card-title\"><i class=\"fa fa-code\"></i> Frida Code Editor </h3>",
          "",
          "[Removed Lines]",
          "309:            <div class=\"col-md-4\" id=\"codeedit\">",
          "",
          "[Added Lines]",
          "309:            <div class=\"col-md-5\" id=\"codeedit\">",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: [[package]]",
          "140: name = \"bcrypt\"",
          "142: description = \"Modern password hashing for your software and your servers\"",
          "143: optional = false",
          "145: files = [",
          "173: ]",
          "175: [package.extras]",
          "",
          "[Removed Lines]",
          "141: version = \"4.1.3\"",
          "144: python-versions = \">=3.7\"",
          "146:     {file = \"bcrypt-4.1.3-cp37-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:48429c83292b57bf4af6ab75809f8f4daf52aa5d480632e53707805cc1ce9b74\"},",
          "147:     {file = \"bcrypt-4.1.3-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4a8bea4c152b91fd8319fef4c6a790da5c07840421c2b785084989bf8bbb7455\"},",
          "148:     {file = \"bcrypt-4.1.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3d3b317050a9a711a5c7214bf04e28333cf528e0ed0ec9a4e55ba628d0f07c1a\"},",
          "149:     {file = \"bcrypt-4.1.3-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:094fd31e08c2b102a14880ee5b3d09913ecf334cd604af27e1013c76831f7b05\"},",
          "150:     {file = \"bcrypt-4.1.3-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:4fb253d65da30d9269e0a6f4b0de32bd657a0208a6f4e43d3e645774fb5457f3\"},",
          "151:     {file = \"bcrypt-4.1.3-cp37-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:193bb49eeeb9c1e2db9ba65d09dc6384edd5608d9d672b4125e9320af9153a15\"},",
          "152:     {file = \"bcrypt-4.1.3-cp37-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:8cbb119267068c2581ae38790e0d1fbae65d0725247a930fc9900c285d95725d\"},",
          "153:     {file = \"bcrypt-4.1.3-cp37-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:6cac78a8d42f9d120b3987f82252bdbeb7e6e900a5e1ba37f6be6fe4e3848286\"},",
          "154:     {file = \"bcrypt-4.1.3-cp37-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:01746eb2c4299dd0ae1670234bf77704f581dd72cc180f444bfe74eb80495b64\"},",
          "155:     {file = \"bcrypt-4.1.3-cp37-abi3-win32.whl\", hash = \"sha256:037c5bf7c196a63dcce75545c8874610c600809d5d82c305dd327cd4969995bf\"},",
          "156:     {file = \"bcrypt-4.1.3-cp37-abi3-win_amd64.whl\", hash = \"sha256:8a893d192dfb7c8e883c4576813bf18bb9d59e2cfd88b68b725990f033f1b978\"},",
          "157:     {file = \"bcrypt-4.1.3-cp39-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:0d4cf6ef1525f79255ef048b3489602868c47aea61f375377f0d00514fe4a78c\"},",
          "158:     {file = \"bcrypt-4.1.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f5698ce5292a4e4b9e5861f7e53b1d89242ad39d54c3da451a93cac17b61921a\"},",
          "159:     {file = \"bcrypt-4.1.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ec3c2e1ca3e5c4b9edb94290b356d082b721f3f50758bce7cce11d8a7c89ce84\"},",
          "160:     {file = \"bcrypt-4.1.3-cp39-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:3a5be252fef513363fe281bafc596c31b552cf81d04c5085bc5dac29670faa08\"},",
          "161:     {file = \"bcrypt-4.1.3-cp39-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:5f7cd3399fbc4ec290378b541b0cf3d4398e4737a65d0f938c7c0f9d5e686611\"},",
          "162:     {file = \"bcrypt-4.1.3-cp39-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:c4c8d9b3e97209dd7111bf726e79f638ad9224b4691d1c7cfefa571a09b1b2d6\"},",
          "163:     {file = \"bcrypt-4.1.3-cp39-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:31adb9cbb8737a581a843e13df22ffb7c84638342de3708a98d5c986770f2834\"},",
          "164:     {file = \"bcrypt-4.1.3-cp39-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:551b320396e1d05e49cc18dd77d970accd52b322441628aca04801bbd1d52a73\"},",
          "165:     {file = \"bcrypt-4.1.3-cp39-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:6717543d2c110a155e6821ce5670c1f512f602eabb77dba95717ca76af79867d\"},",
          "166:     {file = \"bcrypt-4.1.3-cp39-abi3-win32.whl\", hash = \"sha256:6004f5229b50f8493c49232b8e75726b568535fd300e5039e255d919fc3a07f2\"},",
          "167:     {file = \"bcrypt-4.1.3-cp39-abi3-win_amd64.whl\", hash = \"sha256:2505b54afb074627111b5a8dc9b6ae69d0f01fea65c2fcaea403448c503d3991\"},",
          "168:     {file = \"bcrypt-4.1.3-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:cb9c707c10bddaf9e5ba7cdb769f3e889e60b7d4fea22834b261f51ca2b89fed\"},",
          "169:     {file = \"bcrypt-4.1.3-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:9f8ea645eb94fb6e7bea0cf4ba121c07a3a182ac52876493870033141aa687bc\"},",
          "170:     {file = \"bcrypt-4.1.3-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:f44a97780677e7ac0ca393bd7982b19dbbd8d7228c1afe10b128fd9550eef5f1\"},",
          "171:     {file = \"bcrypt-4.1.3-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:d84702adb8f2798d813b17d8187d27076cca3cd52fe3686bb07a9083930ce650\"},",
          "172:     {file = \"bcrypt-4.1.3.tar.gz\", hash = \"sha256:2ee15dd749f5952fe3f0430d0ff6b74082e159c50332a1413d51b5689cf06623\"},",
          "",
          "[Added Lines]",
          "141: version = \"4.0.1\"",
          "144: python-versions = \">=3.6\"",
          "146:     {file = \"bcrypt-4.0.1-cp36-abi3-macosx_10_10_universal2.whl\", hash = \"sha256:b1023030aec778185a6c16cf70f359cbb6e0c289fd564a7cfa29e727a1c38f8f\"},",
          "147:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:08d2947c490093a11416df18043c27abe3921558d2c03e2076ccb28a116cb6d0\"},",
          "148:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0eaa47d4661c326bfc9d08d16debbc4edf78778e6aaba29c1bc7ce67214d4410\"},",
          "149:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ae88eca3024bb34bb3430f964beab71226e761f51b912de5133470b649d82344\"},",
          "150:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_24_x86_64.whl\", hash = \"sha256:a522427293d77e1c29e303fc282e2d71864579527a04ddcfda6d4f8396c6c36a\"},",
          "151:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:fbdaec13c5105f0c4e5c52614d04f0bca5f5af007910daa8b6b12095edaa67b3\"},",
          "152:     {file = \"bcrypt-4.0.1-cp36-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:ca3204d00d3cb2dfed07f2d74a25f12fc12f73e606fcaa6975d1f7ae69cacbb2\"},",
          "153:     {file = \"bcrypt-4.0.1-cp36-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:089098effa1bc35dc055366740a067a2fc76987e8ec75349eb9484061c54f535\"},",
          "154:     {file = \"bcrypt-4.0.1-cp36-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:e9a51bbfe7e9802b5f3508687758b564069ba937748ad7b9e890086290d2f79e\"},",
          "155:     {file = \"bcrypt-4.0.1-cp36-abi3-win32.whl\", hash = \"sha256:2caffdae059e06ac23fce178d31b4a702f2a3264c20bfb5ff541b338194d8fab\"},",
          "156:     {file = \"bcrypt-4.0.1-cp36-abi3-win_amd64.whl\", hash = \"sha256:8a68f4341daf7522fe8d73874de8906f3a339048ba406be6ddc1b3ccb16fc0d9\"},",
          "157:     {file = \"bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bf4fa8b2ca74381bb5442c089350f09a3f17797829d958fad058d6e44d9eb83c\"},",
          "158:     {file = \"bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_24_x86_64.whl\", hash = \"sha256:67a97e1c405b24f19d08890e7ae0c4f7ce1e56a712a016746c8b2d7732d65d4b\"},",
          "159:     {file = \"bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:b3b85202d95dd568efcb35b53936c5e3b3600c7cdcc6115ba461df3a8e89f38d\"},",
          "160:     {file = \"bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cbb03eec97496166b704ed663a53680ab57c5084b2fc98ef23291987b525cb7d\"},",
          "161:     {file = \"bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_24_x86_64.whl\", hash = \"sha256:5ad4d32a28b80c5fa6671ccfb43676e8c1cc232887759d1cd7b6f56ea4355215\"},",
          "162:     {file = \"bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:b57adba8a1444faf784394de3436233728a1ecaeb6e07e8c22c8848f179b893c\"},",
          "163:     {file = \"bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:705b2cea8a9ed3d55b4491887ceadb0106acf7c6387699fca771af56b1cdeeda\"},",
          "164:     {file = \"bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_24_x86_64.whl\", hash = \"sha256:2b3ac11cf45161628f1f3733263e63194f22664bf4d0c0f3ab34099c02134665\"},",
          "165:     {file = \"bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:3100851841186c25f127731b9fa11909ab7b1df6fc4b9f8353f4f1fd952fbf71\"},",
          "166:     {file = \"bcrypt-4.0.1.tar.gz\", hash = \"sha256:27d375903ac8261cfe4047f6709d16f7d18d39b1ec92aaf72af989552a650ebd\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349: [[package]]",
          "350: name = \"certifi\"",
          "352: description = \"Python package for providing Mozilla's CA Bundle.\"",
          "353: optional = false",
          "354: python-versions = \">=3.6\"",
          "355: files = [",
          "358: ]",
          "360: [[package]]",
          "",
          "[Removed Lines]",
          "351: version = \"2024.6.2\"",
          "356:     {file = \"certifi-2024.6.2-py3-none-any.whl\", hash = \"sha256:ddc6c8ce995e6987e7faf5e3f1b02b302836a0e5d98ece18392cb1a36c72ad56\"},",
          "357:     {file = \"certifi-2024.6.2.tar.gz\", hash = \"sha256:3cd43f1c6fa7dedc5899d69d3ad0398fd018ad1a17fba83ddaf78aa46c747516\"},",
          "",
          "[Added Lines]",
          "345: version = \"2024.7.4\"",
          "350:     {file = \"certifi-2024.7.4-py3-none-any.whl\", hash = \"sha256:c198e21b1289c2ab85ee4e67bb4b4ef3ead0892059901a8d5b622f24a1101e90\"},",
          "351:     {file = \"certifi-2024.7.4.tar.gz\", hash = \"sha256:5a1e7645bc0ec61a09e26c36f6106dd4cf40c6db3a1fb6352b0244e7fb057c7b\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "651: [[package]]",
          "652: name = \"django\"",
          "654: description = \"A high-level Python web framework that encourages rapid development and clean, pragmatic design.\"",
          "655: optional = false",
          "656: python-versions = \">=3.10\"",
          "657: files = [",
          "660: ]",
          "662: [package.dependencies]",
          "",
          "[Removed Lines]",
          "653: version = \"5.0.6\"",
          "658:     {file = \"Django-5.0.6-py3-none-any.whl\", hash = \"sha256:8363ac062bb4ef7c3f12d078f6fa5d154031d129a15170a1066412af49d30905\"},",
          "659:     {file = \"Django-5.0.6.tar.gz\", hash = \"sha256:ff1b61005004e476e0aeea47c7f79b85864c70124030e95146315396f1e7951f\"},",
          "",
          "[Added Lines]",
          "647: version = \"5.0.7\"",
          "652:     {file = \"Django-5.0.7-py3-none-any.whl\", hash = \"sha256:f216510ace3de5de01329463a315a629f33480e893a9024fc93d8c32c22913da\"},",
          "653:     {file = \"Django-5.0.7.tar.gz\", hash = \"sha256:bd4505cae0b9bd642313e8fb71810893df5dc2ffcacaa67a33af2d5cd61888f2\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "699: [[package]]",
          "700: name = \"filelock\"",
          "702: description = \"A platform independent file lock.\"",
          "703: optional = false",
          "704: python-versions = \">=3.8\"",
          "705: files = [",
          "708: ]",
          "710: [package.extras]",
          "711: docs = [\"furo (>=2023.9.10)\", \"sphinx (>=7.2.6)\", \"sphinx-autodoc-typehints (>=1.25.2)\"]",
          "713: typing = [\"typing-extensions (>=4.8)\"]",
          "715: [[package]]",
          "",
          "[Removed Lines]",
          "701: version = \"3.14.0\"",
          "706:     {file = \"filelock-3.14.0-py3-none-any.whl\", hash = \"sha256:43339835842f110ca7ae60f1e1c160714c5a6afd15a2873419ab185334975c0f\"},",
          "707:     {file = \"filelock-3.14.0.tar.gz\", hash = \"sha256:6ea72da3be9b8c82afd3edcf99f2fffbb5076335a5ae4d03248bb5b6c3eae78a\"},",
          "712: testing = [\"covdefaults (>=2.3)\", \"coverage (>=7.3.2)\", \"diff-cover (>=8.0.1)\", \"pytest (>=7.4.3)\", \"pytest-cov (>=4.1)\", \"pytest-mock (>=3.12)\", \"pytest-timeout (>=2.2)\"]",
          "",
          "[Added Lines]",
          "695: version = \"3.15.4\"",
          "700:     {file = \"filelock-3.15.4-py3-none-any.whl\", hash = \"sha256:6ca1fffae96225dab4c6eaf1c4f4f28cd2568d3ec2a44e15a08520504de468e7\"},",
          "701:     {file = \"filelock-3.15.4.tar.gz\", hash = \"sha256:2207938cbc1844345cb01a5a95524dae30f0ce089eba5b00378295a17e3e90cb\"},",
          "706: testing = [\"covdefaults (>=2.3)\", \"coverage (>=7.3.2)\", \"diff-cover (>=8.0.1)\", \"pytest (>=7.4.3)\", \"pytest-asyncio (>=0.21)\", \"pytest-cov (>=4.1)\", \"pytest-mock (>=3.12)\", \"pytest-timeout (>=2.2)\", \"virtualenv (>=20.26.2)\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "737: [[package]]",
          "738: name = \"frida\"",
          "740: description = \"Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers\"",
          "741: optional = false",
          "742: python-versions = \">=3.7\"",
          "743: files = [",
          "757: ]",
          "759: [package.dependencies]",
          "",
          "[Removed Lines]",
          "739: version = \"16.3.1\"",
          "744:     {file = \"frida-16.3.1-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:48dfc17d03700a6e9d0270a187a35360c8abac52a4d8ad88b4ac8cc4308c8b60\"},",
          "745:     {file = \"frida-16.3.1-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:735ce89036d1e2f92af85a1763c3110cb7fec4b0204dcd1b18ffd7a21723d27a\"},",
          "746:     {file = \"frida-16.3.1-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:e95f335cf93d6f3ce0e7533c5e6dc3914ba3694283f25721a8da8f5aa6d9ff76\"},",
          "747:     {file = \"frida-16.3.1-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:e3c98b03f49ea325b98e9095b73fe581a7b7aa8e4d6190a65f4e32505de30b44\"},",
          "748:     {file = \"frida-16.3.1-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:5086c2ccadd4ebdba7a98b721cb9ae1b208270373fb15f39b207b4b0742cad47\"},",
          "749:     {file = \"frida-16.3.1-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:20acfe2eff088e41b677d59747d2f6dbfee8aaab09223d6ca46fb29f4fda63f2\"},",
          "750:     {file = \"frida-16.3.1-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:0230989bef733f95d65c72544e5b13983c2d5b4b48e22c0ba0c06ff70e150cc4\"},",
          "751:     {file = \"frida-16.3.1-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:de2425faa66a1769ea3eb299eb90fc007cb1922fd1f9a7dc5e22da18dc088902\"},",
          "752:     {file = \"frida-16.3.1-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:35f60b36cd7abad510dfa8889ff39ee332d129e28cfabd6c0d8830122ca8d733\"},",
          "753:     {file = \"frida-16.3.1-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:c01dcfc1e2b8a4d6bd3ea4381c54e54a10e169c046b8f9593444fb729b4de646\"},",
          "754:     {file = \"frida-16.3.1-cp37-abi3-win32.whl\", hash = \"sha256:c637c3c4f6281e4677c48d91030ead6ed52c5066908a69ab170658414d12355d\"},",
          "755:     {file = \"frida-16.3.1-cp37-abi3-win_amd64.whl\", hash = \"sha256:b3770d3040a51e60bcd33f6080b6d3c93e8950cea23773044b07b46e5bbfc02f\"},",
          "756:     {file = \"frida-16.3.1.tar.gz\", hash = \"sha256:652f7badc6f27dd8e08a6fb9ba63265d277b37c54f360e521241675a65a9c82f\"},",
          "",
          "[Added Lines]",
          "733: version = \"16.4.7\"",
          "738:     {file = \"frida-16.4.7-cp37-abi3-macosx_10_13_x86_64.whl\", hash = \"sha256:82887e0b76ed6c83ced556abc71ae7b5b441bf6f1d4f8d4077fd2b8aaad96ff0\"},",
          "739:     {file = \"frida-16.4.7-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:a09a551491f67252b002ab729f9abd90c77629f866132be0d42a5e686b99609c\"},",
          "740:     {file = \"frida-16.4.7-cp37-abi3-manylinux1_i686.whl\", hash = \"sha256:7249a7d91dd8db9c0f4f4963ef03bd7be55cd1c7803643de6978ef065a5ed29c\"},",
          "741:     {file = \"frida-16.4.7-cp37-abi3-manylinux1_x86_64.whl\", hash = \"sha256:8edb260bed11fe9765e43d1e26144144f7c8545a43da186b4767ba8a7652ff56\"},",
          "742:     {file = \"frida-16.4.7-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:1cd536313d3ae1bab5c6d462752ee41aab28de892a9c9640c6d48001e68f11b0\"},",
          "743:     {file = \"frida-16.4.7-cp37-abi3-manylinux2014_armv7l.whl\", hash = \"sha256:7b4d39c618a6c0f2135778089fab01d04f56e22234b20036ff81e40dba84151c\"},",
          "744:     {file = \"frida-16.4.7-cp37-abi3-manylinux_2_17_aarch64.whl\", hash = \"sha256:b7ca5f8b2dc07d47f1c3dc71816cf3590222ca331fee8a04d721475c125d9bfe\"},",
          "745:     {file = \"frida-16.4.7-cp37-abi3-manylinux_2_17_armv7l.whl\", hash = \"sha256:ede39a1169971bdaf4b94b0f62a6dc091e9a6361861b0e5f6e478af1dd8cd0e9\"},",
          "746:     {file = \"frida-16.4.7-cp37-abi3-manylinux_2_5_i686.whl\", hash = \"sha256:9555c511cf5a4fbe0db21281792eac87cc3a45381abe457614ad2a21ce5875c6\"},",
          "747:     {file = \"frida-16.4.7-cp37-abi3-manylinux_2_5_x86_64.whl\", hash = \"sha256:576599759de2f326ed3f8f26f3f7118517cf25cf1728ec7f86a70f3308778ff3\"},",
          "748:     {file = \"frida-16.4.7-cp37-abi3-win32.whl\", hash = \"sha256:705a8db36c0588199f459cae712642d4228c113e098c228fed52d5d416595ac7\"},",
          "749:     {file = \"frida-16.4.7-cp37-abi3-win_amd64.whl\", hash = \"sha256:79212a4fa9ba1dc1f2b951a8fd288b193334e9d0d010937424df4a465124abc3\"},",
          "750:     {file = \"frida-16.4.7.tar.gz\", hash = \"sha256:0a27cafa405de46796510fbf5846b545ea1b4e21943672e50fe719ea057bfced\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "781: [[package]]",
          "782: name = \"google-play-scraper\"",
          "784: description = \"Google-Play-Scraper provides APIs to easily crawl the Google Play Store for Python without any external dependencies!\"",
          "785: optional = false",
          "787: files = [",
          "790: ]",
          "792: [[package]]",
          "",
          "[Removed Lines]",
          "783: version = \"1.2.6\"",
          "786: python-versions = \">=3.7,<4.0\"",
          "788:     {file = \"google_play_scraper-1.2.6-py3-none-any.whl\", hash = \"sha256:1f098bc48c4d7c1420b2be0390ea8d480f40caacdbbe6905c4b01059ceeee38d\"},",
          "789:     {file = \"google_play_scraper-1.2.6.tar.gz\", hash = \"sha256:b05b0572e7a7a5ddc5d1a9c06f4410bda5a69d86808446b9dd74e5cdcdf5865f\"},",
          "",
          "[Added Lines]",
          "777: version = \"1.2.7\"",
          "780: python-versions = \"<4.0,>=3.7\"",
          "782:     {file = \"google_play_scraper-1.2.7-py3-none-any.whl\", hash = \"sha256:a485510b09265f0096fc3813cfc26eef27e9a5c0035f99ee23f80e00de724530\"},",
          "783:     {file = \"google_play_scraper-1.2.7.tar.gz\", hash = \"sha256:284f321d1b2c39e39e97e490d51bc316e1d876802360efb7e7463b5c16ed4972\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1500: [[package]]",
          "1501: name = \"peewee\"",
          "1503: description = \"a little orm\"",
          "1504: optional = false",
          "1505: python-versions = \"*\"",
          "1506: files = [",
          "1508: ]",
          "1510: [[package]]",
          "1511: name = \"protobuf\"",
          "1513: description = \"\"",
          "1514: optional = false",
          "1515: python-versions = \">=3.8\"",
          "1516: files = [",
          "1528: ]",
          "1530: [[package]]",
          "1531: name = \"psutil\"",
          "1533: description = \"Cross-platform lib for process and system monitoring in Python.\"",
          "1534: optional = false",
          "1553: ]",
          "1555: [package.extras]",
          "",
          "[Removed Lines]",
          "1502: version = \"3.17.5\"",
          "1507:     {file = \"peewee-3.17.5.tar.gz\", hash = \"sha256:e1b6a64192207fd3ddb4e1188054820f42aef0aadfa749e3981af3c119a76420\"},",
          "1512: version = \"4.25.3\"",
          "1517:     {file = \"protobuf-4.25.3-cp310-abi3-win32.whl\", hash = \"sha256:d4198877797a83cbfe9bffa3803602bbe1625dc30d8a097365dbc762e5790faa\"},",
          "1518:     {file = \"protobuf-4.25.3-cp310-abi3-win_amd64.whl\", hash = \"sha256:209ba4cc916bab46f64e56b85b090607a676f66b473e6b762e6f1d9d591eb2e8\"},",
          "1519:     {file = \"protobuf-4.25.3-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:f1279ab38ecbfae7e456a108c5c0681e4956d5b1090027c1de0f934dfdb4b35c\"},",
          "1520:     {file = \"protobuf-4.25.3-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:e7cb0ae90dd83727f0c0718634ed56837bfeeee29a5f82a7514c03ee1364c019\"},",
          "1521:     {file = \"protobuf-4.25.3-cp37-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:7c8daa26095f82482307bc717364e7c13f4f1c99659be82890dcfc215194554d\"},",
          "1522:     {file = \"protobuf-4.25.3-cp38-cp38-win32.whl\", hash = \"sha256:f4f118245c4a087776e0a8408be33cf09f6c547442c00395fbfb116fac2f8ac2\"},",
          "1523:     {file = \"protobuf-4.25.3-cp38-cp38-win_amd64.whl\", hash = \"sha256:c053062984e61144385022e53678fbded7aea14ebb3e0305ae3592fb219ccfa4\"},",
          "1524:     {file = \"protobuf-4.25.3-cp39-cp39-win32.whl\", hash = \"sha256:19b270aeaa0099f16d3ca02628546b8baefe2955bbe23224aaf856134eccf1e4\"},",
          "1525:     {file = \"protobuf-4.25.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:e3c97a1555fd6388f857770ff8b9703083de6bf1f9274a002a332d65fbb56c8c\"},",
          "1526:     {file = \"protobuf-4.25.3-py3-none-any.whl\", hash = \"sha256:f0700d54bcf45424477e46a9f0944155b46fb0639d69728739c0e47bab83f2b9\"},",
          "1527:     {file = \"protobuf-4.25.3.tar.gz\", hash = \"sha256:25b5d0b42fd000320bd7830b349e3b696435f3b329810427a6bcce6a5492cc5c\"},",
          "1532: version = \"5.9.8\"",
          "1535: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"",
          "1536: files = [",
          "1537:     {file = \"psutil-5.9.8-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:26bd09967ae00920df88e0352a91cff1a78f8d69b3ecabbfe733610c0af486c8\"},",
          "1538:     {file = \"psutil-5.9.8-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:05806de88103b25903dff19bb6692bd2e714ccf9e668d050d144012055cbca73\"},",
          "1539:     {file = \"psutil-5.9.8-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:611052c4bc70432ec770d5d54f64206aa7203a101ec273a0cd82418c86503bb7\"},",
          "1540:     {file = \"psutil-5.9.8-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:50187900d73c1381ba1454cf40308c2bf6f34268518b3f36a9b663ca87e65e36\"},",
          "1541:     {file = \"psutil-5.9.8-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:02615ed8c5ea222323408ceba16c60e99c3f91639b07da6373fb7e6539abc56d\"},",
          "1542:     {file = \"psutil-5.9.8-cp27-none-win32.whl\", hash = \"sha256:36f435891adb138ed3c9e58c6af3e2e6ca9ac2f365efe1f9cfef2794e6c93b4e\"},",
          "1543:     {file = \"psutil-5.9.8-cp27-none-win_amd64.whl\", hash = \"sha256:bd1184ceb3f87651a67b2708d4c3338e9b10c5df903f2e3776b62303b26cb631\"},",
          "1544:     {file = \"psutil-5.9.8-cp36-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:aee678c8720623dc456fa20659af736241f575d79429a0e5e9cf88ae0605cc81\"},",
          "1545:     {file = \"psutil-5.9.8-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8cb6403ce6d8e047495a701dc7c5bd788add903f8986d523e3e20b98b733e421\"},",
          "1546:     {file = \"psutil-5.9.8-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d06016f7f8625a1825ba3732081d77c94589dca78b7a3fc072194851e88461a4\"},",
          "1547:     {file = \"psutil-5.9.8-cp36-cp36m-win32.whl\", hash = \"sha256:7d79560ad97af658a0f6adfef8b834b53f64746d45b403f225b85c5c2c140eee\"},",
          "1548:     {file = \"psutil-5.9.8-cp36-cp36m-win_amd64.whl\", hash = \"sha256:27cc40c3493bb10de1be4b3f07cae4c010ce715290a5be22b98493509c6299e2\"},",
          "1549:     {file = \"psutil-5.9.8-cp37-abi3-win32.whl\", hash = \"sha256:bc56c2a1b0d15aa3eaa5a60c9f3f8e3e565303b465dbf57a1b730e7a2b9844e0\"},",
          "1550:     {file = \"psutil-5.9.8-cp37-abi3-win_amd64.whl\", hash = \"sha256:8db4c1b57507eef143a15a6884ca10f7c73876cdf5d51e713151c1236a0e68cf\"},",
          "1551:     {file = \"psutil-5.9.8-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:d16bbddf0693323b8c6123dd804100241da461e41d6e332fb0ba6058f630f8c8\"},",
          "1552:     {file = \"psutil-5.9.8.tar.gz\", hash = \"sha256:6be126e3225486dff286a8fb9a06246a5253f4c7c53b475ea5f5ac934e64194c\"},",
          "",
          "[Added Lines]",
          "1496: version = \"3.17.6\"",
          "1501:     {file = \"peewee-3.17.6.tar.gz\", hash = \"sha256:cea5592c6f4da1592b7cff8eaf655be6648a1f5857469e30037bf920c03fb8fb\"},",
          "1506: version = \"4.25.4\"",
          "1511:     {file = \"protobuf-4.25.4-cp310-abi3-win32.whl\", hash = \"sha256:db9fd45183e1a67722cafa5c1da3e85c6492a5383f127c86c4c4aa4845867dc4\"},",
          "1512:     {file = \"protobuf-4.25.4-cp310-abi3-win_amd64.whl\", hash = \"sha256:ba3d8504116a921af46499471c63a85260c1a5fc23333154a427a310e015d26d\"},",
          "1513:     {file = \"protobuf-4.25.4-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:eecd41bfc0e4b1bd3fa7909ed93dd14dd5567b98c941d6c1ad08fdcab3d6884b\"},",
          "1514:     {file = \"protobuf-4.25.4-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:4c8a70fdcb995dcf6c8966cfa3a29101916f7225e9afe3ced4395359955d3835\"},",
          "1515:     {file = \"protobuf-4.25.4-cp37-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:3319e073562e2515c6ddc643eb92ce20809f5d8f10fead3332f71c63be6a7040\"},",
          "1516:     {file = \"protobuf-4.25.4-cp38-cp38-win32.whl\", hash = \"sha256:7e372cbbda66a63ebca18f8ffaa6948455dfecc4e9c1029312f6c2edcd86c4e1\"},",
          "1517:     {file = \"protobuf-4.25.4-cp38-cp38-win_amd64.whl\", hash = \"sha256:051e97ce9fa6067a4546e75cb14f90cf0232dcb3e3d508c448b8d0e4265b61c1\"},",
          "1518:     {file = \"protobuf-4.25.4-cp39-cp39-win32.whl\", hash = \"sha256:90bf6fd378494eb698805bbbe7afe6c5d12c8e17fca817a646cd6a1818c696ca\"},",
          "1519:     {file = \"protobuf-4.25.4-cp39-cp39-win_amd64.whl\", hash = \"sha256:ac79a48d6b99dfed2729ccccee547b34a1d3d63289c71cef056653a846a2240f\"},",
          "1520:     {file = \"protobuf-4.25.4-py3-none-any.whl\", hash = \"sha256:bfbebc1c8e4793cfd58589acfb8a1026be0003e852b9da7db5a4285bde996978\"},",
          "1521:     {file = \"protobuf-4.25.4.tar.gz\", hash = \"sha256:0dc4a62cc4052a036ee2204d26fe4d835c62827c855c8a03f29fe6da146b380d\"},",
          "1526: version = \"6.0.0\"",
          "1529: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"",
          "1530: files = [",
          "1531:     {file = \"psutil-6.0.0-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:a021da3e881cd935e64a3d0a20983bda0bb4cf80e4f74fa9bfcb1bc5785360c6\"},",
          "1532:     {file = \"psutil-6.0.0-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:1287c2b95f1c0a364d23bc6f2ea2365a8d4d9b726a3be7294296ff7ba97c17f0\"},",
          "1533:     {file = \"psutil-6.0.0-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:a9a3dbfb4de4f18174528d87cc352d1f788b7496991cca33c6996f40c9e3c92c\"},",
          "1534:     {file = \"psutil-6.0.0-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:6ec7588fb3ddaec7344a825afe298db83fe01bfaaab39155fa84cf1c0d6b13c3\"},",
          "1535:     {file = \"psutil-6.0.0-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:1e7c870afcb7d91fdea2b37c24aeb08f98b6d67257a5cb0a8bc3ac68d0f1a68c\"},",
          "1536:     {file = \"psutil-6.0.0-cp27-none-win32.whl\", hash = \"sha256:02b69001f44cc73c1c5279d02b30a817e339ceb258ad75997325e0e6169d8b35\"},",
          "1537:     {file = \"psutil-6.0.0-cp27-none-win_amd64.whl\", hash = \"sha256:21f1fb635deccd510f69f485b87433460a603919b45e2a324ad65b0cc74f8fb1\"},",
          "1538:     {file = \"psutil-6.0.0-cp36-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:c588a7e9b1173b6e866756dde596fd4cad94f9399daf99ad8c3258b3cb2b47a0\"},",
          "1539:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6ed2440ada7ef7d0d608f20ad89a04ec47d2d3ab7190896cd62ca5fc4fe08bf0\"},",
          "1540:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5fd9a97c8e94059b0ef54a7d4baf13b405011176c3b6ff257c247cae0d560ecd\"},",
          "1541:     {file = \"psutil-6.0.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2e8d0054fc88153ca0544f5c4d554d42e33df2e009c4ff42284ac9ebdef4132\"},",
          "1542:     {file = \"psutil-6.0.0-cp36-cp36m-win32.whl\", hash = \"sha256:fc8c9510cde0146432bbdb433322861ee8c3efbf8589865c8bf8d21cb30c4d14\"},",
          "1543:     {file = \"psutil-6.0.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:34859b8d8f423b86e4385ff3665d3f4d94be3cdf48221fbe476e883514fdb71c\"},",
          "1544:     {file = \"psutil-6.0.0-cp37-abi3-win32.whl\", hash = \"sha256:a495580d6bae27291324fe60cea0b5a7c23fa36a7cd35035a16d93bdcf076b9d\"},",
          "1545:     {file = \"psutil-6.0.0-cp37-abi3-win_amd64.whl\", hash = \"sha256:33ea5e1c975250a720b3a6609c490db40dae5d83a4eb315170c4fe0d8b1f34b3\"},",
          "1546:     {file = \"psutil-6.0.0-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:ffe7fc9b6b36beadc8c322f84e1caff51e8703b88eee1da46d1e3a6ae11b4fd0\"},",
          "1547:     {file = \"psutil-6.0.0.tar.gz\", hash = \"sha256:8faae4f310b6d969fa26ca0545338b21f73c6b15db7c4a8d934a5482faa818f2\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2189: [[package]]",
          "2190: name = \"sqlparse\"",
          "2192: description = \"A non-validating SQL parser.\"",
          "2193: optional = false",
          "2194: python-versions = \">=3.8\"",
          "2195: files = [",
          "2198: ]",
          "2200: [package.extras]",
          "",
          "[Removed Lines]",
          "2191: version = \"0.5.0\"",
          "2196:     {file = \"sqlparse-0.5.0-py3-none-any.whl\", hash = \"sha256:c204494cd97479d0e39f28c93d46c0b2d5959c7b9ab904762ea6c7af211c8663\"},",
          "2197:     {file = \"sqlparse-0.5.0.tar.gz\", hash = \"sha256:714d0a4932c059d16189f58ef5411ec2287a4360f17cdd0edd2d09d4c5087c93\"},",
          "",
          "[Added Lines]",
          "2186: version = \"0.5.1\"",
          "2191:     {file = \"sqlparse-0.5.1-py3-none-any.whl\", hash = \"sha256:773dcbf9a5ab44a090f3441e2180efe2560220203dc2f8c0b0fa141e18b505e4\"},",
          "2192:     {file = \"sqlparse-0.5.1.tar.gz\", hash = \"sha256:bb6b4df465655ef332548e24f08e205afc81b9ab86cb1c45657a7ff173a3a00e\"},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2246: [[package]]",
          "2247: name = \"tornado\"",
          "2249: description = \"Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.\"",
          "2250: optional = false",
          "2252: files = [",
          "2264: ]",
          "2266: [[package]]",
          "",
          "[Removed Lines]",
          "2248: version = \"6.4\"",
          "2251: python-versions = \">= 3.8\"",
          "2253:     {file = \"tornado-6.4-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:02ccefc7d8211e5a7f9e8bc3f9e5b0ad6262ba2fbb683a6443ecc804e5224ce0\"},",
          "2254:     {file = \"tornado-6.4-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:27787de946a9cffd63ce5814c33f734c627a87072ec7eed71f7fc4417bb16263\"},",
          "2255:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f7894c581ecdcf91666a0912f18ce5e757213999e183ebfc2c3fdbf4d5bd764e\"},",
          "2256:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e43bc2e5370a6a8e413e1e1cd0c91bedc5bd62a74a532371042a18ef19e10579\"},",
          "2257:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f0251554cdd50b4b44362f73ad5ba7126fc5b2c2895cc62b14a1c2d7ea32f212\"},",
          "2258:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:fd03192e287fbd0899dd8f81c6fb9cbbc69194d2074b38f384cb6fa72b80e9c2\"},",
          "2259:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_i686.whl\", hash = \"sha256:88b84956273fbd73420e6d4b8d5ccbe913c65d31351b4c004ae362eba06e1f78\"},",
          "2260:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:71ddfc23a0e03ef2df1c1397d859868d158c8276a0603b96cf86892bff58149f\"},",
          "2261:     {file = \"tornado-6.4-cp38-abi3-win32.whl\", hash = \"sha256:6f8a6c77900f5ae93d8b4ae1196472d0ccc2775cc1dfdc9e7727889145c45052\"},",
          "2262:     {file = \"tornado-6.4-cp38-abi3-win_amd64.whl\", hash = \"sha256:10aeaa8006333433da48dec9fe417877f8bcc21f48dda8d661ae79da357b2a63\"},",
          "2263:     {file = \"tornado-6.4.tar.gz\", hash = \"sha256:72291fa6e6bc84e626589f1c29d90a5a6d593ef5ae68052ee2ef000dfd273dee\"},",
          "",
          "[Added Lines]",
          "2243: version = \"6.4.1\"",
          "2246: python-versions = \">=3.8\"",
          "2248:     {file = \"tornado-6.4.1-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:163b0aafc8e23d8cdc3c9dfb24c5368af84a81e3364745ccb4427669bf84aec8\"},",
          "2249:     {file = \"tornado-6.4.1-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:6d5ce3437e18a2b66fbadb183c1d3364fb03f2be71299e7d10dbeeb69f4b2a14\"},",
          "2250:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2e20b9113cd7293f164dc46fffb13535266e713cdb87bd2d15ddb336e96cfc4\"},",
          "2251:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8ae50a504a740365267b2a8d1a90c9fbc86b780a39170feca9bcc1787ff80842\"},",
          "2252:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:613bf4ddf5c7a95509218b149b555621497a6cc0d46ac341b30bd9ec19eac7f3\"},",
          "2253:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:25486eb223babe3eed4b8aecbac33b37e3dd6d776bc730ca14e1bf93888b979f\"},",
          "2254:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_i686.whl\", hash = \"sha256:454db8a7ecfcf2ff6042dde58404164d969b6f5d58b926da15e6b23817950fc4\"},",
          "2255:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:a02a08cc7a9314b006f653ce40483b9b3c12cda222d6a46d4ac63bb6c9057698\"},",
          "2256:     {file = \"tornado-6.4.1-cp38-abi3-win32.whl\", hash = \"sha256:d9a566c40b89757c9aa8e6f032bcdb8ca8795d7c1a9762910c722b1635c9de4d\"},",
          "2257:     {file = \"tornado-6.4.1-cp38-abi3-win_amd64.whl\", hash = \"sha256:b24b8982ed444378d7f21d563f4180a2de31ced9d8d84443907a0a64da2072e7\"},",
          "2258:     {file = \"tornado-6.4.1.tar.gz\", hash = \"sha256:92d3ab53183d8c50f8204a51e6f91d18a15d5ef261e84d452800d4ff6fc504e9\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2286: [[package]]",
          "2287: name = \"typing-extensions\"",
          "2289: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "2290: optional = false",
          "2291: python-versions = \">=3.8\"",
          "2292: files = [",
          "2295: ]",
          "2297: [[package]]",
          "",
          "[Removed Lines]",
          "2288: version = \"4.12.1\"",
          "2293:     {file = \"typing_extensions-4.12.1-py3-none-any.whl\", hash = \"sha256:6024b58b69089e5a89c347397254e35f1bf02a907728ec7fee9bf0fe837d203a\"},",
          "2294:     {file = \"typing_extensions-4.12.1.tar.gz\", hash = \"sha256:915f5e35ff76f56588223f15fdd5938f9a1cf9195c0de25130c627e4d597f6d1\"},",
          "",
          "[Added Lines]",
          "2283: version = \"4.12.2\"",
          "2288:     {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},",
          "2289:     {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2395: [[package]]",
          "2396: name = \"urllib3\"",
          "2398: description = \"HTTP library with thread-safe connection pooling, file post, and more.\"",
          "2399: optional = false",
          "2401: files = [",
          "2404: ]",
          "2406: [package.extras]",
          "",
          "[Removed Lines]",
          "2397: version = \"1.26.18\"",
          "2400: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"",
          "2402:     {file = \"urllib3-1.26.18-py2.py3-none-any.whl\", hash = \"sha256:34b97092d7e0a3a8cf7cd10e386f401b3737364026c45e622aa02903dffe0f07\"},",
          "2403:     {file = \"urllib3-1.26.18.tar.gz\", hash = \"sha256:f8ecc1bba5667413457c529ab955bf8c67b45db799d159066261719e328580a0\"},",
          "",
          "[Added Lines]",
          "2392: version = \"1.26.19\"",
          "2395: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"",
          "2397:     {file = \"urllib3-1.26.19-py2.py3-none-any.whl\", hash = \"sha256:37a0344459b199fce0e80b0d3569837ec6b6937435c5244e7fd73fa6006830f3\"},",
          "2398:     {file = \"urllib3-1.26.19.tar.gz\", hash = \"sha256:3e3d753a8618b86d7de333b4223005f68720bcd6a7d2bcb9fbd2229ec7c1e429\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2473: [[package]]",
          "2474: name = \"whitenoise\"",
          "2476: description = \"Radically simplified static file serving for WSGI applications\"",
          "2477: optional = false",
          "2478: python-versions = \">=3.8\"",
          "2479: files = [",
          "2482: ]",
          "2484: [package.extras]",
          "2487: [[package]]",
          "2488: name = \"wsproto\"",
          "",
          "[Removed Lines]",
          "2475: version = \"6.6.0\"",
          "2480:     {file = \"whitenoise-6.6.0-py3-none-any.whl\", hash = \"sha256:b1f9db9bf67dc183484d760b99f4080185633136a273a03f6436034a41064146\"},",
          "2481:     {file = \"whitenoise-6.6.0.tar.gz\", hash = \"sha256:8998f7370973447fac1e8ef6e8ded2c5209a7b1f67c1012866dbcd09681c3251\"},",
          "2485: brotli = [\"Brotli\"]",
          "",
          "[Added Lines]",
          "2470: version = \"6.7.0\"",
          "2475:     {file = \"whitenoise-6.7.0-py3-none-any.whl\", hash = \"sha256:a1ae85e01fdc9815d12fa33f17765bc132ed2c54fa76daf9e39e879dd93566f6\"},",
          "2476:     {file = \"whitenoise-6.7.0.tar.gz\", hash = \"sha256:58c7a6cd811e275a6c91af22e96e87da0b1109e9a53bb7464116ef4c963bf636\"},",
          "2480: brotli = [\"brotli\"]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2716: [metadata]",
          "2717: lock-version = \"2.0\"",
          "2718: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "2719: content-hash = \"567fcab0de90d19561ea0dc4becd78490609a4341063f2825d55ba7b3291688b\"",
          "",
          "[Added Lines]",
          "2714: content-hash = \"392e8f07da70d48e9cf4057b041eedf5935c2c48099ee80616083d188c33831f\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f947c0226cb8c6e98ad837261b491072c9c019a",
      "candidate_info": {
        "commit_hash": "3f947c0226cb8c6e98ad837261b491072c9c019a",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/3f947c0226cb8c6e98ad837261b491072c9c019a",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py",
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Hotfix: Firebase + Dep bumps",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py",
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: logger = logging.getLogger(__name__)",
          "20: BANNER = r\"\"\"",
          "21:   __  __       _    ____  _____       _  _    _",
          "22:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / |",
          "",
          "[Removed Lines]",
          "19: VERSION = '4.1.1'",
          "",
          "[Added Lines]",
          "19: VERSION = '4.1.2'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py": [
          "File: mobsf/StaticAnalyzer/views/common/firebase.py -> mobsf/StaticAnalyzer/views/common/firebase.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         'description': (",
          "36:             'The Firebase Remote Config at %s is enabled.'",
          "37:             ' Ensure that the configurations are not sensitive.'",
          "39:     },",
          "40:     'firebase_remote_config_disabled': {",
          "41:         'title': 'Firebase Remote Config disabled',",
          "42:         'severity': SECURE,",
          "43:         'description': (",
          "46:     },",
          "47:     'firebase_remote_config_failed': {",
          "48:         'title': 'Firebase Remote Config check failed',",
          "",
          "[Removed Lines]",
          "38:             ' This is indicated by the response:\\n\\n%s'),",
          "44:             'Firebase Remote Config is disabled for %s.',",
          "45:             ' This is indicated by the response:\\n\\n%s'),",
          "",
          "[Added Lines]",
          "38:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "44:             'Firebase Remote Config is disabled for %s.'",
          "45:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "",
          "---------------"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "616: [[package]]",
          "617: name = \"colorlog\"",
          "619: description = \"Add colours to the output of Python's logging module.\"",
          "620: optional = false",
          "621: python-versions = \">=3.6\"",
          "622: files = [",
          "625: ]",
          "627: [package.dependencies]",
          "",
          "[Removed Lines]",
          "618: version = \"6.8.2\"",
          "623:     {file = \"colorlog-6.8.2-py3-none-any.whl\", hash = \"sha256:4dcbb62368e2800cb3c5abd348da7e53f6c362dda502ec27c560b2e58a66bd33\"},",
          "624:     {file = \"colorlog-6.8.2.tar.gz\", hash = \"sha256:3e3e079a41feb5a1b64f978b5ea4f46040a94f11f0e8bbb8261e3dbbeca64d44\"},",
          "",
          "[Added Lines]",
          "618: version = \"6.9.0\"",
          "623:     {file = \"colorlog-6.9.0-py3-none-any.whl\", hash = \"sha256:5906e71acd67cb07a71e779c47c4bcb45fb8c2993eebe9e5adcd6a6f1b283eff\"},",
          "624:     {file = \"colorlog-6.9.0.tar.gz\", hash = \"sha256:bfba54a1b93b94f54e1f4fe48395725a3d92fd2a4af702f6bd70946bdc0c6ac2\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735: [[package]]",
          "736: name = \"face\"",
          "738: description = \"A command-line application framework (and CLI parser). Friendly for users, full-featured for developers.\"",
          "739: optional = false",
          "740: python-versions = \"*\"",
          "741: files = [",
          "744: ]",
          "746: [package.dependencies]",
          "",
          "[Removed Lines]",
          "737: version = \"22.0.0\"",
          "742:     {file = \"face-22.0.0-py3-none-any.whl\", hash = \"sha256:344fe31562d0f6f444a45982418f3793d4b14f9abb98ccca1509d22e0a3e7e35\"},",
          "743:     {file = \"face-22.0.0.tar.gz\", hash = \"sha256:d5d692f90bc8f5987b636e47e36384b9bbda499aaf0a77aa0b0bbe834c76923d\"},",
          "",
          "[Added Lines]",
          "737: version = \"24.0.0\"",
          "742:     {file = \"face-24.0.0-py3-none-any.whl\", hash = \"sha256:0e2c17b426fa4639a4e77d1de9580f74a98f4869ba4c7c8c175b810611622cd3\"},",
          "743:     {file = \"face-24.0.0.tar.gz\", hash = \"sha256:611e29a01ac5970f0077f9c577e746d48c082588b411b33a0dd55c4d872949f6\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2591: [[package]]",
          "2592: name = \"waitress\"",
          "2594: description = \"Waitress WSGI server\"",
          "2595: optional = false",
          "2597: files = [",
          "2600: ]",
          "2602: [package.extras]",
          "",
          "[Removed Lines]",
          "2593: version = \"3.0.0\"",
          "2596: python-versions = \">=3.8.0\"",
          "2598:     {file = \"waitress-3.0.0-py3-none-any.whl\", hash = \"sha256:2a06f242f4ba0cc563444ca3d1998959447477363a2d7e9b8b4d75d35cfd1669\"},",
          "2599:     {file = \"waitress-3.0.0.tar.gz\", hash = \"sha256:005da479b04134cdd9dd602d1ee7c49d79de0537610d653674cc6cbde222b8a1\"},",
          "",
          "[Added Lines]",
          "2593: version = \"3.0.1\"",
          "2596: python-versions = \">=3.9.0\"",
          "2598:     {file = \"waitress-3.0.1-py3-none-any.whl\", hash = \"sha256:26cdbc593093a15119351690752c99adc13cbc6786d75f7b6341d1234a3730ac\"},",
          "2599:     {file = \"waitress-3.0.1.tar.gz\", hash = \"sha256:ef0c1f020d9f12a515c4ec65c07920a702613afcad1dbfdc3bcec256b6c072b3\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2631: [[package]]",
          "2632: name = \"werkzeug\"",
          "2634: description = \"The comprehensive WSGI web application library.\"",
          "2635: optional = false",
          "2637: files = [",
          "2640: ]",
          "2642: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2633: version = \"3.0.6\"",
          "2636: python-versions = \">=3.8\"",
          "2638:     {file = \"werkzeug-3.0.6-py3-none-any.whl\", hash = \"sha256:1bc0c2310d2fbb07b1dd1105eba2f7af72f322e1e455f2f93c993bee8c8a5f17\"},",
          "2639:     {file = \"werkzeug-3.0.6.tar.gz\", hash = \"sha256:a8dd59d4de28ca70471a34cba79bed5f7ef2e036a76b3ab0835474246eb41f8d\"},",
          "",
          "[Added Lines]",
          "2633: version = \"3.1.1\"",
          "2636: python-versions = \">=3.9\"",
          "2638:     {file = \"werkzeug-3.1.1-py3-none-any.whl\", hash = \"sha256:a71124d1ef06008baafa3d266c02f56e1836a5984afd6dd6c9230669d60d9fb5\"},",
          "2639:     {file = \"werkzeug-3.1.1.tar.gz\", hash = \"sha256:8cd39dfbdfc1e051965f156163e2974e52c210f130810e9ad36858f0fd3edad4\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2648: [[package]]",
          "2649: name = \"whitenoise\"",
          "2651: description = \"Radically simplified static file serving for WSGI applications\"",
          "2652: optional = false",
          "2653: python-versions = \">=3.9\"",
          "2654: files = [",
          "2657: ]",
          "2659: [package.extras]",
          "",
          "[Removed Lines]",
          "2650: version = \"6.8.1\"",
          "2655:     {file = \"whitenoise-6.8.1-py3-none-any.whl\", hash = \"sha256:196ba04ca0a80f4a3f99f88381864f218a28b5fb5b44d29feea484d501fa0ba3\"},",
          "2656:     {file = \"whitenoise-6.8.1.tar.gz\", hash = \"sha256:11042f39f1dcfbb3814726b9364703af6901706582d988e96494cfefdc3a89e2\"},",
          "",
          "[Added Lines]",
          "2650: version = \"6.8.2\"",
          "2655:     {file = \"whitenoise-6.8.2-py3-none-any.whl\", hash = \"sha256:df12dce147a043d1956d81d288c6f0044147c6d2ab9726e5772ac50fb45d2280\"},",
          "2656:     {file = \"whitenoise-6.8.2.tar.gz\", hash = \"sha256:486bd7267a375fa9650b136daaec156ac572971acc8bf99add90817a530dd1d4\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2954: [metadata]",
          "2955: lock-version = \"2.0\"",
          "2956: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "2957: content-hash = \"a7fcc54de79395994be219da2168c7ed259329fe555cc239b2fabf82a6c9d567\"",
          "",
          "[Added Lines]",
          "2957: content-hash = \"74559be720801d4d7d836adc55dcc44e431579985697660dab0881ee2f4c2036\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4406e9479719efb976729dcbdf1cfc893431e09",
      "candidate_info": {
        "commit_hash": "e4406e9479719efb976729dcbdf1cfc893431e09",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/e4406e9479719efb976729dcbdf1cfc893431e09",
        "files": [
          "mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py",
          "mobsf/templates/general/recent.html",
          "pyproject.toml"
        ],
        "message": "[HOTFIX] + Features (#2444)\n\nAdd support for sample download in recent scans.\nBug fix in firebase analysis (dict mutation errors)",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py",
          "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py",
          "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py",
          "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py",
          "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: logger = logging.getLogger(__name__)",
          "20: BANNER = r\"\"\"",
          "21:   __  __       _    ____  _____       _  _    _",
          "22:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  / |",
          "",
          "[Removed Lines]",
          "19: VERSION = '4.1.3'",
          "",
          "[Added Lines]",
          "19: VERSION = '4.1.4'",
          "",
          "---------------"
        ],
        "mobsf/MobSF/settings.py||mobsf/MobSF/settings.py": [
          "File: mobsf/MobSF/settings.py -> mobsf/MobSF/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     '.zip': 'application/zip',",
          "74:     '.tar': 'application/x-tar',",
          "75:     '.apk': 'application/octet-stream',",
          "76:     '.ipa': 'application/octet-stream',",
          "77:     '.jar': 'application/java-archive',",
          "78:     '.aar': 'application/octet-stream',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     '.apks': 'application/octet-stream',",
          "77:     '.xapk': 'application/octet-stream',",
          "78:     '.aab': 'application/octet-stream',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     '.dylib': 'application/octet-stream',",
          "81:     '.a': 'application/octet-stream',",
          "82:     '.pcap': 'application/vnd.tcpdump.pcap',",
          "83: }",
          "84: # =============ALLOWED MIMETYPES=================",
          "85: APK_MIME = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     '.appx': 'application/vns.ms-appx',",
          "",
          "---------------"
        ],
        "mobsf/MobSF/urls.py||mobsf/MobSF/urls.py": [
          "File: mobsf/MobSF/urls.py -> mobsf/MobSF/urls.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         re_path(r'^$', home.index, name='home'),",
          "185:         re_path(r'^upload/$', home.Upload.as_view, name='upload'),",
          "186:         re_path(r'^download/', home.download, name='download'),",
          "187:         re_path(r'^download_scan/', home.download_apk, name='download_scan'),",
          "188:         re_path(r'^generate_downloads/$',",
          "189:                 home.generate_download,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         re_path(fr'^download_binary/{checksum_regex}/$',",
          "188:                 home.download_binary,",
          "189:                 name='download_binary'),",
          "",
          "---------------"
        ],
        "mobsf/MobSF/views/home.py||mobsf/MobSF/views/home.py": [
          "File: mobsf/MobSF/views/home.py -> mobsf/MobSF/views/home.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: LINUX_PLATFORM = ['Darwin', 'Linux']",
          "59: HTTP_BAD_REQUEST = 400",
          "60: logger = logging.getLogger(__name__)",
          "61: register.filter('key', key)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: HTTP_STATUS_404 = 404",
          "61: HTTP_SERVER_ERROR = 500",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:     return send_response(data, api)",
          "391: @login_required",
          "396:         allowed_exts = settings.ALLOWED_EXTENSIONS",
          "417: @login_required",
          "",
          "[Removed Lines]",
          "392: def download(request):",
          "393:     \"\"\"Download from mobsf.MobSF Route.\"\"\"",
          "394:     if request.method == 'GET':",
          "395:         root = settings.DWD_DIR",
          "397:         filename = request.path.replace('/download/', '', 1)",
          "398:         dwd_file = os.path.join(root, filename)",
          "399:         # Security Checks",
          "400:         if '../' in filename or not is_safe_path(root, dwd_file):",
          "401:             msg = 'Path Traversal Attack Detected'",
          "402:             return print_n_send_error_response(request, msg)",
          "403:         ext = os.path.splitext(filename)[1]",
          "404:         if ext in allowed_exts:",
          "405:             if os.path.isfile(dwd_file):",
          "406:                 wrapper = FileWrapper(",
          "407:                     open(dwd_file, 'rb'))  # lgtm [py/path-injection]",
          "408:                 response = HttpResponse(",
          "409:                     wrapper, content_type=allowed_exts[ext])",
          "410:                 response['Content-Length'] = os.path.getsize(dwd_file)",
          "411:                 return response",
          "412:         if filename.endswith(('screen/screen.png', '-icon.png')):",
          "413:             return HttpResponse('')",
          "414:     return HttpResponse(status=404)",
          "",
          "[Added Lines]",
          "393: def file_download(dwd_file, filename, content_type):",
          "394:     \"\"\"HTTP file download response.\"\"\"",
          "395:     with open(dwd_file, 'rb') as file:",
          "396:         wrapper = FileWrapper(file)",
          "397:         response = HttpResponse(wrapper, content_type=content_type)",
          "398:         response['Content-Length'] = dwd_file.stat().st_size",
          "399:         if filename:",
          "400:             val = f'attachment; filename=\"{filename}\"'",
          "401:             response['Content-Disposition'] = val",
          "402:         return response",
          "406: @require_http_methods(['GET'])",
          "407: def download_binary(request, checksum, api=False):",
          "408:     \"\"\"Download binary from uploads directory.\"\"\"",
          "409:     try:",
          "411:         if not is_md5(checksum):",
          "412:             return HttpResponse(",
          "413:                 'Invalid MD5 Hash',",
          "414:                 status=HTTP_STATUS_404)",
          "415:         robj = RecentScansDB.objects.filter(MD5=checksum).first()",
          "416:         if not robj:",
          "417:             return HttpResponse(",
          "418:                 'Scan hash not found',",
          "419:                 status=HTTP_STATUS_404)",
          "420:         file_ext = f'.{robj.SCAN_TYPE}'",
          "421:         if file_ext not in allowed_exts.keys():",
          "422:             return HttpResponse(",
          "423:                 'Invalid Scan Type',",
          "424:                 status=HTTP_STATUS_404)",
          "425:         filename = f'{checksum}{file_ext}'",
          "426:         dwd_file = Path(settings.UPLD_DIR) / checksum / filename",
          "427:         if not dwd_file.exists():",
          "428:             return HttpResponse(",
          "429:                 'File not found',",
          "430:                 status=HTTP_STATUS_404)",
          "431:         return file_download(",
          "432:             dwd_file,",
          "433:             filename,",
          "434:             allowed_exts[file_ext])",
          "435:     except Exception:",
          "436:         logger.exception('Download Binary Failed')",
          "437:         return HttpResponse(",
          "438:             'Failed to download file due to an error',",
          "439:             status=HTTP_SERVER_ERROR)",
          "442: @login_required",
          "443: @require_http_methods(['GET'])",
          "444: def download(request):",
          "445:     \"\"\"Download from mobsf downloads directory.\"\"\"",
          "446:     root = settings.DWD_DIR",
          "447:     filename = request.path.replace('/download/', '', 1)",
          "448:     dwd_file = Path(root) / filename",
          "450:     # Security Checks",
          "451:     if '../' in filename or not is_safe_path(root, dwd_file):",
          "452:         msg = 'Path Traversal Attack Detected'",
          "453:         return print_n_send_error_response(request, msg)",
          "455:     # File and Extension Check",
          "456:     ext = dwd_file.suffix",
          "457:     allowed_exts = settings.ALLOWED_EXTENSIONS",
          "458:     if ext in allowed_exts and dwd_file.is_file():",
          "459:         return file_download(",
          "460:             dwd_file,",
          "461:             None,",
          "462:             allowed_exts[ext])",
          "464:     # Special Case for Certain Image Files",
          "465:     if filename.endswith(('screen/screen.png', '-icon.png')):",
          "466:         return HttpResponse('')",
          "468:     return HttpResponse(status=HTTP_STATUS_404)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/common/firebase.py||mobsf/StaticAnalyzer/views/common/firebase.py": [
          "File: mobsf/StaticAnalyzer/views/common/firebase.py -> mobsf/StaticAnalyzer/views/common/firebase.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:         'severity': INFO,",
          "30:         'description': 'The app talks to Firebase database at %s',",
          "31:     },",
          "32:     'firebase_remote_config_enabled': {",
          "33:         'title': 'Firebase Remote Config enabled',",
          "34:         'severity': WARNING,",
          "35:         'description': (",
          "36:             'The Firebase Remote Config at %s is enabled.'",
          "37:             ' Ensure that the configurations are not sensitive.'",
          "39:     },",
          "40:     'firebase_remote_config_disabled': {",
          "41:         'title': 'Firebase Remote Config disabled',",
          "42:         'severity': SECURE,",
          "43:         'description': (",
          "44:             'Firebase Remote Config is disabled for %s.'",
          "46:     },",
          "47:     'firebase_remote_config_failed': {",
          "48:         'title': 'Firebase Remote Config check failed',",
          "49:         'description': (",
          "50:             'Failed to check for Firebase Remote Config.'",
          "53:     },",
          "54: }",
          "57: def firebase_analysis(checksum, code_an_dic):",
          "58:     \"\"\"Firebase Analysis.\"\"\"",
          "60:     findings = []",
          "62:     logger.info('Starting Firebase Analysis')",
          "63:     # Check for Firebase Database",
          "77:     # Check for Firebase Remote Config",
          "82:     return findings",
          "",
          "[Removed Lines]",
          "38:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "45:             '\\nThis is indicated by the response:\\n\\n%s'),",
          "51:             ' Please verify this manually. Error:\\n\\n%s'),",
          "52:         'severity': INFO,",
          "59:     urls = list(set(code_an_dic['urls_list']))",
          "61:     finds = None",
          "64:     logger.info('Looking for Firebase URL(s)')",
          "65:     for url in urls:",
          "66:         if 'firebaseio.com' not in url:",
          "67:             continue",
          "68:         returl, is_open = open_firebase(checksum, url)",
          "69:         if is_open:",
          "70:             item = FIREBASE_FINDINGS['firebase_db_open']",
          "71:             item['description'] = item['description'] % returl",
          "72:             findings.append(item)",
          "73:         else:",
          "74:             item = FIREBASE_FINDINGS['firebase_db_exists']",
          "75:             item['description'] = item['description'] % returl",
          "76:             findings.append(item)",
          "78:     firebase_creds = code_an_dic.get('firebase_creds')",
          "79:     finds = firebase_remote_config(checksum, firebase_creds)",
          "80:     if finds:",
          "81:         findings.extend(finds)",
          "",
          "[Added Lines]",
          "32:     'firebase_db_check_failed': {",
          "33:         'title': 'Firebase DB check failed',",
          "34:         'severity': INFO,",
          "35:         'description': (",
          "36:             'Failed to check Firebase DB URL. Error: %s'),",
          "37:     },",
          "44:             ' This is indicated by the response: %s'),",
          "51:             ' This is indicated by the response: %s'),",
          "55:         'severity': INFO,",
          "58:             ' Please verify this manually. Error: %s'),",
          "68:     db_finds = firebase_db_check(",
          "69:         checksum, code_an_dic)",
          "70:     if db_finds:",
          "71:         findings.extend(db_finds)",
          "73:     config_finds = firebase_remote_config(",
          "74:         checksum, code_an_dic)",
          "75:     if config_finds:",
          "76:         findings.extend(config_finds)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         if not purl.netloc.endswith('firebaseio.com'):",
          "94:             logger.warning(invalid)",
          "95:             return url, False",
          "97:         proxies, verify = upstream_proxy('https')",
          "98:         headers = {",
          "99:             'User-Agent': ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1)'",
          "100:                            ' AppleWebKit/537.36 (KHTML, like Gecko) '",
          "101:                            'Chrome/39.0.2171.95 Safari/537.36')}",
          "105:         if resp.status_code == 200:",
          "106:             return base_url, True",
          "107:     except Exception as exp:",
          "",
          "[Removed Lines]",
          "96:         base_url = '{}://{}/.json'.format(purl.scheme, purl.netloc)",
          "102:         resp = requests.get(base_url, headers=headers,",
          "103:                             proxies=proxies, verify=verify,",
          "104:                             allow_redirects=False)",
          "",
          "[Added Lines]",
          "91:         base_url = f'{purl.scheme}://{purl.netloc}/.json'",
          "97:         resp = requests.get(",
          "98:             base_url, headers=headers,",
          "99:             proxies=proxies, verify=verify,",
          "100:             allow_redirects=False)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     return url, False",
          "115:     \"\"\"Check for Firebase Remote Config.\"\"\"",
          "116:     url = None",
          "117:     findings = []",
          "118:     try:",
          "119:         if not creds:",
          "120:             return None",
          "121:         google_api_key = creds.get('google_api_key')",
          "",
          "[Removed Lines]",
          "114: def firebase_remote_config(checksum, creds):",
          "",
          "[Added Lines]",
          "110: def firebase_db_check(checksum, code_an_dic):",
          "111:     logger.info('Looking for Firebase URL(s)')",
          "112:     findings = []",
          "113:     try:",
          "114:         urls = list(set(code_an_dic['urls_list']))",
          "115:         for url in urls:",
          "116:             if 'firebaseio.com' not in url:",
          "117:                 continue",
          "118:             returl, is_open = open_firebase(checksum, url)",
          "119:             if is_open:",
          "120:                 rule = FIREBASE_FINDINGS['firebase_db_open']",
          "121:                 findings.append({",
          "122:                     'title': rule['title'],",
          "123:                     'severity': rule['severity'],",
          "124:                     'description': rule['description'] % returl,",
          "125:                 })",
          "126:             else:",
          "127:                 rule = FIREBASE_FINDINGS['firebase_db_exists']",
          "128:                 findings.append({",
          "129:                     'title': rule['title'],",
          "130:                     'severity': rule['severity'],",
          "131:                     'description': rule['description'] % returl,",
          "132:                 })",
          "133:     except Exception as exp:",
          "134:         msg = 'Failed to check for Firebase DB URL'",
          "135:         logger.warning(msg)",
          "136:         append_scan_status(checksum, msg, repr(exp))",
          "137:         rule = FIREBASE_FINDINGS['firebase_db_check_failed']",
          "138:         findings.append({",
          "139:             'title': rule['title'],",
          "140:             'severity': rule['severity'],",
          "141:             'description': rule['description'] % repr(exp),",
          "142:         })",
          "143:     return findings",
          "146: def firebase_remote_config(checksum, code_an_dic):",
          "151:         creds = code_an_dic.get('firebase_creds')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:         if response.status_code == 200:",
          "153:             resp = response.json()",
          "154:             if resp.get('state') == 'NO_TEMPLATE':",
          "158:             else:",
          "162:         else:",
          "164:             response_msg = f'The response code is {response.status_code}'",
          "167:     except Exception as exp:",
          "168:         msg = 'Failed to check for Firebase Remote Config'",
          "169:         logger.warning(msg)",
          "170:         append_scan_status(checksum, msg, repr(exp))",
          "174:     return findings",
          "",
          "[Removed Lines]",
          "155:                 item = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "156:                 item['description'] = item['description'] % (url, resp)",
          "157:                 findings.append(item)",
          "159:                 item = FIREBASE_FINDINGS['firebase_remote_config_enabled']",
          "160:                 item['description'] = item['description'] % (url, resp)",
          "161:                 findings.append(item)",
          "163:             item = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "165:             item['description'] = item['description'] % (url, response_msg)",
          "166:             findings.append(item)",
          "171:         item = FIREBASE_FINDINGS['firebase_remote_config_failed']",
          "172:         item['description'] = item['description'] % repr(exp)",
          "173:         findings.append(item)",
          "",
          "[Added Lines]",
          "188:                 rule = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "189:                 findings.append({",
          "190:                     'title': rule['title'],",
          "191:                     'severity': rule['severity'],",
          "192:                     'description': rule['description'] % (url, resp),",
          "193:                 })",
          "195:                 rule = FIREBASE_FINDINGS['firebase_remote_config_enabled']",
          "196:                 findings.append({",
          "197:                     'title': rule['title'],",
          "198:                     'severity': rule['severity'],",
          "199:                     'description': rule['description'] % (url, resp),",
          "200:                 })",
          "202:             rule = FIREBASE_FINDINGS['firebase_remote_config_disabled']",
          "204:             findings.append({",
          "205:                 'title': rule['title'],",
          "206:                 'severity': rule['severity'],",
          "207:                 'description': rule['description'] % (url, response_msg),",
          "208:             })",
          "214:         rule = FIREBASE_FINDINGS['firebase_remote_config_failed']",
          "215:         findings.append({",
          "216:             'title': rule['title'],",
          "217:             'severity': rule['severity'],",
          "218:             'description': rule['description'] % repr(exp),",
          "219:         })",
          "",
          "---------------"
        ],
        "mobsf/templates/general/recent.html||mobsf/templates/general/recent.html": [
          "File: mobsf/templates/general/recent.html -> mobsf/templates/general/recent.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:                             <td><p>",
          "103:                                    <a class=\"btn btn-outline-primary btn-sm\" href=\"{% url \"pdf\" checksum=e.MD5%}\"><i class=\"fas fa-file-pdf\"></i></a>",
          "104:                                    <a class=\"btn btn-outline-info btn-sm\" href=\"../../../{{ e.ANALYZER }}/{{e.MD5}}/?rescan=1\"><i class=\"fas fa-sync-alt\"></i></a>",
          "105:                                 </p>",
          "106:                             {% if '.apk' == e.FILE_NAME|slice:\"-4:\" or '.xapk' == e.FILE_NAME|slice:\"-5:\" or '.apks' == e.FILE_NAME|slice:\"-5:\" or '.aab' == e.FILE_NAME|slice:\"-4:\"%}",
          "107:                                 <p><a class=\"diffButton btn btn-warning btn-sm\" id=\"{{ e.MD5 }}_{{ e.FILE_NAME }}\"><i class=\"fas fa-not-equal\"></i> Diff or Compare</a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:                                    <a class=\"btn btn-outline-secondary btn-sm\" href=\"{% url \"download_binary\" checksum=e.MD5%}\"><i class=\"fas fa-download\"></i></a>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af49985dd1a8e7be6632ef1125f049823418f419",
      "candidate_info": {
        "commit_hash": "af49985dd1a8e7be6632ef1125f049823418f419",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/af49985dd1a8e7be6632ef1125f049823418f419",
        "files": [
          "LICENSES/androguard.txt",
          "mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/headers.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py",
          "mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "mobsf/StaticAnalyzer/tools/androguard4/util.py",
          "mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/android/app.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "mobsf/StaticAnalyzer/views/android/manifest_utils.py",
          "pyproject.toml"
        ],
        "message": "[4.2.7] Androguard & ApkInspector Bump + Patch AXMLParsing (#2461)\n\n* Androguard 293ab2d89ab9ce011c7dbbc5df3c876172875a1c update\n* AXML Parser warn \"reserved must be zero!\" instead of raise\n* Fallback on get app name when androguard returns empty string",
        "before_after_code_files": [
          "mobsf/MobSF/init.py||mobsf/MobSF/init.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apk.py||mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py",
          "mobsf/StaticAnalyzer/tools/androguard4/zipfile.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/headers.py",
          "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py",
          "mobsf/StaticAnalyzer/tools/androguard4/axml.py||mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py||mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "mobsf/StaticAnalyzer/tools/androguard4/types.py||mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "mobsf/StaticAnalyzer/tools/androguard4/util.py||mobsf/StaticAnalyzer/tools/androguard4/util.py",
          "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py",
          "mobsf/StaticAnalyzer/views/android/app.py||mobsf/StaticAnalyzer/views/android/app.py",
          "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "mobsf/StaticAnalyzer/views/android/jar_aar.py||mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "mobsf/StaticAnalyzer/views/android/manifest_utils.py||mobsf/StaticAnalyzer/views/android/manifest_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ],
          "candidate": [
            "mobsf/MobSF/init.py||mobsf/MobSF/init.py"
          ]
        }
      },
      "candidate_diff": {
        "mobsf/MobSF/init.py||mobsf/MobSF/init.py": [
          "File: mobsf/MobSF/init.py -> mobsf/MobSF/init.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: logger = logging.getLogger(__name__)",
          "22: BANNER = r\"\"\"",
          "23:   __  __       _    ____  _____       _  _    ____",
          "24:  |  \\/  | ___ | |__/ ___||  ___|_   _| || |  |___ \\",
          "",
          "[Removed Lines]",
          "21: VERSION = '4.2.6'",
          "",
          "[Added Lines]",
          "21: VERSION = '4.2.7'",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/apk.py||mobsf/StaticAnalyzer/tools/androguard4/apk.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/apk.py -> mobsf/StaticAnalyzer/tools/androguard4/apk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "8: # Python core",
          "9: import io",
          "11: import os",
          "12: import re",
          "14: import zipfile",
          "15: from struct import unpack",
          "21: import lxml.sax",
          "23: # Used for reading Certificates",
          "89: def parse_lxml_dom(tree):",
          "",
          "[Removed Lines]",
          "3: # Androguard",
          "5: from .axml import ARSCParser, AXMLPrinter, ARSCResTableConfig",
          "6: from .zipfile import ZipEntry",
          "10: from zlib import crc32",
          "13: import binascii",
          "16: import hashlib",
          "17: import asn1crypto",
          "18: import logging",
          "20: # External dependecies",
          "22: from xml.dom.pulldom import SAX2DOM",
          "24: from asn1crypto import cms, x509, keys",
          "26: logger = logging.getLogger(__name__)",
          "27: logger.setLevel(level=logging.CRITICAL)",
          "29: NS_ANDROID_URI = 'http://schemas.android.com/apk/res/android'",
          "30: NS_ANDROID = '{{{}}}'.format(NS_ANDROID_URI)  # Namespace as used by etree",
          "33: def get_certificate_name_string(name, short=False, delimiter=', '):",
          "34:     \"\"\"",
          "35:     Function from androguard.",
          "37:     licensed  under the Apache License, Version 2.0.",
          "38:     https://github.com/androguard/androguard/blob/master/androguard/util.py",
          "39:     Format the Name type of a X509 Certificate in a human readable form.",
          "41:     :param name: Name object to return the DN from",
          "42:     :param short: Use short form (default: False)",
          "43:     :param delimiter: Delimiter string or character between",
          "44:         two parts (default: ', ')",
          "46:     :type name: dict or :class:`asn1crypto.x509.Name`",
          "47:     :type short: boolean",
          "48:     :type delimiter: str",
          "50:     :rtype: str",
          "51:     \"\"\"",
          "52:     if isinstance(name, asn1crypto.x509.Name):",
          "53:         name = name.native",
          "55:     # For the shortform, we have a lookup table",
          "56:     # See RFC4514 for more details",
          "57:     _ = {",
          "58:         'business_category': ('businessCategory', 'businessCategory'),",
          "59:         'serial_number': ('serialNumber', 'serialNumber'),",
          "60:         'country_name': ('C', 'countryName'),",
          "61:         'postal_code': ('postalCode', 'postalCode'),",
          "62:         'state_or_province_name': ('ST', 'stateOrProvinceName'),",
          "63:         'locality_name': ('L', 'localityName'),",
          "64:         'street_address': ('street', 'streetAddress'),",
          "65:         'organization_name': ('O', 'organizationName'),",
          "66:         'organizational_unit_name': ('OU', 'organizationalUnitName'),",
          "67:         'title': ('title', 'title'),",
          "68:         'common_name': ('CN', 'commonName'),",
          "69:         'initials': ('initials', 'initials'),",
          "70:         'generation_qualifier': ('generationQualifier', 'generationQualifier'),",
          "71:         'surname': ('SN', 'surname'),",
          "72:         'given_name': ('GN', 'givenName'),",
          "73:         'name': ('name', 'name'),",
          "74:         'pseudonym': ('pseudonym', 'pseudonym'),",
          "75:         'dn_qualifier': ('dnQualifier', 'dnQualifier'),",
          "76:         'telephone_number': ('telephoneNumber', 'telephoneNumber'),",
          "77:         'email_address': ('E', 'emailAddress'),",
          "78:         'domain_component': ('DC', 'domainComponent'),",
          "79:         'name_distinguisher': ('nameDistinguisher', 'nameDistinguisher'),",
          "80:         'organization_identifier': (",
          "81:             'organizationIdentifier', 'organizationIdentifier'),",
          "82:     }",
          "83:     return delimiter.join(",
          "84:         ['{}={}'.format(",
          "85:             _.get(attr, (attr, attr))[0 if short else 1],",
          "86:             name[attr]) for attr in name])",
          "",
          "[Added Lines]",
          "3: # Androguard4 APK - Nov 24, 2024 - 04a5703b8ba7c181bb9f5f5995a2c16b6f9353cf",
          "4: # Allows type hinting of types not-yet-declared",
          "5: # in Python >= 3.7",
          "6: # see https://peps.python.org/pep-0563/",
          "7: from __future__ import annotations",
          "10: import binascii",
          "11: import hashlib",
          "15: import unicodedata",
          "17: from hashlib import md5, sha1, sha224, sha256, sha384, sha512",
          "19: from typing import Any, Iterator, List, Tuple, Union",
          "20: from xml.dom.pulldom import SAX2DOM",
          "21: from zlib import crc32",
          "24: from .apkinspector.headers import ZipEntry",
          "27: from asn1crypto import cms, keys, x509",
          "28: from asn1crypto.util import OrderedDict",
          "29: from cryptography.exceptions import InvalidSignature",
          "30: from cryptography.hazmat.backends import default_backend",
          "31: from cryptography.hazmat.primitives import hashes, serialization",
          "32: from cryptography.hazmat.primitives.asymmetric import dsa, ec, padding, rsa",
          "35: # External dependencies",
          "36: from lxml.etree import Element",
          "38: # Androguard",
          "39: from .axml import (",
          "40:     END_DOCUMENT,",
          "41:     END_TAG,",
          "42:     START_TAG,",
          "43:     TEXT,",
          "44:     ARSCParser,",
          "45:     ARSCResTableConfig,",
          "46:     AXMLParser,",
          "47:     AXMLPrinter,",
          "48:     format_value,",
          "49: )",
          "50: from .util import get_certificate_name_string",
          "52: import logging",
          "55: logger = logging.getLogger(__name__)",
          "56: logger.setLevel(level=logging.CRITICAL)",
          "57: NS_ANDROID_URI = 'http://schemas.android.com/apk/res/android'",
          "58: NS_ANDROID = '{{{}}}'.format(NS_ANDROID_URI)  # Namespace as used by etree",
          "60: # Dictionary of the different protection levels mapped to their corresponding attribute names as described in",
          "61: # https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/content/pm/PermissionInfo.java",
          "62: protection_flags_to_attributes = {",
          "63:     \"0x00000000\": \"normal\",",
          "64:     \"0x00000001\": \"dangerous\",",
          "65:     \"0x00000002\": \"signature\",",
          "66:     \"0x00000003\": \"signature or system\",",
          "67:     \"0x00000004\": \"internal\",",
          "68:     \"0x00000010\": \"privileged\",",
          "69:     \"0x00000020\": \"development\",",
          "70:     \"0x00000040\": \"appop\",",
          "71:     \"0x00000080\": \"pre23\",",
          "72:     \"0x00000100\": \"installer\",",
          "73:     \"0x00000200\": \"verifier\",",
          "74:     \"0x00000400\": \"preinstalled\",",
          "75:     \"0x00000800\": \"setup\",",
          "76:     \"0x00001000\": \"instant\",",
          "77:     \"0x00002000\": \"runtime only\",",
          "78:     \"0x00004000\": \"oem\",",
          "79:     \"0x00008000\": \"vendor privileged\",",
          "80:     \"0x00010000\": \"system text classifier\",",
          "81:     \"0x00020000\": \"wellbeing\",",
          "82:     \"0x00040000\": \"documenter\",",
          "83:     \"0x00080000\": \"configurator\",",
          "84:     \"0x00100000\": \"incident report approver\",",
          "85:     \"0x00200000\": \"app predictor\",",
          "86:     \"0x00400000\": \"module\",",
          "87:     \"0x00800000\": \"companion\",",
          "88:     \"0x01000000\": \"retail demo\",",
          "89:     \"0x02000000\": \"recents\",",
          "90:     \"0x04000000\": \"role\",",
          "91:     \"0x08000000\": \"known signer\",",
          "92: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: def _dump_additional_attributes(additional_attributes):",
          "111:     attributes_raw = io.BytesIO(additional_attributes)",
          "112:     attributes_hex = binascii.hexlify(additional_attributes)",
          "",
          "[Removed Lines]",
          "109:     \"\"\" try to parse additional attributes, but ends up to hexdump if the scheme is unknown \"\"\"",
          "",
          "[Added Lines]",
          "116:     \"\"\"try to parse additional attributes, but ends up to hexdump if the scheme is unknown\"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     if not len(additional_attributes):",
          "115:         return attributes_hex",
          "118:     if len_attribute != 8:",
          "119:         return attributes_hex",
          "122:     if attr_id != APK._APK_SIG_ATTR_V2_STRIPPING_PROTECTION:",
          "123:         return attributes_hex",
          "127:     return \"stripping protection set, scheme %d\" % scheme_id",
          "",
          "[Removed Lines]",
          "117:     len_attribute, = unpack('<I', attributes_raw.read(4))",
          "121:     attr_id, = unpack('<I', attributes_raw.read(4))",
          "125:     scheme_id, = unpack('<I', attributes_raw.read(4))",
          "",
          "[Added Lines]",
          "124:     (len_attribute,) = unpack('<I', attributes_raw.read(4))",
          "128:     (attr_id,) = unpack('<I', attributes_raw.read(4))",
          "132:     (scheme_id,) = unpack('<I', attributes_raw.read(4))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         infos += \"\\n\"",
          "136:         infos += \" [%d]\\n\" % i",
          "137:         infos += \"  - Signature Id : %s\\n\" % APK._APK_SIG_ALGO_IDS.get(",
          "139:         infos += \"  - Digest: %s\" % binascii.hexlify(dos[1])",
          "141:     return infos",
          "",
          "[Removed Lines]",
          "138:             dos[0], hex(dos[0]))",
          "",
          "[Added Lines]",
          "145:             dos[0], hex(dos[0])",
          "146:         )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "147:     source : https://source.android.com/security/apksigning/v2.html",
          "148:     \"\"\"",
          "151:         self._bytes = None",
          "152:         self.digests = None",
          "153:         self.certificates = None",
          "",
          "[Removed Lines]",
          "150:     def __init__(self):",
          "",
          "[Added Lines]",
          "158:     def __init__(self) -> None:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:             certs_infos += \"\\n\"",
          "164:             certs_infos += \" [%d]\\n\" % i",
          "165:             certs_infos += \"  - Issuer: %s\\n\" % get_certificate_name_string(",
          "167:             certs_infos += \"  - Subject: %s\\n\" % get_certificate_name_string(",
          "170:             certs_infos += \"  - Hash Algorithm: %s\\n\" % x509_cert.hash_algo",
          "183: class APKV3SignedData(APKV2SignedData):",
          "",
          "[Removed Lines]",
          "166:                 x509_cert.issuer, short=True)",
          "168:                 x509_cert.subject, short=True)",
          "169:             certs_infos += \"  - Serial Number: %s\\n\" % hex(x509_cert.serial_number)",
          "171:             certs_infos += \"  - Signature Algorithm: %s\\n\" % x509_cert.signature_algo",
          "172:             certs_infos += \"  - Valid not before: %s\\n\" % x509_cert['tbs_certificate']['validity']['not_before'].native",
          "173:             certs_infos += \"  - Valid not after: %s\" % x509_cert['tbs_certificate']['validity']['not_after'].native",
          "175:         return \"\\n\".join([",
          "176:             'additional_attributes : {}'.format(",
          "177:                 _dump_additional_attributes(self.additional_attributes)),",
          "178:             'digests : {}'.format(_dump_digests_or_signatures(self.digests)),",
          "179:             'certificates : {}'.format(certs_infos),",
          "180:         ])",
          "",
          "[Added Lines]",
          "174:                 x509_cert.issuer, short=True",
          "175:             )",
          "177:                 x509_cert.subject, short=True",
          "178:             )",
          "179:             certs_infos += \"  - Serial Number: %s\\n\" % hex(",
          "180:                 x509_cert.serial_number",
          "181:             )",
          "183:             certs_infos += (",
          "184:                 \"  - Signature Algorithm: %s\\n\" % x509_cert.signature_algo",
          "185:             )",
          "186:             certs_infos += (",
          "187:                 \"  - Valid not before: %s\\n\"",
          "188:                 % x509_cert['tbs_certificate']['validity']['not_before'].native",
          "189:             )",
          "190:             certs_infos += (",
          "191:                 \"  - Valid not after: %s\"",
          "192:                 % x509_cert['tbs_certificate']['validity']['not_after'].native",
          "193:             )",
          "195:         return \"\\n\".join(",
          "196:             [",
          "197:                 'additional_attributes : {}'.format(",
          "198:                     _dump_additional_attributes(self.additional_attributes)",
          "199:                 ),",
          "200:                 'digests : {}'.format(",
          "201:                     _dump_digests_or_signatures(self.digests)",
          "202:                 ),",
          "203:                 'certificates : {}'.format(certs_infos),",
          "204:             ]",
          "205:         )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "186:     source : https://source.android.com/security/apksigning/v3.html",
          "187:     \"\"\"",
          "190:         super().__init__()",
          "191:         self.minSDK = None",
          "192:         self.maxSDK = None",
          "",
          "[Removed Lines]",
          "189:     def __init__(self):",
          "",
          "[Added Lines]",
          "214:     def __init__(self) -> None:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "198:         # maxSDK is set to a negative value if there is no upper bound on the sdk targeted",
          "199:         max_sdk_str = \"%d\" % self.maxSDK",
          "201:             max_sdk_str = \"0x%x\" % self.maxSDK",
          "210: class APKV2Signer:",
          "",
          "[Removed Lines]",
          "200:         if self.maxSDK >= 0x7fffffff:",
          "203:         return \"\\n\".join([",
          "204:             'signer minSDK : {:d}'.format(self.minSDK),",
          "205:             'signer maxSDK : {:s}'.format(max_sdk_str),",
          "206:             base_str",
          "207:         ])",
          "",
          "[Added Lines]",
          "225:         if self.maxSDK >= 0x7FFFFFFF:",
          "228:         return \"\\n\".join(",
          "229:             [",
          "230:                 'signer minSDK : {:d}'.format(self.minSDK),",
          "231:                 'signer maxSDK : {:s}'.format(max_sdk_str),",
          "232:                 base_str,",
          "233:             ]",
          "234:         )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "213:     source : https://source.android.com/security/apksigning/v2.html",
          "214:     \"\"\"",
          "217:         self._bytes = None",
          "218:         self.signed_data = None",
          "219:         self.signatures = None",
          "220:         self.public_key = None",
          "222:     def __str__(self):",
          "230: class APKV3Signer(APKV2Signer):",
          "",
          "[Removed Lines]",
          "216:     def __init__(self):",
          "223:         return \"\\n\".join([",
          "224:             '{:s}'.format(str(self.signed_data)),",
          "225:             'signatures : {}'.format(_dump_digests_or_signatures(self.signatures)),",
          "226:             'public key : {}'.format(binascii.hexlify(self.public_key)),",
          "227:         ])",
          "",
          "[Added Lines]",
          "243:     def __init__(self) -> None:",
          "250:         return \"\\n\".join(",
          "251:             [",
          "252:                 '{:s}'.format(str(self.signed_data)),",
          "253:                 'signatures : {}'.format(",
          "254:                     _dump_digests_or_signatures(self.signatures)",
          "255:                 ),",
          "256:                 'public key : {}'.format(binascii.hexlify(self.public_key)),",
          "257:             ]",
          "258:         )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "233:     source : https://source.android.com/security/apksigning/v3.html",
          "234:     \"\"\"",
          "237:         super().__init__()",
          "238:         self.minSDK = None",
          "239:         self.maxSDK = None",
          "",
          "[Removed Lines]",
          "236:     def __init__(self):",
          "",
          "[Added Lines]",
          "267:     def __init__(self) -> None:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "245:         # maxSDK is set to a negative value if there is no upper bound on the sdk targeted",
          "246:         max_sdk_str = \"%d\" % self.maxSDK",
          "248:             max_sdk_str = \"0x%x\" % self.maxSDK",
          "257: class APK:",
          "",
          "[Removed Lines]",
          "247:         if self.maxSDK >= 0x7fffffff:",
          "250:         return \"\\n\".join([",
          "251:             'signer minSDK : {:d}'.format(self.minSDK),",
          "252:             'signer maxSDK : {:s}'.format(max_sdk_str),",
          "253:             base_str",
          "254:         ])",
          "",
          "[Added Lines]",
          "278:         if self.maxSDK >= 0x7FFFFFFF:",
          "281:         return \"\\n\".join(",
          "282:             [",
          "283:                 'signer minSDK : {:d}'.format(self.minSDK),",
          "284:                 'signer maxSDK : {:s}'.format(max_sdk_str),",
          "285:                 base_str,",
          "286:             ]",
          "287:         )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "262:     # Constants in the APK Signature Block",
          "263:     _APK_SIG_MAGIC = b\"APK Sig Block 42\"",
          "268:     _APK_SIG_ALGO_IDS = {",
          "269:         0x0101: \"RSASSA-PSS with SHA2-256 digest, SHA2-256 MGF1, 32 bytes of salt, trailer: 0xbc\",",
          "",
          "[Removed Lines]",
          "264:     _APK_SIG_KEY_V2_SIGNATURE = 0x7109871a",
          "265:     _APK_SIG_KEY_V3_SIGNATURE = 0xf05368c0",
          "266:     _APK_SIG_ATTR_V2_STRIPPING_PROTECTION = 0xbeeff00d",
          "",
          "[Added Lines]",
          "297:     _APK_SIG_KEY_V2_SIGNATURE = 0x7109871A",
          "298:     _APK_SIG_KEY_V3_SIGNATURE = 0xF05368C0",
          "299:     _APK_SIG_ATTR_V2_STRIPPING_PROTECTION = 0xBEEFF00D",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "280:     __no_magic = False",
          "283:         \"\"\"",
          "284:         This class can access to all elements in an APK file",
          "",
          "[Removed Lines]",
          "282:     def __init__(self, filename, raw=False, magic_file=None, skip_analysis=False, testzip=False):",
          "",
          "[Added Lines]",
          "315:     def __init__(",
          "316:         self,",
          "317:         filename: str,",
          "318:         raw: bool = False,",
          "319:         magic_file: Union[str, None] = None,",
          "320:         skip_analysis: bool = False,",
          "321:         testzip: bool = False,",
          "322:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "303:         \"\"\"",
          "304:         if magic_file:",
          "305:             logger.warning(",
          "308:         self.filename = filename",
          "",
          "[Removed Lines]",
          "306:                 \"You set magic_file but this parameter is actually unused. You should remove it.\")",
          "",
          "[Added Lines]",
          "346:                 \"You set magic_file but this parameter is actually unused. You should remove it.\"",
          "347:             )",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "338:             self.__raw = self.zip.zip.getvalue()",
          "340:         if testzip:",
          "342:             # Test the zipfile for integrity before continuing.",
          "343:             # This process might be slow, as the whole file is read.",
          "344:             # Therefore it is possible to enable it as a separate feature.",
          "",
          "[Removed Lines]",
          "341:             logger.info(\"Testing zip file integrity, this might take a while...\")",
          "",
          "[Added Lines]",
          "382:             logger.info(",
          "383:                 \"Testing zip file integrity, this might take a while...\"",
          "384:             )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "353:                 # That the filename is either very very long or does not make any sense.",
          "354:                 # Thus we do not do it, the user might find out by using other tools.",
          "355:                 raise BrokenAPKError(",
          "358:         if not skip_analysis:",
          "359:             self._apk_analysis()",
          "",
          "[Removed Lines]",
          "356:                     \"The APK is probably broken: testzip returned an error.\")",
          "",
          "[Added Lines]",
          "399:                     \"The APK is probably broken: testzip returned an error.\"",
          "400:                 )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "385:             if not ap.is_valid():",
          "386:                 logger.error(",
          "388:                 return",
          "390:             self.axml[i] = ap",
          "",
          "[Removed Lines]",
          "387:                     \"Error while parsing AndroidManifest.xml - is the file valid?\")",
          "",
          "[Added Lines]",
          "431:                     \"Error while parsing AndroidManifest.xml - is the file valid?\"",
          "432:                 )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "393:             if self.axml[i].is_packed():",
          "394:                 logger.warning(",
          "397:             if self.xml[i] is not None:",
          "398:                 if self.xml[i].tag != \"manifest\":",
          "399:                     logger.error(",
          "401:                     return",
          "403:                 self.package = self.get_attribute_value(\"manifest\", \"package\")",
          "404:                 self.androidversion[\"Code\"] = self.get_attribute_value(",
          "406:                 self.androidversion[\"Name\"] = self.get_attribute_value(",
          "410:                 self.permissions = list(set(self.permissions + permission))",
          "412:                 for uses_permission in self.find_tags(\"uses-permission\"):",
          "418:                 # getting details of the declared permissions",
          "419:                 for d_perm_item in self.find_tags('permission'):",
          "420:                     d_perm_name = self._get_res_string_value(",
          "422:                     d_perm_label = self._get_res_string_value(",
          "424:                     d_perm_description = self._get_res_string_value(",
          "426:                     d_perm_permissionGroup = self._get_res_string_value(",
          "428:                     d_perm_protectionLevel = self._get_res_string_value(",
          "431:                     d_perm_details = {",
          "432:                         \"label\": d_perm_label,",
          "",
          "[Removed Lines]",
          "395:                     \"XML Seems to be packed, operations on the AndroidManifest.xml might fail.\")",
          "400:                         \"AndroidManifest.xml does not start with a <manifest> tag! Is this a valid APK?\")",
          "405:                     \"manifest\", \"versionCode\")",
          "407:                     \"manifest\", \"versionName\")",
          "408:                 permission = list(self.get_all_attribute_value(",
          "409:                     \"uses-permission\", \"name\"))",
          "413:                     self.uses_permissions.append([",
          "414:                         self.get_value_from_tag(uses_permission, \"name\"),",
          "415:                         self._get_permission_maxsdk(uses_permission)",
          "416:                     ])",
          "421:                         str(self.get_value_from_tag(d_perm_item, \"name\")))",
          "423:                         str(self.get_value_from_tag(d_perm_item, \"label\")))",
          "425:                         str(self.get_value_from_tag(d_perm_item, \"description\")))",
          "427:                         str(self.get_value_from_tag(d_perm_item, \"permissionGroup\")))",
          "429:                         str(self.get_value_from_tag(d_perm_item, \"protectionLevel\")))",
          "",
          "[Added Lines]",
          "440:                     \"XML Seems to be packed, operations on the AndroidManifest.xml might fail.\"",
          "441:                 )",
          "446:                         \"AndroidManifest.xml does not start with a <manifest> tag! Is this a valid APK?\"",
          "447:                     )",
          "452:                     \"manifest\", \"versionCode\"",
          "453:                 )",
          "455:                     \"manifest\", \"versionName\"",
          "456:                 )",
          "457:                 permission = list(",
          "458:                     self.get_all_attribute_value(\"uses-permission\", \"name\")",
          "459:                 )",
          "463:                     self.uses_permissions.append(",
          "464:                         [",
          "465:                             self.get_value_from_tag(uses_permission, \"name\"),",
          "466:                             self._get_permission_maxsdk(uses_permission),",
          "467:                         ]",
          "468:                     )",
          "473:                         str(self.get_value_from_tag(d_perm_item, \"name\"))",
          "474:                     )",
          "476:                         str(self.get_value_from_tag(d_perm_item, \"label\"))",
          "477:                     )",
          "479:                         str(",
          "480:                             self.get_value_from_tag(d_perm_item, \"description\")",
          "481:                         )",
          "482:                     )",
          "484:                         str(",
          "485:                             self.get_value_from_tag(",
          "486:                                 d_perm_item, \"permissionGroup\"",
          "487:                             )",
          "488:                         )",
          "489:                     )",
          "491:                         str(",
          "492:                             self.get_value_from_tag(",
          "493:                                 d_perm_item, \"protectionLevel\"",
          "494:                             )",
          "495:                         )",
          "496:                     )",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "437:                     self.declared_permissions[d_perm_name] = d_perm_details",
          "439:                 self.valid_apk = True",
          "442:         # self.permission_module = androconf.load_api_specific_resource_module(",
          "447:     def __getstate__(self):",
          "448:         \"\"\"",
          "",
          "[Removed Lines]",
          "440:                 logger.debug(\"APK file was successfully validated!\")",
          "443:         #     \"aosp_permissions\", self.get_target_sdk_version())",
          "444:         # self.permission_module_min_sdk = androconf.load_api_specific_resource_module(",
          "445:         #     \"aosp_permissions\", self.get_min_sdk_version())",
          "",
          "[Added Lines]",
          "507:                 logger.info(\"APK file was successfully validated!\")",
          "510:         #     \"aosp_permissions\", self.get_target_sdk_version()",
          "511:         # )",
          "512:         # self.permission_module_min_sdk = (",
          "513:         #     androconf.load_api_specific_resource_module(",
          "514:         #         \"aosp_permissions\", self.get_min_sdk_version()",
          "515:         #     )",
          "516:         # )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "494:         try:",
          "495:             maxSdkVersion = int(self.get_value_from_tag(item, \"maxSdkVersion\"))",
          "496:         except ValueError:",
          "499:         except TypeError:",
          "500:             pass",
          "501:         return maxSdkVersion",
          "504:         \"\"\"",
          "505:         Return true if the APK is valid, false otherwise.",
          "506:         An APK is seen as valid, if the AndroidManifest.xml could be successful parsed.",
          "",
          "[Removed Lines]",
          "497:             logger.warning(str(maxSdkVersion)",
          "498:                            + ' is not a valid value for <uses-permission> maxSdkVersion')",
          "503:     def is_valid_APK(self):",
          "",
          "[Added Lines]",
          "568:             logger.warning(",
          "569:                 str(maxSdkVersion)",
          "570:                 + ' is not a valid value for <uses-permission> maxSdkVersion'",
          "571:             )",
          "576:     def is_valid_APK(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "511:         \"\"\"",
          "512:         return self.valid_apk",
          "515:         \"\"\"",
          "516:         Return the filename of the APK",
          "",
          "[Removed Lines]",
          "514:     def get_filename(self):",
          "",
          "[Added Lines]",
          "587:     def get_filename(self) -> str:",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "519:         \"\"\"",
          "520:         return self.filename",
          "523:         \"\"\"",
          "524:         Return the appname of the APK",
          "",
          "[Removed Lines]",
          "522:     def get_app_name(self):",
          "",
          "[Added Lines]",
          "595:     def get_app_name(self, locale=None) -> str:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "542:             # FIXME: would need to use _format_value inside get_attribute_value for each returned name!",
          "543:             # For example, as the activity name might be foobar.foo.bar but inside the activity it is only .bar",
          "544:             app_name = self.get_attribute_value(",
          "547:         if app_name is None:",
          "548:             # No App name set",
          "549:             # TODO return packagename instead?",
          "550:             logger.warning(",
          "552:             return \"\"",
          "554:         if app_name.startswith(\"@\"):",
          "",
          "[Removed Lines]",
          "545:                 'activity', 'label', name=main_activity_name)",
          "551:                 \"It looks like that no app name is set for the main activity!\")",
          "",
          "[Added Lines]",
          "618:                 'activity', 'label', name=main_activity_name",
          "619:             )",
          "625:                 \"It looks like that no app name is set for the main activity!\"",
          "626:             )",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "565:                 if package == 'android':",
          "566:                     # TODO: we can not resolve this, as we lack framework-res.apk",
          "567:                     # one exception would be when parsing framework-res.apk directly.",
          "570:                     return app_name",
          "571:                 else:",
          "572:                     # TODO should look this up, might be in the resources",
          "573:                     logger.warning(",
          "575:                     return app_name",
          "577:             try:",
          "581:             except Exception as e:",
          "582:                 logger.warning(\"Exception selecting app name: %s\" % e)",
          "583:         return app_name",
          "586:         \"\"\"",
          "587:         Return the first icon file name, which density is not greater than max_dpi,",
          "588:         unless exact icon resolution is set in the manifest, in which case",
          "",
          "[Removed Lines]",
          "568:                     logger.warning(\"Resource ID with android package name encountered! \"",
          "569:                                    \"Will not resolve, framework-res.apk would be required.\")",
          "574:                         \"Resource ID with Package name '{}' encountered! Will not resolve\".format(package))",
          "578:                 app_name = res_parser.get_resolved_res_configs(",
          "579:                     res_id,",
          "580:                     ARSCResTableConfig.default_config())[0][1]",
          "585:     def get_app_icon(self, max_dpi=65536):",
          "",
          "[Added Lines]",
          "643:                     logger.warning(",
          "644:                         \"Resource ID with android package name encountered! \"",
          "645:                         \"Will not resolve, framework-res.apk would be required.\"",
          "646:                     )",
          "651:                         \"Resource ID with Package name '{}' encountered! Will not resolve\".format(",
          "652:                             package",
          "653:                         )",
          "654:                     )",
          "658:                 config = (",
          "659:                     ARSCResTableConfig(None, locale=locale)",
          "660:                     if locale",
          "661:                     else ARSCResTableConfig.default_config()",
          "662:                 )",
          "663:                 app_name = res_parser.get_resolved_res_configs(res_id, config)[",
          "664:                     0",
          "665:                 ][1]",
          "670:     def get_app_icon(self, max_dpi: int = 65536) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "626:         main_activity_name = self.get_main_activity()",
          "628:         app_icon = self.get_attribute_value(",
          "631:         if not app_icon:",
          "632:             app_icon = self.get_attribute_value('application', 'icon')",
          "",
          "[Removed Lines]",
          "629:             'activity', 'icon', name=main_activity_name)",
          "",
          "[Added Lines]",
          "714:             'activity', 'icon', name=main_activity_name",
          "715:         )",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "637:             return None",
          "639:         if not app_icon:",
          "641:             if res_id:",
          "642:                 app_icon = \"@%x\" % res_id",
          "644:         if not app_icon:",
          "645:             res_id = res_parser.get_res_id_by_key(",
          "647:             if res_id:",
          "648:                 app_icon = \"@%x\" % res_id",
          "",
          "[Removed Lines]",
          "640:             res_id = res_parser.get_res_id_by_key(self.package, 'mipmap', 'ic_launcher')",
          "646:                 self.package, 'drawable', 'ic_launcher')",
          "",
          "[Added Lines]",
          "726:             res_id = res_parser.get_res_id_by_key(",
          "727:                 self.package, 'mipmap', 'ic_launcher'",
          "728:             )",
          "734:                 self.package, 'drawable', 'ic_launcher'",
          "735:             )",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "672:         return app_icon",
          "675:         \"\"\"",
          "676:         Return the name of the package",
          "",
          "[Removed Lines]",
          "674:     def get_package(self):",
          "",
          "[Added Lines]",
          "763:     def get_package(self) -> str:",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "681:         \"\"\"",
          "682:         return self.package",
          "685:         \"\"\"",
          "686:         Return the android version code",
          "",
          "[Removed Lines]",
          "684:     def get_androidversion_code(self):",
          "",
          "[Added Lines]",
          "773:     def get_androidversion_code(self) -> str:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "691:         \"\"\"",
          "692:         return self.androidversion[\"Code\"]",
          "695:         \"\"\"",
          "696:         Return the android version name",
          "",
          "[Removed Lines]",
          "694:     def get_androidversion_name(self):",
          "",
          "[Added Lines]",
          "783:     def get_androidversion_name(self) -> str:",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "701:         \"\"\"",
          "702:         return self.androidversion[\"Name\"]",
          "705:         \"\"\"",
          "706:         Return the file names inside the APK.",
          "",
          "[Removed Lines]",
          "704:     def get_files(self):",
          "",
          "[Added Lines]",
          "793:     def get_files(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "709:         \"\"\"",
          "710:         return self.zip.namelist()",
          "713:     #     \"\"\"",
          "714:     #     Return the filetype guessed for a buffer",
          "715:     #     :param buffer: bytes",
          "",
          "[Removed Lines]",
          "712:     # def _get_file_magic_name(self, buffer):",
          "",
          "[Added Lines]",
          "801:     # def _get_file_magic_name(self, buffer: bytes) -> str:",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "730:     #         return default",
          "731:     #     except TypeError as e:",
          "732:     #         self.__no_magic = True",
          "734:     #         logger.warning(\"Error from magic library: %s\", e)",
          "737:     #         return default",
          "773:     #     \"\"\"",
          "774:     #     Return the files inside the APK with their associated types (by using python-magic)",
          "776:     #     At the same time, the CRC32 are calculated for the files.",
          "779:     #     \"\"\"",
          "780:     #     if self._files == {}:",
          "781:     #         # Generate File Types / CRC List",
          "",
          "[Removed Lines]",
          "733:     #         logger.warning(\"It looks like you have the magic python package installed but not the magic library itself!\")",
          "735:     #         logger.warning(\"Please follow the installation instructions at https://github.com/ahupp/python-magic/#installation\")",
          "736:     #         logger.warning(\"You can also install the 'python-magic-bin' package on Windows and MacOS\")",
          "739:         try:",
          "740:             # There are several implementations of magic,",
          "741:             # unfortunately all called magic",
          "742:             # We use this one: https://github.com/ahupp/python-magic/",
          "743:             # You can also use python-magic-bin on Windows or MacOS",
          "744:             getattr(magic, \"MagicException\")",
          "745:         except AttributeError:",
          "746:             self.__no_magic = True",
          "747:             logger.warning(\"Not the correct Magic library was found on your \"",
          "748:                            \"system. Please install python-magic or python-magic-bin!\")",
          "749:             return default",
          "751:         try:",
          "752:             # 1024 byte are usually enough to test the magic",
          "753:             ftype = magic.from_buffer(buffer[:1024])",
          "754:         except magic.MagicException as e:",
          "755:             logger.exception(\"Error getting the magic type: %s\", e)",
          "756:             return default",
          "758:         if not ftype:",
          "759:             return default",
          "760:         else:",
          "761:             return self._patch_magic(buffer, ftype)",
          "763:     @property",
          "764:     def files(self):",
          "765:         \"\"\"",
          "766:         Returns a dictionary of filenames and detected magic type",
          "768:         :returns: dictionary of files and their mime type",
          "769:         \"\"\"",
          "770:         return self.get_files_types()",
          "772:     # def get_files_types(self):",
          "778:     #     :rtype: a dictionnary",
          "",
          "[Added Lines]",
          "822:     #         logger.warning(",
          "823:     #             \"It looks like you have the magic python package installed but not the magic library itself!\"",
          "824:     #         )",
          "826:     #         logger.warning(",
          "827:     #             \"Please follow the installation instructions at https://github.com/ahupp/python-magic/#installation\"",
          "828:     #         )",
          "829:     #         logger.warning(",
          "830:     #             \"You can also install the 'python-magic-bin' package on Windows and MacOS\"",
          "831:     #         )",
          "834:     #     try:",
          "835:     #         # There are several implementations of magic,",
          "836:     #         # unfortunately all called magic",
          "837:     #         # We use this one: https://github.com/ahupp/python-magic/",
          "838:     #         # You can also use python-magic-bin on Windows or MacOS",
          "839:     #         getattr(magic, \"MagicException\")",
          "840:     #     except AttributeError:",
          "841:     #         self.__no_magic = True",
          "842:     #         logger.warning(",
          "843:     #             \"Not the correct Magic library was found on your \"",
          "844:     #             \"system. Please install python-magic or python-magic-bin!\"",
          "845:     #         )",
          "846:     #         return default",
          "848:     #     try:",
          "849:     #         # 1024 byte are usually enough to test the magic",
          "850:     #         ftype = magic.from_buffer(buffer[:1024])",
          "851:     #     except magic.MagicException as e:",
          "852:     #         logger.exception(\"Error getting the magic type: %s\", e)",
          "853:     #         return default",
          "855:     #     if not ftype:",
          "856:     #         return default",
          "857:     #     else:",
          "858:     #         return self._patch_magic(buffer, ftype)",
          "860:     # @property",
          "861:     # def files(self) -> dict[str, str]:",
          "862:     #     \"\"\"",
          "863:     #     Returns a dictionary of filenames and detected magic type",
          "865:     #     :returns: dictionary of files and their mime type",
          "866:     #     \"\"\"",
          "867:     #     return self.get_files_types()",
          "869:     # def get_files_types(self) -> dict[str, str]:",
          "875:     #     :rtype: a dictionary",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "793:     #     :param orig: guess by mime libary",
          "794:     #     :returns: corrected guess",
          "795:     #     \"\"\"",
          "797:     #         return \"Android application package file\"",
          "799:     #     return orig",
          "",
          "[Removed Lines]",
          "796:     #     if (\"Zip\" in orig) or ('(JAR)' in orig) and androconf.is_android_raw(buffer) == 'APK':",
          "",
          "[Added Lines]",
          "893:     #     if (",
          "894:     #         (\"Zip\" in orig)",
          "895:     #         or ('(JAR)' in orig)",
          "896:     #         and androconf.is_android_raw(buffer) == 'APK'",
          "897:     #     ):",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "810:         buffer = self.zip.read(filename)",
          "811:         if filename not in self.files_crc32:",
          "812:             self.files_crc32[filename] = crc32(buffer)",
          "819:         return buffer",
          "822:         \"\"\"",
          "823:         Calculates and returns a dictionary of filenames and CRC32",
          "",
          "[Removed Lines]",
          "813:             if self.files_crc32[filename] != self.zip.infolist()[filename].crc32_of_uncompressed_data:",
          "814:                 logger.error(\"File '{}' has different CRC32 after unpacking! \"",
          "815:                              \"Declared: {:08x}, Calculated: {:08x}\".format(filename,",
          "816:                                                                            self.zip.infolist()[",
          "817:                                                                                filename].crc32_of_uncompressed_data,",
          "818:                                                                            self.files_crc32[filename]))",
          "821:     def get_files_crc32(self):",
          "",
          "[Added Lines]",
          "914:             if (",
          "915:                 self.files_crc32[filename]",
          "916:                 != self.zip.infolist()[filename].crc32_of_uncompressed_data",
          "917:             ):",
          "918:                 logger.error(",
          "919:                     \"File '{}' has different CRC32 after unpacking! \"",
          "920:                     \"Declared: {:08x}, Calculated: {:08x}\".format(",
          "921:                         filename,",
          "922:                         self.zip.infolist()[",
          "923:                             filename",
          "924:                         ].crc32_of_uncompressed_data,",
          "925:                         self.files_crc32[filename],",
          "926:                     )",
          "927:                 )",
          "930:     def get_files_crc32(self) -> dict[str, int]:",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "831:         return self.files_crc32",
          "843:         \"\"\"",
          "844:         Return raw bytes of the APK",
          "",
          "[Removed Lines]",
          "833:     # def get_files_information(self):",
          "834:     #     \"\"\"",
          "835:     #     Return the files inside the APK with their associated types and crc32",
          "837:     #     :rtype: str, str, int",
          "838:     #     \"\"\"",
          "839:     #     for k in self.get_files():",
          "840:     #         yield k, self.get_files_types()[k], self.get_files_crc32()[k]",
          "842:     def get_raw(self):",
          "",
          "[Added Lines]",
          "942:     def get_files_information(self) -> Iterator[tuple[str, str, int]]:",
          "943:         \"\"\"",
          "944:         Return the files inside the APK with their associated types and crc32",
          "946:         :rtype: str, str, int",
          "947:         \"\"\"",
          "948:         for k in self.get_files():",
          "949:             yield k, self.get_files_types()[k], self.get_files_crc32()[k]",
          "951:     def get_raw(self) -> bytes:",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "853:                 self.__raw = bytearray(f.read())",
          "854:             return self.__raw",
          "857:         \"\"\"",
          "858:         Return the raw data of the specified filename",
          "859:         inside the APK",
          "",
          "[Removed Lines]",
          "856:     def get_file(self, filename):",
          "",
          "[Added Lines]",
          "965:     def get_file(self, filename: str) -> bytes:",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "865:         except KeyError:",
          "866:             raise FileNotPresent(filename)",
          "869:         \"\"\"",
          "870:         Return the raw data of the classes dex file",
          "",
          "[Removed Lines]",
          "868:     def get_dex(self):",
          "",
          "[Added Lines]",
          "977:     def get_dex(self) -> bytes:",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "880:             # TODO is this a good idea to return an empty string?",
          "881:             return b\"\"",
          "884:         \"\"\"",
          "885:         Return the names of all DEX files found in the APK.",
          "886:         This method only accounts for \"offical\" dex files, i.e. all files",
          "",
          "[Removed Lines]",
          "883:     def get_dex_names(self):",
          "",
          "[Added Lines]",
          "992:     def get_dex_names(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "891:         dexre = re.compile(r\"^classes(\\d*).dex$\")",
          "892:         return filter(lambda x: dexre.match(x), self.get_files())",
          "895:         \"\"\"",
          "896:         Return the raw data of all classes dex files",
          "",
          "[Removed Lines]",
          "894:     def get_all_dex(self):",
          "",
          "[Added Lines]",
          "1003:     def get_all_dex(self) -> Iterator[bytes]:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "900:         for dex_name in self.get_dex_names():",
          "901:             yield self.get_file(dex_name)",
          "904:         \"\"\"",
          "905:         Test if the APK has multiple DEX files",
          "907:         :returns: True if multiple dex found, otherwise False",
          "908:         \"\"\"",
          "909:         dexre = re.compile(r\"^classes(\\d+)?.dex$\")",
          "912:     def _format_value(self, value):",
          "913:         \"\"\"",
          "",
          "[Removed Lines]",
          "903:     def is_multidex(self):",
          "910:         return len([instance for instance in self.get_files() if dexre.search(instance)]) > 1",
          "",
          "[Added Lines]",
          "1012:     def is_multidex(self) -> bool:",
          "1019:         return (",
          "1020:             len(",
          "1021:                 [",
          "1022:                     instance",
          "1023:                     for instance in self.get_files()",
          "1024:                     if dexre.search(instance)",
          "1025:                 ]",
          "1026:             )",
          "1027:             > 1",
          "1028:         )",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "931:         return value",
          "933:     def get_all_attribute_value(",
          "936:         \"\"\"",
          "937:         Yields all the attribute values in xml files which match with the tag name and the specific attribute",
          "",
          "[Removed Lines]",
          "934:         self, tag_name, attribute, format_value=True, **attribute_filter",
          "935:     ):",
          "",
          "[Added Lines]",
          "1052:         self,",
          "1053:         tag_name: str,",
          "1054:         attribute: str,",
          "1055:         format_value: bool = True,",
          "1057:     ) -> Iterator[str]:",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "950:                     yield value",
          "952:     def get_attribute_value(",
          "955:         \"\"\"",
          "956:         Return the attribute value in xml files which matches the tag name and the specific attribute",
          "",
          "[Removed Lines]",
          "953:         self, tag_name, attribute, format_value=False, **attribute_filter",
          "954:     ):",
          "",
          "[Added Lines]",
          "1075:         self,",
          "1076:         tag_name: str,",
          "1077:         attribute: str,",
          "1078:         format_value: bool = False,",
          "1080:     ) -> str:",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "961:         \"\"\"",
          "963:         for value in self.get_all_attribute_value(",
          "965:             if value is not None:",
          "966:                 return value",
          "969:         \"\"\"",
          "970:         Return the value of the android prefixed attribute in a specific tag.",
          "",
          "[Removed Lines]",
          "964:                 tag_name, attribute, format_value, **attribute_filter):",
          "968:     def get_value_from_tag(self, tag, attribute):",
          "",
          "[Added Lines]",
          "1090:             tag_name, attribute, format_value, **attribute_filter",
          "1091:         ):",
          "1095:     def get_value_from_tag(",
          "1096:         self, tag: Element, attribute: str",
          "1097:     ) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1006:             if value:",
          "1007:                 # If value is still None, the attribute could not be found, thus is not present",
          "1010:         return value",
          "1013:         \"\"\"",
          "1014:         Return a list of all the matched tags in all available xml",
          "1016:         :param str tag: specify the tag name",
          "1017:         \"\"\"",
          "1018:         all_tags = [",
          "1022:             for i in self.xml",
          "1023:         ]",
          "1024:         return [tag for tag_list in all_tags for tag in tag_list]",
          "1026:     def find_tags_from_xml(",
          "1029:         \"\"\"",
          "1030:         Return a list of all the matched tags in a specific xml",
          "1031:         w",
          "",
          "[Removed Lines]",
          "1008:                 logger.warning(\"Failed to get the attribute '{}' on tag '{}' with namespace. \"",
          "1009:                                \"But found the same attribute without namespace!\".format(attribute, tag.tag))",
          "1012:     def find_tags(self, tag_name, **attribute_filter):",
          "1019:             self.find_tags_from_xml(",
          "1020:                 i, tag_name, **attribute_filter",
          "1021:             )",
          "1027:         self, xml_name, tag_name, **attribute_filter",
          "1028:     ):",
          "",
          "[Added Lines]",
          "1137:                 logger.warning(",
          "1138:                     \"Failed to get the attribute '{}' on tag '{}' with namespace. \"",
          "1139:                     \"But found the same attribute without namespace!\".format(",
          "1140:                         attribute, tag.tag",
          "1141:                     )",
          "1142:                 )",
          "1145:     def find_tags(self, tag_name: str, **attribute_filter) -> list[str]:",
          "1152:             self.find_tags_from_xml(i, tag_name, **attribute_filter)",
          "1158:         self, xml_name: str, tag_name: str, **attribute_filter",
          "1159:     ) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1036:         if xml is None:",
          "1037:             return []",
          "1038:         if xml.tag == tag_name:",
          "1042:                 return [xml]",
          "1043:             return []",
          "1045:         return [",
          "1049:         ]",
          "1052:         r\"\"\"",
          "1053:         Return true if the attributes matches in attribute filter.",
          "",
          "[Removed Lines]",
          "1039:             if self.is_tag_matched(",
          "1040:                 xml.tag, **attribute_filter",
          "1041:             ):",
          "1044:         tags = xml.findall(\".//\" + tag_name)",
          "1046:             tag for tag in tags if self.is_tag_matched(",
          "1047:                 tag, **attribute_filter",
          "1048:             )",
          "1051:     def is_tag_matched(self, tag, **attribute_filter):",
          "",
          "[Added Lines]",
          "1170:             if self.is_tag_matched(xml.tag, **attribute_filter):",
          "1173:         tags = set()",
          "1174:         tags.update(xml.findall(\".//\" + tag_name))",
          "1176:         # https://github.com/androguard/androguard/pull/1053",
          "1177:         # permission declared using tag <android:uses-permission...",
          "1178:         tags.update(xml.findall(\".//\" + NS_ANDROID + tag_name))",
          "1180:             tag for tag in tags if self.is_tag_matched(tag, **attribute_filter)",
          "1183:     def is_tag_matched(self, tag: str, **attribute_filter) -> bool:",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1075:                 return False",
          "1076:         return True",
          "1079:         \"\"\"",
          "1080:         Return names of the main activities",
          "",
          "[Removed Lines]",
          "1078:     def get_main_activities(self):",
          "",
          "[Added Lines]",
          "1210:     def get_main_activities(self) -> set[str]:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1089:         for i in self.xml:",
          "1090:             if self.xml[i] is None:",
          "1091:                 continue",
          "1095:             for item in activities_and_aliases:",
          "1096:                 # Some applications have more than one MAIN activity.",
          "",
          "[Removed Lines]",
          "1092:             activities_and_aliases = self.xml[i].findall(\".//activity\") + \\",
          "1093:                 self.xml[i].findall(\".//activity-alias\")",
          "",
          "[Added Lines]",
          "1224:             activities_and_aliases = self.xml[i].findall(",
          "1225:                 \".//activity\"",
          "1226:             ) + self.xml[i].findall(\".//activity-alias\")",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1120:         return x.intersection(y)",
          "1123:         \"\"\"",
          "1124:         Return the name of the main activity",
          "",
          "[Removed Lines]",
          "1122:     def get_main_activity(self):",
          "",
          "[Added Lines]",
          "1255:     def get_main_activity(self) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1135:             # sorted is necessary",
          "1136:             # 9fc7d3e8225f6b377f9181a92c551814317b77e1aa0df4c6d508d24b18f0f633",
          "1137:             good_main_activities = sorted(",
          "1139:             if good_main_activities:",
          "1140:                 return good_main_activities[0]",
          "1141:             return sorted(main_activities)[0]",
          "1142:         return None",
          "1145:         \"\"\"",
          "1146:         Return the android:name attribute of all activities",
          "",
          "[Removed Lines]",
          "1138:                 main_activities.intersection(self.get_activities()))",
          "1144:     def get_activities(self):",
          "",
          "[Added Lines]",
          "1271:                 main_activities.intersection(self.get_activities())",
          "1272:             )",
          "1278:     def get_activities(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1149:         \"\"\"",
          "1150:         return list(self.get_all_attribute_value(\"activity\", \"name\"))",
          "1153:         \"\"\"",
          "1154:         Return the android:name and android:targetActivity attribute of all activity aliases.",
          "",
          "[Removed Lines]",
          "1152:     def get_activity_aliases(self):",
          "",
          "[Added Lines]",
          "1286:     def get_activity_aliases(self) -> list[dict[str, str]]:",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1159:         for alias in self.find_tags('activity-alias'):",
          "1160:             activity_alias = {}",
          "1161:             for attribute in ['name', 'targetActivity']:",
          "1164:                 if not value:",
          "1165:                     continue",
          "1166:                 activity_alias[attribute] = self._format_value(value)",
          "",
          "[Removed Lines]",
          "1162:                 value = (alias.get(attribute)",
          "1163:                          or alias.get(self._ns(attribute)))",
          "",
          "[Added Lines]",
          "1296:                 value = alias.get(attribute) or alias.get(self._ns(attribute))",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1168:                 ali.append(activity_alias)",
          "1169:         return ali",
          "1172:         \"\"\"",
          "1173:         Return the android:name attribute of all services",
          "",
          "[Removed Lines]",
          "1171:     def get_services(self):",
          "",
          "[Added Lines]",
          "1304:     def get_services(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1176:         \"\"\"",
          "1177:         return list(self.get_all_attribute_value(\"service\", \"name\"))",
          "1180:         \"\"\"",
          "1181:         Return the android:name attribute of all receivers",
          "",
          "[Removed Lines]",
          "1179:     def get_receivers(self):",
          "",
          "[Added Lines]",
          "1312:     def get_receivers(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1184:         \"\"\"",
          "1185:         return list(self.get_all_attribute_value(\"receiver\", \"name\"))",
          "1188:         \"\"\"",
          "1189:         Return the android:name attribute of all providers",
          "",
          "[Removed Lines]",
          "1187:     def get_providers(self):",
          "",
          "[Added Lines]",
          "1320:     def get_providers(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1192:         \"\"\"",
          "1193:         return list(self.get_all_attribute_value(\"provider\", \"name\"))",
          "1196:         \"\"\"",
          "1197:         Return the literal value with a resource id",
          "1198:         :rtype: str",
          "",
          "[Removed Lines]",
          "1195:     def get_res_value(self, name):",
          "",
          "[Added Lines]",
          "1328:     def get_res_value(self, name: str) -> str:",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1205:         res_id = res_parser.parse_id(name)[0]",
          "1206:         try:",
          "1207:             value = res_parser.get_resolved_res_configs(",
          "1210:         except Exception as e:",
          "1211:             logger.warning(\"Exception get resolved resource id: %s\" % e)",
          "1212:             return name",
          "1214:         return value",
          "1217:         \"\"\"",
          "1218:         Find intent filters for a given item and name.",
          "",
          "[Removed Lines]",
          "1208:                 res_id,",
          "1209:                 ARSCResTableConfig.default_config())[0][1]",
          "1216:     def get_intent_filters(self, itemtype, name):",
          "",
          "[Added Lines]",
          "1341:                 res_id, ARSCResTableConfig.default_config()",
          "1342:             )[0][1]",
          "1349:     def get_intent_filters(",
          "1350:         self, itemtype: str, name: str",
          "1351:     ) -> dict[str, list[str]]:",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1225:         :param name: the `android:name` of the parent item, e.g. activity name",
          "1226:         :returns: a dictionary with the keys `action` and `category` containing the `android:name` of those items",
          "1227:         \"\"\"",
          "1231:         d = {}",
          "1232:         for element in attributes.keys():",
          "",
          "[Removed Lines]",
          "1228:         attributes = {\"action\": [\"name\"], \"category\": [\"name\"], \"data\": [",
          "1229:             'scheme', 'host', 'port', 'path', 'pathPattern', 'pathPrefix', 'mimeType']}",
          "",
          "[Added Lines]",
          "1363:         attributes = {",
          "1364:             \"action\": [\"name\"],",
          "1365:             \"category\": [\"name\"],",
          "1366:             \"data\": [",
          "1367:                 'scheme',",
          "1368:                 'host',",
          "1369:                 'port',",
          "1370:                 'path',",
          "1371:                 'pathPattern',",
          "1372:                 'pathPrefix',",
          "1373:                 'mimeType',",
          "1374:             ],",
          "1375:         }",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1245:                                         value = ssitem.get(self._ns(attribute))",
          "1246:                                         if value:",
          "1247:                                             if value.startswith('@'):",
          "1249:                                             values[attribute] = value",
          "1251:                                     if values:",
          "",
          "[Removed Lines]",
          "1248:                                                 value = self.get_res_value(value)",
          "",
          "[Added Lines]",
          "1394:                                                 value = self.get_res_value(",
          "1395:                                                     value",
          "1396:                                                 )",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1266:         return d",
          "1269:         \"\"\"",
          "1270:         Return permissions names declared in the AndroidManifest.xml.",
          "",
          "[Removed Lines]",
          "1268:     def get_permissions(self):",
          "",
          "[Added Lines]",
          "1416:     def get_permissions(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1282:         \"\"\"",
          "1283:         return self.permissions",
          "1286:         \"\"\"",
          "1290:         \"\"\"",
          "1291:         target_sdk_version = self.get_effective_target_sdk_version()",
          "",
          "[Removed Lines]",
          "1285:     def get_uses_implied_permission_list(self):",
          "1287:             Return all permissions implied by the target SDK or other permissions.",
          "1289:             :rtype: list of string",
          "",
          "[Added Lines]",
          "1433:     def get_uses_implied_permission_list(self) -> list[str]:",
          "1435:         Return all permissions implied by the target SDK or other permissions.",
          "1437:         :rtype: list of string",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1308:             if READ_PHONE_STATE not in self.permissions:",
          "1309:                 implied.append([READ_PHONE_STATE, None])",
          "1313:             maxSdkVersion = None",
          "1314:             for name, version in self.uses_permissions:",
          "1315:                 if name == WRITE_EXTERNAL_STORAGE:",
          "",
          "[Removed Lines]",
          "1311:         if (WRITE_EXTERNAL_STORAGE in self.permissions or implied_WRITE_EXTERNAL_STORAGE) \\",
          "1312:                 and READ_EXTERNAL_STORAGE not in self.permissions:",
          "",
          "[Added Lines]",
          "1459:         if (",
          "1460:             WRITE_EXTERNAL_STORAGE in self.permissions",
          "1461:             or implied_WRITE_EXTERNAL_STORAGE",
          "1462:         ) and READ_EXTERNAL_STORAGE not in self.permissions:",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1318:             implied.append([READ_EXTERNAL_STORAGE, maxSdkVersion])",
          "1320:         if target_sdk_version < 16:",
          "1323:                 implied.append([READ_CALL_LOG, None])",
          "1326:                 implied.append([WRITE_CALL_LOG, None])",
          "1328:         return implied",
          "1331:         if not sdk_version or int(sdk_version) <= 15:",
          "1332:             return protection_level.replace('Or', '|').lower()",
          "1333:         return protection_level",
          "",
          "[Removed Lines]",
          "1321:             if READ_CONTACTS in self.permissions \\",
          "1322:                     and READ_CALL_LOG not in self.permissions:",
          "1324:             if WRITE_CONTACTS in self.permissions \\",
          "1325:                     and WRITE_CALL_LOG not in self.permissions:",
          "1330:     def _update_permission_protection_level(self, protection_level, sdk_version):",
          "",
          "[Added Lines]",
          "1471:             if (",
          "1472:                 READ_CONTACTS in self.permissions",
          "1473:                 and READ_CALL_LOG not in self.permissions",
          "1474:             ):",
          "1476:             if (",
          "1477:                 WRITE_CONTACTS in self.permissions",
          "1478:                 and WRITE_CALL_LOG not in self.permissions",
          "1479:             ):",
          "1484:     def _update_permission_protection_level(",
          "1485:         self, protection_level, sdk_version",
          "1486:     ):",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1337:         target_sdk = self.get_target_sdk_version()",
          "1338:         filled_permissions = permissions.copy()",
          "1339:         for permission in filled_permissions:",
          "1343:                 x = self.permission_module_min_sdk[permission]",
          "1344:                 protection_level = self._update_permission_protection_level(",
          "1346:                 filled_permissions[permission] = [",
          "1348:             else:",
          "1349:                 filled_permissions[permission] = [",
          "1350:                     self._update_permission_protection_level(",
          "1353:         return filled_permissions",
          "1356:         \"\"\"",
          "1357:         Return permissions with details.",
          "",
          "[Removed Lines]",
          "1340:             protection_level, label, description = filled_permissions[permission]",
          "1341:             if ((not label or not description)",
          "1342:                     and permission in self.permission_module_min_sdk):",
          "1345:                     x['protectionLevel'], min_sdk)",
          "1347:                     protection_level, x['label'], x['description']]",
          "1351:                         protection_level, target_sdk),",
          "1352:                     label, description]",
          "1355:     def get_details_permissions(self):",
          "",
          "[Added Lines]",
          "1496:             protection_level, label, description = filled_permissions[",
          "1497:                 permission",
          "1498:             ]",
          "1499:             if (",
          "1500:                 not label or not description",
          "1501:             ) and permission in self.permission_module_min_sdk:",
          "1504:                     x['protectionLevel'], min_sdk",
          "1505:                 )",
          "1507:                     protection_level,",
          "1508:                     x['label'],",
          "1509:                     x['description'],",
          "1510:                 ]",
          "1514:                         protection_level, target_sdk",
          "1515:                     ),",
          "1516:                     label,",
          "1517:                     description,",
          "1518:                 ]",
          "1521:     def get_details_permissions(self) -> dict[str, list[str]]:",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1367:             if i in self.permission_module:",
          "1368:                 x = self.permission_module[i]",
          "1369:                 l[i] = [x[\"protectionLevel\"], x[\"label\"], x[\"description\"]]",
          "1370:             else:",
          "1374:         return self._fill_deprecated_permissions(l)",
          "1377:         \"\"\"",
          "1378:         Returns requested permissions declared within AOSP project.",
          "",
          "[Removed Lines]",
          "1371:                 # FIXME: the permission might be signature, if it is defined by the app itself!",
          "1372:                 l[i] = [\"normal\", \"Unknown permission from android reference\",",
          "1373:                         \"Unknown permission from android reference\"]",
          "1376:     def get_requested_aosp_permissions(self):",
          "",
          "[Added Lines]",
          "1536:             elif i in self.declared_permissions:",
          "1537:                 protectionLevel_hex = self.declared_permissions[i][",
          "1538:                     \"protectionLevel\"",
          "1539:                 ]",
          "1540:                 protectionLevel = protection_flags_to_attributes[",
          "1541:                     protectionLevel_hex",
          "1542:                 ]",
          "1543:                 l[i] = [",
          "1544:                     protectionLevel,",
          "1545:                     \"Unknown permission from android reference\",",
          "1546:                     \"Unknown permission from android reference\",",
          "1547:                 ]",
          "1549:                 # Is there a valid case not belonging to the above two?",
          "1550:                 logger.info(f\"Unknown permission {i}\")",
          "1553:     def get_requested_aosp_permissions(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1388:                 aosp_permissions.append(perm)",
          "1389:         return aosp_permissions",
          "1392:         \"\"\"",
          "1393:         Returns requested aosp permissions with details.",
          "",
          "[Removed Lines]",
          "1391:     def get_requested_aosp_permissions_details(self):",
          "",
          "[Added Lines]",
          "1568:     def get_requested_aosp_permissions_details(self) -> dict[str, list[str]]:",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1403:                 continue",
          "1404:         return l",
          "1407:         \"\"\"",
          "1408:         Returns list of requested permissions not declared within AOSP project.",
          "",
          "[Removed Lines]",
          "1406:     def get_requested_third_party_permissions(self):",
          "",
          "[Added Lines]",
          "1583:     def get_requested_third_party_permissions(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1416:                 third_party_permissions.append(perm)",
          "1417:         return third_party_permissions",
          "1420:         \"\"\"",
          "1421:         Returns list of the declared permissions.",
          "",
          "[Removed Lines]",
          "1419:     def get_declared_permissions(self):",
          "",
          "[Added Lines]",
          "1596:     def get_declared_permissions(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1424:         \"\"\"",
          "1425:         return list(self.declared_permissions.keys())",
          "1428:         \"\"\"",
          "1429:         Returns declared permissions with the details.",
          "",
          "[Removed Lines]",
          "1427:     def get_declared_permissions_details(self):",
          "",
          "[Added Lines]",
          "1604:     def get_declared_permissions_details(self) -> dict[str, list[str]]:",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1432:         \"\"\"",
          "1433:         return self.declared_permissions",
          "1436:         \"\"\"",
          "1440:         \"\"\"",
          "1441:         return self.get_attribute_value(\"uses-sdk\", \"maxSdkVersion\")",
          "1444:         \"\"\"",
          "1448:         \"\"\"",
          "1449:         return self.get_attribute_value(\"uses-sdk\", \"minSdkVersion\")",
          "1452:         \"\"\"",
          "1456:         \"\"\"",
          "1457:         return self.get_attribute_value(\"uses-sdk\", \"targetSdkVersion\")",
          "1460:         \"\"\"",
          "1468:         \"\"\"",
          "1469:         target_sdk_version = self.get_target_sdk_version()",
          "1470:         if not target_sdk_version:",
          "",
          "[Removed Lines]",
          "1435:     def get_max_sdk_version(self):",
          "1437:             Return the android:maxSdkVersion attribute",
          "1439:             :rtype: string",
          "1443:     def get_min_sdk_version(self):",
          "1445:             Return the android:minSdkVersion attribute",
          "1447:             :rtype: string",
          "1451:     def get_target_sdk_version(self):",
          "1453:             Return the android:targetSdkVersion attribute",
          "1455:             :rtype: string",
          "1459:     def get_effective_target_sdk_version(self):",
          "1461:             Return the effective targetSdkVersion, always returns int > 0.",
          "1463:             If the targetSdkVersion is not set, it defaults to 1.  This is",
          "1464:             set based on defaults as defined in:",
          "1465:             https://developer.android.com/guide/topics/manifest/uses-sdk-element.html",
          "1467:             :rtype: int",
          "",
          "[Added Lines]",
          "1612:     def get_max_sdk_version(self) -> str:",
          "1614:         Return the android:maxSdkVersion attribute",
          "1616:         :rtype: string",
          "1620:     def get_min_sdk_version(self) -> str:",
          "1622:         Return the android:minSdkVersion attribute",
          "1624:         :rtype: string",
          "1628:     def get_target_sdk_version(self) -> str:",
          "1630:         Return the android:targetSdkVersion attribute",
          "1632:         :rtype: string",
          "1636:     def get_effective_target_sdk_version(self) -> int:",
          "1638:         Return the effective targetSdkVersion, always returns int > 0.",
          "1640:         If the targetSdkVersion is not set, it defaults to 1.  This is",
          "1641:         set based on defaults as defined in:",
          "1642:         https://developer.android.com/guide/topics/manifest/uses-sdk-element.html",
          "1644:         :rtype: int",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1474:         except (ValueError, TypeError):",
          "1475:             return 1",
          "1478:         \"\"\"",
          "1482:         \"\"\"",
          "1483:         return list(self.get_all_attribute_value(\"uses-library\", \"name\"))",
          "1486:         \"\"\"",
          "1487:         Return a list of all android:names found for the tag uses-feature",
          "1488:         in the AndroidManifest.xml",
          "",
          "[Removed Lines]",
          "1477:     def get_libraries(self):",
          "1479:             Return the android:name attributes for libraries",
          "1481:             :rtype: list",
          "1485:     def get_features(self):",
          "",
          "[Added Lines]",
          "1654:     def get_libraries(self) -> list[str]:",
          "1656:         Return the android:name attributes for libraries",
          "1658:         :rtype: list",
          "1662:     def get_features(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1491:         \"\"\"",
          "1492:         return list(self.get_all_attribute_value(\"uses-feature\", \"name\"))",
          "1495:         \"\"\"",
          "1496:         Checks if this application is build for wearables by",
          "1497:         checking if it uses the feature 'android.hardware.type.watch'",
          "",
          "[Removed Lines]",
          "1494:     def is_wearable(self):",
          "",
          "[Added Lines]",
          "1671:     def is_wearable(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1504:         \"\"\"",
          "1505:         return 'android.hardware.type.watch' in self.get_features()",
          "1508:         \"\"\"",
          "1509:         Checks if this application is build for TV (Leanback support)",
          "1510:         by checkin if it uses the feature 'android.software.leanback'",
          "",
          "[Removed Lines]",
          "1507:     def is_leanback(self):",
          "",
          "[Added Lines]",
          "1684:     def is_leanback(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1513:         \"\"\"",
          "1514:         return 'android.software.leanback' in self.get_features()",
          "1517:         \"\"\"",
          "1518:         Checks if this application does not require a touchscreen,",
          "1519:         as this is the rule to get into the TV section of the Play Store",
          "",
          "[Removed Lines]",
          "1516:     def is_androidtv(self):",
          "",
          "[Added Lines]",
          "1693:     def is_androidtv(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1522:         :returns: True if 'android.hardware.touchscreen' is not required, False otherwise",
          "1523:         \"\"\"",
          "1527:         \"\"\"",
          "1528:         Return the DER coded X.509 certificate from the signature file.",
          "1530:         :param filename: Signature filename in APK",
          "1532:         \"\"\"",
          "1533:         pkcs7message = self.get_file(filename)",
          "1540:         \"\"\"",
          "1541:         Return a X.509 certificate object by giving the name in the apk file",
          "",
          "[Removed Lines]",
          "1524:         return self.get_attribute_value('uses-feature', 'name', required=\"false\", name=\"android.hardware.touchscreen\") == \"android.hardware.touchscreen\"",
          "1526:     def get_certificate_der(self, filename):",
          "1531:         :returns: DER coded X.509 certificate as binary",
          "1535:         pkcs7obj = cms.ContentInfo.load(pkcs7message)",
          "1536:         cert = pkcs7obj['content']['certificates'][0].chosen.dump()",
          "1537:         return cert",
          "1539:     def get_certificate(self, filename):",
          "",
          "[Added Lines]",
          "1701:         return (",
          "1702:             self.get_attribute_value(",
          "1703:                 'uses-feature',",
          "1704:                 'name',",
          "1705:                 required=\"false\",",
          "1706:                 name=\"android.hardware.touchscreen\",",
          "1707:             )",
          "1708:             == \"android.hardware.touchscreen\"",
          "1709:         )",
          "1711:     def get_certificate_der(",
          "1712:         self, filename: str, max_sdk_version: int = None",
          "1713:     ) -> Union[bytes, None]:",
          "1716:         If minSdkVersion is prior to Android N only the first SignerInfo is used.",
          "1717:         If signed attributes are present, they are taken into account",
          "1718:         Note that unsupported critical extensions and key usage are not verified!",
          "1719:         https://android.googlesource.com/platform/tools/apksig/+/refs/tags/platform-tools-34.0.5/src/main/java/com/android/apksig/internal/apk/v1/V1SchemeVerifier.java#668",
          "1722:         :param max_sdk_version: An optional integer parameter for the max sdk version",
          "1723:         :returns: DER coded X.509 certificate as binary or None",
          "1726:         # Get the signature",
          "1728:         # Get the .SF",
          "1729:         sf_filename = os.path.splitext(filename)[0] + '.SF'",
          "1730:         sf_object = self.get_file(sf_filename)",
          "1731:         # Load the signature",
          "1732:         signed_data = cms.ContentInfo.load(pkcs7message)",
          "1733:         # Locate the SignerInfo structure",
          "1734:         signer_infos = signed_data['content']['signer_infos']",
          "1735:         if not signer_infos:",
          "1736:             logger.error(",
          "1737:                 'No signer information found in the PKCS7 object. The APK may not be properly signed.'",
          "1738:             )",
          "1739:             return None",
          "1741:         # Prior to Android N, Android attempts to verify only the first SignerInfo. From N onwards, Android attempts",
          "1742:         # to verify all SignerInfos and then picks the first verified SignerInfo.",
          "1743:         min_sdk_version = self.get_min_sdk_version()",
          "1744:         if (",
          "1745:             min_sdk_version is None or int(min_sdk_version) < 24",
          "1746:         ):  # AndroidSdkVersion.N",
          "1747:             logger.info(",
          "1748:                 f\"minSdkVersion: {min_sdk_version} is less than 24. Getting the first signerInfo only!\"",
          "1749:             )",
          "1750:             unverified_signer_infos_to_try = [signer_infos[0]]",
          "1751:         else:",
          "1752:             unverified_signer_infos_to_try = signer_infos",
          "1754:         # Extract certificates from the PKCS7 object",
          "1755:         certificates = signed_data['content']['certificates']",
          "1756:         return_certificate = None",
          "1757:         list_certificates_verified = []",
          "1758:         for signer_info in unverified_signer_infos_to_try:",
          "1759:             try:",
          "1760:                 matching_certificate_verified = (",
          "1761:                     self.verify_signer_info_against_sig_file(",
          "1762:                         signed_data,",
          "1763:                         certificates,",
          "1764:                         signer_info,",
          "1765:                         sf_object,",
          "1766:                         max_sdk_version,",
          "1767:                     )",
          "1768:                 )",
          "1769:             except (ValueError, TypeError, OSError, InvalidSignature) as e:",
          "1770:                 logger.error(",
          "1771:                     f\"The following exception was raised while verifying the certificate: {e}\"",
          "1772:                 )",
          "1773:                 return (",
          "1774:                     None  # the validation stops due to the exception raised!",
          "1775:                 )",
          "1776:             if matching_certificate_verified is not None:",
          "1777:                 list_certificates_verified.append(",
          "1778:                     matching_certificate_verified",
          "1779:                 )",
          "1780:         if not list_certificates_verified:",
          "1781:             logger.error(",
          "1782:                 f\"minSdkVersion: {min_sdk_version}, # of SignerInfos: {len(unverified_signer_infos_to_try)}. None Verified!\"",
          "1783:             )",
          "1784:         else:",
          "1785:             return_certificate = list_certificates_verified[0]",
          "1786:         return return_certificate",
          "1788:     def verify_signer_info_against_sig_file(",
          "1789:         self,",
          "1790:         signed_data,",
          "1791:         certificates,",
          "1792:         signer_info,",
          "1793:         sf_object,",
          "1794:         max_sdk_version,",
          "1795:     ):",
          "1796:         matching_certificate = self.find_certificate(certificates, signer_info)",
          "1797:         matching_certificate_verified = None",
          "1798:         digest_algorithm, crypto_hash_algorithm = self.get_hash_algorithm(",
          "1799:             signer_info",
          "1800:         )",
          "1801:         if matching_certificate is None:",
          "1802:             raise ValueError(",
          "1803:                 \"Signing certificate referenced in SignerInfo not found in SignedData\"",
          "1804:             )",
          "1805:         else:",
          "1806:             if signer_info['signed_attrs'].native:",
          "1807:                 logger.info(\"Signed Attributes detected!\")",
          "1808:                 signed_attrs = signer_info['signed_attrs']",
          "1809:                 signed_attrs_dict = OrderedDict()",
          "1810:                 for attr in signed_attrs:",
          "1811:                     if attr['type'].dotted in signed_attrs_dict:",
          "1812:                         raise ValueError(",
          "1813:                             f\"Duplicate signed attribute: {attr['type'].dotted}\"",
          "1814:                         )",
          "1815:                     signed_attrs_dict[attr['type'].dotted] = attr['values']",
          "1817:                 # Check content type attribute (for Android N and newer)",
          "1818:                 if max_sdk_version is None or int(max_sdk_version) >= 24:",
          "1819:                     content_type_oid = (",
          "1820:                         '1.2.840.113549.1.9.3'  # OID for contentType",
          "1821:                     )",
          "1822:                     if content_type_oid not in signed_attrs_dict:",
          "1823:                         raise ValueError(",
          "1824:                             \"No Content Type in signed attributes\"",
          "1825:                         )",
          "1826:                     content_type = signed_attrs_dict[content_type_oid][",
          "1827:                         0",
          "1828:                     ].native",
          "1829:                     if (",
          "1830:                         content_type",
          "1831:                         != signed_data['content']['encap_content_info'][",
          "1832:                             'content_type'",
          "1833:                         ].native",
          "1834:                     ):",
          "1835:                         logger.error(",
          "1836:                             \"Content Type mismatch. Continuing to next SignerInfo, if any.\"",
          "1837:                         )",
          "1838:                         return None",
          "1840:                 # Check message digest attribute",
          "1841:                 message_digest_oid = (",
          "1842:                     '1.2.840.113549.1.9.4'  # OID for messageDigest",
          "1843:                 )",
          "1844:                 if message_digest_oid not in signed_attrs_dict:",
          "1845:                     raise ValueError(\"No content digest in signed attributes\")",
          "1846:                 expected_signature_file_digest = signed_attrs_dict[",
          "1847:                     message_digest_oid",
          "1848:                 ][0].native",
          "1849:                 hash_algo = digest_algorithm()",
          "1850:                 hash_algo.update(sf_object)",
          "1851:                 actual_digest = hash_algo.digest()",
          "1853:                 # Compare digests",
          "1854:                 if actual_digest != expected_signature_file_digest:",
          "1855:                     logger.error(",
          "1856:                         \"Digest mismatch. Continuing to next SignerInfo, if any.\"",
          "1857:                     )",
          "1858:                     return None",
          "1860:                 signed_attrs_dump = signed_attrs.dump()",
          "1861:                 # Modify the first byte to 0x31 for UNIVERSAL SET",
          "1862:                 signed_attrs_dump = b'\\x31' + signed_attrs_dump[1:]",
          "1863:                 matching_certificate_verified = self.verify_signature(",
          "1864:                     signer_info,",
          "1865:                     matching_certificate,",
          "1866:                     signed_attrs_dump,",
          "1867:                     crypto_hash_algorithm,",
          "1868:                 )",
          "1869:             else:",
          "1870:                 matching_certificate_verified = self.verify_signature(",
          "1871:                     signer_info,",
          "1872:                     matching_certificate,",
          "1873:                     sf_object,",
          "1874:                     crypto_hash_algorithm,",
          "1875:                 )",
          "1876:         return matching_certificate_verified",
          "1878:     @staticmethod",
          "1879:     def verify_signature(",
          "1880:         signer_info, matching_certificate, signed_data, crypto_hash_algorithm",
          "1881:     ):",
          "1882:         matching_certificate_verified = None",
          "1883:         signature = signer_info['signature'].native",
          "1885:         # Load the certificate using asn1crypto as it can handle more cases (v1-only-with-rsa-1024-cert-not-der.apk)",
          "1886:         cert = x509.Certificate.load(matching_certificate.chosen.dump())",
          "1887:         public_key_info = cert.public_key",
          "1889:         # Convert the ASN.1 public key to a cryptography-compatible object",
          "1890:         public_key_der = public_key_info.dump()",
          "1891:         public_key = serialization.load_der_public_key(",
          "1892:             public_key_der, backend=default_backend()",
          "1893:         )",
          "1895:         try:",
          "1896:             # RSA Key",
          "1897:             if isinstance(public_key, rsa.RSAPublicKey):",
          "1898:                 public_key.verify(",
          "1899:                     signature,",
          "1900:                     signed_data,",
          "1901:                     padding.PKCS1v15(),",
          "1902:                     crypto_hash_algorithm(),",
          "1903:                 )",
          "1905:             # DSA Key",
          "1906:             elif isinstance(public_key, dsa.DSAPublicKey):",
          "1907:                 public_key.verify(",
          "1908:                     signature, signed_data, crypto_hash_algorithm()",
          "1909:                 )",
          "1911:             # EC Key",
          "1912:             elif isinstance(public_key, ec.EllipticCurvePublicKey):",
          "1913:                 public_key.verify(",
          "1914:                     signature, signed_data, ec.ECDSA(crypto_hash_algorithm())",
          "1915:                 )",
          "1917:             else:",
          "1918:                 raise ValueError(",
          "1919:                     f\"Unsupported key algorithm: {public_key.__class__.__name__.lower()}\"",
          "1920:                 )",
          "1922:             # If verification succeeds, return the certificate",
          "1923:             matching_certificate_verified = matching_certificate.chosen.dump()",
          "1925:         except InvalidSignature:",
          "1926:             logger.info(",
          "1927:                 f\"The public key of the certificate: {hashlib.sha256(matching_certificate.chosen.dump()).hexdigest()} \"",
          "1928:                 f\"is not associated with the signature!\"",
          "1929:             )",
          "1931:         return matching_certificate_verified",
          "1933:     @staticmethod",
          "1934:     def get_hash_algorithm(signer_info):",
          "1935:         # Determine the hash algorithm from the SignerInfo",
          "1936:         digest_algorithm = signer_info['digest_algorithm']['algorithm'].native",
          "1937:         # Map the digest algorithm to a hash function",
          "1938:         hash_algorithms = {",
          "1939:             'md5': (md5, hashes.MD5),",
          "1940:             'sha1': (sha1, hashes.SHA1),",
          "1941:             'sha224': (sha224, hashes.SHA224),",
          "1942:             'sha256': (sha256, hashes.SHA256),",
          "1943:             'sha384': (sha384, hashes.SHA384),",
          "1944:             'sha512': (sha512, hashes.SHA512),",
          "1945:         }",
          "1946:         if digest_algorithm not in hash_algorithms:",
          "1947:             raise ValueError(f\"Unsupported hash algorithm: {digest_algorithm}\")",
          "1948:         return hash_algorithms[digest_algorithm]",
          "1950:     def find_certificate(self, signed_data_certificates, signer_info):",
          "1951:         \"\"\"",
          "1952:         From the bag of certs, obtain the certificate referenced by the SignerInfo.",
          "1954:         Args:",
          "1955:             signed_data_certificates: List of certificates in the SignedData.",
          "1956:             signer_info: SignerInfo object containing the issuer and serial number reference.",
          "1958:         Returns:",
          "1959:             The matching certificate if found, otherwise None.",
          "1960:         \"\"\"",
          "1961:         matching_certificate = None",
          "1962:         issuer_and_serial_number = signer_info['sid']",
          "1963:         issuer_str = self.canonical_name(",
          "1964:             issuer_and_serial_number.chosen['issuer']",
          "1965:         )",
          "1966:         serial_number = issuer_and_serial_number.native['serial_number']",
          "1968:         # # Create a x509.Name object for the issuer in the SignerInfo",
          "1969:         # issuer_name = x509.Name.build(issuer)",
          "1970:         # issuer_str = self.canonical_name(issuer_name)",
          "1972:         for cert in signed_data_certificates:",
          "1973:             if cert.name == 'certificate':",
          "1974:                 cert_issuer = self.canonical_name(",
          "1975:                     cert.chosen['tbs_certificate']['issuer']",
          "1976:                 )",
          "1977:                 cert_serial_number = cert.native['tbs_certificate'][",
          "1978:                     'serial_number'",
          "1979:                 ]",
          "1981:                 # Compare the canonical string representations of the issuers and the serial numbers",
          "1982:                 if (",
          "1983:                     cert_issuer == issuer_str",
          "1984:                     and cert_serial_number == serial_number",
          "1985:                 ):",
          "1986:                     matching_certificate = cert",
          "1987:                     break",
          "1989:         return matching_certificate",
          "1991:     def get_certificate(self, filename: str) -> Union[x509.Certificate, None]:",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1544:         :returns: a :class:`Certificate` certificate",
          "1545:         \"\"\"",
          "1546:         cert = self.get_certificate_der(filename)",
          "1549:         return certificate",
          "1552:         \"\"\"",
          "1562:         \"\"\"",
          "1563:         zout = zipfile.ZipFile(filename, 'w')",
          "",
          "[Removed Lines]",
          "1547:         certificate = x509.Certificate.load(cert)",
          "1551:     def new_zip(self, filename, deleted_files=None, new_files={}):",
          "1553:             Create a new zip file",
          "1555:             :param filename: the output filename of the zip",
          "1556:             :param deleted_files: a regex pattern to remove specific file",
          "1557:             :param new_files: a dictionnary of new files",
          "1559:             :type filename: string",
          "1560:             :type deleted_files: None or a string",
          "1561:             :type new_files: a dictionnary (key:filename, value:content of the file)",
          "",
          "[Added Lines]",
          "1999:         if cert:",
          "2000:             certificate = x509.Certificate.load(cert)",
          "2001:         else:",
          "2002:             certificate = None",
          "2005:     def canonical_name(self, name: Any, android: bool = False) -> str:",
          "2006:         \"\"\"",
          "2013:          Canonical representation of x509.Name as str (with raw control characters",
          "2014:         in places those are not stripped by normalisation).",
          "2015:         \"\"\"",
          "2016:         # return \",\".join(\"+\".join(f\"{t}:{v}\" for _, t, v in avas) for avas in self.comparison_name(name))",
          "2017:         return \",\".join(",
          "2018:             \"+\".join(f\"{t}={v}\" for t, v in avas)",
          "2019:             for avas in self.comparison_name(name, android=android)",
          "2020:         )",
          "2022:     def comparison_name(",
          "2023:         self, name: x509.Name, *, android: bool = False",
          "2024:     ) -> List[List[Tuple[str, str]]]:",
          "2025:         \"\"\"",
          "2032:         Canonical representation of x509.Name as nested list.",
          "2034:         Returns a list of RDNs which are a list of AVAs which are a (type, value)",
          "2035:         tuple, where type is the standard name or dotted OID, and value is the",
          "2036:         normalised string representation of the value.",
          "2039:         return [",
          "2040:             [(t, nv) for _, t, nv, _ in avas]",
          "2041:             for avas in self.x509_ordered_name(name, android=android)",
          "2042:         ]",
          "2044:     @staticmethod",
          "2045:     def x509_ordered_name(",
          "2046:         name: x509.Name,",
          "2048:         android: bool = False,",
          "2049:     ) -> List[List[Tuple[int, str, str, str]]]:",
          "2050:         \"\"\"",
          "2057:         Representation of x509.Name as nested list, in canonical ordering (but also",
          "2058:         including non-canonical pre-normalised string values).",
          "2060:         Returns a list of RDNs which are a list of AVAs which are a (oid, type,",
          "2061:         normalised_value, esc_value) tuple, where oid is 0 for standard names and 1",
          "2062:         for dotted OIDs, type is the standard name or dotted OID, normalised_value",
          "2063:         is the normalised string representation of the value, and esc_value is the",
          "2064:         string value before normalisation (but after escaping).",
          "2066:         NB: control characters are not escaped, only characters in \",+<>;\\\"\\\\\" and",
          "2067:         \"#\" at the start (before \"whitespace\" trimming) are.",
          "2069:         https://docs.oracle.com/en/java/javase/21/docs/api/java.base/javax/security/auth/x500/X500Principal.html#getName(java.lang.String)",
          "2070:         https://github.com/openjdk/jdk/blob/jdk-21%2B35/src/java.base/share/classes/sun/security/x509/AVA.java#L805",
          "2071:         https://github.com/openjdk/jdk/blob/jdk-21%2B35/src/java.base/share/classes/sun/security/x509/RDN.java#L472",
          "2072:         https://android.googlesource.com/platform/libcore/+/refs/heads/android14-release/ojluni/src/main/java/sun/security/x509/RDN.java#481",
          "2073:         \"\"\"",
          "2075:         def key(",
          "2076:             ava: Tuple[int, str, str, str]",
          "2077:         ) -> Tuple[int, Union[str, List[int]], str]:",
          "2078:             o, t, nv, _ = ava",
          "2079:             if android and o:",
          "2080:                 return o, [int(x) for x in t.split(\".\")], nv",
          "2081:             return o, t, nv",
          "2083:         DS, U8, PS = (",
          "2084:             x509.DirectoryString,",
          "2085:             x509.UTF8String,",
          "2086:             x509.PrintableString,",
          "2087:         )",
          "2088:         oids = {",
          "2089:             \"2.5.4.3\": (\"common_name\", \"cn\"),",
          "2090:             \"2.5.4.6\": (\"country_name\", \"c\"),",
          "2091:             \"2.5.4.7\": (\"locality_name\", \"l\"),",
          "2092:             \"2.5.4.8\": (\"state_or_province_name\", \"st\"),",
          "2093:             \"2.5.4.9\": (\"street_address\", \"street\"),",
          "2094:             \"2.5.4.10\": (\"organization_name\", \"o\"),",
          "2095:             \"2.5.4.11\": (\"organizational_unit_name\", \"ou\"),",
          "2096:             \"0.9.2342.19200300.100.1.1\": (\"user_id\", \"uid\"),",
          "2097:             \"0.9.2342.19200300.100.1.25\": (\"domain_component\", \"dc\"),",
          "2098:         }",
          "2099:         esc = {ord(c): f\"\\\\{c}\" for c in \",+<>;\\\"\\\\\"}",
          "2100:         cws = \"\".join(",
          "2101:             chr(i) for i in range(32 + 1)",
          "2102:         )  # control (but not esc) and whitespace",
          "2103:         data = []",
          "2104:         for rdn in reversed(name.chosen):",
          "2105:             avas = []",
          "2106:             for ava in rdn:",
          "2107:                 at, av = ava[\"type\"], ava[\"value\"]",
          "2108:                 if at.dotted in oids:",
          "2109:                     o, t = 0, oids[at.dotted][1]  # order standard before OID",
          "2110:                 else:",
          "2111:                     o, t = 1, at.dotted",
          "2112:                 if o or not (",
          "2113:                     isinstance(av, DS) and isinstance(av.chosen, (U8, PS))",
          "2114:                 ):",
          "2115:                     ev = nv = \"#\" + binascii.hexlify(av.dump()).decode()",
          "2116:                 else:",
          "2117:                     ev = (av.native or \"\").translate(esc)",
          "2118:                     if ev.startswith(\"#\"):",
          "2119:                         ev = \"\\\\\" + ev",
          "2120:                     nv = unicodedata.normalize(",
          "2121:                         \"NFKD\",",
          "2122:                         re.sub(r\" +\", \" \", ev).strip(cws).upper().lower(),",
          "2123:                     )",
          "2124:                 avas.append((o, t, nv, ev))",
          "2125:             data.append(sorted(avas, key=key))",
          "2126:         return data",
          "2128:     def new_zip(",
          "2129:         self,",
          "2130:         filename: str,",
          "2131:         deleted_files: Union[str, None] = None,",
          "2132:         new_files: dict = {},",
          "2133:     ) -> None:",
          "2134:         \"\"\"",
          "2135:         Create a new zip file",
          "2137:         :param filename: the output filename of the zip",
          "2138:         :param deleted_files: a regex pattern to remove specific file",
          "2139:         :param new_files: a dictionnary of new files",
          "2141:         :type filename: string",
          "2142:         :type deleted_files: None or a string",
          "2143:         :type new_files: a dictionnary (key:filename, value:content of the file)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1589:                 zout.writestr(item, buffer)",
          "1590:         zout.close()",
          "1593:         \"\"\"",
          "1597:         \"\"\"",
          "1598:         try:",
          "1599:             return self.axml[\"AndroidManifest.xml\"]",
          "1600:         except KeyError:",
          "1601:             return None",
          "1604:         \"\"\"",
          "1605:         Return the parsed xml object which corresponds to the AndroidManifest.xml file",
          "",
          "[Removed Lines]",
          "1592:     def get_android_manifest_axml(self):",
          "1594:             Return the :class:`AXMLPrinter` object which corresponds to the AndroidManifest.xml file",
          "1596:             :rtype: :class:`~androguard.core.bytecodes.axml.AXMLPrinter`",
          "1603:     def get_android_manifest_xml(self):",
          "",
          "[Added Lines]",
          "2174:     def get_android_manifest_axml(self) -> Union[AXMLPrinter, None]:",
          "2176:         Return the :class:`AXMLPrinter` object which corresponds to the AndroidManifest.xml file",
          "2178:         :rtype: :class:`~androguard.core.axml.AXMLPrinter`",
          "2185:     def get_android_manifest_xml(self) -> Union[lxml.etree.Element, None]:",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1611:         except KeyError:",
          "1612:             return None",
          "1615:         \"\"\"",
          "1619:         \"\"\"",
          "1620:         try:",
          "1621:             return self.arsc[\"resources.arsc\"]",
          "",
          "[Removed Lines]",
          "1614:     def get_android_resources(self):",
          "1616:         Return the :class:`~androguard.core.bytecodes.axml.ARSCParser` object which corresponds to the resources.arsc file",
          "1618:         :rtype: :class:`~androguard.core.bytecodes.axml.ARSCParser`",
          "",
          "[Added Lines]",
          "2196:     def get_android_resources(self) -> Union[ARSCParser, None]:",
          "2198:         Return the :class:`~androguard.core.axml.ARSCParser` object which corresponds to the resources.arsc file",
          "2200:         :rtype: :class:`~androguard.core.axml.ARSCParser`",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1624:                 # There is a rare case, that no resource file is supplied.",
          "1625:                 # Maybe it was added manually, thus we check here",
          "1626:                 return None",
          "1628:             return self.arsc[\"resources.arsc\"]",
          "1631:         \"\"\"",
          "1632:         Returns true if any of v1, v2, or v3 signatures were found.",
          "1633:         \"\"\"",
          "1637:         \"\"\"",
          "1638:         Returns true if a v1 / JAR signature was found.",
          "",
          "[Removed Lines]",
          "1627:             self.arsc[\"resources.arsc\"] = ARSCParser(self.zip.read(\"resources.arsc\"))",
          "1630:     def is_signed(self):",
          "1634:         return self.is_signed_v1() or self.is_signed_v2() or self.is_signed_v3()",
          "1636:     def is_signed_v1(self):",
          "",
          "[Added Lines]",
          "2209:             self.arsc[\"resources.arsc\"] = ARSCParser(",
          "2210:                 self.zip.read(\"resources.arsc\")",
          "2211:             )",
          "2214:     def is_signed(self) -> bool:",
          "2218:         return (",
          "2219:             self.is_signed_v1() or self.is_signed_v2() or self.is_signed_v3()",
          "2220:         )",
          "2222:     def is_signed_v1(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1642:         \"\"\"",
          "1643:         return self.get_signature_name() is not None",
          "1646:         \"\"\"",
          "1647:         Returns true of a v2 / APK signature was found.",
          "",
          "[Removed Lines]",
          "1645:     def is_signed_v2(self):",
          "",
          "[Added Lines]",
          "2231:     def is_signed_v2(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1655:         return self._is_signed_v2",
          "1658:         \"\"\"",
          "1659:         Returns true of a v3 / APK signature was found.",
          "",
          "[Removed Lines]",
          "1657:     def is_signed_v3(self):",
          "",
          "[Added Lines]",
          "2243:     def is_signed_v3(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "1667:         return self._is_signed_v3",
          "1671:         return value",
          "1676:         if not len(digest_bytes):",
          "1677:             return []",
          "",
          "[Removed Lines]",
          "1669:     def read_uint32_le(self, io_stream):",
          "1670:         value, = unpack('<I', io_stream.read(4))",
          "1673:     def parse_signatures_or_digests(self, digest_bytes):",
          "1674:         \"\"\" Parse digests \"\"\"",
          "",
          "[Added Lines]",
          "2255:     def read_uint32_le(self, io_stream) -> int:",
          "2256:         (value,) = unpack('<I', io_stream.read(4))",
          "2259:     def parse_signatures_or_digests(",
          "2260:         self, digest_bytes",
          "2261:     ) -> list[tuple[int, bytes]]:",
          "2262:         \"\"\"Parse digests\"\"\"",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "1691:         return digests",
          "1694:         # Need to find an v2 Block in the APK.",
          "1695:         # The Google Docs gives you the following rule:",
          "1696:         # * go to the end of the ZIP File",
          "",
          "[Removed Lines]",
          "1693:     def parse_v2_v3_signature(self):",
          "",
          "[Added Lines]",
          "2281:     def parse_v2_v3_signature(self) -> None:",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "1715:         while f.tell() > 0:",
          "1716:             f.seek(-1, io.SEEK_CUR)",
          "1718:             if r == self._PK_END_OF_CENTRAL_DIR:",
          "1719:                 # Read central dir",
          "1722:                 # TODO according to the standard we need to check if the",
          "1723:                 # end of central directory is the last item in the zip file",
          "1724:                 # TODO We also need to check if the central dir is exactly",
          "",
          "[Removed Lines]",
          "1717:             r, = unpack('<4s', f.read(4))",
          "1720:                 this_disk, disk_central, this_entries, total_entries, \\",
          "1721:                     size_central, offset_central = unpack('<HHHHII', f.read(16))",
          "",
          "[Added Lines]",
          "2305:             (r,) = unpack('<4s', f.read(4))",
          "2308:                 (",
          "2309:                     this_disk,",
          "2310:                     disk_central,",
          "2311:                     this_entries,",
          "2312:                     total_entries,",
          "2313:                     size_central,",
          "2314:                     offset_central,",
          "2315:                 ) = unpack('<HHHHII', f.read(16))",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "1727:                 # These things should not happen for APKs",
          "1728:                 if this_disk != 0:",
          "1729:                     logger.warning(",
          "1731:                 if disk_central != 0:",
          "1732:                     logger.warning(",
          "1734:                 break",
          "1735:             f.seek(-4, io.SEEK_CUR)",
          "",
          "[Removed Lines]",
          "1730:                         \"This is a multi disk ZIP! Attempting to process its signature anyway!\")",
          "1733:                         \"This is a multi disk ZIP! Attempting to process its signature anyway!\")",
          "",
          "[Added Lines]",
          "2324:                         \"This is a multi disk ZIP! Attempting to process its signature anyway!\"",
          "2325:                     )",
          "2328:                         \"This is a multi disk ZIP! Attempting to process its signature anyway!\"",
          "2329:                     )",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "1738:             return",
          "1740:         f.seek(offset_central)",
          "1742:         f.seek(-4, io.SEEK_CUR)",
          "1743:         if r != self._PK_CENTRAL_DIR:",
          "1744:             raise BrokenAPKError(\"No Central Dir at specified offset\")",
          "",
          "[Removed Lines]",
          "1741:         r, = unpack('<4s', f.read(4))",
          "",
          "[Added Lines]",
          "2337:         (r,) = unpack('<4s', f.read(4))",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "1757:         # go back size_of_blocks + 8 and read size_of_block again",
          "1758:         f.seek(-(size_of_block + 8), io.SEEK_CUR)",
          "1760:         if size_of_block_start != size_of_block:",
          "1761:             raise BrokenAPKError(\"Sizes at beginning and and does not match!\")",
          "",
          "[Removed Lines]",
          "1759:         size_of_block_start, = unpack(\"<Q\", f.read(8))",
          "",
          "[Added Lines]",
          "2355:         (size_of_block_start,) = unpack(\"<Q\", f.read(8))",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "1764:         while f.tell() < end_offset - 24:",
          "1765:             size, key = unpack('<QI', f.read(12))",
          "1766:             value = f.read(size - 4)",
          "1769:         # Test if a signature is found",
          "1770:         if self._APK_SIG_KEY_V2_SIGNATURE in self._v2_blocks:",
          "",
          "[Removed Lines]",
          "1767:             self._v2_blocks[key] = value",
          "",
          "[Added Lines]",
          "2363:             if key in self._v2_blocks:",
          "2364:                 # TODO: Store the duplicate V2 Signature blocks and offer a way to show them",
          "2365:                 # https://github.com/androguard/androguard/issues/1030",
          "2366:                 logger.warning(",
          "2367:                     \"Duplicate block ID in APK Signing Block: {}\".format(key)",
          "2368:                 )",
          "2369:             else:",
          "2370:                 self._v2_blocks[key] = value",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "1773:         if self._APK_SIG_KEY_V3_SIGNATURE in self._v2_blocks:",
          "1774:             self._is_signed_v3 = True",
          "1777:         \"\"\"",
          "1778:         Parse the V2 signing block and extract all features",
          "1779:         \"\"\"",
          "",
          "[Removed Lines]",
          "1776:     def parse_v3_signing_block(self):",
          "",
          "[Added Lines]",
          "2379:     def parse_v3_signing_block(self) -> None:",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "1805:         #    * publickey",
          "1806:         size_sequence = self.read_uint32_le(block)",
          "1807:         if size_sequence + 4 != len(block_bytes):",
          "1810:         while block.tell() < len(block_bytes):",
          "1811:             off_signer = block.tell()",
          "",
          "[Removed Lines]",
          "1808:             raise BrokenAPKError(\"size of sequence and blocksize does not match\")",
          "",
          "[Added Lines]",
          "2411:             raise BrokenAPKError(",
          "2412:                 \"size of sequence and blocksize does not match\"",
          "2413:             )",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "1862:             publickey = block.read(len_publickey)",
          "1864:             signer = APKV3Signer()",
          "1866:             signer.signed_data = signed_data_object",
          "1867:             signer.signatures = sigs",
          "1868:             signer.public_key = publickey",
          "",
          "[Removed Lines]",
          "1865:             signer._bytes = view[off_signer:off_signer + size_signer]",
          "",
          "[Added Lines]",
          "2470:             signer._bytes = view[off_signer: off_signer + size_signer]",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "1872:             self._v3_signing_data.append(signer)",
          "1875:         \"\"\"",
          "1876:         Parse the V2 signing block and extract all features",
          "1877:         \"\"\"",
          "",
          "[Removed Lines]",
          "1874:     def parse_v2_signing_block(self):",
          "",
          "[Added Lines]",
          "2479:     def parse_v2_signing_block(self) -> None:",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "1901:         size_sequence = self.read_uint32_le(block)",
          "1902:         if size_sequence + 4 != len(block_bytes):",
          "1905:         while block.tell() < len(block_bytes):",
          "1906:             off_signer = block.tell()",
          "",
          "[Removed Lines]",
          "1903:             raise BrokenAPKError(\"size of sequence and blocksize does not match\")",
          "",
          "[Added Lines]",
          "2508:             raise BrokenAPKError(",
          "2509:                 \"size of sequence and blocksize does not match\"",
          "2510:             )",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "1946:             publickey = block.read(len_publickey)",
          "1948:             signer = APKV2Signer()",
          "1950:             signer.signed_data = signed_data_object",
          "1951:             signer.signatures = sigs",
          "1952:             signer.public_key = publickey",
          "1954:             self._v2_signing_data.append(signer)",
          "1957:         \"\"\"",
          "1958:         Return a list of DER coded X.509 public keys from the v3 signature block",
          "1959:         \"\"\"",
          "",
          "[Removed Lines]",
          "1949:             signer._bytes = view[off_signer:off_signer + size_signer]",
          "1956:     def get_public_keys_der_v3(self):",
          "",
          "[Added Lines]",
          "2556:             signer._bytes = view[off_signer: off_signer + size_signer]",
          "2563:     def get_public_keys_der_v3(self) -> list[bytes]:",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "1969:         return public_keys",
          "1972:         \"\"\"",
          "1973:         Return a list of DER coded X.509 public keys from the v3 signature block",
          "1974:         \"\"\"",
          "",
          "[Removed Lines]",
          "1971:     def get_public_keys_der_v2(self):",
          "",
          "[Added Lines]",
          "2578:     def get_public_keys_der_v2(self) -> list[bytes]:",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "1984:         return public_keys",
          "1987:         \"\"\"",
          "1988:         Return a list of DER coded X.509 certificates from the v3 signature block",
          "1989:         \"\"\"",
          "",
          "[Removed Lines]",
          "1986:     def get_certificates_der_v3(self):",
          "",
          "[Added Lines]",
          "2593:     def get_certificates_der_v3(self) -> list[bytes]:",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "1992:             self.parse_v3_signing_block()",
          "1994:         certs = []",
          "1996:             for cert in signed_data.certificates:",
          "1997:                 certs.append(cert)",
          "1999:         return certs",
          "2002:         \"\"\"",
          "2003:         Return a list of DER coded X.509 certificates from the v3 signature block",
          "2004:         \"\"\"",
          "",
          "[Removed Lines]",
          "1995:         for signed_data in [signer.signed_data for signer in self._v3_signing_data]:",
          "2001:     def get_certificates_der_v2(self):",
          "",
          "[Added Lines]",
          "2602:         for signed_data in [",
          "2603:             signer.signed_data for signer in self._v3_signing_data",
          "2604:         ]:",
          "2610:     def get_certificates_der_v2(self) -> list[bytes]:",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2007:             self.parse_v2_signing_block()",
          "2009:         certs = []",
          "2011:             for cert in signed_data.certificates:",
          "2012:                 certs.append(cert)",
          "2014:         return certs",
          "2017:         \"\"\"",
          "2018:         Return a list of :class:`asn1crypto.keys.PublicKeyInfo` which are found",
          "2019:         in the v3 signing block.",
          "2020:         \"\"\"",
          "2024:         \"\"\"",
          "2025:         Return a list of :class:`asn1crypto.keys.PublicKeyInfo` which are found",
          "2026:         in the v2 signing block.",
          "2027:         \"\"\"",
          "2031:         \"\"\"",
          "2032:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2033:         in the v3 signing block.",
          "2034:         Note that we simply extract all certificates regardless of the signer.",
          "2035:         Therefore this is just a list of all certificates found in all signers.",
          "2036:         \"\"\"",
          "2040:         \"\"\"",
          "2041:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2042:         in the v2 signing block.",
          "2043:         Note that we simply extract all certificates regardless of the signer.",
          "2044:         Therefore this is just a list of all certificates found in all signers.",
          "2045:         \"\"\"",
          "2049:         \"\"\"",
          "2051:         in the META-INF folder (v1 signing).",
          "2054:         \"\"\"",
          "2055:         certs = []",
          "2056:         for x in self.get_signature_names():",
          "2059:         return certs",
          "2062:         \"\"\"",
          "2063:         Return a list of unique :class:`asn1crypto.x509.Certificate` which are found",
          "2064:         in v1, v2 and v3 signing",
          "2065:         Note that we simply extract all certificates regardless of the signer.",
          "2066:         Therefore this is just a list of all certificates found in all signers.",
          "2067:         \"\"\"",
          "2068:         fps = []",
          "2069:         certs = []",
          "2071:             if x.sha256 not in fps:",
          "2072:                 fps.append(x.sha256)",
          "2073:                 certs.append(x)",
          "2074:         return certs",
          "2077:         \"\"\"",
          "2079:         \"\"\"",
          "2080:         if self.get_signature_names():",
          "2081:             return self.get_signature_names()[0]",
          "",
          "[Removed Lines]",
          "2010:         for signed_data in [signer.signed_data for signer in self._v2_signing_data]:",
          "2016:     def get_public_keys_v3(self):",
          "2021:         return [keys.PublicKeyInfo.load(pkey) for pkey in self.get_public_keys_der_v3()]",
          "2023:     def get_public_keys_v2(self):",
          "2028:         return [keys.PublicKeyInfo.load(pkey) for pkey in self.get_public_keys_der_v2()]",
          "2030:     def get_certificates_v3(self):",
          "2037:         return [x509.Certificate.load(cert) for cert in self.get_certificates_der_v3()]",
          "2039:     def get_certificates_v2(self):",
          "2046:         return [x509.Certificate.load(cert) for cert in self.get_certificates_der_v2()]",
          "2048:     def get_certificates_v1(self):",
          "2050:         Return a list of :class:`asn1crypto.x509.Certificate` which are found",
          "2052:         Note that we simply extract all certificates regardless of the signer.",
          "2053:         Therefore this is just a list of all certificates found in all signers.",
          "2057:             certs.append(x509.Certificate.load(self.get_certificate_der(x)))",
          "2061:     def get_certificates(self):",
          "2070:         for x in self.get_certificates_v1() + self.get_certificates_v2() + self.get_certificates_v3():",
          "2076:     def get_signature_name(self):",
          "2078:             Return the name of the first signature file found.",
          "",
          "[Added Lines]",
          "2619:         for signed_data in [",
          "2620:             signer.signed_data for signer in self._v2_signing_data",
          "2621:         ]:",
          "2627:     def get_public_keys_v3(self) -> list[keys.PublicKeyInfo]:",
          "2632:         return [",
          "2633:             keys.PublicKeyInfo.load(pkey)",
          "2634:             for pkey in self.get_public_keys_der_v3()",
          "2635:         ]",
          "2637:     def get_public_keys_v2(self) -> list[keys.PublicKeyInfo]:",
          "2642:         return [",
          "2643:             keys.PublicKeyInfo.load(pkey)",
          "2644:             for pkey in self.get_public_keys_der_v2()",
          "2645:         ]",
          "2647:     def get_certificates_v3(self) -> list[x509.Certificate]:",
          "2654:         return [",
          "2655:             x509.Certificate.load(cert)",
          "2656:             for cert in self.get_certificates_der_v3()",
          "2657:         ]",
          "2659:     def get_certificates_v2(self) -> list[x509.Certificate]:",
          "2666:         return [",
          "2667:             x509.Certificate.load(cert)",
          "2668:             for cert in self.get_certificates_der_v2()",
          "2669:         ]",
          "2671:     def get_certificates_v1(self) -> list[Union[x509.Certificate, None]]:",
          "2673:         Return a list of verified :class:`asn1crypto.x509.Certificate` which are found",
          "2678:             cc = self.get_certificate_der(x)",
          "2679:             if cc is not None:",
          "2680:                 certs.append(x509.Certificate.load(cc))",
          "2683:     def get_certificates(self) -> list[x509.Certificate]:",
          "2689:         Exception is v1, for which the certificate returned is verified.",
          "2693:         for x in (",
          "2694:             self.get_certificates_v1()",
          "2695:             + self.get_certificates_v2()",
          "2696:             + self.get_certificates_v3()",
          "2697:         ):",
          "2703:     def get_signature_name(self) -> Union[str, None]:",
          "2705:         Return the name of the first signature file found.",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2083:             # Unsigned APK",
          "2084:             return None",
          "2087:         \"\"\"",
          "2088:         Return a list of the signature file names (v1 Signature / JAR",
          "2089:         Signature)",
          "",
          "[Removed Lines]",
          "2086:     def get_signature_names(self):",
          "",
          "[Added Lines]",
          "2713:     def get_signature_names(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2099:                     signatures.append(i)",
          "2100:                 else:",
          "2101:                     logger.warning(",
          "2104:         return signatures",
          "2107:         \"\"\"",
          "2108:         Return the data of the first signature file found (v1 Signature / JAR",
          "2109:         Signature)",
          "",
          "[Removed Lines]",
          "2102:                         \"v1 signature file {} missing .SF file - Partial signature!\".format(i))",
          "2106:     def get_signature(self):",
          "",
          "[Added Lines]",
          "2729:                         \"v1 signature file {} missing .SF file - Partial signature!\".format(",
          "2730:                             i",
          "2731:                         )",
          "2732:                     )",
          "2736:     def get_signature(self) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2115:         else:",
          "2116:             return None",
          "2119:         \"\"\"",
          "2120:         Return a list of the data of the signature files.",
          "2121:         Only v1 / JAR Signing.",
          "",
          "[Removed Lines]",
          "2118:     def get_signatures(self):",
          "",
          "[Added Lines]",
          "2748:     def get_signatures(self) -> list[bytes]:",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2132:         return signature_datas",
          "2135:         self.get_files_types()",
          "2137:         print(\"FILES: \")",
          "",
          "[Removed Lines]",
          "2134:     def show(self):",
          "",
          "[Added Lines]",
          "2764:     def show(self) -> None:",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2184:                 show_Certificate(c)",
          "2188:     \"\"\"",
          "2196:     \"\"\"",
          "2197:     print(\"SHA1 Fingerprint: {}\".format(cert.sha1_fingerprint))",
          "2198:     print(\"SHA256 Fingerprint: {}\".format(cert.sha256_fingerprint))",
          "2204:     \"\"\"Ensure incoming value is always the value, not the resid",
          "2206:     androguard will sometimes return the Android \"resId\" aka",
          "",
          "[Removed Lines]",
          "2187: def show_Certificate(cert, short=False):",
          "2189:         Print Fingerprints, Issuer and Subject of an X509 Certificate.",
          "2191:         :param cert: X509 Certificate to print",
          "2192:         :param short: Print in shortform for DN (Default: False)",
          "2194:         :type cert: :class:`asn1crypto.x509.Certificate`",
          "2195:         :type short: Boolean",
          "2199:     print(\"Issuer: {}\".format(get_certificate_name_string(cert.issuer.native, short=short)))",
          "2200:     print(\"Subject: {}\".format(get_certificate_name_string(cert.subject.native, short=short)))",
          "2203: def ensure_final_value(packageName, arsc, value):",
          "",
          "[Added Lines]",
          "2817: def show_Certificate(cert, short: bool = False) -> None:",
          "2819:     Print Fingerprints, Issuer and Subject of an X509 Certificate.",
          "2821:     :param cert: X509 Certificate to print",
          "2822:     :param short: Print in shortform for DN (Default: False)",
          "2824:     :type cert: :class:`asn1crypto.x509.Certificate`",
          "2825:     :type short: Boolean",
          "2829:     print(",
          "2830:         \"Issuer: {}\".format(",
          "2831:             get_certificate_name_string(cert.issuer.native, short=short)",
          "2832:         )",
          "2833:     )",
          "2834:     print(",
          "2835:         \"Subject: {}\".format(",
          "2836:             get_certificate_name_string(cert.subject.native, short=short)",
          "2837:         )",
          "2838:     )",
          "2841: def ensure_final_value(packageName: str, arsc: ARSCParser, value: str) -> str:",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2221:                 pass",
          "2222:         return returnValue",
          "2223:     return ''",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2864: def get_apkid(apkfile: str) -> tuple[str, str, str]:",
          "2865:     \"\"\"Read (appid, versionCode, versionName) from an APK",
          "2867:     This first tries to do quick binary XML parsing to just get the",
          "2868:     values that are needed.  It will fallback to full androguard",
          "2869:     parsing, which is slow, if it can't find the versionName value or",
          "2870:     versionName is set to a Android String Resource (e.g. an integer",
          "2871:     hex value that starts with @).",
          "2873:     \"\"\"",
          "2874:     logger.debug(\"GET_APKID\")",
          "2876:     if not os.path.exists(apkfile):",
          "2877:         logger.error(\"'{apkfile}' does not exist!\".format(apkfile=apkfile))",
          "2879:     appid = None",
          "2880:     versionCode = None",
          "2881:     versionName = None",
          "2882:     apk = ZipEntry.parse(apkfile, False)",
          "2883:     manifest = apk.read('AndroidManifest.xml')",
          "2884:     axml = AXMLParser(manifest)",
          "2885:     count = 0",
          "2886:     while axml.is_valid():",
          "2887:         _type = next(axml)",
          "2888:         count += 1",
          "2889:         if _type == START_TAG:",
          "2890:             for i in range(0, axml.getAttributeCount()):",
          "2891:                 name = axml.getAttributeName(i)",
          "2892:                 _type = axml.getAttributeValueType(i)",
          "2893:                 _data = axml.getAttributeValueData(i)",
          "2894:                 value = format_value(",
          "2895:                     _type, _data, lambda _: axml.getAttributeValue(i)",
          "2896:                 )",
          "2897:                 if appid is None and name == 'package':",
          "2898:                     appid = value",
          "2899:                 elif versionCode is None and name == 'versionCode':",
          "2900:                     if value.startswith('0x'):",
          "2901:                         versionCode = str(int(value, 16))",
          "2902:                     else:",
          "2903:                         versionCode = value",
          "2904:                 elif versionName is None and name == 'versionName':",
          "2905:                     versionName = value",
          "2907:             if axml.name == 'manifest':",
          "2908:                 break",
          "2909:         elif _type == END_TAG or _type == TEXT or _type == END_DOCUMENT:",
          "2910:             raise RuntimeError(",
          "2911:                 '{path}: <manifest> must be the first element in AndroidManifest.xml'.format(",
          "2912:                     path=apkfile",
          "2913:                 )",
          "2914:             )",
          "2916:     if not versionName or versionName[0] == '@':",
          "2917:         a = APK(apkfile)",
          "2918:         versionName = ensure_final_value(",
          "2919:             a.package, a.get_android_resources(), a.get_androidversion_name()",
          "2920:         )",
          "2921:     if not versionName:",
          "2922:         versionName = ''  # versionName is expected to always be a str",
          "2924:     return appid, versionCode, versionName.strip('\\0')",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py -> mobsf/StaticAnalyzer/tools/androguard4/apkinspector/extract.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: import zlib",
          "4: import os",
          "7: def extract_file_based_on_header_info(apk_file, local_header_info, central_directory_info):",
          "8:     \"\"\"",
          "9:     Extracts a single file from the apk_file based on the information provided from the offset and the header_info.",
          "10:     It takes into account that the compression method provided might not be STORED or DEFLATED! The returned",
          "11:     'indicator', shows what compression method was used. Besides the standard STORED/DEFLATE it may return",
          "12:     'DEFLATED_TAMPERED', which means that the compression method found was not DEFLATED(8) but it should have been,",
          "13:     and 'STORED_TAMPERED' which means that the compression method found was not STORED(0) but should have been.",
          "15:     :param apk_file: The APK file e.g. with open('test.apk', 'rb') as apk_file",
          "16:     :type apk_file: bytesIO",
          "17:     :param local_header_info: The local header dictionary info for that specific filename",
          "18:     :type local_header_info: dict",
          "19:     :param central_directory_info: The central directory entry for that specific filename",
          "20:     :type central_directory_info: dict",
          "21:     :return: Returns the actual extracted data for that file along with an indication of whether a static analysis evasion technique was used or not.",
          "22:     :rtype: set(bytes, str)",
          "23:     \"\"\"",
          "24:     filename_length = local_header_info[\"file_name_length\"]",
          "25:     if local_header_info[\"compressed_size\"] == 0 or local_header_info[\"uncompressed_size\"] == 0:",
          "26:         compressed_size = central_directory_info[\"compressed_size\"]",
          "27:         uncompressed_size = central_directory_info[\"uncompressed_size\"]",
          "28:     else:",
          "29:         compressed_size = local_header_info[\"compressed_size\"]",
          "30:         uncompressed_size = local_header_info[\"uncompressed_size\"]",
          "32:     extra_field_length = local_header_info[\"extra_field_length\"]",
          "33:     compression_method = local_header_info[\"compression_method\"]",
          "34:     # Skip the offset + local header to reach the compressed data",
          "35:     local_header_size = 30  # Size of the local header in bytes",
          "36:     offset = central_directory_info[\"relative_offset_of_local_file_header\"]",
          "37:     apk_file.seek(offset + local_header_size + filename_length + extra_field_length)",
          "38:     if compression_method == 0:  # Stored (no compression)",
          "39:         uncompressed_data = apk_file.read(uncompressed_size)",
          "40:         extracted_data = uncompressed_data",
          "41:         indicator = 'STORED'",
          "42:     elif compression_method == 8:",
          "43:         compressed_data = apk_file.read(compressed_size)",
          "44:         # -15 for windows size due to raw stream with no header or trailer",
          "45:         extracted_data = zlib.decompress(compressed_data, -15)",
          "46:         indicator = 'DEFLATED'",
          "47:     elif compressed_size == uncompressed_size:",
          "48:         compressed_data = apk_file.read(uncompressed_size)",
          "49:         extracted_data = compressed_data",
          "50:         indicator = 'STORED_TAMPERED'",
          "51:     else:",
          "52:         cur_loc = apk_file.tell()",
          "53:         try:",
          "54:             compressed_data = apk_file.read(compressed_size)",
          "55:             extracted_data = zlib.decompress(compressed_data, -15)",
          "56:             indicator = 'DEFLATED_TAMPERED'",
          "57:         except:",
          "58:             apk_file.seek(cur_loc)",
          "59:             compressed_data = apk_file.read(uncompressed_size)",
          "60:             extracted_data = compressed_data",
          "61:             indicator = 'STORED_TAMPERED'",
          "62:     return extracted_data, indicator",
          "65: def extract_all_files_from_central_directory(apk_file, central_directory_entries, local_header_entries, output_dir):",
          "66:     \"\"\"",
          "67:     Extracts all files from an APK based on the entries detected in the central_directory_entries.",
          "69:     :param apk_file: The APK file e.g. with open('test.apk', 'rb') as apk_file",
          "70:     :type apk_file: bytesIO",
          "71:     :param central_directory_entries: The dictionary with all the entries for the central directory",
          "72:     :type central_directory_entries: dict",
          "73:     :param local_header_entries: The dictionary with all the local header entries",
          "74:     :type local_header_entries: dict",
          "75:     :param output_dir: The output directory where to save the files.",
          "76:     :type output_dir: str",
          "77:     :return: Returns 0 if no errors, 1 if an exception and 2 if the output directory already exists",
          "78:     :rtype: int",
          "79:     \"\"\"",
          "80:     try:",
          "81:         # Check if the output directory already exists",
          "82:         if os.path.exists(output_dir):",
          "83:             print(\"Extraction aborted. Output directory already exists.\")",
          "84:             return 2",
          "85:         # Create the output directory or overwrite if it already exists",
          "86:         os.makedirs(output_dir, exist_ok=True)",
          "87:         # Iterate over central directory entries",
          "88:         for filename, cd_header_info in central_directory_entries.items():",
          "89:             if not filename:",
          "90:                 # to account for the cases where an empty filename entry is added",
          "91:                 continue",
          "92:             # Extract the file using the local header information",
          "93:             extracted_data = \\",
          "94:                 extract_file_based_on_header_info(",
          "95:                     apk_file, local_header_entries[filename], cd_header_info)[0]",
          "96:             # Construct the output file path",
          "97:             output_path = os.path.join(output_dir, filename)",
          "98:             # Create directories if necessary",
          "99:             os.makedirs(os.path.dirname(output_path), exist_ok=True)",
          "100:             # Write the extracted data to the output file",
          "101:             with open(output_path, 'wb') as output_file:",
          "102:                 output_file.write(extracted_data)",
          "103:         return 0",
          "104:     except Exception as e:",
          "105:         print(f\"Error extracting files: {e}\")",
          "106:         return 1",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/zipfile.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/headers.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/zipfile.py -> mobsf/StaticAnalyzer/tools/androguard4/apkinspector/headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "4: import io",
          "6: import struct",
          "7: from typing import Dict",
          "64: class EndOfCentralDirectoryRecord:",
          "",
          "[Removed Lines]",
          "3: \"\"\"This file is from apkinspector licensed under the Apache License 2.0.\"\"\"",
          "5: import zlib",
          "10: def extract_file_based_on_header_info(apk_file, local_header_info, central_directory_info):",
          "11:     \"\"\"",
          "12:     Extracts a single file from the apk_file based on the information provided from the offset and the header_info.",
          "13:     It takes into account that the compression method provided might not be STORED or DEFLATED! The returned",
          "14:     'indicator', shows what compression method was used. Besides the standard STORED/DEFLATE it may return",
          "15:     'DEFLATED_TAMPERED', which means that the compression method found was not DEFLATED(8) but it should have been,",
          "16:     and 'STORED_TAMPERED' which means that the compression method found was not STORED(0) but should have been.",
          "18:     :param apk_file: The APK file e.g. with open('test.apk', 'rb') as apk_file",
          "19:     :type apk_file: bytesIO",
          "20:     :param local_header_info: The local header dictionary info for that specific filename",
          "21:     :type local_header_info: dict",
          "22:     :param central_directory_info: The central directory entry for that specific filename",
          "23:     :type central_directory_info: dict",
          "24:     :return: Returns the actual extracted data for that file along with an indication of whether a static analysis evasion technique was used or not.",
          "25:     :rtype: set(bytes, str)",
          "26:     \"\"\"",
          "27:     filename_length = local_header_info[\"file_name_length\"]",
          "28:     if local_header_info[\"compressed_size\"] == 0 or local_header_info[\"uncompressed_size\"] == 0:",
          "29:         compressed_size = central_directory_info[\"compressed_size\"]",
          "30:         uncompressed_size = central_directory_info[\"uncompressed_size\"]",
          "31:     else:",
          "32:         compressed_size = local_header_info[\"compressed_size\"]",
          "33:         uncompressed_size = local_header_info[\"uncompressed_size\"]",
          "35:     extra_field_length = local_header_info[\"extra_field_length\"]",
          "36:     compression_method = local_header_info[\"compression_method\"]",
          "37:     # Skip the offset + local header to reach the compressed data",
          "38:     local_header_size = 30  # Size of the local header in bytes",
          "39:     offset = central_directory_info[\"relative_offset_of_local_file_header\"]",
          "40:     apk_file.seek(offset + local_header_size + filename_length + extra_field_length)",
          "41:     if compression_method == 0:  # Stored (no compression)",
          "42:         uncompressed_data = apk_file.read(uncompressed_size)",
          "43:         extracted_data = uncompressed_data",
          "44:         indicator = 'STORED'",
          "45:     elif compression_method == 8:",
          "46:         compressed_data = apk_file.read(compressed_size)",
          "47:         # -15 for windows size due to raw stream with no header or trailer",
          "48:         extracted_data = zlib.decompress(compressed_data, -15)",
          "49:         indicator = 'DEFLATED'",
          "50:     else:",
          "51:         try:",
          "52:             cur_loc = apk_file.tell()",
          "53:             compressed_data = apk_file.read(compressed_size)",
          "54:             extracted_data = zlib.decompress(compressed_data, -15)",
          "55:             indicator = 'DEFLATED_TAMPERED'",
          "56:         except:",
          "57:             apk_file.seek(cur_loc)",
          "58:             compressed_data = apk_file.read(uncompressed_size)",
          "59:             extracted_data = compressed_data",
          "60:             indicator = 'STORED_TAMPERED'",
          "61:     return extracted_data, indicator",
          "",
          "[Added Lines]",
          "3: # ApkInspector - Nov 24, 2024 - 293ab2d89ab9ce011c7dbbc5df3c876172875a1c",
          "5: import os",
          "9: from .extract import extract_file_based_on_header_info, extract_all_files_from_central_directory",
          "10: from .helpers import pretty_print_header, save_to_json, save_data_to_file",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         signature_offset = -1",
          "99:         file_size = apk_file.seek(0, 2)",
          "100:         while offset < file_size:",
          "104:             apk_file.seek(position)",
          "105:             chunk = apk_file.read(chunk_size)",
          "106:             if not chunk:",
          "107:                 break",
          "110:             if signature_offset != -1:",
          "111:                 eo_central_directory_offset = position + signature_offset",
          "114:         if signature_offset == -1:",
          "115:             raise ValueError(",
          "116:                 \"End of central directory record (EOCD) signature not found\")",
          "",
          "[Removed Lines]",
          "101:             position = file_size - offset - chunk_size",
          "102:             if position < 0:",
          "103:                 position = 0",
          "108:             # end of Central Directory File Header signature",
          "109:             signature_offset = chunk.rfind(b'\\x50\\x4b\\x05\\x06')",
          "112:                 break  # Found End of central directory record (EOCD) signature",
          "113:             offset += chunk_size",
          "",
          "[Added Lines]",
          "50:             position = max(0, file_size - offset - chunk_size)",
          "55:             signature_offset = chunk.rfind(b'\\x50\\x4b\\x05\\x06')  # EOCD signature",
          "58:                 break  # Found EOCD signature",
          "59:             # Adjust offset to overlap by 4 bytes",
          "60:             offset += chunk_size - 4",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:             relative_offset_of_local_file_header = struct.unpack('<I', apk_file.read(4))[",
          "302:                 0]",
          "303:             filename = struct.unpack(f'<{file_name_length}s', apk_file.read(file_name_length))[",
          "309:             offset_in_central_directory = c_offset",
          "311:             central_directory_entry = CentralDirectoryEntry(",
          "",
          "[Removed Lines]",
          "304:                 0].decode('utf-8')",
          "305:             extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(extra_field_length))[0].decode('utf-8',",
          "306:                                                                                                                 'ignore')",
          "307:             file_comment = struct.unpack(f'<{file_comment_length}s', apk_file.read(file_comment_length))[0].decode(",
          "308:                 'utf-8', 'ignore')",
          "",
          "[Added Lines]",
          "252:                 0].decode('utf-8', 'ignore')",
          "253:             extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(",
          "254:                 extra_field_length))[0].decode('utf-8', 'ignore')",
          "255:             file_comment = struct.unpack(f'<{file_comment_length}s', apk_file.read(",
          "256:                 file_comment_length))[0].decode('utf-8', 'ignore')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "398:             uncompressed_size = struct.unpack('<I', apk_file.read(4))[0]",
          "399:             file_name_length = struct.unpack('<H', apk_file.read(2))[0]",
          "400:             extra_field_length = struct.unpack('<H', apk_file.read(2))[0]",
          "405:         return cls(",
          "406:             version_needed_to_extract, general_purpose_bit_flag, compression_method,",
          "407:             file_last_modification_time, file_last_modification_date, crc32_of_uncompressed_data,",
          "",
          "[Removed Lines]",
          "401:             filename = struct.unpack(f'<{file_name_length}s', apk_file.read(file_name_length))[",
          "402:                 0].decode('utf-8')",
          "403:             extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(extra_field_length))[0].decode('utf-8',",
          "404:                                                                                                                 'ignore')",
          "",
          "[Added Lines]",
          "349:             try:",
          "350:                 filename = struct.unpack(f'<{file_name_length}s', apk_file.read(file_name_length))[",
          "351:                     0].decode('utf-8', 'ignore')",
          "352:                 extra_field = struct.unpack(f'<{extra_field_length}s', apk_file.read(",
          "353:                     extra_field_length))[0].decode('utf-8', 'ignore')",
          "354:             except:",
          "355:                 filename = entry_of_interest.filename",
          "356:                 extra_field = entry_of_interest.extra_field",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:         Similar to parse, but instead of parsing the entire APK, it only targets the specified file.",
          "490:         :param apk_file: The apk file expected raw",
          "492:         :param filename: the filename of the file to be parsed",
          "493:         :type filename: str",
          "494:         :param eocd: Optionally, the instance of the end of central directory from the APK",
          "",
          "[Removed Lines]",
          "491:         :type apk_file: io.TextIOWrapper",
          "",
          "[Added Lines]",
          "443:         :type apk_file: bytesIO",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "561:         \"\"\"",
          "562:         extracted_file = extract_file_based_on_header_info(self.zip, self.get_local_header_dict(name),",
          "563:                                                            self.get_central_directory_entry_dict(name))[0]",
          "566:         return extracted_file",
          "568:     def infolist(self) -> Dict[str, CentralDirectoryEntry]:",
          "",
          "[Removed Lines]",
          "564:         # if save:",
          "565:         #     save_data_to_file(f\"EXTRACTED_{name}\", extracted_file)",
          "",
          "[Added Lines]",
          "516:         if save:",
          "517:             save_data_to_file(f\"EXTRACTED_{name}\", extracted_file)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "582:         :rtype: list",
          "583:         \"\"\"",
          "584:         return [vl for vl in self.central_directory.to_dict()]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:     def extract_all(self, extract_path, apk_name):",
          "539:         \"\"\"",
          "540:         Extracts all the contents of the APK.",
          "542:         :param extract_path: where to extract it",
          "543:         :type extract_path: str",
          "544:         :param apk_name: the name of the apk",
          "545:         :type apk_name: str",
          "546:         \"\"\"",
          "547:         output_path = os.path.join(extract_path, apk_name)",
          "548:         if not extract_all_files_from_central_directory(self.zip, self.to_dict()[\"central_directory\"],",
          "549:                                                         self.to_dict()[\"local_headers\"], output_path):",
          "550:             print(f\"Extraction successful for: {apk_name}\")",
          "553: def print_headers_of_filename(cd_h_of_file, local_header_of_file):",
          "554:     \"\"\"",
          "555:     Prints out the details for both the central directory header and the local file header. Useful for the CLI.",
          "557:     :param cd_h_of_file: central directory header of a filename as it may be retrieved from headers_of_filename",
          "558:     :type cd_h_of_file: dict",
          "559:     :param local_header_of_file: local header dictionary of a filename as it may be retrieved from headers_of_filename",
          "560:     :type local_header_of_file: dict",
          "561:     \"\"\"",
          "562:     if not cd_h_of_file or not local_header_of_file:",
          "563:         print(\"Are you sure the filename exists?\")",
          "564:         return",
          "565:     pretty_print_header(\"CENTRAL DIRECTORY\")",
          "566:     for k in cd_h_of_file:",
          "567:         if k == 'Relative offset of local file header' or k == 'Offset in the central directory header':",
          "568:             print(f\"{k:40} : {hex(int(cd_h_of_file[k]))} | {cd_h_of_file[k]}\")",
          "569:         else:",
          "570:             print(f\"{k:40} : {cd_h_of_file[k]}\")",
          "571:     pretty_print_header(\"LOCAL HEADER\")",
          "572:     for k in local_header_of_file:",
          "573:         print(f\"{k:40} : {local_header_of_file[k]}\")",
          "576: def show_and_save_info_of_headers(entries, apk_name, header_type: str, export: bool, show: bool):",
          "577:     \"\"\"",
          "578:     Print information for each entry for the central directory header and allow to possibly export to JSON.",
          "580:     :param entries: The dictionary with all the entries for the central directory",
          "581:     :type entries: dict",
          "582:     :param apk_name: String with the name of the APK, so it can be used for the export.",
          "583:     :type apk_name: str",
          "584:     :param header_type: What type of header that is, either central_directory or local, to be used for the export",
          "585:     :type header_type: str",
          "586:     :param export: Boolean for exporting or not to JSON",
          "587:     :type export: bool",
          "588:     :param show: Boolean for printing or not the entries",
          "589:     :type show: bool",
          "590:     \"\"\"",
          "591:     if show:",
          "592:         for entry in entries:",
          "593:             pretty_print_header(entry)",
          "594:             print(entries[entry])",
          "595:     if export:",
          "596:         save_to_json(f\"{apk_name}_{header_type}_header.json\", entries)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py||mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py -> mobsf/StaticAnalyzer/tools/androguard4/apkinspector/helpers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: import json",
          "6: def pretty_print_header(header_text, width=50, char='-'):",
          "7:     \"\"\"",
          "8:     Formatting output used for the CLI",
          "10:     :param header_text: The text to be displayed",
          "11:     :type header_text: str",
          "12:     :param width: total width of the display",
          "13:     :type width: int",
          "14:     :param char: which char to be used as a filler",
          "15:     :type char: str",
          "16:     \"\"\"",
          "17:     padding = max(0, width - len(header_text)) // 2",
          "18:     formatted_header = f\"\\n{char * padding} {header_text} {char * padding}\"",
          "19:     print(formatted_header)",
          "22: def save_data_to_file(filename, data):",
          "23:     \"\"\"",
          "24:     Write data to file",
          "26:     :param data: the actual data",
          "27:     :type data: bytes",
          "28:     :param filename: file to be saved in",
          "29:     :type filename: str",
          "30:     \"\"\"",
          "31:     try:",
          "32:         with open(filename, 'wb') as output_file:",
          "33:             output_file.write(data)",
          "34:         print(f\"Data saved to {filename}\")",
          "35:     except Exception as e:",
          "36:         print(f\"Error while saving data to {filename}: {e}\")",
          "39: def save_to_json(filename, dictionary):",
          "40:     \"\"\"",
          "41:     Simple method to save a dictionary as JSON into the filename.",
          "43:     :param filename: the name of the file to be saved as",
          "44:     :type filename: str",
          "45:     :param dictionary: the dictionary to be saved as JSON",
          "46:     :type dictionary: dict",
          "47:     \"\"\"",
          "48:     with open(filename, \"w\") as h_file:",
          "49:         json.dump(dictionary, h_file, indent=4)",
          "52: def escape_xml_entities(data):",
          "53:     \"\"\"",
          "54:     Escaping characters that cant be included within an XML file.",
          "56:     :param data: The string to escape",
          "57:     :type data: str",
          "58:     :return: The escaped output",
          "59:     :rtype: str",
          "60:     \"\"\"",
          "61:     replacements = {",
          "62:         '<': '&lt;',",
          "63:         '>': '&gt;',",
          "64:         '&': '&amp;',",
          "65:         '\"': '&quot;',",
          "66:         \"'\": '&apos;'",
          "67:     }",
          "68:     return ''.join(replacements.get(c, c) for c in data)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/axml.py||mobsf/StaticAnalyzer/tools/androguard4/axml.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/axml.py -> mobsf/StaticAnalyzer/tools/androguard4/axml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "8: import collections",
          "9: from collections import defaultdict",
          "11: from lxml import etree",
          "15: import logging",
          "17: logger = logging.getLogger(__name__)",
          "18: logger.setLevel(level=logging.CRITICAL)",
          "20: # Constants for ARSC Files",
          "21: # see http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#233",
          "22: RES_NULL_TYPE = 0x0000",
          "",
          "[Removed Lines]",
          "3: from .resources import public",
          "4: from .types import *",
          "6: from struct import pack, unpack",
          "7: from xml.sax.saxutils import escape",
          "12: import re",
          "13: import binascii",
          "14: import io",
          "",
          "[Added Lines]",
          "3: # Androguard4 AXML - Nov 24, 2024 -04a5703b8ba7c181bb9f5f5995a2c16b6f9353cf",
          "4: # Allows type hinting of types not-yet-declared",
          "5: # in Python >= 3.7",
          "6: # see https://peps.python.org/pep-0563/",
          "7: from __future__ import annotations",
          "9: import binascii",
          "11: import io",
          "12: import re",
          "14: from struct import pack, unpack",
          "15: from typing import BinaryIO, Union",
          "16: from xml.sax.saxutils import escape",
          "22: from .resources import public",
          "23: from .types import *",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: RES_XML_START_ELEMENT_TYPE = 0x0102",
          "31: RES_XML_END_ELEMENT_TYPE = 0x0103",
          "32: RES_XML_CDATA_TYPE = 0x0104",
          "35: RES_XML_RESOURCE_MAP_TYPE = 0x0180",
          "",
          "[Removed Lines]",
          "33: RES_XML_LAST_CHUNK_TYPE = 0x017f",
          "",
          "[Added Lines]",
          "43: RES_XML_LAST_CHUNK_TYPE = 0x017F",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:     TYPE_STRING: \"string\",",
          "79: }",
          "82: DIMENSION_UNITS = [\"px\", \"dip\", \"sp\", \"pt\", \"in\", \"mm\"]",
          "83: FRACTION_UNITS = [\"%\", \"%p\"]",
          "",
          "[Removed Lines]",
          "81: RADIX_MULTS = [0.00390625, 3.051758E-005, 1.192093E-007, 4.656613E-010]",
          "",
          "[Added Lines]",
          "91: RADIX_MULTS = [0.00390625, 3.051758e-005, 1.192093e-007, 4.656613e-010]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88: class ResParserError(Exception):",
          "89:     \"\"\"Exception for the parsers\"\"\"",
          "90:     pass",
          "94:     \"\"\"",
          "95:     Convert a complex unit into float",
          "96:     \"\"\"",
          "",
          "[Removed Lines]",
          "93: def complexToFloat(xcomplex):",
          "",
          "[Added Lines]",
          "104: def complexToFloat(xcomplex) -> float:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100: class StringBlock:",
          "101:     \"\"\"",
          "102:     StringBlock is a CHUNK inside an AXML File: `ResStringPool_header`",
          "105:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#436",
          "106:     \"\"\"",
          "109:         \"\"\"",
          "110:         :param buff: buffer which holds the string block",
          "111:         :param header: a instance of :class:`~ARSCHeader`",
          "",
          "[Removed Lines]",
          "103:     It contains all strings, which are used by referecing to ID's",
          "108:     def __init__(self, buff, header):",
          "",
          "[Added Lines]",
          "114:     It contains all strings, which are used by referencing to ID's",
          "119:     def __init__(self, buff: BinaryIO, header: ARSCHeader) -> None:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121:         # flags",
          "122:         self.flags = unpack('<I', buff.read(4))[0]",
          "125:         # string_pool_offset",
          "126:         # The string offset is counted from the beginning of the string section",
          "127:         self.stringsOffset = unpack('<I', buff.read(4))[0]",
          "128:         # check if the stringCount is correct",
          "130:             self.stringCount = int(",
          "133:         # style_pool_offset",
          "134:         # The styles offset is counted as well from the beginning of the string section",
          "",
          "[Removed Lines]",
          "123:         self.m_isUTF8 = ((self.flags & UTF8_FLAG) != 0)",
          "129:         if (self.stringsOffset - (self.styleCount * 4 + 28)) / 4 != self.stringCount:",
          "131:                 (self.stringsOffset - (self.styleCount * 4 + 28)) / 4)",
          "",
          "[Added Lines]",
          "134:         self.m_isUTF8 = (self.flags & UTF8_FLAG) != 0",
          "140:         if (",
          "141:             self.stringsOffset - (self.styleCount * 4 + 28)",
          "142:         ) / 4 != self.stringCount:",
          "144:                 (self.stringsOffset - (self.styleCount * 4 + 28)) / 4",
          "145:             )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "137:         # Check if they supplied a stylesOffset even if the count is 0:",
          "138:         if self.styleCount == 0 and self.stylesOffset > 0:",
          "142:         self.m_stringOffsets = []",
          "143:         self.m_styleOffsets = []",
          "",
          "[Removed Lines]",
          "139:             logger.info(\"Styles Offset given, but styleCount is zero. \"",
          "140:                         \"This is not a problem but could indicate packers.\")",
          "",
          "[Added Lines]",
          "153:             logger.info(",
          "154:                 \"Styles Offset given, but styleCount is zero. \"",
          "155:                 \"This is not a problem but could indicate packers.\"",
          "156:             )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "177:                 self.m_styles.append(unpack('<I', buff.read(4))[0])",
          "179:     def __repr__(self):",
          "182:     def __getitem__(self, idx):",
          "183:         \"\"\"",
          "",
          "[Removed Lines]",
          "180:         return \"<StringPool #strings={}, #styles={}, UTF8={}>\".format(self.stringCount, self.styleCount, self.m_isUTF8)",
          "",
          "[Added Lines]",
          "196:         return \"<StringPool #strings={}, #styles={}, UTF8={}>\".format(",
          "197:             self.stringCount, self.styleCount, self.m_isUTF8",
          "198:         )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "198:         for i in range(self.stringCount):",
          "199:             yield self.getString(i)",
          "202:         \"\"\"",
          "203:         Return the string at the index in the string table",
          "",
          "[Removed Lines]",
          "201:     def getString(self, idx):",
          "",
          "[Added Lines]",
          "219:     def getString(self, idx: int) -> str:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "208:         if idx in self._cache:",
          "209:             return self._cache[idx]",
          "212:             return \"\"",
          "214:         offset = self.m_stringOffsets[idx]",
          "",
          "[Removed Lines]",
          "211:         if idx < 0 or not self.m_stringOffsets or idx > self.stringCount:",
          "",
          "[Added Lines]",
          "229:         if idx < 0 or not self.m_stringOffsets or idx >= self.stringCount:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "221:         return self._cache[idx]",
          "224:         \"\"\"",
          "225:         Return the style associated with the index",
          "",
          "[Removed Lines]",
          "223:     def getStyle(self, idx):",
          "",
          "[Added Lines]",
          "241:     def getStyle(self, idx: int) -> int:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "229:         \"\"\"",
          "230:         return self.m_styles[idx]",
          "233:         \"\"\"",
          "234:         Decode an UTF-8 String at the given offset",
          "",
          "[Removed Lines]",
          "232:     def _decode8(self, offset):",
          "",
          "[Added Lines]",
          "250:     def _decode8(self, offset: int) -> str:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "245:         encoded_bytes, skip = self._decode_length(offset, 1)",
          "246:         offset += skip",
          "248:         data = self.m_charbuff[offset: offset + encoded_bytes]",
          "250:         if self.m_charbuff[offset + encoded_bytes] != 0:",
          "251:             raise ResParserError(",
          "254:         return self._decode_bytes(data, 'utf-8', str_len)",
          "257:         \"\"\"",
          "258:         Decode an UTF-16 String at the given offset",
          "",
          "[Removed Lines]",
          "252:                 \"UTF-8 String is not null terminated! At offset={}\".format(offset))",
          "256:     def _decode16(self, offset):",
          "",
          "[Added Lines]",
          "266:         # Two checks should happen here:",
          "267:         # a) offset + encoded_bytes surpassing the string_pool length and",
          "268:         # b) non-null terminated strings which should be rejected",
          "269:         # platform/frameworks/base/libs/androidfw/ResourceTypes.cpp#789",
          "270:         if len(self.m_charbuff) < (offset + encoded_bytes):",
          "271:             logger.warning(",
          "272:                 f\"String size: {offset + encoded_bytes} is exceeding string pool size. Returning empty string.\"",
          "273:             )",
          "274:             return \"\"",
          "279:                 \"UTF-8 String is not null terminated! At offset={}\".format(",
          "280:                     offset",
          "281:                 )",
          "282:             )",
          "286:     def _decode16(self, offset: int) -> str:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "266:         # The len is the string len in utf-16 units",
          "267:         encoded_bytes = str_len * 2",
          "269:         data = self.m_charbuff[offset: offset + encoded_bytes]",
          "272:             raise ResParserError(",
          "275:         return self._decode_bytes(data, 'utf-16', str_len)",
          "277:     @staticmethod",
          "279:         \"\"\"",
          "280:         Generic decoding with length check.",
          "281:         The string is decoded from bytes with the given encoding, then the length",
          "",
          "[Removed Lines]",
          "271:         if self.m_charbuff[offset + encoded_bytes:offset + encoded_bytes + 2] != b\"\\x00\\x00\":",
          "273:                 \"UTF-16 String is not null terminated! At offset={}\".format(offset))",
          "278:     def _decode_bytes(data, encoding, str_len):",
          "",
          "[Added Lines]",
          "299:         # Two checks should happen here:",
          "300:         # a) offset + encoded_bytes surpassing the string_pool length and",
          "301:         # b) non-null terminated strings which should be rejected",
          "302:         # platform/frameworks/base/libs/androidfw/ResourceTypes.cpp#789",
          "303:         if len(self.m_charbuff) < (offset + encoded_bytes):",
          "304:             logger.warning(",
          "305:                 f\"String size: {offset + encoded_bytes} is exceeding string pool size. Returning empty string.\"",
          "306:             )",
          "307:             return \"\"",
          "311:         if (",
          "312:             self.m_charbuff[",
          "313:                 offset + encoded_bytes: offset + encoded_bytes + 2",
          "314:             ]",
          "315:             != b\"\\x00\\x00\"",
          "316:         ):",
          "318:                 \"UTF-16 String is not null terminated! At offset={}\".format(",
          "319:                     offset",
          "320:                 )",
          "321:             )",
          "326:     def _decode_bytes(data: bytes, encoding: str, str_len: int) -> str:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "292:             logger.warning(\"invalid decoded string length\")",
          "293:         return string",
          "296:         \"\"\"",
          "297:         Generic Length Decoding at offset of string",
          "",
          "[Removed Lines]",
          "295:     def _decode_length(self, offset, sizeof_char):",
          "",
          "[Added Lines]",
          "343:     def _decode_length(self, offset: int, sizeof_char: int) -> tuple[int, int]:",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "312:         fmt = \"<2{}\".format('B' if sizeof_char == 1 else 'H')",
          "313:         highbit = 0x80 << (8 * (sizeof_char - 1))",
          "317:         if (length1 & highbit) != 0:",
          "318:             length = ((length1 & ~highbit) << (8 * sizeof_char)) | length2",
          "",
          "[Removed Lines]",
          "315:         length1, length2 = unpack(fmt, self.m_charbuff[offset:(offset + sizeof_2chars)])",
          "",
          "[Added Lines]",
          "363:         length1, length2 = unpack(",
          "364:             fmt, self.m_charbuff[offset: (offset + sizeof_2chars)]",
          "365:         )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "324:         # These are true asserts, as the size should never be less than the values",
          "325:         if sizeof_char == 1:",
          "328:         else:",
          "332:         return length, size",
          "335:         \"\"\"",
          "336:         Print some information on stdout about the string table",
          "337:         \"\"\"",
          "349:         if self.stringCount > 0:",
          "350:             print()",
          "",
          "[Removed Lines]",
          "326:             assert length <= 0x7FFF, \"length of UTF-8 string is too large! At offset={}\".format(",
          "327:                 offset)",
          "329:             assert length <= 0x7FFFFFFF, \"length of UTF-16 string is too large!  At offset={}\".format(",
          "330:                 offset)",
          "334:     def show(self):",
          "338:         print(\"StringBlock(stringsCount=0x%x, \"",
          "339:               \"stringsOffset=0x%x, \"",
          "340:               \"stylesCount=0x%x, \"",
          "341:               \"stylesOffset=0x%x, \"",
          "342:               \"flags=0x%x\"",
          "343:               \")\" % (self.stringCount,",
          "344:                      self.stringsOffset,",
          "345:                      self.styleCount,",
          "346:                      self.stylesOffset,",
          "347:                      self.flags))",
          "",
          "[Added Lines]",
          "376:             assert (",
          "377:                 length <= 0x7FFF",
          "378:             ), \"length of UTF-8 string is too large! At offset={}\".format(",
          "379:                 offset",
          "380:             )",
          "382:             assert (",
          "383:                 length <= 0x7FFFFFFF",
          "384:             ), \"length of UTF-16 string is too large!  At offset={}\".format(",
          "385:                 offset",
          "386:             )",
          "390:     def show(self) -> None:",
          "394:         print(",
          "395:             \"StringBlock(stringsCount=0x%x, \"",
          "396:             \"stringsOffset=0x%x, \"",
          "397:             \"stylesCount=0x%x, \"",
          "398:             \"stylesOffset=0x%x, \"",
          "399:             \"flags=0x%x\"",
          "400:             \")\"",
          "401:             % (",
          "402:                 self.stringCount,",
          "403:                 self.stringsOffset,",
          "404:                 self.styleCount,",
          "405:                 self.stylesOffset,",
          "406:                 self.flags,",
          "407:             )",
          "408:         )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "383:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#563",
          "384:     \"\"\"",
          "387:         logger.debug(\"AXMLParser\")",
          "389:         self._reset()",
          "",
          "[Removed Lines]",
          "386:     def __init__(self, raw_buff):",
          "",
          "[Added Lines]",
          "447:     def __init__(self, raw_buff: bytes) -> None:",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "392:         self.axml_tampered = False",
          "393:         self.buff = io.BufferedReader(io.BytesIO(raw_buff))",
          "394:         self.buff_size = self.buff.raw.getbuffer().nbytes",
          "396:         # Minimum is a single ARSCHeader, which would be a strange edge case...",
          "397:         if self.buff_size < 8:",
          "398:             logger.error(",
          "400:             self._valid = False",
          "401:             return",
          "",
          "[Removed Lines]",
          "399:                 \"Filesize is too small to be a valid AXML file! Filesize: {}\".format(self.buff_size))",
          "",
          "[Added Lines]",
          "456:         self.packerwarning = False",
          "461:                 \"Filesize is too small to be a valid AXML file! Filesize: {}\".format(",
          "462:                     self.buff_size",
          "463:                 )",
          "464:             )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "404:         # But this is not possible as the maximum chunk size is a unsigned 4 byte int.",
          "405:         if self.buff_size > 0xFFFFFFFF:",
          "406:             logger.error(",
          "408:             self._valid = False",
          "409:             return",
          "",
          "[Removed Lines]",
          "407:                 \"Filesize is too large to be a valid AXML file! Filesize: {}\".format(self.buff_size))",
          "",
          "[Added Lines]",
          "472:                 \"Filesize is too large to be a valid AXML file! Filesize: {}\".format(",
          "473:                     self.buff_size",
          "474:                 )",
          "475:             )",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "422:             # Can be a common error: the file is not an AXML but a plain XML",
          "423:             # The file will then usually start with '<?xm' / '3C 3F 78 6D'",
          "424:             logger.warning(",
          "427:         if axml_header.header_size != 8:",
          "430:             self._valid = False",
          "431:             return",
          "433:         if self.filesize > self.buff_size:",
          "436:             self._valid = False",
          "437:             return",
          "439:         if self.filesize < self.buff_size:",
          "440:             # The file can still be parsed up to the point where the chunk should end.",
          "441:             self.axml_tampered = True",
          "445:         # Not that severe of an error, we have plenty files where this is not",
          "446:         # set correctly",
          "447:         if axml_header.type != RES_XML_TYPE:",
          "448:             self.axml_tampered = True",
          "453:         # Now we parse the STRING POOL",
          "454:         try:",
          "455:             header = ARSCHeader(self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "456:             logger.debug(\"STRING_POOL {}\".format(header))",
          "457:         except ResParserError as e:",
          "459:             self._valid = False",
          "460:             return",
          "462:         if header.header_size != 0x1C:",
          "465:             self._valid = False",
          "466:             return",
          "",
          "[Removed Lines]",
          "425:                 \"Header size is 28024! Are you trying to parse a plain XML file?\")",
          "428:             logger.error(\"This does not look like an AXML file. header size does not equal 8! header size = {}\".format(",
          "429:                 axml_header.header_size))",
          "434:             logger.error(\"This does not look like an AXML file. Declared filesize does not match real size: {} vs {}\".format(",
          "435:                 self.filesize, self.buff_size))",
          "442:             logger.warning(\"Declared filesize ({}) is smaller than total file size ({}). \"",
          "443:                            \"Was something appended to the file? Trying to parse it anyways.\".format(self.filesize, self.buff.size()))",
          "449:             logger.warning(\"AXML file has an unusual resource type! \"",
          "450:                            \"Malware likes to to such stuff to anti androguard! \"",
          "451:                            \"But we try to parse it anyways. Resource Type: 0x{:04x}\".format(axml_header.type))",
          "458:             logger.error(\"Error parsing resource header of string pool: {}\".format(e))",
          "463:             logger.error(\"This does not look like an AXML file. String chunk header size does not equal 28! header size = {}\".format(",
          "464:                 header.header_size))",
          "",
          "[Added Lines]",
          "493:                 \"Header size is 28024! Are you trying to parse a plain XML file?\"",
          "494:             )",
          "497:             logger.error(",
          "498:                 \"This does not look like an AXML file. header size does not equal 8! header size = {}\".format(",
          "499:                     axml_header.header_size",
          "500:                 )",
          "501:             )",
          "506:             logger.error(",
          "507:                 \"This does not look like an AXML file. Declared filesize does not match real size: {} vs {}\".format(",
          "508:                     self.filesize, self.buff_size",
          "509:                 )",
          "510:             )",
          "517:             logger.warning(",
          "518:                 \"Declared filesize ({}) is smaller than total file size ({}). \"",
          "519:                 \"Was something appended to the file? Trying to parse it anyways.\".format(",
          "520:                     self.filesize, self.buff_size",
          "521:                 )",
          "522:             )",
          "528:             logger.warning(",
          "529:                 \"AXML file has an unusual resource type! \"",
          "530:                 \"Malware likes to to such stuff to anti androguard! \"",
          "531:                 \"But we try to parse it anyways. Resource Type: 0x{:04x}\".format(",
          "532:                     axml_header.type",
          "533:                 )",
          "534:             )",
          "541:             logger.error(",
          "542:                 \"Error parsing resource header of string pool: {}\".format(e)",
          "543:             )",
          "548:             logger.error(",
          "549:                 \"This does not look like an AXML file. String chunk header size does not equal 28! header size = {}\".format(",
          "550:                     header.header_size",
          "551:                 )",
          "552:             )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "475:         # Store a list of prefix/uri mappings encountered",
          "476:         self.namespaces = []",
          "479:         \"\"\"",
          "480:         Get the state of the AXMLPrinter.",
          "481:         if an error happend somewhere in the process of parsing the file,",
          "",
          "[Removed Lines]",
          "478:     def is_valid(self):",
          "",
          "[Added Lines]",
          "566:     def is_valid(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "528:                 # Check size: < 8 bytes mean that the chunk is not complete",
          "529:                 # Should be aligned to 4 bytes.",
          "530:                 if h.size < 8 or (h.size % 4) != 0:",
          "532:                     self._valid = False",
          "533:                     return",
          "535:                 for i in range((h.size - h.header_size) // 4):",
          "538:                 continue",
          "540:             # Parse now the XML chunks.",
          "541:             # unknown chunk types might cause problems, but we can skip them!",
          "543:                 # h.size is the size of the whole chunk including the header.",
          "544:                 # We read already 8 bytes of the header, thus we need to",
          "545:                 # subtract them.",
          "546:                 logger.error(",
          "548:                 self.buff.seek(h.end)",
          "549:                 continue",
          "551:             # Check that we read a correct header",
          "552:             if h.header_size != 0x10:",
          "555:                 self.buff.seek(h.end)",
          "556:                 continue",
          "558:             # Line Number of the source file, only used as meta information",
          "561:             # Comment_Index (usually 0xFFFFFFFF)",
          "568:             if h.type == RES_XML_START_NAMESPACE_TYPE:",
          "572:                 s_prefix = self.sb[prefix]",
          "573:                 s_uri = self.sb[uri]",
          "575:                 logger.debug(",
          "578:                 if s_uri == '':",
          "582:                 if (prefix, uri) in self.namespaces:",
          "585:                 self.namespaces.append((prefix, uri))",
          "587:                 # We can continue with the next chunk, as we store the namespace",
          "",
          "[Removed Lines]",
          "531:                     logger.error(\"Invalid chunk size in chunk XML_RESOURCE_MAP\")",
          "536:                     self.m_resourceIDs.append(unpack('<L', self.buff.read(4))[0])",
          "542:             if h.type < RES_XML_FIRST_CHUNK_TYPE or h.type > RES_XML_LAST_CHUNK_TYPE:",
          "547:                     \"Not a XML resource chunk type: 0x{:04x}. Skipping {} bytes\".format(h.type, h.size))",
          "553:                 logger.error(\"XML Resource Type Chunk header size does not match 16! \"",
          "554:                              \"At chunk type 0x{:04x}, declared header size=0x{:04x}, chunk size=0x{:04x}\".format(h.type, h.header_size, h.size))",
          "559:             self.m_lineNumber, = unpack('<L', self.buff.read(4))",
          "562:             self.m_comment_index, = unpack('<L', self.buff.read(4))",
          "564:             if self.m_comment_index != 0xFFFFFFFF and h.type in [RES_XML_START_NAMESPACE_TYPE, RES_XML_END_NAMESPACE_TYPE]:",
          "565:                 logger.warning(\"Unhandled Comment at namespace chunk: '{}'\".format(",
          "566:                     self.sb[self.m_comment_index]))",
          "569:                 prefix, = unpack('<L', self.buff.read(4))",
          "570:                 uri, = unpack('<L', self.buff.read(4))",
          "576:                     \"Start of Namespace mapping: prefix {}: '{}' --> uri {}: '{}'\".format(prefix, s_prefix, uri, s_uri))",
          "579:                     logger.warning(\"Namespace prefix '{}' resolves to empty URI. \"",
          "580:                                    \"This might be a packer.\".format(s_prefix))",
          "583:                     logger.debug(\"Namespace mapping ({}, {}) already seen! \"",
          "584:                                  \"This is usually not a problem but could indicate packers or broken AXML compilers.\".format(prefix, uri))",
          "",
          "[Added Lines]",
          "619:                     logger.error(",
          "620:                         \"Invalid chunk size in chunk XML_RESOURCE_MAP\"",
          "621:                     )",
          "626:                     self.m_resourceIDs.append(",
          "627:                         unpack('<L', self.buff.read(4))[0]",
          "628:                     )",
          "634:             if (",
          "635:                 h.type < RES_XML_FIRST_CHUNK_TYPE",
          "636:                 or h.type > RES_XML_LAST_CHUNK_TYPE",
          "637:             ):",
          "642:                     \"Not a XML resource chunk type: 0x{:04x}. Skipping {} bytes\".format(",
          "643:                         h.type, h.size",
          "644:                     )",
          "645:                 )",
          "651:                 logger.error(",
          "652:                     \"XML Resource Type Chunk header size does not match 16! \"",
          "653:                     \"At chunk type 0x{:04x}, declared header size=0x{:04x}, chunk size=0x{:04x}\".format(",
          "654:                         h.type, h.header_size, h.size",
          "655:                     )",
          "656:                 )",
          "661:             (self.m_lineNumber,) = unpack('<L', self.buff.read(4))",
          "664:             (self.m_comment_index,) = unpack('<L', self.buff.read(4))",
          "666:             if self.m_comment_index != 0xFFFFFFFF and h.type in [",
          "667:                 RES_XML_START_NAMESPACE_TYPE,",
          "668:                 RES_XML_END_NAMESPACE_TYPE,",
          "669:             ]:",
          "670:                 logger.warning(",
          "671:                     \"Unhandled Comment at namespace chunk: '{}'\".format(",
          "672:                         self.sb[self.m_comment_index]",
          "673:                     )",
          "674:                 )",
          "677:                 (prefix,) = unpack('<L', self.buff.read(4))",
          "678:                 (uri,) = unpack('<L', self.buff.read(4))",
          "684:                     \"Start of Namespace mapping: prefix {}: '{}' --> uri {}: '{}'\".format(",
          "685:                         prefix, s_prefix, uri, s_uri",
          "686:                     )",
          "687:                 )",
          "690:                     logger.warning(",
          "691:                         \"Namespace prefix '{}' resolves to empty URI. \"",
          "692:                         \"This might be a packer.\".format(s_prefix)",
          "693:                     )",
          "696:                     logger.debug(",
          "697:                         \"Namespace mapping ({}, {}) already seen! \"",
          "698:                         \"This is usually not a problem but could indicate packers or broken AXML compilers.\".format(",
          "699:                             prefix, uri",
          "700:                         )",
          "701:                     )",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "591:             if h.type == RES_XML_END_NAMESPACE_TYPE:",
          "592:                 # END_PREFIX contains again prefix and uri field",
          "596:                 # We remove the last namespace mapping matching",
          "597:                 if (prefix, uri) in self.namespaces:",
          "598:                     self.namespaces.remove((prefix, uri))",
          "599:                 else:",
          "603:                 # We can continue with the next chunk, as we store the namespace",
          "604:                 # mappings for each tag",
          "",
          "[Removed Lines]",
          "593:                 prefix, = unpack('<L', self.buff.read(4))",
          "594:                 uri, = unpack('<L', self.buff.read(4))",
          "600:                     logger.warning(\"Reached a NAMESPACE_END without having the namespace stored before? \"",
          "601:                                    \"Prefix ID: {}, URI ID: {}\".format(prefix, uri))",
          "",
          "[Added Lines]",
          "710:                 (prefix,) = unpack('<L', self.buff.read(4))",
          "711:                 (uri,) = unpack('<L', self.buff.read(4))",
          "717:                     logger.warning(",
          "718:                         \"Reached a NAMESPACE_END without having the namespace stored before? \"",
          "719:                         \"Prefix ID: {}, URI ID: {}\".format(prefix, uri)",
          "720:                     )",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "616:                 # After that, there are two lists of attributes, 20 bytes each",
          "618:                 # Namespace URI (String ID)",
          "620:                 # Name of the Tag (String ID)",
          "622:                 self.at_start, self.at_size = unpack('<HH', self.buff.read(4))",
          "623:                 # Attribute Count",
          "625:                 # Class Attribute",
          "628:                 self.m_idAttribute = (attributeCount >> 16) - 1",
          "629:                 self.m_attribute_count = attributeCount & 0xFFFF",
          "",
          "[Removed Lines]",
          "619:                 self.m_namespaceUri, = unpack('<L', self.buff.read(4))",
          "621:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "624:                 attributeCount, = unpack('<L', self.buff.read(4))",
          "626:                 self.m_classAttribute, = unpack('<L', self.buff.read(4))",
          "",
          "[Added Lines]",
          "738:                 (self.m_namespaceUri,) = unpack('<L', self.buff.read(4))",
          "740:                 (self.m_name,) = unpack('<L', self.buff.read(4))",
          "743:                 (attributeCount,) = unpack('<L', self.buff.read(4))",
          "745:                 (self.m_classAttribute,) = unpack('<L', self.buff.read(4))",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "641:                     # * Type",
          "642:                     # * Data",
          "643:                     for j in range(0, ATTRIBUTE_LENGTH):",
          "645:                     if self.at_size != 20:",
          "646:                         self.buff.read(self.at_size - 20)",
          "648:                 # Then there are class_attributes",
          "650:                     self.m_attributes[i] = self.m_attributes[i] >> 24",
          "652:                 self.m_event = START_TAG",
          "653:                 break",
          "655:             if h.type == RES_XML_END_ELEMENT_TYPE:",
          "659:                 self.m_event = END_TAG",
          "660:                 break",
          "",
          "[Removed Lines]",
          "644:                         self.m_attributes.append(unpack('<L', self.buff.read(4))[0])",
          "649:                 for i in range(ATTRIBUTE_IX_VALUE_TYPE, len(self.m_attributes), ATTRIBUTE_LENGTH):",
          "656:                 self.m_namespaceUri, = unpack('<L', self.buff.read(4))",
          "657:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "",
          "[Added Lines]",
          "763:                         self.m_attributes.append(",
          "764:                             unpack('<L', self.buff.read(4))[0]",
          "765:                         )",
          "770:                 for i in range(",
          "771:                     ATTRIBUTE_IX_VALUE_TYPE,",
          "772:                     len(self.m_attributes),",
          "773:                     ATTRIBUTE_LENGTH,",
          "774:                 ):",
          "781:                 (self.m_namespaceUri,) = unpack('<L', self.buff.read(4))",
          "782:                 (self.m_name,) = unpack('<L', self.buff.read(4))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "666:                 # usually, this typed value is set to UNDEFINED",
          "668:                 # ResStringPool_ref data --> uint32_t index",
          "671:                 # Res_value typedData:",
          "672:                 # uint16_t size",
          "",
          "[Removed Lines]",
          "669:                 self.m_name, = unpack('<L', self.buff.read(4))",
          "",
          "[Added Lines]",
          "794:                 (self.m_name,) = unpack('<L', self.buff.read(4))",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "676:                 # For now, we ingore these values",
          "677:                 size, res0, dataType, data = unpack(\"<HBBL\", self.buff.read(8))",
          "686:                 self.m_event = TEXT",
          "687:                 break",
          "689:             # Still here? Looks like we read an unknown XML header, try to skip it...",
          "690:             logger.warning(",
          "692:             self.buff.seek(h.end)",
          "694:     @property",
          "696:         \"\"\"",
          "698:         \"\"\"",
          "700:             return ''",
          "702:         return self.sb[self.m_name]",
          "704:     @property",
          "706:         \"\"\"",
          "707:         Return the comment at the current position or None if no comment is given",
          "",
          "[Removed Lines]",
          "679:                 logger.debug(\"found a CDATA Chunk: \"",
          "680:                              \"index={: 6d}, size={: 4d}, res0={: 4d}, dataType={: 4d}, data={: 4d}\".format(self.m_name,",
          "681:                                                                                                            size,",
          "682:                                                                                                            res0,",
          "683:                                                                                                            dataType,",
          "684:                                                                                                            data))",
          "691:                 \"Unknown XML Chunk: 0x{:04x}, skipping {} bytes.\".format(h.type, h.size))",
          "695:     def name(self):",
          "697:         Return the String assosciated with the tag name",
          "699:         if self.m_name == -1 or (self.m_event != START_TAG and self.m_event != END_TAG):",
          "705:     def comment(self):",
          "",
          "[Added Lines]",
          "804:                 logger.debug(",
          "805:                     \"found a CDATA Chunk: \"",
          "806:                     \"index={: 6d}, size={: 4d}, res0={: 4d}, dataType={: 4d}, data={: 4d}\".format(",
          "807:                         self.m_name, size, res0, dataType, data",
          "808:                     )",
          "809:                 )",
          "816:                 \"Unknown XML Chunk: 0x{:04x}, skipping {} bytes.\".format(",
          "817:                     h.type, h.size",
          "818:                 )",
          "819:             )",
          "823:     def name(self) -> str:",
          "825:         Return the String associated with the tag name",
          "827:         if self.m_name == -1 or (",
          "828:             self.m_event != START_TAG and self.m_event != END_TAG",
          "829:         ):",
          "835:     def comment(self) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "715:         return self.sb[self.m_comment_index]",
          "717:     @property",
          "719:         \"\"\"",
          "720:         Return the Namespace URI (if any) as a String for the current tag",
          "721:         \"\"\"",
          "723:             return ''",
          "725:         # No Namespace",
          "",
          "[Removed Lines]",
          "718:     def namespace(self):",
          "722:         if self.m_name == -1 or (self.m_event != START_TAG and self.m_event != END_TAG):",
          "",
          "[Added Lines]",
          "848:     def namespace(self) -> str:",
          "852:         if self.m_name == -1 or (",
          "853:             self.m_event != START_TAG and self.m_event != END_TAG",
          "854:         ):",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "729:         return self.sb[self.m_namespaceUri]",
          "731:     @property",
          "733:         \"\"\"",
          "734:         Returns the current namespace mapping as a dictionary",
          "",
          "[Removed Lines]",
          "732:     def nsmap(self):",
          "",
          "[Added Lines]",
          "864:     def nsmap(self) -> dict[str, str]:",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "750:             # Solve 2) & 4) by not including",
          "751:             if s_uri != \"\" and s_prefix != \"\":",
          "752:                 # solve 1) by using the last one in the list",
          "755:         return NSMAP",
          "757:     @property",
          "759:         \"\"\"",
          "760:         Return the String assosicated with the current text",
          "761:         \"\"\"",
          "",
          "[Removed Lines]",
          "753:                 NSMAP[s_prefix] = s_uri",
          "758:     def text(self):",
          "",
          "[Added Lines]",
          "885:                 NSMAP[s_prefix] = s_uri.strip()",
          "890:     def text(self) -> str:",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "765:         return self.sb[self.m_name]",
          "768:         \"\"\"",
          "769:         Legacy only!",
          "770:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.name` instead",
          "771:         \"\"\"",
          "772:         return self.name",
          "775:         \"\"\"",
          "776:         Legacy only!",
          "777:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.text` instead",
          "778:         \"\"\"",
          "779:         return self.text",
          "782:         \"\"\"",
          "783:         Legacy only!",
          "784:         use :py:attr:`~androguard.core.bytecodes.AXMLParser.namespace` instead",
          "",
          "[Removed Lines]",
          "767:     def getName(self):",
          "774:     def getText(self):",
          "781:     def getPrefix(self):",
          "",
          "[Added Lines]",
          "899:     def getName(self) -> str:",
          "906:     def getText(self) -> str:",
          "913:     def getPrefix(self) -> str:",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "799:         return offset",
          "802:         \"\"\"",
          "803:         Return the number of Attributes for a Tag",
          "804:         or -1 if not in a tag",
          "",
          "[Removed Lines]",
          "801:     def getAttributeCount(self):",
          "",
          "[Added Lines]",
          "933:     def getAttributeCount(self) -> int:",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "809:         return self.m_attribute_count",
          "812:         \"\"\"",
          "813:         Returns the numeric ID for the namespace URI of an attribute",
          "814:         \"\"\"",
          "",
          "[Removed Lines]",
          "811:     def getAttributeUri(self, index):",
          "",
          "[Added Lines]",
          "943:     def getAttributeUri(self, index: int):",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "820:         return uri",
          "823:         \"\"\"",
          "824:         Return the Namespace URI (if any) for the attribute",
          "825:         \"\"\"",
          "",
          "[Removed Lines]",
          "822:     def getAttributeNamespace(self, index):",
          "",
          "[Added Lines]",
          "954:     def getAttributeNamespace(self, index: int):",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "834:         return self.sb[uri]",
          "837:         \"\"\"",
          "838:         Returns the String which represents the attribute name",
          "839:         \"\"\"",
          "",
          "[Removed Lines]",
          "836:     def getAttributeName(self, index):",
          "",
          "[Added Lines]",
          "968:     def getAttributeName(self, index: int):",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "844:         res = self.sb[name]",
          "845:         # If the result is a (null) string, we need to look it up.",
          "847:             attr = self.m_resourceIDs[name]",
          "848:             if attr in public.SYSTEM_RESOURCES['attributes']['inverse']:",
          "855:         return res",
          "858:         \"\"\"",
          "859:         Return the type of the attribute at the given index",
          "",
          "[Removed Lines]",
          "846:         if not res or res == \":\":",
          "849:                 res = 'android:' + \\",
          "850:                     public.SYSTEM_RESOURCES['attributes']['inverse'][attr]",
          "851:             else:",
          "852:                 # Attach the HEX Number, so for multiple missing attributes we do not run",
          "853:                 # into problems.",
          "854:                 res = 'android:UNKNOWN_SYSTEM_ATTRIBUTE_{:08x}'.format(attr)",
          "857:     def getAttributeValueType(self, index):",
          "",
          "[Added Lines]",
          "978:         if name < len(self.m_resourceIDs):",
          "981:                 res = public.SYSTEM_RESOURCES['attributes']['inverse'][",
          "982:                     attr",
          "983:                 ].replace(\"_\", \":\")",
          "984:                 if res != self.sb[name]:",
          "985:                     self.packerwarning = True",
          "987:         if not res or res == \":\":",
          "988:             # Attach the HEX Number, so for multiple missing attributes we do not run",
          "989:             # into problems.",
          "990:             res = 'android:UNKNOWN_SYSTEM_ATTRIBUTE_{:08x}'.format(attr)",
          "993:     def getAttributeValueType(self, index: int):",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "865:         offset = self._get_attribute_offset(index)",
          "866:         return self.m_attributes[offset + ATTRIBUTE_IX_VALUE_TYPE]",
          "869:         \"\"\"",
          "870:         Return the data of the attribute at the given index",
          "",
          "[Removed Lines]",
          "868:     def getAttributeValueData(self, index):",
          "",
          "[Added Lines]",
          "1004:     def getAttributeValueData(self, index: int):",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "895:         return ''",
          "899:     \"\"\"",
          "900:     Format a value based on type and data.",
          "901:     By default, no strings are looked up and \"<string>\" is returned.",
          "",
          "[Removed Lines]",
          "898: def format_value(_type, _data, lookup_string=lambda ix: \"<string>\"):",
          "",
          "[Added Lines]",
          "1034: def format_value(",
          "1035:     _type: int, _data: int, lookup_string=lambda ix: \"<string>\"",
          "1036: ) -> str:",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "935:         return \"true\"",
          "937:     elif _type == TYPE_DIMENSION:",
          "940:     elif _type == TYPE_FRACTION:",
          "943:     elif TYPE_FIRST_COLOR_INT <= _type <= TYPE_LAST_COLOR_INT:",
          "944:         return \"#%08X\" % _data",
          "",
          "[Removed Lines]",
          "938:         return \"{:f}{}\".format(complexToFloat(_data), DIMENSION_UNITS[_data & COMPLEX_UNIT_MASK])",
          "941:         return \"{:f}{}\".format(complexToFloat(_data) * 100, FRACTION_UNITS[_data & COMPLEX_UNIT_MASK])",
          "",
          "[Added Lines]",
          "1076:         return \"{:f}{}\".format(",
          "1077:             complexToFloat(_data), DIMENSION_UNITS[_data & COMPLEX_UNIT_MASK]",
          "1078:         )",
          "1081:         return \"{:f}{}\".format(",
          "1082:             complexToFloat(_data) * 100,",
          "1083:             FRACTION_UNITS[_data & COMPLEX_UNIT_MASK],",
          "1084:         )",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "957:     A Reference Implementation can be found at http://androidxref.com/9.0.0_r3/xref/frameworks/base/tools/aapt/XMLNode.cpp",
          "958:     \"\"\"",
          "959:     __charrange = None",
          "960:     __replacement = None",
          "963:         logger.debug(\"AXMLPrinter\")",
          "965:         self.axml = AXMLParser(raw_buff)",
          "",
          "[Removed Lines]",
          "962:     def __init__(self, raw_buff):",
          "",
          "[Added Lines]",
          "1106:     def __init__(self, raw_buff: bytes) -> bytes:",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "973:             logger.debug(\"DEBUG ARSC TYPE {}\".format(_type))",
          "975:             if _type == START_TAG:",
          "976:                 uri = self._print_namespace(self.axml.namespace)",
          "977:                 uri, name = self._fix_name(uri, self.axml.name)",
          "978:                 tag = \"{}{}\".format(uri, name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:                 if not self.axml.name:  # Check if the name is empty",
          "1121:                     logger.debug(\"Empty tag name, skipping to next element\")",
          "1122:                     continue  # Skip this iteration",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "981:                 if comment:",
          "982:                     if self.root is None:",
          "983:                         logger.warning(",
          "985:                     else:",
          "986:                         cur[-1].append(etree.Comment(comment))",
          "992:                 for i in range(self.axml.getAttributeCount()):",
          "995:                     value = self._fix_value(self._get_attribute_value(i))",
          "999:                     if \"{}{}\".format(uri, name) in elem.attrib:",
          "1000:                         logger.warning(",
          "1002:                     elem.set(\"{}{}\".format(uri, name), value)",
          "1004:                 if self.root is None:",
          "",
          "[Removed Lines]",
          "984:                             \"Can not attach comment with content '{}' without root!\".format(comment))",
          "988:                 logger.debug(\"START_TAG: {} (line={})\".format(",
          "989:                     tag, self.axml.m_lineNumber))",
          "990:                 elem = etree.Element(tag, nsmap=self.axml.nsmap)",
          "993:                     uri = self._print_namespace(self.axml.getAttributeNamespace(i))",
          "994:                     uri, name = self._fix_name(uri, self.axml.getAttributeName(i))",
          "997:                     logger.debug(\"found an attribute: {}{}='{}'\".format(",
          "998:                         uri, name, value.encode(\"utf-8\")))",
          "1001:                             \"Duplicate attribute '{}{}'! Will overwrite!\".format(uri, name))",
          "",
          "[Added Lines]",
          "1131:                             \"Can not attach comment with content '{}' without root!\".format(",
          "1132:                                 comment",
          "1133:                             )",
          "1134:                         )",
          "1138:                 logger.debug(",
          "1139:                     \"START_TAG: {} (line={})\".format(",
          "1140:                         tag, self.axml.m_lineNumber",
          "1141:                     )",
          "1142:                 )",
          "1144:                 try:",
          "1145:                     elem = etree.Element(tag, nsmap=self.axml.nsmap)",
          "1146:                 except ValueError as e:",
          "1147:                     logger.error(e)",
          "1148:                     # nsmap= {'<!--': 'http://schemas.android.com/apk/res/android'} | pull/1056",
          "1149:                     if 'Invalid namespace prefix' in str(e):",
          "1150:                         corrected_nsmap = self.clean_and_replace_nsmap(",
          "1151:                             self.axml.nsmap, str(e).split(\"'\")[1]",
          "1152:                         )",
          "1153:                         elem = etree.Element(tag, nsmap=corrected_nsmap)",
          "1154:                     else:",
          "1155:                         raise",
          "1158:                     uri = self._print_namespace(",
          "1159:                         self.axml.getAttributeNamespace(i)",
          "1160:                     )",
          "1161:                     uri, name = self._fix_name(",
          "1162:                         uri, self.axml.getAttributeName(i)",
          "1163:                     )",
          "1166:                     logger.debug(",
          "1167:                         \"found an attribute: {}{}='{}'\".format(",
          "1168:                             uri, name, value.encode(\"utf-8\")",
          "1169:                         )",
          "1170:                     )",
          "1173:                             \"Duplicate attribute '{}{}'! Will overwrite!\".format(",
          "1174:                                 uri, name",
          "1175:                             )",
          "1176:                         )",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1007:                     if not cur:",
          "1008:                         # looks like we lost the root?",
          "1009:                         logger.error(",
          "1011:                         break",
          "1012:                     cur[-1].append(elem)",
          "1013:                 cur.append(elem)",
          "",
          "[Removed Lines]",
          "1010:                             \"No more elements available to attach to! Is the XML malformed?\")",
          "",
          "[Added Lines]",
          "1185:                             \"No more elements available to attach to! Is the XML malformed?\"",
          "1186:                         )",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1015:             if _type == END_TAG:",
          "1016:                 if not cur:",
          "1017:                     logger.warning(",
          "1020:                 name = self.axml.name",
          "1021:                 uri = self._print_namespace(self.axml.namespace)",
          "1022:                 tag = \"{}{}\".format(uri, name)",
          "1023:                 if cur[-1].tag != tag:",
          "1026:                 cur.pop()",
          "1027:             if _type == TEXT:",
          "1028:                 logger.debug(\"TEXT for {}\".format(cur[-1]))",
          "",
          "[Removed Lines]",
          "1018:                         \"Too many END_TAG! No more elements available to attach to!\")",
          "1024:                     logger.warning(\"Closing tag '{}' does not match current stack! At line number: {}. Is the XML malformed?\".format(",
          "1025:                         self.axml.name, self.axml.m_lineNumber))",
          "",
          "[Added Lines]",
          "1194:                         \"Too many END_TAG! No more elements available to attach to!\"",
          "1195:                     )",
          "1196:                 else:",
          "1197:                     if not self.axml.name:  # Check if the name is empty",
          "1198:                         logger.debug(",
          "1199:                             \"Empty tag name at END_TAG, skipping to next element\"",
          "1200:                         )",
          "1201:                         continue",
          "1207:                     logger.warning(",
          "1208:                         \"Closing tag '{}' does not match current stack! At line number: {}. Is the XML malformed?\".format(",
          "1209:                             self.axml.name, self.axml.m_lineNumber",
          "1210:                         )",
          "1211:                     )",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1031:                 # Check if all namespace mappings are closed",
          "1032:                 if len(self.axml.namespaces) > 0:",
          "1033:                     logger.warning(",
          "1035:                 break",
          "1038:         \"\"\"",
          "1039:         Returns the raw XML file without prettification applied.",
          "",
          "[Removed Lines]",
          "1034:                         \"Not all namespace mappings were closed! Malformed AXML?\")",
          "1037:     def get_buff(self):",
          "",
          "[Added Lines]",
          "1220:                         \"Not all namespace mappings were closed! Malformed AXML?\"",
          "1221:                     )",
          "1224:     def clean_and_replace_nsmap(self, nsmap, invalid_prefix):",
          "1225:         correct_prefix = 'android'",
          "1226:         corrected_nsmap = {}",
          "1227:         for prefix, uri in nsmap.items():",
          "1228:             if prefix.startswith(invalid_prefix):",
          "1229:                 corrected_nsmap[correct_prefix] = uri",
          "1230:             else:",
          "1231:                 corrected_nsmap[prefix] = uri",
          "1232:         return corrected_nsmap",
          "1234:     def get_buff(self) -> bytes:",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1042:         \"\"\"",
          "1043:         return self.get_xml(pretty=False)",
          "1046:         \"\"\"",
          "1047:         Get the XML as an UTF-8 string",
          "",
          "[Removed Lines]",
          "1045:     def get_xml(self, pretty=True):",
          "",
          "[Added Lines]",
          "1242:     def get_xml(self, pretty: bool = True) -> bytes:",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1050:         \"\"\"",
          "1051:         return etree.tostring(self.root, encoding=\"utf-8\", pretty_print=pretty)",
          "1054:         \"\"\"",
          "1055:         Get the XML as an ElementTree object",
          "",
          "[Removed Lines]",
          "1053:     def get_xml_obj(self):",
          "",
          "[Added Lines]",
          "1250:     def get_xml_obj(self) -> etree.Element:",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1058:         \"\"\"",
          "1059:         return self.root",
          "1062:         \"\"\"",
          "1063:         Return the state of the AXMLParser.",
          "1064:         If this flag is set to False, the parsing has failed, thus",
          "",
          "[Removed Lines]",
          "1061:     def is_valid(self):",
          "",
          "[Added Lines]",
          "1258:     def is_valid(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1066:         \"\"\"",
          "1067:         return self.axml.is_valid()",
          "1070:         \"\"\"",
          "1071:         Returns True if the AXML is likely to be packed",
          "",
          "[Removed Lines]",
          "1069:     def is_packed(self):",
          "",
          "[Added Lines]",
          "1266:     def is_packed(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1078:         :returns: True if packer detected, False otherwise",
          "1079:         \"\"\"",
          "1083:         \"\"\"",
          "1084:         Wrapper function for format_value to resolve the actual value of an attribute in a tag",
          "1085:         :param index: index of the current attribute",
          "",
          "[Removed Lines]",
          "1080:         return self.packerwarning",
          "1082:     def _get_attribute_value(self, index):",
          "",
          "[Added Lines]",
          "1277:         return self.packerwarning or self.axml.packerwarning",
          "1279:     def _get_attribute_value(self, index: int):",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1088:         _type = self.axml.getAttributeValueType(index)",
          "1089:         _data = self.axml.getAttributeValueData(index)",
          "1093:     def _fix_name(self, prefix, name):",
          "1094:         \"\"\"",
          "",
          "[Removed Lines]",
          "1091:         return format_value(_type, _data, lambda _: self.axml.getAttributeValue(index))",
          "",
          "[Added Lines]",
          "1288:         return format_value(",
          "1289:             _type, _data, lambda _: self.axml.getAttributeValue(index)",
          "1290:         )",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1114:         :rtype: tuple",
          "1115:         \"\"\"",
          "1116:         if not name[0].isalpha() and name[0] != \"_\":",
          "1119:             self.packerwarning = True",
          "1120:             name = \"_{}\".format(name)",
          "1122:             # Seems be a common thing...",
          "1123:             logger.info(",
          "1125:             prefix = self._print_namespace(self.axml.nsmap['android'])",
          "1126:             name = name[len(\"android:\"):]",
          "1127:             # It looks like this is some kind of packer... Not sure though.",
          "",
          "[Removed Lines]",
          "1117:             logger.warning(\"Invalid start for name '{}'. \"",
          "1118:                            \"XML name must start with a letter.\".format(name))",
          "1121:         if name.startswith(\"android:\") and prefix == '' and 'android' in self.axml.nsmap:",
          "1124:                 \"Name '{}' starts with 'android:' prefix but 'android' is a known prefix. Replacing prefix.\".format(name))",
          "",
          "[Added Lines]",
          "1316:             logger.warning(",
          "1317:                 \"Invalid start for name '{}'. \"",
          "1318:                 \"XML name must start with a letter.\".format(name)",
          "1319:             )",
          "1322:         if (",
          "1323:             name.startswith(\"android:\")",
          "1324:             and prefix == ''",
          "1325:             and 'android' in self.axml.nsmap",
          "1326:         ):",
          "1329:                 \"Name '{}' starts with 'android:' prefix but 'android' is a known prefix. Replacing prefix.\".format(",
          "1330:                     name",
          "1331:                 )",
          "1332:             )",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1131:             embedded_prefix, new_name = name.split(\":\", 1)",
          "1132:             if embedded_prefix in self.axml.nsmap:",
          "1133:                 logger.info(",
          "1136:                 name = new_name",
          "1137:             else:",
          "1138:                 # Print out an extra warning",
          "1141:         if not re.match(r\"^[a-zA-Z0-9._-]*$\", name):",
          "1143:             self.packerwarning = True",
          "1144:             name = re.sub(r\"[^a-zA-Z0-9._-]\", \"_\", name)",
          "",
          "[Removed Lines]",
          "1134:                     \"Prefix '{}' is in namespace mapping, assume that it is a prefix.\")",
          "1135:                 prefix = self._print_namespace(self.axml.nsmap[embedded_prefix])",
          "1139:                 logger.warning(\"Confused: name contains a unknown namespace prefix: '{}'. \"",
          "1140:                                \"This is either a broken AXML file or some attempt to break stuff.\".format(name))",
          "1142:             logger.warning(\"Name '{}' contains invalid characters!\".format(name))",
          "",
          "[Added Lines]",
          "1342:                     \"Prefix '{}' is in namespace mapping, assume that it is a prefix.\"",
          "1343:                 )",
          "1344:                 prefix = self._print_namespace(",
          "1345:                     self.axml.nsmap[embedded_prefix]",
          "1346:                 )",
          "1350:                 logger.warning(",
          "1351:                     \"Confused: name contains a unknown namespace prefix: '{}'. \"",
          "1352:                     \"This is either a broken AXML file or some attempt to break stuff.\".format(",
          "1353:                         name",
          "1354:                     )",
          "1355:                 )",
          "1357:             logger.warning(",
          "1358:                 \"Name '{}' contains invalid characters!\".format(name)",
          "1359:             )",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1158:         \"\"\"",
          "1159:         if not self.__charrange or not self.__replacement:",
          "1160:             self.__charrange = re.compile(",
          "1162:             self.__replacement = re.compile(",
          "1165:         # Reading string until \\x00. This is the same as aapt does.",
          "1166:         if \"\\x00\" in value:",
          "1167:             self.packerwarning = True",
          "1174:         if not self.__charrange.match(value):",
          "1176:             self.packerwarning = True",
          "1177:             value = self.__replacement.sub('_', value)",
          "1178:         return value",
          "",
          "[Removed Lines]",
          "1161:                 '^[\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$')",
          "1163:                 '[^\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]')",
          "1168:             logger.warning(\"Null byte found in attribute value at position {}: \"",
          "1169:                            \"Value(hex): '{}'\".format(",
          "1170:                                value.find(\"\\x00\"),",
          "1171:                                binascii.hexlify(value.encode(\"utf-8\"))))",
          "1172:             value = value[:value.find(\"\\x00\")]",
          "1175:             logger.warning(\"Invalid character in value found. Replacing with '_'.\")",
          "",
          "[Added Lines]",
          "1378:                 '^[\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]*$'",
          "1379:             )",
          "1381:                 '[^\\u0020-\\uD7FF\\u0009\\u000A\\u000D\\uE000-\\uFFFD\\U00010000-\\U0010FFFF]'",
          "1382:             )",
          "1387:             logger.warning(",
          "1388:                 \"Null byte found in attribute value at position {}: \"",
          "1389:                 \"Value(hex): '{}'\".format(",
          "1390:                     value.find(\"\\x00\"), binascii.hexlify(value.encode(\"utf-8\"))",
          "1391:                 )",
          "1392:             )",
          "1393:             value = value[: value.find(\"\\x00\")]",
          "1396:             logger.warning(",
          "1397:                 \"Invalid character in value found. Replacing with '_'.\"",
          "1398:             )",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1182:             uri = \"{{{}}}\".format(uri)",
          "1183:         return uri",
          "1188: ACONFIGURATION_ORIENTATION_ANY = 0x0000",
          "1189: ACONFIGURATION_ORIENTATION_PORT = 0x0001",
          "",
          "[Removed Lines]",
          "1185: # See http://aospxref.com/android-13.0.0_r3/xref/frameworks/native/include/android/configuration.h#56",
          "",
          "[Added Lines]",
          "1409: # See http://aospxref.com/android-13.0.0_r3/xref/frameworks/native/include/android/configuration.h#56",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1201: ACONFIGURATION_DENSITY_XHIGH = 320",
          "1202: ACONFIGURATION_DENSITY_XXHIGH = 480",
          "1203: ACONFIGURATION_DENSITY_XXXHIGH = 640",
          "1206: ACONFIGURATION_KEYBOARD_ANY = 0x0000",
          "1207: ACONFIGURATION_KEYBOARD_NOKEYS = 0x0001",
          "1208: ACONFIGURATION_KEYBOARD_QWERTY = 0x0002",
          "",
          "[Removed Lines]",
          "1204: ACONFIGURATION_DENSITY_ANY = 0xfffe",
          "1205: ACONFIGURATION_DENSITY_NONE = 0xffff",
          "",
          "[Added Lines]",
          "1427: ACONFIGURATION_DENSITY_ANY = 0xFFFE",
          "1428: ACONFIGURATION_DENSITY_NONE = 0xFFFF",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1270: ACONFIGURATION_LAYOUTDIR = 0x4000",
          "1271: ACONFIGURATION_SCREEN_ROUND = 0x8000",
          "1272: ACONFIGURATION_COLOR_MODE = 0x10000",
          "1275: # See http://aospxref.com/android-13.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#946",
          "",
          "[Removed Lines]",
          "1273: ACONFIGURATION_MNC_ZERO = 0xffff",
          "",
          "[Added Lines]",
          "1496: ACONFIGURATION_MNC_ZERO = 0xFFFF",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1312: KEYSHIDDEN_YES = ACONFIGURATION_KEYSHIDDEN_YES",
          "1313: KEYSHIDDEN_SOFT = ACONFIGURATION_KEYSHIDDEN_SOFT",
          "1316: SHIFT_NAVHIDDEN = 2",
          "1317: NAVHIDDEN_ANY = ACONFIGURATION_NAVHIDDEN_ANY << SHIFT_NAVHIDDEN",
          "1318: NAVHIDDEN_NO = ACONFIGURATION_NAVHIDDEN_NO << SHIFT_NAVHIDDEN",
          "",
          "[Removed Lines]",
          "1315: MASK_NAVHIDDEN = 0x000c",
          "",
          "[Added Lines]",
          "1538: MASK_NAVHIDDEN = 0x000C",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1323: SDKVERSION_ANY = 0",
          "1324: MINORVERSION_ANY = 0",
          "1327: SCREENSIZE_ANY = ACONFIGURATION_SCREENSIZE_ANY",
          "1328: SCREENSIZE_SMALL = ACONFIGURATION_SCREENSIZE_SMALL",
          "1329: SCREENSIZE_NORMAL = ACONFIGURATION_SCREENSIZE_NORMAL",
          "",
          "[Removed Lines]",
          "1326: MASK_SCREENSIZE = 0x0f",
          "",
          "[Added Lines]",
          "1549: MASK_SCREENSIZE = 0x0F",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1342: LAYOUTDIR_LTR = ACONFIGURATION_LAYOUTDIR_LTR << SHIFT_LAYOUTDIR",
          "1343: LAYOUTDIR_RTL = ACONFIGURATION_LAYOUTDIR_RTL << SHIFT_LAYOUTDIR",
          "1346: UI_MODE_TYPE_ANY = ACONFIGURATION_UI_MODE_TYPE_ANY",
          "1347: UI_MODE_TYPE_NORMAL = ACONFIGURATION_UI_MODE_TYPE_NORMAL",
          "1348: UI_MODE_TYPE_DESK = ACONFIGURATION_UI_MODE_TYPE_DESK",
          "",
          "[Removed Lines]",
          "1345: MASK_UI_MODE_TYPE = 0x0f",
          "",
          "[Added Lines]",
          "1568: MASK_UI_MODE_TYPE = 0x0F",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1368: WIDE_COLOR_GAMUT_NO = ACONFIGURATION_WIDE_COLOR_GAMUT_NO",
          "1369: WIDE_COLOR_GAMUT_YES = ACONFIGURATION_WIDE_COLOR_GAMUT_YES",
          "1372: SHIFT_HDR = 2",
          "1373: HDR_ANY = ACONFIGURATION_HDR_ANY << SHIFT_HDR",
          "1374: HDR_NO = ACONFIGURATION_HDR_NO << SHIFT_HDR",
          "",
          "[Removed Lines]",
          "1371: MASK_HDR = 0x0c",
          "",
          "[Added Lines]",
          "1594: MASK_HDR = 0x0C",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1389:     It contains again many more chunks.",
          "1390:     \"\"\"",
          "1393:         \"\"\"",
          "1394:         :param bytes raw_buff: the raw bytes of the file",
          "1395:         \"\"\"",
          "",
          "[Removed Lines]",
          "1392:     def __init__(self, raw_buff):",
          "",
          "[Added Lines]",
          "1615:     def __init__(self, raw_buff: bytes) -> None:",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1399:         if self.buff_size < 8 or self.buff_size > 0xFFFFFFFF:",
          "1400:             raise ResParserError(",
          "1403:         self.analyzed = False",
          "1404:         self._resolved_strings = None",
          "",
          "[Removed Lines]",
          "1401:                 \"Invalid file size {} for a resources.arsc file!\".format(self.buff.size()))",
          "",
          "[Added Lines]",
          "1624:                 \"Invalid file size {} for a resources.arsc file!\".format(",
          "1625:                     self.buff_size",
          "1626:                 )",
          "1627:             )",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1415:         # More sanity checks...",
          "1416:         if self.header.header_size != 12:",
          "1420:         if self.header.size > self.buff_size:",
          "1424:         if self.header.size < self.buff_size:",
          "1428:         # The ResTable_header contains the packageCount, i.e. the number of ResTable_package",
          "1429:         self.packageCount = unpack('<I', self.buff.read(4))[0]",
          "",
          "[Removed Lines]",
          "1417:             logger.warning(\"The ResTable_header has an unexpected header size! Expected 12 bytes, got {}.\".format(",
          "1418:                 self.header.header_size))",
          "1421:             raise ResParserError(\"The file seems to be truncated. Refuse to parse the file! Filesize: {}, declared size: {}\".format(",
          "1422:                 self.buff_size, self.header.size))",
          "1425:             logger.warning(\"The Resource file seems to have data appended to it. Filesize: {}, declared size: {}\".format(",
          "1426:                 self.buff_size, self.header.size))",
          "",
          "[Added Lines]",
          "1643:             logger.warning(",
          "1644:                 \"The ResTable_header has an unexpected header size! Expected 12 bytes, got {}.\".format(",
          "1645:                     self.header.header_size",
          "1646:                 )",
          "1647:             )",
          "1650:             raise ResParserError(",
          "1651:                 \"The file seems to be truncated. Refuse to parse the file! Filesize: {}, declared size: {}\".format(",
          "1652:                     self.buff_size, self.header.size",
          "1653:                 )",
          "1654:             )",
          "1657:             logger.warning(",
          "1658:                 \"The Resource file seems to have data appended to it. Filesize: {}, declared size: {}\".format(",
          "1659:                     self.buff_size, self.header.size",
          "1660:                 )",
          "1661:             )",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1431:         # Even more sanity checks...",
          "1432:         if self.packageCount < 1:",
          "1433:             logger.warning(",
          "1436:         logger.debug(",
          "1439:         # skip to the start of the first chunk's data, skipping trailing header bytes (there should be none)",
          "1440:         self.buff.seek(self.header.start + self.header.header_size)",
          "",
          "[Removed Lines]",
          "1434:                 \"The number of packages is smaller than one. There should be at least one package!\")",
          "1437:             \"Parsed ResTable_header with {} package(s) inside.\".format(self.packageCount))",
          "",
          "[Added Lines]",
          "1669:                 \"The number of packages is smaller than one. There should be at least one package!\"",
          "1670:             )",
          "1673:             \"Parsed ResTable_header with {} package(s) inside.\".format(",
          "1674:                 self.packageCount",
          "1675:             )",
          "1676:         )",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "1447:             if res_header.end > self.header.end:",
          "1448:                 # this inner chunk crosses the boundary of the table chunk",
          "1449:                 logger.warning(",
          "1451:                 break",
          "1453:             if res_header.type == RES_STRING_POOL_TYPE:",
          "1454:                 # There should be only one StringPool per resource table.",
          "1455:                 if self.stringpool_main:",
          "1456:                     logger.warning(",
          "1458:                 else:",
          "1459:                     self.stringpool_main = StringBlock(self.buff, res_header)",
          "1462:             elif res_header.type == RES_TABLE_PACKAGE_TYPE:",
          "1463:                 if len(self.packages) > self.packageCount:",
          "1467:                 current_package = ARSCResTablePackage(self.buff, res_header)",
          "1468:                 package_name = current_package.get_name()",
          "1470:                 # After the Header, we have the resource type symbol table",
          "1473:                 type_sp_header = ARSCHeader(",
          "1475:                 mTableStrings = StringBlock(self.buff, type_sp_header)",
          "1477:                 # Next, we should have the resource key symbol table",
          "1480:                 key_sp_header = ARSCHeader(",
          "1482:                 mKeyStrings = StringBlock(self.buff, key_sp_header)",
          "1484:                 # Add them to the dict of read packages",
          "",
          "[Removed Lines]",
          "1450:                     \"Invalid chunk found! It is larger than the outer chunk: %s\", res_header)",
          "1457:                         \"Already found a ResStringPool_header, but there should be only one! Will not parse the Pool again.\")",
          "1460:                     logger.debug(\"Found the main string pool: %s\", self.stringpool_main)",
          "1464:                     raise ResParserError(\"Got more packages ({}) than expected ({})\".format(",
          "1465:                         len(self.packages), self.packageCount))",
          "1471:                 self.buff.seek(current_package.header.start",
          "1472:                                + current_package.typeStrings)",
          "1474:                     self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "1478:                 self.buff.seek(current_package.header.start",
          "1479:                                + current_package.keyStrings)",
          "1481:                     self.buff, expected_type=RES_STRING_POOL_TYPE)",
          "",
          "[Added Lines]",
          "1689:                     \"Invalid chunk found! It is larger than the outer chunk: %s\",",
          "1690:                     res_header,",
          "1691:                 )",
          "1698:                         \"Already found a ResStringPool_header, but there should be only one! Will not parse the Pool again.\"",
          "1699:                     )",
          "1702:                     logger.debug(",
          "1703:                         \"Found the main string pool: %s\", self.stringpool_main",
          "1704:                     )",
          "1708:                     raise ResParserError(",
          "1709:                         \"Got more packages ({}) than expected ({})\".format(",
          "1710:                             len(self.packages), self.packageCount",
          "1711:                         )",
          "1712:                     )",
          "1718:                 self.buff.seek(",
          "1719:                     current_package.header.start + current_package.typeStrings",
          "1720:                 )",
          "1722:                     self.buff, expected_type=RES_STRING_POOL_TYPE",
          "1723:                 )",
          "1727:                 self.buff.seek(",
          "1728:                     current_package.header.start + current_package.keyStrings",
          "1729:                 )",
          "1731:                     self.buff, expected_type=RES_STRING_POOL_TYPE",
          "1732:                 )",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "1487:                 self.packages[package_name].append(mKeyStrings)",
          "1489:                 pc = PackageContext(",
          "1491:                 logger.debug(\"Constructed a PackageContext: %s\", pc)",
          "1493:                 # skip to the first header in this table package chunk",
          "",
          "[Removed Lines]",
          "1490:                     current_package, self.stringpool_main, mTableStrings, mKeyStrings)",
          "",
          "[Added Lines]",
          "1741:                     current_package,",
          "1742:                     self.stringpool_main,",
          "1743:                     mTableStrings,",
          "1744:                     mKeyStrings,",
          "1745:                 )",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "1496:                 # this looks more like we want: (???)",
          "1497:                 # FIXME it looks like that the two string pools we have read might not be concatenated to each other,",
          "1498:                 # thus jumping to the sum of the sizes might not be correct...",
          "1502:                 if next_idx != self.buff.tell():",
          "1503:                     # If this happens, we have a testfile ;)",
          "1504:                     logger.error(\"This looks like an odd resources.arsc file!\")",
          "1505:                     logger.error(",
          "1509:                     logger.error(",
          "1511:                     logger.error(\"Thank you!\")",
          "1513:                 self.buff.seek(next_idx)",
          "",
          "[Removed Lines]",
          "1499:                 next_idx = res_header.start + res_header.header_size + \\",
          "1500:                     type_sp_header.size + key_sp_header.size",
          "1506:                         \"Please report this error including the file you have parsed!\")",
          "1507:                     logger.error(\"next_idx = {}, current buffer position = {}\".format(",
          "1508:                         next_idx, self.buff.tell()))",
          "1510:                         \"Please open a issue at https://github.com/androguard/androguard/issues\")",
          "",
          "[Added Lines]",
          "1754:                 next_idx = (",
          "1755:                     res_header.start",
          "1756:                     + res_header.header_size",
          "1757:                     + type_sp_header.size",
          "1758:                     + key_sp_header.size",
          "1759:                 )",
          "1765:                         \"Please report this error including the file you have parsed!\"",
          "1766:                     )",
          "1768:                         \"next_idx = {}, current buffer position = {}\".format(",
          "1769:                             next_idx, self.buff.tell()",
          "1770:                         )",
          "1771:                     )",
          "1772:                     logger.error(",
          "1773:                         \"Please open a issue at https://github.com/androguard/androguard/issues\"",
          "1774:                     )",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "1516:                 while self.buff.tell() <= res_header.end - ARSCHeader.SIZE:",
          "1517:                     pkg_chunk_header = ARSCHeader(self.buff)",
          "1518:                     logger.debug(\"Found a header: {}\".format(pkg_chunk_header))",
          "1520:                         # we are way off the package chunk; bail out",
          "1521:                         break",
          "",
          "[Removed Lines]",
          "1519:                     if pkg_chunk_header.start + pkg_chunk_header.size > res_header.end:",
          "",
          "[Added Lines]",
          "1783:                     if (",
          "1784:                         pkg_chunk_header.start + pkg_chunk_header.size",
          "1785:                         > res_header.end",
          "1786:                     ):",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "1525:                     if pkg_chunk_header.type == RES_TABLE_TYPE_SPEC_TYPE:",
          "1526:                         self.packages[package_name].append(",
          "1529:                     elif pkg_chunk_header.type == RES_TABLE_TYPE_TYPE:",
          "1530:                         # Parse a RES_TABLE_TYPE",
          "1531:                         # http://androidxref.com/9.0.0_r3/xref/frameworks/base/tools/aapt2/format/binary/BinaryResourceParser.cpp#311",
          "1532:                         a_res_type = ARSCResType(self.buff, pc)",
          "1533:                         self.packages[package_name].append(a_res_type)",
          "1534:                         self.resource_configs[package_name][a_res_type].add(",
          "1537:                         logger.debug(\"Config: {}\".format(a_res_type.config))",
          "1539:                         entries = []",
          "1540:                         for i in range(0, a_res_type.entryCount):",
          "1545:                         self.packages[package_name].append(entries)",
          "1550:                                 self.packages[package_name].append(ate)",
          "1551:                                 if ate.is_weak():",
          "1552:                                     # FIXME we are not sure how to implement the FLAG_WEAK!",
          "",
          "[Removed Lines]",
          "1527:                             ARSCResTypeSpec(self.buff, pc))",
          "1535:                             a_res_type.config)",
          "1541:                             current_package.mResId = current_package.mResId & 0xffff0000 | i",
          "1542:                             entries.append((unpack('<i', self.buff.read(4))[",
          "1543:                                            0], current_package.mResId))",
          "1547:                         for entry, res_id in entries:",
          "1548:                             if entry != -1:",
          "1549:                                 ate = ARSCResTableEntry(self.buff, res_id, pc)",
          "",
          "[Added Lines]",
          "1794:                             ARSCResTypeSpec(self.buff, pc)",
          "1795:                         )",
          "1800:                         start_of_chunk = self.buff.tell() - 8",
          "1801:                         expected_end_of_chunk = (",
          "1802:                             start_of_chunk + pkg_chunk_header.size",
          "1803:                         )",
          "1807:                             a_res_type.config",
          "1808:                         )",
          "1813:                         FLAG_OFFSET16 = 0x02",
          "1814:                         NO_ENTRY_16 = 0xFFFF",
          "1815:                         NO_ENTRY_32 = 0xFFFFFFFF",
          "1816:                         expected_entries_start = (",
          "1817:                             start_of_chunk + a_res_type.entriesStart",
          "1818:                         )",
          "1820:                         # Helper function to convert 16-bit offset to 32-bit",
          "1821:                         def offset_from16(off16):",
          "1822:                             return (",
          "1823:                                 NO_ENTRY_16",
          "1824:                                 if off16 == NO_ENTRY_16",
          "1825:                                 else off16 * 4",
          "1826:                             )",
          "1829:                             current_package.mResId = (",
          "1830:                                 current_package.mResId & 0xFFFF0000 | i",
          "1831:                             )",
          "1832:                             # Check if FLAG_OFFSET16 is set",
          "1833:                             if a_res_type.flags & FLAG_OFFSET16:",
          "1834:                                 # Read as 16-bit offset",
          "1835:                                 offset_16 = unpack('<H', self.buff.read(2))[0]",
          "1836:                                 offset = offset_from16(offset_16)",
          "1837:                                 if offset == NO_ENTRY_16:",
          "1838:                                     continue",
          "1839:                             else:",
          "1840:                                 # Read as 32-bit offset",
          "1841:                                 offset = unpack('<I', self.buff.read(4))[0]",
          "1842:                                 if offset == NO_ENTRY_32:",
          "1843:                                     continue",
          "1844:                             entries.append((offset, current_package.mResId))",
          "1848:                         base_offset = self.buff.tell()",
          "1849:                         if base_offset + ((4 - (base_offset % 4)) % 4) != expected_entries_start:",
          "1850:                             # FIXME: seems like I am missing 2 bytes here in some cases, though it does not affect the result",
          "1851:                             logger.warning(",
          "1852:                                 \"Something is off here! We are not where the entries should start.\"",
          "1853:                             )",
          "1854:                         base_offset = expected_entries_start",
          "1855:                         for entry_offset, res_id in entries:",
          "1856:                             if entry_offset != -1:",
          "1857:                                 ate = ARSCResTableEntry(",
          "1858:                                     self.buff,",
          "1859:                                     base_offset + entry_offset,",
          "1860:                                     expected_end_of_chunk,",
          "1861:                                     res_id,",
          "1862:                                     pc,",
          "1863:                                 )",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "1558:                                     # Not sure if this is a good solution though",
          "1559:                                     self.buff.seek(ate.start)",
          "1560:                     elif pkg_chunk_header.type == RES_TABLE_LIBRARY_TYPE:",
          "1562:                     else:",
          "1563:                         # Unknown / not-handled chunk type",
          "1564:                         logger.warning(",
          "1567:                     # skip to the next chunk",
          "1568:                     self.buff.seek(pkg_chunk_header.end)",
          "1569:             else:",
          "1570:                 # Unknown / not-handled chunk type",
          "1573:             # move to the next resource chunk",
          "1574:             self.buff.seek(res_header.end)",
          "",
          "[Removed Lines]",
          "1561:                         logger.warning(\"RES_TABLE_LIBRARY_TYPE chunk is not supported\")",
          "1565:                             \"Unknown chunk type encountered inside RES_TABLE_PACKAGE: %s\", pkg_chunk_header)",
          "1571:                 logger.warning(\"Unknown chunk type encountered: %s\", res_header)",
          "",
          "[Added Lines]",
          "1875:                         logger.warning(",
          "1876:                             \"RES_TABLE_LIBRARY_TYPE chunk is not supported\"",
          "1877:                         )",
          "1881:                             \"Unknown chunk type encountered inside RES_TABLE_PACKAGE: %s\",",
          "1882:                             pkg_chunk_header,",
          "1883:                         )",
          "1889:                 logger.warning(",
          "1890:                     \"Unknown chunk type encountered: %s\", res_header",
          "1891:                 )",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "1592:                         locale = a_res_type.config.get_language_and_region()",
          "1594:                         c_value = self.values[package_name].setdefault(",
          "1597:                         entries = self.packages[package_name][nb + 2]",
          "1598:                         nb_i = 0",
          "1599:                         for entry, res_id in entries:",
          "1600:                             if entry != -1:",
          "1607:                                 if ate.get_index() != -1:",
          "1608:                                     c_value[\"public\"].append(",
          "1612:                                 if a_res_type.get_type() not in c_value:",
          "1613:                                     c_value[a_res_type.get_type()] = []",
          "1615:                                 if a_res_type.get_type() == \"string\":",
          "1616:                                     c_value[\"string\"].append(",
          "1619:                                 elif a_res_type.get_type() == \"id\":",
          "1621:                                         c_value[\"id\"].append(",
          "1624:                                 elif a_res_type.get_type() == \"bool\":",
          "1626:                                         c_value[\"bool\"].append(",
          "1629:                                 elif a_res_type.get_type() == \"integer\":",
          "1633:                                 elif a_res_type.get_type() == \"color\":",
          "1637:                                 elif a_res_type.get_type() == \"dimen\":",
          "1641:                                 nb_i += 1",
          "1643:                 nb += 1",
          "1646:         return [ate.get_value(), ate.get_key_data()]",
          "1649:         x = [ate.get_value()]",
          "1650:         if ate.key.get_data() == 0:",
          "1651:             x.append(\"false\")",
          "",
          "[Removed Lines]",
          "1595:                             locale, {\"public\": []})",
          "1601:                                 ate = self.packages[package_name][nb + 3 + nb_i]",
          "1603:                                 self.resource_values[ate.mResId][a_res_type.config] = ate",
          "1604:                                 self.resource_keys[package_name][a_res_type.get_type(",
          "1605:                                 )][ate.get_value()] = ate.mResId",
          "1609:                                         (a_res_type.get_type(), ate.get_value(),",
          "1610:                                          ate.mResId))",
          "1617:                                         self.get_resource_string(ate))",
          "1620:                                     if not ate.is_complex():",
          "1622:                                             self.get_resource_id(ate))",
          "1625:                                     if not ate.is_complex():",
          "1627:                                             self.get_resource_bool(ate))",
          "1630:                                     c_value[\"integer\"].append(",
          "1631:                                         self.get_resource_integer(ate))",
          "1634:                                     c_value[\"color\"].append(",
          "1635:                                         self.get_resource_color(ate))",
          "1638:                                     c_value[\"dimen\"].append(",
          "1639:                                         self.get_resource_dimen(ate))",
          "1642:                         nb += 3 + nb_i - 1  # -1 to account for the nb+=1 on the next line",
          "1645:     def get_resource_string(self, ate):",
          "1648:     def get_resource_id(self, ate):",
          "",
          "[Added Lines]",
          "1915:                             locale, {\"public\": []}",
          "1916:                         )",
          "1922:                                 ate = self.packages[package_name][",
          "1923:                                     nb + 3 + nb_i",
          "1924:                                 ]",
          "1926:                                 self.resource_values[ate.mResId][",
          "1927:                                     a_res_type.config",
          "1928:                                 ] = ate",
          "1929:                                 self.resource_keys[package_name][",
          "1930:                                     a_res_type.get_type()",
          "1931:                                 ][ate.get_value()] = ate.mResId",
          "1935:                                         (",
          "1936:                                             a_res_type.get_type(),",
          "1937:                                             ate.get_value(),",
          "1938:                                             ate.mResId,",
          "1939:                                         )",
          "1940:                                     )",
          "1947:                                         self.get_resource_string(ate)",
          "1948:                                     )",
          "1951:                                     if (",
          "1952:                                         not ate.is_complex()",
          "1953:                                         and not ate.is_compact()",
          "1954:                                     ):",
          "1956:                                             self.get_resource_id(ate)",
          "1957:                                         )",
          "1960:                                     if (",
          "1961:                                         not ate.is_complex()",
          "1962:                                         and not ate.is_compact()",
          "1963:                                     ):",
          "1965:                                             self.get_resource_bool(ate)",
          "1966:                                         )",
          "1969:                                     if ate.is_compact():",
          "1970:                                         c_value[\"integer\"].append(ate.data)",
          "1971:                                     else:",
          "1972:                                         c_value[\"integer\"].append(",
          "1973:                                             self.get_resource_integer(ate)",
          "1974:                                         )",
          "1977:                                     if not ate.is_compact():",
          "1978:                                         c_value[\"color\"].append(",
          "1979:                                             self.get_resource_color(ate)",
          "1980:                                         )",
          "1983:                                     if not ate.is_compact():",
          "1984:                                         c_value[\"dimen\"].append(",
          "1985:                                             self.get_resource_dimen(ate)",
          "1986:                                         )",
          "1989:                         nb += (",
          "1990:                             3 + nb_i - 1",
          "1991:                         )  # -1 to account for the nb+=1 on the next line",
          "1994:     def get_resource_string(self, ate: ARSCResTableEntry) -> list:",
          "1997:     def get_resource_id(self, ate: ARSCResTableEntry) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "1653:             x.append(\"true\")",
          "1654:         return x",
          "1657:         x = [ate.get_value()]",
          "1658:         if ate.key.get_data() == 0:",
          "1659:             x.append(\"false\")",
          "",
          "[Removed Lines]",
          "1656:     def get_resource_bool(self, ate):",
          "",
          "[Added Lines]",
          "2005:     def get_resource_bool(self, ate: ARSCResTableEntry) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "1661:             x.append(\"true\")",
          "1662:         return x",
          "1665:         return [ate.get_value(), ate.key.get_data()]",
          "1668:         entry_data = ate.key.get_data()",
          "1669:         return [",
          "1670:             ate.get_value(),",
          "",
          "[Removed Lines]",
          "1664:     def get_resource_integer(self, ate):",
          "1667:     def get_resource_color(self, ate):",
          "",
          "[Added Lines]",
          "2013:     def get_resource_integer(self, ate: ARSCResTableEntry) -> list:",
          "2016:     def get_resource_color(self, ate: ARSCResTableEntry) -> list:",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "1672:                 ((entry_data >> 24) & 0xFF),",
          "1673:                 ((entry_data >> 16) & 0xFF),",
          "1674:                 ((entry_data >> 8) & 0xFF),",
          "1676:         ]",
          "1679:         try:",
          "1680:             return [",
          "1682:                     complexToFloat(ate.key.get_data()),",
          "1684:             ]",
          "1685:         except IndexError:",
          "1689:             return [ate.get_value(), ate.key.get_data()]",
          "1691:     # FIXME",
          "1693:         return [\"\", \"\"]",
          "1696:         \"\"\"",
          "1697:         Retrieve a list of all package names, which are available",
          "1698:         in the given resources.arsc.",
          "1699:         \"\"\"",
          "1700:         return list(self.packages.keys())",
          "1703:         \"\"\"",
          "1704:         Retrieve a list of all available locales in a given packagename.",
          "",
          "[Removed Lines]",
          "1675:                 (entry_data & 0xFF))",
          "1678:     def get_resource_dimen(self, ate):",
          "1681:                 ate.get_value(), \"{}{}\".format(",
          "1683:                     DIMENSION_UNITS[ate.key.get_data() & COMPLEX_UNIT_MASK])",
          "1686:             logger.debug(\"Out of range dimension unit index for {}: {}\".format(",
          "1687:                 complexToFloat(ate.key.get_data()),",
          "1688:                 ate.key.get_data() & COMPLEX_UNIT_MASK))",
          "1692:     def get_resource_style(self, ate):",
          "1695:     def get_packages_names(self):",
          "1702:     def get_locales(self, package_name):",
          "",
          "[Added Lines]",
          "2024:                 (entry_data & 0xFF),",
          "2025:             ),",
          "2028:     def get_resource_dimen(self, ate: ARSCResTableEntry) -> list:",
          "2031:                 ate.get_value(),",
          "2032:                 \"{}{}\".format(",
          "2034:                     DIMENSION_UNITS[ate.key.get_data() & COMPLEX_UNIT_MASK],",
          "2035:                 ),",
          "2038:             logger.debug(",
          "2039:                 \"Out of range dimension unit index for {}: {}\".format(",
          "2040:                     complexToFloat(ate.key.get_data()),",
          "2041:                     ate.key.get_data() & COMPLEX_UNIT_MASK,",
          "2042:                 )",
          "2043:             )",
          "2047:     def get_resource_style(self, ate: ARSCResTableEntry) -> list:",
          "2050:     def get_packages_names(self) -> list[str]:",
          "2057:     def get_locales(self, package_name: str) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "1708:         self._analyse()",
          "1709:         return list(self.values[package_name].keys())",
          "1712:         \"\"\"",
          "1713:         Retrieve a list of all types which are available in the given",
          "1714:         package and locale.",
          "",
          "[Removed Lines]",
          "1711:     def get_types(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2066:     def get_types(",
          "2067:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2068:     ) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "1719:         self._analyse()",
          "1720:         return list(self.values[package_name][locale].keys())",
          "1723:         \"\"\"",
          "1724:         Get the XML (as string) of all resources of type 'public'.",
          "",
          "[Removed Lines]",
          "1722:     def get_public_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2079:     def get_public_resources(",
          "2080:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2081:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "1737:         try:",
          "1738:             for i in self.values[package_name][locale][\"public\"]:",
          "1741:         except KeyError:",
          "1742:             pass",
          "",
          "[Removed Lines]",
          "1739:                 buff += '<public type=\"{}\" name=\"{}\" id=\"0x{:08x}\" />\\n'.format(",
          "1740:                     i[0], i[1], i[2])",
          "",
          "[Added Lines]",
          "2098:                 buff += (",
          "2099:                     '<public type=\"{}\" name=\"{}\" id=\"0x{:08x}\" />\\n'.format(",
          "2100:                         i[0], i[1], i[2]",
          "2101:                     )",
          "2102:                 )",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "1746:         return buff.encode('utf-8')",
          "1749:         \"\"\"",
          "1750:         Get the XML (as string) of all resources of type 'string'.",
          "",
          "[Removed Lines]",
          "1748:     def get_string_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2110:     def get_string_resources(",
          "2111:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2112:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "1775:         return buff.encode('utf-8')",
          "1778:         \"\"\"",
          "1779:         Get the XML (as string) of all resources of type 'string'.",
          "1780:         This is a combined variant, which has all locales and all package names",
          "",
          "[Removed Lines]",
          "1777:     def get_strings_resources(self):",
          "",
          "[Added Lines]",
          "2141:     def get_strings_resources(self) -> bytes:",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "1795:                 try:",
          "1796:                     for i in self.values[package_name][locale][\"string\"]:",
          "1797:                         buff += '<string name=\"{}\">{}</string>\\n'.format(",
          "1799:                 except KeyError:",
          "1800:                     pass",
          "",
          "[Removed Lines]",
          "1798:                             i[0], escape(i[1]))",
          "",
          "[Added Lines]",
          "2162:                             i[0], escape(i[1])",
          "2163:                         )",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "1809:         return buff.encode('utf-8')",
          "1812:         \"\"\"",
          "1813:         Get the XML (as string) of all resources of type 'id'.",
          "",
          "[Removed Lines]",
          "1811:     def get_id_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2176:     def get_id_resources(",
          "2177:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2178:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "1828:                 if len(i) == 1:",
          "1829:                     buff += '<item type=\"id\" name=\"%s\"/>\\n' % (i[0])",
          "1830:                 else:",
          "1833:         except KeyError:",
          "1834:             pass",
          "",
          "[Removed Lines]",
          "1831:                     buff += '<item type=\"id\" name=\"{}\">{}</item>\\n'.format(i[0],",
          "1832:                                                                            escape(i[1]))",
          "",
          "[Added Lines]",
          "2198:                     buff += '<item type=\"id\" name=\"{}\">{}</item>\\n'.format(",
          "2199:                         i[0], escape(i[1])",
          "2200:                     )",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "1838:         return buff.encode('utf-8')",
          "1841:         \"\"\"",
          "1842:         Get the XML (as string) of all resources of type 'bool'.",
          "",
          "[Removed Lines]",
          "1840:     def get_bool_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2208:     def get_bool_resources(",
          "2209:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2210:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "1863:         return buff.encode('utf-8')",
          "1866:         \"\"\"",
          "1867:         Get the XML (as string) of all resources of type 'integer'.",
          "",
          "[Removed Lines]",
          "1865:     def get_integer_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2235:     def get_integer_resources(",
          "2236:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2237:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "1888:         return buff.encode('utf-8')",
          "1891:         \"\"\"",
          "1892:         Get the XML (as string) of all resources of type 'color'.",
          "",
          "[Removed Lines]",
          "1890:     def get_color_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2262:     def get_color_resources(",
          "2263:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2264:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "1913:         return buff.encode('utf-8')",
          "1916:         \"\"\"",
          "1917:         Get the XML (as string) of all resources of type 'dimen'.",
          "",
          "[Removed Lines]",
          "1915:     def get_dimen_resources(self, package_name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2289:     def get_dimen_resources(",
          "2290:         self, package_name: str, locale: str = '\\x00\\x00'",
          "2291:     ) -> bytes:",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "1938:         return buff.encode('utf-8')",
          "1941:         \"\"\"",
          "1942:         Returns the tuple (resource_type, resource_name, resource_id)",
          "1943:         for the given resource_id.",
          "",
          "[Removed Lines]",
          "1940:     def get_id(self, package_name, rid, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2316:     def get_id(",
          "2317:         self, package_name: str, rid: int, locale: str = '\\x00\\x00'",
          "2318:     ) -> tuple:",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "1963:         This resolver deals with complex resources as well as with references.",
          "1964:         \"\"\"",
          "1967:             \"\"\"",
          "1968:             :param ARSCParser android_resources: A resource parser",
          "1969:             :param ARSCResTableConfig config: The desired configuration or None to resolve all.",
          "",
          "[Removed Lines]",
          "1966:         def __init__(self, android_resources, config=None):",
          "",
          "[Added Lines]",
          "2344:         def __init__(",
          "2345:             self,",
          "2346:             android_resources: ARSCParser,",
          "2347:             config: Union[ARSCResTableConfig, None] = None,",
          "2348:         ) -> None:",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "1971:             self.resources = android_resources",
          "1972:             self.wanted_config = config",
          "1975:             \"\"\"",
          "1976:             the given ID into the Resource and returns a list of matching resources.",
          "",
          "[Removed Lines]",
          "1974:         def resolve(self, res_id):",
          "",
          "[Added Lines]",
          "2356:         def resolve(self, res_id: int) -> list[tuple[ARSCResTableConfig, str]]:",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "1990:                 # deconstruct them and check if more candidates are generated",
          "1991:                 self.put_ate_value(result, ate, config)",
          "1994:             \"\"\"",
          "1995:             Put a ResTableEntry into the list of results",
          "1996:             :param list result: results array",
          "",
          "[Removed Lines]",
          "1993:         def put_ate_value(self, result, ate, config):",
          "",
          "[Added Lines]",
          "2375:         def put_ate_value(",
          "2376:             self,",
          "2377:             result: list,",
          "2378:             ate: ARSCResTableEntry,",
          "2379:             config: ARSCResTableConfig,",
          "2380:         ) -> None:",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2002:                 complex_array = []",
          "2003:                 result.append((config, complex_array))",
          "2004:                 for _, item in ate.item.items:",
          "2006:             else:",
          "2010:             \"\"\"",
          "2011:             Put the tuple (ARSCResTableConfig, resolved string) into the result set",
          "2013:             :param list result: the result set",
          "2015:             :param ARSCResTableConfig config:",
          "2016:             :param ARSCResTableEntry parent: the originating entry",
          "2017:             :param bool complex_: True if the originating :class:`ARSCResTableEntry` was complex",
          "2018:             :return:",
          "2019:             \"\"\"",
          "2035:                 else:",
          "2039:         \"\"\"",
          "2040:         Return a list of resolved resource IDs with their corresponding configuration.",
          "2041:         It has a similar return type as :meth:`get_res_configs` but also handles complex entries",
          "",
          "[Removed Lines]",
          "2005:                     self.put_item_value(complex_array, item, config, ate, complex_=True)",
          "2007:                 self.put_item_value(result, ate.key, config, ate, complex_=False)",
          "2009:         def put_item_value(self, result, item, config, parent, complex_):",
          "2014:             :param ARSCResStringPoolRef item:",
          "2020:             if item.is_reference():",
          "2021:                 res_id = item.get_data()",
          "2022:                 if res_id:",
          "2023:                     # Infinite loop detection:",
          "2024:                     # TODO should this stay here or should be detect the loop much earlier?",
          "2025:                     if res_id == parent.mResId:",
          "2026:                         logger.warning(",
          "2027:                             \"Infinite loop detected at resource item {}. It references itself!\".format(parent))",
          "2028:                         return",
          "2030:                     self._resolve_into_result(",
          "2031:                         result, item.get_data(), self.wanted_config)",
          "2032:             else:",
          "2033:                 if complex_:",
          "2034:                     result.append(item.format_value())",
          "2036:                     result.append((config, item.format_value()))",
          "2038:     def get_resolved_res_configs(self, rid, config=None):",
          "",
          "[Added Lines]",
          "2392:                     self.put_item_value(",
          "2393:                         complex_array, item, config, ate, complex_=True",
          "2394:                     )",
          "2395:             elif ate.is_compact():",
          "2396:                 self.put_item_value(",
          "2397:                     result,",
          "2398:                     ate.data,",
          "2399:                     config,",
          "2400:                     ate,",
          "2401:                     complex_=False,",
          "2402:                     compact_=True,",
          "2403:                 )",
          "2405:                 self.put_item_value(",
          "2406:                     result, ate.key, config, ate, complex_=False",
          "2407:                 )",
          "2409:         def put_item_value(",
          "2410:             self,",
          "2411:             result: list,",
          "2412:             item: Union[ARSCResStringPoolRef, int],",
          "2413:             config: ARSCResTableConfig,",
          "2414:             parent: ARSCResTableEntry,",
          "2415:             complex_: bool,",
          "2416:             compact_: bool = False,",
          "2417:         ) -> None:",
          "2422:             :param ARSCResStringPoolRef | int item:",
          "2426:             :param bool compact_: True if the originating :class:`ARSCResTableEntry` was compact",
          "2429:             if isinstance(item, ARSCResStringPoolRef):",
          "2430:                 if item.is_reference():",
          "2431:                     res_id = item.get_data()",
          "2432:                     if res_id:",
          "2433:                         # Infinite loop detection:",
          "2434:                         # TODO should this stay here or should be detect the loop much earlier?",
          "2435:                         if res_id == parent.mResId:",
          "2436:                             logger.warning(",
          "2437:                                 \"Infinite loop detected at resource item {}. It references itself!\".format(",
          "2438:                                     parent",
          "2439:                                 )",
          "2440:                             )",
          "2441:                             return",
          "2443:                         self._resolve_into_result(",
          "2444:                             result, item.get_data(), self.wanted_config",
          "2445:                         )",
          "2447:                     if complex_:",
          "2448:                         result.append(item.format_value())",
          "2449:                     else:",
          "2450:                         result.append((config, item.format_value()))",
          "2451:             else:",
          "2452:                 if compact_:",
          "2453:                     result.append(",
          "2454:                         (config, parent.parent.stringpool_main.getString(item))",
          "2455:                     )",
          "2457:     def get_resolved_res_configs(",
          "2458:         self, rid: int, config: Union[ARSCResTableConfig, None] = None",
          "2459:     ) -> list[tuple[ARSCResTableConfig, str]]:",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2051:         resolver = ARSCParser.ResourceResolver(self, config)",
          "2052:         return resolver.resolve(rid)",
          "2055:         self._analyse()",
          "2056:         if self._resolved_strings:",
          "2057:             return self._resolved_strings",
          "",
          "[Removed Lines]",
          "2054:     def get_resolved_strings(self):",
          "",
          "[Added Lines]",
          "2475:     def get_resolved_strings(self) -> list[str]:",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2086:         self._resolved_strings = r",
          "2087:         return r",
          "2090:         \"\"\"",
          "2091:         Return the resources found with the ID `rid` and select",
          "2092:         the right one based on the configuration, or return all if no configuration was set.",
          "",
          "[Removed Lines]",
          "2089:     def get_res_configs(self, rid, config=None, fallback=True):",
          "",
          "[Added Lines]",
          "2510:     def get_res_configs(",
          "2511:         self,",
          "2512:         rid: int,",
          "2513:         config: Union[ARSCResTableConfig, None] = None,",
          "2514:         fallback: bool = True,",
          "2515:     ) -> list[ARSCResTableConfig]:",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2104:         :param rid: resource id as int",
          "2105:         :param config: a config to resolve from, or None to get all results",
          "2106:         :param fallback: Enable the fallback for resolving default configuration (default: True)",
          "2108:         \"\"\"",
          "2109:         self._analyse()",
          "",
          "[Removed Lines]",
          "2107:         :return: a list of ARSCResTableConfig: ARSCResTableEntry",
          "",
          "[Added Lines]",
          "2533:         :return: a list of ARSCResTableConfig:",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2116:         if rid not in self.resource_values:",
          "2117:             logger.warning(",
          "2119:             return []",
          "2121:         res_options = self.resource_values[rid]",
          "",
          "[Removed Lines]",
          "2118:                 \"The requested rid '0x{:08x}' could not be found in the list of resources.\".format(rid))",
          "",
          "[Added Lines]",
          "2544:                 \"The requested rid '0x{:08x}' could not be found in the list of resources.\".format(",
          "2545:                     rid",
          "2546:                 )",
          "2547:             )",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "2124:                 return [(config, res_options[config])]",
          "2125:             elif fallback and config == ARSCResTableConfig.default_config():",
          "2126:                 logger.warning(",
          "2128:                 return [list(self.resource_values[rid].items())[0]]",
          "2129:             else:",
          "2130:                 return []",
          "2131:         else:",
          "2132:             return list(res_options.items())",
          "2135:         self._analyse()",
          "2137:         try:",
          "",
          "[Removed Lines]",
          "2127:                     \"No default resource config could be found for the given rid '0x{:08x}', using fallback!\".format(rid))",
          "2134:     def get_string(self, package_name, name, locale='\\x00\\x00'):",
          "",
          "[Added Lines]",
          "2556:                     \"No default resource config could be found for the given rid '0x{:08x}', using fallback!\".format(",
          "2557:                         rid",
          "2558:                     )",
          "2559:                 )",
          "2566:     def get_string(",
          "2567:         self, package_name: str, name: str, locale: str = '\\x00\\x00'",
          "2568:     ) -> Union[str, None]:",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "2156:             package_name = self.get_packages_names()[0]",
          "2157:         result = collections.defaultdict(list)",
          "2160:             if res_type.get_package_name() == package_name and (",
          "2162:                 result[res_type.get_type()].extend(configs)",
          "2164:         return result",
          "2166:     @staticmethod",
          "2168:         \"\"\"",
          "2169:         Resolves an id from a binary XML file in the form \"@[package:]DEADBEEF\"",
          "2170:         and returns a tuple of package name and resource id.",
          "",
          "[Removed Lines]",
          "2159:         for res_type, configs in list(self.resource_configs[package_name].items()):",
          "2161:                     type_name is None or res_type.get_type() == type_name):",
          "2167:     def parse_id(name):",
          "",
          "[Added Lines]",
          "2593:         for res_type, configs in list(",
          "2594:             self.resource_configs[package_name].items()",
          "2595:         ):",
          "2597:                 type_name is None or res_type.get_type() == type_name",
          "2598:             ):",
          "2604:     def parse_id(name: str) -> tuple[str, str]:",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "2180:         if not name.startswith('@'):",
          "2181:             raise ValueError(",
          "2184:         # remove @",
          "2185:         name = name[1:]",
          "",
          "[Removed Lines]",
          "2182:                 \"Not a valid resource ID, must start with @: '{}'\".format(name))",
          "",
          "[Added Lines]",
          "2619:                 \"Not a valid resource ID, must start with @: '{}'\".format(name)",
          "2620:             )",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "2193:         if len(res_id) != 8:",
          "2194:             raise ValueError(",
          "2197:         try:",
          "2198:             return int(res_id, 16), package",
          "2199:         except ValueError:",
          "2200:             raise ValueError(\"ID is not a hex ID: '{}'\".format(res_id))",
          "2203:         \"\"\"",
          "2204:         Returns the XML name for a resource, including the package name if package is None.",
          "2205:         A full name might look like `@com.example:string/foobar`",
          "",
          "[Removed Lines]",
          "2195:                 \"Numerical ID is not 8 characters long: '{}'\".format(res_id))",
          "2202:     def get_resource_xml_name(self, r_id, package=None):",
          "",
          "[Added Lines]",
          "2633:                 \"Numerical ID is not 8 characters long: '{}'\".format(res_id)",
          "2634:             )",
          "2641:     def get_resource_xml_name(",
          "2642:         self, r_id: int, package: Union[str, None] = None",
          "2643:     ) -> str:",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "2239: class PackageContext:",
          "2241:         \"\"\"",
          "2242:         :param ARSCResTablePackage current_package:",
          "2243:         :param StringBlock stringpool_main:",
          "",
          "[Removed Lines]",
          "2240:     def __init__(self, current_package, stringpool_main, mTableStrings, mKeyStrings):",
          "",
          "[Added Lines]",
          "2681:     def __init__(",
          "2682:         self,",
          "2683:         current_package: ARSCResTablePackage,",
          "2684:         stringpool_main: StringBlock,",
          "2685:         mTableStrings: StringBlock,",
          "2686:         mKeyStrings: StringBlock,",
          "2687:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "2249:         self.mKeyStrings = mKeyStrings",
          "2250:         self.current_package = current_package",
          "2253:         return self.current_package.mResId",
          "2256:         self.current_package.mResId = mResId",
          "2259:         return self.current_package.get_name()",
          "2261:     def __repr__(self):",
          "2268: class ARSCHeader:",
          "",
          "[Removed Lines]",
          "2252:     def get_mResId(self):",
          "2255:     def set_mResId(self, mResId):",
          "2258:     def get_package_name(self):",
          "2262:         return \"<PackageContext {}, {}, {}, {}>\".format(self.current_package,",
          "2263:                                                         self.stringpool_main,",
          "2264:                                                         self.mTableStrings,",
          "2265:                                                         self.mKeyStrings)",
          "",
          "[Added Lines]",
          "2699:     def get_mResId(self) -> int:",
          "2702:     def set_mResId(self, mResId: int) -> None:",
          "2705:     def get_package_name(self) -> str:",
          "2709:         return \"<PackageContext {}, {}, {}, {}>\".format(",
          "2710:             self.current_package,",
          "2711:             self.stringpool_main,",
          "2712:             self.mTableStrings,",
          "2713:             self.mKeyStrings,",
          "2714:         )",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "2285:     # This is the minimal size such a header must have. There might be other header data too!",
          "2286:     SIZE = 2 + 2 + 4",
          "2289:         \"\"\"",
          "2291:         :param int expected_type: the type of the header which is expected.",
          "2292:         \"\"\"",
          "2293:         self.start = buff.tell()",
          "2294:         # Make sure we do not read over the buffer:",
          "2295:         if buff.raw.getbuffer().nbytes < self.start + self.SIZE:",
          "2296:             raise ResParserError(",
          "2299:         # Checking for dummy data between elements",
          "2300:         if possible_types:",
          "2301:             while True:",
          "2302:                 cur_pos = buff.tell()",
          "2303:                 self._type, self._header_size, self._size = unpack(",
          "2306:                 # cases where packers set the EndNamespace with zero size: check we are the end and add the prefix + uri",
          "2308:                     self._size = 24",
          "2310:                 if cur_pos == 0 or (",
          "2312:                     break",
          "2313:                 buff.seek(cur_pos)",
          "2314:                 buff.read(1)",
          "2316:         else:",
          "2317:             self._type, self._header_size, self._size = unpack(",
          "2320:         if expected_type and self._type != expected_type:",
          "2324:         # Assert that the read data will fit into the chunk.",
          "2325:         # The total size must be equal or larger than the header size",
          "2326:         if self._header_size < self.SIZE:",
          "2327:             raise ResParserError(",
          "2329:         if self._size < self.SIZE:",
          "2330:             raise ResParserError(",
          "2332:         if self._size < self._header_size:",
          "2333:             raise ResParserError(",
          "2338:     @property",
          "2340:         \"\"\"",
          "2341:         Type identifier for this chunk",
          "2342:         \"\"\"",
          "2343:         return self._type",
          "2345:     @property",
          "2347:         \"\"\"",
          "2348:         Size of the chunk header (in bytes).  Adding this value to",
          "2349:         the address of the chunk allows you to find its associated data",
          "",
          "[Removed Lines]",
          "2288:     def __init__(self, buff, expected_type=None, possible_types=None):",
          "2290:         :param androguard.core.bytecode.BuffHandle buff: the buffer set to the position where the header starts.",
          "2297:                 \"Can not read over the buffer size! Offset={}\".format(self.start))",
          "2304:                     '<HHL', buff.read(self.SIZE))",
          "2307:                 if self._size < self.SIZE and (buff.raw.getbuffer().nbytes == cur_pos + self._header_size + 4 + 4):",
          "2311:                         self._type in possible_types and self._header_size >= self.SIZE and self._size > self.SIZE):",
          "2315:                 logger.warning(\"Appears that dummy data are found between elements!\")",
          "2318:                 '<HHL', buff.read(self.SIZE))",
          "2321:             raise ResParserError(\"Header type is not equal the expected type: Got 0x{:04x}, wanted 0x{:04x}\".format(",
          "2322:                 self._type, expected_type))",
          "2328:                 \"declared header size is smaller than required size of {}! Offset={}\".format(self.SIZE, self.start))",
          "2331:                 \"declared chunk size is smaller than required size of {}! Offset={}\".format(self.SIZE, self.start))",
          "2334:                 \"declared chunk size ({}) is smaller than header size ({})! Offset={}\".format(self._size,",
          "2335:                                                                                               self._header_size,",
          "2336:                                                                                               self.start))",
          "2339:     def type(self):",
          "2346:     def header_size(self):",
          "",
          "[Added Lines]",
          "2737:     def __init__(",
          "2738:         self,",
          "2739:         buff: BinaryIO,",
          "2740:         expected_type: Union[int, None] = None,",
          "2741:         possible_types: Union[set[int], None] = None,",
          "2742:     ) -> None:",
          "2744:         :param buff: the buffer set to the position where the header starts.",
          "2751:                 \"Can not read over the buffer size! Offset={}\".format(",
          "2752:                     self.start",
          "2753:                 )",
          "2754:             )",
          "2761:                     '<HHL', buff.read(self.SIZE)",
          "2762:                 )",
          "2765:                 if self._size < self.SIZE and (",
          "2766:                     buff.raw.getbuffer().nbytes",
          "2767:                     == cur_pos + self._header_size + 4 + 4",
          "2768:                 ):",
          "2772:                     self._type in possible_types",
          "2773:                     and self._header_size >= self.SIZE",
          "2774:                     and self._size > self.SIZE",
          "2775:                 ):",
          "2779:                 logger.warning(",
          "2780:                     \"Appears that dummy data are found between elements!\"",
          "2781:                 )",
          "2784:                 '<HHL', buff.read(self.SIZE)",
          "2785:             )",
          "2788:             raise ResParserError(",
          "2789:                 \"Header type is not equal the expected type: Got 0x{:04x}, wanted 0x{:04x}\".format(",
          "2790:                     self._type, expected_type",
          "2791:                 )",
          "2792:             )",
          "2798:                 \"declared header size is smaller than required size of {}! Offset={}\".format(",
          "2799:                     self.SIZE, self.start",
          "2800:                 )",
          "2801:             )",
          "2804:                 \"declared chunk size is smaller than required size of {}! Offset={}\".format(",
          "2805:                     self.SIZE, self.start",
          "2806:                 )",
          "2807:             )",
          "2810:                 \"declared chunk size ({}) is smaller than header size ({})! Offset={}\".format(",
          "2811:                     self._size, self._header_size, self.start",
          "2812:                 )",
          "2813:             )",
          "2816:     def type(self) -> int:",
          "2823:     def header_size(self) -> int:",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "2352:         return self._header_size",
          "2354:     @property",
          "2356:         \"\"\"",
          "2357:         Total size of this chunk (in bytes).  This is the chunkSize plus",
          "2358:         the size of any data associated with the chunk.  Adding this value",
          "",
          "[Removed Lines]",
          "2355:     def size(self):",
          "",
          "[Added Lines]",
          "2832:     def size(self) -> int:",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "2363:         return self._size",
          "2365:     @property",
          "2367:         \"\"\"",
          "2368:         Get the absolute offset inside the file, where the chunk ends.",
          "2369:         This is equal to `ARSCHeader.start + ARSCHeader.size`.",
          "",
          "[Removed Lines]",
          "2366:     def end(self):",
          "",
          "[Added Lines]",
          "2843:     def end(self) -> int:",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "2371:         return self.start + self.size",
          "2373:     def __repr__(self):",
          "2380: class ARSCResTablePackage:",
          "",
          "[Removed Lines]",
          "2374:         return \"<ARSCHeader idx='0x{:08x}' type='{}' header_size='{}' size='{}'>\".format(self.start,",
          "2375:                                                                                          self.type,",
          "2376:                                                                                          self.header_size,",
          "2377:                                                                                          self.size)",
          "",
          "[Added Lines]",
          "2851:         return \"<ARSCHeader idx='0x{:08x}' type='{}' header_size='{}' size='{}'>\".format(",
          "2852:             self.start, self.type, self.header_size, self.size",
          "2853:         )",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "2384:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#861",
          "2385:     \"\"\"",
          "2388:         self.header = header",
          "2389:         self.start = buff.tell()",
          "2390:         self.id = unpack('<I', buff.read(4))[0]",
          "",
          "[Removed Lines]",
          "2387:     def __init__(self, buff, header):",
          "",
          "[Added Lines]",
          "2863:     def __init__(self, buff: BinaryIO, header: ARSCHeader) -> None:",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "2395:         self.lastPublicKey = unpack('<I', buff.read(4))[0]",
          "2396:         self.mResId = self.id << 24",
          "2399:         name = self.name.decode(\"utf-16\", 'replace')",
          "2401:         return name",
          "",
          "[Removed Lines]",
          "2398:     def get_name(self):",
          "2400:         name = name[:name.find(\"\\x00\")]",
          "",
          "[Added Lines]",
          "2874:     def get_name(self) -> None:",
          "2876:         name = name[: name.find(\"\\x00\")]",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "2406:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1327",
          "2407:     \"\"\"",
          "2410:         self.start = buff.tell()",
          "2411:         self.parent = parent",
          "2412:         self.id = unpack('<B', buff.read(1))[0]",
          "",
          "[Removed Lines]",
          "2409:     def __init__(self, buff, parent=None):",
          "",
          "[Added Lines]",
          "2885:     def __init__(",
          "2886:         self, buff: BinaryIO, parent: Union[PackageContext, None] = None",
          "2887:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "2435:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1364",
          "2436:     \"\"\"",
          "2439:         self.start = buff.tell()",
          "2440:         self.parent = parent",
          "2442:         self.id = unpack('<B', buff.read(1))[0]",
          "2443:         # TODO there is now FLAG_SPARSE: http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1401",
          "2445:         self.reserved = unpack('<H', buff.read(2))[0]",
          "2446:         if self.reserved != 0:",
          "2448:         self.entryCount = unpack('<I', buff.read(4))[0]",
          "2449:         self.entriesStart = unpack('<I', buff.read(4))[0]",
          "2452:         self.parent.set_mResId(self.mResId)",
          "2454:         self.config = ARSCResTableConfig(buff)",
          "2456:         logger.debug(\"Parsed {}\".format(self))",
          "2459:         return self.parent.mTableStrings.getString(self.id - 1)",
          "2462:         return self.parent.get_package_name()",
          "2464:     def __repr__(self):",
          "2473:         )",
          "",
          "[Removed Lines]",
          "2438:     def __init__(self, buff, parent=None):",
          "2444:         self.flags, = unpack('<B', buff.read(1))",
          "2447:             raise ResParserError(\"reserved must be zero!\")",
          "2451:         self.mResId = (0xff000000 & self.parent.get_mResId()) | self.id << 16",
          "2458:     def get_type(self):",
          "2461:     def get_package_name(self):",
          "2465:         return \"<ARSCResType(start=0x%x, id=0x%x, flags=0x%x, entryCount=%d, entriesStart=0x%x, mResId=0x%x, %s)>\" % (",
          "2466:             self.start,",
          "2467:             self.id,",
          "2468:             self.flags,",
          "2469:             self.entryCount,",
          "2470:             self.entriesStart,",
          "2471:             self.mResId,",
          "2472:             \"table:\" + self.parent.mTableStrings.getString(self.id - 1)",
          "",
          "[Added Lines]",
          "2916:     def __init__(",
          "2917:         self, buff: BinaryIO, parent: Union[PackageContext, None] = None",
          "2918:     ) -> None:",
          "2924:         (self.flags,) = unpack('<B', buff.read(1))",
          "2927:             logger.warning(\"reserved must be zero!\")",
          "2931:         self.mResId = (0xFF000000 & self.parent.get_mResId()) | self.id << 16",
          "2938:     def get_type(self) -> str:",
          "2941:     def get_package_name(self) -> str:",
          "2945:         return (",
          "2946:             \"<ARSCResType(start=0x%x, id=0x%x, flags=0x%x, entryCount=%d, entriesStart=0x%x, mResId=0x%x, %s)>\"",
          "2947:             % (",
          "2948:                 self.start,",
          "2949:                 self.id,",
          "2950:                 self.flags,",
          "2951:                 self.entryCount,",
          "2952:                 self.entriesStart,",
          "2953:                 self.mResId,",
          "2954:                 \"table:\" + self.parent.mTableStrings.getString(self.id - 1),",
          "2955:             )",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "2482:     See the definition of `ResTable_config` in",
          "2483:     http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#911",
          "2484:     \"\"\"",
          "2485:     @classmethod",
          "2486:     def default_config(cls):",
          "2487:         if not hasattr(cls, 'DEFAULT'):",
          "2488:             cls.DEFAULT = ARSCResTableConfig(None)",
          "2489:         return cls.DEFAULT",
          "2492:         if buff is not None:",
          "2493:             self.start = buff.tell()",
          "",
          "[Removed Lines]",
          "2491:     def __init__(self, buff=None, **kwargs):",
          "",
          "[Added Lines]",
          "2975:     def __init__(self, buff: Union[BinaryIO, None] = None, **kwargs) -> None:",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "2510:             # uint16_t density",
          "2511:             self.screenType = unpack('<I', buff.read(4))[0]",
          "2530:             # The next three fields seems to be optional",
          "2531:             if self.size >= 32:",
          "",
          "[Removed Lines]",
          "2513:             # struct of",
          "2514:             # uint8_t keyboard",
          "2515:             # uint8_t navigation",
          "2516:             # uint8_t inputFlags",
          "2517:             # uint8_t inputPad0",
          "2518:             self.input = unpack('<I', buff.read(4))[0]",
          "2520:             # struct of",
          "2521:             # uint16_t screenWidth",
          "2522:             # uint16_t screenHeight",
          "2523:             self.screenSize = unpack('<I', buff.read(4))[0]",
          "2525:             # struct of",
          "2526:             # uint16_t sdkVersion",
          "2527:             # uint16_t minorVersion  which should be always 0, as the meaning is not defined",
          "2528:             self.version = unpack('<I', buff.read(4))[0]",
          "",
          "[Added Lines]",
          "2997:             if self.size >= 20:",
          "2998:                 # struct of",
          "2999:                 # uint8_t keyboard",
          "3000:                 # uint8_t navigation",
          "3001:                 # uint8_t inputFlags",
          "3002:                 # uint8_t inputPad0",
          "3003:                 self.input = unpack('<I', buff.read(4))[0]",
          "3004:             else:",
          "3005:                 logger.debug(",
          "3006:                     \"This file does not have input flags! size={}\".format(",
          "3007:                         self.size",
          "3008:                     )",
          "3009:                 )",
          "3010:                 self.input = 0",
          "3012:             if self.size >= 24:",
          "3013:                 # struct of",
          "3014:                 # uint16_t screenWidth",
          "3015:                 # uint16_t screenHeight",
          "3016:                 self.screenSize = unpack('<I', buff.read(4))[0]",
          "3017:             else:",
          "3018:                 logger.debug(",
          "3019:                     \"This file does not have screenSize! size={}\".format(",
          "3020:                         self.size",
          "3021:                     )",
          "3022:                 )",
          "3023:                 self.screenSize = 0",
          "3025:             if self.size >= 28:",
          "3026:                 # struct of",
          "3027:                 # uint16_t sdkVersion",
          "3028:                 # uint16_t minorVersion  which should be always 0, as the meaning is not defined",
          "3029:                 self.version = unpack('<I', buff.read(4))[0]",
          "3030:             else:",
          "3031:                 logger.debug(",
          "3032:                     \"This file does not have version! size={}\".format(",
          "3033:                         self.size",
          "3034:                     )",
          "3035:                 )",
          "3036:                 self.version = 0",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "2533:                 # uint8_t screenLayout",
          "2534:                 # uint8_t uiMode",
          "2535:                 # uint16_t smallestScreenWidthDp",
          "2537:             else:",
          "2538:                 logger.debug(",
          "2540:                 self.screenConfig = 0",
          "2542:             if self.size >= 36:",
          "2543:                 # struct of",
          "2544:                 # uint16_t screenWidthDp",
          "2545:                 # uint16_t screenHeightDp",
          "2547:             else:",
          "2548:                 logger.debug(",
          "2550:                 self.screenSizeDp = 0",
          "2552:             if self.size >= 40:",
          "",
          "[Removed Lines]",
          "2536:                 self.screenConfig, = unpack('<I', buff.read(4))",
          "2539:                     \"This file does not have a screenConfig! size={}\".format(self.size))",
          "2546:                 self.screenSizeDp, = unpack('<I', buff.read(4))",
          "2549:                     \"This file does not have a screenSizeDp! size={}\".format(self.size))",
          "",
          "[Added Lines]",
          "3044:                 (self.screenConfig,) = unpack('<I', buff.read(4))",
          "3047:                     \"This file does not have a screenConfig! size={}\".format(",
          "3048:                         self.size",
          "3049:                     )",
          "3050:                 )",
          "3057:                 (self.screenSizeDp,) = unpack('<I', buff.read(4))",
          "3060:                     \"This file does not have a screenSizeDp! size={}\".format(",
          "3061:                         self.size",
          "3062:                     )",
          "3063:                 )",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "2560:                 # uint8_t screenLayout2",
          "2561:                 # uint8_t colorMode",
          "2562:                 # uint16_t screenConfigPad2",
          "2564:             else:",
          "2565:                 logger.debug(",
          "2567:                 self.screenConfig2 = 0",
          "2569:             self.exceedingSize = self.size - (buff.tell() - self.start)",
          "",
          "[Removed Lines]",
          "2563:                 self.screenConfig2, = unpack(\"<I\", buff.read(4))",
          "2566:                     \"This file does not have a screenConfig2! size={}\".format(self.size))",
          "",
          "[Added Lines]",
          "3077:                 (self.screenConfig2,) = unpack(\"<I\", buff.read(4))",
          "3080:                     \"This file does not have a screenConfig2! size={}\".format(",
          "3081:                         self.size",
          "3082:                     )",
          "3083:                 )",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "2574:         else:",
          "2575:             self.start = 0",
          "2576:             self.size = 0",
          "2613:             # TODO add this some day...",
          "2614:             self.screenConfig2 = 0",
          "",
          "[Removed Lines]",
          "2577:             self.imsi = \\",
          "2578:                 ((kwargs.pop('mcc', 0) & 0xffff) << 0) + \\",
          "2579:                 ((kwargs.pop('mnc', 0) & 0xffff) << 16)",
          "2581:             self.locale = 0",
          "2582:             for char_ix, char in kwargs.pop('locale', \"\")[0:4]:",
          "2583:                 self.locale += (ord(char) << (char_ix * 8))",
          "2585:             self.screenType = \\",
          "2586:                 ((kwargs.pop('orientation', 0) & 0xff) << 0) + \\",
          "2587:                 ((kwargs.pop('touchscreen', 0) & 0xff) << 8) + \\",
          "2588:                 ((kwargs.pop('density', 0) & 0xffff) << 16)",
          "2590:             self.input = \\",
          "2591:                 ((kwargs.pop('keyboard', 0) & 0xff) << 0) + \\",
          "2592:                 ((kwargs.pop('navigation', 0) & 0xff) << 8) + \\",
          "2593:                 ((kwargs.pop('inputFlags', 0) & 0xff) << 16) + \\",
          "2594:                 ((kwargs.pop('inputPad0', 0) & 0xff) << 24)",
          "2596:             self.screenSize = \\",
          "2597:                 ((kwargs.pop('screenWidth', 0) & 0xffff) << 0) + \\",
          "2598:                 ((kwargs.pop('screenHeight', 0) & 0xffff) << 16)",
          "2600:             self.version = \\",
          "2601:                 ((kwargs.pop('sdkVersion', 0) & 0xffff) << 0) + \\",
          "2602:                 ((kwargs.pop('minorVersion', 0) & 0xffff) << 16)",
          "2604:             self.screenConfig = \\",
          "2605:                 ((kwargs.pop('screenLayout', 0) & 0xff) << 0) + \\",
          "2606:                 ((kwargs.pop('uiMode', 0) & 0xff) << 8) + \\",
          "2607:                 ((kwargs.pop('smallestScreenWidthDp', 0) & 0xffff) << 16)",
          "2609:             self.screenSizeDp = \\",
          "2610:                 ((kwargs.pop('screenWidthDp', 0) & 0xffff) << 0) + \\",
          "2611:                 ((kwargs.pop('screenHeightDp', 0) & 0xffff) << 16)",
          "",
          "[Added Lines]",
          "3094:             self.imsi = ((kwargs.pop('mcc', 0) & 0xFFFF) << 0) + (",
          "3095:                 (kwargs.pop('mnc', 0) & 0xFFFF) << 16",
          "3096:             )",
          "3098:             temp_locale = kwargs.pop('locale', 0)",
          "3099:             if isinstance(temp_locale, str):",
          "3100:                 self.set_language_and_region(temp_locale)",
          "3101:             else:",
          "3102:                 self.locale = temp_locale",
          "3104:             for char_ix, char in kwargs.pop('locale', \"\")[0:4]:",
          "3105:                 self.locale += ord(char) << (char_ix * 8)",
          "3107:             self.screenType = (",
          "3108:                 ((kwargs.pop('orientation', 0) & 0xFF) << 0)",
          "3109:                 + ((kwargs.pop('touchscreen', 0) & 0xFF) << 8)",
          "3110:                 + ((kwargs.pop('density', 0) & 0xFFFF) << 16)",
          "3111:             )",
          "3113:             self.input = (",
          "3114:                 ((kwargs.pop('keyboard', 0) & 0xFF) << 0)",
          "3115:                 + ((kwargs.pop('navigation', 0) & 0xFF) << 8)",
          "3116:                 + ((kwargs.pop('inputFlags', 0) & 0xFF) << 16)",
          "3117:                 + ((kwargs.pop('inputPad0', 0) & 0xFF) << 24)",
          "3118:             )",
          "3120:             self.screenSize = (",
          "3121:                 (kwargs.pop('screenWidth', 0) & 0xFFFF) << 0",
          "3122:             ) + ((kwargs.pop('screenHeight', 0) & 0xFFFF) << 16)",
          "3124:             self.version = ((kwargs.pop('sdkVersion', 0) & 0xFFFF) << 0) + (",
          "3125:                 (kwargs.pop('minorVersion', 0) & 0xFFFF) << 16",
          "3126:             )",
          "3128:             self.screenConfig = (",
          "3129:                 ((kwargs.pop('screenLayout', 0) & 0xFF) << 0)",
          "3130:                 + ((kwargs.pop('uiMode', 0) & 0xFF) << 8)",
          "3131:                 + ((kwargs.pop('smallestScreenWidthDp', 0) & 0xFFFF) << 16)",
          "3132:             )",
          "3134:             self.screenSizeDp = (",
          "3135:                 (kwargs.pop('screenWidthDp', 0) & 0xFFFF) << 0",
          "3136:             ) + ((kwargs.pop('screenHeightDp', 0) & 0xFFFF) << 16)",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "2618:     def _unpack_language_or_region(self, char_in, char_base):",
          "2619:         char_out = \"\"",
          "2620:         if char_in[0] & 0x80:",
          "2624:             char_out += chr(first + char_base)",
          "2625:             char_out += chr(second + char_base)",
          "2626:             char_out += chr(third + char_base)",
          "",
          "[Removed Lines]",
          "2621:             first = char_in[1] & 0x1f",
          "2622:             second = ((char_in[1] & 0xe0) >> 5) + ((char_in[0] & 0x03) << 3)",
          "2623:             third = (char_in[0] & 0x7c) >> 2",
          "",
          "[Added Lines]",
          "3146:             first = char_in[1] & 0x1F",
          "3147:             second = ((char_in[1] & 0xE0) >> 5) + ((char_in[0] & 0x03) << 3)",
          "3148:             third = (char_in[0] & 0x7C) >> 2",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "2631:                 char_out += chr(char_in[1])",
          "2632:         return char_out",
          "2635:         \"\"\"",
          "2636:         Returns the combined language+region string or \\x00\\x00 for the default locale",
          "2637:         :return:",
          "2638:         \"\"\"",
          "2639:         if self.locale != 0:",
          "2640:             _language = self._unpack_language_or_region(",
          "2642:             _region = self._unpack_language_or_region(",
          "2644:             return (_language + \"-r\" + _region) if _region else _language",
          "2645:         return \"\\x00\\x00\"",
          "2648:         \"\"\"",
          "2649:         Here for legacy reasons.",
          "",
          "[Removed Lines]",
          "2634:     def get_language_and_region(self):",
          "2641:                 [self.locale & 0xff, (self.locale & 0xff00) >> 8, ], ord('a'))",
          "2643:                 [(self.locale & 0xff0000) >> 16, (self.locale & 0xff000000) >> 24, ], ord('0'))",
          "2647:     def get_config_name_friendly(self):",
          "",
          "[Added Lines]",
          "3159:     def _pack_language_or_region(self, char_in: str) -> list[int]:",
          "3160:         char_out = [0x00, 0x00]",
          "3161:         if len(char_in) != 2:",
          "3162:             return char_out",
          "3163:         char_out[0] = ord(char_in[0])",
          "3164:         char_out[1] = ord(char_in[1])",
          "3165:         return char_out",
          "3167:     def set_language_and_region(self, language_region):",
          "3168:         try:",
          "3169:             language, region = language_region.split(\"-r\")",
          "3170:         except ValueError:",
          "3171:             language, region = language_region, None",
          "3172:         language_bytes = self._pack_language_or_region(language)",
          "3173:         if region:",
          "3174:             region_bytes = self._pack_language_or_region(region)",
          "3175:         else:",
          "3176:             region_bytes = [0x00, 0x00]",
          "3177:         self.locale = (",
          "3178:             language_bytes[0]",
          "3179:             | (language_bytes[1] << 8)",
          "3180:             | (region_bytes[0] << 16)",
          "3181:             | (region_bytes[1] << 24)",
          "3182:         )",
          "3184:     def get_language_and_region(self) -> str:",
          "3191:                 [",
          "3192:                     self.locale & 0xFF,",
          "3193:                     (self.locale & 0xFF00) >> 8,",
          "3194:                 ],",
          "3195:                 ord('a'),",
          "3196:             )",
          "3198:                 [",
          "3199:                     (self.locale & 0xFF0000) >> 16,",
          "3200:                     (self.locale & 0xFF000000) >> 24,",
          "3201:                 ],",
          "3202:                 ord('0'),",
          "3203:             )",
          "3207:     def get_config_name_friendly(self) -> str:",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "2652:         \"\"\"",
          "2653:         return self.get_qualifier()",
          "2656:         \"\"\"",
          "2657:         Return resource name qualifier for the current configuration.",
          "2658:         for example",
          "",
          "[Removed Lines]",
          "2655:     def get_qualifier(self):",
          "",
          "[Added Lines]",
          "3215:     def get_qualifier(self) -> str:",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "2677:         if self.locale != 0:",
          "2678:             res.append(self.get_language_and_region())",
          "2681:         if (screenLayout & MASK_LAYOUTDIR) != 0:",
          "2682:             if screenLayout & MASK_LAYOUTDIR == LAYOUTDIR_LTR:",
          "2683:                 res.append(\"ldltr\")",
          "",
          "[Removed Lines]",
          "2680:         screenLayout = self.screenConfig & 0xff",
          "",
          "[Added Lines]",
          "3240:         screenLayout = self.screenConfig & 0xFF",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "2707:             elif screenLayout & MASK_SCREENSIZE == SCREENSIZE_XLARGE:",
          "2708:                 res.append(\"xlarge\")",
          "2709:             else:",
          "2711:         if (screenLayout & MASK_SCREENLONG) != 0:",
          "2712:             if screenLayout & MASK_SCREENLONG == SCREENLONG_NO:",
          "2713:                 res.append(\"notlong\")",
          "2714:             elif screenLayout & MASK_SCREENLONG == SCREENLONG_YES:",
          "2715:                 res.append(\"long\")",
          "2716:             else:",
          "2720:         if (screenLayout2 & MASK_SCREENROUND) != 0:",
          "2721:             if screenLayout2 & MASK_SCREENROUND == SCREENROUND_NO:",
          "2722:                 res.append(\"notround\")",
          "2723:             elif screenLayout2 & MASK_SCREENROUND == SCREENROUND_YES:",
          "2724:                 res.append(\"round\")",
          "2725:             else:",
          "2729:         if (colorMode & MASK_WIDE_COLOR_GAMUT) != 0:",
          "2730:             if colorMode & MASK_WIDE_COLOR_GAMUT == WIDE_COLOR_GAMUT_NO:",
          "2731:                 res.append(\"nowidecg\")",
          "2732:             elif colorMode & MASK_WIDE_COLOR_GAMUT == WIDE_COLOR_GAMUT_YES:",
          "2733:                 res.append(\"widecg\")",
          "2734:             else:",
          "2737:         if (colorMode & MASK_HDR) != 0:",
          "2738:             if colorMode & MASK_HDR == HDR_NO:",
          "",
          "[Removed Lines]",
          "2710:                 res.append(\"screenLayoutSize_%d\" % (screenLayout & MASK_SCREENSIZE))",
          "2717:                 res.append(\"screenLayoutLong_%d\" % (screenLayout & MASK_SCREENLONG))",
          "2719:         screenLayout2 = self.screenConfig2 & 0xff",
          "2726:                 res.append(\"screenRound_%d\" % (screenLayout2 & MASK_SCREENROUND))",
          "2728:         colorMode = (self.screenConfig2 & 0xff00) >> 8",
          "2735:                 res.append(\"wideColorGamut_%d\" % (colorMode & MASK_WIDE_COLOR_GAMUT))",
          "",
          "[Added Lines]",
          "3270:                 res.append(",
          "3271:                     \"screenLayoutSize_%d\" % (screenLayout & MASK_SCREENSIZE)",
          "3272:                 )",
          "3279:                 res.append(",
          "3280:                     \"screenLayoutLong_%d\" % (screenLayout & MASK_SCREENLONG)",
          "3281:                 )",
          "3283:         screenLayout2 = self.screenConfig2 & 0xFF",
          "3290:                 res.append(",
          "3291:                     \"screenRound_%d\" % (screenLayout2 & MASK_SCREENROUND)",
          "3292:                 )",
          "3294:         colorMode = (self.screenConfig2 & 0xFF00) >> 8",
          "3301:                 res.append(",
          "3302:                     \"wideColorGamut_%d\" % (colorMode & MASK_WIDE_COLOR_GAMUT)",
          "3303:                 )",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "2742:             else:",
          "2743:                 res.append(\"hdr_%d\" % (colorMode & MASK_HDR))",
          "2746:         if orientation != ORIENTATION_ANY:",
          "2747:             if orientation == ORIENTATION_PORT:",
          "2748:                 res.append(\"port\")",
          "",
          "[Removed Lines]",
          "2745:         orientation = self.screenType & 0xff",
          "",
          "[Added Lines]",
          "3313:         orientation = self.screenType & 0xFF",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "2753:             else:",
          "2754:                 res.append(\"orientation_%d\" % orientation)",
          "2757:         if (uiMode & MASK_UI_MODE_TYPE) != UI_MODE_TYPE_ANY:",
          "2758:             ui_mode = uiMode & MASK_UI_MODE_TYPE",
          "2759:             if ui_mode == UI_MODE_TYPE_DESK:",
          "",
          "[Removed Lines]",
          "2756:         uiMode = (self.screenConfig & 0xff00) >> 8",
          "",
          "[Added Lines]",
          "3324:         uiMode = (self.screenConfig & 0xFF00) >> 8",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "2779:             else:",
          "2780:                 res.append(\"uiModeNight_%d\" % (uiMode & MASK_UI_MODE_NIGHT))",
          "2783:         if density != DENSITY_DEFAULT:",
          "2784:             if density == DENSITY_LOW:",
          "2785:                 res.append(\"ldpi\")",
          "",
          "[Removed Lines]",
          "2782:         density = (self.screenType & 0xffff0000) >> 16",
          "",
          "[Added Lines]",
          "3350:         density = (self.screenType & 0xFFFF0000) >> 16",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "2802:             else:",
          "2803:                 res.append(\"%ddpi\" % (density))",
          "2806:         if touchscreen != TOUCHSCREEN_ANY:",
          "2807:             if touchscreen == TOUCHSCREEN_NOTOUCH:",
          "2808:                 res.append(\"notouch\")",
          "",
          "[Removed Lines]",
          "2805:         touchscreen = (self.screenType & 0xff00) >> 8",
          "",
          "[Added Lines]",
          "3373:         touchscreen = (self.screenType & 0xFF00) >> 8",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "2813:             else:",
          "2814:                 res.append(\"touchscreen_%d\" % touchscreen)",
          "2820:         if inputFlags & MASK_KEYSHIDDEN != 0:",
          "2821:             input_flags = inputFlags & MASK_KEYSHIDDEN",
          "",
          "[Removed Lines]",
          "2816:         keyboard = self.input & 0xff",
          "2817:         navigation = (self.input & 0xff00) >> 8",
          "2818:         inputFlags = (self.input & 0xff0000) >> 16",
          "",
          "[Added Lines]",
          "3384:         keyboard = self.input & 0xFF",
          "3385:         navigation = (self.input & 0xFF00) >> 8",
          "3386:         inputFlags = (self.input & 0xFF0000) >> 16",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "2860:         screenSize = self.screenSize",
          "2861:         if screenSize != 0:",
          "2864:             res.append(\"%dx%d\" % (screenWidth, screenHeight))",
          "2866:         version = self.version",
          "2867:         if version != 0:",
          "2870:             res.append(\"v%d\" % sdkVersion)",
          "2871:             if minorVersion != 0:",
          "2872:                 res.append(\".%d\" % minorVersion)",
          "2874:         return \"-\".join(res)",
          "2886:         return x",
          "2889:         \"\"\"",
          "2890:         Test if this is a default resource, which matches all",
          "",
          "[Removed Lines]",
          "2862:             screenWidth = self.screenSize & 0xffff",
          "2863:             screenHeight = (self.screenSize & 0xffff0000) >> 16",
          "2868:             sdkVersion = self.version & 0xffff",
          "2869:             minorVersion = (self.version & 0xffff0000) >> 16",
          "2876:     def get_language(self):",
          "2877:         x = self.locale & 0x0000ffff",
          "2878:         return chr(x & 0x00ff) + chr((x & 0xff00) >> 8)",
          "2880:     def get_country(self):",
          "2881:         x = (self.locale & 0xffff0000) >> 16",
          "2882:         return chr(x & 0x00ff) + chr((x & 0xff00) >> 8)",
          "2884:     def get_density(self):",
          "2885:         x = ((self.screenType >> 16) & 0xffff)",
          "2888:     def is_default(self):",
          "",
          "[Added Lines]",
          "3430:             screenWidth = self.screenSize & 0xFFFF",
          "3431:             screenHeight = (self.screenSize & 0xFFFF0000) >> 16",
          "3436:             sdkVersion = self.version & 0xFFFF",
          "3437:             minorVersion = (self.version & 0xFFFF0000) >> 16",
          "3444:     def get_language(self) -> str:",
          "3445:         x = self.locale & 0x0000FFFF",
          "3446:         return chr(x & 0x00FF) + chr((x & 0xFF00) >> 8)",
          "3448:     def get_country(self) -> str:",
          "3449:         x = (self.locale & 0xFFFF0000) >> 16",
          "3450:         return chr(x & 0x00FF) + chr((x & 0xFF00) >> 8)",
          "3452:     def get_density(self) -> str:",
          "3453:         x = (self.screenType >> 16) & 0xFFFF",
          "3456:     def is_default(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "2914:         return self._get_tuple() == other._get_tuple()",
          "2916:     def __repr__(self):",
          "2920: class ARSCResTableEntry:",
          "2921:     \"\"\"",
          "2922:     A `ResTable_entry`.",
          "2925:     \"\"\"",
          "2926:     # If set, this is a complex entry, holding a set of name/value",
          "2927:     # mappings.  It is followed by an array of ResTable_map structures.",
          "2928:     FLAG_COMPLEX = 1",
          "",
          "[Removed Lines]",
          "2917:         return \"<ARSCResTableConfig '{}'={}>\".format(self.get_qualifier(), repr(self._get_tuple()))",
          "2924:     See http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1458",
          "",
          "[Added Lines]",
          "3485:         return \"<ARSCResTableConfig '{}'={}>\".format(",
          "3486:             self.get_qualifier(), repr(self._get_tuple())",
          "3487:         )",
          "3494:     See https://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h;l=1522;drc=442fcb158a5b2e23340b74ce2e29e5e1f5bf9d66;bpv=0;bpt=0",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "2936:     # linking with other resource tables.",
          "2937:     FLAG_WEAK = 4",
          "2941:         self.mResId = mResId",
          "2942:         self.parent = parent",
          "",
          "[Removed Lines]",
          "2939:     def __init__(self, buff, mResId, parent=None):",
          "2940:         self.start = buff.tell()",
          "",
          "[Added Lines]",
          "3510:     # If set, this is a compact entry with data type and value directly",
          "3511:     # encoded in this entry",
          "3512:     FLAG_COMPACT = 8",
          "3514:     def __init__(",
          "3515:         self,",
          "3516:         buff: BinaryIO,",
          "3517:         entry_offset: int,",
          "3518:         expected_end_of_chunk: int,",
          "3519:         mResId: int,",
          "3520:         parent: Union[PackageContext, None] = None,",
          "3521:     ) -> None:",
          "3522:         self.start = buff.seek(entry_offset)",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "2947:         self.index = unpack('<I', buff.read(4))[0]",
          "2949:         if self.is_complex():",
          "2951:         else:",
          "2952:             # If FLAG_COMPLEX is not set, a Res_value structure will follow",
          "2953:             self.key = ARSCResStringPoolRef(buff, self.parent)",
          "",
          "[Removed Lines]",
          "2950:             self.item = ARSCComplex(buff, parent)",
          "",
          "[Added Lines]",
          "3532:             self.item = ARSCComplex(buff, expected_end_of_chunk, parent)",
          "3533:         elif self.is_compact():",
          "3534:             self.key = self.size",
          "3535:             self.data = self.index",
          "3536:             self.datatype = (self.flags >> 8) & 0xFF",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "2955:         if self.is_weak():",
          "2956:             logger.debug(\"Parsed {}\".format(self))",
          "2959:         return self.index",
          "2962:         return self.parent.mKeyStrings.getString(self.index)",
          "2968:         return (self.flags & self.FLAG_PUBLIC) != 0",
          "2971:         return (self.flags & self.FLAG_COMPLEX) != 0",
          "2974:         return (self.flags & self.FLAG_WEAK) != 0",
          "2976:     def __repr__(self):",
          "2978:             self.start,",
          "2979:             self.mResId,",
          "2981:             self.flags,",
          "2986: class ARSCComplex:",
          "",
          "[Removed Lines]",
          "2958:     def get_index(self):",
          "2961:     def get_value(self):",
          "2964:     def get_key_data(self):",
          "2965:         return self.key.get_data_value()",
          "2967:     def is_public(self):",
          "2970:     def is_complex(self):",
          "2973:     def is_weak(self):",
          "2977:         return \"<ARSCResTableEntry idx='0x{:08x}' mResId='0x{:08x}' size='{}' flags='0x{:02x}' index='0x{:x}' holding={}>\".format(",
          "2980:             self.size,",
          "2982:             self.index,",
          "2983:             self.item if self.is_complex() else self.key)",
          "",
          "[Added Lines]",
          "3544:     def get_index(self) -> int:",
          "3547:     def get_value(self) -> str:",
          "3550:     def get_key_data(self) -> str:",
          "3551:         if self.is_compact():",
          "3552:             return self.parent.stringpool_main.getString(self.key)",
          "3553:         else:",
          "3554:             return self.key.get_data_value()",
          "3556:     def is_public(self) -> bool:",
          "3559:     def is_complex(self) -> bool:",
          "3562:     def is_compact(self) -> bool:",
          "3563:         return (self.flags & self.FLAG_COMPACT) != 0",
          "3565:     def is_weak(self) -> bool:",
          "3569:         return \"<ARSCResTableEntry idx='0x{:08x}' mResId='0x{:08x}' flags='0x{:02x}' holding={}>\".format(",
          "3573:             self.item if self.is_complex() else self.key,",
          "3574:         )",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "2994:     and http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#1498 for `ResTable_map`",
          "2995:     \"\"\"",
          "2998:         self.start = buff.tell()",
          "2999:         self.parent = parent",
          "",
          "[Removed Lines]",
          "2997:     def __init__(self, buff, parent=None):",
          "",
          "[Added Lines]",
          "3588:     def __init__(",
          "3589:         self,",
          "3590:         buff: BinaryIO,",
          "3591:         expected_end_of_chunk: int,",
          "3592:         parent: Union[PackageContext, None] = None,",
          "3593:     ) -> None:",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "3006:         # these are structs of ResTable_ref and Res_value",
          "3007:         # ResTable_ref is a uint32_t.",
          "3008:         for i in range(0, self.count):",
          "3012:     def __repr__(self):",
          "3016: class ARSCResStringPoolRef:",
          "",
          "[Removed Lines]",
          "3009:             self.items.append((unpack('<I', buff.read(4))[",
          "3010:                               0], ARSCResStringPoolRef(buff, self.parent)))",
          "3013:         return \"<ARSCComplex idx='0x{:08x}' parent='{}' count='{}'>\".format(self.start, self.id_parent, self.count)",
          "",
          "[Added Lines]",
          "3605:             if buff.tell() + 4 > expected_end_of_chunk:",
          "3606:                 print(",
          "3607:                     f\"We are out of bound with this complex entry. Count: {self.count}\"",
          "3608:                 )",
          "3609:                 break",
          "3610:             self.items.append(",
          "3611:                 (",
          "3612:                     unpack('<I', buff.read(4))[0],",
          "3613:                     ARSCResStringPoolRef(buff, self.parent),",
          "3614:                 )",
          "3615:             )",
          "3618:         return \"<ARSCComplex idx='0x{:08x}' parent='{}' count='{}'>\".format(",
          "3619:             self.start, self.id_parent, self.count",
          "3620:         )",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "3021:     See: http://androidxref.com/9.0.0_r3/xref/frameworks/base/libs/androidfw/include/androidfw/ResourceTypes.h#262",
          "3022:     \"\"\"",
          "3025:         self.start = buff.tell()",
          "3026:         self.parent = parent",
          "3030:         try:",
          "3031:             if self.res0 != 0:",
          "3032:                 logger.warning(\"res0 must be always zero!\")",
          "",
          "[Removed Lines]",
          "3024:     def __init__(self, buff, parent=None):",
          "3028:         self.size, = unpack(\"<H\", buff.read(2))",
          "3029:         self.res0, = unpack(\"<B\", buff.read(1))",
          "",
          "[Added Lines]",
          "3631:     def __init__(",
          "3632:         self, buff: BinaryIO, parent: Union[PackageContext, None] = None",
          "3633:     ) -> None:",
          "3637:         (self.size,) = unpack(\"<H\", buff.read(2))",
          "3638:         (self.res0,) = unpack(\"<B\", buff.read(1))",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "3036:         except Exception as e:",
          "3037:             logger.error(e)",
          "3040:         return self.parent.stringpool_main.getString(self.data)",
          "3043:         return self.data",
          "3046:         return self.data_type",
          "3049:         return TYPE_TABLE[self.data_type]",
          "3052:         \"\"\"",
          "3053:         Return the formatted (interpreted) data according to `data_type`.",
          "3054:         \"\"\"",
          "3055:         return format_value(",
          "3059:         )",
          "3062:         \"\"\"",
          "3063:         Returns True if the Res_value is actually a reference to another resource",
          "3064:         \"\"\"",
          "",
          "[Removed Lines]",
          "3039:     def get_data_value(self):",
          "3042:     def get_data(self):",
          "3045:     def get_data_type(self):",
          "3048:     def get_data_type_string(self):",
          "3051:     def format_value(self):",
          "3056:             self.data_type,",
          "3057:             self.data,",
          "3058:             self.parent.stringpool_main.getString",
          "3061:     def is_reference(self):",
          "",
          "[Added Lines]",
          "3648:     def get_data_value(self) -> str:",
          "3651:     def get_data(self) -> int:",
          "3654:     def get_data_type(self) -> bytes:",
          "3657:     def get_data_type_string(self) -> str:",
          "3660:     def format_value(self) -> str:",
          "3665:             self.data_type, self.data, self.parent.stringpool_main.getString",
          "3668:     def is_reference(self) -> bool:",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "3069:             self.start,",
          "3070:             self.size,",
          "3071:             TYPE_TABLE.get(self.data_type, \"0x%x\" % self.data_type),",
          "3076:     \"\"\"",
          "3077:     Return a string containing all resources packages ordered by packagename, locale and type.",
          "",
          "[Removed Lines]",
          "3072:             self.data)",
          "3075: def get_arsc_info(arscobj):",
          "",
          "[Added Lines]",
          "3679:             self.data,",
          "3680:         )",
          "3683: def get_arsc_info(arscobj: ARSCParser) -> str:",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "3087:             for ttype in arscobj.get_types(package, locale):",
          "3088:                 buff += \"\\t\\t\" + ttype + \":\\n\"",
          "3089:                 try:",
          "3092:                     for i in tmp_buff:",
          "3093:                         buff += \"\\t\\t\\t\" + i + \"\\n\"",
          "3094:                 except AttributeError:",
          "",
          "[Removed Lines]",
          "3090:                     tmp_buff = getattr(arscobj, \"get_\" + ttype + \"_resources\")(",
          "3091:                         package, locale).decode(\"utf-8\", 'replace').split(\"\\n\")",
          "",
          "[Added Lines]",
          "3698:                     tmp_buff = (",
          "3699:                         getattr(arscobj, \"get_\" + ttype + \"_resources\")(",
          "3700:                             package, locale",
          "3701:                         )",
          "3702:                         .decode(\"utf-8\", 'replace')",
          "3703:                         .split(\"\\n\")",
          "3704:                     )",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/resources/public.py||mobsf/StaticAnalyzer/tools/androguard4/resources/public.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/resources/public.py -> mobsf/StaticAnalyzer/tools/androguard4/resources/public.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:                 _public_res[_type][_name] = _id",
          "22:     else:",
          "23:         raise Exception(",
          "26: SYSTEM_RESOURCES = {",
          "27:     \"attributes\": {",
          "28:         \"forward\": {k: v for k, v in _public_res['attr'].items()},",
          "30:     },",
          "31:     \"styles\": {",
          "32:         \"forward\": {k: v for k, v in _public_res['style'].items()},",
          "35: }",
          "",
          "[Removed Lines]",
          "24:             \"need to copy the sdk/platforms/android-?/data/res/values/public.xml here\")",
          "29:         \"inverse\": {v: k for k, v in _public_res['attr'].items()}",
          "33:         \"inverse\": {v: k for k, v in _public_res['style'].items()}",
          "34:     }",
          "",
          "[Added Lines]",
          "24:             \"need to copy the sdk/platforms/android-?/data/res/values/public.xml here\"",
          "25:         )",
          "30:         \"inverse\": {v: k for k, v in _public_res['attr'].items()},",
          "34:         \"inverse\": {v: k for k, v in _public_res['style'].items()},",
          "35:     },",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/types.py||mobsf/StaticAnalyzer/tools/androguard4/types.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/types.py -> mobsf/StaticAnalyzer/tools/androguard4/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: # The 'data' is either 0 or 1, for input \"false\" or \"true\" respectively.",
          "38: TYPE_INT_BOOLEAN = 0x12",
          "39: # Beginning of color integer flavors...",
          "41: # The 'data' is a raw integer value of the form #aarrggbb.",
          "43: # The 'data' is a raw integer value of the form #rrggbb.",
          "45: # The 'data' is a raw integer value of the form #argb.",
          "47: # The 'data' is a raw integer value of the form #rgb.",
          "49: # ...end of integer flavors.",
          "51: # ...end of integer flavors.",
          "",
          "[Removed Lines]",
          "40: TYPE_FIRST_COLOR_INT = 0x1c",
          "42: TYPE_INT_COLOR_ARGB8 = 0x1c",
          "44: TYPE_INT_COLOR_RGB8 = 0x1d",
          "46: TYPE_INT_COLOR_ARGB4 = 0x1e",
          "48: TYPE_INT_COLOR_RGB4 = 0x1f",
          "50: TYPE_LAST_COLOR_INT = 0x1f",
          "52: TYPE_LAST_INT = 0x1f",
          "",
          "[Added Lines]",
          "40: TYPE_FIRST_COLOR_INT = 0x1C",
          "42: TYPE_INT_COLOR_ARGB8 = 0x1C",
          "44: TYPE_INT_COLOR_RGB8 = 0x1D",
          "46: TYPE_INT_COLOR_ARGB4 = 0x1E",
          "48: TYPE_INT_COLOR_RGB4 = 0x1F",
          "50: TYPE_LAST_COLOR_INT = 0x1F",
          "52: TYPE_LAST_INT = 0x1F",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/tools/androguard4/util.py||mobsf/StaticAnalyzer/tools/androguard4/util.py": [
          "File: mobsf/StaticAnalyzer/tools/androguard4/util.py -> mobsf/StaticAnalyzer/tools/androguard4/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf_8 -*-",
          "2: # flake8: noqa",
          "3: from typing import Union",
          "5: from asn1crypto.x509 import Name",
          "8: def get_certificate_name_string(",
          "9:     name: Union[dict, Name], short: bool = False, delimiter: str = ', '",
          "10: ) -> str:",
          "11:     \"\"\"",
          "12:     Format the Name type of a X509 Certificate in a human readable form.",
          "14:     :param name: Name object to return the DN from",
          "15:     :param short: Use short form (default: False)",
          "16:     :param delimiter: Delimiter string or character between two parts (default: ', ')",
          "18:     :type name: dict or :class:`asn1crypto.x509.Name`",
          "19:     :type short: boolean",
          "20:     :type delimiter: str",
          "22:     :rtype: str",
          "23:     \"\"\"",
          "24:     if isinstance(name, Name):  # asn1crypto.x509.Name):",
          "25:         name = name.native",
          "27:     # For the shortform, we have a lookup table",
          "28:     # See RFC4514 for more details",
          "29:     _ = {",
          "30:         'business_category': (\"businessCategory\", \"businessCategory\"),",
          "31:         'serial_number': (\"serialNumber\", \"serialNumber\"),",
          "32:         'country_name': (\"C\", \"countryName\"),",
          "33:         'postal_code': (\"postalCode\", \"postalCode\"),",
          "34:         'state_or_province_name': (\"ST\", \"stateOrProvinceName\"),",
          "35:         'locality_name': (\"L\", \"localityName\"),",
          "36:         'street_address': (\"street\", \"streetAddress\"),",
          "37:         'organization_name': (\"O\", \"organizationName\"),",
          "38:         'organizational_unit_name': (\"OU\", \"organizationalUnitName\"),",
          "39:         'title': (\"title\", \"title\"),",
          "40:         'common_name': (\"CN\", \"commonName\"),",
          "41:         'initials': (\"initials\", \"initials\"),",
          "42:         'generation_qualifier': (\"generationQualifier\", \"generationQualifier\"),",
          "43:         'surname': (\"SN\", \"surname\"),",
          "44:         'given_name': (\"GN\", \"givenName\"),",
          "45:         'name': (\"name\", \"name\"),",
          "46:         'pseudonym': (\"pseudonym\", \"pseudonym\"),",
          "47:         'dn_qualifier': (\"dnQualifier\", \"dnQualifier\"),",
          "48:         'telephone_number': (\"telephoneNumber\", \"telephoneNumber\"),",
          "49:         'email_address': (\"E\", \"emailAddress\"),",
          "50:         'domain_component': (\"DC\", \"domainComponent\"),",
          "51:         'name_distinguisher': (\"nameDistinguisher\", \"nameDistinguisher\"),",
          "52:         'organization_identifier': (",
          "53:             \"organizationIdentifier\",",
          "54:             \"organizationIdentifier\",",
          "55:         ),",
          "56:     }",
          "57:     return delimiter.join(",
          "58:         [",
          "59:             \"{}={}\".format(",
          "60:                 _.get(attr, (attr, attr))[0 if short else 1], name[attr]",
          "61:             )",
          "62:             for attr in name",
          "63:         ]",
          "64:     )",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/apk.py||mobsf/StaticAnalyzer/views/android/apk.py": [
          "File: mobsf/StaticAnalyzer/views/android/apk.py -> mobsf/StaticAnalyzer/views/android/apk.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:         app_dic['certz'] = get_hardcoded_cert_keystore(",
          "174:             checksum,",
          "175:             app_dic['files'])",
          "177:         andro_apk = parse_apk(",
          "178:             checksum,",
          "179:             app_dic['app_path'])",
          "",
          "[Removed Lines]",
          "176:         # Parse APK with Androguard",
          "",
          "[Added Lines]",
          "176:         # Parse APK with Androguard4",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/app.py||mobsf/StaticAnalyzer/views/android/app.py": [
          "File: mobsf/StaticAnalyzer/views/android/app.py -> mobsf/StaticAnalyzer/views/android/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: def parse_apk(checksum, app_path):",
          "20:     try:",
          "21:         msg = 'Parsing APK with androguard'",
          "22:         logger.info(msg)",
          "",
          "[Removed Lines]",
          "19:     \"\"\"Androguard APK.\"\"\"",
          "",
          "[Added Lines]",
          "19:     \"\"\"Androguard4 APK.\"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         if a:",
          "36:             # Parsed Androguard APK Object",
          "37:             try:",
          "39:             except Exception:",
          "40:                 logger.warning('Failed to get app name from parsed APK object')",
          "41:         # Look for app_name in values folder.",
          "",
          "[Removed Lines]",
          "38:                 return a.get_app_name()",
          "",
          "[Added Lines]",
          "38:                 app_name = a.get_app_name()",
          "39:                 if app_name:",
          "40:                     return app_name",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/cert_analysis.py||mobsf/StaticAnalyzer/views/android/cert_analysis.py": [
          "File: mobsf/StaticAnalyzer/views/android/cert_analysis.py -> mobsf/StaticAnalyzer/views/android/cert_analysis.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     find_java_binary,",
          "26:     gen_sha256_hash,",
          "27: )",
          "30: )",
          "32: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "28: from mobsf.StaticAnalyzer.tools.androguard4.apk import (",
          "29:     get_certificate_name_string,",
          "",
          "[Added Lines]",
          "28: from mobsf.StaticAnalyzer.tools.androguard4 import (",
          "29:     util,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:     \"\"\"Get certificate details.\"\"\"",
          "78:     certlist = []",
          "79:     x509_cert = asn1crypto.x509.Certificate.load(data)",
          "81:     certlist.append(f'X.509 Subject: {subject}')",
          "82:     certlist.append(f'Signature Algorithm: {x509_cert.signature_algo}')",
          "83:     valid_from = x509_cert['tbs_certificate']['validity']['not_before'].native",
          "84:     certlist.append(f'Valid From: {valid_from}')",
          "85:     valid_to = x509_cert['tbs_certificate']['validity']['not_after'].native",
          "86:     certlist.append(f'Valid To: {valid_to}')",
          "88:     certlist.append(f'Issuer: {issuer}')",
          "89:     certlist.append(f'Serial Number: {hex(x509_cert.serial_number)}')",
          "90:     certlist.append(f'Hash Algorithm: {x509_cert.hash_algo}')",
          "",
          "[Removed Lines]",
          "80:     subject = get_certificate_name_string(x509_cert.subject, short=True)",
          "87:     issuer = get_certificate_name_string(x509_cert.issuer, short=True)",
          "",
          "[Added Lines]",
          "80:     subject = util.get_certificate_name_string(x509_cert.subject, short=True)",
          "87:     issuer = util.get_certificate_name_string(x509_cert.issuer, short=True)",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/jar_aar.py||mobsf/StaticAnalyzer/views/android/jar_aar.py": [
          "File: mobsf/StaticAnalyzer/views/android/jar_aar.py -> mobsf/StaticAnalyzer/views/android/jar_aar.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:             checksum,",
          "102:             app_dic['files'])",
          "103:         app_dic['playstore'] = {'error': True}",
          "105:         apk = parse_apk(",
          "106:             checksum,",
          "107:             app_dic['app_path'])",
          "",
          "[Removed Lines]",
          "104:         # Parse APK with Androguard",
          "",
          "[Added Lines]",
          "104:         # Parse APK with Androguard4",
          "",
          "---------------"
        ],
        "mobsf/StaticAnalyzer/views/android/manifest_utils.py||mobsf/StaticAnalyzer/views/android/manifest_utils.py": [
          "File: mobsf/StaticAnalyzer/views/android/manifest_utils.py -> mobsf/StaticAnalyzer/views/android/manifest_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: def get_android_manifest_androguard(apk, app_dir):",
          "59:     try:",
          "60:         logger.info('Extracting AndroidManifest.xml with Androguard')",
          "61:         if not apk:",
          "",
          "[Removed Lines]",
          "58:     \"\"\"Get AndroidManifest.xml using Androguard.\"\"\"",
          "",
          "[Added Lines]",
          "58:     \"\"\"Get AndroidManifest.xml using Androguard4.\"\"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66af98f3ec81d049fad5799087aada7bf94445df",
      "candidate_info": {
        "commit_hash": "66af98f3ec81d049fad5799087aada7bf94445df",
        "repo": "MobSF/Mobile-Security-Framework-MobSF",
        "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/66af98f3ec81d049fad5799087aada7bf94445df",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "libsast bump",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file is automatically @generated by Poetry 1.8.4 and should not be changed by hand.",
          "3: [[package]]",
          "7: optional = false",
          "8: python-versions = \">=3.8\"",
          "9: files = [",
          "36: ]",
          "38: [package.dependencies]",
          "39: certifi = \"*\"",
          "41: pylsqpack = \">=0.3.3,<0.4.0\"",
          "45: [package.extras]",
          "46: dev = [\"coverage[toml] (>=7.2.2)\"]",
          "",
          "[Removed Lines]",
          "4: name = \"aioquic\"",
          "5: version = \"1.2.0\"",
          "6: description = \"An implementation of QUIC and HTTP/3\"",
          "10:     {file = \"aioquic-1.2.0-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:3e23964dfb04526ade6e66f5b7cd0c830421b8138303ab60ba6e204015e7cb0b\"},",
          "11:     {file = \"aioquic-1.2.0-cp38-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:84d733332927b76218a3b246216104116f766f5a9b2308ec306cd017b3049660\"},",
          "12:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2466499759b31ea4f1d17f4aeb1f8d4297169e05e3c1216d618c9757f4dd740d\"},",
          "13:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cd75015462ca5070a888110dc201f35a9f4c7459f9201b77adc3c06013611bb8\"},",
          "14:     {file = \"aioquic-1.2.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:43ae3b11d43400a620ca0b4b4885d12b76a599c2cbddba755f74bebfa65fe587\"},",
          "15:     {file = \"aioquic-1.2.0-cp38-abi3-win32.whl\", hash = \"sha256:910d8c91da86bba003d491d15deaeac3087d1b9d690b9edc1375905d8867b742\"},",
          "16:     {file = \"aioquic-1.2.0-cp38-abi3-win_amd64.whl\", hash = \"sha256:e3dcfb941004333d477225a6689b55fc7f905af5ee6a556eb5083be0354e653a\"},",
          "17:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:8e600da7aa7e4a7bc53ee8f45fd66808032127ae00938c119ac77d66633b8961\"},",
          "18:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:358e2b9c1e0c24b9933094c3c2cf990faf44d03b64d6f8ff79b4b3f510c6c268\"},",
          "19:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6fe683943ea3439dd0aca05ff80e85a552d4b39f9f34858c76ac54c205990e88\"},",
          "20:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c22689c33fe4799624aed6faaba0af9e6ea7d31ac45047745828ee68d67fe1d9\"},",
          "21:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3976b75e82d83742c8b811e38d273eda2ca7f81394b6a85da33a02849c5f1d9d\"},",
          "22:     {file = \"aioquic-1.2.0-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:cbe7167b2faee887e115d83d25332c4b8fa4604d5175807d978cb4fe39b4e36e\"},",
          "23:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:f81e7946f09501a7c27e3f71b84a455e6bf92346fb5a28ef2d73c9d564463c63\"},",
          "24:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:e2c3c127cc3d9eac7a6d05142036bf4b2c593d750a115a2fa42c1f86cbe8c0a0\"},",
          "25:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb917143e7a4de5beba1e695fa89f2b05ef080b450dea07338cc67a9c75e0a4d\"},",
          "26:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1de513772fd04ff38028fdf748a9e2dec33d7aa2fbf67fda3011d9a85b620c54\"},",
          "27:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7dcc212bb529900757d8e99a76198b42c2a978ce735a1bfca394033c16cfc33c\"},",
          "28:     {file = \"aioquic-1.2.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:e7ce10198f8efa91986ad8ac83fa08e50972e0aacde45bdaf7b9365094e72c0c\"},",
          "29:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-macosx_10_15_x86_64.whl\", hash = \"sha256:6e418c92898a0af306e6f1b6a55a0d3d2597001c57a7b1ba36cf5b47bf41233b\"},",
          "30:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:81650d59bef05c514af2cfdcb2946e9d13367b745e68b36881d43630ef563d38\"},",
          "31:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6371c3afa1036294e1505fdbda8c147bc41c5b6709a47459e8c1b4eec41a86ef\"},",
          "32:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c332cffa3c2124e5db82b2b9eb2662bd7c39ee2247606b74de689f6d3091b61a\"},",
          "33:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fcc1eb083ed9f8d903482e375281c8c26a5ed2b6bee5ee2be3f13275d8fdb146\"},",
          "34:     {file = \"aioquic-1.2.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:f209ad5edbff8239e994c189dc74428420957448a190f4343faee4caedef4eee\"},",
          "35:     {file = \"aioquic-1.2.0.tar.gz\", hash = \"sha256:f91263bb3f71948c5c8915b4d50ee370004f20a416f67fab3dcc90556c7e7199\"},",
          "40: cryptography = \">=42.0.0\"",
          "42: pyopenssl = \">=24\"",
          "43: service-identity = \">=24.1.0\"",
          "",
          "[Added Lines]",
          "4: name = \"aioquic-mitmproxy\"",
          "5: version = \"0.9.21.1\"",
          "6: description = \"Fork of aioquic (https://github.com/aiortc/aioquic) with adjustments for mitmproxy.\"",
          "10:     {file = \"aioquic_mitmproxy-0.9.21.1-py3-none-any.whl\", hash = \"sha256:4c691232cc97f7c01c1677f21e2457523ee6780c4b5ad7d7936f6a3210d4f886\"},",
          "11:     {file = \"aioquic_mitmproxy-0.9.21.1.tar.gz\", hash = \"sha256:0da539b95982dd02d1f971344215da5c15d0c409e2639d267a2815cd27335e26\"},",
          "17: pyopenssl = \">=22\"",
          "18: service-identity = \">=23.1.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     {file = \"altgraph-0.17.4.tar.gz\", hash = \"sha256:1b5afbb98f6c4dcadb2e2ae6ab9fa994bbb8c1d75f4fa96d340f9437ae454406\"},",
          "57: ]",
          "59: [[package]]",
          "60: name = \"apkid\"",
          "61: version = \"2.1.5\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: [[package]]",
          "35: name = \"annotated-types\"",
          "36: version = \"0.7.0\"",
          "37: description = \"Reusable constraint types to use with typing.Annotated\"",
          "38: optional = false",
          "39: python-versions = \">=3.8\"",
          "40: files = [",
          "41:     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},",
          "42:     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},",
          "43: ]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119: [[package]]",
          "120: name = \"asgiref\"",
          "122: description = \"ASGI specs, helper code, and adapters\"",
          "123: optional = false",
          "125: files = [",
          "128: ]",
          "130: [package.dependencies]",
          "",
          "[Removed Lines]",
          "121: version = \"3.8.1\"",
          "124: python-versions = \">=3.8\"",
          "126:     {file = \"asgiref-3.8.1-py3-none-any.whl\", hash = \"sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47\"},",
          "127:     {file = \"asgiref-3.8.1.tar.gz\", hash = \"sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\"},",
          "",
          "[Added Lines]",
          "107: version = \"3.7.2\"",
          "110: python-versions = \">=3.7\"",
          "112:     {file = \"asgiref-3.7.2-py3-none-any.whl\", hash = \"sha256:89b2ef2247e3b562a16eef663bc0e2e703ec6468e2fa8a5cd61cd449786d4f6e\"},",
          "113:     {file = \"asgiref-3.7.2.tar.gz\", hash = \"sha256:9e0ce3aa93a819ba5b45120216b23878cf6e8525eb3848653452b4192b92afed\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147: [[package]]",
          "148: name = \"attrs\"",
          "150: description = \"Classes Without Boilerplate\"",
          "151: optional = false",
          "153: files = [",
          "156: ]",
          "158: [package.extras]",
          "164: [[package]]",
          "165: name = \"bcrypt\"",
          "",
          "[Removed Lines]",
          "149: version = \"21.4.0\"",
          "152: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"",
          "154:     {file = \"attrs-21.4.0-py2.py3-none-any.whl\", hash = \"sha256:2d27e3784d7a565d36ab851fe94887c5eccd6a463168875832a1be79c82828b4\"},",
          "155:     {file = \"attrs-21.4.0.tar.gz\", hash = \"sha256:626ba8234211db98e869df76230a137c4c40a12d72445c45d5f5b716f076e2fd\"},",
          "159: dev = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"furo\", \"hypothesis\", \"mypy\", \"pre-commit\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]",
          "160: docs = [\"furo\", \"sphinx\", \"sphinx-notfound-page\", \"zope.interface\"]",
          "161: tests = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\", \"zope.interface\"]",
          "162: tests-no-zope = [\"cloudpickle\", \"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"mypy\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"six\"]",
          "",
          "[Added Lines]",
          "135: version = \"24.2.0\"",
          "138: python-versions = \">=3.7\"",
          "140:     {file = \"attrs-24.2.0-py3-none-any.whl\", hash = \"sha256:81921eb96de3191c8258c199618104dd27ac608d9366f5e35d011eae1867ede2\"},",
          "141:     {file = \"attrs-24.2.0.tar.gz\", hash = \"sha256:5cfb1b9148b5b086569baec03f20d7b6bf3bcacc9a42bebf87ffaaca362f6346\"},",
          "145: benchmark = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-codspeed\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]",
          "146: cov = [\"cloudpickle\", \"coverage[toml] (>=5.3)\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]",
          "147: dev = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pre-commit\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]",
          "148: docs = [\"cogapp\", \"furo\", \"myst-parser\", \"sphinx\", \"sphinx-notfound-page\", \"sphinxcontrib-towncrier\", \"towncrier (<24.7)\"]",
          "149: tests = [\"cloudpickle\", \"hypothesis\", \"mypy (>=1.11.1)\", \"pympler\", \"pytest (>=4.3.0)\", \"pytest-mypy-plugins\", \"pytest-xdist[psutil]\"]",
          "150: tests-mypy = [\"mypy (>=1.11.1)\", \"pytest-mypy-plugins\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "633: [[package]]",
          "634: name = \"cryptography\"",
          "636: description = \"cryptography is a package which provides cryptographic recipes and primitives to Python developers.\"",
          "637: optional = false",
          "638: python-versions = \">=3.7\"",
          "639: files = [",
          "667: ]",
          "669: [package.dependencies]",
          "672: [package.extras]",
          "673: docs = [\"sphinx (>=5.3.0)\", \"sphinx-rtd-theme (>=1.1.1)\"]",
          "675: nox = [\"nox\"]",
          "677: sdist = [\"build\"]",
          "678: ssh = [\"bcrypt (>=3.1.5)\"]",
          "680: test-randomorder = [\"pytest-randomly\"]",
          "682: [[package]]",
          "",
          "[Removed Lines]",
          "635: version = \"43.0.3\"",
          "640:     {file = \"cryptography-43.0.3-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:bf7a1932ac4176486eab36a19ed4c0492da5d97123f1406cf15e41b05e787d2e\"},",
          "641:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:63efa177ff54aec6e1c0aefaa1a241232dcd37413835a9b674b6e3f0ae2bfd3e\"},",
          "642:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e1ce50266f4f70bf41a2c6dc4358afadae90e2a1e5342d3c08883df1675374f\"},",
          "643:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:443c4a81bb10daed9a8f334365fe52542771f25aedaf889fd323a853ce7377d6\"},",
          "644:     {file = \"cryptography-43.0.3-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:74f57f24754fe349223792466a709f8e0c093205ff0dca557af51072ff47ab18\"},",
          "645:     {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:9762ea51a8fc2a88b70cf2995e5675b38d93bf36bd67d91721c309df184f49bd\"},",
          "646:     {file = \"cryptography-43.0.3-cp37-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:81ef806b1fef6b06dcebad789f988d3b37ccaee225695cf3e07648eee0fc6b73\"},",
          "647:     {file = \"cryptography-43.0.3-cp37-abi3-win32.whl\", hash = \"sha256:cbeb489927bd7af4aa98d4b261af9a5bc025bd87f0e3547e11584be9e9427be2\"},",
          "648:     {file = \"cryptography-43.0.3-cp37-abi3-win_amd64.whl\", hash = \"sha256:f46304d6f0c6ab8e52770addfa2fc41e6629495548862279641972b6215451cd\"},",
          "649:     {file = \"cryptography-43.0.3-cp39-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:8ac43ae87929a5982f5948ceda07001ee5e83227fd69cf55b109144938d96984\"},",
          "650:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:846da004a5804145a5f441b8530b4bf35afbf7da70f82409f151695b127213d5\"},",
          "651:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4\"},",
          "652:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:f7b178f11ed3664fd0e995a47ed2b5ff0a12d893e41dd0494f406d1cf555cab7\"},",
          "653:     {file = \"cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405\"},",
          "654:     {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1be4655c7ef6e1bbe6b5d0403526601323420bcf414598955968c9ef3eb7d16\"},",
          "655:     {file = \"cryptography-43.0.3-cp39-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:df6b6c6d742395dd77a23ea3728ab62f98379eff8fb61be2744d4679ab678f73\"},",
          "656:     {file = \"cryptography-43.0.3-cp39-abi3-win32.whl\", hash = \"sha256:d56e96520b1020449bbace2b78b603442e7e378a9b3bd68de65c782db1507995\"},",
          "657:     {file = \"cryptography-43.0.3-cp39-abi3-win_amd64.whl\", hash = \"sha256:0c580952eef9bf68c4747774cde7ec1d85a6e61de97281f2dba83c7d2c806362\"},",
          "658:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:d03b5621a135bffecad2c73e9f4deb1a0f977b9a8ffe6f8e002bf6c9d07b918c\"},",
          "659:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:a2a431ee15799d6db9fe80c82b055bae5a752bef645bba795e8e52687c69efe3\"},",
          "660:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:281c945d0e28c92ca5e5930664c1cefd85efe80e5c0d2bc58dd63383fda29f83\"},",
          "661:     {file = \"cryptography-43.0.3-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:f18c716be16bc1fea8e95def49edf46b82fccaa88587a45f8dc0ff6ab5d8e0a7\"},",
          "662:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:4a02ded6cd4f0a5562a8887df8b3bd14e822a90f97ac5e544c162899bc467664\"},",
          "663:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:53a583b6637ab4c4e3591a15bc9db855b8d9dee9a669b550f311480acab6eb08\"},",
          "664:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:1ec0bcf7e17c0c5669d881b1cd38c4972fade441b27bda1051665faaa89bdcaa\"},",
          "665:     {file = \"cryptography-43.0.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:2ce6fae5bdad59577b44e4dfed356944fbf1d925269114c28be377692643b4ff\"},",
          "666:     {file = \"cryptography-43.0.3.tar.gz\", hash = \"sha256:315b9001266a492a6ff443b61238f956b214dbec9910a081ba5b6646a055a805\"},",
          "670: cffi = {version = \">=1.12\", markers = \"platform_python_implementation != \\\"PyPy\\\"\"}",
          "674: docstest = [\"pyenchant (>=1.6.11)\", \"readme-renderer\", \"sphinxcontrib-spelling (>=4.0.1)\"]",
          "676: pep8test = [\"check-sdist\", \"click\", \"mypy\", \"ruff\"]",
          "679: test = [\"certifi\", \"cryptography-vectors (==43.0.3)\", \"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]",
          "",
          "[Added Lines]",
          "623: version = \"41.0.7\"",
          "628:     {file = \"cryptography-41.0.7-cp37-abi3-macosx_10_12_universal2.whl\", hash = \"sha256:3c78451b78313fa81607fa1b3f1ae0a5ddd8014c38a02d9db0616133987b9cdf\"},",
          "629:     {file = \"cryptography-41.0.7-cp37-abi3-macosx_10_12_x86_64.whl\", hash = \"sha256:928258ba5d6f8ae644e764d0f996d61a8777559f72dfeb2eea7e2fe0ad6e782d\"},",
          "630:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5a1b41bc97f1ad230a41657d9155113c7521953869ae57ac39ac7f1bb471469a\"},",
          "631:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:841df4caa01008bad253bce2a6f7b47f86dc9f08df4b433c404def869f590a15\"},",
          "632:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_28_aarch64.whl\", hash = \"sha256:5429ec739a29df2e29e15d082f1d9ad683701f0ec7709ca479b3ff2708dae65a\"},",
          "633:     {file = \"cryptography-41.0.7-cp37-abi3-manylinux_2_28_x86_64.whl\", hash = \"sha256:43f2552a2378b44869fe8827aa19e69512e3245a219104438692385b0ee119d1\"},",
          "634:     {file = \"cryptography-41.0.7-cp37-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:af03b32695b24d85a75d40e1ba39ffe7db7ffcb099fe507b39fd41a565f1b157\"},",
          "635:     {file = \"cryptography-41.0.7-cp37-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:49f0805fc0b2ac8d4882dd52f4a3b935b210935d500b6b805f321addc8177406\"},",
          "636:     {file = \"cryptography-41.0.7-cp37-abi3-win32.whl\", hash = \"sha256:f983596065a18a2183e7f79ab3fd4c475205b839e02cbc0efbbf9666c4b3083d\"},",
          "637:     {file = \"cryptography-41.0.7-cp37-abi3-win_amd64.whl\", hash = \"sha256:90452ba79b8788fa380dfb587cca692976ef4e757b194b093d845e8d99f612f2\"},",
          "638:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:079b85658ea2f59c4f43b70f8119a52414cdb7be34da5d019a77bf96d473b960\"},",
          "639:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:b640981bf64a3e978a56167594a0e97db71c89a479da8e175d8bb5be5178c003\"},",
          "640:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:e3114da6d7f95d2dee7d3f4eec16dacff819740bbab931aff8648cb13c5ff5e7\"},",
          "641:     {file = \"cryptography-41.0.7-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:d5ec85080cce7b0513cfd233914eb8b7bbd0633f1d1703aa28d1dd5a72f678ec\"},",
          "642:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7a698cb1dac82c35fcf8fe3417a3aaba97de16a01ac914b89a0889d364d2f6be\"},",
          "643:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:37a138589b12069efb424220bf78eac59ca68b95696fc622b6ccc1c0a197204a\"},",
          "644:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:68a2dec79deebc5d26d617bfdf6e8aab065a4f34934b22d3b5010df3ba36612c\"},",
          "645:     {file = \"cryptography-41.0.7-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:09616eeaef406f99046553b8a40fbf8b1e70795a91885ba4c96a70793de5504a\"},",
          "646:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:48a0476626da912a44cc078f9893f292f0b3e4c739caf289268168d8f4702a39\"},",
          "647:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-manylinux_2_28_aarch64.whl\", hash = \"sha256:c7f3201ec47d5207841402594f1d7950879ef890c0c495052fa62f58283fde1a\"},",
          "648:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:c5ca78485a255e03c32b513f8c2bc39fedb7f5c5f8535545bdc223a03b24f248\"},",
          "649:     {file = \"cryptography-41.0.7-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:d6c391c021ab1f7a82da5d8d0b3cee2f4b2c455ec86c8aebbc84837a631ff309\"},",
          "650:     {file = \"cryptography-41.0.7.tar.gz\", hash = \"sha256:13f93ce9bea8016c253b34afc6bd6a75993e5c40672ed5405a9c832f0d4a00bc\"},",
          "654: cffi = \">=1.12\"",
          "658: docstest = [\"pyenchant (>=1.6.11)\", \"sphinxcontrib-spelling (>=4.0.1)\", \"twine (>=1.12.0)\"]",
          "660: pep8test = [\"black\", \"check-sdist\", \"mypy\", \"ruff\"]",
          "663: test = [\"pretend\", \"pytest (>=6.2.0)\", \"pytest-benchmark\", \"pytest-cov\", \"pytest-xdist\"]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "690:     {file = \"defusedxml-0.7.1.tar.gz\", hash = \"sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69\"},",
          "691: ]",
          "693: [[package]]",
          "694: name = \"distro\"",
          "695: version = \"1.9.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: [[package]]",
          "678: name = \"deprecated\"",
          "679: version = \"1.2.14\"",
          "680: description = \"Python @deprecated decorator to deprecate old python classes, functions or methods.\"",
          "681: optional = false",
          "682: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"",
          "683: files = [",
          "684:     {file = \"Deprecated-1.2.14-py2.py3-none-any.whl\", hash = \"sha256:6fac8b097794a90302bdbb17b9b815e732d3c4720583ff1b198499d78470466c\"},",
          "685:     {file = \"Deprecated-1.2.14.tar.gz\", hash = \"sha256:e5323eb936458dccc2582dc6f9c322c852a775a27065ff2b0c4970b9d53d01b3\"},",
          "686: ]",
          "688: [package.dependencies]",
          "689: wrapt = \">=1.10,<2\"",
          "691: [package.extras]",
          "692: dev = [\"PyTest\", \"PyTest-Cov\", \"bump2version (<1)\", \"sphinx (<2)\", \"tox\"]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "704: [[package]]",
          "705: name = \"django\"",
          "707: description = \"A high-level Python web framework that encourages rapid development and clean, pragmatic design.\"",
          "708: optional = false",
          "709: python-versions = \">=3.10\"",
          "710: files = [",
          "713: ]",
          "715: [package.dependencies]",
          "717: sqlparse = \">=0.3.1\"",
          "718: tzdata = {version = \"*\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "",
          "[Removed Lines]",
          "706: version = \"5.1.2\"",
          "711:     {file = \"Django-5.1.2-py3-none-any.whl\", hash = \"sha256:f11aa87ad8d5617171e3f77e1d5d16f004b79a2cf5d2e1d2b97a6a1f8e9ba5ed\"},",
          "712:     {file = \"Django-5.1.2.tar.gz\", hash = \"sha256:bd7376f90c99f96b643722eee676498706c9fd7dc759f55ebfaf2c08ebcdf4f0\"},",
          "716: asgiref = \">=3.8.1,<4\"",
          "",
          "[Added Lines]",
          "707: version = \"5.0.9\"",
          "712:     {file = \"Django-5.0.9-py3-none-any.whl\", hash = \"sha256:f219576ba53be4e83f485130a7283f0efde06a9f2e3a7c3c5180327549f078fa\"},",
          "713:     {file = \"Django-5.0.9.tar.gz\", hash = \"sha256:6333870d342329b60174da3a60dbd302e533f3b0bb0971516750e974a99b5a39\"},",
          "717: asgiref = \">=3.7.0,<4\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "732:     {file = \"django_ratelimit-4.1.0-py2.py3-none-any.whl\", hash = \"sha256:d047a31cf94d83ef1465d7543ca66c6fc16695559b5f8d814d1b51df15110b92\"},",
          "733: ]",
          "735: [[package]]",
          "736: name = \"face\"",
          "737: version = \"24.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736: [[package]]",
          "737: name = \"exceptiongroup\"",
          "738: version = \"1.2.2\"",
          "739: description = \"Backport of PEP 654 (exception groups)\"",
          "740: optional = false",
          "741: python-versions = \">=3.7\"",
          "742: files = [",
          "743:     {file = \"exceptiongroup-1.2.2-py3-none-any.whl\", hash = \"sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b\"},",
          "744:     {file = \"exceptiongroup-1.2.2.tar.gz\", hash = \"sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc\"},",
          "745: ]",
          "747: [package.extras]",
          "748: test = [\"pytest (>=6)\"]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "839:     {file = \"google_play_scraper-1.2.7.tar.gz\", hash = \"sha256:284f321d1b2c39e39e97e490d51bc316e1d876802360efb7e7463b5c16ed4972\"},",
          "840: ]",
          "842: [[package]]",
          "843: name = \"gunicorn\"",
          "844: version = \"23.0.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857: [[package]]",
          "858: name = \"googleapis-common-protos\"",
          "859: version = \"1.65.0\"",
          "860: description = \"Common protobufs used in Google APIs\"",
          "861: optional = false",
          "862: python-versions = \">=3.7\"",
          "863: files = [",
          "864:     {file = \"googleapis_common_protos-1.65.0-py2.py3-none-any.whl\", hash = \"sha256:2972e6c496f435b92590fd54045060867f3fe9be2c82ab148fc8885035479a63\"},",
          "865:     {file = \"googleapis_common_protos-1.65.0.tar.gz\", hash = \"sha256:334a29d07cddc3aa01dee4988f9afd9b2916ee2ff49d6b757155dc0d197852c0\"},",
          "866: ]",
          "868: [package.dependencies]",
          "869: protobuf = \">=3.20.2,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<6.0.0.dev0\"",
          "871: [package.extras]",
          "872: grpc = [\"grpcio (>=1.44.0,<2.0.0.dev0)\"]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "900: [[package]]",
          "901: name = \"http-tools\"",
          "903: description = \"httptools helps you to capture, repeat and live intercept HTTP requests. It is built on top of [mitmproxy](https://mitmproxy.org/)\"",
          "904: optional = false",
          "905: python-versions = \"*\"",
          "906: files = [",
          "908: ]",
          "910: [package.dependencies]",
          "914: [[package]]",
          "915: name = \"hyperframe\"",
          "",
          "[Removed Lines]",
          "902: version = \"5.0.0\"",
          "907:     {file = \"http_tools-5.0.0.tar.gz\", hash = \"sha256:798bbd728d353902556c511bcca0838d5916c857103e0c06a460e9f759f24815\"},",
          "911: markupsafe = \">=3.0.2\"",
          "912: mitmproxy = \"11.0.0\"",
          "",
          "[Added Lines]",
          "934: version = \"4.0.0\"",
          "939:     {file = \"http-tools-4.0.0.tar.gz\", hash = \"sha256:aa6a3477ca4ef2c61b461b79d3ce88200c9d02d37c84c65e8abbc7ed2dfed545\"},",
          "943: markupsafe = \">=2.1.3\"",
          "944: mitmproxy = \"10.1.5\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "936: [package.extras]",
          "937: all = [\"flake8 (>=7.1.1)\", \"mypy (>=1.11.2)\", \"pytest (>=8.3.2)\", \"ruff (>=0.6.2)\"]",
          "939: [[package]]",
          "940: name = \"ip2location\"",
          "941: version = \"8.10.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "971: [[package]]",
          "972: name = \"importlib-metadata\"",
          "973: version = \"7.1.0\"",
          "974: description = \"Read metadata from Python packages\"",
          "975: optional = false",
          "976: python-versions = \">=3.8\"",
          "977: files = [",
          "978:     {file = \"importlib_metadata-7.1.0-py3-none-any.whl\", hash = \"sha256:30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570\"},",
          "979:     {file = \"importlib_metadata-7.1.0.tar.gz\", hash = \"sha256:b78938b926ee8d5f020fc4772d487045805a55ddbad2ecf21c6d60938dc7fcd2\"},",
          "980: ]",
          "982: [package.dependencies]",
          "983: zipp = \">=0.5\"",
          "985: [package.extras]",
          "986: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
          "987: perf = [\"ipython\"]",
          "988: testing = [\"flufl.flake8\", \"importlib-resources (>=1.3)\", \"jaraco.test (>=5.4)\", \"packaging\", \"pyfakefs\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-perf (>=0.9.2)\", \"pytest-ruff (>=0.2.1)\"]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "989: [[package]]",
          "990: name = \"jsonschema\"",
          "992: description = \"An implementation of JSON Schema validation for Python\"",
          "993: optional = false",
          "995: files = [",
          "998: ]",
          "1000: [package.dependencies]",
          "1004: [package.extras]",
          "1005: format = [\"fqdn\", \"idna\", \"isoduration\", \"jsonpointer (>1.13)\", \"rfc3339-validator\", \"rfc3987\", \"uri-template\", \"webcolors (>=1.11)\"]",
          "1008: [[package]]",
          "1009: name = \"kaitaistruct\"",
          "",
          "[Removed Lines]",
          "991: version = \"4.17.3\"",
          "994: python-versions = \">=3.7\"",
          "996:     {file = \"jsonschema-4.17.3-py3-none-any.whl\", hash = \"sha256:a870ad254da1a8ca84b6a2905cac29d265f805acc57af304784962a2aa6508f6\"},",
          "997:     {file = \"jsonschema-4.17.3.tar.gz\", hash = \"sha256:0f864437ab8b6076ba6707453ef8f98a6a0d512a80e93f8abdb676f737ecb60d\"},",
          "1001: attrs = \">=17.4.0\"",
          "1002: pyrsistent = \">=0.14.0,<0.17.0 || >0.17.0,<0.17.1 || >0.17.1,<0.17.2 || >0.17.2\"",
          "1006: format-nongpl = [\"fqdn\", \"idna\", \"isoduration\", \"jsonpointer (>1.13)\", \"rfc3339-validator\", \"rfc3986-validator (>0.1.0)\", \"uri-template\", \"webcolors (>=1.11)\"]",
          "",
          "[Added Lines]",
          "1042: version = \"4.23.0\"",
          "1045: python-versions = \">=3.8\"",
          "1047:     {file = \"jsonschema-4.23.0-py3-none-any.whl\", hash = \"sha256:fbadb6f8b144a8f8cf9f0b89ba94501d143e50411a1278633f56a7acf7fd5566\"},",
          "1048:     {file = \"jsonschema-4.23.0.tar.gz\", hash = \"sha256:d71497fef26351a33265337fa77ffeb82423f3ea21283cd9467bb03999266bc4\"},",
          "1052: attrs = \">=22.2.0\"",
          "1053: jsonschema-specifications = \">=2023.03.6\"",
          "1054: referencing = \">=0.28.4\"",
          "1055: rpds-py = \">=0.7.1\"",
          "1059: format-nongpl = [\"fqdn\", \"idna\", \"isoduration\", \"jsonpointer (>1.13)\", \"rfc3339-validator\", \"rfc3986-validator (>0.1.0)\", \"uri-template\", \"webcolors (>=24.6.0)\"]",
          "1061: [[package]]",
          "1062: name = \"jsonschema-specifications\"",
          "1063: version = \"2024.10.1\"",
          "1064: description = \"The JSON Schema meta-schemas and vocabularies, exposed as a Registry\"",
          "1065: optional = false",
          "1066: python-versions = \">=3.9\"",
          "1067: files = [",
          "1068:     {file = \"jsonschema_specifications-2024.10.1-py3-none-any.whl\", hash = \"sha256:a09a0680616357d9a0ecf05c12ad234479f549239d0f5b55f3deea67475da9bf\"},",
          "1069:     {file = \"jsonschema_specifications-2024.10.1.tar.gz\", hash = \"sha256:0f38b83639958ce1152d02a7f062902c41c8fd20d558b0c34344292d417ae272\"},",
          "1070: ]",
          "1072: [package.dependencies]",
          "1073: referencing = \">=0.31.0\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1033: [[package]]",
          "1034: name = \"libsast\"",
          "1036: description = \"A generic SAST library built on top of semgrep and regex\"",
          "1037: optional = false",
          "1038: python-versions = \"<4.0,>=3.8\"",
          "1039: files = [",
          "1042: ]",
          "1044: [package.dependencies]",
          "1045: pyyaml = \">=6.0\"",
          "1046: requests = \"*\"",
          "1049: [[package]]",
          "1050: name = \"lief\"",
          "",
          "[Removed Lines]",
          "1035: version = \"3.0.2\"",
          "1040:     {file = \"libsast-3.0.2-py3-none-any.whl\", hash = \"sha256:063a2ea80da9fc247077461aa2a608187aa1f68331455f421ab6328b13c6efa9\"},",
          "1041:     {file = \"libsast-3.0.2.tar.gz\", hash = \"sha256:f585328b1a927d1d47c776ae36db83860acc521f5f2a6fd7153aeae367c20d38\"},",
          "1047: semgrep = {version = \"0.117.0\", markers = \"sys_platform != \\\"win32\\\"\"}",
          "",
          "[Added Lines]",
          "1102: version = \"3.1.0\"",
          "1107:     {file = \"libsast-3.1.0-py3-none-any.whl\", hash = \"sha256:1d4e35bba35d886e4d58d79363bc6d4e26a7e28f095da01968d016af64960804\"},",
          "1108:     {file = \"libsast-3.1.0.tar.gz\", hash = \"sha256:030f87f404cd9901e24c55adb9e501874aae8af0e7efcf2cf113fb2c64293b84\"},",
          "1114: semgrep = {version = \"1.86.0\", markers = \"sys_platform != \\\"win32\\\"\"}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1271: [package.dependencies]",
          "1272: altgraph = \">=0.17\"",
          "1274: [[package]]",
          "1275: name = \"markupsafe\"",
          "1276: version = \"3.0.2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1341: [[package]]",
          "1342: name = \"markdown-it-py\"",
          "1343: version = \"3.0.0\"",
          "1344: description = \"Python port of markdown-it. Markdown parsing, done right!\"",
          "1345: optional = false",
          "1346: python-versions = \">=3.8\"",
          "1347: files = [",
          "1348:     {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},",
          "1349:     {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},",
          "1350: ]",
          "1352: [package.dependencies]",
          "1353: mdurl = \">=0.1,<1.0\"",
          "1355: [package.extras]",
          "1356: benchmarking = [\"psutil\", \"pytest\", \"pytest-benchmark\"]",
          "1357: code-style = [\"pre-commit (>=3.0,<4.0)\"]",
          "1358: compare = [\"commonmark (>=0.9,<1.0)\", \"markdown (>=3.4,<4.0)\", \"mistletoe (>=1.0,<2.0)\", \"mistune (>=2.0,<3.0)\", \"panflute (>=2.3,<3.0)\"]",
          "1359: linkify = [\"linkify-it-py (>=1,<3)\"]",
          "1360: plugins = [\"mdit-py-plugins\"]",
          "1361: profiling = [\"gprof2dot\"]",
          "1362: rtd = [\"jupyter_sphinx\", \"mdit-py-plugins\", \"myst-parser\", \"pyyaml\", \"sphinx\", \"sphinx-copybutton\", \"sphinx-design\", \"sphinx_book_theme\"]",
          "1363: testing = [\"coverage\", \"pytest\", \"pytest-cov\", \"pytest-regressions\"]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1341:     {file = \"markupsafe-3.0.2.tar.gz\", hash = \"sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0\"},",
          "1342: ]",
          "1344: [[package]]",
          "1345: name = \"mitmproxy\"",
          "1347: description = \"An interactive, SSL/TLS-capable intercepting proxy for HTTP/1, HTTP/2, and WebSockets.\"",
          "1348: optional = false",
          "1349: python-versions = \">=3.10\"",
          "1350: files = [",
          "1352: ]",
          "1354: [package.dependencies]",
          "1358: certifi = \">=2019.9.11\"",
          "1383: [package.extras]",
          "1386: [[package]]",
          "1387: name = \"mitmproxy-macos\"",
          "1389: description = \"\"",
          "1390: optional = false",
          "1391: python-versions = \">=3.10\"",
          "1392: files = [",
          "1394: ]",
          "1396: [[package]]",
          "1397: name = \"mitmproxy-rs\"",
          "1399: description = \"\"",
          "1400: optional = false",
          "1401: python-versions = \">=3.10\"",
          "1402: files = [",
          "1408: ]",
          "1410: [package.dependencies]",
          "1414: [[package]]",
          "1415: name = \"mitmproxy-windows\"",
          "1417: description = \"\"",
          "1418: optional = false",
          "1419: python-versions = \">=3.10\"",
          "1420: files = [",
          "1422: ]",
          "1424: [[package]]",
          "1425: name = \"msgpack\"",
          "1427: description = \"MessagePack serializer\"",
          "1428: optional = false",
          "1429: python-versions = \">=3.8\"",
          "1430: files = [",
          "1495: ]",
          "1497: [[package]]",
          "",
          "[Removed Lines]",
          "1346: version = \"11.0.0\"",
          "1351:     {file = \"mitmproxy-11.0.0-py3-none-any.whl\", hash = \"sha256:0a23ececdbd32c7bf8886d55538661c593cdd3ab4bb712f2e85577a68d76211c\"},",
          "1355: aioquic = \">=1.1.0,<=1.2.0\"",
          "1356: asgiref = \">=3.2.10,<=3.8.1\"",
          "1357: Brotli = \">=1.0,<=1.1.0\"",
          "1359: cryptography = \">=42.0,<43.1\"",
          "1360: flask = \">=3.0,<=3.0.3\"",
          "1361: h11 = \">=0.11,<=0.14.0\"",
          "1362: h2 = \"4.1\"",
          "1363: hyperframe = \">=6.0,<=6.0.1\"",
          "1364: kaitaistruct = \"0.10\"",
          "1365: ldap3 = \">=2.8,<=2.9.1\"",
          "1366: mitmproxy-rs = \">=0.9.1,<0.10\"",
          "1367: msgpack = \">=1.0.0,<=1.1.0\"",
          "1368: passlib = \">=1.6.5,<=1.7.4\"",
          "1369: protobuf = \">=5.27.2,<=5.28.2\"",
          "1370: publicsuffix2 = \">=2.20190812,<=2.20191221\"",
          "1371: pydivert = {version = \">=2.0.3,<=2.1.0\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1372: pyOpenSSL = \">=22.1,<=24.2.1\"",
          "1373: pyparsing = \">=2.4.2,<=3.1.4\"",
          "1374: pyperclip = \"1.9.0\"",
          "1375: \"ruamel.yaml\" = \">=0.16,<=0.18.6\"",
          "1376: sortedcontainers = \">=2.3,<=2.4.0\"",
          "1377: tornado = \"6.4.1\"",
          "1378: typing-extensions = {version = \">=4.3,<=4.11.0\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1379: urwid = \">=2.6.14,<=2.6.15\"",
          "1380: wsproto = \">=1.0,<=1.2.0\"",
          "1381: zstandard = \">=0.15,<=0.23.0\"",
          "1384: dev = [\"build (>=0.10.0,<=1.2.2)\", \"click (>=7.0,<=8.1.7)\", \"hypothesis (>=6.104.2,<=6.112.2)\", \"mypy (>=1.10.1,<=1.11.2)\", \"pdoc (>=14.5.1,<=14.7.0)\", \"pyinstaller (==6.10.0)\", \"pyinstaller-hooks-contrib (==2024.8)\", \"pytest (>=8.2.2,<=8.3.3)\", \"pytest-asyncio (>=0.23.6,<=0.24.0)\", \"pytest-cov (==5.0.0)\", \"pytest-timeout (==2.3.1)\", \"pytest-xdist (>=3.5.0,<=3.6.1)\", \"requests (>=2.9.1,<=2.32.3)\", \"ruff (>=0.5.0,<=0.6.8)\", \"tox (>=4.15.1,<=4.21.0)\", \"types-Flask (==1.1.6)\", \"types-Werkzeug (==1.0.9)\", \"types-certifi (==2021.10.8.3)\", \"types-cryptography (==3.3.23.2)\", \"types-pyOpenSSL (>=23.3.0.0,<=24.1.0.20240722)\", \"types-requests (>=2.32.0.20240622,<=2.32.0.20240914)\", \"wheel (>=0.36.2,<=0.44.0)\"]",
          "1388: version = \"0.9.3\"",
          "1393:     {file = \"mitmproxy_macos-0.9.3-py3-none-any.whl\", hash = \"sha256:28be44bb371f356455de0ab7a9e5142fac9f38f74746903eaa1fb86f7b924c0b\"},",
          "1398: version = \"0.9.3\"",
          "1403:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:4801c25d57205ff0caeb84cef6a9327e6225213e8f68455c8674a1cb3f6db2ff\"},",
          "1404:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5fd333d03a6784fa54d3eecd976a93fceb38490c7413da66012c105466730b08\"},",
          "1405:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9c8108b53b5e0f8dff3de9d43b3225f0abbbe94138b9488ab0c773273ffd5da7\"},",
          "1406:     {file = \"mitmproxy_rs-0.9.3-cp310-abi3-win_amd64.whl\", hash = \"sha256:9536eebb43421d25a4ee6913676bc5ba483d4e7018d267f16d086910cfe81be0\"},",
          "1407:     {file = \"mitmproxy_rs-0.9.3.tar.gz\", hash = \"sha256:e54e4a61b5fb4a204a1dd37fbe2f4bc28a6e82e5229e396fc5e1aae447f939b3\"},",
          "1411: mitmproxy-macos = {version = \"0.9.3\", markers = \"sys_platform == \\\"darwin\\\"\"}",
          "1412: mitmproxy-windows = {version = \"0.9.3\", markers = \"os_name == \\\"nt\\\"\"}",
          "1416: version = \"0.9.3\"",
          "1421:     {file = \"mitmproxy_windows-0.9.3-py3-none-any.whl\", hash = \"sha256:a451ac04d2cb960c778f72a3dfb9af9d8c758e4e579c817b88f070813035d30b\"},",
          "1426: version = \"1.1.0\"",
          "1431:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7ad442d527a7e358a469faf43fda45aaf4ac3249c8310a82f0ccff9164e5dccd\"},",
          "1432:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:74bed8f63f8f14d75eec75cf3d04ad581da6b914001b474a5d3cd3372c8cc27d\"},",
          "1433:     {file = \"msgpack-1.1.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:914571a2a5b4e7606997e169f64ce53a8b1e06f2cf2c3a7273aa106236d43dd5\"},",
          "1434:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c921af52214dcbb75e6bdf6a661b23c3e6417f00c603dd2070bccb5c3ef499f5\"},",
          "1435:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d8ce0b22b890be5d252de90d0e0d119f363012027cf256185fc3d474c44b1b9e\"},",
          "1436:     {file = \"msgpack-1.1.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:73322a6cc57fcee3c0c57c4463d828e9428275fb85a27aa2aa1a92fdc42afd7b\"},",
          "1437:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:e1f3c3d21f7cf67bcf2da8e494d30a75e4cf60041d98b3f79875afb5b96f3a3f\"},",
          "1438:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:64fc9068d701233effd61b19efb1485587560b66fe57b3e50d29c5d78e7fef68\"},",
          "1439:     {file = \"msgpack-1.1.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:42f754515e0f683f9c79210a5d1cad631ec3d06cea5172214d2176a42e67e19b\"},",
          "1440:     {file = \"msgpack-1.1.0-cp310-cp310-win32.whl\", hash = \"sha256:3df7e6b05571b3814361e8464f9304c42d2196808e0119f55d0d3e62cd5ea044\"},",
          "1441:     {file = \"msgpack-1.1.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:685ec345eefc757a7c8af44a3032734a739f8c45d1b0ac45efc5d8977aa4720f\"},",
          "1442:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:3d364a55082fb2a7416f6c63ae383fbd903adb5a6cf78c5b96cc6316dc1cedc7\"},",
          "1443:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:79ec007767b9b56860e0372085f8504db5d06bd6a327a335449508bbee9648fa\"},",
          "1444:     {file = \"msgpack-1.1.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:6ad622bf7756d5a497d5b6836e7fc3752e2dd6f4c648e24b1803f6048596f701\"},",
          "1445:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e59bca908d9ca0de3dc8684f21ebf9a690fe47b6be93236eb40b99af28b6ea6\"},",
          "1446:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5e1da8f11a3dd397f0a32c76165cf0c4eb95b31013a94f6ecc0b280c05c91b59\"},",
          "1447:     {file = \"msgpack-1.1.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:452aff037287acb1d70a804ffd022b21fa2bb7c46bee884dbc864cc9024128a0\"},",
          "1448:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:8da4bf6d54ceed70e8861f833f83ce0814a2b72102e890cbdfe4b34764cdd66e\"},",
          "1449:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:41c991beebf175faf352fb940bf2af9ad1fb77fd25f38d9142053914947cdbf6\"},",
          "1450:     {file = \"msgpack-1.1.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:a52a1f3a5af7ba1c9ace055b659189f6c669cf3657095b50f9602af3a3ba0fe5\"},",
          "1451:     {file = \"msgpack-1.1.0-cp311-cp311-win32.whl\", hash = \"sha256:58638690ebd0a06427c5fe1a227bb6b8b9fdc2bd07701bec13c2335c82131a88\"},",
          "1452:     {file = \"msgpack-1.1.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fd2906780f25c8ed5d7b323379f6138524ba793428db5d0e9d226d3fa6aa1788\"},",
          "1453:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:d46cf9e3705ea9485687aa4001a76e44748b609d260af21c4ceea7f2212a501d\"},",
          "1454:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:5dbad74103df937e1325cc4bfeaf57713be0b4f15e1c2da43ccdd836393e2ea2\"},",
          "1455:     {file = \"msgpack-1.1.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:58dfc47f8b102da61e8949708b3eafc3504509a5728f8b4ddef84bd9e16ad420\"},",
          "1456:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4676e5be1b472909b2ee6356ff425ebedf5142427842aa06b4dfd5117d1ca8a2\"},",
          "1457:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17fb65dd0bec285907f68b15734a993ad3fc94332b5bb21b0435846228de1f39\"},",
          "1458:     {file = \"msgpack-1.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a51abd48c6d8ac89e0cfd4fe177c61481aca2d5e7ba42044fd218cfd8ea9899f\"},",
          "1459:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2137773500afa5494a61b1208619e3871f75f27b03bcfca7b3a7023284140247\"},",
          "1460:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:398b713459fea610861c8a7b62a6fec1882759f308ae0795b5413ff6a160cf3c\"},",
          "1461:     {file = \"msgpack-1.1.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:06f5fd2f6bb2a7914922d935d3b8bb4a7fff3a9a91cfce6d06c13bc42bec975b\"},",
          "1462:     {file = \"msgpack-1.1.0-cp312-cp312-win32.whl\", hash = \"sha256:ad33e8400e4ec17ba782f7b9cf868977d867ed784a1f5f2ab46e7ba53b6e1e1b\"},",
          "1463:     {file = \"msgpack-1.1.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:115a7af8ee9e8cddc10f87636767857e7e3717b7a2e97379dc2054712693e90f\"},",
          "1464:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:071603e2f0771c45ad9bc65719291c568d4edf120b44eb36324dcb02a13bfddf\"},",
          "1465:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:0f92a83b84e7c0749e3f12821949d79485971f087604178026085f60ce109330\"},",
          "1466:     {file = \"msgpack-1.1.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:4a1964df7b81285d00a84da4e70cb1383f2e665e0f1f2a7027e683956d04b734\"},",
          "1467:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:59caf6a4ed0d164055ccff8fe31eddc0ebc07cf7326a2aaa0dbf7a4001cd823e\"},",
          "1468:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0907e1a7119b337971a689153665764adc34e89175f9a34793307d9def08e6ca\"},",
          "1469:     {file = \"msgpack-1.1.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:65553c9b6da8166e819a6aa90ad15288599b340f91d18f60b2061f402b9a4915\"},",
          "1470:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:7a946a8992941fea80ed4beae6bff74ffd7ee129a90b4dd5cf9c476a30e9708d\"},",
          "1471:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4b51405e36e075193bc051315dbf29168d6141ae2500ba8cd80a522964e31434\"},",
          "1472:     {file = \"msgpack-1.1.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:b4c01941fd2ff87c2a934ee6055bda4ed353a7846b8d4f341c428109e9fcde8c\"},",
          "1473:     {file = \"msgpack-1.1.0-cp313-cp313-win32.whl\", hash = \"sha256:7c9a35ce2c2573bada929e0b7b3576de647b0defbd25f5139dcdaba0ae35a4cc\"},",
          "1474:     {file = \"msgpack-1.1.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:bce7d9e614a04d0883af0b3d4d501171fbfca038f12c77fa838d9f198147a23f\"},",
          "1475:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c40ffa9a15d74e05ba1fe2681ea33b9caffd886675412612d93ab17b58ea2fec\"},",
          "1476:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f1ba6136e650898082d9d5a5217d5906d1e138024f836ff48691784bbe1adf96\"},",
          "1477:     {file = \"msgpack-1.1.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e0856a2b7e8dcb874be44fea031d22e5b3a19121be92a1e098f46068a11b0870\"},",
          "1478:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:471e27a5787a2e3f974ba023f9e265a8c7cfd373632247deb225617e3100a3c7\"},",
          "1479:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:646afc8102935a388ffc3914b336d22d1c2d6209c773f3eb5dd4d6d3b6f8c1cb\"},",
          "1480:     {file = \"msgpack-1.1.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:13599f8829cfbe0158f6456374e9eea9f44eee08076291771d8ae93eda56607f\"},",
          "1481:     {file = \"msgpack-1.1.0-cp38-cp38-win32.whl\", hash = \"sha256:8a84efb768fb968381e525eeeb3d92857e4985aacc39f3c47ffd00eb4509315b\"},",
          "1482:     {file = \"msgpack-1.1.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:879a7b7b0ad82481c52d3c7eb99bf6f0645dbdec5134a4bddbd16f3506947feb\"},",
          "1483:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:53258eeb7a80fc46f62fd59c876957a2d0e15e6449a9e71842b6d24419d88ca1\"},",
          "1484:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:7e7b853bbc44fb03fbdba34feb4bd414322180135e2cb5164f20ce1c9795ee48\"},",
          "1485:     {file = \"msgpack-1.1.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f3e9b4936df53b970513eac1758f3882c88658a220b58dcc1e39606dccaaf01c\"},",
          "1486:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:46c34e99110762a76e3911fc923222472c9d681f1094096ac4102c18319e6468\"},",
          "1487:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8a706d1e74dd3dea05cb54580d9bd8b2880e9264856ce5068027eed09680aa74\"},",
          "1488:     {file = \"msgpack-1.1.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:534480ee5690ab3cbed89d4c8971a5c631b69a8c0883ecfea96c19118510c846\"},",
          "1489:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:8cf9e8c3a2153934a23ac160cc4cba0ec035f6867c8013cc6077a79823370346\"},",
          "1490:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:3180065ec2abbe13a4ad37688b61b99d7f9e012a535b930e0e683ad6bc30155b\"},",
          "1491:     {file = \"msgpack-1.1.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:c5a91481a3cc573ac8c0d9aace09345d989dc4a0202b7fcb312c88c26d4e71a8\"},",
          "1492:     {file = \"msgpack-1.1.0-cp39-cp39-win32.whl\", hash = \"sha256:f80bc7d47f76089633763f952e67f8214cb7b3ee6bfa489b3cb6a84cfac114cd\"},",
          "1493:     {file = \"msgpack-1.1.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:4d1b7ff2d6146e16e8bd665ac726a89c74163ef8cd39fa8c1087d4e52d3a2325\"},",
          "1494:     {file = \"msgpack-1.1.0.tar.gz\", hash = \"sha256:dd432ccc2c72b914e4cb77afce64aab761c1137cc698be3984eee260bcb2896e\"},",
          "",
          "[Added Lines]",
          "1435: [[package]]",
          "1436: name = \"mdurl\"",
          "1437: version = \"0.1.2\"",
          "1438: description = \"Markdown URL utilities\"",
          "1439: optional = false",
          "1440: python-versions = \">=3.7\"",
          "1441: files = [",
          "1442:     {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},",
          "1443:     {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},",
          "1444: ]",
          "1448: version = \"10.1.5\"",
          "1453:     {file = \"mitmproxy-10.1.5-py3-none-any.whl\", hash = \"sha256:24d78fe45ee30573ab2c57ab9f65d4be6bc45bbc322e36e9555bb898ee787ae8\"},",
          "1457: aioquic-mitmproxy = \">=0.9.21,<0.10\"",
          "1458: asgiref = \">=3.2.10,<3.8\"",
          "1459: Brotli = \">=1.0,<1.2\"",
          "1461: cryptography = \">=38.0,<41.1\"",
          "1462: flask = \">=1.1.1,<3.1\"",
          "1463: h11 = \">=0.11,<0.15\"",
          "1464: h2 = \">=4.1,<5\"",
          "1465: hyperframe = \">=6.0,<7\"",
          "1466: kaitaistruct = \">=0.10,<0.11\"",
          "1467: ldap3 = \">=2.8,<2.10\"",
          "1468: mitmproxy-rs = \">=0.4,<0.5\"",
          "1469: msgpack = \">=1.0.0,<1.1.0\"",
          "1470: passlib = \">=1.6.5,<1.8\"",
          "1471: protobuf = \">=3.14,<5\"",
          "1472: publicsuffix2 = \">=2.20190812,<3\"",
          "1473: pydivert = {version = \">=2.0.3,<2.2\", markers = \"sys_platform == \\\"win32\\\"\"}",
          "1474: pyOpenSSL = \">=22.1,<23.4\"",
          "1475: pyparsing = \">=2.4.2,<3.2\"",
          "1476: pyperclip = \">=1.6.0,<1.9\"",
          "1477: \"ruamel.yaml\" = \">=0.16,<0.19\"",
          "1478: sortedcontainers = \">=2.3,<2.5\"",
          "1479: tornado = \">=6.2,<7\"",
          "1480: typing-extensions = {version = \">=4.3,<5\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1481: urwid-mitmproxy = \">=2.1.1,<2.2\"",
          "1482: wsproto = \">=1.0,<1.3\"",
          "1483: zstandard = \">=0.11,<0.23\"",
          "1486: dev = [\"build (>=0.10.0)\", \"click (>=7.0,<8.2)\", \"hypothesis (>=5.8,<7)\", \"pdoc (>=4.0.0)\", \"pyinstaller (==6.1.0)\", \"pytest (>=6.1.0,<8)\", \"pytest-asyncio (>=0.17,<0.22)\", \"pytest-cov (>=2.7.1,<4.2)\", \"pytest-timeout (>=1.3.3,<2.3)\", \"pytest-xdist (>=2.1.0,<3.4)\", \"requests (>=2.9.1,<3)\", \"tox (>=3.5,<5)\", \"wheel (>=0.36.2,<0.42)\"]",
          "1490: version = \"0.4.1\"",
          "1495:     {file = \"mitmproxy_macos-0.4.1-py3-none-any.whl\", hash = \"sha256:3720561fc8788f2ac71a063780dfb28e3353f216f978b04f8a0aa865835af97b\"},",
          "1500: version = \"0.4.1\"",
          "1505:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-macosx_10_9_x86_64.macosx_11_0_arm64.macosx_10_9_universal2.whl\", hash = \"sha256:8674af6f9be7c1d26508f355322d3ce6a33f344eacefef403e0784bb10941054\"},",
          "1506:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e70adbcb0bd4d4c9a5ada99dc720747f9ab2c10357c1350b02e064466d77760c\"},",
          "1507:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f5da094d204ccca4b76f5db25c69ee34f8ad1aa9ac5e14ed72b8a91a6b8bcddd\"},",
          "1508:     {file = \"mitmproxy_rs-0.4.1-cp310-abi3-win_amd64.whl\", hash = \"sha256:037f627ae08ca62af50e62e8915b6563a3a8b55313e5aa2266406a0a27b19092\"},",
          "1509:     {file = \"mitmproxy_rs-0.4.1.tar.gz\", hash = \"sha256:179bc584a771ec39c16b3a87bde7faffa3872137aad477173ad4435b49ef855e\"},",
          "1513: mitmproxy_macos = {version = \"0.4.1\", markers = \"sys_platform == \\\"darwin\\\"\"}",
          "1514: mitmproxy_windows = {version = \"0.4.1\", markers = \"os_name == \\\"nt\\\"\"}",
          "1518: version = \"0.4.1\"",
          "1523:     {file = \"mitmproxy_windows-0.4.1-py3-none-any.whl\", hash = \"sha256:1a9c8e024d1b2e5544cc81bfb95bf2e713260191e64523e1c5b3bef98ad960ab\"},",
          "1528: version = \"1.0.8\"",
          "1533:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:505fe3d03856ac7d215dbe005414bc28505d26f0c128906037e66d98c4e95868\"},",
          "1534:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e6b7842518a63a9f17107eb176320960ec095a8ee3b4420b5f688e24bf50c53c\"},",
          "1535:     {file = \"msgpack-1.0.8-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:376081f471a2ef24828b83a641a02c575d6103a3ad7fd7dade5486cad10ea659\"},",
          "1536:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5e390971d082dba073c05dbd56322427d3280b7cc8b53484c9377adfbae67dc2\"},",
          "1537:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:00e073efcba9ea99db5acef3959efa45b52bc67b61b00823d2a1a6944bf45982\"},",
          "1538:     {file = \"msgpack-1.0.8-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:82d92c773fbc6942a7a8b520d22c11cfc8fd83bba86116bfcf962c2f5c2ecdaa\"},",
          "1539:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:9ee32dcb8e531adae1f1ca568822e9b3a738369b3b686d1477cbc643c4a9c128\"},",
          "1540:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:e3aa7e51d738e0ec0afbed661261513b38b3014754c9459508399baf14ae0c9d\"},",
          "1541:     {file = \"msgpack-1.0.8-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:69284049d07fce531c17404fcba2bb1df472bc2dcdac642ae71a2d079d950653\"},",
          "1542:     {file = \"msgpack-1.0.8-cp310-cp310-win32.whl\", hash = \"sha256:13577ec9e247f8741c84d06b9ece5f654920d8365a4b636ce0e44f15e07ec693\"},",
          "1543:     {file = \"msgpack-1.0.8-cp310-cp310-win_amd64.whl\", hash = \"sha256:e532dbd6ddfe13946de050d7474e3f5fb6ec774fbb1a188aaf469b08cf04189a\"},",
          "1544:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:9517004e21664f2b5a5fd6333b0731b9cf0817403a941b393d89a2f1dc2bd836\"},",
          "1545:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:d16a786905034e7e34098634b184a7d81f91d4c3d246edc6bd7aefb2fd8ea6ad\"},",
          "1546:     {file = \"msgpack-1.0.8-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:e2872993e209f7ed04d963e4b4fbae72d034844ec66bc4ca403329db2074377b\"},",
          "1547:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5c330eace3dd100bdb54b5653b966de7f51c26ec4a7d4e87132d9b4f738220ba\"},",
          "1548:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:83b5c044f3eff2a6534768ccfd50425939e7a8b5cf9a7261c385de1e20dcfc85\"},",
          "1549:     {file = \"msgpack-1.0.8-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1876b0b653a808fcd50123b953af170c535027bf1d053b59790eebb0aeb38950\"},",
          "1550:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:dfe1f0f0ed5785c187144c46a292b8c34c1295c01da12e10ccddfc16def4448a\"},",
          "1551:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:3528807cbbb7f315bb81959d5961855e7ba52aa60a3097151cb21956fbc7502b\"},",
          "1552:     {file = \"msgpack-1.0.8-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e2f879ab92ce502a1e65fce390eab619774dda6a6ff719718069ac94084098ce\"},",
          "1553:     {file = \"msgpack-1.0.8-cp311-cp311-win32.whl\", hash = \"sha256:26ee97a8261e6e35885c2ecd2fd4a6d38252246f94a2aec23665a4e66d066305\"},",
          "1554:     {file = \"msgpack-1.0.8-cp311-cp311-win_amd64.whl\", hash = \"sha256:eadb9f826c138e6cf3c49d6f8de88225a3c0ab181a9b4ba792e006e5292d150e\"},",
          "1555:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:114be227f5213ef8b215c22dde19532f5da9652e56e8ce969bf0a26d7c419fee\"},",
          "1556:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:d661dc4785affa9d0edfdd1e59ec056a58b3dbb9f196fa43587f3ddac654ac7b\"},",
          "1557:     {file = \"msgpack-1.0.8-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:d56fd9f1f1cdc8227d7b7918f55091349741904d9520c65f0139a9755952c9e8\"},",
          "1558:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0726c282d188e204281ebd8de31724b7d749adebc086873a59efb8cf7ae27df3\"},",
          "1559:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8db8e423192303ed77cff4dce3a4b88dbfaf43979d280181558af5e2c3c71afc\"},",
          "1560:     {file = \"msgpack-1.0.8-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:99881222f4a8c2f641f25703963a5cefb076adffd959e0558dc9f803a52d6a58\"},",
          "1561:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:b5505774ea2a73a86ea176e8a9a4a7c8bf5d521050f0f6f8426afe798689243f\"},",
          "1562:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:ef254a06bcea461e65ff0373d8a0dd1ed3aa004af48839f002a0c994a6f72d04\"},",
          "1563:     {file = \"msgpack-1.0.8-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:e1dd7839443592d00e96db831eddb4111a2a81a46b028f0facd60a09ebbdd543\"},",
          "1564:     {file = \"msgpack-1.0.8-cp312-cp312-win32.whl\", hash = \"sha256:64d0fcd436c5683fdd7c907eeae5e2cbb5eb872fafbc03a43609d7941840995c\"},",
          "1565:     {file = \"msgpack-1.0.8-cp312-cp312-win_amd64.whl\", hash = \"sha256:74398a4cf19de42e1498368c36eed45d9528f5fd0155241e82c4082b7e16cffd\"},",
          "1566:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:0ceea77719d45c839fd73abcb190b8390412a890df2f83fb8cf49b2a4b5c2f40\"},",
          "1567:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:1ab0bbcd4d1f7b6991ee7c753655b481c50084294218de69365f8f1970d4c151\"},",
          "1568:     {file = \"msgpack-1.0.8-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:1cce488457370ffd1f953846f82323cb6b2ad2190987cd4d70b2713e17268d24\"},",
          "1569:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3923a1778f7e5ef31865893fdca12a8d7dc03a44b33e2a5f3295416314c09f5d\"},",
          "1570:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a22e47578b30a3e199ab067a4d43d790249b3c0587d9a771921f86250c8435db\"},",
          "1571:     {file = \"msgpack-1.0.8-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:bd739c9251d01e0279ce729e37b39d49a08c0420d3fee7f2a4968c0576678f77\"},",
          "1572:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:d3420522057ebab1728b21ad473aa950026d07cb09da41103f8e597dfbfaeb13\"},",
          "1573:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:5845fdf5e5d5b78a49b826fcdc0eb2e2aa7191980e3d2cfd2a30303a74f212e2\"},",
          "1574:     {file = \"msgpack-1.0.8-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:6a0e76621f6e1f908ae52860bdcb58e1ca85231a9b0545e64509c931dd34275a\"},",
          "1575:     {file = \"msgpack-1.0.8-cp38-cp38-win32.whl\", hash = \"sha256:374a8e88ddab84b9ada695d255679fb99c53513c0a51778796fcf0944d6c789c\"},",
          "1576:     {file = \"msgpack-1.0.8-cp38-cp38-win_amd64.whl\", hash = \"sha256:f3709997b228685fe53e8c433e2df9f0cdb5f4542bd5114ed17ac3c0129b0480\"},",
          "1577:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:f51bab98d52739c50c56658cc303f190785f9a2cd97b823357e7aeae54c8f68a\"},",
          "1578:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:73ee792784d48aa338bba28063e19a27e8d989344f34aad14ea6e1b9bd83f596\"},",
          "1579:     {file = \"msgpack-1.0.8-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f9904e24646570539a8950400602d66d2b2c492b9010ea7e965025cb71d0c86d\"},",
          "1580:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e75753aeda0ddc4c28dce4c32ba2f6ec30b1b02f6c0b14e547841ba5b24f753f\"},",
          "1581:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5dbf059fb4b7c240c873c1245ee112505be27497e90f7c6591261c7d3c3a8228\"},",
          "1582:     {file = \"msgpack-1.0.8-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4916727e31c28be8beaf11cf117d6f6f188dcc36daae4e851fee88646f5b6b18\"},",
          "1583:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:7938111ed1358f536daf311be244f34df7bf3cdedb3ed883787aca97778b28d8\"},",
          "1584:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:493c5c5e44b06d6c9268ce21b302c9ca055c1fd3484c25ba41d34476c76ee746\"},",
          "1585:     {file = \"msgpack-1.0.8-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:5fbb160554e319f7b22ecf530a80a3ff496d38e8e07ae763b9e82fadfe96f273\"},",
          "1586:     {file = \"msgpack-1.0.8-cp39-cp39-win32.whl\", hash = \"sha256:f9af38a89b6a5c04b7d18c492c8ccf2aee7048aff1ce8437c4683bb5a1df893d\"},",
          "1587:     {file = \"msgpack-1.0.8-cp39-cp39-win_amd64.whl\", hash = \"sha256:ed59dd52075f8fc91da6053b12e8c89e37aa043f8986efd89e61fae69dc1b011\"},",
          "1588:     {file = \"msgpack-1.0.8.tar.gz\", hash = \"sha256:95c02b0e27e706e48d0e5426d1710ca78e0f0628d6e89d5b5a5b91a5f12274f3\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1505:     {file = \"openstep_parser-1.5.4.tar.gz\", hash = \"sha256:f03c7fd9c78ac718c470cb0f667c1f09fa7f58786314f77fef8767302abe1658\"},",
          "1506: ]",
          "1508: [[package]]",
          "1509: name = \"packaging\"",
          "1510: version = \"21.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1602: [[package]]",
          "1603: name = \"opentelemetry-api\"",
          "1604: version = \"1.25.0\"",
          "1605: description = \"OpenTelemetry Python API\"",
          "1606: optional = false",
          "1607: python-versions = \">=3.8\"",
          "1608: files = [",
          "1609:     {file = \"opentelemetry_api-1.25.0-py3-none-any.whl\", hash = \"sha256:757fa1aa020a0f8fa139f8959e53dec2051cc26b832e76fa839a6d76ecefd737\"},",
          "1610:     {file = \"opentelemetry_api-1.25.0.tar.gz\", hash = \"sha256:77c4985f62f2614e42ce77ee4c9da5fa5f0bc1e1821085e9a47533a9323ae869\"},",
          "1611: ]",
          "1613: [package.dependencies]",
          "1614: deprecated = \">=1.2.6\"",
          "1615: importlib-metadata = \">=6.0,<=7.1\"",
          "1617: [[package]]",
          "1618: name = \"opentelemetry-exporter-otlp-proto-common\"",
          "1619: version = \"1.25.0\"",
          "1620: description = \"OpenTelemetry Protobuf encoding\"",
          "1621: optional = false",
          "1622: python-versions = \">=3.8\"",
          "1623: files = [",
          "1624:     {file = \"opentelemetry_exporter_otlp_proto_common-1.25.0-py3-none-any.whl\", hash = \"sha256:15637b7d580c2675f70246563363775b4e6de947871e01d0f4e3881d1848d693\"},",
          "1625:     {file = \"opentelemetry_exporter_otlp_proto_common-1.25.0.tar.gz\", hash = \"sha256:c93f4e30da4eee02bacd1e004eb82ce4da143a2f8e15b987a9f603e0a85407d3\"},",
          "1626: ]",
          "1628: [package.dependencies]",
          "1629: opentelemetry-proto = \"1.25.0\"",
          "1631: [[package]]",
          "1632: name = \"opentelemetry-exporter-otlp-proto-http\"",
          "1633: version = \"1.25.0\"",
          "1634: description = \"OpenTelemetry Collector Protobuf over HTTP Exporter\"",
          "1635: optional = false",
          "1636: python-versions = \">=3.8\"",
          "1637: files = [",
          "1638:     {file = \"opentelemetry_exporter_otlp_proto_http-1.25.0-py3-none-any.whl\", hash = \"sha256:2eca686ee11b27acd28198b3ea5e5863a53d1266b91cda47c839d95d5e0541a6\"},",
          "1639:     {file = \"opentelemetry_exporter_otlp_proto_http-1.25.0.tar.gz\", hash = \"sha256:9f8723859e37c75183ea7afa73a3542f01d0fd274a5b97487ea24cb683d7d684\"},",
          "1640: ]",
          "1642: [package.dependencies]",
          "1643: deprecated = \">=1.2.6\"",
          "1644: googleapis-common-protos = \">=1.52,<2.0\"",
          "1645: opentelemetry-api = \">=1.15,<2.0\"",
          "1646: opentelemetry-exporter-otlp-proto-common = \"1.25.0\"",
          "1647: opentelemetry-proto = \"1.25.0\"",
          "1648: opentelemetry-sdk = \">=1.25.0,<1.26.0\"",
          "1649: requests = \">=2.7,<3.0\"",
          "1651: [[package]]",
          "1652: name = \"opentelemetry-instrumentation\"",
          "1653: version = \"0.46b0\"",
          "1654: description = \"Instrumentation Tools & Auto Instrumentation for OpenTelemetry Python\"",
          "1655: optional = false",
          "1656: python-versions = \">=3.8\"",
          "1657: files = [",
          "1658:     {file = \"opentelemetry_instrumentation-0.46b0-py3-none-any.whl\", hash = \"sha256:89cd721b9c18c014ca848ccd11181e6b3fd3f6c7669e35d59c48dc527408c18b\"},",
          "1659:     {file = \"opentelemetry_instrumentation-0.46b0.tar.gz\", hash = \"sha256:974e0888fb2a1e01c38fbacc9483d024bb1132aad92d6d24e2e5543887a7adda\"},",
          "1660: ]",
          "1662: [package.dependencies]",
          "1663: opentelemetry-api = \">=1.4,<2.0\"",
          "1664: setuptools = \">=16.0\"",
          "1665: wrapt = \">=1.0.0,<2.0.0\"",
          "1667: [[package]]",
          "1668: name = \"opentelemetry-instrumentation-requests\"",
          "1669: version = \"0.46b0\"",
          "1670: description = \"OpenTelemetry requests instrumentation\"",
          "1671: optional = false",
          "1672: python-versions = \">=3.8\"",
          "1673: files = [",
          "1674:     {file = \"opentelemetry_instrumentation_requests-0.46b0-py3-none-any.whl\", hash = \"sha256:a8c2472800d8686f3f286cd524b8746b386154092e85a791ba14110d1acc9b81\"},",
          "1675:     {file = \"opentelemetry_instrumentation_requests-0.46b0.tar.gz\", hash = \"sha256:ef0ad63bfd0d52631daaf7d687e763dbd89b465f5cb052f12a4e67e5e3d181e4\"},",
          "1676: ]",
          "1678: [package.dependencies]",
          "1679: opentelemetry-api = \">=1.12,<2.0\"",
          "1680: opentelemetry-instrumentation = \"0.46b0\"",
          "1681: opentelemetry-semantic-conventions = \"0.46b0\"",
          "1682: opentelemetry-util-http = \"0.46b0\"",
          "1684: [package.extras]",
          "1685: instruments = [\"requests (>=2.0,<3.0)\"]",
          "1687: [[package]]",
          "1688: name = \"opentelemetry-proto\"",
          "1689: version = \"1.25.0\"",
          "1690: description = \"OpenTelemetry Python Proto\"",
          "1691: optional = false",
          "1692: python-versions = \">=3.8\"",
          "1693: files = [",
          "1694:     {file = \"opentelemetry_proto-1.25.0-py3-none-any.whl\", hash = \"sha256:f07e3341c78d835d9b86665903b199893befa5e98866f63d22b00d0b7ca4972f\"},",
          "1695:     {file = \"opentelemetry_proto-1.25.0.tar.gz\", hash = \"sha256:35b6ef9dc4a9f7853ecc5006738ad40443701e52c26099e197895cbda8b815a3\"},",
          "1696: ]",
          "1698: [package.dependencies]",
          "1699: protobuf = \">=3.19,<5.0\"",
          "1701: [[package]]",
          "1702: name = \"opentelemetry-sdk\"",
          "1703: version = \"1.25.0\"",
          "1704: description = \"OpenTelemetry Python SDK\"",
          "1705: optional = false",
          "1706: python-versions = \">=3.8\"",
          "1707: files = [",
          "1708:     {file = \"opentelemetry_sdk-1.25.0-py3-none-any.whl\", hash = \"sha256:d97ff7ec4b351692e9d5a15af570c693b8715ad78b8aafbec5c7100fe966b4c9\"},",
          "1709:     {file = \"opentelemetry_sdk-1.25.0.tar.gz\", hash = \"sha256:ce7fc319c57707ef5bf8b74fb9f8ebdb8bfafbe11898410e0d2a761d08a98ec7\"},",
          "1710: ]",
          "1712: [package.dependencies]",
          "1713: opentelemetry-api = \"1.25.0\"",
          "1714: opentelemetry-semantic-conventions = \"0.46b0\"",
          "1715: typing-extensions = \">=3.7.4\"",
          "1717: [[package]]",
          "1718: name = \"opentelemetry-semantic-conventions\"",
          "1719: version = \"0.46b0\"",
          "1720: description = \"OpenTelemetry Semantic Conventions\"",
          "1721: optional = false",
          "1722: python-versions = \">=3.8\"",
          "1723: files = [",
          "1724:     {file = \"opentelemetry_semantic_conventions-0.46b0-py3-none-any.whl\", hash = \"sha256:6daef4ef9fa51d51855d9f8e0ccd3a1bd59e0e545abe99ac6203804e36ab3e07\"},",
          "1725:     {file = \"opentelemetry_semantic_conventions-0.46b0.tar.gz\", hash = \"sha256:fbc982ecbb6a6e90869b15c1673be90bd18c8a56ff1cffc0864e38e2edffaefa\"},",
          "1726: ]",
          "1728: [package.dependencies]",
          "1729: opentelemetry-api = \"1.25.0\"",
          "1731: [[package]]",
          "1732: name = \"opentelemetry-util-http\"",
          "1733: version = \"0.46b0\"",
          "1734: description = \"Web util for OpenTelemetry\"",
          "1735: optional = false",
          "1736: python-versions = \">=3.8\"",
          "1737: files = [",
          "1738:     {file = \"opentelemetry_util_http-0.46b0-py3-none-any.whl\", hash = \"sha256:8dc1949ce63caef08db84ae977fdc1848fe6dc38e6bbaad0ae3e6ecd0d451629\"},",
          "1739:     {file = \"opentelemetry_util_http-0.46b0.tar.gz\", hash = \"sha256:03b6e222642f9c7eae58d9132343e045b50aca9761fcb53709bd2b663571fdf6\"},",
          "1740: ]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1582: [[package]]",
          "1583: name = \"protobuf\"",
          "1585: description = \"\"",
          "1586: optional = false",
          "1587: python-versions = \">=3.8\"",
          "1588: files = [",
          "1600: ]",
          "1602: [[package]]",
          "",
          "[Removed Lines]",
          "1584: version = \"5.28.2\"",
          "1589:     {file = \"protobuf-5.28.2-cp310-abi3-win32.whl\", hash = \"sha256:eeea10f3dc0ac7e6b4933d32db20662902b4ab81bf28df12218aa389e9c2102d\"},",
          "1590:     {file = \"protobuf-5.28.2-cp310-abi3-win_amd64.whl\", hash = \"sha256:2c69461a7fcc8e24be697624c09a839976d82ae75062b11a0972e41fd2cd9132\"},",
          "1591:     {file = \"protobuf-5.28.2-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:a8b9403fc70764b08d2f593ce44f1d2920c5077bf7d311fefec999f8c40f78b7\"},",
          "1592:     {file = \"protobuf-5.28.2-cp38-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:35cfcb15f213449af7ff6198d6eb5f739c37d7e4f1c09b5d0641babf2cc0c68f\"},",
          "1593:     {file = \"protobuf-5.28.2-cp38-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:5e8a95246d581eef20471b5d5ba010d55f66740942b95ba9b872d918c459452f\"},",
          "1594:     {file = \"protobuf-5.28.2-cp38-cp38-win32.whl\", hash = \"sha256:87317e9bcda04a32f2ee82089a204d3a2f0d3c8aeed16568c7daf4756e4f1fe0\"},",
          "1595:     {file = \"protobuf-5.28.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:c0ea0123dac3399a2eeb1a1443d82b7afc9ff40241433296769f7da42d142ec3\"},",
          "1596:     {file = \"protobuf-5.28.2-cp39-cp39-win32.whl\", hash = \"sha256:ca53faf29896c526863366a52a8f4d88e69cd04ec9571ed6082fa117fac3ab36\"},",
          "1597:     {file = \"protobuf-5.28.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:8ddc60bf374785fb7cb12510b267f59067fa10087325b8e1855b898a0d81d276\"},",
          "1598:     {file = \"protobuf-5.28.2-py3-none-any.whl\", hash = \"sha256:52235802093bd8a2811abbe8bf0ab9c5f54cca0a751fdd3f6ac2a21438bffece\"},",
          "1599:     {file = \"protobuf-5.28.2.tar.gz\", hash = \"sha256:59379674ff119717404f7454647913787034f03fe7049cbef1d74a97bb4593f0\"},",
          "",
          "[Added Lines]",
          "1818: version = \"4.25.5\"",
          "1823:     {file = \"protobuf-4.25.5-cp310-abi3-win32.whl\", hash = \"sha256:5e61fd921603f58d2f5acb2806a929b4675f8874ff5f330b7d6f7e2e784bbcd8\"},",
          "1824:     {file = \"protobuf-4.25.5-cp310-abi3-win_amd64.whl\", hash = \"sha256:4be0571adcbe712b282a330c6e89eae24281344429ae95c6d85e79e84780f5ea\"},",
          "1825:     {file = \"protobuf-4.25.5-cp37-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:b2fde3d805354df675ea4c7c6338c1aecd254dfc9925e88c6d31a2bcb97eb173\"},",
          "1826:     {file = \"protobuf-4.25.5-cp37-abi3-manylinux2014_aarch64.whl\", hash = \"sha256:919ad92d9b0310070f8356c24b855c98df2b8bd207ebc1c0c6fcc9ab1e007f3d\"},",
          "1827:     {file = \"protobuf-4.25.5-cp37-abi3-manylinux2014_x86_64.whl\", hash = \"sha256:fe14e16c22be926d3abfcb500e60cab068baf10b542b8c858fa27e098123e331\"},",
          "1828:     {file = \"protobuf-4.25.5-cp38-cp38-win32.whl\", hash = \"sha256:98d8d8aa50de6a2747efd9cceba361c9034050ecce3e09136f90de37ddba66e1\"},",
          "1829:     {file = \"protobuf-4.25.5-cp38-cp38-win_amd64.whl\", hash = \"sha256:b0234dd5a03049e4ddd94b93400b67803c823cfc405689688f59b34e0742381a\"},",
          "1830:     {file = \"protobuf-4.25.5-cp39-cp39-win32.whl\", hash = \"sha256:abe32aad8561aa7cc94fc7ba4fdef646e576983edb94a73381b03c53728a626f\"},",
          "1831:     {file = \"protobuf-4.25.5-cp39-cp39-win_amd64.whl\", hash = \"sha256:7a183f592dc80aa7c8da7ad9e55091c4ffc9497b3054452d629bb85fa27c2a45\"},",
          "1832:     {file = \"protobuf-4.25.5-py3-none-any.whl\", hash = \"sha256:0aebecb809cae990f8129ada5ca273d9d670b76d9bfc9b1809f0a9c02b7dbf41\"},",
          "1833:     {file = \"protobuf-4.25.5.tar.gz\", hash = \"sha256:7f8249476b4a9473645db7f8ab42b02fe1488cbe5fb72fddd445e0665afd8584\"},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1752:     {file = \"pycparser-2.22.tar.gz\", hash = \"sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6\"},",
          "1753: ]",
          "1755: [[package]]",
          "1756: name = \"pydivert\"",
          "1757: version = \"2.1.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1989: [[package]]",
          "1990: name = \"pydantic\"",
          "1991: version = \"2.8.2\"",
          "1992: description = \"Data validation using Python type hints\"",
          "1993: optional = false",
          "1994: python-versions = \">=3.8\"",
          "1995: files = [",
          "1996:     {file = \"pydantic-2.8.2-py3-none-any.whl\", hash = \"sha256:73ee9fddd406dc318b885c7a2eab8a6472b68b8fb5ba8150949fc3db939f23c8\"},",
          "1997:     {file = \"pydantic-2.8.2.tar.gz\", hash = \"sha256:6f62c13d067b0755ad1c21a34bdd06c0c12625a22b0fc09c6b149816604f7c2a\"},",
          "1998: ]",
          "2000: [package.dependencies]",
          "2001: annotated-types = \">=0.4.0\"",
          "2002: pydantic-core = \"2.20.1\"",
          "2003: typing-extensions = [",
          "2004:     {version = \">=4.12.2\", markers = \"python_version >= \\\"3.13\\\"\"},",
          "2005:     {version = \">=4.6.1\", markers = \"python_version < \\\"3.13\\\"\"},",
          "2006: ]",
          "2008: [package.extras]",
          "2009: email = [\"email-validator (>=2.0.0)\"]",
          "2011: [[package]]",
          "2012: name = \"pydantic-core\"",
          "2013: version = \"2.20.1\"",
          "2014: description = \"Core functionality for Pydantic validation and serialization\"",
          "2015: optional = false",
          "2016: python-versions = \">=3.8\"",
          "2017: files = [",
          "2018:     {file = \"pydantic_core-2.20.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:3acae97ffd19bf091c72df4d726d552c473f3576409b2a7ca36b2f535ffff4a3\"},",
          "2019:     {file = \"pydantic_core-2.20.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:41f4c96227a67a013e7de5ff8f20fb496ce573893b7f4f2707d065907bffdbd6\"},",
          "2020:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5f239eb799a2081495ea659d8d4a43a8f42cd1fe9ff2e7e436295c38a10c286a\"},",
          "2021:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:53e431da3fc53360db73eedf6f7124d1076e1b4ee4276b36fb25514544ceb4a3\"},",
          "2022:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f1f62b2413c3a0e846c3b838b2ecd6c7a19ec6793b2a522745b0869e37ab5bc1\"},",
          "2023:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5d41e6daee2813ecceea8eda38062d69e280b39df793f5a942fa515b8ed67953\"},",
          "2024:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3d482efec8b7dc6bfaedc0f166b2ce349df0011f5d2f1f25537ced4cfc34fd98\"},",
          "2025:     {file = \"pydantic_core-2.20.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:e93e1a4b4b33daed65d781a57a522ff153dcf748dee70b40c7258c5861e1768a\"},",
          "2026:     {file = \"pydantic_core-2.20.1-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:e7c4ea22b6739b162c9ecaaa41d718dfad48a244909fe7ef4b54c0b530effc5a\"},",
          "2027:     {file = \"pydantic_core-2.20.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:4f2790949cf385d985a31984907fecb3896999329103df4e4983a4a41e13e840\"},",
          "2028:     {file = \"pydantic_core-2.20.1-cp310-none-win32.whl\", hash = \"sha256:5e999ba8dd90e93d57410c5e67ebb67ffcaadcea0ad973240fdfd3a135506250\"},",
          "2029:     {file = \"pydantic_core-2.20.1-cp310-none-win_amd64.whl\", hash = \"sha256:512ecfbefef6dac7bc5eaaf46177b2de58cdf7acac8793fe033b24ece0b9566c\"},",
          "2030:     {file = \"pydantic_core-2.20.1-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:d2a8fa9d6d6f891f3deec72f5cc668e6f66b188ab14bb1ab52422fe8e644f312\"},",
          "2031:     {file = \"pydantic_core-2.20.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:175873691124f3d0da55aeea1d90660a6ea7a3cfea137c38afa0a5ffabe37b88\"},",
          "2032:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:37eee5b638f0e0dcd18d21f59b679686bbd18917b87db0193ae36f9c23c355fc\"},",
          "2033:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:25e9185e2d06c16ee438ed39bf62935ec436474a6ac4f9358524220f1b236e43\"},",
          "2034:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:150906b40ff188a3260cbee25380e7494ee85048584998c1e66df0c7a11c17a6\"},",
          "2035:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8ad4aeb3e9a97286573c03df758fc7627aecdd02f1da04516a86dc159bf70121\"},",
          "2036:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d3f3ed29cd9f978c604708511a1f9c2fdcb6c38b9aae36a51905b8811ee5cbf1\"},",
          "2037:     {file = \"pydantic_core-2.20.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b0dae11d8f5ded51699c74d9548dcc5938e0804cc8298ec0aa0da95c21fff57b\"},",
          "2038:     {file = \"pydantic_core-2.20.1-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:faa6b09ee09433b87992fb5a2859efd1c264ddc37280d2dd5db502126d0e7f27\"},",
          "2039:     {file = \"pydantic_core-2.20.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:9dc1b507c12eb0481d071f3c1808f0529ad41dc415d0ca11f7ebfc666e66a18b\"},",
          "2040:     {file = \"pydantic_core-2.20.1-cp311-none-win32.whl\", hash = \"sha256:fa2fddcb7107e0d1808086ca306dcade7df60a13a6c347a7acf1ec139aa6789a\"},",
          "2041:     {file = \"pydantic_core-2.20.1-cp311-none-win_amd64.whl\", hash = \"sha256:40a783fb7ee353c50bd3853e626f15677ea527ae556429453685ae32280c19c2\"},",
          "2042:     {file = \"pydantic_core-2.20.1-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:595ba5be69b35777474fa07f80fc260ea71255656191adb22a8c53aba4479231\"},",
          "2043:     {file = \"pydantic_core-2.20.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:a4f55095ad087474999ee28d3398bae183a66be4823f753cd7d67dd0153427c9\"},",
          "2044:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f9aa05d09ecf4c75157197f27cdc9cfaeb7c5f15021c6373932bf3e124af029f\"},",
          "2045:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e97fdf088d4b31ff4ba35db26d9cc472ac7ef4a2ff2badeabf8d727b3377fc52\"},",
          "2046:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:bc633a9fe1eb87e250b5c57d389cf28998e4292336926b0b6cdaee353f89a237\"},",
          "2047:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d573faf8eb7e6b1cbbcb4f5b247c60ca8be39fe2c674495df0eb4318303137fe\"},",
          "2048:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:26dc97754b57d2fd00ac2b24dfa341abffc380b823211994c4efac7f13b9e90e\"},",
          "2049:     {file = \"pydantic_core-2.20.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:33499e85e739a4b60c9dac710c20a08dc73cb3240c9a0e22325e671b27b70d24\"},",
          "2050:     {file = \"pydantic_core-2.20.1-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:bebb4d6715c814597f85297c332297c6ce81e29436125ca59d1159b07f423eb1\"},",
          "2051:     {file = \"pydantic_core-2.20.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:516d9227919612425c8ef1c9b869bbbee249bc91912c8aaffb66116c0b447ebd\"},",
          "2052:     {file = \"pydantic_core-2.20.1-cp312-none-win32.whl\", hash = \"sha256:469f29f9093c9d834432034d33f5fe45699e664f12a13bf38c04967ce233d688\"},",
          "2053:     {file = \"pydantic_core-2.20.1-cp312-none-win_amd64.whl\", hash = \"sha256:035ede2e16da7281041f0e626459bcae33ed998cca6a0a007a5ebb73414ac72d\"},",
          "2054:     {file = \"pydantic_core-2.20.1-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:0827505a5c87e8aa285dc31e9ec7f4a17c81a813d45f70b1d9164e03a813a686\"},",
          "2055:     {file = \"pydantic_core-2.20.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:19c0fa39fa154e7e0b7f82f88ef85faa2a4c23cc65aae2f5aea625e3c13c735a\"},",
          "2056:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4aa223cd1e36b642092c326d694d8bf59b71ddddc94cdb752bbbb1c5c91d833b\"},",
          "2057:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:c336a6d235522a62fef872c6295a42ecb0c4e1d0f1a3e500fe949415761b8a19\"},",
          "2058:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:7eb6a0587eded33aeefea9f916899d42b1799b7b14b8f8ff2753c0ac1741edac\"},",
          "2059:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:70c8daf4faca8da5a6d655f9af86faf6ec2e1768f4b8b9d0226c02f3d6209703\"},",
          "2060:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e9fa4c9bf273ca41f940bceb86922a7667cd5bf90e95dbb157cbb8441008482c\"},",
          "2061:     {file = \"pydantic_core-2.20.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:11b71d67b4725e7e2a9f6e9c0ac1239bbc0c48cce3dc59f98635efc57d6dac83\"},",
          "2062:     {file = \"pydantic_core-2.20.1-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:270755f15174fb983890c49881e93f8f1b80f0b5e3a3cc1394a255706cabd203\"},",
          "2063:     {file = \"pydantic_core-2.20.1-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:c81131869240e3e568916ef4c307f8b99583efaa60a8112ef27a366eefba8ef0\"},",
          "2064:     {file = \"pydantic_core-2.20.1-cp313-none-win32.whl\", hash = \"sha256:b91ced227c41aa29c672814f50dbb05ec93536abf8f43cd14ec9521ea09afe4e\"},",
          "2065:     {file = \"pydantic_core-2.20.1-cp313-none-win_amd64.whl\", hash = \"sha256:65db0f2eefcaad1a3950f498aabb4875c8890438bc80b19362cf633b87a8ab20\"},",
          "2066:     {file = \"pydantic_core-2.20.1-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:4745f4ac52cc6686390c40eaa01d48b18997cb130833154801a442323cc78f91\"},",
          "2067:     {file = \"pydantic_core-2.20.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:a8ad4c766d3f33ba8fd692f9aa297c9058970530a32c728a2c4bfd2616d3358b\"},",
          "2068:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:41e81317dd6a0127cabce83c0c9c3fbecceae981c8391e6f1dec88a77c8a569a\"},",
          "2069:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:04024d270cf63f586ad41fff13fde4311c4fc13ea74676962c876d9577bcc78f\"},",
          "2070:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:eaad4ff2de1c3823fddf82f41121bdf453d922e9a238642b1dedb33c4e4f98ad\"},",
          "2071:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:26ab812fa0c845df815e506be30337e2df27e88399b985d0bb4e3ecfe72df31c\"},",
          "2072:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3c5ebac750d9d5f2706654c638c041635c385596caf68f81342011ddfa1e5598\"},",
          "2073:     {file = \"pydantic_core-2.20.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2aafc5a503855ea5885559eae883978c9b6d8c8993d67766ee73d82e841300dd\"},",
          "2074:     {file = \"pydantic_core-2.20.1-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:4868f6bd7c9d98904b748a2653031fc9c2f85b6237009d475b1008bfaeb0a5aa\"},",
          "2075:     {file = \"pydantic_core-2.20.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:aa2f457b4af386254372dfa78a2eda2563680d982422641a85f271c859df1987\"},",
          "2076:     {file = \"pydantic_core-2.20.1-cp38-none-win32.whl\", hash = \"sha256:225b67a1f6d602de0ce7f6c1c3ae89a4aa25d3de9be857999e9124f15dab486a\"},",
          "2077:     {file = \"pydantic_core-2.20.1-cp38-none-win_amd64.whl\", hash = \"sha256:6b507132dcfc0dea440cce23ee2182c0ce7aba7054576efc65634f080dbe9434\"},",
          "2078:     {file = \"pydantic_core-2.20.1-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:b03f7941783b4c4a26051846dea594628b38f6940a2fdc0df00b221aed39314c\"},",
          "2079:     {file = \"pydantic_core-2.20.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:1eedfeb6089ed3fad42e81a67755846ad4dcc14d73698c120a82e4ccf0f1f9f6\"},",
          "2080:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:635fee4e041ab9c479e31edda27fcf966ea9614fff1317e280d99eb3e5ab6fe2\"},",
          "2081:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:77bf3ac639c1ff567ae3b47f8d4cc3dc20f9966a2a6dd2311dcc055d3d04fb8a\"},",
          "2082:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:7ed1b0132f24beeec5a78b67d9388656d03e6a7c837394f99257e2d55b461611\"},",
          "2083:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c6514f963b023aeee506678a1cf821fe31159b925c4b76fe2afa94cc70b3222b\"},",
          "2084:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:10d4204d8ca33146e761c79f83cc861df20e7ae9f6487ca290a97702daf56006\"},",
          "2085:     {file = \"pydantic_core-2.20.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2d036c7187b9422ae5b262badb87a20a49eb6c5238b2004e96d4da1231badef1\"},",
          "2086:     {file = \"pydantic_core-2.20.1-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:9ebfef07dbe1d93efb94b4700f2d278494e9162565a54f124c404a5656d7ff09\"},",
          "2087:     {file = \"pydantic_core-2.20.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:6b9d9bb600328a1ce523ab4f454859e9d439150abb0906c5a1983c146580ebab\"},",
          "2088:     {file = \"pydantic_core-2.20.1-cp39-none-win32.whl\", hash = \"sha256:784c1214cb6dd1e3b15dd8b91b9a53852aed16671cc3fbe4786f4f1db07089e2\"},",
          "2089:     {file = \"pydantic_core-2.20.1-cp39-none-win_amd64.whl\", hash = \"sha256:d2fe69c5434391727efa54b47a1e7986bb0186e72a41b203df8f5b0a19a4f669\"},",
          "2090:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:a45f84b09ac9c3d35dfcf6a27fd0634d30d183205230a0ebe8373a0e8cfa0906\"},",
          "2091:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:d02a72df14dfdbaf228424573a07af10637bd490f0901cee872c4f434a735b94\"},",
          "2092:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d2b27e6af28f07e2f195552b37d7d66b150adbaa39a6d327766ffd695799780f\"},",
          "2093:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:084659fac3c83fd674596612aeff6041a18402f1e1bc19ca39e417d554468482\"},",
          "2094:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:242b8feb3c493ab78be289c034a1f659e8826e2233786e36f2893a950a719bb6\"},",
          "2095:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:38cf1c40a921d05c5edc61a785c0ddb4bed67827069f535d794ce6bcded919fc\"},",
          "2096:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:e0bbdd76ce9aa5d4209d65f2b27fc6e5ef1312ae6c5333c26db3f5ade53a1e99\"},",
          "2097:     {file = \"pydantic_core-2.20.1-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:254ec27fdb5b1ee60684f91683be95e5133c994cc54e86a0b0963afa25c8f8a6\"},",
          "2098:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:407653af5617f0757261ae249d3fba09504d7a71ab36ac057c938572d1bc9331\"},",
          "2099:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:c693e916709c2465b02ca0ad7b387c4f8423d1db7b4649c551f27a529181c5ad\"},",
          "2100:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5b5ff4911aea936a47d9376fd3ab17e970cc543d1b68921886e7f64bd28308d1\"},",
          "2101:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:177f55a886d74f1808763976ac4efd29b7ed15c69f4d838bbd74d9d09cf6fa86\"},",
          "2102:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:964faa8a861d2664f0c7ab0c181af0bea66098b1919439815ca8803ef136fc4e\"},",
          "2103:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:4dd484681c15e6b9a977c785a345d3e378d72678fd5f1f3c0509608da24f2ac0\"},",
          "2104:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:f6d6cff3538391e8486a431569b77921adfcdef14eb18fbf19b7c0a5294d4e6a\"},",
          "2105:     {file = \"pydantic_core-2.20.1-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:a6d511cc297ff0883bc3708b465ff82d7560193169a8b93260f74ecb0a5e08a7\"},",
          "2106:     {file = \"pydantic_core-2.20.1.tar.gz\", hash = \"sha256:26ca695eeee5f9f1aeeb211ffc12f10bcb6f71e2989988fda61dabd65db878d4\"},",
          "2107: ]",
          "2109: [package.dependencies]",
          "2110: typing-extensions = \">=4.6.0,<4.7.0 || >4.7.0\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1767: docs = [\"sphinx (>=1.4.8)\"]",
          "1768: test = [\"codecov (>=2.0.5)\", \"hypothesis (>=3.5.3)\", \"mock (>=1.0.1)\", \"pytest (>=3.0.3)\", \"pytest-cov (>=2.2.1)\", \"pytest-faulthandler (>=1.3.0,<2)\", \"pytest-timeout (>=1.0.0,<2)\", \"wheel (>=0.29)\"]",
          "1770: [[package]]",
          "1771: name = \"pylsqpack\"",
          "1772: version = \"0.3.18\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2127: [[package]]",
          "2128: name = \"pygments\"",
          "2129: version = \"2.18.0\"",
          "2130: description = \"Pygments is a syntax highlighting package written in Python.\"",
          "2131: optional = false",
          "2132: python-versions = \">=3.8\"",
          "2133: files = [",
          "2134:     {file = \"pygments-2.18.0-py3-none-any.whl\", hash = \"sha256:b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a\"},",
          "2135:     {file = \"pygments-2.18.0.tar.gz\", hash = \"sha256:786ff802f32e91311bff3889f6e9a86e81505fe99f2735bb6d60ae0c5004f199\"},",
          "2136: ]",
          "2138: [package.extras]",
          "2139: windows-terminal = [\"colorama (>=0.4.6)\"]",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1823: [[package]]",
          "1824: name = \"pyopenssl\"",
          "1826: description = \"Python wrapper module around the OpenSSL library\"",
          "1827: optional = false",
          "1828: python-versions = \">=3.7\"",
          "1829: files = [",
          "1832: ]",
          "1834: [package.dependencies]",
          "1837: [package.extras]",
          "1838: docs = [\"sphinx (!=5.2.0,!=5.2.0.post0,!=7.2.5)\", \"sphinx-rtd-theme\"]",
          "1841: [[package]]",
          "1842: name = \"pyparsing\"",
          "",
          "[Removed Lines]",
          "1825: version = \"24.2.1\"",
          "1830:     {file = \"pyOpenSSL-24.2.1-py3-none-any.whl\", hash = \"sha256:967d5719b12b243588573f39b0c677637145c7a1ffedcd495a487e58177fbb8d\"},",
          "1831:     {file = \"pyopenssl-24.2.1.tar.gz\", hash = \"sha256:4247f0dbe3748d560dcbb2ff3ea01af0f9a1a001ef5f7c4c647956ed8cbf0e95\"},",
          "1835: cryptography = \">=41.0.5,<44\"",
          "1839: test = [\"pretend\", \"pytest (>=3.0.1)\", \"pytest-rerunfailures\"]",
          "",
          "[Added Lines]",
          "2196: version = \"23.3.0\"",
          "2201:     {file = \"pyOpenSSL-23.3.0-py3-none-any.whl\", hash = \"sha256:6756834481d9ed5470f4a9393455154bc92fe7a64b7bc6ee2c804e78c52099b2\"},",
          "2202:     {file = \"pyOpenSSL-23.3.0.tar.gz\", hash = \"sha256:6b2cba5cc46e822750ec3e5a81ee12819850b11303630d575e98108a079c2b12\"},",
          "2206: cryptography = \">=41.0.5,<42\"",
          "2210: test = [\"flaky\", \"pretend\", \"pytest (>=3.0.1)\"]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1855: [[package]]",
          "1856: name = \"pyperclip\"",
          "1858: description = \"A cross-platform clipboard module for Python. (Only handles plain text for now.)\"",
          "1859: optional = false",
          "1860: python-versions = \"*\"",
          "1861: files = [",
          "1915: ]",
          "1923: [[package]]",
          "1924: name = \"python3-saml\"",
          "1925: version = \"1.16.0\"",
          "",
          "[Removed Lines]",
          "1857: version = \"1.9.0\"",
          "1862:     {file = \"pyperclip-1.9.0.tar.gz\", hash = \"sha256:b7de0142ddc81bfc5c7507eea19da920b92252b548b96186caf94a5e2527d310\"},",
          "1863: ]",
          "1865: [[package]]",
          "1866: name = \"pyrsistent\"",
          "1867: version = \"0.20.0\"",
          "1868: description = \"Persistent/Functional/Immutable data structures\"",
          "1869: optional = false",
          "1870: python-versions = \">=3.8\"",
          "1871: files = [",
          "1872:     {file = \"pyrsistent-0.20.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:8c3aba3e01235221e5b229a6c05f585f344734bd1ad42a8ac51493d74722bbce\"},",
          "1873:     {file = \"pyrsistent-0.20.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c1beb78af5423b879edaf23c5591ff292cf7c33979734c99aa66d5914ead880f\"},",
          "1874:     {file = \"pyrsistent-0.20.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:21cc459636983764e692b9eba7144cdd54fdec23ccdb1e8ba392a63666c60c34\"},",
          "1875:     {file = \"pyrsistent-0.20.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f5ac696f02b3fc01a710427585c855f65cd9c640e14f52abe52020722bb4906b\"},",
          "1876:     {file = \"pyrsistent-0.20.0-cp310-cp310-win32.whl\", hash = \"sha256:0724c506cd8b63c69c7f883cc233aac948c1ea946ea95996ad8b1380c25e1d3f\"},",
          "1877:     {file = \"pyrsistent-0.20.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:8441cf9616d642c475684d6cf2520dd24812e996ba9af15e606df5f6fd9d04a7\"},",
          "1878:     {file = \"pyrsistent-0.20.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:0f3b1bcaa1f0629c978b355a7c37acd58907390149b7311b5db1b37648eb6958\"},",
          "1879:     {file = \"pyrsistent-0.20.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5cdd7ef1ea7a491ae70d826b6cc64868de09a1d5ff9ef8d574250d0940e275b8\"},",
          "1880:     {file = \"pyrsistent-0.20.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cae40a9e3ce178415040a0383f00e8d68b569e97f31928a3a8ad37e3fde6df6a\"},",
          "1881:     {file = \"pyrsistent-0.20.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6288b3fa6622ad8a91e6eb759cfc48ff3089e7c17fb1d4c59a919769314af224\"},",
          "1882:     {file = \"pyrsistent-0.20.0-cp311-cp311-win32.whl\", hash = \"sha256:7d29c23bdf6e5438c755b941cef867ec2a4a172ceb9f50553b6ed70d50dfd656\"},",
          "1883:     {file = \"pyrsistent-0.20.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:59a89bccd615551391f3237e00006a26bcf98a4d18623a19909a2c48b8e986ee\"},",
          "1884:     {file = \"pyrsistent-0.20.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:09848306523a3aba463c4b49493a760e7a6ca52e4826aa100ee99d8d39b7ad1e\"},",
          "1885:     {file = \"pyrsistent-0.20.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a14798c3005ec892bbada26485c2eea3b54109cb2533713e355c806891f63c5e\"},",
          "1886:     {file = \"pyrsistent-0.20.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b14decb628fac50db5e02ee5a35a9c0772d20277824cfe845c8a8b717c15daa3\"},",
          "1887:     {file = \"pyrsistent-0.20.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2e2c116cc804d9b09ce9814d17df5edf1df0c624aba3b43bc1ad90411487036d\"},",
          "1888:     {file = \"pyrsistent-0.20.0-cp312-cp312-win32.whl\", hash = \"sha256:e78d0c7c1e99a4a45c99143900ea0546025e41bb59ebc10182e947cf1ece9174\"},",
          "1889:     {file = \"pyrsistent-0.20.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:4021a7f963d88ccd15b523787d18ed5e5269ce57aa4037146a2377ff607ae87d\"},",
          "1890:     {file = \"pyrsistent-0.20.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:79ed12ba79935adaac1664fd7e0e585a22caa539dfc9b7c7c6d5ebf91fb89054\"},",
          "1891:     {file = \"pyrsistent-0.20.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f920385a11207dc372a028b3f1e1038bb244b3ec38d448e6d8e43c6b3ba20e98\"},",
          "1892:     {file = \"pyrsistent-0.20.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4f5c2d012671b7391803263419e31b5c7c21e7c95c8760d7fc35602353dee714\"},",
          "1893:     {file = \"pyrsistent-0.20.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ef3992833fbd686ee783590639f4b8343a57f1f75de8633749d984dc0eb16c86\"},",
          "1894:     {file = \"pyrsistent-0.20.0-cp38-cp38-win32.whl\", hash = \"sha256:881bbea27bbd32d37eb24dd320a5e745a2a5b092a17f6debc1349252fac85423\"},",
          "1895:     {file = \"pyrsistent-0.20.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:6d270ec9dd33cdb13f4d62c95c1a5a50e6b7cdd86302b494217137f760495b9d\"},",
          "1896:     {file = \"pyrsistent-0.20.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:ca52d1ceae015859d16aded12584c59eb3825f7b50c6cfd621d4231a6cc624ce\"},",
          "1897:     {file = \"pyrsistent-0.20.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b318ca24db0f0518630e8b6f3831e9cba78f099ed5c1d65ffe3e023003043ba0\"},",
          "1898:     {file = \"pyrsistent-0.20.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fed2c3216a605dc9a6ea50c7e84c82906e3684c4e80d2908208f662a6cbf9022\"},",
          "1899:     {file = \"pyrsistent-0.20.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2e14c95c16211d166f59c6611533d0dacce2e25de0f76e4c140fde250997b3ca\"},",
          "1900:     {file = \"pyrsistent-0.20.0-cp39-cp39-win32.whl\", hash = \"sha256:f058a615031eea4ef94ead6456f5ec2026c19fb5bd6bfe86e9665c4158cf802f\"},",
          "1901:     {file = \"pyrsistent-0.20.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:58b8f6366e152092194ae68fefe18b9f0b4f89227dfd86a07770c3d86097aebf\"},",
          "1902:     {file = \"pyrsistent-0.20.0-py3-none-any.whl\", hash = \"sha256:c55acc4733aad6560a7f5f818466631f07efc001fd023f34a6c203f8b6df0f0b\"},",
          "1903:     {file = \"pyrsistent-0.20.0.tar.gz\", hash = \"sha256:4c48f78f62ab596c679086084d0dd13254ae4f3d6c72a83ffdf5ebdef8f265a4\"},",
          "1904: ]",
          "1906: [[package]]",
          "1907: name = \"python-lsp-jsonrpc\"",
          "1908: version = \"1.0.0\"",
          "1909: description = \"JSON RPC 2.0 server library\"",
          "1910: optional = false",
          "1911: python-versions = \"*\"",
          "1912: files = [",
          "1913:     {file = \"python-lsp-jsonrpc-1.0.0.tar.gz\", hash = \"sha256:7bec170733db628d3506ea3a5288ff76aa33c70215ed223abdb0d95e957660bd\"},",
          "1914:     {file = \"python_lsp_jsonrpc-1.0.0-py3-none-any.whl\", hash = \"sha256:079b143be64b0a378bdb21dff5e28a8c1393fe7e8a654ef068322d754e545fc7\"},",
          "1917: [package.dependencies]",
          "1918: ujson = \">=3.0.0\"",
          "1920: [package.extras]",
          "1921: test = [\"coverage\", \"pycodestyle\", \"pyflakes\", \"pylint\", \"pytest\", \"pytest-cov\"]",
          "",
          "[Added Lines]",
          "2228: version = \"1.8.2\"",
          "2233:     {file = \"pyperclip-1.8.2.tar.gz\", hash = \"sha256:105254a8b04934f0bc84e9c24eb360a591aaf6535c9def5f29d92af107a9bf57\"},",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2002:     {file = \"pyyaml-6.0.2.tar.gz\", hash = \"sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e\"},",
          "2003: ]",
          "2005: [[package]]",
          "2006: name = \"requests\"",
          "2007: version = \"2.32.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2318: [[package]]",
          "2319: name = \"referencing\"",
          "2320: version = \"0.35.1\"",
          "2321: description = \"JSON Referencing + Python\"",
          "2322: optional = false",
          "2323: python-versions = \">=3.8\"",
          "2324: files = [",
          "2325:     {file = \"referencing-0.35.1-py3-none-any.whl\", hash = \"sha256:eda6d3234d62814d1c64e305c1331c9a3a6132da475ab6382eaa997b21ee75de\"},",
          "2326:     {file = \"referencing-0.35.1.tar.gz\", hash = \"sha256:25b42124a6c8b632a425174f24087783efb348a6f1e0008e63cd4466fedf703c\"},",
          "2327: ]",
          "2329: [package.dependencies]",
          "2330: attrs = \">=22.2.0\"",
          "2331: rpds-py = \">=0.7.0\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2037: [package.dependencies]",
          "2038: requests = \">=1.0.0\"",
          "2040: [[package]]",
          "2041: name = \"rsa\"",
          "2042: version = \"4.9\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2368: [[package]]",
          "2369: name = \"rich\"",
          "2370: version = \"13.9.4\"",
          "2371: description = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"",
          "2372: optional = false",
          "2373: python-versions = \">=3.8.0\"",
          "2374: files = [",
          "2375:     {file = \"rich-13.9.4-py3-none-any.whl\", hash = \"sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90\"},",
          "2376:     {file = \"rich-13.9.4.tar.gz\", hash = \"sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098\"},",
          "2377: ]",
          "2379: [package.dependencies]",
          "2380: markdown-it-py = \">=2.2.0\"",
          "2381: pygments = \">=2.13.0,<3.0.0\"",
          "2382: typing-extensions = {version = \">=4.0.0,<5.0\", markers = \"python_version < \\\"3.11\\\"\"}",
          "2384: [package.extras]",
          "2385: jupyter = [\"ipywidgets (>=7.5.1,<9)\"]",
          "2387: [[package]]",
          "2388: name = \"rpds-py\"",
          "2389: version = \"0.20.1\"",
          "2390: description = \"Python bindings to Rust's persistent data structures (rpds)\"",
          "2391: optional = false",
          "2392: python-versions = \">=3.8\"",
          "2393: files = [",
          "2394:     {file = \"rpds_py-0.20.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:a649dfd735fff086e8a9d0503a9f0c7d01b7912a333c7ae77e1515c08c146dad\"},",
          "2395:     {file = \"rpds_py-0.20.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:f16bc1334853e91ddaaa1217045dd7be166170beec337576818461268a3de67f\"},",
          "2396:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:14511a539afee6f9ab492b543060c7491c99924314977a55c98bfa2ee29ce78c\"},",
          "2397:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:3ccb8ac2d3c71cda472b75af42818981bdacf48d2e21c36331b50b4f16930163\"},",
          "2398:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c142b88039b92e7e0cb2552e8967077e3179b22359e945574f5e2764c3953dcf\"},",
          "2399:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f19169781dddae7478a32301b499b2858bc52fc45a112955e798ee307e294977\"},",
          "2400:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:13c56de6518e14b9bf6edde23c4c39dac5b48dcf04160ea7bce8fca8397cdf86\"},",
          "2401:     {file = \"rpds_py-0.20.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:925d176a549f4832c6f69fa6026071294ab5910e82a0fe6c6228fce17b0706bd\"},",
          "2402:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:78f0b6877bfce7a3d1ff150391354a410c55d3cdce386f862926a4958ad5ab7e\"},",
          "2403:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:3dd645e2b0dcb0fd05bf58e2e54c13875847687d0b71941ad2e757e5d89d4356\"},",
          "2404:     {file = \"rpds_py-0.20.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:4f676e21db2f8c72ff0936f895271e7a700aa1f8d31b40e4e43442ba94973899\"},",
          "2405:     {file = \"rpds_py-0.20.1-cp310-none-win32.whl\", hash = \"sha256:648386ddd1e19b4a6abab69139b002bc49ebf065b596119f8f37c38e9ecee8ff\"},",
          "2406:     {file = \"rpds_py-0.20.1-cp310-none-win_amd64.whl\", hash = \"sha256:d9ecb51120de61e4604650666d1f2b68444d46ae18fd492245a08f53ad2b7711\"},",
          "2407:     {file = \"rpds_py-0.20.1-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:762703bdd2b30983c1d9e62b4c88664df4a8a4d5ec0e9253b0231171f18f6d75\"},",
          "2408:     {file = \"rpds_py-0.20.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:0b581f47257a9fce535c4567782a8976002d6b8afa2c39ff616edf87cbeff712\"},",
          "2409:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:842c19a6ce894493563c3bd00d81d5100e8e57d70209e84d5491940fdb8b9e3a\"},",
          "2410:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:42cbde7789f5c0bcd6816cb29808e36c01b960fb5d29f11e052215aa85497c93\"},",
          "2411:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:6c8e9340ce5a52f95fa7d3b552b35c7e8f3874d74a03a8a69279fd5fca5dc751\"},",
          "2412:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8ba6f89cac95c0900d932c9efb7f0fb6ca47f6687feec41abcb1bd5e2bd45535\"},",
          "2413:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4a916087371afd9648e1962e67403c53f9c49ca47b9680adbeef79da3a7811b0\"},",
          "2414:     {file = \"rpds_py-0.20.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:200a23239781f46149e6a415f1e870c5ef1e712939fe8fa63035cd053ac2638e\"},",
          "2415:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:58b1d5dd591973d426cbb2da5e27ba0339209832b2f3315928c9790e13f159e8\"},",
          "2416:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:6b73c67850ca7cae0f6c56f71e356d7e9fa25958d3e18a64927c2d930859b8e4\"},",
          "2417:     {file = \"rpds_py-0.20.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:d8761c3c891cc51e90bc9926d6d2f59b27beaf86c74622c8979380a29cc23ac3\"},",
          "2418:     {file = \"rpds_py-0.20.1-cp311-none-win32.whl\", hash = \"sha256:cd945871335a639275eee904caef90041568ce3b42f402c6959b460d25ae8732\"},",
          "2419:     {file = \"rpds_py-0.20.1-cp311-none-win_amd64.whl\", hash = \"sha256:7e21b7031e17c6b0e445f42ccc77f79a97e2687023c5746bfb7a9e45e0921b84\"},",
          "2420:     {file = \"rpds_py-0.20.1-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:36785be22066966a27348444b40389f8444671630063edfb1a2eb04318721e17\"},",
          "2421:     {file = \"rpds_py-0.20.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:142c0a5124d9bd0e2976089484af5c74f47bd3298f2ed651ef54ea728d2ea42c\"},",
          "2422:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dbddc10776ca7ebf2a299c41a4dde8ea0d8e3547bfd731cb87af2e8f5bf8962d\"},",
          "2423:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:15a842bb369e00295392e7ce192de9dcbf136954614124a667f9f9f17d6a216f\"},",
          "2424:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:be5ef2f1fc586a7372bfc355986226484e06d1dc4f9402539872c8bb99e34b01\"},",
          "2425:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dbcf360c9e3399b056a238523146ea77eeb2a596ce263b8814c900263e46031a\"},",
          "2426:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ecd27a66740ffd621d20b9a2f2b5ee4129a56e27bfb9458a3bcc2e45794c96cb\"},",
          "2427:     {file = \"rpds_py-0.20.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:d0b937b2a1988f184a3e9e577adaa8aede21ec0b38320d6009e02bd026db04fa\"},",
          "2428:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6889469bfdc1eddf489729b471303739bf04555bb151fe8875931f8564309afc\"},",
          "2429:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:19b73643c802f4eaf13d97f7855d0fb527fbc92ab7013c4ad0e13a6ae0ed23bd\"},",
          "2430:     {file = \"rpds_py-0.20.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:3c6afcf2338e7f374e8edc765c79fbcb4061d02b15dd5f8f314a4af2bdc7feb5\"},",
          "2431:     {file = \"rpds_py-0.20.1-cp312-none-win32.whl\", hash = \"sha256:dc73505153798c6f74854aba69cc75953888cf9866465196889c7cdd351e720c\"},",
          "2432:     {file = \"rpds_py-0.20.1-cp312-none-win_amd64.whl\", hash = \"sha256:8bbe951244a838a51289ee53a6bae3a07f26d4e179b96fc7ddd3301caf0518eb\"},",
          "2433:     {file = \"rpds_py-0.20.1-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:6ca91093a4a8da4afae7fe6a222c3b53ee4eef433ebfee4d54978a103435159e\"},",
          "2434:     {file = \"rpds_py-0.20.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:b9c2fe36d1f758b28121bef29ed1dee9b7a2453e997528e7d1ac99b94892527c\"},",
          "2435:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f009c69bc8c53db5dfab72ac760895dc1f2bc1b62ab7408b253c8d1ec52459fc\"},",
          "2436:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:6740a3e8d43a32629bb9b009017ea5b9e713b7210ba48ac8d4cb6d99d86c8ee8\"},",
          "2437:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:32b922e13d4c0080d03e7b62991ad7f5007d9cd74e239c4b16bc85ae8b70252d\"},",
          "2438:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fe00a9057d100e69b4ae4a094203a708d65b0f345ed546fdef86498bf5390982\"},",
          "2439:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:49fe9b04b6fa685bd39237d45fad89ba19e9163a1ccaa16611a812e682913496\"},",
          "2440:     {file = \"rpds_py-0.20.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:aa7ac11e294304e615b43f8c441fee5d40094275ed7311f3420d805fde9b07b4\"},",
          "2441:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:6aa97af1558a9bef4025f8f5d8c60d712e0a3b13a2fe875511defc6ee77a1ab7\"},",
          "2442:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:483b29f6f7ffa6af845107d4efe2e3fa8fb2693de8657bc1849f674296ff6a5a\"},",
          "2443:     {file = \"rpds_py-0.20.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:37fe0f12aebb6a0e3e17bb4cd356b1286d2d18d2e93b2d39fe647138458b4bcb\"},",
          "2444:     {file = \"rpds_py-0.20.1-cp313-none-win32.whl\", hash = \"sha256:a624cc00ef2158e04188df5e3016385b9353638139a06fb77057b3498f794782\"},",
          "2445:     {file = \"rpds_py-0.20.1-cp313-none-win_amd64.whl\", hash = \"sha256:b71b8666eeea69d6363248822078c075bac6ed135faa9216aa85f295ff009b1e\"},",
          "2446:     {file = \"rpds_py-0.20.1-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:5b48e790e0355865197ad0aca8cde3d8ede347831e1959e158369eb3493d2191\"},",
          "2447:     {file = \"rpds_py-0.20.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:3e310838a5801795207c66c73ea903deda321e6146d6f282e85fa7e3e4854804\"},",
          "2448:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2249280b870e6a42c0d972339e9cc22ee98730a99cd7f2f727549af80dd5a963\"},",
          "2449:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e79059d67bea28b53d255c1437b25391653263f0e69cd7dec170d778fdbca95e\"},",
          "2450:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2b431c777c9653e569986ecf69ff4a5dba281cded16043d348bf9ba505486f36\"},",
          "2451:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:da584ff96ec95e97925174eb8237e32f626e7a1a97888cdd27ee2f1f24dd0ad8\"},",
          "2452:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:02a0629ec053fc013808a85178524e3cb63a61dbc35b22499870194a63578fb9\"},",
          "2453:     {file = \"rpds_py-0.20.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:fbf15aff64a163db29a91ed0868af181d6f68ec1a3a7d5afcfe4501252840bad\"},",
          "2454:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:07924c1b938798797d60c6308fa8ad3b3f0201802f82e4a2c41bb3fafb44cc28\"},",
          "2455:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:4a5a844f68776a7715ecb30843b453f07ac89bad393431efbf7accca3ef599c1\"},",
          "2456:     {file = \"rpds_py-0.20.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:518d2ca43c358929bf08f9079b617f1c2ca6e8848f83c1225c88caeac46e6cbc\"},",
          "2457:     {file = \"rpds_py-0.20.1-cp38-none-win32.whl\", hash = \"sha256:3aea7eed3e55119635a74bbeb80b35e776bafccb70d97e8ff838816c124539f1\"},",
          "2458:     {file = \"rpds_py-0.20.1-cp38-none-win_amd64.whl\", hash = \"sha256:7dca7081e9a0c3b6490a145593f6fe3173a94197f2cb9891183ef75e9d64c425\"},",
          "2459:     {file = \"rpds_py-0.20.1-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:b41b6321805c472f66990c2849e152aff7bc359eb92f781e3f606609eac877ad\"},",
          "2460:     {file = \"rpds_py-0.20.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0a90c373ea2975519b58dece25853dbcb9779b05cc46b4819cb1917e3b3215b6\"},",
          "2461:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:16d4477bcb9fbbd7b5b0e4a5d9b493e42026c0bf1f06f723a9353f5153e75d30\"},",
          "2462:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:84b8382a90539910b53a6307f7c35697bc7e6ffb25d9c1d4e998a13e842a5e83\"},",
          "2463:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:4888e117dd41b9d34194d9e31631af70d3d526efc363085e3089ab1a62c32ed1\"},",
          "2464:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5265505b3d61a0f56618c9b941dc54dc334dc6e660f1592d112cd103d914a6db\"},",
          "2465:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e75ba609dba23f2c95b776efb9dd3f0b78a76a151e96f96cc5b6b1b0004de66f\"},",
          "2466:     {file = \"rpds_py-0.20.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:1791ff70bc975b098fe6ecf04356a10e9e2bd7dc21fa7351c1742fdeb9b4966f\"},",
          "2467:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:d126b52e4a473d40232ec2052a8b232270ed1f8c9571aaf33f73a14cc298c24f\"},",
          "2468:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:c14937af98c4cc362a1d4374806204dd51b1e12dded1ae30645c298e5a5c4cb1\"},",
          "2469:     {file = \"rpds_py-0.20.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:3d089d0b88996df627693639d123c8158cff41c0651f646cd8fd292c7da90eaf\"},",
          "2470:     {file = \"rpds_py-0.20.1-cp39-none-win32.whl\", hash = \"sha256:653647b8838cf83b2e7e6a0364f49af96deec64d2a6578324db58380cff82aca\"},",
          "2471:     {file = \"rpds_py-0.20.1-cp39-none-win_amd64.whl\", hash = \"sha256:fa41a64ac5b08b292906e248549ab48b69c5428f3987b09689ab2441f267d04d\"},",
          "2472:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7a07ced2b22f0cf0b55a6a510078174c31b6d8544f3bc00c2bcee52b3d613f74\"},",
          "2473:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:68cb0a499f2c4a088fd2f521453e22ed3527154136a855c62e148b7883b99f9a\"},",
          "2474:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fa3060d885657abc549b2a0f8e1b79699290e5d83845141717c6c90c2df38311\"},",
          "2475:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:95f3b65d2392e1c5cec27cff08fdc0080270d5a1a4b2ea1d51d5f4a2620ff08d\"},",
          "2476:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2cc3712a4b0b76a1d45a9302dd2f53ff339614b1c29603a911318f2357b04dd2\"},",
          "2477:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:5d4eea0761e37485c9b81400437adb11c40e13ef513375bbd6973e34100aeb06\"},",
          "2478:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7f5179583d7a6cdb981151dd349786cbc318bab54963a192692d945dd3f6435d\"},",
          "2479:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2fbb0ffc754490aff6dabbf28064be47f0f9ca0b9755976f945214965b3ace7e\"},",
          "2480:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:a94e52537a0e0a85429eda9e49f272ada715506d3b2431f64b8a3e34eb5f3e75\"},",
          "2481:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:92b68b79c0da2a980b1c4197e56ac3dd0c8a149b4603747c4378914a68706979\"},",
          "2482:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:93da1d3db08a827eda74356f9f58884adb254e59b6664f64cc04cdff2cc19b0d\"},",
          "2483:     {file = \"rpds_py-0.20.1-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:754bbed1a4ca48479e9d4182a561d001bbf81543876cdded6f695ec3d465846b\"},",
          "2484:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:ca449520e7484534a2a44faf629362cae62b660601432d04c482283c47eaebab\"},",
          "2485:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:9c4cb04a16b0f199a8c9bf807269b2f63b7b5b11425e4a6bd44bd6961d28282c\"},",
          "2486:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb63804105143c7e24cee7db89e37cb3f3941f8e80c4379a0b355c52a52b6780\"},",
          "2487:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:55cd1fa4ecfa6d9f14fbd97ac24803e6f73e897c738f771a9fe038f2f11ff07c\"},",
          "2488:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:0f8f741b6292c86059ed175d80eefa80997125b7c478fb8769fd9ac8943a16c0\"},",
          "2489:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:0fc212779bf8411667234b3cdd34d53de6c2b8b8b958e1e12cb473a5f367c338\"},",
          "2490:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0ad56edabcdb428c2e33bbf24f255fe2b43253b7d13a2cdbf05de955217313e6\"},",
          "2491:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:0a3a1e9ee9728b2c1734f65d6a1d376c6f2f6fdcc13bb007a08cc4b1ff576dc5\"},",
          "2492:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:e13de156137b7095442b288e72f33503a469aa1980ed856b43c353ac86390519\"},",
          "2493:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:07f59760ef99f31422c49038964b31c4dfcfeb5d2384ebfc71058a7c9adae2d2\"},",
          "2494:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:59240685e7da61fb78f65a9f07f8108e36a83317c53f7b276b4175dc44151684\"},",
          "2495:     {file = \"rpds_py-0.20.1-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:83cba698cfb3c2c5a7c3c6bac12fe6c6a51aae69513726be6411076185a8b24a\"},",
          "2496:     {file = \"rpds_py-0.20.1.tar.gz\", hash = \"sha256:e1791c4aabd117653530dccd24108fa03cc6baf21f58b950d0a73c3b3b29a350\"},",
          "2497: ]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2122: [[package]]",
          "2123: name = \"semgrep\"",
          "2125: description = \"Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\"",
          "2126: optional = false",
          "2128: files = [",
          "2133: ]",
          "2135: [package.dependencies]",
          "2137: boltons = \">=21.0,<22.0\"",
          "2138: click = \">=8.1,<9.0\"",
          "2139: click-option-group = \">=0.5,<1.0\"",
          "2140: colorama = \">=0.4.0,<0.5.0\"",
          "2141: defusedxml = \">=0.7.1,<0.8.0\"",
          "2142: glom = \">=22.1,<23.0\"",
          "2143: jsonschema = \">=4.6,<5.0\"",
          "2145: peewee = \">=3.14,<4.0\"",
          "2147: requests = \">=2.22,<3.0\"",
          "2148: \"ruamel.yaml\" = \">=0.16.0,<0.18\"",
          "2149: tomli = \">=2.0.1,<2.1.0\"",
          "2151: typing-extensions = \">=4.2,<5.0\"",
          "2153: wcmatch = \">=8.3,<9.0\"",
          "2158: [[package]]",
          "2159: name = \"service-identity\"",
          "2160: version = \"24.2.0\"",
          "",
          "[Removed Lines]",
          "2124: version = \"0.117.0\"",
          "2127: python-versions = \">=3.7\"",
          "2129:     {file = \"semgrep-0.117.0-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:eb586ce36ecf4c65a7296ba01d984bfe44f79b5dc5f28fad7a940d4615754b3b\"},",
          "2130:     {file = \"semgrep-0.117.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:242af25d2a6f4e2c7c7004d7145e8911bb0d6abed2bb9d100404084e169b9238\"},",
          "2131:     {file = \"semgrep-0.117.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:2cfc245221daea507d2649c1baf13cb1ff0e0ef86c2a0f6f6338e52849f49d4d\"},",
          "2132:     {file = \"semgrep-0.117.0.tar.gz\", hash = \"sha256:ac2b06a2b3a2e83d60a3ab80254b68e726d01c953d1a52608804bb0b7e80a76d\"},",
          "2136: attrs = \">=21.3,<22.0\"",
          "2144: packaging = \">=21.0,<22.0\"",
          "2146: python-lsp-jsonrpc = \">=1.0.0,<1.1.0\"",
          "2150: tqdm = \">=4.46,<5.0\"",
          "2152: urllib3 = \">=1.26,<2.0\"",
          "2155: [package.extras]",
          "2156: experiments = [\"jsonnet (>=0.18,<1.0)\"]",
          "",
          "[Added Lines]",
          "2583: version = \"1.86.0\"",
          "2586: python-versions = \">=3.8\"",
          "2588:     {file = \"semgrep-1.86.0-cp38.cp39.cp310.cp311.py37.py38.py39.py310.py311-none-any.whl\", hash = \"sha256:4682c9fb18d6fc001751ccd848a63d7e2337a2ba3add50a9840be427a377dac2\"},",
          "2589:     {file = \"semgrep-1.86.0-cp38.cp39.cp310.cp311.py37.py38.py39.py310.py311-none-macosx_10_14_x86_64.whl\", hash = \"sha256:29c7f3416ba34a74c185678e91d5ea2d5c42c6abea261f39414e6310cff62951\"},",
          "2590:     {file = \"semgrep-1.86.0-cp38.cp39.cp310.cp311.py37.py38.py39.py310.py311-none-macosx_11_0_arm64.whl\", hash = \"sha256:bedf7c55338fadb39b7a24ae5aa595be155c84b654ba14d1c0a2f65356ff15f3\"},",
          "2591:     {file = \"semgrep-1.86.0-cp38.cp39.cp310.cp311.py37.py38.py39.py310.py311-none-musllinux_1_0_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2b44657d5c93233d2fd6059e68f0510e37a5331fd53f6921305cf32c147e3e5a\"},",
          "2592:     {file = \"semgrep-1.86.0.tar.gz\", hash = \"sha256:4f0fec59cfbf40f1c1cb9fa71539725cebaad4a9097bd68bc6ae8835edcd3201\"},",
          "2596: attrs = \">=21.3\"",
          "2602: exceptiongroup = \">=1.2.0,<1.3.0\"",
          "2605: opentelemetry-api = \">=1.25.0,<1.26.0\"",
          "2606: opentelemetry-exporter-otlp-proto-http = \">=1.25.0,<1.26.0\"",
          "2607: opentelemetry-instrumentation-requests = \">=0.46b0,<1.0\"",
          "2608: opentelemetry-sdk = \">=1.25.0,<1.26.0\"",
          "2609: packaging = \">=21.0\"",
          "2611: pydantic = \">=2.8.2,<2.9.0\"",
          "2613: rich = \">=12.6.0\"",
          "2617: urllib3 = \">=2.0,<3.0\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2179: mypy = [\"idna\", \"mypy\", \"types-pyopenssl\"]",
          "2180: tests = [\"coverage[toml] (>=5.0.2)\", \"pytest\"]",
          "2182: [[package]]",
          "2183: name = \"shelljob\"",
          "2184: version = \"0.6.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2644: [[package]]",
          "2645: name = \"setuptools\"",
          "2646: version = \"75.3.0\"",
          "2647: description = \"Easily download, build, install, upgrade, and uninstall Python packages\"",
          "2648: optional = false",
          "2649: python-versions = \">=3.8\"",
          "2650: files = [",
          "2651:     {file = \"setuptools-75.3.0-py3-none-any.whl\", hash = \"sha256:f2504966861356aa38616760c0f66568e535562374995367b4e69c7143cf6bcd\"},",
          "2652:     {file = \"setuptools-75.3.0.tar.gz\", hash = \"sha256:fba5dd4d766e97be1b1681d98712680ae8f2f26d7881245f2ce9e40714f1a686\"},",
          "2653: ]",
          "2655: [package.extras]",
          "2656: check = [\"pytest-checkdocs (>=2.4)\", \"pytest-ruff (>=0.2.1)\", \"ruff (>=0.5.2)\"]",
          "2657: core = [\"importlib-metadata (>=6)\", \"importlib-resources (>=5.10.2)\", \"jaraco.collections\", \"jaraco.functools\", \"jaraco.text (>=3.7)\", \"more-itertools\", \"more-itertools (>=8.8)\", \"packaging\", \"packaging (>=24)\", \"platformdirs (>=4.2.2)\", \"tomli (>=2.0.1)\", \"wheel (>=0.43.0)\"]",
          "2658: cover = [\"pytest-cov\"]",
          "2659: doc = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"pyproject-hooks (!=1.1)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-favicon\", \"sphinx-inline-tabs\", \"sphinx-lint\", \"sphinx-notfound-page (>=1,<2)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\", \"towncrier (<24.7)\"]",
          "2660: enabler = [\"pytest-enabler (>=2.2)\"]",
          "2661: test = [\"build[virtualenv] (>=1.0.3)\", \"filelock (>=3.4.0)\", \"ini2toml[lite] (>=0.14)\", \"jaraco.develop (>=7.21)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"jaraco.test (>=5.5)\", \"packaging (>=23.2)\", \"pip (>=19.1)\", \"pyproject-hooks (!=1.1)\", \"pytest (>=6,!=8.1.*)\", \"pytest-home (>=0.5)\", \"pytest-perf\", \"pytest-subprocess\", \"pytest-timeout\", \"pytest-xdist (>=3)\", \"tomli-w (>=1.0.0)\", \"virtualenv (>=13.0.0)\", \"wheel (>=0.44.0)\"]",
          "2662: type = [\"importlib-metadata (>=7.0.2)\", \"jaraco.develop (>=7.21)\", \"mypy (==1.12.*)\", \"pytest-mypy\"]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2418:     {file = \"tornado-6.4.1.tar.gz\", hash = \"sha256:92d3ab53183d8c50f8204a51e6f91d18a15d5ef261e84d452800d4ff6fc504e9\"},",
          "2419: ]",
          "2441: [[package]]",
          "2442: name = \"typing-extensions\"",
          "2444: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "2445: optional = false",
          "2446: python-versions = \">=3.8\"",
          "2447: files = [",
          "2450: ]",
          "2452: [[package]]",
          "",
          "[Removed Lines]",
          "2421: [[package]]",
          "2422: name = \"tqdm\"",
          "2423: version = \"4.66.6\"",
          "2424: description = \"Fast, Extensible Progress Meter\"",
          "2425: optional = false",
          "2426: python-versions = \">=3.7\"",
          "2427: files = [",
          "2428:     {file = \"tqdm-4.66.6-py3-none-any.whl\", hash = \"sha256:223e8b5359c2efc4b30555531f09e9f2f3589bcd7fdd389271191031b49b7a63\"},",
          "2429:     {file = \"tqdm-4.66.6.tar.gz\", hash = \"sha256:4bdd694238bef1485ce839d67967ab50af8f9272aab687c0d7702a01da0be090\"},",
          "2430: ]",
          "2432: [package.dependencies]",
          "2433: colorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}",
          "2435: [package.extras]",
          "2436: dev = [\"pytest (>=6)\", \"pytest-cov\", \"pytest-timeout\", \"pytest-xdist\"]",
          "2437: notebook = [\"ipywidgets (>=6)\"]",
          "2438: slack = [\"slack-sdk\"]",
          "2439: telegram = [\"requests\"]",
          "2443: version = \"4.11.0\"",
          "2448:     {file = \"typing_extensions-4.11.0-py3-none-any.whl\", hash = \"sha256:c1f94d72897edaf4ce775bb7558d5b79d8126906a14ea5ed1635921406c0387a\"},",
          "2449:     {file = \"typing_extensions-4.11.0.tar.gz\", hash = \"sha256:83f085bd5ca59c80295fc2a82ab5dac679cbe02b9f33f7d83af68e241bea51b0\"},",
          "",
          "[Added Lines]",
          "2905: version = \"4.12.2\"",
          "2910:     {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},",
          "2911:     {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2460:     {file = \"tzdata-2023.4.tar.gz\", hash = \"sha256:dd54c94f294765522c77399649b4fefd95522479a664a0cec87f41bebc6148c9\"},",
          "2461: ]",
          "2550: [[package]]",
          "2551: name = \"urllib3\"",
          "2553: description = \"HTTP library with thread-safe connection pooling, file post, and more.\"",
          "2554: optional = false",
          "2556: files = [",
          "2559: ]",
          "2561: [package.extras]",
          "2566: [[package]]",
          "2569: description = \"A full-featured console (xterm et al.) user interface library\"",
          "2570: optional = false",
          "2572: files = [",
          "2575: ]",
          "2591: [[package]]",
          "2592: name = \"waitress\"",
          "2593: version = \"3.0.1\"",
          "",
          "[Removed Lines]",
          "2463: [[package]]",
          "2464: name = \"ujson\"",
          "2465: version = \"5.10.0\"",
          "2466: description = \"Ultra fast JSON encoder and decoder for Python\"",
          "2467: optional = false",
          "2468: python-versions = \">=3.8\"",
          "2469: files = [",
          "2470:     {file = \"ujson-5.10.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:2601aa9ecdbee1118a1c2065323bda35e2c5a2cf0797ef4522d485f9d3ef65bd\"},",
          "2471:     {file = \"ujson-5.10.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:348898dd702fc1c4f1051bc3aacbf894caa0927fe2c53e68679c073375f732cf\"},",
          "2472:     {file = \"ujson-5.10.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:22cffecf73391e8abd65ef5f4e4dd523162a3399d5e84faa6aebbf9583df86d6\"},",
          "2473:     {file = \"ujson-5.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:26b0e2d2366543c1bb4fbd457446f00b0187a2bddf93148ac2da07a53fe51569\"},",
          "2474:     {file = \"ujson-5.10.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:caf270c6dba1be7a41125cd1e4fc7ba384bf564650beef0df2dd21a00b7f5770\"},",
          "2475:     {file = \"ujson-5.10.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:a245d59f2ffe750446292b0094244df163c3dc96b3ce152a2c837a44e7cda9d1\"},",
          "2476:     {file = \"ujson-5.10.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:94a87f6e151c5f483d7d54ceef83b45d3a9cca7a9cb453dbdbb3f5a6f64033f5\"},",
          "2477:     {file = \"ujson-5.10.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:29b443c4c0a113bcbb792c88bea67b675c7ca3ca80c3474784e08bba01c18d51\"},",
          "2478:     {file = \"ujson-5.10.0-cp310-cp310-win32.whl\", hash = \"sha256:c18610b9ccd2874950faf474692deee4223a994251bc0a083c114671b64e6518\"},",
          "2479:     {file = \"ujson-5.10.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:924f7318c31874d6bb44d9ee1900167ca32aa9b69389b98ecbde34c1698a250f\"},",
          "2480:     {file = \"ujson-5.10.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:a5b366812c90e69d0f379a53648be10a5db38f9d4ad212b60af00bd4048d0f00\"},",
          "2481:     {file = \"ujson-5.10.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:502bf475781e8167f0f9d0e41cd32879d120a524b22358e7f205294224c71126\"},",
          "2482:     {file = \"ujson-5.10.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5b91b5d0d9d283e085e821651184a647699430705b15bf274c7896f23fe9c9d8\"},",
          "2483:     {file = \"ujson-5.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:129e39af3a6d85b9c26d5577169c21d53821d8cf68e079060602e861c6e5da1b\"},",
          "2484:     {file = \"ujson-5.10.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f77b74475c462cb8b88680471193064d3e715c7c6074b1c8c412cb526466efe9\"},",
          "2485:     {file = \"ujson-5.10.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:7ec0ca8c415e81aa4123501fee7f761abf4b7f386aad348501a26940beb1860f\"},",
          "2486:     {file = \"ujson-5.10.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:ab13a2a9e0b2865a6c6db9271f4b46af1c7476bfd51af1f64585e919b7c07fd4\"},",
          "2487:     {file = \"ujson-5.10.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:57aaf98b92d72fc70886b5a0e1a1ca52c2320377360341715dd3933a18e827b1\"},",
          "2488:     {file = \"ujson-5.10.0-cp311-cp311-win32.whl\", hash = \"sha256:2987713a490ceb27edff77fb184ed09acdc565db700ee852823c3dc3cffe455f\"},",
          "2489:     {file = \"ujson-5.10.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:f00ea7e00447918ee0eff2422c4add4c5752b1b60e88fcb3c067d4a21049a720\"},",
          "2490:     {file = \"ujson-5.10.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:98ba15d8cbc481ce55695beee9f063189dce91a4b08bc1d03e7f0152cd4bbdd5\"},",
          "2491:     {file = \"ujson-5.10.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:a9d2edbf1556e4f56e50fab7d8ff993dbad7f54bac68eacdd27a8f55f433578e\"},",
          "2492:     {file = \"ujson-5.10.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6627029ae4f52d0e1a2451768c2c37c0c814ffc04f796eb36244cf16b8e57043\"},",
          "2493:     {file = \"ujson-5.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f8ccb77b3e40b151e20519c6ae6d89bfe3f4c14e8e210d910287f778368bb3d1\"},",
          "2494:     {file = \"ujson-5.10.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f3caf9cd64abfeb11a3b661329085c5e167abbe15256b3b68cb5d914ba7396f3\"},",
          "2495:     {file = \"ujson-5.10.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6e32abdce572e3a8c3d02c886c704a38a1b015a1fb858004e03d20ca7cecbb21\"},",
          "2496:     {file = \"ujson-5.10.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:a65b6af4d903103ee7b6f4f5b85f1bfd0c90ba4eeac6421aae436c9988aa64a2\"},",
          "2497:     {file = \"ujson-5.10.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:604a046d966457b6cdcacc5aa2ec5314f0e8c42bae52842c1e6fa02ea4bda42e\"},",
          "2498:     {file = \"ujson-5.10.0-cp312-cp312-win32.whl\", hash = \"sha256:6dea1c8b4fc921bf78a8ff00bbd2bfe166345f5536c510671bccececb187c80e\"},",
          "2499:     {file = \"ujson-5.10.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:38665e7d8290188b1e0d57d584eb8110951a9591363316dd41cf8686ab1d0abc\"},",
          "2500:     {file = \"ujson-5.10.0-cp313-cp313-macosx_10_9_x86_64.whl\", hash = \"sha256:618efd84dc1acbd6bff8eaa736bb6c074bfa8b8a98f55b61c38d4ca2c1f7f287\"},",
          "2501:     {file = \"ujson-5.10.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:38d5d36b4aedfe81dfe251f76c0467399d575d1395a1755de391e58985ab1c2e\"},",
          "2502:     {file = \"ujson-5.10.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:67079b1f9fb29ed9a2914acf4ef6c02844b3153913eb735d4bf287ee1db6e557\"},",
          "2503:     {file = \"ujson-5.10.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d7d0e0ceeb8fe2468c70ec0c37b439dd554e2aa539a8a56365fd761edb418988\"},",
          "2504:     {file = \"ujson-5.10.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:59e02cd37bc7c44d587a0ba45347cc815fb7a5fe48de16bf05caa5f7d0d2e816\"},",
          "2505:     {file = \"ujson-5.10.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:2a890b706b64e0065f02577bf6d8ca3b66c11a5e81fb75d757233a38c07a1f20\"},",
          "2506:     {file = \"ujson-5.10.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:621e34b4632c740ecb491efc7f1fcb4f74b48ddb55e65221995e74e2d00bbff0\"},",
          "2507:     {file = \"ujson-5.10.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:b9500e61fce0cfc86168b248104e954fead61f9be213087153d272e817ec7b4f\"},",
          "2508:     {file = \"ujson-5.10.0-cp313-cp313-win32.whl\", hash = \"sha256:4c4fc16f11ac1612f05b6f5781b384716719547e142cfd67b65d035bd85af165\"},",
          "2509:     {file = \"ujson-5.10.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:4573fd1695932d4f619928fd09d5d03d917274381649ade4328091ceca175539\"},",
          "2510:     {file = \"ujson-5.10.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a984a3131da7f07563057db1c3020b1350a3e27a8ec46ccbfbf21e5928a43050\"},",
          "2511:     {file = \"ujson-5.10.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:73814cd1b9db6fc3270e9d8fe3b19f9f89e78ee9d71e8bd6c9a626aeaeaf16bd\"},",
          "2512:     {file = \"ujson-5.10.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:61e1591ed9376e5eddda202ec229eddc56c612b61ac6ad07f96b91460bb6c2fb\"},",
          "2513:     {file = \"ujson-5.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2c75269f8205b2690db4572a4a36fe47cd1338e4368bc73a7a0e48789e2e35a\"},",
          "2514:     {file = \"ujson-5.10.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7223f41e5bf1f919cd8d073e35b229295aa8e0f7b5de07ed1c8fddac63a6bc5d\"},",
          "2515:     {file = \"ujson-5.10.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:d4dc2fd6b3067c0782e7002ac3b38cf48608ee6366ff176bbd02cf969c9c20fe\"},",
          "2516:     {file = \"ujson-5.10.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:232cc85f8ee3c454c115455195a205074a56ff42608fd6b942aa4c378ac14dd7\"},",
          "2517:     {file = \"ujson-5.10.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:cc6139531f13148055d691e442e4bc6601f6dba1e6d521b1585d4788ab0bfad4\"},",
          "2518:     {file = \"ujson-5.10.0-cp38-cp38-win32.whl\", hash = \"sha256:e7ce306a42b6b93ca47ac4a3b96683ca554f6d35dd8adc5acfcd55096c8dfcb8\"},",
          "2519:     {file = \"ujson-5.10.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:e82d4bb2138ab05e18f089a83b6564fee28048771eb63cdecf4b9b549de8a2cc\"},",
          "2520:     {file = \"ujson-5.10.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dfef2814c6b3291c3c5f10065f745a1307d86019dbd7ea50e83504950136ed5b\"},",
          "2521:     {file = \"ujson-5.10.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:4734ee0745d5928d0ba3a213647f1c4a74a2a28edc6d27b2d6d5bd9fa4319e27\"},",
          "2522:     {file = \"ujson-5.10.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d47ebb01bd865fdea43da56254a3930a413f0c5590372a1241514abae8aa7c76\"},",
          "2523:     {file = \"ujson-5.10.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dee5e97c2496874acbf1d3e37b521dd1f307349ed955e62d1d2f05382bc36dd5\"},",
          "2524:     {file = \"ujson-5.10.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7490655a2272a2d0b072ef16b0b58ee462f4973a8f6bbe64917ce5e0a256f9c0\"},",
          "2525:     {file = \"ujson-5.10.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:ba17799fcddaddf5c1f75a4ba3fd6441f6a4f1e9173f8a786b42450851bd74f1\"},",
          "2526:     {file = \"ujson-5.10.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:2aff2985cef314f21d0fecc56027505804bc78802c0121343874741650a4d3d1\"},",
          "2527:     {file = \"ujson-5.10.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:ad88ac75c432674d05b61184178635d44901eb749786c8eb08c102330e6e8996\"},",
          "2528:     {file = \"ujson-5.10.0-cp39-cp39-win32.whl\", hash = \"sha256:2544912a71da4ff8c4f7ab5606f947d7299971bdd25a45e008e467ca638d13c9\"},",
          "2529:     {file = \"ujson-5.10.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:3ff201d62b1b177a46f113bb43ad300b424b7847f9c5d38b1b4ad8f75d4a282a\"},",
          "2530:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:5b6fee72fa77dc172a28f21693f64d93166534c263adb3f96c413ccc85ef6e64\"},",
          "2531:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:61d0af13a9af01d9f26d2331ce49bb5ac1fb9c814964018ac8df605b5422dcb3\"},",
          "2532:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ecb24f0bdd899d368b715c9e6664166cf694d1e57be73f17759573a6986dd95a\"},",
          "2533:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fbd8fd427f57a03cff3ad6574b5e299131585d9727c8c366da4624a9069ed746\"},",
          "2534:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:beeaf1c48e32f07d8820c705ff8e645f8afa690cca1544adba4ebfa067efdc88\"},",
          "2535:     {file = \"ujson-5.10.0-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:baed37ea46d756aca2955e99525cc02d9181de67f25515c468856c38d52b5f3b\"},",
          "2536:     {file = \"ujson-5.10.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:7663960f08cd5a2bb152f5ee3992e1af7690a64c0e26d31ba7b3ff5b2ee66337\"},",
          "2537:     {file = \"ujson-5.10.0-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:d8640fb4072d36b08e95a3a380ba65779d356b2fee8696afeb7794cf0902d0a1\"},",
          "2538:     {file = \"ujson-5.10.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:78778a3aa7aafb11e7ddca4e29f46bc5139131037ad628cc10936764282d6753\"},",
          "2539:     {file = \"ujson-5.10.0-pp38-pypy38_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b0111b27f2d5c820e7f2dbad7d48e3338c824e7ac4d2a12da3dc6061cc39c8e6\"},",
          "2540:     {file = \"ujson-5.10.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:c66962ca7565605b355a9ed478292da628b8f18c0f2793021ca4425abf8b01e5\"},",
          "2541:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:ba43cc34cce49cf2d4bc76401a754a81202d8aa926d0e2b79f0ee258cb15d3a4\"},",
          "2542:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:ac56eb983edce27e7f51d05bc8dd820586c6e6be1c5216a6809b0c668bb312b8\"},",
          "2543:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f44bd4b23a0e723bf8b10628288c2c7c335161d6840013d4d5de20e48551773b\"},",
          "2544:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7c10f4654e5326ec14a46bcdeb2b685d4ada6911050aa8baaf3501e57024b804\"},",
          "2545:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0de4971a89a762398006e844ae394bd46991f7c385d7a6a3b93ba229e6dac17e\"},",
          "2546:     {file = \"ujson-5.10.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:e1402f0564a97d2a52310ae10a64d25bcef94f8dd643fcf5d310219d915484f7\"},",
          "2547:     {file = \"ujson-5.10.0.tar.gz\", hash = \"sha256:b3cd8f3c5d8c7738257f1018880444f7b7d9b66232c64649f562d7ba86ad4bc1\"},",
          "2548: ]",
          "2552: version = \"1.26.20\"",
          "2555: python-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"",
          "2557:     {file = \"urllib3-1.26.20-py2.py3-none-any.whl\", hash = \"sha256:0ed14ccfbf1c30a9072c7ca157e4319b70d65f623e91e7b32fadb2853431016e\"},",
          "2558:     {file = \"urllib3-1.26.20.tar.gz\", hash = \"sha256:40c2dc0c681e47eb8f90e7e27bf6ff7df2e677421fd46756da1161c39ca70d32\"},",
          "2562: brotli = [\"brotli (==1.0.9)\", \"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\", \"brotlipy (>=0.6.0)\"]",
          "2563: secure = [\"certifi\", \"cryptography (>=1.3.4)\", \"idna (>=2.0.0)\", \"ipaddress\", \"pyOpenSSL (>=0.14)\", \"urllib3-secure-extra\"]",
          "2564: socks = [\"PySocks (>=1.5.6,!=1.5.7,<2.0)\"]",
          "2567: name = \"urwid\"",
          "2568: version = \"2.6.15\"",
          "2571: python-versions = \">3.7\"",
          "2573:     {file = \"urwid-2.6.15-py3-none-any.whl\", hash = \"sha256:71b3171cabaa0092902f556768756bd2f2ebb24c0da287ee08f081d235340cb7\"},",
          "2574:     {file = \"urwid-2.6.15.tar.gz\", hash = \"sha256:9ecc57330d88c8d9663ffd7092a681674c03ff794b6330ccfef479af7aa9671b\"},",
          "2577: [package.dependencies]",
          "2578: typing-extensions = \"*\"",
          "2579: wcwidth = \"*\"",
          "2581: [package.extras]",
          "2582: curses = [\"windows-curses\"]",
          "2583: glib = [\"PyGObject\"]",
          "2584: lcd = [\"pyserial\"]",
          "2585: serial = [\"pyserial\"]",
          "2586: tornado = [\"tornado (>=5.0)\"]",
          "2587: trio = [\"exceptiongroup\", \"trio (>=0.22.0)\"]",
          "2588: twisted = [\"twisted\"]",
          "2589: zmq = [\"zmq\"]",
          "",
          "[Added Lines]",
          "2927: version = \"2.2.3\"",
          "2930: python-versions = \">=3.8\"",
          "2932:     {file = \"urllib3-2.2.3-py3-none-any.whl\", hash = \"sha256:ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac\"},",
          "2933:     {file = \"urllib3-2.2.3.tar.gz\", hash = \"sha256:e7d814a81dad81e6caf2ec9fdedb284ecc9c73076b62654547cc64ccdcae26e9\"},",
          "2937: brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\"]",
          "2938: h2 = [\"h2 (>=4,<5)\"]",
          "2939: socks = [\"pysocks (>=1.5.6,!=1.5.7,<2.0)\"]",
          "2940: zstd = [\"zstandard (>=0.18.0)\"]",
          "2943: name = \"urwid-mitmproxy\"",
          "2944: version = \"2.1.2.1\"",
          "2947: python-versions = \"*\"",
          "2949:     {file = \"urwid-mitmproxy-2.1.2.1.tar.gz\", hash = \"sha256:be6238e587acb92bdd43b241af0a10dc23798e8cf3eddef834164eb637686cda\"},",
          "2950:     {file = \"urwid_mitmproxy-2.1.2.1-cp310-cp310-macosx_11_0_x86_64.whl\", hash = \"sha256:29c62a593235d2b69ba4557648588c54420ef030794b9d28e65f50bffdde85c3\"},",
          "2951:     {file = \"urwid_mitmproxy-2.1.2.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:d93bdc87cbb329cd262f8ada586e954a95ca4cc7249eca5b348b87f47ef1adb5\"},",
          "2952:     {file = \"urwid_mitmproxy-2.1.2.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:8cb7eb42fcc426ea02c321159631d396ec0cd6ebebabb310f3a4493579ff2e09\"},",
          "2953:     {file = \"urwid_mitmproxy-2.1.2.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:66c40dcead7fedbb312516e18574d216b0e7c728bf5cd0e240eee53737234b45\"},",
          "2954:     {file = \"urwid_mitmproxy-2.1.2.1-cp39-cp39-macosx_11_0_x86_64.whl\", hash = \"sha256:7a8a95460a519e0388d91a198acb31836dce40d14e599a0b9c24ba70fa4ec64b\"},",
          "2955:     {file = \"urwid_mitmproxy-2.1.2.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:d2d536ad412022365b5e1974cde9029b86cfc30f3960ae073f959630f0c27c21\"},",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2617: [package.dependencies]",
          "2618: bracex = \">=2.1.1\"",
          "2631: [[package]]",
          "2632: name = \"werkzeug\"",
          "2633: version = \"3.1.2\"",
          "",
          "[Removed Lines]",
          "2620: [[package]]",
          "2621: name = \"wcwidth\"",
          "2622: version = \"0.2.13\"",
          "2623: description = \"Measures the displayed width of unicode strings in a terminal\"",
          "2624: optional = false",
          "2625: python-versions = \"*\"",
          "2626: files = [",
          "2627:     {file = \"wcwidth-0.2.13-py2.py3-none-any.whl\", hash = \"sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859\"},",
          "2628:     {file = \"wcwidth-0.2.13.tar.gz\", hash = \"sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5\"},",
          "2629: ]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2659: [package.extras]",
          "2660: brotli = [\"brotli\"]",
          "2662: [[package]]",
          "2663: name = \"wsproto\"",
          "2664: version = \"1.2.0\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3018: [[package]]",
          "3019: name = \"wrapt\"",
          "3020: version = \"1.16.0\"",
          "3021: description = \"Module for decorators, wrappers and monkey patching.\"",
          "3022: optional = false",
          "3023: python-versions = \">=3.6\"",
          "3024: files = [",
          "3025:     {file = \"wrapt-1.16.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ffa565331890b90056c01db69c0fe634a776f8019c143a5ae265f9c6bc4bd6d4\"},",
          "3026:     {file = \"wrapt-1.16.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:e4fdb9275308292e880dcbeb12546df7f3e0f96c6b41197e0cf37d2826359020\"},",
          "3027:     {file = \"wrapt-1.16.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb2dee3874a500de01c93d5c71415fcaef1d858370d405824783e7a8ef5db440\"},",
          "3028:     {file = \"wrapt-1.16.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:2a88e6010048489cda82b1326889ec075a8c856c2e6a256072b28eaee3ccf487\"},",
          "3029:     {file = \"wrapt-1.16.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ac83a914ebaf589b69f7d0a1277602ff494e21f4c2f743313414378f8f50a4cf\"},",
          "3030:     {file = \"wrapt-1.16.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:73aa7d98215d39b8455f103de64391cb79dfcad601701a3aa0dddacf74911d72\"},",
          "3031:     {file = \"wrapt-1.16.0-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:807cc8543a477ab7422f1120a217054f958a66ef7314f76dd9e77d3f02cdccd0\"},",
          "3032:     {file = \"wrapt-1.16.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:bf5703fdeb350e36885f2875d853ce13172ae281c56e509f4e6eca049bdfb136\"},",
          "3033:     {file = \"wrapt-1.16.0-cp310-cp310-win32.whl\", hash = \"sha256:f6b2d0c6703c988d334f297aa5df18c45e97b0af3679bb75059e0e0bd8b1069d\"},",
          "3034:     {file = \"wrapt-1.16.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:decbfa2f618fa8ed81c95ee18a387ff973143c656ef800c9f24fb7e9c16054e2\"},",
          "3035:     {file = \"wrapt-1.16.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:1a5db485fe2de4403f13fafdc231b0dbae5eca4359232d2efc79025527375b09\"},",
          "3036:     {file = \"wrapt-1.16.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:75ea7d0ee2a15733684badb16de6794894ed9c55aa5e9903260922f0482e687d\"},",
          "3037:     {file = \"wrapt-1.16.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a452f9ca3e3267cd4d0fcf2edd0d035b1934ac2bd7e0e57ac91ad6b95c0c6389\"},",
          "3038:     {file = \"wrapt-1.16.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:43aa59eadec7890d9958748db829df269f0368521ba6dc68cc172d5d03ed8060\"},",
          "3039:     {file = \"wrapt-1.16.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:72554a23c78a8e7aa02abbd699d129eead8b147a23c56e08d08dfc29cfdddca1\"},",
          "3040:     {file = \"wrapt-1.16.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:d2efee35b4b0a347e0d99d28e884dfd82797852d62fcd7ebdeee26f3ceb72cf3\"},",
          "3041:     {file = \"wrapt-1.16.0-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:6dcfcffe73710be01d90cae08c3e548d90932d37b39ef83969ae135d36ef3956\"},",
          "3042:     {file = \"wrapt-1.16.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:eb6e651000a19c96f452c85132811d25e9264d836951022d6e81df2fff38337d\"},",
          "3043:     {file = \"wrapt-1.16.0-cp311-cp311-win32.whl\", hash = \"sha256:66027d667efe95cc4fa945af59f92c5a02c6f5bb6012bff9e60542c74c75c362\"},",
          "3044:     {file = \"wrapt-1.16.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:aefbc4cb0a54f91af643660a0a150ce2c090d3652cf4052a5397fb2de549cd89\"},",
          "3045:     {file = \"wrapt-1.16.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:5eb404d89131ec9b4f748fa5cfb5346802e5ee8836f57d516576e61f304f3b7b\"},",
          "3046:     {file = \"wrapt-1.16.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:9090c9e676d5236a6948330e83cb89969f433b1943a558968f659ead07cb3b36\"},",
          "3047:     {file = \"wrapt-1.16.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:94265b00870aa407bd0cbcfd536f17ecde43b94fb8d228560a1e9d3041462d73\"},",
          "3048:     {file = \"wrapt-1.16.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f2058f813d4f2b5e3a9eb2eb3faf8f1d99b81c3e51aeda4b168406443e8ba809\"},",
          "3049:     {file = \"wrapt-1.16.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:98b5e1f498a8ca1858a1cdbffb023bfd954da4e3fa2c0cb5853d40014557248b\"},",
          "3050:     {file = \"wrapt-1.16.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:14d7dc606219cdd7405133c713f2c218d4252f2a469003f8c46bb92d5d095d81\"},",
          "3051:     {file = \"wrapt-1.16.0-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:49aac49dc4782cb04f58986e81ea0b4768e4ff197b57324dcbd7699c5dfb40b9\"},",
          "3052:     {file = \"wrapt-1.16.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:418abb18146475c310d7a6dc71143d6f7adec5b004ac9ce08dc7a34e2babdc5c\"},",
          "3053:     {file = \"wrapt-1.16.0-cp312-cp312-win32.whl\", hash = \"sha256:685f568fa5e627e93f3b52fda002c7ed2fa1800b50ce51f6ed1d572d8ab3e7fc\"},",
          "3054:     {file = \"wrapt-1.16.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:dcdba5c86e368442528f7060039eda390cc4091bfd1dca41e8046af7c910dda8\"},",
          "3055:     {file = \"wrapt-1.16.0-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:d462f28826f4657968ae51d2181a074dfe03c200d6131690b7d65d55b0f360f8\"},",
          "3056:     {file = \"wrapt-1.16.0-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a33a747400b94b6d6b8a165e4480264a64a78c8a4c734b62136062e9a248dd39\"},",
          "3057:     {file = \"wrapt-1.16.0-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b3646eefa23daeba62643a58aac816945cadc0afaf21800a1421eeba5f6cfb9c\"},",
          "3058:     {file = \"wrapt-1.16.0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3ebf019be5c09d400cf7b024aa52b1f3aeebeff51550d007e92c3c1c4afc2a40\"},",
          "3059:     {file = \"wrapt-1.16.0-cp36-cp36m-musllinux_1_1_aarch64.whl\", hash = \"sha256:0d2691979e93d06a95a26257adb7bfd0c93818e89b1406f5a28f36e0d8c1e1fc\"},",
          "3060:     {file = \"wrapt-1.16.0-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:1acd723ee2a8826f3d53910255643e33673e1d11db84ce5880675954183ec47e\"},",
          "3061:     {file = \"wrapt-1.16.0-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:bc57efac2da352a51cc4658878a68d2b1b67dbe9d33c36cb826ca449d80a8465\"},",
          "3062:     {file = \"wrapt-1.16.0-cp36-cp36m-win32.whl\", hash = \"sha256:da4813f751142436b075ed7aa012a8778aa43a99f7b36afe9b742d3ed8bdc95e\"},",
          "3063:     {file = \"wrapt-1.16.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:6f6eac2360f2d543cc875a0e5efd413b6cbd483cb3ad7ebf888884a6e0d2e966\"},",
          "3064:     {file = \"wrapt-1.16.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:a0ea261ce52b5952bf669684a251a66df239ec6d441ccb59ec7afa882265d593\"},",
          "3065:     {file = \"wrapt-1.16.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7bd2d7ff69a2cac767fbf7a2b206add2e9a210e57947dd7ce03e25d03d2de292\"},",
          "3066:     {file = \"wrapt-1.16.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:9159485323798c8dc530a224bd3ffcf76659319ccc7bbd52e01e73bd0241a0c5\"},",
          "3067:     {file = \"wrapt-1.16.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a86373cf37cd7764f2201b76496aba58a52e76dedfaa698ef9e9688bfd9e41cf\"},",
          "3068:     {file = \"wrapt-1.16.0-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:73870c364c11f03ed072dda68ff7aea6d2a3a5c3fe250d917a429c7432e15228\"},",
          "3069:     {file = \"wrapt-1.16.0-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:b935ae30c6e7400022b50f8d359c03ed233d45b725cfdd299462f41ee5ffba6f\"},",
          "3070:     {file = \"wrapt-1.16.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:db98ad84a55eb09b3c32a96c576476777e87c520a34e2519d3e59c44710c002c\"},",
          "3071:     {file = \"wrapt-1.16.0-cp37-cp37m-win32.whl\", hash = \"sha256:9153ed35fc5e4fa3b2fe97bddaa7cbec0ed22412b85bcdaf54aeba92ea37428c\"},",
          "3072:     {file = \"wrapt-1.16.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:66dfbaa7cfa3eb707bbfcd46dab2bc6207b005cbc9caa2199bcbc81d95071a00\"},",
          "3073:     {file = \"wrapt-1.16.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:1dd50a2696ff89f57bd8847647a1c363b687d3d796dc30d4dd4a9d1689a706f0\"},",
          "3074:     {file = \"wrapt-1.16.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:44a2754372e32ab315734c6c73b24351d06e77ffff6ae27d2ecf14cf3d229202\"},",
          "3075:     {file = \"wrapt-1.16.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e9723528b9f787dc59168369e42ae1c3b0d3fadb2f1a71de14531d321ee05b0\"},",
          "3076:     {file = \"wrapt-1.16.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:dbed418ba5c3dce92619656802cc5355cb679e58d0d89b50f116e4a9d5a9603e\"},",
          "3077:     {file = \"wrapt-1.16.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:941988b89b4fd6b41c3f0bfb20e92bd23746579736b7343283297c4c8cbae68f\"},",
          "3078:     {file = \"wrapt-1.16.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a42cd0cfa8ffc1915aef79cb4284f6383d8a3e9dcca70c445dcfdd639d51267\"},",
          "3079:     {file = \"wrapt-1.16.0-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:1ca9b6085e4f866bd584fb135a041bfc32cab916e69f714a7d1d397f8c4891ca\"},",
          "3080:     {file = \"wrapt-1.16.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:d5e49454f19ef621089e204f862388d29e6e8d8b162efce05208913dde5b9ad6\"},",
          "3081:     {file = \"wrapt-1.16.0-cp38-cp38-win32.whl\", hash = \"sha256:c31f72b1b6624c9d863fc095da460802f43a7c6868c5dda140f51da24fd47d7b\"},",
          "3082:     {file = \"wrapt-1.16.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:490b0ee15c1a55be9c1bd8609b8cecd60e325f0575fc98f50058eae366e01f41\"},",
          "3083:     {file = \"wrapt-1.16.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:9b201ae332c3637a42f02d1045e1d0cccfdc41f1f2f801dafbaa7e9b4797bfc2\"},",
          "3084:     {file = \"wrapt-1.16.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:2076fad65c6736184e77d7d4729b63a6d1ae0b70da4868adeec40989858eb3fb\"},",
          "3085:     {file = \"wrapt-1.16.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c5cd603b575ebceca7da5a3a251e69561bec509e0b46e4993e1cac402b7247b8\"},",
          "3086:     {file = \"wrapt-1.16.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b47cfad9e9bbbed2339081f4e346c93ecd7ab504299403320bf85f7f85c7d46c\"},",
          "3087:     {file = \"wrapt-1.16.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f8212564d49c50eb4565e502814f694e240c55551a5f1bc841d4fcaabb0a9b8a\"},",
          "3088:     {file = \"wrapt-1.16.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:5f15814a33e42b04e3de432e573aa557f9f0f56458745c2074952f564c50e664\"},",
          "3089:     {file = \"wrapt-1.16.0-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:db2e408d983b0e61e238cf579c09ef7020560441906ca990fe8412153e3b291f\"},",
          "3090:     {file = \"wrapt-1.16.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:edfad1d29c73f9b863ebe7082ae9321374ccb10879eeabc84ba3b69f2579d537\"},",
          "3091:     {file = \"wrapt-1.16.0-cp39-cp39-win32.whl\", hash = \"sha256:ed867c42c268f876097248e05b6117a65bcd1e63b779e916fe2e33cd6fd0d3c3\"},",
          "3092:     {file = \"wrapt-1.16.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:eb1b046be06b0fce7249f1d025cd359b4b80fc1c3e24ad9eca33e0dcdb2e4a35\"},",
          "3093:     {file = \"wrapt-1.16.0-py3-none-any.whl\", hash = \"sha256:6906c4100a8fcbf2fa735f6059214bb13b97f75b1a61777fcf6432121ef12ef1\"},",
          "3094:     {file = \"wrapt-1.16.0.tar.gz\", hash = \"sha256:5f370f952971e7d17c7d1ead40e49f32345a7f7a5373571ef44d800d06b1899d\"},",
          "3095: ]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2839:     {file = \"yara_python_dex-1.0.7-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:3c8668dccf0a9c84f85729a15a697aec44e9c08da01efba91248fccd65039393\"},",
          "2840: ]",
          "2842: [[package]]",
          "2843: name = \"zstandard\"",
          "2845: description = \"Zstandard bindings for Python\"",
          "2846: optional = false",
          "2847: python-versions = \">=3.8\"",
          "2848: files = [",
          "2946: ]",
          "2948: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2844: version = \"0.23.0\"",
          "2849:     {file = \"zstandard-0.23.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:bf0a05b6059c0528477fba9054d09179beb63744355cab9f38059548fedd46a9\"},",
          "2850:     {file = \"zstandard-0.23.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:fc9ca1c9718cb3b06634c7c8dec57d24e9438b2aa9a0f02b8bb36bf478538880\"},",
          "2851:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:77da4c6bfa20dd5ea25cbf12c76f181a8e8cd7ea231c673828d0386b1740b8dc\"},",
          "2852:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b2170c7e0367dde86a2647ed5b6f57394ea7f53545746104c6b09fc1f4223573\"},",
          "2853:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c16842b846a8d2a145223f520b7e18b57c8f476924bda92aeee3a88d11cfc391\"},",
          "2854:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:157e89ceb4054029a289fb504c98c6a9fe8010f1680de0201b3eb5dc20aa6d9e\"},",
          "2855:     {file = \"zstandard-0.23.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:203d236f4c94cd8379d1ea61db2fce20730b4c38d7f1c34506a31b34edc87bdd\"},",
          "2856:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:dc5d1a49d3f8262be192589a4b72f0d03b72dcf46c51ad5852a4fdc67be7b9e4\"},",
          "2857:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:752bf8a74412b9892f4e5b58f2f890a039f57037f52c89a740757ebd807f33ea\"},",
          "2858:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:80080816b4f52a9d886e67f1f96912891074903238fe54f2de8b786f86baded2\"},",
          "2859:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:84433dddea68571a6d6bd4fbf8ff398236031149116a7fff6f777ff95cad3df9\"},",
          "2860:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:ab19a2d91963ed9e42b4e8d77cd847ae8381576585bad79dbd0a8837a9f6620a\"},",
          "2861:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:59556bf80a7094d0cfb9f5e50bb2db27fefb75d5138bb16fb052b61b0e0eeeb0\"},",
          "2862:     {file = \"zstandard-0.23.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:27d3ef2252d2e62476389ca8f9b0cf2bbafb082a3b6bfe9d90cbcbb5529ecf7c\"},",
          "2863:     {file = \"zstandard-0.23.0-cp310-cp310-win32.whl\", hash = \"sha256:5d41d5e025f1e0bccae4928981e71b2334c60f580bdc8345f824e7c0a4c2a813\"},",
          "2864:     {file = \"zstandard-0.23.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:519fbf169dfac1222a76ba8861ef4ac7f0530c35dd79ba5727014613f91613d4\"},",
          "2865:     {file = \"zstandard-0.23.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:34895a41273ad33347b2fc70e1bff4240556de3c46c6ea430a7ed91f9042aa4e\"},",
          "2866:     {file = \"zstandard-0.23.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:77ea385f7dd5b5676d7fd943292ffa18fbf5c72ba98f7d09fc1fb9e819b34c23\"},",
          "2867:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:983b6efd649723474f29ed42e1467f90a35a74793437d0bc64a5bf482bedfa0a\"},",
          "2868:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:80a539906390591dd39ebb8d773771dc4db82ace6372c4d41e2d293f8e32b8db\"},",
          "2869:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:445e4cb5048b04e90ce96a79b4b63140e3f4ab5f662321975679b5f6360b90e2\"},",
          "2870:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fd30d9c67d13d891f2360b2a120186729c111238ac63b43dbd37a5a40670b8ca\"},",
          "2871:     {file = \"zstandard-0.23.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d20fd853fbb5807c8e84c136c278827b6167ded66c72ec6f9a14b863d809211c\"},",
          "2872:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:ed1708dbf4d2e3a1c5c69110ba2b4eb6678262028afd6c6fbcc5a8dac9cda68e\"},",
          "2873:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:be9b5b8659dff1f913039c2feee1aca499cfbc19e98fa12bc85e037c17ec6ca5\"},",
          "2874:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:65308f4b4890aa12d9b6ad9f2844b7ee42c7f7a4fd3390425b242ffc57498f48\"},",
          "2875:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:98da17ce9cbf3bfe4617e836d561e433f871129e3a7ac16d6ef4c680f13a839c\"},",
          "2876:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:8ed7d27cb56b3e058d3cf684d7200703bcae623e1dcc06ed1e18ecda39fee003\"},",
          "2877:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:b69bb4f51daf461b15e7b3db033160937d3ff88303a7bc808c67bbc1eaf98c78\"},",
          "2878:     {file = \"zstandard-0.23.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473\"},",
          "2879:     {file = \"zstandard-0.23.0-cp311-cp311-win32.whl\", hash = \"sha256:f2d4380bf5f62daabd7b751ea2339c1a21d1c9463f1feb7fc2bdcea2c29c3160\"},",
          "2880:     {file = \"zstandard-0.23.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:62136da96a973bd2557f06ddd4e8e807f9e13cbb0bfb9cc06cfe6d98ea90dfe0\"},",
          "2881:     {file = \"zstandard-0.23.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b4567955a6bc1b20e9c31612e615af6b53733491aeaa19a6b3b37f3b65477094\"},",
          "2882:     {file = \"zstandard-0.23.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:1e172f57cd78c20f13a3415cc8dfe24bf388614324d25539146594c16d78fcc8\"},",
          "2883:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b0e166f698c5a3e914947388c162be2583e0c638a4703fc6a543e23a88dea3c1\"},",
          "2884:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072\"},",
          "2885:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d50d31bfedd53a928fed6707b15a8dbeef011bb6366297cc435accc888b27c20\"},",
          "2886:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:72c68dda124a1a138340fb62fa21b9bf4848437d9ca60bd35db36f2d3345f373\"},",
          "2887:     {file = \"zstandard-0.23.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:53dd9d5e3d29f95acd5de6802e909ada8d8d8cfa37a3ac64836f3bc4bc5512db\"},",
          "2888:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a41c120c3dbc0d81a8e8adc73312d668cd34acd7725f036992b1b72d22c1772\"},",
          "2889:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:40b33d93c6eddf02d2c19f5773196068d875c41ca25730e8288e9b672897c105\"},",
          "2890:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:9206649ec587e6b02bd124fb7799b86cddec350f6f6c14bc82a2b70183e708ba\"},",
          "2891:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:76e79bc28a65f467e0409098fa2c4376931fd3207fbeb6b956c7c476d53746dd\"},",
          "2892:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:66b689c107857eceabf2cf3d3fc699c3c0fe8ccd18df2219d978c0283e4c508a\"},",
          "2893:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:9c236e635582742fee16603042553d276cca506e824fa2e6489db04039521e90\"},",
          "2894:     {file = \"zstandard-0.23.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:a8fffdbd9d1408006baaf02f1068d7dd1f016c6bcb7538682622c556e7b68e35\"},",
          "2895:     {file = \"zstandard-0.23.0-cp312-cp312-win32.whl\", hash = \"sha256:dc1d33abb8a0d754ea4763bad944fd965d3d95b5baef6b121c0c9013eaf1907d\"},",
          "2896:     {file = \"zstandard-0.23.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:64585e1dba664dc67c7cdabd56c1e5685233fbb1fc1966cfba2a340ec0dfff7b\"},",
          "2897:     {file = \"zstandard-0.23.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:576856e8594e6649aee06ddbfc738fec6a834f7c85bf7cadd1c53d4a58186ef9\"},",
          "2898:     {file = \"zstandard-0.23.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:38302b78a850ff82656beaddeb0bb989a0322a8bbb1bf1ab10c17506681d772a\"},",
          "2899:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d2240ddc86b74966c34554c49d00eaafa8200a18d3a5b6ffbf7da63b11d74ee2\"},",
          "2900:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2ef230a8fd217a2015bc91b74f6b3b7d6522ba48be29ad4ea0ca3a3775bf7dd5\"},",
          "2901:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:774d45b1fac1461f48698a9d4b5fa19a69d47ece02fa469825b442263f04021f\"},",
          "2902:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6f77fa49079891a4aab203d0b1744acc85577ed16d767b52fc089d83faf8d8ed\"},",
          "2903:     {file = \"zstandard-0.23.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ac184f87ff521f4840e6ea0b10c0ec90c6b1dcd0bad2f1e4a9a1b4fa177982ea\"},",
          "2904:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:c363b53e257246a954ebc7c488304b5592b9c53fbe74d03bc1c64dda153fb847\"},",
          "2905:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7792606d606c8df5277c32ccb58f29b9b8603bf83b48639b7aedf6df4fe8171\"},",
          "2906:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:a0817825b900fcd43ac5d05b8b3079937073d2b1ff9cf89427590718b70dd840\"},",
          "2907:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:9da6bc32faac9a293ddfdcb9108d4b20416219461e4ec64dfea8383cac186690\"},",
          "2908:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_ppc64le.whl\", hash = \"sha256:fd7699e8fd9969f455ef2926221e0233f81a2542921471382e77a9e2f2b57f4b\"},",
          "2909:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_s390x.whl\", hash = \"sha256:d477ed829077cd945b01fc3115edd132c47e6540ddcd96ca169facff28173057\"},",
          "2910:     {file = \"zstandard-0.23.0-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:fa6ce8b52c5987b3e34d5674b0ab529a4602b632ebab0a93b07bfb4dfc8f8a33\"},",
          "2911:     {file = \"zstandard-0.23.0-cp313-cp313-win32.whl\", hash = \"sha256:a9b07268d0c3ca5c170a385a0ab9fb7fdd9f5fd866be004c4ea39e44edce47dd\"},",
          "2912:     {file = \"zstandard-0.23.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:f3513916e8c645d0610815c257cbfd3242adfd5c4cfa78be514e5a3ebb42a41b\"},",
          "2913:     {file = \"zstandard-0.23.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:2ef3775758346d9ac6214123887d25c7061c92afe1f2b354f9388e9e4d48acfc\"},",
          "2914:     {file = \"zstandard-0.23.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:4051e406288b8cdbb993798b9a45c59a4896b6ecee2f875424ec10276a895740\"},",
          "2915:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2d1a054f8f0a191004675755448d12be47fa9bebbcffa3cdf01db19f2d30a54\"},",
          "2916:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f83fa6cae3fff8e98691248c9320356971b59678a17f20656a9e59cd32cee6d8\"},",
          "2917:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:32ba3b5ccde2d581b1e6aa952c836a6291e8435d788f656fe5976445865ae045\"},",
          "2918:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2f146f50723defec2975fb7e388ae3a024eb7151542d1599527ec2aa9cacb152\"},",
          "2919:     {file = \"zstandard-0.23.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1bfe8de1da6d104f15a60d4a8a768288f66aa953bbe00d027398b93fb9680b26\"},",
          "2920:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:29a2bc7c1b09b0af938b7a8343174b987ae021705acabcbae560166567f5a8db\"},",
          "2921:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:61f89436cbfede4bc4e91b4397eaa3e2108ebe96d05e93d6ccc95ab5714be512\"},",
          "2922:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:53ea7cdc96c6eb56e76bb06894bcfb5dfa93b7adcf59d61c6b92674e24e2dd5e\"},",
          "2923:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:a4ae99c57668ca1e78597d8b06d5af837f377f340f4cce993b551b2d7731778d\"},",
          "2924:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:379b378ae694ba78cef921581ebd420c938936a153ded602c4fea612b7eaa90d\"},",
          "2925:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:50a80baba0285386f97ea36239855f6020ce452456605f262b2d33ac35c7770b\"},",
          "2926:     {file = \"zstandard-0.23.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:61062387ad820c654b6a6b5f0b94484fa19515e0c5116faf29f41a6bc91ded6e\"},",
          "2927:     {file = \"zstandard-0.23.0-cp38-cp38-win32.whl\", hash = \"sha256:b8c0bd73aeac689beacd4e7667d48c299f61b959475cdbb91e7d3d88d27c56b9\"},",
          "2928:     {file = \"zstandard-0.23.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:a05e6d6218461eb1b4771d973728f0133b2a4613a6779995df557f70794fd60f\"},",
          "2929:     {file = \"zstandard-0.23.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:3aa014d55c3af933c1315eb4bb06dd0459661cc0b15cd61077afa6489bec63bb\"},",
          "2930:     {file = \"zstandard-0.23.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916\"},",
          "2931:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fb2b1ecfef1e67897d336de3a0e3f52478182d6a47eda86cbd42504c5cbd009a\"},",
          "2932:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:837bb6764be6919963ef41235fd56a6486b132ea64afe5fafb4cb279ac44f259\"},",
          "2933:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4\"},",
          "2934:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48ef6a43b1846f6025dde6ed9fee0c24e1149c1c25f7fb0a0585572b2f3adc58\"},",
          "2935:     {file = \"zstandard-0.23.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15\"},",
          "2936:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:2fb4535137de7e244c230e24f9d1ec194f61721c86ebea04e1581d9d06ea1269\"},",
          "2937:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:8c24f21fa2af4bb9f2c492a86fe0c34e6d2c63812a839590edaf177b7398f700\"},",
          "2938:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:a8c86881813a78a6f4508ef9daf9d4995b8ac2d147dcb1a450448941398091c9\"},",
          "2939:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:fe3b385d996ee0822fd46528d9f0443b880d4d05528fd26a9119a54ec3f91c69\"},",
          "2940:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:82d17e94d735c99621bf8ebf9995f870a6b3e6d14543b99e201ae046dfe7de70\"},",
          "2941:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:c7c517d74bea1a6afd39aa612fa025e6b8011982a0897768a2f7c8ab4ebb78a2\"},",
          "2942:     {file = \"zstandard-0.23.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:1fd7e0f1cfb70eb2f95a19b472ee7ad6d9a0a992ec0ae53286870c104ca939e5\"},",
          "2943:     {file = \"zstandard-0.23.0-cp39-cp39-win32.whl\", hash = \"sha256:43da0f0092281bf501f9c5f6f3b4c975a8a0ea82de49ba3f7100e64d422a1274\"},",
          "2944:     {file = \"zstandard-0.23.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:f8346bfa098532bc1fb6c7ef06783e969d87a99dd1d2a5a18a892c1d7a643c58\"},",
          "2945:     {file = \"zstandard-0.23.0.tar.gz\", hash = \"sha256:b2d8c62d08e7255f68f7a740bae85b3c9b8e5466baa9cbf7f57f1cde0ac6bc09\"},",
          "",
          "[Added Lines]",
          "3277: [[package]]",
          "3278: name = \"zipp\"",
          "3279: version = \"3.20.2\"",
          "3280: description = \"Backport of pathlib-compatible object wrapper for zip files\"",
          "3281: optional = false",
          "3282: python-versions = \">=3.8\"",
          "3283: files = [",
          "3284:     {file = \"zipp-3.20.2-py3-none-any.whl\", hash = \"sha256:a817ac80d6cf4b23bf7f2828b7cabf326f15a001bea8b1f9b49631780ba28350\"},",
          "3285:     {file = \"zipp-3.20.2.tar.gz\", hash = \"sha256:bc9eb26f4506fda01b81bcde0ca78103b6e62f991b381fec825435c836edbc29\"},",
          "3286: ]",
          "3288: [package.extras]",
          "3289: check = [\"pytest-checkdocs (>=2.4)\", \"pytest-ruff (>=0.2.1)\"]",
          "3290: cover = [\"pytest-cov\"]",
          "3291: doc = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
          "3292: enabler = [\"pytest-enabler (>=2.2)\"]",
          "3293: test = [\"big-O\", \"importlib-resources\", \"jaraco.functools\", \"jaraco.itertools\", \"jaraco.test\", \"more-itertools\", \"pytest (>=6,!=8.1.*)\", \"pytest-ignore-flaky\"]",
          "3294: type = [\"pytest-mypy\"]",
          "3298: version = \"0.22.0\"",
          "3303:     {file = \"zstandard-0.22.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:275df437ab03f8c033b8a2c181e51716c32d831082d93ce48002a5227ec93019\"},",
          "3304:     {file = \"zstandard-0.22.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2ac9957bc6d2403c4772c890916bf181b2653640da98f32e04b96e4d6fb3252a\"},",
          "3305:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fe3390c538f12437b859d815040763abc728955a52ca6ff9c5d4ac707c4ad98e\"},",
          "3306:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1958100b8a1cc3f27fa21071a55cb2ed32e9e5df4c3c6e661c193437f171cba2\"},",
          "3307:     {file = \"zstandard-0.22.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:93e1856c8313bc688d5df069e106a4bc962eef3d13372020cc6e3ebf5e045202\"},",
          "3308:     {file = \"zstandard-0.22.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:1a90ba9a4c9c884bb876a14be2b1d216609385efb180393df40e5172e7ecf356\"},",
          "3309:     {file = \"zstandard-0.22.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:3db41c5e49ef73641d5111554e1d1d3af106410a6c1fb52cf68912ba7a343a0d\"},",
          "3310:     {file = \"zstandard-0.22.0-cp310-cp310-win32.whl\", hash = \"sha256:d8593f8464fb64d58e8cb0b905b272d40184eac9a18d83cf8c10749c3eafcd7e\"},",
          "3311:     {file = \"zstandard-0.22.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:f1a4b358947a65b94e2501ce3e078bbc929b039ede4679ddb0460829b12f7375\"},",
          "3312:     {file = \"zstandard-0.22.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:589402548251056878d2e7c8859286eb91bd841af117dbe4ab000e6450987e08\"},",
          "3313:     {file = \"zstandard-0.22.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:a97079b955b00b732c6f280d5023e0eefe359045e8b83b08cf0333af9ec78f26\"},",
          "3314:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:445b47bc32de69d990ad0f34da0e20f535914623d1e506e74d6bc5c9dc40bb09\"},",
          "3315:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:33591d59f4956c9812f8063eff2e2c0065bc02050837f152574069f5f9f17775\"},",
          "3316:     {file = \"zstandard-0.22.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:888196c9c8893a1e8ff5e89b8f894e7f4f0e64a5af4d8f3c410f0319128bb2f8\"},",
          "3317:     {file = \"zstandard-0.22.0-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:53866a9d8ab363271c9e80c7c2e9441814961d47f88c9bc3b248142c32141d94\"},",
          "3318:     {file = \"zstandard-0.22.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:4ac59d5d6910b220141c1737b79d4a5aa9e57466e7469a012ed42ce2d3995e88\"},",
          "3319:     {file = \"zstandard-0.22.0-cp311-cp311-win32.whl\", hash = \"sha256:2b11ea433db22e720758cba584c9d661077121fcf60ab43351950ded20283440\"},",
          "3320:     {file = \"zstandard-0.22.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:11f0d1aab9516a497137b41e3d3ed4bbf7b2ee2abc79e5c8b010ad286d7464bd\"},",
          "3321:     {file = \"zstandard-0.22.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:6c25b8eb733d4e741246151d895dd0308137532737f337411160ff69ca24f93a\"},",
          "3322:     {file = \"zstandard-0.22.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:f9b2cde1cd1b2a10246dbc143ba49d942d14fb3d2b4bccf4618d475c65464912\"},",
          "3323:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a88b7df61a292603e7cd662d92565d915796b094ffb3d206579aaebac6b85d5f\"},",
          "3324:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:466e6ad8caefb589ed281c076deb6f0cd330e8bc13c5035854ffb9c2014b118c\"},",
          "3325:     {file = \"zstandard-0.22.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a1d67d0d53d2a138f9e29d8acdabe11310c185e36f0a848efa104d4e40b808e4\"},",
          "3326:     {file = \"zstandard-0.22.0-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:39b2853efc9403927f9065cc48c9980649462acbdf81cd4f0cb773af2fd734bc\"},",
          "3327:     {file = \"zstandard-0.22.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8a1b2effa96a5f019e72874969394edd393e2fbd6414a8208fea363a22803b45\"},",
          "3328:     {file = \"zstandard-0.22.0-cp312-cp312-win32.whl\", hash = \"sha256:88c5b4b47a8a138338a07fc94e2ba3b1535f69247670abfe422de4e0b344aae2\"},",
          "3329:     {file = \"zstandard-0.22.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:de20a212ef3d00d609d0b22eb7cc798d5a69035e81839f549b538eff4105d01c\"},",
          "3330:     {file = \"zstandard-0.22.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:d75f693bb4e92c335e0645e8845e553cd09dc91616412d1d4650da835b5449df\"},",
          "3331:     {file = \"zstandard-0.22.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:36a47636c3de227cd765e25a21dc5dace00539b82ddd99ee36abae38178eff9e\"},",
          "3332:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:68953dc84b244b053c0d5f137a21ae8287ecf51b20872eccf8eaac0302d3e3b0\"},",
          "3333:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2612e9bb4977381184bb2463150336d0f7e014d6bb5d4a370f9a372d21916f69\"},",
          "3334:     {file = \"zstandard-0.22.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:23d2b3c2b8e7e5a6cb7922f7c27d73a9a615f0a5ab5d0e03dd533c477de23004\"},",
          "3335:     {file = \"zstandard-0.22.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:1d43501f5f31e22baf822720d82b5547f8a08f5386a883b32584a185675c8fbf\"},",
          "3336:     {file = \"zstandard-0.22.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:a493d470183ee620a3df1e6e55b3e4de8143c0ba1b16f3ded83208ea8ddfd91d\"},",
          "3337:     {file = \"zstandard-0.22.0-cp38-cp38-win32.whl\", hash = \"sha256:7034d381789f45576ec3f1fa0e15d741828146439228dc3f7c59856c5bcd3292\"},",
          "3338:     {file = \"zstandard-0.22.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:d8fff0f0c1d8bc5d866762ae95bd99d53282337af1be9dc0d88506b340e74b73\"},",
          "3339:     {file = \"zstandard-0.22.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:2fdd53b806786bd6112d97c1f1e7841e5e4daa06810ab4b284026a1a0e484c0b\"},",
          "3340:     {file = \"zstandard-0.22.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:73a1d6bd01961e9fd447162e137ed949c01bdb830dfca487c4a14e9742dccc93\"},",
          "3341:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9501f36fac6b875c124243a379267d879262480bf85b1dbda61f5ad4d01b75a3\"},",
          "3342:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48f260e4c7294ef275744210a4010f116048e0c95857befb7462e033f09442fe\"},",
          "3343:     {file = \"zstandard-0.22.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:959665072bd60f45c5b6b5d711f15bdefc9849dd5da9fb6c873e35f5d34d8cfb\"},",
          "3344:     {file = \"zstandard-0.22.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:d22fdef58976457c65e2796e6730a3ea4a254f3ba83777ecfc8592ff8d77d303\"},",
          "3345:     {file = \"zstandard-0.22.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:a7ccf5825fd71d4542c8ab28d4d482aace885f5ebe4b40faaa290eed8e095a4c\"},",
          "3346:     {file = \"zstandard-0.22.0-cp39-cp39-win32.whl\", hash = \"sha256:f058a77ef0ece4e210bb0450e68408d4223f728b109764676e1a13537d056bb0\"},",
          "3347:     {file = \"zstandard-0.22.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:e9e9d4e2e336c529d4c435baad846a181e39a982f823f7e4495ec0b0ec8538d2\"},",
          "3348:     {file = \"zstandard-0.22.0.tar.gz\", hash = \"sha256:8226a33c542bcb54cd6bd0a366067b610b41713b64c9abec1bc4533d69f51e70\"},",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2954: [metadata]",
          "2955: lock-version = \"2.0\"",
          "2956: python-versions = \"^3.10\"",
          "",
          "[Removed Lines]",
          "2957: content-hash = \"d3a4b0b9830661273a8f67707718128a63952ab59d9e8f65bd897a80805c7609\"",
          "",
          "[Added Lines]",
          "3360: content-hash = \"53f048cf703d27175ed85a7ba85cc8edf02da0591c35fb9fd83b183eacfc2aee\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}