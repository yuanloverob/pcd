{
  "cve_id": "CVE-2022-23628",
  "cve_desc": "OPA is an open source, general-purpose policy engine. Under certain conditions, pretty-printing an abstract syntax tree (AST) that contains synthetic nodes could change the logic of some statements by reordering array literals. Example of policies impacted are those that parse and compare web paths. **All of these** three conditions have to be met to create an adverse effect: 1. An AST of Rego had to be **created programmatically** such that it ends up containing terms without a location (such as wildcard variables). 2. The AST had to be **pretty-printed** using the `github.com/open-policy-agent/opa/format` package. 3. The result of the pretty-printing had to be **parsed and evaluated again** via an OPA instance using the bundles, or the Golang packages. If any of these three conditions are not met, you are not affected. Notably, all three would be true if using **optimized bundles**, i.e. bundles created with `opa build -O=1` or higher. In that case, the optimizer would fulfil condition (1.), the result of that would be pretty-printed when writing the bundle to disk, fulfilling (2.). When the bundle was then used, we'd satisfy (3.). As a workaround users may disable optimization when creating bundles.",
  "repo": "open-policy-agent/opa",
  "patch_hash": "bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
  "patch_info": {
    "commit_hash": "bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
    "repo": "open-policy-agent/opa",
    "commit_url": "https://github.com/open-policy-agent/opa/commit/bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
    "files": [
      "format/format.go",
      "format/testfiles/test.rego.formatted",
      "format/testfiles/test_issue_3849.rego",
      "format/testfiles/test_issue_3849.rego.formatted"
    ],
    "message": "format: make groupIterable sort by row\n\nBefore, it depended on the elements being passed in ordered by their rows.\nBefore https://github.com/open-policy-agent/opa/pull/3823, the iteration\norder was the same as the row order; but with sorting the keys slice (which\ndetermines iteration order) on creation, that was changed.\n\nNow, we'll sort the elements within `groupIterable`.\n\nFixes #3849.\n\nSigned-off-by: Stephan Renatus <stephan.renatus@gmail.com>",
    "before_after_code_files": [
      "format/format.go||format/format.go",
      "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted",
      "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego",
      "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted"
    ]
  },
  "patch_diff": {
    "format/format.go||format/format.go": [
      "File: format/format.go -> format/format.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "810:  }",
      "811: }",
      "814:  var cur []interface{}",
      "815:  for i, t := range elements {",
      "817:   lineDiff := loc.Row - last.Row",
      "818:   if lineDiff > 0 && i > 0 {",
      "819:    lines = append(lines, cur)",
      "",
      "[Removed Lines]",
      "813: func groupIterable(elements []interface{}, last *ast.Location) (lines [][]interface{}) {",
      "816:   loc := getLoc(t)",
      "",
      "[Added Lines]",
      "815: func groupIterable(elements []interface{}, last *ast.Location) [][]interface{} {",
      "816:  sort.Slice(elements, func(i, j int) bool {",
      "817:   return locLess(elements[i], elements[j])",
      "818:  })",
      "819:  var lines [][]interface{}",
      "822:   elem := t",
      "823:   loc := getLoc(elem)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "821:   }",
      "823:   last = loc",
      "825:  }",
      "826:  return append(lines, cur)",
      "827: }",
      "",
      "[Removed Lines]",
      "824:   cur = append(cur, t)",
      "",
      "[Added Lines]",
      "831:   cur = append(cur, elem)",
      "",
      "---------------"
    ],
    "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted": [
      "File: format/testfiles/test.rego.formatted -> format/testfiles/test.rego.formatted",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:  g(x, \"foo\") = z",
      "20: }",
      "24: partial_obj[\"x\"] = 1",
      "",
      "[Removed Lines]",
      "22: globals = {\"fizz\": \"buzz\", \"foo\": \"bar\"}",
      "",
      "[Added Lines]",
      "22: globals = {",
      "23:  \"foo\": \"bar\",",
      "24:  \"fizz\": \"buzz\",",
      "25: }",
      "",
      "---------------"
    ],
    "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego": [
      "File: format/testfiles/test_issue_3849.rego -> format/testfiles/test_issue_3849.rego",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package test_issue_3849",
      "3: test_require_context {",
      "4:  require_context(\"monkey\", \"eat\", \"banana\") with input as {",
      "5:   \"principal\": {\"id\": 101, \"type\": \"monkey\"},",
      "6:   \"action\": \"eat\",",
      "7:   \"entity\": {\"id\": 102, \"type\": \"banana\"},",
      "8:  }",
      "9: }",
      "11: test_contrived {",
      "12:  allow with input as {",
      "13:   \"a\": 101,",
      "14:   \"b\": 101,",
      "15:   \"z\": 101,",
      "16:   \"y\": 101,",
      "17:   \"x\": 101,",
      "18:   \"w\": 101,",
      "19:   \"v\": 101,",
      "20:   \"u\": 101,",
      "21:   \"t\": 101,",
      "22:   \"s\": 101,",
      "23:   \"r\": 101,",
      "24:   \"q\": 101,",
      "25:   \"p\": 101,",
      "26:   \"o\": 101,",
      "27:   \"n\": 101,",
      "28:   \"j\": 101,",
      "29:   \"k\": 101,",
      "30:   \"l\": 101,",
      "31:   \"m\": 101,",
      "32:  }",
      "33: }",
      "",
      "---------------"
    ],
    "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted": [
      "File: format/testfiles/test_issue_3849.rego.formatted -> format/testfiles/test_issue_3849.rego.formatted",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package test_issue_3849",
      "3: test_require_context {",
      "4:  require_context(\"monkey\", \"eat\", \"banana\") with input as {",
      "5:   \"principal\": {\"id\": 101, \"type\": \"monkey\"},",
      "6:   \"action\": \"eat\",",
      "7:   \"entity\": {\"id\": 102, \"type\": \"banana\"},",
      "8:  }",
      "9: }",
      "11: test_contrived {",
      "12:  allow with input as {",
      "13:   \"a\": 101,",
      "14:   \"b\": 101,",
      "15:   \"z\": 101,",
      "16:   \"y\": 101,",
      "17:   \"x\": 101,",
      "18:   \"w\": 101,",
      "19:   \"v\": 101,",
      "20:   \"u\": 101,",
      "21:   \"t\": 101,",
      "22:   \"s\": 101,",
      "23:   \"r\": 101,",
      "24:   \"q\": 101,",
      "25:   \"p\": 101,",
      "26:   \"o\": 101,",
      "27:   \"n\": 101,",
      "28:   \"j\": 101,",
      "29:   \"k\": 101,",
      "30:   \"l\": 101,",
      "31:   \"m\": 101,",
      "32:  }",
      "33: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5e7139a1140bcc6a3b0f38175d8dc2520797558",
      "candidate_info": {
        "commit_hash": "b5e7139a1140bcc6a3b0f38175d8dc2520797558",
        "repo": "open-policy-agent/opa",
        "commit_url": "https://github.com/open-policy-agent/opa/commit/b5e7139a1140bcc6a3b0f38175d8dc2520797558",
        "files": [
          "CHANGELOG.md",
          "ast/term_bench_test.go",
          "capabilities/v0.33.1.json",
          "format/format.go",
          "format/testfiles/test.rego.formatted",
          "format/testfiles/test_issue_3849.rego",
          "format/testfiles/test_issue_3849.rego.formatted"
        ],
        "message": "format: make groupIterable sort by row (#3851)\n\n* format: make groupIterable sort by row\n\nBefore, it depended on the elements being passed in ordered by their rows.\nBefore https://github.com/open-policy-agent/opa/pull/3823, the iteration\norder was the same as the row order; but with sorting the keys slice (which\ndetermines iteration order) on creation, that was changed.\n\nNow, we'll sort the elements within `groupIterable`.\n\nFixes #3849.\n\nAlso includes:\n\n* ast/term_bench_test: fix benchmark\n\nSince map iteration is randomized in golang, this benchmark didn't\nactually measure what was intended, but rather the presence or ab-\nsence of duplicate keys.\n\nNow, we'll create a set of keys to insert before, and either shuffle\nit or use it in its increasing order: to call `(Object).Insert()` in\na loop.\n\n* CHANGELOG/capabilities: update for v0.33.1 bugfix release\n\nSigned-off-by: Stephan Renatus <stephan.renatus@gmail.com>",
        "before_after_code_files": [
          "ast/term_bench_test.go||ast/term_bench_test.go",
          "format/format.go||format/format.go",
          "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted",
          "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego",
          "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "format/format.go||format/format.go",
            "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted",
            "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego",
            "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted"
          ],
          "candidate": [
            "format/format.go||format/format.go",
            "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted",
            "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego",
            "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted"
          ]
        }
      },
      "candidate_diff": {
        "ast/term_bench_test.go||ast/term_bench_test.go": [
          "File: ast/term_bench_test.go -> ast/term_bench_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"math/rand\"",
          "10:  \"strings\"",
          "11:  \"testing\"",
          "12: )",
          "14: func BenchmarkObjectLookup(b *testing.B) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"time\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: func BenchmarkObjectConstruction(b *testing.B) {",
          "157:  sizes := []int{5, 50, 500, 5000, 50000}",
          "160:   for _, n := range sizes {",
          "161:    b.Run(fmt.Sprint(n), func(b *testing.B) {",
          "163:     for i := 0; i < n; i++ {",
          "166:     }",
          "168:    })",
          "169:   }",
          "170:  })",
          "171:  b.Run(\"increasing keys\", func(b *testing.B) {",
          "172:   for _, n := range sizes {",
          "173:    b.Run(fmt.Sprint(n), func(b *testing.B) {",
          "177:     }",
          "179:    })",
          "180:   }",
          "181:  })",
          "182: }",
          "",
          "[Removed Lines]",
          "159:  b.Run(\"random keys\", func(b *testing.B) {",
          "162:     obj := map[string]int{}",
          "164:      j := rand.Intn(n)",
          "165:      obj[fmt.Sprint(j)] = i",
          "167:     benchObjectConstruction(b, obj)",
          "174:     obj := map[string]int{}",
          "175:     for i := 0; i < n; i++ {",
          "176:      obj[fmt.Sprint(i)] = i",
          "178:     benchObjectConstruction(b, obj)",
          "184: func benchObjectConstruction(b *testing.B, obj map[string]int) {",
          "185:  b.ResetTimer()",
          "186:  for i := 0; i < b.N; i++ {",
          "187:   val := MustInterfaceToValue(obj)",
          "188:   _, ok := val.(Object)",
          "189:   if !ok {",
          "190:    b.Fail()",
          "191:   }",
          "192:  }",
          "193: }",
          "",
          "[Added Lines]",
          "159:  seed := time.Now().UnixNano()",
          "161:  b.Run(\"shuffled keys\", func(b *testing.B) {",
          "164:     es := []struct{ k, v int }{}",
          "166:      es = append(es, struct{ k, v int }{i, i})",
          "167:     }",
          "168:     rand.Seed(seed)",
          "169:     rand.Shuffle(len(es), func(i, j int) { es[i], es[j] = es[j], es[i] })",
          "170:     b.ResetTimer()",
          "171:     for i := 0; i < b.N; i++ {",
          "172:      obj := NewObject()",
          "173:      for _, e := range es {",
          "174:       obj.Insert(IntNumberTerm(e.k), IntNumberTerm(e.v))",
          "175:      }",
          "183:     es := []struct{ k, v int }{}",
          "184:     for v := 0; v < n; v++ {",
          "185:      es = append(es, struct{ k, v int }{v, v})",
          "186:     }",
          "187:     b.ResetTimer()",
          "188:     for i := 0; i < b.N; i++ {",
          "189:      obj := NewObject()",
          "190:      for _, e := range es {",
          "191:       obj.Insert(IntNumberTerm(e.k), IntNumberTerm(e.v))",
          "192:      }",
          "",
          "---------------"
        ],
        "format/format.go||format/format.go": [
          "File: format/format.go -> format/format.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "810:  }",
          "811: }",
          "814:  var cur []interface{}",
          "815:  for i, t := range elements {",
          "817:   lineDiff := loc.Row - last.Row",
          "818:   if lineDiff > 0 && i > 0 {",
          "819:    lines = append(lines, cur)",
          "",
          "[Removed Lines]",
          "813: func groupIterable(elements []interface{}, last *ast.Location) (lines [][]interface{}) {",
          "816:   loc := getLoc(t)",
          "",
          "[Added Lines]",
          "815: func groupIterable(elements []interface{}, last *ast.Location) [][]interface{} {",
          "816:  sort.Slice(elements, func(i, j int) bool {",
          "817:   return locLess(elements[i], elements[j])",
          "818:  })",
          "819:  var lines [][]interface{}",
          "822:   elem := t",
          "823:   loc := getLoc(elem)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "821:   }",
          "823:   last = loc",
          "825:  }",
          "826:  return append(lines, cur)",
          "827: }",
          "",
          "[Removed Lines]",
          "824:   cur = append(cur, t)",
          "",
          "[Added Lines]",
          "831:   cur = append(cur, elem)",
          "",
          "---------------"
        ],
        "format/testfiles/test.rego.formatted||format/testfiles/test.rego.formatted": [
          "File: format/testfiles/test.rego.formatted -> format/testfiles/test.rego.formatted",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  g(x, \"foo\") = z",
          "20: }",
          "24: partial_obj[\"x\"] = 1",
          "",
          "[Removed Lines]",
          "22: globals = {\"fizz\": \"buzz\", \"foo\": \"bar\"}",
          "",
          "[Added Lines]",
          "22: globals = {",
          "23:  \"foo\": \"bar\",",
          "24:  \"fizz\": \"buzz\",",
          "25: }",
          "",
          "---------------"
        ],
        "format/testfiles/test_issue_3849.rego||format/testfiles/test_issue_3849.rego": [
          "File: format/testfiles/test_issue_3849.rego -> format/testfiles/test_issue_3849.rego",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package test_issue_3849",
          "3: test_require_context {",
          "4:  require_context(\"monkey\", \"eat\", \"banana\") with input as {",
          "5:   \"principal\": {\"id\": 101, \"type\": \"monkey\"},",
          "6:   \"action\": \"eat\",",
          "7:   \"entity\": {\"id\": 102, \"type\": \"banana\"},",
          "8:  }",
          "9: }",
          "11: test_contrived {",
          "12:  allow with input as {",
          "13:   \"a\": 101,",
          "14:   \"b\": 101,",
          "15:   \"z\": 101,",
          "16:   \"y\": 101,",
          "17:   \"x\": 101,",
          "18:   \"w\": 101,",
          "19:   \"v\": 101,",
          "20:   \"u\": 101,",
          "21:   \"t\": 101,",
          "22:   \"s\": 101,",
          "23:   \"r\": 101,",
          "24:   \"q\": 101,",
          "25:   \"p\": 101,",
          "26:   \"o\": 101,",
          "27:   \"n\": 101,",
          "28:   \"j\": 101,",
          "29:   \"k\": 101,",
          "30:   \"l\": 101,",
          "31:   \"m\": 101,",
          "32:  }",
          "33: }",
          "",
          "---------------"
        ],
        "format/testfiles/test_issue_3849.rego.formatted||format/testfiles/test_issue_3849.rego.formatted": [
          "File: format/testfiles/test_issue_3849.rego.formatted -> format/testfiles/test_issue_3849.rego.formatted",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package test_issue_3849",
          "3: test_require_context {",
          "4:  require_context(\"monkey\", \"eat\", \"banana\") with input as {",
          "5:   \"principal\": {\"id\": 101, \"type\": \"monkey\"},",
          "6:   \"action\": \"eat\",",
          "7:   \"entity\": {\"id\": 102, \"type\": \"banana\"},",
          "8:  }",
          "9: }",
          "11: test_contrived {",
          "12:  allow with input as {",
          "13:   \"a\": 101,",
          "14:   \"b\": 101,",
          "15:   \"z\": 101,",
          "16:   \"y\": 101,",
          "17:   \"x\": 101,",
          "18:   \"w\": 101,",
          "19:   \"v\": 101,",
          "20:   \"u\": 101,",
          "21:   \"t\": 101,",
          "22:   \"s\": 101,",
          "23:   \"r\": 101,",
          "24:   \"q\": 101,",
          "25:   \"p\": 101,",
          "26:   \"o\": 101,",
          "27:   \"n\": 101,",
          "28:   \"j\": 101,",
          "29:   \"k\": 101,",
          "30:   \"l\": 101,",
          "31:   \"m\": 101,",
          "32:  }",
          "33: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}