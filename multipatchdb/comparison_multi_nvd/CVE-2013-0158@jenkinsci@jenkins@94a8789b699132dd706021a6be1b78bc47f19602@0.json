{
  "cve_id": "CVE-2013-0158",
  "cve_desc": "Unspecified vulnerability in Jenkins before 1.498, Jenkins LTS before 1.480.2, and Jenkins Enterprise 1.447.x before 1.447.6.1 and 1.466.x before 1.466.12.1, when a slave is attached and anonymous read access is enabled, allows remote attackers to obtain the master cryptographic key via unknown vectors.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "94a8789b699132dd706021a6be1b78bc47f19602",
  "patch_info": {
    "commit_hash": "94a8789b699132dd706021a6be1b78bc47f19602",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/94a8789b699132dd706021a6be1b78bc47f19602",
    "files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ],
    "message": "[SECURITY-49] actively invalidate bad API tokens.\n\nIf the user still has the API token that's generated from secret.key,\ndon't accept that.\n\nHopefully this is the last fix",
    "before_after_code_files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import hudson.model.UserPropertyDescriptor;",
      "32: import hudson.util.HttpResponses;",
      "33: import hudson.util.Secret;",
      "34: import net.sf.json.JSONObject;",
      "35: import org.kohsuke.stapler.AncestorInPath;",
      "36: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import jenkins.model.Jenkins;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:         apiToken = Secret.fromString(seed);",
      "66:     }",
      "68:     public String getApiToken() {",
      "70:     }",
      "72:     public boolean matchesPassword(String password) {",
      "",
      "[Removed Lines]",
      "64:     private ApiTokenProperty(String seed) {",
      "69:         return Util.getDigestOf(apiToken.getPlainText());",
      "",
      "[Added Lines]",
      "70:         String p = apiToken.getPlainText();",
      "71:         if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {",
      "74:             apiToken = Secret.fromString(p=API_KEY_SEED.mac(user.getId()));",
      "75:         }",
      "76:         return Util.getDigestOf(p);",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
      "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import com.gargoylesoftware.htmlunit.HttpWebConnection;",
      "4: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "5: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "6: import hudson.model.User;",
      "7: import org.apache.commons.httpclient.Credentials;",
      "8: import org.apache.commons.httpclient.HttpClient;",
      "9: import org.apache.commons.httpclient.UsernamePasswordCredentials;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import hudson.Util;",
      "8: import jenkins.model.Jenkins;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:             }",
      "61:         }));",
      "62:     }",
      "63: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     public void testSecurity49Upgrade() throws Exception {",
      "67:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "68:         User u = User.get(\"foo\");",
      "69:         String historicalInitialValue = Util.getDigestOf(Jenkins.getInstance().getSecretKey() + \":\" + u.getId());",
      "72:         ApiTokenProperty t = new ApiTokenProperty(historicalInitialValue);",
      "73:         u.addProperty(t);",
      "74:         String apiToken1 = t.getApiToken();",
      "75:         assertFalse(apiToken1.equals(Util.getDigestOf(historicalInitialValue)));",
      "78:         ApiTokenProperty t2 = new ApiTokenProperty(historicalInitialValue);",
      "79:         u.addProperty(t2);",
      "80:         assertEquals(apiToken1,t2.getApiToken());",
      "83:         t = new ApiTokenProperty(historicalInitialValue+\"somethingElse\");",
      "84:         u.addProperty(t);",
      "85:         assertTrue(t.getApiToken().equals(Util.getDigestOf(historicalInitialValue+\"somethingElse\")));",
      "87:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a411b0c3b32eb314d5a26b64de1b3d5db2760443",
      "candidate_info": {
        "commit_hash": "a411b0c3b32eb314d5a26b64de1b3d5db2760443",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/a411b0c3b32eb314d5a26b64de1b3d5db2760443",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ],
        "message": "[SECURITY-49] actively invalidate bad API tokens.\n\nIf the user still has the API token that's generated from secret.key,\ndon't accept that.\n\nHopefully this is the last fix\n(cherry picked from commit 94a8789b699132dd706021a6be1b78bc47f19602)",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import hudson.model.UserPropertyDescriptor;",
          "32: import hudson.util.HttpResponses;",
          "33: import hudson.util.Secret;",
          "34: import net.sf.json.JSONObject;",
          "35: import org.kohsuke.stapler.AncestorInPath;",
          "36: import org.kohsuke.stapler.DataBoundConstructor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         apiToken = Secret.fromString(seed);",
          "66:     }",
          "68:     public String getApiToken() {",
          "70:     }",
          "72:     public boolean matchesPassword(String password) {",
          "",
          "[Removed Lines]",
          "64:     private ApiTokenProperty(String seed) {",
          "69:         return Util.getDigestOf(apiToken.getPlainText());",
          "",
          "[Added Lines]",
          "70:         String p = apiToken.getPlainText();",
          "71:         if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {",
          "74:             apiToken = Secret.fromString(p=API_KEY_SEED.mac(user.getId()));",
          "75:         }",
          "76:         return Util.getDigestOf(p);",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.gargoylesoftware.htmlunit.HttpWebConnection;",
          "4: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "5: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "6: import hudson.model.User;",
          "7: import org.apache.commons.httpclient.Credentials;",
          "8: import org.apache.commons.httpclient.HttpClient;",
          "9: import org.apache.commons.httpclient.UsernamePasswordCredentials;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import hudson.Util;",
          "8: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:             }",
          "61:         }));",
          "62:     }",
          "63: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     public void testSecurity49Upgrade() throws Exception {",
          "67:         jenkins.setSecurityRealm(createDummySecurityRealm());",
          "68:         User u = User.get(\"foo\");",
          "69:         String historicalInitialValue = Util.getDigestOf(Jenkins.getInstance().getSecretKey() + \":\" + u.getId());",
          "72:         ApiTokenProperty t = new ApiTokenProperty(historicalInitialValue);",
          "73:         u.addProperty(t);",
          "74:         String apiToken1 = t.getApiToken();",
          "75:         assertFalse(apiToken1.equals(Util.getDigestOf(historicalInitialValue)));",
          "78:         ApiTokenProperty t2 = new ApiTokenProperty(historicalInitialValue);",
          "79:         u.addProperty(t2);",
          "80:         assertEquals(apiToken1,t2.getApiToken());",
          "83:         t = new ApiTokenProperty(historicalInitialValue+\"somethingElse\");",
          "84:         u.addProperty(t);",
          "85:         assertTrue(t.getApiToken().equals(Util.getDigestOf(historicalInitialValue+\"somethingElse\")));",
          "87:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}