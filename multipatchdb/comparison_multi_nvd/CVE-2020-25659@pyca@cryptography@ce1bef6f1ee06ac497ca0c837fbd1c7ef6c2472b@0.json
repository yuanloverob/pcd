{
  "cve_id": "CVE-2020-25659",
  "cve_desc": "python-cryptography 3.2 is vulnerable to Bleichenbacher timing attacks in the RSA decryption API, via timed processing of valid PKCS#1 v1.5 ciphertext.",
  "repo": "pyca/cryptography",
  "patch_hash": "ce1bef6f1ee06ac497ca0c837fbd1c7ef6c2472b",
  "patch_info": {
    "commit_hash": "ce1bef6f1ee06ac497ca0c837fbd1c7ef6c2472b",
    "repo": "pyca/cryptography",
    "commit_url": "https://github.com/pyca/cryptography/pull/5507/commits/ce1bef6f1ee06ac497ca0c837fbd1c7ef6c2472b",
    "files": [
      "CHANGELOG.rst",
      "docs/spelling_wordlist.txt",
      "src/cryptography/hazmat/backends/openssl/rsa.py"
    ],
    "message": "Attempt to mitigate Bleichenbacher attacks on RSA decryption",
    "before_after_code_files": [
      "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py"
    ]
  },
  "patch_diff": {
    "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py": [
      "File: src/cryptography/hazmat/backends/openssl/rsa.py -> src/cryptography/hazmat/backends/openssl/rsa.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     outlen = backend._ffi.new(\"size_t *\", buf_size)",
      "121:     buf = backend._ffi.new(\"unsigned char[]\", buf_size)",
      "122:     res = crypt(pkey_ctx, buf, outlen, data, len(data))",
      "123:     if res <= 0:",
      "141: def _rsa_sig_determine_padding(backend, key, padding, algorithm):",
      "",
      "[Removed Lines]",
      "124:         _handle_rsa_enc_dec_error(backend, key)",
      "126:     return backend._ffi.buffer(buf)[: outlen[0]]",
      "129: def _handle_rsa_enc_dec_error(backend, key):",
      "130:     errors = backend._consume_errors_with_text()",
      "131:     if isinstance(key, _RSAPublicKey):",
      "132:         raise ValueError(",
      "133:             \"Data too long for key size. Encrypt less data or use a \"",
      "134:             \"larger key size.\",",
      "135:             errors,",
      "136:         )",
      "137:     else:",
      "138:         raise ValueError(\"Decryption failed.\", errors)",
      "",
      "[Added Lines]",
      "122:     # Everything from this line onwards is written with the goal of being as",
      "123:     # constant-time as is practical given the constraints of Python and our",
      "124:     # API. See Bleichenbacher's '98 attack on RSA, and its many many variants.",
      "125:     # As such, you should not attempt to change this (particularly to \"clean it",
      "126:     # up\") without understanding why it was written this way (see",
      "127:     # Chesterton's Fence), and without measuring to verify you have not",
      "128:     # introduced observable time differences.",
      "130:     resbuf = backend._ffi.buffer(buf)[: outlen[0]]",
      "131:     backend._lib.ERR_clear_error()",
      "133:         raise ValueError(\"Encryption/decryption failed.\")",
      "134:     return resbuf",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58494b41d6ecb0f56b7c5f05d5f5e3ca0320d494",
      "candidate_info": {
        "commit_hash": "58494b41d6ecb0f56b7c5f05d5f5e3ca0320d494",
        "repo": "pyca/cryptography",
        "commit_url": "https://github.com/pyca/cryptography/commit/58494b41d6ecb0f56b7c5f05d5f5e3ca0320d494",
        "files": [
          "CHANGELOG.rst",
          "docs/spelling_wordlist.txt",
          "src/cryptography/hazmat/backends/openssl/rsa.py"
        ],
        "message": "Attempt to mitigate Bleichenbacher attacks on RSA decryption (#5507)",
        "before_after_code_files": [
          "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pyca/cryptography/pull/5507"
        ],
        "olp_code_files": {
          "patch": [
            "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py"
          ],
          "candidate": [
            "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py"
          ]
        }
      },
      "candidate_diff": {
        "src/cryptography/hazmat/backends/openssl/rsa.py||src/cryptography/hazmat/backends/openssl/rsa.py": [
          "File: src/cryptography/hazmat/backends/openssl/rsa.py -> src/cryptography/hazmat/backends/openssl/rsa.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     outlen = backend._ffi.new(\"size_t *\", buf_size)",
          "121:     buf = backend._ffi.new(\"unsigned char[]\", buf_size)",
          "122:     res = crypt(pkey_ctx, buf, outlen, data, len(data))",
          "123:     if res <= 0:",
          "141: def _rsa_sig_determine_padding(backend, key, padding, algorithm):",
          "",
          "[Removed Lines]",
          "124:         _handle_rsa_enc_dec_error(backend, key)",
          "126:     return backend._ffi.buffer(buf)[: outlen[0]]",
          "129: def _handle_rsa_enc_dec_error(backend, key):",
          "130:     errors = backend._consume_errors_with_text()",
          "131:     if isinstance(key, _RSAPublicKey):",
          "132:         raise ValueError(",
          "133:             \"Data too long for key size. Encrypt less data or use a \"",
          "134:             \"larger key size.\",",
          "135:             errors,",
          "136:         )",
          "137:     else:",
          "138:         raise ValueError(\"Decryption failed.\", errors)",
          "",
          "[Added Lines]",
          "122:     # Everything from this line onwards is written with the goal of being as",
          "123:     # constant-time as is practical given the constraints of Python and our",
          "124:     # API. See Bleichenbacher's '98 attack on RSA, and its many many variants.",
          "125:     # As such, you should not attempt to change this (particularly to \"clean it",
          "126:     # up\") without understanding why it was written this way (see",
          "127:     # Chesterton's Fence), and without measuring to verify you have not",
          "128:     # introduced observable time differences.",
          "130:     resbuf = backend._ffi.buffer(buf)[: outlen[0]]",
          "131:     backend._lib.ERR_clear_error()",
          "133:         raise ValueError(\"Encryption/decryption failed.\")",
          "134:     return resbuf",
          "",
          "---------------"
        ]
      }
    }
  ]
}