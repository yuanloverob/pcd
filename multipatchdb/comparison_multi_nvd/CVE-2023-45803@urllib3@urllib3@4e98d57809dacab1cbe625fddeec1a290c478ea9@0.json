{
  "cve_id": "CVE-2023-45803",
  "cve_desc": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.",
  "repo": "urllib3/urllib3",
  "patch_hash": "4e98d57809dacab1cbe625fddeec1a290c478ea9",
  "patch_info": {
    "commit_hash": "4e98d57809dacab1cbe625fddeec1a290c478ea9",
    "repo": "urllib3/urllib3",
    "commit_url": "https://github.com/urllib3/urllib3/commit/4e98d57809dacab1cbe625fddeec1a290c478ea9",
    "files": [
      ".readthedocs.yml",
      "CHANGES.rst",
      "dummyserver/handlers.py",
      "src/urllib3/_collections.py",
      "src/urllib3/_version.py",
      "src/urllib3/connectionpool.py",
      "src/urllib3/poolmanager.py",
      "test/with_dummyserver/test_connectionpool.py",
      "test/with_dummyserver/test_poolmanager.py"
    ],
    "message": "Bring 2.0.7 & 1.26.18 to main (#3161)\n\n* Merge pull request from GHSA-g4mx-q9vg-27p4\n\n* Release 2.0.7",
    "before_after_code_files": [
      "dummyserver/handlers.py||dummyserver/handlers.py",
      "src/urllib3/_collections.py||src/urllib3/_collections.py",
      "src/urllib3/_version.py||src/urllib3/_version.py",
      "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py",
      "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py",
      "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py",
      "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py"
    ]
  },
  "patch_diff": {
    "dummyserver/handlers.py||dummyserver/handlers.py": [
      "File: dummyserver/handlers.py -> dummyserver/handlers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "281:     def headers(self, request: httputil.HTTPServerRequest) -> Response:",
      "282:         return Response(json.dumps(dict(request.headers)))",
      "284:     def multi_headers(self, request: httputil.HTTPServerRequest) -> Response:",
      "285:         return Response(json.dumps({\"headers\": list(request.headers.get_all())}))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "284:     def headers_and_params(self, request: httputil.HTTPServerRequest) -> Response:",
      "285:         params = request_params(request)",
      "286:         return Response(",
      "287:             json.dumps({\"headers\": dict(request.headers), \"params\": params})",
      "288:         )",
      "",
      "---------------"
    ],
    "src/urllib3/_collections.py||src/urllib3/_collections.py": [
      "File: src/urllib3/_collections.py -> src/urllib3/_collections.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:     # dependency, and is not available at runtime.",
      "11:     from typing import Protocol",
      "13:     class HasGettableStringKeys(Protocol):",
      "14:         def keys(self) -> typing.Iterator[str]:",
      "15:             ...",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     from typing_extensions import Self",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "391:             # meets our external interface requirement of `Union[List[str], _DT]`.",
      "392:             return vals[1:]",
      "394:     # Backwards compatibility for httplib",
      "395:     getheaders = getlist",
      "396:     getallmatchingheaders = getlist",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "396:     def _prepare_for_method_change(self) -> Self:",
      "397:         \"\"\"",
      "398:         Remove content-specific header fields before changing the request",
      "399:         method to GET or HEAD according to RFC 9110, Section 15.4.",
      "400:         \"\"\"",
      "401:         content_specific_headers = [",
      "402:             \"Content-Encoding\",",
      "403:             \"Content-Language\",",
      "404:             \"Content-Location\",",
      "405:             \"Content-Type\",",
      "406:             \"Content-Length\",",
      "407:             \"Digest\",",
      "408:             \"Last-Modified\",",
      "409:         ]",
      "410:         for header in content_specific_headers:",
      "411:             self.discard(header)",
      "412:         return self",
      "",
      "---------------"
    ],
    "src/urllib3/_version.py||src/urllib3/_version.py": [
      "File: src/urllib3/_version.py -> src/urllib3/_version.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: # This file is protected via CODEOWNERS",
      "2: from __future__ import annotations",
      "",
      "[Removed Lines]",
      "4: __version__ = \"2.0.6\"",
      "",
      "[Added Lines]",
      "4: __version__ = \"2.0.7\"",
      "",
      "---------------"
    ],
    "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py": [
      "File: src/urllib3/connectionpool.py -> src/urllib3/connectionpool.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: from types import TracebackType",
      "13: from ._base_connection import _TYPE_BODY",
      "14: from ._request_methods import RequestMethods",
      "15: from .connection import (",
      "16:     BaseSSLError,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: from ._collections import HTTPHeaderDict",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "892:         redirect_location = redirect and response.get_redirect_location()",
      "893:         if redirect_location:",
      "894:             if response.status == 303:",
      "895:                 method = \"GET\"",
      "897:             try:",
      "898:                 retries = retries.increment(method, url, response=response, _pool=self)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "896:                 # Change the method according to RFC 9110, Section 15.4.4.",
      "898:                 # And lose the body not to transfer anything sensitive.",
      "899:                 body = None",
      "900:                 headers = HTTPHeaderDict(headers)._prepare_for_method_change()",
      "",
      "---------------"
    ],
    "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py": [
      "File: src/urllib3/poolmanager.py -> src/urllib3/poolmanager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from types import TracebackType",
      "8: from urllib.parse import urljoin",
      "11: from ._request_methods import RequestMethods",
      "12: from .connection import ProxyConfig",
      "13: from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, port_by_scheme",
      "",
      "[Removed Lines]",
      "10: from ._collections import RecentlyUsedContainer",
      "",
      "[Added Lines]",
      "10: from ._collections import HTTPHeaderDict, RecentlyUsedContainer",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "448:         # Support relative URLs for redirecting.",
      "449:         redirect_location = urljoin(url, redirect_location)",
      "452:         if response.status == 303:",
      "453:             method = \"GET\"",
      "455:         retries = kw.get(\"retries\")",
      "456:         if not isinstance(retries, Retry):",
      "",
      "[Removed Lines]",
      "451:         # RFC 7231, Section 6.4.4",
      "",
      "[Added Lines]",
      "452:             # Change the method according to RFC 9110, Section 15.4.4.",
      "454:             # And lose the body not to transfer anything sensitive.",
      "455:             kw[\"body\"] = None",
      "456:             kw[\"headers\"] = HTTPHeaderDict(kw[\"headers\"])._prepare_for_method_change()",
      "",
      "---------------"
    ],
    "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py": [
      "File: test/with_dummyserver/test_connectionpool.py -> test/with_dummyserver/test_connectionpool.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "480:             assert r.status == 200",
      "481:             assert r.data == b\"Dummy server!\"",
      "483:     def test_bad_connect(self) -> None:",
      "484:         with HTTPConnectionPool(\"badhost.invalid\", self.port) as pool:",
      "485:             with pytest.raises(MaxRetryError) as e:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "483:     def test_303_redirect_makes_request_lose_body(self) -> None:",
      "484:         with HTTPConnectionPool(self.host, self.port) as pool:",
      "485:             response = pool.request(",
      "486:                 \"POST\",",
      "487:                 \"/redirect\",",
      "488:                 fields={\"target\": \"/headers_and_params\", \"status\": \"303 See Other\"},",
      "489:             )",
      "490:         data = response.json()",
      "491:         assert data[\"params\"] == {}",
      "492:         assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])",
      "",
      "---------------"
    ],
    "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py": [
      "File: test/with_dummyserver/test_poolmanager.py -> test/with_dummyserver/test_poolmanager.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:             assert r._pool.num_connections == 1",
      "245:             assert len(http.pools) == 1",
      "247:     def test_unknown_scheme(self) -> None:",
      "248:         with PoolManager() as http:",
      "249:             unknown_scheme = \"unknown\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "247:     def test_303_redirect_makes_request_lose_body(self) -> None:",
      "248:         with PoolManager() as http:",
      "249:             response = http.request(",
      "250:                 \"POST\",",
      "251:                 f\"{self.base_url}/redirect\",",
      "252:                 fields={",
      "253:                     \"target\": f\"{self.base_url}/headers_and_params\",",
      "254:                     \"status\": \"303 See Other\",",
      "255:                 },",
      "256:             )",
      "257:         data = response.json()",
      "258:         assert data[\"params\"] == {}",
      "259:         assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e50fbc5db74e32cabd5ccc1ab81fc103adfe0b3",
      "candidate_info": {
        "commit_hash": "4e50fbc5db74e32cabd5ccc1ab81fc103adfe0b3",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/4e50fbc5db74e32cabd5ccc1ab81fc103adfe0b3",
        "files": [
          "dummyserver/handlers.py",
          "src/urllib3/_collections.py",
          "src/urllib3/connectionpool.py",
          "src/urllib3/poolmanager.py",
          "test/with_dummyserver/test_connectionpool.py",
          "test/with_dummyserver/test_poolmanager.py"
        ],
        "message": "Merge pull request from GHSA-g4mx-q9vg-27p4",
        "before_after_code_files": [
          "dummyserver/handlers.py||dummyserver/handlers.py",
          "src/urllib3/_collections.py||src/urllib3/_collections.py",
          "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py",
          "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py",
          "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py",
          "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/urllib3/urllib3/pull/3161"
        ],
        "olp_code_files": {
          "patch": [
            "dummyserver/handlers.py||dummyserver/handlers.py",
            "src/urllib3/_collections.py||src/urllib3/_collections.py",
            "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py",
            "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py",
            "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py",
            "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py"
          ],
          "candidate": [
            "dummyserver/handlers.py||dummyserver/handlers.py",
            "src/urllib3/_collections.py||src/urllib3/_collections.py",
            "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py",
            "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py",
            "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py",
            "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py"
          ]
        }
      },
      "candidate_diff": {
        "dummyserver/handlers.py||dummyserver/handlers.py": [
          "File: dummyserver/handlers.py -> dummyserver/handlers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     def headers(self, request: httputil.HTTPServerRequest) -> Response:",
          "282:         return Response(json.dumps(dict(request.headers)))",
          "284:     def multi_headers(self, request: httputil.HTTPServerRequest) -> Response:",
          "285:         return Response(json.dumps({\"headers\": list(request.headers.get_all())}))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:     def headers_and_params(self, request: httputil.HTTPServerRequest) -> Response:",
          "285:         params = request_params(request)",
          "286:         return Response(",
          "287:             json.dumps({\"headers\": dict(request.headers), \"params\": params})",
          "288:         )",
          "",
          "---------------"
        ],
        "src/urllib3/_collections.py||src/urllib3/_collections.py": [
          "File: src/urllib3/_collections.py -> src/urllib3/_collections.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: if typing.TYPE_CHECKING:",
          "9:     # We can only import Protocol if TYPE_CHECKING because it's a development",
          "10:     # dependency, and is not available at runtime.",
          "13:     class HasGettableStringKeys(Protocol):",
          "14:         def keys(self) -> typing.Iterator[str]:",
          "",
          "[Removed Lines]",
          "11:     from typing_extensions import Protocol",
          "",
          "[Added Lines]",
          "11:     from typing_extensions import Protocol, Self",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391:             # meets our external interface requirement of `Union[List[str], _DT]`.",
          "392:             return vals[1:]",
          "394:     # Backwards compatibility for httplib",
          "395:     getheaders = getlist",
          "396:     getallmatchingheaders = getlist",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:     def _prepare_for_method_change(self) -> Self:",
          "395:         \"\"\"",
          "396:         Remove content-specific header fields before changing the request",
          "397:         method to GET or HEAD according to RFC 9110, Section 15.4.",
          "398:         \"\"\"",
          "399:         content_specific_headers = [",
          "400:             \"Content-Encoding\",",
          "401:             \"Content-Language\",",
          "402:             \"Content-Location\",",
          "403:             \"Content-Type\",",
          "404:             \"Content-Length\",",
          "405:             \"Digest\",",
          "406:             \"Last-Modified\",",
          "407:         ]",
          "408:         for header in content_specific_headers:",
          "409:             self.discard(header)",
          "410:         return self",
          "",
          "---------------"
        ],
        "src/urllib3/connectionpool.py||src/urllib3/connectionpool.py": [
          "File: src/urllib3/connectionpool.py -> src/urllib3/connectionpool.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from types import TracebackType",
          "13: from ._base_connection import _TYPE_BODY",
          "14: from ._request_methods import RequestMethods",
          "15: from .connection import (",
          "16:     BaseSSLError,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from ._collections import HTTPHeaderDict",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "893:         redirect_location = redirect and response.get_redirect_location()",
          "894:         if redirect_location:",
          "895:             if response.status == 303:",
          "896:                 method = \"GET\"",
          "898:             try:",
          "899:                 retries = retries.increment(method, url, response=response, _pool=self)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:                 # Change the method according to RFC 9110, Section 15.4.4.",
          "899:                 # And lose the body not to transfer anything sensitive.",
          "900:                 body = None",
          "901:                 headers = HTTPHeaderDict(headers)._prepare_for_method_change()",
          "",
          "---------------"
        ],
        "src/urllib3/poolmanager.py||src/urllib3/poolmanager.py": [
          "File: src/urllib3/poolmanager.py -> src/urllib3/poolmanager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from types import TracebackType",
          "8: from urllib.parse import urljoin",
          "11: from ._request_methods import RequestMethods",
          "12: from .connection import ProxyConfig",
          "13: from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, port_by_scheme",
          "",
          "[Removed Lines]",
          "10: from ._collections import RecentlyUsedContainer",
          "",
          "[Added Lines]",
          "10: from ._collections import HTTPHeaderDict, RecentlyUsedContainer",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:         # Support relative URLs for redirecting.",
          "450:         redirect_location = urljoin(url, redirect_location)",
          "453:         if response.status == 303:",
          "454:             method = \"GET\"",
          "456:         retries = kw.get(\"retries\")",
          "457:         if not isinstance(retries, Retry):",
          "",
          "[Removed Lines]",
          "452:         # RFC 7231, Section 6.4.4",
          "",
          "[Added Lines]",
          "453:             # Change the method according to RFC 9110, Section 15.4.4.",
          "455:             # And lose the body not to transfer anything sensitive.",
          "456:             kw[\"body\"] = None",
          "457:             kw[\"headers\"] = HTTPHeaderDict(kw[\"headers\"])._prepare_for_method_change()",
          "",
          "---------------"
        ],
        "test/with_dummyserver/test_connectionpool.py||test/with_dummyserver/test_connectionpool.py": [
          "File: test/with_dummyserver/test_connectionpool.py -> test/with_dummyserver/test_connectionpool.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:             assert r.status == 200",
          "481:             assert r.data == b\"Dummy server!\"",
          "483:     def test_bad_connect(self) -> None:",
          "484:         with HTTPConnectionPool(\"badhost.invalid\", self.port) as pool:",
          "485:             with pytest.raises(MaxRetryError) as e:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:     def test_303_redirect_makes_request_lose_body(self) -> None:",
          "484:         with HTTPConnectionPool(self.host, self.port) as pool:",
          "485:             response = pool.request(",
          "486:                 \"POST\",",
          "487:                 \"/redirect\",",
          "488:                 fields={\"target\": \"/headers_and_params\", \"status\": \"303 See Other\"},",
          "489:             )",
          "490:         data = response.json()",
          "491:         assert data[\"params\"] == {}",
          "492:         assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])",
          "",
          "---------------"
        ],
        "test/with_dummyserver/test_poolmanager.py||test/with_dummyserver/test_poolmanager.py": [
          "File: test/with_dummyserver/test_poolmanager.py -> test/with_dummyserver/test_poolmanager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:             assert r._pool.num_connections == 1",
          "245:             assert len(http.pools) == 1",
          "247:     def test_unknown_scheme(self) -> None:",
          "248:         with PoolManager() as http:",
          "249:             unknown_scheme = \"unknown\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     def test_303_redirect_makes_request_lose_body(self) -> None:",
          "248:         with PoolManager() as http:",
          "249:             response = http.request(",
          "250:                 \"POST\",",
          "251:                 f\"{self.base_url}/redirect\",",
          "252:                 fields={",
          "253:                     \"target\": f\"{self.base_url}/headers_and_params\",",
          "254:                     \"status\": \"303 See Other\",",
          "255:                 },",
          "256:             )",
          "257:         data = response.json()",
          "258:         assert data[\"params\"] == {}",
          "259:         assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27e2a5c5a7ab6a517252cc8dcef3ffa6ffb8f61a",
      "candidate_info": {
        "commit_hash": "27e2a5c5a7ab6a517252cc8dcef3ffa6ffb8f61a",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/27e2a5c5a7ab6a517252cc8dcef3ffa6ffb8f61a",
        "files": [
          "CHANGES.rst",
          "changelog/3122.bugfix.rst",
          "changelog/3342.doc.rst",
          "changelog/3363.bugfix.rst",
          "src/urllib3/_version.py"
        ],
        "message": "Release 2.2.2 (#3406)",
        "before_after_code_files": [
          "src/urllib3/_version.py||src/urllib3/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ],
          "candidate": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "src/urllib3/_version.py||src/urllib3/_version.py": [
          "File: src/urllib3/_version.py -> src/urllib3/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file is protected via CODEOWNERS",
          "2: from __future__ import annotations",
          "",
          "[Removed Lines]",
          "4: __version__ = \"2.2.1\"",
          "",
          "[Added Lines]",
          "4: __version__ = \"2.2.2\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69be2992f8a25a1f27e49f339e4d5b98dec07462",
      "candidate_info": {
        "commit_hash": "69be2992f8a25a1f27e49f339e4d5b98dec07462",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/69be2992f8a25a1f27e49f339e4d5b98dec07462",
        "files": [
          "CHANGES.rst",
          "changelog/2680.removal.rst",
          "changelog/2681.removal.rst",
          "changelog/3065.bugfix.rst",
          "changelog/3143.removal.rst",
          "changelog/3174.bugfix.rst",
          "pyproject.toml",
          "src/urllib3/__init__.py",
          "src/urllib3/_version.py"
        ],
        "message": "Release 2.1.0\n\nCo-authored-by: Illia Volochii <illia.volochii@gmail.com>",
        "before_after_code_files": [
          "src/urllib3/__init__.py||src/urllib3/__init__.py",
          "src/urllib3/_version.py||src/urllib3/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ],
          "candidate": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "src/urllib3/__init__.py||src/urllib3/__init__.py": [
          "File: src/urllib3/__init__.py -> src/urllib3/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: else:",
          "33:     if not ssl.OPENSSL_VERSION.startswith(\"OpenSSL \"):  # Defensive:",
          "34:         warnings.warn(",
          "36:             f\"the 'ssl' module is compiled with {ssl.OPENSSL_VERSION!r}. \"",
          "37:             \"See: https://github.com/urllib3/urllib3/issues/3020\",",
          "38:             exceptions.NotOpenSSLWarning,",
          "39:         )",
          "40:     elif ssl.OPENSSL_VERSION_INFO < (1, 1, 1):  # Defensive:",
          "41:         raise ImportError(",
          "43:             f\"the 'ssl' module is compiled with {ssl.OPENSSL_VERSION!r}. \"",
          "44:             \"See: https://github.com/urllib3/urllib3/issues/2168\"",
          "45:         )",
          "",
          "[Removed Lines]",
          "35:             \"urllib3 v2.0 only supports OpenSSL 1.1.1+, currently \"",
          "42:             \"urllib3 v2.0 only supports OpenSSL 1.1.1+, currently \"",
          "",
          "[Added Lines]",
          "35:             \"urllib3 v2 only supports OpenSSL 1.1.1+, currently \"",
          "42:             \"urllib3 v2 only supports OpenSSL 1.1.1+, currently \"",
          "",
          "---------------"
        ],
        "src/urllib3/_version.py||src/urllib3/_version.py": [
          "File: src/urllib3/_version.py -> src/urllib3/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file is protected via CODEOWNERS",
          "2: from __future__ import annotations",
          "",
          "[Removed Lines]",
          "4: __version__ = \"2.0.7\"",
          "",
          "[Added Lines]",
          "4: __version__ = \"2.1.0\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54d6edf2a671510a5c029d3b76ffe71a5b07147a",
      "candidate_info": {
        "commit_hash": "54d6edf2a671510a5c029d3b76ffe71a5b07147a",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/54d6edf2a671510a5c029d3b76ffe71a5b07147a",
        "files": [
          "CHANGES.rst",
          "changelog/2860.bugfix.rst",
          "changelog/3261.misc.rst",
          "changelog/3331.bugfix.rst",
          "changelog/3343.bugfix.rst",
          "src/urllib3/_version.py"
        ],
        "message": "Release 2.2.1",
        "before_after_code_files": [
          "src/urllib3/_version.py||src/urllib3/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ],
          "candidate": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "src/urllib3/_version.py||src/urllib3/_version.py": [
          "File: src/urllib3/_version.py -> src/urllib3/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file is protected via CODEOWNERS",
          "2: from __future__ import annotations",
          "",
          "[Removed Lines]",
          "4: __version__ = \"2.2.0\"",
          "",
          "[Added Lines]",
          "4: __version__ = \"2.2.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04df048cf4b1c3790c56e26c659db764aad62d6f",
      "candidate_info": {
        "commit_hash": "04df048cf4b1c3790c56e26c659db764aad62d6f",
        "repo": "urllib3/urllib3",
        "commit_url": "https://github.com/urllib3/urllib3/commit/04df048cf4b1c3790c56e26c659db764aad62d6f",
        "files": [
          "CHANGES.rst",
          "changelog/2244.bugfix.rst",
          "changelog/2951.feature.rst",
          "changelog/3130.bugfix.rst",
          "changelog/3181.feature.rst",
          "changelog/3186.feature.rst",
          "changelog/3203.bugfix.rst",
          "changelog/3267.bugfix.rst",
          "changelog/3268.bugfix.rst",
          "changelog/3284.feature.rst",
          "changelog/3325.bugfix.rst",
          "src/urllib3/_version.py"
        ],
        "message": "Release 2.2.0",
        "before_after_code_files": [
          "src/urllib3/_version.py||src/urllib3/_version.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ],
          "candidate": [
            "src/urllib3/_version.py||src/urllib3/_version.py"
          ]
        }
      },
      "candidate_diff": {
        "src/urllib3/_version.py||src/urllib3/_version.py": [
          "File: src/urllib3/_version.py -> src/urllib3/_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file is protected via CODEOWNERS",
          "2: from __future__ import annotations",
          "",
          "[Removed Lines]",
          "4: __version__ = \"2.1.0\"",
          "",
          "[Added Lines]",
          "4: __version__ = \"2.2.0\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}