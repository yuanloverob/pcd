{
  "cve_id": "CVE-2024-23331",
  "cve_desc": "Vite is a frontend tooling framework for javascript. The Vite dev server option `server.fs.deny` can be bypassed on case-insensitive file systems using case-augmented versions of filenames. Notably this affects servers hosted on Windows. This bypass is similar to CVE-2023-34092 -- with surface area reduced to hosts having case-insensitive filesystems. Since `picomatch` defaults to case-sensitive glob matching, but the file server doesn't discriminate; a blacklist bypass is possible. By requesting raw filesystem paths using augmented casing, the matcher derived from `config.server.fs.deny` fails to block access to sensitive files. This issue has been addressed in vite@5.0.12, vite@4.5.2, vite@3.2.8, and vite@2.9.17. Users are advised to upgrade. Users unable to upgrade should restrict access to dev servers.",
  "repo": "vitejs/vite",
  "patch_hash": "91641c4da0a011d4c5352e88fc68389d4e1289a5",
  "patch_info": {
    "commit_hash": "91641c4da0a011d4c5352e88fc68389d4e1289a5",
    "repo": "vitejs/vite",
    "commit_url": "https://github.com/vitejs/vite/commit/91641c4da0a011d4c5352e88fc68389d4e1289a5",
    "files": [
      "packages/vite/src/node/server/index.ts",
      "playground/fs-serve/__tests__/base/fs-serve-base.spec.ts",
      "playground/fs-serve/__tests__/fs-serve.spec.ts",
      "playground/fs-serve/root/src/index.html"
    ],
    "message": "fix: fs deny for case insensitive systems (#15653)",
    "before_after_code_files": [
      "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts",
      "playground/fs-serve/__tests__/base/fs-serve-base.spec.ts||playground/fs-serve/__tests__/base/fs-serve-base.spec.ts",
      "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts",
      "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html"
    ]
  },
  "patch_diff": {
    "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts": [
      "File: packages/vite/src/node/server/index.ts -> packages/vite/src/node/server/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "617:     _importGlobMap: new Map(),",
      "618:     _forceOptimizeOnRestart: false,",
      "619:     _pendingRequests: new Map(),",
      "621:     _shortcutsOptions: undefined,",
      "622:   }",
      "",
      "[Removed Lines]",
      "620:     _fsDenyGlob: picomatch(config.server.fs.deny, { matchBase: true }),",
      "",
      "[Added Lines]",
      "620:     _fsDenyGlob: picomatch(config.server.fs.deny, {",
      "621:       matchBase: true,",
      "622:       nocase: true,",
      "623:     }),",
      "",
      "---------------"
    ],
    "playground/fs-serve/__tests__/base/fs-serve-base.spec.ts||playground/fs-serve/__tests__/base/fs-serve-base.spec.ts": [
      "File: playground/fs-serve/__tests__/base/fs-serve-base.spec.ts -> playground/fs-serve/__tests__/base/fs-serve-base.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:   })",
      "94:   test('denied', async () => {",
      "96:   })",
      "97: })",
      "",
      "[Removed Lines]",
      "95:     expect(await page.textContent('.unsafe-dotenv')).toBe('404')",
      "",
      "[Added Lines]",
      "95:     expect(await page.textContent('.unsafe-dotenv')).toBe('403')",
      "96:   })",
      "98:   test('denied EnV casing', async () => {",
      "100:     const code = await page.textContent('.unsafe-dotEnV-casing')",
      "101:     expect(code === '403' || code === '404').toBeTruthy()",
      "",
      "---------------"
    ],
    "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts": [
      "File: playground/fs-serve/__tests__/fs-serve.spec.ts -> playground/fs-serve/__tests__/fs-serve.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "92:   })",
      "94:   test('denied', async () => {",
      "96:   })",
      "97: })",
      "",
      "[Removed Lines]",
      "95:     expect(await page.textContent('.unsafe-dotenv')).toBe('404')",
      "",
      "[Added Lines]",
      "95:     expect(await page.textContent('.unsafe-dotenv')).toBe('403')",
      "96:   })",
      "98:   test('denied EnV casing', async () => {",
      "100:     const code = await page.textContent('.unsafe-dotEnV-casing')",
      "101:     expect(code === '403' || code === '404').toBeTruthy()",
      "",
      "---------------"
    ],
    "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html": [
      "File: playground/fs-serve/root/src/index.html -> playground/fs-serve/root/src/index.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: <h2>Denied</h2>",
      "47: <pre class=\"unsafe-dotenv\"></pre>",
      "49: <script type=\"module\">",
      "50:   import '../../entry'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: <pre class=\"unsafe-dotEnV-casing\"></pre>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "236:     })",
      "240:     .then((r) => {",
      "241:       text('.unsafe-dotenv', r.status)",
      "242:     })",
      "",
      "[Removed Lines]",
      "239:   fetch(joinUrlSegments(base, joinUrlSegments('/@fs/', ROOT) + '/root/.env'))",
      "",
      "[Added Lines]",
      "240:   fetch(",
      "241:     joinUrlSegments(base, joinUrlSegments('/@fs/', ROOT) + '/root/src/.env'),",
      "242:   )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "244:       console.error(e)",
      "245:     })",
      "247:   function text(sel, text) {",
      "248:     document.querySelector(sel).textContent = text",
      "249:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:   fetch(",
      "252:     joinUrlSegments(base, joinUrlSegments('/@fs/', ROOT) + '/root/src/.EnV'),",
      "253:   )",
      "254:     .then((r) => {",
      "255:       text('.unsafe-dotEnV-casing', r.status)",
      "256:     })",
      "257:     .catch((e) => {",
      "258:       console.error(e)",
      "259:     })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1f855dceb334653dc29200a75f7dac6d92ecfd77",
      "candidate_info": {
        "commit_hash": "1f855dceb334653dc29200a75f7dac6d92ecfd77",
        "repo": "vitejs/vite",
        "commit_url": "https://github.com/vitejs/vite/commit/1f855dceb334653dc29200a75f7dac6d92ecfd77",
        "files": [
          "packages/playground/fs-serve/__tests__/fs-serve.spec.ts",
          "packages/playground/fs-serve/root/src/index.html",
          "packages/vite/src/node/server/middlewares/static.ts"
        ],
        "message": "fix: port #15653 to v2 (#15657)",
        "before_after_code_files": [
          "packages/playground/fs-serve/__tests__/fs-serve.spec.ts||packages/playground/fs-serve/__tests__/fs-serve.spec.ts",
          "packages/playground/fs-serve/root/src/index.html||packages/playground/fs-serve/root/src/index.html",
          "packages/vite/src/node/server/middlewares/static.ts||packages/vite/src/node/server/middlewares/static.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/playground/fs-serve/__tests__/fs-serve.spec.ts||packages/playground/fs-serve/__tests__/fs-serve.spec.ts": [
          "File: packages/playground/fs-serve/__tests__/fs-serve.spec.ts -> packages/playground/fs-serve/__tests__/fs-serve.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:     })",
          "99:     test('denied', async () => {",
          "101:     })",
          "102:   } else {",
          "103:     test('dummy test to make jest happy', async () => {",
          "",
          "[Removed Lines]",
          "100:       expect(await page.textContent('.unsafe-dotenv')).toBe('404')",
          "",
          "[Added Lines]",
          "100:       expect(await page.textContent('.unsafe-dotenv')).toBe('403')",
          "101:     })",
          "103:     test('denied EnV casing', async () => {",
          "105:       const code = await page.textContent('.unsafe-dotEnV-casing')",
          "106:       expect(code === '403' || code === '404').toBeTruthy()",
          "",
          "---------------"
        ],
        "packages/playground/fs-serve/root/src/index.html||packages/playground/fs-serve/root/src/index.html": [
          "File: packages/playground/fs-serve/root/src/index.html -> packages/playground/fs-serve/root/src/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: <h2>Denied</h2>",
          "47: <pre class=\"unsafe-dotenv\"></pre>",
          "49: <script type=\"module\">",
          "50:   import '../../entry'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: <pre class=\"unsafe-dotEnV-casing\"></pre>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     })",
          "206:     .then((r) => {",
          "207:       text('.unsafe-dotenv', r.status)",
          "208:     })",
          "",
          "[Removed Lines]",
          "205:   fetch('/@fs/' + ROOT + '/root/.env')",
          "",
          "[Added Lines]",
          "206:   fetch('/@fs/' + ROOT + '/root/src/.env')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:       console.error(e)",
          "211:     })",
          "213:   function text(sel, text) {",
          "214:     document.querySelector(sel).textContent = text",
          "215:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:   fetch('/@fs/' + ROOT + '/root/src/.EnV')",
          "216:     .then((r) => {",
          "217:       text('.unsafe-dotEnV-casing', r.status)",
          "218:     })",
          "219:     .catch((e) => {",
          "220:       console.error(e)",
          "221:     })",
          "",
          "---------------"
        ],
        "packages/vite/src/node/server/middlewares/static.ts||packages/vite/src/node/server/middlewares/static.ts": [
          "File: packages/vite/src/node/server/middlewares/static.ts -> packages/vite/src/node/server/middlewares/static.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   }",
          "157: }",
          "161: export function isFileServingAllowed(",
          "162:   url: string,",
          "",
          "[Removed Lines]",
          "159: const _matchOptions = { matchBase: true }",
          "",
          "[Added Lines]",
          "159: const _matchOptions = { matchBase: true, nocase: true }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99080ca3e6c2dcdc3c2d67bb2d143c59e0a329f2",
      "candidate_info": {
        "commit_hash": "99080ca3e6c2dcdc3c2d67bb2d143c59e0a329f2",
        "repo": "vitejs/vite",
        "commit_url": "https://github.com/vitejs/vite/commit/99080ca3e6c2dcdc3c2d67bb2d143c59e0a329f2",
        "files": [
          "packages/vite/src/node/server/index.ts",
          "playground/fs-serve/__tests__/fs-serve.spec.ts",
          "playground/fs-serve/root/src/index.html"
        ],
        "message": "fix: port #15653 to v3 (#15655)",
        "before_after_code_files": [
          "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts",
          "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts",
          "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts",
            "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts",
            "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html"
          ],
          "candidate": [
            "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts",
            "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts",
            "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html"
          ]
        }
      },
      "candidate_diff": {
        "packages/vite/src/node/server/index.ts||packages/vite/src/node/server/index.ts": [
          "File: packages/vite/src/node/server/index.ts -> packages/vite/src/node/server/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:     _importGlobMap: new Map(),",
          "453:     _forceOptimizeOnRestart: false,",
          "454:     _pendingRequests: new Map(),",
          "456:   }",
          "458:   server.transformIndexHtml = createDevHtmlTransformFn(server)",
          "",
          "[Removed Lines]",
          "455:     _fsDenyGlob: picomatch(config.server.fs.deny, { matchBase: true })",
          "",
          "[Added Lines]",
          "455:     _fsDenyGlob: picomatch(config.server.fs.deny, {",
          "456:       matchBase: true,",
          "457:       nocase: true",
          "458:     })",
          "",
          "---------------"
        ],
        "playground/fs-serve/__tests__/fs-serve.spec.ts||playground/fs-serve/__tests__/fs-serve.spec.ts": [
          "File: playground/fs-serve/__tests__/fs-serve.spec.ts -> playground/fs-serve/__tests__/fs-serve.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   })",
          "97:   test('denied', async () => {",
          "99:   })",
          "100: })",
          "",
          "[Removed Lines]",
          "98:     expect(await page.textContent('.unsafe-dotenv')).toBe('404')",
          "",
          "[Added Lines]",
          "98:     expect(await page.textContent('.unsafe-dotenv')).toBe('403')",
          "99:   })",
          "101:   test('denied EnV casing', async () => {",
          "103:     const code = await page.textContent('.unsafe-dotEnV-casing')",
          "104:     expect(code === '403' || code === '404').toBeTruthy()",
          "",
          "---------------"
        ],
        "playground/fs-serve/root/src/index.html||playground/fs-serve/root/src/index.html": [
          "File: playground/fs-serve/root/src/index.html -> playground/fs-serve/root/src/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: <h2>Denied</h2>",
          "47: <pre class=\"unsafe-dotenv\"></pre>",
          "49: <script type=\"module\">",
          "50:   import '../../entry'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: <pre class=\"unsafe-dotEnV-casing\"></pre>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     })",
          "206:     .then((r) => {",
          "207:       text('.unsafe-dotenv', r.status)",
          "208:     })",
          "",
          "[Removed Lines]",
          "205:   fetch('/@fs/' + ROOT + '/root/.env')",
          "",
          "[Added Lines]",
          "206:   fetch('/@fs/' + ROOT + '/root/src/.env')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:       console.error(e)",
          "211:     })",
          "213:   function text(sel, text) {",
          "214:     document.querySelector(sel).textContent = text",
          "215:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:   fetch('/@fs/' + ROOT + '/root/src/.EnV')",
          "216:     .then((r) => {",
          "217:       text('.unsafe-dotEnV-casing', r.status)",
          "218:     })",
          "219:     .catch((e) => {",
          "220:       console.error(e)",
          "221:     })",
          "",
          "---------------"
        ]
      }
    }
  ]
}