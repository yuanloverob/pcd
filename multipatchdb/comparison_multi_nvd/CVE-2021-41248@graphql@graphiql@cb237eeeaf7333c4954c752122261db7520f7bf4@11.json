{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5437ee61e1ba6cd28ccc1cb3543df1ea788278f4",
      "candidate_info": {
        "commit_hash": "5437ee61e1ba6cd28ccc1cb3543df1ea788278f4",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/5437ee61e1ba6cd28ccc1cb3543df1ea788278f4",
        "files": [
          ".changeset/cool-owls-drop.md",
          ".eslintignore",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/types.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "add keymap option",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/types.ts||packages/graphiql-react/src/editor/types.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   useMergeQuery,",
          "12:   usePrettifyEditors,",
          "13: } from './hooks';",
          "15: export type UseHeaderEditorArgs = {",
          "16:   editorTheme?: string;",
          "17:   onEdit?: EditCallback;",
          "18:   readOnly?: boolean;",
          "19:   shouldPersistHeaders?: boolean;",
          "20: };",
          "22: export function useHeaderEditor({",
          "23:   editorTheme = 'graphiql',",
          "24:   onEdit,",
          "25:   readOnly = false,",
          "26:   shouldPersistHeaders = false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import { KeyMap } from './types';",
          "21:   keyMap?: KeyMap;",
          "26:   keyMap,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         tabSize: 2,",
          "58:         mode: { name: 'javascript', json: true },",
          "59:         theme: editorTheme,",
          "61:         autoCloseBrackets: true,",
          "62:         matchBrackets: true,",
          "63:         showCursorWhenSelecting: true,",
          "",
          "[Removed Lines]",
          "60:         keyMap: 'sublime',",
          "",
          "[Added Lines]",
          "63:         keyMap: keyMap ?? 'sublime',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts": [
          "File: packages/graphiql-react/src/editor/index.ts -> packages/graphiql-react/src/editor/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:   EditorContext,",
          "5:   EditorContextProvider,",
          "6:   useEditorContext,",
          "7: } from './context';",
          "10:   useAutoCompleteLeafs,",
          "11:   useCopyQuery,",
          "12:   useMergeQuery,",
          "13:   usePrettifyEditors,",
          "14: } from './hooks';",
          "23:   ResponseTooltipType,",
          "24:   UseResponseEditorArgs,",
          "25: } from './response-editor';",
          "",
          "[Removed Lines]",
          "1: import { onHasCompletion } from './completion';",
          "2: import { ImagePreview } from './components';",
          "3: import {",
          "8: import { useHeaderEditor } from './header-editor';",
          "9: import {",
          "15: import { useQueryEditor } from './query-editor';",
          "16: import { useResponseEditor } from './response-editor';",
          "17: import { useVariableEditor } from './variable-editor';",
          "19: import type { EditorContextType } from './context';",
          "20: import type { UseHeaderEditorArgs } from './header-editor';",
          "21: import type { UseQueryEditorArgs } from './query-editor';",
          "22: import type {",
          "26: import type { TabsState } from './tabs';",
          "27: import type { UseVariableEditorArgs } from './variable-editor';",
          "29: export {",
          "30:   onHasCompletion,",
          "31:   ImagePreview,",
          "32:   EditorContext,",
          "33:   EditorContextProvider,",
          "34:   useAutoCompleteLeafs,",
          "35:   useCopyQuery,",
          "36:   useEditorContext,",
          "37:   useHeaderEditor,",
          "38:   useMergeQuery,",
          "39:   usePrettifyEditors,",
          "40:   useQueryEditor,",
          "41:   useResponseEditor,",
          "42:   useVariableEditor,",
          "43: };",
          "45: export type {",
          "46:   EditorContextType,",
          "47:   ResponseTooltipType,",
          "48:   TabsState,",
          "49:   UseHeaderEditorArgs,",
          "50:   UseQueryEditorArgs,",
          "51:   UseResponseEditorArgs,",
          "52:   UseVariableEditorArgs,",
          "53: };",
          "",
          "[Added Lines]",
          "1: export { onHasCompletion } from './completion';",
          "2: export { ImagePreview } from './components';",
          "3: export {",
          "8: export { useHeaderEditor } from './header-editor';",
          "9: export {",
          "15: export { useQueryEditor } from './query-editor';",
          "16: export { useResponseEditor } from './response-editor';",
          "17: export { useVariableEditor } from './variable-editor';",
          "19: export type { EditorContextType } from './context';",
          "20: export type { UseHeaderEditorArgs } from './header-editor';",
          "21: export type { UseQueryEditorArgs } from './query-editor';",
          "22: export type {",
          "26: export type { TabsState } from './tabs';",
          "27: export type { UseVariableEditorArgs } from './variable-editor';",
          "29: export type { KeyMap } from './types';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   useMergeQuery,",
          "30:   usePrettifyEditors,",
          "31: } from './hooks';",
          "33: import { normalizeWhitespace } from './whitespace';",
          "35: type OnClickReference = (reference: SchemaReference) => void;",
          "",
          "[Removed Lines]",
          "32: import { CodeMirrorEditor, CodeMirrorType } from './types';",
          "",
          "[Added Lines]",
          "32: import { CodeMirrorEditor, CodeMirrorType, KeyMap } from './types';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   onEditOperationName?: EditCallback;",
          "44:   readOnly?: boolean;",
          "45:   validationRules?: ValidationRule[];",
          "46: };",
          "48: export function useQueryEditor({",
          "49:   editorTheme = 'graphiql',",
          "50:   externalFragments,",
          "51:   onClickReference,",
          "52:   onCopyQuery,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   keyMap?: KeyMap;",
          "51:   keyMap,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         foldGutter: true,",
          "130:         mode: 'graphql',",
          "131:         theme: editorTheme,",
          "133:         autoCloseBrackets: true,",
          "134:         matchBrackets: true,",
          "135:         showCursorWhenSelecting: true,",
          "",
          "[Removed Lines]",
          "132:         keyMap: 'sublime',",
          "",
          "[Added Lines]",
          "134:         keyMap: keyMap ?? 'sublime',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { ImagePreview } from './components';",
          "9: import { useEditorContext } from './context';",
          "10: import { useSynchronizeValue } from './hooks';",
          "13: export type ResponseTooltipType = ComponentType<{ pos: Position }>;",
          "",
          "[Removed Lines]",
          "11: import { CodeMirrorEditor } from './types';",
          "",
          "[Added Lines]",
          "11: import { CodeMirrorEditor, KeyMap } from './types';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   ResponseTooltip?: ResponseTooltipType;",
          "17:   editorTheme?: string;",
          "18:   value?: string;",
          "19: };",
          "21: export function useResponseEditor({",
          "22:   ResponseTooltip,",
          "23:   editorTheme = 'graphiql',",
          "24:   value,",
          "25: }: UseResponseEditorArgs = {}) {",
          "26:   const { fetchError, validationErrors } = useSchemaContext({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   keyMap?: KeyMap;",
          "25:   keyMap,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:         readOnly: true,",
          "104:         theme: editorTheme,",
          "105:         mode: 'graphql-results',",
          "107:         foldGutter: true,",
          "108:         gutters: ['CodeMirror-foldgutter'],",
          "",
          "[Removed Lines]",
          "106:         keyMap: 'sublime',",
          "",
          "[Added Lines]",
          "108:         keyMap: keyMap ?? 'sublime',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/types.ts||packages/graphiql-react/src/editor/types.ts": [
          "File: packages/graphiql-react/src/editor/types.ts -> packages/graphiql-react/src/editor/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export type CodeMirrorType = typeof import('codemirror');",
          "5: export type CodeMirrorEditor = Editor & { options?: any };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: export type KeyMap = 'sublime' | 'emacs' | 'vim';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   useMergeQuery,",
          "12:   usePrettifyEditors,",
          "13: } from './hooks';",
          "16: export type UseVariableEditorArgs = {",
          "17:   editorTheme?: string;",
          "18:   onEdit?: EditCallback;",
          "19:   readOnly?: boolean;",
          "20: };",
          "22: export function useVariableEditor({",
          "23:   editorTheme = 'graphiql',",
          "24:   onEdit,",
          "25:   readOnly = false,",
          "26: }: UseVariableEditorArgs = {}) {",
          "",
          "[Removed Lines]",
          "14: import { CodeMirrorType } from './types';",
          "",
          "[Added Lines]",
          "14: import { CodeMirrorType, KeyMap } from './types';",
          "20:   keyMap?: KeyMap;",
          "25:   keyMap,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         tabSize: 2,",
          "65:         mode: 'graphql-variables',",
          "66:         theme: editorTheme,",
          "68:         autoCloseBrackets: true,",
          "69:         matchBrackets: true,",
          "70:         showCursorWhenSelecting: true,",
          "",
          "[Removed Lines]",
          "67:         keyMap: 'sublime',",
          "",
          "[Added Lines]",
          "69:         keyMap: keyMap ?? 'sublime',",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2:   EditorContext,",
          "3:   EditorContextProvider,",
          "4:   ImagePreview,",
          "",
          "[Removed Lines]",
          "1: import {",
          "",
          "[Added Lines]",
          "1: export {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   useResponseEditor,",
          "14:   useVariableEditor,",
          "15: } from './editor';",
          "17:   ExecutionContext,",
          "18:   ExecutionContextProvider,",
          "19:   useExecutionContext,",
          "20: } from './execution';",
          "22:   ExplorerContext,",
          "23:   ExplorerContextProvider,",
          "24:   useExplorerContext,",
          "25: } from './explorer';",
          "27:   HistoryContext,",
          "28:   HistoryContextProvider,",
          "29:   useHistoryContext,",
          "30:   useSelectHistoryItem,",
          "31: } from './history';",
          "33:   SchemaContext,",
          "34:   SchemaContextProvider,",
          "35:   useSchemaContext,",
          "36: } from './schema';",
          "38:   StorageContext,",
          "39:   StorageContextProvider,",
          "40:   useStorageContext,",
          "41: } from './storage';",
          "45:   EditorContextType,",
          "46:   ResponseTooltipType,",
          "47:   TabsState,",
          "",
          "[Removed Lines]",
          "16: import {",
          "21: import {",
          "26: import {",
          "32: import {",
          "37: import {",
          "42: import { useDragResize } from './utility/resize';",
          "44: import type {",
          "",
          "[Added Lines]",
          "16: export {",
          "21: export {",
          "26: export {",
          "32: export {",
          "37: export {",
          "42: export { useDragResize } from './utility/resize';",
          "44: export type {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   UseQueryEditorArgs,",
          "50:   UseResponseEditorArgs,",
          "51:   UseVariableEditorArgs,",
          "52: } from './editor';",
          "104: export type {",
          "116:   ExplorerContextType,",
          "117:   ExplorerFieldDef,",
          "118:   ExplorerNavStack,",
          "119:   ExplorerNavStackItem,",
          "",
          "[Removed Lines]",
          "53: import type { ExecutionContextType } from './execution';",
          "54: import type {",
          "55:   ExplorerContextType,",
          "56:   ExplorerFieldDef,",
          "57:   ExplorerNavStack,",
          "58:   ExplorerNavStackItem,",
          "59: } from './explorer';",
          "60: import type { HistoryContextType } from './history';",
          "61: import type { SchemaContextType } from './schema';",
          "62: import type { StorageContextType } from './storage';",
          "64: export {",
          "66:   EditorContext,",
          "67:   EditorContextProvider,",
          "68:   ImagePreview,",
          "69:   onHasCompletion,",
          "70:   useAutoCompleteLeafs,",
          "71:   useCopyQuery,",
          "72:   useEditorContext,",
          "73:   useHeaderEditor,",
          "74:   useMergeQuery,",
          "75:   usePrettifyEditors,",
          "76:   useQueryEditor,",
          "77:   useResponseEditor,",
          "78:   useVariableEditor,",
          "80:   ExecutionContext,",
          "81:   ExecutionContextProvider,",
          "82:   useExecutionContext,",
          "84:   ExplorerContext,",
          "85:   ExplorerContextProvider,",
          "86:   useExplorerContext,",
          "88:   HistoryContext,",
          "89:   HistoryContextProvider,",
          "90:   useHistoryContext,",
          "91:   useSelectHistoryItem,",
          "93:   SchemaContext,",
          "94:   SchemaContextProvider,",
          "95:   useSchemaContext,",
          "97:   StorageContext,",
          "98:   StorageContextProvider,",
          "99:   useStorageContext,",
          "101:   useDragResize,",
          "102: };",
          "106:   EditorContextType,",
          "107:   ResponseTooltipType,",
          "108:   TabsState,",
          "109:   UseHeaderEditorArgs,",
          "110:   UseQueryEditorArgs,",
          "111:   UseResponseEditorArgs,",
          "112:   UseVariableEditorArgs,",
          "114:   ExecutionContextType,",
          "121:   HistoryContextType,",
          "123:   SchemaContextType,",
          "125:   StorageContextType,",
          "126: };",
          "",
          "[Added Lines]",
          "52:   KeyMap,",
          "54: export type { ExecutionContextType } from './execution';",
          "60: } from './explorer';",
          "61: export type { HistoryContextType } from './history';",
          "62: export type { SchemaContextType } from './schema';",
          "63: export type { StorageContextType } from './storage';",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   SchemaContextType,",
          "49:   StorageContextType,",
          "50:   TabsState,",
          "51: } from '@graphiql/react';",
          "53: import { ExecuteButton } from './ExecuteButton';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   KeyMap,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:   getDefaultFieldNames?: GetDefaultFieldNamesFn;",
          "209:   editorTheme?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   keyMap?: KeyMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:                           this.props.docResize.setHiddenElement(null);",
          "749:                         }",
          "750:                       }}",
          "751:                       onCopyQuery={this.props.onCopyQuery}",
          "752:                       onEdit={this.props.onEditQuery}",
          "753:                       onEditOperationName={this.props.onEditOperationName}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762:                       keyMap={this.props.keyMap}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "831:                         editorTheme={this.props.editorTheme}",
          "832:                         readOnly={this.props.readOnly}",
          "833:                         active={this.state.activeSecondaryEditor === 'variable'}",
          "834:                       />",
          "835:                       {headerEditorEnabled && (",
          "836:                         <HeaderEditor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:                         keyMap={this.props.keyMap}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "839:                           onEdit={this.props.onEditHeaders}",
          "840:                           readOnly={this.props.readOnly}",
          "841:                           shouldPersistHeaders={this.props.shouldPersistHeaders}",
          "842:                         />",
          "843:                       )}",
          "844:                     </section>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "855:                           keyMap={this.props.keyMap}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "859:                     value={this.props.response}",
          "860:                     editorTheme={this.props.editorTheme}",
          "861:                     ResponseTooltip={this.props.ResultsTooltip}",
          "862:                   />",
          "863:                   {footer}",
          "864:                 </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "876:                     keyMap={this.props.keyMap}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6558e43bd24a3af7c5f78dbae572bd8ca7b3995",
      "candidate_info": {
        "commit_hash": "d6558e43bd24a3af7c5f78dbae572bd8ca7b3995",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/d6558e43bd24a3af7c5f78dbae572bd8ca7b3995",
        "files": [
          ".changeset/chilly-geese-dress.md",
          "packages/graphiql/src/components/GraphiQL.tsx"
        ],
        "message": "make exported GraphiQL component a class again (#2475)",
        "before_after_code_files": [
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: }",
          "86: declare namespace window {",
          "88: }",
          "90: export type Maybe<T> = T | null | undefined;",
          "",
          "[Removed Lines]",
          "87:   export let g: GraphiQLWithContext;",
          "",
          "[Added Lines]",
          "87:   export let g: GraphiQL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   GraphiQLProps & RefAttributes<GraphiQLWithContext>",
          "337:   {",
          "338:     dangerouslyAssumeSchemaIsValid,",
          "339:     docExplorerOpen,",
          "",
          "[Removed Lines]",
          "319: export const GraphiQL: ForwardRefExoticComponent<",
          "321: > & {",
          "322:   formatResult(result: any): string;",
          "323:   formatError(error: any): string;",
          "324:   Logo: typeof GraphiQLLogo;",
          "325:   Toolbar: typeof GraphiQLToolbar;",
          "326:   Footer: typeof GraphiQLFooter;",
          "327:   QueryEditor: typeof QueryEditor;",
          "328:   VariableEditor: typeof VariableEditor;",
          "329:   HeaderEditor: typeof HeaderEditor;",
          "330:   ResultViewer: typeof ResultViewer;",
          "331:   Button: typeof ToolbarButton;",
          "332:   ToolbarButton: typeof ToolbarButton;",
          "333:   Group: typeof ToolbarGroup;",
          "334:   Menu: typeof ToolbarMenu;",
          "335:   MenuItem: typeof ToolbarMenuItem;",
          "336: } = forwardRef<GraphiQLWithContext, GraphiQLProps>(function GraphiQL(",
          "",
          "[Added Lines]",
          "318: export class GraphiQL extends React.Component<GraphiQLProps> {",
          "319:   ref: GraphiQLWithContext | null = null;",
          "321:   constructor(props: GraphiQLProps) {",
          "322:     super(props);",
          "323:   }",
          "325:   componentDidMount() {",
          "326:     if (typeof window !== 'undefined') {",
          "327:       window.g = this;",
          "328:     }",
          "329:   }",
          "331:   render() {",
          "332:     return (",
          "333:       <GraphiQLProviders",
          "334:         {...this.props}",
          "335:         ref={node => {",
          "336:           this.ref = node;",
          "337:         }}",
          "338:       />",
          "339:     );",
          "340:   }",
          "347:   public getQueryEditor() {",
          "348:     console.warn(",
          "349:       'The method `GraphiQL.getQueryEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `query` prop. To react on changes of the editor value you can pass a callback to the `onEditQuery` prop.',",
          "350:     );",
          "351:     return this.ref?.getQueryEditor() || null;",
          "352:   }",
          "359:   public getVariableEditor() {",
          "360:     console.warn(",
          "361:       'The method `GraphiQL.getVariableEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `variables` prop. To react on changes of the editor value you can pass a callback to the `onEditVariables` prop.',",
          "362:     );",
          "363:     return this.ref?.getVariableEditor() || null;",
          "364:   }",
          "371:   public getHeaderEditor() {",
          "372:     console.warn(",
          "373:       'The method `GraphiQL.getHeaderEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `headers` prop. To react on changes of the editor value you can pass a callback to the `onEditHeaders` prop.',",
          "374:     );",
          "375:     return this.ref?.getHeaderEditor() || null;",
          "376:   }",
          "383:   public refresh() {",
          "384:     console.warn(",
          "385:       'The method `GraphiQL.refresh` is deprecated and will be removed in the next major version. Already now, all editors should automatically refresh when their size changes.',",
          "386:     );",
          "387:     this.ref?.refresh();",
          "388:   }",
          "396:   public autoCompleteLeafs() {",
          "397:     console.warn(",
          "398:       'The method `GraphiQL.autoCompleteLeafs` is deprecated and will be removed in the next major version. Please switch to using the `autoCompleteLeafs` function provided by the `EditorContext` from the `@graphiql/react` package.',",
          "399:     );",
          "400:     return this.ref?.autoCompleteLeafs();",
          "401:   }",
          "405:   static formatResult = (result: any): string => {",
          "406:     console.warn(",
          "407:       'The function `GraphiQL.formatResult` is deprecated and will be removed in the next major version. Please switch to using the `formatResult` function provided by the `@graphiql/toolkit` package.',",
          "408:     );",
          "409:     return formatResult(result);",
          "410:   };",
          "412:   static formatError = (error: any): string => {",
          "413:     console.warn(",
          "414:       'The function `GraphiQL.formatError` is deprecated and will be removed in the next major version. Please switch to using the `formatError` function provided by the `@graphiql/toolkit` package.',",
          "415:     );",
          "416:     return formatError(error);",
          "417:   };",
          "420:   static Logo = GraphiQLLogo;",
          "421:   static Toolbar = GraphiQLToolbar;",
          "422:   static Footer = GraphiQLFooter;",
          "423:   static QueryEditor = QueryEditor;",
          "424:   static VariableEditor = VariableEditor;",
          "425:   static HeaderEditor = HeaderEditor;",
          "426:   static ResultViewer = ResultViewer;",
          "429:   static Button = ToolbarButton;",
          "430:   static ToolbarButton = ToolbarButton; // Don't break existing API.",
          "433:   static Group = ToolbarGroup;",
          "436:   static Menu = ToolbarMenu;",
          "437:   static MenuItem = ToolbarMenuItem;",
          "438: }",
          "440: const GraphiQLProviders: ForwardRefExoticComponent<",
          "442: > = forwardRef<GraphiQLWithContext, GraphiQLProps>(function GraphiQLProviders(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "394:   );",
          "395: }) as any;",
          "",
          "[Removed Lines]",
          "397: GraphiQL.formatResult = (result: any): string => {",
          "398:   console.warn(",
          "399:     'The function `GraphiQL.formatResult` is deprecated and will be removed in the next major version. Please switch to using the `formatResult` function provided by the `@graphiql/toolkit` package.',",
          "400:   );",
          "401:   return formatResult(result);",
          "402: };",
          "404: GraphiQL.formatError = (error: any): string => {",
          "405:   console.warn(",
          "406:     'The function `GraphiQL.formatError` is deprecated and will be removed in the next major version. Please switch to using the `formatError` function provided by the `@graphiql/toolkit` package.',",
          "407:   );",
          "408:   return formatError(error);",
          "409: };",
          "412: GraphiQL.Logo = GraphiQLLogo;",
          "413: GraphiQL.Toolbar = GraphiQLToolbar;",
          "414: GraphiQL.Footer = GraphiQLFooter;",
          "415: GraphiQL.QueryEditor = QueryEditor;",
          "416: GraphiQL.VariableEditor = VariableEditor;",
          "417: GraphiQL.HeaderEditor = HeaderEditor;",
          "418: GraphiQL.ResultViewer = ResultViewer;",
          "421: GraphiQL.Button = ToolbarButton;",
          "422: GraphiQL.ToolbarButton = ToolbarButton; // Don't break existing API.",
          "425: GraphiQL.Group = ToolbarGroup;",
          "428: GraphiQL.Menu = ToolbarMenu;",
          "429: GraphiQL.MenuItem = ToolbarMenuItem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:     };",
          "553:   }",
          "561:   render() {",
          "562:     const children = React.Children.toArray(this.props.children);",
          "",
          "[Removed Lines]",
          "555:   componentDidMount() {",
          "556:     if (typeof window !== 'undefined') {",
          "557:       window.g = this;",
          "558:     }",
          "559:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:     );",
          "800:   }",
          "811:     return this.props.editorContext.queryEditor || null;",
          "812:   }",
          "819:   public getVariableEditor() {",
          "823:     return this.props.editorContext.variableEditor || null;",
          "824:   }",
          "831:   public getHeaderEditor() {",
          "835:     return this.props.editorContext.headerEditor || null;",
          "836:   }",
          "843:   public refresh() {",
          "847:     this.props.editorContext.queryEditor?.refresh();",
          "848:     this.props.editorContext.variableEditor?.refresh();",
          "849:     this.props.editorContext.headerEditor?.refresh();",
          "850:     this.props.editorContext.responseEditor?.refresh();",
          "851:   }",
          "859:   public autoCompleteLeafs() {",
          "863:     return this.props.autoCompleteLeafs();",
          "864:   }",
          "",
          "[Removed Lines]",
          "807:   getQueryEditor() {",
          "808:     console.warn(",
          "809:       'The method `GraphiQL.getQueryEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `query` prop. To react on changes of the editor value you can pass a callback to the `onEditQuery` prop.',",
          "810:     );",
          "820:     console.warn(",
          "821:       'The method `GraphiQL.getVariableEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `variables` prop. To react on changes of the editor value you can pass a callback to the `onEditVariables` prop.',",
          "822:     );",
          "832:     console.warn(",
          "833:       'The method `GraphiQL.getHeaderEditor` is deprecated and will be removed in the next major version. To set the value of the editor you can use the `headers` prop. To react on changes of the editor value you can pass a callback to the `onEditHeaders` prop.',",
          "834:     );",
          "844:     console.warn(",
          "845:       'The method `GraphiQL.refresh` is deprecated and will be removed in the next major version. Already now, all editors should automatically refresh when their size changes.',",
          "846:     );",
          "860:     console.warn(",
          "861:       'The method `GraphiQL.autoCompleteLeafs` is deprecated and will be removed in the next major version. Please switch to using the `autoCompleteLeafs` function provided by the `EditorContext` from the `@graphiql/react` package.',",
          "862:     );",
          "",
          "[Added Lines]",
          "870:   public getQueryEditor() {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4236190f91adedaf4f4a54cd0400a6b42c3c407",
      "candidate_info": {
        "commit_hash": "c4236190f91adedaf4f4a54cd0400a6b42c3c407",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/c4236190f91adedaf4f4a54cd0400a6b42c3c407",
        "files": [
          ".changeset/fifty-actors-sleep.md",
          "packages/graphql-language-service-server/package.json",
          "packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts",
          "yarn.lock"
        ],
        "message": "fix: lsp server paths for windows, special chars, fragment/object cache (#2072)",
        "before_after_code_files": [
          "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts||packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts": [
          "File: packages/graphql-language-service-server/src/GraphQLCache.ts -> packages/graphql-language-service-server/src/GraphQLCache.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import stringToHash from './stringToHash';",
          "32: import glob from 'glob';",
          "33: import { LoadConfigOptions } from './types';",
          "37: const MAX_READS = 200;",
          "",
          "[Removed Lines]",
          "34: import { fileURLToPath, pathToFileURL } from 'url';",
          "",
          "[Added Lines]",
          "34: import { URI } from 'vscode-uri';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   getGraphQLConfig = (): GraphQLConfig => this._graphQLConfig;",
          "108:   getProjectForFile = (uri: string): GraphQLProjectConfig => {",
          "110:   };",
          "112:   getFragmentDependencies = async (",
          "",
          "[Removed Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(new URL(uri).pathname);",
          "",
          "[Added Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(URI.parse(uri).fsPath);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:               const cacheEntry = globResult.statCache[filePath] as fs.Stats;",
          "367:               return {",
          "369:                 mtime: Math.trunc(cacheEntry.mtime.getTime() / 1000),",
          "370:                 size: cacheEntry.size,",
          "371:               };",
          "",
          "[Removed Lines]",
          "368:                 filePath: pathToFileURL(filePath).toString(),",
          "",
          "[Added Lines]",
          "368:                 filePath: URI.parse(filePath).toString(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "777:   promiseToReadGraphQLFile = (filePath: Uri): Promise<GraphQLFileInfo> => {",
          "778:     return new Promise((resolve, reject) =>",
          "780:         if (error) {",
          "781:           reject(error);",
          "782:           return;",
          "",
          "[Removed Lines]",
          "779:       fs.readFile(fileURLToPath(filePath), 'utf8', (error, content) => {",
          "",
          "[Added Lines]",
          "779:       fs.readFile(URI.parse(filePath).fsPath, 'utf8', (error, content) => {",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts": [
          "File: packages/graphql-language-service-server/src/MessageProcessor.ts -> packages/graphql-language-service-server/src/MessageProcessor.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import mkdirp from 'mkdirp';",
          "11: import { readFileSync, existsSync, writeFileSync, writeFile } from 'fs';",
          "13: import * as path from 'path';",
          "14: import glob from 'fast-glob';",
          "15: import {",
          "16:   CachedContent,",
          "17:   Uri,",
          "",
          "[Removed Lines]",
          "12: import { pathToFileURL } from 'url';",
          "",
          "[Added Lines]",
          "14: import { URI } from 'vscode-uri';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     };",
          "132:     this._tmpDir = tmpDir || tmpdir();",
          "133:     this._tmpDirBase = path.join(this._tmpDir, 'graphql-language-service');",
          "135:     this._loadConfigOptions = loadConfigOptions;",
          "136:     if (",
          "137:       loadConfigOptions.extensions &&",
          "",
          "[Removed Lines]",
          "134:     this._tmpUriBase = pathToFileURL(this._tmpDirBase).toString();",
          "",
          "[Added Lines]",
          "134:     this._tmpUriBase = URI.parse(this._tmpDirBase).toString();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:       }, this._settings.load),",
          "226:       rootDir,",
          "227:     };",
          "229:     this._graphQLCache = await getGraphQLCache({",
          "230:       parser: this._parser,",
          "231:       loadConfigOptions: this._loadConfigOptions,",
          "233:     });",
          "234:     this._languageService = new GraphQLLanguageService(this._graphQLCache);",
          "235:     if (this._graphQLCache?.getGraphQLConfig) {",
          "",
          "[Removed Lines]",
          "232:       config: this._graphQLConfig,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "284:       await this._invalidateCache(textDocument, uri, contents);",
          "285:     } else {",
          "286:       const cachedDocument = this._getCachedDocument(textDocument.uri);",
          "287:       if (cachedDocument) {",
          "288:         contents = cachedDocument.contents;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:       const configMatchers = [",
          "287:         'graphql.config',",
          "288:         'graphqlrc',",
          "289:         'package.json',",
          "290:         this._settings.load.fileName,",
          "291:       ].filter(Boolean);",
          "292:       if (configMatchers.some(v => uri.match(v)?.length)) {",
          "293:         this._logger.info('updating graphql config');",
          "294:         this._updateGraphQLConfig();",
          "295:         return { uri, diagnostics: [] };",
          "296:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "567:       params.changes.map(async (change: FileEvent) => {",
          "568:         if (!this._isInitialized || !this._graphQLCache) {",
          "569:           throw Error('No cache available for handleWatchedFilesChanged');",
          "583:           change.type === FileChangeTypeKind.Created ||",
          "584:           change.type === FileChangeTypeKind.Changed",
          "585:         ) {",
          "586:           const uri = change.uri;",
          "589:           const contents = this._parser(text, uri);",
          "591:           await this._updateFragmentDefinition(uri, contents);",
          "",
          "[Removed Lines]",
          "570:         }",
          "572:         const configMatchers = [",
          "573:           'graphql.config',",
          "574:           'graphqlrc',",
          "575:           this._settings.load.fileName,",
          "576:         ].filter(Boolean);",
          "577:         if (configMatchers.some(v => change.uri.match(v)?.length)) {",
          "578:           this._logger.info('updating graphql config');",
          "579:           this._updateGraphQLConfig();",
          "580:         }",
          "582:         if (",
          "588:           const text = readFileSync(new URL(uri).pathname).toString();",
          "",
          "[Added Lines]",
          "582:         } else if (",
          "588:           const text = readFileSync(URI.parse(uri).fsPath, 'utf-8');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "831:     const isFileUri = existsSync(uri);",
          "832:     let version = 1;",
          "833:     if (isFileUri) {",
          "837:       const schemaDocument = this._getCachedDocument(schemaUri);",
          "839:       if (schemaDocument) {",
          "",
          "[Removed Lines]",
          "834:       const schemaUri = pathToFileURL(",
          "835:         path.join(project.dirpath, uri),",
          "836:       ).toString();",
          "",
          "[Added Lines]",
          "834:       const schemaUri = URI.parse(path.join(project.dirpath, uri)).toString();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "859:       projectTmpPath = path.join(projectTmpPath, appendPath);",
          "860:     }",
          "861:     if (prependWithProtocol) {",
          "863:     } else {",
          "864:       return path.resolve(projectTmpPath);",
          "865:     }",
          "",
          "[Removed Lines]",
          "862:       return pathToFileURL(path.resolve(projectTmpPath)).toString();",
          "",
          "[Added Lines]",
          "860:       return URI.parse(path.resolve(projectTmpPath)).toString();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1014:           }",
          "1020:           const contents = this._parser(document.rawSDL, uri);",
          "",
          "[Removed Lines]",
          "1017:           const uri = pathToFileURL(filePath).toString();",
          "",
          "[Added Lines]",
          "1015:           const uri = URI.parse(filePath).toString();",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts||packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts": [
          "File: packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts -> packages/graphql-language-service-server/src/__tests__/MessageProcessor-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:     await expect(result[0].uri).toEqual(`${queryPathUri}/test3.graphql`);",
          "316:   });",
          "318:   it('parseDocument finds queries in tagged templates', async () => {",
          "319:     const text = `",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:   describe('handleDidOpenOrSaveNotification', () => {",
          "319:     const mockReadFileSync: jest.Mock = jest.requireMock('fs').readFileSync;",
          "321:     beforeEach(() => {",
          "322:       mockReadFileSync.mockReturnValue('');",
          "323:       messageProcessor._updateGraphQLConfig = jest.fn();",
          "324:     });",
          "325:     it('updates config for standard config filename changes', async () => {",
          "326:       await messageProcessor.handleDidOpenOrSaveNotification({",
          "327:         textDocument: {",
          "328:           uri: `${pathToFileURL('.')}/.graphql.config.js`,",
          "329:           languageId: 'js',",
          "330:           version: 0,",
          "331:           text: '',",
          "332:         },",
          "333:       });",
          "335:       expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();",
          "336:     });",
          "338:     it('updates config for custom config filename changes', async () => {",
          "339:       const customConfigName = 'custom-config-name.yml';",
          "340:       messageProcessor._settings = { load: { fileName: customConfigName } };",
          "342:       await messageProcessor.handleDidOpenOrSaveNotification({",
          "343:         textDocument: {",
          "344:           uri: `${pathToFileURL('.')}/${customConfigName}`,",
          "345:           languageId: 'js',",
          "346:           version: 0,",
          "347:           text: '',",
          "348:         },",
          "349:       });",
          "351:       expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();",
          "352:     });",
          "353:   });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:       expect(messageProcessor._updateGraphQLConfig).not.toHaveBeenCalled();",
          "508:     });",
          "538:   });",
          "539: });",
          "",
          "[Removed Lines]",
          "510:     it('updates config for standard config filename changes', async () => {",
          "511:       await messageProcessor.handleWatchedFilesChangedNotification({",
          "512:         changes: [",
          "513:           {",
          "514:             uri: `${pathToFileURL('.')}/.graphql.config`,",
          "515:             type: FileChangeType.Changed,",
          "516:           },",
          "517:         ],",
          "518:       });",
          "520:       expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();",
          "521:     });",
          "523:     it('updates config for custom config filename changes', async () => {",
          "524:       const customConfigName = 'custom-config-name.yml';",
          "525:       messageProcessor._settings = { load: { fileName: customConfigName } };",
          "527:       await messageProcessor.handleWatchedFilesChangedNotification({",
          "528:         changes: [",
          "529:           {",
          "530:             uri: `${pathToFileURL('.')}/${customConfigName}`,",
          "531:             type: FileChangeType.Changed,",
          "532:           },",
          "533:         ],",
          "534:       });",
          "536:       expect(messageProcessor._updateGraphQLConfig).toHaveBeenCalled();",
          "537:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "5102:   resolved \"https://registry.yarnpkg.com/@types/minimist/-/minimist-1.2.1.tgz#283f669ff76d7b8260df8ab7a4262cc83d988256\"",
          "5103:   integrity sha512-fZQQafSREFyuZcdWFAExYjBiCL7AUCdgsk80iO0q4yihYYdcIiH28CcuPTGFgLOCC8RlW49GSQxdHwZP+I7CNg==",
          "5109:   dependencies:",
          "5110:     \"@types/node\" \"*\"",
          "",
          "[Removed Lines]",
          "5105: \"@types/mkdirp@^1.0.1\":",
          "5106:   version \"1.0.1\"",
          "5107:   resolved \"https://registry.yarnpkg.com/@types/mkdirp/-/mkdirp-1.0.1.tgz#0930b948914a78587de35458b86c907b6e98bbf6\"",
          "5108:   integrity sha512-HkGSK7CGAXncr8Qn/0VqNtExEE+PHMWb+qlR1faHMao7ng6P3tAaoWWBMdva0gL5h4zprjIO89GJOLXsMcDm1Q==",
          "",
          "[Added Lines]",
          "5105: \"@types/mkdirp@^1.0.`1\":",
          "5106:   version \"1.0.2\"",
          "5107:   resolved \"https://registry.yarnpkg.com/@types/mkdirp/-/mkdirp-1.0.2.tgz#8d0bad7aa793abe551860be1f7ae7f3198c16666\"",
          "5108:   integrity sha512-o0K1tSO0Dx5X6xlU5F1D6625FawhC3dU3iqr25lluNv/+/QIVH8RLNEiVokgIZo+mz+87w/3Mkg/VvQS+J51fQ==",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10784:     once \"^1.3.0\"",
          "10785:     path-is-absolute \"^1.0.0\"",
          "10787: global-dirs@^2.0.1:",
          "10788:   version \"2.1.0\"",
          "10789:   resolved \"https://registry.yarnpkg.com/global-dirs/-/global-dirs-2.1.0.tgz#e9046a49c806ff04d6c1825e196c8f0091e8df4d\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10787: glob@^7.2.0:",
          "10788:   version \"7.2.0\"",
          "10789:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.2.0.tgz#d15535af7732e02e948f4c41628bd910293f6023\"",
          "10790:   integrity sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
          "10791:   dependencies:",
          "10792:     fs.realpath \"^1.0.0\"",
          "10793:     inflight \"^1.0.4\"",
          "10794:     inherits \"2\"",
          "10795:     minimatch \"^3.0.4\"",
          "10796:     once \"^1.3.0\"",
          "10797:     path-is-absolute \"^1.0.0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11003:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "11005: \"graphiql@file:packages/graphiql\":",
          "11007:   dependencies:",
          "11008:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11009:     codemirror \"^5.58.2\"",
          "11011:     copy-to-clipboard \"^3.2.0\"",
          "11012:     dset \"^3.1.0\"",
          "11013:     entities \"^2.0.0\"",
          "11014:     escape-html \"^1.0.3\"",
          "11016:     markdown-it \"^12.2.0\"",
          "11018: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "11006:   version \"1.5.5\"",
          "11010:     codemirror-graphql \"^1.2.3\"",
          "11015:     graphql-language-service \"^3.2.3\"",
          "",
          "[Added Lines]",
          "11018:   version \"1.5.7\"",
          "11022:     codemirror-graphql \"^1.2.4\"",
          "11027:     graphql-language-service \"^3.2.4\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "19949:   dependencies:",
          "19950:     vscode-languageserver-protocol \"^3.15.3\"",
          "19952: w3c-hr-time@^1.0.1, w3c-hr-time@^1.0.2:",
          "19953:   version \"1.0.2\"",
          "19954:   resolved \"https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz#0a89cdf5cc15822df9c360543676963e0cc308cd\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19964: vscode-uri@^3.0.2:",
          "19965:   version \"3.0.2\"",
          "19966:   resolved \"https://registry.yarnpkg.com/vscode-uri/-/vscode-uri-3.0.2.tgz#ecfd1d066cb8ef4c3a208decdbab9a8c23d055d0\"",
          "19967:   integrity sha512-jkjy6pjU1fxUvI51P+gCsxg1u2n8LSt0W6KrCNQceaziKzff74GoWmjVG46KieVzybO1sttPQmYfrwSHey7GUA==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dfe3ece4e8ab6b3400888f7f357e394db63439d",
      "candidate_info": {
        "commit_hash": "7dfe3ece4e8ab6b3400888f7f357e394db63439d",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/7dfe3ece4e8ab6b3400888f7f357e394db63439d",
        "files": [
          ".changeset/dull-pears-clap.md",
          ".changeset/early-roses-shop.md",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/utility/resize.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css",
          "packages/graphiql/src/css/doc-explorer.css",
          "packages/graphiql/src/utility/elementPosition.ts"
        ],
        "message": "add generic `DragResizeContainer` component for drag-resizing elements to `@graphiql/react` (#2461)\n\n* add `DragResizeContainer` component\n\n* use `DragResizeContainer` for horizontal editor sizing\n\n* use `DragResizeContainer` for secondary editors\n\n* use `DragResizeContainer` for resizing docs\n\n* remove unused refs\n\n* remove `headerEditorEnabled` from state\n\n* simplify state\n\n* fix resizing of editors\n\n* rename reset to show and restore size when programmatically hiding and showing elements\n\n* use hooks for greater programatic flexibility",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql-react/src/utility/resize.tsx||packages/graphiql-react/src/utility/resize.tsx",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts",
          "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
          "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css",
          "packages/graphiql/src/css/doc-explorer.css||packages/graphiql/src/css/doc-explorer.css",
          "packages/graphiql/src/utility/elementPosition.ts||packages/graphiql/src/utility/elementPosition.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
            "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   useKeyMap,",
          "11:   useMergeQuery,",
          "12:   usePrettifyEditors,",
          "14: } from './hooks';",
          "16: export type UseHeaderEditorArgs = {",
          "",
          "[Removed Lines]",
          "13:   useResizeEditor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   useKeyMap(headerEditor, ['Shift-Ctrl-P'], prettify);",
          "118:   useKeyMap(headerEditor, ['Shift-Ctrl-M'], merge);",
          "122:   return ref;",
          "123: }",
          "",
          "[Removed Lines]",
          "120:   useResizeEditor(headerEditor, ref);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   }, [editor, keys, callback]);",
          "123: }",
          "142: export type CopyQueryCallback = (query: string) => void;",
          "144: export function useCopyQuery({",
          "",
          "[Removed Lines]",
          "125: export function useResizeEditor(",
          "126:   editor: CodeMirrorEditor | null,",
          "127:   ref: RefObject<HTMLDivElement>,",
          "128: ) {",
          "129:   const sizeRef = useRef<number>();",
          "130:   useEffect(() => {",
          "131:     if (!ref.current || !editor) {",
          "132:       return;",
          "133:     }",
          "134:     const size = ref.current.clientHeight;",
          "135:     if (size !== sizeRef.current) {",
          "136:       editor.setSize(null, null); // TODO: added the args here. double check no effects. might be version issue",
          "137:     }",
          "138:     sizeRef.current = size;",
          "139:   });",
          "140: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   useKeyMap,",
          "29:   useMergeQuery,",
          "30:   usePrettifyEditors,",
          "32: } from './hooks';",
          "33: import { CodeMirrorEditor, CodeMirrorType } from './types';",
          "34: import { normalizeWhitespace } from './whitespace';",
          "",
          "[Removed Lines]",
          "31:   useResizeEditor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: export type UseQueryEditorArgs = {",
          "39:   editorTheme?: string;",
          "40:   externalFragments?: string | FragmentDefinitionNode[];",
          "41:   onEdit?(value: string, documentAST?: DocumentNode): void;",
          "42:   onEditOperationName?: EditCallback;",
          "44:   readOnly?: boolean;",
          "45:   validationRules?: ValidationRule[];",
          "46: };",
          "",
          "[Removed Lines]",
          "43:   onCopyQuery?: CopyQueryCallback;",
          "",
          "[Added Lines]",
          "40:   onClickReference?: OnClickReference;",
          "41:   onCopyQuery?: CopyQueryCallback;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48: export function useQueryEditor({",
          "49:   editorTheme = 'graphiql',",
          "50:   externalFragments,",
          "51:   onEdit,",
          "52:   onEditOperationName,",
          "54:   readOnly = false,",
          "55:   validationRules,",
          "56: }: UseQueryEditorArgs = {}) {",
          "",
          "[Removed Lines]",
          "53:   onCopyQuery,",
          "",
          "[Added Lines]",
          "51:   onClickReference,",
          "52:   onCopyQuery,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:       } else if (reference.kind === 'EnumValue' && reference.type) {",
          "94:         explorer.push({ name: reference.type.name, def: reference.type });",
          "95:       }",
          "96:     };",
          "99:   useEffect(() => {",
          "100:     let isActive = true;",
          "",
          "[Removed Lines]",
          "97:   }, [explorer]);",
          "",
          "[Added Lines]",
          "97:       onClickReference?.(reference);",
          "99:   }, [explorer, onClickReference]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "335:   );",
          "336:   useKeyMap(queryEditor, ['Shift-Ctrl-M'], merge);",
          "340:   return ref;",
          "341: }",
          "",
          "[Removed Lines]",
          "338:   useResizeEditor(queryEditor, ref);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { commonKeys, importCodeMirror } from './common';",
          "8: import { ImagePreview } from './components';",
          "9: import { useEditorContext } from './context';",
          "11: import { CodeMirrorEditor } from './types';",
          "13: export type ResponseTooltipType = ComponentType<{ pos: Position }>;",
          "",
          "[Removed Lines]",
          "10: import { useResizeEditor, useSynchronizeValue } from './hooks';",
          "",
          "[Added Lines]",
          "10: import { useSynchronizeValue } from './hooks';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   useSynchronizeValue(responseEditor, value);",
          "126:   useEffect(() => {",
          "127:     if (fetchError) {",
          "128:       responseEditor?.setValue(fetchError);",
          "",
          "[Removed Lines]",
          "124:   useResizeEditor(responseEditor, ref);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   useKeyMap,",
          "11:   useMergeQuery,",
          "12:   usePrettifyEditors,",
          "14: } from './hooks';",
          "15: import { CodeMirrorType } from './types';",
          "",
          "[Removed Lines]",
          "13:   useResizeEditor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   useKeyMap(variableEditor, ['Shift-Ctrl-P'], prettify);",
          "136:   useKeyMap(variableEditor, ['Shift-Ctrl-M'], merge);",
          "140:   return ref;",
          "141: }",
          "",
          "[Removed Lines]",
          "138:   useResizeEditor(variableEditor, ref);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   StorageContextProvider,",
          "40:   useStorageContext,",
          "41: } from './storage';",
          "43: import type {",
          "44:   EditorContextType,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import { useDragResize } from './utility/resize';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   StorageContext,",
          "97:   StorageContextProvider,",
          "98:   useStorageContext,",
          "99: };",
          "101: export type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   useDragResize,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/utility/resize.tsx||packages/graphiql-react/src/utility/resize.tsx": [
          "File: packages/graphiql-react/src/utility/resize.tsx -> packages/graphiql-react/src/utility/resize.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import {",
          "2:   useCallback,",
          "3:   useEffect,",
          "4:   useLayoutEffect,",
          "5:   useMemo,",
          "6:   useRef,",
          "7:   useState,",
          "8: } from 'react';",
          "10: import { useStorageContext } from '../storage';",
          "11: import debounce from './debounce';",
          "13: type ResizableElement = 'first' | 'second';",
          "15: type UseDragResizeArgs = {",
          "16:   defaultSizeRelation?: number;",
          "17:   direction: 'horizontal' | 'vertical';",
          "18:   initiallyHidden?: ResizableElement;",
          "19:   onHiddenElementChange?(hiddenElement: ResizableElement | null): void;",
          "20:   sizeThresholdFirst?: number;",
          "21:   sizeThresholdSecond?: number;",
          "22:   storageKey?: string;",
          "23: };",
          "25: export function useDragResize({",
          "26:   defaultSizeRelation = DEFAULT_FLEX,",
          "27:   direction,",
          "28:   initiallyHidden,",
          "29:   onHiddenElementChange,",
          "30:   sizeThresholdFirst = 100,",
          "31:   sizeThresholdSecond = 100,",
          "32:   storageKey,",
          "33: }: UseDragResizeArgs) {",
          "34:   const storage = useStorageContext();",
          "36:   const store = useCallback(",
          "37:     debounce(500, (value: string) => {",
          "38:       if (storage && storageKey) {",
          "39:         storage.set(storageKey, value);",
          "40:       }",
          "41:     }),",
          "42:     [storage, storageKey],",
          "43:   );",
          "45:   const [hiddenElement, _setHiddenElement] = useState<ResizableElement | null>(",
          "46:     () => {",
          "47:       const storedValue =",
          "48:         storage && storageKey ? storage.get(storageKey) : null;",
          "49:       if (storedValue === HIDE_FIRST || initiallyHidden === 'first') {",
          "50:         return 'first';",
          "51:       }",
          "52:       if (storedValue === HIDE_SECOND || initiallyHidden === 'second') {",
          "53:         return 'second';",
          "54:       }",
          "55:       return null;",
          "56:     },",
          "57:   );",
          "59:   const setHiddenElement = useCallback(",
          "60:     (element: ResizableElement | null) => {",
          "61:       _setHiddenElement(element);",
          "62:       onHiddenElementChange?.(element);",
          "63:     },",
          "64:     [onHiddenElementChange],",
          "65:   );",
          "67:   const firstRef = useRef<HTMLDivElement>(null);",
          "68:   const dragBarRef = useRef<HTMLDivElement>(null);",
          "69:   const secondRef = useRef<HTMLDivElement>(null);",
          "71:   const defaultFlexRef = useRef(`${defaultSizeRelation}`);",
          "76:   useLayoutEffect(() => {",
          "77:     const storedValue =",
          "78:       storage && storageKey",
          "79:         ? storage.get(storageKey) || defaultFlexRef.current",
          "80:         : defaultFlexRef.current;",
          "81:     const flexDirection = direction === 'horizontal' ? 'row' : 'column';",
          "83:     if (firstRef.current) {",
          "84:       firstRef.current.style.display = 'flex';",
          "85:       firstRef.current.style.flexDirection = flexDirection;",
          "86:       firstRef.current.style.flex =",
          "87:         storedValue === HIDE_FIRST || storedValue === HIDE_SECOND",
          "88:           ? defaultFlexRef.current",
          "89:           : storedValue;",
          "90:     }",
          "92:     if (secondRef.current) {",
          "93:       secondRef.current.style.display = 'flex';",
          "94:       secondRef.current.style.flexDirection = flexDirection;",
          "95:       secondRef.current.style.flex = '1';",
          "96:     }",
          "98:     if (dragBarRef.current) {",
          "99:       dragBarRef.current.style.display = 'flex';",
          "100:       dragBarRef.current.style.flexDirection = flexDirection;",
          "101:     }",
          "102:   }, [direction, storage, storageKey]);",
          "104:   const hide = useCallback((resizableElement: ResizableElement) => {",
          "105:     const element =",
          "106:       resizableElement === 'first' ? firstRef.current : secondRef.current;",
          "107:     if (!element) {",
          "108:       return;",
          "109:     }",
          "115:     element.style.left = '-1000px';",
          "116:     element.style.position = 'absolute';",
          "117:     element.style.opacity = '0';",
          "118:     element.style.height = '500px';",
          "119:     element.style.width = '500px';",
          "123:     if (firstRef.current) {",
          "124:       const flex = parseFloat(firstRef.current.style.flex);",
          "125:       if (!Number.isFinite(flex) || flex < 1) {",
          "126:         firstRef.current.style.flex = '1';",
          "127:       }",
          "128:       firstRef.current.style.flex;",
          "129:     }",
          "130:   }, []);",
          "132:   const show = useCallback(",
          "133:     (resizableElement: ResizableElement) => {",
          "134:       const element =",
          "135:         resizableElement === 'first' ? firstRef.current : secondRef.current;",
          "136:       if (!element) {",
          "137:         return;",
          "138:       }",
          "140:       element.style.width = '';",
          "141:       element.style.height = '';",
          "142:       element.style.opacity = '';",
          "143:       element.style.position = '';",
          "144:       element.style.left = '';",
          "146:       if (firstRef.current && storage && storageKey) {",
          "147:         const storedValue = storage?.get(storageKey);",
          "148:         if (",
          "149:           storedValue &&",
          "150:           storedValue !== HIDE_FIRST &&",
          "151:           storedValue !== HIDE_SECOND",
          "152:         ) {",
          "153:           firstRef.current.style.flex = storedValue;",
          "154:         }",
          "155:       }",
          "156:     },",
          "157:     [storage, storageKey],",
          "158:   );",
          "163:   useLayoutEffect(() => {",
          "164:     if (hiddenElement === 'first') {",
          "165:       hide('first');",
          "166:     } else {",
          "167:       show('first');",
          "168:     }",
          "169:     if (hiddenElement === 'second') {",
          "170:       hide('second');",
          "171:     } else {",
          "172:       show('second');",
          "173:     }",
          "174:   }, [hiddenElement, hide, show]);",
          "176:   useEffect(() => {",
          "177:     if (!dragBarRef.current || !firstRef.current || !secondRef.current) {",
          "178:       return;",
          "179:     }",
          "180:     const dragBarContainer = dragBarRef.current;",
          "181:     const firstContainer = firstRef.current;",
          "182:     const wrapper = firstContainer.parentElement!;",
          "184:     const eventProperty = direction === 'horizontal' ? 'clientX' : 'clientY';",
          "185:     const rectProperty = direction === 'horizontal' ? 'left' : 'top';",
          "186:     const adjacentRectProperty =",
          "187:       direction === 'horizontal' ? 'right' : 'bottom';",
          "188:     const sizeProperty =",
          "189:       direction === 'horizontal' ? 'clientWidth' : 'clientHeight';",
          "191:     function handleMouseDown(downEvent: MouseEvent) {",
          "192:       downEvent.preventDefault();",
          "196:       const offset =",
          "197:         downEvent[eventProperty] -",
          "198:         dragBarContainer.getBoundingClientRect()[rectProperty];",
          "200:       function handleMouseMove(moveEvent: MouseEvent) {",
          "201:         if (moveEvent.buttons === 0) {",
          "202:           return handleMouseUp();",
          "203:         }",
          "205:         const firstSize =",
          "206:           moveEvent[eventProperty] -",
          "207:           wrapper.getBoundingClientRect()[rectProperty] -",
          "208:           offset;",
          "209:         const secondSize =",
          "210:           wrapper.getBoundingClientRect()[adjacentRectProperty] -",
          "211:           moveEvent[eventProperty] +",
          "212:           offset -",
          "213:           dragBarContainer[sizeProperty];",
          "215:         if (firstSize < sizeThresholdFirst) {",
          "217:           setHiddenElement('first');",
          "218:           store(HIDE_FIRST);",
          "219:         } else if (secondSize < sizeThresholdSecond) {",
          "221:           setHiddenElement('second');",
          "222:           store(HIDE_SECOND);",
          "223:         } else {",
          "226:           setHiddenElement(null);",
          "227:           const newFlex = `${firstSize / secondSize}`;",
          "228:           firstContainer.style.flex = newFlex;",
          "229:           store(newFlex);",
          "230:         }",
          "231:       }",
          "233:       function handleMouseUp() {",
          "234:         document.removeEventListener('mousemove', handleMouseMove);",
          "235:         document.removeEventListener('mouseup', handleMouseUp);",
          "236:       }",
          "238:       document.addEventListener('mousemove', handleMouseMove);",
          "239:       document.addEventListener('mouseup', handleMouseUp);",
          "240:     }",
          "242:     dragBarContainer.addEventListener('mousedown', handleMouseDown);",
          "244:     function reset() {",
          "245:       if (firstRef.current) {",
          "246:         firstRef.current.style.flex = defaultFlexRef.current;",
          "247:       }",
          "248:       store(defaultFlexRef.current);",
          "249:       setHiddenElement(null);",
          "250:     }",
          "252:     dragBarContainer.addEventListener('dblclick', reset);",
          "254:     return () => {",
          "255:       dragBarContainer.removeEventListener('mousedown', handleMouseDown);",
          "256:       dragBarContainer.removeEventListener('dblclick', reset);",
          "257:     };",
          "258:   }, [",
          "259:     direction,",
          "260:     setHiddenElement,",
          "261:     sizeThresholdFirst,",
          "262:     sizeThresholdSecond,",
          "263:     store,",
          "264:   ]);",
          "266:   return useMemo(",
          "267:     () => ({",
          "268:       dragBarRef,",
          "269:       hiddenElement,",
          "270:       firstRef,",
          "271:       setHiddenElement,",
          "272:       secondRef,",
          "273:     }),",
          "274:     [hiddenElement, setHiddenElement],",
          "275:   );",
          "276: }",
          "278: const DEFAULT_FLEX = 1;",
          "279: const HIDE_FIRST = 'hide-first';",
          "280: const HIDE_SECOND = 'hide-second';",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   StorageContextProvider,",
          "16:   useAutoCompleteLeafs,",
          "17:   useCopyQuery,",
          "18:   useEditorContext,",
          "19:   useExecutionContext,",
          "20:   useExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   useDragResize,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   StorageContextProvider,",
          "66:   useAutoCompleteLeafs,",
          "67:   useCopyQuery,",
          "68:   useEditorContext,",
          "69:   useExecutionContext,",
          "70:   useExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   useDragResize,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:       setValue(newValue: string) {",
          "155:         setCode(newValue);",
          "156:       },",
          "157:     });",
          "158:   });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:       refresh() {},",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/docs.spec.ts||packages/graphiql/cypress/integration/docs.spec.ts": [
          "File: packages/graphiql/cypress/integration/docs.spec.ts -> packages/graphiql/cypress/integration/docs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   it('Toggles doc pane back off', () => {",
          "14:     cy.get('.docExplorerWrap button.docExplorerHide').click();",
          "16:   });",
          "17: });",
          "",
          "[Removed Lines]",
          "15:     cy.get('.doc-explorer').should('not.exist');",
          "",
          "[Added Lines]",
          "15:     cy.get('.doc-explorer').should('not.be.visible');",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
          "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   it('Shows the expected error when the schema is invalid', () => {",
          "49:     cy.visit(`/?bad=true`);",
          "50:     cy.wait(200);",
          "52:       expect(element.get(0).innerText).to.contain('Names must');",
          "53:     });",
          "54:   });",
          "",
          "[Removed Lines]",
          "51:     cy.get('section#graphiql-result-viewer').should(element => {",
          "",
          "[Added Lines]",
          "51:     cy.get('section.result-window').should(element => {",
          "",
          "---------------"
        ],
        "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
          "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   cy.visitWithOp(op);",
          "122:   cy.clickExecuteQuery();",
          "123:   cy.wait(timeout);",
          "125:     expect(normalizeWhitespace(element.get(0).innerText)).to.equal(",
          "126:       JSON.stringify(mockSuccess, null, 2),",
          "127:     );",
          "",
          "[Removed Lines]",
          "124:   cy.get('section#graphiql-result-viewer').should(element => {",
          "",
          "[Added Lines]",
          "124:   cy.get('section.result-window').should(element => {",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import SearchResults from './DocExplorer/SearchResults';",
          "20: import TypeDoc from './DocExplorer/TypeDoc';",
          "29:   const {",
          "30:     fetchError,",
          "31:     isFetching,",
          "",
          "[Removed Lines]",
          "28: export function DocExplorer() {",
          "",
          "[Added Lines]",
          "22: type DocExplorerProps = {",
          "23:   onClose?(): void;",
          "24: };",
          "32: export function DocExplorer(props: DocExplorerProps) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:             className=\"docExplorerHide\"",
          "123:             onClick={() => {",
          "124:               hide();",
          "125:             }}",
          "126:             aria-label=\"Close Documentation Explorer\">",
          "127:             {'\\u2715'}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:               props.onClose?.();",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import React, {",
          "9:   ComponentType,",
          "10:   PropsWithChildren,",
          "12:   ReactNode,",
          "13:   forwardRef,",
          "14:   ForwardRefExoticComponent,",
          "",
          "[Removed Lines]",
          "11:   MouseEventHandler,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:   StorageContextProvider,",
          "32:   useAutoCompleteLeafs,",
          "33:   useCopyQuery,",
          "34:   useEditorContext,",
          "35:   useExecutionContext,",
          "36:   useExplorerContext,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   useDragResize,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: import { QueryEditor } from './QueryEditor';",
          "58: import { VariableEditor } from './VariableEditor';",
          "59: import { HeaderEditor } from './HeaderEditor';",
          "61: import { DocExplorer } from './DocExplorer';",
          "62: import { QueryHistory } from './QueryHistory';",
          "64: import find from '../utility/find';",
          "67: import { formatError, formatResult } from '@graphiql/toolkit';",
          "68: import type { Fetcher, GetDefaultFieldNamesFn } from '@graphiql/toolkit';",
          "70: import { Tab, TabAddButton, Tabs } from './Tabs';",
          "74: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
          "76: if (majorVersion < 16) {",
          "",
          "[Removed Lines]",
          "60: import { ResultViewer, RESULT_VIEWER_ID } from './ResultViewer';",
          "63: import debounce from '../utility/debounce';",
          "65: import { getLeft, getTop } from '../utility/elementPosition';",
          "72: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
          "",
          "[Added Lines]",
          "60: import { ResultViewer } from './ResultViewer';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:   export let g: GraphiQL;",
          "88: }",
          "97: export type GraphiQLToolbarConfig = {",
          "98:   additionalContent?: React.ReactNode;",
          "99: };",
          "",
          "[Removed Lines]",
          "90: export type Maybe<T> = T | null | undefined;",
          "92: type OnMouseMoveFn = Maybe<",
          "93:   (moveEvent: MouseEvent | React.MouseEvent<Element>) => void",
          "94: >;",
          "95: type OnMouseUpFn = Maybe<() => void>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299:   children?: ReactNode;",
          "300: };",
          "",
          "[Removed Lines]",
          "302: export type GraphiQLState = {",
          "303:   editorFlex: number;",
          "304:   secondaryEditorOpen: boolean;",
          "305:   secondaryEditorHeight: number;",
          "306:   variableEditorActive: boolean;",
          "307:   headerEditorActive: boolean;",
          "308:   headerEditorEnabled: boolean;",
          "309:   docExplorerWidth: number;",
          "310: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "510:   | 'defaultQuery'",
          "511:   | 'docExplorerOpen'",
          "512:   | 'fetcher'",
          "513:   | 'inputValueDeprecation'",
          "514:   | 'introspectionQueryName'",
          "515:   | 'maxHistoryLength'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "492:   | 'headers'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "519:   | 'schema'",
          "520:   | 'schemaDescription'",
          "521:   | 'storage'",
          "522: >;",
          "524: const GraphiQLConsumeContexts = forwardRef<",
          "525:   GraphiQLWithContext,",
          "526:   GraphiQLWithContextProviderProps",
          "531:   const editorContext = useEditorContext({ nonNull: true });",
          "532:   const executionContext = useExecutionContext({ nonNull: true });",
          "533:   const explorerContext = useExplorerContext();",
          "",
          "[Removed Lines]",
          "527: >(function GraphiQLConsumeContexts(",
          "528:   { getDefaultFieldNames, onCopyQuery, ...props },",
          "529:   ref,",
          "530: ) {",
          "",
          "[Added Lines]",
          "502:   | 'variables'",
          "508: >(function GraphiQLConsumeContexts({ getDefaultFieldNames, ...props }, ref) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "536:   const storageContext = useStorageContext();",
          "538:   const autoCompleteLeafs = useAutoCompleteLeafs({ getDefaultFieldNames });",
          "540:   const merge = useMergeQuery();",
          "541:   const prettify = usePrettifyEditors();",
          "543:   return (",
          "544:     <GraphiQLWithContext",
          "545:       {...props}",
          "",
          "[Removed Lines]",
          "539:   const copy = useCopyQuery({ onCopyQuery });",
          "",
          "[Added Lines]",
          "517:   const copy = useCopyQuery({ onCopyQuery: props.onCopyQuery });",
          "521:   const docResize = useDragResize({",
          "522:     defaultSizeRelation: 3,",
          "523:     direction: 'horizontal',",
          "524:     initiallyHidden: explorerContext?.isVisible ? undefined : 'second',",
          "525:     onHiddenElementChange: resizableElement => {",
          "526:       if (resizableElement === 'second') {",
          "527:         explorerContext?.hide();",
          "528:       } else {",
          "529:         explorerContext?.show();",
          "530:       }",
          "531:     },",
          "532:     sizeThresholdSecond: 200,",
          "533:     storageKey: 'docExplorerFlex',",
          "534:   });",
          "535:   const editorResize = useDragResize({",
          "536:     direction: 'horizontal',",
          "537:     storageKey: 'editorFlex',",
          "538:   });",
          "539:   const secondaryEditorResize = useDragResize({",
          "540:     defaultSizeRelation: 3,",
          "541:     direction: 'vertical',",
          "542:     initiallyHidden: (() => {",
          "544:       if (props.defaultVariableEditorOpen !== undefined) {",
          "545:         return props.defaultVariableEditorOpen ? undefined : 'second';",
          "546:       }",
          "548:       if (props.defaultSecondaryEditorOpen !== undefined) {",
          "549:         return props.defaultSecondaryEditorOpen ? undefined : 'second';",
          "550:       }",
          "552:       return editorContext.initialVariables || editorContext.initialHeaders",
          "553:         ? undefined",
          "554:         : 'second';",
          "555:     })(),",
          "556:     sizeThresholdSecond: 60,",
          "557:     storageKey: 'secondaryEditorFlex',",
          "558:   });",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "553:       copy={copy}",
          "554:       merge={merge}",
          "555:       prettify={prettify}",
          "556:       ref={ref}",
          "557:     />",
          "558:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:       docResize={docResize}",
          "574:       editorResize={editorResize}",
          "575:       secondaryEditorResize={secondaryEditorResize}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "561: type GraphiQLWithContextConsumerProps = Omit<",
          "562:   GraphiQLWithContextProviderProps,",
          "564: > & {",
          "565:   editorContext: EditorContextType;",
          "566:   executionContext: ExecutionContextType;",
          "",
          "[Removed Lines]",
          "563:   'fetcher' | 'getDefaultFieldNames' | 'onCopyQuery'",
          "",
          "[Added Lines]",
          "583:   'fetcher' | 'getDefaultFieldNames'",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "573:   copy(): void;",
          "574:   merge(): void;",
          "575:   prettify(): void;",
          "576: };",
          "578: class GraphiQLWithContext extends React.Component<",
          "579:   GraphiQLWithContextConsumerProps,",
          "580:   GraphiQLState",
          "581: > {",
          "586:   constructor(props: GraphiQLWithContextConsumerProps) {",
          "587:     super(props);",
          "625:   }",
          "627:   render() {",
          "",
          "[Removed Lines]",
          "583:   graphiqlContainer: Maybe<HTMLDivElement>;",
          "584:   editorBarComponent: Maybe<HTMLDivElement>;",
          "589:     const variables =",
          "590:       props.variables ?? props.storageContext?.get('variables') ?? undefined;",
          "592:     const headers =",
          "593:       props.headers ?? props.storageContext?.get('headers') ?? undefined;",
          "596:     let secondaryEditorOpen;",
          "597:     if (props.defaultVariableEditorOpen !== undefined) {",
          "598:       secondaryEditorOpen = props.defaultVariableEditorOpen;",
          "599:     } else if (props.defaultSecondaryEditorOpen !== undefined) {",
          "600:       secondaryEditorOpen = props.defaultSecondaryEditorOpen;",
          "601:     } else {",
          "602:       secondaryEditorOpen = Boolean(variables || headers);",
          "603:     }",
          "605:     const headerEditorEnabled = props.headerEditorEnabled ?? true;",
          "608:     this.state = {",
          "609:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "610:       secondaryEditorOpen,",
          "611:       secondaryEditorHeight:",
          "612:         Number(this.props.storageContext?.get('secondaryEditorHeight')) || 200,",
          "613:       variableEditorActive:",
          "614:         this.props.storageContext?.get('variableEditorActive') === 'true' ||",
          "615:         props.headerEditorEnabled",
          "616:           ? this.props.storageContext?.get('headerEditorActive') !== 'true'",
          "617:           : true,",
          "618:       headerEditorActive:",
          "619:         this.props.storageContext?.get('headerEditorActive') === 'true',",
          "620:       headerEditorEnabled,",
          "621:       docExplorerWidth:",
          "622:         Number(this.props.storageContext?.get('docExplorerWidth')) ||",
          "623:         DEFAULT_DOC_EXPLORER_WIDTH,",
          "624:     };",
          "",
          "[Added Lines]",
          "597:   docResize: ReturnType<typeof useDragResize>;",
          "598:   editorResize: ReturnType<typeof useDragResize>;",
          "599:   secondaryEditorResize: ReturnType<typeof useDragResize>;",
          "600: };",
          "602: export type GraphiQLState = {",
          "603:   activeSecondaryEditor: 'variable' | 'header';",
          "614:     this.state = { activeSecondaryEditor: 'variable' };",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "675:       isChildComponentType(child, GraphiQL.Footer),",
          "676:     );",
          "698:     return (",
          "719:             </div>",
          "749:                       this.props.executionContext.stop();",
          "756:                   }}",
          "757:                 />",
          "807:                   </div>",
          "809:                     <div",
          "819:                     </div>",
          "821:                 </div>",
          "831:                     editorTheme={this.props.editorTheme}",
          "835:                   />",
          "843:                 </div>",
          "851:             </div>",
          "852:           </div>",
          "853:         </div>",
          "860:             />",
          "862:           </div>",
          "864:       </div>",
          "865:     );",
          "866:   }",
          "",
          "[Removed Lines]",
          "678:     const queryWrapStyle = {",
          "679:       WebkitFlex: this.state.editorFlex,",
          "680:       flex: this.state.editorFlex,",
          "681:     };",
          "683:     const docWrapStyle = {",
          "684:       display: 'block',",
          "685:       width: this.state.docExplorerWidth,",
          "686:     };",
          "687:     const docExplorerWrapClasses =",
          "688:       'docExplorerWrap' +",
          "689:       (this.state.docExplorerWidth < 200 ? ' doc-explorer-narrow' : '');",
          "691:     const secondaryEditorOpen = this.state.secondaryEditorOpen;",
          "692:     const secondaryEditorStyle = {",
          "693:       height: secondaryEditorOpen",
          "694:         ? this.state.secondaryEditorHeight",
          "695:         : undefined,",
          "696:     };",
          "699:       <div",
          "700:         ref={n => {",
          "701:           this.graphiqlContainer = n;",
          "702:         }}",
          "703:         data-testid=\"graphiql-container\"",
          "704:         className=\"graphiql-container\">",
          "705:         {this.props.historyContext?.isVisible && (",
          "706:           <div",
          "707:             className=\"historyPaneWrap\"",
          "708:             style={{ width: '230px', zIndex: 7 }}>",
          "709:             <QueryHistory />",
          "710:           </div>",
          "711:         )}",
          "712:         <div className=\"editorWrap\">",
          "713:           <div className=\"topBarWrap\">",
          "714:             {this.props.beforeTopBarContent}",
          "715:             <div className=\"topBar\">",
          "716:               {logo}",
          "717:               <ExecuteButton />",
          "718:               {toolbar}",
          "720:             {this.props.explorerContext &&",
          "721:               !this.props.explorerContext.isVisible && (",
          "722:                 <button",
          "723:                   className=\"docExplorerShow\"",
          "724:                   onClick={() => {",
          "725:                     this.props.explorerContext?.show();",
          "726:                   }}",
          "727:                   aria-label=\"Open Documentation Explorer\">",
          "728:                   Docs",
          "729:                 </button>",
          "730:               )}",
          "731:           </div>",
          "732:           {this.props.tabs ? (",
          "733:             <Tabs",
          "734:               tabsProps={{",
          "735:                 'aria-label': 'Select active operation',",
          "736:               }}>",
          "737:               {this.props.editorContext.tabs.map((tab, index) => (",
          "738:                 <Tab",
          "739:                   key={tab.id}",
          "740:                   isActive={index === this.props.editorContext.activeTabIndex}",
          "741:                   title={tab.title}",
          "742:                   isCloseable={this.props.editorContext.tabs.length > 1}",
          "743:                   onSelect={() => {",
          "744:                     this.props.executionContext.stop();",
          "745:                     this.props.editorContext.changeTab(index);",
          "746:                   }}",
          "747:                   onClose={() => {",
          "748:                     if (this.props.editorContext.activeTabIndex === index) {",
          "750:                     }",
          "751:                     this.props.editorContext.closeTab(index);",
          "752:                   }}",
          "753:                   tabProps={{",
          "754:                     'aria-controls': 'sessionWrap',",
          "755:                     id: `session-tab-${index}`,",
          "758:               ))}",
          "759:               <TabAddButton",
          "760:                 onClick={() => {",
          "761:                   this.props.editorContext.addTab();",
          "762:                 }}",
          "763:               />",
          "764:             </Tabs>",
          "765:           ) : null}",
          "766:           <div",
          "767:             ref={n => {",
          "768:               this.editorBarComponent = n;",
          "769:             }}",
          "770:             role=\"tabpanel\"",
          "771:             id=\"sessionWrap\"",
          "772:             className=\"editorBar\"",
          "773:             aria-labelledby={`session-tab-${this.props.editorContext.activeTabIndex}`}",
          "774:             onDoubleClick={this.handleResetResize}",
          "775:             onMouseDown={this.handleResizeStart}>",
          "776:             <div className=\"queryWrap\" style={queryWrapStyle}>",
          "777:               <QueryEditor",
          "778:                 editorTheme={this.props.editorTheme}",
          "779:                 externalFragments={this.props.externalFragments}",
          "780:                 onEdit={this.props.onEditQuery}",
          "781:                 onEditOperationName={this.props.onEditOperationName}",
          "782:                 readOnly={this.props.readOnly}",
          "783:                 validationRules={this.props.validationRules}",
          "784:               />",
          "785:               <section",
          "786:                 className=\"variable-editor secondary-editor\"",
          "787:                 style={secondaryEditorStyle}",
          "788:                 aria-label={",
          "789:                   this.state.variableEditorActive",
          "790:                     ? 'Query Variables'",
          "791:                     : 'Request Headers'",
          "792:                 }>",
          "793:                 <div",
          "794:                   className=\"secondary-editor-title variable-editor-title\"",
          "795:                   id=\"secondary-editor-title\"",
          "796:                   style={{",
          "797:                     cursor: secondaryEditorOpen ? 'row-resize' : 'n-resize',",
          "798:                   }}",
          "799:                   onMouseDown={this.handleSecondaryEditorResizeStart}>",
          "800:                   <div",
          "801:                     className={`variable-editor-title-text${",
          "802:                       this.state.variableEditorActive ? ' active' : ''",
          "803:                     }`}",
          "804:                     onClick={this.handleOpenVariableEditorTab}",
          "805:                     onMouseDown={this.handleTabClickPropagation}>",
          "806:                     Query Variables",
          "808:                   {this.state.headerEditorEnabled && (",
          "810:                       style={{",
          "811:                         marginLeft: '20px',",
          "812:                       }}",
          "813:                       className={`variable-editor-title-text${",
          "814:                         this.state.headerEditorActive ? ' active' : ''",
          "815:                       }`}",
          "816:                       onClick={this.handleOpenHeaderEditorTab}",
          "817:                       onMouseDown={this.handleTabClickPropagation}>",
          "818:                       Request Headers",
          "820:                   )}",
          "822:                 <VariableEditor",
          "823:                   onEdit={this.props.onEditVariables}",
          "824:                   editorTheme={this.props.editorTheme}",
          "825:                   readOnly={this.props.readOnly}",
          "826:                   active={this.state.variableEditorActive}",
          "827:                 />",
          "828:                 {this.state.headerEditorEnabled && (",
          "829:                   <HeaderEditor",
          "830:                     active={this.state.headerEditorActive}",
          "832:                     onEdit={this.props.onEditHeaders}",
          "833:                     readOnly={this.props.readOnly}",
          "834:                     shouldPersistHeaders={this.props.shouldPersistHeaders}",
          "836:                 )}",
          "837:               </section>",
          "838:             </div>",
          "839:             <div className=\"resultWrap\">",
          "840:               {this.props.executionContext.isFetching && (",
          "841:                 <div className=\"spinner-container\">",
          "842:                   <div className=\"spinner\" />",
          "844:               )}",
          "845:               <ResultViewer",
          "846:                 value={this.props.response}",
          "847:                 editorTheme={this.props.editorTheme}",
          "848:                 ResponseTooltip={this.props.ResultsTooltip}",
          "849:               />",
          "850:               {footer}",
          "854:         {this.props.explorerContext?.isVisible && (",
          "855:           <div className={docExplorerWrapClasses} style={docWrapStyle}>",
          "856:             <div",
          "857:               className=\"docExplorerResizer\"",
          "858:               onDoubleClick={this.handleDocsResetResize}",
          "859:               onMouseDown={this.handleDocsResizeStart}",
          "861:             <DocExplorer />",
          "863:         )}",
          "",
          "[Added Lines]",
          "669:       <div data-testid=\"graphiql-container\" className=\"graphiql-container\">",
          "670:         <div ref={this.props.docResize.firstRef}>",
          "671:           {this.props.historyContext?.isVisible && (",
          "672:             <div",
          "673:               className=\"historyPaneWrap\"",
          "674:               style={{ width: '230px', zIndex: 7 }}>",
          "675:               <QueryHistory />",
          "677:           )}",
          "678:           <div className=\"editorWrap\">",
          "679:             <div className=\"topBarWrap\">",
          "680:               {this.props.beforeTopBarContent}",
          "681:               <div className=\"topBar\">",
          "682:                 {logo}",
          "683:                 <ExecuteButton />",
          "684:                 {toolbar}",
          "685:               </div>",
          "686:               {this.props.explorerContext &&",
          "687:                 !this.props.explorerContext.isVisible && (",
          "688:                   <button",
          "689:                     className=\"docExplorerShow\"",
          "690:                     onClick={() => {",
          "691:                       this.props.explorerContext?.show();",
          "692:                       this.props.docResize.setHiddenElement(null);",
          "693:                     }}",
          "694:                     aria-label=\"Open Documentation Explorer\">",
          "695:                     Docs",
          "696:                   </button>",
          "697:                 )}",
          "698:             </div>",
          "699:             {this.props.tabs ? (",
          "700:               <Tabs",
          "701:                 tabsProps={{",
          "702:                   'aria-label': 'Select active operation',",
          "703:                 }}>",
          "704:                 {this.props.editorContext.tabs.map((tab, index) => (",
          "705:                   <Tab",
          "706:                     key={tab.id}",
          "707:                     isActive={index === this.props.editorContext.activeTabIndex}",
          "708:                     title={tab.title}",
          "709:                     isCloseable={this.props.editorContext.tabs.length > 1}",
          "710:                     onSelect={() => {",
          "712:                       this.props.editorContext.changeTab(index);",
          "713:                     }}",
          "714:                     onClose={() => {",
          "715:                       if (this.props.editorContext.activeTabIndex === index) {",
          "716:                         this.props.executionContext.stop();",
          "717:                       }",
          "718:                       this.props.editorContext.closeTab(index);",
          "719:                     }}",
          "720:                     tabProps={{",
          "721:                       'aria-controls': 'sessionWrap',",
          "722:                       id: `session-tab-${index}`,",
          "723:                     }}",
          "724:                   />",
          "725:                 ))}",
          "726:                 <TabAddButton",
          "727:                   onClick={() => {",
          "728:                     this.props.editorContext.addTab();",
          "731:               </Tabs>",
          "732:             ) : null}",
          "733:             <div",
          "734:               role=\"tabpanel\"",
          "735:               id=\"sessionWrap\"",
          "736:               className=\"editorBar\"",
          "737:               aria-labelledby={`session-tab-${this.props.editorContext.activeTabIndex}`}>",
          "738:               <div ref={this.props.editorResize.firstRef}>",
          "739:                 <div className=\"queryWrap\">",
          "740:                   <div ref={this.props.secondaryEditorResize.firstRef}>",
          "741:                     <QueryEditor",
          "742:                       editorTheme={this.props.editorTheme}",
          "743:                       externalFragments={this.props.externalFragments}",
          "744:                       onClickReference={() => {",
          "745:                         if (this.props.docResize.hiddenElement === 'second') {",
          "746:                           this.props.docResize.setHiddenElement(null);",
          "747:                         }",
          "748:                       }}",
          "749:                       onCopyQuery={this.props.onCopyQuery}",
          "750:                       onEdit={this.props.onEditQuery}",
          "751:                       onEditOperationName={this.props.onEditOperationName}",
          "752:                       readOnly={this.props.readOnly}",
          "753:                       validationRules={this.props.validationRules}",
          "754:                     />",
          "756:                   <div ref={this.props.secondaryEditorResize.dragBarRef}>",
          "758:                       className=\"secondary-editor-title variable-editor-title\"",
          "759:                       id=\"secondary-editor-title\">",
          "760:                       <div",
          "761:                         className={`variable-editor-title-text${",
          "762:                           this.state.activeSecondaryEditor === 'variable'",
          "763:                             ? ' active'",
          "764:                             : ''",
          "765:                         }`}",
          "766:                         onClick={() => {",
          "767:                           if (",
          "768:                             this.props.secondaryEditorResize.hiddenElement ===",
          "769:                             'second'",
          "770:                           ) {",
          "771:                             this.props.secondaryEditorResize.setHiddenElement(",
          "772:                               null,",
          "773:                             );",
          "774:                           }",
          "775:                           this.setState(",
          "776:                             {",
          "777:                               activeSecondaryEditor: 'variable',",
          "778:                             },",
          "779:                             () => {",
          "780:                               this.props.editorContext.variableEditor?.refresh();",
          "781:                             },",
          "782:                           );",
          "783:                         }}>",
          "784:                         Query Variables",
          "785:                       </div>",
          "786:                       {this.props.headerEditorEnabled && (",
          "787:                         <div",
          "788:                           style={{",
          "789:                             marginLeft: '20px',",
          "790:                           }}",
          "791:                           className={`variable-editor-title-text${",
          "792:                             this.state.activeSecondaryEditor === 'header'",
          "793:                               ? ' active'",
          "794:                               : ''",
          "795:                           }`}",
          "796:                           onClick={() => {",
          "797:                             if (",
          "798:                               this.props.secondaryEditorResize.hiddenElement ===",
          "799:                               'second'",
          "800:                             ) {",
          "801:                               this.props.secondaryEditorResize.setHiddenElement(",
          "802:                                 null,",
          "803:                               );",
          "804:                             }",
          "805:                             this.setState(",
          "806:                               {",
          "807:                                 activeSecondaryEditor: 'header',",
          "808:                               },",
          "809:                               () => {",
          "810:                                 this.props.editorContext.headerEditor?.refresh();",
          "811:                               },",
          "812:                             );",
          "813:                           }}>",
          "814:                           Request Headers",
          "815:                         </div>",
          "816:                       )}",
          "818:                   </div>",
          "819:                   <div ref={this.props.secondaryEditorResize.secondRef}>",
          "820:                     <section",
          "821:                       className=\"variable-editor secondary-editor\"",
          "822:                       aria-label={",
          "823:                         this.state.activeSecondaryEditor === 'variable'",
          "824:                           ? 'Query Variables'",
          "825:                           : 'Request Headers'",
          "826:                       }>",
          "827:                       <VariableEditor",
          "828:                         onEdit={this.props.onEditVariables}",
          "829:                         editorTheme={this.props.editorTheme}",
          "830:                         readOnly={this.props.readOnly}",
          "831:                         active={this.state.activeSecondaryEditor === 'variable'}",
          "832:                       />",
          "833:                       {this.props.headerEditorEnabled && (",
          "834:                         <HeaderEditor",
          "835:                           active={this.state.activeSecondaryEditor === 'header'}",
          "836:                           editorTheme={this.props.editorTheme}",
          "837:                           onEdit={this.props.onEditHeaders}",
          "838:                           readOnly={this.props.readOnly}",
          "839:                           shouldPersistHeaders={this.props.shouldPersistHeaders}",
          "840:                         />",
          "841:                       )}",
          "842:                     </section>",
          "843:                   </div>",
          "845:               </div>",
          "846:               <div ref={this.props.editorResize.dragBarRef}>",
          "847:                 <div className=\"editor-drag-bar\" />",
          "848:               </div>",
          "849:               <div ref={this.props.editorResize.secondRef}>",
          "850:                 <div className=\"resultWrap\">",
          "851:                   {this.props.executionContext.isFetching && (",
          "852:                     <div className=\"spinner-container\">",
          "853:                       <div className=\"spinner\" />",
          "854:                     </div>",
          "855:                   )}",
          "856:                   <ResultViewer",
          "857:                     value={this.props.response}",
          "859:                     ResponseTooltip={this.props.ResultsTooltip}",
          "861:                   {footer}",
          "863:               </div>",
          "867:         <div ref={this.props.docResize.dragBarRef}>",
          "868:           <div className=\"docExplorerResizer\" />",
          "869:         </div>",
          "870:         <div ref={this.props.docResize.secondRef}>",
          "871:           <div className=\"docExplorerWrap\">",
          "872:             <DocExplorer",
          "873:               onClose={() => this.props.docResize.setHiddenElement('second')}",
          "876:         </div>",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "889:   public autoCompleteLeafs() {",
          "890:     return this.props.autoCompleteLeafs();",
          "891:   }",
          "1103: }",
          "",
          "[Removed Lines]",
          "895:   private handleResizeStart = (downEvent: React.MouseEvent) => {",
          "896:     if (!this._didClickDragBar(downEvent)) {",
          "897:       return;",
          "898:     }",
          "900:     downEvent.preventDefault();",
          "902:     const offset = downEvent.clientX - getLeft(downEvent.target as HTMLElement);",
          "904:     let onMouseMove: OnMouseMoveFn = moveEvent => {",
          "905:       if (moveEvent.buttons === 0) {",
          "906:         return onMouseUp!();",
          "907:       }",
          "909:       const editorBar = this.editorBarComponent as HTMLElement;",
          "910:       const leftSize = moveEvent.clientX - getLeft(editorBar) - offset;",
          "911:       const rightSize = editorBar.clientWidth - leftSize;",
          "912:       this.setState({ editorFlex: leftSize / rightSize });",
          "913:       debounce(500, () =>",
          "914:         this.props.storageContext?.set(",
          "915:           'editorFlex',",
          "916:           JSON.stringify(this.state.editorFlex),",
          "917:         ),",
          "918:       )();",
          "919:     };",
          "921:     let onMouseUp: OnMouseUpFn = () => {",
          "922:       document.removeEventListener('mousemove', onMouseMove!);",
          "923:       document.removeEventListener('mouseup', onMouseUp!);",
          "924:       onMouseMove = null;",
          "925:       onMouseUp = null;",
          "926:     };",
          "928:     document.addEventListener('mousemove', onMouseMove);",
          "929:     document.addEventListener('mouseup', onMouseUp);",
          "930:   };",
          "932:   handleResetResize = () => {",
          "933:     this.setState({ editorFlex: 1 });",
          "934:     this.props.storageContext?.set(",
          "935:       'editorFlex',",
          "936:       JSON.stringify(this.state.editorFlex),",
          "937:     );",
          "938:   };",
          "940:   private _didClickDragBar(event: React.MouseEvent) {",
          "942:     if (event.button !== 0 || event.ctrlKey) {",
          "943:       return false;",
          "944:     }",
          "945:     const target = event.target;",
          "946:     if (!(target instanceof Element)) {",
          "947:       return false;",
          "948:     }",
          "950:     if (target.className.indexOf('CodeMirror-gutter') !== 0) {",
          "951:       return false;",
          "952:     }",
          "954:     const resultWindow = target.closest('section');",
          "955:     return resultWindow ? resultWindow.id === RESULT_VIEWER_ID : false;",
          "956:   }",
          "958:   private handleDocsResizeStart: MouseEventHandler<",
          "959:     HTMLDivElement",
          "960:   > = downEvent => {",
          "961:     downEvent.preventDefault();",
          "963:     const hadWidth = this.state.docExplorerWidth;",
          "964:     const offset = downEvent.clientX - getLeft(downEvent.target as HTMLElement);",
          "966:     let onMouseMove: OnMouseMoveFn = moveEvent => {",
          "967:       if (moveEvent.buttons === 0) {",
          "968:         return onMouseUp!();",
          "969:       }",
          "971:       const app = this.graphiqlContainer as HTMLElement;",
          "972:       const cursorPos = moveEvent.clientX - getLeft(app) - offset;",
          "973:       const docsSize = app.clientWidth - cursorPos;",
          "975:       if (docsSize < 100) {",
          "976:         this.props.explorerContext?.hide();",
          "977:       } else {",
          "978:         this.props.explorerContext?.show();",
          "979:         this.setState({ docExplorerWidth: Math.min(docsSize, 650) });",
          "980:         debounce(500, () =>",
          "981:           this.props.storageContext?.set(",
          "982:             'docExplorerWidth',",
          "983:             JSON.stringify(this.state.docExplorerWidth),",
          "984:           ),",
          "985:         )();",
          "986:       }",
          "987:     };",
          "989:     let onMouseUp: OnMouseUpFn = () => {",
          "990:       if (this.props.explorerContext && !this.props.explorerContext.isVisible) {",
          "991:         this.setState({ docExplorerWidth: hadWidth });",
          "992:         debounce(500, () =>",
          "993:           this.props.storageContext?.set(",
          "994:             'docExplorerWidth',",
          "995:             JSON.stringify(this.state.docExplorerWidth),",
          "996:           ),",
          "997:         )();",
          "998:       }",
          "1000:       document.removeEventListener('mousemove', onMouseMove!);",
          "1001:       document.removeEventListener('mouseup', onMouseUp!);",
          "1002:       onMouseMove = null;",
          "1003:       onMouseUp = null;",
          "1004:     };",
          "1006:     document.addEventListener('mousemove', onMouseMove!);",
          "1007:     document.addEventListener('mouseup', onMouseUp);",
          "1008:   };",
          "1010:   private handleDocsResetResize = () => {",
          "1011:     this.setState({",
          "1012:       docExplorerWidth: DEFAULT_DOC_EXPLORER_WIDTH,",
          "1013:     });",
          "1014:     debounce(500, () =>",
          "1015:       this.props.storageContext?.set(",
          "1016:         'docExplorerWidth',",
          "1017:         JSON.stringify(this.state.docExplorerWidth),",
          "1018:       ),",
          "1019:     )();",
          "1020:   };",
          "1023:   private handleTabClickPropagation: MouseEventHandler<",
          "1024:     HTMLDivElement",
          "1025:   > = downEvent => {",
          "1026:     downEvent.preventDefault();",
          "1027:     downEvent.stopPropagation();",
          "1028:   };",
          "1030:   private handleOpenHeaderEditorTab: MouseEventHandler<",
          "1031:     HTMLDivElement",
          "1032:   > = _clickEvent => {",
          "1033:     this.setState({",
          "1034:       headerEditorActive: true,",
          "1035:       variableEditorActive: false,",
          "1036:       secondaryEditorOpen: true,",
          "1037:     });",
          "1038:   };",
          "1040:   private handleOpenVariableEditorTab: MouseEventHandler<",
          "1041:     HTMLDivElement",
          "1042:   > = _clickEvent => {",
          "1043:     this.setState({",
          "1044:       headerEditorActive: false,",
          "1045:       variableEditorActive: true,",
          "1046:       secondaryEditorOpen: true,",
          "1047:     });",
          "1048:   };",
          "1050:   private handleSecondaryEditorResizeStart: MouseEventHandler<",
          "1051:     HTMLDivElement",
          "1052:   > = downEvent => {",
          "1053:     downEvent.preventDefault();",
          "1055:     let didMove = false;",
          "1056:     const wasOpen = this.state.secondaryEditorOpen;",
          "1057:     const hadHeight = this.state.secondaryEditorHeight;",
          "1058:     const offset = downEvent.clientY - getTop(downEvent.target as HTMLElement);",
          "1060:     let onMouseMove: OnMouseMoveFn = moveEvent => {",
          "1061:       if (moveEvent.buttons === 0) {",
          "1062:         return onMouseUp!();",
          "1063:       }",
          "1065:       didMove = true;",
          "1067:       const editorBar = this.editorBarComponent as HTMLElement;",
          "1068:       const topSize = moveEvent.clientY - getTop(editorBar) - offset;",
          "1069:       const bottomSize = editorBar.clientHeight - topSize;",
          "1070:       if (bottomSize < 60) {",
          "1071:         this.setState({",
          "1072:           secondaryEditorOpen: false,",
          "1073:           secondaryEditorHeight: hadHeight,",
          "1074:         });",
          "1075:       } else {",
          "1076:         this.setState({",
          "1077:           secondaryEditorOpen: true,",
          "1078:           secondaryEditorHeight: bottomSize,",
          "1079:         });",
          "1080:       }",
          "1081:       debounce(500, () =>",
          "1082:         this.props.storageContext?.set(",
          "1083:           'secondaryEditorHeight',",
          "1084:           JSON.stringify(this.state.secondaryEditorHeight),",
          "1085:         ),",
          "1086:       )();",
          "1087:     };",
          "1089:     let onMouseUp: OnMouseUpFn = () => {",
          "1090:       if (!didMove) {",
          "1091:         this.setState({ secondaryEditorOpen: !wasOpen });",
          "1092:       }",
          "1094:       document.removeEventListener('mousemove', onMouseMove!);",
          "1095:       document.removeEventListener('mouseup', onMouseUp!);",
          "1096:       onMouseMove = null;",
          "1097:       onMouseUp = null;",
          "1098:     };",
          "1100:     document.addEventListener('mousemove', onMouseMove);",
          "1101:     document.addEventListener('mouseup', onMouseUp);",
          "1102:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ResultViewer.tsx||packages/graphiql/src/components/ResultViewer.tsx": [
          "File: packages/graphiql/src/components/ResultViewer.tsx -> packages/graphiql/src/components/ResultViewer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { useResponseEditor, UseResponseEditorArgs } from '@graphiql/react';",
          "9: import React from 'react';",
          "",
          "[Removed Lines]",
          "11: export const RESULT_VIEWER_ID = 'graphiql-result-viewer';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:   const ref = useResponseEditor(props);",
          "21:   return (",
          "22:     <section",
          "24:       className=\"result-window\"",
          "25:       aria-label=\"Result Window\"",
          "26:       aria-live=\"polite\"",
          "",
          "[Removed Lines]",
          "23:       id={RESULT_VIEWER_ID}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   });",
          "131:   it('defaults to closed docExplorer', () => {",
          "132:     const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "134:   });",
          "136:   it('accepts a defaultVariableEditorOpen param', () => {",
          "",
          "[Removed Lines]",
          "133:     expect(container.querySelector('.docExplorerWrap')).not.toBeInTheDocument();",
          "",
          "[Added Lines]",
          "133:     expect(container.querySelector('.docExplorerWrap')).not.toBeVisible();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:     );",
          "140:     const queryVariables = container1.querySelector('.variable-editor');",
          "144:     const secondaryEditorTitle = container1.querySelector(",
          "145:       '#secondary-editor-title',",
          "146:     );",
          "147:     fireEvent.mouseDown(secondaryEditorTitle);",
          "151:     const { container: container2 } = render(",
          "152:       <GraphiQL fetcher={noOpFetcher} defaultVariableEditorOpen />,",
          "153:     );",
          "154:     expect(",
          "158:     const { container: container3 } = render(",
          "159:       <GraphiQL",
          "",
          "[Removed Lines]",
          "142:     expect(queryVariables.style.height).toEqual('');",
          "148:     fireEvent.mouseMove(secondaryEditorTitle);",
          "149:     expect(queryVariables.style.height).toEqual('200px');",
          "155:       container2.querySelector('[aria-label=\"Query Variables\"]')?.style.height,",
          "156:     ).toEqual('200px');",
          "",
          "[Added Lines]",
          "142:     expect(queryVariables).not.toBeVisible();",
          "148:     fireEvent.mouseMove(secondaryEditorTitle, { buttons: 1, clientY: 50 });",
          "149:     expect(queryVariables).toBeVisible();",
          "155:       container2.querySelector('[aria-label=\"Query Variables\"]'),",
          "156:     ).toBeVisible();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:       />,",
          "164:     );",
          "165:     const queryVariables3 = container3.querySelector('.variable-editor');",
          "167:   });",
          "169:   it('defaults to closed history panel', () => {",
          "",
          "[Removed Lines]",
          "166:     expect(queryVariables3?.style.height).toEqual('');",
          "",
          "[Added Lines]",
          "166:     expect(queryVariables3).not.toBeVisible();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490:   });",
          "492:   it('readjusts the query wrapper flex style field when the result panel is resized', async () => {",
          "494:       .spyOn(Element.prototype, 'clientWidth', 'get')",
          "497:     const { container } = render(<GraphiQL fetcher={noOpFetcher} />);",
          "499:     await wait();",
          "504:     const queryWrap = container.querySelector('.queryWrap');",
          "507:       button: 0,",
          "508:       ctrlKey: false,",
          "509:     });",
          "512:       buttons: 1,",
          "513:       clientX: 700,",
          "514:     });",
          "521:   });",
          "523:   it('allows for resizing the doc explorer correctly', () => {",
          "525:       .spyOn(Element.prototype, 'clientWidth', 'get')",
          "528:     const { container, getByLabelText } = render(",
          "529:       <GraphiQL fetcher={noOpFetcher} />,",
          "",
          "[Removed Lines]",
          "493:     const spy = jest",
          "495:       .mockReturnValue(900);",
          "501:     const codeMirrorGutter = container.querySelector(",
          "502:       '.result-window .CodeMirror-gutter',",
          "503:     );",
          "506:     fireEvent.mouseDown(codeMirrorGutter, {",
          "511:     fireEvent.mouseMove(codeMirrorGutter, {",
          "516:     fireEvent.mouseUp(codeMirrorGutter);",
          "518:     expect(queryWrap.style.flex).toEqual('3.5');",
          "520:     spy.mockRestore();",
          "524:     const spy = jest",
          "526:       .mockReturnValue(1200);",
          "",
          "[Added Lines]",
          "494:     const clientWitdhSpy = jest",
          "496:       .mockReturnValue(0);",
          "498:     const boundingClientRectSpy = jest",
          "499:       .spyOn(Element.prototype, 'getBoundingClientRect')",
          "500:       .mockReturnValue({ left: 0, right: 900 });",
          "506:     const dragBar = container.querySelector('.editor-drag-bar');",
          "509:     fireEvent.mouseDown(dragBar, {",
          "514:     fireEvent.mouseMove(dragBar, {",
          "519:     fireEvent.mouseUp(dragBar);",
          "522:     expect(queryWrap.parentElement.style.flex).toEqual('3.5');",
          "524:     clientWitdhSpy.mockRestore();",
          "525:     boundingClientRectSpy.mockRestore();",
          "530:     const clientWidthSpy = jest",
          "532:       .mockReturnValue(0);",
          "534:     const boundingClientRectSpy = jest",
          "535:       .spyOn(Element.prototype, 'getBoundingClientRect')",
          "536:       .mockReturnValue({ left: 0, right: 1200 });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "546:     fireEvent.mouseUp(docExplorerResizer);",
          "553:   });",
          "555:   describe('Tabs', () => {",
          "",
          "[Removed Lines]",
          "548:     expect(container.querySelector('.docExplorerWrap').style.width).toBe(",
          "549:       '403px',",
          "550:     );",
          "552:     spy.mockRestore();",
          "",
          "[Added Lines]",
          "559:     expect(",
          "560:       container.querySelector('.editorWrap').parentElement.style.flex,",
          "561:     ).toBe('1.977667493796526');",
          "563:     clientWidthSpy.mockRestore();",
          "564:     boundingClientRectSpy.mockRestore();",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/app.css||packages/graphiql/src/css/app.css": [
          "File: packages/graphiql/src/css/app.css -> packages/graphiql/src/css/app.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "108: .graphiql-container .resultWrap {",
          "110:   display: flex;",
          "111:   flex-direction: column;",
          "112:   flex: 1;",
          "",
          "[Removed Lines]",
          "109:   border-left: solid 1px #e0e0e0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   background: white;",
          "120:   box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);",
          "121:   position: relative;",
          "122:   z-index: 3;",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   width: 100%;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130: .graphiql-container .docExplorerResizer {",
          "131:   cursor: col-resize;",
          "132:   height: 100%;",
          "134:   position: absolute;",
          "136:   width: 10px;",
          "137:   z-index: 10;",
          "138: }",
          "",
          "[Removed Lines]",
          "133:   left: -5px;",
          "135:   top: 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155: .graphiql-container .secondary-editor {",
          "156:   display: flex;",
          "157:   flex-direction: column;",
          "159:   position: relative;",
          "160: }",
          "",
          "[Removed Lines]",
          "158:   height: 30px;",
          "",
          "[Added Lines]",
          "156:   height: 100%;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164:   border-bottom: 1px solid #d6d6d6;",
          "165:   border-top: 1px solid #e0e0e0;",
          "166:   color: #777;",
          "167:   font-variant: small-caps;",
          "168:   font-weight: bold;",
          "169:   letter-spacing: 1px;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   cursor: row-resize;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "209: }",
          "211: .graphiql-container .result-window .CodeMirror-gutters {",
          "212:   background-color: #eeeeee;",
          "214:   cursor: col-resize;",
          "215: }",
          "",
          "[Removed Lines]",
          "213:   border-color: #e0e0e0;",
          "",
          "[Added Lines]",
          "211:   background-color: #f6f7f8;",
          "212:   border: none;",
          "213: }",
          "215: .editor-drag-bar {",
          "216:   width: 12px;",
          "218:   border-left: 1px solid #e0e0e0;",
          "219:   border-right: 1px solid #e0e0e0;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/css/doc-explorer.css||packages/graphiql/src/css/doc-explorer.css": [
          "File: packages/graphiql/src/css/doc-explorer.css -> packages/graphiql/src/css/doc-explorer.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   line-height: 14px;",
          "39: }",
          "45: .graphiql-container .doc-explorer-back:before {",
          "46:   border-left: 2px solid #3b5998;",
          "47:   border-top: 2px solid #3b5998;",
          "",
          "[Removed Lines]",
          "41: .doc-explorer-narrow .doc-explorer-back {",
          "42:   width: 0;",
          "43: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:   top: 47px;",
          "72: }",
          "78: .graphiql-container .doc-type-description p:first-child,",
          "79: .graphiql-container .doc-type-description blockquote:first-child {",
          "80:   margin-top: 0;",
          "",
          "[Removed Lines]",
          "74: .graphiql-container .doc-explorer-contents {",
          "75:   min-width: 300px;",
          "76: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/elementPosition.ts||packages/graphiql/src/utility/elementPosition.ts": [
          "File: packages/graphiql/src/utility/elementPosition.ts -> packages/graphiql/src/utility/elementPosition.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee0fd8bf4042053ec647080b83656dc5e54a7239",
      "candidate_info": {
        "commit_hash": "ee0fd8bf4042053ec647080b83656dc5e54a7239",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/ee0fd8bf4042053ec647080b83656dc5e54a7239",
        "files": [
          ".changeset/heavy-kangaroos-live.md",
          "packages/graphiql-react/src/editor/__tests__/tabs.spec.ts",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/tabs.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "packages/graphiql/src/utility/guid.ts",
          "packages/graphiql/src/utility/id-from-tab-contents.ts"
        ],
        "message": "move tab state to editor context (#2452)",
        "before_after_code_files": [
          "packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts||packages/graphiql-react/src/editor/__tests__/tabs.spec.ts",
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/tabs.ts||packages/graphiql-react/src/editor/tabs.ts",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts||packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "packages/graphiql/src/utility/guid.ts||packages/graphiql/src/utility/guid.ts",
          "packages/graphiql/src/utility/id-from-tab-contents.ts||packages/graphiql/src/utility/id-from-tab-contents.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts||packages/graphiql-react/src/editor/__tests__/tabs.spec.ts": [
          "File: packages/graphiql/src/utility/__tests__/fuzzyExtractOperationTitle.spec.ts -> packages/graphiql-react/src/editor/__tests__/tabs.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: describe('fuzzyExtractionOperationTitle', () => {",
          "4:   describe('without prefix', () => {",
          "5:     it('should extract query names', () => {",
          "7:         'MyExampleQuery',",
          "8:       );",
          "9:     });",
          "10:     it('should extract query names with special characters', () => {",
          "12:         'My_ExampleQuery',",
          "13:       );",
          "14:     });",
          "15:     it('should extract query names with numbers', () => {",
          "17:         'My_3xampleQuery',",
          "18:       );",
          "19:     });",
          "20:     it('should extract mutation names with numbers', () => {",
          "21:       expect(",
          "23:       ).toEqual('My_3xampleQuery');",
          "24:     });",
          "25:   });",
          "26:   describe('with space prefix', () => {",
          "27:     it('should extract query names', () => {",
          "29:         'MyExampleQuery',",
          "30:       );",
          "31:     });",
          "32:     it('should extract query names with special characters', () => {",
          "34:         'My_ExampleQuery',",
          "35:       );",
          "36:     });",
          "37:     it('should extract query names with numbers', () => {",
          "39:         'My_3xampleQuery',",
          "40:       );",
          "41:     });",
          "42:     it('should extract mutation names with numbers', () => {",
          "43:       expect(",
          "45:       ).toEqual('My_3xampleQuery');",
          "46:     });",
          "47:   });",
          "49:   it('should return null for anonymous queries', () => {",
          "51:   });",
          "52:   it('should not extract query names with comments', () => {",
          "56:   });",
          "57: });",
          "",
          "[Removed Lines]",
          "1: import { fuzzyExtractOperationTitle } from '../fuzzyExtractOperationTitle';",
          "6:       expect(fuzzyExtractOperationTitle('query MyExampleQuery() {}')).toEqual(",
          "11:       expect(fuzzyExtractOperationTitle('query My_ExampleQuery() {}')).toEqual(",
          "16:       expect(fuzzyExtractOperationTitle('query My_3xampleQuery() {}')).toEqual(",
          "22:         fuzzyExtractOperationTitle('mutation My_3xampleQuery() {}'),",
          "28:       expect(fuzzyExtractOperationTitle(' query MyExampleQuery() {}')).toEqual(",
          "33:       expect(fuzzyExtractOperationTitle(' query My_ExampleQuery() {}')).toEqual(",
          "38:       expect(fuzzyExtractOperationTitle(' query My_3xampleQuery() {}')).toEqual(",
          "44:         fuzzyExtractOperationTitle(' mutation My_3xampleQuery() {}'),",
          "50:     expect(fuzzyExtractOperationTitle('{}')).toEqual('<untitled>');",
          "53:     expect(fuzzyExtractOperationTitle('# query My_3xampleQuery() {}')).toEqual(",
          "54:       '<untitled>',",
          "55:     );",
          "",
          "[Added Lines]",
          "1: import { fuzzyExtractOperationName } from '../tabs';",
          "6:       expect(fuzzyExtractOperationName('query MyExampleQuery() {}')).toEqual(",
          "11:       expect(fuzzyExtractOperationName('query My_ExampleQuery() {}')).toEqual(",
          "16:       expect(fuzzyExtractOperationName('query My_3xampleQuery() {}')).toEqual(",
          "22:         fuzzyExtractOperationName('mutation My_3xampleQuery() {}'),",
          "28:       expect(fuzzyExtractOperationName(' query MyExampleQuery() {}')).toEqual(",
          "33:       expect(fuzzyExtractOperationName(' query My_ExampleQuery() {}')).toEqual(",
          "38:       expect(fuzzyExtractOperationName(' query My_3xampleQuery() {}')).toEqual(",
          "44:         fuzzyExtractOperationName(' mutation My_3xampleQuery() {}'),",
          "50:     expect(fuzzyExtractOperationName('{}')).toBeNull();",
          "53:     expect(",
          "54:       fuzzyExtractOperationName('# query My_3xampleQuery() {}'),",
          "55:     ).toBeNull();",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { DocumentNode, OperationDefinitionNode } from 'graphql';",
          "2: import { VariableToType } from 'graphql-language-service';",
          "5: import { useStorageContext } from '../storage';",
          "6: import { createContextHook, createNullableContext } from '../utility/context';",
          "7: import { STORAGE_KEY as STORAGE_KEY_HEADERS } from './header-editor';",
          "8: import { useSynchronizeValue } from './hooks';",
          "9: import { STORAGE_KEY_QUERY } from './query-editor';",
          "10: import { CodeMirrorEditor } from './types';",
          "11: import { STORAGE_KEY as STORAGE_KEY_VARIABLES } from './variable-editor';",
          "",
          "[Removed Lines]",
          "3: import { ReactNode, useMemo, useState } from 'react';",
          "",
          "[Added Lines]",
          "3: import { ReactNode, useCallback, useMemo, useRef, useState } from 'react';",
          "10: import {",
          "11:   emptyTab,",
          "12:   getDefaultTabState,",
          "13:   setPropertiesInActiveTab,",
          "14:   TabsState,",
          "15:   TabState,",
          "16:   useSetEditorValues,",
          "17:   useStoreTabs,",
          "18:   useSynchronizeActiveTabValues,",
          "19: } from './tabs';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: };",
          "20: export type EditorContextType = {",
          "21:   headerEditor: CodeMirrorEditor | null;",
          "22:   queryEditor: CodeMirrorEditorWithOperationFacts | null;",
          "23:   responseEditor: CodeMirrorEditor | null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:   activeTabIndex: number;",
          "32:   tabs: TabState[];",
          "33:   addTab(): void;",
          "34:   changeTab(index: number): void;",
          "35:   closeTab(index: number): void;",
          "36:   updateActiveTabValues(",
          "37:     partialTab: Partial<Omit<TabState, 'id' | 'hash' | 'title'>>,",
          "38:   ): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:   children: ReactNode;",
          "40:   defaultQuery?: string;",
          "41:   headers?: string;",
          "42:   query?: string;",
          "43:   variables?: string;",
          "44: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:   onTabChange?(tabs: TabsState): void;",
          "64:   shouldPersistHeaders?: boolean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   }));",
          "79:   const value = useMemo<EditorContextType>(",
          "80:     () => ({",
          "81:       headerEditor,",
          "82:       queryEditor,",
          "83:       responseEditor,",
          "",
          "[Removed Lines]",
          "68:   const [initialValues] = useState(() => ({",
          "69:     initialHeaders: props.headers ?? storage?.get(STORAGE_KEY_HEADERS) ?? '',",
          "70:     initialQuery:",
          "71:       props.query ??",
          "72:       storage?.get(STORAGE_KEY_QUERY) ??",
          "73:       props.defaultQuery ??",
          "74:       DEFAULT_QUERY,",
          "75:     initialVariables:",
          "76:       props.variables ?? storage?.get(STORAGE_KEY_VARIABLES) ?? '',",
          "",
          "[Added Lines]",
          "90:   const [storedEditorValues] = useState(() => ({",
          "91:     headers: props.headers ?? storage?.get(STORAGE_KEY_HEADERS) ?? null,",
          "92:     query: props.query ?? storage?.get(STORAGE_KEY_QUERY) ?? null,",
          "93:     variables: props.variables ?? storage?.get(STORAGE_KEY_VARIABLES) ?? null,",
          "96:   const [tabState, setTabState] = useState<TabsState>(() =>",
          "97:     getDefaultTabState({ ...storedEditorValues, storage }),",
          "98:   );",
          "100:   const storeTabs = useStoreTabs({",
          "101:     storage,",
          "102:     shouldPersistHeaders: props.shouldPersistHeaders,",
          "103:   });",
          "104:   const synchronizeActiveTabValues = useSynchronizeActiveTabValues({",
          "105:     queryEditor,",
          "106:     variableEditor,",
          "107:     headerEditor,",
          "108:     responseEditor,",
          "109:   });",
          "110:   const setEditorValues = useSetEditorValues({",
          "111:     queryEditor,",
          "112:     variableEditor,",
          "113:     headerEditor,",
          "114:     responseEditor,",
          "115:   });",
          "116:   const { onTabChange } = props;",
          "118:   const addTab = useCallback<EditorContextType['addTab']>(() => {",
          "119:     setTabState(current => {",
          "121:       const updatedValues = synchronizeActiveTabValues(current);",
          "122:       const updated = {",
          "123:         tabs: [...updatedValues.tabs, emptyTab()],",
          "124:         activeTabIndex: updatedValues.tabs.length,",
          "125:       };",
          "126:       storeTabs(updated);",
          "127:       setEditorValues(updated.tabs[updated.activeTabIndex]);",
          "128:       onTabChange?.(updated);",
          "129:       return updated;",
          "130:     });",
          "131:   }, [onTabChange, setEditorValues, storeTabs, synchronizeActiveTabValues]);",
          "133:   const changeTab = useCallback<EditorContextType['changeTab']>(",
          "134:     index => {",
          "135:       setTabState(current => {",
          "136:         const updated = {",
          "137:           ...synchronizeActiveTabValues(current),",
          "138:           activeTabIndex: index,",
          "139:         };",
          "140:         storeTabs(updated);",
          "141:         setEditorValues(updated.tabs[updated.activeTabIndex]);",
          "142:         onTabChange?.(updated);",
          "143:         return updated;",
          "144:       });",
          "145:     },",
          "146:     [onTabChange, setEditorValues, storeTabs, synchronizeActiveTabValues],",
          "147:   );",
          "149:   const closeTab = useCallback<EditorContextType['closeTab']>(",
          "150:     index => {",
          "151:       setTabState(current => {",
          "152:         const updated = {",
          "153:           tabs: current.tabs.filter((_tab, i) => index !== i),",
          "154:           activeTabIndex: Math.max(current.activeTabIndex - 1, 0),",
          "155:         };",
          "156:         storeTabs(updated);",
          "157:         setEditorValues(updated.tabs[updated.activeTabIndex]);",
          "158:         onTabChange?.(updated);",
          "159:         return updated;",
          "160:       });",
          "161:     },",
          "162:     [onTabChange, setEditorValues, storeTabs],",
          "163:   );",
          "165:   const updateActiveTabValues = useCallback<",
          "166:     EditorContextType['updateActiveTabValues']",
          "167:   >(",
          "168:     partialTab => {",
          "169:       setTabState(current => {",
          "170:         const updated = setPropertiesInActiveTab(current, partialTab);",
          "171:         storeTabs(updated);",
          "172:         onTabChange?.(updated);",
          "173:         return updated;",
          "174:       });",
          "175:     },",
          "176:     [onTabChange, storeTabs],",
          "177:   );",
          "179:   const defaultQuery =",
          "180:     tabState.activeTabIndex > 0 ? '' : props.defaultQuery ?? DEFAULT_QUERY;",
          "181:   const initialValues = useRef({",
          "182:     initialHeaders: storedEditorValues.headers ?? '',",
          "183:     initialQuery: storedEditorValues.query ?? defaultQuery,",
          "184:     initialVariables: storedEditorValues.variables ?? '',",
          "185:   });",
          "189:       ...tabState,",
          "190:       addTab,",
          "191:       changeTab,",
          "192:       closeTab,",
          "193:       updateActiveTabValues,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "86:       setQueryEditor,",
          "87:       setResponseEditor,",
          "88:       setVariableEditor,",
          "90:     }),",
          "92:   );",
          "94:   return (",
          "",
          "[Removed Lines]",
          "89:       ...initialValues,",
          "91:     [headerEditor, initialValues, queryEditor, responseEditor, variableEditor],",
          "",
          "[Added Lines]",
          "204:       ...initialValues.current,",
          "206:     [",
          "207:       tabState,",
          "208:       addTab,",
          "209:       changeTab,",
          "210:       closeTab,",
          "211:       updateActiveTabValues,",
          "213:       headerEditor,",
          "214:       queryEditor,",
          "215:       responseEditor,",
          "216:       variableEditor,",
          "217:     ],",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     headerEditor,",
          "109:     onEdit,",
          "110:     shouldPersistHeaders ? STORAGE_KEY : null,",
          "111:   );",
          "113:   useCompletion(headerEditor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     'headers',",
          "112:     useHeaderEditor,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:   editor: CodeMirrorEditor | null,",
          "30:   callback: EditCallback | undefined,",
          "31:   storageKey: string | null,",
          "32: ) {",
          "33:   const storage = useStorageContext();",
          "34:   useEffect(() => {",
          "35:     if (!editor) {",
          "36:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:   tabProperty: 'variables' | 'headers',",
          "33:   caller: Function,",
          "35:   const { updateActiveTabValues } = useEditorContext({ nonNull: true, caller });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:       storage.set(storageKey, value);",
          "44:     });",
          "46:     const handleChange = (editorInstance: CodeMirrorEditor) => {",
          "47:       const newValue = editorInstance.getValue();",
          "49:       store(newValue);",
          "50:     };",
          "51:     editor.on('change', handleChange);",
          "52:     return () => editor.off('change', handleChange);",
          "54: }",
          "56: export function useCompletion(editor: CodeMirrorEditor | null) {",
          "",
          "[Removed Lines]",
          "48:       callback?.(newValue);",
          "53:   }, [callback, editor, storage, storageKey]);",
          "",
          "[Added Lines]",
          "50:     const updateTab = debounce(100, (value: string) => {",
          "51:       updateActiveTabValues({ [tabProperty]: value });",
          "52:     });",
          "57:       updateTab(newValue);",
          "58:       callback?.(newValue);",
          "62:   }, [",
          "63:     callback,",
          "64:     editor,",
          "65:     storage,",
          "66:     storageKey,",
          "67:     tabProperty,",
          "68:     updateActiveTabValues,",
          "69:   ]);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/index.ts||packages/graphiql-react/src/editor/index.ts": [
          "File: packages/graphiql-react/src/editor/index.ts -> packages/graphiql-react/src/editor/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   ResponseTooltipType,",
          "24:   UseResponseEditorArgs,",
          "25: } from './response-editor';",
          "26: import type { UseVariableEditorArgs } from './variable-editor';",
          "28: export {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import type { TabsState } from './tabs';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: export type {",
          "45:   EditorContextType,",
          "46:   ResponseTooltipType,",
          "47:   UseHeaderEditorArgs,",
          "48:   UseQueryEditorArgs,",
          "49:   UseResponseEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   TabsState,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import type { SchemaReference } from 'codemirror-graphql/utils/SchemaReference';",
          "3: import type {",
          "4:   FragmentDefinitionNode,",
          "",
          "[Removed Lines]",
          "1: import { getSelectedOperationName } from '@graphiql/toolkit';",
          "",
          "[Added Lines]",
          "1: import { getSelectedOperationName, StorageAPI } from '@graphiql/toolkit';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     queryEditor,",
          "65:     setQueryEditor,",
          "66:     variableEditor,",
          "67:   } = useEditorContext({",
          "68:     nonNull: true,",
          "69:     caller: useQueryEditor,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     updateActiveTabValues,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:         schema,",
          "234:         editorInstance.getValue(),",
          "235:       );",
          "241:       const operationName = getSelectedOperationName(",
          "242:         editorInstance.operations ?? undefined,",
          "243:         editorInstance.operationName ?? undefined,",
          "245:       );",
          "249:       editorInstance.operationName = operationName ?? null;",
          "254:       if (variableEditor) {",
          "255:         variableEditor.state.lint.linterOptions.variableToType =",
          "257:         variableEditor.options.lint.variableToType =",
          "259:         variableEditor.options.hintOptions.variableToType =",
          "261:         codeMirrorRef.current?.signal(variableEditor, 'change', variableEditor);",
          "262:       }",
          "265:     }",
          "267:     const handleChange = debounce(",
          "268:       100,",
          "270:         const query = editorInstance.getValue();",
          "271:         storage?.set(STORAGE_KEY_QUERY, query);",
          "",
          "[Removed Lines]",
          "236:       if (!operationFacts) {",
          "237:         return;",
          "238:       }",
          "244:         operationFacts.operations,",
          "248:       editorInstance.documentAST = operationFacts.documentAST;",
          "250:       editorInstance.operations = operationFacts.operations;",
          "251:       editorInstance.variableToType = operationFacts.variableToType ?? null;",
          "256:           operationFacts.variableToType;",
          "258:           operationFacts.variableToType;",
          "260:           operationFacts.variableToType;",
          "264:       return { ...operationFacts, operationName };",
          "269:       (editorInstance: CodeMirrorEditorWithOperationFacts, change: any) => {",
          "",
          "[Added Lines]",
          "242:         operationFacts?.operations,",
          "246:       editorInstance.documentAST = operationFacts?.documentAST ?? null;",
          "248:       editorInstance.operations = operationFacts?.operations ?? null;",
          "249:       editorInstance.variableToType = operationFacts?.variableToType ?? null;",
          "254:           operationFacts?.variableToType;",
          "256:           operationFacts?.variableToType;",
          "258:           operationFacts?.variableToType;",
          "262:       return operationFacts ? { ...operationFacts, operationName } : null;",
          "267:       (editorInstance: CodeMirrorEditorWithOperationFacts) => {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "287:         ) {",
          "288:           onEditOperationName(operationFacts.operationName);",
          "289:         }",
          "290:       },",
          "291:     ) as (editorInstance: CodeMirrorEditor) => void;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:         updateActiveTabValues({",
          "290:           query,",
          "291:           operationName: operationFacts?.operationName ?? null,",
          "292:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "302:     schema,",
          "303:     storage,",
          "304:     variableEditor,",
          "305:   ]);",
          "307:   useSynchronizeSchema(queryEditor, schema ?? null, codeMirrorRef);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:     updateActiveTabValues,",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/tabs.ts||packages/graphiql-react/src/editor/tabs.ts": [
          "File: packages/graphiql-react/src/editor/tabs.ts -> packages/graphiql-react/src/editor/tabs.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { StorageAPI } from '@graphiql/toolkit';",
          "2: import { useCallback } from 'react';",
          "4: import debounce from '../utility/debounce';",
          "5: import { CodeMirrorEditorWithOperationFacts } from './context';",
          "6: import { CodeMirrorEditor } from './types';",
          "8: export type TabState = {",
          "9:   id: string;",
          "10:   hash: string;",
          "11:   title: string;",
          "12:   query: string | null;",
          "13:   variables: string | null;",
          "14:   headers: string | null;",
          "15:   operationName: string | null;",
          "16:   response: string | null;",
          "17: };",
          "19: export type TabsState = {",
          "20:   tabs: TabState[];",
          "21:   activeTabIndex: number;",
          "22: };",
          "24: export function getDefaultTabState({",
          "25:   headers,",
          "26:   query,",
          "27:   variables,",
          "28:   storage,",
          "29: }: {",
          "30:   headers: string | null;",
          "31:   query: string | null;",
          "32:   variables: string | null;",
          "33:   storage: StorageAPI | null;",
          "34: }) {",
          "35:   const storedState = storage?.get(STORAGE_KEY);",
          "36:   try {",
          "37:     if (!storedState) {",
          "38:       throw new Error('Storage for tabs is empty');",
          "39:     }",
          "40:     const parsed = JSON.parse(storedState);",
          "41:     if (isTabsState(parsed)) {",
          "42:       const expectedHash = hashFromTabContents({ query, variables, headers });",
          "43:       let matchingTabIndex = -1;",
          "45:       for (let index = 0; index < parsed.tabs.length; index++) {",
          "46:         const tab = parsed.tabs[index];",
          "47:         tab.hash = hashFromTabContents({",
          "48:           query: tab.query,",
          "49:           variables: tab.variables,",
          "50:           headers: tab.headers,",
          "51:         });",
          "52:         if (tab.hash === expectedHash) {",
          "53:           matchingTabIndex = index;",
          "54:         }",
          "55:       }",
          "57:       if (matchingTabIndex >= 0) {",
          "58:         parsed.activeTabIndex = matchingTabIndex;",
          "59:       } else {",
          "60:         const operationName = query ? fuzzyExtractOperationName(query) : null;",
          "61:         parsed.tabs.push({",
          "62:           id: guid(),",
          "63:           hash: expectedHash,",
          "64:           title: operationName || DEFAULT_TITLE,",
          "65:           query,",
          "66:           variables,",
          "67:           headers,",
          "68:           operationName,",
          "69:           response: null,",
          "70:         });",
          "71:       }",
          "73:       return parsed;",
          "74:     } else {",
          "75:       throw new Error('Storage for tabs is invalid');",
          "76:     }",
          "77:   } catch (err) {",
          "78:     storage?.set(STORAGE_KEY, '');",
          "79:     return { activeTabIndex: 0, tabs: [emptyTab()] };",
          "80:   }",
          "81: }",
          "83: function isTabsState(obj: any): obj is TabsState {",
          "84:   return (",
          "85:     obj &&",
          "86:     typeof obj === 'object' &&",
          "87:     !Array.isArray(obj) &&",
          "88:     hasNumberKey(obj, 'activeTabIndex') &&",
          "89:     'tabs' in obj &&",
          "90:     Array.isArray(obj.tabs) &&",
          "91:     obj.tabs.every(isTabState)",
          "92:   );",
          "93: }",
          "95: function isTabState(obj: any): obj is TabState {",
          "97:   return (",
          "98:     obj &&",
          "99:     typeof obj === 'object' &&",
          "100:     !Array.isArray(obj) &&",
          "101:     hasStringKey(obj, 'id') &&",
          "102:     hasStringKey(obj, 'title') &&",
          "103:     hasStringOrNullKey(obj, 'query') &&",
          "104:     hasStringOrNullKey(obj, 'variables') &&",
          "105:     hasStringOrNullKey(obj, 'headers') &&",
          "106:     hasStringOrNullKey(obj, 'operationName') &&",
          "107:     hasStringOrNullKey(obj, 'response')",
          "108:   );",
          "109: }",
          "111: function hasNumberKey(obj: Record<string, any>, key: string) {",
          "112:   return key in obj && typeof obj[key] === 'number';",
          "113: }",
          "115: function hasStringKey(obj: Record<string, any>, key: string) {",
          "116:   return key in obj && typeof obj[key] === 'string';",
          "117: }",
          "119: function hasStringOrNullKey(obj: Record<string, any>, key: string) {",
          "120:   return key in obj && (typeof obj[key] === 'string' || obj[key] === null);",
          "121: }",
          "123: export function useSynchronizeActiveTabValues({",
          "124:   queryEditor,",
          "125:   variableEditor,",
          "126:   headerEditor,",
          "127:   responseEditor,",
          "128: }: {",
          "129:   queryEditor: CodeMirrorEditorWithOperationFacts | null;",
          "130:   variableEditor: CodeMirrorEditor | null;",
          "131:   headerEditor: CodeMirrorEditor | null;",
          "132:   responseEditor: CodeMirrorEditor | null;",
          "133: }) {",
          "134:   return useCallback<(state: TabsState) => TabsState>(",
          "135:     state => {",
          "136:       const query = queryEditor?.getValue() ?? null;",
          "137:       const variables = variableEditor?.getValue() ?? null;",
          "138:       const headers = headerEditor?.getValue() ?? null;",
          "139:       const operationName = queryEditor?.operationName ?? null;",
          "140:       const response = responseEditor?.getValue() ?? null;",
          "141:       return setPropertiesInActiveTab(state, {",
          "142:         query,",
          "143:         variables,",
          "144:         headers,",
          "145:         response,",
          "146:         operationName,",
          "147:       });",
          "148:     },",
          "149:     [queryEditor, variableEditor, headerEditor, responseEditor],",
          "150:   );",
          "151: }",
          "153: export function useStoreTabs({",
          "154:   storage,",
          "155:   shouldPersistHeaders,",
          "156: }: {",
          "157:   storage: StorageAPI | null;",
          "158:   shouldPersistHeaders?: boolean;",
          "159: }) {",
          "160:   const store = useCallback(",
          "161:     debounce(500, (value: string) => {",
          "162:       storage?.set(STORAGE_KEY, value);",
          "163:     }),",
          "164:     [storage],",
          "165:   );",
          "166:   return useCallback(",
          "167:     (currentState: TabsState) => {",
          "168:       store(",
          "169:         JSON.stringify(currentState, (key, value) =>",
          "170:           key === 'hash' ||",
          "171:           key === 'response' ||",
          "172:           (!shouldPersistHeaders && key === 'headers')",
          "173:             ? null",
          "174:             : value,",
          "175:         ),",
          "176:       );",
          "177:     },",
          "178:     [shouldPersistHeaders, store],",
          "179:   );",
          "180: }",
          "182: export function useSetEditorValues({",
          "183:   queryEditor,",
          "184:   variableEditor,",
          "185:   headerEditor,",
          "186:   responseEditor,",
          "187: }: {",
          "188:   queryEditor: CodeMirrorEditorWithOperationFacts | null;",
          "189:   variableEditor: CodeMirrorEditor | null;",
          "190:   headerEditor: CodeMirrorEditor | null;",
          "191:   responseEditor: CodeMirrorEditor | null;",
          "192: }) {",
          "193:   return useCallback(",
          "194:     ({",
          "195:       query,",
          "196:       variables,",
          "197:       headers,",
          "198:       response,",
          "199:     }: {",
          "200:       query: string | null;",
          "201:       variables: string | null;",
          "202:       headers: string | null;",
          "203:       response: string | null;",
          "204:     }) => {",
          "205:       queryEditor?.setValue(query ?? '');",
          "206:       variableEditor?.setValue(variables ?? '');",
          "207:       headerEditor?.setValue(headers ?? '');",
          "208:       responseEditor?.setValue(response ?? '');",
          "209:     },",
          "210:     [headerEditor, queryEditor, responseEditor, variableEditor],",
          "211:   );",
          "212: }",
          "214: export function emptyTab(): TabState {",
          "215:   return {",
          "216:     id: guid(),",
          "217:     hash: hashFromTabContents({ query: null, variables: null, headers: null }),",
          "218:     title: DEFAULT_TITLE,",
          "219:     query: null,",
          "220:     variables: null,",
          "221:     headers: null,",
          "222:     operationName: null,",
          "223:     response: null,",
          "224:   };",
          "225: }",
          "227: export function setPropertiesInActiveTab(",
          "228:   state: TabsState,",
          "229:   partialTab: Partial<Omit<TabState, 'id' | 'hash' | 'title'>>,",
          "230: ): TabsState {",
          "231:   return {",
          "232:     ...state,",
          "233:     tabs: state.tabs.map((tab, index) => {",
          "234:       if (index !== state.activeTabIndex) {",
          "235:         return tab;",
          "236:       }",
          "237:       const newTab = { ...tab, ...partialTab };",
          "238:       return {",
          "239:         ...newTab,",
          "240:         hash: hashFromTabContents(newTab),",
          "241:         title:",
          "242:           newTab.operationName ||",
          "243:           (newTab.query",
          "244:             ? fuzzyExtractOperationName(newTab.query)",
          "245:             : undefined) ||",
          "246:           DEFAULT_TITLE,",
          "247:       };",
          "248:     }),",
          "249:   };",
          "250: }",
          "252: function guid(): string {",
          "253:   const s4 = () => {",
          "254:     return Math.floor((1 + Math.random()) * 0x10000)",
          "255:       .toString(16)",
          "256:       .substring(1);",
          "257:   };",
          "259:   return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;",
          "260: }",
          "262: function hashFromTabContents(args: {",
          "263:   query: string | null;",
          "264:   variables: string | null;",
          "265:   headers: string | null;",
          "266: }): string {",
          "267:   return [args.query ?? '', args.variables ?? '', args.headers ?? ''].join('|');",
          "268: }",
          "270: export function fuzzyExtractOperationName(str: string): string | null {",
          "271:   const regex = /^(?!.*#).*(query|subscription|mutation)\\s+([a-zA-Z0-9_]+)/;",
          "272:   const match = regex.exec(str);",
          "274:   return match?.[2] ?? null;",
          "275: }",
          "277: const DEFAULT_TITLE = '<untitled>';",
          "279: const STORAGE_KEY = 'tabState';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     };",
          "123:   }, [editorTheme, initialVariables, readOnly, setVariableEditor]);",
          "127:   useCompletion(variableEditor);",
          "",
          "[Removed Lines]",
          "125:   useChangeHandler(variableEditor, onEdit, STORAGE_KEY);",
          "",
          "[Added Lines]",
          "125:   useChangeHandler(",
          "126:     variableEditor,",
          "127:     onEdit,",
          "128:     STORAGE_KEY,",
          "129:     'variables',",
          "130:     useVariableEditor,",
          "131:   );",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/index.ts||packages/graphiql-react/src/index.ts": [
          "File: packages/graphiql-react/src/index.ts -> packages/graphiql-react/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import type {",
          "38:   EditorContextType,",
          "39:   ResponseTooltipType,",
          "40:   UseHeaderEditorArgs,",
          "41:   UseQueryEditorArgs,",
          "42:   UseResponseEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:   TabsState,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   EditorContextType,",
          "91:   ResponseTooltipType,",
          "92:   UseHeaderEditorArgs,",
          "93:   UseQueryEditorArgs,",
          "94:   UseResponseEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   TabsState,",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   ResponseTooltipType,",
          "36:   SchemaContextType,",
          "37:   StorageContextType,",
          "38:   UseHeaderEditorArgs,",
          "39:   UseResponseEditorArgs,",
          "40:   UseQueryEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   TabsState,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   ResponseTooltipType,",
          "77:   SchemaContextType,",
          "78:   StorageContextType,",
          "79:   UseHeaderEditorArgs,",
          "80:   UseResponseEditorArgs,",
          "81:   UseQueryEditorArgs,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   TabsState,",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   ResponseTooltipType,",
          "46:   SchemaContextType,",
          "47:   StorageContextType,",
          "48: } from '@graphiql/react';",
          "50: import { ExecuteButton } from './ExecuteButton';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   TabsState,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: } from '@graphiql/toolkit';",
          "81: import { Tab, TabAddButton, Tabs } from './Tabs';",
          "86: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
          "",
          "[Removed Lines]",
          "82: import { fuzzyExtractOperationTitle } from '../utility/fuzzyExtractOperationTitle';",
          "83: import { idFromTabContents } from '../utility/id-from-tab-contents';",
          "84: import { guid } from '../utility/guid';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:   docExplorerWidth: number;",
          "326:   isWaitingForResponse: boolean;",
          "327:   subscription?: Unsubscribable | null;",
          "345: };",
          "",
          "[Removed Lines]",
          "328:   tabs: TabsState;",
          "329: };",
          "331: type TabState = {",
          "332:   id: string;",
          "333:   hash: string;",
          "334:   title: string;",
          "335:   query: string | undefined;",
          "336:   variables: string | undefined;",
          "337:   headers: string | undefined;",
          "338:   operationName: string | undefined;",
          "339:   response: string | undefined;",
          "340: };",
          "342: type TabsState = {",
          "343:   activeTabIndex: number;",
          "344:   tabs: Array<TabState>;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "433: type GraphiQLWithContextProviderProps = Omit<",
          "434:   GraphiQLProps,",
          "435:   | 'dangerouslyAssumeSchemaIsValid'",
          "436:   | 'docExplorerOpen'",
          "437:   | 'inputValueDeprecation'",
          "438:   | 'introspectionQueryName'",
          "439:   | 'maxHistoryLength'",
          "440:   | 'onToggleDocs'",
          "441:   | 'onToggleHistory'",
          "442:   | 'schema'",
          "443:   | 'schemaDescription'",
          "444:   | 'storage'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:   | 'defaultQuery'",
          "424:   | 'query'",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "518:     this.componentIsMounted = false;",
          "526:     const variables =",
          "527:       props.variables ?? props.storageContext?.get('variables') ?? undefined;",
          "529:     const headers =",
          "530:       props.headers ?? props.storageContext?.get('headers') ?? undefined;",
          "538:     let secondaryEditorOpen;",
          "539:     if (props.defaultVariableEditorOpen !== undefined) {",
          "",
          "[Removed Lines]",
          "520:     const query =",
          "521:       props.query ??",
          "522:       props.storageContext?.get('query') ??",
          "523:       props.defaultQuery ??",
          "524:       defaultQuery;",
          "532:     const operationName =",
          "533:       props.operationName ??",
          "534:       props.storageContext?.get('operationName') ??",
          "535:       undefined;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "547:     const headerEditorEnabled = props.headerEditorEnabled ?? true;",
          "548:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
          "617:     this.state = {",
          "620:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "621:       secondaryEditorOpen,",
          "622:       secondaryEditorHeight:",
          "",
          "[Removed Lines]",
          "550:     const initialTabHash = idFromTabContents({",
          "551:       query,",
          "552:       variables,",
          "553:       headers,",
          "554:     });",
          "556:     const initialTab: TabState = {",
          "557:       id: guid(),",
          "558:       hash: initialTabHash,",
          "559:       title: '<untitled>',",
          "560:       query,",
          "561:       variables,",
          "562:       headers,",
          "563:       operationName,",
          "564:       response: undefined,",
          "565:     };",
          "567:     let rawTabState: string | null = null;",
          "569:     if (this.props.tabs) {",
          "570:       rawTabState = this.props.storageContext?.get('tabState') ?? null;",
          "571:     }",
          "573:     let tabsState: TabsState;",
          "574:     if (rawTabState === null) {",
          "575:       tabsState = {",
          "576:         activeTabIndex: 0,",
          "577:         tabs: [initialTab],",
          "578:       };",
          "579:     } else {",
          "580:       tabsState = JSON.parse(rawTabState);",
          "581:       let queryParameterOperationIsWithinTabs = false;",
          "582:       for (const tab of tabsState.tabs) {",
          "584:         tab.query = tab.query!;",
          "585:         tab.variables = tab.variables!;",
          "586:         tab.headers = shouldPersistHeaders ? tab.headers! : undefined;",
          "587:         tab.response = undefined;",
          "588:         tab.operationName = undefined;",
          "590:         tab.id = guid();",
          "592:         tab.hash = idFromTabContents(tab);",
          "594:         if (tab.hash === initialTabHash) {",
          "595:           queryParameterOperationIsWithinTabs = true;",
          "596:         }",
          "597:       }",
          "599:       if (queryParameterOperationIsWithinTabs === false) {",
          "600:         tabsState.tabs.push(initialTab);",
          "601:         tabsState.activeTabIndex = tabsState.tabs.length - 1;",
          "602:       }",
          "603:     }",
          "605:     let activeTab = tabsState.tabs[0];",
          "606:     let index = 0;",
          "607:     for (const tab of tabsState.tabs) {",
          "608:       if (tab.hash === initialTabHash) {",
          "609:         tabsState.activeTabIndex = index;",
          "610:         activeTab = tab;",
          "611:         break;",
          "612:       }",
          "613:       index++;",
          "614:     }",
          "618:       tabs: tabsState,",
          "619:       response: activeTab?.response,",
          "",
          "[Added Lines]",
          "524:       response: '',",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "673:     this.componentIsMounted && this.setState(nextState, callback);",
          "674:   };",
          "718:   render() {",
          "719:     const children = React.Children.toArray(this.props.children);",
          "",
          "[Removed Lines]",
          "676:   private persistTabsState = () => {",
          "677:     if (this.props.tabs) {",
          "678:       this.props.storageContext?.set(",
          "679:         'tabState',",
          "680:         JSON.stringify(this.state.tabs, (key, value) =>",
          "681:           key === 'response' ||",
          "682:           (!this.state.shouldPersistHeaders && key === 'headers')",
          "683:             ? undefined",
          "684:             : value,",
          "685:         ),",
          "686:       );",
          "687:       if (typeof this.props.tabs === 'object') {",
          "688:         this.props.tabs.onTabChange?.(this.state.tabs);",
          "689:       }",
          "690:     }",
          "691:   };",
          "693:   private makeHandleOnSelectTab = (index: number) => () => {",
          "694:     this.handleStopQuery();",
          "695:     this.setState(",
          "696:       state => stateOnSelectTabReducer(index, state, this.props),",
          "697:       this.persistTabsState,",
          "698:     );",
          "699:   };",
          "701:   private makeHandleOnCloseTab = (index: number) => () => {",
          "702:     if (this.state.tabs.activeTabIndex === index) {",
          "703:       this.handleStopQuery();",
          "704:     }",
          "705:     this.setState(",
          "706:       state => stateOnCloseTabReducer(index, state, this.props),",
          "707:       this.persistTabsState,",
          "708:     );",
          "709:   };",
          "711:   private handleOnAddTab = () => {",
          "712:     this.setState(",
          "713:       state => stateOnTabAddReducer(state, this.props),",
          "714:       this.persistTabsState,",
          "715:     );",
          "716:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "785:         ? this.state.secondaryEditorHeight",
          "786:         : undefined,",
          "787:     };",
          "790:     return (",
          "791:       <div",
          "",
          "[Removed Lines]",
          "788:     const tabsState = this.state.tabs;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "830:               tabsProps={{",
          "831:                 'aria-label': 'Select active operation',",
          "832:               }}>",
          "834:                 <Tab",
          "835:                   key={tab.id}",
          "837:                   title={tab.title}",
          "841:                   tabProps={{",
          "842:                     'aria-controls': 'sessionWrap',",
          "843:                     id: `session-tab-${index}`,",
          "844:                   }}",
          "845:                 />",
          "846:               ))}",
          "848:             </Tabs>",
          "849:           ) : null}",
          "850:           <div",
          "",
          "[Removed Lines]",
          "833:               {tabsState.tabs.map((tab, index) => (",
          "836:                   isActive={index === tabsState.activeTabIndex}",
          "838:                   isCloseable={tabsState.tabs.length > 1}",
          "839:                   onSelect={this.makeHandleOnSelectTab(index)}",
          "840:                   onClose={this.makeHandleOnCloseTab(index)}",
          "847:               <TabAddButton onClick={this.handleOnAddTab} />",
          "",
          "[Added Lines]",
          "695:               {this.props.editorContext.tabs.map((tab, index) => (",
          "698:                   isActive={index === this.props.editorContext.activeTabIndex}",
          "700:                   isCloseable={this.props.editorContext.tabs.length > 1}",
          "701:                   onSelect={() => {",
          "702:                     this.handleStopQuery();",
          "704:                     this.props.editorContext.changeTab(index);",
          "705:                     this.setState({",
          "706:                       response:",
          "707:                         this.props.editorContext.tabs[index].response ??",
          "708:                         undefined,",
          "709:                     });",
          "710:                   }}",
          "711:                   onClose={() => {",
          "712:                     if (this.props.editorContext.activeTabIndex === index) {",
          "713:                       this.handleStopQuery();",
          "714:                     }",
          "716:                     this.props.editorContext.closeTab(index);",
          "717:                     this.setState({",
          "718:                       response:",
          "719:                         this.props.editorContext.tabs[",
          "720:                           Math.max(",
          "721:                             this.props.editorContext.activeTabIndex - 1,",
          "722:                             0,",
          "723:                           )",
          "724:                         ].response ?? undefined,",
          "725:                     });",
          "726:                   }}",
          "733:               <TabAddButton",
          "734:                 onClick={() => {",
          "735:                   this.props.editorContext.addTab();",
          "736:                   this.setState({ response: undefined });",
          "737:                 }}",
          "738:               />",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "854:             role=\"tabpanel\"",
          "855:             id=\"sessionWrap\"",
          "856:             className=\"editorBar\"",
          "858:             onDoubleClick={this.handleResetResize}",
          "859:             onMouseDown={this.handleResizeStart}>",
          "860:             <div className=\"queryWrap\" style={queryWrapStyle}>",
          "",
          "[Removed Lines]",
          "857:             aria-labelledby={`session-tab-${tabsState.activeTabIndex}`}",
          "",
          "[Added Lines]",
          "748:             aria-labelledby={`session-tab-${this.props.editorContext.activeTabIndex}`}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1238:               });",
          "1239:             } else {",
          "1240:               const response = formatResult(result);",
          "1261:             }",
          "1262:           }",
          "1263:         },",
          "",
          "[Removed Lines]",
          "1241:               this.setState(",
          "1242:                 state => ({",
          "1243:                   ...state,",
          "1244:                   tabs: {",
          "1245:                     ...state.tabs,",
          "1246:                     tabs: state.tabs.tabs.map((tab, index) => {",
          "1247:                       if (index !== state.tabs.activeTabIndex) {",
          "1248:                         return tab;",
          "1249:                       }",
          "1250:                       return {",
          "1251:                         ...tab,",
          "1252:                         response,",
          "1253:                       };",
          "1254:                     }),",
          "1255:                   },",
          "1256:                   isWaitingForResponse: false,",
          "1257:                   response,",
          "1258:                 }),",
          "1259:                 this.persistTabsState,",
          "1260:               );",
          "",
          "[Added Lines]",
          "1132:               this.setState({",
          "1133:                 isWaitingForResponse: false,",
          "1134:                 response,",
          "1135:               });",
          "1136:               this.props.editorContext.updateActiveTabValues({ response });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1316:   }",
          "1318:   handleEditQuery = (value: string) => {",
          "1330:     this.props.onEditQuery?.(",
          "1331:       value,",
          "1332:       this.props.editorContext.queryEditor?.documentAST ?? undefined,",
          "",
          "[Removed Lines]",
          "1319:     this.setState(",
          "1320:       state => ({",
          "1321:         ...state,",
          "1322:         tabs: tabsStateEditQueryReducer(",
          "1323:           value,",
          "1324:           state.tabs,",
          "1325:           this.props.editorContext.queryEditor?.operationName ?? undefined,",
          "1326:         ),",
          "1327:       }),",
          "1328:       this.persistTabsState,",
          "1329:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1334:   };",
          "1336:   handleEditVariables = (value: string) => {",
          "1344:     if (this.props.onEditVariables) {",
          "1345:       this.props.onEditVariables(value);",
          "1346:     }",
          "1347:   };",
          "1349:   handleEditHeaders = (value: string) => {",
          "1357:     if (this.props.onEditHeaders) {",
          "1358:       this.props.onEditHeaders(value);",
          "1359:     }",
          "",
          "[Removed Lines]",
          "1337:     this.setState(",
          "1338:       state => ({",
          "1339:         ...state,",
          "1340:         tabs: tabsStateEditVariablesReducer(value, state.tabs),",
          "1341:       }),",
          "1342:       this.persistTabsState,",
          "1343:     );",
          "1350:     this.setState(",
          "1351:       state => ({",
          "1352:         ...state,",
          "1353:         tabs: tabsStateEditHeadersReducer(value, state.tabs),",
          "1354:       }),",
          "1355:       this.persistTabsState,",
          "1356:     );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1629: GraphiQLFooter.displayName = 'GraphiQLFooter';",
          "1665: function isChildComponentType<T extends ComponentType>(",
          "1666:   child: any,",
          "",
          "[Removed Lines]",
          "1631: const defaultQuery = `# Welcome to GraphiQL",
          "1632: #",
          "1633: # GraphiQL is an in-browser tool for writing, validating, and",
          "1634: # testing GraphQL queries.",
          "1635: #",
          "1636: # Type queries into this side of the screen, and you will see intelligent",
          "1637: # typeaheads aware of the current GraphQL type schema and live syntax and",
          "1638: # validation errors highlighted within the text.",
          "1639: #",
          "1640: # GraphQL queries typically start with a \"{\" character. Lines that start",
          "1641: # with a # are ignored.",
          "1642: #",
          "1643: # An example GraphQL query might look like:",
          "1644: #",
          "1645: #     {",
          "1646: #       field(arg: \"value\") {",
          "1647: #         subField",
          "1648: #       }",
          "1649: #     }",
          "1650: #",
          "1651: # Keyboard shortcuts:",
          "1652: #",
          "1653: #  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)",
          "1654: #",
          "1655: #     Merge Query:  Shift-Ctrl-M (or press the merge button above)",
          "1656: #",
          "1657: #       Run Query:  Ctrl-Enter (or press the play button above)",
          "1658: #",
          "1659: #   Auto Complete:  Ctrl-Space (or just start typing)",
          "1660: #",
          "1662: `;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1676:   return child.type === component;",
          "1677: }",
          "1876: function getQuery(props: GraphiQLWithContextConsumerProps) {",
          "1877:   return props.editorContext.queryEditor?.getValue();",
          "1878: }",
          "",
          "[Removed Lines]",
          "1679: function tabsStateEditHeadersReducer(",
          "1680:   value: string,",
          "1681:   state: TabsState,",
          "1682: ): TabsState {",
          "1683:   return {",
          "1684:     ...state,",
          "1685:     tabs: state.tabs.map((tab, index) => {",
          "1686:       if (index !== state.activeTabIndex) {",
          "1687:         return tab;",
          "1688:       }",
          "1689:       return {",
          "1690:         ...tab,",
          "1691:         headers: value,",
          "1692:         hash: idFromTabContents({",
          "1693:           query: tab.query,",
          "1694:           headers: value,",
          "1695:           variables: tab.variables,",
          "1696:         }),",
          "1697:       };",
          "1698:     }),",
          "1699:   };",
          "1700: }",
          "1702: function tabsStateEditVariablesReducer(",
          "1703:   value: string,",
          "1704:   state: TabsState,",
          "1705: ): TabsState {",
          "1706:   return {",
          "1707:     ...state,",
          "1708:     tabs: state.tabs.map((tab, index) => {",
          "1709:       if (index !== state.activeTabIndex) {",
          "1710:         return tab;",
          "1711:       }",
          "1712:       return {",
          "1713:         ...tab,",
          "1714:         variables: value,",
          "1715:         hash: idFromTabContents({",
          "1716:           query: tab.query,",
          "1717:           headers: tab.headers,",
          "1718:           variables: value,",
          "1719:         }),",
          "1720:       };",
          "1721:     }),",
          "1722:   };",
          "1723: }",
          "1725: function tabsStateEditQueryReducer(",
          "1726:   value: string,",
          "1727:   state: TabsState,",
          "1728:   operationName?: string,",
          "1729: ): TabsState {",
          "1730:   return {",
          "1731:     ...state,",
          "1732:     tabs: state.tabs.map((tab, index) => {",
          "1733:       if (index !== state.activeTabIndex) {",
          "1734:         return tab;",
          "1735:       }",
          "1736:       return {",
          "1737:         ...tab,",
          "1738:         title: operationName ?? fuzzyExtractOperationTitle(value),",
          "1739:         query: value,",
          "1740:         hash: idFromTabContents({",
          "1741:           query: value,",
          "1742:           headers: tab.headers,",
          "1743:           variables: tab.variables,",
          "1744:         }),",
          "1745:       };",
          "1746:     }),",
          "1747:   };",
          "1748: }",
          "1750: function stateOnSelectTabReducer(",
          "1751:   index: number,",
          "1752:   state: GraphiQLState,",
          "1753:   props: GraphiQLWithContextConsumerProps,",
          "1754: ): GraphiQLState {",
          "1755:   const query = getQuery(props);",
          "1756:   const variables = getVariables(props);",
          "1757:   const headers = getHeaders(props);",
          "1758:   const operationName = getOperationName(props);",
          "1760:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "1761:   const tabs = state.tabs.tabs.map((currentTab, tabIndex) => {",
          "1762:     if (tabIndex !== oldActiveTabIndex) {",
          "1763:       return currentTab;",
          "1764:     }",
          "1766:     return {",
          "1767:       ...currentTab,",
          "1768:       query,",
          "1769:       variables,",
          "1770:       operationName,",
          "1771:       headers,",
          "1772:       response: state.response,",
          "1773:       hash: idFromTabContents({",
          "1774:         query,",
          "1775:         variables,",
          "1776:         headers,",
          "1777:       }),",
          "1778:     };",
          "1779:   });",
          "1781:   const newActiveTab = state.tabs.tabs[index];",
          "1783:   setQuery(props, newActiveTab.query || '');",
          "1784:   setVariables(props, newActiveTab.variables || '');",
          "1785:   setHeaders(props, newActiveTab.headers || '');",
          "1786:   setOperationName(props, newActiveTab.operationName);",
          "1788:   return {",
          "1789:     ...state,",
          "1790:     response: newActiveTab.response,",
          "1791:     tabs: { ...state.tabs, tabs, activeTabIndex: index },",
          "1792:   };",
          "1793: }",
          "1795: function stateOnCloseTabReducer(",
          "1796:   index: number,",
          "1797:   state: GraphiQLState,",
          "1798:   props: GraphiQLWithContextConsumerProps,",
          "1799: ): GraphiQLState {",
          "1800:   const newActiveTabIndex =",
          "1801:     state.tabs.activeTabIndex > 0 ? state.tabs.activeTabIndex - 1 : 0;",
          "1802:   const newTabsState = {",
          "1803:     ...state.tabs,",
          "1804:     activeTabIndex: newActiveTabIndex,",
          "1805:     tabs: state.tabs.tabs.filter((_tab, i) => index !== i),",
          "1806:   };",
          "1807:   const activeTab = newTabsState.tabs[newActiveTabIndex];",
          "1808:   setQuery(props, activeTab.query || '');",
          "1809:   setVariables(props, activeTab.variables || '');",
          "1810:   setHeaders(props, activeTab.headers || '');",
          "1811:   setOperationName(props, activeTab.operationName);",
          "1812:   return {",
          "1813:     ...state,",
          "1814:     response: activeTab.response,",
          "1815:     tabs: newTabsState,",
          "1816:   };",
          "1817: }",
          "1819: function stateOnTabAddReducer(",
          "1820:   state: GraphiQLState,",
          "1821:   props: GraphiQLWithContextConsumerProps,",
          "1822: ): GraphiQLState {",
          "1823:   const query = getQuery(props);",
          "1824:   const variables = getVariables(props);",
          "1825:   const headers = getHeaders(props);",
          "1826:   const operationName = getOperationName(props);",
          "1828:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "1830:   const newTab: TabState = {",
          "1831:     id: guid(),",
          "1832:     title: '<untitled>',",
          "1833:     headers: '',",
          "1834:     variables: '',",
          "1835:     query: '',",
          "1836:     operationName: '',",
          "1837:     response: '',",
          "1838:     hash: idFromTabContents({",
          "1839:       query: '',",
          "1840:       variables: '',",
          "1841:       headers: '',",
          "1842:     }),",
          "1843:   };",
          "1845:   const tabs = state.tabs.tabs.map((tab, index) => {",
          "1846:     if (index !== oldActiveTabIndex) {",
          "1847:       return tab;",
          "1848:     }",
          "1850:     return {",
          "1851:       ...tab,",
          "1852:       query,",
          "1853:       headers,",
          "1854:       variables,",
          "1855:       operationName,",
          "1856:       response: state.response,",
          "1857:     };",
          "1858:   });",
          "1860:   setQuery(props, newTab.query || '');",
          "1861:   setVariables(props, newTab.variables || '');",
          "1862:   setHeaders(props, newTab.headers || '');",
          "1863:   setOperationName(props, newTab.operationName);",
          "1865:   return {",
          "1866:     ...state,",
          "1867:     response: newTab.response,",
          "1868:     tabs: {",
          "1869:       ...state.tabs,",
          "1870:       activeTabIndex: state.tabs.tabs.length,",
          "1871:       tabs: [...tabs, newTab],",
          "1872:     },",
          "1873:   };",
          "1874: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1896: function setHeaders(props: GraphiQLWithContextConsumerProps, value: string) {",
          "1897:   props.editorContext.headerEditor?.setValue(value);",
          "1898: }",
          "",
          "[Removed Lines]",
          "1900: function getOperationName(props: GraphiQLWithContextConsumerProps) {",
          "1901:   return props.editorContext.queryEditor?.operationName ?? undefined;",
          "1902: }",
          "1904: function setOperationName(",
          "1905:   props: GraphiQLWithContextConsumerProps,",
          "1906:   value: string | null | undefined,",
          "1907: ) {",
          "1908:   if (props.editorContext.queryEditor) {",
          "1909:     props.editorContext.queryEditor.operationName = value ?? null;",
          "1910:   }",
          "1911: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts||packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts": [
          "File: packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts -> packages/graphiql/src/utility/fuzzyExtractOperationTitle.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/guid.ts||packages/graphiql/src/utility/guid.ts": [
          "File: packages/graphiql/src/utility/guid.ts -> packages/graphiql/src/utility/guid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/utility/id-from-tab-contents.ts||packages/graphiql/src/utility/id-from-tab-contents.ts": [
          "File: packages/graphiql/src/utility/id-from-tab-contents.ts -> packages/graphiql/src/utility/id-from-tab-contents.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}