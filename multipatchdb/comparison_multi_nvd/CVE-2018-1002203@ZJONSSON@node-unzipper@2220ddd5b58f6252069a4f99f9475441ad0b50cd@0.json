{
  "cve_id": "CVE-2018-1002203",
  "cve_desc": "unzipper npm library before 0.8.13 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",
  "repo": "ZJONSSON/node-unzipper",
  "patch_hash": "2220ddd5b58f6252069a4f99f9475441ad0b50cd",
  "patch_info": {
    "commit_hash": "2220ddd5b58f6252069a4f99f9475441ad0b50cd",
    "repo": "ZJONSSON/node-unzipper",
    "commit_url": "https://github.com/ZJONSSON/node-unzipper/commit/2220ddd5b58f6252069a4f99f9475441ad0b50cd",
    "files": [
      "lib/extract.js",
      "test/uncompressed.js",
      "testData/zip-slip/zip-slip.zip"
    ],
    "message": "Merge pull request #59 from aviadatsnyk/fix/zip-slip\n\nfix: prevent extracting archived files outside of target path",
    "before_after_code_files": [
      "lib/extract.js||lib/extract.js",
      "test/uncompressed.js||test/uncompressed.js"
    ]
  },
  "patch_diff": {
    "lib/extract.js||lib/extract.js": [
      "File: lib/extract.js -> lib/extract.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:   self.on('entry', function(entry) {",
      "19:     if (entry.type == 'Directory') return;",
      "20:     entry.pipe(Writer({",
      "22:     }))",
      "23:     .on('error',function(e) {",
      "24:       self.emit('error',e);",
      "",
      "[Removed Lines]",
      "21:       path: path.join(opts.path,entry.path)",
      "",
      "[Added Lines]",
      "24:     var extractPath = path.join(opts.path, entry.path);",
      "25:     if (extractPath.indexOf(opts.path) != 0) {",
      "26:       return;",
      "27:     }",
      "30:       path: extractPath",
      "",
      "---------------"
    ],
    "test/uncompressed.js||test/uncompressed.js": [
      "File: test/uncompressed.js -> test/uncompressed.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:       });",
      "47:     }",
      "48:   });",
      "",
      "[Removed Lines]",
      "49: });",
      "",
      "[Added Lines]",
      "51: test(\"do not extract zip slip archive\", function (t) {",
      "52:   var archive = path.join(__dirname, '../testData/zip-slip/zip-slip.zip');",
      "54:   temp.mkdir('node-zipslip-', function (err, dirPath) {",
      "55:     if (err) {",
      "56:       throw err;",
      "57:     }",
      "58:     var unzipExtractor = unzip.Extract({ path: dirPath });",
      "59:     unzipExtractor.on('error', function(err) {",
      "60:       throw err;",
      "61:     });",
      "62:     unzipExtractor.on('close', testNoSlip);",
      "64:     fs.createReadStream(archive).pipe(unzipExtractor);",
      "66:     function testNoSlip() {",
      "67:       if (fs.hasOwnProperty('access')) {",
      "68:         var mode = fs.F_OK | (fs.constants && fs.constants.F_OK);",
      "69:         return fs.access('/tmp/evil.txt', mode, evilFileCallback);",
      "70:       }",
      "72:       return fs.stat('/tmp/evil.txt', evilFileCallback);",
      "73:     }",
      "75:     function evilFileCallback(err) {",
      "76:       if (err) {",
      "77:         t.pass('no zip slip');",
      "78:       } else {",
      "79:         t.fail('evil file created');",
      "80:       }",
      "81:       return t.end();",
      "82:     }",
      "84:   });",
      "85: });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f68901c2e2e062a5e0083a81d257eccea0eb760",
      "candidate_info": {
        "commit_hash": "5f68901c2e2e062a5e0083a81d257eccea0eb760",
        "repo": "ZJONSSON/node-unzipper",
        "commit_url": "https://github.com/ZJONSSON/node-unzipper/commit/5f68901c2e2e062a5e0083a81d257eccea0eb760",
        "files": [
          "lib/extract.js",
          "test/uncompressed.js",
          "testData/zip-slip/zip-slip.zip"
        ],
        "message": "fix: prevent extracting archived files outside of target path",
        "before_after_code_files": [
          "lib/extract.js||lib/extract.js",
          "test/uncompressed.js||test/uncompressed.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ZJONSSON/node-unzipper/pull/59"
        ],
        "olp_code_files": {
          "patch": [
            "lib/extract.js||lib/extract.js",
            "test/uncompressed.js||test/uncompressed.js"
          ],
          "candidate": [
            "lib/extract.js||lib/extract.js",
            "test/uncompressed.js||test/uncompressed.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/extract.js||lib/extract.js": [
          "File: lib/extract.js -> lib/extract.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   self.on('entry', function(entry) {",
          "19:     if (entry.type == 'Directory') return;",
          "20:     entry.pipe(Writer({",
          "22:     }))",
          "23:     .on('error',function(e) {",
          "24:       self.emit('error',e);",
          "",
          "[Removed Lines]",
          "21:       path: path.join(opts.path,entry.path)",
          "",
          "[Added Lines]",
          "24:     var extractPath = path.join(opts.path, entry.path);",
          "25:     if (extractPath.indexOf(opts.path) != 0) {",
          "26:       return;",
          "27:     }",
          "30:       path: extractPath",
          "",
          "---------------"
        ],
        "test/uncompressed.js||test/uncompressed.js": [
          "File: test/uncompressed.js -> test/uncompressed.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:       });",
          "47:     }",
          "48:   });",
          "",
          "[Removed Lines]",
          "49: });",
          "",
          "[Added Lines]",
          "51: test(\"do not extract zip slip archive\", function (t) {",
          "52:   var archive = path.join(__dirname, '../testData/zip-slip/zip-slip.zip');",
          "54:   temp.mkdir('node-zipslip-', function (err, dirPath) {",
          "55:     if (err) {",
          "56:       throw err;",
          "57:     }",
          "58:     var unzipExtractor = unzip.Extract({ path: dirPath });",
          "59:     unzipExtractor.on('error', function(err) {",
          "60:       throw err;",
          "61:     });",
          "62:     unzipExtractor.on('close', testNoSlip);",
          "64:     fs.createReadStream(archive).pipe(unzipExtractor);",
          "66:     function testNoSlip() {",
          "67:       if (fs.hasOwnProperty('access')) {",
          "68:         var mode = fs.F_OK | (fs.constants && fs.constants.F_OK);",
          "69:         return fs.access('/tmp/evil.txt', mode, evilFileCallback);",
          "70:       }",
          "72:       return fs.stat('/tmp/evil.txt', evilFileCallback);",
          "73:     }",
          "75:     function evilFileCallback(err) {",
          "76:       if (err) {",
          "77:         t.pass('no zip slip');",
          "78:       } else {",
          "79:         t.fail('evil file created');",
          "80:       }",
          "81:       return t.end();",
          "82:     }",
          "84:   });",
          "85: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}