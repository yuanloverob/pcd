{
  "cve_id": "CVE-2023-46136",
  "cve_desc": "Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. This vulnerability has been patched in version 3.0.1.",
  "repo": "pallets/werkzeug",
  "patch_hash": "f3c803b3ade485a45f12b6d6617595350c0f03e2",
  "patch_info": {
    "commit_hash": "f3c803b3ade485a45f12b6d6617595350c0f03e2",
    "repo": "pallets/werkzeug",
    "commit_url": "https://github.com/pallets/werkzeug/commit/f3c803b3ade485a45f12b6d6617595350c0f03e2",
    "files": [
      "CHANGES.rst",
      "pyproject.toml",
      "src/werkzeug/sansio/multipart.py"
    ],
    "message": "Merge 3.0.x (#2801)",
    "before_after_code_files": [
      "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py"
    ]
  },
  "patch_diff": {
    "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py": [
      "File: src/werkzeug/sansio/multipart.py -> src/werkzeug/sansio/multipart.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "251:         else:",
      "252:             data_start = 0",
      "255:             # No complete boundary in the buffer, but there may be",
      "256:             # a partial boundary at the end. As the boundary",
      "257:             # starts with either a nl or cr find the earliest and",
      "258:             # return up to that as data.",
      "259:             data_end = del_index = self.last_newline(data[data_start:]) + data_start",
      "260:             more_data = True",
      "261:         else:",
      "262:             match = self.boundary_re.search(data)",
      "",
      "[Removed Lines]",
      "254:         if self.buffer.find(b\"--\" + self.boundary) == -1:",
      "",
      "[Added Lines]",
      "254:         boundary = b\"--\" + self.boundary",
      "256:         if self.buffer.find(boundary) == -1:",
      "262:             # If amount of data after last newline is far from",
      "263:             # possible length of partial boundary, we should",
      "264:             # assume that there is no partial boundary in the buffer",
      "265:             # and return all pending data.",
      "266:             if (len(data) - data_end) > len(b\"\\n\" + boundary):",
      "267:                 data_end = del_index = len(data)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1916c0c083e0be1c9d887ee2f3d696922bfc5c1",
      "candidate_info": {
        "commit_hash": "b1916c0c083e0be1c9d887ee2f3d696922bfc5c1",
        "repo": "pallets/werkzeug",
        "commit_url": "https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1",
        "files": [
          "src/werkzeug/sansio/multipart.py"
        ],
        "message": "Fix: slow multipart parsing for huge files with few CR/LF characters",
        "before_after_code_files": [
          "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pallets/werkzeug/pull/2801"
        ],
        "olp_code_files": {
          "patch": [
            "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py"
          ],
          "candidate": [
            "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py"
          ]
        }
      },
      "candidate_diff": {
        "src/werkzeug/sansio/multipart.py||src/werkzeug/sansio/multipart.py": [
          "File: src/werkzeug/sansio/multipart.py -> src/werkzeug/sansio/multipart.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         else:",
          "252:             data_start = 0",
          "255:             # No complete boundary in the buffer, but there may be",
          "256:             # a partial boundary at the end. As the boundary",
          "257:             # starts with either a nl or cr find the earliest and",
          "258:             # return up to that as data.",
          "259:             data_end = del_index = self.last_newline(data[data_start:]) + data_start",
          "260:             more_data = True",
          "261:         else:",
          "262:             match = self.boundary_re.search(data)",
          "",
          "[Removed Lines]",
          "254:         if self.buffer.find(b\"--\" + self.boundary) == -1:",
          "",
          "[Added Lines]",
          "254:         boundary = b\"--\" + self.boundary",
          "256:         if self.buffer.find(boundary) == -1:",
          "262:             # If amount of data after last newline is far from",
          "263:             # possible length of partial boundary, we should",
          "264:             # assume that there is no partial boundary in the buffer",
          "265:             # and return all pending data.",
          "266:             if (len(data) - data_end) > len(b\"\\n\" + boundary):",
          "267:                 data_end = del_index = len(data)",
          "",
          "---------------"
        ]
      }
    }
  ]
}