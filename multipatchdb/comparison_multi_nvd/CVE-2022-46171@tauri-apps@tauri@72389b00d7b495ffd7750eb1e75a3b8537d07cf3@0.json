{
  "cve_id": "CVE-2022-46171",
  "cve_desc": "Tauri is a framework for building binaries for all major desktop platforms. The filesystem glob pattern wildcards `*`, `?`, and `[...]` match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths. Scopes without the wildcards are not affected. As `**` allows for sub directories the behavior there is also as expected. The issue has been patched in the latest release and was backported into the currently supported 1.x branches. There are no known workarounds at the time of publication.",
  "repo": "tauri-apps/tauri",
  "patch_hash": "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
  "patch_info": {
    "commit_hash": "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
    "repo": "tauri-apps/tauri",
    "commit_url": "https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
    "files": [
      ".changes/glob-match-require_literal_separator.md",
      "core/tauri/src/scope/fs.rs"
    ],
    "message": "Merge pull request from GHSA-6mv3-wm7j-h4w5\n\n* fix(core): use `require_literal_separator` when matching paths\n\n* document the need for `require_literal_separator`\n\n* use `require_literal_leading_dot`",
    "before_after_code_files": [
      "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
    ]
  },
  "patch_diff": {
    "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
      "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "217:     if let Ok(path) = path {",
      "218:       let path: PathBuf = path.components().collect();",
      "220:       let forbidden = self",
      "221:         .forbidden_patterns",
      "222:         .lock()",
      "223:         .unwrap()",
      "224:         .iter()",
      "227:       if forbidden {",
      "228:         false",
      "",
      "[Removed Lines]",
      "225:         .any(|p| p.matches_path(&path));",
      "",
      "[Added Lines]",
      "219:       let options = glob::MatchOptions {",
      "222:         require_literal_separator: true,",
      "224:         #[cfg(unix)]",
      "225:         require_literal_leading_dot: true,",
      "226:         ..Default::default()",
      "227:       };",
      "234:         .any(|p| p.matches_path_with(&path, options));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:           .lock()",
      "233:           .unwrap()",
      "234:           .iter()",
      "236:         allowed",
      "237:       }",
      "238:     } else {",
      "",
      "[Removed Lines]",
      "235:           .any(|p| p.matches_path(&path));",
      "",
      "[Added Lines]",
      "244:           .any(|p| p.matches_path_with(&path, options));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "269:   #[test]",
      "270:   fn path_is_escaped() {",
      "271:     let scope = new_scope();",
      "277:     let scope = new_scope();",
      "283:     let scope = new_scope();",
      "292:     let scope = new_scope();",
      "299:   }",
      "300: }",
      "",
      "[Removed Lines]",
      "272:     scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
      "273:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
      "274:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
      "275:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
      "278:     scope.allow_file(\"/home/tauri/**\").unwrap();",
      "279:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
      "280:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
      "281:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
      "284:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
      "285:     scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
      "286:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
      "287:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
      "288:     assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
      "289:     assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
      "290:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
      "293:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
      "294:     scope.forbid_file(\"/home/tauri/**\").unwrap();",
      "295:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
      "296:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
      "297:     assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
      "298:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
      "",
      "[Added Lines]",
      "281:     #[cfg(unix)]",
      "282:     {",
      "283:       scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
      "284:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
      "285:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
      "286:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
      "287:     }",
      "288:     #[cfg(windows)]",
      "289:     {",
      "290:       scope.allow_directory(\"C:\\\\home\\\\tauri\\\\**\", false).unwrap();",
      "291:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
      "292:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
      "293:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
      "294:     }",
      "297:     #[cfg(unix)]",
      "298:     {",
      "299:       scope.allow_file(\"/home/tauri/**\").unwrap();",
      "300:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
      "301:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
      "302:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
      "303:     }",
      "304:     #[cfg(windows)]",
      "305:     {",
      "306:       scope.allow_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
      "307:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
      "308:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
      "309:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
      "310:     }",
      "312:     let scope = new_scope();",
      "313:     #[cfg(unix)]",
      "314:     {",
      "315:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
      "316:       scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
      "317:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
      "318:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
      "319:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
      "320:       assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
      "321:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
      "322:     }",
      "323:     #[cfg(windows)]",
      "324:     {",
      "325:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
      "326:       scope",
      "327:         .forbid_directory(\"C:\\\\home\\\\tauri\\\\**\", false)",
      "328:         .unwrap();",
      "329:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
      "330:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
      "331:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
      "332:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\inner\\\\folder\\\\anyfile\"));",
      "333:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
      "334:     }",
      "337:     #[cfg(unix)]",
      "338:     {",
      "339:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
      "340:       scope.forbid_file(\"/home/tauri/**\").unwrap();",
      "341:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
      "342:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
      "343:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
      "344:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
      "345:     }",
      "346:     #[cfg(windows)]",
      "347:     {",
      "348:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
      "349:       scope.forbid_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
      "350:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
      "351:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
      "352:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
      "353:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
      "354:     }",
      "357:     #[cfg(unix)]",
      "358:     {",
      "359:       scope.allow_directory(\"/home/tauri\", false).unwrap();",
      "360:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
      "361:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
      "362:       assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
      "363:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
      "364:     }",
      "365:     #[cfg(windows)]",
      "366:     {",
      "367:       scope.allow_directory(\"C:\\\\home\\\\tauri\", false).unwrap();",
      "368:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
      "369:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
      "370:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
      "371:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
      "372:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "acc36fe1176cc8aa9063bde932abeb94796c5c72",
      "candidate_info": {
        "commit_hash": "acc36fe1176cc8aa9063bde932abeb94796c5c72",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/acc36fe1176cc8aa9063bde932abeb94796c5c72",
        "files": [
          ".changes/config-require-literal_leading_dot.md",
          "core/tauri-config-schema/schema.json",
          "core/tauri-utils/src/config.rs",
          "core/tauri/src/scope/fs.rs",
          "tooling/cli/schema.json"
        ],
        "message": "feat(core): add option for `require_literal_leading_dot`, closes #6158 (#6969)\n\n* feat(core): add option for `require_literal_leading_dot`, closes #6158\n\n* change to `Option<bool>`\n\n* fix to tokens impl\n\n* Apply suggestions from code review\n\nCo-authored-by: Simon Hyll <hyllsimon@gmail.com>\n\n---------\n\nCo-authored-by: Simon Hyll <hyllsimon@gmail.com>",
        "before_after_code_files": [
          "core/tauri-utils/src/config.rs||core/tauri-utils/src/config.rs",
          "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ],
          "candidate": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri-utils/src/config.rs||core/tauri-utils/src/config.rs": [
          "File: core/tauri-utils/src/config.rs -> core/tauri-utils/src/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: pub use self::parse::parse;",
          "42: #[derive(PartialEq, Eq, Debug, Clone, Deserialize, Serialize)]",
          "43: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: fn default_true() -> bool {",
          "42:   true",
          "43: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "520:   DownloadBootstrapper {",
          "523:     silent: bool,",
          "524:   },",
          "",
          "[Removed Lines]",
          "522:     #[serde(default = \"default_webview_install_silent\")]",
          "",
          "[Added Lines]",
          "526:     #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "528:   EmbedBootstrapper {",
          "531:     silent: bool,",
          "532:   },",
          "",
          "[Removed Lines]",
          "530:     #[serde(default = \"default_webview_install_silent\")]",
          "",
          "[Added Lines]",
          "534:     #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536:   OfflineInstaller {",
          "539:     silent: bool,",
          "540:   },",
          "",
          "[Removed Lines]",
          "538:     #[serde(default = \"default_webview_install_silent\")]",
          "",
          "[Added Lines]",
          "542:     #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "549:   },",
          "550: }",
          "556: impl Default for WebviewInstallMode {",
          "557:   fn default() -> Self {",
          "561:   }",
          "562: }",
          "",
          "[Removed Lines]",
          "552: fn default_webview_install_silent() -> bool {",
          "553:   true",
          "554: }",
          "558:     Self::DownloadBootstrapper {",
          "559:       silent: default_webview_install_silent(),",
          "560:     }",
          "",
          "[Added Lines]",
          "558:     Self::DownloadBootstrapper { silent: true }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "602:   pub allow_downgrades: bool,",
          "604:   pub wix: Option<WixConfig>,",
          "",
          "[Removed Lines]",
          "601:   #[serde(default = \"default_allow_downgrades\", alias = \"allow-downgrades\")]",
          "",
          "[Added Lines]",
          "599:   #[serde(default = \"default_true\", alias = \"allow-downgrades\")]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "615:       tsp: false,",
          "616:       webview_install_mode: Default::default(),",
          "617:       webview_fixed_runtime_path: None,",
          "619:       wix: None,",
          "620:       nsis: None,",
          "621:     }",
          "622:   }",
          "623: }",
          "",
          "[Removed Lines]",
          "618:       allow_downgrades: default_allow_downgrades(),",
          "625: fn default_allow_downgrades() -> bool {",
          "626:   true",
          "627: }",
          "",
          "[Added Lines]",
          "616:       allow_downgrades: true,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "905:   pub file_drop_enabled: bool,",
          "907:   #[serde(default)]",
          "",
          "[Removed Lines]",
          "904:   #[serde(default = \"default_file_drop_enabled\", alias = \"file-drop-enabled\")]",
          "",
          "[Added Lines]",
          "898:   #[serde(default = \"default_true\", alias = \"file-drop-enabled\")]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "929:   #[serde(alias = \"max-height\")]",
          "930:   pub max_height: Option<f64>,",
          "933:   pub resizable: bool,",
          "935:   #[serde(default = \"default_title\")]",
          "",
          "[Removed Lines]",
          "932:   #[serde(default = \"default_resizable\")]",
          "",
          "[Added Lines]",
          "926:   #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "938:   #[serde(default)]",
          "939:   pub fullscreen: bool,",
          "942:   pub focus: bool,",
          "",
          "[Removed Lines]",
          "941:   #[serde(default = \"default_focus\")]",
          "",
          "[Added Lines]",
          "935:   #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "950:   #[serde(default)]",
          "951:   pub maximized: bool,",
          "954:   pub visible: bool,",
          "957:   pub decorations: bool,",
          "959:   #[serde(default, alias = \"always-on-top\")]",
          "",
          "[Removed Lines]",
          "953:   #[serde(default = \"default_visible\")]",
          "956:   #[serde(default = \"default_decorations\")]",
          "",
          "[Added Lines]",
          "947:   #[serde(default = \"default_true\")]",
          "950:   #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "995:       label: default_window_label(),",
          "996:       url: WindowUrl::default(),",
          "997:       user_agent: None,",
          "999:       center: false,",
          "1000:       x: None,",
          "1001:       y: None,",
          "",
          "[Removed Lines]",
          "998:       file_drop_enabled: default_file_drop_enabled(),",
          "",
          "[Added Lines]",
          "992:       file_drop_enabled: true,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1005:       min_height: None,",
          "1006:       max_width: None,",
          "1007:       max_height: None,",
          "1009:       title: default_title(),",
          "1010:       fullscreen: false,",
          "1011:       focus: false,",
          "1012:       transparent: false,",
          "1013:       maximized: false,",
          "1016:       always_on_top: false,",
          "1017:       content_protected: false,",
          "1018:       skip_taskbar: false,",
          "",
          "[Removed Lines]",
          "1008:       resizable: default_resizable(),",
          "1014:       visible: default_visible(),",
          "1015:       decorations: default_decorations(),",
          "",
          "[Added Lines]",
          "1002:       resizable: true,",
          "1008:       visible: true,",
          "1009:       decorations: true,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1038:   600f64",
          "1039: }",
          "1045: fn default_title() -> String {",
          "1046:   \"Tauri App\".to_string()",
          "1047: }",
          "1067: #[derive(Debug, PartialEq, Eq, Clone, Deserialize, Serialize)]",
          "",
          "[Removed Lines]",
          "1041: fn default_resizable() -> bool {",
          "1042:   true",
          "1043: }",
          "1049: fn default_focus() -> bool {",
          "1050:   true",
          "1051: }",
          "1053: fn default_visible() -> bool {",
          "1054:   true",
          "1055: }",
          "1057: fn default_decorations() -> bool {",
          "1058:   true",
          "1059: }",
          "1061: fn default_file_drop_enabled() -> bool {",
          "1062:   true",
          "1063: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1304: #[derive(Debug, PartialEq, Eq, Clone, Deserialize, Serialize)]",
          "1306: #[serde(untagged)]",
          "1307: pub enum FsAllowlistScope {",
          "1309:   AllowedPaths(Vec<PathBuf>),",
          "1311:   Scope {",
          "1313:     #[serde(default)]",
          "",
          "[Removed Lines]",
          "1305: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "",
          "[Added Lines]",
          "1280: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "1285:   #[serde(rename_all = \"camelCase\")]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1317:     #[serde(default)]",
          "1318:     deny: Vec<PathBuf>,",
          "1319:   },",
          "1320: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302:     #[serde(alias = \"require-literal-leading-dot\")]",
          "1303:     require_literal_leading_dot: Option<bool>,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2580:   #[serde(default)]",
          "2581:   pub active: bool,",
          "2584:   pub dialog: bool,",
          "",
          "[Removed Lines]",
          "2583:   #[serde(default = \"default_dialog\")]",
          "",
          "[Added Lines]",
          "2568:   #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2611:     struct InnerUpdaterConfig {",
          "2612:       #[serde(default)]",
          "2613:       active: bool,",
          "2615:       dialog: bool,",
          "2616:       endpoints: Option<Vec<UpdaterEndpoint>>,",
          "2617:       pubkey: Option<String>,",
          "",
          "[Removed Lines]",
          "2614:       #[serde(default = \"default_dialog\")]",
          "",
          "[Added Lines]",
          "2599:       #[serde(default = \"default_true\")]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2641:   fn default() -> Self {",
          "2642:     Self {",
          "2643:       active: false,",
          "2645:       endpoints: None,",
          "2646:       pubkey: \"\".into(),",
          "2647:       windows: Default::default(),",
          "",
          "[Removed Lines]",
          "2644:       dialog: default_dialog(),",
          "",
          "[Added Lines]",
          "2629:       dialog: true,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2664:   #[serde(default, alias = \"icon-as-template\")]",
          "2665:   pub icon_as_template: bool,",
          "2671:   pub menu_on_left_click: bool,",
          "2673:   pub title: Option<String>,",
          "2674: }",
          "2688: #[derive(Debug, PartialEq, Eq, Clone, Deserialize, Serialize)]",
          "2689: #[cfg_attr(feature = \"schema\", derive(JsonSchema))]",
          "",
          "[Removed Lines]",
          "2667:   #[serde(",
          "2668:     default = \"default_tray_menu_on_left_click\",",
          "2669:     alias = \"menu-on-left-click\"",
          "2670:   )]",
          "2676: fn default_tray_menu_on_left_click() -> bool {",
          "2677:   true",
          "2678: }",
          "2683: fn default_dialog() -> bool {",
          "2684:   true",
          "2685: }",
          "",
          "[Added Lines]",
          "2652:   #[serde(default = \"default_true\", alias = \"menu-on-left-click\")]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3709:           let allowed_paths = vec_lit(allow, path_buf_lit);",
          "3710:           quote! { #prefix::AllowedPaths(#allowed_paths) }",
          "3711:         }",
          "3713:           let allow = vec_lit(allow, path_buf_lit);",
          "3714:           let deny = vec_lit(deny, path_buf_lit);",
          "3716:         }",
          "3717:       });",
          "3718:     }",
          "",
          "[Removed Lines]",
          "3712:         Self::Scope { allow, deny } => {",
          "3715:           quote! { #prefix::Scope { allow: #allow, deny: #deny } }",
          "",
          "[Added Lines]",
          "3683:         Self::Scope { allow, deny , require_literal_leading_dot} => {",
          "3686:           let  require_literal_leading_dot = opt_lit(require_literal_leading_dot.as_ref());",
          "3687:           quote! { #prefix::Scope { allow: #allow, deny: #deny, require_literal_leading_dot: #require_literal_leading_dot } }",
          "",
          "---------------"
        ],
        "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
          "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   allowed_patterns: Arc<Mutex<HashSet<Pattern>>>,",
          "36:   forbidden_patterns: Arc<Mutex<HashSet<Pattern>>>,",
          "37:   event_listeners: Arc<Mutex<HashMap<Uuid, EventListener>>>,",
          "38: }",
          "40: impl fmt::Debug for Scope {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:   match_options: glob::MatchOptions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:       }",
          "107:     }",
          "109:     Ok(Self {",
          "110:       allowed_patterns: Arc::new(Mutex::new(allowed_patterns)),",
          "111:       forbidden_patterns: Arc::new(Mutex::new(forbidden_patterns)),",
          "112:       event_listeners: Default::default(),",
          "113:     })",
          "114:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     let require_literal_leading_dot = match scope {",
          "111:       FsAllowlistScope::Scope {",
          "112:         require_literal_leading_dot: Some(require),",
          "113:         ..",
          "114:       } => *require,",
          "116:       #[cfg(unix)]",
          "117:       _ => false,",
          "118:       #[cfg(windows)]",
          "119:       _ => true,",
          "120:     };",
          "126:       match_options: glob::MatchOptions {",
          "129:         require_literal_separator: true,",
          "130:         require_literal_leading_dot,",
          "131:         ..Default::default()",
          "132:       },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:     if let Ok(path) = path {",
          "218:       let path: PathBuf = path.components().collect();",
          "229:       let forbidden = self",
          "230:         .forbidden_patterns",
          "231:         .lock()",
          "232:         .unwrap()",
          "233:         .iter()",
          "236:       if forbidden {",
          "237:         false",
          "",
          "[Removed Lines]",
          "219:       let options = glob::MatchOptions {",
          "222:         require_literal_separator: true,",
          "224:         #[cfg(unix)]",
          "225:         require_literal_leading_dot: true,",
          "226:         ..Default::default()",
          "227:       };",
          "234:         .any(|p| p.matches_path_with(&path, options));",
          "",
          "[Added Lines]",
          "244:         .any(|p| p.matches_path_with(&path, self.match_options));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:           .lock()",
          "242:           .unwrap()",
          "243:           .iter()",
          "245:         allowed",
          "246:       }",
          "247:     } else {",
          "",
          "[Removed Lines]",
          "244:           .any(|p| p.matches_path_with(&path, options));",
          "",
          "[Added Lines]",
          "254:           .any(|p| p.matches_path_with(&path, self.match_options));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "271:       allowed_patterns: Default::default(),",
          "272:       forbidden_patterns: Default::default(),",
          "273:       event_listeners: Default::default(),",
          "274:     }",
          "275:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:       match_options: glob::MatchOptions {",
          "287:         require_literal_separator: true,",
          "289:         #[cfg(unix)]",
          "290:         require_literal_leading_dot: false,",
          "291:         #[cfg(windows)]",
          "292:         require_literal_leading_dot: true,",
          "293:         ..Default::default()",
          "294:       },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2654c0f49da23434d36447d0908fa24e61ff5e4e",
      "candidate_info": {
        "commit_hash": "2654c0f49da23434d36447d0908fa24e61ff5e4e",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/2654c0f49da23434d36447d0908fa24e61ff5e4e",
        "files": [
          ".changes/glob-match-require_literal_separator.md",
          "core/tauri/src/scope/fs.rs"
        ],
        "message": "Merge pull request from GHSA-6mv3-wm7j-h4w5\n\n* fix(core): use `require_literal_separator` when matching paths\n\n* document the need for `require_literal_separator`\n\n* use `require_literal_leading_dot`",
        "before_after_code_files": [
          "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ],
          "candidate": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
          "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     if let Ok(path) = path {",
          "218:       let path: PathBuf = path.components().collect();",
          "220:       let forbidden = self",
          "221:         .forbidden_patterns",
          "222:         .lock()",
          "223:         .unwrap()",
          "224:         .iter()",
          "227:       if forbidden {",
          "228:         false",
          "",
          "[Removed Lines]",
          "225:         .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "219:       let options = glob::MatchOptions {",
          "222:         require_literal_separator: true,",
          "224:         #[cfg(unix)]",
          "225:         require_literal_leading_dot: true,",
          "226:         ..Default::default()",
          "227:       };",
          "234:         .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:           .lock()",
          "233:           .unwrap()",
          "234:           .iter()",
          "236:         allowed",
          "237:       }",
          "238:     } else {",
          "",
          "[Removed Lines]",
          "235:           .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "244:           .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:   #[test]",
          "270:   fn path_is_escaped() {",
          "271:     let scope = new_scope();",
          "277:     let scope = new_scope();",
          "283:     let scope = new_scope();",
          "292:     let scope = new_scope();",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "272:     scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "273:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "274:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "275:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "278:     scope.allow_file(\"/home/tauri/**\").unwrap();",
          "279:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "280:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "281:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "284:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "285:     scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "286:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "287:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "288:     assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "289:     assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "290:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "293:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "294:     scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "295:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "296:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "297:     assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "298:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "",
          "[Added Lines]",
          "281:     #[cfg(unix)]",
          "282:     {",
          "283:       scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "284:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "285:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "286:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "287:     }",
          "288:     #[cfg(windows)]",
          "289:     {",
          "290:       scope.allow_directory(\"C:\\\\home\\\\tauri\\\\**\", false).unwrap();",
          "291:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "292:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "293:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "294:     }",
          "297:     #[cfg(unix)]",
          "298:     {",
          "299:       scope.allow_file(\"/home/tauri/**\").unwrap();",
          "300:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "301:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "302:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "303:     }",
          "304:     #[cfg(windows)]",
          "305:     {",
          "306:       scope.allow_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "307:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "308:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "309:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "310:     }",
          "312:     let scope = new_scope();",
          "313:     #[cfg(unix)]",
          "314:     {",
          "315:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "316:       scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "317:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "318:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "319:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "320:       assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "321:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "322:     }",
          "323:     #[cfg(windows)]",
          "324:     {",
          "325:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "326:       scope",
          "327:         .forbid_directory(\"C:\\\\home\\\\tauri\\\\**\", false)",
          "328:         .unwrap();",
          "329:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "330:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "331:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "332:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\inner\\\\folder\\\\anyfile\"));",
          "333:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "334:     }",
          "337:     #[cfg(unix)]",
          "338:     {",
          "339:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "340:       scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "341:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "342:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "343:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "344:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "345:     }",
          "346:     #[cfg(windows)]",
          "347:     {",
          "348:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "349:       scope.forbid_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "350:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "351:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "352:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "353:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "354:     }",
          "357:     #[cfg(unix)]",
          "358:     {",
          "359:       scope.allow_directory(\"/home/tauri\", false).unwrap();",
          "360:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "361:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "362:       assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "363:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "364:     }",
          "365:     #[cfg(windows)]",
          "366:     {",
          "367:       scope.allow_directory(\"C:\\\\home\\\\tauri\", false).unwrap();",
          "368:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "369:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "370:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "371:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "372:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1b0ad6e8b721cf1420a9a4b9be5b05c39941d16",
      "candidate_info": {
        "commit_hash": "f1b0ad6e8b721cf1420a9a4b9be5b05c39941d16",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/f1b0ad6e8b721cf1420a9a4b9be5b05c39941d16",
        "files": [
          ".changes/glob-match-require_literal_separator.md",
          "core/tauri/src/scope/fs.rs"
        ],
        "message": "Merge pull request from GHSA-6mv3-wm7j-h4w5\n\n* fix(core): use `require_literal_separator` when matching paths\n\n* document the need for `require_literal_separator`\n\n* use `require_literal_leading_dot`",
        "before_after_code_files": [
          "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ],
          "candidate": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
          "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     if let Ok(path) = path {",
          "218:       let path: PathBuf = path.components().collect();",
          "220:       let forbidden = self",
          "221:         .forbidden_patterns",
          "222:         .lock()",
          "223:         .unwrap()",
          "224:         .iter()",
          "227:       if forbidden {",
          "228:         false",
          "",
          "[Removed Lines]",
          "225:         .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "219:       let options = glob::MatchOptions {",
          "222:         require_literal_separator: true,",
          "224:         #[cfg(unix)]",
          "225:         require_literal_leading_dot: true,",
          "226:         ..Default::default()",
          "227:       };",
          "234:         .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:           .lock()",
          "233:           .unwrap()",
          "234:           .iter()",
          "236:         allowed",
          "237:       }",
          "238:     } else {",
          "",
          "[Removed Lines]",
          "235:           .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "244:           .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:   #[test]",
          "270:   fn path_is_escaped() {",
          "271:     let scope = new_scope();",
          "277:     let scope = new_scope();",
          "283:     let scope = new_scope();",
          "292:     let scope = new_scope();",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "272:     scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "273:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "274:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "275:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "278:     scope.allow_file(\"/home/tauri/**\").unwrap();",
          "279:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "280:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "281:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "284:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "285:     scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "286:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "287:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "288:     assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "289:     assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "290:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "293:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "294:     scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "295:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "296:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "297:     assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "298:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "",
          "[Added Lines]",
          "281:     #[cfg(unix)]",
          "282:     {",
          "283:       scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "284:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "285:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "286:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "287:     }",
          "288:     #[cfg(windows)]",
          "289:     {",
          "290:       scope.allow_directory(\"C:\\\\home\\\\tauri\\\\**\", false).unwrap();",
          "291:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "292:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "293:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "294:     }",
          "297:     #[cfg(unix)]",
          "298:     {",
          "299:       scope.allow_file(\"/home/tauri/**\").unwrap();",
          "300:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "301:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "302:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "303:     }",
          "304:     #[cfg(windows)]",
          "305:     {",
          "306:       scope.allow_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "307:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "308:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "309:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "310:     }",
          "312:     let scope = new_scope();",
          "313:     #[cfg(unix)]",
          "314:     {",
          "315:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "316:       scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "317:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "318:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "319:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "320:       assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "321:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "322:     }",
          "323:     #[cfg(windows)]",
          "324:     {",
          "325:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "326:       scope",
          "327:         .forbid_directory(\"C:\\\\home\\\\tauri\\\\**\", false)",
          "328:         .unwrap();",
          "329:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "330:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "331:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "332:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\inner\\\\folder\\\\anyfile\"));",
          "333:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "334:     }",
          "337:     #[cfg(unix)]",
          "338:     {",
          "339:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "340:       scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "341:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "342:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "343:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "344:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "345:     }",
          "346:     #[cfg(windows)]",
          "347:     {",
          "348:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "349:       scope.forbid_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "350:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "351:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "352:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "353:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "354:     }",
          "357:     #[cfg(unix)]",
          "358:     {",
          "359:       scope.allow_directory(\"/home/tauri\", false).unwrap();",
          "360:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "361:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "362:       assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "363:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "364:     }",
          "365:     #[cfg(windows)]",
          "366:     {",
          "367:       scope.allow_directory(\"C:\\\\home\\\\tauri\", false).unwrap();",
          "368:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "369:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "370:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "371:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "372:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0602e7c294245ab6ef6fbf2a976ef398340ef58",
      "candidate_info": {
        "commit_hash": "f0602e7c294245ab6ef6fbf2a976ef398340ef58",
        "repo": "tauri-apps/tauri",
        "commit_url": "https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58",
        "files": [
          ".changes/glob-match-require_literal_separator.md",
          "core/tauri/src/scope/fs.rs"
        ],
        "message": "Merge pull request from GHSA-6mv3-wm7j-h4w5\n\n* fix(core): use `require_literal_separator` when matching paths\n\n* document the need for `require_literal_separator`\n\n* use `require_literal_leading_dot`",
        "before_after_code_files": [
          "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ],
          "candidate": [
            "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs"
          ]
        }
      },
      "candidate_diff": {
        "core/tauri/src/scope/fs.rs||core/tauri/src/scope/fs.rs": [
          "File: core/tauri/src/scope/fs.rs -> core/tauri/src/scope/fs.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:     if let Ok(path) = path {",
          "218:       let path: PathBuf = path.components().collect();",
          "220:       let forbidden = self",
          "221:         .forbidden_patterns",
          "222:         .lock()",
          "223:         .unwrap()",
          "224:         .iter()",
          "227:       if forbidden {",
          "228:         false",
          "",
          "[Removed Lines]",
          "225:         .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "219:       let options = glob::MatchOptions {",
          "222:         require_literal_separator: true,",
          "224:         #[cfg(unix)]",
          "225:         require_literal_leading_dot: true,",
          "226:         ..Default::default()",
          "227:       };",
          "234:         .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:           .lock()",
          "233:           .unwrap()",
          "234:           .iter()",
          "236:         allowed",
          "237:       }",
          "238:     } else {",
          "",
          "[Removed Lines]",
          "235:           .any(|p| p.matches_path(&path));",
          "",
          "[Added Lines]",
          "244:           .any(|p| p.matches_path_with(&path, options));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "269:   #[test]",
          "270:   fn path_is_escaped() {",
          "271:     let scope = new_scope();",
          "277:     let scope = new_scope();",
          "283:     let scope = new_scope();",
          "292:     let scope = new_scope();",
          "299:   }",
          "300: }",
          "",
          "[Removed Lines]",
          "272:     scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "273:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "274:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "275:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "278:     scope.allow_file(\"/home/tauri/**\").unwrap();",
          "279:     assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "280:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "281:     assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "284:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "285:     scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "286:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "287:     assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "288:     assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "289:     assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "290:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "293:     scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "294:     scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "295:     assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "296:     assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "297:     assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "298:     assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "",
          "[Added Lines]",
          "281:     #[cfg(unix)]",
          "282:     {",
          "283:       scope.allow_directory(\"/home/tauri/**\", false).unwrap();",
          "284:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "285:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "286:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "287:     }",
          "288:     #[cfg(windows)]",
          "289:     {",
          "290:       scope.allow_directory(\"C:\\\\home\\\\tauri\\\\**\", false).unwrap();",
          "291:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "292:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "293:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "294:     }",
          "297:     #[cfg(unix)]",
          "298:     {",
          "299:       scope.allow_file(\"/home/tauri/**\").unwrap();",
          "300:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "301:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "302:       assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));",
          "303:     }",
          "304:     #[cfg(windows)]",
          "305:     {",
          "306:       scope.allow_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "307:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "308:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "309:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "310:     }",
          "312:     let scope = new_scope();",
          "313:     #[cfg(unix)]",
          "314:     {",
          "315:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "316:       scope.forbid_directory(\"/home/tauri/**\", false).unwrap();",
          "317:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "318:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "319:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "320:       assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));",
          "321:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "322:     }",
          "323:     #[cfg(windows)]",
          "324:     {",
          "325:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "326:       scope",
          "327:         .forbid_directory(\"C:\\\\home\\\\tauri\\\\**\", false)",
          "328:         .unwrap();",
          "329:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "330:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "331:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "332:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\inner\\\\folder\\\\anyfile\"));",
          "333:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "334:     }",
          "337:     #[cfg(unix)]",
          "338:     {",
          "339:       scope.allow_directory(\"/home/tauri\", true).unwrap();",
          "340:       scope.forbid_file(\"/home/tauri/**\").unwrap();",
          "341:       assert!(!scope.is_allowed(\"/home/tauri/**\"));",
          "342:       assert!(scope.is_allowed(\"/home/tauri/**/file\"));",
          "343:       assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "344:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "345:     }",
          "346:     #[cfg(windows)]",
          "347:     {",
          "348:       scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();",
          "349:       scope.forbid_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();",
          "350:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "351:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "352:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "353:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "354:     }",
          "357:     #[cfg(unix)]",
          "358:     {",
          "359:       scope.allow_directory(\"/home/tauri\", false).unwrap();",
          "360:       assert!(scope.is_allowed(\"/home/tauri/**\"));",
          "361:       assert!(!scope.is_allowed(\"/home/tauri/**/file\"));",
          "362:       assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));",
          "363:       assert!(scope.is_allowed(\"/home/tauri/anyfile\"));",
          "364:     }",
          "365:     #[cfg(windows)]",
          "366:     {",
          "367:       scope.allow_directory(\"C:\\\\home\\\\tauri\", false).unwrap();",
          "368:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));",
          "369:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));",
          "370:       assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));",
          "371:       assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));",
          "372:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}