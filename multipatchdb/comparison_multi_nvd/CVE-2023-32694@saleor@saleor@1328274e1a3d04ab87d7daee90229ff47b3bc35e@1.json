{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "368577213fe0e738f6397a24522849e68b7c35ea",
      "candidate_info": {
        "commit_hash": "368577213fe0e738f6397a24522849e68b7c35ea",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/368577213fe0e738f6397a24522849e68b7c35ea",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/__init__.py",
          "saleor/payment/gateways/adyen/tests/cassettes/test_capture_payment.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_confirm_payment.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_get_payment_gateway_for_checkout.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment_with_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_refund_payment.yaml",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py"
        ],
        "message": "Add tests for payment handlers",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saleor/saleor/pull/5914"
        ],
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     def process_payment(",
          "235:         self, payment_information: \"PaymentData\", previous_value",
          "236:     ) -> \"GatewayResponse\":",
          "237:         request_data = request_data_for_payment(",
          "238:             payment_information,",
          "239:             return_url=self.config.connection_params[\"return_url\"],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:         # TODO Klarna data!!!",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:         result = api_call(request_data, self.adyen.checkout.payments)",
          "245:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "246:         return GatewayResponse(",
          "247:             is_success=is_success,",
          "248:             action_required=\"action\" in result.message,",
          "250:             amount=payment_information.amount,",
          "251:             currency=payment_information.currency,",
          "252:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "",
          "[Removed Lines]",
          "249:             kind=TransactionKind.AUTH,",
          "",
          "[Added Lines]",
          "247:         if self.config.auto_capture:",
          "248:             kind = TransactionKind.CAPTURE",
          "249:         else:",
          "250:             kind = TransactionKind.AUTH",
          "254:             kind=kind,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: from decimal import Decimal",
          "4: # settings.PLUGINS = [\"saleor.plugins.avatax.plugin.AvataxPlugin\"]",
          "5: #     manager = get_plugins_manager()",
          "6: #     manager.save_plugin_configuration(",
          "7: #         AvataxPlugin.PLUGIN_ID,",
          "8: #         {",
          "9: #             \"configuration\": [",
          "10: #                 {\"name\": \"Username or account\", \"value\": \"test\"},",
          "11: #                 {\"name\": \"Password or license\", \"value\": \"test\"},",
          "12: #             ],",
          "13: #         },",
          "14: #     )",
          "15: #     manager.save_plugin_configuration(AvataxPlugin.PLUGIN_ID, {\"active\": True})",
          "16: #     plugin_configuration = PluginConfiguration.objects.get(",
          "17: #         identifier=AvataxPlugin.PLUGIN_ID",
          "18: #     )",
          "19: #     assert plugin_configuration.active",
          "20: import pytest",
          "22: from .....plugins.manager import get_plugins_manager",
          "23: from .... import TransactionKind",
          "24: from ....interface import GatewayResponse",
          "25: from ....utils import create_payment, create_payment_information, create_transaction",
          "26: from ..plugin import AdyenGatewayPlugin",
          "29: @pytest.fixture",
          "30: def adyen_plugin(settings):",
          "31:     def fun(",
          "32:         api_key=None,",
          "33:         merchant_account=None,",
          "34:         return_url=None,",
          "35:         origin_key=None,",
          "36:         origin_url=None,",
          "37:         auto_capture=None,",
          "38:     ):",
          "39:         api_key = api_key or \"test_key\"",
          "40:         merchant_account = merchant_account or \"SaleorECOM\"  # \"test_merchant\"",
          "41:         return_url = return_url or \"http://127.0.0.1:3000/\"  # \"test_return_url\"",
          "42:         origin_key = (",
          "43:             origin_key or \"test_origin_key\"",
          "44:         )  # \"pub.v2.8015947108133280.aHR0cDovLzEyNy4wLjAuMTozMDAw.F13B5vHDsUw4vWEkRTUMUfICGgkS_Vdu4EbpiqZY6OU\"",
          "45:         origin_url = origin_url or \"http://127.0.0.1:3000\"  # \"test_origin_url\"",
          "46:         auto_capture = auto_capture or False",
          "47:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "48:         manager = get_plugins_manager()",
          "49:         manager.save_plugin_configuration(",
          "50:             AdyenGatewayPlugin.PLUGIN_ID,",
          "51:             {",
          "52:                 \"active\": True,",
          "53:                 \"configuration\": [",
          "54:                     {\"name\": \"API key\", \"value\": api_key},",
          "55:                     {\"name\": \"Merchant Account\", \"value\": merchant_account},",
          "56:                     {\"name\": \"Return Url\", \"value\": return_url},",
          "57:                     {\"name\": \"Origin Key\", \"value\": origin_key},",
          "58:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "59:                     {",
          "60:                         \"name\": \"Automatically mark payment as a capture\",",
          "61:                         \"value\": auto_capture,",
          "62:                     },",
          "63:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "64:                 ],",
          "65:             },",
          "66:         )",
          "68:         manager = get_plugins_manager()",
          "69:         return manager.plugins[0]",
          "71:     return fun",
          "74: @pytest.mark.vcr",
          "75: def test_get_payment_gateway_for_checkout(",
          "76:     adyen_plugin, checkout_with_single_item, address",
          "77: ):",
          "78:     checkout_with_single_item.billing_address = address",
          "79:     checkout_with_single_item.save()",
          "80:     adyen_plugin = adyen_plugin()",
          "81:     response = adyen_plugin.get_payment_gateway_for_checkout(",
          "82:         checkout_with_single_item, None",
          "83:     )",
          "84:     assert response.id == adyen_plugin.PLUGIN_ID",
          "85:     assert response.name == adyen_plugin.PLUGIN_NAME",
          "86:     config = response.config",
          "87:     assert len(config) == 2",
          "88:     assert config[0] == {",
          "89:         \"field\": \"origin_key\",",
          "90:         \"value\": adyen_plugin.config.connection_params[\"origin_key\"],",
          "91:     }",
          "92:     assert config[1][\"field\"] == \"config\"",
          "93:     config = json.loads(config[1][\"value\"])",
          "94:     assert isinstance(config, list)",
          "97: @pytest.fixture",
          "98: def payment_adyen_for_checkout(checkout_with_items, address):",
          "99:     checkout_with_items.billing_address = address",
          "100:     checkout_with_items.save()",
          "101:     payment = create_payment(",
          "102:         gateway=AdyenGatewayPlugin.PLUGIN_ID,",
          "103:         payment_token=\"\",",
          "104:         total=Decimal(\"1234\"),",
          "105:         currency=checkout_with_items.currency,",
          "106:         email=checkout_with_items.email,",
          "107:         customer_ip_address=\"\",",
          "108:         checkout=checkout_with_items,",
          "109:     )",
          "110:     return payment",
          "113: @pytest.fixture",
          "114: def payment_adyen_for_order(payment_adyen_for_checkout, order_with_lines):",
          "115:     payment_adyen_for_checkout.checkout = None",
          "116:     payment_adyen_for_checkout.order = order_with_lines",
          "117:     payment_adyen_for_checkout.save()",
          "118:     return payment_adyen_for_checkout",
          "121: @pytest.mark.vcr",
          "122: def test_process_payment(payment_adyen_for_checkout, checkout_with_items, adyen_plugin):",
          "123:     payment_info = create_payment_information(",
          "124:         payment_adyen_for_checkout,",
          "125:         additional_data={\"paymentMethod\": {\"paymentdata\": \"\"}},",
          "126:     )",
          "127:     adyen_plugin = adyen_plugin()",
          "128:     response = adyen_plugin.process_payment(payment_info, None)",
          "129:     assert response.is_success is True",
          "130:     assert response.action_required is False",
          "131:     assert response.kind == TransactionKind.AUTH",
          "132:     assert response.amount == Decimal(\"1234\")",
          "133:     assert response.currency == checkout_with_items.currency",
          "134:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "135:     assert response.error is None",
          "138: @pytest.mark.vcr",
          "139: def test_process_payment_with_auto_capture(",
          "140:     payment_adyen_for_checkout, checkout_with_items, adyen_plugin",
          "141: ):",
          "142:     payment_info = create_payment_information(",
          "143:         payment_adyen_for_checkout,",
          "144:         additional_data={\"paymentMethod\": {\"paymentdata\": \"\"}},",
          "145:     )",
          "146:     adyen_plugin = adyen_plugin(auto_capture=True)",
          "147:     response = adyen_plugin.process_payment(payment_info, None)",
          "148:     assert response.is_success is True",
          "149:     assert response.action_required is False",
          "150:     assert response.kind == TransactionKind.CAPTURE",
          "151:     assert response.amount == Decimal(\"1234\")",
          "152:     assert response.currency == checkout_with_items.currency",
          "153:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "154:     assert response.error is None",
          "157: @pytest.mark.vcr",
          "158: def test_confirm_payment(payment_adyen_for_order, adyen_plugin):",
          "159:     return  # teest it when we will have additional auth data",
          "160:     payment_info = create_payment_information(",
          "161:         payment_adyen_for_order,",
          "162:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "163:     )",
          "164:     adyen_plugin = adyen_plugin()",
          "165:     response = adyen_plugin.confirm_payment(payment_info, None)",
          "168: @pytest.mark.vcr",
          "169: def test_refund_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "170:     payment_info = create_payment_information(",
          "171:         payment_adyen_for_order,",
          "172:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "173:     )",
          "174:     gateway_response = GatewayResponse(",
          "175:         kind=TransactionKind.AUTH,",
          "176:         action_required=False,",
          "177:         transaction_id=\"882595494831959A\",",
          "178:         is_success=False,",
          "179:         amount=payment_info.amount,",
          "180:         currency=payment_info.currency,",
          "181:         error=\"\",",
          "182:         raw_response={},",
          "183:     )",
          "185:     create_transaction(",
          "186:         payment=payment_adyen_for_order,",
          "187:         payment_information=payment_info,",
          "188:         kind=TransactionKind.AUTH,",
          "189:         gateway_response=gateway_response,",
          "190:     )",
          "191:     response = adyen_plugin().refund_payment(payment_info, None)",
          "192:     assert response.is_success is True",
          "193:     assert response.action_required is False",
          "194:     assert response.kind == TransactionKind.REFUND_ONGOING",
          "195:     assert response.amount == Decimal(\"1234\")",
          "196:     assert response.currency == order_with_lines.currency",
          "197:     assert response.transaction_id == \"882595499620961A\"  # ID returned by Adyen",
          "200: @pytest.mark.vcr",
          "201: def test_capture_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "202:     payment_info = create_payment_information(",
          "203:         payment_adyen_for_order,",
          "204:         # additional_data={\"paymentMethod\": {'riskData': {'clientData': 'eyJ2ZXJzaW9uIjoiMS4wLjAiLCJkZXZpY2VGaW5nZXJwcmludCI6InJ5RUdYOGVacEowMDMwMDAwMDAwMDAwMDAwS1piSVFqNmt6czAwODkxNDY3NzZjVkI5NGlLekJHdmFtOUVxNm9WUTVTMTZHb2g1TWswMDRpdmJTdVlkRzBSMDAwMDBZVnhFcjAwMDAwY3J1OXNBeFRSNWlaQ3FuSTRsc2s6NDAiLCJwZXJzaXN0ZW50Q29va2llIjpbIl9ycF91aWQ9YzA0ZDE5OWEtYjkyYy1iZmQzLTI1YTMtNDJmM2ZjODdiN2UyIl0sImNvbXBvbmVudHMiOnsidXNlckFnZW50IjoiZmU5ZWMxM2NmMGFjODM4Y2YwYWVkMWM0NjJiYTUxODkiLCJsYW5ndWFnZSI6ImVuLUdCIiwiY29sb3JEZXB0aCI6MjQsImRldmljZU1lbW9yeSI6OCwicGl4ZWxSYXRpbyI6MSwiaGFyZHdhcmVDb25jdXJyZW5jeSI6OCwic2NyZWVuV2lkdGgiOjI1NjAsInNjcmVlbkhlaWdodCI6MTQ0MCwiYXZhaWxhYmxlU2NyZWVuV2lkdGgiOjI1NjAsImF2YWlsYWJsZVNjcmVlbkhlaWdodCI6MTQxNywidGltZXpvbmVPZmZzZXQiOi0xMjAsInRpbWV6b25lIjoiRXVyb3BlL1dhcnNhdyIsInNlc3Npb25TdG9yYWdlIjoxLCJsb2NhbFN0b3JhZ2UiOjEsImluZGV4ZWREYiI6MSwiYWRkQmVoYXZpb3IiOjAsIm9wZW5EYXRhYmFzZSI6MSwicGxhdGZvcm0iOiJNYWNJbnRlbCIsInBsdWdpbnMiOiJjMDhlOTc4YWIwMmUzNTk1YmZiOWNiN2ViZWZlZjMzMyIsImNhbnZhcyI6ImQ2MTY0ZTcwN2VkODQ3ZTUxODhhNWI1MjA4ZjQyNThiIiwid2ViZ2wiOiIwMzNkY2RlZjQ4YmY3NmY5MTMyY2M3MDlkZmY5YTA3MSIsIndlYmdsVmVuZG9yQW5kUmVuZGVyZXIiOiJJbnRlbCBJbmMufkludGVsKFIpIElyaXMoVE0pIFBsdXMgR3JhcGhpY3MgNjU1IiwiYWRCbG9jayI6MSwiaGFzTGllZExhbmd1YWdlcyI6MCwiaGFzTGllZFJlc29sdXRpb24iOjAsImhhc0xpZWRPcyI6MCwiaGFzTGllZEJyb3dzZXIiOjAsImZvbnRzIjoiMjkyZWEyY2NlY2NkMDJiMDFjMGM0YzFkNDEzMjE3NWUiLCJhdWRpbyI6IjQ3M2QxYzc0ZGI3Y2QzOGUxZmExNTgxN2IxMzY2YmZjIiwiZW51bWVyYXRlRGV2aWNlcyI6IjNiYzFkYTVmMzM1YTk5ZjE3NmJmMGUzYzgyNTFhMTkzIn19'}, 'paymentMethod': {'type': 'scheme', 'encryptedCardNumber': 'adyenjs_0_1_25$FakMVsJwQJd7jca8dYfL6xhLfXeWhqYhAOkqgqNF7yM+5Tl0boUG9Xk4dKFakS4/3lCIjomlgAmOt4vEGveFDJtljGyS7t1sElK+fUASA/AMsSMFcMBPPr8ybKqHNwwj6k4t9SagLUQX27m0hIMmOKwQLdwwJHE9Iw/D2rGRqbsamq8cmG+T2tHDeqt5YWRCoho8t1u+OMzJMsalfeYbJmI7uIfvjbHAa0LtM5X2B6DcOClqRfwmLg8AgR5Gr4NDPub7di/W9F9Qkt56nPkN9WEYTOA1HIWkgBGHkTwCBVCxKjHmQgcnH1SPf4kram5TUGT85p3J2/BL1QmpPZixtw==$u9MN2eUsQkAvlSPT3k7YvhE3YXNwp/CmrIArUrFMfTPoQiibd4boM9oGL3hIrE5rWyzvc+4P9q1coGAiW6FNgas1+ZifHzjs8bmPHYC2h0mrmdFu4MsJp6+RL+4B0C5sd0Ef1aUEW8wfFjOfE3NZVPibaUKT6iBFeAplfV73AQEmIh2TXvm9PEmWtvCPcmA2Z6C8u53VOn9b3Y0lq3E88WgNEX6dShRqcvsLpSkTzaXAYroXBSi0oCFu9ebtqMBtkGujPOZa+ULq7o651xDHlJPxGmGHzxJ2N6gxn7P/Fpdj9BJf9ZfEMmP4Artm86lN3OUudu7Dfo7qh46FZQ4UAbRmrEJVix/sHVP1Z30d6cGfsTi331NkNKomyjS53Mdp//jx43X7t+wZyxoIyDvk+buQhM5rCzpD8lyvffagJPQMvImajBjyXOEOFFy45yrXxwl1ZlCegzDyRzv7u3o6grqvobbSaZm8kHSvDGM8uAklwgUDfIcWqUWQeXPJpZPECY6wffjMixJG8nurmb/VBig9P33e/MJo79U6jgWyoRFT7Yp6OJ3egYp403d+EgZCSrpcjX0tc5PYuZth1kE0cjOYRD1XgmVC0rtn5dxqk7CxVC+S1pSLSdrtGVTj5tNDdunq1zCT1+zmasjjGLDzZ5p1JE4z9PccesH2nfuYwT2aEqalDCCGA2LPIFpM3dvFVYTVFsKo5n7LPAlakWSAC5+tZ9RL/SbtfPXb9erIN90WyDSwCZr9CD36xayWgoPP66y/Sc24nzoTE4LYx2FeAvs7aqIN4Mu0sUFMUMJEHHNsmvFzWBIveo+KmBiHYri9iXeNW6k+w6fk/zLE/yBuYsJFAKE5CFmd3LMdbZCCd/RS8g==', 'encryptedExpiryMonth': 'adyenjs_0_1_25$qG3iso+7U0Oa5iCydxxisgLaEJ2rBoamj5JhUXeHCvC5Gy7MgyHz6ztYib4Y7QFfferfmqH7gkFe7yDR94cKbhDt3d8ePSFAs+96SU93wYAYVWzn5dLPFiXhwtnhtk/7YCZaT5b4YKZJ/9bOWkU+CwHJ/y2ELhtx2MRDDSBOZOFjsm1K3LAvu8gNIKP8QhFxfT28qLmC1xlQHKjqlIpaEqJPs92Zi40dWhkrFIHE3lCfIlpJbVI4EW5xDD8l70wkmQsnCIhJ3toSdENk8vr0/AWlPPt4lzfLfIXN5MHuifsC3iReYiK9vzjkX4VQJTkfY+0SIo/S1Ccu84n0xLKVdA==$HZmDBPHVt+5u711J5pfTvS8ZT1fD443FnOkG+YwMxNZkF+ioUz3cdP/Cr3jHL1pFLxZfmtqJwpigG/5TOvJsF9QealVWD4tfWKQuxzEKeO3xNYS1D/rWWvjdjhz6Eb0satd+DKzZjmtPEiyPBQ9+01OFdm17FTEDq2V5JiqBIIKB7Erw9CpMSYxmdNzhsFQongwi6kZ2Ju1or+C/noecpi2YdX3X0JLLRuEEYE2SAHHKCQKfHpOl7sXVtJ1K5wOCZpH9pBmoEtETLxS/gOjONbhjbdwnZ6ovc7RH3V3pnqEuiFA8/RFVyQia/Jels6yRSSPXp0SQaGByNALFeVLDcfuX53sHm+IO9oHS69RBox/Es3Utxy80In7Q2Lel5eWL61E+RjQmlSS6Ua7yL8eGkucBxHhdY0a7K34V+kM7HyJd4WzWA93YOznkAU4Ezqpxz42hepGBFNbeUWaFc2Xb', 'encryptedExpiryYear': 'adyenjs_0_1_25$L+CzaH0ce+jzo4PXZPffqWIjDAshC38J+rywq/7CYRChqVZ14sPX0HSyymETGBqVCJebv22N0VWb3jKhpedTExqmXHiL/WnwmhpFcOKArUZIt60OBE1RZ6NSXJiQpaKgIofonVD32gtammLhljoyDeYTaTYuvHrbLLSyJSc0DUFxSVIUuMkwytXrpOL+jVYCRteYQ6Koxs1RIPy5v3+3JFMTNILpOi+jwaATbpHW6wGj1vhr+y7MQtlVqBvXNlbID5MXiYmUpqYPKEVSNFBoGCERU9d8N/FAsWmLThGVlzUub90M/N1UdjBljZrxTEpkY7wJah6DnMEqQ6PTLPJjJg==$Aqsbh5fcErzrb+7P+dHvofFP9PujIDsOACst8DEdaLiLNwPfPTAiCmYS6l+ev99v6i3BWBFdR1vvH0PfPKNxmLtSByGqf8c6xUoaIaVyBpYz6qpTHlj25e73ROhx9MGfFJtpgnHs8zM39+Y0AuCZ+lTtVgacMR28xkhyl88VjGUrq/jLESOpOS9VsgjjctlXsup5zr+/bL2JpUPkKYW0l3yx9aIZBjZXIkF6k0Ax8wdWMIjJyOOHYJfzUKR1zvDz8AkWxFdrTZWrKAfdMlI9+oyrPYfcxebnTyn7OxEc4blqCghlWxbzEgWdl29ez8rtzh2o6U3YL0gI2sQoSvwR9NUzZT37K5kXbEq/L5VPnDtfGV6pnnbN3335WVFDPAeSss7vSup6GusVDU3HMfKnKwf8a4/T3XmixVGI+CW/xlqIGEfY6/b77r/HA41LYo9i2T+UXhJyT8F7nd2+YCUxsA==', 'encryptedSecurityCode': 'adyenjs_0_1_25$VzWN+WT4DVd0BlT5Umwq4lgqvc00SxadFDbXfHm1VDlx/V1X5mpqYMizTcgKL+hfmyNjuic9NqHh9YBP7yZNJkoP61n2op1ZPO3gBklnAqKR9rGeCpkNvBgEUDIiuVTxNRzQD1UtKvWMX4RQeI0/vGKraNQCDbGQS1g+N4JUnzEnMmSUAq5GPKsoFijEP/UfXR2/Qh4g/AoyCwfmneDFG+YuqKa4LI563yRgODIKVZk+tYrzVGOw4Ass4R0kaHztcx7vk0haNur5MWsS0WzciuMhYfBu33qwW9i0P4yePxHEJdFlGCn+uxUFjmQj39Rch5xUUo6tkHP7b72Gn5xH3g==$uJDSyZJ8HNdG9q8REYbAVEHlnGuN/RRTQ6DGB3svlqheRY6tdqWnMS5g5nDJMT3VU+nEdvEpso21NhOiHGMhBTMd8UzMUYJqUbWwp/295Khvjpo5NNtwrmdQ74M2s5f19/Pn+6zwmC6HG+WFH7ZNTClLX8CqXa4iCEudho6IDg+Yf5RxCBO5Cvn30K2g6c16zMwNnNo/y7F8ejr8f2W+zvLtCPhLmb+8umvj8I65VHR+fr+aJ85w8WRSONOmFhdQTLbsUTnmuQHEksBTYfVK6kwTg661IfTgjaSdCmhs0gs0qBnSeVgTtizyO7rvKM6pfR5f78PVZPQWpOGhxGRqhu3TAc+4XZDSwh8B8Y0ofn98rucJpL3MgE+QHTn0AkBg9gtjmWWs0bNEFXBWDoAGfcs/ATCCfF74bgr2KstwOO3PBm7C4Y6ssPFsYqOomJGIZeCL+OAcEA+eeCDW/xjUEpPdiEZiIA3cAA=='}, 'browserInfo': {'acceptHeader': '*/*', 'colorDepth': 24, 'language': 'en-GB', 'javaEnabled': False, 'screenHeight': 1440, 'screenWidth': 2560, 'userAgent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36', 'timeZoneOffset': -120}}}",
          "205:     )",
          "206:     gateway_response = GatewayResponse(",
          "207:         kind=TransactionKind.AUTH,",
          "208:         action_required=False,",
          "209:         transaction_id=\"882595494831959A\",",
          "210:         is_success=False,",
          "211:         amount=payment_info.amount,",
          "212:         currency=payment_info.currency,",
          "213:         error=\"\",",
          "214:         raw_response={},",
          "215:     )",
          "217:     create_transaction(",
          "218:         payment=payment_adyen_for_order,",
          "219:         payment_information=payment_info,",
          "220:         kind=TransactionKind.AUTH,",
          "221:         gateway_response=gateway_response,",
          "222:     )",
          "223:     response = adyen_plugin().capture_payment(payment_info, None)",
          "224:     assert response.is_success is True",
          "225:     assert response.action_required is False",
          "226:     assert response.kind == TransactionKind.CAPTURE",
          "227:     assert response.amount == Decimal(\"1234\")",
          "228:     assert response.currency == order_with_lines.currency",
          "229:     assert response.transaction_id == \"852595499936560C\"  # ID returned by Adyen",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         # Add to dashboard config the flow to combine channel with url like:",
          "67:         # web1:https://shop.com, web2:https://shop1.com",
          "68:         extra_request_params[\"origin\"] = origin_url",
          "72:     request = {",
          "73:         \"amount\": {",
          "74:             \"value\": get_price_amount(",
          "",
          "[Removed Lines]",
          "69:     print(",
          "70:         float(quantize_price(payment_information.amount, payment_information.currency))",
          "71:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:             \"currency\": payment_information.currency,",
          "78:         },",
          "79:         \"reference\": payment_information.payment_id,",
          "81:         \"returnUrl\": return_url,",
          "82:         \"merchantAccount\": merchant_account,",
          "",
          "[Removed Lines]",
          "80:         \"paymentMethod\": payment_data[\"paymentMethod\"],",
          "",
          "[Added Lines]",
          "78:         \"paymentMethod\": payment_data.get(\"paymentMethod\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7404f69b9070e738458d97ad199c5bffa9d3f31",
      "candidate_info": {
        "commit_hash": "b7404f69b9070e738458d97ad199c5bffa9d3f31",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/b7404f69b9070e738458d97ad199c5bffa9d3f31",
        "files": [
          "saleor/payment/utils.py"
        ],
        "message": "clean up code",
        "before_after_code_files": [
          "saleor/payment/utils.py||saleor/payment/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saleor/saleor/pull/5914"
        ],
        "olp_code_files": {
          "patch": [
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:         return",
          "218:     transaction_kind = transaction.kind",
          "223:     if transaction_kind in {",
          "224:         TransactionKind.CAPTURE,",
          "",
          "[Removed Lines]",
          "219:     # if transaction.action_required:",
          "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
          "221:     #     payment.save(update_fields=[\"charge_status\", ])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e99b94b838314ef4d17c107ac933a9057d4a559",
      "candidate_info": {
        "commit_hash": "7e99b94b838314ef4d17c107ac933a9057d4a559",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/7e99b94b838314ef4d17c107ac933a9057d4a559",
        "files": [
          "saleor/core/payments.py",
          "saleor/plugins/base_plugin.py"
        ],
        "message": "Drop unused imports",
        "before_after_code_files": [
          "saleor/core/payments.py||saleor/core/payments.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saleor/saleor/pull/5914"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "saleor/core/payments.py||saleor/core/payments.py": [
          "File: saleor/core/payments.py -> saleor/core/payments.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from abc import ABC, abstractmethod",
          "4: if TYPE_CHECKING:",
          "5:     # flake8: noqa",
          "",
          "[Removed Lines]",
          "2: from typing import TYPE_CHECKING, Iterable, List, Optional",
          "",
          "[Added Lines]",
          "2: from typing import TYPE_CHECKING, List, Optional",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from copy import copy",
          "2: from decimal import Decimal",
          "5: from django.core.handlers.wsgi import WSGIRequest",
          "6: from django.http import HttpResponse",
          "",
          "[Removed Lines]",
          "3: from typing import TYPE_CHECKING, Any, Iterable, List, Optional, Union",
          "",
          "[Added Lines]",
          "3: from typing import TYPE_CHECKING, Any, List, Optional, Union",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e85faee417500ab196e7252e34aaafaab27a7e5",
      "candidate_info": {
        "commit_hash": "2e85faee417500ab196e7252e34aaafaab27a7e5",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/2e85faee417500ab196e7252e34aaafaab27a7e5",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py"
        ],
        "message": "Fix incorrect passing the payment data",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saleor/saleor/pull/5914"
        ],
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:                     \"field\": \"origin_key\",",
          "218:                     \"value\": config.connection_params[\"origin_key\"],",
          "219:                 },",
          "224:             ],",
          "225:             currencies=self.get_supported_currencies([]),",
          "226:         )",
          "",
          "[Removed Lines]",
          "220:                 {",
          "221:                     \"field\": \"config\",",
          "222:                     \"value\": json.dumps(response.message.get(\"paymentMethods\", {})),",
          "223:                 },",
          "",
          "[Added Lines]",
          "220:                 {\"field\": \"config\", \"value\": json.dumps(response.message)},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c980295b3f171dc2fcad565f04f253a828afc0dc",
      "candidate_info": {
        "commit_hash": "c980295b3f171dc2fcad565f04f253a828afc0dc",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/c980295b3f171dc2fcad565f04f253a828afc0dc",
        "files": [
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Handle payment_details exception in adyen additional actions",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import pytest",
          "8: from django.contrib.auth.hashers import make_password",
          "13: from ..utils import get_price_amount",
          "14: from ..webhooks import (",
          "15:     create_new_transaction,",
          "",
          "[Removed Lines]",
          "10: from saleor.order import OrderStatus",
          "11: from saleor.payment import ChargeStatus, TransactionKind",
          "",
          "[Added Lines]",
          "10: from .....order import OrderStatus",
          "11: from .... import ChargeStatus, PaymentError, TransactionKind",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:         response.content.decode()",
          "832:         == \"The given payment does not have the corresponding checkout.\"",
          "833:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "836: def test_handle_additional_actions_api_call_error(",
          "837:     api_call_mock, payment_adyen_for_checkout,",
          "838: ):",
          "839:     # given",
          "840:     payment_adyen_for_checkout.extra_data = json.dumps(",
          "841:         {\"payment_data\": \"test_data\", \"parameters\": [\"payload\"]}",
          "842:     )",
          "843:     payment_adyen_for_checkout.save()",
          "845:     payment_id = graphene.Node.to_global_id(\"Payment\", payment_adyen_for_checkout.pk)",
          "847:     error_message = \"Test error\"",
          "848:     api_call_mock.side_effect = PaymentError(error_message)",
          "850:     request_mock = mock.Mock()",
          "851:     request_mock.GET = {",
          "852:         \"payment\": payment_id,",
          "853:         \"checkout\": payment_adyen_for_checkout.checkout.pk,",
          "854:     }",
          "855:     request_mock.POST = {\"payload\": \"test\"}",
          "857:     payment_details_mock = mock.Mock()",
          "858:     message = {",
          "859:         \"resultCode\": \"Test\",",
          "860:     }",
          "861:     payment_details_mock.return_value.message = message",
          "863:     # when",
          "864:     response = handle_additional_actions(request_mock, payment_details_mock)",
          "866:     # then",
          "867:     assert response.status_code == 400",
          "868:     assert response.content.decode() == error_message",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: )",
          "25: from ....order.events import external_notification_event",
          "26: from ....payment.models import Payment, Transaction",
          "28: from ...interface import GatewayConfig, GatewayResponse",
          "29: from ...utils import create_transaction, gateway_postprocess",
          "33: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Removed Lines]",
          "27: from ... import ChargeStatus, TransactionKind",
          "30: from .utils import convert_adyen_price_format",
          "",
          "[Added Lines]",
          "27: from ... import ChargeStatus, PaymentError, TransactionKind",
          "30: from .utils import api_call, convert_adyen_price_format",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:         \"details\": {key: request.POST[key] for key in data[\"parameters\"]},",
          "529:     }",
          "533:     checkout_id = graphene.Node.to_global_id(",
          "534:         \"Checkout\", checkout_pk  # type: ignore",
          "",
          "[Removed Lines]",
          "531:     result = payment_details(request_data)",
          "",
          "[Added Lines]",
          "531:     try:",
          "532:         result = api_call(request_data, payment_details)",
          "533:     except PaymentError as e:",
          "534:         return HttpResponseBadRequest(str(e))",
          "",
          "---------------"
        ]
      }
    }
  ]
}