{
  "cve_id": "CVE-2021-3766",
  "cve_desc": "objection.js is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
  "repo": "Vincit/objection.js",
  "patch_hash": "46b842a6bc897198b83f41ac85c92864b991d7e9",
  "patch_info": {
    "commit_hash": "46b842a6bc897198b83f41ac85c92864b991d7e9",
    "repo": "Vincit/objection.js",
    "commit_url": "https://github.com/Vincit/objection.js/commit/46b842a6bc897198b83f41ac85c92864b991d7e9",
    "files": [
      "lib/utils/objectUtils.js"
    ],
    "message": "Security Fix for Prototype Pollution\n\nFix prototype pollution when path components are not strings",
    "before_after_code_files": [
      "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
    ]
  },
  "patch_diff": {
    "lib/utils/objectUtils.js||lib/utils/objectUtils.js": [
      "File: lib/utils/objectUtils.js -> lib/utils/objectUtils.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "226:   for (let i = 0, l = path.length - 1; i < l; ++i) {",
      "227:     const key = path[i];",
      "228:     let child = obj[key];",
      "230:     if (!isObject(child)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "228:     if (key === '__proto__') {",
      "229:       return false;",
      "230:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "252: function zipObject(keys, values) {",
      "253:   const out = {};",
      "256:     out[keys[i]] = values[i];",
      "257:   }",
      "",
      "[Removed Lines]",
      "255:   for (let i = 0, l = keys.length; i < l; ++i) {",
      "",
      "[Added Lines]",
      "258:   for (let i = 0, l = keys.length; i < l; ++i) {",
      "259:     if (keys[i] === '__proto__') {",
      "260:       return false;",
      "261:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9e82264c93b02cba4d981c23447473e117a42b67",
      "candidate_info": {
        "commit_hash": "9e82264c93b02cba4d981c23447473e117a42b67",
        "repo": "Vincit/objection.js",
        "commit_url": "https://github.com/Vincit/objection.js/commit/9e82264c93b02cba4d981c23447473e117a42b67",
        "files": [
          "lib/utils/objectUtils.js"
        ],
        "message": "run prettier",
        "before_after_code_files": [
          "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
          ],
          "candidate": [
            "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/utils/objectUtils.js||lib/utils/objectUtils.js": [
          "File: lib/utils/objectUtils.js -> lib/utils/objectUtils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "255: function zipObject(keys, values) {",
          "256:   const out = {};",
          "259:     if (keys[i] === '__proto__') {",
          "260:       return false;",
          "261:     }",
          "",
          "[Removed Lines]",
          "258:   for (let i = 0, l = keys.length; i < l; ++i) {",
          "",
          "[Added Lines]",
          "258:   for (let i = 0, l = keys.length; i < l; ++i) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12820599bda5958e4e410bb4ef83769e75f71cdd",
      "candidate_info": {
        "commit_hash": "12820599bda5958e4e410bb4ef83769e75f71cdd",
        "repo": "Vincit/objection.js",
        "commit_url": "https://github.com/Vincit/objection.js/commit/12820599bda5958e4e410bb4ef83769e75f71cdd",
        "files": [
          "lib/utils/objectUtils.js",
          "package.json"
        ],
        "message": "fix more theoretical prototype pollution holes. To be clear THESE ARE NOT REAL VULNERABILITIES. These functions are never used with user input and cannot be used in an attack.",
        "before_after_code_files": [
          "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
          ],
          "candidate": [
            "lib/utils/objectUtils.js||lib/utils/objectUtils.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/utils/objectUtils.js||lib/utils/objectUtils.js": [
          "File: lib/utils/objectUtils.js -> lib/utils/objectUtils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: function flatten(arrays) {",
          "191:   const out = [];",
          "194:   for (let i = 0, l = arrays.length; i < l; ++i) {",
          "195:     const value = arrays[i];",
          "",
          "[Removed Lines]",
          "192:   let outIdx = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   for (let i = 0, l = path.length - 1; i < l; ++i) {",
          "227:     const key = path[i];",
          "230:     }",
          "231:     let child = obj[key];",
          "233:     if (!isObject(child)) {",
          "",
          "[Removed Lines]",
          "228:     if (key === '__proto__') {",
          "229:       return false;",
          "",
          "[Added Lines]",
          "228:     if (!isSafeKey(key)) {",
          "229:       return inputObj;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:   }",
          "248:   if (path.length > 0 && isObject(obj)) {",
          "250:   }",
          "252:   return inputObj;",
          "",
          "[Removed Lines]",
          "249:     obj[path[path.length - 1]] = value;",
          "",
          "[Added Lines]",
          "250:     const key = path[path.length - 1];",
          "252:     if (isSafeKey(key)) {",
          "253:       obj[key] = value;",
          "254:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:   const out = {};",
          "258:   for (let i = 0, l = keys.length; i < l; ++i) {",
          "261:     }",
          "263:   }",
          "265:   return out;",
          "",
          "[Removed Lines]",
          "259:     if (keys[i] === '__proto__') {",
          "260:       return false;",
          "262:     out[keys[i]] = values[i];",
          "",
          "[Added Lines]",
          "264:     const key = keys[i];",
          "266:     if (isSafeKey(key)) {",
          "267:       out[key] = values[i];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "363:   return val1 === val2;",
          "364: }",
          "366: module.exports = {",
          "367:   isEmpty,",
          "368:   isString,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: function isSafeKey(key) {",
          "373:   return isNumber(key) || (isString(key) && key !== '__proto__');",
          "374: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}