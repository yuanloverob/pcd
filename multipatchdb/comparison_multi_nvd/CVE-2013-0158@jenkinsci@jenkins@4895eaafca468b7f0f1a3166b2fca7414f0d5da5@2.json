{
  "cve_id": "CVE-2013-0158",
  "cve_desc": "Unspecified vulnerability in Jenkins before 1.498, Jenkins LTS before 1.480.2, and Jenkins Enterprise 1.447.x before 1.447.6.1 and 1.466.x before 1.466.12.1, when a slave is attached and anonymous read access is enabled, allows remote attackers to obtain the master cryptographic key via unknown vectors.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
  "patch_info": {
    "commit_hash": "4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/4895eaafca468b7f0f1a3166b2fca7414f0d5da5",
    "files": [
      "core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/hudson/util/SecretRewriter.java",
      "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "core/src/test/java/hudson/util/MockSecretRule.java",
      "core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.groovy",
      "test/src/main/java/hudson/util/SecretHelper.java",
      "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
    ],
    "message": "[SECURITY-49] added a tool to re-key secrets\n\nAs an AdministrativeMonitor, it shows up in the manage Jenkins UI, and\nallows the administrator to run a re-keying operation.",
    "before_after_code_files": [
      "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java",
      "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java",
      "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy",
      "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java",
      "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
      "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "34: import jenkins.security.CryptoConfidentialKey;",
      "35: import org.kohsuke.stapler.Stapler;",
      "39: import javax.crypto.SecretKey;",
      "40: import javax.crypto.Cipher;",
      "41: import java.io.Serializable;",
      "",
      "[Removed Lines]",
      "37: import javax.crypto.BadPaddingException;",
      "38: import javax.crypto.IllegalBlockSizeException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "152:         }",
      "153:     }",
      "156:         try {",
      "157:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
      "158:             if(plainText.endsWith(MAGIC))",
      "159:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "160:             return null;",
      "161:         } catch (GeneralSecurityException e) {",
      "163:         }",
      "164:     }",
      "",
      "[Removed Lines]",
      "155:     private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {",
      "162:             return null;",
      "",
      "[Added Lines]",
      "160:             return null; // if the key doesn't match with the bytes, it can result in BadPaddingException",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/util/SecretRewriter.java||core/src/main/java/hudson/util/SecretRewriter.java": [
      "File: core/src/main/java/hudson/util/SecretRewriter.java -> core/src/main/java/hudson/util/SecretRewriter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "3: import com.trilead.ssh2.crypto.Base64;",
      "4: import hudson.model.TaskListener;",
      "5: import org.apache.commons.io.FileUtils;",
      "7: import javax.crypto.Cipher;",
      "8: import javax.crypto.SecretKey;",
      "9: import java.io.BufferedReader;",
      "10: import java.io.BufferedWriter;",
      "11: import java.io.File;",
      "12: import java.io.FileInputStream;",
      "13: import java.io.IOException;",
      "14: import java.io.InputStreamReader;",
      "15: import java.io.PrintWriter;",
      "16: import java.security.GeneralSecurityException;",
      "17: import java.security.InvalidKeyException;",
      "18: import java.util.HashSet;",
      "19: import java.util.Set;",
      "27: public class SecretRewriter {",
      "28:     private final Cipher cipher;",
      "29:     private final SecretKey key;",
      "34:     private int count;",
      "39:     private final File backupDirectory;",
      "45:     private Set<String> callstack = new HashSet<String>();",
      "47:     public SecretRewriter(File backupDirectory) throws GeneralSecurityException {",
      "48:         cipher = Secret.getCipher(\"AES\");",
      "49:         key = Secret.getLegacyKey();",
      "50:         this.backupDirectory = backupDirectory;",
      "51:     }",
      "53:     private String tryRewrite(String s) throws IOException, InvalidKeyException {",
      "54:         if (s.length()<24)",
      "55:             return s;   // Encrypting \"\" in Secret produces 24-letter characters, so this must be the minimum length",
      "56:         if (!isBase64(s))",
      "57:             return s;   // decode throws IOException if the input is not base64, and this is also a very quick way to filter",
      "59:         byte[] in;",
      "60:         try {",
      "61:             in = Base64.decode(s.toCharArray());",
      "62:         } catch (IOException e) {",
      "63:             return s;   // not a valid base64",
      "64:         }",
      "65:         cipher.init(Cipher.DECRYPT_MODE, key);",
      "66:         Secret sec = Secret.tryDecrypt(cipher, in);",
      "67:         if(sec!=null) // matched",
      "68:             return sec.getEncryptedValue(); // replace by the new encrypted value",
      "69:         else // not encrypted with the legacy key. leave it unmodified",
      "70:             return s;",
      "71:     }",
      "78:     public boolean rewrite(File f, File backup) throws InvalidKeyException, IOException {",
      "79:         FileInputStream fin = new FileInputStream(f);",
      "80:         try {",
      "81:             BufferedReader r = new BufferedReader(new InputStreamReader(fin, \"UTF-8\"));",
      "82:             AtomicFileWriter w = new AtomicFileWriter(f, \"UTF-8\");",
      "83:             try {",
      "84:                 PrintWriter out = new PrintWriter(new BufferedWriter(w));",
      "86:                 boolean modified = false; // did we actually change anything?",
      "87:                 try {",
      "88:                     String line;",
      "89:                     StringBuilder buf = new StringBuilder();",
      "91:                     while ((line=r.readLine())!=null) {",
      "92:                         int copied=0;",
      "93:                         buf.setLength(0);",
      "94:                         while (true) {",
      "95:                             int sidx = line.indexOf('>',copied);",
      "96:                             if (sidx<0) break;",
      "97:                             int eidx = line.indexOf('<',sidx);",
      "98:                             if (eidx<0) break;",
      "100:                             String elementText = line.substring(sidx+1,eidx);",
      "101:                             String replacement = tryRewrite(elementText);",
      "102:                             if (!replacement.equals(elementText))",
      "103:                                 modified = true;",
      "105:                             buf.append(line.substring(copied,sidx+1));",
      "106:                             buf.append(replacement);",
      "107:                             copied = eidx;",
      "108:                         }",
      "109:                         buf.append(line.substring(copied));",
      "110:                         out.println(buf.toString());",
      "111:                     }",
      "112:                 } finally {",
      "113:                     out.close();",
      "114:                 }",
      "116:                 if (modified) {",
      "117:                     if (backup!=null) {",
      "118:                         backup.getParentFile().mkdirs();",
      "119:                         FileUtils.copyFile(f,backup);",
      "120:                     }",
      "121:                     w.commit();",
      "122:                 }",
      "123:                 return modified;",
      "124:             } finally {",
      "125:                 w.abort();",
      "126:             }",
      "127:         } finally {",
      "128:             fin.close();",
      "129:         }",
      "130:     }",
      "142:     public synchronized int rewriteRecursive(File dir, TaskListener listener) throws InvalidKeyException {",
      "143:         return rewriteRecursive(dir,\"\",listener);",
      "144:     }",
      "145:     private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {",
      "146:         String canonical;",
      "147:         try {",
      "148:             canonical = dir.getCanonicalPath();",
      "149:         } catch (IOException e) {",
      "150:             canonical = dir.getAbsolutePath(); //",
      "151:         }",
      "152:         if (!callstack.add(canonical)) {",
      "153:             listener.getLogger().println(\"Cycle detected: \"+dir);",
      "154:             return 0;",
      "155:         }",
      "157:         try {",
      "158:             File[] children = dir.listFiles();",
      "159:             if (children==null)     return 0;",
      "161:             int rewritten=0;",
      "162:             for (File child : children) {",
      "163:                 String cn = child.getName();",
      "164:                 if (cn.endsWith(\".xml\")) {",
      "165:                     if ((count++)%100==0)",
      "166:                         listener.getLogger().println(\"Scanning \"+child);",
      "167:                     try {",
      "168:                         File backup = null;",
      "169:                         if (backupDirectory!=null)  backup = new File(backupDirectory,relative+'/'+ cn);",
      "170:                         if (rewrite(child,backup)) {",
      "171:                             if (backup!=null)",
      "172:                                 listener.getLogger().println(\"Copied \"+child+\" to \"+backup+\" as a backup\");",
      "173:                             listener.getLogger().println(\"Rewritten \"+child);",
      "174:                             rewritten++;",
      "175:                         }",
      "176:                     } catch (IOException e) {",
      "177:                         e.printStackTrace(listener.error(\"Failed to rewrite \"+child));",
      "178:                     }",
      "179:                 }",
      "180:                 if (child.isDirectory()) {",
      "181:                     if (!isIgnoredDir(child))",
      "182:                         rewritten += rewriteRecursive(child,",
      "183:                                 relative.length()==0 ? cn : relative+'/'+ cn,",
      "184:                                 listener);",
      "185:                 }",
      "186:             }",
      "187:             return rewritten;",
      "188:         } finally {",
      "189:             callstack.remove(canonical);",
      "190:         }",
      "191:     }",
      "196:     protected boolean isIgnoredDir(File dir) {",
      "199:         String n = dir.getName();",
      "200:         return n.equals(\"workspace\") || n.equals(\"artifacts\")",
      "201:             || n.equals(\"plugins\") // no mutable data here",
      "202:             || n.equals(\"jenkins.security.RekeySecretAdminMonitor\") // we don't want to rewrite backups",
      "203:             || n.equals(\".\") || n.equals(\"..\");",
      "204:     }",
      "206:     private static boolean isBase64(char ch) {",
      "207:         return 0<=ch && ch<128 && IS_BASE64[ch];",
      "208:     }",
      "210:     private static boolean isBase64(String s) {",
      "211:         for (int i=0; i<s.length(); i++)",
      "212:             if (!isBase64(s.charAt(i)))",
      "213:                 return false;",
      "214:         return true;",
      "215:     }",
      "217:     private static final boolean[] IS_BASE64 = new boolean[128];",
      "218:     static {",
      "219:         String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";",
      "220:         for (int i=0; i<chars.length();i++)",
      "221:             IS_BASE64[chars.charAt(i)] = true;",
      "222:     }",
      "223: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java||core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java": [
      "File: core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java -> core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import hudson.console.AnnotatedLargeText;",
      "5: import hudson.init.InitMilestone;",
      "6: import hudson.init.Initializer;",
      "7: import hudson.model.AdministrativeMonitor;",
      "8: import hudson.util.HttpResponses;",
      "9: import hudson.util.SecretRewriter;",
      "10: import hudson.util.StreamTaskListener;",
      "11: import hudson.util.VersionNumber;",
      "12: import jenkins.model.Jenkins;",
      "13: import jenkins.util.io.FileBoolean;",
      "14: import org.kohsuke.stapler.HttpResponse;",
      "15: import org.kohsuke.stapler.StaplerProxy;",
      "16: import org.kohsuke.stapler.StaplerRequest;",
      "17: import org.kohsuke.stapler.interceptor.RequirePOST;",
      "19: import java.io.File;",
      "20: import java.io.IOException;",
      "21: import java.io.PrintStream;",
      "22: import java.nio.charset.Charset;",
      "23: import java.security.GeneralSecurityException;",
      "24: import java.util.Date;",
      "25: import java.util.logging.Level;",
      "26: import java.util.logging.Logger;",
      "33: @Extension",
      "34: public class RekeySecretAdminMonitor extends AdministrativeMonitor implements StaplerProxy {",
      "44:     private final FileBoolean needed = state(\"needed\");",
      "49:     private final FileBoolean done = state(\"done\");",
      "54:     private final FileBoolean scanOnBoot = state(\"scanOnBoot\");",
      "59:     private volatile RekeyThread rekeyThread;",
      "62:     public RekeySecretAdminMonitor() throws IOException {",
      "67:         if (Jenkins.getInstance().isUpgradedFromBefore(new VersionNumber(\"1.496.*\")))",
      "68:             needed.on();",
      "69:     }",
      "74:     public Object getTarget() {",
      "75:         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);",
      "76:         return this;",
      "77:     }",
      "79:     @Override",
      "80:     public boolean isActivated() {",
      "81:         return needed.isOn();",
      "82:     }",
      "87:     public boolean isDone() {",
      "88:         return done.isOn();",
      "89:     }",
      "91:     public void setNeeded() {",
      "92:         needed.on();",
      "93:     }",
      "95:     public boolean isScanOnBoot() {",
      "96:         return scanOnBoot.isOn();",
      "97:     }",
      "99:     @RequirePOST",
      "100:     public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {",
      "101:         if(req.hasParameter(\"background\")) {",
      "102:             synchronized (this) {",
      "103:                 if (!isRewriterActive()) {",
      "104:                     rekeyThread = new RekeyThread();",
      "105:                     rekeyThread.start();",
      "106:                 }",
      "107:             }",
      "108:         } else",
      "109:         if(req.hasParameter(\"schedule\")) {",
      "110:             scanOnBoot.on();",
      "111:         } else",
      "112:         if(req.hasParameter(\"dismiss\")) {",
      "113:             disable(true);",
      "114:         } else",
      "115:             throw HttpResponses.error(400,\"Invalid request submission\");",
      "117:         return HttpResponses.redirectViaContextPath(\"/manage\");",
      "118:     }",
      "123:     public boolean isRewriterActive() {",
      "124:         return rekeyThread !=null && rekeyThread.isAlive();",
      "125:     }",
      "130:     public AnnotatedLargeText getLogText() {",
      "131:         return new AnnotatedLargeText<RekeySecretAdminMonitor>(getLogFile(), Charset.defaultCharset(),",
      "132:                 !isRewriterActive(),this);",
      "133:     }",
      "135:     private static FileBoolean state(String name) {",
      "136:         return new FileBoolean(new File(getBaseDir(),name));",
      "137:     }",
      "139:     @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)",
      "141:     public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {",
      "142:         FileBoolean flag = new RekeySecretAdminMonitor().scanOnBoot;",
      "143:         if (flag.isOn()) {",
      "144:             flag.off();",
      "145:             RekeyThread t = new RekeyThread();",
      "146:             t.start();",
      "147:             t.join();",
      "150:         }",
      "151:     }",
      "156:     public static File getLogFile() {",
      "157:         return new File(getBaseDir(),\"rekey.log\");",
      "158:     }",
      "160:     private static File getBaseDir() {",
      "161:         return new File(Jenkins.getInstance().getRootDir(),RekeySecretAdminMonitor.class.getName());",
      "162:     }",
      "164:     private static class RekeyThread extends Thread {",
      "165:         private final SecretRewriter rewriter;",
      "167:         RekeyThread() throws GeneralSecurityException {",
      "168:             super(\"Rekey secret thread\");",
      "169:             rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));",
      "170:         }",
      "172:         @Override",
      "173:         public void run() {",
      "174:             try {",
      "175:                 LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());",
      "176:                 StreamTaskListener listener = new StreamTaskListener(getLogFile());",
      "177:                 try {",
      "178:                     PrintStream log = listener.getLogger();",
      "179:                     log.println(\"Started re-keying \" + new Date());",
      "180:                     int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);",
      "181:                     log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());",
      "182:                     new RekeySecretAdminMonitor().done.on();",
      "183:                     LOGGER.info(\"Secret re-keying completed\");",
      "184:                 } catch (Exception e) {",
      "185:                     LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);",
      "186:                     e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));",
      "187:                 }",
      "188:             } catch (IOException e) {",
      "189:                 LOGGER.log(Level.SEVERE, \"Catastrophic failure to rewrite secrets\",e);",
      "190:             }",
      "191:         }",
      "192:     }",
      "194:     private static final Logger LOGGER = Logger.getLogger(RekeySecretAdminMonitor.class.getName());",
      "196: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/log.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: The MIT License",
      "4: Copyright (c) 2013, CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "24: package jenkins.security.RekeySecretAdminMonitor;",
      "26: def l = namespace(lib.LayoutTagLib)",
      "27: def t = namespace(lib.JenkinsTagLib)",
      "29: l.layout {",
      "30:     l.main_panel() {",
      "31:         h1 _(\"Re-keying log\")",
      "33:         if (my.isRewriterActive()) {",
      "34:             pre(id: \"out\")",
      "35:             div(id: \"spinner\") {",
      "36:                 img(src: \"${imagesURL}/spinner.gif\", alt: \"\")",
      "37:             }",
      "38:             t.progressiveText(spinner: \"spinner\", href: \"logText/progressiveHtml\", idref: \"out\")",
      "39:         } else {",
      "40:             pre {",
      "41:                 my.logText.writeHtmlTo(0, output.asWriter())",
      "42:             }",
      "43:         }",
      "44:     }",
      "45: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: The MIT License",
      "4: Copyright (c) 2013, CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "24: package jenkins.security.RekeySecretAdminMonitor;",
      "26: def f = namespace(lib.FormTagLib)",
      "28: if (!my.isDone()) {",
      "29:     div(class:\"error\") {",
      "30:         raw _(\"pleaseRekeyAsap\",app.rootDir,my.url)",
      "31:     }",
      "32: }",
      "34: if (my.isRewriterActive()) {",
      "35:     div(class:\"info\") {",
      "36:         raw _(\"rekeyInProgress\",my.url)",
      "37:     }",
      "38: } else if (my.logFile.exists()) {",
      "39:     if (my.isDone()) {",
      "40:         div(class:\"info\") {",
      "41:             raw _(\"rekeySuccessful\",my.url)",
      "42:         }",
      "43:     } else {",
      "44:         div(class:\"warning\") {",
      "45:             raw _(\"rekeyHadProblems\",my.url)",
      "46:         }",
      "47:     }",
      "48: }",
      "50: form(method:\"POST\",action:\"${my.url}/scan\",style:\"text-align:center; margin-top:0.5em;\",name:\"rekey\") {",
      "51:     f.submit(name:\"background\",value:_(\"Re-key in background now\"))",
      "52:     if (my.isScanOnBoot()) {",
      "53:         input(type:\"button\",class:\"yui-button\",disabled:\"true\",",
      "54:                 value:_(\"Re-keying currently scheduled during the next startup\"))",
      "55:     } else {",
      "56:         f.submit(name:\"schedule\",  value:_(\"Schedule a re-key during the next startup\"))",
      "57:     }",
      "58:     f.submit(name:\"dismiss\",   value:_(\"Dismiss this message\"))",
      "59: }",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties||core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties": [
      "File: core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties -> core/src/main/resources/jenkins/security/RekeySecretAdminMonitor/message.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: pleaseRekeyAsap=\\",
      "2:     Because of <a href=\"https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2013-01-04\">a security vulnerability</a> discovered earlier, we need to \\",
      "3:     change the encryption key used to protect secrets in your configuration files on the disk. \\",
      "4:     This process scans a large portion of your <tt>$JENKINS_HOME</tt> ({0}), \\",
      "5:     find encrypted data, re-key them, which will take some time. \\",
      "6:     See <a href=\"http://jenkins-ci.org/rekey\">this document</a> for more implications about different ways of doing this \\",
      "7:     (or not doing this.) This operation can be safely run in background, but cautious users \\",
      "8:     are recommended to take backups.",
      "10: rekeyInProgress=Re-keying is in progress. <a href=\"{0}/log\">You can check the log</a>.",
      "12: rekeySuccessful=\\",
      "13:   Secrets in your <tt>$JENKINS_HOME</tt> has been re-keyed successfully. \\",
      "14:   <a href=\"{0}/log\">Please check the log</a>, confirm the success, and then dismiss or re-run.",
      "16: rekeyHadProblems=\\",
      "17:   Re-keying has completed, but there were problems. <a href=\"{0}\">Please check the log</a>.",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/MockSecretRule.java||core/src/test/java/hudson/util/MockSecretRule.java": [
      "File: core/src/test/java/hudson/util/MockSecretRule.java -> core/src/test/java/hudson/util/MockSecretRule.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "3: import hudson.Util;",
      "4: import org.junit.rules.ExternalResource;",
      "6: import java.security.SecureRandom;",
      "13: public class MockSecretRule extends ExternalResource {",
      "15:     private String value;",
      "17:     @Override",
      "18:     protected void before() throws Throwable {",
      "19:         byte[] random = new byte[32];",
      "20:         sr.nextBytes(random);",
      "21:         value = Util.toHexString(random);",
      "22:         Secret.SECRET = value;",
      "23:     }",
      "25:     @Override",
      "26:     protected void after() {",
      "27:         if (!Secret.SECRET.equals(value))",
      "28:             throw new IllegalStateException(\"Someone tinkered with Secret.SECRET\");",
      "29:         Secret.SECRET = null;",
      "30:     }",
      "32:     private static final SecureRandom sr = new SecureRandom();",
      "33: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util",
      "3: import com.trilead.ssh2.crypto.Base64",
      "4: import hudson.FilePath",
      "5: import jenkins.security.ConfidentialStoreRule",
      "6: import org.junit.Rule",
      "7: import org.junit.Test",
      "9: import javax.crypto.Cipher",
      "11: import static hudson.Util.createTempDir",
      "18: class SecretRewriterTest {",
      "19:     @Rule",
      "20:     public MockSecretRule mockSecretRule = new MockSecretRule()",
      "22:     @Rule",
      "23:     public ConfidentialStoreRule confidentialStoreRule = new ConfidentialStoreRule();",
      "25:     @Test",
      "26:     void singleFileRewrite() {",
      "27:         def o = encryptOld('foobar') // old",
      "28:         def n = encryptNew('foobar') // new",
      "29:         roundtrip \"<foo>${o}</foo>\",",
      "30:                   \"<foo>${n}</foo>\"",
      "32:         roundtrip \"<foo>${o}</foo><foo>${o}</foo>\",",
      "33:                   \"<foo>${n}</foo><foo>${n}</foo>\"",
      "35:         roundtrip \"<foo>${n}</foo>\",",
      "36:                   \"<foo>${n}</foo>\"",
      "38:         roundtrip \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \",",
      "39:                   \"  <foo>thisIsLegalBase64AndLongEnoughThatItCouldLookLikeSecret</foo>  \"",
      "42:         roundtrip \"<foo>$o\", \"<foo>$o\"",
      "43:         roundtrip \"$o</foo>\", \"$o</foo>\"",
      "46:         roundtrip \"<abc>\\n<foo>$o</foo>\\n</abc>\", \"<abc>\\n<foo>$n</foo>\\n</abc>\"",
      "47:     }",
      "49:     void roundtrip(String before, String after) {",
      "50:         def sr = new SecretRewriter(null);",
      "51:         def f = File.createTempFile(\"test\",\"xml\");",
      "52:         try {",
      "53:             f.text = before",
      "54:             sr.rewrite(f,null)",
      "55:             assert after.trim()==f.text.trim()",
      "56:         } finally {",
      "57:             f.delete()",
      "58:         }",
      "59:     }",
      "61:     String encryptOld(str) {",
      "62:         def cipher = Secret.getCipher(\"AES\");",
      "63:         cipher.init(Cipher.ENCRYPT_MODE, Secret.legacyKey);",
      "64:         return new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
      "65:     }",
      "67:     String encryptNew(str) {",
      "68:         return Secret.fromString(str).encryptedValue",
      "69:     }",
      "74:     @Test",
      "75:     void recursionDetection() {",
      "76:         def backup = createTempDir()",
      "77:         def sw = new SecretRewriter(backup);",
      "78:         def st = StreamTaskListener.fromStdout()",
      "80:         def o = encryptOld(\"Hello world\")",
      "81:         def n = encryptNew(\"Hello world\")",
      "82:         def payload = \"<msg>$o</msg>\"",
      "83:         def answer = \"<msg>$n</msg>\"",
      "86:         def t = createTempDir()",
      "87:         def dirs = [\"a\", \"b\", \"c\", \"c/d\", \"c/d/e\"]",
      "88:         dirs.each { p ->",
      "89:             def d = new File(t, p)",
      "90:             d.mkdir()",
      "91:             new File(d,\"foo.xml\").text = payload",
      "92:         }",
      "95:         def t2 = createTempDir()",
      "96:         new File(t2,\"foo.xml\").text = payload",
      "99:         new FilePath(t).child(\"c/symlink\").symlinkTo(\"..\",st)",
      "100:         new FilePath(t).child(\"b/symlink\").symlinkTo(\".\",st)",
      "101:         new FilePath(t).child(\"a/symlink\").symlinkTo(t2.absolutePath,st)",
      "103:         assert 6==sw.rewriteRecursive(t, st)",
      "105:         dirs.each { p->",
      "106:             assert new File(t,\"$p/foo.xml\").text.trim()==answer",
      "107:             assert new File(backup,\"$p/foo.xml\").text.trim()==payload",
      "108:         }",
      "111:         assert new File(t2,\"foo.xml\").text.trim()==answer.trim();",
      "112:     }",
      "114: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretTest.groovy -> core/src/test/java/hudson/util/SecretTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import com.trilead.ssh2.crypto.Base64;",
      "27: import jenkins.model.Jenkins",
      "28: import jenkins.security.ConfidentialStoreRule;",
      "31: import org.junit.Rule",
      "32: import org.junit.Test",
      "34: import javax.crypto.Cipher;",
      "",
      "[Removed Lines]",
      "29: import org.junit.After",
      "30: import org.junit.Before",
      "35: import java.security.SecureRandom;",
      "37: import hudson.Util;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     @Rule",
      "44:     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule()",
      "59:     @Test",
      "60:     void testEncrypt() {",
      "",
      "[Removed Lines]",
      "46:     @Test @Before",
      "47:     void setUp() {",
      "48:         def sr = new SecureRandom();",
      "49:         byte[] random = new byte[32];",
      "50:         sr.nextBytes(random);",
      "51:         Secret.SECRET = Util.toHexString(random);",
      "52:     }",
      "54:     @Test @After",
      "55:     void tearDown() {",
      "56:         Secret.SECRET = null;",
      "57:     }",
      "",
      "[Added Lines]",
      "41:     @Rule",
      "42:     public MockSecretRule mockSecretRule = new MockSecretRule()",
      "",
      "---------------"
    ],
    "test/src/main/java/hudson/util/SecretHelper.java||test/src/main/java/hudson/util/SecretHelper.java": [
      "File: test/src/main/java/hudson/util/SecretHelper.java -> test/src/main/java/hudson/util/SecretHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package hudson.util;",
      "6: public class SecretHelper {",
      "7:     public static void set(String s) {",
      "8:         Secret.SECRET = s;",
      "9:     }",
      "10: }",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java||test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java": [
      "File: test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java -> test/src/test/java/jenkins/security/RekeySecretAdminMonitorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
      "4: import com.gargoylesoftware.htmlunit.html.HtmlButton;",
      "5: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "7: import com.trilead.ssh2.crypto.Base64;",
      "8: import hudson.FilePath;",
      "9: import hudson.Util;",
      "10: import hudson.util.Secret;",
      "11: import hudson.util.SecretHelper;",
      "12: import org.apache.commons.io.FileUtils;",
      "13: import org.jvnet.hudson.test.HudsonTestCase;",
      "14: import org.jvnet.hudson.test.recipes.Recipe.Runner;",
      "15: import org.xml.sax.SAXException;",
      "17: import javax.crypto.Cipher;",
      "18: import javax.inject.Inject;",
      "19: import java.io.File;",
      "20: import java.io.IOException;",
      "21: import java.lang.annotation.Annotation;",
      "26: public class RekeySecretAdminMonitorTest extends HudsonTestCase {",
      "27:     @Inject",
      "28:     RekeySecretAdminMonitor monitor;",
      "30:     @Override",
      "31:     protected void setUp() throws Exception {",
      "32:         SecretHelper.set(TEST_KEY);",
      "33:         super.setUp();",
      "34:         monitor.setNeeded();",
      "35:     }",
      "37:     @Override",
      "38:     protected void tearDown() throws Exception {",
      "39:         SecretHelper.set(null);",
      "40:         super.tearDown();",
      "41:     }",
      "43:     @Override",
      "44:     protected void recipe() throws Exception {",
      "45:         super.recipe();",
      "46:         recipes.add(new Runner() {",
      "47:             @Override",
      "48:             public void setup(HudsonTestCase testCase, Annotation recipe) throws Exception {",
      "49:             }",
      "51:             @Override",
      "52:             public void decorateHome(HudsonTestCase testCase, File home) throws Exception {",
      "53:                 if (getName().endsWith(\"testScanOnBoot\")) {",
      "55:                     File f = new File(home, RekeySecretAdminMonitor.class.getName() + \"/scanOnBoot\");",
      "56:                     f.getParentFile().mkdirs();",
      "57:                     new FilePath(f).touch(0);",
      "60:                     putSomeOldData(home);",
      "61:                 }",
      "62:             }",
      "64:             @Override",
      "65:             public void tearDown(HudsonTestCase testCase, Annotation recipe) throws Exception {",
      "66:             }",
      "67:         });",
      "68:     }",
      "71:     private void putSomeOldData(File dir) throws Exception {",
      "72:         File xml = new File(dir, \"foo.xml\");",
      "73:         FileUtils.writeStringToFile(xml,\"<foo>\" + encryptOld(TEST_KEY) + \"</foo>\");",
      "74:     }",
      "76:     private void verifyRewrite(File dir) throws Exception {",
      "77:         File xml = new File(dir, \"foo.xml\");",
      "78:         assertEquals(\"<foo>\" + encryptNew(TEST_KEY) + \"</foo>\".trim(),",
      "79:                 FileUtils.readFileToString(xml).trim());",
      "80:     }",
      "82:     public void testBasicWorkflow() throws Exception {",
      "83:         putSomeOldData(jenkins.getRootDir());",
      "85:         WebClient wc = createWebClient();",
      "88:         assertTrue(!monitor.isScanOnBoot());",
      "89:         HtmlForm form = getRekeyForm(wc);",
      "90:         submit(form, \"schedule\");",
      "91:         assertTrue(monitor.isScanOnBoot());",
      "92:         form = getRekeyForm(wc);",
      "93:         assertTrue(getButton(form, 1).isDisabled());",
      "96:         assertTrue(!monitor.getLogFile().exists());",
      "97:         submit(form, \"background\");",
      "98:         assertTrue(monitor.getLogFile().exists());",
      "101:         HtmlPage manage = wc.goTo(\"/manage\");",
      "102:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
      "103:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
      "106:         verifyRewrite(jenkins.getRootDir());",
      "107:         assertTrue(monitor.isDone());",
      "110:         assertTrue(monitor.isEnabled());",
      "111:         form = getRekeyForm(wc);",
      "112:         submit(form, \"dismiss\");",
      "113:         assertFalse(monitor.isEnabled());",
      "114:         try {",
      "115:             getRekeyForm(wc);",
      "116:             fail();",
      "117:         } catch (ElementNotFoundException e) {",
      "119:         }",
      "120:     }",
      "122:     private HtmlForm getRekeyForm(WebClient wc) throws IOException, SAXException {",
      "123:         return wc.goTo(\"/manage\").getFormByName(\"rekey\");",
      "124:     }",
      "126:     private HtmlButton getButton(HtmlForm form, int index) {",
      "127:         return form.<HtmlButton>getHtmlElementsByTagName(\"button\").get(index);",
      "128:     }",
      "130:     public void testScanOnBoot() throws Exception {",
      "131:         WebClient wc = createWebClient();",
      "134:         assertTrue(monitor.getLogFile().exists());",
      "135:         assertTrue(\"scan on boot should have turned this off\",!monitor.isScanOnBoot());",
      "138:         verifyRewrite(jenkins.getRootDir());",
      "141:         HtmlPage manage = wc.goTo(\"/manage\");",
      "142:         assertEquals(0,manage.selectNodes(\"//*[class='error']\").size());",
      "143:         assertEquals(0,manage.selectNodes(\"//*[class='warning']\").size());",
      "144:     }",
      "146:     private String encryptOld(String str) throws Exception {",
      "147:         Cipher cipher = Secret.getCipher(\"AES\");",
      "148:         cipher.init(Cipher.ENCRYPT_MODE, Util.toAes128Key(TEST_KEY));",
      "149:         return new String(Base64.encode(cipher.doFinal((str + \"::::MAGIC::::\").getBytes(\"UTF-8\"))));",
      "150:     }",
      "152:     private String encryptNew(String str) {",
      "153:         return Secret.fromString(str).getEncryptedValue();",
      "154:     }",
      "156:     private static final String TEST_KEY = \"superDuperSecretWasNotSoSecretAfterAll\";",
      "157: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "899f5aa41769c6b6265c95bd63517b35e760f1fa",
      "candidate_info": {
        "commit_hash": "899f5aa41769c6b6265c95bd63517b35e760f1fa",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/899f5aa41769c6b6265c95bd63517b35e760f1fa",
        "files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ],
        "message": "Fix for JENKINS-16942\n\nhttps://issues.jenkins-ci.org/browse/JENKINS-16942\n\nPrintWriter.println() uses the OS specific line separator. When\nSecretRewriter rewrites the secret file, the lines are converted to the\nformat of the running OS.  The test case does not account for this.\nSince the test case is coded expecting line endings of \\n, this fix\nconverts \\r\\n to \\n before comparing.",
        "before_after_code_files": [
          "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ],
          "candidate": [
            "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/java/hudson/util/SecretRewriterTest.groovy||core/src/test/java/hudson/util/SecretRewriterTest.groovy": [
          "File: core/src/test/java/hudson/util/SecretRewriterTest.groovy -> core/src/test/java/hudson/util/SecretRewriterTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         def f = File.createTempFile(\"test\", \"xml\", tmp.root)",
          "53:         f.text = before",
          "54:         sr.rewrite(f,null)",
          "56:     }",
          "58:     String encryptOld(str) {",
          "",
          "[Removed Lines]",
          "55:         assert after.trim()==f.text.trim()",
          "",
          "[Added Lines]",
          "55:         assert after.replaceAll(\"\\r\\n\", \"\\n\").trim()==f.text.replaceAll(\"\\r\\n\", \"\\n\").trim()",
          "",
          "---------------"
        ]
      }
    }
  ]
}