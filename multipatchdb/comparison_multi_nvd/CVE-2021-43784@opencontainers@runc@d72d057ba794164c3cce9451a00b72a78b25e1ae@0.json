{
  "cve_id": "CVE-2021-43784",
  "cve_desc": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. In runc, netlink is used internally as a serialization system for specifying the relevant container configuration to the `C` portion of the code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration. This vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces. The main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure). runc version 1.0.3 contains a fix for this bug. As a workaround, one may try disallowing untrusted namespace paths from your container. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.",
  "repo": "opencontainers/runc",
  "patch_hash": "d72d057ba794164c3cce9451a00b72a78b25e1ae",
  "patch_info": {
    "commit_hash": "d72d057ba794164c3cce9451a00b72a78b25e1ae",
    "repo": "opencontainers/runc",
    "commit_url": "https://github.com/opencontainers/runc/commit/d72d057ba794164c3cce9451a00b72a78b25e1ae",
    "files": [
      "libcontainer/container_linux.go",
      "libcontainer/message_linux.go"
    ],
    "message": "runc init: avoid netlink message length overflows\n\nWhen writing netlink messages, it is possible to have a byte array\nlarger than UINT16_MAX which would result in the length field\noverflowing and allowing user-controlled data to be parsed as control\ncharacters (such as creating custom mount points, changing which set of\nnamespaces to allow, and so on).\n\nCo-authored-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
    "before_after_code_files": [
      "libcontainer/container_linux.go||libcontainer/container_linux.go",
      "libcontainer/message_linux.go||libcontainer/message_linux.go"
    ]
  },
  "patch_diff": {
    "libcontainer/container_linux.go||libcontainer/container_linux.go": [
      "File: libcontainer/container_linux.go -> libcontainer/container_linux.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "2102:  return data.Bytes(), nil",
      "2103: }",
      "2113:  r := nl.NewNetlinkRequest(int(InitMsg), 0)",
      "2116:  r.AddData(&Int32msg{",
      "2117:   Type:  CloneFlagsAttr,",
      "",
      "[Removed Lines]",
      "2111: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string, it initType) (io.Reader, error) {",
      "",
      "[Added Lines]",
      "2108: type netlinkError struct{ error }",
      "2116: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string, it initType) (_ io.Reader, Err error) {",
      "2123:  defer func() {",
      "2124:   if r := recover(); r != nil {",
      "2125:    if e, ok := r.(netlinkError); ok {",
      "2126:     Err = e.error",
      "2127:    } else {",
      "2128:     panic(r)",
      "2129:    }",
      "2130:   }",
      "2131:  }()",
      "",
      "---------------"
    ],
    "libcontainer/message_linux.go||libcontainer/message_linux.go": [
      "File: libcontainer/message_linux.go -> libcontainer/message_linux.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package libcontainer",
      "3: import (",
      "4:  \"github.com/vishvananda/netlink/nl\"",
      "5:  \"golang.org/x/sys/unix\"",
      "6: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4:  \"fmt\"",
      "5:  \"math\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: func (msg *Bytemsg) Serialize() []byte {",
      "55:  l := msg.Len()",
      "56:  buf := make([]byte, (l+unix.NLA_ALIGNTO-1) & ^(unix.NLA_ALIGNTO-1))",
      "57:  native := nl.NativeEndian()",
      "58:  native.PutUint16(buf[0:2], uint16(l))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:  if l > math.MaxUint16 {",
      "63:   panic(netlinkError{fmt.Errorf(\"netlink: cannot serialize bytemsg of length %d (larger than UINT16_MAX)\", l)})",
      "64:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "102b8abd266de73950301aae0106f2ca582c2de3",
      "candidate_info": {
        "commit_hash": "102b8abd266de73950301aae0106f2ca582c2de3",
        "repo": "opencontainers/runc",
        "commit_url": "https://github.com/opencontainers/runc/commit/102b8abd266de73950301aae0106f2ca582c2de3",
        "files": [
          "delete.go",
          "libcontainer/container.go",
          "libcontainer/container_linux.go",
          "libcontainer/container_linux_test.go",
          "libcontainer/factory_linux.go",
          "libcontainer/factory_linux_test.go",
          "libcontainer/integration/utils_test.go",
          "libcontainer/process_linux.go",
          "libcontainer/state_linux.go",
          "libcontainer/state_linux_test.go",
          "notify_socket.go",
          "utils_linux.go"
        ],
        "message": "libct: rm BaseContainer and Container interfaces\n\nThe only implementation of these is linuxContainer. It does not make\nsense to have an interface with a single implementation, and we do not\nforesee other types of containers being added to runc.\n\nRemove BaseContainer and Container interfaces, moving their methods\ndocumentation to linuxContainer.\n\nRename linuxContainer to Container.\n\nAdopt users from using interface to using struct.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>",
        "before_after_code_files": [
          "delete.go||delete.go",
          "libcontainer/container.go||libcontainer/container.go",
          "libcontainer/container_linux.go||libcontainer/container_linux.go",
          "libcontainer/container_linux_test.go||libcontainer/container_linux_test.go",
          "libcontainer/factory_linux.go||libcontainer/factory_linux.go",
          "libcontainer/factory_linux_test.go||libcontainer/factory_linux_test.go",
          "libcontainer/integration/utils_test.go||libcontainer/integration/utils_test.go",
          "libcontainer/process_linux.go||libcontainer/process_linux.go",
          "libcontainer/state_linux.go||libcontainer/state_linux.go",
          "libcontainer/state_linux_test.go||libcontainer/state_linux_test.go",
          "notify_socket.go||notify_socket.go",
          "utils_linux.go||utils_linux.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libcontainer/container_linux.go||libcontainer/container_linux.go"
          ],
          "candidate": [
            "libcontainer/container_linux.go||libcontainer/container_linux.go"
          ]
        }
      },
      "candidate_diff": {
        "delete.go||delete.go": [
          "File: delete.go -> delete.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"golang.org/x/sys/unix\"",
          "14: )",
          "17:  _ = container.Signal(unix.SIGKILL, false)",
          "18:  for i := 0; i < 100; i++ {",
          "19:   time.Sleep(100 * time.Millisecond)",
          "",
          "[Removed Lines]",
          "16: func killContainer(container libcontainer.Container) error {",
          "",
          "[Added Lines]",
          "16: func killContainer(container *libcontainer.Container) error {",
          "",
          "---------------"
        ],
        "libcontainer/container.go||libcontainer/container.go": [
          "File: libcontainer/container.go -> libcontainer/container.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: package libcontainer",
          "7: import (",
          "9:  \"time\"",
          "11:  \"github.com/opencontainers/runc/libcontainer/configs\"",
          "13: )",
          "",
          "[Removed Lines]",
          "8:  \"os\"",
          "12:  \"github.com/opencontainers/runtime-spec/specs-go\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  Config configs.Config `json:\"config\"`",
          "61: }",
          "",
          "[Removed Lines]",
          "68: type BaseContainer interface {",
          "70:  ID() string",
          "73:  Status() (Status, error)",
          "76:  State() (*State, error)",
          "79:  OCIState() (*specs.State, error)",
          "82:  Config() configs.Config",
          "88:  Processes() ([]int, error)",
          "91:  Stats() (*Stats, error)",
          "97:  Set(config configs.Config) error",
          "101:  Start(process *Process) (err error)",
          "106:  Run(process *Process) (err error)",
          "116:  Destroy() error",
          "122:  Signal(s os.Signal, all bool) error",
          "125:  Exec() error",
          "126: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libcontainer/container_linux.go||libcontainer/container_linux.go": [
          "File: libcontainer/container_linux.go -> libcontainer/container_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: const stdioFdCount = 3",
          "40:  id                   string",
          "41:  root                 string",
          "42:  config               *configs.Config",
          "",
          "[Removed Lines]",
          "39: type linuxContainer struct {",
          "",
          "[Added Lines]",
          "40: type Container struct {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:  IntelRdtPath string `json:\"intel_rdt_path\"`",
          "81: }",
          "119:  return c.id",
          "120: }",
          "124:  return *c.config",
          "125: }",
          "128:  c.m.Lock()",
          "129:  defer c.m.Unlock()",
          "130:  return c.currentStatus()",
          "131: }",
          "134:  c.m.Lock()",
          "135:  defer c.m.Unlock()",
          "136:  return c.currentState()",
          "137: }",
          "140:  c.m.Lock()",
          "141:  defer c.m.Unlock()",
          "142:  return c.currentOCIState()",
          "143: }",
          "146:  var pids []int",
          "147:  status, err := c.currentStatus()",
          "148:  if err != nil {",
          "",
          "[Removed Lines]",
          "88: type Container interface {",
          "89:  BaseContainer",
          "94:  Checkpoint(criuOpts *CriuOpts) error",
          "97:  Restore(process *Process, criuOpts *CriuOpts) error",
          "103:  Pause() error",
          "108:  Resume() error",
          "111:  NotifyOOM() (<-chan struct{}, error)",
          "114:  NotifyMemoryPressure(level PressureLevel) (<-chan struct{}, error)",
          "115: }",
          "118: func (c *linuxContainer) ID() string {",
          "123: func (c *linuxContainer) Config() configs.Config {",
          "127: func (c *linuxContainer) Status() (Status, error) {",
          "133: func (c *linuxContainer) State() (*State, error) {",
          "139: func (c *linuxContainer) OCIState() (*specs.State, error) {",
          "145: func (c *linuxContainer) Processes() ([]int, error) {",
          "",
          "[Added Lines]",
          "85: func (c *Container) ID() string {",
          "90: func (c *Container) Config() configs.Config {",
          "95: func (c *Container) Status() (Status, error) {",
          "102: func (c *Container) State() (*State, error) {",
          "109: func (c *Container) OCIState() (*specs.State, error) {",
          "121: func (c *Container) Processes() ([]int, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:  return pids, nil",
          "161: }",
          "164:  var (",
          "165:   err   error",
          "166:   stats = &Stats{}",
          "",
          "[Removed Lines]",
          "163: func (c *linuxContainer) Stats() (*Stats, error) {",
          "",
          "[Added Lines]",
          "140: func (c *Container) Stats() (*Stats, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186:  return stats, nil",
          "187: }",
          "190:  c.m.Lock()",
          "191:  defer c.m.Unlock()",
          "192:  status, err := c.currentStatus()",
          "",
          "[Removed Lines]",
          "189: func (c *linuxContainer) Set(config configs.Config) error {",
          "",
          "[Added Lines]",
          "168: func (c *Container) Set(config configs.Config) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:  return err",
          "222: }",
          "225:  c.m.Lock()",
          "226:  defer c.m.Unlock()",
          "227:  if c.config.Cgroups.Resources.SkipDevices {",
          "",
          "[Removed Lines]",
          "224: func (c *linuxContainer) Start(process *Process) error {",
          "",
          "[Added Lines]",
          "205: func (c *Container) Start(process *Process) error {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:  return nil",
          "242: }",
          "245:  if err := c.Start(process); err != nil {",
          "246:   return err",
          "247:  }",
          "",
          "[Removed Lines]",
          "244: func (c *linuxContainer) Run(process *Process) error {",
          "",
          "[Added Lines]",
          "228: func (c *Container) Run(process *Process) error {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "251:  return nil",
          "252: }",
          "255:  c.m.Lock()",
          "256:  defer c.m.Unlock()",
          "257:  return c.exec()",
          "258: }",
          "261:  path := filepath.Join(c.root, execFifoFilename)",
          "262:  pid := c.initProcess.pid()",
          "263:  blockingFifoOpenCh := awaitFifoOpen(path)",
          "",
          "[Removed Lines]",
          "254: func (c *linuxContainer) Exec() error {",
          "260: func (c *linuxContainer) exec() error {",
          "",
          "[Added Lines]",
          "239: func (c *Container) Exec() error {",
          "245: func (c *Container) exec() error {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "329:  err  error",
          "330: }",
          "333:  parent, err := c.newParentProcess(process)",
          "334:  if err != nil {",
          "335:   return fmt.Errorf(\"unable to create new parent process: %w\", err)",
          "",
          "[Removed Lines]",
          "332: func (c *linuxContainer) start(process *Process) (retErr error) {",
          "",
          "[Added Lines]",
          "317: func (c *Container) start(process *Process) (retErr error) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "370:  return nil",
          "371: }",
          "374:  c.m.Lock()",
          "375:  defer c.m.Unlock()",
          "376:  status, err := c.currentStatus()",
          "",
          "[Removed Lines]",
          "373: func (c *linuxContainer) Signal(s os.Signal, all bool) error {",
          "",
          "[Added Lines]",
          "358: func (c *Container) Signal(s os.Signal, all bool) error {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "402:  return ErrNotRunning",
          "403: }",
          "406:  rootuid, err := c.Config().HostRootUID()",
          "407:  if err != nil {",
          "408:   return err",
          "",
          "[Removed Lines]",
          "405: func (c *linuxContainer) createExecFifo() error {",
          "",
          "[Added Lines]",
          "390: func (c *Container) createExecFifo() error {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "425:  return os.Chown(fifoName, rootuid, rootgid)",
          "426: }",
          "429:  fifoName := filepath.Join(c.root, execFifoFilename)",
          "430:  os.Remove(fifoName)",
          "431: }",
          "",
          "[Removed Lines]",
          "428: func (c *linuxContainer) deleteExecFifo() {",
          "",
          "[Added Lines]",
          "413: func (c *Container) deleteExecFifo() {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "438:  fifoName := filepath.Join(c.root, execFifoFilename)",
          "439:  fifo, err := os.OpenFile(fifoName, unix.O_PATH|unix.O_CLOEXEC, 0)",
          "440:  if err != nil {",
          "",
          "[Removed Lines]",
          "437: func (c *linuxContainer) includeExecFifo(cmd *exec.Cmd) error {",
          "",
          "[Added Lines]",
          "422: func (c *Container) includeExecFifo(cmd *exec.Cmd) error {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "448:  return nil",
          "449: }",
          "452:  parentInitPipe, childInitPipe, err := utils.NewSockPair(\"init\")",
          "453:  if err != nil {",
          "454:   return nil, fmt.Errorf(\"unable to create init pipe: %w\", err)",
          "",
          "[Removed Lines]",
          "451: func (c *linuxContainer) newParentProcess(p *Process) (parentProcess, error) {",
          "",
          "[Added Lines]",
          "436: func (c *Container) newParentProcess(p *Process) (parentProcess, error) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "477:  return c.newInitProcess(p, cmd, messageSockPair, logFilePair)",
          "478: }",
          "481:  cmd := exec.Command(\"/proc/self/exe\", \"init\")",
          "482:  cmd.Args[0] = os.Args[0]",
          "483:  cmd.Stdin = p.Stdin",
          "",
          "[Removed Lines]",
          "480: func (c *linuxContainer) commandTemplate(p *Process, childInitPipe *os.File, childLogPipe *os.File) *exec.Cmd {",
          "",
          "[Added Lines]",
          "465: func (c *Container) commandTemplate(p *Process, childInitPipe *os.File, childLogPipe *os.File) *exec.Cmd {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "525:  if !c.config.Namespaces.Contains(configs.NEWUSER) ||",
          "",
          "[Removed Lines]",
          "522: func (c *linuxContainer) shouldSendMountSources() bool {",
          "",
          "[Added Lines]",
          "507: func (c *Container) shouldSendMountSources() bool {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "543:  return false",
          "544: }",
          "547:  cmd.Env = append(cmd.Env, \"_LIBCONTAINER_INITTYPE=\"+string(initStandard))",
          "548:  nsMaps := make(map[configs.NamespaceType]string)",
          "549:  for _, ns := range c.config.Namespaces {",
          "",
          "[Removed Lines]",
          "546: func (c *linuxContainer) newInitProcess(p *Process, cmd *exec.Cmd, messageSockPair, logFilePair filePair) (*initProcess, error) {",
          "",
          "[Added Lines]",
          "531: func (c *Container) newInitProcess(p *Process, cmd *exec.Cmd, messageSockPair, logFilePair filePair) (*initProcess, error) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "602:  return init, nil",
          "603: }",
          "606:  cmd.Env = append(cmd.Env, \"_LIBCONTAINER_INITTYPE=\"+string(initSetns))",
          "607:  state, err := c.currentState()",
          "608:  if err != nil {",
          "",
          "[Removed Lines]",
          "605: func (c *linuxContainer) newSetnsProcess(p *Process, cmd *exec.Cmd, messageSockPair, logFilePair filePair) (*setnsProcess, error) {",
          "",
          "[Added Lines]",
          "590: func (c *Container) newSetnsProcess(p *Process, cmd *exec.Cmd, messageSockPair, logFilePair filePair) (*setnsProcess, error) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "659:  return proc, nil",
          "660: }",
          "663:  cfg := &initConfig{",
          "664:   Config:           c.config,",
          "665:   Args:             process.Args,",
          "",
          "[Removed Lines]",
          "662: func (c *linuxContainer) newInitConfig(process *Process) *initConfig {",
          "",
          "[Added Lines]",
          "647: func (c *Container) newInitConfig(process *Process) *initConfig {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "699:  return cfg",
          "700: }",
          "703:  c.m.Lock()",
          "704:  defer c.m.Unlock()",
          "705:  return c.state.destroy()",
          "706: }",
          "709:  c.m.Lock()",
          "710:  defer c.m.Unlock()",
          "711:  status, err := c.currentStatus()",
          "",
          "[Removed Lines]",
          "702: func (c *linuxContainer) Destroy() error {",
          "708: func (c *linuxContainer) Pause() error {",
          "",
          "[Added Lines]",
          "695: func (c *Container) Destroy() error {",
          "703: func (c *Container) Pause() error {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "724:  return ErrNotRunning",
          "725: }",
          "728:  c.m.Lock()",
          "729:  defer c.m.Unlock()",
          "730:  status, err := c.currentStatus()",
          "",
          "[Removed Lines]",
          "727: func (c *linuxContainer) Resume() error {",
          "",
          "[Added Lines]",
          "726: func (c *Container) Resume() error {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "742:  })",
          "743: }",
          "747:  if c.config.RootlessCgroups {",
          "748:   logrus.Warn(\"getting OOM notifications may fail if you don't have the full access to cgroups\")",
          "",
          "[Removed Lines]",
          "745: func (c *linuxContainer) NotifyOOM() (<-chan struct{}, error) {",
          "",
          "[Added Lines]",
          "746: func (c *Container) NotifyOOM() (<-chan struct{}, error) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "754:  return notifyOnOOM(path)",
          "755: }",
          "759:  if c.config.RootlessCgroups {",
          "760:   logrus.Warn(\"getting memory pressure notifications may fail if you don't have the full access to cgroups\")",
          "",
          "[Removed Lines]",
          "757: func (c *linuxContainer) NotifyMemoryPressure(level PressureLevel) (<-chan struct{}, error) {",
          "",
          "[Added Lines]",
          "760: func (c *Container) NotifyMemoryPressure(level PressureLevel) (<-chan struct{}, error) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "765: var criuFeatures *criurpc.CriuFeatures",
          "768:  t := criurpc.CriuReqType_FEATURE_CHECK",
          "",
          "[Removed Lines]",
          "767: func (c *linuxContainer) checkCriuFeatures(criuOpts *CriuOpts, rpcOpts *criurpc.CriuOpts, criuFeat *criurpc.CriuFeatures) error {",
          "",
          "[Added Lines]",
          "770: func (c *Container) checkCriuFeatures(criuOpts *CriuOpts, rpcOpts *criurpc.CriuOpts, criuFeat *criurpc.CriuFeatures) error {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "824:  return nil",
          "825: }",
          "831:  if c.criuVersion != 0 {",
          "",
          "[Removed Lines]",
          "828: func (c *linuxContainer) checkCriuVersion(minVersion int) error {",
          "",
          "[Added Lines]",
          "831: func (c *Container) checkCriuVersion(minVersion int) error {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "845: const descriptorsFilename = \"descriptors.json\"",
          "848:  mountDest := strings.TrimPrefix(m.Destination, c.config.Rootfs)",
          "849:  if dest, err := securejoin.SecureJoin(c.config.Rootfs, mountDest); err == nil {",
          "850:   mountDest = dest[len(c.config.Rootfs):]",
          "",
          "[Removed Lines]",
          "847: func (c *linuxContainer) addCriuDumpMount(req *criurpc.CriuReq, m *configs.Mount) {",
          "",
          "[Added Lines]",
          "850: func (c *Container) addCriuDumpMount(req *criurpc.CriuReq, m *configs.Mount) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "856:  req.Opts.ExtMnt = append(req.Opts.ExtMnt, extMnt)",
          "857: }",
          "860:  for _, path := range c.config.MaskPaths {",
          "861:   fi, err := os.Stat(fmt.Sprintf(\"/proc/%d/root/%s\", c.initProcess.pid(), path))",
          "862:   if err != nil {",
          "",
          "[Removed Lines]",
          "859: func (c *linuxContainer) addMaskPaths(req *criurpc.CriuReq) error {",
          "",
          "[Added Lines]",
          "862: func (c *Container) addMaskPaths(req *criurpc.CriuReq) error {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "878:  return nil",
          "879: }",
          "",
          "[Removed Lines]",
          "881: func (c *linuxContainer) handleCriuConfigurationFile(rpcOpts *criurpc.CriuOpts) {",
          "",
          "[Added Lines]",
          "884: func (c *Container) handleCriuConfigurationFile(rpcOpts *criurpc.CriuOpts) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "903:  }",
          "904: }",
          "907:  var minVersion int",
          "908:  switch t {",
          "909:  case configs.NEWNET:",
          "",
          "[Removed Lines]",
          "906: func (c *linuxContainer) criuSupportsExtNS(t configs.NamespaceType) bool {",
          "",
          "[Added Lines]",
          "909: func (c *Container) criuSupportsExtNS(t configs.NamespaceType) bool {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "923:  return \"extRoot\" + strings.Title(configs.NsName(t)) + \"NS\" //nolint:staticcheck // SA1019: strings.Title is deprecated",
          "924: }",
          "927:  if !c.criuSupportsExtNS(t) {",
          "928:   return nil",
          "929:  }",
          "",
          "[Removed Lines]",
          "926: func (c *linuxContainer) handleCheckpointingExternalNamespaces(rpcOpts *criurpc.CriuOpts, t configs.NamespaceType) error {",
          "",
          "[Added Lines]",
          "929: func (c *Container) handleCheckpointingExternalNamespaces(rpcOpts *criurpc.CriuOpts, t configs.NamespaceType) error {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "945:  return nil",
          "946: }",
          "949:  for _, ns := range c.config.Namespaces {",
          "950:   switch ns.Type {",
          "951:   case configs.NEWNET, configs.NEWPID:",
          "",
          "[Removed Lines]",
          "948: func (c *linuxContainer) handleRestoringNamespaces(rpcOpts *criurpc.CriuOpts, extraFiles *[]*os.File) error {",
          "",
          "[Added Lines]",
          "951: func (c *Container) handleRestoringNamespaces(rpcOpts *criurpc.CriuOpts, extraFiles *[]*os.File) error {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "983:  return nil",
          "984: }",
          "987:  if !c.criuSupportsExtNS(t) {",
          "988:   return nil",
          "989:  }",
          "",
          "[Removed Lines]",
          "986: func (c *linuxContainer) handleRestoringExternalNamespaces(rpcOpts *criurpc.CriuOpts, extraFiles *[]*os.File, t configs.NamespaceType) error {",
          "",
          "[Added Lines]",
          "989: func (c *Container) handleRestoringExternalNamespaces(rpcOpts *criurpc.CriuOpts, extraFiles *[]*os.File, t configs.NamespaceType) error {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1014:  return nil",
          "1015: }",
          "1018:  c.m.Lock()",
          "1019:  defer c.m.Unlock()",
          "",
          "[Removed Lines]",
          "1017: func (c *linuxContainer) Checkpoint(criuOpts *CriuOpts) error {",
          "",
          "[Added Lines]",
          "1020: func (c *Container) Checkpoint(criuOpts *CriuOpts) error {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1222:  return nil",
          "1223: }",
          "1226:  mountDest := strings.TrimPrefix(m.Destination, c.config.Rootfs)",
          "1227:  if dest, err := securejoin.SecureJoin(c.config.Rootfs, mountDest); err == nil {",
          "1228:   mountDest = dest[len(c.config.Rootfs):]",
          "",
          "[Removed Lines]",
          "1225: func (c *linuxContainer) addCriuRestoreMount(req *criurpc.CriuReq, m *configs.Mount) {",
          "",
          "[Added Lines]",
          "1228: func (c *Container) addCriuRestoreMount(req *criurpc.CriuReq, m *configs.Mount) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1234:  req.Opts.ExtMnt = append(req.Opts.ExtMnt, extMnt)",
          "1235: }",
          "1238:  for _, iface := range c.config.Networks {",
          "1239:   switch iface.Type {",
          "1240:   case \"veth\":",
          "",
          "[Removed Lines]",
          "1237: func (c *linuxContainer) restoreNetwork(req *criurpc.CriuReq, criuOpts *CriuOpts) {",
          "",
          "[Added Lines]",
          "1240: func (c *Container) restoreNetwork(req *criurpc.CriuReq, criuOpts *CriuOpts) {",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1261:  switch m.Device {",
          "1262:  case \"cgroup\":",
          "",
          "[Removed Lines]",
          "1260: func (c *linuxContainer) makeCriuRestoreMountpoints(m *configs.Mount) error {",
          "",
          "[Added Lines]",
          "1263: func (c *Container) makeCriuRestoreMountpoints(m *configs.Mount) error {",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1314:  tmpfs := []string{}",
          "1315:  for _, m := range mounts {",
          "",
          "[Removed Lines]",
          "1312: func (c *linuxContainer) prepareCriuRestoreMounts(mounts []*configs.Mount) error {",
          "",
          "[Added Lines]",
          "1315: func (c *Container) prepareCriuRestoreMounts(mounts []*configs.Mount) error {",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1366:  return nil",
          "1367: }",
          "1370:  c.m.Lock()",
          "1371:  defer c.m.Unlock()",
          "",
          "[Removed Lines]",
          "1369: func (c *linuxContainer) Restore(process *Process, criuOpts *CriuOpts) error {",
          "",
          "[Added Lines]",
          "1374: func (c *Container) Restore(process *Process, criuOpts *CriuOpts) error {",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1540:  return err",
          "1541: }",
          "1545:  if req.GetType() != criurpc.CriuReqType_RESTORE {",
          "1546:   return nil",
          "",
          "[Removed Lines]",
          "1543: func (c *linuxContainer) criuApplyCgroups(pid int, req *criurpc.CriuReq) error {",
          "",
          "[Added Lines]",
          "1548: func (c *Container) criuApplyCgroups(pid int, req *criurpc.CriuReq) error {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1577:  return nil",
          "1578: }",
          "1581:  fds, err := unix.Socketpair(unix.AF_LOCAL, unix.SOCK_SEQPACKET|unix.SOCK_CLOEXEC, 0)",
          "1582:  if err != nil {",
          "1583:   return err",
          "",
          "[Removed Lines]",
          "1580: func (c *linuxContainer) criuSwrk(process *Process, req *criurpc.CriuReq, opts *CriuOpts, extraFiles []*os.File) error {",
          "",
          "[Added Lines]",
          "1585: func (c *Container) criuSwrk(process *Process, req *criurpc.CriuReq, opts *CriuOpts, extraFiles []*os.File) error {",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1795:  return nil",
          "1796: }",
          "1799:  notify := resp.GetNotify()",
          "1800:  if notify == nil {",
          "1801:   return fmt.Errorf(\"invalid response: %s\", resp.String())",
          "",
          "[Removed Lines]",
          "1798: func (c *linuxContainer) criuNotifications(resp *criurpc.CriuResp, process *Process, cmd *exec.Cmd, opts *CriuOpts, fds []string, oob []byte) error {",
          "",
          "[Added Lines]",
          "1803: func (c *Container) criuNotifications(resp *criurpc.CriuResp, process *Process, cmd *exec.Cmd, opts *CriuOpts, fds []string, oob []byte) error {",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1893:  return nil",
          "1894: }",
          "1897:  if process != nil {",
          "1898:   c.initProcess = process",
          "1899:  }",
          "",
          "[Removed Lines]",
          "1896: func (c *linuxContainer) updateState(process parentProcess) (*State, error) {",
          "",
          "[Added Lines]",
          "1901: func (c *Container) updateState(process parentProcess) (*State, error) {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1908:  return state, nil",
          "1909: }",
          "1912:  tmpFile, err := os.CreateTemp(c.root, \"state-\")",
          "1913:  if err != nil {",
          "1914:   return err",
          "",
          "[Removed Lines]",
          "1911: func (c *linuxContainer) saveState(s *State) (retErr error) {",
          "",
          "[Added Lines]",
          "1916: func (c *Container) saveState(s *State) (retErr error) {",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1934:  return os.Rename(tmpFile.Name(), stateFilePath)",
          "1935: }",
          "1938:  if err := c.refreshState(); err != nil {",
          "1939:   return -1, err",
          "1940:  }",
          "",
          "[Removed Lines]",
          "1937: func (c *linuxContainer) currentStatus() (Status, error) {",
          "",
          "[Added Lines]",
          "1942: func (c *Container) currentStatus() (Status, error) {",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1949:  paused, err := c.isPaused()",
          "1950:  if err != nil {",
          "1951:   return err",
          "",
          "[Removed Lines]",
          "1948: func (c *linuxContainer) refreshState() error {",
          "",
          "[Added Lines]",
          "1953: func (c *Container) refreshState() error {",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1963:  return c.state.transition(&stoppedState{c: c})",
          "1964: }",
          "1967:  if c.initProcess == nil {",
          "1968:   return Stopped",
          "1969:  }",
          "",
          "[Removed Lines]",
          "1966: func (c *linuxContainer) runType() Status {",
          "",
          "[Added Lines]",
          "1971: func (c *Container) runType() Status {",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1983:  return Running",
          "1984: }",
          "1987:  state, err := c.cgroupManager.GetFreezerState()",
          "1988:  if err != nil {",
          "1989:   return false, err",
          "",
          "[Removed Lines]",
          "1986: func (c *linuxContainer) isPaused() (bool, error) {",
          "",
          "[Added Lines]",
          "1991: func (c *Container) isPaused() (bool, error) {",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1991:  return state == configs.Frozen, nil",
          "1992: }",
          "1995:  var (",
          "1996:   startTime           uint64",
          "1997:   externalDescriptors []string",
          "",
          "[Removed Lines]",
          "1994: func (c *linuxContainer) currentState() (*State, error) {",
          "",
          "[Added Lines]",
          "1999: func (c *Container) currentState() (*State, error) {",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2038:  return state, nil",
          "2039: }",
          "2042:  bundle, annotations := utils.Annotations(c.config.Labels)",
          "2043:  state := &specs.State{",
          "2044:   Version:     specs.Version,",
          "",
          "[Removed Lines]",
          "2041: func (c *linuxContainer) currentOCIState() (*specs.State, error) {",
          "",
          "[Added Lines]",
          "2046: func (c *Container) currentOCIState() (*specs.State, error) {",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2065:  paths := []string{}",
          "2066:  for _, ns := range configs.NamespaceTypes() {",
          "",
          "[Removed Lines]",
          "2064: func (c *linuxContainer) orderNamespacePaths(namespaces map[configs.NamespaceType]string) ([]string, error) {",
          "",
          "[Added Lines]",
          "2069: func (c *Container) orderNamespacePaths(namespaces map[configs.NamespaceType]string) ([]string, error) {",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2119:  r := nl.NewNetlinkRequest(int(InitMsg), 0)",
          "",
          "[Removed Lines]",
          "2117: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string, it initType) (_ io.Reader, Err error) {",
          "",
          "[Added Lines]",
          "2122: func (c *Container) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string, it initType) (_ io.Reader, Err error) {",
          "",
          "---------------"
        ],
        "libcontainer/container_linux_test.go||libcontainer/container_linux_test.go": [
          "File: libcontainer/container_linux_test.go -> libcontainer/container_linux_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  if err != nil {",
          "116:   t.Fatalf(\"can't stat pid %d, got %v\", pid, err)",
          "117:  }",
          "119:   id:     \"myid\",",
          "120:   config: &configs.Config{},",
          "121:   cgroupManager: &mockCgroupManager{",
          "",
          "[Removed Lines]",
          "118:  container := &linuxContainer{",
          "",
          "[Added Lines]",
          "118:  container := &Container{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   expectedMemoryPath  = \"/sys/fs/cgroup/memory/myid\"",
          "149:   expectedNetworkPath = fmt.Sprintf(\"/proc/%d/ns/net\", pid)",
          "150:  )",
          "152:   id: \"myid\",",
          "153:   config: &configs.Config{",
          "154:    Namespaces: []configs.Namespace{",
          "",
          "[Removed Lines]",
          "151:  container := &linuxContainer{",
          "",
          "[Added Lines]",
          "151:  container := &Container{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:   t.Fatal(err)",
          "233:  }",
          "236:   root: t.TempDir(),",
          "237:   id:   \"myid\",",
          "238:   config: &configs.Config{",
          "",
          "[Removed Lines]",
          "235:  container := &linuxContainer{",
          "",
          "[Added Lines]",
          "235:  container := &Container{",
          "",
          "---------------"
        ],
        "libcontainer/factory_linux.go||libcontainer/factory_linux.go": [
          "File: libcontainer/factory_linux.go -> libcontainer/factory_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  if root == \"\" {",
          "42:   return nil, errors.New(\"root not set\")",
          "43:  }",
          "",
          "[Removed Lines]",
          "40: func Create(root, id string, config *configs.Config) (Container, error) {",
          "",
          "[Added Lines]",
          "40: func Create(root, id string, config *configs.Config) (*Container, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  if err := os.Mkdir(containerRoot, 0o711); err != nil {",
          "99:   return nil, err",
          "100:  }",
          "102:   id:              id,",
          "103:   root:            containerRoot,",
          "104:   config:          config,",
          "",
          "[Removed Lines]",
          "101:  c := &linuxContainer{",
          "",
          "[Added Lines]",
          "101:  c := &Container{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  if root == \"\" {",
          "117:   return nil, errors.New(\"root not set\")",
          "118:  }",
          "",
          "[Removed Lines]",
          "115: func Load(root, id string) (Container, error) {",
          "",
          "[Added Lines]",
          "115: func Load(root, id string) (*Container, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "137:  if err != nil {",
          "138:   return nil, err",
          "139:  }",
          "141:   initProcess:          r,",
          "142:   initProcessStartTime: state.InitProcessStartTime,",
          "143:   id:                   id,",
          "",
          "[Removed Lines]",
          "140:  c := &linuxContainer{",
          "",
          "[Added Lines]",
          "140:  c := &Container{",
          "",
          "---------------"
        ],
        "libcontainer/factory_linux_test.go||libcontainer/factory_linux_test.go": [
          "File: libcontainer/factory_linux_test.go -> libcontainer/factory_linux_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  if !reflect.DeepEqual(config.Hooks, expectedHooks) {",
          "76:   t.Fatalf(\"expects hooks %q but received %q\", expectedHooks, config.Hooks)",
          "77:  }",
          "84:  }",
          "85: }",
          "",
          "[Removed Lines]",
          "78:  lcontainer, ok := container.(*linuxContainer)",
          "79:  if !ok {",
          "80:   t.Fatal(\"expected linux container on linux based systems\")",
          "81:  }",
          "82:  if lcontainer.initProcess.pid() != expectedState.InitProcessPid {",
          "83:   t.Fatalf(\"expected init pid %d but received %d\", expectedState.InitProcessPid, lcontainer.initProcess.pid())",
          "",
          "[Added Lines]",
          "78:  if container.initProcess.pid() != expectedState.InitProcessPid {",
          "79:   t.Fatalf(\"expected init pid %d but received %d\", expectedState.InitProcessPid, container.initProcess.pid())",
          "",
          "---------------"
        ],
        "libcontainer/integration/utils_test.go||libcontainer/integration/utils_test.go": [
          "File: libcontainer/integration/utils_test.go -> libcontainer/integration/utils_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:  return nil",
          "166: }",
          "169:  name := strings.ReplaceAll(t.Name(), \"/\", \"_\") + strconv.FormatInt(-int64(time.Now().Nanosecond()), 35)",
          "170:  root := t.TempDir()",
          "",
          "[Removed Lines]",
          "168: func newContainer(t *testing.T, config *configs.Config) (libcontainer.Container, error) {",
          "",
          "[Added Lines]",
          "168: func newContainer(t *testing.T, config *configs.Config) (*libcontainer.Container, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  return",
          "213: }",
          "216:  _ = container.Destroy()",
          "217: }",
          "",
          "[Removed Lines]",
          "215: func destroyContainer(container libcontainer.Container) {",
          "",
          "[Added Lines]",
          "215: func destroyContainer(container *libcontainer.Container) {",
          "",
          "---------------"
        ],
        "libcontainer/process_linux.go||libcontainer/process_linux.go": [
          "File: libcontainer/process_linux.go -> libcontainer/process_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:  config          *initConfig",
          "301:  manager         cgroups.Manager",
          "302:  intelRdtManager *intelrdt.Manager",
          "304:  fds             []string",
          "305:  process         *Process",
          "306:  bootstrapData   io.Reader",
          "",
          "[Removed Lines]",
          "303:  container       *linuxContainer",
          "",
          "[Added Lines]",
          "303:  container       *Container",
          "",
          "---------------"
        ],
        "libcontainer/state_linux.go||libcontainer/state_linux.go": [
          "File: libcontainer/state_linux.go -> libcontainer/state_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  status() Status",
          "36: }",
          "39:  if !c.config.Namespaces.Contains(configs.NEWPID) ||",
          "40:   c.config.Namespaces.PathOf(configs.NEWPID) != \"\" {",
          "41:   if err := signalAllProcesses(c.cgroupManager, unix.SIGKILL); err != nil {",
          "",
          "[Removed Lines]",
          "38: func destroy(c *linuxContainer) error {",
          "",
          "[Added Lines]",
          "38: func destroy(c *Container) error {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  return err",
          "60: }",
          "63:  hooks := c.config.Hooks",
          "64:  if hooks == nil {",
          "65:   return nil",
          "",
          "[Removed Lines]",
          "62: func runPoststopHooks(c *linuxContainer) error {",
          "",
          "[Added Lines]",
          "62: func runPoststopHooks(c *Container) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: type stoppedState struct {",
          "84: }",
          "86: func (b *stoppedState) status() Status {",
          "",
          "[Removed Lines]",
          "83:  c *linuxContainer",
          "",
          "[Added Lines]",
          "83:  c *Container",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: type runningState struct {",
          "108: }",
          "110: func (r *runningState) status() Status {",
          "",
          "[Removed Lines]",
          "107:  c *linuxContainer",
          "",
          "[Added Lines]",
          "107:  c *Container",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136: }",
          "138: type createdState struct {",
          "140: }",
          "142: func (i *createdState) status() Status {",
          "",
          "[Removed Lines]",
          "139:  c *linuxContainer",
          "",
          "[Added Lines]",
          "139:  c *Container",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "164: type pausedState struct {",
          "166: }",
          "168: func (p *pausedState) status() Status {",
          "",
          "[Removed Lines]",
          "165:  c *linuxContainer",
          "",
          "[Added Lines]",
          "165:  c *Container",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "196: type restoredState struct {",
          "197:  imageDir string",
          "199: }",
          "201: func (r *restoredState) status() Status {",
          "",
          "[Removed Lines]",
          "198:  c        *linuxContainer",
          "",
          "[Added Lines]",
          "198:  c        *Container",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224: type loadedState struct {",
          "226:  s Status",
          "227: }",
          "",
          "[Removed Lines]",
          "225:  c *linuxContainer",
          "",
          "[Added Lines]",
          "225:  c *Container",
          "",
          "---------------"
        ],
        "libcontainer/state_linux_test.go||libcontainer/state_linux_test.go": [
          "File: libcontainer/state_linux_test.go -> libcontainer/state_linux_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: func TestStoppedStateTransition(t *testing.T) {",
          "54:  testTransitions(",
          "55:   t,",
          "57:   []containerState{",
          "58:    &stoppedState{},",
          "59:    &runningState{},",
          "",
          "[Removed Lines]",
          "56:   &stoppedState{c: &linuxContainer{}},",
          "",
          "[Added Lines]",
          "56:   &stoppedState{c: &Container{}},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: func TestPausedStateTransition(t *testing.T) {",
          "66:  testTransitions(",
          "67:   t,",
          "69:   []containerState{",
          "70:    &pausedState{},",
          "71:    &runningState{},",
          "",
          "[Removed Lines]",
          "68:   &pausedState{c: &linuxContainer{}},",
          "",
          "[Added Lines]",
          "68:   &pausedState{c: &Container{}},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77: func TestRestoredStateTransition(t *testing.T) {",
          "78:  testTransitions(",
          "79:   t,",
          "81:   []containerState{",
          "82:    &stoppedState{},",
          "83:    &runningState{},",
          "",
          "[Removed Lines]",
          "80:   &restoredState{c: &linuxContainer{}},",
          "",
          "[Added Lines]",
          "80:   &restoredState{c: &Container{}},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88: func TestRunningStateTransition(t *testing.T) {",
          "89:  testTransitions(",
          "90:   t,",
          "92:   []containerState{",
          "93:    &stoppedState{},",
          "94:    &pausedState{},",
          "",
          "[Removed Lines]",
          "91:   &runningState{c: &linuxContainer{}},",
          "",
          "[Added Lines]",
          "91:   &runningState{c: &Container{}},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100: func TestCreatedStateTransition(t *testing.T) {",
          "101:  testTransitions(",
          "102:   t,",
          "104:   []containerState{",
          "105:    &stoppedState{},",
          "106:    &pausedState{},",
          "",
          "[Removed Lines]",
          "103:   &createdState{c: &linuxContainer{}},",
          "",
          "[Added Lines]",
          "103:   &createdState{c: &Container{}},",
          "",
          "---------------"
        ],
        "notify_socket.go||notify_socket.go": [
          "File: notify_socket.go -> notify_socket.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:  return notifySocket, nil",
          "92: }",
          "95:  state, err := container.State()",
          "96:  if err != nil {",
          "97:   return err",
          "",
          "[Removed Lines]",
          "94: func (s *notifySocket) waitForContainer(container libcontainer.Container) error {",
          "",
          "[Added Lines]",
          "94: func (s *notifySocket) waitForContainer(container *libcontainer.Container) error {",
          "",
          "---------------"
        ],
        "utils_linux.go||utils_linux.go": [
          "File: utils_linux.go -> utils_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  id := context.Args().First()",
          "30:  if id == \"\" {",
          "31:   return nil, errEmptyID",
          "",
          "[Removed Lines]",
          "28: func getContainer(context *cli.Context) (libcontainer.Container, error) {",
          "",
          "[Added Lines]",
          "28: func getContainer(context *cli.Context) (*libcontainer.Container, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  return lp, nil",
          "83: }",
          "86:  if err := container.Destroy(); err != nil {",
          "87:   logrus.Error(err)",
          "88:  }",
          "",
          "[Removed Lines]",
          "85: func destroy(container libcontainer.Container) {",
          "",
          "[Added Lines]",
          "85: func destroy(container *libcontainer.Container) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:  return os.Rename(tmpName, path)",
          "163: }",
          "166:  rootlessCg, err := shouldUseRootlessCgroupManager(context)",
          "167:  if err != nil {",
          "168:   return nil, err",
          "",
          "[Removed Lines]",
          "165: func createContainer(context *cli.Context, id string, spec *specs.Spec) (libcontainer.Container, error) {",
          "",
          "[Added Lines]",
          "165: func createContainer(context *cli.Context, id string, spec *specs.Spec) (*libcontainer.Container, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:  preserveFDs     int",
          "194:  pidFile         string",
          "195:  consoleSocket   string",
          "197:  action          CtAct",
          "198:  notifySocket    *notifySocket",
          "199:  criuOpts        *libcontainer.CriuOpts",
          "",
          "[Removed Lines]",
          "196:  container       libcontainer.Container",
          "",
          "[Added Lines]",
          "196:  container       *libcontainer.Container",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8dbe46687c2a96efa9252b69d3fc1ce33bdc416",
      "candidate_info": {
        "commit_hash": "b8dbe46687c2a96efa9252b69d3fc1ce33bdc416",
        "repo": "opencontainers/runc",
        "commit_url": "https://github.com/opencontainers/runc/commit/b8dbe46687c2a96efa9252b69d3fc1ce33bdc416",
        "files": [
          "libcontainer/container_linux.go",
          "libcontainer/message_linux.go"
        ],
        "message": "runc init: avoid netlink message length overflows\n\nWhen writing netlink messages, it is possible to have a byte array\nlarger than UINT16_MAX which would result in the length field\noverflowing and allowing user-controlled data to be parsed as control\ncharacters (such as creating custom mount points, changing which set of\nnamespaces to allow, and so on).\n\nCo-authored-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
        "before_after_code_files": [
          "libcontainer/container_linux.go||libcontainer/container_linux.go",
          "libcontainer/message_linux.go||libcontainer/message_linux.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libcontainer/container_linux.go||libcontainer/container_linux.go",
            "libcontainer/message_linux.go||libcontainer/message_linux.go"
          ],
          "candidate": [
            "libcontainer/container_linux.go||libcontainer/container_linux.go",
            "libcontainer/message_linux.go||libcontainer/message_linux.go"
          ]
        }
      },
      "candidate_diff": {
        "libcontainer/container_linux.go||libcontainer/container_linux.go": [
          "File: libcontainer/container_linux.go -> libcontainer/container_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:  return data.Bytes(), nil",
          "2029: }",
          "2039:  r := nl.NewNetlinkRequest(int(InitMsg), 0)",
          "2042:  r.AddData(&Int32msg{",
          "2043:   Type:  CloneFlagsAttr,",
          "",
          "[Removed Lines]",
          "2037: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string) (io.Reader, error) {",
          "",
          "[Added Lines]",
          "2034: type netlinkError struct{ error }",
          "2042: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string) (_ io.Reader, Err error) {",
          "2049:  defer func() {",
          "2050:   if r := recover(); r != nil {",
          "2051:    if e, ok := r.(netlinkError); ok {",
          "2052:     Err = e.error",
          "2053:    } else {",
          "2054:     panic(r)",
          "2055:    }",
          "2056:   }",
          "2057:  }()",
          "",
          "---------------"
        ],
        "libcontainer/message_linux.go||libcontainer/message_linux.go": [
          "File: libcontainer/message_linux.go -> libcontainer/message_linux.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: package libcontainer",
          "5: import (",
          "6:  \"github.com/vishvananda/netlink/nl\"",
          "7:  \"golang.org/x/sys/unix\"",
          "8: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"fmt\"",
          "7:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: func (msg *Bytemsg) Serialize() []byte {",
          "56:  l := msg.Len()",
          "57:  buf := make([]byte, (l+unix.NLA_ALIGNTO-1) & ^(unix.NLA_ALIGNTO-1))",
          "58:  native := nl.NativeEndian()",
          "59:  native.PutUint16(buf[0:2], uint16(l))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:  if l > math.MaxUint16 {",
          "64:   panic(netlinkError{fmt.Errorf(\"netlink: cannot serialize bytemsg of length %d (larger than UINT16_MAX)\", l)})",
          "65:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}