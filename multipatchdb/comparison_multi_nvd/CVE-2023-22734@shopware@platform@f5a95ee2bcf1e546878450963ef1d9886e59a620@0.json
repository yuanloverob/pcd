{
  "cve_id": "CVE-2023-22734",
  "cve_desc": "Shopware is an open source commerce platform based on Symfony Framework and Vue js. The newsletter double opt-in validation was not checked properly, and it was possible to skip the complete double opt in process. As a result operators may have inconsistencies in their newsletter systems. This problem has been fixed with version 6.4.18.1. Users are advised to upgrade. Users unable to upgrade may find security measures are available via a plugin for major versions 6.1, 6.2, and 6.3. Users may also disable newsletter registration completely.\n",
  "repo": "shopware/platform",
  "patch_hash": "f5a95ee2bcf1e546878450963ef1d9886e59a620",
  "patch_info": {
    "commit_hash": "f5a95ee2bcf1e546878450963ef1d9886e59a620",
    "repo": "shopware/platform",
    "commit_url": "https://github.com/shopware/platform/commit/f5a95ee2bcf1e546878450963ef1d9886e59a620",
    "files": [
      "changelog/_unreleased/2022-09-01-fix-newsletter-route-does-not-handle-double-optin-setting-correctly.md",
      "phpstan-baseline.neon",
      "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
      "src/Storefront/Controller/NewsletterController.php",
      "src/Storefront/DependencyInjection/controller.xml",
      "src/Storefront/Resources/snippet/de_DE/storefront.de-DE.json",
      "src/Storefront/Resources/snippet/en_GB/storefront.en-GB.json",
      "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
      "tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js",
      "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php",
      "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php",
      "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
      "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
      "tests/integration/php/Storefront/Controller/NewsletterControllerTest.php",
      "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
    ],
    "message": "Merge branch 'next-22891/fix-newsletter-route-does-not-handle-double-optin-setting-correctly' into '6.4.18.1'\n\nNEXT-22891 - Fix newsletter route does not handle double optin setting correctly\n\nSee merge request shopware/6/product/platform!8819",
    "before_after_code_files": [
      "phpstan-baseline.neon||phpstan-baseline.neon",
      "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
      "src/Storefront/Controller/NewsletterController.php||src/Storefront/Controller/NewsletterController.php",
      "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
      "tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js||tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js",
      "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php||tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php",
      "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php||tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php",
      "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
      "src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
      "src/Storefront/Test/Controller/NewsletterControllerTest.php||tests/integration/php/Storefront/Controller/NewsletterControllerTest.php",
      "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
    ]
  },
  "patch_diff": {
    "phpstan-baseline.neon||phpstan-baseline.neon": [
      "File: phpstan-baseline.neon -> phpstan-baseline.neon",
      "--- Hunk 1 ---",
      "[Context before]",
      "25361:    count: 1",
      "25362:    path: src/Storefront/Controller/FormController.php",
      "25374:   -",
      "25375:    message: \"#^Method Shopware\\\\\\\\Storefront\\\\\\\\Controller\\\\\\\\ScriptController\\\\:\\\\:renderStorefront\\\\(\\\\) has parameter \\\\$parameters with no value type specified in iterable type array\\\\.$#\"",
      "25376:    count: 1",
      "",
      "[Removed Lines]",
      "25364:   -",
      "25365:    message: \"#^Cannot call method getCity\\\\(\\\\) on Shopware\\\\\\\\Core\\\\\\\\Checkout\\\\\\\\Customer\\\\\\\\Aggregate\\\\\\\\CustomerAddress\\\\\\\\CustomerAddressEntity\\\\|null\\\\.$#\"",
      "25366:    count: 1",
      "25367:    path: src/Storefront/Controller/NewsletterController.php",
      "25369:   -",
      "25370:    message: \"#^Cannot call method getZipCode\\\\(\\\\) on Shopware\\\\\\\\Core\\\\\\\\Checkout\\\\\\\\Customer\\\\\\\\Aggregate\\\\\\\\CustomerAddress\\\\\\\\CustomerAddressEntity\\\\|null\\\\.$#\"",
      "25371:    count: 1",
      "25372:    path: src/Storefront/Controller/NewsletterController.php",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25971:    count: 1",
      "25972:    path: src/Storefront/Test/Controller/CookieControllerTest.php",
      "25994:   -",
      "25995:    message: \"#^Cannot call method getCustomer\\\\(\\\\) on Shopware\\\\\\\\Core\\\\\\\\System\\\\\\\\SalesChannel\\\\\\\\SalesChannelContext\\\\|null\\\\.$#\"",
      "25996:    count: 1",
      "",
      "[Removed Lines]",
      "25974:   -",
      "25975:    message: \"#^Cannot call method getCustomer\\\\(\\\\) on Shopware\\\\\\\\Core\\\\\\\\System\\\\\\\\SalesChannel\\\\\\\\SalesChannelContext\\\\|null\\\\.$#\"",
      "25976:    count: 1",
      "25977:    path: src/Storefront/Test/Controller/NewsletterControllerTest.php",
      "25979:   -",
      "25980:    message: \"#^Parameter \\\\#3 \\\\$message of static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertEquals\\\\(\\\\) expects string, string\\\\|null given\\\\.$#\"",
      "25981:    count: 2",
      "25982:    path: src/Storefront/Test/Controller/NewsletterControllerTest.php",
      "25984:   -",
      "25985:    message: \"#^Parameter \\\\#3 \\\\$message of static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) expects string, string\\\\|false given\\\\.$#\"",
      "25986:    count: 4",
      "25987:    path: src/Storefront/Test/Controller/NewsletterControllerTest.php",
      "25989:   -",
      "25990:    message: \"#^Property Shopware\\\\\\\\Storefront\\\\\\\\Test\\\\\\\\Controller\\\\\\\\NewsletterControllerTest\\\\:\\\\:\\\\$customerData type has no value type specified in iterable type array\\\\.$#\"",
      "25991:    count: 1",
      "25992:    path: src/Storefront/Test/Controller/NewsletterControllerTest.php",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php": [
      "File: src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php -> src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "176:         $recipient = $this->getNewsletterRecipient('email', $data['email'], $context->getContext());",
      "179:             $event = new NewsletterConfirmEvent($context->getContext(), $recipient, $context->getSalesChannel()->getId());",
      "180:             $this->eventDispatcher->dispatch($event);",
      "",
      "[Removed Lines]",
      "178:         if ($data['status'] === self::STATUS_DIRECT) {",
      "",
      "[Added Lines]",
      "178:         if (!$this->systemConfigService->getBool('core.newsletter.doubleOptIn')) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "262:     private function getOptionSelection(): array",
      "263:     {",
      "264:         return [",
      "267:             self::OPTION_CONFIRM_SUBSCRIBE => self::STATUS_OPT_IN,",
      "268:             self::OPTION_UNSUBSCRIBE => self::STATUS_OPT_OUT,",
      "269:         ];",
      "",
      "[Removed Lines]",
      "265:             self::OPTION_DIRECT => self::STATUS_DIRECT,",
      "266:             self::OPTION_SUBSCRIBE => self::STATUS_NOT_SET,",
      "",
      "[Added Lines]",
      "265:             self::OPTION_DIRECT => $this->systemConfigService->getBool('core.newsletter.doubleOptIn') ? self::STATUS_NOT_SET : self::STATUS_DIRECT,",
      "266:             self::OPTION_SUBSCRIBE => $this->systemConfigService->getBool('core.newsletter.doubleOptIn') ? self::STATUS_NOT_SET : self::STATUS_DIRECT,",
      "",
      "---------------"
    ],
    "src/Storefront/Controller/NewsletterController.php||src/Storefront/Controller/NewsletterController.php": [
      "File: src/Storefront/Controller/NewsletterController.php -> src/Storefront/Controller/NewsletterController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: use Shopware\\Core\\Framework\\Validation\\DataBag\\QueryDataBag;",
      "15: use Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;",
      "16: use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;",
      "17: use Shopware\\Storefront\\Framework\\Routing\\RequestTransformer;",
      "18: use Shopware\\Storefront\\Page\\Newsletter\\Subscribe\\NewsletterSubscribePageLoader;",
      "19: use Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:     private NewsletterAccountPageletLoader $newsletterAccountPageletLoader;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     private SystemConfigService $systemConfigService;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "70:         AbstractNewsletterSubscribeRoute $newsletterSubscribeRoute,",
      "71:         AbstractNewsletterConfirmRoute $newsletterConfirmRoute,",
      "72:         AbstractNewsletterUnsubscribeRoute $newsletterUnsubscribeRoute,",
      "74:     ) {",
      "75:         $this->newsletterConfirmRegisterPageLoader = $newsletterConfirmRegisterPageLoader;",
      "",
      "[Removed Lines]",
      "73:         NewsletterAccountPageletLoader $newsletterAccountPageletLoader",
      "",
      "[Added Lines]",
      "76:         NewsletterAccountPageletLoader $newsletterAccountPageletLoader,",
      "77:         SystemConfigService $systemConfigService",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "82:         $this->newsletterUnsubscribeRoute = $newsletterUnsubscribeRoute;",
      "83:         $this->newsletterAccountPageletLoader = $newsletterAccountPageletLoader;",
      "84:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:         $this->systemConfigService = $systemConfigService;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "118:                 'newsletterAccountPagelet' => $pagelet,",
      "119:             ]);",
      "120:         }",
      "123:         if (!$subscribed) {",
      "124:             $dataBag->set('option', 'unsubscribe');",
      "",
      "[Removed Lines]",
      "121:         $subscribed = $request->get('option', false) === 'direct';",
      "",
      "[Added Lines]",
      "126:         $subscribed = $request->get('option', false) === 'subscribe' || $request->get('option', false) === 'direct';",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "139:                 $this->setNewsletterFlag($customer, true, $context);",
      "141:                 $success = true;",
      "143:             } catch (\\Exception $exception) {",
      "144:                 $success = false;",
      "145:                 $messages[] = ['type' => 'danger', 'text' => $this->trans('newsletter.subscriptionConfirmationFailed')];",
      "",
      "[Removed Lines]",
      "142:                 $messages[] = ['type' => 'success', 'text' => $this->trans('newsletter.subscriptionConfirmationSuccess')];",
      "",
      "[Added Lines]",
      "147:                 if ($this->systemConfigService->getBool('core.newsletter.doubleOptIn')) {",
      "148:                     $messages[] = ['type' => 'info', 'text' => $this->trans('newsletter.subscriptionConfirmationNeeded')];",
      "149:                 } else {",
      "150:                     $messages[] = ['type' => 'success', 'text' => $this->trans('newsletter.subscriptionConfirmationSuccess')];",
      "151:                 }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "183:         $dataBag->set('title', $customer->getTitle());",
      "184:         $dataBag->set('firstName', $customer->getFirstName());",
      "185:         $dataBag->set('lastName', $customer->getLastName());",
      "188:         $dataBag->set(",
      "189:             'street',",
      "190:             ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getStreet() : null)",
      "",
      "[Removed Lines]",
      "186:         $dataBag->set('zipCode', $customer->getDefaultShippingAddress()->getZipCode());",
      "187:         $dataBag->set('city', $customer->getDefaultShippingAddress()->getCity());",
      "",
      "[Added Lines]",
      "195:         $dataBag->set(",
      "196:             'zipCode',",
      "197:             ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getZipCode() : null)",
      "198:         );",
      "199:         $dataBag->set(",
      "200:             'city',",
      "201:             ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getCity() : null)",
      "202:         );",
      "",
      "---------------"
    ],
    "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig": [
      "File: src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig -> src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:                                id=\"newsletterRegister\"",
      "66:                                name=\"option\"",
      "67:                                autocomplete=\"off\"",
      "69:                                {% if status %}checked=\"checked\"{% endif %}>",
      "70:                     {% endblock %}",
      "",
      "[Removed Lines]",
      "68:                                value=\"{% if newsletterAccountPagelet.newsletterDoi %}{{ subscribe }}{% else %}{{ direct }}{% endif %}\"",
      "",
      "[Added Lines]",
      "68:                                value=\"subscribe\"",
      "",
      "---------------"
    ],
    "tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js||tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js": [
      "File: tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js -> tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:         });",
      "43:         cy.get('label[for=\"newsletterRegister\"]').click();",
      "44:         cy.wait('@checkNewsletter').its('response.statusCode').should('equal', 200);",
      "48:         cy.visit(`${Cypress.env('admin')}#/sw/newsletter/recipient/index`);",
      "",
      "[Removed Lines]",
      "45:         cy.contains('You have subscribed to the newsletter.').should('exist');",
      "",
      "[Added Lines]",
      "45:         cy.contains('We have sent a confirmation email containing an activation link. Please check your inbox and click the link to complete your newsletter subscription.').should('exist');",
      "",
      "---------------"
    ],
    "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php||tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php": [
      "File: tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php -> tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use Shopware\\Core\\Defaults;",
      "10: use Shopware\\Core\\Framework\\Context;",
      "11: use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;",
      "12: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
      "14: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
      "15: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
      "16: use Shopware\\Core\\Test\\TestDefaults;",
      "",
      "[Removed Lines]",
      "13: use Shopware\\Core\\Framework\\Test\\TestDataCollection;",
      "",
      "[Added Lines]",
      "12: use Shopware\\Core\\Framework\\Test\\IdsCollection;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27:     private KernelBrowser $browser;",
      "31:     private EntityRepositoryInterface $customerRepository;",
      "33:     protected function setUp(): void",
      "34:     {",
      "37:         $this->browser = $this->createCustomSalesChannelBrowser([",
      "38:             'id' => $this->ids->create('sales-channel'),",
      "",
      "[Removed Lines]",
      "29:     private TestDataCollection $ids;",
      "35:         $this->ids = new TestDataCollection();",
      "",
      "[Added Lines]",
      "31:     private IdsCollection $ids;",
      "37:         $this->ids = new IdsCollection();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "56:         $response = json_decode((string) $this->browser->getResponse()->getContent(), true);",
      "58:         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);",
      "59:     }",
      "61:     public function testEmptyRequest(): void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "63:         static::assertNotNull($systemConfig);",
      "64:         $systemConfig->set('core.newsletter.doubleOptIn', false);",
      "",
      "---------------"
    ],
    "tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php||tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php": [
      "File: tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php -> tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
      "16: use Shopware\\Core\\Framework\\Test\\TestDataCollection;",
      "17: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
      "18: use Shopware\\Core\\Test\\TestDefaults;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:         $response = json_decode((string) $this->browser->getResponse()->getContent(), true);",
      "75:         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);",
      "76:     }",
      "78:     public function testEmptyRequest(): void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "79:         static::assertNotNull($systemConfig);",
      "80:         $systemConfig->set('core.newsletter.doubleOptIn', false);",
      "",
      "---------------"
    ],
    "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php": [
      "File: tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php -> tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:     private string $salesChannelId;",
      "36:     protected function setUp(): void",
      "37:     {",
      "38:         $this->ids = new TestDataCollection();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37:     private SystemConfigService $systemConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:         $this->browser = $this->createCustomSalesChannelBrowser([",
      "43:             'id' => $this->ids->create('sales-channel'),",
      "44:         ]);",
      "45:     }",
      "47:     public function testSubscribeWithoutFields(): void",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "49:         $this->systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "50:         static::assertNotNull($this->systemConfig);",
      "51:         $this->systemConfig->set('core.newsletter.doubleOptIn', false);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     public function testResubscribeAfterUnsubscribe(): void",
      "92:     {",
      "93:         $connection = $this->getContainer()->get(Connection::class);",
      "94:         $newsletterRecipientRepository = $this->getContainer()->get('newsletter_recipient.repository');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:         $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "206:     public function testSubscribeChangedConfirmUrl(): void",
      "207:     {",
      "210:         try {",
      "215:             $dispatcher = $this->getContainer()->get('event_dispatcher');",
      "",
      "[Removed Lines]",
      "208:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "211:             $systemConfig->set('core.newsletter.doubleOptIn', true);",
      "212:             $systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');",
      "",
      "[Added Lines]",
      "217:         $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
      "220:             $this->systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "248:             static::assertStringStartsWith('http://localhost/custom-newsletter/confirm/', $caughtEvent->getUrl());",
      "249:             static::assertStringEndsWith('?specialParam=false', $caughtEvent->getUrl());",
      "250:         } finally {",
      "253:         }",
      "254:     }",
      "256:     public function testSubscribeChangedConfirmDomain(): void",
      "257:     {",
      "258:         Feature::skipTestIfInActive('FEATURE_NEXT_16200', $this);",
      "262:         try {",
      "266:             $dispatcher = $this->getContainer()->get('event_dispatcher');",
      "",
      "[Removed Lines]",
      "251:             $systemConfig->set('core.newsletter.doubleOptIn', false);",
      "252:             $systemConfig->set('core.newsletter.subscribeUrl', null);",
      "260:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "263:             $systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');",
      "",
      "[Added Lines]",
      "259:             $this->systemConfig->set('core.newsletter.subscribeUrl', null);",
      "266:         $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
      "269:             $this->systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "289:             static::assertInstanceOf(NewsletterRegisterEvent::class, $caughtEvent);",
      "290:             static::assertStringStartsWith('http://test.test/newsletter-subscribe?em=', $caughtEvent->getUrl());",
      "291:         } finally {",
      "293:         }",
      "294:     }",
      "",
      "[Removed Lines]",
      "292:             $systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);",
      "",
      "[Added Lines]",
      "298:             $this->systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);",
      "",
      "---------------"
    ],
    "src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php": [
      "File: src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php -> tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <?php declare(strict_types=1);",
      "5: use Doctrine\\DBAL\\Connection;",
      "6: use PHPUnit\\Framework\\TestCase;",
      "7: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterUnsubscribeEvent;",
      "8: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
      "9: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelApiTestBehaviour;",
      "10: use Shopware\\Core\\Framework\\Test\\TestCaseHelper\\CallableClass;",
      "12: use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
      "18: class NewsletterUnsubscribeRouteTest extends TestCase",
      "19: {",
      "",
      "[Removed Lines]",
      "3: namespace Shopware\\Core\\Content\\Test\\Newsletter\\SalesChannel;",
      "11: use Shopware\\Core\\Framework\\Test\\TestDataCollection;",
      "",
      "[Added Lines]",
      "3: namespace Shopware\\Tests\\Integration\\Core\\Content\\Newsletter\\SalesChannel;",
      "8: use Shopware\\Core\\Framework\\Test\\IdsCollection;",
      "12: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:     private KernelBrowser $browser;",
      "27:     protected function setUp(): void",
      "28:     {",
      "31:         $this->browser = $this->createCustomSalesChannelBrowser([",
      "32:             'id' => $this->ids->create('sales-channel'),",
      "33:         ]);",
      "34:     }",
      "36:     public function testUnsubscribe(): void",
      "",
      "[Removed Lines]",
      "25:     private TestDataCollection $ids;",
      "29:         $this->ids = new TestDataCollection();",
      "",
      "[Added Lines]",
      "27:     private IdsCollection $ids;",
      "31:         $this->ids = new IdsCollection();",
      "37:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "38:         static::assertNotNull($systemConfig);",
      "39:         $systemConfig->set('core.newsletter.doubleOptIn', false);",
      "",
      "---------------"
    ],
    "src/Storefront/Test/Controller/NewsletterControllerTest.php||tests/integration/php/Storefront/Controller/NewsletterControllerTest.php": [
      "File: src/Storefront/Test/Controller/NewsletterControllerTest.php -> tests/integration/php/Storefront/Controller/NewsletterControllerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <?php declare(strict_types=1);",
      "5: use PHPUnit\\Framework\\TestCase;",
      "6: use Shopware\\Core\\Checkout\\Customer\\CustomerEntity;",
      "",
      "[Removed Lines]",
      "3: namespace Shopware\\Storefront\\Test\\Controller;",
      "",
      "[Added Lines]",
      "3: namespace Shopware\\Tests\\Integration\\Storefront\\Controller;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8: use Shopware\\Core\\Framework\\Context;",
      "9: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;",
      "10: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;",
      "12: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelLifecycleManager;",
      "13: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelFunctionalTestBehaviour;",
      "14: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
      "15: use Shopware\\Core\\Test\\TestDefaults;",
      "16: use Shopware\\Storefront\\Framework\\Routing\\StorefrontResponse;",
      "17: use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
      "18: use Symfony\\Component\\HttpFoundation\\Response;",
      "23: class NewsletterControllerTest extends TestCase",
      "24: {",
      "25:     use SalesChannelFunctionalTestBehaviour;",
      "26:     use StorefrontControllerTestBehaviour;",
      "28:     private array $customerData = [];",
      "30:     public function testRegisterNewsletterForCustomerDirect(): void",
      "31:     {",
      "33:         $browser = $this->login();",
      "34:         $data = [",
      "35:             'option' => 'direct',",
      "",
      "[Removed Lines]",
      "11: use Shopware\\Core\\Framework\\Feature;",
      "32:         Feature::skipTestIfInActive('FEATURE_NEXT_14001', $this);",
      "",
      "[Added Lines]",
      "14: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
      "17: use Shopware\\Storefront\\Test\\Controller\\StorefrontControllerTestBehaviour;",
      "35:     private SystemConfigService $systemConfig;",
      "37:     public function setUp(): void",
      "38:     {",
      "39:         $this->systemConfig = $this->getContainer()->get(SystemConfigService::class);",
      "40:         static::assertNotNull($this->systemConfig);",
      "41:         $this->systemConfig->set('core.newsletter.doubleOptIn', false);",
      "42:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "44:         $response = $browser->getResponse();",
      "48:         static::assertInstanceOf(StorefrontResponse::class, $response);",
      "49:         static::assertSame(200, $response->getStatusCode());",
      "",
      "[Removed Lines]",
      "46:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());",
      "",
      "[Added Lines]",
      "59:         $content = $response->getContent();",
      "60:         static::assertIsString($content);",
      "61:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "54:         $criteria->addFilter(new EqualsFilter('email', 'nltest@example.com'));",
      "56:         $recipientEntry = $repo->search($criteria, Context::createDefaultContext())->first();",
      "59:         $this->validateRecipientData($recipientEntry);",
      "60:     }",
      "62:     public function testRegisterNewsletterForCustomerDoi(): void",
      "63:     {",
      "65:         $browser = $this->login();",
      "66:         $data = [",
      "67:             'option' => 'subscribe',",
      "",
      "[Removed Lines]",
      "58:         static::assertEquals('direct', $recipientEntry->getStatus(), $recipientEntry->getStatus());",
      "64:         Feature::skipTestIfInActive('FEATURE_NEXT_14001', $this);",
      "",
      "[Added Lines]",
      "72:         $status = $recipientEntry->getStatus();",
      "74:         static::assertIsString($status);",
      "75:         static::assertEquals('direct', $status);",
      "81:         $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "74:         );",
      "76:         $response = $browser->getResponse();",
      "80:         static::assertInstanceOf(StorefrontResponse::class, $response);",
      "81:         static::assertSame(200, $response->getStatusCode());",
      "",
      "[Removed Lines]",
      "78:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());",
      "",
      "[Added Lines]",
      "95:         $content = $response->getContent();",
      "97:         static::assertIsString($content);",
      "98:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "93:         );",
      "95:         $response = $browser->getResponse();",
      "99:         static::assertInstanceOf(StorefrontResponse::class, $response);",
      "100:         static::assertSame(200, $response->getStatusCode());",
      "",
      "[Removed Lines]",
      "97:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());",
      "",
      "[Added Lines]",
      "116:         $content = $response->getContent();",
      "118:         static::assertIsString($content);",
      "119:         static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "103:         $criteria->addFilter(new EqualsFilter('email', 'nltest@example.com'));",
      "105:         $recipientEntry = $repo->search($criteria, Context::createDefaultContext())->first();",
      "108:         $this->validateRecipientData($recipientEntry);",
      "109:     }",
      "",
      "[Removed Lines]",
      "107:         static::assertEquals('optIn', $recipientEntry->getStatus(), $recipientEntry->getStatus());",
      "",
      "[Added Lines]",
      "128:         $status = $recipientEntry->getStatus();",
      "130:         static::assertIsString($status);",
      "131:         static::assertEquals('optIn', $status);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "122:             ])",
      "123:         );",
      "124:         $response = $browser->getResponse();",
      "127:         $browser->request('GET', '/');",
      "129:         $response = $browser->getResponse();",
      "132:         return $browser;",
      "133:     }",
      "",
      "[Removed Lines]",
      "125:         static::assertSame(200, $response->getStatusCode(), $response->getContent());",
      "130:         static::assertNotNull($response->getContext()->getCustomer());",
      "",
      "[Added Lines]",
      "149:         $content = $response->getContent();",
      "151:         static::assertIsString($content);",
      "152:         static::assertSame(200, $response->getStatusCode(), $content);",
      "157:         $context = $response->getContext();",
      "159:         static::assertNotNull($context);",
      "160:         static::assertNotNull($context->getCustomer());",
      "",
      "---------------"
    ],
    "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php": [
      "File: tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php -> tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use PHPUnit\\Framework\\TestCase;",
      "6: use Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientCollection;",
      "7: use Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientEntity;",
      "8: use Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute;",
      "9: use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;",
      "10: use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterConfirmEvent;",
      "9: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterRegisterEvent;",
      "10: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterSubscribeUrlEvent;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\IdSearchResult;",
      "14: use Shopware\\Core\\Framework\\RateLimiter\\RateLimiter;",
      "15: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
      "16: use Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;",
      "17: use Shopware\\Core\\Framework\\Validation\\DataValidationDefinition;",
      "18: use Shopware\\Core\\Framework\\Validation\\DataValidator;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: use Shopware\\Core\\Framework\\Validation\\BuildValidationEvent;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "37:         $this->salesChannelContext = $this->createMock(SalesChannelContext::class);",
      "38:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     public function testSubscribeWithDOIEnabled(): void",
      "45:     {",
      "46:         $requestData = new RequestDataBag();",
      "47:         $requestData->add([",
      "48:             'email' => 'test@example.com',",
      "49:             'option' => 'direct',",
      "50:             'firstName' => 'Y',",
      "51:             'lastName' => 'Tran',",
      "52:         ]);",
      "54:         $newsletterRecipientEntity = new NewsletterRecipientEntity();",
      "55:         $newsletterRecipientEntity->setId(Uuid::randomHex());",
      "56:         $newsletterRecipientEntity->setConfirmedAt(new \\DateTime());",
      "58:         $idSearchResult = $this->createMock(IdSearchResult::class);",
      "59:         $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());",
      "61:         $entityRepository = $this->createMock(EntityRepository::class);",
      "62:         $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);",
      "63:         $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(",
      "64:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
      "65:         );",
      "67:         $systemConfig = $this->createMock(SystemConfigService::class);",
      "68:         $systemConfig",
      "69:             ->expects(static::exactly(2))",
      "70:             ->method('getBool')",
      "71:             ->with('core.newsletter.doubleOptIn')",
      "72:             ->willReturn(true);",
      "74:         $eventDispatcher = $this->createMock(EventDispatcherInterface::class);",
      "75:         $eventDispatcher",
      "76:             ->expects(static::once())",
      "77:             ->method('dispatch')",
      "78:             ->willReturnOnConsecutiveCalls(",
      "79:                 static::isInstanceOf(BuildValidationEvent::class),",
      "80:                 static::isInstanceOf(NewsletterSubscribeUrlEvent::class),",
      "81:                 static::isInstanceOf(NewsletterRegisterEvent::class),",
      "82:             );",
      "84:         $newsletterSubscribeRoute = new NewsletterSubscribeRoute(",
      "85:             $entityRepository,",
      "86:             $this->createMock(DataValidator::class),",
      "87:             $eventDispatcher,",
      "88:             $systemConfig,",
      "89:             $this->createMock(RateLimiter::class),",
      "90:             $this->createMock(RequestStack::class),",
      "91:         );",
      "93:         $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);",
      "94:     }",
      "96:     public function testSubscribeWithDOIDisabled(): void",
      "97:     {",
      "98:         $requestData = new RequestDataBag();",
      "99:         $requestData->add([",
      "100:             'email' => 'test@example.com',",
      "101:             'option' => 'subscribe',",
      "102:             'firstName' => 'Y',",
      "103:             'lastName' => 'Tran',",
      "104:         ]);",
      "106:         $newsletterRecipientEntity = new NewsletterRecipientEntity();",
      "107:         $newsletterRecipientEntity->setId(Uuid::randomHex());",
      "108:         $newsletterRecipientEntity->setConfirmedAt(new \\DateTime());",
      "110:         $idSearchResult = $this->createMock(IdSearchResult::class);",
      "111:         $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());",
      "113:         $entityRepository = $this->createMock(EntityRepository::class);",
      "114:         $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);",
      "115:         $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(",
      "116:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
      "117:         );",
      "119:         $systemConfig = $this->createMock(SystemConfigService::class);",
      "120:         $systemConfig",
      "121:             ->expects(static::exactly(2))",
      "122:             ->method('getBool')",
      "123:             ->with('core.newsletter.doubleOptIn')",
      "124:             ->willReturn(false);",
      "126:         $eventDispatcher = $this->createMock(EventDispatcherInterface::class);",
      "127:         $eventDispatcher",
      "128:             ->expects(static::once())",
      "129:             ->method('dispatch')",
      "130:             ->willReturnOnConsecutiveCalls(",
      "131:                 static::isInstanceOf(BuildValidationEvent::class),",
      "132:                 static::isInstanceOf(NewsletterSubscribeUrlEvent::class),",
      "133:                 static::isInstanceOf(NewsletterConfirmEvent::class),",
      "134:             );",
      "136:         $newsletterSubscribeRoute = new NewsletterSubscribeRoute(",
      "137:             $entityRepository,",
      "138:             $this->createMock(DataValidator::class),",
      "139:             $eventDispatcher,",
      "140:             $systemConfig,",
      "141:             $this->createMock(RateLimiter::class),",
      "142:             $this->createMock(RequestStack::class),",
      "143:         );",
      "145:         $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);",
      "146:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "140:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
      "141:         );",
      "145:         $request = $this->createMock(Request::class);",
      "146:         $request->method('getClientIp')->willReturn('127.0.0.1');",
      "",
      "[Removed Lines]",
      "143:         $raleLimiterMock = $this->createMock(RateLimiter::class);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "151:             ->method('getMainRequest')",
      "152:             ->willReturn($request);",
      "155:             ->expects(static::once())",
      "156:             ->method('ensureAccepted')",
      "157:             ->willReturnCallback(function (string $route, string $key): void {",
      "",
      "[Removed Lines]",
      "154:         $raleLimiterMock",
      "",
      "[Added Lines]",
      "260:         $rateLimiterMock = $this->createMock(RateLimiter::class);",
      "261:         $rateLimiterMock",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "164:             $this->createMock(DataValidator::class),",
      "165:             $this->createMock(EventDispatcherInterface::class),",
      "166:             $this->createMock(SystemConfigService::class),",
      "168:             $requestStackMock,",
      "169:         );",
      "",
      "[Removed Lines]",
      "167:             $raleLimiterMock,",
      "",
      "[Added Lines]",
      "274:             $rateLimiterMock,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34b54b7e90b0c07f104495c8a2491df25af511f6",
      "candidate_info": {
        "commit_hash": "34b54b7e90b0c07f104495c8a2491df25af511f6",
        "repo": "shopware/platform",
        "commit_url": "https://github.com/shopware/platform/commit/34b54b7e90b0c07f104495c8a2491df25af511f6",
        "files": [
          "changelog/_unreleased/2023-01-19-fix-double-optin-handling-in-newsletter-store-api-route.md",
          "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
          "src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
          "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
          "src/Storefront/Test/Controller/NewsletterControllerTest.php",
          "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
          "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
        ],
        "message": "NEXT-22891 - Fix double optin handling in newsletter store-api route",
        "before_after_code_files": [
          "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
          "src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php||src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
          "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
          "src/Storefront/Test/Controller/NewsletterControllerTest.php||src/Storefront/Test/Controller/NewsletterControllerTest.php",
          "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
          "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
            "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
            "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
            "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
          ],
          "candidate": [
            "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
            "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
            "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
            "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php||src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php": [
          "File: src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php -> src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:         $recipient = $this->getNewsletterRecipient('email', $data['email'], $context->getContext());",
          "168:             $event = new NewsletterConfirmEvent($context->getContext(), $recipient, $context->getSalesChannel()->getId());",
          "169:             $this->eventDispatcher->dispatch($event);",
          "",
          "[Removed Lines]",
          "167:         if ($data['status'] === self::STATUS_DIRECT) {",
          "",
          "[Added Lines]",
          "167:         if (!$this->isNewsletterDoi($context)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         return new NoContentResponse();",
          "181:     }",
          "183:     private function getOptInValidator(DataBag $dataBag, SalesChannelContext $context, bool $validateStorefrontUrl): DataValidationDefinition",
          "184:     {",
          "185:         $definition = new DataValidationDefinition('newsletter_recipient.create');",
          "186:         $definition->add('email', new NotBlank(), new Email())",
          "189:         if (!empty($dataBag->get('firstName'))) {",
          "190:             $definition->add('firstName', new NotBlank(), new Regex([",
          "",
          "[Removed Lines]",
          "187:             ->add('option', new NotBlank(), new Choice(array_keys($this->getOptionSelection())));",
          "",
          "[Added Lines]",
          "183:     public function isNewsletterDoi(SalesChannelContext $context): ?bool",
          "184:     {",
          "185:         if ($context->getCustomerId() === null) {",
          "186:             return $this->systemConfigService->getBool('core.newsletter.doubleOptIn', $context->getSalesChannelId());",
          "187:         }",
          "189:         return $this->systemConfigService->getBool('core.newsletter.doubleOptInRegistered', $context->getSalesChannelId());",
          "190:     }",
          "196:             ->add('option', new NotBlank(), new Choice(array_keys($this->getOptionSelection($context))));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:         $data['id'] = $id ?: Uuid::randomHex();",
          "224:         $data['languageId'] = $context->getContext()->getLanguageId();",
          "225:         $data['salesChannelId'] = $context->getSalesChannel()->getId();",
          "227:         $data['hash'] = Uuid::randomHex();",
          "229:         return $data;",
          "",
          "[Removed Lines]",
          "226:         $data['status'] = $this->getOptionSelection()[$data['option']];",
          "",
          "[Added Lines]",
          "235:         $data['status'] = $this->getOptionSelection($context)[$data['option']];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "252:     {",
          "253:         return [",
          "256:             self::OPTION_CONFIRM_SUBSCRIBE => self::STATUS_OPT_IN,",
          "257:             self::OPTION_UNSUBSCRIBE => self::STATUS_OPT_OUT,",
          "258:         ];",
          "",
          "[Removed Lines]",
          "251:     private function getOptionSelection(): array",
          "254:             self::OPTION_DIRECT => self::STATUS_DIRECT,",
          "255:             self::OPTION_SUBSCRIBE => self::STATUS_NOT_SET,",
          "",
          "[Added Lines]",
          "260:     private function getOptionSelection(SalesChannelContext $context): array",
          "263:             self::OPTION_DIRECT => $this->isNewsletterDoi($context) ? self::STATUS_NOT_SET : self::STATUS_DIRECT,",
          "264:             self::OPTION_SUBSCRIBE => $this->isNewsletterDoi($context) ? self::STATUS_NOT_SET : self::STATUS_DIRECT,",
          "",
          "---------------"
        ],
        "src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php||src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php": [
          "File: src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php -> src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
          "9: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelApiTestBehaviour;",
          "10: use Shopware\\Core\\Framework\\Test\\TestCaseHelper\\CallableClass;",
          "12: use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
          "",
          "[Removed Lines]",
          "11: use Shopware\\Core\\Framework\\Test\\TestDataCollection;",
          "",
          "[Added Lines]",
          "11: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     private KernelBrowser $browser;",
          "29:     protected function setUp(): void",
          "30:     {",
          "36:     }",
          "38:     public function testUnsubscribe(): void",
          "",
          "[Removed Lines]",
          "27:     private TestDataCollection $ids;",
          "31:         $this->ids = new TestDataCollection();",
          "33:         $this->browser = $this->createCustomSalesChannelBrowser([",
          "34:             'id' => $this->ids->create('sales-channel'),",
          "35:         ]);",
          "",
          "[Added Lines]",
          "30:         $this->browser = $this->createCustomSalesChannelBrowser();",
          "32:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
          "33:         static::assertNotNull($systemConfig);",
          "34:         $systemConfig->set('core.newsletter.doubleOptIn', false);",
          "",
          "---------------"
        ],
        "src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig||src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig": [
          "File: src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig -> src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:                                id=\"newsletterRegister\"",
          "39:                                name=\"option\"",
          "40:                                autocomplete=\"off\"",
          "42:                                {% if status %}checked=\"checked\"{% endif %}>",
          "43:                     {% endblock %}",
          "",
          "[Removed Lines]",
          "41:                                value=\"{% if newsletterAccountPagelet.newsletterDoi %}{{ subscribe }}{% else %}{{ direct }}{% endif %}\"",
          "",
          "[Added Lines]",
          "41:                                value=\"subscribe\"",
          "",
          "---------------"
        ],
        "src/Storefront/Test/Controller/NewsletterControllerTest.php||src/Storefront/Test/Controller/NewsletterControllerTest.php": [
          "File: src/Storefront/Test/Controller/NewsletterControllerTest.php -> src/Storefront/Test/Controller/NewsletterControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelLifecycleManager;",
          "12: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelFunctionalTestBehaviour;",
          "13: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "14: use Shopware\\Core\\Test\\TestDefaults;",
          "15: use Shopware\\Storefront\\Framework\\Routing\\StorefrontResponse;",
          "16: use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     public function testRegisterNewsletterForCustomerDoi(): void",
          "66:     {",
          "67:         $browser = $this->login();",
          "68:         $data = [",
          "69:             'option' => 'subscribe',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:         $systemConfigService = $this->getContainer()->get(SystemConfigService::class);",
          "69:         static::assertNotNull($systemConfigService);",
          "70:         $systemConfigService->set('core.newsletter.doubleOptInRegistered', true);",
          "",
          "---------------"
        ],
        "tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php": [
          "File: tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php -> tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterSubscribeUrlEvent;",
          "9: use Shopware\\Core\\Defaults;",
          "10: use Shopware\\Core\\Framework\\Context;",
          "11: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;",
          "12: use Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelApiTestBehaviour;",
          "13: use Shopware\\Core\\Framework\\Test\\TestCaseHelper\\CallableClass;",
          "15: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "16: use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;",
          "17: use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
          "",
          "[Removed Lines]",
          "14: use Shopware\\Core\\Framework\\Test\\TestDataCollection;",
          "",
          "[Added Lines]",
          "11: use Shopware\\Core\\Framework\\Test\\IdsCollection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     private KernelBrowser $browser;",
          "35:     private string $salesChannelId;",
          "37:     protected function setUp(): void",
          "38:     {",
          "41:         $this->salesChannelId = $this->ids->create('sales-channel');",
          "43:         $this->browser = $this->createCustomSalesChannelBrowser([",
          "44:             'id' => $this->ids->create('sales-channel'),",
          "45:         ]);",
          "46:     }",
          "48:     public function testSubscribeWithoutFields(): void",
          "",
          "[Removed Lines]",
          "33:     private TestDataCollection $ids;",
          "39:         $this->ids = new TestDataCollection();",
          "",
          "[Added Lines]",
          "34:     private IdsCollection $ids;",
          "38:     private SystemConfigService $systemConfig;",
          "42:         $this->ids = new IdsCollection();",
          "50:         $this->systemConfig = $this->getContainer()->get(SystemConfigService::class);",
          "51:         static::assertNotNull($this->systemConfig);",
          "52:         $this->systemConfig->set('core.newsletter.doubleOptIn', false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     public function testResubscribeAfterUnsubscribe(): void",
          "93:     {",
          "94:         $connection = $this->getContainer()->get(Connection::class);",
          "95:         $newsletterRecipientRepository = $this->getContainer()->get('newsletter_recipient.repository');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:         $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:     public function testSubscribeChangedConfirmUrl(): void",
          "208:     {",
          "211:         try {",
          "216:             $dispatcher = $this->getContainer()->get('event_dispatcher');",
          "",
          "[Removed Lines]",
          "209:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
          "212:             $systemConfig->set('core.newsletter.doubleOptIn', true);",
          "213:             $systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');",
          "",
          "[Added Lines]",
          "219:             $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
          "220:             $this->systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:             static::assertStringStartsWith('http://localhost/custom-newsletter/confirm/', $caughtEvent->getUrl());",
          "250:             static::assertStringEndsWith('?specialParam=false', $caughtEvent->getUrl());",
          "251:         } finally {",
          "254:         }",
          "255:     }",
          "257:     public function testSubscribeChangedConfirmDomain(): void",
          "258:     {",
          "261:         try {",
          "265:             $dispatcher = $this->getContainer()->get('event_dispatcher');",
          "",
          "[Removed Lines]",
          "252:             $systemConfig->set('core.newsletter.doubleOptIn', false);",
          "253:             $systemConfig->set('core.newsletter.subscribeUrl', null);",
          "259:         $systemConfig = $this->getContainer()->get(SystemConfigService::class);",
          "262:             $systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');",
          "",
          "[Added Lines]",
          "259:             $this->systemConfig->set('core.newsletter.subscribeUrl', null);",
          "266:             $this->systemConfig->set('core.newsletter.doubleOptIn', true);",
          "267:             $this->systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "288:             static::assertInstanceOf(NewsletterRegisterEvent::class, $caughtEvent);",
          "289:             static::assertStringStartsWith('http://test.test/newsletter-subscribe?em=', $caughtEvent->getUrl());",
          "290:         } finally {",
          "292:         }",
          "293:     }",
          "",
          "[Removed Lines]",
          "291:             $systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);",
          "",
          "[Added Lines]",
          "296:             $this->systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);",
          "",
          "---------------"
        ],
        "tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php||tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php": [
          "File: tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php -> tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use PHPUnit\\Framework\\TestCase;",
          "6: use Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientCollection;",
          "7: use Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientEntity;",
          "8: use Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute;",
          "9: use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepository;",
          "10: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterConfirmEvent;",
          "9: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterRegisterEvent;",
          "10: use Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterSubscribeUrlEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\IdSearchResult;",
          "13: use Shopware\\Core\\Framework\\RateLimiter\\RateLimiter;",
          "14: use Shopware\\Core\\Framework\\Uuid\\Uuid;",
          "15: use Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;",
          "16: use Shopware\\Core\\Framework\\Validation\\DataValidationDefinition;",
          "17: use Shopware\\Core\\Framework\\Validation\\DataValidator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: use Shopware\\Core\\Framework\\Validation\\BuildValidationEvent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:         $this->salesChannelContext = $this->createMock(SalesChannelContext::class);",
          "39:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     public function testSubscribeWithDOIEnabled(): void",
          "46:     {",
          "47:         $requestData = new RequestDataBag();",
          "48:         $requestData->add([",
          "49:             'email' => 'test@example.com',",
          "50:             'option' => 'direct',",
          "51:             'firstName' => 'Y',",
          "52:             'lastName' => 'Tran',",
          "53:         ]);",
          "55:         $newsletterRecipientEntity = new NewsletterRecipientEntity();",
          "56:         $newsletterRecipientEntity->setId(Uuid::randomHex());",
          "57:         $newsletterRecipientEntity->setConfirmedAt(new \\DateTime());",
          "59:         $idSearchResult = $this->createMock(IdSearchResult::class);",
          "60:         $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());",
          "62:         $entityRepository = $this->createMock(EntityRepository::class);",
          "63:         $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);",
          "64:         $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(",
          "65:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
          "66:         );",
          "68:         $systemConfig = $this->createMock(SystemConfigService::class);",
          "69:         $systemConfig",
          "70:             ->expects(static::exactly(2))",
          "71:             ->method('getBool')",
          "72:             ->with('core.newsletter.doubleOptIn')",
          "73:             ->willReturn(true);",
          "75:         $eventDispatcher = $this->createMock(EventDispatcherInterface::class);",
          "76:         $eventDispatcher",
          "77:             ->expects(static::once())",
          "78:             ->method('dispatch')",
          "79:             ->willReturnOnConsecutiveCalls(",
          "80:                 static::isInstanceOf(BuildValidationEvent::class),",
          "81:                 static::isInstanceOf(NewsletterSubscribeUrlEvent::class),",
          "82:                 static::isInstanceOf(NewsletterRegisterEvent::class),",
          "83:             );",
          "85:         $newsletterSubscribeRoute = new NewsletterSubscribeRoute(",
          "86:             $entityRepository,",
          "87:             $this->createMock(DataValidator::class),",
          "88:             $eventDispatcher,",
          "89:             $systemConfig,",
          "90:             $this->createMock(RateLimiter::class),",
          "91:             $this->createMock(RequestStack::class),",
          "92:         );",
          "94:         $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);",
          "95:     }",
          "97:     public function testSubscribeWithDOIDisabled(): void",
          "98:     {",
          "99:         $requestData = new RequestDataBag();",
          "100:         $requestData->add([",
          "101:             'email' => 'test@example.com',",
          "102:             'option' => 'subscribe',",
          "103:             'firstName' => 'Y',",
          "104:             'lastName' => 'Tran',",
          "105:         ]);",
          "107:         $newsletterRecipientEntity = new NewsletterRecipientEntity();",
          "108:         $newsletterRecipientEntity->setId(Uuid::randomHex());",
          "109:         $newsletterRecipientEntity->setConfirmedAt(new \\DateTime());",
          "111:         $idSearchResult = $this->createMock(IdSearchResult::class);",
          "112:         $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());",
          "114:         $entityRepository = $this->createMock(EntityRepository::class);",
          "115:         $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);",
          "116:         $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(",
          "117:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
          "118:         );",
          "120:         $systemConfig = $this->createMock(SystemConfigService::class);",
          "121:         $systemConfig",
          "122:             ->expects(static::exactly(2))",
          "123:             ->method('getBool')",
          "124:             ->with('core.newsletter.doubleOptIn')",
          "125:             ->willReturn(false);",
          "127:         $eventDispatcher = $this->createMock(EventDispatcherInterface::class);",
          "128:         $eventDispatcher",
          "129:             ->expects(static::once())",
          "130:             ->method('dispatch')",
          "131:             ->willReturnOnConsecutiveCalls(",
          "132:                 static::isInstanceOf(BuildValidationEvent::class),",
          "133:                 static::isInstanceOf(NewsletterSubscribeUrlEvent::class),",
          "134:                 static::isInstanceOf(NewsletterConfirmEvent::class),",
          "135:             );",
          "137:         $newsletterSubscribeRoute = new NewsletterSubscribeRoute(",
          "138:             $entityRepository,",
          "139:             $this->createMock(DataValidator::class),",
          "140:             $eventDispatcher,",
          "141:             $systemConfig,",
          "142:             $this->createMock(RateLimiter::class),",
          "143:             $this->createMock(RequestStack::class),",
          "144:         );",
          "146:         $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);",
          "147:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),",
          "142:         );",
          "146:         $request = $this->createMock(Request::class);",
          "147:         $request->method('getClientIp')->willReturn('127.0.0.1');",
          "",
          "[Removed Lines]",
          "144:         $raleLimiterMock = $this->createMock(RateLimiter::class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:             ->method('getMainRequest')",
          "153:             ->willReturn($request);",
          "156:             ->expects(static::once())",
          "157:             ->method('ensureAccepted')",
          "158:             ->willReturnCallback(function (string $route, string $key): void {",
          "",
          "[Removed Lines]",
          "155:         $raleLimiterMock",
          "",
          "[Added Lines]",
          "261:         $rateLimiterMock = $this->createMock(RateLimiter::class);",
          "262:         $rateLimiterMock",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:             $this->createMock(DataValidator::class),",
          "166:             $this->createMock(EventDispatcherInterface::class),",
          "167:             $this->createMock(SystemConfigService::class),",
          "169:             $requestStackMock,",
          "170:         );",
          "",
          "[Removed Lines]",
          "168:             $raleLimiterMock,",
          "",
          "[Added Lines]",
          "275:             $rateLimiterMock,",
          "",
          "---------------"
        ]
      }
    }
  ]
}