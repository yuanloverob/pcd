{
  "cve_id": "CVE-2022-2054",
  "cve_desc": "Code Injection in GitHub repository nuitka/nuitka prior to 0.9.\n\n",
  "repo": "nuitka/nuitka",
  "patch_hash": "09647745d7cbb6ff32f9fa948f19d5558b32bcad",
  "patch_info": {
    "commit_hash": "09647745d7cbb6ff32f9fa948f19d5558b32bcad",
    "repo": "nuitka/nuitka",
    "commit_url": "https://github.com/nuitka/nuitka/commit/09647745d7cbb6ff32f9fa948f19d5558b32bcad",
    "files": [
      "nuitka/__main__.py",
      "nuitka/build/SconsCaching.py",
      "nuitka/nodes/NodeBases.py",
      "nuitka/plugins/PluginBase.py"
    ],
    "message": "Cleanup, avoid using \"eval\" where \"ast.literal_eval\" can be used.",
    "before_after_code_files": [
      "nuitka/__main__.py||nuitka/__main__.py",
      "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py",
      "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py",
      "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py"
    ]
  },
  "patch_diff": {
    "nuitka/__main__.py||nuitka/__main__.py": [
      "File: nuitka/__main__.py -> nuitka/__main__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: # Note: This avoids imports at all costs, such that initial startup doesn't do more",
      "26: # than necessary, until re-execution has been decided.",
      "28: import os",
      "29: import sys",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import ast",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:     if \"NUITKA_PYTHONPATH\" in os.environ:",
      "43:         # Restore the PYTHONPATH gained from the site module, that we chose not",
      "46:         del os.environ[\"NUITKA_PYTHONPATH\"]",
      "47:     else:",
      "48:         # Remove path element added for being called via \"__main__.py\", this can",
      "",
      "[Removed Lines]",
      "44:         # to have imported. pylint: disable=eval-used",
      "45:         sys.path = eval(os.environ[\"NUITKA_PYTHONPATH\"])",
      "",
      "[Added Lines]",
      "45:         # to have imported during compilation.",
      "46:         sys.path = ast.literal_eval(os.environ[\"NUITKA_PYTHONPATH\"])",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102:     if \"NUITKA_NAMESPACES\" in os.environ:",
      "103:         # Restore the detected name space packages, that were force loaded in",
      "106:         from nuitka.importing.PreloadedPackages import setPreloadedPackagePaths",
      "109:         del os.environ[\"NUITKA_NAMESPACES\"]",
      "111:     if \"NUITKA_PTH_IMPORTED\" in os.environ:",
      "112:         # Restore the packages that the \".pth\" files asked to import.",
      "115:         from nuitka.importing.PreloadedPackages import setPthImportedPackages",
      "118:         del os.environ[\"NUITKA_PTH_IMPORTED\"]",
      "120:     # Now the real main program of Nuitka can take over.",
      "",
      "[Removed Lines]",
      "104:         # site.py, and will need a free pass later on. pylint: disable=eval-used",
      "108:         setPreloadedPackagePaths(eval(os.environ[\"NUITKA_NAMESPACES\"]))",
      "113:         # pylint: disable=eval-used",
      "117:         setPthImportedPackages(eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))",
      "",
      "[Added Lines]",
      "105:         # site.py, and will need a free pass later on",
      "108:         setPreloadedPackagePaths(ast.literal_eval(os.environ[\"NUITKA_NAMESPACES\"]))",
      "115:         setPthImportedPackages(ast.literal_eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))",
      "",
      "---------------"
    ],
    "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py": [
      "File: nuitka/build/SconsCaching.py -> nuitka/build/SconsCaching.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: \"\"\"",
      "22: import os",
      "23: import platform",
      "24: import re",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import ast",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "382:         if clcache_stats_filename is not None and os.path.exists(",
      "383:             clcache_stats_filename",
      "384:         ):",
      "389:             clcache_hit = stats[\"CacheHits\"]",
      "390:             clcache_miss = stats[\"CacheMisses\"]",
      "",
      "[Removed Lines]",
      "385:             stats = eval(  # lazy, pylint: disable=eval-used",
      "386:                 getFileContents(clcache_stats_filename)",
      "387:             )",
      "",
      "[Added Lines]",
      "386:             stats = ast.literal_eval(getFileContents(clcache_stats_filename))",
      "",
      "---------------"
    ],
    "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py": [
      "File: nuitka/nodes/NodeBases.py -> nuitka/nodes/NodeBases.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: # from abc import abstractmethod",
      "28: from abc import abstractmethod",
      "30: from nuitka import Options, Tracing, TreeXML, Variables",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import ast",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1175:     kind, node_class, args, source_ref = extractKindAndArgsFromXML(xml, source_ref)",
      "1177:     if \"constant\" in args:",
      "1182:     if kind in (",
      "1183:         \"ExpressionFunctionBody\",",
      "",
      "[Removed Lines]",
      "1178:         # TODO: Try and reduce/avoid this, use marshal and/or pickle from a file",
      "1179:         # global stream     instead. For now, this will do. pylint: disable=eval-used",
      "1180:         args[\"constant\"] = eval(args[\"constant\"])",
      "",
      "[Added Lines]",
      "1179:         args[\"constant\"] = ast.literal_eval(args[\"constant\"])",
      "",
      "---------------"
    ],
    "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py": [
      "File: nuitka/plugins/PluginBase.py -> nuitka/plugins/PluginBase.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: it being used.",
      "27: \"\"\"",
      "29: import inspect",
      "30: import os",
      "31: import sys",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import ast",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "846:         NamedTupleResult = namedtuple(info_name, keys)",
      "849:         self._runtime_information_cache[info_name] = NamedTupleResult(",
      "851:         )",
      "853:         return self._runtime_information_cache[info_name]",
      "",
      "[Removed Lines]",
      "848:         # We are being lazy here, the code is trusted, pylint: disable=eval-used",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1765ffce2a9ab859853210337390de242cd80712",
      "candidate_info": {
        "commit_hash": "1765ffce2a9ab859853210337390de242cd80712",
        "repo": "nuitka/nuitka",
        "commit_url": "https://github.com/nuitka/nuitka/commit/1765ffce2a9ab859853210337390de242cd80712",
        "files": [
          "nuitka/__main__.py",
          "nuitka/build/SconsCaching.py",
          "nuitka/nodes/NodeBases.py",
          "nuitka/plugins/PluginBase.py",
          "nuitka/utils/ReExecute.py"
        ],
        "message": "Cleanup, avoid using \"eval\" where \"ast.literal_eval\" can be used.",
        "before_after_code_files": [
          "nuitka/__main__.py||nuitka/__main__.py",
          "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py",
          "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py",
          "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py",
          "nuitka/utils/ReExecute.py||nuitka/utils/ReExecute.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "nuitka/__main__.py||nuitka/__main__.py",
            "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py",
            "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py",
            "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py"
          ],
          "candidate": [
            "nuitka/__main__.py||nuitka/__main__.py",
            "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py",
            "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py",
            "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py"
          ]
        }
      },
      "candidate_diff": {
        "nuitka/__main__.py||nuitka/__main__.py": [
          "File: nuitka/__main__.py -> nuitka/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     if \"NUITKA_PYTHONPATH\" in os.environ:",
          "43:         # Restore the PYTHONPATH gained from the site module, that we chose not",
          "46:         del os.environ[\"NUITKA_PYTHONPATH\"]",
          "47:     else:",
          "48:         # Remove path element added for being called via \"__main__.py\", this can",
          "",
          "[Removed Lines]",
          "44:         # to have imported. pylint: disable=eval-used",
          "45:         sys.path = eval(os.environ[\"NUITKA_PYTHONPATH\"])",
          "",
          "[Added Lines]",
          "44:         # to have imported during compilation. For loading ast module, we need",
          "45:         # one element, that is not necessarily in our current path.",
          "46:         sys.path = [os.environ[\"NUITKA_PYTHONPATH_AST\"]]",
          "47:         import ast",
          "49:         sys.path = ast.literal_eval(os.environ[\"NUITKA_PYTHONPATH\"])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     if \"NUITKA_NAMESPACES\" in os.environ:",
          "103:         # Restore the detected name space packages, that were force loaded in",
          "106:         from nuitka.importing.PreloadedPackages import setPreloadedPackagePaths",
          "109:         del os.environ[\"NUITKA_NAMESPACES\"]",
          "111:     if \"NUITKA_PTH_IMPORTED\" in os.environ:",
          "112:         # Restore the packages that the \".pth\" files asked to import.",
          "115:         from nuitka.importing.PreloadedPackages import setPthImportedPackages",
          "118:         del os.environ[\"NUITKA_PTH_IMPORTED\"]",
          "120:     # Now the real main program of Nuitka can take over.",
          "",
          "[Removed Lines]",
          "104:         # site.py, and will need a free pass later on. pylint: disable=eval-used",
          "108:         setPreloadedPackagePaths(eval(os.environ[\"NUITKA_NAMESPACES\"]))",
          "113:         # pylint: disable=eval-used",
          "117:         setPthImportedPackages(eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))",
          "",
          "[Added Lines]",
          "108:         # site.py, and will need a free pass later on",
          "111:         setPreloadedPackagePaths(ast.literal_eval(os.environ[\"NUITKA_NAMESPACES\"]))",
          "118:         setPthImportedPackages(ast.literal_eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))",
          "",
          "---------------"
        ],
        "nuitka/build/SconsCaching.py||nuitka/build/SconsCaching.py": [
          "File: nuitka/build/SconsCaching.py -> nuitka/build/SconsCaching.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: \"\"\"",
          "22: import os",
          "23: import platform",
          "24: import re",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import ast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:         if clcache_stats_filename is not None and os.path.exists(",
          "383:             clcache_stats_filename",
          "384:         ):",
          "389:             clcache_hit = stats[\"CacheHits\"]",
          "390:             clcache_miss = stats[\"CacheMisses\"]",
          "",
          "[Removed Lines]",
          "385:             stats = eval(  # lazy, pylint: disable=eval-used",
          "386:                 getFileContents(clcache_stats_filename)",
          "387:             )",
          "",
          "[Added Lines]",
          "386:             stats = ast.literal_eval(getFileContents(clcache_stats_filename))",
          "",
          "---------------"
        ],
        "nuitka/nodes/NodeBases.py||nuitka/nodes/NodeBases.py": [
          "File: nuitka/nodes/NodeBases.py -> nuitka/nodes/NodeBases.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # from abc import abstractmethod",
          "28: from abc import abstractmethod",
          "30: from nuitka import Options, Tracing, TreeXML, Variables",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import ast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1175:     kind, node_class, args, source_ref = extractKindAndArgsFromXML(xml, source_ref)",
          "1177:     if \"constant\" in args:",
          "1182:     if kind in (",
          "1183:         \"ExpressionFunctionBody\",",
          "",
          "[Removed Lines]",
          "1178:         # TODO: Try and reduce/avoid this, use marshal and/or pickle from a file",
          "1179:         # global stream     instead. For now, this will do. pylint: disable=eval-used",
          "1180:         args[\"constant\"] = eval(args[\"constant\"])",
          "",
          "[Added Lines]",
          "1179:         args[\"constant\"] = ast.literal_eval(args[\"constant\"])",
          "",
          "---------------"
        ],
        "nuitka/plugins/PluginBase.py||nuitka/plugins/PluginBase.py": [
          "File: nuitka/plugins/PluginBase.py -> nuitka/plugins/PluginBase.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: it being used.",
          "27: \"\"\"",
          "29: import inspect",
          "30: import os",
          "31: import sys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import ast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "846:         NamedTupleResult = namedtuple(info_name, keys)",
          "849:         self._runtime_information_cache[info_name] = NamedTupleResult(",
          "851:         )",
          "853:         return self._runtime_information_cache[info_name]",
          "",
          "[Removed Lines]",
          "848:         # We are being lazy here, the code is trusted, pylint: disable=eval-used",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "nuitka/utils/ReExecute.py||nuitka/utils/ReExecute.py": [
          "File: nuitka/utils/ReExecute.py -> nuitka/utils/ReExecute.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     os.environ[\"NUITKA_PYTHONPATH\"] = repr(sys.path)",
          "96:     from nuitka.importing.PreloadedPackages import (",
          "97:         detectPreLoadedPackagePaths,",
          "98:         detectPthImportedPackages,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     # In some environments, initial \"sys.path\" does not contain enough to load \"ast\" module.",
          "97:     import ast",
          "99:     os.environ[\"NUITKA_PYTHONPATH_AST\"] = os.path.dirname(ast.__file__)",
          "",
          "---------------"
        ]
      }
    }
  ]
}