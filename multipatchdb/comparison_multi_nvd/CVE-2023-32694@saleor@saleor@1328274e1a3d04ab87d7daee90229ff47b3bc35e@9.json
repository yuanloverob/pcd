{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ca37dbde7f3f7d8a31f343d67a955463a91aa58",
      "candidate_info": {
        "commit_hash": "7ca37dbde7f3f7d8a31f343d67a955463a91aa58",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/7ca37dbde7f3f7d8a31f343d67a955463a91aa58",
        "files": [
          "saleor/checkout/complete_checkout.py",
          "saleor/checkout/utils.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/cassettes/test_handle_authorization_for_checkout_wrong_total.yaml",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Extract checkout logic from mutation. Fix tests",
        "before_after_code_files": [
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/checkout/utils.py||saleor/checkout/utils.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import List, Optional, Tuple",
          "3: from django.core.exceptions import ValidationError",
          "4: from django.db import transaction",
          "6: from ..account.error_codes import AccountErrorCode",
          "7: from ..account.models import User",
          "8: from ..core.exceptions import InsufficientStock",
          "9: from ..core.taxes import TaxError",
          "10: from ..core.utils.url import validate_storefront_url",
          "11: from ..discount import DiscountInfo",
          "12: from ..discount.models import NotApplicable",
          "13: from ..graphql.checkout.utils import (  # TODO move from graphql",
          "14:     clean_checkout_payment,",
          "15:     clean_checkout_shipping,",
          "16: )",
          "17: from ..order import models as order_models",
          "18: from ..order.models import Order",
          "19: from ..payment import PaymentError, gateway",
          "20: from ..payment.models import Payment, Transaction",
          "21: from ..payment.utils import store_customer_id",
          "22: from . import models",
          "23: from .calculations import calculate_checkout_total_with_gift_cards",
          "24: from .error_codes import CheckoutErrorCode",
          "25: from .utils import abort_order_data, create_order, get_order, prepare_order_data",
          "28: @transaction.atomic",
          "29: def prepare_checkout(checkout: models.Checkout, discounts, tracking_code, redirect_url):",
          "30:     lines = list(checkout)",
          "32:     clean_checkout_shipping(checkout, lines, discounts, CheckoutErrorCode)",
          "33:     clean_checkout_payment(checkout, lines, discounts, CheckoutErrorCode)",
          "35:     payment = checkout.get_last_active_payment()",
          "37:     validate_payment_amount(discounts, payment, checkout)",
          "39:     if redirect_url:",
          "40:         try:",
          "41:             validate_storefront_url(redirect_url)",
          "42:         except ValidationError as error:",
          "43:             raise ValidationError(",
          "44:                 {\"redirect_url\": error}, code=AccountErrorCode.INVALID.value",
          "45:             )",
          "47:     to_update = []",
          "48:     if redirect_url and redirect_url != checkout.redirect_url:",
          "49:         checkout.redirect_url = redirect_url",
          "50:         to_update.append(\"redirect_url\")",
          "52:     if tracking_code and tracking_code != checkout.tracking_code:",
          "53:         checkout.tracking_code = tracking_code",
          "54:         to_update.append(\"tracking_code\")",
          "56:     if to_update:",
          "57:         checkout.save(update_fields=to_update)",
          "60: @transaction.atomic",
          "61: def convert_checkout_to_order(",
          "62:     checkout: models.Checkout, order_data: dict, user: Optional[User]",
          "63: ) -> order_models.Order:",
          "64:     order = create_order(",
          "65:         checkout=checkout, order_data=order_data, user=user,  # type: ignore",
          "66:     )",
          "67:     # remove checkout after order is successfully created",
          "68:     checkout.delete()",
          "69:     return order",
          "72: def validate_payment_amount(discounts, payment, checkout):",
          "73:     if (",
          "74:         payment.total",
          "75:         != calculate_checkout_total_with_gift_cards(checkout, discounts).gross.amount",
          "76:     ):",
          "77:         gateway.payment_refund_or_void(payment)",
          "78:         raise ValidationError(",
          "79:             \"Payment does not cover all checkout value.\",",
          "80:             code=CheckoutErrorCode.CHECKOUT_NOT_FULLY_PAID.value,",
          "81:         )",
          "84: def get_order_data(checkout: models.Checkout, discounts: List[DiscountInfo]) -> dict:",
          "85:     try:",
          "86:         with transaction.atomic():",
          "87:             order_data = prepare_order_data(",
          "88:                 checkout=checkout, lines=list(checkout), discounts=discounts,",
          "89:             )",
          "90:     except InsufficientStock as e:",
          "91:         raise ValidationError(f\"Insufficient product stock: {e.item}\", code=e.code)",
          "92:     except NotApplicable:",
          "93:         raise ValidationError(",
          "94:             \"Voucher not applicable\",",
          "95:             code=CheckoutErrorCode.VOUCHER_NOT_APPLICABLE.value,",
          "96:         )",
          "97:     except TaxError as tax_error:",
          "98:         raise ValidationError(",
          "99:             \"Unable to calculate taxes - %s\" % str(tax_error),",
          "100:             code=CheckoutErrorCode.TAX_ERROR.value,",
          "101:         )",
          "102:     return order_data",
          "105: def process_payment(",
          "106:     payment: Payment,",
          "107:     store_source: bool,",
          "108:     payment_data: Optional[dict],",
          "109:     order_data: dict,",
          "110: ) -> Transaction:",
          "111:     try:",
          "112:         if payment.to_confirm:",
          "113:             txn = gateway.confirm(payment, additional_data=payment_data)",
          "114:         else:",
          "115:             txn = gateway.process_payment(",
          "116:                 payment=payment,",
          "117:                 token=payment.token,",
          "118:                 store_source=store_source,",
          "119:                 additional_data=payment_data,",
          "120:             )",
          "121:         payment.refresh_from_db()",
          "122:         if not txn.is_success:",
          "123:             raise PaymentError(txn.error)",
          "124:     except PaymentError as e:",
          "125:         abort_order_data(order_data)",
          "126:         raise ValidationError(str(e), code=CheckoutErrorCode.PAYMENT_ERROR.value)",
          "127:     return txn",
          "130: def complete_checkout(",
          "131:     checkout: models.Checkout,",
          "132:     payment_data,",
          "133:     store_source,",
          "134:     discounts,",
          "135:     user,",
          "136:     tracking_code=None,",
          "137:     redirect_url=None,",
          "138: ) -> Tuple[Optional[Order], bool, dict]:",
          "139:     action_required = False",
          "140:     action_data = {}  # type: ignore",
          "141:     order = get_order(checkout.token)",
          "142:     if order:",
          "143:         return order, action_required, action_data",
          "144:     prepare_checkout(",
          "145:         checkout=checkout,",
          "146:         discounts=discounts,",
          "147:         tracking_code=tracking_code,",
          "148:         redirect_url=redirect_url,",
          "149:     )",
          "151:     payment = checkout.get_last_active_payment()",
          "152:     try:",
          "153:         order_data = get_order_data(checkout, discounts)",
          "154:     except ValidationError as error:",
          "155:         gateway.payment_refund_or_void(payment)",
          "156:         raise error",
          "158:     txn = process_payment(",
          "159:         payment=payment,  # type: ignore",
          "160:         store_source=store_source,",
          "161:         payment_data=payment_data,",
          "162:         order_data=order_data,",
          "163:     )",
          "165:     if txn.customer_id and user.is_authenticated:",
          "166:         store_customer_id(user, payment.gateway, txn.customer_id)  # type: ignore",
          "168:     action_required = txn.action_required",
          "169:     action_data = txn.action_required_data if action_data else {}",
          "171:     if not action_required:",
          "172:         try:",
          "173:             with transaction.atomic():",
          "174:                 order = get_order(checkout.token)",
          "175:                 if order:",
          "176:                     # Order was created asynchronously, we can release the lock made",
          "177:                     # on order_data",
          "178:                     abort_order_data(order_data)",
          "179:                 else:",
          "180:                     order = convert_checkout_to_order(",
          "181:                         checkout=checkout, order_data=order_data, user=user",
          "182:                     )",
          "183:         except InsufficientStock as e:",
          "184:             abort_order_data(order_data)",
          "185:             gateway.payment_refund_or_void(payment)",
          "186:             raise ValidationError(f\"Insufficient product stock: {e.item}\", code=e.code)",
          "188:     if not order:",
          "189:         abort_order_data(order_data)",
          "191:     return order, action_required, action_data",
          "",
          "---------------"
        ],
        "saleor/checkout/utils.py||saleor/checkout/utils.py": [
          "File: saleor/checkout/utils.py -> saleor/checkout/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "699: def get_order(checkout_token: UUID) -> Optional[Order]:",
          "700:     \"\"\"Get order based on checkout token.\"\"\"",
          "707: @transaction.atomic",
          "",
          "[Removed Lines]",
          "701:     order = Order.objects.confirmed().filter(checkout_token=checkout_token).first()",
          "702:     if order is not None:",
          "703:         return order",
          "704:     return None",
          "",
          "[Added Lines]",
          "701:     return Order.objects.confirmed().filter(checkout_token=checkout_token).first()",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphene",
          "4: from django.conf import settings",
          "6: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "7: from django.db import transaction",
          "8: from django.db.models import Prefetch",
          "12: from ...checkout import models",
          "14: from ...checkout.error_codes import CheckoutErrorCode",
          "15: from ...checkout.utils import (",
          "17:     add_promo_code_to_checkout,",
          "18:     add_variant_to_checkout,",
          "19:     change_billing_address_in_checkout,",
          "20:     change_shipping_address_in_checkout,",
          "22:     get_order,",
          "23:     get_user_checkout,",
          "24:     get_valid_shipping_methods_for_checkout,",
          "26:     recalculate_checkout_discount,",
          "27:     remove_promo_code_from_checkout,",
          "28: )",
          "29: from ...core import analytics",
          "30: from ...core.exceptions import InsufficientStock, PermissionDenied, ProductNotPublished",
          "31: from ...core.permissions import OrderPermissions",
          "39: from ...product import models as product_models",
          "40: from ...warehouse.availability import check_stock_quantity, get_available_quantity",
          "41: from ..account.i18n import I18nMixin",
          "",
          "[Removed Lines]",
          "1: from typing import List, Optional, Tuple, Union",
          "5: from django.contrib.auth.models import AnonymousUser",
          "10: from ...account.error_codes import AccountErrorCode",
          "11: from ...account.models import User",
          "13: from ...checkout.calculations import calculate_checkout_total_with_gift_cards",
          "16:     abort_order_data,",
          "21:     create_order,",
          "25:     prepare_order_data,",
          "32: from ...core.taxes import TaxError",
          "33: from ...core.utils.url import validate_storefront_url",
          "34: from ...discount import DiscountInfo, models as voucher_model",
          "35: from ...graphql.checkout.utils import clean_checkout_payment, clean_checkout_shipping",
          "36: from ...order import models as order_models",
          "37: from ...payment import PaymentError, gateway, models as payment_models",
          "38: from ...payment.utils import store_customer_id",
          "",
          "[Added Lines]",
          "1: from typing import List, Optional, Tuple",
          "10: from ...checkout.complete_checkout import complete_checkout",
          "26: from ...payment import models as payment_models",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:         error_type_class = CheckoutError",
          "778:         error_type_field = \"checkout_errors\"",
          "954:     @classmethod",
          "955:     def perform_mutation(cls, _root, info, checkout_id, store_source, **data):",
          "956:         checkout_token = from_global_id_strict_type(",
          "",
          "[Removed Lines]",
          "780:     @classmethod",
          "781:     def validate_payment_amount(cls, discounts, payment, checkout):",
          "782:         if (",
          "783:             payment.total",
          "784:             != calculate_checkout_total_with_gift_cards(",
          "785:                 checkout, discounts",
          "786:             ).gross.amount",
          "787:         ):",
          "788:             gateway.payment_refund_or_void(payment)",
          "789:             raise ValidationError(",
          "790:                 \"Payment does not cover all checkout value.\",",
          "791:                 code=CheckoutErrorCode.CHECKOUT_NOT_FULLY_PAID.value,",
          "792:             )",
          "794:     @classmethod",
          "795:     @transaction.atomic",
          "796:     def _prepare_checkout(cls, checkout: models.Checkout, context, redirect_url):",
          "797:         lines = list(checkout)",
          "799:         discounts = context.discounts",
          "800:         clean_checkout_shipping(checkout, lines, discounts, CheckoutErrorCode)",
          "801:         clean_checkout_payment(checkout, lines, discounts, CheckoutErrorCode)",
          "803:         payment = checkout.get_last_active_payment()",
          "805:         cls.validate_payment_amount(discounts, payment, checkout)",
          "807:         if redirect_url:",
          "808:             try:",
          "809:                 validate_storefront_url(redirect_url)",
          "810:             except ValidationError as error:",
          "811:                 raise ValidationError(",
          "812:                     {\"redirect_url\": error}, code=AccountErrorCode.INVALID.value",
          "813:                 )",
          "815:         to_update = []",
          "816:         if redirect_url and redirect_url != checkout.redirect_url:",
          "817:             checkout.redirect_url = redirect_url",
          "818:             to_update.append(\"redirect_url\")",
          "820:         tracking_code = analytics.get_client_id(context)",
          "821:         if tracking_code and tracking_code != checkout.tracking_code:",
          "822:             checkout.tracking_code = tracking_code",
          "823:             to_update.append(\"tracking_code\")",
          "825:         if to_update:",
          "826:             checkout.save()",
          "828:     @classmethod",
          "829:     @transaction.atomic",
          "830:     def _convert_checkout_to_order(",
          "831:         cls,",
          "832:         checkout: models.Checkout,",
          "833:         order_data: dict,",
          "834:         user: Union[User, AnonymousUser],",
          "835:     ) -> order_models.Order:",
          "836:         order = create_order(",
          "837:             checkout=checkout, order_data=order_data, user=user  # type: ignore",
          "838:         )",
          "839:         # remove checkout after order is successfully created",
          "840:         checkout.delete()",
          "841:         return order",
          "843:     @classmethod",
          "844:     def _get_order_data(",
          "845:         cls, checkout: models.Checkout, discounts: List[DiscountInfo]",
          "846:     ) -> dict:",
          "847:         try:",
          "848:             with transaction.atomic():",
          "849:                 order_data = prepare_order_data(",
          "850:                     checkout=checkout, lines=list(checkout), discounts=discounts,",
          "851:                 )",
          "852:         except InsufficientStock as e:",
          "853:             raise ValidationError(f\"Insufficient product stock: {e.item}\", code=e.code)",
          "854:         except voucher_model.NotApplicable:",
          "855:             raise ValidationError(",
          "856:                 \"Voucher not applicable\",",
          "857:                 code=CheckoutErrorCode.VOUCHER_NOT_APPLICABLE.value,",
          "858:             )",
          "859:         except TaxError as tax_error:",
          "860:             raise ValidationError(",
          "861:                 \"Unable to calculate taxes - %s\" % str(tax_error),",
          "862:                 code=CheckoutErrorCode.TAX_ERROR.value,",
          "863:             )",
          "864:         return order_data",
          "866:     @classmethod",
          "867:     def _process_payment(",
          "868:         cls,",
          "869:         payment: payment_models.Payment,",
          "870:         store_source: bool,",
          "871:         payment_data: Optional[dict],",
          "872:         order_data: dict,",
          "873:     ) -> payment_models.Transaction:",
          "874:         payment_confirmation = payment.to_confirm",
          "875:         try:",
          "876:             if payment_confirmation:",
          "877:                 txn = gateway.confirm(payment, additional_data=payment_data)",
          "878:             else:",
          "879:                 txn = gateway.process_payment(",
          "880:                     payment=payment,",
          "881:                     token=payment.token,",
          "882:                     store_source=store_source,",
          "883:                     additional_data=payment_data,",
          "884:                 )",
          "885:             if not txn.is_success:",
          "886:                 raise PaymentError(txn.error)",
          "887:         except PaymentError as e:",
          "888:             abort_order_data(order_data)",
          "889:             raise ValidationError(str(e), code=CheckoutErrorCode.PAYMENT_ERROR.value)",
          "890:         return txn",
          "892:     @classmethod",
          "893:     def complete_checkout(cls, checkout: models.Checkout, context, data, store_source):",
          "894:         order = get_order(checkout.token)",
          "895:         if order:",
          "896:             return CheckoutComplete(",
          "897:                 order=order, confirmation_needed=False, confirmation_data={},",
          "898:             )",
          "899:         cls._prepare_checkout(",
          "900:             checkout=checkout,",
          "901:             context=context,",
          "902:             redirect_url=data.get(\"redirect_url\", \"\"),",
          "903:         )",
          "905:         payment = checkout.get_last_active_payment()  # type: ignore",
          "907:         try:",
          "908:             order_data = cls._get_order_data(checkout, context.discounts)",
          "909:         except ValidationError as error:",
          "910:             gateway.payment_refund_or_void(payment)",
          "911:             raise error",
          "913:         txn = cls._process_payment(",
          "914:             payment=payment,  # type: ignore",
          "915:             store_source=store_source,",
          "916:             payment_data=data.get(\"payment_data\"),",
          "917:             order_data=order_data,",
          "918:         )",
          "920:         user = context.user",
          "921:         if txn.customer_id and user.is_authenticated:",
          "922:             store_customer_id(user, payment.gateway, txn.customer_id)  # type: ignore",
          "924:         if not txn.action_required:",
          "925:             try:",
          "926:                 with transaction.atomic():",
          "927:                     order = get_order(checkout.token)",
          "928:                     if order:",
          "929:                         # Order was created asynchronously, we can release the lock made",
          "930:                         # on order_data",
          "931:                         abort_order_data(order_data)",
          "932:                     else:",
          "933:                         order = cls._convert_checkout_to_order(",
          "934:                             checkout=checkout, order_data=order_data, user=user",
          "935:                         )",
          "936:             except InsufficientStock as e:",
          "937:                 abort_order_data(order_data)",
          "938:                 gateway.payment_refund_or_void(payment)",
          "939:                 raise ValidationError(",
          "940:                     f\"Insufficient product stock: {e.item}\", code=e.code",
          "941:                 )",
          "943:         if not order:",
          "944:             abort_order_data(order_data)",
          "946:         # If gateway returns information that additional steps are required we need",
          "947:         # to inform the frontend and pass all required data",
          "948:         return CheckoutComplete(",
          "949:             order=order,",
          "950:             confirmation_needed=txn.action_required,",
          "951:             confirmation_data=txn.action_required_data if txn.action_required else {},",
          "952:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "983:                 )",
          "984:                 .select_related(\"shipping_method\", \"shipping_method__shipping_zone\"),",
          "985:             )",
          "989: class CheckoutAddPromoCode(BaseMutation):",
          "",
          "[Removed Lines]",
          "986:         return cls.complete_checkout(checkout, info.context, data, store_source)",
          "",
          "[Added Lines]",
          "800:         tracking_code = analytics.get_client_id(info.context)",
          "801:         order, action_required, action_data = complete_checkout(",
          "802:             checkout=checkout,",
          "803:             payment_data=data.get(\"payment_data\", {}),",
          "804:             store_source=store_source,",
          "805:             discounts=info.context.discounts,",
          "806:             user=info.context.user,",
          "807:             tracking_code=tracking_code,",
          "808:             redirect_url=data.get(\"redirect_url\"),",
          "809:         )",
          "810:         # If gateway returns information that additional steps are required we need",
          "811:         # to inform the frontend and pass all required data",
          "812:         return CheckoutComplete(",
          "813:             order=order,",
          "814:             confirmation_needed=action_required,",
          "815:             confirmation_data=action_data,",
          "816:         )",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_complete.py -> saleor/graphql/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     assert Checkout.objects.count() == 0",
          "777: def test_create_order_raises_insufficient_stock(",
          "779: ):",
          "780:     mocked_create_order.side_effect = InsufficientStock(\"InsufficientStock\")",
          "781:     checkout = checkout_ready_to_complete",
          "783:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "784:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "",
          "[Removed Lines]",
          "776: @patch(\"saleor.graphql.checkout.mutations.create_order\")",
          "778:     mocked_create_order, user_api_client, checkout_ready_to_complete,",
          "",
          "[Added Lines]",
          "776: @patch(\"saleor.checkout.complete_checkout.create_order\")",
          "778:     mocked_create_order, user_api_client, checkout_ready_to_complete, payment_dummy",
          "782:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "783:     payment = payment_dummy",
          "784:     payment.is_active = True",
          "785:     payment.order = None",
          "786:     payment.total = total.gross.amount",
          "787:     payment.currency = total.gross.currency",
          "788:     payment.checkout = checkout",
          "789:     payment.save()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     content = get_graphql_content(response)",
          "788:     data = content[\"data\"][\"checkoutComplete\"]",
          "790:     assert mocked_create_order.called",
          "",
          "[Removed Lines]",
          "789:     assert not data[\"checkoutErrors\"]",
          "",
          "[Added Lines]",
          "797:     assert (",
          "798:         data[\"checkoutErrors\"][0][\"code\"] == CheckoutErrorCode.INSUFFICIENT_STOCK.name",
          "799:     )",
          "802:     payment.refresh_from_db()",
          "803:     assert payment.charge_status == ChargeStatus.FULLY_REFUNDED",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "455:     def capture_payment(",
          "456:         self, payment_information: \"PaymentData\", previous_value",
          "457:     ) -> \"GatewayResponse\":",
          "468:             raise PaymentError(\"Cannot find a payment reference to capture.\")",
          "470:         result = call_capture(",
          "471:             payment_information=payment_information,",
          "472:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "474:             adyen_client=self.adyen,",
          "475:         )",
          "",
          "[Removed Lines]",
          "458:         transaction = (",
          "459:             Transaction.objects.filter(",
          "460:                 payment__id=payment_information.payment_id,",
          "461:                 kind=TransactionKind.AUTH,",
          "462:                 is_success=True,",
          "463:             )",
          "464:             .exclude(token__isnull=True, token__exact=\"\")",
          "465:             .last()",
          "466:         )",
          "467:         if not transaction:",
          "473:             token=transaction.token,",
          "",
          "[Added Lines]",
          "459:         if not payment_information.token:",
          "465:             token=payment_information.token,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "5: from .....plugins.manager import get_plugins_manager",
          "6: from ....utils import create_payment",
          "7: from ..plugin import AdyenGatewayPlugin",
          "",
          "[Removed Lines]",
          "1: from decimal import Decimal",
          "",
          "[Added Lines]",
          "3: from .....checkout import calculations",
          "5: from .... import TransactionKind",
          "6: from ....models import Transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: @pytest.fixture",
          "55:     checkout_with_items.billing_address = address",
          "56:     checkout_with_items.save()",
          "57:     payment = create_payment(",
          "58:         gateway=AdyenGatewayPlugin.PLUGIN_ID,",
          "59:         payment_token=\"\",",
          "61:         currency=checkout_with_items.currency,",
          "62:         email=checkout_with_items.email,",
          "63:         customer_ip_address=\"\",",
          "",
          "[Removed Lines]",
          "54: def payment_adyen_for_checkout(checkout_with_items, address):",
          "60:         total=Decimal(\"12.34\"),",
          "",
          "[Added Lines]",
          "55: def payment_adyen_for_checkout(checkout_with_items, address, shipping_method):",
          "57:     checkout_with_items.shipping_address = address",
          "58:     checkout_with_items.shipping_method = shipping_method",
          "60:     total = calculations.calculate_checkout_total_with_gift_cards(",
          "61:         checkout=checkout_with_items",
          "62:     )",
          "66:         total=total.gross.amount,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     payment_adyen_for_checkout.checkout = None",
          "73:     payment_adyen_for_checkout.order = order_with_lines",
          "74:     payment_adyen_for_checkout.save()",
          "75:     return payment_adyen_for_checkout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     Transaction.objects.create(",
          "83:         payment=payment_adyen_for_checkout,",
          "84:         action_required=False,",
          "85:         kind=TransactionKind.AUTH,",
          "86:         token=\"token\",",
          "87:         is_success=True,",
          "88:         amount=order_with_lines.total_gross_amount,",
          "89:         currency=order_with_lines.currency,",
          "90:         error=\"\",",
          "91:         gateway_response={},",
          "92:         action_required_data={},",
          "93:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     assert response.is_success is True",
          "45:     assert response.action_required is False",
          "46:     assert response.kind == TransactionKind.AUTH",
          "48:     assert response.currency == checkout_with_items.currency",
          "49:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "50:     assert response.error is None",
          "",
          "[Removed Lines]",
          "47:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "47:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:     assert response.is_success is True",
          "66:     assert response.action_required is False",
          "67:     assert response.kind == TransactionKind.CAPTURE",
          "69:     assert response.currency == checkout_with_items.currency",
          "70:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "71:     assert response.error is None",
          "",
          "[Removed Lines]",
          "68:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "68:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:     assert response.is_success is True",
          "85:     assert response.action_required is False",
          "86:     assert response.kind == TransactionKind.CAPTURE",
          "88:     assert response.currency == checkout_with_items.currency",
          "89:     assert response.transaction_id == \"853596624248395G\"  # ID returned by Adyen",
          "90:     assert response.error is None",
          "",
          "[Removed Lines]",
          "87:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "87:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:     assert response.is_success is True",
          "124:     assert response.action_required is True",
          "125:     assert response.kind == TransactionKind.AUTH",
          "127:     assert response.currency == checkout_with_items.currency",
          "128:     assert response.transaction_id == \"882595494831959A\"",
          "129:     assert response.error is None",
          "",
          "[Removed Lines]",
          "126:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "126:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "272:     assert response.kind == TransactionKind.AUTH",
          "273:     assert response.amount == action_transaction.amount",
          "274:     assert response.currency == action_transaction.currency",
          "278: def test_confirm_payment_with_adyen_auto_capture(payment_adyen_for_order, adyen_plugin):",
          "",
          "[Removed Lines]",
          "275:     assert payment_adyen_for_order.transactions.count() == 2",
          "",
          "[Added Lines]",
          "275:     print(payment_adyen_for_order.transactions.all())",
          "276:     assert payment_adyen_for_order.transactions.count() == 3",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "340:     assert response.is_success is True",
          "341:     assert response.action_required is False",
          "342:     assert response.kind == TransactionKind.REFUND_ONGOING",
          "344:     assert response.currency == order_with_lines.currency",
          "345:     assert response.transaction_id == \"882595499620961A\"  # ID returned by Adyen",
          "",
          "[Removed Lines]",
          "343:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "344:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "370:     assert response.is_success is True",
          "371:     assert response.action_required is False",
          "372:     assert response.kind == TransactionKind.VOID",
          "374:     assert response.currency == order_with_lines.currency",
          "375:     assert response.transaction_id == \"853597151490739D\"  # ID returned by Adyen",
          "",
          "[Removed Lines]",
          "373:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "374:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "379: def test_capture_payment(payment_adyen_for_order, order_with_lines, adyen_plugin):",
          "380:     payment_info = create_payment_information(",
          "381:         payment_adyen_for_order,",
          "382:         additional_data={\"paymentMethod\": {\"paymentdata\": \"\", \"type\": \"test\"}},",
          "383:     )",
          "384:     gateway_response = GatewayResponse(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:         payment_token=\"882595494831959A\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "402:     assert response.is_success is True",
          "403:     assert response.action_required is False",
          "404:     assert response.kind == TransactionKind.CAPTURE",
          "406:     assert response.currency == order_with_lines.currency",
          "407:     assert response.transaction_id == \"852595499936560C\"  # ID returned by Adyen",
          "408:     assert response.payment_method_info == PaymentMethodInfo(brand=\"visa\", type=\"test\")",
          "",
          "[Removed Lines]",
          "405:     assert response.amount == Decimal(\"1234\")",
          "",
          "[Added Lines]",
          "407:     assert response.amount == Decimal(\"80.00\")",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import graphene",
          "5: import pytest",
          "7: from ......order import OrderStatus",
          "8: from ..... import ChargeStatus, TransactionKind",
          "9: from ...utils import to_adyen_price",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from ......checkout import calculations",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: def test_handle_authorization_for_checkout(",
          "45: ):",
          "46:     payment = payment_adyen_for_checkout",
          "47:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "48:     notification = notification(",
          "49:         merchant_reference=payment_id,",
          "",
          "[Removed Lines]",
          "44:     notification, adyen_plugin, payment_adyen_for_checkout",
          "",
          "[Added Lines]",
          "45:     notification, adyen_plugin, payment_adyen_for_checkout, address, shipping_method,",
          "47:     checkout = payment_adyen_for_checkout.checkout",
          "48:     checkout.shipping_address = address",
          "49:     checkout.shipping_method = shipping_method",
          "50:     checkout.billing_address = address",
          "51:     checkout.save()",
          "52:     checkout_token = str(checkout.token)",
          "55:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "56:     payment.is_active = True",
          "57:     payment.order = None",
          "58:     payment.total = total.gross.amount",
          "59:     payment.currency = total.gross.currency",
          "60:     payment.to_confirm = True",
          "61:     payment.save()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     handle_authorization(notification, config)",
          "55:     payment.refresh_from_db()",
          "58:     assert transaction.is_success is True",
          "59:     assert transaction.kind == TransactionKind.AUTH",
          "60:     assert payment.checkout is None",
          "61:     assert payment.order",
          "67: ):",
          "90:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "91:     notification = notification(",
          "92:         merchant_reference=payment_id,",
          "93:         value=to_adyen_price(payment.total, payment.currency),",
          "94:     )",
          "103: @pytest.mark.vcr",
          "104: def test_handle_authorization_with_auto_capture(",
          "106: ):",
          "108:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "109:     notification = notification(",
          "110:         psp_reference=\"853596537720508F\",",
          "111:         merchant_reference=payment_id,",
          "112:         value=to_adyen_price(payment.total, payment.currency),",
          "113:     )",
          "118:     handle_authorization(notification, config)",
          "120:     payment.refresh_from_db()",
          "121:     assert payment.transactions.count() == 2",
          "124:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "",
          "[Removed Lines]",
          "56:     assert payment.transactions.count() == 1",
          "57:     transaction = payment.transactions.get()",
          "64: @pytest.mark.vcr",
          "65: def test_handle_authorization_for_checkout_wrong_total(",
          "66:     notification, adyen_plugin, payment_adyen_for_checkout",
          "68:     payment = payment_adyen_for_checkout",
          "69:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "70:     notification = notification(",
          "71:         merchant_reference=payment_id,",
          "72:         value=to_adyen_price(Decimal(10), payment.currency),",
          "73:     )",
          "74:     config = adyen_plugin().config",
          "75:     handle_authorization(notification, config)",
          "77:     payment.refresh_from_db()",
          "78:     assert payment.transactions.count() == 1",
          "79:     transaction = payment.transactions.get()",
          "80:     assert transaction.is_success is True",
          "81:     assert transaction.kind == TransactionKind.AUTH",
          "82:     assert payment.checkout is None",
          "83:     assert payment.order",
          "86: def test_handle_authorization_with_adyen_auto_capture(",
          "87:     notification, adyen_plugin, payment_adyen_for_order",
          "88: ):",
          "89:     payment = payment_adyen_for_order",
          "95:     config = adyen_plugin().config",
          "96:     config.connection_params[\"adyen_auto_capture\"] = True",
          "97:     handle_authorization(notification, config)",
          "99:     assert payment.transactions.count() == 1",
          "100:     assert payment.transactions.get().kind == TransactionKind.CAPTURE",
          "105:     notification, adyen_plugin, payment_adyen_for_order",
          "107:     payment = payment_adyen_for_order",
          "114:     config = adyen_plugin().config",
          "115:     config.auto_capture = True",
          "116:     config.connection_params[\"adyen_auto_capture\"] = False",
          "122:     assert payment.transactions.first().kind == TransactionKind.AUTH",
          "123:     assert payment.transactions.last().kind == TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "72:     assert payment.transactions.count() == 2",
          "73:     transaction = payment.transactions.exclude(",
          "74:         kind=TransactionKind.ACTION_TO_CONFIRM",
          "75:     ).get()",
          "80:     assert payment.order.checkout_token == checkout_token",
          "83: def test_handle_authorization_with_adyen_auto_capture(",
          "84:     notification, adyen_plugin, payment_adyen_for_checkout, address, shipping_method",
          "86:     checkout = payment_adyen_for_checkout.checkout",
          "87:     checkout.shipping_address = address",
          "88:     checkout.shipping_method = shipping_method",
          "89:     checkout.billing_address = address",
          "90:     checkout.save()",
          "92:     payment = payment_adyen_for_checkout",
          "93:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "94:     payment.is_active = True",
          "95:     payment.order = None",
          "96:     payment.total = total.gross.amount",
          "97:     payment.currency = total.gross.currency",
          "98:     payment.to_confirm = True",
          "99:     payment.save()",
          "108:     plugin = adyen_plugin(adyen_auto_capture=True)",
          "109:     handle_authorization(notification, plugin.config)",
          "111:     assert payment.transactions.count() == 2",
          "112:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "113:     assert transaction.is_success is True",
          "118:     notification, adyen_plugin, payment_adyen_for_checkout",
          "120:     payment = payment_adyen_for_checkout",
          "121:     payment.to_confirm = True",
          "122:     payment.save()",
          "130:     config = adyen_plugin(adyen_auto_capture=False, auto_capture=True).config",
          "136:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "137:     assert transaction.is_success is True",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     handle_authorization(notification, config)",
          "142:     # payment already has a charge status no need to handle auth action",
          "146: def test_handle_cancel(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "143:     assert payment.transactions.count() == 0",
          "",
          "[Added Lines]",
          "157:     assert payment.transactions.count() == 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:     handle_cancellation(notification, config)",
          "158:     payment.order.refresh_from_db()",
          "161:     assert transaction.is_success is True",
          "164:     assert payment.order.status == OrderStatus.CANCELED",
          "",
          "[Removed Lines]",
          "159:     assert payment.transactions.count() == 1",
          "160:     transaction = payment.transactions.get()",
          "162:     assert transaction.kind == TransactionKind.CANCEL",
          "",
          "[Added Lines]",
          "173:     assert payment.transactions.count() == 2",
          "174:     transaction = payment.transactions.filter(kind=TransactionKind.CANCEL).get()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "180:     handle_cancellation(notification, config)",
          "185: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_captured\")",
          "",
          "[Removed Lines]",
          "182:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "195:     assert payment.transactions.count() == 2",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:     handle_capture(notification, config)",
          "201:     assert transaction.is_success is True",
          "203:     payment.refresh_from_db()",
          "204:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "205:     mocked_captured.assert_called_once_with(",
          "",
          "[Removed Lines]",
          "199:     assert payment.transactions.count() == 1",
          "200:     transaction = payment.transactions.get()",
          "202:     assert transaction.kind == TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "212:     assert payment.transactions.count() == 2",
          "213:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:     handle_capture(notification, config)",
          "226:     # Payment is already captured so no need to save capture transaction",
          "230: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "227:     assert payment.transactions.count() == 0",
          "",
          "[Added Lines]",
          "239:     assert payment.transactions.count() == 1",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "247:     handle_failed_capture(notification, config)",
          "251:     assert transaction.is_success is True",
          "253:     payment.refresh_from_db()",
          "254:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "",
          "[Removed Lines]",
          "249:     assert payment.transactions.count() == 1",
          "250:     transaction = payment.transactions.get()",
          "252:     assert transaction.kind == TransactionKind.CAPTURE_FAILED",
          "",
          "[Added Lines]",
          "261:     assert payment.transactions.count() == 2",
          "262:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE_FAILED).get()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "271:     handle_failed_capture(notification, config)",
          "275:     assert transaction.is_success is True",
          "277:     payment.refresh_from_db()",
          "278:     assert payment.charge_status == ChargeStatus.PARTIALLY_CHARGED",
          "",
          "[Removed Lines]",
          "273:     assert payment.transactions.count() == 1",
          "274:     transaction = payment.transactions.get()",
          "276:     assert transaction.kind == TransactionKind.CAPTURE_FAILED",
          "",
          "[Added Lines]",
          "284:     assert payment.transactions.count() == 2",
          "285:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE_FAILED).get()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "290:     handle_pending(notification, config)",
          "294:     assert transaction.is_success is True",
          "296:     payment.refresh_from_db()",
          "297:     assert payment.charge_status == ChargeStatus.PENDING",
          "",
          "[Removed Lines]",
          "292:     assert payment.transactions.count() == 1",
          "293:     transaction = payment.transactions.get()",
          "295:     assert transaction.kind == TransactionKind.PENDING",
          "",
          "[Added Lines]",
          "302:     assert payment.transactions.count() == 2",
          "303:     transaction = payment.transactions.filter(kind=TransactionKind.PENDING).get()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "314:     # in case of autocapture we don't want to store the pending status as all payments",
          "315:     # by default get capture status.",
          "318:     payment.refresh_from_db()",
          "319:     assert payment.charge_status == ChargeStatus.PENDING",
          "",
          "[Removed Lines]",
          "316:     assert payment.transactions.count() == 1",
          "317:     assert payment.transactions.get().kind == TransactionKind.PENDING",
          "",
          "[Added Lines]",
          "325:     assert payment.transactions.count() == 2",
          "326:     assert payment.transactions.filter(kind=TransactionKind.PENDING).first()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "335:     handle_pending(notification, config)",
          "340: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "",
          "[Removed Lines]",
          "337:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "346:     assert payment.transactions.filter(kind=TransactionKind.PENDING).exists()",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "355:     handle_refund(notification, config)",
          "359:     assert transaction.is_success is True",
          "361:     payment.refresh_from_db()",
          "362:     assert payment.charge_status == ChargeStatus.FULLY_REFUNDED",
          "363:     assert payment.captured_amount == Decimal(\"0.00\")",
          "",
          "[Removed Lines]",
          "357:     assert payment.transactions.count() == 1",
          "358:     transaction = payment.transactions.get()",
          "360:     assert transaction.kind == TransactionKind.REFUND",
          "",
          "[Added Lines]",
          "366:     assert payment.transactions.count() == 2",
          "367:     transaction = payment.transactions.filter(kind=TransactionKind.REFUND).get()",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "386:     handle_refund(notification, config)",
          "389:     assert not mock_order_refunded.called",
          "",
          "[Removed Lines]",
          "388:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "396:     assert payment.transactions.count() == 2  # AUTH, REFUND",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "406:     handle_failed_refund(notification, config)",
          "411: def test_handle_failed_refund_with_transaction_refund_ongoing(",
          "",
          "[Removed Lines]",
          "408:     assert payment.transactions.count() == 0",
          "",
          "[Added Lines]",
          "416:     assert payment.transactions.count() == 1",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "425:     handle_failed_refund(notification, config)",
          "427:     assert (",
          "430:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "431:     assert payment.total == payment.captured_amount",
          "",
          "[Removed Lines]",
          "428:         payment.transactions.count() == 3",
          "429:     )  # REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "",
          "[Added Lines]",
          "436:         payment.transactions.count() == 4",
          "437:     )  # ACTION_TO_CONFIRM, REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "448:     handle_failed_refund(notification, config)",
          "450:     payment.refresh_from_db()",
          "452:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "453:     assert payment.total == payment.captured_amount",
          "",
          "[Removed Lines]",
          "451:     assert payment.transactions.count() == 3  # REFUND, REFUND_FAILED, FULLY_CHARGED",
          "",
          "[Added Lines]",
          "459:     assert payment.transactions.count() == 4  # REFUND, REFUND_FAILED, FULLY_CHARGED",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "467:     handle_reversed_refund(notification, config)",
          "469:     payment.refresh_from_db()",
          "471:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "472:     assert payment.total == payment.captured_amount",
          "",
          "[Removed Lines]",
          "470:     assert payment.transactions.count() == 1  # REFUND_REVERSED",
          "",
          "[Added Lines]",
          "478:     assert payment.transactions.filter(kind=TransactionKind.REFUND_REVERSED).exists()",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "489:     handle_reversed_refund(notification, config)",
          "491:     payment.refresh_from_db()",
          "495: def test_webhook_not_implemented(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "492:     assert payment.transactions.count() == 1",
          "",
          "[Added Lines]",
          "500:     assert payment.transactions.filter(kind=TransactionKind.REFUND_REVERSED).exists()",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import Adyen",
          "10: import graphene",
          "11: from django.contrib.auth.hashers import check_password",
          "13: from django.core.handlers.wsgi import WSGIRequest",
          "15: from django.http import (",
          "16:     HttpResponse,",
          "17:     HttpResponseBadRequest,",
          "",
          "[Removed Lines]",
          "12: from django.core.exceptions import ObjectDoesNotExist",
          "14: from django.db import transaction",
          "",
          "[Added Lines]",
          "12: from django.contrib.auth.models import AnonymousUser",
          "13: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "15: from django.db import transaction as django_transaction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: from django.shortcuts import redirect",
          "23: from graphql_relay import from_global_id",
          "25: from ....checkout.models import Checkout",
          "26: from ....core.utils.url import prepare_url",
          "33: from ....order.events import external_notification_event",
          "34: from ....payment.models import Payment, Transaction",
          "35: from ... import ChargeStatus, PaymentError, TransactionKind",
          "37: from ...interface import GatewayConfig, GatewayResponse",
          "38: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "39: from .utils import (",
          "",
          "[Removed Lines]",
          "27: from ....order.actions import (",
          "28:     cancel_order,",
          "29:     order_authorized,",
          "30:     order_captured,",
          "31:     order_refunded,",
          "32: )",
          "36: from ...gateway import capture, payment_refund_or_void",
          "",
          "[Added Lines]",
          "26: from ....checkout.complete_checkout import complete_checkout",
          "29: from ....discount.utils import fetch_active_discounts",
          "30: from ....order.actions import cancel_order, order_captured, order_refunded",
          "34: from ...gateway import payment_refund_or_void",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:         Checkout.objects.select_for_update(of=(\"self\",))",
          "69:         .prefetch_related(\"gift_cards\", \"lines\",)",
          "70:         .select_related(\"shipping_method\", \"shipping_method__shipping_zone\")",
          "72:         .first()",
          "73:     )",
          "",
          "[Removed Lines]",
          "71:         .filter(token=payment.checkout.pk)",
          "",
          "[Added Lines]",
          "69:         .filter(pk=payment.checkout.pk)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:     )",
          "126:     payment = get_payment(notification.get(\"merchantReference\"))",
          "127:     if not payment:",
          "128:         # We don't know anything about that payment",
          "",
          "[Removed Lines]",
          "124: @transaction.atomic",
          "125: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "",
          "[Added Lines]",
          "122: @django_transaction.atomic",
          "123: def handle_authorization(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:     }:",
          "135:         return",
          "142:     transaction_id = notification.get(\"pspReference\")",
          "143:     transaction = payment.transactions.filter(",
          "144:         token=transaction_id,",
          "",
          "[Removed Lines]",
          "137:     kind = TransactionKind.AUTH",
          "138:     adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "139:     if adyen_auto_capture:",
          "140:         kind = TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:         # We already have this transaction",
          "152:         return",
          "166:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "167:     failed_msg = f\"Adyen: The payment {transaction_id} request failed. Reason: {reason}\"",
          "185: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "186:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "187:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "154:     transaction = create_new_transaction(notification, payment, kind)",
          "155:     reason = notification.get(\"reason\", \"-\")",
          "157:     if not payment.order and transaction.is_success and checkout:",
          "158:         try:",
          "159:             order = create_order_from_checkout(checkout)",
          "160:         except Exception:",
          "161:             payment_refund_or_void(payment)",
          "162:             return",
          "163:         checkout.delete()",
          "164:         payment.order = order",
          "168:     create_payment_notification_for_order(",
          "169:         payment, success_msg, failed_msg, transaction.is_success",
          "170:     )",
          "171:     if not payment.order:",
          "172:         return",
          "174:     # If saleor has enabled auto capture we need to proceed the capture action.",
          "175:     if gateway_config.auto_capture:",
          "176:         capture(payment, amount=transaction.amount)",
          "178:     if kind == TransactionKind.AUTH:",
          "179:         order_authorized(payment.order, None, transaction.amount, payment)",
          "180:     elif kind == TransactionKind.CAPTURE:",
          "181:         order_captured(payment.order, None, transaction.amount, payment)",
          "184: @transaction.atomic",
          "",
          "[Added Lines]",
          "147:     action_transaction = payment.transactions.filter(",
          "148:         token=transaction_id,",
          "149:         action_required=False,",
          "150:         is_success=True,",
          "151:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "152:     ).last()",
          "154:     if not payment.order:",
          "155:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "156:         # storefront and we need to finalize the checkout asynchronously.",
          "157:         if not action_transaction:",
          "158:             action_transaction = create_new_transaction(",
          "159:                 notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "160:             )",
          "162:         if action_transaction.is_success and checkout:  # type: ignore",
          "163:             try:",
          "164:                 discounts = fetch_active_discounts()",
          "165:                 order, _, _ = complete_checkout(",
          "166:                     checkout=checkout,",
          "167:                     payment_data={},",
          "168:                     store_source=False,",
          "169:                     discounts=discounts,",
          "170:                     user=checkout.user or AnonymousUser(),",
          "171:                 )",
          "172:             except ValidationError as e:",
          "173:                 print(e)",
          "174:                 payment_refund_or_void(payment)",
          "175:                 return",
          "177:     reason = notification.get(\"reason\", \"-\")",
          "178:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "181:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "184: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:         handle_cancellation(notification, gateway_config)",
          "225: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "226:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "227:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "224: @transaction.atomic",
          "",
          "[Added Lines]",
          "224: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "260:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "264: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "265:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "266:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "263: @transaction.atomic",
          "",
          "[Added Lines]",
          "263: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "287:     create_payment_notification_for_order(payment, msg, None, True)",
          "291: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "292:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "293:     # event-codes\"",
          "",
          "[Removed Lines]",
          "290: @transaction.atomic",
          "",
          "[Added Lines]",
          "290: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311:     )",
          "315: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "316:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "317:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "314: @transaction.atomic",
          "",
          "[Added Lines]",
          "314: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "344:     return TransactionKind.CAPTURE",
          "348: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "349:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "350:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "347: @transaction.atomic",
          "",
          "[Added Lines]",
          "347: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "353:     transaction_id = notification.get(\"pspReference\")",
          "355:     # take the last status of payment before we tried to perform the refund",
          "362:     ).last()",
          "363:     last_kind = _get_kind(last_transaction)",
          "",
          "[Removed Lines]",
          "356:     last_transaction = payment.transactions.exclude(",
          "357:         kind__in=[",
          "358:             TransactionKind.REFUND_ONGOING,",
          "359:             TransactionKind.REFUND,",
          "360:             TransactionKind.REFUND_FAILED,",
          "361:         ]",
          "",
          "[Added Lines]",
          "356:     last_transaction = payment.transactions.filter(",
          "357:         action_required=False,",
          "358:         is_success=True,",
          "359:         kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "404:         # create new failed transaction which will allows us to discover duplicated",
          "405:         # notification",
          "406:         create_new_transaction(notification, payment, TransactionKind.REFUND_FAILED)",
          "408:         gateway_postprocess(new_transaction, payment)",
          "412: def handle_reversed_refund(",
          "413:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "414: ):",
          "",
          "[Removed Lines]",
          "407:         new_transaction = create_new_transaction(notification, payment, last_kind)",
          "411: @transaction.atomic",
          "",
          "[Added Lines]",
          "405:         new_transaction = create_new_transaction(",
          "406:             notification, payment, TransactionKind.CAPTURE",
          "407:         )",
          "411: @django_transaction.atomic",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "445:     handle_refund(notification, gateway_config)",
          "449: def webhook_not_implemented(",
          "450:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "451: ):",
          "",
          "[Removed Lines]",
          "448: @transaction.atomic",
          "",
          "[Added Lines]",
          "448: @django_transaction.atomic",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4aace2a1e0f8772a20302540677a32f0e1845b97",
      "candidate_info": {
        "commit_hash": "4aace2a1e0f8772a20302540677a32f0e1845b97",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/4aace2a1e0f8772a20302540677a32f0e1845b97",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Clean up code",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:             currency=payment_information.currency,",
          "404:         ).first()",
          "405:         is_success = True",
          "406:         if (",
          "407:             not transaction_already_processed",
          "408:             and config.auto_capture",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:         # confirm that we should proceed the capture action",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_additional_actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ..... import PaymentError, TransactionKind",
          "9: from ...webhooks import handle_additional_actions",
          "12: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "13: def test_handle_additional_actions_post(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: ERROR_MSG_MISSING_PAYMENT = \"Cannot perform payment.There is no active adyen payment.\"",
          "12: ERROR_MSG_MISSING_CHECKOUT = (",
          "13:     \"Cannot perform payment.There is no checkout with this payment.\"",
          "14: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:     # then",
          "182:     assert response.status_code == 404",
          "188: def test_handle_additional_actions_payment_lack_of_return_url(",
          "",
          "[Removed Lines]",
          "183:     assert response.content.decode() == (",
          "184:         \"Cannot perform payment.There is no active adyen payment.\"",
          "185:     )",
          "",
          "[Added Lines]",
          "188:     assert response.content.decode() == ERROR_MSG_MISSING_PAYMENT",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270:     # then",
          "271:     assert response.status_code == 404",
          "277: def test_handle_additional_actions_payment_does_not_have_checkout(",
          "",
          "[Removed Lines]",
          "272:     assert response.content.decode() == (",
          "273:         \"Cannot perform payment.There is no checkout with this payment.\"",
          "274:     )",
          "",
          "[Added Lines]",
          "275:     assert response.content.decode() == ERROR_MSG_MISSING_CHECKOUT",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:     # then",
          "303:     assert response.status_code == 404",
          "309: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "",
          "[Removed Lines]",
          "304:     assert response.content.decode() == (",
          "305:         \"Cannot perform payment.There is no checkout with this payment.\"",
          "306:     )",
          "",
          "[Added Lines]",
          "305:     assert response.content.decode() == ERROR_MSG_MISSING_CHECKOUT",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:     # then",
          "370:     assert response.status_code == 404",
          "376: def test_handle_additional_actions_payment_with_no_adyen_gateway(",
          "",
          "[Removed Lines]",
          "371:     assert response.content.decode() == (",
          "372:         \"Cannot perform payment.There is no active adyen payment.\"",
          "373:     )",
          "",
          "[Added Lines]",
          "370:     assert response.content.decode() == ERROR_MSG_MISSING_PAYMENT",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "402:     # then",
          "403:     assert response.status_code == 404",
          "409: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.api_call\")",
          "",
          "[Removed Lines]",
          "404:     assert response.content.decode() == (",
          "405:         \"Cannot perform payment.There is no active adyen payment.\"",
          "406:     )",
          "",
          "[Added Lines]",
          "401:     assert response.content.decode() == ERROR_MSG_MISSING_PAYMENT",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     transaction = payment.transactions.last()",
          "40:     assert transaction.is_success is True",
          "41:     assert transaction.kind == TransactionKind.AUTH",
          "47:     )",
          "50: def test_handle_multiple_authorization_notification(",
          "",
          "[Removed Lines]",
          "42:     assert (",
          "43:         payment.order.events.filter(",
          "44:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "45:         ).count()",
          "46:         == 1",
          "",
          "[Added Lines]",
          "42:     external_events = payment.order.events.filter(",
          "43:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "45:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "68:     capture_transaction = payment.transactions.get(kind=TransactionKind.CAPTURE)",
          "69:     assert capture_transaction.is_success is False",
          "75:     )",
          "77:     second_notification = notification(",
          "78:         merchant_reference=payment_id,",
          "",
          "[Removed Lines]",
          "70:     assert (",
          "71:         payment.order.events.filter(",
          "72:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "73:         ).count()",
          "74:         == 1",
          "",
          "[Added Lines]",
          "68:     external_events = payment.order.events.filter(",
          "69:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "71:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:         kind=TransactionKind.CAPTURE",
          "87:     ).last()",
          "88:     assert capture_transaction.is_success is True",
          "94:     )",
          "97: def test_handle_authorization_for_pending_order(",
          "",
          "[Removed Lines]",
          "89:     assert (",
          "90:         payment.order.events.filter(",
          "91:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "92:         ).count()",
          "93:         == 2",
          "",
          "[Added Lines]",
          "85:     external_events = payment.order.events.filter(",
          "86:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "88:     assert external_events.count() == 2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     assert transaction.kind == TransactionKind.CAPTURE",
          "115:     payment.refresh_from_db()",
          "116:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "122:     )",
          "125: def test_handle_authorization_for_checkout(",
          "",
          "[Removed Lines]",
          "117:     assert (",
          "118:         payment.order.events.filter(",
          "119:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "120:         ).count()",
          "121:         == 1",
          "",
          "[Added Lines]",
          "111:     external_events = payment.order.events.filter(",
          "112:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "114:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:     assert payment.checkout is None",
          "160:     assert payment.order",
          "161:     assert payment.order.checkout_token == checkout_token",
          "167:     )",
          "170: def test_handle_authorization_with_adyen_auto_capture(",
          "",
          "[Removed Lines]",
          "162:     assert (",
          "163:         payment.order.events.filter(",
          "164:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "165:         ).count()",
          "166:         == 1",
          "",
          "[Added Lines]",
          "154:     external_events = payment.order.events.filter(",
          "155:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "157:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:     assert payment.transactions.count() == 2",
          "200:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "201:     assert transaction.is_success is True",
          "207:     )",
          "210: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "202:     assert (",
          "203:         payment.order.events.filter(",
          "204:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "205:         ).count()",
          "206:         == 1",
          "",
          "[Added Lines]",
          "192:     external_events = payment.order.events.filter(",
          "193:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "195:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "230:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "231:     assert transaction.is_success is True",
          "232:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "238:     )",
          "241: def test_handle_authorization_with_adyen_auto_capture_and_payment_charged(",
          "",
          "[Removed Lines]",
          "233:     assert (",
          "234:         payment.order.events.filter(",
          "235:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "236:         ).count()",
          "237:         == 1",
          "",
          "[Added Lines]",
          "221:     external_events = payment.order.events.filter(",
          "222:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "224:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:     payment.refresh_from_db()",
          "257:     assert payment.transactions.count() == 2",
          "258:     assert payment.transactions.filter(kind=TransactionKind.CAPTURE).exists()",
          "264:     )",
          "267: def test_handle_cancel(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "259:     assert (",
          "260:         payment.order.events.filter(",
          "261:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "262:         ).count()",
          "263:         == 1",
          "",
          "[Added Lines]",
          "245:     external_events = payment.order.events.filter(",
          "246:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "248:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "282:     assert transaction.is_success is True",
          "284:     assert payment.order.status == OrderStatus.CANCELED",
          "290:     )",
          "293: def test_handle_cancel_already_canceled(",
          "",
          "[Removed Lines]",
          "285:     assert (",
          "286:         payment.order.events.filter(",
          "287:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "288:         ).count()",
          "289:         == 1",
          "",
          "[Added Lines]",
          "269:     external_events = payment.order.events.filter(",
          "270:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "272:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "324:     assert transaction.is_success is True",
          "325:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "331:     )",
          "334: def test_handle_capture_for_checkout(",
          "",
          "[Removed Lines]",
          "326:     assert (",
          "327:         payment.order.events.filter(",
          "328:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "329:         ).count()",
          "330:         == 1",
          "",
          "[Added Lines]",
          "308:     external_events = payment.order.events.filter(",
          "309:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "311:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "368:     assert payment.checkout is None",
          "369:     assert payment.order",
          "370:     assert payment.order.checkout_token == checkout_token",
          "376:     )",
          "379: def test_handle_capture_with_payment_already_charged(",
          "",
          "[Removed Lines]",
          "371:     assert (",
          "372:         payment.order.events.filter(",
          "373:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "374:         ).count()",
          "375:         == 1",
          "",
          "[Added Lines]",
          "351:     external_events = payment.order.events.filter(",
          "352:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "354:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "395:     # Payment is already captured so no need to save capture transaction",
          "396:     payment.refresh_from_db()",
          "397:     assert payment.transactions.count() == 2",
          "403:     )",
          "406: @pytest.mark.parametrize(",
          "",
          "[Removed Lines]",
          "398:     assert (",
          "399:         payment.order.events.filter(",
          "400:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "401:         ).count()",
          "402:         == 1",
          "",
          "[Added Lines]",
          "376:     external_events = payment.order.events.filter(",
          "377:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "379:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "427:     assert transaction.is_success is True",
          "428:     payment.refresh_from_db()",
          "429:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "435:     )",
          "438: def test_handle_failed_capture_partial_charge(",
          "",
          "[Removed Lines]",
          "430:     assert (",
          "431:         payment.order.events.filter(",
          "432:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "433:         ).count()",
          "434:         == 1",
          "",
          "[Added Lines]",
          "406:     external_events = payment.order.events.filter(",
          "407:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "409:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "456:     assert transaction.is_success is True",
          "457:     payment.refresh_from_db()",
          "458:     assert payment.charge_status == ChargeStatus.PARTIALLY_CHARGED",
          "464:     )",
          "467: def test_handle_pending(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "459:     assert (",
          "460:         payment.order.events.filter(",
          "461:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "462:         ).count()",
          "463:         == 1",
          "",
          "[Added Lines]",
          "433:     external_events = payment.order.events.filter(",
          "434:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "436:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "480:     assert transaction.is_success is True",
          "481:     payment.refresh_from_db()",
          "482:     assert payment.charge_status == ChargeStatus.PENDING",
          "488:     )",
          "491: def test_handle_pending_with_adyen_auto_capture(",
          "",
          "[Removed Lines]",
          "483:     assert (",
          "484:         payment.order.events.filter(",
          "485:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "486:         ).count()",
          "487:         == 1",
          "",
          "[Added Lines]",
          "455:     external_events = payment.order.events.filter(",
          "456:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "458:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "508:     assert payment.transactions.filter(kind=TransactionKind.PENDING).first()",
          "509:     payment.refresh_from_db()",
          "510:     assert payment.charge_status == ChargeStatus.PENDING",
          "516:     )",
          "519: def test_handle_pending_already_pending(",
          "",
          "[Removed Lines]",
          "511:     assert (",
          "512:         payment.order.events.filter(",
          "513:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "514:         ).count()",
          "515:         == 1",
          "",
          "[Added Lines]",
          "481:     external_events = payment.order.events.filter(",
          "482:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "484:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "561:     mock_order_refunded.assert_called_once_with(",
          "562:         payment.order, None, transaction.amount, payment",
          "563:     )",
          "569:     )",
          "572: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "",
          "[Removed Lines]",
          "564:     assert (",
          "565:         payment.order.events.filter(",
          "566:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "567:         ).count()",
          "568:         == 1",
          "",
          "[Added Lines]",
          "532:     external_events = payment.order.events.filter(",
          "533:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "535:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "608:     handle_failed_refund(notification, config)",
          "610:     assert payment.transactions.count() == 1",
          "616:     )",
          "619: def test_handle_failed_refund_with_transaction_refund_ongoing(",
          "",
          "[Removed Lines]",
          "611:     assert (",
          "612:         payment.order.events.filter(",
          "613:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "614:         ).count()",
          "615:         == 1",
          "",
          "[Added Lines]",
          "577:     external_events = payment.order.events.filter(",
          "578:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "580:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "632:     create_new_transaction(notification, payment, TransactionKind.REFUND_ONGOING)",
          "633:     handle_failed_refund(notification, config)",
          "638:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "639:     assert payment.total == payment.captured_amount",
          "645:     )",
          "648: def test_handle_failed_refund_with_transaction_refund(",
          "",
          "[Removed Lines]",
          "635:     assert (",
          "636:         payment.transactions.count() == 4",
          "637:     )  # ACTION_TO_CONFIRM, REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "640:     assert (",
          "641:         payment.order.events.filter(",
          "642:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "643:         ).count()",
          "644:         == 1",
          "",
          "[Added Lines]",
          "599:     # ACTION_TO_CONFIRM, REFUND_ONGOING, REFUND_FAILED, FULLY_CHARGED",
          "600:     assert payment.transactions.count() == 4",
          "603:     external_events = payment.order.events.filter(",
          "604:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "606:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "665:     assert payment.transactions.count() == 4  # REFUND, REFUND_FAILED, FULLY_CHARGED",
          "666:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "667:     assert payment.total == payment.captured_amount",
          "673:     )",
          "676: def test_handle_reversed_refund(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "[Removed Lines]",
          "668:     assert (",
          "669:         payment.order.events.filter(",
          "670:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "671:         ).count()",
          "672:         == 1",
          "",
          "[Added Lines]",
          "629:     external_events = payment.order.events.filter(",
          "630:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "632:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "690:     assert payment.transactions.filter(kind=TransactionKind.REFUND_REVERSED).exists()",
          "691:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "692:     assert payment.total == payment.captured_amount",
          "698:     )",
          "701: def test_handle_reversed_refund_already_processed(",
          "",
          "[Removed Lines]",
          "693:     assert (",
          "694:         payment.order.events.filter(",
          "695:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "696:         ).count()",
          "697:         == 1",
          "",
          "[Added Lines]",
          "652:     external_events = payment.order.events.filter(",
          "653:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "655:     assert external_events.count() == 1",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "732:     webhook_not_implemented(notification, config)",
          "739:     )",
          "742: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.handle_refund\")",
          "",
          "[Removed Lines]",
          "734:     assert (",
          "735:         payment.order.events.filter(",
          "736:             type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "737:         ).count()",
          "738:         == 1",
          "",
          "[Added Lines]",
          "691:     external_events = payment.order.events.filter(",
          "692:         type=OrderEvents.EXTERNAL_SERVICE_NOTIFICATION",
          "694:     assert external_events.count() == 1",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     except ValidationError:",
          "149:         payment_refund_or_void(payment)",
          "150:         return None",
          "152:     return order",
          "",
          "[Removed Lines]",
          "151:     payment.order = order",
          "",
          "[Added Lines]",
          "151:     # Refresh the payment to assign the newly created order",
          "152:     payment.refresh_from_db()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0214559f5724c6e30328659d1e9847827ac9e72",
      "candidate_info": {
        "commit_hash": "d0214559f5724c6e30328659d1e9847827ac9e72",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/d0214559f5724c6e30328659d1e9847827ac9e72",
        "files": [
          "saleor/graphql/order/mutations/orders.py",
          "saleor/order/actions.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Clean up the webhook logic",
        "before_after_code_files": [
          "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py",
          "saleor/order/actions.py||saleor/order/actions.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py": [
          "File: saleor/graphql/order/mutations/orders.py -> saleor/graphql/order/mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: )",
          "18: from ....order.error_codes import OrderErrorCode",
          "19: from ....order.utils import get_valid_shipping_methods_for_order",
          "21: from ...account.types import AddressInput",
          "22: from ...core.mutations import BaseMutation",
          "23: from ...core.scalars import UUID, Decimal",
          "",
          "[Removed Lines]",
          "20: from ....payment import CustomPaymentChoices, PaymentError, gateway",
          "",
          "[Added Lines]",
          "20: from ....payment import CustomPaymentChoices, PaymentError, TransactionKind, gateway",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: def try_payment_action(order, user, payment, func, *args, **kwargs):",
          "124:     try:",
          "126:     except (PaymentError, ValueError) as e:",
          "127:         message = str(e)",
          "128:         events.payment_failed_event(",
          "",
          "[Removed Lines]",
          "125:         func(*args, **kwargs)",
          "",
          "[Added Lines]",
          "125:         return func(*args, **kwargs)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         raise ValidationError(",
          "132:             {\"payment\": ValidationError(message, code=OrderErrorCode.PAYMENT_ERROR)}",
          "133:         )",
          "137: class OrderUpdateInput(graphene.InputObjectType):",
          "",
          "[Removed Lines]",
          "134:     return True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388:         payment = order.get_last_payment()",
          "389:         clean_order_capture(payment)",
          "392:             order, info.context.user, payment, gateway.capture, payment, amount",
          "393:         )",
          "395:         if order.is_fully_paid():",
          "396:             handle_fully_paid_order(order)",
          "397:         return OrderCapture(order=order)",
          "",
          "[Removed Lines]",
          "391:         try_payment_action(",
          "394:         order_captured(order, info.context.user, amount, payment)",
          "",
          "[Added Lines]",
          "390:         transaction = try_payment_action(",
          "393:         # Confirm that we changed the status to capture. Some payment can receive",
          "394:         # asynchronous webhook with update status",
          "395:         if transaction.kind == TransactionKind.CAPTURE:",
          "396:             order_captured(order, info.context.user, amount, payment)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "415:         payment = order.get_last_payment()",
          "416:         clean_void_payment(payment)",
          "420:         return OrderVoid(order=order)",
          "",
          "[Removed Lines]",
          "418:         try_payment_action(order, info.context.user, payment, gateway.void, payment)",
          "419:         order_voided(order, info.context.user, payment)",
          "",
          "[Added Lines]",
          "420:         transaction = try_payment_action(",
          "421:             order, info.context.user, payment, gateway.void, payment",
          "422:         )",
          "423:         # Confirm that we changed the status to void. Some payment can receive",
          "424:         # asynchronous webhook with update status",
          "425:         if transaction.kind == TransactionKind.VOID:",
          "426:             order_voided(order, info.context.user, payment)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "449:         payment = order.get_last_payment()",
          "450:         clean_refund_payment(payment)",
          "453:             order, info.context.user, payment, gateway.refund, payment, amount",
          "454:         )",
          "457:         return OrderRefund(order=order)",
          "",
          "[Removed Lines]",
          "452:         try_payment_action(",
          "456:         order_refunded(order, info.context.user, amount, payment)",
          "",
          "[Added Lines]",
          "459:         transaction = try_payment_action(",
          "463:         # Confirm that we changed the status to refund. Some payment can receive",
          "464:         # asynchronous webhook with update status",
          "465:         if transaction.kind == TransactionKind.REFUND:",
          "466:             order_refunded(order, info.context.user, amount, payment)",
          "",
          "---------------"
        ],
        "saleor/order/actions.py||saleor/order/actions.py": [
          "File: saleor/order/actions.py -> saleor/order/actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: from decimal import Decimal",
          "5: from django.db import transaction",
          "",
          "[Removed Lines]",
          "3: from typing import TYPE_CHECKING, Dict, List",
          "",
          "[Added Lines]",
          "3: from typing import TYPE_CHECKING, Dict, List, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: @transaction.atomic",
          "73:     \"\"\"Cancel order.",
          "75:     Release allocation of unfulfilled order items.",
          "",
          "[Removed Lines]",
          "72: def cancel_order(order: \"Order\", user: \"User\"):",
          "",
          "[Added Lines]",
          "72: def cancel_order(order: \"Order\", user: Optional[\"User\"]):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:     manager.order_updated(order)",
          "90:     events.payment_refunded_event(",
          "91:         order=order, user=user, amount=amount, payment=payment",
          "92:     )",
          "",
          "[Removed Lines]",
          "89: def order_refunded(order: \"Order\", user: \"User\", amount: \"Decimal\", payment: \"Payment\"):",
          "",
          "[Added Lines]",
          "89: def order_refunded(",
          "90:     order: \"Order\", user: Optional[\"User\"], amount: \"Decimal\", payment: \"Payment\"",
          "91: ):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131: def order_authorized(",
          "133: ):",
          "134:     events.payment_authorized_event(",
          "135:         order=order, user=user, amount=amount, payment=payment",
          "",
          "[Removed Lines]",
          "132:     order: \"Order\", user: \"User\", amount: \"Decimal\", payment: \"Payment\"",
          "",
          "[Added Lines]",
          "134:     order: \"Order\", user: Optional[\"User\"], amount: \"Decimal\", payment: \"Payment\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "137:     get_plugins_manager().order_updated(order)",
          "141:     events.payment_captured_event(",
          "142:         order=order, user=user, amount=amount, payment=payment",
          "143:     )",
          "",
          "[Removed Lines]",
          "140: def order_captured(order: \"Order\", user: \"User\", amount: \"Decimal\", payment: \"Payment\"):",
          "",
          "[Added Lines]",
          "142: def order_captured(",
          "143:     order: \"Order\", user: Optional[\"User\"], amount: \"Decimal\", payment: \"Payment\"",
          "144: ):",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     api_call,",
          "21:     request_data_for_gateway_config,",
          "22:     request_data_for_payment,",
          "23:     request_for_payment_refund,",
          "24: )",
          "25: from .webhooks import handle_webhook",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:     request_for_payment_capture,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:     ):",
          "255:         super()._update_config_items(configuration_to_update, current_config)",
          "256:         for item in current_config:",
          "258:                 item[\"value\"] = make_password(item[\"value\"])",
          "260:     @require_active_plugin",
          "",
          "[Removed Lines]",
          "257:             if item.get(\"name\") == \"Notification password\":",
          "",
          "[Added Lines]",
          "258:             if item.get(\"name\") == \"Notification password\" and item[\"value\"]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "294:         transaction = (",
          "295:             Transaction.objects.filter(",
          "297:             )",
          "298:             .exclude(token__isnull=True, token__exact=\"\")",
          "299:             .last()",
          "",
          "[Removed Lines]",
          "296:                 payment__id=payment_id, kind=TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "297:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "320:             raw_response=result.message,",
          "321:         )",
          "323:     def capture_payment(",
          "324:         self, payment_information: \"PaymentData\", previous_value",
          "325:     ) -> \"GatewayResponse\":",
          "328:     def void_payment(",
          "329:         self, payment_information: \"PaymentData\", previous_value",
          "330:     ) -> \"GatewayResponse\":",
          "331:         pass",
          "",
          "[Removed Lines]",
          "326:         pass",
          "",
          "[Added Lines]",
          "324:     @require_active_plugin",
          "328:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "329:         transaction = (",
          "330:             Transaction.objects.filter(",
          "331:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "332:             )",
          "333:             .exclude(token__isnull=True, token__exact=\"\")",
          "334:             .last()",
          "335:         )",
          "336:         if not transaction:",
          "337:             raise PaymentError(\"Cannot find a payment reference to capture.\")",
          "339:         request = request_for_payment_capture(",
          "340:             payment_information=payment_information,",
          "341:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "342:             token=transaction.token,",
          "343:         )",
          "344:         result = api_call(request, self.adyen.payment.capture)",
          "345:         return GatewayResponse(",
          "346:             is_success=True,",
          "347:             action_required=False,",
          "348:             kind=TransactionKind.CAPTURE,",
          "349:             amount=payment_information.amount,",
          "350:             currency=payment_information.currency,",
          "351:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "352:             error=\"\",",
          "353:             raw_response=result.message,",
          "354:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         \"originalReference\": token,",
          "119:         \"reference\": payment_information.payment_id,",
          "120:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: def request_for_payment_capture(",
          "124:     payment_information: \"PaymentData\", merchant_account, token",
          "125: ) -> Dict[str, Any]:",
          "126:     return {",
          "127:         \"merchantAccount\": merchant_account,",
          "128:         \"modificationAmount\": {",
          "129:             \"value\": get_price_amount(",
          "130:                 payment_information.amount, payment_information.currency",
          "131:             ),",
          "132:             \"currency\": payment_information.currency,",
          "133:         },",
          "134:         \"originalReference\": token,",
          "135:         \"reference\": payment_information.payment_id,",
          "136:     }",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from django.http.request import HttpHeaders",
          "12: from graphql_relay import from_global_id",
          "14: from ....order.events import payment_gateway_notification_event",
          "15: from ....payment.models import Payment, Transaction",
          "16: from ... import TransactionKind",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from ....order.actions import (",
          "15:     cancel_order,",
          "16:     handle_fully_paid_order,",
          "17:     order_authorized,",
          "18:     order_captured,",
          "19:     order_refunded,",
          "20: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: def get_transaction(",
          "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
          "30: ) -> Transaction:",
          "32:     return transaction",
          "",
          "[Removed Lines]",
          "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
          "",
          "[Added Lines]",
          "38:     transaction = payment.transactions.filter(kind=kind, token=transaction_id).first()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     create_payment_notification_for_order(",
          "97:         payment, success_msg, failed_msg, transaction.is_success",
          "98:     )",
          "101: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     if payment.order:",
          "107:         order_authorized(payment.order, None, transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:     success_msg = f\"Adyen: The cancel {transaction_id} request was successful.\"",
          "117:     failed_msg = f\"Adyen: The camcel {transaction_id} request failed. Reason: {reason}\"",
          "118:     create_payment_notification_for_order(",
          "120:     )",
          "123: def handle_cancel_or_refund(",
          "",
          "[Removed Lines]",
          "119:         payment, success_msg, failed_msg, transaction.is_success",
          "",
          "[Added Lines]",
          "128:         payment, success_msg, failed_msg, new_transaction.is_success",
          "130:     if payment.order:",
          "131:         cancel_order(payment.order, None)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "135:     payment = get_payment(notification.get(\"merchantReference\"))",
          "136:     if not payment:",
          "137:         return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:     # FIXME execute order_fully_paid event",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "144:     new_transaction = create_new_transaction(",
          "145:         notification, payment, TransactionKind.CAPTURE",
          "146:     )",
          "147:     gateway_postprocess(new_transaction, payment)",
          "149:     reason = notification.get(\"reason\", \"-\")",
          "150:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
          "151:     failed_msg = f\"Adyen: The capture {transaction_id} request failed. Reason: {reason}\"",
          "152:     create_payment_notification_for_order(",
          "154:     )",
          "157: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "153:         payment, success_msg, failed_msg, transaction.is_success",
          "",
          "[Added Lines]",
          "161:     if payment.order:",
          "162:         handle_fully_paid_order(payment.order)",
          "168:         payment, success_msg, failed_msg, new_transaction.is_success",
          "170:     if payment.order:",
          "171:         order_captured(payment.orderm, None, transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "200:     reason = notification.get(\"reason\", \"-\")",
          "201:     msg = f\"Adyen: The transaction {transaction_id} is pending. Reason: {reason}\"",
          "205: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "202:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
          "",
          "[Added Lines]",
          "219:     create_payment_notification_for_order(",
          "220:         payment, msg, None, new_transaction.is_success",
          "221:     )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "220:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
          "221:     failed_msg = f\"Adyen: The refund {transaction_id} request failed. Reason: {reason}\"",
          "222:     create_payment_notification_for_order(",
          "224:     )",
          "227: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "223:         payment, success_msg, failed_msg, transaction.is_success",
          "",
          "[Added Lines]",
          "242:         payment, success_msg, failed_msg, new_transaction.is_success",
          "244:     if payment.order:",
          "245:         order_refunded(payment.order, None, transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "244:         f\" receive more than two failures on the same refund, contact Adyen Support \"",
          "245:         f\"Team. Reason: {reason}\"",
          "246:     )",
          "250: def handle_reversed_refund(",
          "",
          "[Removed Lines]",
          "247:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
          "",
          "[Added Lines]",
          "268:     create_payment_notification_for_order(payment, msg, msg, new_transaction.is_success)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "272:         f\"and is back in your account. This may happen if the shopper's bank account \"",
          "273:         f\"is no longer valid. Reason: {reason}\"",
          "274:     )",
          "278: def handle_refund_with_data(",
          "",
          "[Removed Lines]",
          "275:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
          "",
          "[Added Lines]",
          "296:     create_payment_notification_for_order(payment, msg, msg, True)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "296:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
          "297:     failed_msg = f\"Adyen: The refund {transaction_id} request failed. Reason: {reason}\"",
          "298:     create_payment_notification_for_order(",
          "300:     )",
          "303: def webhook_not_implemented(",
          "",
          "[Removed Lines]",
          "299:         payment, success_msg, failed_msg, transaction.is_success",
          "",
          "[Added Lines]",
          "320:         payment, success_msg, failed_msg, new_transaction.is_success",
          "322:     if payment.order:",
          "323:         order_refunded(payment.order, None, transaction.amount, payment)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53f3089e490797f171972b752696f3beaa7a2f5f",
      "candidate_info": {
        "commit_hash": "53f3089e490797f171972b752696f3beaa7a2f5f",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/53f3089e490797f171972b752696f3beaa7a2f5f",
        "files": [
          "saleor/checkout/complete_checkout.py",
          "saleor/checkout/utils.py",
          "saleor/core/transactions.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/order/emails.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/seo/schema/email.py"
        ],
        "message": "Rebuild the lock for checkout. Reduce amount of queries",
        "before_after_code_files": [
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/checkout/utils.py||saleor/checkout/utils.py",
          "saleor/core/transactions.py||saleor/core/transactions.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/order/emails.py||saleor/order/emails.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/seo/schema/email.py||saleor/seo/schema/email.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from . import models",
          "19: from .checkout_cleaner import clean_checkout_payment, clean_checkout_shipping",
          "20: from .error_codes import CheckoutErrorCode",
          "25: def prepare_checkout(",
          "26:     checkout: models.Checkout, discounts, tracking_code, redirect_url, payment",
          "27: ):",
          "",
          "[Removed Lines]",
          "21: from .utils import abort_order_data, create_order, get_order, prepare_order_data",
          "24: @transaction.atomic",
          "",
          "[Added Lines]",
          "21: from .utils import abort_order_data, create_order, prepare_order_data",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         checkout.save(update_fields=to_update)",
          "58: def convert_checkout_to_order(",
          "59:     checkout: models.Checkout, order_data: dict, user: Optional[User]",
          "60: ) -> order_models.Order:",
          "",
          "[Removed Lines]",
          "57: @transaction.atomic",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:     tracking_code=None,",
          "122:     redirect_url=None,",
          "123: ) -> Tuple[Optional[Order], bool, dict]:",
          "130:     payment = checkout.get_last_active_payment()",
          "131:     prepare_checkout(",
          "132:         checkout=checkout,",
          "",
          "[Removed Lines]",
          "124:     action_required = False",
          "125:     action_data = {}  # type: ignore",
          "126:     order = get_order(checkout.token)",
          "127:     if order:",
          "128:         return order, action_required, action_data",
          "",
          "[Added Lines]",
          "122:     \"\"\"Logic required to finalize the checkout and convert it to order.",
          "124:     Should be used with transaction_with_commit_on_errors. As there is a possibility",
          "125:     for thread race.",
          "126:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:     action_required = txn.action_required",
          "156:     action_data = txn.action_required_data if action_required else {}",
          "158:     if not action_required:",
          "159:         try:",
          "170:         except InsufficientStock as e:",
          "171:             abort_order_data(order_data)",
          "172:             gateway.payment_refund_or_void(payment)",
          "173:             raise ValidationError(f\"Insufficient product stock: {e.item}\", code=e.code)",
          "178:     return order, action_required, action_data",
          "",
          "[Removed Lines]",
          "160:             with transaction.atomic():",
          "161:                 order = get_order(checkout.token)",
          "162:                 if order:",
          "163:                     # Order was created asynchronously, we can release the lock made",
          "164:                     # on order_data",
          "165:                     abort_order_data(order_data)",
          "166:                 else:",
          "167:                     order = convert_checkout_to_order(",
          "168:                         checkout=checkout, order_data=order_data, user=user",
          "169:                     )",
          "175:     if not order:",
          "176:         abort_order_data(order_data)",
          "",
          "[Added Lines]",
          "155:     order = None",
          "158:             order = convert_checkout_to_order(",
          "159:                 checkout=checkout, order_data=order_data, user=user",
          "160:             )",
          "",
          "---------------"
        ],
        "saleor/checkout/utils.py||saleor/checkout/utils.py": [
          "File: saleor/checkout/utils.py -> saleor/checkout/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from datetime import date",
          "3: from decimal import Decimal",
          "4: from typing import Iterable, List, Optional, Tuple",
          "7: from django.core.exceptions import ValidationError",
          "8: from django.db import transaction",
          "",
          "[Removed Lines]",
          "5: from uuid import UUID",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:             remove_voucher_usage_by_customer(voucher, order_data[\"user_email\"])",
          "704: @transaction.atomic",
          "705: def create_order(*, checkout: Checkout, order_data: dict, user: User) -> Order:",
          "706:     \"\"\"Create an order from the checkout.",
          "",
          "[Removed Lines]",
          "699: def get_order(checkout_token: UUID) -> Optional[Order]:",
          "700:     \"\"\"Get order based on checkout token.\"\"\"",
          "701:     return Order.objects.confirmed().filter(checkout_token=checkout_token).first()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:     order_lines = order_data.pop(\"lines\")",
          "726:     order = Order.objects.create(**order_data, checkout_token=checkout.token)",
          "729:     # allocate stocks from the lines",
          "730:     for line in order_lines:  # type: OrderLine",
          "",
          "[Removed Lines]",
          "727:     order.lines.set(order_lines, bulk=False)",
          "",
          "[Added Lines]",
          "721:     for line in order_lines:",
          "722:         line.order_id = order.pk",
          "723:     order_lines = OrderLine.objects.bulk_create(order_lines)",
          "",
          "---------------"
        ],
        "saleor/core/transactions.py||saleor/core/transactions.py": [
          "File: saleor/core/transactions.py -> saleor/core/transactions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from contextlib import contextmanager",
          "3: from django.db import DatabaseError, IntegrityError, transaction",
          "6: @contextmanager",
          "7: def transaction_with_commit_on_errors():",
          "8:     \"\"\"Perform transaction and raise an error in any occurred.\"\"\"",
          "9:     error = None",
          "10:     with transaction.atomic():",
          "11:         try:",
          "12:             yield",
          "13:         except (DatabaseError, IntegrityError):",
          "14:             raise",
          "15:         except Exception as e:",
          "16:             error = e",
          "17:     if error:",
          "18:         raise error",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     add_variant_to_checkout,",
          "15:     change_billing_address_in_checkout,",
          "16:     change_shipping_address_in_checkout,",
          "18:     get_user_checkout,",
          "19:     get_valid_shipping_methods_for_checkout,",
          "20:     recalculate_checkout_discount,",
          "",
          "[Removed Lines]",
          "17:     get_order,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: from ...core import analytics",
          "24: from ...core.exceptions import InsufficientStock, PermissionDenied, ProductNotPublished",
          "25: from ...core.permissions import OrderPermissions",
          "26: from ...payment import models as payment_models",
          "27: from ...product import models as product_models",
          "28: from ...warehouse.availability import check_stock_quantity, get_available_quantity",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: from ...core.transactions import transaction_with_commit_on_errors",
          "26: from ...order import models as order_models",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "768:     @classmethod",
          "769:     def perform_mutation(cls, _root, info, checkout_id, store_source, **data):",
          "795:                         ),",
          "797:                 )",
          "799:             )",
          "810:         # If gateway returns information that additional steps are required we need",
          "811:         # to inform the frontend and pass all required data",
          "812:         return CheckoutComplete(",
          "",
          "[Removed Lines]",
          "770:         checkout_token = from_global_id_strict_type(",
          "771:             checkout_id, Checkout, field=\"checkout_id\"",
          "772:         )",
          "773:         order = get_order(checkout_token)",
          "774:         if order:",
          "775:             # The order is already created. We return it as a success checkoutComplete",
          "776:             # response. Order is anonymized for not logged in user",
          "777:             return CheckoutComplete(",
          "778:                 order=order, confirmation_needed=False, confirmation_data={}",
          "779:             )",
          "781:         with transaction.atomic():",
          "782:             checkout = cls.get_node_or_error(",
          "783:                 info,",
          "784:                 checkout_id,",
          "785:                 only_type=Checkout,",
          "786:                 field=\"checkout_id\",",
          "787:                 qs=models.Checkout.objects.select_for_update(of=(\"self\",))",
          "788:                 .prefetch_related(",
          "789:                     \"gift_cards\",",
          "790:                     \"lines\",",
          "791:                     Prefetch(",
          "792:                         \"payments\",",
          "793:                         queryset=payment_models.Payment.objects.prefetch_related(",
          "794:                             \"order\", \"order__lines\"",
          "796:                     ),",
          "798:                 .select_related(\"shipping_method\", \"shipping_method__shipping_zone\"),",
          "800:         tracking_code = analytics.get_client_id(info.context)",
          "801:         order, action_required, action_data = complete_checkout(",
          "802:             checkout=checkout,",
          "803:             payment_data=data.get(\"payment_data\", {}),",
          "804:             store_source=store_source,",
          "805:             discounts=info.context.discounts,",
          "806:             user=info.context.user,",
          "807:             tracking_code=tracking_code,",
          "808:             redirect_url=data.get(\"redirect_url\"),",
          "809:         )",
          "",
          "[Added Lines]",
          "771:         tracking_code = analytics.get_client_id(info.context)",
          "772:         with transaction_with_commit_on_errors():",
          "773:             try:",
          "774:                 checkout = cls.get_node_or_error(",
          "775:                     info,",
          "776:                     checkout_id,",
          "777:                     only_type=Checkout,",
          "778:                     field=\"checkout_id\",",
          "779:                     qs=models.Checkout.objects.select_for_update(of=(\"self\",))",
          "780:                     .prefetch_related(",
          "781:                         \"gift_cards\",",
          "782:                         \"lines__variant__product\",",
          "783:                         Prefetch(",
          "784:                             \"payments\",",
          "785:                             queryset=payment_models.Payment.objects.prefetch_related(",
          "786:                                 \"order__lines\"",
          "787:                             ),",
          "789:                     )",
          "790:                     .select_related(\"shipping_method__shipping_zone\"),",
          "791:                 )",
          "792:             except ValidationError as e:",
          "793:                 checkout_token = from_global_id_strict_type(",
          "794:                     checkout_id, Checkout, field=\"checkout_id\"",
          "797:                 order = (",
          "798:                     order_models.Order.objects.confirmed()",
          "799:                     .filter(checkout_token=checkout_token)",
          "800:                     .first()",
          "801:                 )",
          "802:                 if order:",
          "803:                     # The order is already created. We return it as a success",
          "804:                     # checkoutComplete response. Order is anonymized for not logged in",
          "805:                     # user",
          "806:                     return CheckoutComplete(",
          "807:                         order=order, confirmation_needed=False, confirmation_data={}",
          "808:                     )",
          "809:                 raise e",
          "811:             order, action_required, action_data = complete_checkout(",
          "812:                 checkout=checkout,",
          "813:                 payment_data=data.get(\"payment_data\", {}),",
          "814:                 store_source=store_source,",
          "815:                 discounts=info.context.discounts,",
          "816:                 user=info.context.user,",
          "817:                 tracking_code=tracking_code,",
          "818:                 redirect_url=data.get(\"redirect_url\"),",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_complete.py -> saleor/graphql/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     order_with_lines.save()",
          "69:     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)",
          "70:     variables = {\"checkoutId\": checkout_id, \"redirectUrl\": \"https://www.example.com\"}",
          "71:     response = user_api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)",
          "73:     content = get_graphql_content(response)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     checkout.delete()",
          "",
          "---------------"
        ],
        "saleor/order/emails.py||saleor/order/emails.py": [
          "File: saleor/order/emails.py -> saleor/order/emails.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: if TYPE_CHECKING:",
          "15:     from decimal import Decimal",
          "19: CONFIRM_ORDER_TEMPLATE = \"order/confirm_order\"",
          "20: STAFF_CONFIRM_ORDER_TEMPLATE = \"order/staff_confirm_order\"",
          "",
          "[Removed Lines]",
          "17:     from ..account.models import User",
          "",
          "[Added Lines]",
          "17:     from ..account.models import User  # noqa: F401",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     order_pk: int, template: str, redirect_url: str = \"\"",
          "44: ) -> dict:",
          "45:     \"\"\"Collect the required data for sending emails.\"\"\"",
          "47:     recipient_email = order.get_customer_email()",
          "48:     send_kwargs, email_context = get_email_context()",
          "",
          "[Removed Lines]",
          "46:     order = Order.objects.get(pk=order_pk)",
          "",
          "[Added Lines]",
          "46:     order = Order.objects.prefetch_related(\"lines__variant__product__images\").get(",
          "47:         pk=order_pk",
          "48:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: from django.contrib.auth.models import AnonymousUser",
          "13: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "14: from django.core.handlers.wsgi import WSGIRequest",
          "16: from django.http import (",
          "17:     HttpResponse,",
          "18:     HttpResponseBadRequest,",
          "",
          "[Removed Lines]",
          "15: from django.db import transaction as django_transaction",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: from ....checkout.complete_checkout import complete_checkout",
          "27: from ....checkout.models import Checkout",
          "28: from ....core.utils.url import prepare_url",
          "29: from ....discount.utils import fetch_active_discounts",
          "30: from ....order.actions import cancel_order, order_captured, order_refunded",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from ....core.transactions import transaction_with_commit_on_errors",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     # Lock checkout in the same way as in checkoutComplete",
          "60:     return (",
          "61:         Checkout.objects.select_for_update(of=(\"self\",))",
          "64:         .filter(pk=payment.checkout.pk)",
          "65:         .first()",
          "66:     )",
          "",
          "[Removed Lines]",
          "62:         .prefetch_related(\"gift_cards\", \"lines\",)",
          "63:         .select_related(\"shipping_method\", \"shipping_method__shipping_zone\")",
          "",
          "[Added Lines]",
          "62:         .prefetch_related(\"gift_cards\", \"lines__variant__product\",)",
          "63:         .select_related(\"shipping_method__shipping_zone\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:     )",
          "118: def handle_authorization(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "119:     payment = get_payment(notification.get(\"merchantReference\"))",
          "120:     if not payment:",
          "",
          "[Removed Lines]",
          "117: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "117: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "179: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "180:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "181:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "178: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "178: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "215:         handle_cancellation(notification, gateway_config)",
          "219: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "220:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "221:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "218: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "218: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "280:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "284: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "285:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "286:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "283: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "283: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "307:     create_payment_notification_for_order(payment, msg, None, True)",
          "311: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "312:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "313:     # event-codes\"",
          "",
          "[Removed Lines]",
          "310: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "310: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "331:     )",
          "335: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "336:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "337:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "334: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "334: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "364:     return TransactionKind.CAPTURE",
          "368: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "369:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "370:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Removed Lines]",
          "367: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "367: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "428:         gateway_postprocess(new_transaction, payment)",
          "432: def handle_reversed_refund(",
          "433:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "434: ):",
          "",
          "[Removed Lines]",
          "431: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "431: @transaction_with_commit_on_errors()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "465:     handle_refund(notification, gateway_config)",
          "469: def webhook_not_implemented(",
          "470:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "471: ):",
          "",
          "[Removed Lines]",
          "468: @django_transaction.atomic",
          "",
          "[Added Lines]",
          "468: @transaction_with_commit_on_errors()",
          "",
          "---------------"
        ],
        "saleor/seo/schema/email.py||saleor/seo/schema/email.py": [
          "File: saleor/seo/schema/email.py -> saleor/seo/schema/email.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         \"orderDate\": order.created,",
          "60:     }",
          "64:         product_data = get_product_data(line=line, organization=organization)",
          "65:         data[\"acceptedOffer\"].append(product_data)",
          "66:     return json.dumps(data, cls=HTMLSafeJSON)",
          "",
          "[Removed Lines]",
          "62:     lines = order.lines.prefetch_related(\"variant\")",
          "63:     for line in lines:",
          "",
          "[Added Lines]",
          "62:     for line in order.lines.all():",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b15e3b167b5a45a51577361b25992c5680ff2a90",
      "candidate_info": {
        "commit_hash": "b15e3b167b5a45a51577361b25992c5680ff2a90",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/b15e3b167b5a45a51577361b25992c5680ff2a90",
        "files": [
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Use manager from parameter in create_order adyen method",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     )",
          "159:     try:",
          "160:         discounts = fetch_active_discounts()",
          "161:         lines = fetch_checkout_lines(checkout)",
          "",
          "[Removed Lines]",
          "157: def create_order(payment, checkout):",
          "158:     manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "157: def create_order(payment, checkout, manager):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     return order",
          "181:     \"\"\"Process the notification in case when payment doesn't have assigned order.\"\"\"",
          "183:     # We don't want to create order for payment that is cancelled or refunded",
          "",
          "[Removed Lines]",
          "180: def handle_not_created_order(notification, payment, checkout, kind):",
          "",
          "[Added Lines]",
          "179: def handle_not_created_order(notification, payment, checkout, kind, manager):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:     # Only when we confirm that notification is success we will create the order",
          "202:     if transaction.is_success and checkout:  # type: ignore",
          "204:         return order",
          "205:     return None",
          "",
          "[Removed Lines]",
          "203:         order = create_order(payment, checkout)",
          "",
          "[Added Lines]",
          "202:         order = create_order(payment, checkout, manager)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "219:     if adyen_auto_capture:",
          "220:         kind = TransactionKind.CAPTURE",
          "221:     if not payment.order:",
          "223:     else:",
          "224:         adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "225:         kind = TransactionKind.AUTH",
          "",
          "[Removed Lines]",
          "222:         handle_not_created_order(notification, payment, checkout, kind)",
          "",
          "[Added Lines]",
          "221:         handle_not_created_order(notification, payment, checkout, kind, manager)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "312:     manager = get_plugins_manager()",
          "313:     if not payment.order:",
          "314:         handle_not_created_order(",
          "316:         )",
          "317:     else:",
          "318:         capture_transaction = payment.transactions.filter(",
          "",
          "[Removed Lines]",
          "315:             notification, payment, checkout, TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "314:             notification, payment, checkout, TransactionKind.CAPTURE, manager",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "797:         gateway_response=gateway_response,",
          "798:     )",
          "799:     if is_success and not action_required and not payment.order:",
          "",
          "[Removed Lines]",
          "800:         create_order(payment, checkout)",
          "",
          "[Added Lines]",
          "799:         create_order(payment, checkout, get_plugins_manager())",
          "",
          "---------------"
        ]
      }
    }
  ]
}