{
  "cve_id": "CVE-2016-3096",
  "cve_desc": "The create_script function in the lxc_container module in Ansible before 1.9.6-1 and 2.x before 2.0.2.0 allows local users to write to arbitrary files or gain privileges via a symlink attack on (1) /opt/.lxc-attach-script, (2) the archived container in the archive_path directory, or the (3) lxc-attach-script.log or (4) lxc-attach-script.err files in the temporary directory.",
  "repo": "ansible/ansible-modules-extras",
  "patch_hash": "8c6fe646ee79f5e55361b885b7efed5bec72d4a4",
  "patch_info": {
    "commit_hash": "8c6fe646ee79f5e55361b885b7efed5bec72d4a4",
    "repo": "ansible/ansible-modules-extras",
    "commit_url": "https://github.com/ansible/ansible-modules-extras/pull/1941/commits/8c6fe646ee79f5e55361b885b7efed5bec72d4a4",
    "files": [
      "cloud/lxc/lxc_container.py"
    ],
    "message": "CVE-2016-3096: do not use predictable paths in lxc_container\n\n* do not use a predictable filename for the LXC attach script\n* don't use predictable filenames for LXC attach script logging\n* don't set a predictable archive_path\n\nthis should prevent symlink attacks which could result in\n* data corruption\n* data leakage\n* privilege escalation",
    "before_after_code_files": [
      "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py"
    ]
  },
  "patch_diff": {
    "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py": [
      "File: cloud/lxc/lxc_container.py -> cloud/lxc/lxc_container.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:         description:",
      "145:           - Path the save the archived container. If the path does not exist",
      "146:             the archive method will attempt to create it.",
      "148:     archive_compression:",
      "149:         choices:",
      "150:           - gzip",
      "",
      "[Removed Lines]",
      "147:         default: /tmp",
      "",
      "[Added Lines]",
      "147:         default: null",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "557:     import subprocess",
      "558:     import tempfile",
      "567:     try:",
      "568:         f.write(ATTACH_TEMPLATE % {'container_command': command})",
      "569:         f.flush()",
      "",
      "[Removed Lines]",
      "560:     # Ensure that the directory /opt exists.",
      "561:     if not path.isdir('/opt'):",
      "562:         os.mkdir('/opt')",
      "564:     # Create the script.",
      "565:     script_file = path.join('/opt', '.lxc-attach-script')",
      "566:     f = open(script_file, 'wb')",
      "",
      "[Added Lines]",
      "560:     (fd, script_file) = tempfile.mkstemp(prefix='lxc-attach-script')",
      "561:     f = os.fdopen(fd, 'wb')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "573:     # Ensure the script is executable.",
      "574:     os.chmod(script_file, 0700)",
      "579:     # Output log file.",
      "582:     # Error log file.",
      "585:     # Execute the script command.",
      "586:     try:",
      "",
      "[Removed Lines]",
      "576:     # Get temporary directory.",
      "577:     tempdir = tempfile.gettempdir()",
      "580:     stdout_file = open(path.join(tempdir, 'lxc-attach-script.log'), 'ab')",
      "583:     stderr_file = open(path.join(tempdir, 'lxc-attach-script.err'), 'ab')",
      "",
      "[Added Lines]",
      "572:     stdout_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-log')[0], 'ab')",
      "575:     stderr_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-err')[0], 'ab')",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1747:             ),",
      "1748:             archive_path=dict(",
      "1749:                 type='str',",
      "1751:             ),",
      "1752:             archive_compression=dict(",
      "1753:                 choices=LXC_COMPRESSION_MAP.keys(),",
      "",
      "[Removed Lines]",
      "1750:                 default='/tmp'",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1755:             )",
      "1756:         ),",
      "1757:         supports_check_mode=False,",
      "1758:     )",
      "1760:     if not HAS_LXC:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1749:         required_if = ([",
      "1750:             ('archive', True, ['archive_path'])",
      "1751:         ]),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c3999a92a1cd856ff9bc8913a93ff1aee8bffc3",
      "candidate_info": {
        "commit_hash": "7c3999a92a1cd856ff9bc8913a93ff1aee8bffc3",
        "repo": "ansible/ansible-modules-extras",
        "commit_url": "https://github.com/ansible/ansible-modules-extras/commit/7c3999a92a1cd856ff9bc8913a93ff1aee8bffc3",
        "files": [
          "cloud/lxc/lxc_container.py"
        ],
        "message": "do not use a predictable filenames in the LXC plugin\n\n* do not use a predictable filename for the LXC attach script\n\n* don't use predictable filenames for LXC attach script logging\n\n* don't set a predictable archive_path\n\n\n\nthis should prevent symlink attacks which could result in\n\n* data corruption\n\n* data leakage\n\n* privilege escalation",
        "before_after_code_files": [
          "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ansible/ansible-modules-extras/pull/1941"
        ],
        "olp_code_files": {
          "patch": [
            "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py"
          ],
          "candidate": [
            "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py"
          ]
        }
      },
      "candidate_diff": {
        "cloud/lxc/lxc_container.py||cloud/lxc/lxc_container.py": [
          "File: cloud/lxc/lxc_container.py -> cloud/lxc/lxc_container.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         description:",
          "145:           - Path the save the archived container. If the path does not exist",
          "146:             the archive method will attempt to create it.",
          "148:     archive_compression:",
          "149:         choices:",
          "150:           - gzip",
          "",
          "[Removed Lines]",
          "147:         default: /tmp",
          "",
          "[Added Lines]",
          "147:         default: null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:     import subprocess",
          "558:     import tempfile",
          "567:     try:",
          "568:         f.write(ATTACH_TEMPLATE % {'container_command': command})",
          "569:         f.flush()",
          "",
          "[Removed Lines]",
          "560:     # Ensure that the directory /opt exists.",
          "561:     if not path.isdir('/opt'):",
          "562:         os.mkdir('/opt')",
          "564:     # Create the script.",
          "565:     script_file = path.join('/opt', '.lxc-attach-script')",
          "566:     f = open(script_file, 'wb')",
          "",
          "[Added Lines]",
          "560:     (fd, script_file) = tempfile.mkstemp(prefix='lxc-attach-script')",
          "561:     f = os.fdopen(fd, 'wb')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "573:     # Ensure the script is executable.",
          "574:     os.chmod(script_file, 0700)",
          "579:     # Output log file.",
          "582:     # Error log file.",
          "585:     # Execute the script command.",
          "586:     try:",
          "",
          "[Removed Lines]",
          "576:     # Get temporary directory.",
          "577:     tempdir = tempfile.gettempdir()",
          "580:     stdout_file = open(path.join(tempdir, 'lxc-attach-script.log'), 'ab')",
          "583:     stderr_file = open(path.join(tempdir, 'lxc-attach-script.err'), 'ab')",
          "",
          "[Added Lines]",
          "572:     stdout_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-log')[0], 'ab')",
          "575:     stderr_file = os.fdopen(tempfile.mkstemp(prefix='lxc-attach-script-err')[0], 'ab')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1747:             ),",
          "1748:             archive_path=dict(",
          "1749:                 type='str',",
          "1751:             ),",
          "1752:             archive_compression=dict(",
          "1753:                 choices=LXC_COMPRESSION_MAP.keys(),",
          "",
          "[Removed Lines]",
          "1750:                 default='/tmp'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1755:             )",
          "1756:         ),",
          "1757:         supports_check_mode=False,",
          "1758:     )",
          "1760:     if not HAS_LXC:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1749:         required_if = ([",
          "1750:             ('archive', True, ['archive_path'])",
          "1751:         ]),",
          "",
          "---------------"
        ]
      }
    }
  ]
}