{
  "cve_id": "CVE-2024-22421",
  "cve_desc": "JupyterLab is an extensible environment for interactive and reproducible computing, based on the Jupyter Notebook and Architecture. Users of JupyterLab who click on a malicious link may get their `Authorization` and `XSRFToken` tokens exposed to a third party when running an older `jupyter-server` version. JupyterLab versions 4.1.0b2, 4.0.11, and 3.6.7 are patched. No workaround has been identified, however users should ensure to upgrade `jupyter-server` to version 2.7.2 or newer which includes a redirect vulnerability fix.",
  "repo": "jupyterlab/jupyterlab",
  "patch_hash": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
  "patch_info": {
    "commit_hash": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
    "repo": "jupyterlab/jupyterlab",
    "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6",
    "files": [
      "packages/apputils-extension/src/workspacesplugin.ts",
      "packages/hub-extension/src/index.ts",
      "packages/services/src/session/restapi.ts",
      "packages/services/src/setting/index.ts",
      "packages/services/src/terminal/restapi.ts",
      "packages/services/src/workspace/index.ts",
      "packages/services/test/session/session.spec.ts",
      "packages/services/test/setting/manager.spec.ts",
      "packages/services/test/workspace/manager.spec.ts",
      "packages/translation/src/server.ts"
    ],
    "message": "Merge pull request from GHSA-44cc-43rp-5947\n\nCo-authored-by: Fr\u00e9d\u00e9ric Collonval <fcollonval@users.noreply.github.com>",
    "before_after_code_files": [
      "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
      "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
      "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
      "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
      "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
      "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
      "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
      "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
      "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
      "packages/translation/src/server.ts||packages/translation/src/server.ts"
    ]
  },
  "patch_diff": {
    "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
      "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:         await this._state.save(LAST_SAVE_ID, path);",
      "214:         if (this._router) {",
      "215:           this._router.navigate(url, { hard: true });",
      "216:         } else {",
      "",
      "[Removed Lines]",
      "213:         const url = URLExt.join(this._application, 'workspaces', id);",
      "",
      "[Added Lines]",
      "213:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
      "214:         const url = URLExt.join(workspacesBase, id);",
      "215:         if (!workspacesBase.startsWith(url)) {",
      "216:           throw new Error('Can only be used for workspaces');",
      "217:         }",
      "",
      "---------------"
    ],
    "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
      "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:   });",
      "64:   const { commands } = app;",
      "",
      "[Removed Lines]",
      "60:   const restartUrl = hubServerName",
      "61:     ? hubHost + URLExt.join(hubPrefix, 'spawn', hubUser, hubServerName)",
      "62:     : hubHost + URLExt.join(hubPrefix, 'spawn');",
      "",
      "[Added Lines]",
      "60:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
      "61:   let restartUrl: string;",
      "62:   if (hubServerName) {",
      "63:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
      "64:     if (!suffix.startsWith(spawnBase)) {",
      "65:       throw new Error('Can only be used for spawn requests');",
      "66:     }",
      "67:     restartUrl = hubHost + suffix;",
      "68:   }",
      "69:   restartUrl = hubHost + spawnBase;",
      "",
      "---------------"
    ],
    "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts": [
      "File: packages/services/src/session/restapi.ts -> packages/services/src/session/restapi.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: export function getSessionUrl(baseUrl: string, id: string): string {",
      "46: }",
      "",
      "[Removed Lines]",
      "45:   return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);",
      "",
      "[Added Lines]",
      "45:   const servicesBase = URLExt.join(baseUrl, SESSION_SERVICE_URL);",
      "46:   const result = URLExt.join(servicesBase, id);",
      "47:   if (!result.startsWith(servicesBase)) {",
      "48:     throw new Error('Can only be used for services requests');",
      "49:   }",
      "50:   return result;",
      "",
      "---------------"
    ],
    "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts": [
      "File: packages/services/src/setting/index.ts -> packages/services/src/setting/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "161:     const idsOnlyParam = idsOnly",
      "162:       ? URLExt.objectToQueryString({ ids_only: true })",
      "163:       : '';",
      "165:   }",
      "166: }",
      "",
      "[Removed Lines]",
      "164:     return `${URLExt.join(base, SERVICE_SETTINGS_URL, id)}${idsOnlyParam}`;",
      "",
      "[Added Lines]",
      "164:     const settingsBase = URLExt.join(base, SERVICE_SETTINGS_URL);",
      "165:     const result = URLExt.join(settingsBase, id);",
      "166:     if (!result.startsWith(settingsBase)) {",
      "167:       throw new Error('Can only be used for workspaces requests');",
      "168:     }",
      "169:     return `${result}${idsOnlyParam}`;",
      "",
      "---------------"
    ],
    "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts": [
      "File: packages/services/src/terminal/restapi.ts -> packages/services/src/terminal/restapi.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "101:   settings: ServerConnection.ISettings = ServerConnection.makeSettings()",
      "102: ): Promise<void> {",
      "103:   Private.errorIfNotAvailable();",
      "105:   const init = { method: 'DELETE' };",
      "106:   const response = await ServerConnection.makeRequest(url, init, settings);",
      "107:   if (response.status === 404) {",
      "",
      "[Removed Lines]",
      "104:   const url = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL, name);",
      "",
      "[Added Lines]",
      "104:   const workspacesBase = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL);",
      "105:   const url = URLExt.join(workspacesBase, name);",
      "106:   if (!url.startsWith(workspacesBase)) {",
      "107:     throw new Error('Can only be used for terminal requests');",
      "108:   }",
      "",
      "---------------"
    ],
    "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts": [
      "File: packages/services/src/workspace/index.ts -> packages/services/src/workspace/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "180:   export function url(base: string, id: string): string {",
      "182:   }",
      "183: }",
      "",
      "[Removed Lines]",
      "181:     return URLExt.join(base, SERVICE_WORKSPACES_URL, id);",
      "",
      "[Added Lines]",
      "181:     const workspacesBase = URLExt.join(base, SERVICE_WORKSPACES_URL);",
      "182:     const result = URLExt.join(workspacesBase, id);",
      "183:     if (!result.startsWith(workspacesBase)) {",
      "184:       throw new Error('Can only be used for workspaces requests');",
      "185:     }",
      "186:     return result;",
      "",
      "---------------"
    ],
    "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts": [
      "File: packages/services/test/session/session.spec.ts -> packages/services/test/session/session.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:         SessionAPI.shutdownSession(UUID.uuid4())",
      "145:       ).resolves.not.toThrow();",
      "146:     });",
      "147:   });",
      "148: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148:     it('should reject invalid on invalid id', async () => {",
      "149:       await expect(SessionAPI.shutdownSession('../')).rejects.toThrow();",
      "150:     });",
      "",
      "---------------"
    ],
    "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts": [
      "File: packages/services/test/setting/manager.spec.ts -> packages/services/test/setting/manager.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:         expect((await manager.fetch(id)).id).toBe(id);",
      "55:       });",
      "56:     });",
      "58:     describe('#save()', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:       it('should reject on invalid id', async () => {",
      "58:         const id = '../';",
      "60:         const callback = async () => {",
      "61:           await manager.fetch(id);",
      "62:         };",
      "63:         await expect(callback).rejects.toThrow();",
      "64:       });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:         await manager.save(id, raw);",
      "65:         expect(JSON.parse((await manager.fetch(id)).raw).theme).toBe(theme);",
      "66:       });",
      "67:     });",
      "68:   });",
      "69: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:       it('should reject on invalid id', async () => {",
      "78:         const id = '../';",
      "79:         const theme = 'Foo Theme';",
      "80:         const raw = `{\"theme\": \"${theme}\"}`;",
      "82:         const callback = async () => {",
      "83:           await manager.save(id, raw);",
      "84:         };",
      "85:         await expect(callback).rejects.toThrow();",
      "86:       });",
      "",
      "---------------"
    ],
    "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts": [
      "File: packages/services/test/workspace/manager.spec.ts -> packages/services/test/workspace/manager.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
      "56:         await manager.remove(id);",
      "57:       });",
      "58:     });",
      "60:     describe('#list()', () => {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59:       it('should reject on invalid id', async () => {",
      "60:         const id = '../';",
      "62:         const callback = async () => {",
      "63:           await manager.fetch(id);",
      "64:         };",
      "65:         await expect(callback).rejects.toThrow();",
      "66:       });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
      "88:         await manager.remove(id);",
      "89:       });",
      "90:     });",
      "91:   });",
      "92: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:       it('should reject on invalid id', async () => {",
      "101:         const id = '../';",
      "103:         const callback = async () => {",
      "104:           await manager.save(id, { data: {}, metadata: { id } });",
      "105:         };",
      "106:         await expect(callback).rejects.toThrow();",
      "107:       });",
      "",
      "---------------"
    ],
    "packages/translation/src/server.ts||packages/translation/src/server.ts": [
      "File: packages/translation/src/server.ts -> packages/translation/src/server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:   const settings = serverSettings ?? ServerConnection.makeSettings();",
      "28:   translationsUrl =",
      "29:     translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}`;",
      "31:   let response: Response;",
      "32:   try {",
      "33:     response = await ServerConnection.makeRequest(requestUrl, init, settings);",
      "",
      "[Removed Lines]",
      "30:   const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);",
      "",
      "[Added Lines]",
      "30:   const translationsBase = URLExt.join(settings.baseUrl, translationsUrl);",
      "31:   const requestUrl = URLExt.join(translationsBase, locale);",
      "32:   if (!requestUrl.startsWith(translationsBase)) {",
      "33:     throw new Error('Can only be used for translations requests');",
      "34:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa",
      "candidate_info": {
        "commit_hash": "fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa",
        "files": [
          "packages/apputils-extension/src/workspacesplugin.ts",
          "packages/hub-extension/src/index.ts",
          "packages/services/src/session/restapi.ts",
          "packages/services/src/setting/index.ts",
          "packages/services/src/terminal/restapi.ts",
          "packages/services/src/workspace/index.ts",
          "packages/services/test/session/session.spec.ts",
          "packages/services/test/setting/manager.spec.ts",
          "packages/services/test/workspace/manager.spec.ts",
          "packages/translation/src/server.ts"
        ],
        "message": "Merge pull request from GHSA-44cc-43rp-5947\n\nCo-authored-by: Fr\u00e9d\u00e9ric Collonval <fcollonval@users.noreply.github.com>\n(cherry picked from commit 19bd9b96cb2e77170a67e43121637d0b5619e8c6)",
        "before_after_code_files": [
          "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
          "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
          "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
          "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
          "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
          "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
          "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
          "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
          "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
          "packages/translation/src/server.ts||packages/translation/src/server.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
            "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
            "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
            "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
            "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
            "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
            "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
            "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
            "packages/translation/src/server.ts||packages/translation/src/server.ts"
          ],
          "candidate": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
            "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
            "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
            "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
            "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
            "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
            "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
            "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
            "packages/translation/src/server.ts||packages/translation/src/server.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
          "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:         await this._state.save(LAST_SAVE_ID, path);",
          "222:         if (this._router) {",
          "223:           this._router.navigate(url, { hard: true });",
          "224:         } else {",
          "",
          "[Removed Lines]",
          "221:         const url = URLExt.join(this._application, 'workspaces', id);",
          "",
          "[Added Lines]",
          "221:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
          "222:         const url = URLExt.join(workspacesBase, id);",
          "223:         if (!workspacesBase.startsWith(url)) {",
          "224:           throw new Error('Can only be used for workspaces');",
          "225:         }",
          "",
          "---------------"
        ],
        "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
          "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   });",
          "63:   const { commands } = app;",
          "",
          "[Removed Lines]",
          "59:   const restartUrl = hubServerName",
          "60:     ? hubHost + URLExt.join(hubPrefix, 'spawn', hubUser, hubServerName)",
          "61:     : hubHost + URLExt.join(hubPrefix, 'spawn');",
          "",
          "[Added Lines]",
          "59:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
          "60:   let restartUrl: string;",
          "61:   if (hubServerName) {",
          "62:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
          "63:     if (!suffix.startsWith(spawnBase)) {",
          "64:       throw new Error('Can only be used for spawn requests');",
          "65:     }",
          "66:     restartUrl = hubHost + suffix;",
          "67:   }",
          "68:   restartUrl = hubHost + spawnBase;",
          "",
          "---------------"
        ],
        "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts": [
          "File: packages/services/src/session/restapi.ts -> packages/services/src/session/restapi.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: export function getSessionUrl(baseUrl: string, id: string): string {",
          "46: }",
          "",
          "[Removed Lines]",
          "45:   return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);",
          "",
          "[Added Lines]",
          "45:   const servicesBase = URLExt.join(baseUrl, SESSION_SERVICE_URL);",
          "46:   const result = URLExt.join(servicesBase, id);",
          "47:   if (!result.startsWith(servicesBase)) {",
          "48:     throw new Error('Can only be used for services requests');",
          "49:   }",
          "50:   return result;",
          "",
          "---------------"
        ],
        "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts": [
          "File: packages/services/src/setting/index.ts -> packages/services/src/setting/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   export function url(base: string, id: string): string {",
          "153:   }",
          "154: }",
          "",
          "[Removed Lines]",
          "152:     return URLExt.join(base, SERVICE_SETTINGS_URL, id);",
          "",
          "[Added Lines]",
          "152:     const settingsBase = URLExt.join(base, SERVICE_SETTINGS_URL);",
          "153:     const result = URLExt.join(settingsBase, id);",
          "154:     if (!result.startsWith(settingsBase)) {",
          "155:       throw new Error('Can only be used for workspaces requests');",
          "156:     }",
          "157:     return result;",
          "",
          "---------------"
        ],
        "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts": [
          "File: packages/services/src/terminal/restapi.ts -> packages/services/src/terminal/restapi.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   settings: ServerConnection.ISettings = ServerConnection.makeSettings()",
          "102: ): Promise<void> {",
          "103:   Private.errorIfNotAvailable();",
          "105:   const init = { method: 'DELETE' };",
          "106:   const response = await ServerConnection.makeRequest(url, init, settings);",
          "107:   if (response.status === 404) {",
          "",
          "[Removed Lines]",
          "104:   const url = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL, name);",
          "",
          "[Added Lines]",
          "104:   const workspacesBase = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL);",
          "105:   const url = URLExt.join(workspacesBase, name);",
          "106:   if (!url.startsWith(workspacesBase)) {",
          "107:     throw new Error('Can only be used for terminal requests');",
          "108:   }",
          "",
          "---------------"
        ],
        "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts": [
          "File: packages/services/src/workspace/index.ts -> packages/services/src/workspace/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:   export function url(base: string, id: string): string {",
          "182:   }",
          "183: }",
          "",
          "[Removed Lines]",
          "181:     return URLExt.join(base, SERVICE_WORKSPACES_URL, id);",
          "",
          "[Added Lines]",
          "181:     const workspacesBase = URLExt.join(base, SERVICE_WORKSPACES_URL);",
          "182:     const result = URLExt.join(workspacesBase, id);",
          "183:     if (!result.startsWith(workspacesBase)) {",
          "184:       throw new Error('Can only be used for workspaces requests');",
          "185:     }",
          "186:     return result;",
          "",
          "---------------"
        ],
        "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts": [
          "File: packages/services/test/session/session.spec.ts -> packages/services/test/session/session.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     it('should handle a 404 status', () => {",
          "158:       return SessionAPI.shutdownSession(UUID.uuid4());",
          "159:     });",
          "160:   });",
          "161: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     it('should reject invalid on invalid id', async () => {",
          "162:       await expect(SessionAPI.shutdownSession('../')).rejects.toThrow();",
          "163:     });",
          "",
          "---------------"
        ],
        "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts": [
          "File: packages/services/test/setting/manager.spec.ts -> packages/services/test/setting/manager.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         expect((await manager.fetch(id)).id).toBe(id);",
          "55:       });",
          "56:     });",
          "58:     describe('#save()', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:       it('should reject on invalid id', async () => {",
          "58:         const id = '../';",
          "60:         const callback = async () => {",
          "61:           await manager.fetch(id);",
          "62:         };",
          "63:         await expect(callback).rejects.toThrow();",
          "64:       });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         await manager.save(id, raw);",
          "65:         expect(JSON.parse((await manager.fetch(id)).raw).theme).toBe(theme);",
          "66:       });",
          "67:     });",
          "68:   });",
          "69: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:       it('should reject on invalid id', async () => {",
          "78:         const id = '../';",
          "79:         const theme = 'Foo Theme';",
          "80:         const raw = `{\"theme\": \"${theme}\"}`;",
          "82:         const callback = async () => {",
          "83:           await manager.save(id, raw);",
          "84:         };",
          "85:         await expect(callback).rejects.toThrow();",
          "86:       });",
          "",
          "---------------"
        ],
        "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts": [
          "File: packages/services/test/workspace/manager.spec.ts -> packages/services/test/workspace/manager.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
          "56:         await manager.remove(id);",
          "57:       });",
          "58:     });",
          "60:     describe('#list()', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:       it('should reject on invalid id', async () => {",
          "60:         const id = '../';",
          "62:         const callback = async () => {",
          "63:           await manager.fetch(id);",
          "64:         };",
          "65:         await expect(callback).rejects.toThrow();",
          "66:       });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
          "88:         await manager.remove(id);",
          "89:       });",
          "90:     });",
          "91:   });",
          "92: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:       it('should reject on invalid id', async () => {",
          "101:         const id = '../';",
          "103:         const callback = async () => {",
          "104:           await manager.save(id, { data: {}, metadata: { id } });",
          "105:         };",
          "106:         await expect(callback).rejects.toThrow();",
          "107:       });",
          "",
          "---------------"
        ],
        "packages/translation/src/server.ts||packages/translation/src/server.ts": [
          "File: packages/translation/src/server.ts -> packages/translation/src/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   const settings = serverSettings ?? ServerConnection.makeSettings();",
          "28:   translationsUrl =",
          "29:     translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}/`;",
          "31:   let response: Response;",
          "32:   try {",
          "33:     response = await ServerConnection.makeRequest(requestUrl, init, settings);",
          "",
          "[Removed Lines]",
          "30:   const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);",
          "",
          "[Added Lines]",
          "30:   const translationsBase = URLExt.join(settings.baseUrl, translationsUrl);",
          "31:   const requestUrl = URLExt.join(translationsBase, locale);",
          "32:   if (!requestUrl.startsWith(translationsBase)) {",
          "33:     throw new Error('Can only be used for translations requests');",
          "34:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96",
      "candidate_info": {
        "commit_hash": "1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96",
        "files": [
          "packages/apputils-extension/src/workspacesplugin.ts",
          "packages/hub-extension/src/index.ts",
          "packages/services/src/session/restapi.ts",
          "packages/services/src/setting/index.ts",
          "packages/services/src/terminal/restapi.ts",
          "packages/services/src/workspace/index.ts",
          "packages/services/test/session/session.spec.ts",
          "packages/services/test/setting/manager.spec.ts",
          "packages/services/test/workspace/manager.spec.ts",
          "packages/translation/src/server.ts"
        ],
        "message": "Merge pull request from GHSA-44cc-43rp-5947\n\nCo-authored-by: Fr\u00e9d\u00e9ric Collonval <fcollonval@users.noreply.github.com>\n(cherry picked from commit 19bd9b96cb2e77170a67e43121637d0b5619e8c6)",
        "before_after_code_files": [
          "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
          "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
          "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
          "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
          "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
          "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
          "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
          "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
          "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
          "packages/translation/src/server.ts||packages/translation/src/server.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
            "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
            "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
            "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
            "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
            "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
            "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
            "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
            "packages/translation/src/server.ts||packages/translation/src/server.ts"
          ],
          "candidate": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts",
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
            "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts",
            "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts",
            "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts",
            "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts",
            "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts",
            "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts",
            "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts",
            "packages/translation/src/server.ts||packages/translation/src/server.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
          "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:         await this._state.save(LAST_SAVE_ID, path);",
          "214:         if (this._router) {",
          "215:           this._router.navigate(url, { hard: true });",
          "216:         } else {",
          "",
          "[Removed Lines]",
          "213:         const url = URLExt.join(this._application, 'workspaces', id);",
          "",
          "[Added Lines]",
          "213:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
          "214:         const url = URLExt.join(workspacesBase, id);",
          "215:         if (!workspacesBase.startsWith(url)) {",
          "216:           throw new Error('Can only be used for workspaces');",
          "217:         }",
          "",
          "---------------"
        ],
        "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
          "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   });",
          "64:   const { commands } = app;",
          "",
          "[Removed Lines]",
          "60:   const restartUrl = hubServerName",
          "61:     ? hubHost + URLExt.join(hubPrefix, 'spawn', hubUser, hubServerName)",
          "62:     : hubHost + URLExt.join(hubPrefix, 'spawn');",
          "",
          "[Added Lines]",
          "60:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
          "61:   let restartUrl: string;",
          "62:   if (hubServerName) {",
          "63:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
          "64:     if (!suffix.startsWith(spawnBase)) {",
          "65:       throw new Error('Can only be used for spawn requests');",
          "66:     }",
          "67:     restartUrl = hubHost + suffix;",
          "68:   }",
          "69:   restartUrl = hubHost + spawnBase;",
          "",
          "---------------"
        ],
        "packages/services/src/session/restapi.ts||packages/services/src/session/restapi.ts": [
          "File: packages/services/src/session/restapi.ts -> packages/services/src/session/restapi.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: export function getSessionUrl(baseUrl: string, id: string): string {",
          "46: }",
          "",
          "[Removed Lines]",
          "45:   return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);",
          "",
          "[Added Lines]",
          "45:   const servicesBase = URLExt.join(baseUrl, SESSION_SERVICE_URL);",
          "46:   const result = URLExt.join(servicesBase, id);",
          "47:   if (!result.startsWith(servicesBase)) {",
          "48:     throw new Error('Can only be used for services requests');",
          "49:   }",
          "50:   return result;",
          "",
          "---------------"
        ],
        "packages/services/src/setting/index.ts||packages/services/src/setting/index.ts": [
          "File: packages/services/src/setting/index.ts -> packages/services/src/setting/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     const idsOnlyParam = idsOnly",
          "162:       ? URLExt.objectToQueryString({ ids_only: true })",
          "163:       : '';",
          "165:   }",
          "166: }",
          "",
          "[Removed Lines]",
          "164:     return `${URLExt.join(base, SERVICE_SETTINGS_URL, id)}${idsOnlyParam}`;",
          "",
          "[Added Lines]",
          "164:     const settingsBase = URLExt.join(base, SERVICE_SETTINGS_URL);",
          "165:     const result = URLExt.join(settingsBase, id);",
          "166:     if (!result.startsWith(settingsBase)) {",
          "167:       throw new Error('Can only be used for workspaces requests');",
          "168:     }",
          "169:     return `${result}${idsOnlyParam}`;",
          "",
          "---------------"
        ],
        "packages/services/src/terminal/restapi.ts||packages/services/src/terminal/restapi.ts": [
          "File: packages/services/src/terminal/restapi.ts -> packages/services/src/terminal/restapi.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   settings: ServerConnection.ISettings = ServerConnection.makeSettings()",
          "102: ): Promise<void> {",
          "103:   Private.errorIfNotAvailable();",
          "105:   const init = { method: 'DELETE' };",
          "106:   const response = await ServerConnection.makeRequest(url, init, settings);",
          "107:   if (response.status === 404) {",
          "",
          "[Removed Lines]",
          "104:   const url = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL, name);",
          "",
          "[Added Lines]",
          "104:   const workspacesBase = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL);",
          "105:   const url = URLExt.join(workspacesBase, name);",
          "106:   if (!url.startsWith(workspacesBase)) {",
          "107:     throw new Error('Can only be used for terminal requests');",
          "108:   }",
          "",
          "---------------"
        ],
        "packages/services/src/workspace/index.ts||packages/services/src/workspace/index.ts": [
          "File: packages/services/src/workspace/index.ts -> packages/services/src/workspace/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:   export function url(base: string, id: string): string {",
          "182:   }",
          "183: }",
          "",
          "[Removed Lines]",
          "181:     return URLExt.join(base, SERVICE_WORKSPACES_URL, id);",
          "",
          "[Added Lines]",
          "181:     const workspacesBase = URLExt.join(base, SERVICE_WORKSPACES_URL);",
          "182:     const result = URLExt.join(workspacesBase, id);",
          "183:     if (!result.startsWith(workspacesBase)) {",
          "184:       throw new Error('Can only be used for workspaces requests');",
          "185:     }",
          "186:     return result;",
          "",
          "---------------"
        ],
        "packages/services/test/session/session.spec.ts||packages/services/test/session/session.spec.ts": [
          "File: packages/services/test/session/session.spec.ts -> packages/services/test/session/session.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:         SessionAPI.shutdownSession(UUID.uuid4())",
          "145:       ).resolves.not.toThrow();",
          "146:     });",
          "147:   });",
          "148: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     it('should reject invalid on invalid id', async () => {",
          "149:       await expect(SessionAPI.shutdownSession('../')).rejects.toThrow();",
          "150:     });",
          "",
          "---------------"
        ],
        "packages/services/test/setting/manager.spec.ts||packages/services/test/setting/manager.spec.ts": [
          "File: packages/services/test/setting/manager.spec.ts -> packages/services/test/setting/manager.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         expect((await manager.fetch(id)).id).toBe(id);",
          "55:       });",
          "56:     });",
          "58:     describe('#save()', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:       it('should reject on invalid id', async () => {",
          "58:         const id = '../';",
          "60:         const callback = async () => {",
          "61:           await manager.fetch(id);",
          "62:         };",
          "63:         await expect(callback).rejects.toThrow();",
          "64:       });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         await manager.save(id, raw);",
          "65:         expect(JSON.parse((await manager.fetch(id)).raw).theme).toBe(theme);",
          "66:       });",
          "67:     });",
          "68:   });",
          "69: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:       it('should reject on invalid id', async () => {",
          "78:         const id = '../';",
          "79:         const theme = 'Foo Theme';",
          "80:         const raw = `{\"theme\": \"${theme}\"}`;",
          "82:         const callback = async () => {",
          "83:           await manager.save(id, raw);",
          "84:         };",
          "85:         await expect(callback).rejects.toThrow();",
          "86:       });",
          "",
          "---------------"
        ],
        "packages/services/test/workspace/manager.spec.ts||packages/services/test/workspace/manager.spec.ts": [
          "File: packages/services/test/workspace/manager.spec.ts -> packages/services/test/workspace/manager.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
          "56:         await manager.remove(id);",
          "57:       });",
          "58:     });",
          "60:     describe('#list()', () => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:       it('should reject on invalid id', async () => {",
          "60:         const id = '../';",
          "62:         const callback = async () => {",
          "63:           await manager.fetch(id);",
          "64:         };",
          "65:         await expect(callback).rejects.toThrow();",
          "66:       });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         expect((await manager.fetch(id)).metadata.id).toBe(id);",
          "88:         await manager.remove(id);",
          "89:       });",
          "90:     });",
          "91:   });",
          "92: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:       it('should reject on invalid id', async () => {",
          "101:         const id = '../';",
          "103:         const callback = async () => {",
          "104:           await manager.save(id, { data: {}, metadata: { id } });",
          "105:         };",
          "106:         await expect(callback).rejects.toThrow();",
          "107:       });",
          "",
          "---------------"
        ],
        "packages/translation/src/server.ts||packages/translation/src/server.ts": [
          "File: packages/translation/src/server.ts -> packages/translation/src/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   const settings = serverSettings ?? ServerConnection.makeSettings();",
          "28:   translationsUrl =",
          "29:     translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}`;",
          "31:   let response: Response;",
          "32:   try {",
          "33:     response = await ServerConnection.makeRequest(requestUrl, init, settings);",
          "",
          "[Removed Lines]",
          "30:   const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);",
          "",
          "[Added Lines]",
          "30:   const translationsBase = URLExt.join(settings.baseUrl, translationsUrl);",
          "31:   const requestUrl = URLExt.join(translationsBase, locale);",
          "32:   if (!requestUrl.startsWith(translationsBase)) {",
          "33:     throw new Error('Can only be used for translations requests');",
          "34:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "926a19dfab14c1de326490bc0c63f74cbdfd5a83",
      "candidate_info": {
        "commit_hash": "926a19dfab14c1de326490bc0c63f74cbdfd5a83",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/926a19dfab14c1de326490bc0c63f74cbdfd5a83",
        "files": [
          "packages/apputils-extension/src/workspacesplugin.ts"
        ],
        "message": "Fix workspaces URL guard (#15842)",
        "before_after_code_files": [
          "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
          ],
          "candidate": [
            "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/apputils-extension/src/workspacesplugin.ts||packages/apputils-extension/src/workspacesplugin.ts": [
          "File: packages/apputils-extension/src/workspacesplugin.ts -> packages/apputils-extension/src/workspacesplugin.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         const workspacesBase = URLExt.join(this._application, 'workspaces');",
          "214:         const url = URLExt.join(workspacesBase, id);",
          "216:           throw new Error('Can only be used for workspaces');",
          "217:         }",
          "218:         if (this._router) {",
          "",
          "[Removed Lines]",
          "215:         if (!workspacesBase.startsWith(url)) {",
          "",
          "[Added Lines]",
          "215:         if (!url.startsWith(workspacesBase)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c22b5b3acc00b81767ea2492e7deff85e853a7c",
      "candidate_info": {
        "commit_hash": "9c22b5b3acc00b81767ea2492e7deff85e853a7c",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/9c22b5b3acc00b81767ea2492e7deff85e853a7c",
        "files": [
          ".github/workflows/linuxjs-tests.yml",
          "packages/hub-extension/babel.config.js",
          "packages/hub-extension/jest.config.js",
          "packages/hub-extension/package.json",
          "packages/hub-extension/src/index.ts",
          "packages/hub-extension/test/hub.spec.ts",
          "packages/hub-extension/tsconfig.test.json",
          "yarn.lock"
        ],
        "message": "Backport PR #16471: Use correct hub restart URL (#16502)\n\nCo-authored-by: Mahendra Paipuri <44365948+mahendrapaipuri@users.noreply.github.com>",
        "before_after_code_files": [
          "packages/hub-extension/babel.config.js||packages/hub-extension/babel.config.js",
          "packages/hub-extension/jest.config.js||packages/hub-extension/jest.config.js",
          "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
          "packages/hub-extension/test/hub.spec.ts||packages/hub-extension/test/hub.spec.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts"
          ],
          "candidate": [
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/hub-extension/babel.config.js||packages/hub-extension/babel.config.js": [
          "File: packages/hub-extension/babel.config.js -> packages/hub-extension/babel.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: module.exports = require('@jupyterlab/testing/lib/babel-config');",
          "",
          "---------------"
        ],
        "packages/hub-extension/jest.config.js||packages/hub-extension/jest.config.js": [
          "File: packages/hub-extension/jest.config.js -> packages/hub-extension/jest.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: const func = require('@jupyterlab/testing/lib/jest-config');",
          "7: module.exports = func(__dirname);",
          "",
          "---------------"
        ],
        "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
          "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
          "62:   if (hubServerName) {",
          "63:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
          "64:     if (!suffix.startsWith(spawnBase)) {",
          "",
          "[Removed Lines]",
          "61:   let restartUrl: string;",
          "",
          "[Added Lines]",
          "61:   let restartUrl = hubHost + spawnBase;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     }",
          "67:     restartUrl = hubHost + suffix;",
          "68:   }",
          "71:   const { commands } = app;",
          "",
          "[Removed Lines]",
          "69:   restartUrl = hubHost + spawnBase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/hub-extension/test/hub.spec.ts||packages/hub-extension/test/hub.spec.ts": [
          "File: packages/hub-extension/test/hub.spec.ts -> packages/hub-extension/test/hub.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { JupyterFrontEnd } from '@jupyterlab/application';",
          "5: import { nullTranslator } from '@jupyterlab/translation';",
          "6: import { CommandRegistry } from '@lumino/commands';",
          "7: import extensions, { CommandIDs } from '@jupyterlab/hub-extension';",
          "9: describe('@jupyterlab/hub-extension', () => {",
          "11:   const hubPrefix = '/hub';",
          "12:   const hubUser = 'test_user';",
          "13:   const hubServerName = 'test_server';",
          "16:   const hubExtension = extensions[0];",
          "19:   let windowOpenSpy: jest.SpyInstance;",
          "22:   const { open } = window;",
          "24:   beforeEach(() => {",
          "26:     window.open = jest.fn();",
          "27:     windowOpenSpy = jest.spyOn(window, 'open');",
          "28:   });",
          "30:   afterAll(() => {",
          "32:     window.open = open;",
          "33:   });",
          "35:   describe('hub commands', () => {",
          "36:     const activateHubExtension = (",
          "37:       commands: CommandRegistry,",
          "38:       urls: Partial<JupyterFrontEnd.IPaths['urls']>",
          "39:     ) => {",
          "40:       return hubExtension.activate(",
          "41:         { commands } as JupyterFrontEnd,",
          "42:         { urls },",
          "43:         nullTranslator",
          "44:       );",
          "45:     };",
          "46:     it('should add hub commands to registry', async () => {",
          "47:       let commands = new CommandRegistry();",
          "48:       void activateHubExtension(commands, {",
          "49:         hubPrefix",
          "50:       });",
          "52:       expect(commands.hasCommand(CommandIDs.controlPanel)).toBeTruthy();",
          "53:       expect(commands.hasCommand(CommandIDs.restart)).toBeTruthy();",
          "54:       expect(commands.hasCommand(CommandIDs.logout)).toBeTruthy();",
          "55:     });",
          "57:     it('should not add hub commands when hubPrefix is empty', async () => {",
          "58:       let commands = new CommandRegistry();",
          "59:       void activateHubExtension(commands, {",
          "60:         hubPrefix: ''",
          "61:       });",
          "63:       expect(commands.hasCommand(CommandIDs.controlPanel)).toBeFalsy();",
          "64:       expect(commands.hasCommand(CommandIDs.restart)).toBeFalsy();",
          "65:       expect(commands.hasCommand(CommandIDs.logout)).toBeFalsy();",
          "66:     });",
          "68:     it('should include hubServerName in restartUrl when it is non empty', async () => {",
          "69:       let commands = new CommandRegistry();",
          "70:       void activateHubExtension(commands, {",
          "71:         hubPrefix,",
          "72:         hubUser,",
          "73:         hubServerName",
          "74:       });",
          "76:       await commands.execute(CommandIDs.restart);",
          "77:       expect(windowOpenSpy).toHaveBeenCalledWith(",
          "78:         `${hubPrefix}/spawn/${hubUser}/${hubServerName}`,",
          "79:         '_blank'",
          "80:       );",
          "81:     });",
          "83:     it('should set spawn URL for default server when hubServerName is empty', async () => {",
          "84:       let commands = new CommandRegistry();",
          "85:       void activateHubExtension(commands, {",
          "86:         hubPrefix,",
          "87:         hubUser",
          "88:       });",
          "90:       await commands.execute(CommandIDs.restart);",
          "91:       expect(windowOpenSpy).toHaveBeenCalledWith(",
          "92:         `${hubPrefix}/spawn`,",
          "93:         '_blank'",
          "94:       );",
          "95:     });",
          "97:     it('should set correct hub home URL', async () => {",
          "98:       let commands = new CommandRegistry();",
          "99:       void activateHubExtension(commands, {",
          "100:         hubPrefix,",
          "101:         hubUser,",
          "102:         hubServerName",
          "103:       });",
          "105:       await commands.execute(CommandIDs.controlPanel);",
          "106:       expect(windowOpenSpy).toHaveBeenCalledWith(`${hubPrefix}/home`, '_blank');",
          "107:     });",
          "109:     it('should reject on invalid username', async () => {",
          "110:       let commands = new CommandRegistry();",
          "111:       const callback = async () => {",
          "112:         await activateHubExtension(commands, {",
          "113:           hubPrefix,",
          "114:           hubUser: '../',",
          "115:           hubServerName",
          "116:         });",
          "117:       };",
          "118:       await expect(callback).rejects.toThrow();",
          "119:     });",
          "121:     it('should reject on invalid server name', async () => {",
          "122:       let commands = new CommandRegistry();",
          "123:       const callback = async () => {",
          "124:         await activateHubExtension(commands, {",
          "125:           hubPrefix,",
          "126:           hubUser,",
          "127:           hubServerName: '../../'",
          "128:         });",
          "129:       };",
          "130:       await expect(callback).rejects.toThrow();",
          "131:     });",
          "132:   });",
          "133: });",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:     \"@jupyterlab/coreutils\": ^6.2.2",
          "3572:     \"@jupyterlab/services\": ^7.2.2",
          "3573:     \"@jupyterlab/translation\": ^4.2.2",
          "3574:     rimraf: ~5.0.5",
          "3575:     typescript: ~5.1.6",
          "3576:   languageName: unknown",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3574:     \"@types/jest\": ^29.2.0",
          "3575:     jest: ^29.2.0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2a39d17e7acfc19b63c8ed360fa3700aae4523f",
      "candidate_info": {
        "commit_hash": "e2a39d17e7acfc19b63c8ed360fa3700aae4523f",
        "repo": "jupyterlab/jupyterlab",
        "commit_url": "https://github.com/jupyterlab/jupyterlab/commit/e2a39d17e7acfc19b63c8ed360fa3700aae4523f",
        "files": [
          ".github/workflows/linuxjs-tests.yml",
          "packages/hub-extension/babel.config.js",
          "packages/hub-extension/jest.config.js",
          "packages/hub-extension/package.json",
          "packages/hub-extension/src/index.ts",
          "packages/hub-extension/test/hub.spec.ts",
          "packages/hub-extension/tsconfig.test.json",
          "yarn.lock"
        ],
        "message": "Use correct hub restart URL (#16471)\n\n* fix: Use correct hub restart URL\n\n- When `hubServerName` is found in jupyterlab config, override the base `restartUrl` with current spawner's `restartUrl`\n\n* test: Add a basic unit test for hub-extension\n\nSigned-off-by: Mahendra Paipuri <mahendra.paipuri@gmail.com>\n\n* ci: Add hub-extension entry to group\n\nSigned-off-by: Mahendra Paipuri <mahendra.paipuri@gmail.com>\n\n* Remove use of `any`\n\n* Add tests against GHSA-44cc-43rp-5947\n\n---------\n\nSigned-off-by: Mahendra Paipuri <mahendra.paipuri@gmail.com>\nCo-authored-by: krassowski <5832902+krassowski@users.noreply.github.com>",
        "before_after_code_files": [
          "packages/hub-extension/babel.config.js||packages/hub-extension/babel.config.js",
          "packages/hub-extension/jest.config.js||packages/hub-extension/jest.config.js",
          "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts",
          "packages/hub-extension/test/hub.spec.ts||packages/hub-extension/test/hub.spec.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts"
          ],
          "candidate": [
            "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/hub-extension/babel.config.js||packages/hub-extension/babel.config.js": [
          "File: packages/hub-extension/babel.config.js -> packages/hub-extension/babel.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: module.exports = require('@jupyterlab/testing/lib/babel-config');",
          "",
          "---------------"
        ],
        "packages/hub-extension/jest.config.js||packages/hub-extension/jest.config.js": [
          "File: packages/hub-extension/jest.config.js -> packages/hub-extension/jest.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: const func = require('@jupyterlab/testing/lib/jest-config');",
          "7: module.exports = func(__dirname);",
          "",
          "---------------"
        ],
        "packages/hub-extension/src/index.ts||packages/hub-extension/src/index.ts": [
          "File: packages/hub-extension/src/index.ts -> packages/hub-extension/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:   const spawnBase = URLExt.join(hubPrefix, 'spawn');",
          "62:   if (hubServerName) {",
          "63:     const suffix = URLExt.join(spawnBase, hubUser, hubServerName);",
          "64:     if (!suffix.startsWith(spawnBase)) {",
          "",
          "[Removed Lines]",
          "61:   let restartUrl: string;",
          "",
          "[Added Lines]",
          "61:   let restartUrl = hubHost + spawnBase;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     }",
          "67:     restartUrl = hubHost + suffix;",
          "68:   }",
          "71:   const { commands } = app;",
          "",
          "[Removed Lines]",
          "69:   restartUrl = hubHost + spawnBase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/hub-extension/test/hub.spec.ts||packages/hub-extension/test/hub.spec.ts": [
          "File: packages/hub-extension/test/hub.spec.ts -> packages/hub-extension/test/hub.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { JupyterFrontEnd } from '@jupyterlab/application';",
          "5: import { nullTranslator } from '@jupyterlab/translation';",
          "6: import { CommandRegistry } from '@lumino/commands';",
          "7: import extensions, { CommandIDs } from '@jupyterlab/hub-extension';",
          "9: describe('@jupyterlab/hub-extension', () => {",
          "11:   const hubPrefix = '/hub';",
          "12:   const hubUser = 'test_user';",
          "13:   const hubServerName = 'test_server';",
          "16:   const hubExtension = extensions[0];",
          "19:   let windowOpenSpy: jest.SpyInstance;",
          "22:   const { open } = window;",
          "24:   beforeEach(() => {",
          "26:     window.open = jest.fn();",
          "27:     windowOpenSpy = jest.spyOn(window, 'open');",
          "28:   });",
          "30:   afterAll(() => {",
          "32:     window.open = open;",
          "33:   });",
          "35:   describe('hub commands', () => {",
          "36:     const activateHubExtension = (",
          "37:       commands: CommandRegistry,",
          "38:       urls: Partial<JupyterFrontEnd.IPaths['urls']>",
          "39:     ) => {",
          "40:       return hubExtension.activate(",
          "41:         { commands } as JupyterFrontEnd,",
          "42:         { urls },",
          "43:         nullTranslator",
          "44:       );",
          "45:     };",
          "46:     it('should add hub commands to registry', async () => {",
          "47:       let commands = new CommandRegistry();",
          "48:       void activateHubExtension(commands, {",
          "49:         hubPrefix",
          "50:       });",
          "52:       expect(commands.hasCommand(CommandIDs.controlPanel)).toBeTruthy();",
          "53:       expect(commands.hasCommand(CommandIDs.restart)).toBeTruthy();",
          "54:       expect(commands.hasCommand(CommandIDs.logout)).toBeTruthy();",
          "55:     });",
          "57:     it('should not add hub commands when hubPrefix is empty', async () => {",
          "58:       let commands = new CommandRegistry();",
          "59:       void activateHubExtension(commands, {",
          "60:         hubPrefix: ''",
          "61:       });",
          "63:       expect(commands.hasCommand(CommandIDs.controlPanel)).toBeFalsy();",
          "64:       expect(commands.hasCommand(CommandIDs.restart)).toBeFalsy();",
          "65:       expect(commands.hasCommand(CommandIDs.logout)).toBeFalsy();",
          "66:     });",
          "68:     it('should include hubServerName in restartUrl when it is non empty', async () => {",
          "69:       let commands = new CommandRegistry();",
          "70:       void activateHubExtension(commands, {",
          "71:         hubPrefix,",
          "72:         hubUser,",
          "73:         hubServerName",
          "74:       });",
          "76:       await commands.execute(CommandIDs.restart);",
          "77:       expect(windowOpenSpy).toHaveBeenCalledWith(",
          "78:         `${hubPrefix}/spawn/${hubUser}/${hubServerName}`,",
          "79:         '_blank'",
          "80:       );",
          "81:     });",
          "83:     it('should set spawn URL for default server when hubServerName is empty', async () => {",
          "84:       let commands = new CommandRegistry();",
          "85:       void activateHubExtension(commands, {",
          "86:         hubPrefix,",
          "87:         hubUser",
          "88:       });",
          "90:       await commands.execute(CommandIDs.restart);",
          "91:       expect(windowOpenSpy).toHaveBeenCalledWith(",
          "92:         `${hubPrefix}/spawn`,",
          "93:         '_blank'",
          "94:       );",
          "95:     });",
          "97:     it('should set correct hub home URL', async () => {",
          "98:       let commands = new CommandRegistry();",
          "99:       void activateHubExtension(commands, {",
          "100:         hubPrefix,",
          "101:         hubUser,",
          "102:         hubServerName",
          "103:       });",
          "105:       await commands.execute(CommandIDs.controlPanel);",
          "106:       expect(windowOpenSpy).toHaveBeenCalledWith(`${hubPrefix}/home`, '_blank');",
          "107:     });",
          "109:     it('should reject on invalid username', async () => {",
          "110:       let commands = new CommandRegistry();",
          "111:       const callback = async () => {",
          "112:         await activateHubExtension(commands, {",
          "113:           hubPrefix,",
          "114:           hubUser: '../',",
          "115:           hubServerName",
          "116:         });",
          "117:       };",
          "118:       await expect(callback).rejects.toThrow();",
          "119:     });",
          "121:     it('should reject on invalid server name', async () => {",
          "122:       let commands = new CommandRegistry();",
          "123:       const callback = async () => {",
          "124:         await activateHubExtension(commands, {",
          "125:           hubPrefix,",
          "126:           hubUser,",
          "127:           hubServerName: '../../'",
          "128:         });",
          "129:       };",
          "130:       await expect(callback).rejects.toThrow();",
          "131:     });",
          "132:   });",
          "133: });",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3571:     \"@jupyterlab/coreutils\": ^6.3.0-alpha.0",
          "3572:     \"@jupyterlab/services\": ^7.3.0-alpha.0",
          "3573:     \"@jupyterlab/translation\": ^4.3.0-alpha.0",
          "3574:     rimraf: ~5.0.5",
          "3575:     typescript: ~5.1.6",
          "3576:   languageName: unknown",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3574:     \"@types/jest\": ^29.2.0",
          "3575:     jest: ^29.2.0",
          "",
          "---------------"
        ]
      }
    }
  ]
}