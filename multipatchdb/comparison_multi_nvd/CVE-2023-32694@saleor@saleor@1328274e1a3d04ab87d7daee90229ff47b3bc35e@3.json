{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "786aaa3c48df006e25c8e8e353b4f5b2cfab6ddb",
      "candidate_info": {
        "commit_hash": "786aaa3c48df006e25c8e8e353b4f5b2cfab6ddb",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/786aaa3c48df006e25c8e8e353b4f5b2cfab6ddb",
        "files": [
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/cassettes/test_handle_authorization_with_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment_with_adyen_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/cassettes/test_process_payment_with_auto_capture.yaml",
          "saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Merge branch 'adyen_integration' into add-adyen-support-for-3d-secure",
        "before_after_code_files": [
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py",
          "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py",
          "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:     response, error = _fetch_gateway_response(",
          "123:         plugin_manager.capture_payment, payment.gateway, payment_data",
          "124:     )",
          "126:         update_card_details(payment, response)",
          "127:     return create_transaction(",
          "128:         payment=payment,",
          "",
          "[Removed Lines]",
          "125:     if response.card_info:",
          "",
          "[Added Lines]",
          "125:     if response and response.card_info:",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from ..utils import get_supported_currencies",
          "21: from .utils import (",
          "22:     api_call,",
          "23:     request_data_for_gateway_config,",
          "24:     request_data_for_payment,",
          "26:     request_for_payment_refund,",
          "27:     update_payment_with_action_required_data,",
          "28: )",
          "",
          "[Removed Lines]",
          "25:     request_for_payment_capture,",
          "",
          "[Added Lines]",
          "23:     call_capture,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     return wrapped",
          "46: FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "49: class AdyenGatewayPlugin(BasePlugin):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: # https://docs.adyen.com/checkout/payment-result-codes",
          "48: PENDING_STATUSES = [\"pending\", \"received\"]",
          "49: AUTH_STATUS = \"authorised\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "58:         {\"name\": \"Live\", \"value\": \"\"},",
          "59:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
          "60:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
          "61:         {\"name\": \"Notification user\", \"value\": \"\"},",
          "62:         {\"name\": \"Notification password\", \"value\": \"\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:         {\"name\": \"Automatic payment capture\", \"value\": False},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:         \"Automatically mark payment as a capture\": {",
          "119:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "120:             \"help_text\": (",
          "129:             ),",
          "130:             \"label\": \"Automatically mark payment as a capture\",",
          "131:         },",
          "132:         \"HMAC secret key\": {",
          "133:             \"type\": ConfigurationTypeField.SECRET,",
          "134:             \"help_text\": (",
          "",
          "[Removed Lines]",
          "121:                 \"Saleor by default doesn't receive notification which payment has \"",
          "122:                 \"status capture, all sucess payment can be marked as a capture by \"",
          "123:                 \"default.\"",
          "124:                 \"A payment that is automatically captured does not trigger a \"",
          "125:                 \"separate CAPTURE notification. If you are using delayed automatic \"",
          "126:                 \"capture (by having a Capture Delay of a fixed number of days), you \"",
          "127:                 \"can optionally receive CAPTURE notifications. To enable this \"",
          "128:                 \"functionality, contact with Adyen Support Team.\"",
          "",
          "[Added Lines]",
          "125:                 \"All authorized payments will be marked as paid. This should be enabled\"",
          "126:                 \" when Adyen uses automatically auto-capture. Saleor doesn't support \"",
          "127:                 \"delayed automatically capture.\"",
          "131:         \"Automatic payment capture\": {",
          "132:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "133:             \"help_text\": \"Determines if Saleor should automaticaly capture payments.\",",
          "134:             \"label\": \"Automatic payment capture\",",
          "135:         },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "169:         self.config = GatewayConfig(",
          "170:             gateway_name=GATEWAY_NAME,",
          "172:             supported_currencies=configuration[\"Supported currencies\"],",
          "173:             connection_params={",
          "174:                 \"api_key\": configuration[\"API key\"],",
          "",
          "[Removed Lines]",
          "171:             auto_capture=configuration[\"Automatically mark payment as a capture\"],",
          "",
          "[Added Lines]",
          "175:             auto_capture=configuration[\"Automatic payment capture\"],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
          "180:                 \"webhook_user\": configuration[\"Notification user\"],",
          "181:                 \"webhook_user_password\": configuration[\"Notification password\"],",
          "182:             },",
          "183:         )",
          "184:         api_key = self.config.connection_params[\"api_key\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:                 \"adyen_auto_capture\": configuration[",
          "187:                     \"Automatically mark payment as a capture\"",
          "188:                 ],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "224:                     \"field\": \"origin_key\",",
          "225:                     \"value\": config.connection_params[\"origin_key\"],",
          "226:                 },",
          "231:             ],",
          "232:             currencies=self.get_supported_currencies([]),",
          "233:         )",
          "",
          "[Removed Lines]",
          "227:                 {",
          "228:                     \"field\": \"config\",",
          "229:                     \"value\": json.dumps(response.message.get(\"paymentMethods\", {})),",
          "230:                 },",
          "",
          "[Added Lines]",
          "234:                 {\"field\": \"config\", \"value\": json.dumps(response.message)},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "264:             origin_url=self.config.connection_params[\"origin_url\"],",
          "265:         )",
          "267:         result = api_call(request_data, self.adyen.checkout.payments)",
          "270:             kind = TransactionKind.CAPTURE",
          "274:         action = result.message.get(\"action\")",
          "275:         error_message = result.message.get(\"refusalReason\")",
          "",
          "[Removed Lines]",
          "268:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "269:         if self.config.auto_capture:",
          "271:         else:",
          "272:             kind = TransactionKind.AUTH",
          "",
          "[Added Lines]",
          "271:         result_code = result.message[\"resultCode\"].strip().lower()",
          "272:         is_success = result_code not in FAILED_STATUSES",
          "273:         adyen_auto_capture = self.config.connection_params[\"adyen_auto_capture\"]",
          "274:         kind = TransactionKind.AUTH",
          "275:         if adyen_auto_capture:",
          "276:             kind = TransactionKind.CAPTURE",
          "277:         elif result_code in PENDING_STATUSES:",
          "278:             kind = TransactionKind.PENDING",
          "280:         # If auto capture is enabled, let's make a capture the auth payment",
          "281:         if self.config.auto_capture and result_code == AUTH_STATUS:",
          "283:             result = call_capture(",
          "284:                 payment_information=payment_information,",
          "285:                 merchant_account=self.config.connection_params[\"merchant_account\"],",
          "286:                 token=result.message.get(\"pspReference\"),",
          "287:                 adyen_client=self.adyen,",
          "288:             )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "333:     ) -> \"GatewayResponse\":",
          "335:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "336:         transaction = (",
          "337:             Transaction.objects.filter(",
          "338:                 payment__id=payment_id, kind=TransactionKind.AUTH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:         # we take Auth kind because it contains the transaction id that we need",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "377:         if not transaction:",
          "378:             raise PaymentError(\"Cannot find a payment reference to capture.\")",
          "381:             payment_information=payment_information,",
          "382:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "383:             token=transaction.token,",
          "384:         )",
          "386:         return GatewayResponse(",
          "387:             is_success=True,",
          "388:             action_required=False,",
          "",
          "[Removed Lines]",
          "380:         request = request_for_payment_capture(",
          "385:         result = api_call(request, self.adyen.payment.capture)",
          "",
          "[Added Lines]",
          "397:         result = call_capture(",
          "401:             adyen_client=self.adyen,",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/conftest.py||saleor/payment/gateways/adyen/tests/conftest.py": [
          "File: saleor/payment/gateways/adyen/tests/conftest.py -> saleor/payment/gateways/adyen/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         return_url=None,",
          "16:         origin_key=None,",
          "17:         origin_url=None,",
          "18:         auto_capture=None,",
          "19:     ):",
          "20:         api_key = api_key or \"test_key\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:         adyen_auto_capture=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         return_url = return_url or \"http://127.0.0.1:3000/\"",
          "23:         origin_key = origin_key or \"test_origin_key\"",
          "24:         origin_url = origin_url or \"http://127.0.0.1:3000\"",
          "25:         auto_capture = auto_capture or False",
          "26:         settings.PLUGINS = [\"saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin\"]",
          "27:         manager = get_plugins_manager()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         adyen_auto_capture = adyen_auto_capture or False",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:                     {\"name\": \"Origin Url\", \"value\": origin_url},",
          "38:                     {",
          "39:                         \"name\": \"Automatically mark payment as a capture\",",
          "41:                     },",
          "42:                     {\"name\": \"Supported currencies\", \"value\": \"USD\"},",
          "43:                 ],",
          "44:             },",
          "",
          "[Removed Lines]",
          "40:                         \"value\": auto_capture,",
          "",
          "[Added Lines]",
          "42:                         \"value\": adyen_auto_capture,",
          "44:                     {\"name\": \"Automatic payment capture\", \"value\": auto_capture},",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_plugin.py||saleor/payment/gateways/adyen/tests/test_plugin.py": [
          "File: saleor/payment/gateways/adyen/tests/test_plugin.py -> saleor/payment/gateways/adyen/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     }",
          "31:     assert config[1][\"field\"] == \"config\"",
          "32:     config = json.loads(config[1][\"value\"])",
          "36: @pytest.mark.vcr",
          "",
          "[Removed Lines]",
          "33:     assert isinstance(config, list)",
          "",
          "[Added Lines]",
          "33:     assert isinstance(config, dict)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     assert response.action_required_data is None",
          "54: @pytest.mark.vcr",
          "55: def test_process_payment_with_auto_capture(",
          "56:     payment_adyen_for_checkout, checkout_with_items, adyen_plugin",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: @pytest.mark.vcr",
          "55: def test_process_payment_with_adyen_auto_capture(",
          "56:     payment_adyen_for_checkout, checkout_with_items, adyen_plugin",
          "57: ):",
          "58:     payment_info = create_payment_information(",
          "59:         payment_adyen_for_checkout,",
          "60:         additional_data={\"paymentMethod\": {\"paymentdata\": \"\"}},",
          "61:     )",
          "62:     adyen_plugin = adyen_plugin(adyen_auto_capture=True)",
          "63:     response = adyen_plugin.process_payment(payment_info, None)",
          "64:     assert response.is_success is True",
          "65:     assert response.action_required is False",
          "66:     assert response.kind == TransactionKind.CAPTURE",
          "67:     assert response.amount == Decimal(\"1234\")",
          "68:     assert response.currency == checkout_with_items.currency",
          "69:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "70:     assert response.error is None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     assert response.kind == TransactionKind.CAPTURE",
          "67:     assert response.amount == Decimal(\"1234\")",
          "68:     assert response.currency == checkout_with_items.currency",
          "70:     assert response.error is None",
          "71:     assert response.action_required_data is None",
          "",
          "[Removed Lines]",
          "69:     assert response.transaction_id == \"882595494831959A\"  # ID returned by Adyen",
          "",
          "[Added Lines]",
          "88:     assert response.transaction_id == \"853596624248395G\"  # ID returned by Adyen",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     response = adyen_plugin.process_payment(payment_info, None)",
          "101:     assert response.is_success is True",
          "102:     assert response.action_required is True",
          "104:     assert response.amount == Decimal(\"1234\")",
          "105:     assert response.currency == checkout_with_items.currency",
          "106:     assert response.transaction_id == \"882595494831959A\"",
          "",
          "[Removed Lines]",
          "103:     assert response.kind == TransactionKind.CAPTURE",
          "",
          "[Added Lines]",
          "122:     assert response.kind == TransactionKind.AUTH",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/test_webhook.py||saleor/payment/gateways/adyen/tests/test_webhook.py": [
          "File: saleor/payment/gateways/adyen/tests/test_webhook.py -> saleor/payment/gateways/adyen/tests/test_webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     assert transaction.kind == TransactionKind.AUTH",
          "77:     notification, adyen_plugin, payment_adyen_for_order",
          "78: ):",
          "79:     payment = payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "76: def test_handle_authorization_with_autocapture(",
          "",
          "[Added Lines]",
          "76: def test_handle_authorization_with_adyen_auto_capture(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         value=get_price_amount(payment.total, payment.currency),",
          "84:     )",
          "85:     config = adyen_plugin().config",
          "86:     config.auto_capture = True",
          "87:     handle_authorization(notification, config)",
          "93:     notification, adyen_plugin, payment_adyen_for_order",
          "94: ):",
          "95:     payment = payment_adyen_for_order",
          "96:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "97:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "98:     notification = notification(",
          "99:         merchant_reference=payment_id,",
          "100:         value=get_price_amount(payment.total, payment.currency),",
          "101:     )",
          "102:     config = adyen_plugin().config",
          "104:     handle_authorization(notification, config)",
          "106:     # payment already has a charge status no need to handle auth action",
          "",
          "[Removed Lines]",
          "89:     assert payment.transactions.count() == 0",
          "92: def test_handle_authorization_with_autocapture_and_payment_charged(",
          "103:     config.auto_capture = True",
          "",
          "[Added Lines]",
          "86:     config.connection_params[\"adyen_auto_capture\"] = True",
          "87:     handle_authorization(notification, config)",
          "89:     assert payment.transactions.count() == 1",
          "90:     assert payment.transactions.get().kind == TransactionKind.CAPTURE",
          "93: @pytest.mark.vcr",
          "94: def test_handle_authorization_with_auto_capture(",
          "95:     notification, adyen_plugin, payment_adyen_for_order",
          "96: ):",
          "97:     payment = payment_adyen_for_order",
          "98:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "99:     notification = notification(",
          "100:         psp_reference=\"853596537720508F\",",
          "101:         merchant_reference=payment_id,",
          "102:         value=get_price_amount(payment.total, payment.currency),",
          "103:     )",
          "104:     config = adyen_plugin().config",
          "106:     config.connection_params[\"adyen_auto_capture\"] = False",
          "110:     payment.refresh_from_db()",
          "111:     assert payment.transactions.count() == 2",
          "112:     assert payment.transactions.first().kind == TransactionKind.AUTH",
          "113:     assert payment.transactions.last().kind == TransactionKind.CAPTURE",
          "114:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "117: def test_handle_authorization_with_adyen_auto_capture_and_payment_charged(",
          "122:     payment.save()",
          "129:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:     assert payment.charge_status == ChargeStatus.PENDING",
          "265:     notification, adyen_plugin, payment_adyen_for_order",
          "266: ):",
          "267:     payment = payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "264: def test_handle_pending_with_autocapture(",
          "",
          "[Added Lines]",
          "290: def test_handle_pending_with_adyen_auto_capture(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:         value=get_price_amount(payment.total, payment.currency),",
          "272:     )",
          "273:     config = adyen_plugin().config",
          "276:     handle_pending(notification, config)",
          "278:     # in case of autocapture we don't want to store the pending status as all payments",
          "279:     # by default get capture status.",
          "281:     payment.refresh_from_db()",
          "285: def test_handle_pending_already_pending(",
          "",
          "[Removed Lines]",
          "274:     config.auto_capture = True",
          "280:     assert payment.transactions.count() == 0",
          "282:     assert payment.charge_status != ChargeStatus.PENDING",
          "",
          "[Added Lines]",
          "300:     config.connection_params[\"adyen_auto_capture\"] = True",
          "306:     assert payment.transactions.count() == 1",
          "307:     assert payment.transactions.get().kind == TransactionKind.PENDING",
          "309:     assert payment.charge_status == ChargeStatus.PENDING",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: def request_for_payment_capture(",
          "176: ) -> Dict[str, Any]:",
          "177:     return {",
          "178:         \"merchantAccount\": merchant_account,",
          "",
          "[Removed Lines]",
          "175:     payment_information: \"PaymentData\", merchant_account, token",
          "",
          "[Added Lines]",
          "175:     payment_information: \"PaymentData\", merchant_account: str, token: str",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:         }",
          "198:     )",
          "199:     payment.save(update_fields=[\"extra_data\"])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: def call_capture(",
          "203:     payment_information: \"PaymentData\",",
          "204:     merchant_account: str,",
          "205:     token: str,",
          "206:     adyen_client: Adyen.Adyen,",
          "207: ):",
          "208:     request = request_for_payment_capture(",
          "209:         payment_information=payment_information,",
          "210:         merchant_account=merchant_account,",
          "211:         token=token,",
          "212:     )",
          "213:     return api_call(request, adyen_client.payment.capture)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: from ....order.events import external_notification_event",
          "26: from ....payment.models import Payment, Transaction",
          "27: from ... import ChargeStatus, PaymentError, TransactionKind",
          "28: from ...interface import GatewayConfig, GatewayResponse",
          "29: from ...utils import create_transaction, gateway_postprocess",
          "30: from .utils import api_call, convert_adyen_price_format",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: from ...gateway import capture",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         ChargeStatus.PARTIALLY_CHARGED,",
          "96:     }:",
          "97:         return",
          "103:     transaction_id = notification.get(\"pspReference\")",
          "107:         return",
          "110:     reason = notification.get(\"reason\", \"-\")",
          "112:     success_msg = f\"Adyen: The payment  {transaction_id} request  was successful.\"",
          "",
          "[Removed Lines]",
          "98:     mark_capture = gateway_config.auto_capture",
          "99:     if mark_capture:",
          "100:         # If we mark order as a capture by default we don't need to handle auth actions",
          "101:         return",
          "104:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
          "105:     if transaction:",
          "106:         # We already marked it as Auth",
          "109:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
          "",
          "[Added Lines]",
          "100:     kind = TransactionKind.AUTH",
          "101:     adyen_auto_capture = gateway_config.connection_params[\"adyen_auto_capture\"]",
          "102:     if adyen_auto_capture:",
          "103:         kind = TransactionKind.CAPTURE",
          "106:     transaction = payment.transactions.filter(",
          "107:         token=transaction_id, kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE]",
          "108:     ).first()",
          "110:     if transaction and transaction.is_success:",
          "111:         # We already have this transaction",
          "114:     transaction = create_new_transaction(notification, payment, kind)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     create_payment_notification_for_order(",
          "115:         payment, success_msg, failed_msg, transaction.is_success",
          "116:     )",
          "118:         order_authorized(payment.order, None, transaction.amount, payment)",
          "121: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "",
          "[Removed Lines]",
          "117:     if payment.order:",
          "",
          "[Added Lines]",
          "122:     if not payment.order:",
          "123:         return",
          "125:     # If saleor has enabled auto capture we need to proceed the capture action.",
          "126:     if gateway_config.auto_capture:",
          "127:         capture(payment, amount=transaction.amount)",
          "129:     if kind == TransactionKind.AUTH:",
          "131:     elif kind == TransactionKind.CAPTURE:",
          "132:         order_captured(payment.order, None, transaction.amount, payment)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "213:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "214:     # event-codes\"",
          "219:     payment = get_payment(notification.get(\"merchantReference\"))",
          "220:     if not payment:",
          "221:         return",
          "",
          "[Removed Lines]",
          "215:     mark_capture = gateway_config.auto_capture",
          "216:     if mark_capture:",
          "217:         # If we mark order as a capture by default we don't need to handle this action",
          "218:         return",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6da0d506bd8b6eb8d341a620f584ca651e316b4",
      "candidate_info": {
        "commit_hash": "d6da0d506bd8b6eb8d341a620f584ca651e316b4",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/d6da0d506bd8b6eb8d341a620f584ca651e316b4",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py"
        ],
        "message": "Remove old fixme note",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "170:         self.config = GatewayConfig(",
          "171:             gateway_name=GATEWAY_NAME,",
          "175:             supported_currencies=configuration[\"Supported currencies\"],",
          "176:             connection_params={",
          "177:                 \"api_key\": configuration[\"API key\"],",
          "",
          "[Removed Lines]",
          "172:             auto_capture=configuration[",
          "173:                 \"Automatically mark payment as a capture\"",
          "174:             ],  # FIXME check this",
          "",
          "[Added Lines]",
          "172:             auto_capture=configuration[\"Automatically mark payment as a capture\"],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     def process_payment(",
          "235:         self, payment_information: \"PaymentData\", previous_value",
          "236:     ) -> \"GatewayResponse\":",
          "238:         request_data = request_data_for_payment(",
          "239:             payment_information,",
          "240:             return_url=self.config.connection_params[\"return_url\"],",
          "",
          "[Removed Lines]",
          "237:         # TODO Klarna data!!!",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ) -> Dict[str, str]:",
          "141:     address = checkout.billing_address or checkout.shipping_address",
          "144:     country = address.country if address else None",
          "145:     if country:",
          "146:         country_code = country.code",
          "",
          "[Removed Lines]",
          "143:     # FIXME check how it works if we have None here",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8d4ba0a7a24c1564edd5c2275700cec0c010e39",
      "candidate_info": {
        "commit_hash": "a8d4ba0a7a24c1564edd5c2275700cec0c010e39",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/a8d4ba0a7a24c1564edd5c2275700cec0c010e39",
        "files": [
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Add tests for handle_capture",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:     assert payment.transactions.count() == 2",
          "202:     payment = payment_adyen_for_order",
          "203:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "204:     notification = notification(",
          "",
          "[Removed Lines]",
          "198: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_captured\")",
          "199: def test_handle_capture(",
          "200:     mocked_captured, notification, adyen_plugin, payment_adyen_for_order",
          "201: ):",
          "",
          "[Added Lines]",
          "198: def test_handle_capture_for_order(notification, adyen_plugin, payment_adyen_for_order):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         value=to_adyen_price(payment.total, payment.currency),",
          "207:     )",
          "208:     config = adyen_plugin().config",
          "210:     handle_capture(notification, config)",
          "212:     assert payment.transactions.count() == 2",
          "214:     assert transaction.is_success is True",
          "222: def test_handle_capture_with_payment_already_charged(",
          "",
          "[Removed Lines]",
          "213:     transaction = payment.transactions.filter(kind=TransactionKind.CAPTURE).get()",
          "215:     payment.refresh_from_db()",
          "216:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "217:     mocked_captured.assert_called_once_with(",
          "218:         payment.order, None, transaction.amount, payment",
          "219:     )",
          "",
          "[Added Lines]",
          "206:     handle_capture(notification, config)",
          "208:     assert payment.transactions.count() == 1",
          "209:     transaction = payment.transactions.get()",
          "210:     assert transaction.is_success is True",
          "211:     assert transaction.kind == TransactionKind.AUTH",
          "214: def test_handle_capture_for_checkout(",
          "215:     notification, adyen_plugin, payment_adyen_for_checkout, address, shipping_method,",
          "216: ):",
          "217:     checkout = payment_adyen_for_checkout.checkout",
          "218:     checkout.shipping_address = address",
          "219:     checkout.shipping_method = shipping_method",
          "220:     checkout.billing_address = address",
          "221:     checkout.save()",
          "222:     checkout_token = str(checkout.token)",
          "224:     payment = payment_adyen_for_checkout",
          "225:     total = calculations.calculate_checkout_total_with_gift_cards(checkout=checkout)",
          "226:     payment.is_active = True",
          "227:     payment.order = None",
          "228:     payment.total = total.gross.amount",
          "229:     payment.currency = total.gross.currency",
          "230:     payment.to_confirm = True",
          "231:     payment.save()",
          "233:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "234:     notification = notification(",
          "235:         merchant_reference=payment_id,",
          "236:         value=to_adyen_price(payment.total, payment.currency),",
          "237:     )",
          "238:     config = adyen_plugin().config",
          "241:     payment.refresh_from_db()",
          "243:     transaction = payment.transactions.exclude(",
          "244:         kind=TransactionKind.ACTION_TO_CONFIRM",
          "245:     ).get()",
          "247:     assert transaction.kind == TransactionKind.AUTH",
          "248:     assert payment.checkout is None",
          "249:     assert payment.order",
          "250:     assert payment.order.checkout_token == checkout_token",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from ....checkout.models import Checkout",
          "28: from ....core.utils.url import prepare_url",
          "29: from ....discount.utils import fetch_active_discounts",
          "31: from ....order.events import external_notification_event",
          "32: from ....payment.models import Payment, Transaction",
          "33: from ... import ChargeStatus, PaymentError, TransactionKind",
          "34: from ...gateway import payment_refund_or_void",
          "35: from ...interface import GatewayConfig, GatewayResponse",
          "36: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "45: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Removed Lines]",
          "30: from ....order.actions import cancel_order, order_captured, order_refunded",
          "37: from .utils import (",
          "38:     FAILED_STATUSES,",
          "39:     api_call,",
          "40:     create_order_from_checkout,",
          "41:     from_adyen_price,",
          "42: )",
          "",
          "[Added Lines]",
          "30: from ....order.actions import cancel_order, order_refunded",
          "37: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:         return",
          "229:     checkout = get_checkout(payment)",
          "232:     if payment.charge_status == ChargeStatus.FULLY_CHARGED:",
          "233:         # the payment has already status captured.",
          "234:         return",
          "253:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
          "254:     failed_msg = f\"Adyen: The capture {transaction_id} request failed. Reason: {reason}\"",
          "262: @django_transaction.atomic",
          "",
          "[Removed Lines]",
          "231:     transaction_id = notification.get(\"pspReference\")",
          "236:     new_transaction = create_new_transaction(",
          "237:         notification, payment, TransactionKind.CAPTURE",
          "238:     )",
          "240:     gateway_postprocess(new_transaction, payment)",
          "242:     reason = notification.get(\"reason\", \"-\")",
          "244:     if not payment.order and new_transaction.is_success and checkout:",
          "245:         try:",
          "246:             order = create_order_from_checkout(checkout)",
          "247:         except Exception:",
          "248:             payment_refund_or_void(payment)",
          "249:             return",
          "250:         checkout.delete()",
          "251:         payment.order = order",
          "255:     create_payment_notification_for_order(",
          "256:         payment, success_msg, failed_msg, new_transaction.is_success",
          "257:     )",
          "258:     if payment.order:",
          "259:         order_captured(payment.order, None, new_transaction.amount, payment)",
          "",
          "[Added Lines]",
          "230:     transaction_id = notification.get(\"pspReference\")",
          "231:     transaction = payment.transactions.filter(",
          "232:         token=transaction_id,",
          "233:         action_required=False,",
          "234:         is_success=True,",
          "235:         kind=TransactionKind.CAPTURE,",
          "236:     ).last()",
          "238:     if transaction:",
          "239:         # We already have this transaction",
          "240:         return",
          "242:     action_transaction = payment.transactions.filter(",
          "243:         token=transaction_id,",
          "244:         action_required=False,",
          "245:         is_success=True,",
          "246:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "247:     ).last()",
          "248:     if not payment.order:",
          "249:         # If the payment is not Auth/Capture, it means that user didn't return to the",
          "250:         # storefront and we need to finalize the checkout asynchronously.",
          "251:         if not action_transaction:",
          "252:             action_transaction = create_new_transaction(",
          "253:                 notification, payment, TransactionKind.ACTION_TO_CONFIRM",
          "254:             )",
          "256:         if action_transaction.is_success and checkout:  # type: ignore",
          "257:             try:",
          "258:                 discounts = fetch_active_discounts()",
          "259:                 order, _, _ = complete_checkout(",
          "260:                     checkout=checkout,",
          "261:                     payment_data={},",
          "262:                     store_source=False,",
          "263:                     discounts=discounts,",
          "264:                     user=checkout.user or AnonymousUser(),",
          "265:                 )",
          "266:             except ValidationError:",
          "267:                 payment_refund_or_void(payment)",
          "268:                 return",
          "270:     reason = notification.get(\"reason\", \"-\")",
          "271:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "274:     create_payment_notification_for_order(payment, success_msg, failed_msg, is_success)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6600473eadf2bc4405ce78ef351b78cd7b31854",
      "candidate_info": {
        "commit_hash": "a6600473eadf2bc4405ce78ef351b78cd7b31854",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/a6600473eadf2bc4405ce78ef351b78cd7b31854",
        "files": [
          "saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py",
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Fix adyen notifications handling (#6343)\n\n* Fix invalid payment_id in get_payment handling\n\n* Add merchant account validation in webhooks\n\n* Prevent breaking handle_webhook when request is a GET request\n\n* Update saleor/payment/gateways/adyen/webhooks.py\n\nCo-authored-by: Marcin G\u0119bala <5421321+maarcingebala@users.noreply.github.com>\n\n* Update handle_webhook - add logger warnings\n\n* Add adyen webhooks get_payment method tests\n\nCo-authored-by: Marcin G\u0119bala <5421321+maarcingebala@users.noreply.github.com>",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py||saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py||saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py||saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py -> saleor/payment/gateways/adyen/tests/webhooks/test_get_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "3: import graphene",
          "4: import pytest",
          "6: from ...webhooks import get_payment",
          "8: logger = logging.getLogger(__name__)",
          "11: @pytest.mark.parametrize(\"payment_id\", [\"123\", \"Test payment ID\"])",
          "12: def test_get_payment_invalid_payment_id(payment_id, caplog):",
          "13:     # given",
          "14:     caplog.set_level(logging.WARNING)",
          "16:     # when",
          "17:     result = get_payment(payment_id)",
          "19:     # then",
          "20:     assert result is None",
          "21:     assert f\"Unable to decode the payment ID {payment_id}.\" in caplog.text",
          "24: @pytest.mark.parametrize(\"payment_id\", [\"  \", None])",
          "25: def test_get_payment_missing_payment_id(payment_id, caplog):",
          "26:     # given",
          "27:     caplog.set_level(logging.WARNING)",
          "29:     # when",
          "30:     result = get_payment(payment_id)",
          "32:     # then",
          "33:     assert result is None",
          "34:     assert \"Missing payment ID.\" in caplog.text",
          "37: def test_get_payment_not_active_payment(payment_dummy, caplog):",
          "38:     # given",
          "39:     caplog.set_level(logging.WARNING)",
          "41:     payment_dummy.is_active = False",
          "42:     payment_dummy.save(update_fields=[\"is_active\"])",
          "44:     payment_id = graphene.Node.to_global_id(\"Payemnt\", payment_dummy.pk)",
          "46:     # when",
          "47:     result = get_payment(payment_id)",
          "49:     # then",
          "50:     assert not result",
          "51:     assert f\"Payment for {payment_id} was not found.\" in caplog.text",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "2: from unittest import mock",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     webhook_not_implemented,",
          "23: )",
          "26: def test_handle_authorization_for_order(",
          "27:     notification, adyen_plugin, payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: logger = logging.getLogger(__name__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     assert external_events.count() == 1",
          "48: def test_handle_multiple_authorization_notification(",
          "49:     notification, adyen_plugin, payment_adyen_for_order",
          "50: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: def test_handle_authorization_for_order_invalid_payment_id(",
          "52:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "53: ):",
          "54:     payment = payment_adyen_for_order",
          "55:     invalid_reference = \"test invalid reference\"",
          "56:     notification = notification(",
          "57:         merchant_reference=invalid_reference,",
          "58:         value=to_adyen_price(payment.total, payment.currency),",
          "59:     )",
          "60:     config = adyen_plugin().config",
          "61:     transaction_count = payment.transactions.count()",
          "63:     caplog.set_level(logging.WARNING)",
          "65:     handle_authorization(notification, config)",
          "67:     payment.refresh_from_db()",
          "68:     assert payment.transactions.count() == transaction_count",
          "69:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "272:     assert external_events.count() == 1",
          "275: def test_handle_cancel_already_canceled(",
          "276:     notification, adyen_plugin, payment_adyen_for_order",
          "277: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: def test_handle_cancel_invalid_payment_id(",
          "300:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "301: ):",
          "302:     payment = payment_adyen_for_order",
          "303:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "304:     invalid_reference = \"test invalid reference\"",
          "305:     notification = notification(",
          "306:         merchant_reference=invalid_reference,",
          "307:         value=to_adyen_price(payment.total, payment.currency),",
          "308:     )",
          "309:     config = adyen_plugin().config",
          "310:     transaction_count = payment.transactions.count()",
          "312:     caplog.set_level(logging.WARNING)",
          "314:     handle_cancellation(notification, config)",
          "316:     payment.order.refresh_from_db()",
          "317:     assert payment.transactions.count() == transaction_count",
          "319:     payment.refresh_from_db()",
          "320:     assert payment.transactions.count() == transaction_count",
          "321:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:     assert external_events.count() == 1",
          "357: def test_handle_capture_with_payment_already_charged(",
          "358:     notification, adyen_plugin, payment_adyen_for_order",
          "359: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406: def test_handle_capture_invalid_payment_id(",
          "407:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "408: ):",
          "409:     payment = payment_adyen_for_order",
          "410:     invalid_reference = \"test invalid reference\"",
          "411:     notification = notification(",
          "412:         merchant_reference=invalid_reference,",
          "413:         value=to_adyen_price(payment.total, payment.currency),",
          "414:     )",
          "415:     config = adyen_plugin().config",
          "416:     transaction_count = payment.transactions.count()",
          "418:     caplog.set_level(logging.WARNING)",
          "420:     handle_capture(notification, config)",
          "422:     payment.refresh_from_db()",
          "423:     assert payment.transactions.count() == transaction_count",
          "424:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "409:     assert external_events.count() == 1",
          "412: def test_handle_failed_capture_partial_charge(",
          "413:     notification, adyen_plugin, payment_adyen_for_order",
          "414: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482: def test_handle_failed_capture_invalid_payment_id(",
          "483:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "484: ):",
          "485:     payment = payment_adyen_for_order",
          "486:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "487:     payment.captured_amount = payment.total",
          "488:     payment.save()",
          "489:     invalid_reference = \"test invalid reference\"",
          "490:     notification = notification(",
          "491:         merchant_reference=invalid_reference,",
          "492:         value=to_adyen_price(payment.total, payment.currency),",
          "493:     )",
          "494:     config = adyen_plugin().config",
          "495:     transaction_count = payment.transactions.count()",
          "497:     caplog.set_level(logging.WARNING)",
          "499:     handle_failed_capture(notification, config)",
          "501:     payment.refresh_from_db()",
          "502:     assert payment.transactions.count() == transaction_count",
          "503:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "458:     assert external_events.count() == 1",
          "461: def test_handle_pending_with_adyen_auto_capture(",
          "462:     notification, adyen_plugin, payment_adyen_for_order",
          "463: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555: def test_handle_pending_invalid_payment_id(",
          "556:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "557: ):",
          "558:     payment = payment_adyen_for_order",
          "559:     invalid_reference = \"test invalid reference\"",
          "560:     notification = notification(",
          "561:         merchant_reference=invalid_reference,",
          "562:         value=to_adyen_price(payment.total, payment.currency),",
          "563:     )",
          "564:     config = adyen_plugin().config",
          "565:     transaction_count = payment.transactions.count()",
          "567:     caplog.set_level(logging.WARNING)",
          "569:     handle_pending(notification, config)",
          "571:     payment.refresh_from_db()",
          "572:     assert payment.transactions.count() == transaction_count",
          "573:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "535:     assert external_events.count() == 1",
          "538: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.order_refunded\")",
          "539: def test_handle_refund_already_refunded(",
          "540:     mock_order_refunded, notification, adyen_plugin, payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653: def test_handle_refund_invalid_payment_id(",
          "654:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "655: ):",
          "656:     payment = payment_adyen_for_order",
          "657:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "658:     payment.captured_amount = payment.total",
          "659:     payment.save()",
          "660:     invalid_reference = \"test invalid reference\"",
          "661:     notification = notification(",
          "662:         merchant_reference=invalid_reference,",
          "663:         value=to_adyen_price(payment.total, payment.currency),",
          "664:     )",
          "665:     config = adyen_plugin().config",
          "666:     transaction_count = payment.transactions.count()",
          "668:     caplog.set_level(logging.WARNING)",
          "670:     handle_refund(notification, config)",
          "672:     payment.refresh_from_db()",
          "673:     assert payment.transactions.count() == transaction_count",
          "674:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "580:     assert external_events.count() == 1",
          "583: def test_handle_failed_refund_with_transaction_refund_ongoing(",
          "584:     notification, adyen_plugin, payment_adyen_for_order",
          "585: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "722: def test_handle_failed_refund_invalid_payment_id(",
          "723:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "724: ):",
          "725:     payment = payment_adyen_for_order",
          "726:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "727:     payment.captured_amount = payment.total",
          "728:     payment.save()",
          "729:     invalid_reference = \"test invalid reference\"",
          "730:     notification = notification(",
          "731:         merchant_reference=invalid_reference,",
          "732:         value=to_adyen_price(payment.total, payment.currency),",
          "733:     )",
          "734:     config = adyen_plugin().config",
          "735:     transaction_count = payment.transactions.count()",
          "737:     caplog.set_level(logging.WARNING)",
          "739:     handle_failed_refund(notification, config)",
          "741:     payment.refresh_from_db()",
          "742:     assert payment.transactions.count() == transaction_count",
          "743:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "655:     assert external_events.count() == 1",
          "658: def test_handle_reversed_refund_already_processed(",
          "659:     notification, adyen_plugin, payment_adyen_for_order",
          "660: ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821: def test_handle_reversed_refund_invalid_payment_id(",
          "822:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "823: ):",
          "824:     payment = payment_adyen_for_order",
          "825:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "826:     payment.captured_amount = Decimal(\"0.0\")",
          "827:     payment.save()",
          "828:     invalid_reference = \"test invalid reference\"",
          "829:     notification = notification(",
          "830:         merchant_reference=invalid_reference,",
          "831:         value=to_adyen_price(payment.total, payment.currency),",
          "832:     )",
          "833:     config = adyen_plugin().config",
          "834:     transaction_count = payment.transactions.count()",
          "836:     caplog.set_level(logging.WARNING)",
          "838:     handle_reversed_refund(notification, config)",
          "840:     payment.refresh_from_db()",
          "841:     assert payment.transactions.count() == transaction_count",
          "842:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "694:     assert external_events.count() == 1",
          "697: @mock.patch(\"saleor.payment.gateways.adyen.webhooks.handle_refund\")",
          "698: def test_handle_cancel_or_refund_action_refund(",
          "699:     mock_handle_refund, notification, adyen_plugin, payment_adyen_for_order",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884: def test_webhook_not_implemented_invalid_payment_id(",
          "885:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "886: ):",
          "887:     payment = payment_adyen_for_order",
          "888:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "889:     payment.captured_amount = payment.total",
          "890:     payment.save()",
          "891:     invalid_reference = \"test invalid reference\"",
          "892:     notification = notification(",
          "893:         merchant_reference=invalid_reference,",
          "894:         value=to_adyen_price(payment.total, payment.currency),",
          "895:     )",
          "896:     config = adyen_plugin().config",
          "897:     transaction_count = payment.transactions.count()",
          "899:     caplog.set_level(logging.WARNING)",
          "901:     webhook_not_implemented(notification, config)",
          "903:     payment.refresh_from_db()",
          "904:     assert payment.transactions.count() == transaction_count",
          "905:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "729:     handle_cancel_or_refund(notification, config)",
          "731:     mock_handle_cancellation.assert_called_once_with(notification, config)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945: def test_handle_cancel_or_refund_action_cancel_invalid_payment_id(",
          "946:     notification, adyen_plugin, payment_adyen_for_order, caplog",
          "947: ):",
          "948:     payment = payment_adyen_for_order",
          "949:     config = adyen_plugin().config",
          "950:     invalid_reference = \"test invalid reference\"",
          "951:     notification = notification(",
          "952:         merchant_reference=invalid_reference,",
          "953:         value=to_adyen_price(payment.total, payment.currency),",
          "954:     )",
          "955:     notification[\"additionalData\"][\"modification.action\"] = \"cancel\"",
          "957:     caplog.set_level(logging.WARNING)",
          "959:     handle_cancel_or_refund(notification, config)",
          "961:     assert f\"Unable to decode the payment ID {invalid_reference}.\" in caplog.text",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py||saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py -> saleor/payment/gateways/adyen/tests/webhooks/test_validate_notification.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.contrib.auth.hashers import make_password",
          "6: def test_validate_hmac_signature(adyen_plugin, notification_with_hmac_signature):",
          "",
          "[Removed Lines]",
          "3: from ...webhooks import validate_auth_user, validate_hmac_signature",
          "",
          "[Added Lines]",
          "3: from ...webhooks import (",
          "4:     validate_auth_user,",
          "5:     validate_hmac_signature,",
          "6:     validate_merchant_account,",
          "7: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     config = plugin.config",
          "74:     is_valid = validate_auth_user(headers={}, gateway_config=config)",
          "75:     assert is_valid is True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: def test_validate_merchant_account(adyen_plugin, notification_with_hmac_signature):",
          "83:     plugin = adyen_plugin()",
          "84:     config = plugin.config",
          "85:     notification_with_hmac_signature[",
          "86:         \"merchantAccountCode\"",
          "87:     ] = config.connection_params.get(\"merchant_account\")",
          "88:     assert validate_merchant_account(notification_with_hmac_signature, config) is True",
          "91: def test_validate_merchant_account_invalid_merchant_account(",
          "92:     adyen_plugin, notification_with_hmac_signature",
          "93: ):",
          "94:     plugin = adyen_plugin()",
          "95:     config = plugin.config",
          "96:     notification_with_hmac_signature[\"merchantAccountCode\"] = \"test\"",
          "97:     assert validate_merchant_account(notification_with_hmac_signature, config) is False",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import hmac",
          "5: import json",
          "6: import logging",
          "7: from typing import Any, Callable, Dict, Optional",
          "8: from urllib.parse import urlencode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from json.decoder import JSONDecodeError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     payment_id: Optional[str], transaction_id: Optional[str] = None",
          "50: ) -> Optional[Payment]:",
          "51:     transaction_id = transaction_id or \"\"",
          "53:         logger.warning(\"Missing payment ID. Reference %s\", transaction_id)",
          "54:         return None",
          "55:     try:",
          "56:         _type, db_payment_id = from_global_id(payment_id)",
          "58:         logger.warning(",
          "59:             \"Unable to decode the payment ID %s. Reference %s\",",
          "60:             payment_id,",
          "",
          "[Removed Lines]",
          "52:     if not payment_id:",
          "57:     except UnicodeDecodeError:",
          "",
          "[Added Lines]",
          "53:     if payment_id is None or not payment_id.strip():",
          "58:     except (UnicodeDecodeError, binascii.Error):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:     return False",
          "572: @transaction_with_commit_on_errors()",
          "573: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
          "575:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
          "576:     # object.",
          "577:     notification = json_data.get(\"notificationItems\")[0].get(",
          "578:         \"NotificationRequestItem\", {}",
          "579:     )",
          "581:     if not validate_hmac_signature(notification, gateway_config):",
          "582:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
          "583:     if not validate_auth_user(request.headers, gateway_config):",
          "",
          "[Removed Lines]",
          "574:     json_data = json.loads(request.body)",
          "",
          "[Added Lines]",
          "573: def validate_merchant_account(",
          "574:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
          "575: ):",
          "576:     merchant_account_code = notification.get(\"merchantAccountCode\")",
          "577:     return merchant_account_code == gateway_config.connection_params.get(",
          "578:         \"merchant_account\"",
          "579:     )",
          "584:     try:",
          "585:         json_data = json.loads(request.body)",
          "586:     except JSONDecodeError:",
          "587:         logger.warning(\"Cannot parse request body.\")",
          "588:         return HttpResponse(\"[accepted]\")",
          "595:     if not validate_merchant_account(notification, gateway_config):",
          "596:         logger.warning(\"Not supported merchant account.\")",
          "597:         return HttpResponse(\"[accepted]\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6836c651fc355adb1486f8e9eb4f7039bed0ea97",
      "candidate_info": {
        "commit_hash": "6836c651fc355adb1486f8e9eb4f7039bed0ea97",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/6836c651fc355adb1486f8e9eb4f7039bed0ea97",
        "files": [
          "CHANGELOG.md",
          "saleor/checkout/complete_checkout.py",
          "saleor/core/tracing.py",
          "saleor/order/actions.py",
          "saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/stripe/__init__.py",
          "saleor/payment/gateways/stripe/consts.py",
          "saleor/payment/gateways/stripe/deprecated/__init__.py",
          "saleor/payment/gateways/stripe/deprecated/plugin.py",
          "saleor/payment/gateways/stripe/deprecated/tests/__init__.py",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize_3d_secure.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize_and_save_customer_id.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize_error_response.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize_with_customer_id.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_authorize_without_capture.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_capture.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_capture_3d_secure.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_capture_error_response.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_confirm__intent.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_confirm_error_response.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_list_customer_sources.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_refund.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_refund_error_response.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_void.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/cassettes/test_void_error_response.yaml",
          "saleor/payment/gateways/stripe/deprecated/tests/test_stripe.py",
          "saleor/payment/gateways/stripe/deprecated/tests/test_utils.py",
          "saleor/payment/gateways/stripe/deprecated/utils.py",
          "saleor/payment/gateways/stripe/plugin.py",
          "saleor/payment/gateways/stripe/stripe_api.py",
          "saleor/payment/gateways/stripe/tests/conftest.py",
          "saleor/payment/gateways/stripe/tests/test_plugin.py",
          "saleor/payment/gateways/stripe/tests/test_stripe_api.py",
          "saleor/payment/gateways/stripe/tests/test_webhooks.py",
          "saleor/payment/gateways/stripe/webhooks.py",
          "saleor/payment/interface.py",
          "saleor/payment/utils.py",
          "saleor/plugins/base_plugin.py",
          "saleor/settings.py"
        ],
        "message": "Rebuild a stripe plugin (#7452)\n\n* Feature/rebuild stripe plugin (#7303)\n\n* Add draft code for stripe plugin\n\n* Add init version of new stripe plugin. deprecate the old one\n\n* Fix description for deprecated stripe plugin\n\n* Fixing black and isort\n\n* Simplify the webhook subscription logic\n\n* Add tests to cover default case for new Stripe plugin (#7391)\n\n* Add draft code for stripe plugin\n\n* Add init version of new stripe plugin. deprecate the old one\n\n* Fix description for deprecated stripe plugin\n\n* Fixing black and isort\n\n* Simplify the webhook subscription logic\n\n* Add some tests to cover stripe plugin\n\n* Add some tests for webhook part, saving configuration\n\n* Add tests for default case\n\n* Fix linters\n\n* Add handlers for stripe webhooks (#7397)\n\n* Add draft code for stripe plugin\n\n* Add init version of new stripe plugin. deprecate the old one\n\n* Fix description for deprecated stripe plugin\n\n* Fixing black and isort\n\n* Simplify the webhook subscription logic\n\n* Add some tests to cover stripe plugin\n\n* Add some tests for webhook part, saving configuration\n\n* Add tests for default case\n\n* Fix linters\n\n* Add handlers for stripe webhooks\n\n* Remove unneeded vcr config\n\n* Change the way of calling webhook handlers\n\n* Add implementation of payment actions (#7404)\n\n* Add implementation of payment actions\n\n* Add support for autocapture\n\n* Fix mypy by solving issue with returing inccorect object types\n\nCo-authored-by: Marcin G\u0119bala <5421321+maarcingebala@users.noreply.github.com>\n\n* Handle unconfirmed orders in stripe (#7416)\n\n* Add implementation of payment actions\n\n* Add support for autocapture\n\n* Fix mypy by solving issue with returing inccorect object types\n\n* Handle payment process for unconfirmed orders\n\n* Stripe handle refund webhook event (#7457)\n\n* Add webhook for refund action. generate proper plugin url\n\n* Fix intendations\n\n* Add possibility to store, use  and retrieve stored payment method (#7451)\n\n* Add possibility to store, use  and retrieve stored payment method\n\n* Solve mypy errors\n\n* Fix incorrect gateway id provided in CustomerSources\n\n* Add opentracing to all stripe requests (#7458)\n\n* Add opentracing to all stripe requests\n\n* Apply changes after review\n\n* fulfill card details (#7480)\n\n* Add more logs to new Stripe plugin (#7484)\n\n* Add more logs\n\n* Add missing dot in ValidationError which is passed over API\n\n* Add wrapper for extra data an error in stripe_api\n\n* Fixes for stripe implementation after testing with storefront (#7555)\n\n* Update logic after testing with storefront\n\n* Fix failing test\n\n* Add support for offline payments in Stripe (#7560)\n\n* Add implementation which will handle offline payments\n\n* Add support for off_sesion parameter from paymentData\n\n* Clean up code after review\n\n* Add possibility to use different type of payment methods than card (#7603)\n\n* Send to stripe only logged-in customers (#7598)\n\n* Send to stripe only logged-in customers\n\n* Fix test\n\n* Add explicitly version of the Stripe API (#7619)\n\n* return brand of stored card (#7627)\n\nCo-authored-by: Marcin G\u0119bala <5421321+maarcingebala@users.noreply.github.com>",
        "before_after_code_files": [
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/core/tracing.py||saleor/core/tracing.py",
          "saleor/order/actions.py||saleor/order/actions.py",
          "saleor/payment/gateways/adyen/tests/utils/test_common.py||saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "saleor/payment/gateways/adyen/utils/common.py||saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/stripe/__init__.py||saleor/payment/gateways/stripe/__init__.py",
          "saleor/payment/gateways/stripe/consts.py||saleor/payment/gateways/stripe/consts.py",
          "saleor/payment/gateways/stripe/deprecated/__init__.py||saleor/payment/gateways/stripe/deprecated/__init__.py",
          "saleor/payment/gateways/stripe/deprecated/plugin.py||saleor/payment/gateways/stripe/deprecated/plugin.py",
          "saleor/payment/gateways/stripe/tests/test_stripe.py||saleor/payment/gateways/stripe/deprecated/tests/test_stripe.py",
          "saleor/payment/gateways/stripe/tests/test_utils.py||saleor/payment/gateways/stripe/deprecated/tests/test_utils.py",
          "saleor/payment/gateways/stripe/utils.py||saleor/payment/gateways/stripe/deprecated/utils.py",
          "saleor/payment/gateways/stripe/plugin.py||saleor/payment/gateways/stripe/plugin.py",
          "saleor/payment/gateways/stripe/stripe_api.py||saleor/payment/gateways/stripe/stripe_api.py",
          "saleor/payment/gateways/stripe/tests/conftest.py||saleor/payment/gateways/stripe/tests/conftest.py",
          "saleor/payment/gateways/stripe/tests/test_plugin.py||saleor/payment/gateways/stripe/tests/test_plugin.py",
          "saleor/payment/gateways/stripe/tests/test_stripe_api.py||saleor/payment/gateways/stripe/tests/test_stripe_api.py",
          "saleor/payment/gateways/stripe/tests/test_webhooks.py||saleor/payment/gateways/stripe/tests/test_webhooks.py",
          "saleor/payment/gateways/stripe/webhooks.py||saleor/payment/gateways/stripe/webhooks.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/payment/utils.py||saleor/payment/utils.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/settings.py||saleor/settings.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:         checkout.redirect_url = redirect_url",
          "468:         to_update.append(\"redirect_url\")",
          "471:         checkout.tracking_code = tracking_code",
          "472:         to_update.append(\"tracking_code\")",
          "",
          "[Removed Lines]",
          "470:     if tracking_code and tracking_code != checkout.tracking_code:",
          "",
          "[Added Lines]",
          "470:     if tracking_code and str(tracking_code) != checkout.tracking_code:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:         raise exc",
          "591:     customer_id = None",
          "593:         customer_id = fetch_customer_id(user=user, gateway=payment.gateway)",
          "595:     txn = _process_payment(",
          "",
          "[Removed Lines]",
          "592:     if store_source and payment:",
          "",
          "[Added Lines]",
          "592:     if payment and user.is_authenticated:",
          "",
          "---------------"
        ],
        "saleor/core/tracing.py||saleor/core/tracing.py": [
          "File: saleor/core/tracing.py -> saleor/core/tracing.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:             span = scope.span",
          "27:             span.set_tag(opentracing.tags.COMPONENT, \"orm\")",
          "28:             yield",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: @contextmanager",
          "32: def opentracing_trace(span_name, component_name, service_name):",
          "33:     with opentracing.global_tracer().start_active_span(span_name) as scope:",
          "34:         span = scope.span",
          "35:         span.set_tag(opentracing.tags.COMPONENT, component_name)",
          "36:         span.set_tag(\"service.name\", service_name)",
          "37:         yield",
          "",
          "---------------"
        ],
        "saleor/order/actions.py||saleor/order/actions.py": [
          "File: saleor/order/actions.py -> saleor/order/actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: def order_voided(",
          "173: ):",
          "174:     events.payment_voided_event(order=order, user=user, payment=payment)",
          "175:     manager.order_updated(order)",
          "",
          "[Removed Lines]",
          "172:     order: \"Order\", user: \"User\", payment: \"Payment\", manager: \"PluginsManager\"",
          "",
          "[Added Lines]",
          "172:     order: \"Order\",",
          "173:     user: Optional[\"User\"],",
          "174:     payment: \"Payment\",",
          "175:     manager: \"PluginsManager\",",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/utils/test_common.py||saleor/payment/gateways/adyen/tests/utils/test_common.py": [
          "File: saleor/payment/gateways/adyen/tests/utils/test_common.py -> saleor/payment/gateways/adyen/tests/utils/test_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from saleor.payment import PaymentError",
          "10: from saleor.payment.gateways.adyen.utils.common import (",
          "11:     append_klarna_data,",
          "13:     get_payment_method_info,",
          "14:     get_shopper_locale_value,",
          "15:     request_data_for_gateway_config,",
          "16:     request_data_for_payment,",
          "18:     update_payment_with_action_required_data,",
          "19: )",
          "20: from saleor.payment.interface import PaymentMethodInfo",
          "22: from ......plugins.manager import get_plugins_manager",
          "",
          "[Removed Lines]",
          "12:     from_adyen_price,",
          "17:     to_adyen_price,",
          "",
          "[Added Lines]",
          "19: from saleor.payment.utils import price_from_minor_unit, price_to_minor_unit",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     variant_channel_listing = line.variant.channel_listings.get(channel_id=channel_id)",
          "53:     variant_price = variant_channel_listing.price_amount",
          "54:     variant_currency = variant_channel_listing.currency",
          "56:     assert result == {",
          "57:         \"reference\": \"test\",",
          "58:         \"shopperLocale\": get_shopper_locale_value(country_code),",
          "",
          "[Removed Lines]",
          "55:     price = to_adyen_price(variant_price, variant_currency)",
          "",
          "[Added Lines]",
          "54:     price = price_to_minor_unit(variant_price, variant_currency)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:                 \"description\": f\"{line.variant.product.name}, {line.variant.name}\",",
          "126:                 \"quantity\": line.quantity,",
          "127:                 \"id\": line.variant.sku,",
          "129:                 \"taxPercentage\": 2300,",
          "132:             },",
          "133:             {",
          "134:                 \"amountExcludingTax\": \"1000\",",
          "",
          "[Removed Lines]",
          "128:                 \"taxAmount\": to_adyen_price((gross - net).amount, \"USD\"),",
          "130:                 \"amountExcludingTax\": to_adyen_price(net.amount, \"USD\"),",
          "131:                 \"amountIncludingTax\": to_adyen_price(gross.amount, \"USD\"),",
          "",
          "[Added Lines]",
          "128:                 \"taxAmount\": price_to_minor_unit((gross - net).amount, \"USD\"),",
          "130:                 \"amountExcludingTax\": price_to_minor_unit(net.amount, \"USD\"),",
          "131:                 \"amountIncludingTax\": price_to_minor_unit(gross.amount, \"USD\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     # then",
          "191:     assert result == {",
          "192:         \"amount\": {",
          "194:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "195:             ),",
          "196:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "193:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "193:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:     # then",
          "234:     assert result == {",
          "235:         \"amount\": {",
          "237:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "238:             ),",
          "239:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "236:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "236:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:     # then",
          "269:     assert result == {",
          "270:         \"amount\": {",
          "272:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "273:             ),",
          "274:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "271:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "271:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "303:     dummy_payment_data.data = data",
          "304:     klarna_result = {",
          "305:         \"amount\": {",
          "307:                 dummy_payment_data.amount, dummy_payment_data.currency",
          "308:             ),",
          "309:             \"currency\": dummy_payment_data.currency,",
          "",
          "[Removed Lines]",
          "306:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "306:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "339: )",
          "340: def test_from_adyen_price(value, currency, expected_result):",
          "341:     # when",
          "344:     # then",
          "345:     assert result == expected_result",
          "",
          "[Removed Lines]",
          "342:     result = from_adyen_price(value, currency)",
          "",
          "[Added Lines]",
          "342:     result = price_from_minor_unit(value, currency)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "355: )",
          "356: def test_to_adyen_price(value, currency, expected_result):",
          "357:     # when",
          "360:     # then",
          "361:     assert result == expected_result",
          "",
          "[Removed Lines]",
          "358:     result = to_adyen_price(value, currency)",
          "",
          "[Added Lines]",
          "358:     result = price_to_minor_unit(value, currency)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py||saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py": [
          "File: saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py -> saleor/payment/gateways/adyen/tests/webhooks/test_handle_notifications.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from ......order import OrderEvents, OrderStatus",
          "11: from ......plugins.manager import get_plugins_manager",
          "12: from ..... import ChargeStatus, TransactionKind",
          "14: from ...webhooks import (",
          "15:     create_new_transaction,",
          "16:     handle_authorization,",
          "",
          "[Removed Lines]",
          "13: from ...utils.common import to_adyen_price",
          "",
          "[Added Lines]",
          "13: from .....utils import price_to_minor_unit",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "36:     notification = notification(",
          "37:         merchant_reference=payment_id,",
          "39:     )",
          "40:     config = adyen_plugin().config",
          "41:     handle_authorization(notification, config)",
          "",
          "[Removed Lines]",
          "38:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "38:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     invalid_reference = \"test invalid reference\"",
          "58:     notification = notification(",
          "59:         merchant_reference=invalid_reference,",
          "61:     )",
          "62:     config = adyen_plugin().config",
          "63:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "60:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "60:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:         merchant_reference=payment_id,",
          "83:         success=\"false\",",
          "84:         psp_reference=\"wrong\",",
          "86:     )",
          "87:     config = adyen_plugin(adyen_auto_capture=True).config",
          "88:     handle_authorization(first_notification, config)",
          "",
          "[Removed Lines]",
          "85:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "85:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     second_notification = notification(",
          "100:         merchant_reference=payment_id,",
          "102:     )",
          "103:     handle_authorization(second_notification, config)",
          "104:     payment.refresh_from_db()",
          "",
          "[Removed Lines]",
          "101:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "101:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "124:     notification = notification(",
          "125:         merchant_reference=payment_id,",
          "127:     )",
          "128:     config = adyen_plugin(adyen_auto_capture=True).config",
          "129:     handle_authorization(notification, config)",
          "",
          "[Removed Lines]",
          "126:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "126:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "172:     notification = notification(",
          "173:         merchant_reference=payment_id,",
          "175:     )",
          "176:     config = adyen_plugin().config",
          "177:     handle_authorization(notification, config)",
          "",
          "[Removed Lines]",
          "174:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "174:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "220:     notification = notification(",
          "221:         merchant_reference=payment_id,",
          "223:     )",
          "225:     plugin = adyen_plugin(adyen_auto_capture=True)",
          "",
          "[Removed Lines]",
          "222:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "222:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "247:     notification = notification(",
          "248:         psp_reference=\"853596537720508F\",",
          "249:         merchant_reference=payment_id,",
          "251:     )",
          "252:     config = adyen_plugin(adyen_auto_capture=False, auto_capture=True).config",
          "",
          "[Removed Lines]",
          "250:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "250:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "273:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "274:     notification = notification(",
          "275:         merchant_reference=payment_id,",
          "277:     )",
          "278:     config = adyen_plugin().config",
          "279:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "[Removed Lines]",
          "276:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "276:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "299:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "300:     notification = notification(",
          "301:         merchant_reference=payment_id,",
          "303:     )",
          "304:     config = adyen_plugin().config",
          "305:     manager = get_plugins_manager()",
          "",
          "[Removed Lines]",
          "302:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "302:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "326:     invalid_reference = \"test invalid reference\"",
          "327:     notification = notification(",
          "328:         merchant_reference=invalid_reference,",
          "330:     )",
          "331:     config = adyen_plugin().config",
          "332:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "329:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "329:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "352:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "353:     notification = notification(",
          "354:         merchant_reference=payment_id,",
          "356:     )",
          "357:     config = adyen_plugin().config",
          "358:     create_new_transaction(notification, payment, TransactionKind.CANCEL)",
          "",
          "[Removed Lines]",
          "355:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "355:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "368:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "369:     notification = notification(",
          "370:         merchant_reference=payment_id,",
          "372:     )",
          "373:     config = adyen_plugin().config",
          "374:     handle_capture(notification, config)",
          "",
          "[Removed Lines]",
          "371:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "371:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "416:     notification = notification(",
          "417:         merchant_reference=payment_id,",
          "419:     )",
          "420:     config = adyen_plugin().config",
          "421:     handle_capture(notification, config)",
          "",
          "[Removed Lines]",
          "418:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "418:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "443:     invalid_reference = \"test invalid reference\"",
          "444:     notification = notification(",
          "445:         merchant_reference=invalid_reference,",
          "447:     )",
          "448:     config = adyen_plugin().config",
          "449:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "446:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "446:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "467:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "468:     notification = notification(",
          "469:         merchant_reference=payment_id,",
          "471:     )",
          "472:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "470:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "470:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "495:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "496:     notification = notification(",
          "497:         merchant_reference=payment_id,",
          "499:     )",
          "500:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "498:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "498:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "522:     invalid_reference = \"test invalid reference\"",
          "523:     notification = notification(",
          "524:         merchant_reference=invalid_reference,",
          "526:     )",
          "527:     config = adyen_plugin().config",
          "528:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "525:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "525:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "546:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "547:     notification = notification(",
          "548:         merchant_reference=payment_id,",
          "550:     )",
          "551:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "549:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "549:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "568:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "569:     notification = notification(",
          "570:         merchant_reference=payment_id,",
          "572:     )",
          "573:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "571:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "571:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "592:     invalid_reference = \"test invalid reference\"",
          "593:     notification = notification(",
          "594:         merchant_reference=invalid_reference,",
          "596:     )",
          "597:     config = adyen_plugin().config",
          "598:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "595:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "595:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "613:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "614:     notification = notification(",
          "615:         merchant_reference=payment_id,",
          "617:     )",
          "618:     config = adyen_plugin().config",
          "619:     config.connection_params[\"adyen_auto_capture\"] = True",
          "",
          "[Removed Lines]",
          "616:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "616:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "640:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "641:     notification = notification(",
          "642:         merchant_reference=payment_id,",
          "644:     )",
          "645:     config = adyen_plugin().config",
          "646:     create_new_transaction(notification, payment, TransactionKind.PENDING)",
          "",
          "[Removed Lines]",
          "643:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "643:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "661:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "662:     notification = notification(",
          "663:         merchant_reference=payment_id,",
          "665:     )",
          "666:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "664:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "664:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "693:     invalid_reference = \"test invalid reference\"",
          "694:     notification = notification(",
          "695:         merchant_reference=invalid_reference,",
          "697:     )",
          "698:     config = adyen_plugin().config",
          "699:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "696:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "696:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "718:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "719:     notification = notification(",
          "720:         merchant_reference=payment_id,",
          "722:     )",
          "723:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "724:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "721:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "721:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "739:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "740:     notification = notification(",
          "741:         merchant_reference=payment_id,",
          "743:     )",
          "744:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "742:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "742:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "762:     invalid_reference = \"test invalid reference\"",
          "763:     notification = notification(",
          "764:         merchant_reference=invalid_reference,",
          "766:     )",
          "767:     config = adyen_plugin().config",
          "768:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "765:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "765:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "786:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "787:     notification = notification(",
          "788:         merchant_reference=payment_id,",
          "790:     )",
          "791:     config = adyen_plugin().config",
          "792:     create_new_transaction(notification, payment, TransactionKind.REFUND_ONGOING)",
          "",
          "[Removed Lines]",
          "789:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "789:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "812:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "813:     notification = notification(",
          "814:         merchant_reference=payment_id,",
          "816:     )",
          "817:     config = adyen_plugin().config",
          "818:     create_new_transaction(notification, payment, TransactionKind.REFUND)",
          "",
          "[Removed Lines]",
          "815:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "815:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "836:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "837:     notification = notification(",
          "838:         merchant_reference=payment_id,",
          "840:     )",
          "841:     config = adyen_plugin().config",
          "842:     handle_reversed_refund(notification, config)",
          "",
          "[Removed Lines]",
          "839:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "839:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "861:     invalid_reference = \"test invalid reference\"",
          "862:     notification = notification(",
          "863:         merchant_reference=invalid_reference,",
          "865:     )",
          "866:     config = adyen_plugin().config",
          "867:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "864:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "864:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "885:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "886:     notification = notification(",
          "887:         merchant_reference=payment_id,",
          "889:     )",
          "890:     config = adyen_plugin().config",
          "891:     create_new_transaction(notification, payment, TransactionKind.REFUND_REVERSED)",
          "",
          "[Removed Lines]",
          "888:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "888:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "902:     payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "903:     notification = notification(",
          "904:         merchant_reference=payment_id,",
          "906:     )",
          "907:     config = adyen_plugin().config",
          "",
          "[Removed Lines]",
          "905:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "905:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "924:     invalid_reference = \"test invalid reference\"",
          "925:     notification = notification(",
          "926:         merchant_reference=invalid_reference,",
          "928:     )",
          "929:     config = adyen_plugin().config",
          "930:     transaction_count = payment.transactions.count()",
          "",
          "[Removed Lines]",
          "927:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "927:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "948:     config = adyen_plugin().config",
          "949:     notification = notification(",
          "950:         merchant_reference=payment_id,",
          "952:     )",
          "953:     notification[\"additionalData\"][\"modification.action\"] = \"refund\"",
          "",
          "[Removed Lines]",
          "951:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "951:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "966:     config = adyen_plugin().config",
          "967:     notification = notification(",
          "968:         merchant_reference=payment_id,",
          "970:     )",
          "971:     notification[\"additionalData\"][\"modification.action\"] = \"cancel\"",
          "",
          "[Removed Lines]",
          "969:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "969:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "983:     invalid_reference = \"test invalid reference\"",
          "984:     notification = notification(",
          "985:         merchant_reference=invalid_reference,",
          "987:     )",
          "988:     notification[\"additionalData\"][\"modification.action\"] = \"cancel\"",
          "",
          "[Removed Lines]",
          "986:         value=to_adyen_price(payment.total, payment.currency),",
          "",
          "[Added Lines]",
          "986:         value=price_to_minor_unit(payment.total, payment.currency),",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils/common.py||saleor/payment/gateways/adyen/utils/common.py": [
          "File: saleor/payment/gateways/adyen/utils/common.py -> saleor/payment/gateways/adyen/utils/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import Adyen",
          "7: import opentracing",
          "8: import opentracing.tags",
          "10: from django.conf import settings",
          "11: from django_countries.fields import Country",
          "",
          "[Removed Lines]",
          "9: from babel.numbers import get_currency_precision",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "19: from .....checkout.models import Checkout",
          "20: from .....checkout.utils import is_shipping_required",
          "22: from .....discount.utils import fetch_active_discounts",
          "23: from .....payment.models import Payment",
          "24: from .....plugins.manager import get_plugins_manager",
          "25: from .... import PaymentError",
          "26: from ....interface import PaymentMethodInfo",
          "28: if TYPE_CHECKING:",
          "29:     from ....interface import PaymentData",
          "",
          "[Removed Lines]",
          "21: from .....core.prices import quantize_price",
          "",
          "[Added Lines]",
          "25: from ....utils import price_to_minor_unit",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37: AUTH_STATUS = \"authorised\"",
          "60: def get_tax_percentage_in_adyen_format(total_gross, total_net):",
          "61:     tax_percentage_in_adyen_format = 0",
          "62:     if total_gross and total_net:",
          "",
          "[Removed Lines]",
          "40: def from_adyen_price(value: str, currency: str):",
          "41:     value = Decimal(value)",
          "42:     precision = get_currency_precision(currency)",
          "43:     number_places = Decimal(10) ** -precision",
          "44:     return value * number_places",
          "47: def to_adyen_price(value: Decimal, currency: str):",
          "48:     \"\"\"Adyen doesn't use values with comma.",
          "50:     Take the value, discover the precision of currency and multiply value by",
          "51:     Decimal('10.0'), then change quantization to remove the comma.",
          "52:     \"\"\"",
          "53:     value = quantize_price(value, currency=currency)",
          "54:     precision = get_currency_precision(currency)",
          "55:     number_places = Decimal(\"10.0\") ** precision",
          "56:     value_without_comma = value * number_places",
          "57:     return str(value_without_comma.quantize(Decimal(\"1\")))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     extra_request_params[\"shopperEmail\"] = payment_information.customer_email",
          "132:     request_data = {",
          "133:         \"amount\": {",
          "135:                 payment_information.amount, payment_information.currency",
          "136:             ),",
          "137:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "134:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "113:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:     )",
          "167:     return {",
          "168:         \"quantity\": 1,",
          "170:         \"taxPercentage\": tax_percentage_in_adyen_format,",
          "171:         \"description\": f\"Shipping - {checkout_info.shipping_method.name}\",",
          "172:         \"id\": f\"Shipping:{checkout_info.shipping_method.id}\",",
          "175:     }",
          "",
          "[Removed Lines]",
          "169:         \"amountExcludingTax\": to_adyen_price(total_net, currency),",
          "173:         \"taxAmount\": to_adyen_price(tax_amount, currency),",
          "174:         \"amountIncludingTax\": to_adyen_price(total_gross, currency),",
          "",
          "[Added Lines]",
          "148:         \"amountExcludingTax\": price_to_minor_unit(total_net, currency),",
          "152:         \"taxAmount\": price_to_minor_unit(tax_amount, currency),",
          "153:         \"amountIncludingTax\": price_to_minor_unit(total_gross, currency),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "226:         line_data = {",
          "227:             \"quantity\": line_info.line.quantity,",
          "229:             \"taxPercentage\": tax_percentage_in_adyen_format,",
          "230:             \"description\": (",
          "231:                 f\"{line_info.variant.product.name}, {line_info.variant.name}\"",
          "232:             ),",
          "233:             \"id\": line_info.variant.sku,",
          "236:         }",
          "237:         line_items.append(line_data)",
          "",
          "[Removed Lines]",
          "228:             \"amountExcludingTax\": to_adyen_price(unit_net, currency),",
          "234:             \"taxAmount\": to_adyen_price(tax_amount, currency),",
          "235:             \"amountIncludingTax\": to_adyen_price(unit_gross, currency),",
          "",
          "[Added Lines]",
          "207:             \"amountExcludingTax\": price_to_minor_unit(unit_net, currency),",
          "213:             \"taxAmount\": price_to_minor_unit(tax_amount, currency),",
          "214:             \"amountIncludingTax\": price_to_minor_unit(unit_gross, currency),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "295:         \"countryCode\": country_code,",
          "296:         \"channel\": channel,",
          "297:         \"amount\": {",
          "299:             \"currency\": checkout.currency,",
          "300:         },",
          "301:     }",
          "",
          "[Removed Lines]",
          "298:             \"value\": to_adyen_price(total.gross.amount, checkout.currency),",
          "",
          "[Added Lines]",
          "277:             \"value\": price_to_minor_unit(total.gross.amount, checkout.currency),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "307:     return {",
          "308:         \"merchantAccount\": merchant_account,",
          "309:         \"modificationAmount\": {",
          "311:                 payment_information.amount, payment_information.currency",
          "312:             ),",
          "313:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "310:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "289:             \"value\": price_to_minor_unit(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "323:     return {",
          "324:         \"merchantAccount\": merchant_account,",
          "325:         \"modificationAmount\": {",
          "327:                 payment_information.amount, payment_information.currency",
          "328:             ),",
          "329:             \"currency\": payment_information.currency,",
          "",
          "[Removed Lines]",
          "326:             \"value\": to_adyen_price(",
          "",
          "[Added Lines]",
          "305:             \"value\": price_to_minor_unit(",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: from ... import ChargeStatus, PaymentError, TransactionKind",
          "43: from ...gateway import payment_refund_or_void",
          "44: from ...interface import GatewayConfig, GatewayResponse",
          "48: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "45: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "46: from .utils.common import FAILED_STATUSES, api_call, from_adyen_price",
          "",
          "[Added Lines]",
          "45: from ...utils import (",
          "46:     create_payment_information,",
          "47:     create_transaction,",
          "48:     gateway_postprocess,",
          "49:     price_from_minor_unit,",
          "50: )",
          "51: from .utils.common import FAILED_STATUSES, api_call",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115: def create_new_transaction(notification, payment, kind):",
          "116:     transaction_id = notification.get(\"pspReference\")",
          "117:     currency = notification.get(\"amount\", {}).get(\"currency\")",
          "119:     is_success = True if notification.get(\"success\") == \"true\" else False",
          "121:     gateway_response = GatewayResponse(",
          "",
          "[Removed Lines]",
          "118:     amount = from_adyen_price(notification.get(\"amount\", {}).get(\"value\"), currency)",
          "",
          "[Added Lines]",
          "123:     amount = price_from_minor_unit(",
          "124:         notification.get(\"amount\", {}).get(\"value\"), currency",
          "125:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/__init__.py||saleor/payment/gateways/stripe/__init__.py": [
          "File: saleor/payment/gateways/stripe/__init__.py -> saleor/payment/gateways/stripe/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/consts.py||saleor/payment/gateways/stripe/consts.py": [
          "File: saleor/payment/gateways/stripe/consts.py -> saleor/payment/gateways/stripe/consts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: PLUGIN_ID = \"saleor.payments.stripe\"",
          "2: PLUGIN_NAME = \"Stripe\"",
          "3: WEBHOOK_PATH = \"webhooks/\"",
          "5: WEBHOOK_SUCCESS_EVENT = \"payment_intent.succeeded\"",
          "6: WEBHOOK_PROCESSING_EVENT = \"payment_intent.processing\"",
          "7: WEBHOOK_FAILED_EVENT = \"payment_intent.payment_failed\"",
          "8: WEBHOOK_AUTHORIZED_EVENT = \"payment_intent.amount_capturable_updated\"",
          "9: WEBHOOK_CANCELED_EVENT = \"payment_intent.canceled\"",
          "11: WEBHOOK_REFUND_EVENT = \"charge.refunded\"",
          "14: WEBHOOK_EVENTS = [",
          "15:     WEBHOOK_SUCCESS_EVENT,",
          "16:     WEBHOOK_PROCESSING_EVENT,",
          "17:     WEBHOOK_FAILED_EVENT,",
          "18:     WEBHOOK_AUTHORIZED_EVENT,",
          "19:     WEBHOOK_CANCELED_EVENT,",
          "20:     WEBHOOK_REFUND_EVENT,",
          "21: ]",
          "22: METADATA_IDENTIFIER = \"saleor-domain\"",
          "24: ACTION_REQUIRED_STATUSES = [",
          "25:     \"requires_payment_method\",",
          "26:     \"requires_confirmation\",",
          "27:     \"requires_action\",",
          "28: ]",
          "30: FAILED_STATUSES = [\"requires_payment_method\" \"canceled\"]",
          "32: SUCCESS_STATUS = \"succeeded\"",
          "34: PROCESSING_STATUS = \"processing\"",
          "36: AUTHORIZED_STATUS = \"requires_capture\"",
          "38: AUTOMATIC_CAPTURE_METHOD = \"automatic\"",
          "39: MANUAL_CAPTURE_METHOD = \"manual\"",
          "41: STRIPE_API_VERSION = \"2020-08-27\"",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/deprecated/__init__.py||saleor/payment/gateways/stripe/deprecated/__init__.py": [
          "File: saleor/payment/gateways/stripe/deprecated/__init__.py -> saleor/payment/gateways/stripe/deprecated/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import List",
          "3: import opentracing",
          "4: import opentracing.tags",
          "5: import stripe",
          "7: from .... import TransactionKind",
          "8: from ....interface import (",
          "9:     CustomerSource,",
          "10:     GatewayConfig,",
          "11:     GatewayResponse,",
          "12:     PaymentData,",
          "13:     PaymentMethodInfo,",
          "14: )",
          "15: from .utils import (",
          "16:     get_amount_for_stripe,",
          "17:     get_amount_from_stripe,",
          "18:     get_currency_for_stripe,",
          "19:     get_currency_from_stripe,",
          "20:     shipping_to_stripe_dict,",
          "21: )",
          "24: def get_client_token(**_):",
          "25:     \"\"\"Not implemented for stripe gateway currently.",
          "27:     The client token can be generated by stripe.js automatically.",
          "28:     \"\"\"",
          "29:     return",
          "32: def authorize(",
          "33:     payment_information: PaymentData, config: GatewayConfig",
          "34: ) -> GatewayResponse:",
          "35:     kind = TransactionKind.CAPTURE if config.auto_capture else TransactionKind.AUTH",
          "36:     client = _get_client(**config.connection_params)",
          "37:     capture_method = \"automatic\" if config.auto_capture else \"manual\"",
          "38:     currency = get_currency_for_stripe(payment_information.currency)",
          "39:     stripe_amount = get_amount_for_stripe(payment_information.amount, currency)",
          "40:     future_use = \"off_session\" if config.store_customer else \"on_session\"",
          "41:     customer_id = PaymentData.customer_id if payment_information.reuse_source else None",
          "42:     shipping = (",
          "43:         shipping_to_stripe_dict(payment_information.shipping)",
          "44:         if payment_information.shipping",
          "45:         else None",
          "46:     )",
          "48:     try:",
          "49:         with opentracing.global_tracer().start_active_span(",
          "50:             \"stripe.PaymentIntent.create\"",
          "51:         ) as scope:",
          "52:             span = scope.span",
          "53:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "54:             span.set_tag(\"service.name\", \"stripe\")",
          "55:             intent = client.PaymentIntent.create(",
          "56:                 payment_method=payment_information.token,",
          "57:                 amount=stripe_amount,",
          "58:                 currency=currency,",
          "59:                 confirmation_method=\"manual\",",
          "60:                 confirm=True,",
          "61:                 capture_method=capture_method,",
          "62:                 setup_future_usage=future_use,",
          "63:                 customer=customer_id,",
          "64:                 shipping=shipping,",
          "65:             )",
          "66:         if config.store_customer and not customer_id:",
          "67:             with opentracing.global_tracer().start_active_span(",
          "68:                 \"stripe.Customer.create\"",
          "69:             ) as scope:",
          "70:                 span = scope.span",
          "71:                 span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "72:                 span.set_tag(\"service.name\", \"stripe\")",
          "73:                 customer = client.Customer.create(payment_method=intent.payment_method)",
          "74:             customer_id = customer.id",
          "76:     except stripe.error.StripeError as exc:",
          "77:         response = _error_response(kind=kind, exc=exc, payment_info=payment_information)",
          "78:     else:",
          "79:         success = intent.status in (\"succeeded\", \"requires_capture\", \"requires_action\")",
          "80:         response = _success_response(",
          "81:             intent=intent, kind=kind, success=success, customer_id=customer_id",
          "82:         )",
          "83:         response = fill_card_details(intent, response)",
          "84:     return response",
          "87: def capture(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "88:     client = _get_client(**config.connection_params)",
          "89:     intent = None",
          "90:     try:",
          "91:         with opentracing.global_tracer().start_active_span(",
          "92:             \"stripe.PaymentIntent.retrieve\"",
          "93:         ) as scope:",
          "94:             span = scope.span",
          "95:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "96:             span.set_tag(\"service.name\", \"stripe\")",
          "97:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "98:         capture = intent.capture()",
          "99:     except stripe.error.StripeError as exc:",
          "100:         action_required = intent.status == \"requires_action\" if intent else False",
          "101:         response = _error_response(",
          "102:             kind=TransactionKind.CAPTURE,",
          "103:             exc=exc,",
          "104:             payment_info=payment_information,",
          "105:             action_required=action_required,",
          "106:         )",
          "107:     else:",
          "108:         response = _success_response(",
          "109:             intent=intent,",
          "110:             kind=TransactionKind.CAPTURE,",
          "111:             success=capture.status in (\"succeeded\", \"requires_action\"),",
          "112:         )",
          "113:         response = fill_card_details(intent, response)",
          "114:     return response",
          "117: def confirm(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "118:     client = _get_client(**config.connection_params)",
          "119:     try:",
          "120:         intent = client.PaymentIntent(id=payment_information.token)",
          "121:         with opentracing.global_tracer().start_active_span(",
          "122:             \"stripe.PaymentIntent.confirm\"",
          "123:         ) as scope:",
          "124:             span = scope.span",
          "125:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "126:             span.set_tag(\"service.name\", \"stripe\")",
          "127:             intent.confirm()",
          "128:     except stripe.error.StripeError as exc:",
          "129:         response = _error_response(",
          "130:             kind=TransactionKind.CONFIRM, exc=exc, payment_info=payment_information",
          "131:         )",
          "132:     else:",
          "133:         response = _success_response(",
          "134:             intent=intent,",
          "135:             kind=TransactionKind.CONFIRM,",
          "136:             success=intent.status == \"succeeded\",",
          "137:         )",
          "138:         response = fill_card_details(intent, response)",
          "139:     return response",
          "142: def refund(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "143:     client = _get_client(**config.connection_params)",
          "144:     currency = get_currency_for_stripe(payment_information.currency)",
          "145:     stripe_amount = get_amount_for_stripe(payment_information.amount, currency)",
          "146:     try:",
          "147:         with opentracing.global_tracer().start_active_span(",
          "148:             \"stripe.PaymentIntent.retrieve\"",
          "149:         ) as scope:",
          "150:             span = scope.span",
          "151:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "152:             span.set_tag(\"service.name\", \"stripe\")",
          "153:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "154:         refund = intent[\"charges\"][\"data\"][0].refund(amount=stripe_amount)",
          "155:     except stripe.error.StripeError as exc:",
          "156:         response = _error_response(",
          "157:             kind=TransactionKind.REFUND, exc=exc, payment_info=payment_information",
          "158:         )",
          "159:     else:",
          "160:         response = _success_response(",
          "161:             intent=intent,",
          "162:             kind=TransactionKind.REFUND,",
          "163:             success=refund.status == \"succeeded\",",
          "164:             amount=payment_information.amount,",
          "165:             currency=get_currency_from_stripe(refund.currency),",
          "166:         )",
          "167:     return response",
          "170: def void(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "171:     client = _get_client(**config.connection_params)",
          "172:     try:",
          "173:         with opentracing.global_tracer().start_active_span(",
          "174:             \"stripe.PaymentIntent.retrieve\"",
          "175:         ) as scope:",
          "176:             span = scope.span",
          "177:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "178:             span.set_tag(\"service.name\", \"stripe\")",
          "179:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "180:         refund = intent[\"charges\"][\"data\"][0].refund()",
          "181:     except stripe.error.StripeError as exc:",
          "182:         response = _error_response(",
          "183:             kind=TransactionKind.VOID, exc=exc, payment_info=payment_information",
          "184:         )",
          "185:     else:",
          "186:         response = _success_response(",
          "187:             intent=intent,",
          "188:             kind=TransactionKind.VOID,",
          "189:             currency=get_currency_from_stripe(refund.currency),",
          "190:             raw_response=refund,",
          "191:         )",
          "192:     return response",
          "195: def list_client_sources(",
          "196:     config: GatewayConfig, customer_id: str",
          "197: ) -> List[CustomerSource]:",
          "198:     client = _get_client(**config.connection_params)",
          "199:     with opentracing.global_tracer().start_active_span(",
          "200:         \"stripe.PaymentMethod.list\"",
          "201:     ) as scope:",
          "202:         span = scope.span",
          "203:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "204:         span.set_tag(\"service.name\", \"stripe\")",
          "205:         cards = client.PaymentMethod.list(customer=customer_id, type=\"card\")[\"data\"]",
          "206:     return [",
          "207:         CustomerSource(",
          "208:             id=c.id,",
          "209:             gateway=\"stripe\",",
          "210:             credit_card_info=PaymentMethodInfo(",
          "211:                 exp_year=c.card.exp_year,",
          "212:                 exp_month=c.card.exp_month,",
          "213:                 last_4=c.card.last4,",
          "214:                 name=None,",
          "215:             ),",
          "216:         )",
          "217:         for c in cards",
          "218:     ]",
          "221: def process_payment(",
          "222:     payment_information: PaymentData, config: GatewayConfig",
          "223: ) -> GatewayResponse:",
          "224:     return authorize(payment_information, config)",
          "227: def _get_client(**connection_params):",
          "228:     stripe.api_key = connection_params.get(\"private_key\")",
          "229:     return stripe",
          "232: def _error_response(",
          "233:     kind: str,  # use TransactionKind class",
          "234:     exc: stripe.error.StripeError,",
          "235:     payment_info: PaymentData,",
          "236:     action_required: bool = False,",
          "237: ) -> GatewayResponse:",
          "238:     return GatewayResponse(",
          "239:         is_success=False,",
          "240:         action_required=action_required,",
          "241:         transaction_id=payment_info.token or \"\",",
          "242:         amount=payment_info.amount,",
          "243:         currency=payment_info.currency,",
          "244:         error=exc.user_message,",
          "245:         kind=kind,",
          "246:         raw_response=exc.json_body or {},",
          "247:         customer_id=payment_info.customer_id,",
          "248:     )",
          "251: def _success_response(",
          "252:     intent: stripe.PaymentIntent,",
          "253:     kind: str,  # use TransactionKind class",
          "254:     success: bool = True,",
          "255:     amount=None,",
          "256:     currency=None,",
          "257:     customer_id=None,",
          "258:     raw_response=None,",
          "259: ):",
          "260:     currency = currency or get_currency_from_stripe(intent.currency)",
          "261:     return GatewayResponse(",
          "262:         is_success=success,",
          "263:         action_required=intent.status == \"requires_action\",",
          "264:         transaction_id=intent.id,",
          "265:         amount=amount or get_amount_from_stripe(intent.amount, currency),",
          "266:         currency=currency,",
          "267:         error=None,",
          "268:         kind=kind,",
          "269:         raw_response=raw_response or intent,",
          "270:         customer_id=customer_id,",
          "271:     )",
          "274: def fill_card_details(intent: stripe.PaymentIntent, response: GatewayResponse):",
          "275:     charges = intent.charges[\"data\"]",
          "276:     if charges:",
          "277:         card = intent.charges[\"data\"][-1][\"payment_method_details\"][\"card\"]",
          "278:         brand = card[\"brand\"] or \"\"",
          "280:         response.payment_method_info = PaymentMethodInfo(",
          "281:             last_4=card[\"last4\"],",
          "282:             exp_year=card[\"exp_year\"],",
          "283:             exp_month=card[\"exp_month\"],",
          "284:             brand=brand.lower(),",
          "285:             type=\"card\",",
          "286:         )",
          "287:     return response",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/deprecated/plugin.py||saleor/payment/gateways/stripe/deprecated/plugin.py": [
          "File: saleor/payment/gateways/stripe/deprecated/plugin.py -> saleor/payment/gateways/stripe/deprecated/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from typing import TYPE_CHECKING, List",
          "3: from saleor.plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "5: from ...utils import get_supported_currencies, require_active_plugin",
          "6: from . import (",
          "7:     GatewayConfig,",
          "8:     authorize,",
          "9:     capture,",
          "10:     list_client_sources,",
          "11:     process_payment,",
          "12:     refund,",
          "13:     void,",
          "14: )",
          "16: GATEWAY_NAME = \"Stripe (Deprecated)\"",
          "18: if TYPE_CHECKING:",
          "19:     # flake8: noqa",
          "20:     from ....interface import CustomerSource",
          "21:     from . import GatewayResponse, PaymentData",
          "24: class DeprecatedStripeGatewayPlugin(BasePlugin):",
          "25:     PLUGIN_NAME = GATEWAY_NAME",
          "26:     PLUGIN_ID = \"mirumee.payments.stripe\"",
          "27:     PLUGIN_DESCRIPTION = \"\"\"",
          "28:     This plugin will be removed in Saleor 4.0. Use the new Stripe plugin which",
          "29:     implements webhook support, 3D Secure and SCA.",
          "30:     \"\"\"",
          "32:     DEFAULT_CONFIGURATION = [",
          "33:         {\"name\": \"Public API key\", \"value\": None},",
          "34:         {\"name\": \"Secret API key\", \"value\": None},",
          "35:         {\"name\": \"Store customers card\", \"value\": False},",
          "36:         {\"name\": \"Automatic payment capture\", \"value\": True},",
          "37:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "38:     ]",
          "40:     CONFIG_STRUCTURE = {",
          "41:         \"Public API key\": {",
          "42:             \"type\": ConfigurationTypeField.SECRET,",
          "43:             \"help_text\": \"Provide Stripe public API key.\",",
          "44:             \"label\": \"Public API key\",",
          "45:         },",
          "46:         \"Secret API key\": {",
          "47:             \"type\": ConfigurationTypeField.SECRET,",
          "48:             \"help_text\": \"Provide Stripe secret API key.\",",
          "49:             \"label\": \"Secret API key\",",
          "50:         },",
          "51:         \"Store customers card\": {",
          "52:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "53:             \"help_text\": \"Determines if Saleor should store cards on payments \"",
          "54:             \"in Stripe customer.\",",
          "55:             \"label\": \"Store customers card\",",
          "56:         },",
          "57:         \"Automatic payment capture\": {",
          "58:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "59:             \"help_text\": \"Determines if Saleor should automaticaly capture payments.\",",
          "60:             \"label\": \"Automatic payment capture\",",
          "61:         },",
          "62:         \"Supported currencies\": {",
          "63:             \"type\": ConfigurationTypeField.STRING,",
          "64:             \"help_text\": \"Determines currencies supported by gateway.\"",
          "65:             \" Please enter currency codes separated by a comma.\",",
          "66:             \"label\": \"Supported currencies\",",
          "67:         },",
          "68:     }",
          "70:     def __init__(self, *args, **kwargs):",
          "71:         super().__init__(*args, **kwargs)",
          "72:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "73:         self.config = GatewayConfig(",
          "74:             gateway_name=GATEWAY_NAME,",
          "75:             auto_capture=configuration[\"Automatic payment capture\"],",
          "76:             supported_currencies=configuration[\"Supported currencies\"],",
          "77:             connection_params={",
          "78:                 \"public_key\": configuration[\"Public API key\"],",
          "79:                 \"private_key\": configuration[\"Secret API key\"],",
          "80:             },",
          "81:             store_customer=configuration[\"Store customers card\"],",
          "82:         )",
          "84:     def _get_gateway_config(self):",
          "85:         return self.config",
          "87:     @require_active_plugin",
          "88:     def authorize_payment(",
          "89:         self, payment_information: \"PaymentData\", previous_value",
          "90:     ) -> \"GatewayResponse\":",
          "91:         return authorize(payment_information, self._get_gateway_config())",
          "93:     @require_active_plugin",
          "94:     def capture_payment(",
          "95:         self, payment_information: \"PaymentData\", previous_value",
          "96:     ) -> \"GatewayResponse\":",
          "97:         return capture(payment_information, self._get_gateway_config())",
          "99:     @require_active_plugin",
          "100:     def refund_payment(",
          "101:         self, payment_information: \"PaymentData\", previous_value",
          "102:     ) -> \"GatewayResponse\":",
          "103:         return refund(payment_information, self._get_gateway_config())",
          "105:     @require_active_plugin",
          "106:     def void_payment(",
          "107:         self, payment_information: \"PaymentData\", previous_value",
          "108:     ) -> \"GatewayResponse\":",
          "109:         return void(payment_information, self._get_gateway_config())",
          "111:     @require_active_plugin",
          "112:     def process_payment(",
          "113:         self, payment_information: \"PaymentData\", previous_value",
          "114:     ) -> \"GatewayResponse\":",
          "115:         return process_payment(payment_information, self._get_gateway_config())",
          "117:     @require_active_plugin",
          "118:     def list_payment_sources(",
          "119:         self, customer_id: str, previous_value",
          "120:     ) -> List[\"CustomerSource\"]:",
          "121:         sources = list_client_sources(self._get_gateway_config(), customer_id)",
          "122:         previous_value.extend(sources)",
          "123:         return previous_value",
          "125:     @require_active_plugin",
          "126:     def get_supported_currencies(self, previous_value):",
          "127:         config = self._get_gateway_config()",
          "128:         return get_supported_currencies(config, GATEWAY_NAME)",
          "130:     @require_active_plugin",
          "131:     def get_payment_config(self, previous_value):",
          "132:         config = self._get_gateway_config()",
          "133:         return [",
          "134:             {\"field\": \"api_key\", \"value\": config.connection_params[\"public_key\"]},",
          "135:             {\"field\": \"store_customer_card\", \"value\": config.store_customer},",
          "136:         ]",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/test_stripe.py||saleor/payment/gateways/stripe/deprecated/tests/test_stripe.py": [
          "File: saleor/payment/gateways/stripe/tests/test_stripe.py -> saleor/payment/gateways/stripe/deprecated/tests/test_stripe.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import pytest",
          "10: from .. import (",
          "11:     TransactionKind,",
          "12:     _get_client,",
          "",
          "[Removed Lines]",
          "7: from .... import ChargeStatus",
          "8: from ....interface import CustomerSource, GatewayConfig, PaymentMethodInfo",
          "9: from ....utils import create_payment_information",
          "",
          "[Added Lines]",
          "7: from ..... import ChargeStatus",
          "8: from .....interface import CustomerSource, GatewayConfig, PaymentMethodInfo",
          "9: from .....utils import create_payment_information",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/test_utils.py||saleor/payment/gateways/stripe/deprecated/tests/test_utils.py": [
          "File: saleor/payment/gateways/stripe/tests/test_utils.py -> saleor/payment/gateways/stripe/deprecated/tests/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from django_countries import countries",
          "8: from ..utils import (",
          "9:     get_amount_for_stripe,",
          "10:     get_amount_from_stripe,",
          "",
          "[Removed Lines]",
          "6: from ....interface import AddressData",
          "7: from ....utils import create_payment_information",
          "",
          "[Added Lines]",
          "6: from .....interface import AddressData",
          "7: from .....utils import create_payment_information",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/utils.py||saleor/payment/gateways/stripe/deprecated/utils.py": [
          "File: saleor/payment/gateways/stripe/utils.py -> saleor/payment/gateways/stripe/deprecated/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: # Since there is no public API in Stripe backend or helper function",
          "8: # in Stripe's Python library, this list is straight out of Stripe's docs",
          "9: # https://stripe.com/docs/currencies#zero-decimal",
          "12: ZERO_DECIMAL_CURRENCIES = [",
          "13:     \"BIF\",",
          "",
          "[Removed Lines]",
          "10: from ...interface import AddressData, PaymentData",
          "",
          "[Added Lines]",
          "10: from ....interface import AddressData, PaymentData",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/plugin.py||saleor/payment/gateways/stripe/plugin.py": [
          "File: saleor/payment/gateways/stripe/plugin.py -> saleor/payment/gateways/stripe/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     GatewayConfig,",
          "14: )",
          "18: if TYPE_CHECKING:",
          "19:     # flake8: noqa",
          "24: class StripeGatewayPlugin(BasePlugin):",
          "27:     DEFAULT_CONFIGURATION = [",
          "33:     ]",
          "35:     CONFIG_STRUCTURE = {",
          "38:             \"help_text\": \"Provide Stripe public API key.\",",
          "39:             \"label\": \"Public API key\",",
          "40:         },",
          "42:             \"type\": ConfigurationTypeField.SECRET,",
          "43:             \"help_text\": \"Provide Stripe secret API key.\",",
          "44:             \"label\": \"Secret API key\",",
          "45:         },",
          "53:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "54:             \"help_text\": \"Determines if Saleor should automaticaly capture payments.\",",
          "55:             \"label\": \"Automatic payment capture\",",
          "56:         },",
          "58:             \"type\": ConfigurationTypeField.STRING,",
          "59:             \"help_text\": \"Determines currencies supported by gateway.\"",
          "60:             \" Please enter currency codes separated by a comma.\",",
          "61:             \"label\": \"Supported currencies\",",
          "62:         },",
          "63:     }",
          "65:     def __init__(self, *args, **kwargs):",
          "66:         super().__init__(*args, **kwargs)",
          "67:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
          "68:         self.config = GatewayConfig(",
          "72:             connection_params={",
          "75:             },",
          "77:         )",
          "82:     @require_active_plugin",
          "84:         self, payment_information: \"PaymentData\", previous_value",
          "85:     ) -> \"GatewayResponse\":",
          "88:     @require_active_plugin",
          "90:         self, payment_information: \"PaymentData\", previous_value",
          "91:     ) -> \"GatewayResponse\":",
          "94:     @require_active_plugin",
          "96:         self, payment_information: \"PaymentData\", previous_value",
          "97:     ) -> \"GatewayResponse\":",
          "100:     @require_active_plugin",
          "102:         self, payment_information: \"PaymentData\", previous_value",
          "103:     ) -> \"GatewayResponse\":",
          "106:     @require_active_plugin",
          "108:         self, payment_information: \"PaymentData\", previous_value",
          "109:     ) -> \"GatewayResponse\":",
          "112:     @require_active_plugin",
          "113:     def list_payment_sources(",
          "114:         self, customer_id: str, previous_value",
          "118:         return previous_value",
          "125:     @require_active_plugin",
          "126:     def get_payment_config(self, previous_value):",
          "128:         return [",
          "131:         ]",
          "",
          "[Removed Lines]",
          "1: from typing import TYPE_CHECKING, List",
          "3: from saleor.plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "5: from ..utils import get_supported_currencies, require_active_plugin",
          "6: from . import (",
          "8:     authorize,",
          "9:     capture,",
          "10:     list_client_sources,",
          "11:     process_payment,",
          "12:     refund,",
          "13:     void,",
          "16: GATEWAY_NAME = \"Stripe\"",
          "20:     from ...interface import CustomerSource",
          "21:     from . import GatewayResponse, PaymentData",
          "25:     PLUGIN_NAME = GATEWAY_NAME",
          "26:     PLUGIN_ID = \"mirumee.payments.stripe\"",
          "28:         {\"name\": \"Public API key\", \"value\": None},",
          "29:         {\"name\": \"Secret API key\", \"value\": None},",
          "30:         {\"name\": \"Store customers card\", \"value\": False},",
          "31:         {\"name\": \"Automatic payment capture\", \"value\": True},",
          "32:         {\"name\": \"Supported currencies\", \"value\": \"\"},",
          "36:         \"Public API key\": {",
          "37:             \"type\": ConfigurationTypeField.SECRET,",
          "41:         \"Secret API key\": {",
          "46:         \"Store customers card\": {",
          "47:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "48:             \"help_text\": \"Determines if Saleor should store cards on payments \"",
          "49:             \"in Stripe customer.\",",
          "50:             \"label\": \"Store customers card\",",
          "51:         },",
          "52:         \"Automatic payment capture\": {",
          "57:         \"Supported currencies\": {",
          "69:             gateway_name=GATEWAY_NAME,",
          "70:             auto_capture=configuration[\"Automatic payment capture\"],",
          "71:             supported_currencies=configuration[\"Supported currencies\"],",
          "73:                 \"public_key\": configuration[\"Public API key\"],",
          "74:                 \"private_key\": configuration[\"Secret API key\"],",
          "76:             store_customer=configuration[\"Store customers card\"],",
          "79:     def _get_gateway_config(self):",
          "80:         return self.config",
          "83:     def authorize_payment(",
          "86:         return authorize(payment_information, self._get_gateway_config())",
          "89:     def capture_payment(",
          "92:         return capture(payment_information, self._get_gateway_config())",
          "95:     def refund_payment(",
          "98:         return refund(payment_information, self._get_gateway_config())",
          "101:     def void_payment(",
          "104:         return void(payment_information, self._get_gateway_config())",
          "107:     def process_payment(",
          "110:         return process_payment(payment_information, self._get_gateway_config())",
          "115:     ) -> List[\"CustomerSource\"]:",
          "116:         sources = list_client_sources(self._get_gateway_config(), customer_id)",
          "117:         previous_value.extend(sources)",
          "120:     @require_active_plugin",
          "121:     def get_supported_currencies(self, previous_value):",
          "122:         config = self._get_gateway_config()",
          "123:         return get_supported_currencies(config, GATEWAY_NAME)",
          "127:         config = self._get_gateway_config()",
          "129:             {\"field\": \"api_key\", \"value\": config.connection_params[\"public_key\"]},",
          "130:             {\"field\": \"store_customer_card\", \"value\": config.store_customer},",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from typing import TYPE_CHECKING, List, Optional, Tuple",
          "4: from django.contrib.sites.models import Site",
          "5: from django.core.exceptions import ValidationError",
          "6: from django.core.handlers.wsgi import WSGIRequest",
          "7: from django.http import HttpResponse, HttpResponseNotFound",
          "8: from django.http.request import split_domain_port",
          "9: from stripe.stripe_object import StripeObject",
          "11: from ....graphql.core.enums import PluginErrorCode",
          "12: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "13: from ... import TransactionKind",
          "14: from ...interface import (",
          "15:     CustomerSource,",
          "17:     GatewayResponse,",
          "18:     PaymentData,",
          "19:     PaymentMethodInfo,",
          "21: from ...models import Transaction",
          "22: from ...utils import price_from_minor_unit, price_to_minor_unit",
          "23: from ..utils import get_supported_currencies, require_active_plugin",
          "24: from .stripe_api import (",
          "25:     cancel_payment_intent,",
          "26:     capture_payment_intent,",
          "27:     create_payment_intent,",
          "28:     delete_webhook,",
          "29:     get_or_create_customer,",
          "30:     get_payment_method_details,",
          "31:     is_secret_api_key_valid,",
          "32:     list_customer_payment_methods,",
          "33:     refund_payment_intent,",
          "34:     retrieve_payment_intent,",
          "35:     subscribe_webhook,",
          "36: )",
          "37: from .webhooks import handle_webhook",
          "41:     from ....plugins.models import PluginConfiguration",
          "43: from .consts import (",
          "44:     ACTION_REQUIRED_STATUSES,",
          "45:     AUTHORIZED_STATUS,",
          "46:     PLUGIN_ID,",
          "47:     PLUGIN_NAME,",
          "48:     PROCESSING_STATUS,",
          "49:     SUCCESS_STATUS,",
          "50:     WEBHOOK_PATH,",
          "51: )",
          "53: logger = logging.getLogger(__name__)",
          "57:     PLUGIN_NAME = PLUGIN_NAME",
          "58:     PLUGIN_ID = PLUGIN_ID",
          "60:         {\"name\": \"public_api_key\", \"value\": None},",
          "61:         {\"name\": \"secret_api_key\", \"value\": None},",
          "62:         {\"name\": \"automatic_payment_capture\", \"value\": True},",
          "63:         {\"name\": \"supported_currencies\", \"value\": \"\"},",
          "64:         {\"name\": \"webhook_endpoint_id\", \"value\": None},",
          "65:         {\"name\": \"webhook_secret_key\", \"value\": None},",
          "69:         \"public_api_key\": {",
          "70:             \"type\": ConfigurationTypeField.STRING,",
          "74:         \"secret_api_key\": {",
          "79:         \"automatic_payment_capture\": {",
          "84:         \"supported_currencies\": {",
          "90:         \"webhook_endpoint_id\": {",
          "91:             \"type\": ConfigurationTypeField.OUTPUT,",
          "92:             \"help_text\": \"Unique identifier for the webhook endpoint object.\",",
          "93:             \"label\": \"Webhook endpoint\",",
          "94:         },",
          "99:         # Webhook details are not listed in CONFIG_STRUCTURE as user input is not",
          "100:         # required here",
          "101:         plugin_configuration = kwargs.get(\"configuration\")",
          "102:         raw_configuration = {",
          "103:             item[\"name\"]: item[\"value\"] for item in plugin_configuration",
          "104:         }",
          "105:         webhook_secret = raw_configuration.get(\"webhook_secret_key\")",
          "110:             gateway_name=PLUGIN_NAME,",
          "111:             auto_capture=configuration[\"automatic_payment_capture\"],",
          "112:             supported_currencies=configuration[\"supported_currencies\"],",
          "114:                 \"public_api_key\": configuration[\"public_api_key\"],",
          "115:                 \"secret_api_key\": configuration[\"secret_api_key\"],",
          "116:                 \"webhook_id\": configuration[\"webhook_endpoint_id\"],",
          "117:                 \"webhook_secret\": webhook_secret,",
          "119:             store_customer=True,",
          "122:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "123:         config = self.config",
          "124:         if path.startswith(WEBHOOK_PATH, 1):  # 1 as we don't check the '/'",
          "125:             return handle_webhook(request, config)",
          "126:         logger.warning(",
          "127:             \"Received request to incorrect stripe path\", extra={\"path\": path}",
          "128:         )",
          "129:         return HttpResponseNotFound()",
          "131:     @require_active_plugin",
          "132:     def token_is_required_as_payment_input(self, previous_value):",
          "133:         return False",
          "135:     @require_active_plugin",
          "136:     def get_supported_currencies(self, previous_value):",
          "137:         return get_supported_currencies(self.config, PLUGIN_NAME)",
          "139:     @property",
          "140:     def order_auto_confirmation(self):",
          "141:         site_settings = Site.objects.get_current().settings",
          "142:         return site_settings.automatically_confirm_all_new_orders",
          "144:     def _get_transaction_details_for_stripe_status(",
          "145:         self, status: str",
          "146:     ) -> Tuple[str, bool]:",
          "147:         kind = TransactionKind.AUTH",
          "148:         action_required = True",
          "150:         # payment still requires an action",
          "151:         if status in ACTION_REQUIRED_STATUSES:",
          "152:             kind = TransactionKind.ACTION_TO_CONFIRM",
          "153:         elif status == PROCESSING_STATUS:",
          "154:             kind = TransactionKind.PENDING",
          "155:             action_required = False",
          "156:         elif status == SUCCESS_STATUS:",
          "157:             kind = TransactionKind.CAPTURE",
          "158:             action_required = False",
          "159:         elif status == AUTHORIZED_STATUS:",
          "160:             kind = TransactionKind.AUTH",
          "161:             action_required = False",
          "163:         return kind, action_required",
          "166:     def process_payment(",
          "170:         api_key = self.config.connection_params[\"secret_api_key\"]",
          "172:         auto_capture = self.config.auto_capture",
          "173:         if self.order_auto_confirmation is False:",
          "174:             auto_capture = False",
          "176:         data = payment_information.data",
          "178:         payment_method_id = data.get(\"payment_method_id\") if data else None",
          "180:         setup_future_usage = None",
          "181:         if payment_information.reuse_source:",
          "182:             setup_future_usage = data.get(\"setup_future_usage\") if data else None",
          "184:         off_session = data.get(\"off_session\") if data else None",
          "186:         payment_method_types = data.get(\"payment_method_types\") if data else None",
          "188:         customer = None",
          "189:         # confirm that we creates customer on stripe side only for log-in customers",
          "190:         # Stripe doesn't allow to search users by email, so each create customer",
          "191:         # call creates new customer on Stripe side.",
          "192:         if payment_information.graphql_customer_id:",
          "193:             customer = get_or_create_customer(",
          "194:                 api_key=api_key,",
          "195:                 customer_email=payment_information.customer_email,",
          "196:                 customer_id=payment_information.customer_id,",
          "197:             )",
          "198:         intent, error = create_payment_intent(",
          "199:             api_key=api_key,",
          "200:             amount=payment_information.amount,",
          "201:             currency=payment_information.currency,",
          "202:             auto_capture=auto_capture,",
          "203:             customer=customer,",
          "204:             payment_method_id=payment_method_id,",
          "205:             metadata={",
          "206:                 \"channel\": self.channel.slug,  # type: ignore",
          "207:                 \"payment_id\": payment_information.graphql_payment_id,",
          "208:             },",
          "209:             setup_future_usage=setup_future_usage,",
          "210:             off_session=off_session,",
          "211:             payment_method_types=payment_method_types,",
          "212:             customer_email=payment_information.customer_email,",
          "213:         )",
          "215:         if error and payment_method_id and not intent:",
          "216:             # we can receive an error which is caused by a required authentication",
          "217:             # but stripe already created payment_intent.",
          "218:             stripe_error = error.error",
          "219:             intent = getattr(stripe_error, \"payment_intent\", None)",
          "220:             error = None if intent else error",
          "222:         raw_response = None",
          "223:         client_secret = None",
          "224:         intent_id = None",
          "225:         kind = TransactionKind.ACTION_TO_CONFIRM",
          "226:         action_required = True",
          "227:         if intent:",
          "228:             kind, action_required = self._get_transaction_details_for_stripe_status(",
          "229:                 intent.status",
          "230:             )",
          "231:             client_secret = intent.client_secret",
          "232:             raw_response = intent.last_response.data",
          "233:             intent_id = intent.id",
          "235:         return GatewayResponse(",
          "236:             is_success=True if not error else False,",
          "237:             action_required=action_required,",
          "238:             kind=kind,",
          "239:             amount=payment_information.amount,",
          "240:             currency=payment_information.currency,",
          "241:             transaction_id=intent.id if intent else \"\",",
          "242:             error=error.user_message if error else None,",
          "243:             raw_response=raw_response,",
          "244:             action_required_data={\"client_secret\": client_secret, \"id\": intent_id},",
          "245:             customer_id=customer.id if customer else None,",
          "246:             psp_reference=intent.id if intent else None,",
          "247:         )",
          "250:     def confirm_payment(",
          "253:         payment_intent_id = payment_information.token",
          "254:         api_key = self.config.connection_params[\"secret_api_key\"]",
          "256:         # before we will call stripe API, let's check if the transaction object hasn't",
          "257:         # been created by webhook handler",
          "258:         payment_transaction = Transaction.objects.filter(",
          "259:             payment_id=payment_information.payment_id,",
          "260:             is_success=True,",
          "261:             action_required=False,",
          "262:             kind__in=[",
          "263:                 TransactionKind.AUTH,",
          "264:                 TransactionKind.CAPTURE,",
          "265:                 TransactionKind.PENDING,",
          "266:             ],",
          "267:         ).first()",
          "269:         if payment_transaction:",
          "270:             return GatewayResponse(",
          "271:                 is_success=True,",
          "272:                 action_required=False,",
          "273:                 kind=payment_transaction.kind,",
          "274:                 amount=payment_transaction.amount,",
          "275:                 currency=payment_transaction.currency,",
          "276:                 transaction_id=payment_transaction.token,",
          "277:                 error=None,",
          "278:                 raw_response=payment_transaction.gateway_response,",
          "279:                 transaction_already_processed=True,",
          "280:             )",
          "282:         payment_intent = None",
          "283:         error = None",
          "284:         payment_method_info = None",
          "285:         if payment_intent_id:",
          "286:             payment_intent, error = retrieve_payment_intent(api_key, payment_intent_id)",
          "288:         kind = TransactionKind.AUTH",
          "289:         if payment_intent:",
          "290:             amount = price_from_minor_unit(",
          "291:                 payment_intent.amount, payment_intent.currency",
          "292:             )",
          "293:             currency = payment_intent.currency",
          "295:             kind, action_required = self._get_transaction_details_for_stripe_status(",
          "296:                 payment_intent.status",
          "297:             )",
          "298:             if kind == TransactionKind.CAPTURE:",
          "299:                 payment_method_info = get_payment_method_details(payment_intent)",
          "300:         else:",
          "301:             action_required = False",
          "302:             amount = payment_information.amount",
          "303:             currency = payment_information.currency",
          "305:         raw_response = None",
          "306:         if payment_intent and payment_intent.last_response:",
          "307:             raw_response = payment_intent.last_response.data",
          "309:         return GatewayResponse(",
          "310:             is_success=True if payment_intent else False,",
          "311:             action_required=action_required,",
          "312:             kind=kind,",
          "313:             amount=amount,",
          "314:             currency=currency,",
          "315:             transaction_id=payment_intent.id if payment_intent else \"\",",
          "316:             error=error.user_message if error else None,",
          "317:             raw_response=raw_response,",
          "318:             psp_reference=payment_intent.id if payment_intent else None,",
          "319:             payment_method_info=payment_method_info,",
          "320:         )",
          "323:     def capture_payment(",
          "326:         payment_intent_id = payment_information.token",
          "327:         capture_amount = price_to_minor_unit(",
          "328:             payment_information.amount, payment_information.currency",
          "329:         )",
          "330:         payment_intent, error = capture_payment_intent(",
          "331:             api_key=self.config.connection_params[\"secret_api_key\"],",
          "332:             payment_intent_id=payment_intent_id,  # type: ignore",
          "333:             amount_to_capture=capture_amount,",
          "334:         )",
          "336:         raw_response = None",
          "337:         if payment_intent and payment_intent.last_response:",
          "338:             raw_response = payment_intent.last_response.data",
          "340:         payment_method_info = None",
          "341:         if payment_intent and payment_intent.status == SUCCESS_STATUS:",
          "342:             payment_method_info = get_payment_method_details(payment_intent)",
          "344:         return GatewayResponse(",
          "345:             is_success=True if payment_intent else False,",
          "346:             action_required=False,",
          "347:             kind=TransactionKind.CAPTURE,",
          "348:             amount=payment_information.amount,",
          "349:             currency=payment_information.currency,",
          "350:             transaction_id=payment_intent.id if payment_intent else \"\",",
          "351:             error=error.user_message if error else None,",
          "352:             raw_response=raw_response,",
          "353:             payment_method_info=payment_method_info,",
          "354:         )",
          "357:     def refund_payment(",
          "360:         payment_intent_id = payment_information.token",
          "361:         refund_amount = price_to_minor_unit(",
          "362:             payment_information.amount, payment_information.currency",
          "363:         )",
          "364:         refund, error = refund_payment_intent(",
          "365:             api_key=self.config.connection_params[\"secret_api_key\"],",
          "366:             payment_intent_id=payment_intent_id,  # type: ignore",
          "367:             amount_to_refund=refund_amount,",
          "368:         )",
          "370:         raw_response = None",
          "371:         if refund and refund.last_response:",
          "372:             raw_response = refund.last_response.data",
          "374:         return GatewayResponse(",
          "375:             is_success=True if refund else False,",
          "376:             action_required=False,",
          "377:             kind=TransactionKind.REFUND,",
          "378:             amount=payment_information.amount,",
          "379:             currency=payment_information.currency,",
          "380:             transaction_id=refund.id if refund else \"\",",
          "381:             error=error.user_message if error else None,",
          "382:             raw_response=raw_response,",
          "383:         )",
          "386:     def void_payment(",
          "389:         payment_intent_id = payment_information.token",
          "391:         payment_intent, error = cancel_payment_intent(",
          "392:             api_key=self.config.connection_params[\"secret_api_key\"],",
          "393:             payment_intent_id=payment_intent_id,  # type: ignore",
          "394:         )",
          "396:         raw_response = None",
          "397:         if payment_intent and payment_intent.last_response:",
          "398:             raw_response = payment_intent.last_response.data",
          "400:         return GatewayResponse(",
          "401:             is_success=True if payment_intent else False,",
          "402:             action_required=False,",
          "403:             kind=TransactionKind.VOID,",
          "404:             amount=payment_information.amount,",
          "405:             currency=payment_information.currency,",
          "406:             transaction_id=payment_intent.id if payment_intent else \"\",",
          "407:             error=error.user_message if error else None,",
          "408:             raw_response=raw_response,",
          "409:         )",
          "414:     ) -> List[CustomerSource]:",
          "415:         payment_methods, error = list_customer_payment_methods(",
          "416:             api_key=self.config.connection_params[\"secret_api_key\"],",
          "417:             customer_id=customer_id,",
          "418:         )",
          "419:         if payment_methods:",
          "420:             customer_sources = [",
          "421:                 CustomerSource(",
          "422:                     id=c.id,",
          "423:                     gateway=PLUGIN_ID,",
          "424:                     credit_card_info=PaymentMethodInfo(",
          "425:                         exp_year=c.card.exp_year,",
          "426:                         exp_month=c.card.exp_month,",
          "427:                         last_4=c.card.last4,",
          "428:                         name=None,",
          "429:                         brand=c.card.brand,",
          "430:                     ),",
          "431:                 )",
          "432:                 for c in payment_methods",
          "433:             ]",
          "434:             previous_value.extend(customer_sources)",
          "437:     @classmethod",
          "438:     def pre_save_plugin_configuration(cls, plugin_configuration: \"PluginConfiguration\"):",
          "439:         configuration = plugin_configuration.configuration",
          "440:         flat_configuration = {item[\"name\"]: item[\"value\"] for item in configuration}",
          "442:         api_key = flat_configuration[\"secret_api_key\"]",
          "443:         webhook_id = flat_configuration.get(\"webhook_endpoint_id\")",
          "444:         webhook_secret = flat_configuration.get(\"webhook_secret_key\")",
          "446:         if not plugin_configuration.active:",
          "447:             if webhook_id:",
          "448:                 # delete all webhook details when we disable a stripe integration.",
          "449:                 webhook_id_field = [",
          "450:                     c_field",
          "451:                     for c_field in configuration",
          "452:                     if c_field[\"name\"] == \"webhook_endpoint_id\"",
          "453:                 ][0]",
          "454:                 webhook_id_field[\"value\"] = \"\"",
          "456:                 plugin_configuration.configuration.remove(",
          "457:                     {",
          "458:                         \"name\": \"webhook_secret_key\",",
          "459:                         \"value\": webhook_secret,",
          "460:                     }",
          "461:                 )",
          "462:                 delete_webhook(api_key, webhook_id)",
          "464:             return",
          "466:         # check saved domain. Make sure that it is not localhost domain. We are not able",
          "467:         # to subscribe to stripe webhooks with localhost.",
          "468:         domain = Site.objects.get_current().domain",
          "469:         localhost_domains = [\"localhost\", \"127.0.0.1\"]",
          "470:         domain, _ = split_domain_port(domain)",
          "471:         if not domain:",
          "472:             logger.warning(",
          "473:                 \"Site doesn't have defined domain. Unable to subscribe Stripe webhooks\"",
          "474:             )",
          "475:             return",
          "476:         if domain in localhost_domains:",
          "477:             logger.warning(",
          "478:                 \"Unable to subscribe localhost domain - %s to Stripe webhooks. Stripe \"",
          "479:                 \"webhooks require domain which will be accessible from the network\",",
          "480:                 domain,",
          "481:             )",
          "482:             return",
          "484:         webhook = None",
          "485:         if not webhook_id and not webhook_secret:",
          "486:             webhook = subscribe_webhook(",
          "487:                 api_key, plugin_configuration.channel.slug  # type: ignore",
          "488:             )",
          "490:         if not webhook:",
          "491:             logger.warning(",
          "492:                 \"Unable to subscribe to Stripe webhook\", extra={\"domain\": domain}",
          "493:             )",
          "494:             return",
          "495:         cls._update_or_create_config_field(",
          "496:             plugin_configuration.configuration, \"webhook_endpoint_id\", webhook.id",
          "497:         )",
          "498:         cls._update_or_create_config_field(",
          "499:             plugin_configuration.configuration, \"webhook_secret_key\", webhook.secret",
          "500:         )",
          "502:     @classmethod",
          "503:     def _update_or_create_config_field(cls, configuration, field, value):",
          "504:         for c_field in configuration:",
          "505:             if c_field[\"name\"] == field:",
          "506:                 c_field[\"value\"] = value",
          "507:                 return",
          "508:         configuration.append({\"name\": field, \"value\": value})",
          "510:     @classmethod",
          "511:     def validate_plugin_configuration(cls, plugin_configuration: \"PluginConfiguration\"):",
          "512:         configuration = plugin_configuration.configuration",
          "513:         configuration = {item[\"name\"]: item[\"value\"] for item in configuration}",
          "514:         required_fields = [\"secret_api_key\", \"public_api_key\"]",
          "515:         all_required_fields_provided = all(",
          "516:             [configuration.get(field) for field in required_fields]",
          "517:         )",
          "518:         if plugin_configuration.active:",
          "519:             if not all_required_fields_provided:",
          "520:                 raise ValidationError(",
          "521:                     {",
          "522:                         field: ValidationError(",
          "523:                             \"The parameter is required.\",",
          "524:                             code=PluginErrorCode.REQUIRED.value,",
          "525:                         )",
          "526:                     }",
          "527:                     for field in required_fields",
          "528:                 )",
          "530:             api_key = configuration[\"secret_api_key\"]",
          "531:             if not is_secret_api_key_valid(api_key):",
          "532:                 raise ValidationError(",
          "533:                     {",
          "534:                         \"secret_api_key\": ValidationError(",
          "535:                             \"Secret API key is incorrect\",",
          "536:                             code=PluginErrorCode.INVALID.value,",
          "537:                         )",
          "538:                     }",
          "539:                 )",
          "544:             {",
          "545:                 \"field\": \"api_key\",",
          "546:                 \"value\": self.config.connection_params[\"public_api_key\"],",
          "547:             },",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/stripe_api.py||saleor/payment/gateways/stripe/stripe_api.py": [
          "File: saleor/payment/gateways/stripe/stripe_api.py -> saleor/payment/gateways/stripe/stripe_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from contextlib import contextmanager",
          "3: from decimal import Decimal",
          "4: from typing import List, Optional, Tuple",
          "5: from urllib.parse import urljoin",
          "7: import stripe",
          "8: from django.contrib.sites.models import Site",
          "9: from django.urls import reverse",
          "10: from stripe.error import AuthenticationError, InvalidRequestError, StripeError",
          "11: from stripe.stripe_object import StripeObject",
          "13: from ....core.tracing import opentracing_trace",
          "14: from ....core.utils import build_absolute_uri",
          "15: from ...interface import PaymentMethodInfo",
          "16: from ...utils import price_to_minor_unit",
          "17: from .consts import (",
          "18:     AUTOMATIC_CAPTURE_METHOD,",
          "19:     MANUAL_CAPTURE_METHOD,",
          "20:     METADATA_IDENTIFIER,",
          "21:     PLUGIN_ID,",
          "22:     STRIPE_API_VERSION,",
          "23:     WEBHOOK_EVENTS,",
          "24:     WEBHOOK_PATH,",
          "25: )",
          "27: logger = logging.getLogger(__name__)",
          "30: @contextmanager",
          "31: def stripe_opentracing_trace(span_name):",
          "32:     with opentracing_trace(",
          "33:         span_name=span_name, component_name=\"payment\", service_name=\"stripe\"",
          "34:     ):",
          "35:         yield",
          "38: def is_secret_api_key_valid(api_key: str):",
          "39:     \"\"\"Call api to check if api_key is a correct key.\"\"\"",
          "40:     try:",
          "41:         with stripe_opentracing_trace(\"stripe.WebhookEndpoint.list\"):",
          "42:             stripe.WebhookEndpoint.list(api_key, stripe_version=STRIPE_API_VERSION)",
          "43:         return True",
          "44:     except AuthenticationError:",
          "45:         return False",
          "48: def _extra_log_data(error: StripeError, payment_intent_id: Optional[str] = None):",
          "49:     data = {",
          "50:         \"error_message\": error.user_message,",
          "51:         \"http_status\": error.http_status,",
          "52:         \"code\": error.code,",
          "53:     }",
          "54:     if payment_intent_id is not None:",
          "55:         data[\"payment_intent_id\"] = payment_intent_id",
          "56:     return data",
          "59: def subscribe_webhook(api_key: str, channel_slug: str) -> Optional[StripeObject]:",
          "60:     domain = Site.objects.get_current().domain",
          "61:     api_path = reverse(",
          "62:         \"plugins-per-channel\",",
          "63:         kwargs={\"plugin_id\": PLUGIN_ID, \"channel_slug\": channel_slug},",
          "64:     )",
          "66:     base_url = build_absolute_uri(api_path)",
          "67:     webhook_url = urljoin(base_url, WEBHOOK_PATH)  # type: ignore",
          "69:     with stripe_opentracing_trace(\"stripe.WebhookEndpoint.create\"):",
          "70:         try:",
          "71:             return stripe.WebhookEndpoint.create(",
          "72:                 api_key=api_key,",
          "73:                 url=webhook_url,",
          "74:                 enabled_events=WEBHOOK_EVENTS,",
          "75:                 metadata={METADATA_IDENTIFIER: domain},",
          "76:                 stripe_version=STRIPE_API_VERSION,",
          "77:             )",
          "78:         except StripeError as error:",
          "79:             logger.warning(",
          "80:                 \"Failed to create Stripe webhook\",",
          "81:                 extra=_extra_log_data(error),",
          "82:             )",
          "83:             return None",
          "86: def delete_webhook(api_key: str, webhook_id: str):",
          "87:     try:",
          "88:         with stripe_opentracing_trace(\"stripe.WebhookEndpoint.delete\"):",
          "89:             stripe.WebhookEndpoint.delete(",
          "90:                 webhook_id,",
          "91:                 api_key=api_key,",
          "92:                 stripe_version=STRIPE_API_VERSION,",
          "93:             )",
          "94:     except InvalidRequestError:",
          "95:         # webhook doesn't exist",
          "96:         pass",
          "99: def get_or_create_customer(",
          "100:     api_key: str,",
          "101:     customer_id: Optional[str] = None,",
          "102:     customer_email: Optional[str] = None,",
          "103: ) -> Optional[StripeObject]:",
          "104:     try:",
          "105:         if customer_id:",
          "106:             with stripe_opentracing_trace(\"stripe.Customer.retrieve\"):",
          "107:                 return stripe.Customer.retrieve(",
          "108:                     customer_id,",
          "109:                     api_key=api_key,",
          "110:                     stripe_version=STRIPE_API_VERSION,",
          "111:                 )",
          "112:         with stripe_opentracing_trace(\"stripe.Customer.create\"):",
          "113:             return stripe.Customer.create(",
          "114:                 api_key=api_key, email=customer_email, stripe_version=STRIPE_API_VERSION",
          "115:             )",
          "116:     except StripeError as error:",
          "117:         logger.warning(",
          "118:             \"Failed to get/create Stripe customer\",",
          "119:             extra=_extra_log_data(error),",
          "120:         )",
          "121:         return None",
          "124: def create_payment_intent(",
          "125:     api_key: str,",
          "126:     amount: Decimal,",
          "127:     currency: str,",
          "128:     auto_capture: bool = True,",
          "129:     customer: Optional[StripeObject] = None,",
          "130:     payment_method_id: Optional[str] = None,",
          "131:     metadata: Optional[dict] = None,",
          "132:     setup_future_usage: Optional[str] = None,",
          "133:     off_session: Optional[bool] = None,",
          "134:     payment_method_types: Optional[List[str]] = None,",
          "135:     customer_email: Optional[str] = None,",
          "136: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "138:     capture_method = AUTOMATIC_CAPTURE_METHOD if auto_capture else MANUAL_CAPTURE_METHOD",
          "139:     additional_params = {}  # type: ignore",
          "141:     if customer:",
          "142:         additional_params[\"customer\"] = customer",
          "144:     if payment_method_id and customer:",
          "145:         additional_params[\"payment_method\"] = payment_method_id",
          "147:         additional_params[\"off_session\"] = off_session if off_session else False",
          "148:         if off_session:",
          "149:             additional_params[\"confirm\"] = True",
          "151:     if setup_future_usage in [\"on_session\", \"off_session\"] and not payment_method_id:",
          "152:         additional_params[\"setup_future_usage\"] = setup_future_usage",
          "154:     if metadata:",
          "155:         additional_params[\"metadata\"] = metadata",
          "157:     if payment_method_types and isinstance(payment_method_types, list):",
          "158:         additional_params[\"payment_method_types\"] = payment_method_types",
          "160:     if customer_email:",
          "161:         additional_params[\"receipt_email\"] = customer_email",
          "163:     try:",
          "164:         with stripe_opentracing_trace(\"stripe.PaymentIntent.create\"):",
          "165:             intent = stripe.PaymentIntent.create(",
          "166:                 api_key=api_key,",
          "167:                 amount=price_to_minor_unit(amount, currency),",
          "168:                 currency=currency,",
          "169:                 capture_method=capture_method,",
          "170:                 stripe_version=STRIPE_API_VERSION,",
          "172:             )",
          "173:         return intent, None",
          "174:     except StripeError as error:",
          "175:         logger.warning(",
          "176:             \"Failed to create Stripe payment intent\", extra=_extra_log_data(error)",
          "177:         )",
          "178:         return None, error",
          "181: def list_customer_payment_methods(",
          "182:     api_key: str, customer_id: str",
          "183: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "184:     try:",
          "185:         with stripe_opentracing_trace(\"stripe.PaymentMethod.list\"):",
          "186:             payment_methods = stripe.PaymentMethod.list(",
          "187:                 api_key=api_key,",
          "188:                 customer=customer_id,",
          "189:                 stripe_version=STRIPE_API_VERSION,",
          "190:                 type=\"card\",  # we support only cards for now",
          "191:             )",
          "192:         return payment_methods, None",
          "193:     except StripeError as error:",
          "194:         return None, error",
          "197: def retrieve_payment_intent(",
          "198:     api_key: str, payment_intent_id: str",
          "199: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "200:     try:",
          "201:         with stripe_opentracing_trace(\"stripe.PaymentIntent.retrieve\"):",
          "202:             payment_intent = stripe.PaymentIntent.retrieve(",
          "203:                 payment_intent_id,",
          "204:                 api_key=api_key,",
          "205:                 stripe_version=STRIPE_API_VERSION,",
          "206:             )",
          "207:         return payment_intent, None",
          "208:     except StripeError as error:",
          "209:         logger.warning(",
          "210:             \"Unable to retrieve a payment intent\",",
          "211:             extra=_extra_log_data(error),",
          "212:         )",
          "213:         return None, error",
          "216: def capture_payment_intent(",
          "217:     api_key: str, payment_intent_id: str, amount_to_capture: int",
          "218: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "219:     try:",
          "220:         with stripe_opentracing_trace(\"stripe.PaymentIntent.capture\"):",
          "221:             payment_intent = stripe.PaymentIntent.capture(",
          "222:                 payment_intent_id,",
          "223:                 amount_to_capture=amount_to_capture,",
          "224:                 api_key=api_key,",
          "225:                 stripe_version=STRIPE_API_VERSION,",
          "226:             )",
          "227:         return payment_intent, None",
          "228:     except StripeError as error:",
          "229:         logger.warning(",
          "230:             \"Unable to capture a payment intent\",",
          "231:             extra=_extra_log_data(error),",
          "232:         )",
          "233:         return None, error",
          "236: def refund_payment_intent(",
          "237:     api_key: str, payment_intent_id: str, amount_to_refund: int",
          "238: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "239:     try:",
          "240:         with stripe_opentracing_trace(\"stripe.Refund.create\"):",
          "241:             refund = stripe.Refund.create(",
          "242:                 payment_intent=payment_intent_id,",
          "243:                 amount=amount_to_refund,",
          "244:                 api_key=api_key,",
          "245:                 stripe_version=STRIPE_API_VERSION,",
          "246:             )",
          "247:         return refund, None",
          "248:     except StripeError as error:",
          "249:         logger.warning(",
          "250:             \"Unable to refund a payment intent\",",
          "251:             extra=_extra_log_data(error),",
          "252:         )",
          "253:         return None, error",
          "256: def cancel_payment_intent(",
          "257:     api_key: str, payment_intent_id: str",
          "258: ) -> Tuple[Optional[StripeObject], Optional[StripeError]]:",
          "259:     try:",
          "260:         with stripe_opentracing_trace(\"stripe.PaymentIntent.cancel\"):",
          "261:             payment_intent = stripe.PaymentIntent.cancel(",
          "262:                 payment_intent_id,",
          "263:                 api_key=api_key,",
          "264:                 stripe_version=STRIPE_API_VERSION,",
          "265:             )",
          "266:         return payment_intent, None",
          "267:     except StripeError as error:",
          "268:         logger.warning(",
          "269:             \"Unable to cancel a payment intent\",",
          "270:             extra=_extra_log_data(error),",
          "271:         )",
          "273:         return None, error",
          "276: def construct_stripe_event(",
          "277:     api_key: str, payload: bytes, sig_header: str, endpoint_secret: str",
          "278: ) -> StripeObject:",
          "279:     with stripe_opentracing_trace(\"stripe.Webhook.construct_event\"):",
          "280:         return stripe.Webhook.construct_event(",
          "281:             payload, sig_header, endpoint_secret, api_key=api_key",
          "282:         )",
          "285: def get_payment_method_details(",
          "286:     payment_intent: StripeObject,",
          "287: ) -> Optional[PaymentMethodInfo]:",
          "288:     charges = payment_intent.get(\"charges\", None)",
          "289:     payment_method_info = None",
          "290:     if charges:",
          "291:         charges_data = charges.get(\"data\", [])",
          "292:         if not charges_data:",
          "293:             return None",
          "294:         payment_method_details = charges_data[-1]",
          "295:         if payment_method_details.get(\"type\") == \"card\":",
          "296:             card_details = payment_method_details.get(\"card\", {})",
          "297:             exp_year = card_details.get(\"exp_year\", \"\")",
          "298:             exp_year = int(exp_year) if exp_year else None",
          "299:             exp_month = card_details.get(\"exp_month\", \"\")",
          "300:             exp_month = int(exp_month) if exp_month else None",
          "301:             payment_method_info = PaymentMethodInfo(",
          "302:                 last_4=card_details.get(\"last4\", \"\"),",
          "303:                 exp_year=exp_year,",
          "304:                 exp_month=exp_month,",
          "305:                 brand=card_details.get(\"brand\", \"\"),",
          "306:                 type=\"card\",",
          "307:             )",
          "308:     return payment_method_info",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/conftest.py||saleor/payment/gateways/stripe/tests/conftest.py": [
          "File: saleor/payment/gateways/stripe/tests/conftest.py -> saleor/payment/gateways/stripe/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "3: from .....checkout import calculations",
          "4: from .....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "5: from .....plugins.manager import get_plugins_manager",
          "6: from .....plugins.models import PluginConfiguration",
          "7: from .... import TransactionKind",
          "8: from ....models import Transaction",
          "9: from ....utils import create_payment",
          "10: from ..plugin import StripeGatewayPlugin",
          "13: @pytest.fixture",
          "14: def payment_stripe_for_checkout(checkout_with_items, address, shipping_method):",
          "15:     checkout_with_items.billing_address = address",
          "16:     checkout_with_items.shipping_address = address",
          "17:     checkout_with_items.shipping_method = shipping_method",
          "18:     checkout_with_items.email = \"test@example.com\"",
          "19:     checkout_with_items.save()",
          "20:     manager = get_plugins_manager()",
          "21:     lines = fetch_checkout_lines(checkout_with_items)",
          "22:     checkout_info = fetch_checkout_info(checkout_with_items, lines, [], manager)",
          "23:     total = calculations.calculate_checkout_total_with_gift_cards(",
          "24:         manager, checkout_info, lines, address",
          "25:     )",
          "26:     payment = create_payment(",
          "27:         gateway=StripeGatewayPlugin.PLUGIN_ID,",
          "28:         payment_token=\"ABC\",",
          "29:         total=total.gross.amount,",
          "30:         currency=checkout_with_items.currency,",
          "31:         email=checkout_with_items.email,",
          "32:         customer_ip_address=\"\",",
          "33:         checkout=checkout_with_items,",
          "34:     )",
          "35:     return payment",
          "38: @pytest.fixture",
          "39: def payment_stripe_for_order(payment_stripe_for_checkout, order_with_lines):",
          "40:     payment_stripe_for_checkout.checkout = None",
          "41:     payment_stripe_for_checkout.order = order_with_lines",
          "42:     payment_stripe_for_checkout.total = order_with_lines.total_gross_amount",
          "43:     payment_stripe_for_checkout.save()",
          "45:     Transaction.objects.create(",
          "46:         payment=payment_stripe_for_checkout,",
          "47:         action_required=False,",
          "48:         kind=TransactionKind.AUTH,",
          "49:         token=\"token\",",
          "50:         is_success=True,",
          "51:         amount=order_with_lines.total_gross_amount,",
          "52:         currency=order_with_lines.currency,",
          "53:         error=\"\",",
          "54:         gateway_response={},",
          "55:         action_required_data={},",
          "56:     )",
          "57:     return payment_stripe_for_checkout",
          "60: @pytest.fixture",
          "61: def stripe_plugin(settings, monkeypatch, channel_USD):",
          "62:     def fun(",
          "63:         public_api_key=None,",
          "64:         secret_api_key=None,",
          "65:         webhook_endpoint_id=\"12345\",",
          "66:         webhook_secret_key=\"ABCD\",",
          "67:         active=True,",
          "68:         auto_capture=True,",
          "69:     ):",
          "70:         public_api_key = public_api_key or \"test_key\"",
          "71:         secret_api_key = secret_api_key or \"secret_key\"",
          "73:         settings.PLUGINS = [\"saleor.payment.gateways.stripe.plugin.StripeGatewayPlugin\"]",
          "75:         configuration = [",
          "76:             {\"name\": \"public_api_key\", \"value\": public_api_key},",
          "77:             {\"name\": \"secret_api_key\", \"value\": secret_api_key},",
          "78:             {\"name\": \"automatic_payment_capture\", \"value\": auto_capture},",
          "79:             {\"name\": \"supported_currencies\", \"value\": \"USD\"},",
          "80:         ]",
          "81:         if webhook_endpoint_id:",
          "82:             configuration.append(",
          "83:                 {\"name\": \"webhook_endpoint_id\", \"value\": webhook_endpoint_id}",
          "84:             )",
          "85:         if webhook_secret_key:",
          "86:             configuration.append(",
          "87:                 {\"name\": \"webhook_secret_key\", \"value\": webhook_secret_key}",
          "88:             )",
          "89:         PluginConfiguration.objects.create(",
          "90:             identifier=StripeGatewayPlugin.PLUGIN_ID,",
          "91:             name=StripeGatewayPlugin.PLUGIN_NAME,",
          "92:             description=\"\",",
          "93:             active=active,",
          "94:             channel=channel_USD,",
          "95:             configuration=configuration,",
          "96:         )",
          "98:         manager = get_plugins_manager()",
          "99:         return manager.plugins_per_channel[channel_USD.slug][0]",
          "101:     return fun",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/test_plugin.py||saleor/payment/gateways/stripe/tests/test_plugin.py": [
          "File: saleor/payment/gateways/stripe/tests/test_plugin.py -> saleor/payment/gateways/stripe/tests/test_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import warnings",
          "2: from unittest.mock import Mock, patch",
          "4: import pytest",
          "5: from django.core.exceptions import ValidationError",
          "6: from stripe.error import AuthenticationError, StripeError",
          "7: from stripe.stripe_object import StripeObject",
          "9: from .....plugins.models import PluginConfiguration",
          "10: from .... import TransactionKind",
          "11: from ....interface import GatewayResponse",
          "12: from ....utils import (",
          "13:     create_payment_information,",
          "14:     create_transaction,",
          "15:     price_to_minor_unit,",
          "16: )",
          "17: from ..consts import (",
          "18:     ACTION_REQUIRED_STATUSES,",
          "19:     AUTHORIZED_STATUS,",
          "20:     AUTOMATIC_CAPTURE_METHOD,",
          "21:     MANUAL_CAPTURE_METHOD,",
          "22:     PROCESSING_STATUS,",
          "23:     STRIPE_API_VERSION,",
          "24:     SUCCESS_STATUS,",
          "25: )",
          "28: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.list\")",
          "29: def test_validate_plugin_configuration_correct_configuration(",
          "30:     mocked_stripe, stripe_plugin",
          "31: ):",
          "32:     plugin = stripe_plugin(",
          "33:         public_api_key=\"public\",",
          "34:         secret_api_key=\"ABC\",",
          "35:         active=True,",
          "36:     )",
          "37:     configuration = PluginConfiguration.objects.get()",
          "38:     plugin.validate_plugin_configuration(configuration)",
          "40:     assert mocked_stripe.called",
          "43: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.list\")",
          "44: def test_validate_plugin_configuration_incorrect_configuration(",
          "45:     mocked_stripe, stripe_plugin",
          "46: ):",
          "47:     mocked_stripe.side_effect = AuthenticationError()",
          "48:     plugin = stripe_plugin(",
          "49:         public_api_key=\"public\",",
          "50:         secret_api_key=\"wrong\",",
          "51:         active=True,",
          "52:     )",
          "53:     configuration = PluginConfiguration.objects.get()",
          "54:     with pytest.raises(ValidationError):",
          "55:         plugin.validate_plugin_configuration(configuration)",
          "57:     assert mocked_stripe.called",
          "60: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.list\")",
          "61: def test_validate_plugin_configuration_missing_required_fields(",
          "62:     mocked_stripe, stripe_plugin",
          "63: ):",
          "64:     plugin = stripe_plugin(",
          "65:         secret_api_key=\"wrong\",",
          "66:         active=True,",
          "67:     )",
          "68:     configuration = PluginConfiguration.objects.get()",
          "70:     for config_field in configuration.configuration:",
          "71:         if config_field[\"name\"] == \"public_api_key\":",
          "72:             config_field[\"value\"] = None",
          "73:             break",
          "74:     with pytest.raises(ValidationError):",
          "75:         plugin.validate_plugin_configuration(configuration)",
          "77:     assert not mocked_stripe.called",
          "80: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.list\")",
          "81: def test_validate_plugin_configuration_validate_only_when_active(",
          "82:     mocked_stripe, stripe_plugin",
          "83: ):",
          "84:     plugin = stripe_plugin(",
          "85:         secret_api_key=\"wrong\",",
          "86:         active=False,",
          "87:     )",
          "88:     configuration = PluginConfiguration.objects.get()",
          "90:     for config_field in configuration.configuration:",
          "91:         if config_field[\"name\"] == \"public_api_key\":",
          "92:             config_field[\"value\"] = None",
          "93:             break",
          "95:     plugin.validate_plugin_configuration(configuration)",
          "97:     assert not mocked_stripe.called",
          "100: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.delete\")",
          "101: def test_pre_save_plugin_configuration_removes_webhook_when_disabled(",
          "102:     mocked_stripe, stripe_plugin",
          "103: ):",
          "104:     plugin = stripe_plugin(",
          "105:         active=False, webhook_secret_key=\"secret\", webhook_endpoint_id=\"endpoint\"",
          "106:     )",
          "107:     configuration = PluginConfiguration.objects.get()",
          "108:     plugin.pre_save_plugin_configuration(configuration)",
          "110:     assert all(",
          "111:         [",
          "112:             c_field[\"value\"] != \"endpoint\"",
          "113:             for c_field in configuration.configuration",
          "114:             if c_field[\"name\"] == \"webhook_endpoint_id\"",
          "115:         ]",
          "116:     )",
          "117:     assert all(",
          "118:         [",
          "119:             c_field[\"name\"] != \"webhook_secret_key\"",
          "120:             for c_field in configuration.configuration",
          "121:         ]",
          "122:     )",
          "123:     assert mocked_stripe.called",
          "126: def get_field_from_plugin_configuration(",
          "127:     plugin_configuration: PluginConfiguration, field_name: str",
          "128: ):",
          "129:     configuration = plugin_configuration.configuration",
          "130:     for config_field in configuration:",
          "131:         if config_field[\"name\"] == field_name:",
          "132:             return config_field",
          "133:     return None",
          "136: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint.create\")",
          "137: def test_pre_save_plugin_configuration(mocked_stripe, stripe_plugin):",
          "138:     webhook_object = StripeObject(id=\"stripe_webhook_id\", last_response={})",
          "139:     webhook_object.secret = \"stripe_webhook_secret\"",
          "140:     mocked_stripe.return_value = webhook_object",
          "142:     plugin = stripe_plugin(",
          "143:         active=True, webhook_endpoint_id=None, webhook_secret_key=None",
          "144:     )",
          "145:     configuration = PluginConfiguration.objects.get()",
          "146:     plugin.pre_save_plugin_configuration(configuration)",
          "148:     webhook_id = get_field_from_plugin_configuration(",
          "149:         configuration, \"webhook_endpoint_id\"",
          "150:     )",
          "151:     webhook_secret = get_field_from_plugin_configuration(",
          "152:         configuration, \"webhook_secret_key\"",
          "153:     )",
          "155:     assert webhook_id[\"value\"] == \"stripe_webhook_id\"",
          "156:     assert webhook_secret[\"value\"] == \"stripe_webhook_secret\"",
          "158:     assert mocked_stripe.called",
          "161: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "162: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "163: def test_process_payment(",
          "164:     mocked_payment_intent,",
          "165:     mocked_customer,",
          "166:     stripe_plugin,",
          "167:     payment_stripe_for_checkout,",
          "168:     channel_USD,",
          "169: ):",
          "170:     payment_intent = Mock()",
          "171:     mocked_payment_intent.return_value = payment_intent",
          "172:     client_secret = \"client-secret\"",
          "173:     dummy_response = {",
          "174:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "175:     }",
          "176:     payment_intent_id = \"payment-intent-id\"",
          "177:     payment_intent.id = payment_intent_id",
          "178:     payment_intent.client_secret = client_secret",
          "179:     payment_intent.last_response.data = dummy_response",
          "180:     payment_intent.status = \"requires_payment_method\"",
          "182:     plugin = stripe_plugin(auto_capture=True)",
          "184:     payment_info = create_payment_information(",
          "185:         payment_stripe_for_checkout,",
          "186:     )",
          "188:     response = plugin.process_payment(payment_info, None)",
          "190:     assert response.is_success is True",
          "191:     assert response.action_required is True",
          "192:     assert response.kind == TransactionKind.ACTION_TO_CONFIRM",
          "193:     assert response.amount == payment_info.amount",
          "194:     assert response.currency == payment_info.currency",
          "195:     assert response.transaction_id == payment_intent_id",
          "196:     assert response.error is None",
          "197:     assert response.raw_response == dummy_response",
          "198:     assert response.action_required_data == {",
          "199:         \"client_secret\": client_secret,",
          "200:         \"id\": payment_intent_id,",
          "201:     }",
          "203:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "204:     mocked_payment_intent.assert_called_once_with(",
          "205:         api_key=api_key,",
          "206:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "207:         currency=payment_info.currency,",
          "208:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "209:         metadata={",
          "210:             \"channel\": channel_USD.slug,",
          "211:             \"payment_id\": payment_info.graphql_payment_id,",
          "212:         },",
          "213:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "214:         stripe_version=STRIPE_API_VERSION,",
          "215:     )",
          "216:     assert not mocked_customer.called",
          "219: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "220: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "221: def test_process_payment_with_customer(",
          "222:     mocked_payment_intent,",
          "223:     mocked_customer_create,",
          "224:     stripe_plugin,",
          "225:     payment_stripe_for_checkout,",
          "226:     channel_USD,",
          "227:     customer_user,",
          "228: ):",
          "229:     customer = StripeObject(id=\"cus_id\")",
          "230:     mocked_customer_create.return_value = customer",
          "232:     payment_intent = Mock()",
          "233:     mocked_payment_intent.return_value = payment_intent",
          "235:     client_secret = \"client-secret\"",
          "236:     dummy_response = {",
          "237:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "238:     }",
          "239:     payment_intent_id = \"payment-intent-id\"",
          "240:     payment_intent.id = payment_intent_id",
          "241:     payment_intent.client_secret = client_secret",
          "242:     payment_intent.last_response.data = dummy_response",
          "243:     payment_intent.status = \"requires_payment_method\"",
          "245:     plugin = stripe_plugin(auto_capture=True)",
          "247:     payment_stripe_for_checkout.checkout.user = customer_user",
          "248:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "249:     payment_info = create_payment_information(",
          "250:         payment_stripe_for_checkout,",
          "251:         customer_id=None,",
          "252:         store_source=True,",
          "253:     )",
          "255:     response = plugin.process_payment(payment_info, None)",
          "257:     assert response.is_success is True",
          "258:     assert response.action_required is True",
          "259:     assert response.kind == TransactionKind.ACTION_TO_CONFIRM",
          "260:     assert response.amount == payment_info.amount",
          "261:     assert response.currency == payment_info.currency",
          "262:     assert response.transaction_id == payment_intent_id",
          "263:     assert response.error is None",
          "264:     assert response.raw_response == dummy_response",
          "265:     assert response.action_required_data == {",
          "266:         \"client_secret\": client_secret,",
          "267:         \"id\": payment_intent_id,",
          "268:     }",
          "270:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "271:     mocked_payment_intent.assert_called_once_with(",
          "272:         api_key=api_key,",
          "273:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "274:         currency=payment_info.currency,",
          "275:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "276:         customer=customer,",
          "277:         metadata={",
          "278:             \"channel\": channel_USD.slug,",
          "279:             \"payment_id\": payment_info.graphql_payment_id,",
          "280:         },",
          "281:         receipt_email=customer_user.email,",
          "282:         stripe_version=STRIPE_API_VERSION,",
          "283:     )",
          "285:     mocked_customer_create.assert_called_once_with(",
          "286:         api_key=\"secret_key\",",
          "287:         email=customer_user.email,",
          "288:         stripe_version=STRIPE_API_VERSION,",
          "289:     )",
          "292: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "293: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "294: def test_process_payment_with_customer_and_future_usage(",
          "295:     mocked_payment_intent,",
          "296:     mocked_customer_create,",
          "297:     stripe_plugin,",
          "298:     payment_stripe_for_checkout,",
          "299:     channel_USD,",
          "300:     customer_user,",
          "301: ):",
          "302:     customer = Mock()",
          "303:     mocked_customer_create.return_value = customer",
          "305:     payment_intent = Mock()",
          "306:     mocked_payment_intent.return_value = payment_intent",
          "308:     client_secret = \"client-secret\"",
          "309:     dummy_response = {",
          "310:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "311:     }",
          "312:     payment_intent_id = \"payment-intent-id\"",
          "313:     payment_intent.id = payment_intent_id",
          "314:     payment_intent.client_secret = client_secret",
          "315:     payment_intent.last_response.data = dummy_response",
          "316:     payment_intent.status = SUCCESS_STATUS",
          "318:     plugin = stripe_plugin(auto_capture=True)",
          "320:     payment_stripe_for_checkout.checkout.user = customer_user",
          "321:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "322:     payment_info = create_payment_information(",
          "323:         payment_stripe_for_checkout,",
          "324:         customer_id=None,",
          "325:         store_source=True,",
          "326:         additional_data={\"setup_future_usage\": \"off_session\"},",
          "327:     )",
          "329:     response = plugin.process_payment(payment_info, None)",
          "331:     assert response.is_success is True",
          "332:     assert response.action_required is False",
          "333:     assert response.kind == TransactionKind.CAPTURE",
          "334:     assert response.amount == payment_info.amount",
          "335:     assert response.currency == payment_info.currency",
          "336:     assert response.transaction_id == payment_intent_id",
          "337:     assert response.error is None",
          "338:     assert response.raw_response == dummy_response",
          "339:     assert response.action_required_data == {",
          "340:         \"client_secret\": client_secret,",
          "341:         \"id\": payment_intent_id,",
          "342:     }",
          "344:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "345:     mocked_payment_intent.assert_called_once_with(",
          "346:         api_key=api_key,",
          "347:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "348:         currency=payment_info.currency,",
          "349:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "350:         customer=customer,",
          "351:         setup_future_usage=\"off_session\",",
          "352:         metadata={",
          "353:             \"channel\": channel_USD.slug,",
          "354:             \"payment_id\": payment_info.graphql_payment_id,",
          "355:         },",
          "356:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "357:         stripe_version=STRIPE_API_VERSION,",
          "358:     )",
          "360:     mocked_customer_create.assert_called_once_with(",
          "361:         api_key=\"secret_key\",",
          "362:         email=customer_user.email,",
          "363:         stripe_version=STRIPE_API_VERSION,",
          "364:     )",
          "367: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "368: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "369: def test_process_payment_with_customer_and_payment_method(",
          "370:     mocked_payment_intent,",
          "371:     mocked_customer_create,",
          "372:     stripe_plugin,",
          "373:     payment_stripe_for_checkout,",
          "374:     channel_USD,",
          "375:     customer_user,",
          "376: ):",
          "377:     customer = Mock()",
          "378:     mocked_customer_create.return_value = customer",
          "380:     payment_intent = Mock()",
          "381:     mocked_payment_intent.return_value = payment_intent",
          "383:     client_secret = \"client-secret\"",
          "384:     dummy_response = {",
          "385:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "386:     }",
          "387:     payment_intent_id = \"payment-intent-id\"",
          "388:     payment_intent.id = payment_intent_id",
          "389:     payment_intent.client_secret = client_secret",
          "390:     payment_intent.last_response.data = dummy_response",
          "391:     payment_intent.status = SUCCESS_STATUS",
          "393:     plugin = stripe_plugin(auto_capture=True)",
          "395:     payment_stripe_for_checkout.checkout.user = customer_user",
          "396:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "397:     payment_info = create_payment_information(",
          "398:         payment_stripe_for_checkout,",
          "399:         customer_id=None,",
          "400:         store_source=True,",
          "401:         additional_data={\"payment_method_id\": \"pm_ID\"},",
          "402:     )",
          "404:     response = plugin.process_payment(payment_info, None)",
          "406:     assert response.is_success is True",
          "407:     assert response.action_required is False",
          "408:     assert response.kind == TransactionKind.CAPTURE",
          "409:     assert response.amount == payment_info.amount",
          "410:     assert response.currency == payment_info.currency",
          "411:     assert response.transaction_id == payment_intent_id",
          "412:     assert response.error is None",
          "413:     assert response.raw_response == dummy_response",
          "414:     assert response.action_required_data == {",
          "415:         \"client_secret\": client_secret,",
          "416:         \"id\": payment_intent_id,",
          "417:     }",
          "419:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "420:     mocked_payment_intent.assert_called_once_with(",
          "421:         api_key=api_key,",
          "422:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "423:         currency=payment_info.currency,",
          "424:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "425:         customer=customer,",
          "426:         payment_method=\"pm_ID\",",
          "427:         off_session=False,",
          "428:         metadata={",
          "429:             \"channel\": channel_USD.slug,",
          "430:             \"payment_id\": payment_info.graphql_payment_id,",
          "431:         },",
          "432:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "433:         stripe_version=STRIPE_API_VERSION,",
          "434:     )",
          "436:     mocked_customer_create.assert_called_once_with(",
          "437:         api_key=\"secret_key\",",
          "438:         email=customer_user.email,",
          "439:         stripe_version=STRIPE_API_VERSION,",
          "440:     )",
          "443: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "444: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "445: def test_process_payment_with_payment_method_types(",
          "446:     mocked_payment_intent,",
          "447:     mocked_customer_create,",
          "448:     stripe_plugin,",
          "449:     payment_stripe_for_checkout,",
          "450:     channel_USD,",
          "451:     customer_user,",
          "452: ):",
          "453:     customer = Mock()",
          "454:     mocked_customer_create.return_value = customer",
          "456:     payment_intent = Mock()",
          "457:     mocked_payment_intent.return_value = payment_intent",
          "459:     client_secret = \"client-secret\"",
          "460:     dummy_response = {",
          "461:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "462:     }",
          "463:     payment_intent_id = \"payment-intent-id\"",
          "464:     payment_intent.id = payment_intent_id",
          "465:     payment_intent.client_secret = client_secret",
          "466:     payment_intent.last_response.data = dummy_response",
          "467:     payment_intent.status = SUCCESS_STATUS",
          "469:     plugin = stripe_plugin(auto_capture=True)",
          "471:     payment_stripe_for_checkout.checkout.user = customer_user",
          "472:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "473:     payment_stripe_for_checkout.save()",
          "474:     payment_info = create_payment_information(",
          "475:         payment_stripe_for_checkout,",
          "476:         customer_id=None,",
          "477:         store_source=True,",
          "478:         additional_data={\"payment_method_types\": [\"p24\", \"card\"]},",
          "479:     )",
          "481:     response = plugin.process_payment(payment_info, None)",
          "483:     assert response.is_success is True",
          "484:     assert response.action_required is False",
          "485:     assert response.kind == TransactionKind.CAPTURE",
          "486:     assert response.amount == payment_info.amount",
          "487:     assert response.currency == payment_info.currency",
          "488:     assert response.transaction_id == payment_intent_id",
          "489:     assert response.error is None",
          "490:     assert response.raw_response == dummy_response",
          "491:     assert response.action_required_data == {",
          "492:         \"client_secret\": client_secret,",
          "493:         \"id\": payment_intent_id,",
          "494:     }",
          "496:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "497:     mocked_payment_intent.assert_called_once_with(",
          "498:         api_key=api_key,",
          "499:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "500:         currency=payment_info.currency,",
          "501:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "502:         customer=customer,",
          "503:         metadata={",
          "504:             \"channel\": channel_USD.slug,",
          "505:             \"payment_id\": payment_info.graphql_payment_id,",
          "506:         },",
          "507:         payment_method_types=[\"p24\", \"card\"],",
          "508:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "509:         stripe_version=STRIPE_API_VERSION,",
          "510:     )",
          "512:     mocked_customer_create.assert_called_once_with(",
          "513:         api_key=\"secret_key\",",
          "514:         email=customer_user.email,",
          "515:         stripe_version=STRIPE_API_VERSION,",
          "516:     )",
          "519: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "520: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "521: def test_process_payment_offline(",
          "522:     mocked_payment_intent,",
          "523:     mocked_customer_create,",
          "524:     stripe_plugin,",
          "525:     payment_stripe_for_checkout,",
          "526:     channel_USD,",
          "527:     customer_user,",
          "528: ):",
          "529:     customer = Mock()",
          "530:     mocked_customer_create.return_value = customer",
          "532:     payment_intent = Mock()",
          "533:     mocked_payment_intent.return_value = payment_intent",
          "535:     client_secret = \"client-secret\"",
          "536:     dummy_response = {",
          "537:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "538:     }",
          "539:     payment_intent_id = \"payment-intent-id\"",
          "540:     payment_intent.id = payment_intent_id",
          "541:     payment_intent.client_secret = client_secret",
          "542:     payment_intent.last_response.data = dummy_response",
          "543:     payment_intent.status = SUCCESS_STATUS",
          "545:     plugin = stripe_plugin(auto_capture=True)",
          "547:     payment_stripe_for_checkout.checkout.user = customer_user",
          "548:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "549:     payment_info = create_payment_information(",
          "550:         payment_stripe_for_checkout,",
          "551:         customer_id=None,",
          "552:         store_source=True,",
          "553:         additional_data={\"payment_method_id\": \"pm_ID\", \"off_session\": True},",
          "554:     )",
          "556:     response = plugin.process_payment(payment_info, None)",
          "558:     assert response.is_success is True",
          "559:     assert response.action_required is False",
          "560:     assert response.kind == TransactionKind.CAPTURE",
          "561:     assert response.amount == payment_info.amount",
          "562:     assert response.currency == payment_info.currency",
          "563:     assert response.transaction_id == payment_intent_id",
          "564:     assert response.error is None",
          "565:     assert response.raw_response == dummy_response",
          "566:     assert response.action_required_data == {",
          "567:         \"client_secret\": client_secret,",
          "568:         \"id\": payment_intent_id,",
          "569:     }",
          "571:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "572:     mocked_payment_intent.assert_called_once_with(",
          "573:         api_key=api_key,",
          "574:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "575:         currency=payment_info.currency,",
          "576:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "577:         customer=customer,",
          "578:         payment_method=\"pm_ID\",",
          "579:         confirm=True,",
          "580:         off_session=True,",
          "581:         metadata={",
          "582:             \"channel\": channel_USD.slug,",
          "583:             \"payment_id\": payment_info.graphql_payment_id,",
          "584:         },",
          "585:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "586:         stripe_version=STRIPE_API_VERSION,",
          "587:     )",
          "589:     mocked_customer_create.assert_called_once_with(",
          "590:         api_key=\"secret_key\",",
          "591:         email=customer_user.email,",
          "592:         stripe_version=STRIPE_API_VERSION,",
          "593:     )",
          "596: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Customer.create\")",
          "597: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "598: def test_process_payment_with_customer_and_payment_method_raises_card_error(",
          "599:     mocked_payment_intent,",
          "600:     mocked_customer_create,",
          "601:     stripe_plugin,",
          "602:     payment_stripe_for_checkout,",
          "603:     channel_USD,",
          "604:     customer_user,",
          "605: ):",
          "606:     customer = Mock()",
          "607:     mocked_customer_create.return_value = customer",
          "609:     payment_intent = Mock()",
          "610:     stripe_error_object = StripeError()",
          "611:     stripe_error_object.error = StripeError()",
          "612:     stripe_error_object.error.payment_intent = payment_intent",
          "613:     mocked_payment_intent.side_effect = stripe_error_object",
          "615:     client_secret = \"client-secret\"",
          "616:     dummy_response = {",
          "617:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "618:     }",
          "619:     payment_intent_id = \"payment-intent-id\"",
          "620:     payment_intent.id = payment_intent_id",
          "621:     payment_intent.client_secret = client_secret",
          "622:     payment_intent.last_response.data = dummy_response",
          "623:     payment_intent.status = SUCCESS_STATUS",
          "625:     plugin = stripe_plugin(auto_capture=True)",
          "627:     payment_stripe_for_checkout.checkout.user = customer_user",
          "628:     payment_stripe_for_checkout.checkout.email = customer_user.email",
          "630:     payment_info = create_payment_information(",
          "631:         payment_stripe_for_checkout,",
          "632:         customer_id=None,",
          "633:         store_source=True,",
          "634:         additional_data={\"payment_method_id\": \"pm_ID\", \"off_session\": True},",
          "635:     )",
          "637:     response = plugin.process_payment(payment_info, None)",
          "639:     assert response.is_success is True",
          "640:     assert response.action_required is False",
          "641:     assert response.kind == TransactionKind.CAPTURE",
          "642:     assert response.amount == payment_info.amount",
          "643:     assert response.currency == payment_info.currency",
          "644:     assert response.transaction_id == payment_intent_id",
          "645:     assert response.error is None",
          "646:     assert response.raw_response == dummy_response",
          "647:     assert response.action_required_data == {",
          "648:         \"client_secret\": client_secret,",
          "649:         \"id\": payment_intent_id,",
          "650:     }",
          "652:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "653:     mocked_payment_intent.assert_called_once_with(",
          "654:         api_key=api_key,",
          "655:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "656:         currency=payment_info.currency,",
          "657:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "658:         customer=customer,",
          "659:         payment_method=\"pm_ID\",",
          "660:         confirm=True,",
          "661:         off_session=True,",
          "662:         metadata={",
          "663:             \"channel\": channel_USD.slug,",
          "664:             \"payment_id\": payment_info.graphql_payment_id,",
          "665:         },",
          "666:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "667:         stripe_version=STRIPE_API_VERSION,",
          "668:     )",
          "670:     mocked_customer_create.assert_called_once_with(",
          "671:         api_key=\"secret_key\",",
          "672:         email=customer_user.email,",
          "673:         stripe_version=STRIPE_API_VERSION,",
          "674:     )",
          "677: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "678: def test_process_payment_with_disabled_order_auto_confirmation(",
          "679:     mocked_payment_intent,",
          "680:     stripe_plugin,",
          "681:     payment_stripe_for_checkout,",
          "682:     site_settings,",
          "683:     channel_USD,",
          "684: ):",
          "685:     payment_intent = Mock()",
          "686:     mocked_payment_intent.return_value = payment_intent",
          "687:     client_secret = \"client-secret\"",
          "688:     dummy_response = {",
          "689:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "690:     }",
          "691:     payment_intent_id = \"payment-intent-id\"",
          "692:     payment_intent.id = payment_intent_id",
          "693:     payment_intent.client_secret = client_secret",
          "694:     payment_intent.last_response.data = dummy_response",
          "695:     payment_intent.status = \"requires_payment_method\"",
          "697:     plugin = stripe_plugin(auto_capture=True)",
          "699:     payment_info = create_payment_information(",
          "700:         payment_stripe_for_checkout,",
          "701:     )",
          "702:     site_settings.automatically_confirm_all_new_orders = False",
          "703:     site_settings.save()",
          "704:     response = plugin.process_payment(payment_info, None)",
          "706:     assert response.is_success is True",
          "707:     assert response.action_required is True",
          "708:     assert response.kind == TransactionKind.ACTION_TO_CONFIRM",
          "709:     assert response.amount == payment_info.amount",
          "710:     assert response.currency == payment_info.currency",
          "711:     assert response.transaction_id == payment_intent_id",
          "712:     assert response.error is None",
          "713:     assert response.raw_response == dummy_response",
          "714:     assert response.action_required_data == {",
          "715:         \"client_secret\": client_secret,",
          "716:         \"id\": payment_intent_id,",
          "717:     }",
          "719:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "720:     mocked_payment_intent.assert_called_once_with(",
          "721:         api_key=api_key,",
          "722:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "723:         currency=payment_info.currency,",
          "724:         capture_method=MANUAL_CAPTURE_METHOD,",
          "725:         metadata={",
          "726:             \"channel\": channel_USD.slug,",
          "727:             \"payment_id\": payment_info.graphql_payment_id,",
          "728:         },",
          "729:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "730:         stripe_version=STRIPE_API_VERSION,",
          "731:     )",
          "734: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "735: def test_process_payment_with_manual_capture(",
          "736:     mocked_payment_intent, stripe_plugin, payment_stripe_for_checkout, channel_USD",
          "737: ):",
          "738:     payment_intent = Mock()",
          "739:     mocked_payment_intent.return_value = payment_intent",
          "740:     client_secret = \"client-secret\"",
          "741:     dummy_response = {",
          "742:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "743:     }",
          "744:     payment_intent_id = \"payment-intent-id\"",
          "745:     payment_intent.id = payment_intent_id",
          "746:     payment_intent.client_secret = client_secret",
          "747:     payment_intent.last_response.data = dummy_response",
          "749:     plugin = stripe_plugin(auto_capture=False)",
          "751:     payment_info = create_payment_information(",
          "752:         payment_stripe_for_checkout,",
          "753:     )",
          "755:     plugin.process_payment(payment_info, None)",
          "757:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "758:     mocked_payment_intent.assert_called_once_with(",
          "759:         api_key=api_key,",
          "760:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "761:         currency=payment_info.currency,",
          "762:         capture_method=MANUAL_CAPTURE_METHOD,",
          "763:         metadata={",
          "764:             \"channel\": channel_USD.slug,",
          "765:             \"payment_id\": payment_info.graphql_payment_id,",
          "766:         },",
          "767:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "768:         stripe_version=STRIPE_API_VERSION,",
          "769:     )",
          "772: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.create\")",
          "773: def test_process_payment_with_error(",
          "774:     mocked_payment_intent, stripe_plugin, payment_stripe_for_checkout, channel_USD",
          "775: ):",
          "776:     mocked_payment_intent.side_effect = StripeError(message=\"stripe-error\")",
          "778:     plugin = stripe_plugin()",
          "780:     payment_info = create_payment_information(",
          "781:         payment_stripe_for_checkout,",
          "782:     )",
          "784:     response = plugin.process_payment(payment_info, None)",
          "786:     assert response.is_success is False",
          "787:     assert response.action_required is True",
          "788:     assert response.kind == TransactionKind.ACTION_TO_CONFIRM",
          "789:     assert response.amount == payment_info.amount",
          "790:     assert response.currency == payment_info.currency",
          "791:     assert response.transaction_id == \"\"",
          "792:     assert response.error == \"stripe-error\"",
          "793:     assert response.raw_response is None",
          "794:     assert response.action_required_data == {\"client_secret\": None, \"id\": None}",
          "796:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "797:     mocked_payment_intent.assert_called_once_with(",
          "798:         api_key=api_key,",
          "799:         amount=price_to_minor_unit(payment_info.amount, payment_info.currency),",
          "800:         currency=payment_info.currency,",
          "801:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "802:         metadata={",
          "803:             \"channel\": channel_USD.slug,",
          "804:             \"payment_id\": payment_info.graphql_payment_id,",
          "805:         },",
          "806:         receipt_email=payment_stripe_for_checkout.checkout.email,",
          "807:         stripe_version=STRIPE_API_VERSION,",
          "808:     )",
          "811: @pytest.mark.parametrize(\"kind\", [TransactionKind.AUTH, TransactionKind.CAPTURE])",
          "812: def test_confirm_payment_for_webhook(kind, stripe_plugin, payment_stripe_for_checkout):",
          "813:     payment_intent_id = \"payment-intent-id\"",
          "814:     gateway_response = {",
          "815:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "816:     }",
          "817:     payment = payment_stripe_for_checkout",
          "818:     payment.transactions.create(",
          "819:         is_success=True,",
          "820:         action_required=False,",
          "821:         kind=kind,",
          "822:         token=payment_intent_id,",
          "823:         gateway_response=gateway_response,",
          "824:         amount=payment.total,",
          "825:         currency=payment.currency,",
          "826:     )",
          "828:     payment_info = create_payment_information(",
          "829:         payment_stripe_for_checkout,",
          "830:     )",
          "832:     plugin = stripe_plugin()",
          "833:     response = plugin.confirm_payment(payment_info, None)",
          "835:     assert response.is_success is True",
          "836:     assert response.action_required is False",
          "837:     assert response.kind == kind",
          "838:     assert response.amount == payment_info.amount",
          "839:     assert response.currency == payment_info.currency",
          "840:     assert response.transaction_id == payment_intent_id",
          "841:     assert response.error is None",
          "842:     assert response.raw_response == gateway_response",
          "843:     assert response.action_required_data is None",
          "844:     assert response.transaction_already_processed is True",
          "847: @pytest.mark.parametrize(",
          "848:     \"kind, status\",",
          "849:     [",
          "850:         (TransactionKind.AUTH, AUTHORIZED_STATUS),",
          "851:         (TransactionKind.CAPTURE, SUCCESS_STATUS),",
          "852:     ],",
          "853: )",
          "854: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.retrieve\")",
          "855: def test_confirm_payment(",
          "856:     mocked_intent_retrieve, kind, status, stripe_plugin, payment_stripe_for_checkout",
          "857: ):",
          "858:     gateway_response = {",
          "859:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "860:     }",
          "862:     payment_intent_id = \"payment-intent-id\"",
          "864:     payment = payment_stripe_for_checkout",
          "865:     payment.transactions.create(",
          "866:         is_success=True,",
          "867:         action_required=False,",
          "868:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "869:         token=payment_intent_id,",
          "870:         gateway_response=gateway_response,",
          "871:         amount=payment.total,",
          "872:         currency=payment.currency,",
          "873:     )",
          "875:     payment_intent = StripeObject(id=payment_intent_id)",
          "876:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "877:     payment_intent[\"status\"] = status",
          "878:     payment_intent[\"currency\"] = payment.currency",
          "879:     mocked_intent_retrieve.return_value = payment_intent",
          "881:     payment_info = create_payment_information(",
          "882:         payment_stripe_for_checkout, payment_token=payment_intent_id",
          "883:     )",
          "885:     plugin = stripe_plugin()",
          "886:     response = plugin.confirm_payment(payment_info, None)",
          "888:     assert response.is_success is True",
          "889:     assert response.action_required is False",
          "890:     assert response.kind == kind",
          "891:     assert response.amount == payment.total",
          "892:     assert response.currency == payment.currency",
          "893:     assert response.transaction_id == payment_intent_id",
          "894:     assert response.error is None",
          "897: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.retrieve\")",
          "898: def test_confirm_payment_incorrect_payment_intent(",
          "899:     mocked_intent_retrieve, stripe_plugin, payment_stripe_for_checkout",
          "900: ):",
          "902:     gateway_response = {",
          "903:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "904:     }",
          "906:     payment_intent_id = \"payment-intent-id\"",
          "908:     payment = payment_stripe_for_checkout",
          "909:     payment.transactions.create(",
          "910:         is_success=True,",
          "911:         action_required=False,",
          "912:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "913:         token=payment_intent_id,",
          "914:         gateway_response=gateway_response,",
          "915:         amount=payment.total,",
          "916:         currency=payment.currency,",
          "917:     )",
          "919:     mocked_intent_retrieve.side_effect = StripeError(message=\"stripe-error\")",
          "921:     payment_info = create_payment_information(",
          "922:         payment_stripe_for_checkout, payment_token=payment_intent_id",
          "923:     )",
          "925:     plugin = stripe_plugin()",
          "926:     with warnings.catch_warnings(record=True):",
          "927:         response = plugin.confirm_payment(payment_info, None)",
          "929:     assert response.is_success is False",
          "930:     assert response.action_required is False",
          "931:     assert response.kind == TransactionKind.AUTH",
          "932:     assert response.amount == payment.total",
          "933:     assert response.currency == payment.currency",
          "934:     assert response.transaction_id == \"\"",
          "935:     assert response.error == \"stripe-error\"",
          "938: @pytest.mark.parametrize(\"status\", ACTION_REQUIRED_STATUSES)",
          "939: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.retrieve\")",
          "940: def test_confirm_payment_action_required_status(",
          "941:     mocked_intent_retrieve, status, stripe_plugin, payment_stripe_for_checkout",
          "942: ):",
          "943:     gateway_response = {",
          "944:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "945:     }",
          "947:     payment_intent_id = \"payment-intent-id\"",
          "949:     payment = payment_stripe_for_checkout",
          "950:     payment.transactions.create(",
          "951:         is_success=True,",
          "952:         action_required=False,",
          "953:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "954:         token=payment_intent_id,",
          "955:         gateway_response=gateway_response,",
          "956:         amount=payment.total,",
          "957:         currency=payment.currency,",
          "958:     )",
          "960:     payment_intent = StripeObject(id=payment_intent_id)",
          "961:     payment_intent[\"capture_method\"] = \"automatic\"",
          "962:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "963:     payment_intent[\"status\"] = status",
          "964:     payment_intent[\"currency\"] = payment.currency",
          "965:     mocked_intent_retrieve.return_value = payment_intent",
          "967:     payment_info = create_payment_information(",
          "968:         payment_stripe_for_checkout, payment_token=payment_intent_id",
          "969:     )",
          "971:     plugin = stripe_plugin()",
          "972:     response = plugin.confirm_payment(payment_info, None)",
          "974:     assert response.is_success is True",
          "975:     assert response.action_required is True",
          "976:     assert response.kind == TransactionKind.ACTION_TO_CONFIRM",
          "977:     assert response.amount == payment.total",
          "978:     assert response.currency == payment.currency",
          "979:     assert response.transaction_id == payment_intent_id",
          "980:     assert response.error is None",
          "983: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.retrieve\")",
          "984: def test_confirm_payment_processing_status(",
          "985:     mocked_intent_retrieve, stripe_plugin, payment_stripe_for_checkout",
          "986: ):",
          "987:     gateway_response = {",
          "988:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "989:     }",
          "991:     payment_intent_id = \"payment-intent-id\"",
          "993:     payment = payment_stripe_for_checkout",
          "994:     payment.transactions.create(",
          "995:         is_success=True,",
          "996:         action_required=False,",
          "997:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "998:         token=payment_intent_id,",
          "999:         gateway_response=gateway_response,",
          "1000:         amount=payment.total,",
          "1001:         currency=payment.currency,",
          "1002:     )",
          "1004:     payment_intent = StripeObject(id=payment_intent_id)",
          "1005:     payment_intent[\"capture_method\"] = \"automatic\"",
          "1006:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "1007:     payment_intent[\"status\"] = PROCESSING_STATUS",
          "1008:     payment_intent[\"currency\"] = payment.currency",
          "1009:     mocked_intent_retrieve.return_value = payment_intent",
          "1011:     payment_info = create_payment_information(",
          "1012:         payment_stripe_for_checkout, payment_token=payment_intent_id",
          "1013:     )",
          "1015:     plugin = stripe_plugin()",
          "1016:     response = plugin.confirm_payment(payment_info, None)",
          "1018:     assert response.is_success is True",
          "1019:     assert response.action_required is False",
          "1020:     assert response.kind == TransactionKind.PENDING",
          "1021:     assert response.amount == payment.total",
          "1022:     assert response.currency == payment.currency",
          "1023:     assert response.transaction_id == payment_intent_id",
          "1024:     assert response.error is None",
          "1027: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.capture\")",
          "1028: def test_capture_payment(",
          "1029:     mocked_capture, payment_stripe_for_order, order_with_lines, stripe_plugin",
          "1030: ):",
          "1031:     payment = payment_stripe_for_order",
          "1033:     payment_intent_id = \"ABC\"",
          "1034:     payment_intent = StripeObject(id=payment_intent_id)",
          "1035:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "1036:     payment_intent[\"status\"] = SUCCESS_STATUS",
          "1037:     payment_intent[\"currency\"] = payment.currency",
          "1038:     payment_intent[\"last_response\"] = StripeObject()",
          "1039:     payment_intent[\"last_response\"][\"data\"] = {\"response\": \"json\"}",
          "1041:     mocked_capture.return_value = payment_intent",
          "1043:     payment_info = create_payment_information(",
          "1044:         payment,",
          "1045:         payment_token=payment_intent_id,",
          "1046:     )",
          "1047:     gateway_response = GatewayResponse(",
          "1048:         kind=TransactionKind.AUTH,",
          "1049:         action_required=False,",
          "1050:         transaction_id=payment_intent_id,",
          "1051:         is_success=True,",
          "1052:         amount=payment_info.amount,",
          "1053:         currency=payment_info.currency,",
          "1054:         error=\"\",",
          "1055:         raw_response={},",
          "1056:     )",
          "1058:     create_transaction(",
          "1059:         payment=payment,",
          "1060:         payment_information=payment_info,",
          "1061:         kind=TransactionKind.AUTH,",
          "1062:         gateway_response=gateway_response,",
          "1063:     )",
          "1065:     plugin = stripe_plugin()",
          "1067:     response = plugin.capture_payment(payment_info, None)",
          "1069:     assert response.is_success is True",
          "1070:     assert response.action_required is False",
          "1071:     assert response.kind == TransactionKind.CAPTURE",
          "1072:     assert response.amount == payment.total",
          "1073:     assert response.currency == order_with_lines.currency",
          "1074:     assert response.transaction_id == payment_intent_id",
          "1077: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Refund.create\")",
          "1078: def test_refund_payment(",
          "1079:     mocked_refund, payment_stripe_for_order, order_with_lines, stripe_plugin",
          "1080: ):",
          "1081:     payment = payment_stripe_for_order",
          "1083:     payment_intent_id = \"ABC\"",
          "1084:     refund_object = StripeObject(id=payment_intent_id)",
          "1085:     refund_object[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "1086:     refund_object[\"status\"] = SUCCESS_STATUS",
          "1087:     refund_object[\"currency\"] = payment.currency",
          "1088:     refund_object[\"last_response\"] = StripeObject()",
          "1089:     refund_object[\"last_response\"][\"data\"] = {\"response\": \"json\"}",
          "1091:     mocked_refund.return_value = refund_object",
          "1093:     payment_info = create_payment_information(",
          "1094:         payment,",
          "1095:         payment_token=payment_intent_id,",
          "1096:     )",
          "1097:     gateway_response = GatewayResponse(",
          "1098:         kind=TransactionKind.CAPTURE,",
          "1099:         action_required=False,",
          "1100:         transaction_id=payment_intent_id,",
          "1101:         is_success=True,",
          "1102:         amount=payment_info.amount,",
          "1103:         currency=payment_info.currency,",
          "1104:         error=\"\",",
          "1105:         raw_response={},",
          "1106:     )",
          "1108:     create_transaction(",
          "1109:         payment=payment,",
          "1110:         payment_information=payment_info,",
          "1111:         kind=TransactionKind.CAPTURE,",
          "1112:         gateway_response=gateway_response,",
          "1113:     )",
          "1115:     plugin = stripe_plugin()",
          "1117:     response = plugin.refund_payment(payment_info, None)",
          "1119:     assert response.is_success is True",
          "1120:     assert response.action_required is False",
          "1121:     assert response.kind == TransactionKind.REFUND",
          "1122:     assert response.amount == payment.total",
          "1123:     assert response.currency == order_with_lines.currency",
          "1124:     assert response.transaction_id == payment_intent_id",
          "1127: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent.cancel\")",
          "1128: def test_void_payment(",
          "1129:     mocked_cancel, payment_stripe_for_order, order_with_lines, stripe_plugin",
          "1130: ):",
          "1131:     payment = payment_stripe_for_order",
          "1133:     payment_intent_id = \"ABC\"",
          "1134:     payment_intent = StripeObject(id=payment_intent_id)",
          "1135:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "1136:     payment_intent[\"status\"] = SUCCESS_STATUS",
          "1137:     payment_intent[\"currency\"] = payment.currency",
          "1138:     payment_intent[\"last_response\"] = StripeObject()",
          "1139:     payment_intent[\"last_response\"][\"data\"] = {\"response\": \"json\"}",
          "1141:     mocked_cancel.return_value = payment_intent",
          "1143:     payment_info = create_payment_information(",
          "1144:         payment,",
          "1145:         payment_token=payment_intent_id,",
          "1146:     )",
          "1147:     gateway_response = GatewayResponse(",
          "1148:         kind=TransactionKind.AUTH,",
          "1149:         action_required=False,",
          "1150:         transaction_id=payment_intent_id,",
          "1151:         is_success=True,",
          "1152:         amount=payment_info.amount,",
          "1153:         currency=payment_info.currency,",
          "1154:         error=\"\",",
          "1155:         raw_response={},",
          "1156:     )",
          "1158:     create_transaction(",
          "1159:         payment=payment,",
          "1160:         payment_information=payment_info,",
          "1161:         kind=TransactionKind.AUTH,",
          "1162:         gateway_response=gateway_response,",
          "1163:     )",
          "1165:     plugin = stripe_plugin()",
          "1167:     response = plugin.void_payment(payment_info, None)",
          "1169:     assert response.is_success is True",
          "1170:     assert response.action_required is False",
          "1171:     assert response.kind == TransactionKind.VOID",
          "1172:     assert response.amount == payment.total",
          "1173:     assert response.currency == order_with_lines.currency",
          "1174:     assert response.transaction_id == payment_intent_id",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/test_stripe_api.py||saleor/payment/gateways/stripe/tests/test_stripe_api.py": [
          "File: saleor/payment/gateways/stripe/tests/test_stripe_api.py -> saleor/payment/gateways/stripe/tests/test_stripe_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from decimal import Decimal",
          "2: from unittest.mock import patch",
          "4: from stripe.error import AuthenticationError, StripeError",
          "5: from stripe.stripe_object import StripeObject",
          "7: from saleor.payment.interface import PaymentMethodInfo",
          "8: from saleor.payment.utils import price_to_minor_unit",
          "10: from ..consts import (",
          "11:     AUTOMATIC_CAPTURE_METHOD,",
          "12:     MANUAL_CAPTURE_METHOD,",
          "13:     METADATA_IDENTIFIER,",
          "14:     STRIPE_API_VERSION,",
          "15:     WEBHOOK_EVENTS,",
          "16: )",
          "17: from ..stripe_api import (",
          "18:     cancel_payment_intent,",
          "19:     capture_payment_intent,",
          "20:     create_payment_intent,",
          "21:     delete_webhook,",
          "22:     get_or_create_customer,",
          "23:     get_payment_method_details,",
          "24:     is_secret_api_key_valid,",
          "25:     list_customer_payment_methods,",
          "26:     refund_payment_intent,",
          "27:     retrieve_payment_intent,",
          "28:     subscribe_webhook,",
          "29: )",
          "32: @patch(",
          "33:     \"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint\",",
          "34: )",
          "35: def test_is_secret_api_key_valid_incorrect_key(mocked_webhook):",
          "36:     api_key = \"incorrect\"",
          "37:     mocked_webhook.list.side_effect = AuthenticationError()",
          "38:     assert is_secret_api_key_valid(api_key) is False",
          "41: @patch(",
          "42:     \"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint\",",
          "43: )",
          "44: def test_is_secret_api_key_valid_correct_key(mocked_webhook):",
          "45:     api_key = \"correct_key\"",
          "46:     assert is_secret_api_key_valid(api_key) is True",
          "48:     mocked_webhook.list.assert_called_with(api_key, stripe_version=STRIPE_API_VERSION)",
          "51: @patch(",
          "52:     \"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint\",",
          "53: )",
          "54: def test_subscribe_webhook_returns_webhook_object(mocked_webhook, channel_USD):",
          "55:     api_key = \"api_key\"",
          "56:     expected_url = (",
          "57:         \"http://mirumee.com/plugins/channel/main/saleor.payments.stripe/webhooks/\"",
          "58:     )",
          "60:     subscribe_webhook(api_key, channel_slug=channel_USD.slug)",
          "62:     mocked_webhook.create.assert_called_with(",
          "63:         api_key=api_key,",
          "64:         url=expected_url,",
          "65:         enabled_events=WEBHOOK_EVENTS,",
          "66:         metadata={METADATA_IDENTIFIER: \"mirumee.com\"},",
          "67:         stripe_version=STRIPE_API_VERSION,",
          "68:     )",
          "71: @patch(",
          "72:     \"saleor.payment.gateways.stripe.stripe_api.stripe.WebhookEndpoint\",",
          "73: )",
          "74: def test_delete_webhook(mocked_webhook):",
          "75:     api_key = \"api_key\"",
          "77:     delete_webhook(api_key, \"webhook_id\")",
          "79:     mocked_webhook.delete.assert_called_with(",
          "80:         \"webhook_id\", api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "81:     )",
          "84: @patch(",
          "85:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "86: )",
          "87: def test_create_payment_intent_returns_intent_object(mocked_payment_intent):",
          "88:     api_key = \"api_key\"",
          "89:     mocked_payment_intent.create.return_value = StripeObject()",
          "91:     intent, error = create_payment_intent(",
          "92:         api_key, Decimal(10), \"USD\", auto_capture=True",
          "93:     )",
          "95:     mocked_payment_intent.create.assert_called_with(",
          "96:         api_key=api_key,",
          "97:         amount=\"1000\",",
          "98:         currency=\"USD\",",
          "99:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "100:         stripe_version=STRIPE_API_VERSION,",
          "101:     )",
          "103:     assert isinstance(intent, StripeObject)",
          "104:     assert error is None",
          "107: @patch(",
          "108:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "109: )",
          "110: def test_create_payment_intent_with_customer(mocked_payment_intent):",
          "111:     customer = StripeObject(id=\"c_ABC\")",
          "112:     api_key = \"api_key\"",
          "113:     mocked_payment_intent.create.return_value = StripeObject()",
          "115:     intent, error = create_payment_intent(",
          "116:         api_key, Decimal(10), \"USD\", auto_capture=True, customer=customer",
          "117:     )",
          "119:     mocked_payment_intent.create.assert_called_with(",
          "120:         api_key=api_key,",
          "121:         amount=\"1000\",",
          "122:         currency=\"USD\",",
          "123:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "124:         customer=customer,",
          "125:         stripe_version=STRIPE_API_VERSION,",
          "126:     )",
          "128:     assert isinstance(intent, StripeObject)",
          "129:     assert error is None",
          "132: @patch(",
          "133:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "134: )",
          "135: def test_create_payment_intent_manual_auto_capture(mocked_payment_intent):",
          "136:     api_key = \"api_key\"",
          "137:     mocked_payment_intent.create.return_value = StripeObject()",
          "139:     _intent, _error = create_payment_intent(",
          "140:         api_key, Decimal(10), \"USD\", auto_capture=False",
          "141:     )",
          "143:     mocked_payment_intent.create.assert_called_with(",
          "144:         api_key=api_key,",
          "145:         amount=\"1000\",",
          "146:         currency=\"USD\",",
          "147:         capture_method=MANUAL_CAPTURE_METHOD,",
          "148:         stripe_version=STRIPE_API_VERSION,",
          "149:     )",
          "152: @patch(",
          "153:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "154: )",
          "155: def test_create_payment_intent_returns_error(mocked_payment_intent):",
          "156:     api_key = \"api_key\"",
          "157:     mocked_payment_intent.create.side_effect = StripeError(",
          "158:         json_body={\"error\": \"stripe-error\"}",
          "159:     )",
          "161:     intent, error = create_payment_intent(api_key, Decimal(10), \"USD\")",
          "163:     mocked_payment_intent.create.assert_called_with(",
          "164:         api_key=api_key,",
          "165:         amount=\"1000\",",
          "166:         currency=\"USD\",",
          "167:         capture_method=AUTOMATIC_CAPTURE_METHOD,",
          "168:         stripe_version=STRIPE_API_VERSION,",
          "169:     )",
          "170:     assert intent is None",
          "171:     assert error",
          "174: @patch(",
          "175:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "176: )",
          "177: def test_retrieve_payment_intent(mocked_payment_intent):",
          "178:     api_key = \"api_key\"",
          "179:     payment_intent_id = \"id1234\"",
          "181:     mocked_payment_intent.retrieve.return_value = StripeObject()",
          "183:     intent, _ = retrieve_payment_intent(api_key, payment_intent_id)",
          "185:     mocked_payment_intent.retrieve.assert_called_with(",
          "186:         payment_intent_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "187:     )",
          "188:     assert isinstance(intent, StripeObject)",
          "191: @patch(",
          "192:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "193: )",
          "194: def test_retrieve_payment_intent_stripe_returns_error(mocked_payment_intent):",
          "195:     api_key = \"api_key\"",
          "196:     payment_intent_id = \"id1234\"",
          "198:     expected_error = StripeError(message=\"stripe-error\")",
          "199:     mocked_payment_intent.retrieve.side_effect = expected_error",
          "201:     _, error = retrieve_payment_intent(api_key, payment_intent_id)",
          "203:     mocked_payment_intent.retrieve.assert_called_with(",
          "204:         payment_intent_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "205:     )",
          "207:     assert error == expected_error",
          "210: @patch(",
          "211:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "212: )",
          "213: def test_capture_payment_intent(mocked_payment_intent):",
          "214:     api_key = \"api_key\"",
          "215:     payment_intent_id = \"id1234\"",
          "216:     amount = price_to_minor_unit(Decimal(\"10.0\"), \"USD\")",
          "218:     mocked_payment_intent.capture.return_value = StripeObject()",
          "220:     intent, _ = capture_payment_intent(",
          "221:         api_key=api_key, payment_intent_id=payment_intent_id, amount_to_capture=amount",
          "222:     )",
          "224:     mocked_payment_intent.capture.assert_called_with(",
          "225:         payment_intent_id,",
          "226:         amount_to_capture=amount,",
          "227:         api_key=api_key,",
          "228:         stripe_version=STRIPE_API_VERSION,",
          "229:     )",
          "230:     assert isinstance(intent, StripeObject)",
          "233: @patch(",
          "234:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "235: )",
          "236: def test_capture_payment_intent_stripe_returns_error(mocked_payment_intent):",
          "237:     api_key = \"api_key\"",
          "238:     payment_intent_id = \"id1234\"",
          "239:     amount = price_to_minor_unit(Decimal(\"10.0\"), \"USD\")",
          "241:     expected_error = StripeError(message=\"stripe-error\")",
          "242:     mocked_payment_intent.capture.side_effect = expected_error",
          "244:     _, error = capture_payment_intent(",
          "245:         api_key=api_key, payment_intent_id=payment_intent_id, amount_to_capture=amount",
          "246:     )",
          "248:     mocked_payment_intent.capture.assert_called_with(",
          "249:         payment_intent_id,",
          "250:         amount_to_capture=amount,",
          "251:         api_key=api_key,",
          "252:         stripe_version=STRIPE_API_VERSION,",
          "253:     )",
          "255:     assert error == expected_error",
          "258: @patch(",
          "259:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Refund\",",
          "260: )",
          "261: def test_refund_payment_intent(mocked_refund):",
          "262:     api_key = \"api_key\"",
          "263:     payment_intent_id = \"id1234\"",
          "264:     amount = price_to_minor_unit(Decimal(\"10.0\"), \"USD\")",
          "266:     mocked_refund.create.return_value = StripeObject()",
          "268:     intent, _ = refund_payment_intent(",
          "269:         api_key=api_key, payment_intent_id=payment_intent_id, amount_to_refund=amount",
          "270:     )",
          "272:     mocked_refund.create.assert_called_with(",
          "273:         payment_intent=payment_intent_id,",
          "274:         amount=amount,",
          "275:         api_key=api_key,",
          "276:         stripe_version=STRIPE_API_VERSION,",
          "277:     )",
          "278:     assert isinstance(intent, StripeObject)",
          "281: @patch(",
          "282:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Refund\",",
          "283: )",
          "284: def test_refund_payment_intent_returns_error(mocked_refund):",
          "285:     api_key = \"api_key\"",
          "286:     payment_intent_id = \"id1234\"",
          "287:     amount = price_to_minor_unit(Decimal(\"10.0\"), \"USD\")",
          "289:     expected_error = StripeError(message=\"stripe-error\")",
          "290:     mocked_refund.create.side_effect = expected_error",
          "292:     _, error = refund_payment_intent(",
          "293:         api_key=api_key, payment_intent_id=payment_intent_id, amount_to_refund=amount",
          "294:     )",
          "296:     mocked_refund.create.assert_called_with(",
          "297:         payment_intent=payment_intent_id,",
          "298:         amount=amount,",
          "299:         api_key=api_key,",
          "300:         stripe_version=STRIPE_API_VERSION,",
          "301:     )",
          "302:     assert error == expected_error",
          "305: @patch(",
          "306:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "307: )",
          "308: def test_cancel_payment_intent(mocked_payment_intent):",
          "309:     api_key = \"api_key\"",
          "310:     payment_intent_id = \"id1234\"",
          "312:     mocked_payment_intent.cancel.return_value = StripeObject()",
          "314:     intent, _ = cancel_payment_intent(",
          "315:         api_key=api_key, payment_intent_id=payment_intent_id",
          "316:     )",
          "318:     mocked_payment_intent.cancel.assert_called_with(",
          "319:         payment_intent_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "320:     )",
          "321:     assert isinstance(intent, StripeObject)",
          "324: @patch(",
          "325:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentIntent\",",
          "326: )",
          "327: def test_cancel_payment_intent_stripe_returns_error(mocked_payment_intent):",
          "328:     api_key = \"api_key\"",
          "329:     payment_intent_id = \"id1234\"",
          "331:     expected_error = StripeError(message=\"stripe-error\")",
          "332:     mocked_payment_intent.cancel.side_effect = expected_error",
          "334:     _, error = cancel_payment_intent(",
          "335:         api_key=api_key, payment_intent_id=payment_intent_id",
          "336:     )",
          "338:     mocked_payment_intent.cancel.assert_called_with(",
          "339:         payment_intent_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "340:     )",
          "342:     assert error == expected_error",
          "345: @patch(",
          "346:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Customer\",",
          "347: )",
          "348: def test_get_or_create_customer_retrieve(mocked_customer):",
          "349:     mocked_customer.retrieve.return_value = StripeObject()",
          "350:     api_key = \"123\"",
          "351:     customer_email = \"admin@example.com\"",
          "352:     customer_id = \"c_12345\"",
          "354:     customer = get_or_create_customer(",
          "355:         api_key=api_key,",
          "356:         customer_email=customer_email,",
          "357:         customer_id=customer_id,",
          "358:     )",
          "360:     assert isinstance(customer, StripeObject)",
          "361:     mocked_customer.retrieve.assert_called_with(",
          "362:         customer_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "363:     )",
          "366: @patch(",
          "367:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Customer\",",
          "368: )",
          "369: def test_get_or_create_customer_failed_retrieve(mocked_customer):",
          "371:     expected_error = StripeError(message=\"stripe-error\")",
          "372:     mocked_customer.retrieve.side_effect = expected_error",
          "374:     api_key = \"123\"",
          "375:     customer_email = \"admin@example.com\"",
          "376:     customer_id = \"c_12345\"",
          "378:     customer = get_or_create_customer(",
          "379:         api_key=api_key,",
          "380:         customer_email=customer_email,",
          "381:         customer_id=customer_id,",
          "382:     )",
          "384:     assert customer is None",
          "385:     mocked_customer.retrieve.assert_called_with(",
          "386:         customer_id, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "387:     )",
          "390: @patch(",
          "391:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Customer\",",
          "392: )",
          "393: def test_get_or_create_customer_create(mocked_customer):",
          "394:     mocked_customer.create.return_value = StripeObject()",
          "395:     api_key = \"123\"",
          "396:     customer_email = \"admin@example.com\"",
          "397:     customer = get_or_create_customer(",
          "398:         api_key=api_key,",
          "399:         customer_email=customer_email,",
          "400:         customer_id=None,",
          "401:     )",
          "403:     assert isinstance(customer, StripeObject)",
          "404:     mocked_customer.create.assert_called_with(",
          "405:         email=customer_email, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "406:     )",
          "409: @patch(",
          "410:     \"saleor.payment.gateways.stripe.stripe_api.stripe.Customer\",",
          "411: )",
          "412: def test_get_or_create_customer_failed_create(mocked_customer):",
          "413:     expected_error = StripeError(message=\"stripe-error\")",
          "414:     mocked_customer.create.side_effect = expected_error",
          "416:     api_key = \"123\"",
          "417:     customer_email = \"admin@example.com\"",
          "418:     customer = get_or_create_customer(",
          "419:         api_key=api_key,",
          "420:         customer_email=customer_email,",
          "421:         customer_id=None,",
          "422:     )",
          "424:     assert customer is None",
          "425:     mocked_customer.create.assert_called_with(",
          "426:         email=customer_email, api_key=api_key, stripe_version=STRIPE_API_VERSION",
          "427:     )",
          "430: @patch(",
          "431:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentMethod\",",
          "432: )",
          "433: def test_list_customer_payment_methods(mocked_payment_method):",
          "434:     api_key = \"123\"",
          "435:     customer_id = \"c_customer_id\"",
          "436:     mocked_payment_method.list.return_value = StripeObject()",
          "438:     payment_method, error = list_customer_payment_methods(",
          "439:         api_key=api_key, customer_id=customer_id",
          "440:     )",
          "442:     assert error is None",
          "443:     assert isinstance(payment_method, StripeObject)",
          "444:     mocked_payment_method.list.assert_called_with(",
          "445:         api_key=api_key,",
          "446:         customer=customer_id,",
          "447:         type=\"card\",",
          "448:         stripe_version=STRIPE_API_VERSION,",
          "449:     )",
          "452: @patch(",
          "453:     \"saleor.payment.gateways.stripe.stripe_api.stripe.PaymentMethod\",",
          "454: )",
          "455: def test_list_customer_payment_methods_failed_to_fetch(mocked_payment_method):",
          "456:     api_key = \"123\"",
          "457:     customer_id = \"c_customer_id\"",
          "459:     expected_error = StripeError(message=\"stripe-error\")",
          "460:     mocked_payment_method.list.side_effect = expected_error",
          "462:     payment_method, error = list_customer_payment_methods(",
          "463:         api_key=api_key, customer_id=customer_id",
          "464:     )",
          "466:     assert payment_method is None",
          "467:     assert isinstance(error, StripeError)",
          "469:     mocked_payment_method.list.assert_called_with(",
          "470:         api_key=api_key,",
          "471:         customer=customer_id,",
          "472:         type=\"card\",",
          "473:         stripe_version=STRIPE_API_VERSION,",
          "474:     )",
          "477: def test_get_payment_method_details():",
          "478:     payment_intent = StripeObject()",
          "479:     payment_intent.charges = {",
          "480:         \"data\": [",
          "481:             {",
          "482:                 \"type\": \"card\",",
          "483:                 \"card\": {",
          "484:                     \"last4\": \"1234\",",
          "485:                     \"exp_year\": \"2222\",",
          "486:                     \"exp_month\": \"12\",",
          "487:                     \"brand\": \"visa\",",
          "488:                 },",
          "489:             }",
          "490:         ]",
          "491:     }",
          "493:     payment_method_info = get_payment_method_details(payment_intent)",
          "495:     assert payment_method_info == PaymentMethodInfo(",
          "496:         last_4=\"1234\", exp_year=2222, exp_month=12, brand=\"visa\", type=\"card\"",
          "497:     )",
          "500: def test_get_payment_method_details_missing_charges():",
          "501:     payment_intent = StripeObject()",
          "502:     payment_intent.charges = None",
          "504:     payment_method_info = get_payment_method_details(payment_intent)",
          "506:     assert payment_method_info is None",
          "509: def test_get_payment_method_details_missing_charges_data():",
          "510:     payment_intent = StripeObject()",
          "511:     payment_intent.charges = {\"data\": None}",
          "513:     payment_method_info = get_payment_method_details(payment_intent)",
          "515:     assert payment_method_info is None",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/tests/test_webhooks.py||saleor/payment/gateways/stripe/tests/test_webhooks.py": [
          "File: saleor/payment/gateways/stripe/tests/test_webhooks.py -> saleor/payment/gateways/stripe/tests/test_webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: from decimal import Decimal",
          "3: from unittest.mock import Mock, patch",
          "5: import pytest",
          "6: from stripe.stripe_object import StripeObject",
          "8: from .....checkout.complete_checkout import complete_checkout",
          "9: from .... import ChargeStatus, TransactionKind",
          "10: from ....utils import price_to_minor_unit",
          "11: from ..consts import (",
          "12:     AUTHORIZED_STATUS,",
          "13:     FAILED_STATUSES,",
          "14:     PROCESSING_STATUS,",
          "15:     SUCCESS_STATUS,",
          "16:     WEBHOOK_AUTHORIZED_EVENT,",
          "17:     WEBHOOK_CANCELED_EVENT,",
          "18:     WEBHOOK_FAILED_EVENT,",
          "19:     WEBHOOK_PROCESSING_EVENT,",
          "20:     WEBHOOK_SUCCESS_EVENT,",
          "21: )",
          "22: from ..webhooks import (",
          "23:     handle_authorized_payment_intent,",
          "24:     handle_failed_payment_intent,",
          "25:     handle_processing_payment_intent,",
          "26:     handle_refund,",
          "27:     handle_successful_payment_intent,",
          "28: )",
          "31: @patch(",
          "32:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "33: )",
          "34: def test_handle_successful_payment_intent_for_checkout(",
          "35:     wrapped_checkout_complete,",
          "36:     payment_stripe_for_checkout,",
          "37:     checkout_with_items,",
          "38:     stripe_plugin,",
          "39: ):",
          "40:     payment = payment_stripe_for_checkout",
          "41:     payment.to_confirm = True",
          "42:     payment.save()",
          "43:     payment.transactions.create(",
          "44:         is_success=True,",
          "45:         action_required=True,",
          "46:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "47:         amount=payment.total,",
          "48:         currency=payment.currency,",
          "49:         token=\"ABC\",",
          "50:         gateway_response={},",
          "51:     )",
          "52:     plugin = stripe_plugin()",
          "53:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "54:     payment_intent[\"amount_received\"] = price_to_minor_unit(",
          "55:         payment.total, payment.currency",
          "56:     )",
          "57:     payment_intent[\"currency\"] = payment.currency",
          "58:     payment_intent[\"status\"] = SUCCESS_STATUS",
          "59:     handle_successful_payment_intent(payment_intent, plugin.config)",
          "61:     payment.refresh_from_db()",
          "63:     assert wrapped_checkout_complete.called",
          "64:     assert payment.checkout_id is None",
          "65:     assert payment.order",
          "66:     assert payment.order.checkout_token == str(checkout_with_items.token)",
          "67:     transaction = payment.transactions.get(kind=TransactionKind.CAPTURE)",
          "68:     assert transaction.token == payment_intent.id",
          "71: @patch(",
          "72:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "73: )",
          "74: def test_handle_successful_payment_intent_for_order(",
          "75:     wrapped_checkout_complete,",
          "76:     payment_stripe_for_order,",
          "77:     stripe_plugin,",
          "78: ):",
          "80:     payment = payment_stripe_for_order",
          "81:     plugin = stripe_plugin()",
          "82:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "83:     payment_intent[\"amount\"] = payment.total",
          "84:     payment_intent[\"currency\"] = payment.currency",
          "85:     payment_intent[\"capture_method\"] = \"automatic\"",
          "86:     handle_successful_payment_intent(payment_intent, plugin.config)",
          "88:     assert wrapped_checkout_complete.called is False",
          "91: @patch(",
          "92:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "93: )",
          "94: def test_handle_successful_payment_intent_for_order_with_auth_payment(",
          "95:     wrapped_checkout_complete,",
          "96:     payment_stripe_for_order,",
          "97:     stripe_plugin,",
          "98: ):",
          "99:     payment = payment_stripe_for_order",
          "101:     plugin = stripe_plugin()",
          "103:     payment_intent = StripeObject(id=\"token\", last_response={})",
          "104:     payment_intent[\"amount_received\"] = price_to_minor_unit(",
          "105:         payment.total, payment.currency",
          "106:     )",
          "107:     payment_intent[\"currency\"] = payment.currency",
          "108:     payment_intent[\"status\"] = SUCCESS_STATUS",
          "110:     handle_successful_payment_intent(payment_intent, plugin.config)",
          "112:     payment.refresh_from_db()",
          "114:     assert payment.is_active",
          "115:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "116:     assert payment.captured_amount == payment.total",
          "117:     assert payment.transactions.filter(kind=TransactionKind.CAPTURE).exists()",
          "118:     assert wrapped_checkout_complete.called is False",
          "121: @patch(",
          "122:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "123: )",
          "124: def test_handle_successful_payment_intent_for_order_with_pending_payment(",
          "125:     wrapped_checkout_complete,",
          "126:     payment_stripe_for_order,",
          "127:     stripe_plugin,",
          "128: ):",
          "129:     payment = payment_stripe_for_order",
          "130:     transaction = payment.transactions.first()",
          "131:     transaction.kind = TransactionKind.PENDING",
          "132:     transaction.save()",
          "134:     plugin = stripe_plugin()",
          "136:     payment_intent = StripeObject(id=\"token\", last_response={})",
          "137:     payment_intent[\"amount_received\"] = price_to_minor_unit(",
          "138:         payment.total, payment.currency",
          "139:     )",
          "140:     payment_intent[\"currency\"] = payment.currency",
          "141:     payment_intent[\"status\"] = SUCCESS_STATUS",
          "143:     handle_successful_payment_intent(payment_intent, plugin.config)",
          "145:     payment.refresh_from_db()",
          "147:     assert payment.is_active",
          "148:     assert payment.charge_status == ChargeStatus.FULLY_CHARGED",
          "149:     assert payment.captured_amount == payment.total",
          "150:     assert payment.transactions.filter(kind=TransactionKind.CAPTURE).exists()",
          "151:     assert wrapped_checkout_complete.called is False",
          "154: @patch(",
          "155:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "156: )",
          "157: def test_handle_authorized_payment_intent_for_checkout(",
          "158:     wrapped_checkout_complete,",
          "159:     payment_stripe_for_checkout,",
          "160:     checkout_with_items,",
          "161:     stripe_plugin,",
          "162: ):",
          "163:     payment = payment_stripe_for_checkout",
          "164:     payment.to_confirm = True",
          "165:     payment.save()",
          "166:     payment.transactions.create(",
          "167:         is_success=True,",
          "168:         action_required=True,",
          "169:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "170:         amount=payment.total,",
          "171:         currency=payment.currency,",
          "172:         token=\"ABC\",",
          "173:         gateway_response={},",
          "174:     )",
          "175:     plugin = stripe_plugin()",
          "176:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "177:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "178:     payment_intent[\"currency\"] = payment.currency",
          "179:     payment_intent[\"status\"] = AUTHORIZED_STATUS",
          "180:     handle_authorized_payment_intent(payment_intent, plugin.config)",
          "182:     payment.refresh_from_db()",
          "184:     assert wrapped_checkout_complete.called",
          "185:     assert payment.checkout_id is None",
          "186:     assert payment.order",
          "187:     assert payment.order.checkout_token == str(checkout_with_items.token)",
          "188:     transaction = payment.transactions.get(kind=TransactionKind.AUTH)",
          "189:     assert transaction.token == payment_intent.id",
          "192: @patch(",
          "193:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "194: )",
          "195: def test_handle_authorized_payment_intent_for_order(",
          "196:     wrapped_checkout_complete,",
          "197:     payment_stripe_for_order,",
          "198:     checkout_with_items,",
          "199:     stripe_plugin,",
          "200: ):",
          "202:     payment = payment_stripe_for_order",
          "203:     plugin = stripe_plugin()",
          "204:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "205:     payment_intent[\"amount\"] = payment.total",
          "206:     payment_intent[\"currency\"] = payment.currency",
          "207:     payment_intent[\"status\"] = AUTHORIZED_STATUS",
          "208:     handle_authorized_payment_intent(payment_intent, plugin.config)",
          "210:     assert wrapped_checkout_complete.called is False",
          "213: @patch(",
          "214:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "215: )",
          "216: def test_handle_authorized_payment_intent_for_processing_order_payment(",
          "217:     wrapped_checkout_complete,",
          "218:     payment_stripe_for_order,",
          "219:     checkout_with_items,",
          "220:     stripe_plugin,",
          "221: ):",
          "223:     payment = payment_stripe_for_order",
          "224:     payment.charge_status = ChargeStatus.PENDING",
          "225:     plugin = stripe_plugin()",
          "226:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "227:     payment_intent[\"amount\"] = payment.total",
          "228:     payment_intent[\"currency\"] = payment.currency",
          "229:     payment_intent[\"status\"] = AUTHORIZED_STATUS",
          "230:     handle_authorized_payment_intent(payment_intent, plugin.config)",
          "232:     assert wrapped_checkout_complete.called is False",
          "235: @patch(",
          "236:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "237: )",
          "238: def test_handle_processing_payment_intent_for_order(",
          "239:     wrapped_checkout_complete,",
          "240:     payment_stripe_for_order,",
          "241:     checkout_with_items,",
          "242:     stripe_plugin,",
          "243: ):",
          "245:     payment = payment_stripe_for_order",
          "246:     plugin = stripe_plugin()",
          "247:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "248:     payment_intent[\"amount\"] = payment.total",
          "249:     payment_intent[\"currency\"] = payment.currency",
          "250:     payment_intent[\"status\"] = PROCESSING_STATUS",
          "251:     handle_processing_payment_intent(payment_intent, plugin.config)",
          "253:     assert wrapped_checkout_complete.called is False",
          "256: @patch(",
          "257:     \"saleor.payment.gateways.stripe.webhooks.complete_checkout\", wraps=complete_checkout",
          "258: )",
          "259: def test_handle_processing_payment_intent_for_checkout(",
          "260:     wrapped_checkout_complete,",
          "261:     payment_stripe_for_checkout,",
          "262:     checkout_with_items,",
          "263:     stripe_plugin,",
          "264: ):",
          "265:     payment = payment_stripe_for_checkout",
          "266:     payment.to_confirm = True",
          "267:     payment.save()",
          "268:     payment.transactions.create(",
          "269:         is_success=True,",
          "270:         action_required=True,",
          "271:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "272:         amount=payment.total,",
          "273:         currency=payment.currency,",
          "274:         token=\"ABC\",",
          "275:         gateway_response={},",
          "276:     )",
          "277:     plugin = stripe_plugin()",
          "278:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "279:     payment_intent[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "280:     payment_intent[\"currency\"] = payment.currency",
          "281:     payment_intent[\"status\"] = PROCESSING_STATUS",
          "282:     handle_processing_payment_intent(payment_intent, plugin.config)",
          "284:     payment.refresh_from_db()",
          "286:     assert wrapped_checkout_complete.called",
          "287:     assert payment.checkout_id is None",
          "288:     assert payment.order",
          "289:     assert payment.order.checkout_token == str(checkout_with_items.token)",
          "290:     transaction = payment.transactions.get(kind=TransactionKind.PENDING)",
          "291:     assert transaction.token == payment_intent.id",
          "294: def test_handle_failed_payment_intent_for_checkout(",
          "295:     stripe_plugin, payment_stripe_for_checkout",
          "296: ):",
          "297:     payment = payment_stripe_for_checkout",
          "298:     payment.transactions.create(",
          "299:         is_success=True,",
          "300:         action_required=True,",
          "301:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "302:         amount=payment.total,",
          "303:         currency=payment.currency,",
          "304:         token=\"ABC\",",
          "305:         gateway_response={},",
          "306:     )",
          "308:     plugin = stripe_plugin()",
          "310:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "311:     payment_intent[\"amount\"] = payment.total",
          "312:     payment_intent[\"currency\"] = payment.currency",
          "313:     payment_intent[\"status\"] = FAILED_STATUSES[0]",
          "315:     handle_failed_payment_intent(payment_intent, plugin.config)",
          "317:     payment.refresh_from_db()",
          "319:     assert not payment.order_id",
          "320:     assert not payment.is_active",
          "321:     assert payment.charge_status == ChargeStatus.CANCELLED",
          "322:     assert payment.transactions.filter(kind=TransactionKind.CANCEL).exists()",
          "325: def test_handle_failed_payment_intent_for_order(",
          "326:     stripe_plugin, payment_stripe_for_order",
          "327: ):",
          "328:     payment = payment_stripe_for_order",
          "329:     payment.transactions.create(",
          "330:         is_success=True,",
          "331:         action_required=True,",
          "332:         kind=TransactionKind.ACTION_TO_CONFIRM,",
          "333:         amount=payment.total,",
          "334:         currency=payment.currency,",
          "335:         token=\"ABC\",",
          "336:         gateway_response={},",
          "337:     )",
          "339:     plugin = stripe_plugin()",
          "341:     payment_intent = StripeObject(id=\"ABC\", last_response={})",
          "342:     payment_intent[\"amount\"] = payment.total",
          "343:     payment_intent[\"currency\"] = payment.currency",
          "344:     payment_intent[\"status\"] = FAILED_STATUSES[0]",
          "346:     handle_failed_payment_intent(payment_intent, plugin.config)",
          "348:     payment.refresh_from_db()",
          "350:     assert not payment.is_active",
          "351:     assert payment.charge_status == ChargeStatus.CANCELLED",
          "352:     assert payment.transactions.filter(kind=TransactionKind.CANCEL).exists()",
          "355: def test_handle_fully_refund(stripe_plugin, payment_stripe_for_order):",
          "356:     payment = payment_stripe_for_order",
          "357:     payment.captured_amount = payment.total",
          "358:     payment.save()",
          "359:     payment.transactions.create(",
          "360:         is_success=True,",
          "361:         action_required=True,",
          "362:         kind=TransactionKind.CAPTURE,",
          "363:         amount=payment.total,",
          "364:         currency=payment.currency,",
          "365:         token=\"ABC\",",
          "366:         gateway_response={},",
          "367:     )",
          "368:     plugin = stripe_plugin()",
          "370:     refund = StripeObject(id=\"refund_id\")",
          "371:     refund[\"amount\"] = price_to_minor_unit(payment.total, payment.currency)",
          "372:     refund[\"currency\"] = payment.currency",
          "373:     refund[\"last_response\"] = None",
          "375:     charge = StripeObject()",
          "376:     charge[\"payment_intent\"] = \"ABC\"",
          "377:     charge[\"refunds\"] = StripeObject()",
          "378:     charge[\"refunds\"][\"data\"] = [refund]",
          "380:     handle_refund(charge, plugin.config)",
          "382:     payment.refresh_from_db()",
          "384:     assert payment.charge_status == ChargeStatus.FULLY_REFUNDED",
          "385:     assert payment.is_active is False",
          "386:     assert payment.captured_amount == Decimal(\"0\")",
          "389: def test_handle_partial_refund(stripe_plugin, payment_stripe_for_order):",
          "390:     payment = payment_stripe_for_order",
          "391:     payment.captured_amount = payment.total",
          "392:     payment.save()",
          "393:     payment.transactions.create(",
          "394:         is_success=True,",
          "395:         action_required=True,",
          "396:         kind=TransactionKind.CAPTURE,",
          "397:         amount=payment.total,",
          "398:         currency=payment.currency,",
          "399:         token=\"ABC\",",
          "400:         gateway_response={},",
          "401:     )",
          "402:     plugin = stripe_plugin()",
          "404:     refund = StripeObject(id=\"refund_id\")",
          "405:     refund[\"amount\"] = price_to_minor_unit(Decimal(\"10\"), payment.currency)",
          "406:     refund[\"currency\"] = payment.currency",
          "407:     refund[\"last_response\"] = None",
          "409:     charge = StripeObject()",
          "410:     charge[\"payment_intent\"] = \"ABC\"",
          "411:     charge[\"refunds\"] = StripeObject()",
          "412:     charge[\"refunds\"][\"data\"] = [refund]",
          "414:     handle_refund(charge, plugin.config)",
          "416:     payment.refresh_from_db()",
          "418:     assert payment.charge_status == ChargeStatus.PARTIALLY_REFUNDED",
          "419:     assert payment.is_active is True",
          "420:     assert payment.captured_amount == payment.total - Decimal(\"10\")",
          "423: def test_handle_refund_already_processed(stripe_plugin, payment_stripe_for_order):",
          "424:     payment = payment_stripe_for_order",
          "425:     payment.charge_status = ChargeStatus.PARTIALLY_REFUNDED",
          "426:     payment.captured_amount = payment.total - Decimal(\"10\")",
          "427:     payment.save()",
          "429:     refund_id = \"refund_abc\"",
          "430:     payment.transactions.create(",
          "431:         is_success=True,",
          "432:         action_required=True,",
          "433:         kind=TransactionKind.REFUND,",
          "434:         amount=payment.total,",
          "435:         currency=payment.currency,",
          "436:         token=refund_id,",
          "437:         gateway_response={},",
          "438:     )",
          "439:     plugin = stripe_plugin()",
          "441:     refund = StripeObject(id=refund_id)",
          "442:     refund[\"amount\"] = price_to_minor_unit(Decimal(\"10\"), payment.currency)",
          "443:     refund[\"currency\"] = payment.currency",
          "444:     refund[\"last_response\"] = None",
          "446:     charge = StripeObject()",
          "447:     charge[\"payment_intent\"] = \"ABC\"",
          "448:     charge[\"refunds\"] = StripeObject()",
          "449:     charge[\"refunds\"][\"data\"] = [refund]",
          "451:     handle_refund(charge, plugin.config)",
          "453:     payment.refresh_from_db()",
          "455:     assert payment.charge_status == ChargeStatus.PARTIALLY_REFUNDED",
          "456:     assert payment.is_active is True",
          "457:     assert payment.captured_amount == payment.total - Decimal(\"10\")",
          "460: @pytest.mark.parametrize(",
          "461:     \"webhook_type, fun_to_mock\",",
          "462:     [",
          "463:         (WEBHOOK_SUCCESS_EVENT, \"handle_successful_payment_intent\"),",
          "464:         (WEBHOOK_PROCESSING_EVENT, \"handle_processing_payment_intent\"),",
          "465:         (WEBHOOK_FAILED_EVENT, \"handle_failed_payment_intent\"),",
          "466:         (WEBHOOK_AUTHORIZED_EVENT, \"handle_authorized_payment_intent\"),",
          "467:         (WEBHOOK_CANCELED_EVENT, \"handle_failed_payment_intent\"),",
          "468:     ],",
          "469: )",
          "470: @patch(\"saleor.payment.gateways.stripe.stripe_api.stripe.Webhook.construct_event\")",
          "471: def test_handle_webhook_events(",
          "472:     mocked_webhook_event, webhook_type, fun_to_mock, stripe_plugin, rf",
          "473: ):",
          "474:     dummy_payload = {",
          "475:         \"id\": \"evt_1Ip9ANH1Vac4G4dbE9ch7zGS\",",
          "476:     }",
          "478:     request = rf.post(",
          "479:         path=\"/webhooks/\", data=dummy_payload, content_type=\"application/json\"",
          "480:     )",
          "482:     stripe_signature = \"1234\"",
          "483:     request.META[\"HTTP_STRIPE_SIGNATURE\"] = stripe_signature",
          "485:     event = Mock()",
          "486:     event.type = webhook_type",
          "487:     event.data.object = StripeObject()",
          "489:     mocked_webhook_event.return_value = event",
          "491:     plugin = stripe_plugin()",
          "493:     with patch(f\"saleor.payment.gateways.stripe.webhooks.{fun_to_mock}\") as mocked_fun:",
          "494:         plugin.webhook(request, \"/webhooks/\", None)",
          "495:         mocked_fun.assert_called_once_with(event.data.object, plugin.config)",
          "497:     api_key = plugin.config.connection_params[\"secret_api_key\"]",
          "498:     endpoint_secret = plugin.config.connection_params[\"webhook_secret\"]",
          "500:     mocked_webhook_event.assert_called_once_with(",
          "501:         json.dumps(dummy_payload).encode(\"utf-8\"),",
          "502:         stripe_signature,",
          "503:         endpoint_secret,",
          "504:         api_key=api_key,",
          "505:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/webhooks.py||saleor/payment/gateways/stripe/webhooks.py": [
          "File: saleor/payment/gateways/stripe/webhooks.py -> saleor/payment/gateways/stripe/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from typing import Optional",
          "4: from django.contrib.auth.models import AnonymousUser",
          "5: from django.core.handlers.wsgi import WSGIRequest",
          "6: from django.http import HttpResponse",
          "7: from stripe.error import SignatureVerificationError",
          "8: from stripe.stripe_object import StripeObject",
          "10: from ....checkout.complete_checkout import complete_checkout",
          "11: from ....checkout.fetch import fetch_checkout_info, fetch_checkout_lines",
          "12: from ....checkout.models import Checkout",
          "13: from ....core.transactions import transaction_with_commit_on_errors",
          "14: from ....discount.utils import fetch_active_discounts",
          "15: from ....order.actions import order_captured, order_refunded, order_voided",
          "16: from ....plugins.manager import get_plugins_manager",
          "17: from ... import ChargeStatus, TransactionKind",
          "18: from ...interface import GatewayConfig, GatewayResponse",
          "19: from ...models import Payment",
          "20: from ...utils import create_transaction, gateway_postprocess, price_from_minor_unit",
          "21: from .consts import (",
          "22:     WEBHOOK_AUTHORIZED_EVENT,",
          "23:     WEBHOOK_CANCELED_EVENT,",
          "24:     WEBHOOK_FAILED_EVENT,",
          "25:     WEBHOOK_PROCESSING_EVENT,",
          "26:     WEBHOOK_REFUND_EVENT,",
          "27:     WEBHOOK_SUCCESS_EVENT,",
          "28: )",
          "29: from .stripe_api import construct_stripe_event",
          "31: logger = logging.getLogger(__name__)",
          "34: @transaction_with_commit_on_errors()",
          "35: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
          "36:     payload = request.body",
          "37:     sig_header = request.META[\"HTTP_STRIPE_SIGNATURE\"]",
          "38:     endpoint_secret = gateway_config.connection_params[\"webhook_secret\"]",
          "39:     api_key = gateway_config.connection_params[\"secret_api_key\"]",
          "40:     try:",
          "41:         event = construct_stripe_event(",
          "42:             api_key=api_key,",
          "43:             payload=payload,",
          "44:             sig_header=sig_header,",
          "45:             endpoint_secret=endpoint_secret,",
          "46:         )",
          "47:     except ValueError as e:",
          "48:         # Invalid payload",
          "49:         logger.warning(",
          "50:             \"Received invalid payload for Stripe webhook\", extra={\"error\": e}",
          "51:         )",
          "52:         return HttpResponse(status=400)",
          "53:     except SignatureVerificationError as e:",
          "54:         # Invalid signature",
          "55:         logger.warning(\"Invalid signature for Stripe webhook\", extra={\"error\": e})",
          "56:         return HttpResponse(status=400)",
          "58:     webhook_handlers = {",
          "59:         WEBHOOK_SUCCESS_EVENT: handle_successful_payment_intent,",
          "60:         WEBHOOK_AUTHORIZED_EVENT: handle_authorized_payment_intent,",
          "61:         WEBHOOK_PROCESSING_EVENT: handle_processing_payment_intent,",
          "62:         WEBHOOK_FAILED_EVENT: handle_failed_payment_intent,",
          "63:         WEBHOOK_CANCELED_EVENT: handle_failed_payment_intent,",
          "64:         WEBHOOK_REFUND_EVENT: handle_refund,",
          "65:     }",
          "66:     if event.type in webhook_handlers:",
          "67:         logger.debug(",
          "68:             \"Processing new Stripe webhook\",",
          "69:             extra={\"event_type\": event.type, \"event_id\": event.id},",
          "70:         )",
          "71:         webhook_handlers[event.type](event.data.object, gateway_config)",
          "72:     else:",
          "73:         logger.warning(",
          "74:             \"Received unhandled webhook events\", extra={\"event_type\": event.type}",
          "75:         )",
          "76:     return HttpResponse(status=200)",
          "79: def _get_payment(payment_intent_id: str) -> Optional[Payment]:",
          "80:     return (",
          "81:         Payment.objects.prefetch_related(",
          "82:             \"checkout\",",
          "83:         )",
          "84:         .select_for_update(of=(\"self\",))",
          "85:         .filter(transactions__token=payment_intent_id, is_active=True)",
          "86:         .first()",
          "87:     )",
          "90: def _get_checkout(payment_id: int) -> Optional[Checkout]:",
          "91:     return (",
          "92:         Checkout.objects.prefetch_related(\"payments\")",
          "93:         .select_for_update(of=(\"self\",))",
          "94:         .filter(payments__id=payment_id, payments__is_active=True)",
          "95:         .first()",
          "96:     )",
          "99: def _finalize_checkout(",
          "100:     checkout: Checkout,",
          "101:     payment: Payment,",
          "102:     payment_intent: StripeObject,",
          "103:     kind: str,",
          "104:     amount: str,",
          "105:     currency: str,",
          "106: ):",
          "107:     gateway_response = GatewayResponse(",
          "108:         kind=kind,",
          "109:         action_required=False,",
          "110:         transaction_id=payment_intent.id,",
          "111:         is_success=True,",
          "112:         amount=price_from_minor_unit(amount, currency),",
          "113:         currency=payment_intent.currency,",
          "114:         error=None,",
          "115:         raw_response=payment_intent.last_response,",
          "116:         psp_reference=payment_intent.id,",
          "117:     )",
          "119:     create_transaction(",
          "120:         payment,",
          "121:         kind=kind,",
          "122:         payment_information=None,  # type: ignore",
          "123:         action_required=False,",
          "124:         gateway_response=gateway_response,",
          "125:     )",
          "127:     manager = get_plugins_manager()",
          "128:     discounts = fetch_active_discounts()",
          "129:     lines = fetch_checkout_lines(checkout)  # type: ignore",
          "130:     checkout_info = fetch_checkout_info(",
          "131:         checkout, lines, discounts, manager  # type: ignore",
          "132:     )",
          "133:     order, _, _ = complete_checkout(",
          "134:         manager=manager,",
          "135:         checkout_info=checkout_info,",
          "136:         lines=lines,",
          "137:         payment_data={},",
          "138:         store_source=False,",
          "139:         discounts=discounts,",
          "140:         user=checkout.user or AnonymousUser(),  # type: ignore",
          "141:     )",
          "144: def _update_payment_with_new_transaction(",
          "145:     payment: Payment, stripe_object: StripeObject, kind: str, amount: str, currency: str",
          "146: ):",
          "147:     gateway_response = GatewayResponse(",
          "148:         kind=kind,",
          "149:         action_required=False,",
          "150:         transaction_id=stripe_object.id,",
          "151:         is_success=True,",
          "152:         amount=price_from_minor_unit(amount, currency),",
          "153:         currency=currency,",
          "154:         error=None,",
          "155:         raw_response=stripe_object.last_response,",
          "156:         psp_reference=stripe_object.id,",
          "157:     )",
          "158:     transaction = create_transaction(",
          "159:         payment,",
          "160:         kind=kind,",
          "161:         payment_information=None,  # type: ignore",
          "162:         action_required=False,",
          "163:         gateway_response=gateway_response,",
          "164:     )",
          "165:     gateway_postprocess(transaction, payment)",
          "167:     return transaction",
          "170: def _process_payment_with_checkout(",
          "171:     payment: Payment,",
          "172:     payment_intent: StripeObject,",
          "173:     kind: str,",
          "174:     amount: str,",
          "175:     currency: str,",
          "176: ):",
          "177:     checkout = _get_checkout(payment.id)",
          "179:     if checkout:",
          "180:         _finalize_checkout(checkout, payment, payment_intent, kind, amount, currency)",
          "183: def handle_authorized_payment_intent(",
          "184:     payment_intent: StripeObject, gateway_config: \"GatewayConfig\"",
          "185: ):",
          "186:     payment = _get_payment(payment_intent.id)",
          "188:     if not payment:",
          "189:         logger.warning(",
          "190:             \"Payment for PaymentIntent was not found\",",
          "191:             extra={\"payment_intent\": payment_intent.id},",
          "192:         )",
          "193:         return",
          "194:     if payment.order_id:",
          "195:         if payment.charge_status == ChargeStatus.PENDING:",
          "196:             _update_payment_with_new_transaction(",
          "197:                 payment,",
          "198:                 payment_intent,",
          "199:                 TransactionKind.AUTH,",
          "200:                 payment_intent.amount,",
          "201:                 payment_intent.currency,",
          "202:             )",
          "203:         # Order already created",
          "204:         return",
          "206:     if payment.checkout_id:",
          "207:         _process_payment_with_checkout(",
          "208:             payment,",
          "209:             payment_intent,",
          "210:             kind=TransactionKind.AUTH,",
          "211:             amount=payment_intent.amount,",
          "212:             currency=payment_intent.currency,",
          "213:         )",
          "216: def handle_failed_payment_intent(",
          "217:     payment_intent: StripeObject, gateway_config: \"GatewayConfig\"",
          "218: ):",
          "219:     payment = _get_payment(payment_intent.id)",
          "221:     if not payment:",
          "222:         logger.warning(",
          "223:             \"Payment for PaymentIntent was not found\",",
          "224:             extra={\"payment_intent\": payment_intent.id},",
          "225:         )",
          "226:         return",
          "227:     _update_payment_with_new_transaction(",
          "228:         payment,",
          "229:         payment_intent,",
          "230:         TransactionKind.CANCEL,",
          "231:         payment_intent.amount,",
          "232:         payment_intent.currency,",
          "233:     )",
          "234:     if payment.order:",
          "235:         order_voided(payment.order, None, payment, get_plugins_manager())",
          "238: def handle_processing_payment_intent(",
          "239:     payment_intent: StripeObject, gateway_config: \"GatewayConfig\"",
          "240: ):",
          "241:     payment = _get_payment(payment_intent.id)",
          "243:     if not payment:",
          "244:         logger.warning(",
          "245:             \"Payment for PaymentIntent was not found\",",
          "246:             extra={\"payment_intent\": payment_intent.id},",
          "247:         )",
          "248:         return",
          "249:     if payment.order_id:",
          "250:         # Order already created",
          "251:         return",
          "253:     if payment.checkout_id:",
          "254:         _process_payment_with_checkout(",
          "255:             payment,",
          "256:             payment_intent,",
          "257:             TransactionKind.PENDING,",
          "258:             amount=payment_intent.amount,",
          "259:             currency=payment_intent.currency,",
          "260:         )",
          "263: def handle_successful_payment_intent(",
          "264:     payment_intent: StripeObject, gateway_config: \"GatewayConfig\"",
          "265: ):",
          "266:     payment = _get_payment(payment_intent.id)",
          "268:     if not payment:",
          "269:         logger.warning(",
          "270:             \"Payment for PaymentIntent was not found\",",
          "271:             extra={\"payment_intent\": payment_intent.id},",
          "272:         )",
          "273:         return",
          "274:     if payment.order_id:",
          "275:         if payment.charge_status in [ChargeStatus.PENDING, ChargeStatus.NOT_CHARGED]:",
          "276:             capture_transaction = _update_payment_with_new_transaction(",
          "277:                 payment,",
          "278:                 payment_intent,",
          "279:                 TransactionKind.CAPTURE,",
          "280:                 payment_intent.amount_received,",
          "281:                 payment_intent.currency,",
          "282:             )",
          "283:             order_captured(",
          "284:                 payment.order,  # type: ignore",
          "285:                 None,",
          "286:                 capture_transaction.amount,",
          "287:                 payment,",
          "288:                 get_plugins_manager(),",
          "289:             )",
          "290:         return",
          "292:     if payment.checkout_id:",
          "293:         _process_payment_with_checkout(",
          "294:             payment,",
          "295:             payment_intent,",
          "296:             TransactionKind.CAPTURE,",
          "297:             amount=payment_intent.amount_received,",
          "298:             currency=payment_intent.currency,",
          "299:         )",
          "302: def handle_refund(charge: StripeObject, gateway_config: \"GatewayConfig\"):",
          "303:     payment_intent_id = charge.payment_intent",
          "304:     payment = _get_payment(payment_intent_id)",
          "306:     refund = charge.refunds.data[0]",
          "307:     if not payment:",
          "308:         logger.warning(",
          "309:             \"Payment for PaymentIntent was not found\",",
          "310:             extra={\"payment_intent\": payment_intent_id},",
          "311:         )",
          "312:         return",
          "314:     already_processed = payment.transactions.filter(token=refund.id).exists()",
          "316:     if already_processed:",
          "317:         logger.debug(",
          "318:             \"Refund already processed\",",
          "319:             extra={",
          "320:                 \"refund\": refund.id,",
          "321:                 \"payment\": payment.id,",
          "322:                 \"payment_intent_id\": payment_intent_id,",
          "323:             },",
          "324:         )",
          "325:         return",
          "327:     if payment.charge_status in ChargeStatus.FULLY_REFUNDED:",
          "328:         logger.info(",
          "329:             \"Order already fully refunded\", extra={\"order_id\": payment.order_id}",
          "330:         )",
          "331:         return",
          "333:     refund_transaction = _update_payment_with_new_transaction(",
          "334:         payment, refund, TransactionKind.REFUND, refund.amount, refund.currency",
          "335:     )",
          "336:     if payment.order:",
          "337:         order_refunded(",
          "338:             payment.order,",
          "339:             None,",
          "340:             refund_transaction.amount,",
          "341:             payment,",
          "342:             get_plugins_manager(),",
          "343:         )",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     customer_ip_address: Optional[str]",
          "78:     customer_email: str",
          "79:     token: Optional[str] = None",
          "81:     reuse_source: bool = False",
          "82:     data: Optional[dict] = None",
          "85: @dataclass",
          "",
          "[Removed Lines]",
          "80:     customer_id: Optional[str] = None",
          "",
          "[Added Lines]",
          "80:     customer_id: Optional[str] = None  # stores payment gateway customer ID",
          "83:     graphql_customer_id: Optional[str] = None",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from typing import TYPE_CHECKING, Dict, List, Optional",
          "6: import graphene",
          "7: from django.core.serializers.json import DjangoJSONEncoder",
          "9: from ..account.models import User",
          "10: from ..checkout.models import Checkout",
          "11: from ..core.tracing import traced_atomic_transaction",
          "12: from ..order.models import Order",
          "13: from . import ChargeStatus, GatewayError, PaymentError, TransactionKind",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from babel.numbers import get_currency_precision",
          "12: from ..core.prices import quantize_price",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         billing = checkout.billing_address",
          "43:         shipping = checkout.shipping_address",
          "44:         email = checkout.get_customer_email()",
          "45:     elif payment.order:",
          "46:         billing = payment.order.billing_address",
          "47:         shipping = payment.order.shipping_address",
          "48:         email = payment.order.user_email",
          "49:     else:",
          "52:     billing_address = AddressData(**billing.as_data()) if billing else None",
          "53:     shipping_address = AddressData(**shipping.as_data()) if shipping else None",
          "",
          "[Removed Lines]",
          "50:         billing, shipping, email = None, None, payment.billing_email",
          "",
          "[Added Lines]",
          "47:         user_id = checkout.user_id",
          "52:         user_id = payment.order.user_id",
          "54:         billing, shipping, email, user_id = None, None, payment.billing_email, None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     order_id = payment.order.pk if payment.order else None",
          "56:     graphql_payment_id = graphene.Node.to_global_id(\"Payment\", payment.pk)",
          "58:     return PaymentData(",
          "59:         gateway=payment.gateway,",
          "60:         token=payment_token,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     graphql_customer_id = None",
          "63:     if user_id:",
          "64:         graphql_customer_id = graphene.Node.to_global_id(\"User\", user_id)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         customer_email=email,",
          "71:         reuse_source=store_source,",
          "72:         data=additional_data or {},",
          "73:     )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         graphql_customer_id=graphql_customer_id,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:         payment.captured_amount -= transaction.amount",
          "295:         payment.charge_status = ChargeStatus.PARTIALLY_REFUNDED",
          "296:         if payment.captured_amount <= 0:",
          "297:             payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "298:             payment.is_active = False",
          "299:         changed_fields += [\"charge_status\", \"is_active\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:             payment.captured_amount = Decimal(\"0.0\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302:         changed_fields += [\"charge_status\"]",
          "303:     elif transaction_kind == TransactionKind.CANCEL:",
          "304:         payment.charge_status = ChargeStatus.CANCELLED",
          "306:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
          "307:         if payment.charge_status in {",
          "308:             ChargeStatus.PARTIALLY_CHARGED,",
          "",
          "[Removed Lines]",
          "305:         changed_fields += [\"charge_status\"]",
          "",
          "[Added Lines]",
          "315:         payment.is_active = False",
          "316:         changed_fields += [\"charge_status\", \"is_active\"]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386:     \"\"\"Return true if the given gateway supports given currency.\"\"\"",
          "387:     available_gateways = manager.list_payment_gateways(currency=currency)",
          "388:     return any([gateway.id == gateway_id for gateway in available_gateways])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: def price_from_minor_unit(value: str, currency: str):",
          "403:     \"\"\"Convert minor unit (smallest unit of currency) to decimal value.",
          "405:     (value: 1000, currency: USD) will be converted to 10.00",
          "406:     \"\"\"",
          "408:     value = Decimal(value)",
          "409:     precision = get_currency_precision(currency)",
          "410:     number_places = Decimal(10) ** -precision",
          "411:     return value * number_places",
          "414: def price_to_minor_unit(value: Decimal, currency: str):",
          "415:     \"\"\"Convert decimal value to the smallest unit of currency.",
          "417:     Take the value, discover the precision of currency and multiply value by",
          "418:     Decimal('10.0'), then change quantization to remove the comma.",
          "419:     Decimal(10.0) -> str(1000)",
          "420:     \"\"\"",
          "421:     value = quantize_price(value, currency=currency)",
          "422:     precision = get_currency_precision(currency)",
          "423:     number_places = Decimal(\"10.0\") ** precision",
          "424:     value_without_comma = value * number_places",
          "425:     return str(value_without_comma.quantize(Decimal(\"1\")))",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:         \"\"\"",
          "704:         return",
          "706:     @classmethod",
          "707:     def save_plugin_configuration(",
          "708:         cls, plugin_configuration: \"PluginConfiguration\", cleaned_data",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706:     @classmethod",
          "707:     def pre_save_plugin_configuration(cls, plugin_configuration: \"PluginConfiguration\"):",
          "708:         \"\"\"Trigger before plugin configuration will be saved.",
          "710:         Overwrite this method if you need to trigger specific logic before saving a",
          "711:         plugin configuration.",
          "712:         \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "714:         if \"active\" in cleaned_data:",
          "715:             plugin_configuration.active = cleaned_data[\"active\"]",
          "716:         cls.validate_plugin_configuration(plugin_configuration)",
          "717:         plugin_configuration.save()",
          "718:         if plugin_configuration.configuration:",
          "719:             # Let's add a translated descriptions and labels",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725:         cls.pre_save_plugin_configuration(plugin_configuration)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "729:         configuration with current values and provide access to it via API.",
          "730:         \"\"\"",
          "731:         config_structure = getattr(cls, \"CONFIG_STRUCTURE\") or {}",
          "732:         for configuration_field in configuration:",
          "734:             structure_to_add = config_structure.get(configuration_field.get(\"name\"))",
          "735:             if structure_to_add:",
          "736:                 configuration_field.update(structure_to_add)",
          "738:     @classmethod",
          "739:     def _update_configuration_structure(cls, configuration: PluginConfigurationType):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741:         fields_without_structure = []",
          "747:             else:",
          "748:                 fields_without_structure.append(configuration_field)",
          "750:         if fields_without_structure:",
          "751:             [",
          "752:                 configuration.remove(field)  # type: ignore",
          "753:                 for field in fields_without_structure",
          "754:             ]",
          "",
          "---------------"
        ],
        "saleor/settings.py||saleor/settings.py": [
          "File: saleor/settings.py -> saleor/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "564:     \"saleor.plugins.webhook.plugin.WebhookPlugin\",",
          "565:     \"saleor.payment.gateways.dummy.plugin.DummyGatewayPlugin\",",
          "566:     \"saleor.payment.gateways.dummy_credit_card.plugin.DummyCreditCardGatewayPlugin\",",
          "567:     \"saleor.payment.gateways.stripe.plugin.StripeGatewayPlugin\",",
          "568:     \"saleor.payment.gateways.braintree.plugin.BraintreeGatewayPlugin\",",
          "569:     \"saleor.payment.gateways.razorpay.plugin.RazorpayGatewayPlugin\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:     \"saleor.payment.gateways.stripe.deprecated.plugin.DeprecatedStripeGatewayPlugin\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}