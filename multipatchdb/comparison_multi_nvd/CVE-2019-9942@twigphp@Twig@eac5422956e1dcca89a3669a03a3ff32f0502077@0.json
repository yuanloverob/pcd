{
  "cve_id": "CVE-2019-9942",
  "cve_desc": "A sandbox information disclosure exists in Twig before 1.38.0 and 2.x before 2.7.0 because, under some circumstances, it is possible to call the __toString() method on an object even if not allowed by the security policy in place.",
  "repo": "twigphp/Twig",
  "patch_hash": "eac5422956e1dcca89a3669a03a3ff32f0502077",
  "patch_info": {
    "commit_hash": "eac5422956e1dcca89a3669a03a3ff32f0502077",
    "repo": "twigphp/Twig",
    "commit_url": "https://github.com/twigphp/Twig/commit/eac5422956e1dcca89a3669a03a3ff32f0502077",
    "files": [
      "CHANGELOG",
      "src/Node/CheckToStringNode.php",
      "src/Node/SandboxedPrintNode.php",
      "src/NodeVisitor/SandboxNodeVisitor.php",
      "test/Twig/Tests/Extension/SandboxTest.php",
      "test/Twig/Tests/Node/SandboxedPrintTest.php"
    ],
    "message": "fixed security issue in the sandbox",
    "before_after_code_files": [
      "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
      "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php",
      "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php",
      "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php",
      "test/Twig/Tests/Node/SandboxedPrintTest.php||test/Twig/Tests/Node/SandboxedPrintTest.php"
    ]
  },
  "patch_diff": {
    "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
      "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <?php",
      "12: namespace Twig\\Node;",
      "14: use Twig\\Compiler;",
      "15: use Twig\\Node\\Expression\\AbstractExpression;",
      "27: class CheckToStringNode extends Node",
      "28: {",
      "29:     public function __construct(AbstractExpression $expr)",
      "30:     {",
      "31:         parent::__construct(['expr' => $expr], [], $expr->getTemplateLine(), $expr->getNodeTag());",
      "32:     }",
      "34:     public function compile(Compiler $compiler)",
      "35:     {",
      "36:         $compiler",
      "37:             ->raw('$this->sandbox->ensureToStringAllowed(')",
      "38:             ->subcompile($this->getNode('expr'))",
      "39:             ->raw(')')",
      "40:         ;",
      "41:     }",
      "42: }",
      "",
      "---------------"
    ],
    "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php": [
      "File: src/Node/SandboxedPrintNode.php -> src/Node/SandboxedPrintNode.php"
    ],
    "src/NodeVisitor/SandboxNodeVisitor.php||src/NodeVisitor/SandboxNodeVisitor.php": [
      "File: src/NodeVisitor/SandboxNodeVisitor.php -> src/NodeVisitor/SandboxNodeVisitor.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: use Twig\\Environment;",
      "15: use Twig\\Node\\CheckSecurityNode;",
      "16: use Twig\\Node\\Expression\\Binary\\RangeBinary;",
      "17: use Twig\\Node\\Expression\\FilterExpression;",
      "18: use Twig\\Node\\Expression\\FunctionExpression;",
      "19: use Twig\\Node\\ModuleNode;",
      "20: use Twig\\Node\\Node;",
      "21: use Twig\\Node\\PrintNode;",
      "",
      "[Removed Lines]",
      "22: use Twig\\Node\\SandboxedPrintNode;",
      "",
      "[Added Lines]",
      "16: use Twig\\Node\\CheckToStringNode;",
      "17: use Twig\\Node\\Expression\\Binary\\ConcatBinary;",
      "21: use Twig\\Node\\Expression\\GetAttrExpression;",
      "22: use Twig\\Node\\Expression\\NameExpression;",
      "26: use Twig\\Node\\SetNode;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:     protected $filters;",
      "34:     protected $functions;",
      "36:     protected function doEnterNode(Node $node, Environment $env)",
      "37:     {",
      "38:         if ($node instanceof ModuleNode) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:     private $needsToStringWrap = false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:                 $this->functions['range'] = $node;",
      "64:             }",
      "67:             if ($node instanceof PrintNode) {",
      "69:             }",
      "70:         }",
      "",
      "[Removed Lines]",
      "68:                 return new SandboxedPrintNode($node->getNode('expr'), $node->getTemplateLine(), $node->getNodeTag());",
      "",
      "[Added Lines]",
      "73:                 $this->needsToStringWrap = true;",
      "74:                 $this->wrapNode($node, 'expr');",
      "75:             }",
      "77:             if ($node instanceof SetNode && !$node->getAttribute('capture')) {",
      "78:                 $this->needsToStringWrap = true;",
      "79:             }",
      "82:             if ($this->needsToStringWrap) {",
      "83:                 if ($node instanceof ConcatBinary) {",
      "84:                     $this->wrapNode($node, 'left');",
      "85:                     $this->wrapNode($node, 'right');",
      "86:                 }",
      "87:                 if ($node instanceof FilterExpression) {",
      "88:                     $this->wrapNode($node, 'node');",
      "89:                     $this->wrapArrayNode($node, 'arguments');",
      "90:                 }",
      "91:                 if ($node instanceof FunctionExpression) {",
      "92:                     $this->wrapArrayNode($node, 'arguments');",
      "93:                 }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "78:             $this->inAModule = false;",
      "80:             $node->setNode('constructor_end', new Node([new CheckSecurityNode($this->filters, $this->tags, $this->functions), $node->getNode('display_start')]));",
      "81:         }",
      "83:         return $node;",
      "84:     }",
      "86:     public function getPriority()",
      "87:     {",
      "88:         return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "106:         } elseif ($this->inAModule) {",
      "107:             if ($node instanceof PrintNode || $node instanceof SetNode) {",
      "108:                 $this->needsToStringWrap = false;",
      "109:             }",
      "115:     private function wrapNode(Node $node, $name)",
      "116:     {",
      "117:         $expr = $node->getNode($name);",
      "118:         if ($expr instanceof NameExpression || $expr instanceof GetAttrExpression) {",
      "119:             $node->setNode($name, new CheckToStringNode($expr));",
      "120:         }",
      "121:     }",
      "123:     private function wrapArrayNode(Node $node, $name)",
      "124:     {",
      "125:         $args = $node->getNode($name);",
      "126:         foreach ($args as $name => $_) {",
      "127:             $this->wrapNode($args, $name);",
      "128:         }",
      "129:     }",
      "",
      "---------------"
    ],
    "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php": [
      "File: test/Twig/Tests/Extension/SandboxTest.php -> test/Twig/Tests/Extension/SandboxTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:             '1_basic3' => '{% if name %}foo{% endif %}',",
      "35:             '1_basic4' => '{{ obj.bar }}',",
      "36:             '1_basic5' => '{{ obj }}',",
      "38:             '1_basic7' => '{{ cycle([\"foo\",\"bar\"], 1) }}',",
      "39:             '1_basic8' => '{{ obj.getfoobar }}{{ obj.getFooBar }}',",
      "40:             '1_basic9' => '{{ obj.foobar }}{{ obj.fooBar }}',",
      "",
      "[Removed Lines]",
      "37:             '1_basic6' => '{{ arr.obj }}',",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:         }",
      "113:     }",
      "116:     {",
      "118:         try {",
      "120:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
      "121:         } catch (SecurityError $e) {",
      "122:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
      "",
      "[Removed Lines]",
      "115:     public function testSandboxUnallowedToString()",
      "117:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "119:             $twig->load('1_basic5')->render(self::$params);",
      "",
      "[Added Lines]",
      "117:     public function testSandboxUnallowedToString($template)",
      "119:         $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper'], ['FooObject' => 'getAnotherFooObject'], [], ['random']);",
      "121:             $twig->loadTemplate('index')->render(self::$params);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "125:         }",
      "126:     }",
      "129:     {",
      "139:     }",
      "141:     public function testSandboxUnallowedFunction()",
      "",
      "[Removed Lines]",
      "128:     public function testSandboxUnallowedToStringArray()",
      "130:         $twig = $this->getEnvironment(true, [], self::$templates);",
      "131:         try {",
      "132:             $twig->load('1_basic6')->render(self::$params);",
      "133:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
      "134:         } catch (SecurityError $e) {",
      "135:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
      "136:             $this->assertEquals('FooObject', $e->getClassName(), 'Exception should be raised on the \"FooObject\" class');",
      "137:             $this->assertEquals('__tostring', $e->getMethodName(), 'Exception should be raised on the \"__toString\" method');",
      "138:         }",
      "",
      "[Added Lines]",
      "130:     public function getSandboxUnallowedToStringTests()",
      "132:         return [",
      "133:             'simple' => ['{{ obj }}'],",
      "134:             'object_from_array' => ['{{ arr.obj }}'],",
      "135:             'object_chain' => ['{{ obj.anotherFooObject }}'],",
      "136:             'filter' => ['{{ obj|upper }}'],",
      "137:             'filter_from_array' => ['{{ arr.obj|upper }}'],",
      "138:             'function' => ['{{ random(obj) }}'],",
      "139:             'function_from_array' => ['{{ random(arr.obj) }}'],",
      "140:             'function_and_filter' => ['{{ random(obj|upper) }}'],",
      "141:             'function_and_filter_from_array' => ['{{ random(arr.obj|upper) }}'],",
      "142:             'object_chain_and_filter' => ['{{ obj.anotherFooObject|upper }}'],",
      "143:             'object_chain_and_function' => ['{{ random(obj.anotherFooObject) }}'],",
      "144:             'concat' => ['{{ obj ~ \"\" }}'],",
      "145:             'concat_again' => ['{{ \"\" ~ obj }}'],",
      "146:         ];",
      "147:     }",
      "152:     public function testSandboxAllowedToString($template, $output)",
      "153:     {",
      "154:         $twig = $this->getEnvironment(true, [], ['index' => $template], ['set'], [], ['FooObject' => ['foo', 'getAnotherFooObject']]);",
      "155:         $this->assertEquals($output, $twig->load('index')->render(self::$params));",
      "156:     }",
      "158:     public function getSandboxAllowedToStringTests()",
      "159:     {",
      "160:         return [",
      "161:             'constant_test' => ['{{ obj is constant(\"PHP_INT_MAX\") }}', ''],",
      "162:             'set_object' => ['{% set a = obj.anotherFooObject %}{{ a.foo }}', 'foo'],",
      "163:             'is_defined' => ['{{ obj.anotherFooObject is defined }}', '1'],",
      "164:             'is_null' => ['{{ obj is null }}', ''],",
      "165:             'is_sameas' => ['{{ obj is same as(obj) }}', '1'],",
      "166:             'is_sameas_from_array' => ['{{ arr.obj is same as(arr.obj) }}', '1'],",
      "167:             'is_sameas_from_another_method' => ['{{ obj.anotherFooObject is same as(obj.anotherFooObject) }}', ''],",
      "168:         ];",
      "169:     }",
      "171:     public function testSandboxAllowMethodToString()",
      "172:     {",
      "173:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);",
      "174:         FooObject::reset();",
      "175:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
      "176:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "177:     }",
      "179:     public function testSandboxAllowMethodToStringDisabled()",
      "180:     {",
      "181:         $twig = $this->getEnvironment(false, [], self::$templates);",
      "182:         FooObject::reset();",
      "183:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
      "184:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:         $this->assertEquals(1, FooObject::$called['foo'], 'Sandbox only calls method once');",
      "171:     }",
      "189:     public function testSandboxAllowFilter()",
      "190:     {",
      "191:         $twig = $this->getEnvironment(true, [], self::$templates, [], ['upper']);",
      "",
      "[Removed Lines]",
      "173:     public function testSandboxAllowMethodToString()",
      "174:     {",
      "175:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);",
      "176:         FooObject::reset();",
      "177:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
      "178:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "179:     }",
      "181:     public function testSandboxAllowMethodToStringDisabled()",
      "182:     {",
      "183:         $twig = $this->getEnvironment(false, [], self::$templates);",
      "184:         FooObject::reset();",
      "185:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
      "186:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
      "187:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "327:         return 'foobar';",
      "328:     }",
      "329: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "360:     public function getAnotherFooObject()",
      "361:     {",
      "362:         return new self();",
      "363:     }",
      "",
      "---------------"
    ],
    "test/Twig/Tests/Node/SandboxedPrintTest.php||test/Twig/Tests/Node/SandboxedPrintTest.php": [
      "File: test/Twig/Tests/Node/SandboxedPrintTest.php -> test/Twig/Tests/Node/SandboxedPrintTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a165ce67d435880f3d66077a3b069d7994e46b95",
      "candidate_info": {
        "commit_hash": "a165ce67d435880f3d66077a3b069d7994e46b95",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/a165ce67d435880f3d66077a3b069d7994e46b95",
        "files": [
          "src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php",
          "src/Sandbox/SecurityPolicyInterface.php"
        ],
        "message": "added the source for all sandbox security exceptions",
        "before_after_code_files": [
          "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php",
          "src/Sandbox/SecurityPolicyInterface.php||src/Sandbox/SecurityPolicyInterface.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ],
          "candidate": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php": [
          "File: src/Extension/CoreExtension.php -> src/Extension/CoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1601:             }",
          "1603:             if ($sandboxed) {",
          "1605:             }",
          "1607:             return $object->$item;",
          "",
          "[Removed Lines]",
          "1604:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item);",
          "",
          "[Added Lines]",
          "1604:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $source);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1678:     }",
          "1680:     if ($sandboxed) {",
          "1682:     }",
          "",
          "[Removed Lines]",
          "1681:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method);",
          "",
          "[Added Lines]",
          "1681:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $source);",
          "",
          "---------------"
        ],
        "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php": [
          "File: src/Extension/SandboxExtension.php -> src/Extension/SandboxExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: namespace Twig\\Extension;",
          "14: use Twig\\NodeVisitor\\SandboxNodeVisitor;",
          "15: use Twig\\Sandbox\\SecurityPolicyInterface;",
          "16: use Twig\\TokenParser\\SandboxTokenParser;",
          "18: final class SandboxExtension extends AbstractExtension",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Twig\\Sandbox\\SecurityNotAllowedMethodError;",
          "16: use Twig\\Sandbox\\SecurityNotAllowedPropertyError;",
          "18: use Twig\\Source;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         }",
          "75:     }",
          "78:     {",
          "79:         if ($this->isSandboxed()) {",
          "81:         }",
          "82:     }",
          "85:     {",
          "86:         if ($this->isSandboxed()) {",
          "88:         }",
          "89:     }",
          "92:     {",
          "93:         if ($this->isSandboxed() && \\is_object($obj) && method_exists($obj, '__toString')) {",
          "95:         }",
          "97:         return $obj;",
          "",
          "[Removed Lines]",
          "77:     public function checkMethodAllowed($obj, $method)",
          "80:             $this->policy->checkMethodAllowed($obj, $method);",
          "84:     public function checkPropertyAllowed($obj, $method)",
          "87:             $this->policy->checkPropertyAllowed($obj, $method);",
          "91:     public function ensureToStringAllowed($obj)",
          "94:             $this->policy->checkMethodAllowed($obj, '__toString');",
          "",
          "[Added Lines]",
          "80:     public function checkMethodAllowed($obj, $method, Source $source = null)",
          "83:             try {",
          "84:                 $this->policy->checkMethodAllowed($obj, $method);",
          "85:             } catch (SecurityNotAllowedMethodError $e) {",
          "86:                 $e->setSourceContext($source);",
          "88:                 throw $e;",
          "89:             }",
          "93:     public function checkPropertyAllowed($obj, $method, Source $source = null)",
          "96:             try {",
          "97:                 $this->policy->checkPropertyAllowed($obj, $method);",
          "98:             } catch (SecurityNotAllowedPropertyError $e) {",
          "99:                 $e->setSourceContext($source);",
          "101:                 throw $e;",
          "102:             }",
          "106:     public function ensureToStringAllowed($obj, Source $source = null)",
          "109:             try {",
          "110:                 $this->policy->checkMethodAllowed($obj, '__toString');",
          "111:             } catch (SecurityNotAllowedMethodError $e) {",
          "112:                 $e->setSourceContext($source);",
          "114:                 throw $e;",
          "115:             }",
          "",
          "---------------"
        ],
        "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
          "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         $compiler",
          "37:             ->raw('$this->sandbox->ensureToStringAllowed(')",
          "38:             ->subcompile($this->getNode('expr'))",
          "40:         ;",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "39:             ->raw(')')",
          "",
          "[Added Lines]",
          "39:             ->raw(', $this->source)')",
          "",
          "---------------"
        ],
        "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php": [
          "File: src/Node/SandboxedPrintNode.php -> src/Node/SandboxedPrintNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             $compiler",
          "44:                 ->write('$this->extensions[SandboxExtension::class]->ensureToStringAllowed(')",
          "45:                 ->subcompile($expr)",
          "47:             ;",
          "48:         }",
          "49:     }",
          "",
          "[Removed Lines]",
          "46:                 ->raw(\");\\n\")",
          "",
          "[Added Lines]",
          "46:                 ->raw(\", \\$this->source);\\n\")",
          "",
          "---------------"
        ],
        "src/Sandbox/SecurityPolicyInterface.php||src/Sandbox/SecurityPolicyInterface.php": [
          "File: src/Sandbox/SecurityPolicyInterface.php -> src/Sandbox/SecurityPolicyInterface.php"
        ]
      }
    },
    {
      "candidate_hash": "e2103c87ae05bceee9152dc4d303a3a860c6701c",
      "candidate_info": {
        "commit_hash": "e2103c87ae05bceee9152dc4d303a3a860c6701c",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/e2103c87ae05bceee9152dc4d303a3a860c6701c",
        "files": [
          "src/TemplateWrapper.php",
          "src/Test/IntegrationTestCase.php",
          "test/Twig/Tests/ErrorTest.php",
          "test/Twig/Tests/Extension/SandboxTest.php",
          "test/Twig/Tests/Fixtures/functions/block_with_template.test",
          "test/Twig/Tests/Fixtures/functions/include/template_instance.test",
          "test/Twig/Tests/Fixtures/tags/include/template_instance.test",
          "test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test",
          "test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test",
          "test/Twig/Tests/Loader/FilesystemTest.php",
          "test/Twig/Tests/TemplateTest.php",
          "test/Twig/Tests/TemplateWrapperTest.php"
        ],
        "message": "use load() instead of loadTemplate() in tests",
        "before_after_code_files": [
          "src/TemplateWrapper.php||src/TemplateWrapper.php",
          "src/Test/IntegrationTestCase.php||src/Test/IntegrationTestCase.php",
          "test/Twig/Tests/ErrorTest.php||test/Twig/Tests/ErrorTest.php",
          "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php",
          "test/Twig/Tests/Fixtures/functions/block_with_template.test||test/Twig/Tests/Fixtures/functions/block_with_template.test",
          "test/Twig/Tests/Fixtures/functions/include/template_instance.test||test/Twig/Tests/Fixtures/functions/include/template_instance.test",
          "test/Twig/Tests/Fixtures/tags/include/template_instance.test||test/Twig/Tests/Fixtures/tags/include/template_instance.test",
          "test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test||test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test",
          "test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test||test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test",
          "test/Twig/Tests/Loader/FilesystemTest.php||test/Twig/Tests/Loader/FilesystemTest.php",
          "test/Twig/Tests/TemplateTest.php||test/Twig/Tests/TemplateTest.php",
          "test/Twig/Tests/TemplateWrapperTest.php||test/Twig/Tests/TemplateWrapperTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php"
          ],
          "candidate": [
            "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/TemplateWrapper.php||src/TemplateWrapper.php": [
          "File: src/TemplateWrapper.php -> src/TemplateWrapper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     {",
          "60:     }",
          "",
          "[Removed Lines]",
          "59:         $this->template->display($context, \\func_num_args() >= 1 ? func_get_arg(1) : []);",
          "",
          "[Added Lines]",
          "59:         $this->template->display($context, \\func_num_args() > 1 ? func_get_arg(1) : []);",
          "",
          "---------------"
        ],
        "src/Test/IntegrationTestCase.php||src/Test/IntegrationTestCase.php": [
          "File: src/Test/IntegrationTestCase.php -> src/Test/IntegrationTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:             $p->setValue($twig, '__TwigTemplate_'.hash('sha256', uniqid(mt_rand(), true), false).'_');",
          "190:             try {",
          "192:             } catch (\\Exception $e) {",
          "193:                 if (false !== $exception) {",
          "194:                     $message = $e->getMessage();",
          "",
          "[Removed Lines]",
          "191:                 $template = $twig->loadTemplate('index.twig');",
          "",
          "[Added Lines]",
          "191:                 $template = $twig->load('index.twig');",
          "",
          "---------------"
        ],
        "test/Twig/Tests/ErrorTest.php||test/Twig/Tests/ErrorTest.php": [
          "File: test/Twig/Tests/ErrorTest.php -> test/Twig/Tests/ErrorTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         ]);",
          "51:         $twig = new Environment($loader, ['strict_variables' => true, 'debug' => true, 'cache' => false]);",
          "54:         try {",
          "55:             $template->render([]);",
          "",
          "[Removed Lines]",
          "53:         $template = $twig->loadTemplate('index.html');",
          "",
          "[Added Lines]",
          "53:         $template = $twig->load('index.html');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         ]);",
          "79:         $twig = new Environment($loader, ['strict_variables' => true, 'debug' => true, 'cache' => false]);",
          "82:         try {",
          "83:             $template->render(['foo' => new Twig_Tests_ErrorTest_Foo()]);",
          "",
          "[Removed Lines]",
          "81:         $template = $twig->loadTemplate('index.html');",
          "",
          "[Added Lines]",
          "81:         $template = $twig->load('index.html');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         $loader = new FilesystemLoader(__DIR__.'/Fixtures/errors');",
          "96:         $twig = new Environment($loader, ['strict_variables' => true, 'debug' => true, 'cache' => false]);",
          "99:         try {",
          "100:             $template->render([]);",
          "",
          "[Removed Lines]",
          "98:         $template = $twig->loadTemplate('index.html');",
          "",
          "[Added Lines]",
          "98:         $template = $twig->load('index.html');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         $loader = new FilesystemLoader(__DIR__.'/Fixtures/errors');",
          "115:         $twig = new Environment($loader, ['strict_variables' => true, 'debug' => true, 'cache' => false]);",
          "118:         try {",
          "119:             $template->render(['foo' => new Twig_Tests_ErrorTest_Foo()]);",
          "",
          "[Removed Lines]",
          "117:         $template = $twig->loadTemplate('index.html');",
          "",
          "[Added Lines]",
          "117:         $template = $twig->load('index.html');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:         $loader = new ArrayLoader($templates);",
          "137:         $twig = new Environment($loader, ['strict_variables' => true, 'debug' => true, 'cache' => false]);",
          "141:         try {",
          "142:             $template->render([]);",
          "",
          "[Removed Lines]",
          "139:         $template = $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "139:         $template = $twig->load('index');",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php": [
          "File: test/Twig/Tests/Extension/SandboxTest.php -> test/Twig/Tests/Extension/SandboxTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     public function testSandboxWithInheritance()",
          "54:     {",
          "55:         $twig = $this->getEnvironment(true, [], self::$templates, ['block']);",
          "57:     }",
          "59:     public function testSandboxGloballySet()",
          "60:     {",
          "61:         $twig = $this->getEnvironment(false, [], self::$templates);",
          "63:     }",
          "65:     public function testSandboxUnallowedMethodAccessor()",
          "66:     {",
          "67:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "68:         try {",
          "70:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method is called');",
          "71:         } catch (SecurityError $e) {",
          "72:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
          "",
          "[Removed Lines]",
          "56:         $twig->loadTemplate('1_child')->render([]);",
          "62:         $this->assertEquals('FOO', $twig->loadTemplate('1_basic')->render(self::$params), 'Sandbox does nothing if it is disabled globally');",
          "69:             $twig->loadTemplate('1_basic1')->render(self::$params);",
          "",
          "[Added Lines]",
          "56:         $twig->load('1_child')->render([]);",
          "62:         $this->assertEquals('FOO', $twig->load('1_basic')->render(self::$params), 'Sandbox does nothing if it is disabled globally');",
          "69:             $twig->load('1_basic1')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     {",
          "80:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "81:         try {",
          "83:             $this->fail('Sandbox throws a SecurityError exception if an unallowed filter is called');",
          "84:         } catch (SecurityError $e) {",
          "85:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedFilterError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedFilterError');",
          "",
          "[Removed Lines]",
          "82:             $twig->loadTemplate('1_basic2')->render(self::$params);",
          "",
          "[Added Lines]",
          "82:             $twig->load('1_basic2')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     {",
          "92:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "93:         try {",
          "95:             $this->fail('Sandbox throws a SecurityError exception if an unallowed tag is used in the template');",
          "96:         } catch (SecurityError $e) {",
          "97:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedTagError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedTagError');",
          "",
          "[Removed Lines]",
          "94:             $twig->loadTemplate('1_basic3')->render(self::$params);",
          "",
          "[Added Lines]",
          "94:             $twig->load('1_basic3')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     {",
          "104:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "105:         try {",
          "107:             $this->fail('Sandbox throws a SecurityError exception if an unallowed property is called in the template');",
          "108:         } catch (SecurityError $e) {",
          "109:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedPropertyError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedPropertyError');",
          "",
          "[Removed Lines]",
          "106:             $twig->loadTemplate('1_basic4')->render(self::$params);",
          "",
          "[Added Lines]",
          "106:             $twig->load('1_basic4')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:     {",
          "117:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "118:         try {",
          "120:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
          "121:         } catch (SecurityError $e) {",
          "122:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
          "",
          "[Removed Lines]",
          "119:             $twig->loadTemplate('1_basic5')->render(self::$params);",
          "",
          "[Added Lines]",
          "119:             $twig->load('1_basic5')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129:     {",
          "130:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "131:         try {",
          "133:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
          "134:         } catch (SecurityError $e) {",
          "135:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
          "",
          "[Removed Lines]",
          "132:             $twig->loadTemplate('1_basic6')->render(self::$params);",
          "",
          "[Added Lines]",
          "132:             $twig->load('1_basic6')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "142:     {",
          "143:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "144:         try {",
          "146:             $this->fail('Sandbox throws a SecurityError exception if an unallowed function is called in the template');",
          "147:         } catch (SecurityError $e) {",
          "148:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedFunctionError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedFunctionError');",
          "",
          "[Removed Lines]",
          "145:             $twig->loadTemplate('1_basic7')->render(self::$params);",
          "",
          "[Added Lines]",
          "145:             $twig->load('1_basic7')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "154:     {",
          "155:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "156:         try {",
          "158:             $this->fail('Sandbox throws a SecurityError exception if the unallowed range operator is called');",
          "159:         } catch (SecurityError $e) {",
          "160:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedFunctionError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedFunctionError');",
          "",
          "[Removed Lines]",
          "157:             $twig->loadTemplate('1_range_operator')->render(self::$params);",
          "",
          "[Added Lines]",
          "157:             $twig->load('1_range_operator')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "166:     {",
          "167:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => 'foo']);",
          "168:         FooObject::reset();",
          "170:         $this->assertEquals(1, FooObject::$called['foo'], 'Sandbox only calls method once');",
          "171:     }",
          "",
          "[Removed Lines]",
          "169:         $this->assertEquals('foo', $twig->loadTemplate('1_basic1')->render(self::$params), 'Sandbox allow some methods');",
          "",
          "[Added Lines]",
          "169:         $this->assertEquals('foo', $twig->load('1_basic1')->render(self::$params), 'Sandbox allow some methods');",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "174:     {",
          "175:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);",
          "176:         FooObject::reset();",
          "178:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
          "179:     }",
          "",
          "[Removed Lines]",
          "177:         $this->assertEquals('foo', $twig->loadTemplate('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
          "",
          "[Added Lines]",
          "177:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "182:     {",
          "183:         $twig = $this->getEnvironment(false, [], self::$templates);",
          "184:         FooObject::reset();",
          "186:         $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');",
          "187:     }",
          "189:     public function testSandboxAllowFilter()",
          "190:     {",
          "191:         $twig = $this->getEnvironment(true, [], self::$templates, [], ['upper']);",
          "193:     }",
          "195:     public function testSandboxAllowTag()",
          "196:     {",
          "197:         $twig = $this->getEnvironment(true, [], self::$templates, ['if']);",
          "199:     }",
          "201:     public function testSandboxAllowProperty()",
          "202:     {",
          "203:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], [], ['FooObject' => 'bar']);",
          "205:     }",
          "207:     public function testSandboxAllowFunction()",
          "208:     {",
          "209:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], [], [], ['cycle']);",
          "211:     }",
          "213:     public function testSandboxAllowRangeOperator()",
          "214:     {",
          "215:         $twig = $this->getEnvironment(true, [], self::$templates, [], [], [], [], ['range']);",
          "217:     }",
          "219:     public function testSandboxAllowFunctionsCaseInsensitive()",
          "",
          "[Removed Lines]",
          "185:         $this->assertEquals('foo', $twig->loadTemplate('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
          "192:         $this->assertEquals('FABIEN', $twig->loadTemplate('1_basic2')->render(self::$params), 'Sandbox allow some filters');",
          "198:         $this->assertEquals('foo', $twig->loadTemplate('1_basic3')->render(self::$params), 'Sandbox allow some tags');",
          "204:         $this->assertEquals('bar', $twig->loadTemplate('1_basic4')->render(self::$params), 'Sandbox allow some properties');",
          "210:         $this->assertEquals('bar', $twig->loadTemplate('1_basic7')->render(self::$params), 'Sandbox allow some functions');",
          "216:         $this->assertEquals('1', $twig->loadTemplate('1_range_operator')->render(self::$params), 'Sandbox allow the range operator');",
          "",
          "[Added Lines]",
          "185:         $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');",
          "192:         $this->assertEquals('FABIEN', $twig->load('1_basic2')->render(self::$params), 'Sandbox allow some filters');",
          "198:         $this->assertEquals('foo', $twig->load('1_basic3')->render(self::$params), 'Sandbox allow some tags');",
          "204:         $this->assertEquals('bar', $twig->load('1_basic4')->render(self::$params), 'Sandbox allow some properties');",
          "210:         $this->assertEquals('bar', $twig->load('1_basic7')->render(self::$params), 'Sandbox allow some functions');",
          "216:         $this->assertEquals('1', $twig->load('1_range_operator')->render(self::$params), 'Sandbox allow the range operator');",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "221:         foreach (['getfoobar', 'getFoobar', 'getFooBar'] as $name) {",
          "222:             $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => $name]);",
          "223:             FooObject::reset();",
          "225:             $this->assertEquals(2, FooObject::$called['getFooBar'], 'Sandbox only calls method once');",
          "228:         }",
          "229:     }",
          "",
          "[Removed Lines]",
          "224:             $this->assertEquals('foobarfoobar', $twig->loadTemplate('1_basic8')->render(self::$params), 'Sandbox allow methods in a case-insensitive way');",
          "227:             $this->assertEquals('foobarfoobar', $twig->loadTemplate('1_basic9')->render(self::$params), 'Sandbox allow methods via shortcut names (ie. without get/set)');",
          "",
          "[Added Lines]",
          "224:             $this->assertEquals('foobarfoobar', $twig->load('1_basic8')->render(self::$params), 'Sandbox allow methods in a case-insensitive way');",
          "227:             $this->assertEquals('foobarfoobar', $twig->load('1_basic9')->render(self::$params), 'Sandbox allow methods via shortcut names (ie. without get/set)');",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "236:         ];",
          "238:         $twig = $this->getEnvironment(false, [], self::$templates);",
          "241:         self::$templates = [",
          "242:             '3_basic' => '{{ obj.foo }}{% sandbox %}{% include \"3_included\" %}{% endsandbox %}{{ obj.foo }}',",
          "",
          "[Removed Lines]",
          "239:         $this->assertEquals('fooFOOfoo', $twig->loadTemplate('2_basic')->render(self::$params), 'Sandbox does nothing if disabled globally and sandboxed not used for the include');",
          "",
          "[Added Lines]",
          "239:         $this->assertEquals('fooFOOfoo', $twig->load('2_basic')->render(self::$params), 'Sandbox does nothing if disabled globally and sandboxed not used for the include');",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "246:         $twig = $this->getEnvironment(true, [], self::$templates);",
          "247:         try {",
          "249:             $this->fail('Sandbox throws a SecurityError exception when the included file is sandboxed');",
          "250:         } catch (SecurityError $e) {",
          "251:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedTagError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedTagError');",
          "",
          "[Removed Lines]",
          "248:             $twig->loadTemplate('3_basic')->render(self::$params);",
          "",
          "[Added Lines]",
          "248:             $twig->load('3_basic')->render(self::$params);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "264: EOF",
          "265:         ], ['macro', 'import'], ['escape']);",
          "268:     }",
          "270:     public function testSandboxDisabledAfterIncludeFunctionError()",
          "",
          "[Removed Lines]",
          "267:         $this->assertEquals('<p>username</p>', $twig->loadTemplate('index')->render([]));",
          "",
          "[Added Lines]",
          "267:         $this->assertEquals('<p>username</p>', $twig->load('index')->render([]));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "274:         $e = null;",
          "275:         try {",
          "277:         } catch (\\Throwable $e) {",
          "278:         } catch (\\Exception $e) {",
          "279:         }",
          "",
          "[Removed Lines]",
          "276:             $twig->loadTemplate('1_include')->render(self::$params);",
          "",
          "[Added Lines]",
          "276:             $twig->load('1_include')->render(self::$params);",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/functions/block_with_template.test||test/Twig/Tests/Fixtures/functions/block_with_template.test": [
          "File: test/Twig/Tests/Fixtures/functions/block_with_template.test -> test/Twig/Tests/Fixtures/functions/block_with_template.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: --DATA--",
          "13: return [",
          "14:     'included_loaded' => $twig->load('included.twig'),",
          "16: ]",
          "17: --EXPECT--",
          "18: FOO",
          "",
          "[Removed Lines]",
          "15:     'included_loaded_internal' => $twig->loadTemplate('included.twig'),",
          "",
          "[Added Lines]",
          "15:     'included_loaded_internal' => $twig->load('included.twig'),",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/functions/include/template_instance.test||test/Twig/Tests/Fixtures/functions/include/template_instance.test": [
          "File: test/Twig/Tests/Fixtures/functions/include/template_instance.test -> test/Twig/Tests/Fixtures/functions/include/template_instance.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: --TEMPLATE(foo.twig)--",
          "6: BAR",
          "7: --DATA--",
          "9: --EXPECT--",
          "10: BAR FOO",
          "",
          "[Removed Lines]",
          "8: return ['foo' => $twig->loadTemplate('foo.twig')]",
          "",
          "[Added Lines]",
          "8: return ['foo' => $twig->load('foo.twig')]",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/tags/include/template_instance.test||test/Twig/Tests/Fixtures/tags/include/template_instance.test": [
          "File: test/Twig/Tests/Fixtures/tags/include/template_instance.test -> test/Twig/Tests/Fixtures/tags/include/template_instance.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: --TEST--",
          "3: --TEMPLATE--",
          "4: {% include foo %} FOO",
          "5: --TEMPLATE(foo.twig)--",
          "6: BAR",
          "7: --DATA--",
          "9: --EXPECT--",
          "10: BAR FOO",
          "",
          "[Removed Lines]",
          "2: \"include\" tag accepts Twig_Template instance",
          "8: return ['foo' => $twig->loadTemplate('foo.twig')]",
          "",
          "[Added Lines]",
          "2: \"include\" tag accepts \\Twig\\TemplateWrapper instance",
          "8: return ['foo' => $twig->load('foo.twig')]",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test||test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test": [
          "File: test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test -> test/Twig/Tests/Fixtures/tags/inheritance/template_instance.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: --TEMPLATE(foo.twig)--",
          "10: {% block content %}BAR{% endblock %}",
          "11: --DATA--",
          "13: --EXPECT--",
          "14: BARFOO",
          "",
          "[Removed Lines]",
          "12: return ['foo' => $twig->loadTemplate('foo.twig')]",
          "",
          "[Added Lines]",
          "12: return ['foo' => $twig->load('foo.twig')]",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test||test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test": [
          "File: test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test -> test/Twig/Tests/Fixtures/tests/defined_for_blocks_with_template.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: --DATA--",
          "10: return [",
          "11:     'included_loaded' => $twig->load('included.twig'),",
          "13: ]",
          "14: --EXPECT--",
          "15: ok",
          "",
          "[Removed Lines]",
          "12:     'included_loaded_internal' => $twig->loadTemplate('included.twig'),",
          "",
          "[Added Lines]",
          "12:     'included_loaded_internal' => $twig->load('included.twig'),",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Loader/FilesystemTest.php||test/Twig/Tests/Loader/FilesystemTest.php": [
          "File: test/Twig/Tests/Loader/FilesystemTest.php -> test/Twig/Tests/Loader/FilesystemTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:         $twig = new Environment($loader);",
          "186:         $this->assertSame('block from theme 1', $template->renderBlock('b1', []));",
          "189:         $this->assertSame('block from theme 2', $template->renderBlock('b2', []));",
          "190:     }",
          "",
          "[Removed Lines]",
          "185:         $template = $twig->loadTemplate('blocks.html.twig');",
          "188:         $template = $twig->loadTemplate('blocks.html.twig');",
          "",
          "[Added Lines]",
          "185:         $template = $twig->load('blocks.html.twig');",
          "188:         $template = $twig->load('blocks.html.twig');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:         $twig = new Environment($loader);",
          "215:         $this->assertSame('VALID Child', $template->renderBlock('body', []));",
          "216:     }",
          "",
          "[Removed Lines]",
          "214:         $template = $twig->loadTemplate($templateName);",
          "",
          "[Added Lines]",
          "214:         $template = $twig->load($templateName);",
          "",
          "---------------"
        ],
        "test/Twig/Tests/TemplateTest.php||test/Twig/Tests/TemplateTest.php": [
          "File: test/Twig/Tests/TemplateTest.php -> test/Twig/Tests/TemplateTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     {",
          "40:         $templates = ['index' => $template];",
          "41:         $env = new Environment(new ArrayLoader($templates), ['strict_variables' => true]);",
          "44:         $context = [",
          "45:             'string' => 'foo',",
          "",
          "[Removed Lines]",
          "42:         $template = $env->loadTemplate('index');",
          "",
          "[Added Lines]",
          "42:         $template = $env->load('index');",
          "",
          "---------------"
        ],
        "test/Twig/Tests/TemplateWrapperTest.php||test/Twig/Tests/TemplateWrapperTest.php": [
          "File: test/Twig/Tests/TemplateWrapperTest.php -> test/Twig/Tests/TemplateWrapperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:             'extended' => '{% block extended %}{% endblock %}',",
          "26:         ]));",
          "29:         $this->assertTrue($wrapper->hasBlock('foo'));",
          "30:         $this->assertFalse($wrapper->hasBlock('bar'));",
          "31:         $this->assertEquals(['foo'], $wrapper->getBlockNames());",
          "34:         $this->assertTrue($wrapper->hasBlock('foo'));",
          "35:         $this->assertTrue($wrapper->hasBlock('imported'));",
          "36:         $this->assertEquals(['imported', 'foo'], $wrapper->getBlockNames());",
          "39:         $this->assertTrue($wrapper->hasBlock('foo'));",
          "40:         $this->assertTrue($wrapper->hasBlock('extended'));",
          "41:         $this->assertEquals(['foo', 'extended'], $wrapper->getBlockNames());",
          "",
          "[Removed Lines]",
          "28:         $wrapper = new TemplateWrapper($twig, $twig->loadTemplate('index'));",
          "33:         $wrapper = new TemplateWrapper($twig, $twig->loadTemplate('index_with_use'));",
          "38:         $wrapper = new TemplateWrapper($twig, $twig->loadTemplate('index_with_extends'));",
          "",
          "[Added Lines]",
          "28:         $wrapper = $twig->load('index');",
          "33:         $wrapper = $twig->load('index_with_use');",
          "38:         $wrapper = $twig->load('index_with_extends');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         ]));",
          "49:         $twig->addGlobal('bar', 'BAR');",
          "52:         $this->assertEquals('FOOBAR', $wrapper->renderBlock('foo', ['foo' => 'FOO']));",
          "53:     }",
          "",
          "[Removed Lines]",
          "51:         $wrapper = new TemplateWrapper($twig, $twig->loadTemplate('index'));",
          "",
          "[Added Lines]",
          "51:         $wrapper = $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         ]));",
          "60:         $twig->addGlobal('bar', 'BAR');",
          "64:         ob_start();",
          "65:         $wrapper->displayBlock('foo', ['foo' => 'FOO']);",
          "",
          "[Removed Lines]",
          "62:         $wrapper = new TemplateWrapper($twig, $twig->loadTemplate('index'));",
          "",
          "[Added Lines]",
          "62:         $wrapper = $twig->load('index');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96e2432d1f8ccfdb57cbeeabe22feb1b680a98de",
      "candidate_info": {
        "commit_hash": "96e2432d1f8ccfdb57cbeeabe22feb1b680a98de",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/96e2432d1f8ccfdb57cbeeabe22feb1b680a98de",
        "files": [
          "src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php"
        ],
        "message": "added template line number to sandbox security check calls",
        "before_after_code_files": [
          "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php",
          "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php",
          "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
          "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ],
          "candidate": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
            "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Extension/CoreExtension.php||src/Extension/CoreExtension.php": [
          "File: src/Extension/CoreExtension.php -> src/Extension/CoreExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1602:             }",
          "1604:             if ($sandboxed) {",
          "1606:             }",
          "1608:             return $object->$item;",
          "",
          "[Removed Lines]",
          "1605:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $source);",
          "",
          "[Added Lines]",
          "1605:                 $env->getExtension(SandboxExtension::class)->checkPropertyAllowed($object, $item, $lineno, $source);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1679:     }",
          "1681:     if ($sandboxed) {",
          "1683:     }",
          "",
          "[Removed Lines]",
          "1682:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $source);",
          "",
          "[Added Lines]",
          "1682:         $env->getExtension(SandboxExtension::class)->checkMethodAllowed($object, $method, $lineno, $source);",
          "",
          "---------------"
        ],
        "src/Extension/SandboxExtension.php||src/Extension/SandboxExtension.php": [
          "File: src/Extension/SandboxExtension.php -> src/Extension/SandboxExtension.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         }",
          "78:     }",
          "81:     {",
          "82:         if ($this->isSandboxed()) {",
          "83:             try {",
          "84:                 $this->policy->checkMethodAllowed($obj, $method);",
          "85:             } catch (SecurityNotAllowedMethodError $e) {",
          "86:                 $e->setSourceContext($source);",
          "88:                 throw $e;",
          "89:             }",
          "90:         }",
          "91:     }",
          "94:     {",
          "95:         if ($this->isSandboxed()) {",
          "96:             try {",
          "97:                 $this->policy->checkPropertyAllowed($obj, $method);",
          "98:             } catch (SecurityNotAllowedPropertyError $e) {",
          "99:                 $e->setSourceContext($source);",
          "101:                 throw $e;",
          "102:             }",
          "103:         }",
          "104:     }",
          "107:     {",
          "108:         if ($this->isSandboxed() && \\is_object($obj) && method_exists($obj, '__toString')) {",
          "109:             try {",
          "110:                 $this->policy->checkMethodAllowed($obj, '__toString');",
          "111:             } catch (SecurityNotAllowedMethodError $e) {",
          "112:                 $e->setSourceContext($source);",
          "114:                 throw $e;",
          "115:             }",
          "",
          "[Removed Lines]",
          "80:     public function checkMethodAllowed($obj, $method, Source $source = null)",
          "93:     public function checkPropertyAllowed($obj, $method, Source $source = null)",
          "106:     public function ensureToStringAllowed($obj, Source $source = null)",
          "",
          "[Added Lines]",
          "80:     public function checkMethodAllowed($obj, $method, int $lineno = -1, Source $source = null)",
          "87:                 $e->setTemplateLine($lineno);",
          "94:     public function checkPropertyAllowed($obj, $method, int $lineno = -1, Source $source = null)",
          "101:                 $e->setTemplateLine($lineno);",
          "108:     public function ensureToStringAllowed($obj, int $lineno = -1, Source $source = null)",
          "115:                 $e->setTemplateLine($lineno);",
          "",
          "---------------"
        ],
        "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
          "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     public function compile(Compiler $compiler)",
          "35:     {",
          "36:         $compiler",
          "37:             ->raw('$this->sandbox->ensureToStringAllowed(')",
          "39:             ->raw(', $this->source)')",
          "40:         ;",
          "41:     }",
          "",
          "[Removed Lines]",
          "38:             ->subcompile($this->getNode('expr'))",
          "",
          "[Added Lines]",
          "36:         $expr = $this->getNode('expr');",
          "39:             ->subcompile($expr)",
          "40:             ->raw(', ')",
          "41:             ->repr($expr->getTemplateLine())",
          "",
          "---------------"
        ],
        "src/Node/SandboxedPrintNode.php||src/Node/SandboxedPrintNode.php": [
          "File: src/Node/SandboxedPrintNode.php -> src/Node/SandboxedPrintNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             $compiler",
          "44:                 ->write('$this->extensions[SandboxExtension::class]->ensureToStringAllowed(')",
          "45:                 ->subcompile($expr)",
          "46:                 ->raw(\", \\$this->source);\\n\")",
          "47:             ;",
          "48:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:                 ->raw(', ')",
          "47:                 ->repr($expr->getTemplateLine())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "931a8b5cdf99dbe222ca1491e8ce96e674d35882",
      "candidate_info": {
        "commit_hash": "931a8b5cdf99dbe222ca1491e8ce96e674d35882",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/931a8b5cdf99dbe222ca1491e8ce96e674d35882",
        "files": [
          "test/Twig/Tests/EnvironmentTest.php",
          "test/Twig/Tests/Extension/SandboxTest.php",
          "test/Twig/Tests/FileCachingTest.php"
        ],
        "message": "removed some usage of loadTemplate in tests",
        "before_after_code_files": [
          "test/Twig/Tests/EnvironmentTest.php||test/Twig/Tests/EnvironmentTest.php",
          "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php",
          "test/Twig/Tests/FileCachingTest.php||test/Twig/Tests/FileCachingTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php"
          ],
          "candidate": [
            "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php"
          ]
        }
      },
      "candidate_diff": {
        "test/Twig/Tests/EnvironmentTest.php||test/Twig/Tests/EnvironmentTest.php": [
          "File: test/Twig/Tests/EnvironmentTest.php -> test/Twig/Tests/EnvironmentTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         $twig = new Environment($loader);",
          "106:         $twig->addGlobal('foo', 'foo');",
          "107:         $twig->getGlobals();",
          "109:         $twig->addGlobal('foo', 'bar');",
          "110:         $globals = $twig->getGlobals();",
          "111:         $this->assertEquals('bar', $globals['foo']);",
          "",
          "[Removed Lines]",
          "108:         $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "108:         $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         $twig->addGlobal('foo', 'foo');",
          "126:         $twig->getGlobals();",
          "127:         $twig->getFunctions();",
          "129:         $twig->addGlobal('foo', 'bar');",
          "130:         $globals = $twig->getGlobals();",
          "131:         $this->assertEquals('bar', $globals['foo']);",
          "",
          "[Removed Lines]",
          "128:         $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "128:         $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:         $twig = new Environment($arrayLoader);",
          "134:         $twig->getGlobals();",
          "135:         $twig->addGlobal('foo', 'bar');",
          "137:         $this->assertEquals('bar', $template->render([]));",
          "",
          "[Removed Lines]",
          "136:         $template = $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "136:         $template = $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:         $twig = new Environment($loader);",
          "142:         $twig->addGlobal('foo', 'foo');",
          "143:         $twig->getGlobals();",
          "145:         try {",
          "146:             $twig->addGlobal('bar', 'bar');",
          "147:             $this->fail();",
          "",
          "[Removed Lines]",
          "144:         $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "144:         $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:         $twig->addGlobal('foo', 'foo');",
          "167:         $twig->getGlobals();",
          "168:         $twig->getFunctions();",
          "170:         try {",
          "171:             $twig->addGlobal('bar', 'bar');",
          "172:             $this->fail();",
          "",
          "[Removed Lines]",
          "169:         $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "169:         $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:         $twig = new Environment($loader);",
          "180:         try {",
          "181:             $twig->addGlobal('bar', 'bar');",
          "182:             $this->fail();",
          "",
          "[Removed Lines]",
          "179:         $twig->loadTemplate('index');",
          "",
          "[Added Lines]",
          "179:         $twig->load('index');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "238:         $cache->expects($this->once())",
          "239:             ->method('load');",
          "242:     }",
          "244:     public function testAutoReloadCacheHit()",
          "",
          "[Removed Lines]",
          "241:         $twig->loadTemplate($templateName);",
          "",
          "[Added Lines]",
          "241:         $twig->load($templateName);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "266:         $cache->expects($this->atLeastOnce())",
          "267:             ->method('load');",
          "270:     }",
          "272:     public function testAutoReloadOutdatedCacheHit()",
          "",
          "[Removed Lines]",
          "269:         $twig->loadTemplate($templateName);",
          "",
          "[Added Lines]",
          "269:         $twig->load($templateName);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "294:         $cache->expects($this->once())",
          "295:             ->method('load');",
          "298:     }",
          "",
          "[Removed Lines]",
          "297:         $twig->loadTemplate($templateName);",
          "",
          "[Added Lines]",
          "297:         $twig->load($templateName);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "508:             'base.html.twig' => '{% extends \"base.html.twig\" %}',",
          "509:         ]));",
          "512:     }",
          "",
          "[Removed Lines]",
          "511:         $twig->loadTemplate('base.html.twig');",
          "",
          "[Added Lines]",
          "511:         $twig->load('base.html.twig');",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "522:             'base2.html.twig' => '{% extends \"base1.html.twig\" %}',",
          "523:         ]));",
          "526:     }",
          "528:     protected function getMockLoader($templateName, $templateContent)",
          "",
          "[Removed Lines]",
          "525:         $twig->loadTemplate('base1.html.twig');",
          "",
          "[Added Lines]",
          "525:         $twig->load('base1.html.twig');",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Extension/SandboxTest.php||test/Twig/Tests/Extension/SandboxTest.php": [
          "File: test/Twig/Tests/Extension/SandboxTest.php -> test/Twig/Tests/Extension/SandboxTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     {",
          "119:         $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper'], ['FooObject' => 'getAnotherFooObject'], [], ['random']);",
          "120:         try {",
          "122:             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');",
          "123:         } catch (SecurityError $e) {",
          "124:             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');",
          "",
          "[Removed Lines]",
          "121:             $twig->loadTemplate('index')->render(self::$params);",
          "",
          "[Added Lines]",
          "121:             $twig->load('index')->render(self::$params);",
          "",
          "---------------"
        ],
        "test/Twig/Tests/FileCachingTest.php||test/Twig/Tests/FileCachingTest.php": [
          "File: test/Twig/Tests/FileCachingTest.php -> test/Twig/Tests/FileCachingTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     public function testWritingCacheFiles()",
          "45:     {",
          "46:         $name = 'index';",
          "48:         $cacheFileName = $this->env->getCacheFilename($name);",
          "50:         $this->assertFileExists($cacheFileName, 'Cache file does not exist.');",
          "",
          "[Removed Lines]",
          "47:         $this->env->loadTemplate($name);",
          "",
          "[Added Lines]",
          "47:         $this->env->load($name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     public function testClearingCacheFiles()",
          "57:     {",
          "58:         $name = 'index2';",
          "60:         $cacheFileName = $this->env->getCacheFilename($name);",
          "62:         $this->assertFileExists($cacheFileName, 'Cache file does not exist.');",
          "",
          "[Removed Lines]",
          "59:         $this->env->loadTemplate($name);",
          "",
          "[Added Lines]",
          "59:         $this->env->load($name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e24f796b83fed1b223d7452a56b0bda28f671c29",
      "candidate_info": {
        "commit_hash": "e24f796b83fed1b223d7452a56b0bda28f671c29",
        "repo": "twigphp/Twig",
        "commit_url": "https://github.com/twigphp/Twig/commit/e24f796b83fed1b223d7452a56b0bda28f671c29",
        "files": [
          "CHANGELOG",
          "src/Node/CheckToStringNode.php",
          "test/Twig/Tests/Fixtures/tags/sandbox/array.test",
          "test/Twig/Tests/IntegrationTest.php"
        ],
        "message": "fixed CheckToStringNode implementation",
        "before_after_code_files": [
          "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php",
          "test/Twig/Tests/Fixtures/tags/sandbox/array.test||test/Twig/Tests/Fixtures/tags/sandbox/array.test",
          "test/Twig/Tests/IntegrationTest.php||test/Twig/Tests/IntegrationTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php"
          ],
          "candidate": [
            "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Node/CheckToStringNode.php||src/Node/CheckToStringNode.php": [
          "File: src/Node/CheckToStringNode.php -> src/Node/CheckToStringNode.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: {",
          "29:     public function __construct(AbstractExpression $expr)",
          "30:     {",
          "",
          "[Removed Lines]",
          "27: class CheckToStringNode extends Node",
          "",
          "[Added Lines]",
          "27: class CheckToStringNode extends AbstractExpression",
          "",
          "---------------"
        ],
        "test/Twig/Tests/Fixtures/tags/sandbox/array.test||test/Twig/Tests/Fixtures/tags/sandbox/array.test": [
          "File: test/Twig/Tests/Fixtures/tags/sandbox/array.test -> test/Twig/Tests/Fixtures/tags/sandbox/array.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: sandbox tag",
          "3: --TEMPLATE--",
          "4: {%- sandbox %}",
          "5:     {%- include \"foo.twig\" %}",
          "6: {%- endsandbox %}",
          "7: --TEMPLATE(foo.twig)--",
          "8: {{ [a][0] }}",
          "9: {{ dump([a][0]) }}",
          "10: --DATA--",
          "11: return ['a' => 'b']",
          "12: --CONFIG--",
          "13: return ['autoescape' => false, 'debug' => true]",
          "14: --EXPECT--",
          "15: b",
          "16: string(1) \"b\"",
          "",
          "---------------"
        ],
        "test/Twig/Tests/IntegrationTest.php||test/Twig/Tests/IntegrationTest.php": [
          "File: test/Twig/Tests/IntegrationTest.php -> test/Twig/Tests/IntegrationTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: {",
          "35:     public function getExtensions()",
          "36:     {",
          "39:         return [",
          "40:             new DebugExtension(),",
          "",
          "[Removed Lines]",
          "37:         $policy = new SecurityPolicy([], [], [], [], []);",
          "",
          "[Added Lines]",
          "37:         $policy = new SecurityPolicy([], [], [], [], ['dump']);",
          "",
          "---------------"
        ]
      }
    }
  ]
}