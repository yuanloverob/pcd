{
  "cve_id": "CVE-2022-46166",
  "cve_desc": "Spring boot admins is an open source administrative user interface for management of spring boot applications. All users who run Spring Boot Admin Server, having enabled Notifiers (e.g. Teams-Notifier) and write access to environment variables via UI are affected. Users are advised to upgrade to the most recent releases of Spring Boot Admin 2.6.10 and 2.7.8 to resolve this issue. Users unable to upgrade may disable any notifier or disable write access (POST request) on `/env` actuator endpoint.\n\n",
  "repo": "codecentric/spring-boot-admin",
  "patch_hash": "c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
  "patch_info": {
    "commit_hash": "c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
    "repo": "codecentric/spring-boot-admin",
    "commit_url": "https://github.com/codecentric/spring-boot-admin/commit/c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
    "files": [
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
    ],
    "message": "feat: improve notifiers",
    "before_after_code_files": [
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
      "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
    ]
  },
  "patch_diff": {
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package de.codecentric.boot.admin.server.notify;",
      "19: import java.net.URLEncoder;",
      "20: import java.util.HashMap;",
      "21: import java.util.Map;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import java.nio.charset.StandardCharsets;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "29: import org.springframework.expression.Expression;",
      "30: import org.springframework.expression.ParserContext;",
      "31: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "33: import org.springframework.http.HttpEntity;",
      "34: import org.springframework.http.HttpHeaders;",
      "35: import org.springframework.http.MediaType;",
      "",
      "[Removed Lines]",
      "32: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "33: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "34: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "101:   root.put(\"event\", event);",
      "102:   root.put(\"instance\", instance);",
      "103:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "106:   return message.getValue(context, String.class);",
      "107:  }",
      "",
      "[Removed Lines]",
      "104:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "105:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "106:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "107:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "108:     .withRootObject(root).build();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "110:   try {",
      "111:    String stringToSign = timestamp + \"\\n\" + secret;",
      "112:    Mac mac = Mac.getInstance(\"HmacSHA256\");",
      "115:    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), \"UTF-8\");",
      "116:   }",
      "117:   catch (Exception ex) {",
      "",
      "[Removed Lines]",
      "113:    mac.init(new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"HmacSHA256\"));",
      "114:    byte[] signData = mac.doFinal(stringToSign.getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "116:    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\"));",
      "117:    byte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import org.springframework.expression.Expression;",
      "27: import org.springframework.expression.ParserContext;",
      "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "30: import org.springframework.http.HttpEntity;",
      "31: import org.springframework.http.HttpHeaders;",
      "32: import org.springframework.http.MediaType;",
      "",
      "[Removed Lines]",
      "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:   root.put(\"event\", event);",
      "118:   root.put(\"instance\", instance);",
      "119:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "122:   return message.getValue(context, String.class);",
      "123:  }",
      "",
      "[Removed Lines]",
      "120:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "121:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "121:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "122:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "123:     .withRootObject(root).build();",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import org.springframework.expression.Expression;",
      "27: import org.springframework.expression.ParserContext;",
      "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "30: import org.springframework.http.HttpEntity;",
      "31: import org.springframework.http.HttpHeaders;",
      "32: import org.springframework.http.MediaType;",
      "",
      "[Removed Lines]",
      "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:   if (url == null) {",
      "97:    throw new IllegalStateException(\"'url' must not be null.\");",
      "98:   }",
      "100:  }",
      "102:  protected HttpEntity<Map<String, Object>> createHipChatNotification(InstanceEvent event, Instance instance) {",
      "",
      "[Removed Lines]",
      "99:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url.toString(), roomId, authToken);",
      "",
      "[Added Lines]",
      "100:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url, roomId, authToken);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:   root.put(\"event\", event);",
      "122:   root.put(\"instance\", instance);",
      "123:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "126:   return description.getValue(context, String.class);",
      "127:  }",
      "",
      "[Removed Lines]",
      "124:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "125:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "125:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "126:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "127:     .withRootObject(root).build();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "136:   }",
      "137:  }",
      "143:  @Nullable",
      "144:  public URI getUrl() {",
      "145:   return url;",
      "146:  }",
      "150:  }",
      "152:  @Nullable",
      "",
      "[Removed Lines]",
      "139:  public void setUrl(@Nullable URI url) {",
      "140:   this.url = url;",
      "141:  }",
      "148:  public void setAuthToken(@Nullable String authToken) {",
      "149:   this.authToken = authToken;",
      "",
      "[Added Lines]",
      "146:  public void setUrl(@Nullable URI url) {",
      "147:   this.url = url;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "154:   return authToken;",
      "155:  }",
      "159:  }",
      "161:  @Nullable",
      "",
      "[Removed Lines]",
      "157:  public void setRoomId(@Nullable String roomId) {",
      "158:   this.roomId = roomId;",
      "",
      "[Added Lines]",
      "155:  public void setAuthToken(@Nullable String authToken) {",
      "156:   this.authToken = authToken;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "163:   return roomId;",
      "164:  }",
      "168:  }",
      "170:  public boolean isNotify() {",
      "171:   return notify;",
      "172:  }",
      "176:  }",
      "178:  public String getDescription() {",
      "179:   return description.getExpressionString();",
      "180:  }",
      "182:  public void setRestTemplate(RestTemplate restTemplate) {",
      "183:   this.restTemplate = restTemplate;",
      "184:  }",
      "",
      "[Removed Lines]",
      "166:  public void setNotify(boolean notify) {",
      "167:   this.notify = notify;",
      "174:  public void setDescription(String description) {",
      "175:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
      "",
      "[Added Lines]",
      "164:  public void setRoomId(@Nullable String roomId) {",
      "165:   this.roomId = roomId;",
      "172:  public void setNotify(boolean notify) {",
      "173:   this.notify = notify;",
      "180:  public void setDescription(String description) {",
      "181:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
      "182:  }",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import org.springframework.expression.Expression;",
      "28: import org.springframework.expression.ParserContext;",
      "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "31: import org.springframework.http.HttpEntity;",
      "32: import org.springframework.http.HttpHeaders;",
      "33: import org.springframework.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:   root.put(\"event\", event);",
      "120:   root.put(\"instance\", instance);",
      "121:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "124:   return message.getValue(context, String.class);",
      "125:  }",
      "",
      "[Removed Lines]",
      "122:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "123:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "123:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "124:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "125:     .withRootObject(root).build();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:   this.restTemplate = restTemplate;",
      "129:  }",
      "135:  @Nullable",
      "136:  public URI getUrl() {",
      "137:   return url;",
      "138:  }",
      "142:  }",
      "144:  public String getUsername() {",
      "145:   return username;",
      "146:  }",
      "150:  }",
      "152:  @Nullable",
      "",
      "[Removed Lines]",
      "131:  public void setUrl(@Nullable URI url) {",
      "132:   this.url = url;",
      "133:  }",
      "140:  public void setUsername(String username) {",
      "141:   this.username = username;",
      "148:  public void setRoom(@Nullable String room) {",
      "149:   this.room = room;",
      "",
      "[Added Lines]",
      "138:  public void setUrl(@Nullable URI url) {",
      "139:   this.url = url;",
      "146:  public void setUsername(String username) {",
      "147:   this.username = username;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "154:   return room;",
      "155:  }",
      "159:  }",
      "161:  @Nullable",
      "",
      "[Removed Lines]",
      "157:  public void setToken(@Nullable String token) {",
      "158:   this.token = token;",
      "",
      "[Added Lines]",
      "155:  public void setRoom(@Nullable String room) {",
      "156:   this.room = room;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:   return token;",
      "164:  }",
      "168:  }",
      "170:  public String getMessage() {",
      "171:   return message.getExpressionString();",
      "172:  }",
      "174: }",
      "",
      "[Removed Lines]",
      "166:  public void setMessage(String message) {",
      "167:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
      "",
      "[Added Lines]",
      "164:  public void setToken(@Nullable String token) {",
      "165:   this.token = token;",
      "172:  public void setMessage(String message) {",
      "173:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
      "174:  }",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import org.slf4j.Logger;",
      "31: import org.slf4j.LoggerFactory;",
      "32: import org.springframework.context.expression.MapAccessor;",
      "33: import org.springframework.expression.Expression;",
      "34: import org.springframework.expression.ParserContext;",
      "35: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "37: import org.springframework.http.HttpEntity;",
      "38: import org.springframework.http.HttpHeaders;",
      "39: import org.springframework.http.MediaType;",
      "",
      "[Removed Lines]",
      "36: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "33: import org.springframework.expression.EvaluationContext;",
      "37: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "38: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:  @Override",
      "142:  protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {",
      "143:   Message message;",
      "145:   if (event instanceof InstanceRegisteredEvent) {",
      "146:    message = getRegisteredMessage(instance, context);",
      "147:   }",
      "",
      "[Removed Lines]",
      "144:   StandardEvaluationContext context = createEvaluationContext(event, instance);",
      "",
      "[Added Lines]",
      "146:   EvaluationContext context = createEvaluationContext(event, instance);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "172:     || super.shouldNotify(event, instance);",
      "173:  }",
      "176:   String activitySubtitle = evaluateExpression(context, deregisterActivitySubtitle);",
      "177:   return createMessage(instance, deRegisteredTitle, activitySubtitle, context);",
      "178:  }",
      "181:   String activitySubtitle = evaluateExpression(context, registerActivitySubtitle);",
      "182:   return createMessage(instance, registeredTitle, activitySubtitle, context);",
      "183:  }",
      "186:   String activitySubtitle = evaluateExpression(context, statusActivitySubtitle);",
      "187:   return createMessage(instance, statusChangedTitle, activitySubtitle, context);",
      "188:  }",
      "190:  protected Message createMessage(Instance instance, String registeredTitle, String activitySubtitle,",
      "192:   List<Fact> facts = new ArrayList<>();",
      "193:   facts.add(new Fact(STATUS_KEY, instance.getStatusInfo().getStatus()));",
      "194:   facts.add(new Fact(SERVICE_URL_KEY, instance.getRegistration().getServiceUrl()));",
      "",
      "[Removed Lines]",
      "175:  protected Message getDeregisteredMessage(Instance instance, StandardEvaluationContext context) {",
      "180:  protected Message getRegisteredMessage(Instance instance, StandardEvaluationContext context) {",
      "185:  protected Message getStatusChangedMessage(Instance instance, StandardEvaluationContext context) {",
      "191:    StandardEvaluationContext context) {",
      "",
      "[Added Lines]",
      "177:  protected Message getDeregisteredMessage(Instance instance, EvaluationContext context) {",
      "182:  protected Message getRegisteredMessage(Instance instance, EvaluationContext context) {",
      "187:  protected Message getStatusChangedMessage(Instance instance, EvaluationContext context) {",
      "193:    EvaluationContext context) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "203:     .themeColor(evaluateExpression(context, themeColor)).sections(singletonList(section)).build();",
      "204:  }",
      "207:   return Objects.requireNonNull(expression.getValue(context, String.class));",
      "208:  }",
      "211:   Map<String, Object> root = new HashMap<>();",
      "212:   root.put(\"event\", event);",
      "213:   root.put(\"instance\", instance);",
      "214:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "218:  }",
      "220:  @Nullable",
      "",
      "[Removed Lines]",
      "206:  protected String evaluateExpression(StandardEvaluationContext context, Expression expression) {",
      "210:  protected StandardEvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
      "215:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "216:   context.addPropertyAccessor(new MapAccessor());",
      "217:   return context;",
      "",
      "[Added Lines]",
      "208:  protected String evaluateExpression(EvaluationContext context, Expression expression) {",
      "212:  protected EvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
      "217:   return SimpleEvaluationContext",
      "218:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "219:     .withRootObject(root).build();",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import org.springframework.expression.Expression;",
      "27: import org.springframework.expression.ParserContext;",
      "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "30: import org.springframework.http.HttpEntity;",
      "31: import org.springframework.http.HttpHeaders;",
      "32: import org.springframework.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:  protected String buildUrl(InstanceEvent event, Instance instance) {",
      "119:   if ((event instanceof InstanceStatusChangedEvent)",
      "120:     && (StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()))) {",
      "122:   }",
      "123:   return url.toString();",
      "124:  }",
      "",
      "[Removed Lines]",
      "121:    return String.format(\"%s/%s/close\", url.toString(), generateAlias(instance));",
      "",
      "[Added Lines]",
      "122:    return String.format(\"%s/%s/close\", url, generateAlias(instance));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "172:   root.put(\"event\", event);",
      "173:   root.put(\"instance\", instance);",
      "174:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "177:   return description.getValue(context, String.class);",
      "178:  }",
      "",
      "[Removed Lines]",
      "175:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "176:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "176:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "177:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "178:     .withRootObject(root).build();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "183:     ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());",
      "184:  }",
      "190:  @Nullable",
      "191:  public String getApiKey() {",
      "192:   return apiKey;",
      "193:  }",
      "195:  public void setDescription(String description) {",
      "196:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
      "197:  }",
      "",
      "[Removed Lines]",
      "186:  public void setApiKey(@Nullable String apiKey) {",
      "187:   this.apiKey = apiKey;",
      "188:  }",
      "",
      "[Added Lines]",
      "193:  public void setApiKey(@Nullable String apiKey) {",
      "194:   this.apiKey = apiKey;",
      "195:  }",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import org.springframework.expression.Expression;",
      "27: import org.springframework.expression.ParserContext;",
      "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "30: import org.springframework.web.client.RestTemplate;",
      "31: import reactor.core.publisher.Mono;",
      "",
      "[Removed Lines]",
      "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "132:   root.put(\"event\", event);",
      "133:   root.put(\"instance\", instance);",
      "134:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "138:   return description.getValue(context, String.class);",
      "139:  }",
      "",
      "[Removed Lines]",
      "135:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "136:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "136:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "137:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "138:     .withRootObject(root).build();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "147:   return details;",
      "148:  }",
      "154:  public URI getUrl() {",
      "155:   return url;",
      "156:  }",
      "160:  }",
      "162:  @Nullable",
      "",
      "[Removed Lines]",
      "150:  public void setUrl(URI url) {",
      "151:   this.url = url;",
      "152:  }",
      "158:  public void setClient(@Nullable String client) {",
      "159:   this.client = client;",
      "",
      "[Added Lines]",
      "155:  public void setUrl(URI url) {",
      "156:   this.url = url;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "164:   return client;",
      "165:  }",
      "169:  }",
      "171:  @Nullable",
      "",
      "[Removed Lines]",
      "167:  public void setClientUrl(@Nullable URI clientUrl) {",
      "168:   this.clientUrl = clientUrl;",
      "",
      "[Added Lines]",
      "164:  public void setClient(@Nullable String client) {",
      "165:   this.client = client;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "173:   return clientUrl;",
      "174:  }",
      "178:  }",
      "180:  @Nullable",
      "",
      "[Removed Lines]",
      "176:  public void setServiceKey(@Nullable String serviceKey) {",
      "177:   this.serviceKey = serviceKey;",
      "",
      "[Added Lines]",
      "173:  public void setClientUrl(@Nullable URI clientUrl) {",
      "174:   this.clientUrl = clientUrl;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "182:   return serviceKey;",
      "183:  }",
      "187:  }",
      "189:  public String getDescription() {",
      "190:   return description.getExpressionString();",
      "191:  }",
      "193:  public void setRestTemplate(RestTemplate restTemplate) {",
      "194:   this.restTemplate = restTemplate;",
      "195:  }",
      "",
      "[Removed Lines]",
      "185:  public void setDescription(String description) {",
      "186:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
      "",
      "[Added Lines]",
      "182:  public void setServiceKey(@Nullable String serviceKey) {",
      "183:   this.serviceKey = serviceKey;",
      "190:  public void setDescription(String description) {",
      "191:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
      "192:  }",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import org.springframework.expression.Expression;",
      "28: import org.springframework.expression.ParserContext;",
      "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "31: import org.springframework.http.HttpEntity;",
      "32: import org.springframework.http.HttpHeaders;",
      "33: import org.springframework.http.MediaType;",
      "",
      "[Removed Lines]",
      "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:   root.put(\"event\", event);",
      "129:   root.put(\"instance\", instance);",
      "130:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "133:   return message.getValue(context, String.class);",
      "134:  }",
      "",
      "[Removed Lines]",
      "131:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "132:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "132:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "133:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "134:     .withRootObject(root).build();",
      "",
      "---------------"
    ],
    "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java": [
      "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import org.springframework.expression.Expression;",
      "26: import org.springframework.expression.ParserContext;",
      "27: import org.springframework.expression.spel.standard.SpelExpressionParser;",
      "29: import org.springframework.web.client.RestTemplate;",
      "30: import reactor.core.publisher.Mono;",
      "",
      "[Removed Lines]",
      "28: import org.springframework.expression.spel.support.StandardEvaluationContext;",
      "",
      "[Added Lines]",
      "28: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
      "29: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:   root.put(\"event\", event);",
      "108:   root.put(\"instance\", instance);",
      "109:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
      "112:   return message.getValue(context, String.class);",
      "113:  }",
      "",
      "[Removed Lines]",
      "110:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
      "111:   context.addPropertyAccessor(new MapAccessor());",
      "",
      "[Added Lines]",
      "111:   SimpleEvaluationContext context = SimpleEvaluationContext",
      "112:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
      "113:     .withRootObject(root).build();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "224d1486aa07035b0e0a014f3991315f737e881a",
      "candidate_info": {
        "commit_hash": "224d1486aa07035b0e0a014f3991315f737e881a",
        "repo": "codecentric/spring-boot-admin",
        "commit_url": "https://github.com/codecentric/spring-boot-admin/commit/224d1486aa07035b0e0a014f3991315f737e881a",
        "files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ],
        "message": "feat: improve notifiers",
        "before_after_code_files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ],
          "candidate": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package de.codecentric.boot.admin.server.notify;",
          "19: import java.net.URLEncoder;",
          "20: import java.util.HashMap;",
          "21: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.springframework.expression.Expression;",
          "30: import org.springframework.expression.ParserContext;",
          "31: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "33: import org.springframework.http.HttpEntity;",
          "34: import org.springframework.http.HttpHeaders;",
          "35: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "32: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "33: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "34: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   root.put(\"event\", event);",
          "102:   root.put(\"instance\", instance);",
          "103:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "106:   return message.getValue(context, String.class);",
          "107:  }",
          "",
          "[Removed Lines]",
          "104:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "105:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "106:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "107:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "108:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   try {",
          "111:    String stringToSign = timestamp + \"\\n\" + secret;",
          "112:    Mac mac = Mac.getInstance(\"HmacSHA256\");",
          "115:    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), \"UTF-8\");",
          "116:   }",
          "117:   catch (Exception ex) {",
          "",
          "[Removed Lines]",
          "113:    mac.init(new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"HmacSHA256\"));",
          "114:    byte[] signData = mac.doFinal(stringToSign.getBytes(\"UTF-8\"));",
          "",
          "[Added Lines]",
          "116:    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\"));",
          "117:    byte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   root.put(\"event\", event);",
          "118:   root.put(\"instance\", instance);",
          "119:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "122:   return message.getValue(context, String.class);",
          "123:  }",
          "",
          "[Removed Lines]",
          "120:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "121:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "121:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "122:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "123:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   if (url == null) {",
          "97:    throw new IllegalStateException(\"'url' must not be null.\");",
          "98:   }",
          "100:  }",
          "102:  protected HttpEntity<Map<String, Object>> createHipChatNotification(InstanceEvent event, Instance instance) {",
          "",
          "[Removed Lines]",
          "99:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url.toString(), roomId, authToken);",
          "",
          "[Added Lines]",
          "100:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url, roomId, authToken);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:   root.put(\"event\", event);",
          "122:   root.put(\"instance\", instance);",
          "123:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "126:   return description.getValue(context, String.class);",
          "127:  }",
          "",
          "[Removed Lines]",
          "124:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "125:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "125:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "126:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "127:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   }",
          "137:  }",
          "143:  @Nullable",
          "144:  public URI getUrl() {",
          "145:   return url;",
          "146:  }",
          "150:  }",
          "152:  @Nullable",
          "",
          "[Removed Lines]",
          "139:  public void setUrl(@Nullable URI url) {",
          "140:   this.url = url;",
          "141:  }",
          "148:  public void setAuthToken(@Nullable String authToken) {",
          "149:   this.authToken = authToken;",
          "",
          "[Added Lines]",
          "146:  public void setUrl(@Nullable URI url) {",
          "147:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:   return authToken;",
          "155:  }",
          "159:  }",
          "161:  @Nullable",
          "",
          "[Removed Lines]",
          "157:  public void setRoomId(@Nullable String roomId) {",
          "158:   this.roomId = roomId;",
          "",
          "[Added Lines]",
          "155:  public void setAuthToken(@Nullable String authToken) {",
          "156:   this.authToken = authToken;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:   return roomId;",
          "164:  }",
          "168:  }",
          "170:  public boolean isNotify() {",
          "171:   return notify;",
          "172:  }",
          "176:  }",
          "178:  public String getDescription() {",
          "179:   return description.getExpressionString();",
          "180:  }",
          "182:  public void setRestTemplate(RestTemplate restTemplate) {",
          "183:   this.restTemplate = restTemplate;",
          "184:  }",
          "",
          "[Removed Lines]",
          "166:  public void setNotify(boolean notify) {",
          "167:   this.notify = notify;",
          "174:  public void setDescription(String description) {",
          "175:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "164:  public void setRoomId(@Nullable String roomId) {",
          "165:   this.roomId = roomId;",
          "172:  public void setNotify(boolean notify) {",
          "173:   this.notify = notify;",
          "180:  public void setDescription(String description) {",
          "181:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "182:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.springframework.expression.Expression;",
          "28: import org.springframework.expression.ParserContext;",
          "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "31: import org.springframework.http.HttpEntity;",
          "32: import org.springframework.http.HttpHeaders;",
          "33: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   root.put(\"event\", event);",
          "120:   root.put(\"instance\", instance);",
          "121:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "124:   return message.getValue(context, String.class);",
          "125:  }",
          "",
          "[Removed Lines]",
          "122:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "123:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "123:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "124:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "125:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:   this.restTemplate = restTemplate;",
          "129:  }",
          "135:  @Nullable",
          "136:  public URI getUrl() {",
          "137:   return url;",
          "138:  }",
          "142:  }",
          "144:  public String getUsername() {",
          "145:   return username;",
          "146:  }",
          "150:  }",
          "152:  @Nullable",
          "",
          "[Removed Lines]",
          "131:  public void setUrl(@Nullable URI url) {",
          "132:   this.url = url;",
          "133:  }",
          "140:  public void setUsername(String username) {",
          "141:   this.username = username;",
          "148:  public void setRoom(@Nullable String room) {",
          "149:   this.room = room;",
          "",
          "[Added Lines]",
          "138:  public void setUrl(@Nullable URI url) {",
          "139:   this.url = url;",
          "146:  public void setUsername(String username) {",
          "147:   this.username = username;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   return room;",
          "155:  }",
          "159:  }",
          "161:  @Nullable",
          "",
          "[Removed Lines]",
          "157:  public void setToken(@Nullable String token) {",
          "158:   this.token = token;",
          "",
          "[Added Lines]",
          "155:  public void setRoom(@Nullable String room) {",
          "156:   this.room = room;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   return token;",
          "164:  }",
          "168:  }",
          "170:  public String getMessage() {",
          "171:   return message.getExpressionString();",
          "172:  }",
          "174: }",
          "",
          "[Removed Lines]",
          "166:  public void setMessage(String message) {",
          "167:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "164:  public void setToken(@Nullable String token) {",
          "165:   this.token = token;",
          "172:  public void setMessage(String message) {",
          "173:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "174:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.slf4j.Logger;",
          "31: import org.slf4j.LoggerFactory;",
          "32: import org.springframework.context.expression.MapAccessor;",
          "33: import org.springframework.expression.Expression;",
          "34: import org.springframework.expression.ParserContext;",
          "35: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "37: import org.springframework.http.HttpEntity;",
          "38: import org.springframework.http.HttpHeaders;",
          "39: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "36: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "33: import org.springframework.expression.EvaluationContext;",
          "37: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "38: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  @Override",
          "142:  protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {",
          "143:   Message message;",
          "145:   if (event instanceof InstanceRegisteredEvent) {",
          "146:    message = getRegisteredMessage(instance, context);",
          "147:   }",
          "",
          "[Removed Lines]",
          "144:   StandardEvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "[Added Lines]",
          "146:   EvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     || super.shouldNotify(event, instance);",
          "173:  }",
          "176:   String activitySubtitle = evaluateExpression(context, deregisterActivitySubtitle);",
          "177:   return createMessage(instance, deRegisteredTitle, activitySubtitle, context);",
          "178:  }",
          "181:   String activitySubtitle = evaluateExpression(context, registerActivitySubtitle);",
          "182:   return createMessage(instance, registeredTitle, activitySubtitle, context);",
          "183:  }",
          "186:   String activitySubtitle = evaluateExpression(context, statusActivitySubtitle);",
          "187:   return createMessage(instance, statusChangedTitle, activitySubtitle, context);",
          "188:  }",
          "190:  protected Message createMessage(Instance instance, String registeredTitle, String activitySubtitle,",
          "192:   List<Fact> facts = new ArrayList<>();",
          "193:   facts.add(new Fact(STATUS_KEY, instance.getStatusInfo().getStatus()));",
          "194:   facts.add(new Fact(SERVICE_URL_KEY, instance.getRegistration().getServiceUrl()));",
          "",
          "[Removed Lines]",
          "175:  protected Message getDeregisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "180:  protected Message getRegisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "185:  protected Message getStatusChangedMessage(Instance instance, StandardEvaluationContext context) {",
          "191:    StandardEvaluationContext context) {",
          "",
          "[Added Lines]",
          "177:  protected Message getDeregisteredMessage(Instance instance, EvaluationContext context) {",
          "182:  protected Message getRegisteredMessage(Instance instance, EvaluationContext context) {",
          "187:  protected Message getStatusChangedMessage(Instance instance, EvaluationContext context) {",
          "193:    EvaluationContext context) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     .themeColor(evaluateExpression(context, themeColor)).sections(singletonList(section)).build();",
          "204:  }",
          "207:   return Objects.requireNonNull(expression.getValue(context, String.class));",
          "208:  }",
          "211:   Map<String, Object> root = new HashMap<>();",
          "212:   root.put(\"event\", event);",
          "213:   root.put(\"instance\", instance);",
          "214:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "218:  }",
          "220:  @Nullable",
          "",
          "[Removed Lines]",
          "206:  protected String evaluateExpression(StandardEvaluationContext context, Expression expression) {",
          "210:  protected StandardEvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "215:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "216:   context.addPropertyAccessor(new MapAccessor());",
          "217:   return context;",
          "",
          "[Added Lines]",
          "208:  protected String evaluateExpression(EvaluationContext context, Expression expression) {",
          "212:  protected EvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "217:   return SimpleEvaluationContext",
          "218:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "219:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  protected String buildUrl(InstanceEvent event, Instance instance) {",
          "119:   if ((event instanceof InstanceStatusChangedEvent)",
          "120:     && (StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()))) {",
          "122:   }",
          "123:   return url.toString();",
          "124:  }",
          "",
          "[Removed Lines]",
          "121:    return String.format(\"%s/%s/close\", url.toString(), generateAlias(instance));",
          "",
          "[Added Lines]",
          "122:    return String.format(\"%s/%s/close\", url, generateAlias(instance));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   root.put(\"event\", event);",
          "173:   root.put(\"instance\", instance);",
          "174:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "177:   return description.getValue(context, String.class);",
          "178:  }",
          "",
          "[Removed Lines]",
          "175:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "176:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "176:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "177:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "178:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:     ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());",
          "184:  }",
          "190:  @Nullable",
          "191:  public String getApiKey() {",
          "192:   return apiKey;",
          "193:  }",
          "195:  public void setDescription(String description) {",
          "196:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "197:  }",
          "",
          "[Removed Lines]",
          "186:  public void setApiKey(@Nullable String apiKey) {",
          "187:   this.apiKey = apiKey;",
          "188:  }",
          "",
          "[Added Lines]",
          "193:  public void setApiKey(@Nullable String apiKey) {",
          "194:   this.apiKey = apiKey;",
          "195:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.web.client.RestTemplate;",
          "31: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   root.put(\"event\", event);",
          "133:   root.put(\"instance\", instance);",
          "134:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "138:   return description.getValue(context, String.class);",
          "139:  }",
          "",
          "[Removed Lines]",
          "135:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "136:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "136:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "137:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "138:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   return details;",
          "148:  }",
          "154:  public URI getUrl() {",
          "155:   return url;",
          "156:  }",
          "160:  }",
          "162:  @Nullable",
          "",
          "[Removed Lines]",
          "150:  public void setUrl(URI url) {",
          "151:   this.url = url;",
          "152:  }",
          "158:  public void setClient(@Nullable String client) {",
          "159:   this.client = client;",
          "",
          "[Added Lines]",
          "155:  public void setUrl(URI url) {",
          "156:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:   return client;",
          "165:  }",
          "169:  }",
          "171:  @Nullable",
          "",
          "[Removed Lines]",
          "167:  public void setClientUrl(@Nullable URI clientUrl) {",
          "168:   this.clientUrl = clientUrl;",
          "",
          "[Added Lines]",
          "164:  public void setClient(@Nullable String client) {",
          "165:   this.client = client;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:   return clientUrl;",
          "174:  }",
          "178:  }",
          "180:  @Nullable",
          "",
          "[Removed Lines]",
          "176:  public void setServiceKey(@Nullable String serviceKey) {",
          "177:   this.serviceKey = serviceKey;",
          "",
          "[Added Lines]",
          "173:  public void setClientUrl(@Nullable URI clientUrl) {",
          "174:   this.clientUrl = clientUrl;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:   return serviceKey;",
          "183:  }",
          "187:  }",
          "189:  public String getDescription() {",
          "190:   return description.getExpressionString();",
          "191:  }",
          "193:  public void setRestTemplate(RestTemplate restTemplate) {",
          "194:   this.restTemplate = restTemplate;",
          "195:  }",
          "",
          "[Removed Lines]",
          "185:  public void setDescription(String description) {",
          "186:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "182:  public void setServiceKey(@Nullable String serviceKey) {",
          "183:   this.serviceKey = serviceKey;",
          "190:  public void setDescription(String description) {",
          "191:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "192:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.springframework.expression.Expression;",
          "28: import org.springframework.expression.ParserContext;",
          "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "31: import org.springframework.http.HttpEntity;",
          "32: import org.springframework.http.HttpHeaders;",
          "33: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   root.put(\"event\", event);",
          "129:   root.put(\"instance\", instance);",
          "130:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "133:   return message.getValue(context, String.class);",
          "134:  }",
          "",
          "[Removed Lines]",
          "131:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "132:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "132:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "133:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "134:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.springframework.expression.Expression;",
          "26: import org.springframework.expression.ParserContext;",
          "27: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "29: import org.springframework.web.client.RestTemplate;",
          "30: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "28: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "28: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "29: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   root.put(\"event\", event);",
          "108:   root.put(\"instance\", instance);",
          "109:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "112:   return message.getValue(context, String.class);",
          "113:  }",
          "",
          "[Removed Lines]",
          "110:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "111:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "111:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "112:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "113:     .withRootObject(root).build();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9131b760dd9e87e012afad582467612a1d5a6339",
      "candidate_info": {
        "commit_hash": "9131b760dd9e87e012afad582467612a1d5a6339",
        "repo": "codecentric/spring-boot-admin",
        "commit_url": "https://github.com/codecentric/spring-boot-admin/commit/9131b760dd9e87e012afad582467612a1d5a6339",
        "files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ],
        "message": "feat: improve notifiers",
        "before_after_code_files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ],
          "candidate": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package de.codecentric.boot.admin.server.notify;",
          "19: import java.net.URLEncoder;",
          "20: import java.util.HashMap;",
          "21: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import org.springframework.expression.Expression;",
          "29: import org.springframework.expression.ParserContext;",
          "30: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "32: import org.springframework.http.HttpEntity;",
          "33: import org.springframework.http.HttpHeaders;",
          "34: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "31: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "32: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "33: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   root.put(\"event\", event);",
          "102:   root.put(\"instance\", instance);",
          "103:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "106:   return message.getValue(context, String.class);",
          "107:  }",
          "",
          "[Removed Lines]",
          "104:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "105:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "106:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "107:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "108:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   try {",
          "111:    String stringToSign = timestamp + \"\\n\" + secret;",
          "112:    Mac mac = Mac.getInstance(\"HmacSHA256\");",
          "115:    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), \"UTF-8\");",
          "116:   }",
          "117:   catch (Exception ex) {",
          "",
          "[Removed Lines]",
          "113:    mac.init(new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"HmacSHA256\"));",
          "114:    byte[] signData = mac.doFinal(stringToSign.getBytes(\"UTF-8\"));",
          "",
          "[Added Lines]",
          "116:    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\"));",
          "117:    byte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.springframework.expression.Expression;",
          "25: import org.springframework.expression.ParserContext;",
          "26: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "28: import org.springframework.http.HttpEntity;",
          "29: import org.springframework.http.HttpHeaders;",
          "30: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "27: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "27: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "28: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   root.put(\"event\", event);",
          "117:   root.put(\"instance\", instance);",
          "118:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "121:   return message.getValue(context, String.class);",
          "122:  }",
          "",
          "[Removed Lines]",
          "119:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "120:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "120:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "121:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "122:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.springframework.expression.Expression;",
          "25: import org.springframework.expression.ParserContext;",
          "26: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "28: import org.springframework.http.HttpEntity;",
          "29: import org.springframework.http.HttpHeaders;",
          "30: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "27: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "27: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "28: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   if (url == null) {",
          "96:    throw new IllegalStateException(\"'url' must not be null.\");",
          "97:   }",
          "99:  }",
          "101:  protected HttpEntity<Map<String, Object>> createHipChatNotification(InstanceEvent event, Instance instance) {",
          "",
          "[Removed Lines]",
          "98:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url.toString(), roomId, authToken);",
          "",
          "[Added Lines]",
          "99:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url, roomId, authToken);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:   root.put(\"event\", event);",
          "121:   root.put(\"instance\", instance);",
          "122:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "125:   return description.getValue(context, String.class);",
          "126:  }",
          "",
          "[Removed Lines]",
          "123:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "124:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "124:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "125:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "126:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   }",
          "136:  }",
          "142:  @Nullable",
          "143:  public URI getUrl() {",
          "144:   return url;",
          "145:  }",
          "149:  }",
          "151:  @Nullable",
          "",
          "[Removed Lines]",
          "138:  public void setUrl(@Nullable URI url) {",
          "139:   this.url = url;",
          "140:  }",
          "147:  public void setAuthToken(@Nullable String authToken) {",
          "148:   this.authToken = authToken;",
          "",
          "[Added Lines]",
          "145:  public void setUrl(@Nullable URI url) {",
          "146:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:   return authToken;",
          "154:  }",
          "158:  }",
          "160:  @Nullable",
          "",
          "[Removed Lines]",
          "156:  public void setRoomId(@Nullable String roomId) {",
          "157:   this.roomId = roomId;",
          "",
          "[Added Lines]",
          "154:  public void setAuthToken(@Nullable String authToken) {",
          "155:   this.authToken = authToken;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:   return roomId;",
          "163:  }",
          "167:  }",
          "169:  public boolean isNotify() {",
          "170:   return notify;",
          "171:  }",
          "175:  }",
          "177:  public String getDescription() {",
          "178:   return description.getExpressionString();",
          "179:  }",
          "181:  public void setRestTemplate(RestTemplate restTemplate) {",
          "182:   this.restTemplate = restTemplate;",
          "183:  }",
          "",
          "[Removed Lines]",
          "165:  public void setNotify(boolean notify) {",
          "166:   this.notify = notify;",
          "173:  public void setDescription(String description) {",
          "174:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "163:  public void setRoomId(@Nullable String roomId) {",
          "164:   this.roomId = roomId;",
          "171:  public void setNotify(boolean notify) {",
          "172:   this.notify = notify;",
          "179:  public void setDescription(String description) {",
          "180:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "181:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.springframework.expression.Expression;",
          "26: import org.springframework.expression.ParserContext;",
          "27: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "29: import org.springframework.http.HttpEntity;",
          "30: import org.springframework.http.HttpHeaders;",
          "31: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "28: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "28: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "29: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   root.put(\"event\", event);",
          "119:   root.put(\"instance\", instance);",
          "120:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "123:   return message.getValue(context, String.class);",
          "124:  }",
          "",
          "[Removed Lines]",
          "121:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "122:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "122:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "123:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "124:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:   this.restTemplate = restTemplate;",
          "128:  }",
          "134:  @Nullable",
          "135:  public URI getUrl() {",
          "136:   return url;",
          "137:  }",
          "141:  }",
          "143:  public String getUsername() {",
          "144:   return username;",
          "145:  }",
          "149:  }",
          "151:  @Nullable",
          "",
          "[Removed Lines]",
          "130:  public void setUrl(@Nullable URI url) {",
          "131:   this.url = url;",
          "132:  }",
          "139:  public void setUsername(String username) {",
          "140:   this.username = username;",
          "147:  public void setRoom(@Nullable String room) {",
          "148:   this.room = room;",
          "",
          "[Added Lines]",
          "137:  public void setUrl(@Nullable URI url) {",
          "138:   this.url = url;",
          "145:  public void setUsername(String username) {",
          "146:   this.username = username;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:   return room;",
          "154:  }",
          "158:  }",
          "160:  @Nullable",
          "",
          "[Removed Lines]",
          "156:  public void setToken(@Nullable String token) {",
          "157:   this.token = token;",
          "",
          "[Added Lines]",
          "154:  public void setRoom(@Nullable String room) {",
          "155:   this.room = room;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:   return token;",
          "163:  }",
          "167:  }",
          "169:  public String getMessage() {",
          "170:   return message.getExpressionString();",
          "171:  }",
          "173: }",
          "",
          "[Removed Lines]",
          "165:  public void setMessage(String message) {",
          "166:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "163:  public void setToken(@Nullable String token) {",
          "164:   this.token = token;",
          "171:  public void setMessage(String message) {",
          "172:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "173:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.slf4j.Logger;",
          "29: import org.slf4j.LoggerFactory;",
          "30: import org.springframework.context.expression.MapAccessor;",
          "31: import org.springframework.expression.Expression;",
          "32: import org.springframework.expression.ParserContext;",
          "33: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "35: import org.springframework.http.HttpEntity;",
          "36: import org.springframework.http.HttpHeaders;",
          "37: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "34: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "31: import org.springframework.expression.EvaluationContext;",
          "35: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "36: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:  @Override",
          "141:  protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {",
          "142:   Message message;",
          "144:   if (event instanceof InstanceRegisteredEvent) {",
          "145:    message = getRegisteredMessage(instance, context);",
          "146:   }",
          "",
          "[Removed Lines]",
          "143:   StandardEvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "[Added Lines]",
          "145:   EvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     || super.shouldNotify(event, instance);",
          "172:  }",
          "175:   String activitySubtitle = evaluateExpression(context, deregisterActivitySubtitle);",
          "176:   return createMessage(instance, deRegisteredTitle, activitySubtitle, context);",
          "177:  }",
          "180:   String activitySubtitle = evaluateExpression(context, registerActivitySubtitle);",
          "181:   return createMessage(instance, registeredTitle, activitySubtitle, context);",
          "182:  }",
          "185:   String activitySubtitle = evaluateExpression(context, statusActivitySubtitle);",
          "186:   return createMessage(instance, statusChangedTitle, activitySubtitle, context);",
          "187:  }",
          "189:  protected Message createMessage(Instance instance, String registeredTitle, String activitySubtitle,",
          "191:   List<Fact> facts = new ArrayList<>();",
          "192:   facts.add(new Fact(STATUS_KEY, instance.getStatusInfo().getStatus()));",
          "193:   facts.add(new Fact(SERVICE_URL_KEY, instance.getRegistration().getServiceUrl()));",
          "",
          "[Removed Lines]",
          "174:  protected Message getDeregisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "179:  protected Message getRegisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "184:  protected Message getStatusChangedMessage(Instance instance, StandardEvaluationContext context) {",
          "190:    StandardEvaluationContext context) {",
          "",
          "[Added Lines]",
          "176:  protected Message getDeregisteredMessage(Instance instance, EvaluationContext context) {",
          "181:  protected Message getRegisteredMessage(Instance instance, EvaluationContext context) {",
          "186:  protected Message getStatusChangedMessage(Instance instance, EvaluationContext context) {",
          "192:    EvaluationContext context) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:     .themeColor(evaluateExpression(context, themeColor)).sections(singletonList(section)).build();",
          "203:  }",
          "206:   return Objects.requireNonNull(expression.getValue(context, String.class));",
          "207:  }",
          "210:   Map<String, Object> root = new HashMap<>();",
          "211:   root.put(\"event\", event);",
          "212:   root.put(\"instance\", instance);",
          "213:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "217:  }",
          "219:  @Nullable",
          "",
          "[Removed Lines]",
          "205:  protected String evaluateExpression(StandardEvaluationContext context, Expression expression) {",
          "209:  protected StandardEvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "214:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "215:   context.addPropertyAccessor(new MapAccessor());",
          "216:   return context;",
          "",
          "[Added Lines]",
          "207:  protected String evaluateExpression(EvaluationContext context, Expression expression) {",
          "211:  protected EvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "216:   return SimpleEvaluationContext",
          "217:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "218:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.springframework.expression.Expression;",
          "25: import org.springframework.expression.ParserContext;",
          "26: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "28: import org.springframework.http.HttpEntity;",
          "29: import org.springframework.http.HttpHeaders;",
          "30: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "27: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "27: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "28: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:  protected String buildUrl(InstanceEvent event, Instance instance) {",
          "118:   if ((event instanceof InstanceStatusChangedEvent)",
          "119:     && (StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()))) {",
          "121:   }",
          "122:   return url.toString();",
          "123:  }",
          "",
          "[Removed Lines]",
          "120:    return String.format(\"%s/%s/close\", url.toString(), generateAlias(instance));",
          "",
          "[Added Lines]",
          "121:    return String.format(\"%s/%s/close\", url, generateAlias(instance));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:   root.put(\"event\", event);",
          "172:   root.put(\"instance\", instance);",
          "173:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "176:   return description.getValue(context, String.class);",
          "177:  }",
          "",
          "[Removed Lines]",
          "174:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "175:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "175:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "176:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "177:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "182:     ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());",
          "183:  }",
          "189:  @Nullable",
          "190:  public String getApiKey() {",
          "191:   return apiKey;",
          "192:  }",
          "194:  public void setDescription(String description) {",
          "195:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "196:  }",
          "",
          "[Removed Lines]",
          "185:  public void setApiKey(@Nullable String apiKey) {",
          "186:   this.apiKey = apiKey;",
          "187:  }",
          "",
          "[Added Lines]",
          "192:  public void setApiKey(@Nullable String apiKey) {",
          "193:   this.apiKey = apiKey;",
          "194:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.springframework.expression.Expression;",
          "25: import org.springframework.expression.ParserContext;",
          "26: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "28: import org.springframework.lang.Nullable;",
          "29: import org.springframework.web.client.RestTemplate;",
          "30: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "27: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "27: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "28: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   root.put(\"event\", event);",
          "132:   root.put(\"instance\", instance);",
          "133:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "137:   return description.getValue(context, String.class);",
          "138:  }",
          "",
          "[Removed Lines]",
          "134:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "135:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "135:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "136:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "137:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:   return details;",
          "147:  }",
          "153:  public URI getUrl() {",
          "154:   return url;",
          "155:  }",
          "159:  }",
          "161:  @Nullable",
          "",
          "[Removed Lines]",
          "149:  public void setUrl(URI url) {",
          "150:   this.url = url;",
          "151:  }",
          "157:  public void setClient(@Nullable String client) {",
          "158:   this.client = client;",
          "",
          "[Added Lines]",
          "154:  public void setUrl(URI url) {",
          "155:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:   return client;",
          "164:  }",
          "168:  }",
          "170:  @Nullable",
          "",
          "[Removed Lines]",
          "166:  public void setClientUrl(@Nullable URI clientUrl) {",
          "167:   this.clientUrl = clientUrl;",
          "",
          "[Added Lines]",
          "163:  public void setClient(@Nullable String client) {",
          "164:   this.client = client;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:   return clientUrl;",
          "173:  }",
          "177:  }",
          "179:  @Nullable",
          "",
          "[Removed Lines]",
          "175:  public void setServiceKey(@Nullable String serviceKey) {",
          "176:   this.serviceKey = serviceKey;",
          "",
          "[Added Lines]",
          "172:  public void setClientUrl(@Nullable URI clientUrl) {",
          "173:   this.clientUrl = clientUrl;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:   return serviceKey;",
          "182:  }",
          "186:  }",
          "188:  public String getDescription() {",
          "189:   return description.getExpressionString();",
          "190:  }",
          "192:  public void setRestTemplate(RestTemplate restTemplate) {",
          "193:   this.restTemplate = restTemplate;",
          "194:  }",
          "",
          "[Removed Lines]",
          "184:  public void setDescription(String description) {",
          "185:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "181:  public void setServiceKey(@Nullable String serviceKey) {",
          "182:   this.serviceKey = serviceKey;",
          "189:  public void setDescription(String description) {",
          "190:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "191:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.springframework.expression.Expression;",
          "26: import org.springframework.expression.ParserContext;",
          "27: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "29: import org.springframework.http.HttpEntity;",
          "30: import org.springframework.http.HttpHeaders;",
          "31: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "28: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "28: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "29: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   root.put(\"event\", event);",
          "128:   root.put(\"instance\", instance);",
          "129:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "132:   return message.getValue(context, String.class);",
          "133:  }",
          "",
          "[Removed Lines]",
          "130:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "131:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "131:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "132:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "133:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.springframework.expression.Expression;",
          "24: import org.springframework.expression.ParserContext;",
          "25: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "27: import org.springframework.lang.Nullable;",
          "28: import org.springframework.web.client.RestTemplate;",
          "29: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "26: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "26: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "27: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   root.put(\"event\", event);",
          "107:   root.put(\"instance\", instance);",
          "108:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "111:   return message.getValue(context, String.class);",
          "112:  }",
          "",
          "[Removed Lines]",
          "109:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "110:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "110:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "111:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "112:     .withRootObject(root).build();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "320eab19ff76e2c012623a1eb53af6f4ae26e20b",
      "candidate_info": {
        "commit_hash": "320eab19ff76e2c012623a1eb53af6f4ae26e20b",
        "repo": "codecentric/spring-boot-admin",
        "commit_url": "https://github.com/codecentric/spring-boot-admin/commit/320eab19ff76e2c012623a1eb53af6f4ae26e20b",
        "files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ],
        "message": "feat: improve notifiers (#2173)",
        "before_after_code_files": [
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ],
          "candidate": [
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
            "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package de.codecentric.boot.admin.server.notify;",
          "19: import java.net.URLEncoder;",
          "20: import java.util.HashMap;",
          "21: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.springframework.expression.Expression;",
          "30: import org.springframework.expression.ParserContext;",
          "31: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "33: import org.springframework.http.HttpEntity;",
          "34: import org.springframework.http.HttpHeaders;",
          "35: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "32: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "33: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "34: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   root.put(\"event\", event);",
          "102:   root.put(\"instance\", instance);",
          "103:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "106:   return message.getValue(context, String.class);",
          "107:  }",
          "",
          "[Removed Lines]",
          "104:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "105:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "106:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "107:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "108:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   try {",
          "111:    String stringToSign = timestamp + \"\\n\" + secret;",
          "112:    Mac mac = Mac.getInstance(\"HmacSHA256\");",
          "115:    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), \"UTF-8\");",
          "116:   }",
          "117:   catch (Exception ex) {",
          "",
          "[Removed Lines]",
          "113:    mac.init(new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"HmacSHA256\"));",
          "114:    byte[] signData = mac.doFinal(stringToSign.getBytes(\"UTF-8\"));",
          "",
          "[Added Lines]",
          "116:    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\"));",
          "117:    byte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   root.put(\"event\", event);",
          "118:   root.put(\"instance\", instance);",
          "119:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "122:   return message.getValue(context, String.class);",
          "123:  }",
          "",
          "[Removed Lines]",
          "120:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "121:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "121:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "122:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "123:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   if (url == null) {",
          "97:    throw new IllegalStateException(\"'url' must not be null.\");",
          "98:   }",
          "100:  }",
          "102:  protected HttpEntity<Map<String, Object>> createHipChatNotification(InstanceEvent event, Instance instance) {",
          "",
          "[Removed Lines]",
          "99:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url.toString(), roomId, authToken);",
          "",
          "[Added Lines]",
          "100:   return String.format(\"%s/room/%s/notification?auth_token=%s\", url, roomId, authToken);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:   root.put(\"event\", event);",
          "122:   root.put(\"instance\", instance);",
          "123:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "126:   return description.getValue(context, String.class);",
          "127:  }",
          "",
          "[Removed Lines]",
          "124:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "125:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "125:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "126:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "127:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   }",
          "137:  }",
          "143:  @Nullable",
          "144:  public URI getUrl() {",
          "145:   return url;",
          "146:  }",
          "150:  }",
          "152:  @Nullable",
          "",
          "[Removed Lines]",
          "139:  public void setUrl(@Nullable URI url) {",
          "140:   this.url = url;",
          "141:  }",
          "148:  public void setAuthToken(@Nullable String authToken) {",
          "149:   this.authToken = authToken;",
          "",
          "[Added Lines]",
          "146:  public void setUrl(@Nullable URI url) {",
          "147:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:   return authToken;",
          "155:  }",
          "159:  }",
          "161:  @Nullable",
          "",
          "[Removed Lines]",
          "157:  public void setRoomId(@Nullable String roomId) {",
          "158:   this.roomId = roomId;",
          "",
          "[Added Lines]",
          "155:  public void setAuthToken(@Nullable String authToken) {",
          "156:   this.authToken = authToken;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:   return roomId;",
          "164:  }",
          "168:  }",
          "170:  public boolean isNotify() {",
          "171:   return notify;",
          "172:  }",
          "176:  }",
          "178:  public String getDescription() {",
          "179:   return description.getExpressionString();",
          "180:  }",
          "182:  public void setRestTemplate(RestTemplate restTemplate) {",
          "183:   this.restTemplate = restTemplate;",
          "184:  }",
          "",
          "[Removed Lines]",
          "166:  public void setNotify(boolean notify) {",
          "167:   this.notify = notify;",
          "174:  public void setDescription(String description) {",
          "175:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "164:  public void setRoomId(@Nullable String roomId) {",
          "165:   this.roomId = roomId;",
          "172:  public void setNotify(boolean notify) {",
          "173:   this.notify = notify;",
          "180:  public void setDescription(String description) {",
          "181:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "182:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.springframework.expression.Expression;",
          "28: import org.springframework.expression.ParserContext;",
          "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "31: import org.springframework.http.HttpEntity;",
          "32: import org.springframework.http.HttpHeaders;",
          "33: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   root.put(\"event\", event);",
          "120:   root.put(\"instance\", instance);",
          "121:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "124:   return message.getValue(context, String.class);",
          "125:  }",
          "",
          "[Removed Lines]",
          "122:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "123:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "123:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "124:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "125:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:   this.restTemplate = restTemplate;",
          "129:  }",
          "135:  @Nullable",
          "136:  public URI getUrl() {",
          "137:   return url;",
          "138:  }",
          "142:  }",
          "144:  public String getUsername() {",
          "145:   return username;",
          "146:  }",
          "150:  }",
          "152:  @Nullable",
          "",
          "[Removed Lines]",
          "131:  public void setUrl(@Nullable URI url) {",
          "132:   this.url = url;",
          "133:  }",
          "140:  public void setUsername(String username) {",
          "141:   this.username = username;",
          "148:  public void setRoom(@Nullable String room) {",
          "149:   this.room = room;",
          "",
          "[Added Lines]",
          "138:  public void setUrl(@Nullable URI url) {",
          "139:   this.url = url;",
          "146:  public void setUsername(String username) {",
          "147:   this.username = username;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:   return room;",
          "155:  }",
          "159:  }",
          "161:  @Nullable",
          "",
          "[Removed Lines]",
          "157:  public void setToken(@Nullable String token) {",
          "158:   this.token = token;",
          "",
          "[Added Lines]",
          "155:  public void setRoom(@Nullable String room) {",
          "156:   this.room = room;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163:   return token;",
          "164:  }",
          "168:  }",
          "170:  public String getMessage() {",
          "171:   return message.getExpressionString();",
          "172:  }",
          "174: }",
          "",
          "[Removed Lines]",
          "166:  public void setMessage(String message) {",
          "167:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "164:  public void setToken(@Nullable String token) {",
          "165:   this.token = token;",
          "172:  public void setMessage(String message) {",
          "173:   this.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);",
          "174:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.slf4j.Logger;",
          "31: import org.slf4j.LoggerFactory;",
          "32: import org.springframework.context.expression.MapAccessor;",
          "33: import org.springframework.expression.Expression;",
          "34: import org.springframework.expression.ParserContext;",
          "35: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "37: import org.springframework.http.HttpEntity;",
          "38: import org.springframework.http.HttpHeaders;",
          "39: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "36: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "33: import org.springframework.expression.EvaluationContext;",
          "37: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "38: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:  @Override",
          "142:  protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {",
          "143:   Message message;",
          "145:   if (event instanceof InstanceRegisteredEvent) {",
          "146:    message = getRegisteredMessage(instance, context);",
          "147:   }",
          "",
          "[Removed Lines]",
          "144:   StandardEvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "[Added Lines]",
          "146:   EvaluationContext context = createEvaluationContext(event, instance);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     || super.shouldNotify(event, instance);",
          "173:  }",
          "176:   String activitySubtitle = evaluateExpression(context, deregisterActivitySubtitle);",
          "177:   return createMessage(instance, deRegisteredTitle, activitySubtitle, context);",
          "178:  }",
          "181:   String activitySubtitle = evaluateExpression(context, registerActivitySubtitle);",
          "182:   return createMessage(instance, registeredTitle, activitySubtitle, context);",
          "183:  }",
          "186:   String activitySubtitle = evaluateExpression(context, statusActivitySubtitle);",
          "187:   return createMessage(instance, statusChangedTitle, activitySubtitle, context);",
          "188:  }",
          "190:  protected Message createMessage(Instance instance, String registeredTitle, String activitySubtitle,",
          "192:   List<Fact> facts = new ArrayList<>();",
          "193:   facts.add(new Fact(STATUS_KEY, instance.getStatusInfo().getStatus()));",
          "194:   facts.add(new Fact(SERVICE_URL_KEY, instance.getRegistration().getServiceUrl()));",
          "",
          "[Removed Lines]",
          "175:  protected Message getDeregisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "180:  protected Message getRegisteredMessage(Instance instance, StandardEvaluationContext context) {",
          "185:  protected Message getStatusChangedMessage(Instance instance, StandardEvaluationContext context) {",
          "191:    StandardEvaluationContext context) {",
          "",
          "[Added Lines]",
          "177:  protected Message getDeregisteredMessage(Instance instance, EvaluationContext context) {",
          "182:  protected Message getRegisteredMessage(Instance instance, EvaluationContext context) {",
          "187:  protected Message getStatusChangedMessage(Instance instance, EvaluationContext context) {",
          "193:    EvaluationContext context) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:     .themeColor(evaluateExpression(context, themeColor)).sections(singletonList(section)).build();",
          "204:  }",
          "207:   return Objects.requireNonNull(expression.getValue(context, String.class));",
          "208:  }",
          "211:   Map<String, Object> root = new HashMap<>();",
          "212:   root.put(\"event\", event);",
          "213:   root.put(\"instance\", instance);",
          "214:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "218:  }",
          "220:  @Nullable",
          "",
          "[Removed Lines]",
          "206:  protected String evaluateExpression(StandardEvaluationContext context, Expression expression) {",
          "210:  protected StandardEvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "215:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "216:   context.addPropertyAccessor(new MapAccessor());",
          "217:   return context;",
          "",
          "[Added Lines]",
          "208:  protected String evaluateExpression(EvaluationContext context, Expression expression) {",
          "212:  protected EvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {",
          "217:   return SimpleEvaluationContext",
          "218:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "219:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.http.HttpEntity;",
          "31: import org.springframework.http.HttpHeaders;",
          "32: import org.springframework.http.HttpMethod;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:  protected String buildUrl(InstanceEvent event, Instance instance) {",
          "119:   if ((event instanceof InstanceStatusChangedEvent)",
          "120:     && (StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()))) {",
          "122:   }",
          "123:   return url.toString();",
          "124:  }",
          "",
          "[Removed Lines]",
          "121:    return String.format(\"%s/%s/close\", url.toString(), generateAlias(instance));",
          "",
          "[Added Lines]",
          "122:    return String.format(\"%s/%s/close\", url, generateAlias(instance));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:   root.put(\"event\", event);",
          "173:   root.put(\"instance\", instance);",
          "174:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "177:   return description.getValue(context, String.class);",
          "178:  }",
          "",
          "[Removed Lines]",
          "175:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "176:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "176:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "177:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "178:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:     ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());",
          "184:  }",
          "190:  @Nullable",
          "191:  public String getApiKey() {",
          "192:   return apiKey;",
          "193:  }",
          "195:  public void setDescription(String description) {",
          "196:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "197:  }",
          "",
          "[Removed Lines]",
          "186:  public void setApiKey(@Nullable String apiKey) {",
          "187:   this.apiKey = apiKey;",
          "188:  }",
          "",
          "[Added Lines]",
          "193:  public void setApiKey(@Nullable String apiKey) {",
          "194:   this.apiKey = apiKey;",
          "195:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.springframework.expression.Expression;",
          "27: import org.springframework.expression.ParserContext;",
          "28: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "30: import org.springframework.web.client.RestTemplate;",
          "31: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "29: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "29: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "30: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   root.put(\"event\", event);",
          "133:   root.put(\"instance\", instance);",
          "134:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "138:   return description.getValue(context, String.class);",
          "139:  }",
          "",
          "[Removed Lines]",
          "135:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "136:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "136:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "137:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "138:     .withRootObject(root).build();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   return details;",
          "148:  }",
          "154:  public URI getUrl() {",
          "155:   return url;",
          "156:  }",
          "160:  }",
          "162:  @Nullable",
          "",
          "[Removed Lines]",
          "150:  public void setUrl(URI url) {",
          "151:   this.url = url;",
          "152:  }",
          "158:  public void setClient(@Nullable String client) {",
          "159:   this.client = client;",
          "",
          "[Added Lines]",
          "155:  public void setUrl(URI url) {",
          "156:   this.url = url;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:   return client;",
          "165:  }",
          "169:  }",
          "171:  @Nullable",
          "",
          "[Removed Lines]",
          "167:  public void setClientUrl(@Nullable URI clientUrl) {",
          "168:   this.clientUrl = clientUrl;",
          "",
          "[Added Lines]",
          "164:  public void setClient(@Nullable String client) {",
          "165:   this.client = client;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:   return clientUrl;",
          "174:  }",
          "178:  }",
          "180:  @Nullable",
          "",
          "[Removed Lines]",
          "176:  public void setServiceKey(@Nullable String serviceKey) {",
          "177:   this.serviceKey = serviceKey;",
          "",
          "[Added Lines]",
          "173:  public void setClientUrl(@Nullable URI clientUrl) {",
          "174:   this.clientUrl = clientUrl;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:   return serviceKey;",
          "183:  }",
          "187:  }",
          "189:  public String getDescription() {",
          "190:   return description.getExpressionString();",
          "191:  }",
          "193:  public void setRestTemplate(RestTemplate restTemplate) {",
          "194:   this.restTemplate = restTemplate;",
          "195:  }",
          "",
          "[Removed Lines]",
          "185:  public void setDescription(String description) {",
          "186:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "",
          "[Added Lines]",
          "182:  public void setServiceKey(@Nullable String serviceKey) {",
          "183:   this.serviceKey = serviceKey;",
          "190:  public void setDescription(String description) {",
          "191:   this.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);",
          "192:  }",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.springframework.expression.Expression;",
          "28: import org.springframework.expression.ParserContext;",
          "29: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "31: import org.springframework.http.HttpEntity;",
          "32: import org.springframework.http.HttpHeaders;",
          "33: import org.springframework.http.MediaType;",
          "",
          "[Removed Lines]",
          "30: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "30: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "31: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:   root.put(\"event\", event);",
          "129:   root.put(\"instance\", instance);",
          "130:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "133:   return message.getValue(context, String.class);",
          "134:  }",
          "",
          "[Removed Lines]",
          "131:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "132:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "132:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "133:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "134:     .withRootObject(root).build();",
          "",
          "---------------"
        ],
        "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java||spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java": [
          "File: spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java -> spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.springframework.expression.Expression;",
          "26: import org.springframework.expression.ParserContext;",
          "27: import org.springframework.expression.spel.standard.SpelExpressionParser;",
          "29: import org.springframework.web.client.RestTemplate;",
          "30: import reactor.core.publisher.Mono;",
          "",
          "[Removed Lines]",
          "28: import org.springframework.expression.spel.support.StandardEvaluationContext;",
          "",
          "[Added Lines]",
          "28: import org.springframework.expression.spel.support.DataBindingPropertyAccessor;",
          "29: import org.springframework.expression.spel.support.SimpleEvaluationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   root.put(\"event\", event);",
          "108:   root.put(\"instance\", instance);",
          "109:   root.put(\"lastStatus\", getLastStatus(event.getInstance()));",
          "112:   return message.getValue(context, String.class);",
          "113:  }",
          "",
          "[Removed Lines]",
          "110:   StandardEvaluationContext context = new StandardEvaluationContext(root);",
          "111:   context.addPropertyAccessor(new MapAccessor());",
          "",
          "[Added Lines]",
          "111:   SimpleEvaluationContext context = SimpleEvaluationContext",
          "112:     .forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())",
          "113:     .withRootObject(root).build();",
          "",
          "---------------"
        ]
      }
    }
  ]
}