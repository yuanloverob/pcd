{
  "cve_id": "CVE-2023-34411",
  "cve_desc": "The xml-rs crate before 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid <! token (such as <!DOCTYPEs/%<!A nesting) in an XML document. The earliest affected version is 0.8.9.",
  "repo": "00xc/xml-rs",
  "patch_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
  "patch_info": {
    "commit_hash": "0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "repo": "00xc/xml-rs",
    "commit_url": "https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f",
    "files": [
      "README.md",
      "src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs"
    ],
    "message": "Parse DOCTYPE markup declarations",
    "before_after_code_files": [
      "src/reader/lexer.rs||src/reader/lexer.rs",
      "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
      "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
      "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
      "src/reader/parser/mod.rs||src/reader/parser/mod.rs",
      "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
      "tests/xmlconf.rs||tests/xmlconf.rs"
    ]
  },
  "patch_diff": {
    "src/reader/lexer.rs||src/reader/lexer.rs": [
      "File: src/reader/lexer.rs -> src/reader/lexer.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     ReferenceStart,",
      "56:     ReferenceEnd,",
      "57: }",
      "59: impl fmt::Display for Token {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     MarkupDeclarationStart,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:     }",
      "144: }",
      "146: enum State {",
      "148:     Normal,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "148: #[derive(Copy, Clone)]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "154:     CommentStarted,",
      "156:     DoctypeStarted(DoctypeStartedSubstate),",
      "160:     CDataStarted(CDataStartedSubstate),",
      "",
      "[Removed Lines]",
      "158:     DoctypeFinishing(u8),",
      "",
      "[Added Lines]",
      "161:     InsideMarkupDeclaration,",
      "163:     InsideDoctype,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "174:     InsideCdata,",
      "176:     InsideProcessingInstruction,",
      "177: }",
      "179: #[derive(Copy, Clone)]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:     InsideMarkupDeclarationQuotedString(QuoteStyle),",
      "184: }",
      "186: #[derive(Copy, Clone, Eq, PartialEq)]",
      "187: enum QuoteStyle {",
      "188:     Single, Double",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "229:     head_pos: TextPosition,",
      "230:     char_queue: VecDeque<char>,",
      "231:     st: State,",
      "232:     skip_errors: bool,",
      "233:     inside_token: bool,",
      "234:     eof_handled: bool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "245:     normal_state: State,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "248:             head_pos: TextPosition::new(),",
      "249:             char_queue: VecDeque::with_capacity(4),  // TODO: check size",
      "250:             st: State::Normal,",
      "251:             skip_errors: false,",
      "252:             inside_token: false,",
      "253:             eof_handled: false",
      "254:         }",
      "255:     }",
      "268:     #[inline]",
      "",
      "[Removed Lines]",
      "259:     #[inline]",
      "260:     pub fn enable_errors(&mut self) { self.skip_errors = false; }",
      "264:     #[inline]",
      "265:     pub fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "[Added Lines]",
      "265:             normal_state: State::Normal,",
      "274:     pub(crate) fn disable_errors(&mut self) { self.skip_errors = true; }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "326:             State::TagStarted | State::CommentOrCDataOrDoctypeStarted |",
      "327:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
      "328:             State::CommentClosing(ClosingSubstate::Second) |",
      "330:             State::InsideProcessingInstruction | State::ProcessingInstructionClosing |",
      "332:                 Err(self.error(\"Unexpected end of stream\")),",
      "333:             State::EmptyTagClosing =>",
      "334:                 Ok(Some(Token::Character('/'))),",
      "",
      "[Removed Lines]",
      "329:             State::InsideComment |",
      "331:             State::DoctypeFinishing(_) =>",
      "",
      "[Added Lines]",
      "338:             State::InsideComment | State::InsideMarkupDeclaration |",
      "340:             State::InsideDoctype | State::InsideMarkupDeclarationQuotedString(_) =>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "369:             State::CommentStarted                 => self.comment_started(c),",
      "370:             State::CDataStarted(s)                => self.cdata_started(c, s),",
      "371:             State::DoctypeStarted(s)              => self.doctype_started(c, s),",
      "373:             State::EmptyTagClosing                => self.empty_element_closing(c),",
      "374:             State::CommentClosing(s)              => self.comment_closing(c, s),",
      "375:             State::CDataClosing(s)                => self.cdata_closing(c, s),",
      "",
      "[Removed Lines]",
      "372:             State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),",
      "",
      "[Added Lines]",
      "381:             State::InsideDoctype                  => self.inside_doctype(c),",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "378:             State::InsideCdata                    => self.inside_cdata(c),",
      "379:             State::InsideProcessingInstruction    => self.inside_processing_instruction(c),",
      "380:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
      "381:         }",
      "382:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "390:             State::InsideMarkupDeclaration       => self.markup_declaration(c),",
      "391:             State::InsideMarkupDeclarationQuotedString(q) => self.markup_declaration_string(c, q),",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "393:         Ok(Some(token))",
      "394:     }",
      "396:     #[inline]",
      "397:     fn move_to_with_unread(&mut self, st: State, cs: &[char], token: Token) -> Result {",
      "398:         self.char_queue.extend(cs.iter().copied());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "407:     #[inline]",
      "408:     fn move_to_and_reset_normal(&mut self, st: State, token: Token) -> Result {",
      "409:         self.normal_state = st;",
      "410:         self.st = st;",
      "411:         Ok(Some(token))",
      "412:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "461:     fn tag_opened(&mut self, c: char) -> Result {",
      "462:         match c {",
      "463:             '?'                        => self.move_to_with(State::InsideProcessingInstruction, Token::ProcessingInstructionStart),",
      "465:             '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),",
      "468:             _                          => self.handle_error(\"<\", c)",
      "469:         }",
      "470:     }",
      "",
      "[Removed Lines]",
      "464:             '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),",
      "466:             _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "467:             _ if is_name_char(c)       => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
      "",
      "[Added Lines]",
      "483:             '/'                        => self.move_to_with(self.normal_state, Token::ClosingTagStart),",
      "485:             _ if is_whitespace_char(c) => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "486:             _ if is_name_char(c)       => self.move_to_with_unread(self.normal_state, &[c], Token::OpeningTagStart),",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "475:             '-' => self.move_to(State::CommentStarted),",
      "476:             '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),",
      "477:             'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),",
      "478:             _ => self.handle_error(\"<!\", c),",
      "479:         }",
      "480:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "497:             'E' | 'A' | 'N' if matches!(self.normal_state, State::InsideDoctype) => self.move_to_with(State::InsideMarkupDeclaration, Token::MarkupDeclarationStart),",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "500:         )",
      "501:     }",
      "504:     fn doctype_started(&mut self, c: char, s: DoctypeStartedSubstate) -> Result {",
      "505:         use self::DoctypeStartedSubstate::{D, DO, DOC, DOCT, DOCTY, DOCTYP};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "524:     fn markup_declaration(&mut self, c: char) -> Result {",
      "525:         match c {",
      "526:             '<'                        => self.handle_error(\"<!\", c),",
      "527:             '>'                        => self.move_to_with(self.normal_state, Token::TagEnd),",
      "528:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "529:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "530:             '\"'                        => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Double), Token::DoubleQuote),",
      "531:             '\\''                       => self.move_to_with(State::InsideMarkupDeclarationQuotedString(QuoteStyle::Single), Token::SingleQuote),",
      "532:             _ => Ok(None),",
      "533:         }",
      "534:     }",
      "536:     fn markup_declaration_string(&mut self, c: char, q: QuoteStyle) -> Result {",
      "537:         match c {",
      "538:             '\"' if q == QuoteStyle::Double  => self.move_to_with(State::InsideMarkupDeclaration, Token::DoubleQuote),",
      "539:             '\\'' if q == QuoteStyle::Single => self.move_to_with(State::InsideMarkupDeclaration, Token::SingleQuote),",
      "540:             _ => Ok(None),",
      "541:         }",
      "542:     }",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "509:             DOC    ; 'T' ; DOCT   ; \"<!DOC\",",
      "510:             DOCT   ; 'Y' ; DOCTY  ; \"<!DOCT\",",
      "511:             DOCTY  ; 'P' ; DOCTYP ; \"<!DOCTY\";",
      "513:         )",
      "514:     }",
      "518:         match c {",
      "522:             _ => Ok(None),",
      "523:         }",
      "524:     }",
      "",
      "[Removed Lines]",
      "512:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_with(State::DoctypeFinishing(1), Token::DoctypeStart)",
      "517:     fn doctype_finishing(&mut self, c: char, d: u8) -> Result {",
      "519:             '<' => self.move_to(State::DoctypeFinishing(d + 1)),",
      "520:             '>' if d == 1 => self.move_to_with(State::Normal, Token::TagEnd),",
      "521:             '>' => self.move_to(State::DoctypeFinishing(d - 1)),",
      "",
      "[Added Lines]",
      "553:             DOCTYP ; 'E' ; \"<!DOCTYP\" ; self.move_to_and_reset_normal(State::InsideDoctype, Token::DoctypeStart)",
      "558:     fn inside_doctype(&mut self, c: char) -> Result {",
      "560:             '>' => self.move_to_and_reset_normal(State::Normal, Token::TagEnd),",
      "561:             '<'                        => self.move_to(State::TagStarted),",
      "562:             '&'                        => Ok(Some(Token::ReferenceStart)),",
      "563:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "527:     fn processing_instruction_closing(&mut self, c: char) -> Result {",
      "528:         match c {",
      "530:             _ => self.move_to_with_unread(State::InsideProcessingInstruction, &[c], Token::Character('?')),",
      "531:         }",
      "532:     }",
      "",
      "[Removed Lines]",
      "529:             '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),",
      "",
      "[Added Lines]",
      "571:             '>' => self.move_to_with(self.normal_state, Token::ProcessingInstructionEnd),",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "535:     fn empty_element_closing(&mut self, c: char) -> Result {",
      "536:         match c {",
      "539:         }",
      "540:     }",
      "",
      "[Removed Lines]",
      "537:             '>' => self.move_to_with(State::Normal, Token::EmptyTagEnd),",
      "538:             _ => self.move_to_with_unread(State::Normal, &[c], Token::Character('/')),",
      "",
      "[Added Lines]",
      "579:             '>' => self.move_to_with(self.normal_state, Token::EmptyTagEnd),",
      "580:             _ => self.move_to_with_unread(self.normal_state, &[c], Token::Character('/')),",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "547:                 _ => self.move_to_with_unread(State::InsideComment, &[c], Token::Character('-')),",
      "548:             },",
      "549:             ClosingSubstate::Second => match c {",
      "552:                 _ => self.handle_error(\"--\", c),",
      "553:             },",
      "",
      "[Removed Lines]",
      "550:                 '>' => self.move_to_with(State::Normal, Token::CommentEnd),",
      "",
      "[Added Lines]",
      "592:                 '>' => self.move_to_with(self.normal_state, Token::CommentEnd),",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "576:                 _ => self.move_to_with_unread(State::Normal, &[c], Token::Character(']')),",
      "577:             },",
      "578:             ClosingSubstate::Second => match c {",
      "580:                 _ => self.move_to_with_unread(State::Normal, &[']', c], Token::Character(']')),",
      "581:             },",
      "582:         }",
      "",
      "[Removed Lines]",
      "579:                 '>' => self.move_to_with(State::Normal, Token::CDataEnd),",
      "",
      "[Added Lines]",
      "621:                 '>' => self.move_to_with(self.normal_state, Token::CDataEnd),",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "825:     #[test]",
      "826:     fn doctype_with_internal_subset_test() {",
      "827:         let (mut lex, mut buf) = make_lex_and_buf(",
      "829:         );",
      "830:         assert_oks!(for lex and buf ;",
      "831:             Token::OpeningTagStart",
      "832:             Token::Character('a')",
      "833:             Token::TagEnd",
      "834:             Token::DoctypeStart",
      "835:             Token::TagEnd",
      "836:             Token::Whitespace(' ')",
      "837:         );",
      "838:         assert_none!(for lex and buf);",
      "839:     }",
      "841:     #[test]",
      "842:     fn end_of_stream_handling_ok() {",
      "843:         macro_rules! eof_check(",
      "",
      "[Removed Lines]",
      "828:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba> ]> \"#",
      "",
      "[Added Lines]",
      "870:             r#\"<a><!DOCTYPE ab[<!ELEMENT ba \">>>>>\"> ]> \"#",
      "877:             Token::MarkupDeclarationStart",
      "878:             Token::DoubleQuote",
      "879:             Token::DoubleQuote",
      "880:             Token::TagEnd",
      "881:             Token::TagEnd",
      "882:             Token::Whitespace(' ')",
      "883:         );",
      "884:         assert_none!(for lex and buf);",
      "885:     }",
      "887:     #[test]",
      "888:     fn doctype_internal_pi_comment() {",
      "889:         let (mut lex, mut buf) = make_lex_and_buf(",
      "890:             \"<!DOCTYPE a [\\n<!ELEMENT leopard ANY> <!-- <?non?>--> <?pi > ?> \\n]>\"",
      "891:         );",
      "892:         assert_oks!(for lex and buf ;",
      "893:             Token::DoctypeStart",
      "894:             Token::MarkupDeclarationStart",
      "896:             Token::CommentStart",
      "898:             Token::Character('<')",
      "899:             Token::Character('?')",
      "900:             Token::Character('n')",
      "901:             Token::Character('o')",
      "902:             Token::Character('n')",
      "903:             Token::Character('?')",
      "904:             Token::Character('>')",
      "905:             Token::CommentEnd",
      "906:             Token::ProcessingInstructionStart",
      "907:             Token::Character('p')",
      "908:             Token::Character('i')",
      "909:             Token::Whitespace(' ')",
      "910:             Token::TagEnd // not really",
      "911:             Token::Whitespace(' ')",
      "912:             Token::ProcessingInstructionEnd",
      "913:             Token::TagEnd // DTD",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
      "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:     pub fn inside_cdata(&mut self, t: Token) -> Option<Result> {",
      "8:         match t {",
      "9:             Token::CDataEnd => {",
      "11:                 let event = if self.config.cdata_to_characters {",
      "12:                     None",
      "13:                 } else {",
      "",
      "[Removed Lines]",
      "10:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
      "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:     pub fn inside_doctype(&mut self, t: Token) -> Option<Result> {",
      "7:         match t {",
      "8:             Token::TagEnd => {",
      "10:                 self.into_state_continue(State::OutsideTag)",
      "11:             }",
      "13:             _ => None,",
      "14:         }",
      "15:     }",
      "",
      "[Removed Lines]",
      "9:                 self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "12:             Token::MarkupDeclarationStart => {",
      "13:                 self.into_state_continue(State::InsideDoctypeMarkupDeclaration)",
      "14:             },",
      "16:             _ => None,",
      "17:         }",
      "18:     }",
      "20:     pub fn inside_doctype_markup_declaration(&mut self, t: Token) -> Option<Result> {",
      "21:         match t {",
      "22:             Token::TagEnd => {",
      "23:                 self.into_state_continue(State::InsideDoctype)",
      "24:             }",
      "",
      "---------------"
    ],
    "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
      "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:             ProcessingInstructionSubstate::PIInsideData => match t {",
      "70:                 Token::ProcessingInstructionEnd => {",
      "72:                     let name = self.data.take_name();",
      "73:                     let data = self.take_buf();",
      "74:                     self.into_state_emit(",
      "",
      "[Removed Lines]",
      "71:                     self.lexer.enable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/reader/parser/mod.rs||src/reader/parser/mod.rs": [
      "File: src/reader/parser/mod.rs -> src/reader/parser/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     InsideCData,",
      "140:     InsideDeclaration(DeclarationSubstate),",
      "141:     InsideDoctype,",
      "142:     InsideReference(Box<State>),",
      "143: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     InsideDoctypeMarkupDeclaration,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "337:             State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),",
      "338:             State::InsideDeclaration(s)           => self.inside_declaration(t, s),",
      "339:             State::InsideDoctype                  => self.inside_doctype(t),",
      "340:             State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),",
      "341:             State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),",
      "342:             State::InsideComment                  => self.inside_comment(t),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:             State::InsideDoctypeMarkupDeclaration => self.inside_doctype_markup_declaration(t),",
      "",
      "---------------"
    ],
    "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
      "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:                         self.next_pos();",
      "85:                         self.into_state(State::InsideDoctype, next_event)",
      "86:                     }",
      "",
      "[Removed Lines]",
      "84:                         self.lexer.disable_errors();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/xmlconf.rs||tests/xmlconf.rs": [
      "File: tests/xmlconf.rs -> tests/xmlconf.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:         \"rmt-e2e-18\", // External entity containing start of entity declaration is base URI for system identifier",
      "117:         \"rmt-e2e-19\", // Parameter entities and character references are included-in-literal, but general entities are bypassed.",
      "118:         \"rmt-e2e-22\", // UTF-8 entities may start with a BOM",
      "120:         \"rmt-e2e-34\", // A non-deterministic content model is an error even if the element type is not used.",
      "121:         \"rmt-e2e-50\", // All line-ends are normalized, even those not passed to the application. NB this can only be tested effectively in XML 1.1, since CR is in the S production; in 1.1 we can use NEL which isn't.",
      "122:         \"rmt-e2e-55\", // A reference to an unparsed entity in an entity value is an error rather than forbidden (unless the entity is referenced, of course)",
      "",
      "[Removed Lines]",
      "119:         \"rmt-e2e-24\", // Either the built-in entity or a character reference can be used to represent greater-than after two close-square-brackets",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "279: #[test] fn oasis() {",
      "280:     run_suite(\"oasis/oasis.xml\", &[",
      "285:         \"o-p01fail1\", // S cannot occur before the prolog",
      "286:         \"o-p01fail2\", // comments cannot occur before the prolog",
      "287:         \"o-p01fail3\", // only one document element",
      "288:         \"o-p09fail1\", // EntityValue excludes '%'",
      "289:         \"o-p09fail2\", // EntityValue excludes '&'",
      "290:         \"o-p09fail3\", // incomplete character reference",
      "296:         \"o-p12fail2\", // '\\' excluded",
      "297:         \"o-p12fail3\", // entity references excluded",
      "298:         \"o-p12fail6\", // built-in entity refs excluded",
      "299:         \"o-p12fail7\", // The public ID has a tab character, which is disallowed",
      "300:         \"o-p14fail3\", // \"]]>\" excluded",
      "",
      "[Removed Lines]",
      "281:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "282:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "291:         \"o-p09fail4\", // quote types must match",
      "292:         \"o-p09fail5\", // quote types must match",
      "293:         \"o-p11fail1\", // quote types must match",
      "294:         \"o-p11fail2\", // cannot contain delimiting quotes",
      "295:         \"o-p12fail1\", // '\"' excluded",
      "",
      "[Added Lines]",
      "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
      "284:         \"o-p05pass1\", // various valid Name constructions",
      "288:         \"o-p11pass1\", // p11pass1.xml       system literals may not contain     URI fragments",
      "289:         \"o-p12fail1\", // p12fail1.xml       '\"' excluded",
      "292:         \"o-p12fail4\", // p12fail4.xml       '>' excluded",
      "293:         \"o-p12fail5\", // p12fail5.xml       '<' excluded",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:         \"o-p22fail2\", // prolog must start with XML decl",
      "304:         \"o-p23fail1\", // \"xml\" must be lower-case",
      "305:         \"o-p27fail1\", // References aren't allowed in Misc,     even if they would resolve to valid Misc.",
      "307:         \"o-p30fail1\", // An XML declaration is not the same as a TextDecl",
      "308:         \"o-p31fail1\", // external subset excludes doctypedecl",
      "309:         \"o-p32fail3\", // initial S is required",
      "310:         \"o-p40fail1\", // S is required between attributes",
      "311:         \"o-p44fail4\", // Whitespace required between attributes.",
      "313:         \"o-p45fail2\", // S before contentspec is required.",
      "314:         \"o-p45fail3\", // only one content spec",
      "315:         \"o-p45fail4\", // no comments in declarations (contrast with SGML)",
      "",
      "[Removed Lines]",
      "306:         \"o-p29fail1\", // A processor must not pass unknown declaration types.",
      "312:         \"o-p45fail1\", // ELEMENT must be upper case.",
      "",
      "[Added Lines]",
      "306:         \"o-p43pass1\", // Valid use of character data, comments, processing instructions and CDATA sections within the start and end tag.",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "371:         \"o-p64fail1\", // section delimiters must balance",
      "372:         \"o-p64fail2\", // section delimiters must balance",
      "373:         \"o-p66fail5\", // no references to non-characters",
      "374:         \"o-p69fail1\", // terminating ';' is required",
      "375:         \"o-p69fail2\", // no S after '%'",
      "376:         \"o-p69fail3\", // no S before ';'",
      "377:         \"o-p70fail1\", // This is neither",
      "378:         \"o-p71fail1\", // S is required before EntityDef",
      "379:         \"o-p71fail2\", // Entity name is a Name, not an NMToken",
      "381:         \"o-p71fail4\", // S is required after \"<!ENTITY\"",
      "382:         \"o-p72fail1\", // S is required after \"<!ENTITY\"",
      "383:         \"o-p72fail2\", // S is required after '%'",
      "384:         \"o-p72fail3\", // S is required after name",
      "385:         \"o-p72fail4\", // Entity name is a name, not an NMToken",
      "386:         \"o-p73fail1\", // No typed replacement text",
      "387:         \"o-p73fail2\", // Only one replacement value",
      "",
      "[Removed Lines]",
      "380:         \"o-p71fail3\", // no S after \"<!\"",
      "",
      "[Added Lines]",
      "369:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
      "380:         \"o-p76fail4\", // p76fail4.xml       notation names are Names",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "438:         \"content02\", // No whitespace before \"*\" in content model",
      "439:         \"content03\", // No whitespace before \"+\" in content model",
      "440:         \"decl01\", // External entities may not have standalone decls.",
      "443:         \"dtd02\", // PE name immediately after \"%\"",
      "444:         \"dtd03\", // PE name immediately followed by \";\"",
      "445:         \"dtd04\", // PUBLIC literal must be quoted",
      "",
      "[Removed Lines]",
      "441:         \"nwf-dtd00\", // Comma mandatory in content model",
      "442:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "451:         \"encoding04\", // Illegal character \":\" in encoding name",
      "452:         \"encoding05\", // Illegal character \"@\" in encoding name",
      "453:         \"encoding06\", // Illegal character \"+\" in encoding name",
      "454:         \"pubid01\", // Illegal entity ref in public ID",
      "455:         \"pubid02\", // Illegal characters in public ID",
      "456:         \"pubid03\", // Illegal characters in public ID",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:         \"nwf-dtd00\", // Comma mandatory in content model",
      "449:         \"nwf-dtd01\", // Can't mix comma and vertical bar in content models",
      "450:         \"pi\", // pi.xml      No space between PI target name and data",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "502:         \"not-wf-sa-060\", // Invalid type NAME defined in ATTLIST.",
      "503:         \"not-wf-sa-061\", // External entity declarations require whitespace between public     and system IDs.",
      "504:         \"not-wf-sa-062\", // Entity declarations need space after the entity name.",
      "506:         \"not-wf-sa-064\", // Space is required between attribute type and default values     in <!ATTLIST...> declarations.",
      "507:         \"not-wf-sa-065\", // Space is required between attribute name and type     in <!ATTLIST...> declarations.",
      "508:         \"not-wf-sa-066\", // Required whitespace is missing.",
      "",
      "[Removed Lines]",
      "505:         \"not-wf-sa-063\", // Conditional sections may only appear in the external     DTD subset.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "523:         \"not-wf-sa-101\", // Space is not permitted in an encoding name.",
      "524:         \"not-wf-sa-105\", // Invalid placement of CDATA section.",
      "525:         \"not-wf-sa-106\", // Invalid placement of entity declaration.",
      "527:         \"not-wf-sa-113\", // Parameter entity values must use valid reference syntax;     this reference is malformed.",
      "528:         \"not-wf-sa-114\", // General entity values must use valid reference syntax;     this reference is malformed.",
      "529:         \"not-wf-sa-121\", // A name of an ENTITY was started with an invalid character.",
      "",
      "[Removed Lines]",
      "526:         \"not-wf-sa-107\", // Invalid document type declaration.  CDATA alone is invalid.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "566:         \"not-wf-sa-174\", // Character FFFF is not legal anywhere in an XML document.",
      "567:         \"not-wf-sa-175\", // Character FFFF is not legal anywhere in an XML document.",
      "568:         \"not-wf-sa-177\", // Character FFFF is not legal anywhere in an XML document.",
      "570:         \"not-wf-sa-180\", // The Entity Declared WFC requires entities to be declared     before they are used in an attribute list declaration.",
      "571:         \"not-wf-sa-183\", // Mixed content declarations may not include content particles.",
      "572:         \"not-wf-sa-184\", // In mixed content models, element names must not be     parenthesized.",
      "",
      "[Removed Lines]",
      "569:         \"not-wf-sa-179\", // Invalid syntax matching double quote is missing.",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
      "candidate_info": {
        "commit_hash": "879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/879e311accad4f5b6fd8d9cd9ed52e87fb687ded",
        "files": [
          "benches/bench.rs",
          "src/analyze.rs",
          "src/lib.rs",
          "src/macros.rs",
          "src/name.rs",
          "src/reader/config.rs",
          "src/reader/error.rs",
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/outside_tag.rs",
          "src/util.rs",
          "src/writer/mod.rs",
          "tests/xmlconf.rs"
        ],
        "message": "fmt",
        "before_after_code_files": [
          "benches/bench.rs||benches/bench.rs",
          "src/analyze.rs||src/analyze.rs",
          "src/lib.rs||src/lib.rs",
          "src/macros.rs||src/macros.rs",
          "src/name.rs||src/name.rs",
          "src/reader/config.rs||src/reader/config.rs",
          "src/reader/error.rs||src/reader/error.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "src/util.rs||src/util.rs",
          "src/writer/mod.rs||src/writer/mod.rs",
          "tests/xmlconf.rs||tests/xmlconf.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ]
        }
      },
      "candidate_diff": {
        "benches/bench.rs||benches/bench.rs": [
          "File: benches/bench.rs -> benches/bench.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #![feature(test)]",
          "3: extern crate test;",
          "5: use test::Bencher;",
          "7: #[bench]",
          "8: fn bla(bencher: &mut Bencher) {",
          "",
          "[Removed Lines]",
          "4: use xml::EventReader;",
          "",
          "[Added Lines]",
          "5: use xml::EventReader;",
          "",
          "---------------"
        ],
        "src/analyze.rs||src/analyze.rs": [
          "File: src/analyze.rs -> src/analyze.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                 ),",
          "47:             XmlEvent::EndDocument => println!(\"Document finished\"),",
          "48:             XmlEvent::ProcessingInstruction { .. } => processing_instructions += 1,",
          "50:             XmlEvent::Characters(s) => {",
          "51:                 character_blocks += 1;",
          "52:                 characters += s.len();",
          "",
          "[Removed Lines]",
          "49:             XmlEvent::Whitespace(_) => {}  // can't happen due to configuration",
          "",
          "[Added Lines]",
          "49:             XmlEvent::Whitespace(_) => {} // can't happen due to configuration",
          "",
          "---------------"
        ],
        "src/lib.rs||src/lib.rs": [
          "File: src/lib.rs -> src/lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: pub use crate::reader::EventReader;",
          "15: pub use crate::reader::ParserConfig;",
          "16: pub use crate::writer::EmitterConfig;",
          "17: pub use crate::writer::EventWriter;",
          "20: pub mod attribute;",
          "21: pub mod common;",
          "",
          "[Removed Lines]",
          "18: pub use crate::util::Encoding;",
          "",
          "[Added Lines]",
          "16: pub use crate::util::Encoding;",
          "",
          "---------------"
        ],
        "src/macros.rs||src/macros.rs": [
          "File: src/macros.rs -> src/macros.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         impl $target {",
          "39:             #[inline]",
          "41:                 ParserConfig2 {",
          "42:                     c: self,",
          "43:                     ..Default::default()",
          "45:             }",
          "46:         }",
          "47:     };",
          "",
          "[Removed Lines]",
          "40:             #[must_use] pub fn $field(self, value: $t) -> ParserConfig2 {",
          "44:                 }.$field(value)",
          "",
          "[Added Lines]",
          "40:             #[must_use]",
          "41:             pub fn $field(self, value: $t) -> ParserConfig2 {",
          "45:                 }",
          "46:                 .$field(value)",
          "",
          "---------------"
        ],
        "src/name.rs||src/name.rs": [
          "File: src/name.rs -> src/name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "169:         match self.0.prefix {",
          "170:             Some(prefix) => write!(f, \"{}:{}\", prefix, self.0.local_name),",
          "172:         }",
          "173:     }",
          "174: }",
          "",
          "[Removed Lines]",
          "171:             None => self.0.local_name.fmt(f)",
          "",
          "[Added Lines]",
          "171:             None => self.0.local_name.fmt(f),",
          "",
          "---------------"
        ],
        "src/reader/config.rs||src/reader/config.rs": [
          "File: src/reader/config.rs -> src/reader/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: impl ParserConfig2 {",
          "205:     #[inline]",
          "207:         Self::default()",
          "208:     }",
          "",
          "[Removed Lines]",
          "206:     #[must_use] pub fn new() -> Self {",
          "",
          "[Added Lines]",
          "206:     #[must_use]",
          "207:     pub fn new() -> Self {",
          "",
          "---------------"
        ],
        "src/reader/error.rs||src/reader/error.rs": [
          "File: src/reader/error.rs -> src/reader/error.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use std::borrow::Cow;",
          "3: use std::error;",
          "4: use std::fmt;",
          "5: use std::io;",
          "6: use std::str;",
          "",
          "[Removed Lines]",
          "1: use std::error::Error as _;",
          "",
          "[Added Lines]",
          "3: use std::error::Error as _;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: impl<'a, P, M> From<(&'a P, M)> for Error where P: Position, M: Into<Cow<'static, str>> {",
          "76:     #[cold]",
          "77:     fn from(orig: (&'a P, M)) -> Self {",
          "79:             pos: orig.0.position(),",
          "81:         }",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "78:         Error{",
          "80:             kind: ErrorKind::Syntax(orig.1.into())",
          "",
          "[Added Lines]",
          "78:         Error {",
          "80:             kind: ErrorKind::Syntax(orig.1.into()),",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:     #[test]",
          "696:     fn tricky_pi() {",
          "701:         assert_oks!(for lex and buf ;",
          "702:             Token::ProcessingInstructionStart",
          "",
          "[Removed Lines]",
          "697:         let (mut lex, mut buf) = make_lex_and_buf(",
          "698:             r#\"<?x<!-- &??><x>\"#",
          "699:         );",
          "",
          "[Added Lines]",
          "697:         let (mut lex, mut buf) = make_lex_and_buf(r#\"<?x<!-- &??><x>\"#);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:     #[test]",
          "720:     fn reparser() {",
          "725:         assert_oks!(for lex and buf ;",
          "726:             Token::ReferenceStart",
          "",
          "[Removed Lines]",
          "721:         let (mut lex, mut buf) = make_lex_and_buf(",
          "722:             r#\"&a;\"#",
          "723:         );",
          "",
          "[Added Lines]",
          "719:         let (mut lex, mut buf) = make_lex_and_buf(r#\"&a;\"#);",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::borrow::Cow;",
          "5: use std::io::prelude::*;",
          "7: use crate::attribute::OwnedAttribute;",
          "",
          "[Removed Lines]",
          "3: use std::collections::HashMap;",
          "",
          "[Added Lines]",
          "4: use std::collections::HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:             Some(Ok(XmlEvent::StartDocument {",
          "162:                 version: DEFAULT_VERSION,",
          "163:                 encoding: self.lexer.encoding().to_string(),",
          "165:             }))",
          "166:         } else {",
          "167:             None",
          "",
          "[Removed Lines]",
          "164:                 standalone: DEFAULT_STANDALONE",
          "",
          "[Added Lines]",
          "164:                 standalone: DEFAULT_STANDALONE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:         for attr in &mut attributes {",
          "556:             if let Some(ref pfx) = attr.name.prefix {",
          "557:                 let new_ns = match self.nst.get(pfx) {",
          "559:                     Some(ns) => Some(ns.into()),",
          "560:                     None => return Some(self_error!(self; \"Attribute {} prefix is unbound\", attr.name))",
          "561:                 };",
          "",
          "[Removed Lines]",
          "558:                     Some(\"\") => None,  // default namespace",
          "",
          "[Added Lines]",
          "558:                     Some(\"\") => None, // default namespace",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "586:         match self.nst.get(name.borrow().prefix_repr()) {",
          "588:             Some(ns) => name.namespace = Some(ns.into()),",
          "590:         }",
          "592:         let op_name = self.est.pop()?;",
          "",
          "[Removed Lines]",
          "587:             Some(\"\") => name.namespace = None,  // default namespace",
          "589:             None => return Some(self_error!(self; \"Element {} prefix is unbound\", name))",
          "",
          "[Added Lines]",
          "587:             Some(\"\") => name.namespace = None, // default namespace",
          "589:             None => return Some(self_error!(self; \"Element {} prefix is unbound\", name)),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "604: mod tests {",
          "605:     use std::io::BufReader;",
          "607:     use crate::common::{Position, TextPosition};",
          "608:     use crate::name::OwnedName;",
          "610:     use crate::reader::parser::PullParser;",
          "611:     use crate::reader::ParserConfig;",
          "614:     fn new_parser() -> PullParser {",
          "615:         PullParser::new(ParserConfig::new())",
          "",
          "[Removed Lines]",
          "609:     use crate::attribute::OwnedAttribute;",
          "612:     use crate::reader::events::XmlEvent;",
          "",
          "[Added Lines]",
          "607:     use crate::attribute::OwnedAttribute;",
          "610:     use crate::reader::events::XmlEvent;",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
          "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::reader::lexer::Token;",
          "4: use super::{PullParser, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::{reader::events::XmlEvent, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "2: use crate::{common::is_whitespace_char, reader::events::XmlEvent};",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs": [
          "File: src/reader/parser/inside_closing_tag_name.rs -> src/reader/parser/inside_closing_tag_name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::{namespace, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "1: use crate::{common::is_whitespace_char, namespace};",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs": [
          "File: src/reader/parser/inside_declaration.rs -> src/reader/parser/inside_declaration.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "5: use crate::util::Encoding;",
          "7: use super::{",
          "10: };",
          "12: impl PullParser {",
          "",
          "[Removed Lines]",
          "1: use crate::common::{XmlVersion, is_whitespace_char};",
          "8:     DeclarationSubstate, PullParser, QualifiedNameTarget, Result, State,",
          "9:     DEFAULT_VERSION, Encountered,",
          "",
          "[Added Lines]",
          "1: use crate::common::{is_whitespace_char, XmlVersion};",
          "8:     DeclarationSubstate, Encountered, PullParser, QualifiedNameTarget, Result, State,",
          "9:     DEFAULT_VERSION,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             DeclarationSubstate::AfterEncoding => match t {",
          "114:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncodingValue)),",
          "115:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "117:             },",
          "119:             DeclarationSubstate::InsideEncodingValue => self.read_attribute_value(t, |this, value| {",
          "",
          "[Removed Lines]",
          "116:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "116:                 _ => unexpected_token!(t),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:             DeclarationSubstate::BeforeStandaloneDecl => match t {",
          "125:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "126:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "129:             },",
          "131:             DeclarationSubstate::InsideStandaloneDecl => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "",
          "[Removed Lines]",
          "127:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "128:                 _ => unexpected_token!(t)",
          "",
          "[Added Lines]",
          "127:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "128:                 _ => unexpected_token!(t),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:             DeclarationSubstate::AfterStandaloneDeclValue => match t {",
          "166:                 Token::ProcessingInstructionEnd => self.emit_start_document(),",
          "170:         }",
          "171:     }",
          "173: }",
          "",
          "[Removed Lines]",
          "167:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "168:                 _ => unexpected_token!(t)",
          "169:             }",
          "",
          "[Added Lines]",
          "167:                 Token::Character(c) if is_whitespace_char(c) => None, // skip whitespace",
          "168:                 _ => unexpected_token!(t),",
          "169:             },",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: impl PullParser {",
          "6:     pub fn inside_doctype(&mut self, t: Token, substate: DoctypeSubstate) -> Option<Result> {",
          "7:         match substate {",
          "8:             DoctypeSubstate::Outside => match t {",
          "12:                 Token::MarkupDeclarationStart => {",
          "13:                     self.buf.clear();",
          "14:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::InsideName))",
          "",
          "[Removed Lines]",
          "1: use crate::{reader::lexer::Token, common::{is_whitespace_char, is_name_start_char, is_name_char}};",
          "3: use super::{PullParser, Result, State, DoctypeSubstate, QuoteToken};",
          "9:                 Token::TagEnd => {",
          "10:                     self.into_state_continue(State::OutsideTag)",
          "11:                 },",
          "",
          "[Added Lines]",
          "1: use crate::{",
          "2:     common::{is_name_char, is_name_start_char, is_whitespace_char},",
          "3:     reader::lexer::Token,",
          "4: };",
          "6: use super::{DoctypeSubstate, PullParser, QuoteToken, Result, State};",
          "12:                 Token::TagEnd => self.into_state_continue(State::OutsideTag),",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs": [
          "File: src/reader/parser/inside_opening_tag.rs -> src/reader/parser/inside_opening_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::common::is_name_start_char;",
          "3: use crate::namespace;",
          "5: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "[Added Lines]",
          "3: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use crate::reader::lexer::Token;",
          "6: use super::{",
          "9: };",
          "11: impl PullParser {",
          "",
          "[Removed Lines]",
          "7:     ClosingTagSubstate, OpeningTagSubstate, ProcessingInstructionSubstate, PullParser, Result,",
          "8:     State, DoctypeSubstate, Encountered,",
          "",
          "[Added Lines]",
          "7:     ClosingTagSubstate, DoctypeSubstate, Encountered, OpeningTagSubstate,",
          "8:     ProcessingInstructionSubstate, PullParser, Result, State,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:                 }",
          "29:             }",
          "38:             Token::ReferenceEnd if self.depth() > 0 => { // Semi-colon in a text outside an entity",
          "39:                 self.inside_whitespace = false;",
          "",
          "[Removed Lines]",
          "31:             _ if t.contains_char_data() && self.depth() == 0 =>",
          "32:                 Some(self_error!(self; \"Unexpected characters outside the root element: {}\", t)),",
          "34:             Token::CDataEnd => {",
          "35:                 Some(self_error!(self; \"]]> in text\"))",
          "36:             },",
          "",
          "[Added Lines]",
          "31:             _ if t.contains_char_data() && self.depth() == 0 => {",
          "32:                 Some(self_error!(self; \"Unexpected characters outside the root element: {}\", t))",
          "33:             }",
          "35:             Token::CDataEnd => Some(self_error!(self; \"]]> in text\")),",
          "",
          "---------------"
        ],
        "src/util.rs||src/util.rs": [
          "File: src/util.rs -> src/util.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "213: #[cfg(test)]",
          "214: mod tests {",
          "217:     #[test]",
          "218:     fn test_next_char_from() {",
          "",
          "[Removed Lines]",
          "215:     use super::{CharReader, Encoding, CharReadError};",
          "",
          "[Added Lines]",
          "215:     use super::{CharReadError, CharReader, Encoding};",
          "",
          "---------------"
        ],
        "src/writer/mod.rs||src/writer/mod.rs": [
          "File: src/writer/mod.rs -> src/writer/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:                 self.emitter.namespace_stack_mut().try_pop();",
          "64:                 r",
          "65:             }",
          "72:         }",
          "73:     }",
          "",
          "[Removed Lines]",
          "66:             XmlEvent::Comment(content) =>",
          "67:                 self.emitter.emit_comment(&mut self.sink, content),",
          "68:             XmlEvent::CData(content) =>",
          "69:                 self.emitter.emit_cdata(&mut self.sink, content),",
          "70:             XmlEvent::Characters(content) =>",
          "71:                 self.emitter.emit_characters(&mut self.sink, content)",
          "",
          "[Added Lines]",
          "66:             XmlEvent::Comment(content) => self.emitter.emit_comment(&mut self.sink, content),",
          "67:             XmlEvent::CData(content) => self.emitter.emit_cdata(&mut self.sink, content),",
          "68:             XmlEvent::Characters(content) => self.emitter.emit_characters(&mut self.sink, content),",
          "",
          "---------------"
        ],
        "tests/xmlconf.rs||tests/xmlconf.rs": [
          "File: tests/xmlconf.rs -> tests/xmlconf.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use std::collections::HashMap;",
          "7: use std::fs::File;",
          "8: use std::io::BufReader;",
          "9: use std::process::Command;",
          "10: use std::sync::Mutex;",
          "13: use xml::reader::XmlEvent;",
          "15: static UNZIP: Mutex<()> = Mutex::new(());",
          "",
          "[Removed Lines]",
          "3: use xml::ParserConfig;",
          "4: use std::collections::HashSet;",
          "5: use std::path::Path;",
          "12: use xml::EventReader;",
          "",
          "[Added Lines]",
          "4: use std::collections::HashSet;",
          "7: use std::path::Path;",
          "10: use xml::ParserConfig;",
          "13: use xml::EventReader;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "014d808be900c85a0afc5ccdfe668be040d175aa",
      "candidate_info": {
        "commit_hash": "014d808be900c85a0afc5ccdfe668be040d175aa",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/014d808be900c85a0afc5ccdfe668be040d175aa",
        "files": [
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs",
          "tests/errata2e.fail.txt",
          "tests/oasis.fail.txt",
          "tests/sun-not-wf.fail.txt",
          "tests/sun-valid.fail.txt",
          "tests/xmltest.fail.txt"
        ],
        "message": "Parse predefined entities",
        "before_after_code_files": [
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             '<'                        => self.move_to(State::TagStarted),",
          "591:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "592:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "594:         }",
          "595:     }",
          "",
          "[Removed Lines]",
          "593:             _ => Ok(None),",
          "",
          "[Added Lines]",
          "593:             '\"'                        => Ok(Some(Token::DoubleQuote)),",
          "594:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "595:             _                          => Ok(Some(Token::Character(c))),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "886:             Token::Character('a')",
          "887:             Token::TagEnd",
          "888:             Token::DoctypeStart",
          "889:             Token::TagEnd",
          "890:             Token::Character(' ')",
          "891:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891:             Token::Character(' ')",
          "892:             Token::Character('a')",
          "893:             Token::Character('b')",
          "894:             Token::Character(' ')",
          "895:             Token::Character('x')",
          "896:             Token::Character('x')",
          "897:             Token::Character(' ')",
          "898:             Token::Character('z')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "925:             Token::Character('a')",
          "926:             Token::TagEnd",
          "927:             Token::DoctypeStart",
          "928:             Token::MarkupDeclarationStart",
          "929:             Token::Character('E')",
          "930:             Token::Character('L')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "938:             Token::Character(' ')",
          "939:             Token::Character('a')",
          "940:             Token::Character('b')",
          "941:             Token::Character('[')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "943:             Token::Character('>')",
          "944:             Token::DoubleQuote",
          "945:             Token::TagEnd",
          "946:             Token::TagEnd",
          "947:             Token::Character(' ')",
          "948:         );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "960:             Token::Character(' ')",
          "961:             Token::Character(']')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "956:         );",
          "957:         assert_oks!(for lex and buf ;",
          "958:             Token::DoctypeStart",
          "959:             Token::MarkupDeclarationStart",
          "960:             Token::Character('E')",
          "961:             Token::Character('L')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "975:             Token::Character(' ')",
          "976:             Token::Character('a')",
          "977:             Token::Character(' ')",
          "978:             Token::Character('[')",
          "979:             Token::Character('\\n')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "971:             Token::Character('N')",
          "972:             Token::Character('Y')",
          "973:             Token::TagEnd",
          "974:             Token::CommentStart",
          "975:             Token::Character(' ')",
          "976:             Token::Character('<')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "981:             Token::Character('?')",
          "982:             Token::Character('>')",
          "983:             Token::CommentEnd",
          "984:             Token::ProcessingInstructionStart",
          "985:             Token::Character('p')",
          "986:             Token::Character('i')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1006:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "988:             Token::TagEnd // not really",
          "989:             Token::Character(' ')",
          "990:             Token::ProcessingInstructionEnd",
          "991:             Token::TagEnd // DTD",
          "992:         );",
          "993:         assert_none!(for lex and buf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1014:             Token::Character(' ')",
          "1015:             Token::Character('\\n')",
          "1016:             Token::Character(']')",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: #[derive(Copy, Clone, PartialEq)]",
          "194: pub enum DoctypeSubstate {",
          "195:     Outside,",
          "196:     InsideName,",
          "197:     BeforeEntityName,",
          "198:     EntityName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     String,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:     EntityValue,",
          "201:     NumericReferenceStart,",
          "202:     NumericReference,",
          "203:     SkipDeclaration,",
          "204: }",
          "206: #[derive(Copy, Clone, PartialEq)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:     PEReferenceInValue,",
          "206:     PEReferenceInDtd,",
          "208:     PEReferenceDefinitionStart,",
          "209:     PEReferenceDefinition,",
          "211:     Comment,",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:             DoctypeSubstate::Outside => match t {",
          "9:                 Token::TagEnd => {",
          "10:                     self.into_state_continue(State::OutsideTag)",
          "13:                 Token::MarkupDeclarationStart => {",
          "14:                     self.buf.clear();",
          "15:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::InsideName))",
          "16:                 },",
          "18:                 _ => None,",
          "19:             },",
          "20:             DoctypeSubstate::InsideName => match t {",
          "21:                 Token::Character(c @ 'A'..='Z') => {",
          "22:                     self.buf.push(c);",
          "",
          "[Removed Lines]",
          "11:                 }",
          "",
          "[Added Lines]",
          "11:                 },",
          "16:                 Token::Character('%') => {",
          "17:                     self.data.ref_data.clear();",
          "18:                     self.data.ref_data.push('%');",
          "19:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::PEReferenceInDtd))",
          "20:                 },",
          "21:                 Token::CommentStart => {",
          "22:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Comment))",
          "23:                 },",
          "24:                 Token::SingleQuote | Token::DoubleQuote => {",
          "26:                     self.data.quote = Some(super::QuoteToken::from_token(&t));",
          "27:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::String))",
          "28:                 },",
          "29:                 Token::CDataEnd | Token::CDataStart => Some(self_error!(self; \"Unexpected token {}\", t)),",
          "33:             DoctypeSubstate::String => match t {",
          "34:                 Token::SingleQuote if self.data.quote != Some(QuoteToken::SingleQuoteToken) => { None },",
          "35:                 Token::DoubleQuote if self.data.quote != Some(QuoteToken::DoubleQuoteToken) => { None },",
          "36:                 Token::SingleQuote | Token::DoubleQuote => {",
          "37:                     self.data.quote = None;",
          "38:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Outside))",
          "39:                 },",
          "40:                 _ => None,",
          "41:             },",
          "42:             DoctypeSubstate::Comment => match t {",
          "43:                 Token::CommentEnd => {",
          "44:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Outside))",
          "45:                 },",
          "46:                 _ => None,",
          "47:             },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:                 self.data.name.clear();",
          "37:                 match t {",
          "38:                     Token::Character(c) if is_whitespace_char(c) => None,",
          "41:                     Token::Character(c) if is_name_start_char(c) => {",
          "42:                         self.data.name.push(c);",
          "43:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityName))",
          "",
          "[Removed Lines]",
          "40:                     Token::Character('%') => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)),",
          "",
          "[Added Lines]",
          "67:                     Token::Character('%') => { // % is for PEDecl",
          "68:                         self.data.name.push('%');",
          "69:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::PEReferenceDefinitionStart))",
          "70:                     },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:                 Token::SingleQuote if self.data.quote != Some(QuoteToken::SingleQuoteToken) => { self.buf.push('\\''); None },",
          "78:                 Token::DoubleQuote if self.data.quote != Some(QuoteToken::DoubleQuoteToken) => { self.buf.push('\"'); None },",
          "79:                 Token::SingleQuote | Token::DoubleQuote => {",
          "80:                     let name = self.data.take_name();",
          "81:                     let val = self.take_buf();",
          "83:                     self.entities.entry(name).or_insert(val); // First wins",
          "84:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)) // FIXME",
          "85:                 },",
          "87:                     self.data.ref_data.clear();",
          "88:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::NumericReferenceStart))",
          "89:                 },",
          "90:                 Token::Character(c) => {",
          "91:                     self.buf.push(c);",
          "92:                     None",
          "93:                 },",
          "94:                 _ => Some(self_error!(self; \"Expected entity value, found {}\", t)),",
          "95:             },",
          "96:             DoctypeSubstate::NumericReferenceStart => match t {",
          "97:                 Token::Character('#') => {",
          "98:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::NumericReference))",
          "",
          "[Removed Lines]",
          "82:                     self.data.quote = None;",
          "86:                 Token::Character('&') => {",
          "",
          "[Added Lines]",
          "110:                     self.data.quote = None;",
          "116:                 Token::ReferenceStart | Token::Character('&') => {",
          "120:                 Token::Character('%') => {",
          "121:                     self.data.ref_data.clear();",
          "122:                     self.data.ref_data.push('%'); // include literal % in the name to distinguish from regular entities",
          "123:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::PEReferenceInValue))",
          "124:                 },",
          "131:             DoctypeSubstate::PEReferenceDefinitionStart => match t {",
          "132:                 Token::Character(c) if is_whitespace_char(c) => {",
          "133:                     None",
          "134:                 },",
          "135:                 Token::Character(c) if is_name_start_char(c) => {",
          "136:                     debug_assert_eq!(self.data.name, \"%\");",
          "137:                     self.data.name.push(c);",
          "138:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::PEReferenceDefinition))",
          "139:                 },",
          "140:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "141:             },",
          "142:             DoctypeSubstate::PEReferenceDefinition => match t {",
          "143:                 Token::Character(c) if is_name_char(c) => {",
          "144:                     self.data.name.push(c);",
          "145:                     None",
          "146:                 },",
          "147:                 Token::Character(c) if is_whitespace_char(c) => {",
          "148:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::BeforeEntityValue))",
          "149:                 },",
          "150:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "151:             },",
          "152:             DoctypeSubstate::PEReferenceInDtd => match t {",
          "153:                 Token::Character(c) if is_name_char(c) => {",
          "154:                     self.data.ref_data.push(c);",
          "155:                     None",
          "156:                 },",
          "157:                 Token::ReferenceEnd | Token::Character(';') => {",
          "158:                     let name = self.data.take_ref_data();",
          "159:                     match self.entities.get(&name) {",
          "160:                         Some(ent) => {",
          "161:                             if let Err(e) = self.lexer.reparse(ent) {",
          "162:                                 return Some(Err(e));",
          "163:                             }",
          "164:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Outside))",
          "165:                         },",
          "166:                         None => Some(self_error!(self; \"Undefined PE entity {}\", name)),",
          "167:                     }",
          "168:                 },",
          "169:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "170:             },",
          "171:             DoctypeSubstate::PEReferenceInValue => match t {",
          "172:                 Token::Character(c) if is_name_char(c) => {",
          "173:                     self.data.ref_data.push(c);",
          "174:                     None",
          "175:                 },",
          "176:                 Token::ReferenceEnd | Token::Character(';') => {",
          "177:                     let name = self.data.take_ref_data();",
          "178:                     match self.entities.get(&name) {",
          "179:                         Some(ent) => {",
          "180:                             self.buf.push_str(ent);",
          "181:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "182:                         },",
          "183:                         None => Some(self_error!(self; \"Undefined PE entity {}\", name)),",
          "184:                     }",
          "185:                 },",
          "186:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "187:             },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:                 Token::Character(c) => {",
          "101:                     self.buf.push('&');",
          "102:                     self.buf.push(c);",
          "103:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "104:                 },",
          "105:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "106:             },",
          "107:             DoctypeSubstate::NumericReference => match t {",
          "109:                     let r = self.data.take_ref_data();",
          "111:                     match self.numeric_reference_from_str(&r) {",
          "",
          "[Removed Lines]",
          "108:                 Token::Character(';') => {",
          "",
          "[Added Lines]",
          "201:                 Token::ReferenceEnd | Token::Character(';') => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf4222887c9e2df2c40ec40c43e3d883be8dfced",
      "candidate_info": {
        "commit_hash": "cf4222887c9e2df2c40ec40c43e3d883be8dfced",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/cf4222887c9e2df2c40ec40c43e3d883be8dfced",
        "files": [
          "src/reader/lexer.rs",
          "src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs",
          "tests/event_reader.rs",
          "tests/xmlconf.rs"
        ],
        "message": "Make lexer aware of PIs",
        "before_after_code_files": [
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "tests/event_reader.rs||tests/event_reader.rs",
          "tests/xmlconf.rs||tests/xmlconf.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
            "tests/xmlconf.rs||tests/xmlconf.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     InsideComment,",
          "172:     InsideCdata,",
          "173: }",
          "175: #[derive(Copy, Clone)]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:     InsideProcessingInstruction,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:             State::CommentStarted | State::CDataStarted(_)| State::DoctypeStarted(_) |",
          "333:             State::CommentClosing(ClosingSubstate::Second) |",
          "334:             State::InsideComment | State::InsideCdata |",
          "335:             State::DoctypeFinishing(_) =>",
          "336:                 Err(self.error(\"Unexpected end of stream\")),",
          "339:             State::EmptyTagClosing =>",
          "340:                 Ok(Some(Token::Character('/'))),",
          "341:             State::CommentClosing(ClosingSubstate::First) =>",
          "",
          "[Removed Lines]",
          "337:             State::ProcessingInstructionClosing =>",
          "338:                 Ok(Some(Token::Character('?'))),",
          "",
          "[Added Lines]",
          "337:             State::InsideProcessingInstruction | State::ProcessingInstructionClosing |",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376:             State::CDataStarted(s)                => self.cdata_started(c, s),",
          "377:             State::DoctypeStarted(s)              => self.doctype_started(c, s),",
          "378:             State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),",
          "380:             State::EmptyTagClosing                => self.empty_element_closing(c),",
          "381:             State::CommentClosing(s)              => self.comment_closing(c, s),",
          "382:             State::CDataClosing(s)                => self.cdata_closing(c, s),",
          "383:             State::InsideComment                  => self.inside_comment_state(c),",
          "384:             State::InsideCdata                    => self.inside_cdata(c),",
          "385:         }",
          "386:     }",
          "",
          "[Removed Lines]",
          "379:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
          "",
          "[Added Lines]",
          "385:             State::InsideProcessingInstruction    => self.inside_processing_instruction(c),",
          "386:             State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "421:             '='                        => Ok(Some(Token::EqualsSign)),",
          "422:             '\"'                        => Ok(Some(Token::DoubleQuote)),",
          "423:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "425:             ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),",
          "426:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "427:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "",
          "[Removed Lines]",
          "424:             '?'                        => self.move_to(State::ProcessingInstructionClosing),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "438:         }",
          "439:     }",
          "441:     fn inside_comment_state(&mut self, c: char) -> Result {",
          "442:         match c {",
          "443:             '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442:     fn inside_processing_instruction(&mut self, c: char) -> Result {",
          "443:         match c {",
          "444:             '?'                        => self.move_to(State::ProcessingInstructionClosing),",
          "445:             '<'                        => Ok(Some(Token::OpeningTagStart)),",
          "446:             '>'                        => Ok(Some(Token::TagEnd)),",
          "447:             '/'                        => Ok(Some(Token::ClosingTagStart)),",
          "448:             '='                        => Ok(Some(Token::EqualsSign)),",
          "449:             '\"'                        => Ok(Some(Token::DoubleQuote)),",
          "450:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "451:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "452:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "453:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "454:             _                          => Ok(Some(Token::Character(c)))",
          "455:         }",
          "456:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "450:     fn tag_opened(&mut self, c: char) -> Result {",
          "451:         match c {",
          "453:             '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),",
          "454:             '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),",
          "455:             _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),",
          "",
          "[Removed Lines]",
          "452:             '?'                        => self.move_to_with(State::Normal, Token::ProcessingInstructionStart),",
          "",
          "[Added Lines]",
          "469:             '?'                        => self.move_to_with(State::InsideProcessingInstruction, Token::ProcessingInstructionStart),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "516:     fn processing_instruction_closing(&mut self, c: char) -> Result {",
          "517:         match c {",
          "518:             '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),",
          "520:         }",
          "521:     }",
          "",
          "[Removed Lines]",
          "519:             _ => self.move_to_with_unread(State::Normal, &[c], Token::Character('?')),",
          "",
          "[Added Lines]",
          "536:             _ => self.move_to_with_unread(State::InsideProcessingInstruction, &[c], Token::Character('?')),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "594:         (Lexer::new(), BufReader::new(Cursor::new(s.to_owned().into_bytes())))",
          "595:     }",
          "597:     #[test]",
          "598:     fn simple_lexer_test() {",
          "599:         let (mut lex, mut buf) = make_lex_and_buf(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "614:     #[test]",
          "615:     fn tricky_pi() {",
          "616:         let (mut lex, mut buf) = make_lex_and_buf(",
          "617:             r#\"<?x<!-- &??><x>\"#",
          "618:         );",
          "620:         assert_oks!(for lex and buf ;",
          "621:             Token::ProcessingInstructionStart",
          "622:             Token::Character('x')",
          "623:             Token::OpeningTagStart // processing of <?xml?> relies on the extra tokens",
          "624:             Token::Character('!')",
          "625:             Token::Character('-')",
          "626:             Token::Character('-')",
          "627:             Token::Whitespace(' ')",
          "628:             Token::ReferenceStart",
          "629:             Token::Character('?')",
          "630:             Token::ProcessingInstructionEnd",
          "631:             Token::OpeningTagStart",
          "632:             Token::Character('x')",
          "633:             Token::TagEnd",
          "634:         );",
          "635:         assert_none!(for lex and buf);",
          "636:     }",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
          "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:                         _ => {",
          "61:                             self.data.name = name;",
          "62:                             self.into_state_continue(State::InsideProcessingInstruction(ProcessingInstructionSubstate::PIInsideData))",
          "63:                         }",
          "",
          "[Removed Lines]",
          "60:                             self.lexer.disable_errors();  // data is arbitrary, so disable errors",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                     self.push_pos();",
          "54:                 }",
          "57:                 self.into_state_continue(State::InsideCData)",
          "58:             }",
          "",
          "[Removed Lines]",
          "56:                 self.lexer.disable_errors();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:                     }",
          "117:                     Token::CDataStart => {",
          "120:                         self.into_state(State::InsideCData, next_event)",
          "121:                     }",
          "",
          "[Removed Lines]",
          "119:                         self.lexer.disable_errors();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/event_reader.rs||tests/event_reader.rs": [
          "File: tests/event_reader.rs -> tests/event_reader.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: fn eof_1() {",
          "182:     test(",
          "183:         br#\"<?xml\"#,",
          "185:         ParserConfig::new(),",
          "186:         false,",
          "187:     );",
          "",
          "[Removed Lines]",
          "184:         br#\"1:6 Unexpected end of stream: no root element found\"#,",
          "",
          "[Added Lines]",
          "184:         br#\"1:6 Unexpected end of stream\"#,",
          "",
          "---------------"
        ],
        "tests/xmlconf.rs||tests/xmlconf.rs": [
          "File: tests/xmlconf.rs -> tests/xmlconf.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:         \"o-p68pass1\", // Valid entity references.  Also ensures that a charref to           '&' isn't interpreted as an entity reference open delimiter",
          "283:         \"o-p04pass1\", // names with all valid ASCII characters, and one from each               other class in NameChar",
          "284:         \"o-p05pass1\", // various valid Name constructions",
          "286:         \"o-p01fail1\", // S cannot occur before the prolog",
          "287:         \"o-p01fail2\", // comments cannot occur before the prolog",
          "288:         \"o-p01fail3\", // only one document element",
          "",
          "[Removed Lines]",
          "285:         \"o-p16pass1\", // Valid form of Processing Instruction. Shows that whitespace character data is valid before end of processing instruction.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01354bcc46b535c74945c5617b248ff7d031803c",
      "candidate_info": {
        "commit_hash": "01354bcc46b535c74945c5617b248ff7d031803c",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/01354bcc46b535c74945c5617b248ff7d031803c",
        "files": [
          "src/common.rs",
          "src/reader/lexer.rs",
          "src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs"
        ],
        "message": "Reduce token size",
        "before_after_code_files": [
          "src/common.rs||src/common.rs",
          "src/reader/lexer.rs||src/reader/lexer.rs",
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
          "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs",
          "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs",
          "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs",
          "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ],
          "candidate": [
            "src/reader/lexer.rs||src/reader/lexer.rs",
            "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs",
            "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/common.rs||src/common.rs": [
          "File: src/common.rs -> src/common.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: #[must_use]",
          "103: pub fn is_whitespace_char(c: char) -> bool {",
          "108: }",
          "",
          "[Removed Lines]",
          "104:     match c {",
          "105:         '\\x20' | '\\x09' | '\\x0d' | '\\x0a' => true,",
          "106:         _ => false,",
          "107:     }",
          "",
          "[Added Lines]",
          "103: #[inline]",
          "105:     matches!(c, '\\x20' | '\\x0a' | '\\x09' | '\\x0d')",
          "",
          "---------------"
        ],
        "src/reader/lexer.rs||src/reader/lexer.rs": [
          "File: src/reader/lexer.rs -> src/reader/lexer.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     CommentEnd,",
          "38:     Character(char),",
          "42:     EqualsSign,",
          "",
          "[Removed Lines]",
          "40:     Whitespace(char),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     #[cold]",
          "61:     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "62:         match *self {",
          "64:             other => match other {",
          "65:                 Token::OpeningTagStart            => \"<\",",
          "66:                 Token::ProcessingInstructionStart => \"<?\",",
          "",
          "[Removed Lines]",
          "63:             Token::Character(c) | Token::Whitespace(c) => c.fmt(f),",
          "",
          "[Added Lines]",
          "61:             Token::Character(c) => c.fmt(f),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:             Some(s) => { target.push_str(s); }",
          "114:             None => {",
          "115:                 match *self {",
          "117:                     _ => unreachable!()",
          "118:                 }",
          "119:             }",
          "",
          "[Removed Lines]",
          "116:                     Token::Character(c) | Token::Whitespace(c) => target.push(c),",
          "",
          "[Added Lines]",
          "114:                     Token::Character(c) => target.push(c),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     #[inline]",
          "126:     pub fn contains_char_data(&self) -> bool {",
          "127:         match *self {",
          "129:             Token::TagEnd | Token::EqualsSign | Token::DoubleQuote | Token::SingleQuote | Token::CDataEnd |",
          "130:             Token::ProcessingInstructionEnd | Token::EmptyTagEnd => true,",
          "131:             _ => false",
          "132:         }",
          "133:     }",
          "140: }",
          "142: #[derive(Copy, Clone)]",
          "",
          "[Removed Lines]",
          "128:             Token::Whitespace(_) | Token::Character(_) | Token::CommentEnd |",
          "136:     #[inline]",
          "137:     pub fn is_whitespace(&self) -> bool {",
          "138:         matches!(self, Token::Whitespace(_))",
          "139:     }",
          "",
          "[Added Lines]",
          "126:             Token::Character(_) | Token::CommentEnd |",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:             ']'                        => self.move_to(State::InvalidCDataClosing(ClosingSubstate::First)),",
          "440:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "441:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "443:             _                          => Ok(Some(Token::Character(c)))",
          "444:         }",
          "445:     }",
          "",
          "[Removed Lines]",
          "442:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:     fn inside_cdata(&mut self, c: char) -> Result {",
          "448:         match c {",
          "449:             ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),",
          "451:             _                          => Ok(Some(Token::Character(c)))",
          "452:         }",
          "453:     }",
          "",
          "[Removed Lines]",
          "450:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "464:             '\\''                       => Ok(Some(Token::SingleQuote)),",
          "465:             '&'                        => Ok(Some(Token::ReferenceStart)),",
          "466:             ';'                        => Ok(Some(Token::ReferenceEnd)),",
          "468:             _                          => Ok(Some(Token::Character(c)))",
          "469:         }",
          "470:     }",
          "",
          "[Removed Lines]",
          "467:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "472:     fn inside_comment_state(&mut self, c: char) -> Result {",
          "473:         match c {",
          "474:             '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),",
          "476:             _                          => Ok(Some(Token::Character(c)))",
          "477:         }",
          "478:     }",
          "",
          "[Removed Lines]",
          "475:             _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "675:             Token::Character('!')",
          "676:             Token::Character('-')",
          "677:             Token::Character('-')",
          "679:             Token::ReferenceStart",
          "680:             Token::Character('?')",
          "681:             Token::ProcessingInstructionEnd",
          "",
          "[Removed Lines]",
          "678:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "666:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "695:         assert_oks!(for lex and buf ;",
          "696:             Token::OpeningTagStart",
          "697:             Token::Character('a')",
          "699:             Token::Character('p')",
          "700:             Token::EqualsSign",
          "701:             Token::SingleQuote",
          "702:             Token::Character('q')",
          "703:             Token::SingleQuote",
          "704:             Token::TagEnd",
          "706:             Token::Character('x')",
          "707:             Token::OpeningTagStart",
          "708:             Token::Character('b')",
          "710:             Token::Character('z')",
          "711:             Token::EqualsSign",
          "712:             Token::DoubleQuote",
          "",
          "[Removed Lines]",
          "698:             Token::Whitespace(' ')",
          "705:             Token::Whitespace(' ')",
          "709:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "686:             Token::Character(' ')",
          "693:             Token::Character(' ')",
          "697:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "714:             Token::DoubleQuote",
          "715:             Token::TagEnd",
          "716:             Token::Character('d')",
          "718:             Token::ClosingTagStart",
          "719:             Token::Character('b')",
          "720:             Token::TagEnd",
          "",
          "[Removed Lines]",
          "717:             Token::Whitespace('\\t')",
          "",
          "[Added Lines]",
          "705:             Token::Character('\\t')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "724:             Token::OpeningTagStart",
          "725:             Token::Character('p')",
          "726:             Token::EmptyTagEnd",
          "728:             Token::ProcessingInstructionStart",
          "729:             Token::Character('n')",
          "730:             Token::Character('m')",
          "732:             Token::ProcessingInstructionEnd",
          "734:             Token::CommentStart",
          "736:             Token::Character('a')",
          "738:             Token::Character('c')",
          "740:             Token::CommentEnd",
          "742:             Token::ReferenceStart",
          "743:             Token::Character('n')",
          "744:             Token::Character('b')",
          "",
          "[Removed Lines]",
          "727:             Token::Whitespace(' ')",
          "731:             Token::Whitespace(' ')",
          "733:             Token::Whitespace(' ')",
          "735:             Token::Whitespace(' ')",
          "737:             Token::Whitespace(' ')",
          "739:             Token::Whitespace(' ')",
          "741:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "715:             Token::Character(' ')",
          "719:             Token::Character(' ')",
          "721:             Token::Character(' ')",
          "723:             Token::Character(' ')",
          "725:             Token::Character(' ')",
          "727:             Token::Character(' ')",
          "729:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "760:             Token::Character('x')",
          "761:             Token::Character('!')",
          "762:             Token::Character('+')",
          "764:             Token::Character('/')",
          "765:             Token::Character('/')",
          "767:             Token::Character('-')",
          "768:             Token::Character('|')",
          "770:             Token::Character(']')",
          "771:             Token::Character('z')",
          "772:             Token::Character(']')",
          "",
          "[Removed Lines]",
          "763:             Token::Whitespace(' ')",
          "766:             Token::Whitespace(' ')",
          "769:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "751:             Token::Character(' ')",
          "754:             Token::Character(' ')",
          "757:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "787:             Token::TagEnd",
          "788:             Token::CDataStart",
          "789:             Token::Character('x')",
          "791:             Token::Character('y')",
          "793:             Token::Character('?')",
          "794:             Token::CDataEnd",
          "796:             Token::ClosingTagStart",
          "797:             Token::Character('a')",
          "798:             Token::TagEnd",
          "",
          "[Removed Lines]",
          "790:             Token::Whitespace(' ')",
          "792:             Token::Whitespace(' ')",
          "795:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "778:             Token::Character(' ')",
          "780:             Token::Character(' ')",
          "783:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "809:         assert_oks!(for lex and buf ;",
          "810:             Token::CDataStart",
          "811:             Token::Character(']')",
          "813:             Token::Character('>')",
          "815:             Token::Character(']')",
          "816:             Token::Character('>')",
          "818:             Token::CDataEnd",
          "819:             Token::CommentStart",
          "820:             Token::CommentEnd",
          "",
          "[Removed Lines]",
          "812:             Token::Whitespace(' ')",
          "814:             Token::Whitespace(' ')",
          "817:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "800:             Token::Character(' ')",
          "802:             Token::Character(' ')",
          "805:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "838:             Token::TagEnd",
          "839:             Token::DoctypeStart",
          "840:             Token::TagEnd",
          "842:         );",
          "843:         assert_none!(for lex and buf);",
          "844:     }",
          "",
          "[Removed Lines]",
          "841:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "829:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "853:             Token::Character('a')",
          "854:             Token::TagEnd",
          "855:             Token::CommentStart",
          "857:             Token::Character('C')",
          "859:             Token::Character('-')",
          "860:             Token::Character('>')",
          "861:             Token::CommentEnd",
          "",
          "[Removed Lines]",
          "856:             Token::Whitespace(' ')",
          "858:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "844:             Token::Character(' ')",
          "846:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "881:             Token::DoubleQuote",
          "882:             Token::TagEnd",
          "883:             Token::TagEnd",
          "885:         );",
          "886:         assert_none!(for lex and buf);",
          "887:     }",
          "",
          "[Removed Lines]",
          "884:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "872:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "896:             Token::MarkupDeclarationStart",
          "897:             Token::TagEnd",
          "898:             Token::CommentStart",
          "900:             Token::Character('<')",
          "901:             Token::Character('?')",
          "902:             Token::Character('n')",
          "",
          "[Removed Lines]",
          "899:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "887:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "908:             Token::ProcessingInstructionStart",
          "909:             Token::Character('p')",
          "910:             Token::Character('i')",
          "912:             Token::TagEnd // not really",
          "914:             Token::ProcessingInstructionEnd",
          "915:             Token::TagEnd // DTD",
          "916:         );",
          "",
          "[Removed Lines]",
          "911:             Token::Whitespace(' ')",
          "913:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "899:             Token::Character(' ')",
          "901:             Token::Character(' ')",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "984:             Token::Character('<')",
          "985:             Token::Character('!')",
          "986:             Token::Character('-')",
          "988:         );",
          "989:         assert_none!(for lex and buf);",
          "990:     }",
          "",
          "[Removed Lines]",
          "987:             Token::Whitespace('\\t')",
          "",
          "[Added Lines]",
          "975:             Token::Character('\\t')",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1025:     #[test]",
          "1026:     fn token_size() {",
          "1028:         assert_eq!(2, std::mem::size_of::<super::State>());",
          "1029:     }",
          "",
          "[Removed Lines]",
          "1027:         assert_eq!(8, std::mem::size_of::<Token>());",
          "",
          "[Added Lines]",
          "1015:         assert_eq!(4, std::mem::size_of::<Token>());",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1061:             Token::Character('F')",
          "1062:             Token::Character('o')",
          "1063:             Token::Character('o')",
          "1065:             Token::Character('[')",
          "1066:             Token::Character('B')",
          "1067:             Token::Character('a')",
          "",
          "[Removed Lines]",
          "1064:             Token::Whitespace(' ')",
          "",
          "[Added Lines]",
          "1052:             Token::Character(' ')",
          "",
          "---------------"
        ],
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::io::prelude::*;",
          "6: use crate::attribute::OwnedAttribute;",
          "8: use crate::name::OwnedName;",
          "9: use crate::namespace::NamespaceStack;",
          "",
          "[Removed Lines]",
          "7: use crate::common::{self, is_name_char, is_name_start_char, Position, TextPosition, XmlVersion};",
          "",
          "[Added Lines]",
          "7: use crate::common::{self, is_name_char, is_name_start_char, Position, TextPosition, XmlVersion, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:             Token::TagEnd if target == QualifiedNameTarget::OpeningTagNameTarget ||",
          "428:                       target == QualifiedNameTarget::ClosingTagNameTarget => invoke_callback(self, t),",
          "432:             _ => Some(self_error!(self; \"Unexpected token inside qualified name: {}\", t))",
          "433:         }",
          "",
          "[Removed Lines]",
          "430:             Token::Whitespace(_) => invoke_callback(self, t),",
          "",
          "[Added Lines]",
          "430:             Token::Character(c) if is_whitespace_char(c) => invoke_callback(self, t),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:     fn read_attribute_value<F>(&mut self, t: Token, on_value: F) -> Option<Result>",
          "442:       where F: Fn(&mut PullParser, String) -> Option<Result> {",
          "443:         match t {",
          "446:             Token::DoubleQuote | Token::SingleQuote => match self.data.quote {",
          "447:                 None => {  // Entered attribute value",
          "",
          "[Removed Lines]",
          "444:             Token::Whitespace(_) if self.data.quote.is_none() => None,  // skip leading whitespace",
          "",
          "[Added Lines]",
          "444:             Token::Character(c) if self.data.quote.is_none() && is_whitespace_char(c) => None,  // skip leading whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_cdata.rs||src/reader/parser/inside_cdata.rs": [
          "File: src/reader/parser/inside_cdata.rs -> src/reader/parser/inside_cdata.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::reader::lexer::Token;",
          "4: use super::{PullParser, Result, State};",
          "",
          "[Removed Lines]",
          "1: use crate::reader::events::XmlEvent;",
          "",
          "[Added Lines]",
          "1: use crate::{reader::events::XmlEvent, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:                 self.into_state(State::OutsideTag, event)",
          "17:             }",
          "24:             Token::Character(c) => {",
          "26:                 self.buf.push(c);",
          "27:                 None",
          "28:             }",
          "",
          "[Removed Lines]",
          "19:             Token::Whitespace(c) => {",
          "20:                 self.buf.push(c);",
          "21:                 None",
          "22:             }",
          "25:                 self.inside_whitespace = false;",
          "",
          "[Added Lines]",
          "20:                 if !is_whitespace_char(c) {",
          "21:                     self.inside_whitespace = false;",
          "22:                 }",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_closing_tag_name.rs||src/reader/parser/inside_closing_tag_name.rs": [
          "File: src/reader/parser/inside_closing_tag_name.rs -> src/reader/parser/inside_closing_tag_name.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::namespace;",
          "",
          "[Added Lines]",
          "1: use crate::{namespace, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:                     _ => {",
          "17:                         this.data.element_name = Some(name.clone());",
          "18:                         match token {",
          "20:                             Token::TagEnd => this.emit_end_element(),",
          "21:                             _ => Some(self_error!(this; \"Unexpected token inside closing tag: {}\", token))",
          "22:                         }",
          "23:                     }",
          "24:                 }",
          "25:             }),",
          "26:             ClosingTagSubstate::CTAfterName => match t {",
          "28:                 Token::TagEnd => self.emit_end_element(),",
          "29:                 _ => Some(self_error!(self; \"Unexpected token inside closing tag: {}\", t))",
          "30:             }",
          "31:         }",
          "",
          "[Removed Lines]",
          "19:                             Token::Whitespace(_) => this.into_state_continue(State::InsideClosingTag(ClosingTagSubstate::CTAfterName)),",
          "27:                 Token::Whitespace(_) => None,  //  Skip whitespace",
          "",
          "[Added Lines]",
          "20:                             Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideClosingTag(ClosingTagSubstate::CTAfterName)),",
          "28:                 Token::Character(c) if is_whitespace_char(c) => None,  //  Skip whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_declaration.rs||src/reader/parser/inside_declaration.rs": [
          "File: src/reader/parser/inside_declaration.rs -> src/reader/parser/inside_declaration.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::common::XmlVersion;",
          "",
          "[Added Lines]",
          "1: use crate::common::{XmlVersion, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         match s {",
          "33:             DeclarationSubstate::BeforeVersion => match t {",
          "35:                 Token::Character('v') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersion)),",
          "36:                 _ => unexpected_token!(t)",
          "37:             },",
          "",
          "[Removed Lines]",
          "34:                 Token::Whitespace(_) => None,  // continue",
          "",
          "[Added Lines]",
          "35:                 Token::Character(c) if is_whitespace_char(c) => None,  // continue",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:             }),",
          "53:             DeclarationSubstate::AfterVersion => match t {",
          "55:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideVersionValue)),",
          "56:                 _ => unexpected_token!(t)",
          "57:             },",
          "",
          "[Removed Lines]",
          "54:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "55:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:             }),",
          "72:             DeclarationSubstate::AfterVersionValue => match t {",
          "74:                 Token::Character('e') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncoding)),",
          "75:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "76:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "77:                 _ => unexpected_token!(t)",
          "78:             },",
          "",
          "[Removed Lines]",
          "73:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "76:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:             }),",
          "90:             DeclarationSubstate::AfterEncoding => match t {",
          "92:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideEncodingValue)),",
          "93:                 _ => unexpected_token!(t)",
          "94:             },",
          "",
          "[Removed Lines]",
          "91:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "92:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "99:             }),",
          "101:             DeclarationSubstate::BeforeStandaloneDecl => match t {",
          "103:                 Token::Character('s') => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDecl)),",
          "104:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "105:                 _ => unexpected_token!(t)",
          "106:             },",
          "",
          "[Removed Lines]",
          "102:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "104:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "120:             }),",
          "122:             DeclarationSubstate::AfterStandaloneDecl => match t {",
          "124:                 Token::EqualsSign => self.into_state_continue(State::InsideDeclaration(DeclarationSubstate::InsideStandaloneDeclValue)),",
          "125:                 _ => unexpected_token!(t)",
          "126:             },",
          "",
          "[Removed Lines]",
          "123:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "124:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "140:             }),",
          "142:             DeclarationSubstate::AfterStandaloneDeclValue => match t {",
          "144:                 Token::ProcessingInstructionEnd => emit_start_document(self),",
          "145:                 _ => unexpected_token!(t)",
          "146:             }",
          "147:         }",
          "",
          "[Removed Lines]",
          "143:                 Token::Whitespace(_) => None,  // skip whitespace",
          "",
          "[Added Lines]",
          "144:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_opening_tag.rs||src/reader/parser/inside_opening_tag.rs": [
          "File: src/reader/parser/inside_opening_tag.rs -> src/reader/parser/inside_opening_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::common::is_name_start_char;",
          "3: use crate::namespace;",
          "",
          "[Removed Lines]",
          "1: use crate::attribute::OwnedAttribute;",
          "",
          "[Added Lines]",
          "1: use crate::{attribute::OwnedAttribute, common::is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:                         match token {",
          "21:                             Token::TagEnd => this.emit_start_element(false),",
          "22:                             Token::EmptyTagEnd => this.emit_start_element(true),",
          "24:                             _ => unreachable!()",
          "25:                         }",
          "26:                     }",
          "",
          "[Removed Lines]",
          "23:                             Token::Whitespace(_) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag)),",
          "",
          "[Added Lines]",
          "23:                             Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideTag)),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:             }),",
          "30:             OpeningTagSubstate::InsideTag => match t {",
          "32:                 Token::Character(c) if is_name_start_char(c) => {",
          "33:                     self.buf.push(c);",
          "34:                     self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeName))",
          "35:                 }",
          "38:                 _ => unexpected_token!(t)",
          "39:             },",
          "41:             OpeningTagSubstate::InsideAttributeName => self.read_qualified_name(t, QualifiedNameTarget::AttributeNameTarget, |this, token, name| {",
          "42:                 this.data.attr_name = Some(name);",
          "43:                 match token {",
          "45:                     Token::EqualsSign => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeValue)),",
          "46:                     _ => unreachable!()",
          "47:                 }",
          "48:             }),",
          "50:             OpeningTagSubstate::AfterAttributeName => match t {",
          "52:                 Token::EqualsSign => self.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::InsideAttributeValue)),",
          "53:                 _ => unexpected_token!(t)",
          "54:             },",
          "",
          "[Removed Lines]",
          "31:                 Token::Whitespace(_) => None,  // skip whitespace",
          "36:                 Token::TagEnd => self.emit_start_element(false),",
          "37:                 Token::EmptyTagEnd => self.emit_start_element(true),",
          "44:                     Token::Whitespace(_) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::AfterAttributeName)),",
          "51:                 Token::Whitespace(_) => None,",
          "",
          "[Added Lines]",
          "31:                 Token::TagEnd => self.emit_start_element(false),",
          "32:                 Token::EmptyTagEnd => self.emit_start_element(true),",
          "33:                 Token::Character(c) if is_whitespace_char(c) => None,  // skip whitespace",
          "45:                     Token::Character(c) if is_whitespace_char(c) => this.into_state_continue(State::InsideOpeningTag(OpeningTagSubstate::AfterAttributeName)),",
          "52:                 Token::Character(c) if is_whitespace_char(c) => None,",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_processing_instruction.rs||src/reader/parser/inside_processing_instruction.rs": [
          "File: src/reader/parser/inside_processing_instruction.rs -> src/reader/parser/inside_processing_instruction.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use crate::reader::events::XmlEvent;",
          "4: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "1: use crate::common::{is_name_char, is_name_start_char};",
          "",
          "[Added Lines]",
          "1: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:                     }",
          "41:                 }",
          "45:                     let name = self.take_buf();",
          "",
          "[Removed Lines]",
          "43:                 Token::Whitespace(_) => {",
          "",
          "[Added Lines]",
          "43:                 Token::Character(c) if is_whitespace_char(c) => {",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:                 self.into_state_continue(State::InsideReference)",
          "17:             },",
          "26:                 }",
          "28:             }",
          "30:             _ if t.contains_char_data() && self.depth() == 0 =>",
          "",
          "[Removed Lines]",
          "19:             Token::Whitespace(_) if self.depth() == 0 && self.config.ignore_root_level_whitespace => None,  // skip whitespace outside of the root element",
          "21:             Token::Whitespace(_) if self.config.trim_whitespace && !self.buf_has_data() => None,",
          "23:             Token::Whitespace(c) => {",
          "24:                 if !self.buf_has_data() {",
          "25:                     self.push_pos();",
          "27:                 self.append_char_continue(c)",
          "",
          "[Added Lines]",
          "19:             Token::Character(c) if is_whitespace_char(c) => {",
          "21:                 if self.depth() == 0 && self.config.ignore_root_level_whitespace { None }",
          "22:                 else if self.config.trim_whitespace && !self.buf_has_data() { None }",
          "23:                 else {",
          "24:                     if !self.buf_has_data() {",
          "25:                         self.push_pos();",
          "26:                     }",
          "27:                     self.append_char_continue(c)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4c04af5cdc2a9de9d4165c1d4a5d3a5b9f863fd",
      "candidate_info": {
        "commit_hash": "c4c04af5cdc2a9de9d4165c1d4a5d3a5b9f863fd",
        "repo": "00xc/xml-rs",
        "commit_url": "https://github.com/00xc/xml-rs/commit/c4c04af5cdc2a9de9d4165c1d4a5d3a5b9f863fd",
        "files": [
          "src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_reference.rs",
          "src/reader/parser/outside_tag.rs",
          "tests/errata2e.fail.txt",
          "tests/errata4e.fail.txt",
          "tests/event_reader.rs",
          "tests/ibm_oasis_valid.fail.txt",
          "tests/ibm_valid.fail.txt",
          "tests/oasis.fail.txt",
          "tests/rmt-ns10.fail.txt",
          "tests/sun-valid.fail.txt",
          "tests/xml11.fail.txt",
          "tests/xmltest.fail.txt"
        ],
        "message": "Parse some <!ENTITY> declarations",
        "before_after_code_files": [
          "src/reader/parser.rs||src/reader/parser.rs",
          "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
          "src/reader/parser/inside_reference.rs||src/reader/parser/inside_reference.rs",
          "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs",
          "tests/event_reader.rs||tests/event_reader.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ],
          "candidate": [
            "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs",
            "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/reader/parser.rs||src/reader/parser.rs": [
          "File: src/reader/parser.rs -> src/reader/parser.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use std::borrow::Cow;",
          "4: use std::io::prelude::*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: use std::collections::HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:     st: State,",
          "70:     state_after_reference: State,",
          "71:     buf: String,",
          "72:     nst: NamespaceStack,",
          "74:     data: MarkupData,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     entities: HashMap<String, String>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:             st: State::OutsideTag,",
          "94:             state_after_reference: State::OutsideTag,",
          "95:             buf: String::new(),",
          "96:             nst: NamespaceStack::default(),",
          "98:             data: MarkupData {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:             entities: HashMap::new(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     InsideComment,",
          "141:     InsideCData,",
          "142:     InsideDeclaration(DeclarationSubstate),",
          "147:     InsideReference,",
          "148: }",
          "150: #[derive(Copy, Clone, PartialEq)]",
          "151: pub enum OpeningTagSubstate {",
          "152:     InsideName,",
          "",
          "[Removed Lines]",
          "143:     InsideDoctype,",
          "144:     DoctypeMarkupDeclarationStart,",
          "145:     DoctypeMarkupDeclarationArgs,",
          "146:     InsideDoctypeMarkupDeclaration,",
          "",
          "[Added Lines]",
          "149:     InsideDoctype(DoctypeSubstate),",
          "153: #[derive(Copy, Clone, PartialEq)]",
          "154: pub enum DoctypeSubstate {",
          "155:     Outside,",
          "156:     InsideName,",
          "157:     BeforeEntityName,",
          "158:     EntityName,",
          "159:     BeforeEntityValue,",
          "160:     EntityValue,",
          "161:     NumericReferenceStart,",
          "162:     NumericReference,",
          "163:     SkipDeclaration,",
          "164: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341:             State::OutsideTag                     => self.outside_tag(t),",
          "342:             State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),",
          "343:             State::InsideDeclaration(s)           => self.inside_declaration(t, s),",
          "348:             State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),",
          "349:             State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),",
          "350:             State::InsideComment                  => self.inside_comment(t),",
          "",
          "[Removed Lines]",
          "344:             State::InsideDoctype                  => self.inside_doctype(t),",
          "345:             State::DoctypeMarkupDeclarationStart  => self.doctype_markup_declaration_start(t),",
          "346:             State::DoctypeMarkupDeclarationArgs   => self.doctype_markup_declaration_args(t),",
          "347:             State::InsideDoctypeMarkupDeclaration => self.inside_doctype_markup_declaration(t),",
          "",
          "[Added Lines]",
          "360:             State::InsideDoctype(s)               => self.inside_doctype(t, s),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "658:     #[test]",
          "659:     fn state_size() {",
          "660:         assert_eq!(2, std::mem::size_of::<super::State>());",
          "661:     }",
          "662: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:         assert_eq!(1, std::mem::size_of::<super::DoctypeSubstate>());",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_doctype.rs||src/reader/parser/inside_doctype.rs": [
          "File: src/reader/parser/inside_doctype.rs -> src/reader/parser/inside_doctype.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: impl PullParser {",
          "15:             },",
          "53:                 }",
          "55:             },",
          "57:         }",
          "58:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "1: use crate::{reader::lexer::Token, common::is_whitespace_char};",
          "3: use super::{PullParser, Result, State};",
          "6:     pub fn inside_doctype(&mut self, t: Token) -> Option<Result> {",
          "7:         match t {",
          "8:             Token::TagEnd => {",
          "9:                 self.into_state_continue(State::OutsideTag)",
          "10:             }",
          "12:             Token::MarkupDeclarationStart => {",
          "13:                 self.buf.clear();",
          "14:                 self.into_state_continue(State::DoctypeMarkupDeclarationStart)",
          "17:             _ => None,",
          "18:         }",
          "19:     }",
          "21:     pub fn inside_doctype_markup_declaration(&mut self, t: Token) -> Option<Result> {",
          "22:         match t {",
          "23:             Token::TagEnd => {",
          "24:                 self.into_state_continue(State::InsideDoctype)",
          "25:             }",
          "27:             _ => None,",
          "28:         }",
          "29:     }",
          "31:     pub fn doctype_markup_declaration_args(&mut self, t: Token) -> Option<Result> {",
          "32:         match t {",
          "33:             Token::TagEnd => {",
          "34:                 self.into_state_continue(State::InsideDoctype)",
          "35:             }",
          "36:             _ => None,",
          "37:         }",
          "38:     }",
          "40:     pub fn doctype_markup_declaration_start(&mut self, t: Token) -> Option<Result> {",
          "41:         match t {",
          "42:             Token::TagEnd => {",
          "43:                 self.into_state_continue(State::InsideDoctype)",
          "44:             }",
          "45:             Token::Character(c @ 'A'..='Z') => {",
          "46:                 self.buf.push(c);",
          "47:                 None",
          "48:             },",
          "49:             Token::Character(c) if is_whitespace_char(c) => {",
          "50:                 match self.buf.as_str() {",
          "51:                     \"ENTITY\" | \"NOTATION\" | \"ELEMENT\" | \"ATTLIST\" => self.into_state_continue(State::DoctypeMarkupDeclarationArgs),",
          "52:                     s => Some(self_error!(self; \"Unknown markup declaration: {}\", s)),",
          "56:             _ => Some(self_error!(self; \"Incomplete markup declaration: {}\", t)),",
          "",
          "[Added Lines]",
          "1: use crate::{reader::lexer::Token, common::{is_whitespace_char, is_name_start_char, is_name_char}};",
          "3: use super::{PullParser, Result, State, DoctypeSubstate, QuoteToken};",
          "6:     pub fn inside_doctype(&mut self, t: Token, substate: DoctypeSubstate) -> Option<Result> {",
          "7:         match substate {",
          "8:             DoctypeSubstate::Outside => match t {",
          "9:                 Token::TagEnd => {",
          "10:                     self.into_state_continue(State::OutsideTag)",
          "11:                 }",
          "13:                 Token::MarkupDeclarationStart => {",
          "14:                     self.buf.clear();",
          "15:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::InsideName))",
          "16:                 },",
          "18:                 _ => None,",
          "20:             DoctypeSubstate::InsideName => match t {",
          "21:                 Token::Character(c @ 'A'..='Z') => {",
          "22:                     self.buf.push(c);",
          "23:                     None",
          "24:                 },",
          "25:                 Token::Character(c) if is_whitespace_char(c) => {",
          "26:                     match self.buf.as_str() {",
          "27:                         \"ENTITY\" => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::BeforeEntityName)),",
          "28:                         \"NOTATION\" | \"ELEMENT\" | \"ATTLIST\" => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)),",
          "29:                         s => Some(self_error!(self; \"Unknown markup declaration: {}\", s)),",
          "30:                     }",
          "32:                 },",
          "33:                 _ => Some(self_error!(self; \"Incomplete markup declaration: {}\", t)),",
          "34:             },",
          "35:             DoctypeSubstate::BeforeEntityName => {",
          "36:                 self.data.name.clear();",
          "37:                 match t {",
          "38:                     Token::Character(c) if is_whitespace_char(c) => None,",
          "40:                     Token::Character('%') => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)),",
          "41:                     Token::Character(c) if is_name_start_char(c) => {",
          "42:                         self.data.name.push(c);",
          "43:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityName))",
          "44:                     },",
          "45:                     _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "48:             DoctypeSubstate::EntityName => match t {",
          "49:                 Token::Character(c) if is_whitespace_char(c) => {",
          "50:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::BeforeEntityValue))",
          "51:                 },",
          "52:                 Token::Character(c) if is_name_char(c) => {",
          "53:                     self.data.name.push(c);",
          "54:                     None",
          "55:                 },",
          "56:                 _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "57:             },",
          "58:             DoctypeSubstate::BeforeEntityValue => {",
          "59:                 self.buf.clear();",
          "60:                 match t {",
          "61:                     Token::Character(c) if is_whitespace_char(c) => None,",
          "63:                     Token::Character('S') | Token::Character('P') => self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)),",
          "64:                     Token::SingleQuote | Token::DoubleQuote => {",
          "65:                         self.data.quote = Some(super::QuoteToken::from_token(&t));",
          "66:                         self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "67:                     },",
          "68:                     _ => Some(self_error!(self; \"Expected entity name, found {}\", t)),",
          "69:                 }",
          "70:             },",
          "71:             DoctypeSubstate::EntityValue => match t {",
          "72:                 Token::SingleQuote if self.data.quote != Some(QuoteToken::SingleQuoteToken) => { self.buf.push('\\''); None },",
          "73:                 Token::DoubleQuote if self.data.quote != Some(QuoteToken::DoubleQuoteToken) => { self.buf.push('\"'); None },",
          "74:                 Token::SingleQuote | Token::DoubleQuote => {",
          "75:                     let name = self.data.take_name();",
          "76:                     let val = self.take_buf();",
          "77:                     self.data.quote = None;",
          "78:                     self.entities.insert(name, val);",
          "79:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::SkipDeclaration)) // FIXME",
          "80:                 },",
          "81:                 Token::Character('&') => {",
          "82:                     self.data.ref_data.clear();",
          "83:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::NumericReferenceStart))",
          "84:                 },",
          "85:                 Token::Character(c) => {",
          "86:                     self.buf.push(c);",
          "87:                     None",
          "88:                 },",
          "89:                 _ => Some(self_error!(self; \"Expected entity value, found {}\", t)),",
          "90:             },",
          "91:             DoctypeSubstate::NumericReferenceStart => match t {",
          "92:                 Token::Character('#') => {",
          "93:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::NumericReference))",
          "94:                 },",
          "95:                 Token::Character(c) => {",
          "96:                     self.buf.push('&');",
          "97:                     self.buf.push(c);",
          "98:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "99:                 },",
          "100:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "101:             },",
          "102:             DoctypeSubstate::NumericReference => match t {",
          "103:                 Token::Character(';') => {",
          "104:                     let r = self.data.take_ref_data();",
          "106:                     match self.numeric_reference_from_str(&r) {",
          "107:                         Ok(c) => {",
          "108:                             self.buf.push(c);",
          "109:                             self.into_state_continue(State::InsideDoctype(DoctypeSubstate::EntityValue))",
          "110:                         }",
          "111:                         Err(e) => Some(self_error!(self; e)),",
          "112:                     }",
          "113:                 },",
          "114:                 Token::Character(c) => {",
          "115:                     self.data.ref_data.push(c);",
          "116:                     None",
          "117:                 },",
          "118:                 _ => Some(self_error!(self; \"Unexpected {} in entity\", t)),",
          "119:             },",
          "120:             DoctypeSubstate::SkipDeclaration => match t {",
          "121:                 Token::TagEnd => {",
          "122:                     self.into_state_continue(State::InsideDoctype(DoctypeSubstate::Outside))",
          "123:                 },",
          "124:                 _ => None,",
          "125:             },",
          "",
          "---------------"
        ],
        "src/reader/parser/inside_reference.rs||src/reader/parser/inside_reference.rs": [
          "File: src/reader/parser/inside_reference.rs -> src/reader/parser/inside_reference.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::char;",
          "5: use crate::reader::lexer::Token;",
          "",
          "[Removed Lines]",
          "3: use crate::common::{is_name_char, is_name_start_char, is_whitespace_str};",
          "",
          "[Added Lines]",
          "3: use crate::common::{is_name_char, is_name_start_char, is_whitespace_char};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:             }",
          "18:             Token::ReferenceEnd => {",
          "20:                 let name = self.data.take_ref_data();",
          "22:                 let c = match &name[..] {",
          "61:                     },",
          "69:                 };",
          "80:                 }",
          "81:             }",
          "83:             _ => Some(self_error!(self; \"Unexpected token inside an entity: {}\", t)),",
          "84:         }",
          "85:     }",
          "86: }",
          "",
          "[Removed Lines]",
          "21:                 let name_len = name.len();  // compute once",
          "23:                     \"lt\"   => Ok('<'.to_string()),",
          "24:                     \"gt\"   => Ok('>'.to_string()),",
          "25:                     \"amp\"  => Ok('&'.to_string()),",
          "26:                     \"apos\" => Ok('\\''.to_string()),",
          "27:                     \"quot\" => Ok('\"'.to_string()),",
          "28:                     \"\"     => Err(self_error!(self; \"Encountered empty entity\")),",
          "29:                     _ if name_len > 2 && name.starts_with(\"#x\") => {",
          "30:                         let num_str = &name[2..name_len];",
          "31:                         if num_str == \"0\" {",
          "32:                             Err(self_error!(self; \"Null character entity is not allowed\"))",
          "33:                         } else if self.config.replace_unknown_entity_references {",
          "34:                             match u32::from_str_radix(num_str, 16).ok().map(|i| char::from_u32(i).unwrap_or('\\u{fffd}')) {",
          "35:                                 Some(c) => Ok(c.to_string()),",
          "36:                                 None    => Err(self_error!(self; \"Invalid hexadecimal character number in an entity: {}\", name))",
          "37:                             }",
          "38:                         } else {",
          "39:                             match u32::from_str_radix(num_str, 16).ok().and_then(char::from_u32) {",
          "40:                                 Some(c) => Ok(c.to_string()),",
          "41:                                 None    => Err(self_error!(self; \"Invalid hexadecimal character number in an entity: {}\", name))",
          "42:                             }",
          "43:                         }",
          "44:                     }",
          "45:                     _ if name_len > 1 && name.starts_with('#') => {",
          "46:                         let num_str = &name[1..name_len];",
          "47:                         if num_str == \"0\" {",
          "48:                             Err(self_error!(self; \"Null character entity is not allowed\"))",
          "49:                         } else if self.config.replace_unknown_entity_references {",
          "50:                             match u32::from_str_radix(num_str, 10).ok().map(|i| char::from_u32(i).unwrap_or('\\u{fffd}')) {",
          "51:                                 Some(c) => Ok(c.to_string()),",
          "52:                                 None    => Err(self_error!(self; \"Invalid decimal character number in an entity: {}\", name))",
          "53:                             }",
          "54:                         }",
          "55:                         else {",
          "56:                             match u32::from_str_radix(num_str, 10).ok().and_then(char::from_u32) {",
          "57:                                 Some(c) => Ok(c.to_string()),",
          "58:                                 None    => Err(self_error!(self; \"Invalid decimal character number in an entity: {}\", name))",
          "59:                             }",
          "60:                         }",
          "62:                     _ => {",
          "63:                         if let Some(v) = self.config.extra_entities.get(&name) {",
          "64:                             Ok(v.clone())",
          "65:                         } else {",
          "66:                             Err(self_error!(self; \"Unexpected entity: {}\", name))",
          "67:                         }",
          "68:                     }",
          "70:                 match c {",
          "71:                     Ok(c) => {",
          "72:                         self.buf.push_str(&c);",
          "73:                         let prev_st = self.state_after_reference.clone();",
          "74:                         if prev_st == State::OutsideTag && !is_whitespace_str(&c) {",
          "75:                             self.inside_whitespace = false;",
          "76:                         }",
          "77:                         self.into_state_continue(prev_st)",
          "78:                     }",
          "79:                     Err(e) => Some(e),",
          "",
          "[Added Lines]",
          "20:                 if name == \"\" {",
          "21:                     return Some(self_error!(self; \"Encountered empty entity\"));",
          "22:                 }",
          "25:                     \"lt\"   => Some('<'),",
          "26:                     \"gt\"   => Some('>'),",
          "27:                     \"amp\"  => Some('&'),",
          "28:                     \"apos\" => Some('\\''),",
          "29:                     \"quot\" => Some('\"'),",
          "30:                     _ if name.starts_with('#') => match self.numeric_reference_from_str(&name[1..]) {",
          "31:                         Ok(c) => Some(c),",
          "32:                         Err(e) => return Some(self_error!(self; e))",
          "34:                     _ => None,",
          "36:                 if let Some(c) = c {",
          "37:                     self.buf.push(c);",
          "38:                 } else if let Some(v) = self.config.extra_entities.get(&name).or_else(|| self.entities.get(&name)) {",
          "39:                     self.buf.push_str(v);",
          "40:                 } else {",
          "41:                     return Some(self_error!(self; \"Unexpected entity: {}\", name));",
          "42:                 }",
          "43:                 let prev_st = self.state_after_reference.clone();",
          "44:                 if prev_st == State::OutsideTag && !is_whitespace_char(self.buf.chars().last().unwrap_or('\\0')) {",
          "45:                     self.inside_whitespace = false;",
          "47:                 self.into_state_continue(prev_st)",
          "54:     pub(crate) fn numeric_reference_from_str(&self, num_str: &str) -> std::result::Result<char, String> {",
          "55:         let val = if let Some(hex) = num_str.strip_prefix('x') {",
          "56:             u32::from_str_radix(hex, 16).map_err(|_| format!(\"Invalid hexadecimal character number in an entity: {num_str}\"))?",
          "57:         } else {",
          "58:             u32::from_str_radix(num_str, 10).map_err(|_| format!(\"Invalid character number in an entity: {num_str}\"))?",
          "59:         };",
          "60:         match char::from_u32(val) {",
          "61:             Some('\\0') => Err(\"NUL character entity is not allowed\".into()),",
          "62:             Some(c) => Ok(c),",
          "63:             None if self.config.replace_unknown_entity_references => {",
          "64:                 Ok('\\u{fffd}')",
          "65:             },",
          "66:             None => Err(format!(\"Invalid character U+{val:X}\")),",
          "67:         }",
          "68:     }",
          "",
          "---------------"
        ],
        "src/reader/parser/outside_tag.rs||src/reader/parser/outside_tag.rs": [
          "File: src/reader/parser/outside_tag.rs -> src/reader/parser/outside_tag.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use super::{",
          "7:     ClosingTagSubstate, OpeningTagSubstate, ProcessingInstructionSubstate, PullParser, Result,",
          "9: };",
          "11: impl PullParser {",
          "",
          "[Removed Lines]",
          "8:     State, DEFAULT_ENCODING, DEFAULT_STANDALONE, DEFAULT_VERSION,",
          "",
          "[Added Lines]",
          "8:     State, DEFAULT_ENCODING, DEFAULT_STANDALONE, DEFAULT_VERSION, DoctypeSubstate,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:                         self.next_pos();",
          "88:                     }",
          "90:                     Token::OpeningTagStart => {",
          "",
          "[Removed Lines]",
          "87:                         self.into_state(State::InsideDoctype, next_event)",
          "",
          "[Added Lines]",
          "87:                         self.into_state(State::InsideDoctype(DoctypeSubstate::Outside), next_event)",
          "",
          "---------------"
        ],
        "tests/event_reader.rs||tests/event_reader.rs": [
          "File: tests/event_reader.rs -> tests/event_reader.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:         br#\"",
          "405:             |StartDocument(1.0, UTF-8)",
          "406:             |StartElement(doc)",
          "408:         \"#,",
          "409:         ParserConfig::new(),",
          "410:         false,",
          "",
          "[Removed Lines]",
          "407:             |1:13 Invalid decimal character number in an entity: #55357",
          "",
          "[Added Lines]",
          "407:             |1:13 Invalid character U+D83D",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:         br#\"",
          "416:             |StartDocument(1.0, UTF-8)",
          "417:             |StartElement(doc)",
          "419:         \"#,",
          "420:         ParserConfig::new(),",
          "421:         false,",
          "",
          "[Removed Lines]",
          "418:             |1:13 Invalid hexadecimal character number in an entity: #xd83d",
          "",
          "[Added Lines]",
          "418:             |1:13 Invalid character U+D83D",
          "",
          "---------------"
        ]
      }
    }
  ]
}