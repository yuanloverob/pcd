{
  "cve_id": "CVE-2024-21632",
  "cve_desc": "omniauth-microsoft_graph provides an Omniauth strategy for the Microsoft Graph API. Prior to versions 2.0.0, the implementation did not validate the legitimacy of the `email` attribute of the user nor did it give/document an option to do so, making it susceptible to nOAuth misconfiguration in cases when the `email` is used as a trusted user identifier. This could lead to account takeover. Version 2.0.0 contains a fix for this issue.\n",
  "repo": "synth/omniauth-microsoft_graph",
  "patch_hash": "f132078389612b797c872b45bd0e0b47382414c1",
  "patch_info": {
    "commit_hash": "f132078389612b797c872b45bd0e0b47382414c1",
    "repo": "synth/omniauth-microsoft_graph",
    "commit_url": "https://github.com/synth/omniauth-microsoft_graph/commit/f132078389612b797c872b45bd0e0b47382414c1",
    "files": [
      "README.md",
      "lib/omniauth/microsoft_graph.rb",
      "lib/omniauth/microsoft_graph/domain_verifier.rb",
      "lib/omniauth/strategies/microsoft_graph.rb",
      "omniauth-microsoft_graph.gemspec",
      "spec/omniauth/microsoft_graph/domain_verifier_spec.rb",
      "spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb"
    ],
    "message": "Add email domain verification",
    "before_after_code_files": [
      "lib/omniauth/microsoft_graph.rb||lib/omniauth/microsoft_graph.rb",
      "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb",
      "lib/omniauth/strategies/microsoft_graph.rb||lib/omniauth/strategies/microsoft_graph.rb",
      "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec",
      "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb",
      "spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb||spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb"
    ]
  },
  "patch_diff": {
    "lib/omniauth/microsoft_graph.rb||lib/omniauth/microsoft_graph.rb": [
      "File: lib/omniauth/microsoft_graph.rb -> lib/omniauth/microsoft_graph.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: require \"omniauth/microsoft_graph/version\"",
      "2: require \"omniauth/strategies/microsoft_graph\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: require \"omniauth/microsoft_graph/domain_verifier\"",
      "",
      "---------------"
    ],
    "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb": [
      "File: lib/omniauth/microsoft_graph/domain_verifier.rb -> lib/omniauth/microsoft_graph/domain_verifier.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # frozen_string_literal: true",
      "2: require 'jwt' # for token signature validation",
      "3: require 'omniauth' # to inherit from OmniAuth::Error",
      "4: require 'oauth2' # to rescue OAuth2::Error",
      "6: module OmniAuth",
      "7:   module MicrosoftGraph",
      "8:     # Verify user email domains to mitigate the nOAuth vulnerability",
      "9:     # https://www.descope.com/blog/post/noauth",
      "10:     # https://clerk.com/docs/authentication/social-connections/microsoft#stay-secure-against-the-n-o-auth-vulnerability",
      "11:     OIDC_CONFIG_URL = 'https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration'",
      "13:     class DomainVerificationError < OmniAuth::Error; end",
      "15:     class DomainVerifier",
      "16:       def self.verify!(auth_hash, access_token, options)",
      "17:         new(auth_hash, access_token, options).verify!",
      "18:       end",
      "20:       def initialize(auth_hash, access_token, options)",
      "21:         @email_domain = auth_hash['info']['email']&.split('@')&.last",
      "22:         @upn_domain = auth_hash['extra']['raw_info']['userPrincipalName']&.split('@')&.last",
      "23:         @access_token = access_token",
      "24:         @id_token = access_token.params['id_token']",
      "25:         @skip_verification = options[:skip_domain_verification]",
      "26:       end",
      "28:       def verify!",
      "29:         # The userPrincipalName property is mutable, but must always contain a",
      "30:         # verified domain:",
      "31:         #",
      "32:         #  \"The general format is alias@domain, where domain must be present in",
      "33:         #  the tenant's collection of verified domains.\"",
      "34:         #  https://learn.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0",
      "35:         #",
      "36:         # This means while it's not suitable for consistently identifying a user",
      "37:         # (the domain might change), it is suitable for verifying membership in",
      "38:         # a given domain.",
      "39:         return true if email_domain == upn_domain ||",
      "40:           skip_verification == true ||",
      "41:           (skip_verification.is_a?(Array) && skip_verification.include?(email_domain)) ||",
      "42:           domain_verified_jwt_claim",
      "43:         raise DomainVerificationError, verification_error_message",
      "44:       end",
      "46:       private",
      "48:       attr_reader :access_token,",
      "49:                   :email_domain,",
      "50:                   :id_token,",
      "51:                   :permitted_domains,",
      "52:                   :skip_verification,",
      "53:                   :upn_domain",
      "55:       # https://learn.microsoft.com/en-us/entra/identity-platform/optional-claims-reference",
      "56:       # Microsoft offers an optional claim `xms_edov` that will indicate whether the",
      "57:       # user's email domain is part of the organization's verified domains. This has to be",
      "58:       # explicitly configured in the app registration.",
      "59:       #",
      "60:       # To get to it, we need to decode the ID token with the key material from Microsoft's",
      "61:       # OIDC configuration endpoint, and inspect it for the claim in question.",
      "62:       def domain_verified_jwt_claim",
      "63:         oidc_config = access_token.get(OIDC_CONFIG_URL).parsed",
      "64:         algorithms = oidc_config['id_token_signing_alg_values_supported']",
      "65:         keys = JWT::JWK::Set.new(access_token.get(oidc_config['jwks_uri']).parsed)",
      "66:         decoded_token = JWT.decode(id_token, nil, true, algorithms: algorithms, jwks: keys)",
      "67:         # https://github.com/MicrosoftDocs/azure-docs/issues/111425#issuecomment-1761043378",
      "68:         # Comments seemed to indicate the value is not consistent",
      "69:         ['1', 1, 'true', true].include?(decoded_token.first['xms_edov'])",
      "70:       rescue JWT::VerificationError, ::OAuth2::Error",
      "71:         false",
      "72:       end",
      "74:       def verification_error_message",
      "75:         <<~MSG",
      "76:           The email domain '#{email_domain}' is not a verified domain for this Azure AD account.",
      "77:           You can either:",
      "81:           Refer to the README for more details.",
      "82:         MSG",
      "83:       end",
      "84:     end",
      "85:   end",
      "86: end",
      "",
      "---------------"
    ],
    "lib/omniauth/strategies/microsoft_graph.rb||lib/omniauth/strategies/microsoft_graph.rb": [
      "File: lib/omniauth/strategies/microsoft_graph.rb -> lib/omniauth/strategies/microsoft_graph.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:       option :scope, DEFAULT_SCOPE",
      "24:       option :authorized_client_ids, []",
      "26:       uid { raw_info[\"id\"] }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:       option :skip_domain_verification, false",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:         }",
      "44:       end",
      "46:       def authorize_params",
      "47:         super.tap do |params|",
      "48:           options[:authorize_options].each do |k|",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:       def auth_hash",
      "48:         super.tap do |ah|",
      "49:           verify_email(ah, access_token)",
      "50:         end",
      "51:       end",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:           session['omniauth.state'] = params[:state] if params[:state]",
      "56:         end",
      "59:       def raw_info",
      "60:         @raw_info ||= access_token.get('https://graph.microsoft.com/v1.0/me').parsed",
      "",
      "[Removed Lines]",
      "57:       end",
      "",
      "[Added Lines]",
      "64:       end",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "63:       def callback_url",
      "64:         options[:callback_url] || full_host + script_name + callback_path",
      "67:       def custom_build_access_token",
      "68:         access_token = get_access_token(request)",
      "",
      "[Removed Lines]",
      "65:       end",
      "",
      "[Added Lines]",
      "72:       end",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "119:         raw_response = client.request(:get, 'https://graph.microsoft.com/v1.0/me',",
      "120:                                       params: { access_token: access_token }).parsed",
      "121:         (raw_response['aud'] == options.client_id) || options.authorized_client_ids.include?(raw_response['aud'])",
      "123:     end",
      "124:   end",
      "125: end",
      "",
      "[Removed Lines]",
      "122:       end",
      "",
      "[Added Lines]",
      "129:       end",
      "131:       def verify_email(auth_hash, access_token)",
      "132:         OmniAuth::MicrosoftGraph::DomainVerifier.verify!(auth_hash, access_token, options)",
      "133:       end",
      "",
      "---------------"
    ],
    "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec": [
      "File: omniauth-microsoft_graph.gemspec -> omniauth-microsoft_graph.gemspec",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:   spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})",
      "19:   spec.require_paths = [\"lib\"]",
      "21:   spec.add_runtime_dependency 'omniauth', '~> 2.0'",
      "22:   spec.add_runtime_dependency 'omniauth-oauth2', '~> 1.8.0'",
      "23:   spec.add_development_dependency \"sinatra\", '~> 0'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:   spec.add_runtime_dependency 'jwt', '>= 2.0'",
      "",
      "---------------"
    ],
    "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb": [
      "File: spec/omniauth/microsoft_graph/domain_verifier_spec.rb -> spec/omniauth/microsoft_graph/domain_verifier_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # frozen_string_literal: true",
      "3: require 'spec_helper'",
      "4: require 'omniauth/microsoft_graph/domain_verifier'",
      "6: RSpec.describe OmniAuth::MicrosoftGraph::DomainVerifier do",
      "7:   subject(:verifier) { described_class.new(auth_hash, access_token, options) }",
      "9:   let(:auth_hash) do",
      "10:     {",
      "11:       'info' => { 'email' => email },",
      "12:       'extra' => { 'raw_info' => { 'userPrincipalName' => upn } }",
      "13:     }",
      "14:   end",
      "15:   let(:email) { 'foo@example.com' }",
      "16:   let(:upn) { 'bar@hackerman.biz' }",
      "17:   let(:options) { { skip_domain_verification: false } }",
      "18:   let(:access_token) { double('OAuth2::AccessToken', params: { 'id_token' => id_token }) }",
      "19:   let(:id_token) { nil }",
      "21:   describe '#verify!' do",
      "22:     subject(:result) { verifier.verify! }",
      "24:     context 'when email domain and userPrincipalName domain match' do",
      "25:       let(:email) { 'foo@example.com' }",
      "26:       let(:upn) { 'bar@example.com' }",
      "28:       it { is_expected.to be_truthy }",
      "29:     end",
      "31:     context 'when domain validation is disabled' do",
      "32:       let(:options) { super().merge(skip_domain_verification: true) }",
      "34:       it { is_expected.to be_truthy }",
      "35:     end",
      "37:     context 'when the email domain is explicitly permitted' do",
      "38:       let(:options) { super().merge(skip_domain_verification: ['example.com']) }",
      "40:       it { is_expected.to be_truthy }",
      "41:     end",
      "43:     context 'when the ID token indicates domain verification' do",
      "44:       # Sign a fake ID token with our own local key",
      "45:       let(:mock_key) do",
      "46:         optional_parameters = { kid: 'mock-kid', use: 'sig', alg: 'RS256' }",
      "47:         JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), optional_parameters)",
      "48:       end",
      "49:       let(:id_token) do",
      "50:         payload = { email: email, xms_edov: true }",
      "51:         JWT.encode(payload, mock_key.signing_key, mock_key[:alg], kid: mock_key[:kid])",
      "52:       end",
      "54:       # Mock the API responses to return the local key",
      "55:       before do",
      "56:         allow(access_token).to receive(:get)",
      "57:           .with(OmniAuth::MicrosoftGraph::OIDC_CONFIG_URL)",
      "58:           .and_return(",
      "59:             double('OAuth2::Response', parsed: {",
      "60:               'id_token_signing_alg_values_supported' => ['RS256'],",
      "61:               'jwks_uri' => 'https://example.com/jwks-keys'",
      "62:             })",
      "63:           )",
      "64:         allow(access_token).to receive(:get)",
      "65:           .with('https://example.com/jwks-keys')",
      "66:           .and_return(",
      "67:             double('OAuth2::Response', parsed: JWT::JWK::Set.new(mock_key).export)",
      "68:           )",
      "69:       end",
      "71:       it { is_expected.to be_truthy }",
      "72:     end",
      "74:     context 'when all verification strategies fail' do",
      "75:       before { allow(access_token).to receive(:get).and_raise(::OAuth2::Error.new('whoops')) }",
      "77:       it 'raises a DomainVerificationError' do",
      "78:         expect { result }.to raise_error OmniAuth::MicrosoftGraph::DomainVerificationError",
      "79:       end",
      "80:     end",
      "81:   end",
      "82: end",
      "",
      "---------------"
    ],
    "spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb||spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb": [
      "File: spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb -> spec/omniauth/strategies/microsoft_graph_oauth2_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "280:       end",
      "281:     end",
      "283:   end",
      "285:   describe '#extra' do",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "283:     context 'when email verification fails' do",
      "284:       let(:response_hash) { { mail: 'something@domain.invalid' } }",
      "285:       let(:error) { OmniAuth::MicrosoftGraph::DomainVerificationError.new }",
      "287:       before do",
      "288:         allow(OmniAuth::MicrosoftGraph::DomainVerifier).to receive(:verify!).and_raise(error)",
      "289:       end",
      "291:       it 'raises an error' do",
      "292:         expect { subject.auth_hash }.to raise_error error",
      "293:       end",
      "294:     end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cba8a27264d230fffa011ab9df461eb918fef375",
      "candidate_info": {
        "commit_hash": "cba8a27264d230fffa011ab9df461eb918fef375",
        "repo": "synth/omniauth-microsoft_graph",
        "commit_url": "https://github.com/synth/omniauth-microsoft_graph/commit/cba8a27264d230fffa011ab9df461eb918fef375",
        "files": [
          "omniauth-microsoft_graph.gemspec"
        ],
        "message": "Fix open ended dependency",
        "before_after_code_files": [
          "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec"
          ],
          "candidate": [
            "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec"
          ]
        }
      },
      "candidate_diff": {
        "omniauth-microsoft_graph.gemspec||omniauth-microsoft_graph.gemspec": [
          "File: omniauth-microsoft_graph.gemspec -> omniauth-microsoft_graph.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})",
          "19:   spec.require_paths = [\"lib\"]",
          "22:   spec.add_runtime_dependency 'omniauth', '~> 2.0'",
          "23:   spec.add_runtime_dependency 'omniauth-oauth2', '~> 1.8.0'",
          "24:   spec.add_development_dependency \"sinatra\", '~> 0'",
          "",
          "[Removed Lines]",
          "21:   spec.add_runtime_dependency 'jwt', '>= 2.0'",
          "",
          "[Added Lines]",
          "21:   spec.add_runtime_dependency 'jwt', '~> 2.0'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca5764c7d5ebbe260329fcac3d58f9c8951cf5d8",
      "candidate_info": {
        "commit_hash": "ca5764c7d5ebbe260329fcac3d58f9c8951cf5d8",
        "repo": "synth/omniauth-microsoft_graph",
        "commit_url": "https://github.com/synth/omniauth-microsoft_graph/commit/ca5764c7d5ebbe260329fcac3d58f9c8951cf5d8",
        "files": [
          "lib/omniauth/microsoft_graph/domain_verifier.rb",
          "spec/omniauth/microsoft_graph/domain_verifier_spec.rb"
        ],
        "message": "Add support for common JWKS\n\nAdds support for common JWKS, facilitating logins from non-business\nemails without sacrificing domain verification support.",
        "before_after_code_files": [
          "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb",
          "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb",
            "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb"
          ],
          "candidate": [
            "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb",
            "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/omniauth/microsoft_graph/domain_verifier.rb||lib/omniauth/microsoft_graph/domain_verifier.rb": [
          "File: lib/omniauth/microsoft_graph/domain_verifier.rb -> lib/omniauth/microsoft_graph/domain_verifier.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     # https://www.descope.com/blog/post/noauth",
          "10:     # https://clerk.com/docs/authentication/social-connections/microsoft#stay-secure-against-the-n-o-auth-vulnerability",
          "11:     OIDC_CONFIG_URL = 'https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration'",
          "13:     class DomainVerificationError < OmniAuth::Error; end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:     COMMON_JWKS_URL = 'https://login.microsoftonline.com/common/discovery/v2.0/keys'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:       def domain_verified_jwt_claim",
          "63:         oidc_config = access_token.get(OIDC_CONFIG_URL).parsed",
          "64:         algorithms = oidc_config['id_token_signing_alg_values_supported']",
          "67:         # https://github.com/MicrosoftDocs/azure-docs/issues/111425#issuecomment-1761043378",
          "68:         # Comments seemed to indicate the value is not consistent",
          "69:         ['1', 1, 'true', true].include?(decoded_token.first['xms_edov'])",
          "72:       end",
          "74:       def verification_error_message",
          "",
          "[Removed Lines]",
          "65:         keys = JWT::JWK::Set.new(access_token.get(oidc_config['jwks_uri']).parsed)",
          "66:         decoded_token = JWT.decode(id_token, nil, true, algorithms: algorithms, jwks: keys)",
          "70:       rescue JWT::VerificationError, ::OAuth2::Error",
          "71:         false",
          "",
          "[Added Lines]",
          "66:         jwks = get_jwks(oidc_config)",
          "67:         decoded_token = JWT.decode(id_token, nil, true, algorithms: algorithms, jwks: jwks)",
          "68:         xms_edov_valid?(decoded_token)",
          "69:       rescue JWT::VerificationError, ::OAuth2::Error",
          "70:         false",
          "71:       end",
          "73:       def xms_edov_valid?(decoded_token)",
          "77:       end",
          "79:       def get_jwks(oidc_config)",
          "80:         # Depending on the tenant, the JWKS endpoint might be different. We need to",
          "81:         # consider both the JWKS from the OIDC configuration and the common JWKS endpoint.",
          "82:         oidc_config_jwk_keys = access_token.get(oidc_config['jwks_uri']).parsed[:keys]",
          "83:         common_jwk_keys = access_token.get(COMMON_JWKS_URL).parsed[:keys]",
          "84:         JWT::JWK::Set.new(oidc_config_jwk_keys + common_jwk_keys)",
          "",
          "---------------"
        ],
        "spec/omniauth/microsoft_graph/domain_verifier_spec.rb||spec/omniauth/microsoft_graph/domain_verifier_spec.rb": [
          "File: spec/omniauth/microsoft_graph/domain_verifier_spec.rb -> spec/omniauth/microsoft_graph/domain_verifier_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     end",
          "43:     context 'when the ID token indicates domain verification' do",
          "47:         JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), optional_parameters)",
          "48:       end",
          "52:       end",
          "55:       before do",
          "56:         allow(access_token).to receive(:get)",
          "57:           .with(OmniAuth::MicrosoftGraph::OIDC_CONFIG_URL)",
          "58:           .and_return(",
          "63:           )",
          "64:         allow(access_token).to receive(:get)",
          "65:           .with('https://example.com/jwks-keys')",
          "66:           .and_return(",
          "68:           )",
          "69:       end",
          "72:     end",
          "74:     context 'when all verification strategies fail' do",
          "",
          "[Removed Lines]",
          "44:       # Sign a fake ID token with our own local key",
          "45:       let(:mock_key) do",
          "46:         optional_parameters = { kid: 'mock-kid', use: 'sig', alg: 'RS256' }",
          "49:       let(:id_token) do",
          "50:         payload = { email: email, xms_edov: true }",
          "51:         JWT.encode(payload, mock_key.signing_key, mock_key[:alg], kid: mock_key[:kid])",
          "54:       # Mock the API responses to return the local key",
          "59:             double('OAuth2::Response', parsed: {",
          "60:               'id_token_signing_alg_values_supported' => ['RS256'],",
          "61:               'jwks_uri' => 'https://example.com/jwks-keys'",
          "62:             })",
          "67:             double('OAuth2::Response', parsed: JWT::JWK::Set.new(mock_key).export)",
          "71:       it { is_expected.to be_truthy }",
          "",
          "[Added Lines]",
          "44:       let(:mock_oidc_key) do",
          "45:         optional_parameters = { kid: 'mock_oidc_key', use: 'sig', alg: 'RS256' }",
          "49:       let(:mock_common_key) do",
          "50:         optional_parameters = { kid: 'mock_common_key', use: 'sig', alg: 'RS256' }",
          "51:         JWT::JWK.new(OpenSSL::PKey::RSA.new(2048), optional_parameters)",
          "54:       # Mock the API responses to return the mock keys",
          "59:             double(",
          "60:               'OAuth2::Response',",
          "61:               parsed: {",
          "62:                 'id_token_signing_alg_values_supported' => ['RS256'],",
          "63:                 'jwks_uri' => 'https://example.com/jwks-keys',",
          "64:               }",
          "65:             )",
          "70:             double(",
          "71:               'OAuth2::Response',",
          "72:               parsed: JWT::JWK::Set.new(mock_oidc_key).export",
          "73:             )",
          "74:           )",
          "75:         allow(access_token).to receive(:get)",
          "76:           .with(OmniAuth::MicrosoftGraph::COMMON_JWKS_URL)",
          "77:           .and_return(",
          "78:             double(",
          "79:               'OAuth2::Response',",
          "80:               parsed: JWT::JWK::Set.new(mock_common_key).export,",
          "81:               body: JWT::JWK::Set.new(mock_common_key).export.to_json",
          "82:             )",
          "86:       context 'when the kid exists in the oidc key' do",
          "87:         let(:id_token) do",
          "88:           payload = { email: email, xms_edov: true }",
          "89:           JWT.encode(payload, mock_oidc_key.signing_key, mock_oidc_key[:alg], kid: mock_oidc_key[:kid])",
          "90:         end",
          "92:         it { is_expected.to be_truthy }",
          "93:       end",
          "95:       context \"when the kid exists in the common key\" do",
          "96:         let(:id_token) do",
          "97:           payload = { email: email, xms_edov: true }",
          "98:           JWT.encode(payload, mock_common_key.signing_key, mock_common_key[:alg], kid: mock_common_key[:kid])",
          "99:         end",
          "101:         it { is_expected.to be_truthy }",
          "102:       end",
          "",
          "---------------"
        ]
      }
    }
  ]
}