{
  "cve_id": "CVE-2021-41090",
  "cve_desc": "Grafana Agent is a telemetry collector for sending metrics, logs, and trace data to the opinionated Grafana observability stack. Prior to versions 0.20.1 and 0.21.2, inline secrets defined within a metrics instance config are exposed in plaintext over two endpoints: metrics instance configs defined in the base YAML file are exposed at `/-/config` and metrics instance configs defined for the scraping service are exposed at `/agent/api/v1/configs/:key`. Inline secrets will be exposed to anyone being able to reach these endpoints. If HTTPS with client authentication is not configured, these endpoints are accessible to unauthenticated users. Secrets found in these sections are used for delivering metrics to a Prometheus Remote Write system, authenticating against a system for discovering Prometheus targets, and authenticating against a system for collecting metrics. This does not apply for non-inlined secrets, such as `*_file` based secrets. This issue is patched in Grafana Agent versions 0.20.1 and 0.21.2. A few workarounds are available. Users who cannot upgrade should use non-inline secrets where possible. Users may also desire to restrict API access to Grafana Agent with some combination of restricting the network interfaces Grafana Agent listens on through `http_listen_address` in the `server` block, configuring Grafana Agent to use HTTPS with client authentication, and/or using firewall rules to restrict external access to Grafana Agent's API.",
  "repo": "grafana/agent",
  "patch_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
  "patch_info": {
    "commit_hash": "af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "repo": "grafana/agent",
    "commit_url": "https://github.com/grafana/agent/commit/af7fb01e31fe2d389e5f1c36b399ddc46b412b21",
    "files": [
      "CHANGELOG.md",
      "docs/configuration/integrations/node-exporter-config.md",
      "docs/configuration/integrations/process-exporter-config.md",
      "docs/getting-started/_index.md",
      "docs/operator/custom-resource-quickstart.md",
      "docs/operator/getting-started.md",
      "docs/upgrade-guide/_index.md",
      "pkg/operator/defaults.go",
      "production/README.md",
      "production/grafanacloud-install.sh",
      "production/kubernetes/agent-bare.yaml",
      "production/kubernetes/agent-loki.yaml",
      "production/kubernetes/agent-traces.yaml",
      "production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ],
    "message": "announce patch releases for cve-2021-41090 (#1152)",
    "before_after_code_files": [
      "pkg/operator/defaults.go||pkg/operator/defaults.go",
      "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
      "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
      "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
      "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
      "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
    ]
  },
  "patch_diff": {
    "pkg/operator/defaults.go||pkg/operator/defaults.go": [
      "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:   \"v0.18.4\",",
      "16:   \"v0.19.0\",",
      "17:   \"v0.20.0\",",
      "18:   \"v0.21.0\",",
      "19:   \"v0.21.1\",",
      "22:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:   \"v0.20.1\",",
      "21:   \"v0.21.2\",",
      "",
      "---------------"
    ],
    "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
      "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "50: #",
      "51: # Global constants.",
      "52: #",
      "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
      "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
      "",
      "[Removed Lines]",
      "53: RELEASE_VERSION=\"0.21.1\"",
      "",
      "[Added Lines]",
      "53: RELEASE_VERSION=\"0.21.2\"",
      "",
      "---------------"
    ],
    "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
      "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 'grafana/agent:v0.21.1'",
      "",
      "[Added Lines]",
      "1: 'grafana/agent:v0.21.2'",
      "",
      "---------------"
    ],
    "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
      "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: check_installed curl",
      "26: check_installed envsubst",
      "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
      "30: NAMESPACE=${NAMESPACE:-default}",
      "",
      "[Removed Lines]",
      "28: MANIFEST_BRANCH=v0.21.1",
      "",
      "[Added Lines]",
      "28: MANIFEST_BRANCH=v0.21.2",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
      "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: (import './lib/traces.libsonnet') +",
      "16: {",
      "17:   _images:: {",
      "20:   },",
      "",
      "[Removed Lines]",
      "18:     agent: 'grafana/agent:v0.21.1',",
      "19:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "18:     agent: 'grafana/agent:v0.21.2',",
      "19:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:   local this = self,",
      "12:   _images:: {",
      "15:   },",
      "16:   _config:: {",
      "17:     name: name,",
      "",
      "[Removed Lines]",
      "13:     agent: 'grafana/agent:v0.21.1',",
      "14:     agentctl: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "13:     agent: 'grafana/agent:v0.21.2',",
      "14:     agentctl: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ],
    "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
      "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: ) {",
      "15:   local _config = {",
      "16:     api: error 'api must be set',",
      "18:     schedule: '*/5 * * * *',",
      "19:     configs: [],",
      "20:   } + config,",
      "",
      "[Removed Lines]",
      "17:     image: 'grafana/agentctl:v0.21.1',",
      "",
      "[Added Lines]",
      "17:     image: 'grafana/agentctl:v0.21.2',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "990b11c9b33de96f8c258929dcee98d0c84457e9",
      "candidate_info": {
        "commit_hash": "990b11c9b33de96f8c258929dcee98d0c84457e9",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/990b11c9b33de96f8c258929dcee98d0c84457e9",
        "files": [
          "CHANGELOG.md",
          "Makefile",
          "docs/developer/releasing.md",
          "docs/user/configuration/integrations/node-exporter-config.md",
          "docs/user/configuration/integrations/process-exporter-config.md",
          "docs/user/configuration/traces-config.md",
          "docs/user/getting-started/_index.md",
          "docs/user/operator/custom-resource-quickstart.md",
          "docs/user/operator/getting-started.md",
          "docs/user/upgrade-guide/_index.md",
          "pkg/operator/defaults.go",
          "pkg/traces/remotewriteexporter/exporter.go",
          "pkg/traces/remotewriteexporter/exporter_test.go",
          "production/README.md",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ],
        "message": "[dev.frontend-receiver] merge main, fix changelog (#1572)",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "pkg/traces/remotewriteexporter/exporter.go||pkg/traces/remotewriteexporter/exporter.go",
          "pkg/traces/remotewriteexporter/exporter_test.go||pkg/traces/remotewriteexporter/exporter_test.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   \"v0.21.2\",",
          "22:   \"v0.22.0\",",
          "23:   \"v0.23.0\",",
          "26:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   \"v0.24.0-rc.0\",",
          "",
          "---------------"
        ],
        "pkg/traces/remotewriteexporter/exporter.go||pkg/traces/remotewriteexporter/exporter.go": [
          "File: pkg/traces/remotewriteexporter/exporter.go -> pkg/traces/remotewriteexporter/exporter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"fmt\"",
          "6:  \"strconv\"",
          "7:  \"strings\"",
          "8:  \"time\"",
          "10:  util \"github.com/cortexproject/cortex/pkg/util/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"sync\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:  noSuffix     = \"\"",
          "32: )",
          "38: type remoteWriteExporter struct {",
          "39:  done         atomic.Bool",
          "40:  manager      instance.Manager",
          "41:  promInstance string",
          "",
          "[Removed Lines]",
          "34: type dataPoint interface {",
          "35:  Attributes() pdata.AttributeMap",
          "36: }",
          "",
          "[Added Lines]",
          "36:  mtx sync.Mutex",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:  }",
          "58:  return &remoteWriteExporter{",
          "59:   done:         atomic.Bool{},",
          "60:   constLabels:  ls,",
          "61:   namespace:    cfg.Namespace,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   mtx:          sync.Mutex{},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:   return nil",
          "88:  }",
          "90:  prom, err := e.manager.GetInstance(e.promInstance)",
          "91:  if err != nil {",
          "92:   level.Warn(e.logger).Log(\"msg\", \"failed to get prom instance\", \"err\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  e.mtx.Lock()",
          "93:  defer e.mtx.Unlock()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:  }",
          "95:  app := prom.Appender(ctx)",
          "107:      }",
          "108:     case pdata.MetricDataTypeHistogram:",
          "110:       return fmt.Errorf(\"failed to process metric %s\", err)",
          "111:      }",
          "112:     case pdata.MetricDataTypeSummary:",
          "114:     default:",
          "116:     }",
          "117:    }",
          "118:   }",
          "",
          "[Removed Lines]",
          "97:  rm := md.ResourceMetrics()",
          "98:  for i := 0; i < rm.Len(); i++ {",
          "99:   ilm := rm.At(i).InstrumentationLibraryMetrics()",
          "100:   for j := 0; j < ilm.Len(); j++ {",
          "101:    ms := ilm.At(j).Metrics()",
          "102:    for k := 0; k < ms.Len(); k++ {",
          "103:     switch m := ms.At(k); m.DataType() {",
          "104:     case pdata.MetricDataTypeSum, pdata.MetricDataTypeGauge:",
          "105:      if err := e.processScalarMetric(app, m); err != nil {",
          "106:       return fmt.Errorf(\"failed to process metric %s\", err)",
          "109:      if err := e.processHistogramMetrics(app, m); err != nil {",
          "113:      return fmt.Errorf(\"%s processing unimplemented\", m.DataType())",
          "115:      return fmt.Errorf(\"unsupported m data type %s\", m.DataType())",
          "",
          "[Added Lines]",
          "102:  resourceMetrics := md.ResourceMetrics()",
          "103:  for i := 0; i < resourceMetrics.Len(); i++ {",
          "104:   resourceMetric := resourceMetrics.At(i)",
          "105:   instrumentationLibraryMetricsSlice := resourceMetric.InstrumentationLibraryMetrics()",
          "106:   for j := 0; j < instrumentationLibraryMetricsSlice.Len(); j++ {",
          "107:    metricSlice := instrumentationLibraryMetricsSlice.At(j).Metrics()",
          "108:    for k := 0; k < metricSlice.Len(); k++ {",
          "109:     switch metric := metricSlice.At(k); metric.DataType() {",
          "110:     case pdata.MetricDataTypeGauge:",
          "111:      dataPoints := metric.Sum().DataPoints()",
          "112:      if err := e.handleNumberDataPoints(app, metric.Name(), dataPoints); err != nil {",
          "113:       return err",
          "114:      }",
          "115:     case pdata.MetricDataTypeSum:",
          "116:      if metric.Sum().AggregationTemporality() != pdata.MetricAggregationTemporalityCumulative {",
          "117:       continue // Only cumulative metrics are supported",
          "118:      }",
          "119:      dataPoints := metric.Sum().DataPoints()",
          "120:      if err := e.handleNumberDataPoints(app, metric.Name(), dataPoints); err != nil {",
          "121:       return err",
          "124:      if metric.Histogram().AggregationTemporality() != pdata.MetricAggregationTemporalityCumulative {",
          "125:       continue // Only cumulative metrics are supported",
          "126:      }",
          "127:      dataPoints := metric.Histogram().DataPoints()",
          "128:      if err := e.handleHistogramDataPoints(app, metric.Name(), dataPoints); err != nil {",
          "132:      return fmt.Errorf(\"unsupported metric data type %s\", metric.DataType())",
          "134:      return fmt.Errorf(\"unsupported metric data type %s\", metric.DataType())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121:  return app.Commit()",
          "122: }",
          "127: }",
          "130:  for ix := 0; ix < dataPoints.Len(); ix++ {",
          "131:   dataPoint := dataPoints.At(ix)",
          "133:    return err",
          "134:   }",
          "136:    return err",
          "137:   }",
          "",
          "[Removed Lines]",
          "124: func (e *remoteWriteExporter) processHistogramMetrics(app storage.Appender, m pdata.Metric) error {",
          "125:  dps := m.Histogram().DataPoints()",
          "126:  return e.handleHistogramIntDataPoints(app, m.Name(), dps)",
          "129: func (e *remoteWriteExporter) handleHistogramIntDataPoints(app storage.Appender, name string, dataPoints pdata.HistogramDataPointSlice) error {",
          "132:   if err := e.appendDataPoint(app, name, sumSuffix, dataPoint, dataPoint.Sum()); err != nil {",
          "135:   if err := e.appendDataPoint(app, name, countSuffix, dataPoint, float64(dataPoint.Count())); err != nil {",
          "",
          "[Added Lines]",
          "143: func (e *remoteWriteExporter) handleNumberDataPoints(app storage.Appender, name string, dataPoints pdata.NumberDataPointSlice) error {",
          "144:  for ix := 0; ix < dataPoints.Len(); ix++ {",
          "145:   dataPoint := dataPoints.At(ix)",
          "146:   lbls := e.createLabelSet(name, noSuffix, dataPoint.Attributes(), labels.Labels{})",
          "147:   if err := e.appendNumberDataPoint(app, dataPoint, lbls); err != nil {",
          "148:    return fmt.Errorf(\"failed to process metric %s\", err)",
          "149:   }",
          "150:  }",
          "151:  return nil",
          "152: }",
          "154: func (e *remoteWriteExporter) appendNumberDataPoint(app storage.Appender, dataPoint pdata.NumberDataPoint, labels labels.Labels) error {",
          "155:  var val float64",
          "156:  switch dataPoint.ValueType() {",
          "157:  case pdata.MetricValueTypeDouble:",
          "158:   val = dataPoint.DoubleVal()",
          "159:  case pdata.MetricValueTypeInt:",
          "160:   val = float64(dataPoint.IntVal())",
          "161:  default:",
          "162:   return fmt.Errorf(\"unknown data point type: %s\", dataPoint.ValueType())",
          "163:  }",
          "164:  ts := e.timestamp()",
          "166:  _, err := app.Append(0, labels, ts, val)",
          "167:  return err",
          "170: func (e *remoteWriteExporter) handleHistogramDataPoints(app storage.Appender, name string, dataPoints pdata.HistogramDataPointSlice) error {",
          "173:   ts := e.timestamp()",
          "176:   sumLabels := e.createLabelSet(name, sumSuffix, dataPoint.Attributes(), labels.Labels{})",
          "177:   if _, err := app.Append(0, sumLabels, ts, dataPoint.Sum()); err != nil {",
          "182:   countLabels := e.createLabelSet(name, countSuffix, dataPoint.Attributes(), labels.Labels{})",
          "183:   if _, err := app.Append(0, countLabels, ts, float64(dataPoint.Count())); err != nil {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:    }",
          "144:    cumulativeCount += dataPoint.BucketCounts()[ix]",
          "145:    boundStr := strconv.FormatFloat(eb, 'f', -1, 64)",
          "148:     return err",
          "149:    }",
          "150:   }",
          "152:   cumulativeCount += dataPoint.BucketCounts()[len(dataPoint.BucketCounts())-1]",
          "155:    return err",
          "156:   }",
          "157:  }",
          "201:  return nil",
          "202: }",
          "",
          "[Removed Lines]",
          "146:    ls := labels.Labels{{Name: leStr, Value: boundStr}}",
          "147:    if err := e.appendDataPointWithLabels(app, name, bucketSuffix, dataPoint, float64(cumulativeCount), ls); err != nil {",
          "153:   ls := labels.Labels{{Name: leStr, Value: infBucket}}",
          "154:   if err := e.appendDataPointWithLabels(app, name, bucketSuffix, dataPoint, float64(cumulativeCount), ls); err != nil {",
          "159:  return nil",
          "160: }",
          "162: func (e *remoteWriteExporter) processScalarMetric(app storage.Appender, m pdata.Metric) error {",
          "163:  switch m.DataType() {",
          "164:  case pdata.MetricDataTypeSum:",
          "165:   dataPoints := m.Sum().DataPoints()",
          "166:   if err := e.handleScalarIntDataPoints(app, m.Name(), dataPoints); err != nil {",
          "167:    return err",
          "168:   }",
          "169:  case pdata.MetricDataTypeGauge:",
          "170:   dataPoints := m.Gauge().DataPoints()",
          "171:   if err := e.handleScalarIntDataPoints(app, m.Name(), dataPoints); err != nil {",
          "172:    return err",
          "173:   }",
          "174:  }",
          "176:  return nil",
          "177: }",
          "179: func (e *remoteWriteExporter) handleScalarIntDataPoints(app storage.Appender, name string, dataPoints pdata.NumberDataPointSlice) error {",
          "180:  for ix := 0; ix < dataPoints.Len(); ix++ {",
          "181:   dataPoint := dataPoints.At(ix)",
          "182:   if err := e.appendDataPoint(app, name, noSuffix, dataPoint, float64(dataPoint.IntVal())); err != nil {",
          "183:    return err",
          "184:   }",
          "185:  }",
          "186:  return nil",
          "187: }",
          "189: func (e *remoteWriteExporter) appendDataPoint(app storage.Appender, name, suffix string, dp dataPoint, v float64) error {",
          "190:  return e.appendDataPointWithLabels(app, name, suffix, dp, v, labels.Labels{})",
          "191: }",
          "193: func (e *remoteWriteExporter) appendDataPointWithLabels(app storage.Appender, name, suffix string, dp dataPoint, v float64, customLabels labels.Labels) error {",
          "194:  ls := e.createLabelSet(name, suffix, dp.Attributes(), customLabels)",
          "197:  ts := timestamp.FromTime(time.Now())",
          "198:  if _, err := app.Append(0, ls, ts, v); err != nil {",
          "199:   return err",
          "200:  }",
          "",
          "[Added Lines]",
          "194:    bucketLabels := e.createLabelSet(name, bucketSuffix, dataPoint.Attributes(), labels.Labels{{Name: leStr, Value: boundStr}})",
          "195:    if _, err := app.Append(0, bucketLabels, ts, float64(cumulativeCount)); err != nil {",
          "201:   infBucketLabels := e.createLabelSet(name, bucketSuffix, dataPoint.Attributes(), labels.Labels{{Name: leStr, Value: infBucket}})",
          "202:   if _, err := app.Append(0, infBucketLabels, ts, float64(cumulativeCount)); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "223:  return ls",
          "224: }",
          "226: func metricName(namespace, metric, suffix string) string {",
          "227:  if len(suffix) != 0 {",
          "228:   return fmt.Sprintf(\"%s_%s_%s\", namespace, metric, suffix)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231: func (e *remoteWriteExporter) timestamp() int64 {",
          "232:  return convertTimeStamp(time.Now())",
          "233: }",
          "236: func convertTimeStamp(t time.Time) int64 {",
          "237:  return timestamp.FromTime(t)",
          "238: }",
          "",
          "---------------"
        ],
        "pkg/traces/remotewriteexporter/exporter_test.go||pkg/traces/remotewriteexporter/exporter_test.go": [
          "File: pkg/traces/remotewriteexporter/exporter_test.go -> pkg/traces/remotewriteexporter/exporter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: )",
          "17: const (",
          "18:  sumMetric    = \"traces_spanmetrics_latency_sum\"",
          "19:  countMetric  = \"traces_spanmetrics_latency_count\"",
          "20:  bucketMetric = \"traces_spanmetrics_latency_bucket\"",
          "21: )",
          "24:  var (",
          "25:   countValue     uint64  = 20",
          "26:   sumValue       float64 = 100",
          "",
          "[Removed Lines]",
          "23: func TestRemoteWriteExporter_handleHistogramIntDataPoints(t *testing.T) {",
          "",
          "[Added Lines]",
          "18:  callsMetric  = \"traces_spanmetrics_calls_total\"",
          "24: func TestRemoteWriteExporter_ConsumeMetrics(t *testing.T) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:  manager := &mockManager{}",
          "33:  exp := remoteWriteExporter{",
          "34:   manager:      manager,",
          "36:   promInstance: \"traces\",",
          "37:  }",
          "51:  require.NoError(t, err)",
          "54:  sum := manager.instance.GetAppended(sumMetric)",
          "55:  require.Equal(t, len(sum), 1)",
          "",
          "[Removed Lines]",
          "35:   namespace:    \"traces_spanmetrics\",",
          "38:  instance, _ := manager.GetInstance(\"traces\")",
          "39:  app := instance.Appender(context.TODO())",
          "42:  dps := pdata.NewHistogramDataPointSlice()",
          "43:  dp := dps.AppendEmpty()",
          "44:  dp.SetTimestamp(pdata.NewTimestampFromTime(ts.UTC()))",
          "45:  dp.SetBucketCounts(bucketCounts)",
          "46:  dp.SetExplicitBounds(explicitBounds)",
          "47:  dp.SetCount(countValue)",
          "48:  dp.SetSum(sumValue)",
          "50:  err := exp.handleHistogramIntDataPoints(app, \"latency\", dps)",
          "",
          "[Added Lines]",
          "36:   namespace:    \"traces\",",
          "40:  metrics := pdata.NewMetrics()",
          "41:  ilm := metrics.ResourceMetrics().AppendEmpty().InstrumentationLibraryMetrics().AppendEmpty()",
          "42:  ilm.InstrumentationLibrary().SetName(\"spanmetrics\")",
          "45:  sm := ilm.Metrics().AppendEmpty()",
          "46:  sm.SetDataType(pdata.MetricDataTypeSum)",
          "47:  sm.SetName(\"spanmetrics_calls_total\")",
          "48:  sm.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)",
          "50:  sdp := sm.Sum().DataPoints().AppendEmpty()",
          "51:  sdp.SetTimestamp(pdata.NewTimestampFromTime(ts.UTC()))",
          "52:  sdp.SetDoubleVal(sumValue)",
          "55:  hm := ilm.Metrics().AppendEmpty()",
          "56:  hm.SetDataType(pdata.MetricDataTypeHistogram)",
          "57:  hm.SetName(\"spanmetrics_latency\")",
          "58:  hm.Histogram().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)",
          "60:  hdp := hm.Histogram().DataPoints().AppendEmpty()",
          "61:  hdp.SetTimestamp(pdata.NewTimestampFromTime(ts.UTC()))",
          "62:  hdp.SetBucketCounts(bucketCounts)",
          "63:  hdp.SetExplicitBounds(explicitBounds)",
          "64:  hdp.SetCount(countValue)",
          "65:  hdp.SetSum(sumValue)",
          "67:  err := exp.ConsumeMetrics(context.TODO(), metrics)",
          "71:  calls := manager.instance.GetAppended(callsMetric)",
          "72:  require.Equal(t, len(calls), 1)",
          "73:  require.Equal(t, calls[0].v, sumValue)",
          "74:  require.Equal(t, calls[0].l, labels.Labels{{Name: nameLabelKey, Value: \"traces_spanmetrics_calls_total\"}})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:  instance *mockInstance",
          "85: }",
          "88:  if m.instance == nil {",
          "89:   m.instance = &mockInstance{}",
          "90:  }",
          "",
          "[Removed Lines]",
          "87: func (m *mockManager) GetInstance(name string) (instance.ManagedInstance, error) {",
          "",
          "[Added Lines]",
          "110: func (m *mockManager) GetInstance(string) (instance.ManagedInstance, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120: type metric struct {",
          "121:  l labels.Labels",
          "122:  v float64",
          "123: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:  t int64",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:  return ms",
          "137: }",
          "141:  return 0, nil",
          "142: }",
          "",
          "[Removed Lines]",
          "139: func (a *mockAppender) Append(_ storage.SeriesRef, l labels.Labels, _ int64, v float64) (storage.SeriesRef, error) {",
          "140:  a.appendedMetrics = append(a.appendedMetrics, metric{l: l, v: v})",
          "",
          "[Added Lines]",
          "163: func (a *mockAppender) Append(_ storage.SeriesRef, l labels.Labels, t int64, v float64) (storage.SeriesRef, error) {",
          "164:  a.appendedMetrics = append(a.appendedMetrics, metric{l: l, t: t, v: v})",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: RELEASE_URL=\"https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}\"",
          "56: DEB_URL=\"${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb\"",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"0.23.0\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"0.24.0-rc.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.23.0'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.24.0-rc.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.23.0",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.24.0-rc.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.23.0',",
          "19:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.23.0',",
          "15:     agentctl: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.24.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.23.0',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.24.0-rc.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2957de6bd48413d597523f29122b4825ef4e4c2",
      "candidate_info": {
        "commit_hash": "b2957de6bd48413d597523f29122b4825ef4e4c2",
        "repo": "grafana/agent",
        "commit_url": "https://github.com/grafana/agent/commit/b2957de6bd48413d597523f29122b4825ef4e4c2",
        "files": [
          ".drone/drone.yml",
          "CHANGELOG.md",
          "cmd/agent-operator/Dockerfile",
          "cmd/agent/Dockerfile",
          "cmd/agentctl/Dockerfile",
          "docs/sources/configuration/integrations/node-exporter-config.md",
          "docs/sources/configuration/integrations/process-exporter-config.md",
          "docs/sources/operator/custom-resource-quickstart.md",
          "docs/sources/operator/getting-started.md",
          "docs/sources/set-up/install-agent-docker.md",
          "pkg/operator/defaults.go",
          "production/grafanacloud-install.sh",
          "production/kubernetes/agent-bare.yaml",
          "production/kubernetes/agent-loki.yaml",
          "production/kubernetes/agent-traces.yaml",
          "production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/build/templates/operator/main.jsonnet",
          "production/kubernetes/install-bare.sh",
          "production/operator/templates/agent-operator.yaml",
          "production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "tools/ci/docker-containers",
          "tools/crow/Dockerfile",
          "tools/make/packaging.mk",
          "tools/release",
          "tools/release-note.md",
          "tools/smoke/Dockerfile"
        ],
        "message": "Merge branch release-v0.28 into main (#2210)\n\n* prepare for v0.28.0-rc.0 release (#2204)\n\n* prepare for v0.28.0-rc.0 release\n\n* alphabetize contributors to Flow\n\n* fix invalid GOOS when generating release assets\n\n* tools/ci: s/VERISON/VERSION\n\n* s/VERISON/VERSION\n\n* tools/release: print commands\n\n* fix generation of github release draft\n\n* update github release draft note\n\n* update release script to pass drone tag directly\n\n* fix bad path for release note",
        "before_after_code_files": [
          "pkg/operator/defaults.go||pkg/operator/defaults.go",
          "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
          "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
          "production/kubernetes/build/templates/operator/main.jsonnet||production/kubernetes/build/templates/operator/main.jsonnet",
          "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
          "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
          "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "tools/make/packaging.mk||tools/make/packaging.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ],
          "candidate": [
            "pkg/operator/defaults.go||pkg/operator/defaults.go",
            "production/grafanacloud-install.sh||production/grafanacloud-install.sh",
            "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet",
            "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh",
            "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet",
            "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet",
            "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet"
          ]
        }
      },
      "candidate_diff": {
        "pkg/operator/defaults.go||pkg/operator/defaults.go": [
          "File: pkg/operator/defaults.go -> pkg/operator/defaults.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   \"v0.26.1\",",
          "31:   \"v0.27.0\",",
          "32:   \"v0.27.1\",",
          "34:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   \"v0.28.0-rc.0\",",
          "",
          "---------------"
        ],
        "production/grafanacloud-install.sh||production/grafanacloud-install.sh": [
          "File: production/grafanacloud-install.sh -> production/grafanacloud-install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #",
          "51: # Global constants.",
          "52: #",
          "55: # The DEB and RPM urls don't include the `v` version prefix in the file names,",
          "56: # so we trim it out using ${RELEASE_VERSION#v} below.",
          "",
          "[Removed Lines]",
          "53: RELEASE_VERSION=\"v0.27.1\"",
          "",
          "[Added Lines]",
          "53: RELEASE_VERSION=\"v0.28.0-rc.0\"",
          "",
          "---------------"
        ],
        "production/kubernetes/build/lib/version.libsonnet||production/kubernetes/build/lib/version.libsonnet": [
          "File: production/kubernetes/build/lib/version.libsonnet -> production/kubernetes/build/lib/version.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 'grafana/agent:v0.27.1'",
          "",
          "[Added Lines]",
          "1: 'grafana/agent:v0.28.0-rc.0'",
          "",
          "---------------"
        ],
        "production/kubernetes/build/templates/operator/main.jsonnet||production/kubernetes/build/templates/operator/main.jsonnet": [
          "File: production/kubernetes/build/templates/operator/main.jsonnet -> production/kubernetes/build/templates/operator/main.jsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: local op = import 'grafana-agent-operator/operator.libsonnet';",
          "13: local ga_util = import 'grafana-agent-operator/util/grafana-agent.libsonnet';",
          "15: local li_util = import 'grafana-agent-operator/util/logsinstance.libsonnet';",
          "16: local pl_util = import 'grafana-agent-operator/util/k8slogs.libsonnet';",
          "17: local mon_util = import 'grafana-agent-operator/util/k8smonitors.libsonnet';",
          "",
          "[Removed Lines]",
          "14: local mi_util =  import 'grafana-agent-operator/util/metricsinstance.libsonnet';",
          "",
          "[Added Lines]",
          "14: local mi_util = import 'grafana-agent-operator/util/metricsinstance.libsonnet';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:   local this = self,",
          "25:   _images:: {",
          "29:   },",
          "31:   _config:: {",
          "",
          "[Removed Lines]",
          "26:     agent: 'grafana/agent:v0.27.1',",
          "27:     agent_operator: 'grafana/agent-operator:v0.27.1',",
          "28:     ksm: 'registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.5.0'",
          "",
          "[Added Lines]",
          "26:     agent: 'grafana/agent:v0.28.0-rc.0',",
          "27:     agent_operator: 'grafana/agent-operator:v0.28.0-rc.0',",
          "28:     ksm: 'registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.5.0',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:     logs_url: '${LOGS_URL}',",
          "37:     logs_user: '${LOGS_USER}',",
          "38:     logs_key: '${LOGS_KEY}',",
          "40:     kubelet_job: 'kubelet',",
          "41:     cadvisor_job: 'cadvisor',",
          "42:     ksm_job: 'kube-state-metrics',",
          "",
          "[Removed Lines]",
          "39:     cluster_label: {cluster: '${CLUSTER}'},",
          "",
          "[Added Lines]",
          "39:     cluster_label: { cluster: '${CLUSTER}' },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46:   operator:",
          "47:     op.new(name='grafana-agent-operator', namespace=this._config.namespace, image=this._images.agent_operator, serviceAccount='grafana-agent-operator') +",
          "48:     op.withRbac(name='grafana-agent-operator', namespace=this._config.namespace),",
          "50:   grafana_agent:",
          "51:     ga.new(name='grafana-agent') +",
          "52:     ga.metadata.withNamespace(this._config.namespace) +",
          "53:     ga.spec.withServiceAccountName('grafana-agent') +",
          "54:     ga.spec.withImage(this._images.agent) +",
          "62:   metrics_instance:",
          "63:     mi.new(name='grafana-agent-metrics') +",
          "64:     mi.metadata.withNamespace(this._config.namespace) +",
          "67:     mi_util.withRemoteWrite(secretName='metrics-secret', metricsUrl=this._config.metrics_url) +",
          "68:     mi_util.withNilServiceMonitorNamespace(),",
          "76:   logs_instance:",
          "77:     li.new(name='grafana-agent-logs') +",
          "78:     li.metadata.withNamespace(this._config.namespace) +",
          "81:     li_util.withLogsClient(secretName='logs-secret', logsUrl=this._config.logs_url, externalLabels=this._config.cluster_label) +",
          "82:     li_util.withNilPodLogsNamespace(),",
          "90:   pod_logs:",
          "91:     pl.new('kubernetes-logs') +",
          "92:     pl.metadata.withNamespace(this._config.namespace) +",
          "94:     pl.spec.withPipelineStages(pl.spec.pipelineStages.withCri({})) +",
          "95:     pl.spec.namespaceSelector.withAny(true) +",
          "96:     pl.spec.selector.withMatchLabels({}) +",
          "",
          "[Removed Lines]",
          "55:     ga.spec.metrics.instanceSelector.withMatchLabels({agent: 'grafana-agent'}) +",
          "56:     ga.spec.logs.instanceSelector.withMatchLabels({agent: 'grafana-agent'}) +",
          "57:     ga.spec.integrations.selector.withMatchLabels({agent: 'grafana-agent'}) +",
          "58:     ga.spec.metrics.withExternalLabels(this._config.cluster_label),",
          "59:     rbac:",
          "60:       ga_util.withRbac(name='grafana-agent', namespace=this._config.namespace),",
          "65:     mi.metadata.withLabels({agent: 'grafana-agent'}) +",
          "66:     mi.spec.serviceMonitorSelector.withMatchLabels({instance: 'primary'}) +",
          "69:     metrics_secret:",
          "70:       secret.new('metrics-secret', {}) +",
          "71:       secret.withStringData({",
          "72:           username: this._config.metrics_user,",
          "73:           password: this._config.metrics_key,",
          "74:       }) + secret.mixin.metadata.withNamespace(this._config.namespace),",
          "79:     li.metadata.withLabels({agent: 'grafana-agent'}) +",
          "80:     li.spec.podLogsSelector.withMatchLabels({instance: 'primary'}) +",
          "83:     logs_secret:",
          "84:       secret.new('logs-secret', {}) +",
          "85:       secret.withStringData({",
          "86:           username: this._config.logs_user,",
          "87:           password: this._config.logs_key,",
          "88:       }) + secret.mixin.metadata.withNamespace(this._config.namespace),",
          "93:     pl.metadata.withLabels({instance: 'primary'}) +",
          "",
          "[Added Lines]",
          "55:     ga.spec.metrics.instanceSelector.withMatchLabels({ agent: 'grafana-agent' }) +",
          "56:     ga.spec.logs.instanceSelector.withMatchLabels({ agent: 'grafana-agent' }) +",
          "57:     ga.spec.integrations.selector.withMatchLabels({ agent: 'grafana-agent' }) +",
          "58:     ga.spec.metrics.withExternalLabels(this._config.cluster_label),",
          "59:   rbac:",
          "60:     ga_util.withRbac(name='grafana-agent', namespace=this._config.namespace),",
          "65:     mi.metadata.withLabels({ agent: 'grafana-agent' }) +",
          "66:     mi.spec.serviceMonitorSelector.withMatchLabels({ instance: 'primary' }) +",
          "69:   metrics_secret:",
          "70:     secret.new('metrics-secret', {}) +",
          "71:     secret.withStringData({",
          "72:       username: this._config.metrics_user,",
          "73:       password: this._config.metrics_key,",
          "74:     }) + secret.mixin.metadata.withNamespace(this._config.namespace),",
          "79:     li.metadata.withLabels({ agent: 'grafana-agent' }) +",
          "80:     li.spec.podLogsSelector.withMatchLabels({ instance: 'primary' }) +",
          "83:   logs_secret:",
          "84:     secret.new('logs-secret', {}) +",
          "85:     secret.withStringData({",
          "86:       username: this._config.logs_user,",
          "87:       password: this._config.logs_key,",
          "88:     }) + secret.mixin.metadata.withNamespace(this._config.namespace),",
          "93:     pl.metadata.withLabels({ instance: 'primary' }) +",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:   k8s_monitors: [",
          "100:     mon_util.newKubernetesMonitor(",
          "104:       targetNamespace=this._config.namespace,",
          "106:       jobLabel=this._config.kubelet_job,",
          "107:       metricsPath='/metrics',",
          "110:     mon_util.newKubernetesMonitor(",
          "114:       targetNamespace=this._config.namespace,",
          "116:       jobLabel=this._config.cadvisor_job,",
          "117:       metricsPath='/metrics/cadvisor',",
          "120:     mon_util.newServiceMonitor(",
          "121:       name='ksm-monitor',",
          "126:       jobLabel=this._config.ksm_job,",
          "127:       metricsPath='/metrics',",
          "130:   ],",
          "132:   kube_state_metrics:",
          "133:     ksm {",
          "134:       name:: 'kube-state-metrics',",
          "",
          "[Removed Lines]",
          "101:       name='kubelet-monitor',",
          "102:       namespace=this._config.namespace,",
          "103:       monitorLabels={instance: 'primary'},",
          "105:       targetLabels={'app.kubernetes.io/name': 'kubelet'},",
          "108:       allowlist=false,",
          "109:       allowlistMetrics=[]),",
          "111:       name='cadvisor-monitor',",
          "112:       namespace='default',",
          "113:       monitorLabels={instance: 'primary'},",
          "115:       targetLabels={'app.kubernetes.io/name': 'kubelet'},",
          "118:       allowlist=false,",
          "119:       allowlistMetrics=[]),",
          "122:       namespace=this._config.namespace,",
          "123:       monitorLabels={instance: 'primary'},",
          "124:       targetNamespace=this._config.namespace,",
          "125:       targetLabels={'app.kubernetes.io/name': 'kube-state-metrics'},",
          "128:       allowlist=false,",
          "129:       allowlistMetrics=[]),",
          "",
          "[Added Lines]",
          "101:       name='kubelet-monitor',",
          "102:       namespace=this._config.namespace,",
          "103:       monitorLabels={ instance: 'primary' },",
          "105:       targetLabels={ 'app.kubernetes.io/name': 'kubelet' },",
          "108:       allowlist=false,",
          "109:       allowlistMetrics=[]",
          "110:     ),",
          "112:       name='cadvisor-monitor',",
          "113:       namespace='default',",
          "114:       monitorLabels={ instance: 'primary' },",
          "116:       targetLabels={ 'app.kubernetes.io/name': 'kubelet' },",
          "119:       allowlist=false,",
          "120:       allowlistMetrics=[]",
          "121:     ),",
          "124:       namespace=this._config.namespace,",
          "125:       monitorLabels={ instance: 'primary' },",
          "126:       targetNamespace=this._config.namespace,",
          "127:       targetLabels={ 'app.kubernetes.io/name': 'kube-state-metrics' },",
          "130:       allowlist=false,",
          "131:       allowlistMetrics=[]",
          "132:     ),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:   events:",
          "141:     int.new('agent-eventhandler') +",
          "142:     int.metadata.withNamespace(this._config.namespace) +",
          "145:     int.spec.type.withUnique(true) +",
          "146:     int.spec.withConfig({",
          "149:     }) +",
          "150:     int_util.withPVC('agent-eventhandler'),",
          "157: }",
          "",
          "[Removed Lines]",
          "143:     int.metadata.withLabels({agent: 'grafana-agent'}) +",
          "144:     int.spec.withName(\"eventhandler\") +",
          "147:         logs_instance: this._config.namespace + '/' + 'grafana-agent-logs',",
          "148:         cache_path: '/etc/eventhandler/eventhandler.cache',",
          "151:     pvc:",
          "152:       pvc.new('agent-eventhandler') +",
          "153:       pvc.mixin.metadata.withNamespace(this._config.namespace) +",
          "154:       pvc.mixin.spec.withAccessModes('ReadWriteOnce') +",
          "155:       pvc.mixin.spec.resources.withRequests({ storage: '1Gi' }),",
          "",
          "[Added Lines]",
          "146:     int.metadata.withLabels({ agent: 'grafana-agent' }) +",
          "147:     int.spec.withName('eventhandler') +",
          "150:       logs_instance: this._config.namespace + '/' + 'grafana-agent-logs',",
          "151:       cache_path: '/etc/eventhandler/eventhandler.cache',",
          "154:   pvc:",
          "155:     pvc.new('agent-eventhandler') +",
          "156:     pvc.mixin.metadata.withNamespace(this._config.namespace) +",
          "157:     pvc.mixin.spec.withAccessModes('ReadWriteOnce') +",
          "158:     pvc.mixin.spec.resources.withRequests({ storage: '1Gi' }),",
          "",
          "---------------"
        ],
        "production/kubernetes/install-bare.sh||production/kubernetes/install-bare.sh": [
          "File: production/kubernetes/install-bare.sh -> production/kubernetes/install-bare.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: check_installed curl",
          "26: check_installed envsubst",
          "29: MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}",
          "30: NAMESPACE=${NAMESPACE:-default}",
          "",
          "[Removed Lines]",
          "28: MANIFEST_BRANCH=v0.27.1",
          "",
          "[Added Lines]",
          "28: MANIFEST_BRANCH=v0.28.0-rc.0",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v1/main.libsonnet||production/tanka/grafana-agent/v1/main.libsonnet": [
          "File: production/tanka/grafana-agent/v1/main.libsonnet -> production/tanka/grafana-agent/v1/main.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: (import './lib/traces.libsonnet') +",
          "16: {",
          "17:   _images:: {",
          "20:   },",
          "",
          "[Removed Lines]",
          "18:     agent: 'grafana/agent:v0.27.1',",
          "19:     agentctl: 'grafana/agentctl:v0.27.1',",
          "",
          "[Added Lines]",
          "18:     agent: 'grafana/agent:v0.28.0-rc.0',",
          "19:     agentctl: 'grafana/agentctl:v0.28.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/base.libsonnet||production/tanka/grafana-agent/v2/internal/base.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/base.libsonnet -> production/tanka/grafana-agent/v2/internal/base.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   local this = self,",
          "13:   _images:: {",
          "16:   },",
          "17:   _config:: {",
          "18:     name: name,",
          "",
          "[Removed Lines]",
          "14:     agent: 'grafana/agent:v0.27.1',",
          "15:     agentctl: 'grafana/agentctl:v0.27.1',",
          "",
          "[Added Lines]",
          "14:     agent: 'grafana/agent:v0.28.0-rc.0',",
          "15:     agentctl: 'grafana/agentctl:v0.28.0-rc.0',",
          "",
          "---------------"
        ],
        "production/tanka/grafana-agent/v2/internal/syncer.libsonnet||production/tanka/grafana-agent/v2/internal/syncer.libsonnet": [
          "File: production/tanka/grafana-agent/v2/internal/syncer.libsonnet -> production/tanka/grafana-agent/v2/internal/syncer.libsonnet",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: ) {",
          "15:   local _config = {",
          "16:     api: error 'api must be set',",
          "18:     schedule: '*/5 * * * *',",
          "19:     configs: [],",
          "20:   } + config,",
          "",
          "[Removed Lines]",
          "17:     image: 'grafana/agentctl:v0.27.1',",
          "",
          "[Added Lines]",
          "17:     image: 'grafana/agentctl:v0.28.0-rc.0',",
          "",
          "---------------"
        ],
        "tools/make/packaging.mk||tools/make/packaging.mk": [
          "File: tools/make/packaging.mk -> tools/make/packaging.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  $(PACKAGING_VARS) AGENT_BINARY=$@ $(MAKE) -f $(PARENT_MAKEFILE) agent",
          "76: dist/agent-windows-amd64.exe: GO_TAGS += builtinassets",
          "78: dist/agent-windows-amd64.exe: GOARCH  := amd64",
          "79: dist/agent-windows-amd64.exe: generate-ui",
          "80:  $(PACKAGING_VARS) AGENT_BINARY=$@ $(MAKE) -f $(PARENT_MAKEFILE) agent",
          "",
          "[Removed Lines]",
          "77: dist/agent-windows-amd64.exe: GOOS    := windows builtinassets",
          "",
          "[Added Lines]",
          "77: dist/agent-windows-amd64.exe: GOOS    := windows",
          "",
          "---------------"
        ]
      }
    }
  ]
}