{
  "cve_id": "CVE-2023-32694",
  "cve_desc": "Saleor Core is a composable, headless commerce API. Saleor's `validate_hmac_signature` function is vulnerable to timing attacks. Malicious users could abuse this vulnerability on Saleor deployments having the Adyen plugin enabled in order to determine the secret key and forge fake events, this could affect the database integrity such as marking an order as paid when it is not. This issue has been patched in versions 3.7.68, 3.8.40, 3.9.49, 3.10.36, 3.11.35, 3.12.25, and 3.13.16.",
  "repo": "saleor/saleor",
  "patch_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
  "patch_info": {
    "commit_hash": "1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "repo": "saleor/saleor",
    "commit_url": "https://github.com/saleor/saleor/commit/1328274e1a3d04ab87d7daee90229ff47b3bc35e",
    "files": [
      "saleor/graphql/schema.graphql",
      "saleor/order/__init__.py",
      "saleor/order/events.py",
      "saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py"
    ],
    "message": "Add webhooks logic",
    "before_after_code_files": [
      "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql",
      "saleor/order/__init__.py||saleor/order/__init__.py",
      "saleor/order/events.py||saleor/order/events.py",
      "saleor/payment/__init__.py||saleor/payment/__init__.py",
      "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
      "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
      "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
      "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py",
      "saleor/payment/utils.py||saleor/payment/utils.py"
    ]
  },
  "patch_diff": {
    "saleor/graphql/schema.graphql||saleor/graphql/schema.graphql": [
      "File: saleor/graphql/schema.graphql -> saleor/graphql/schema.graphql",
      "--- Hunk 1 ---",
      "[Context before]",
      "2750:   exportProducts(input: ExportProductsInput!): ExportProducts",
      "2751:   checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode",
      "2752:   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate",
      "2754:   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate",
      "2755:   checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach",
      "2756:   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach",
      "",
      "[Removed Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "[Added Lines]",
      "2753:   checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3063:   EMAIL_SENT",
      "3064:   PAYMENT_AUTHORIZED",
      "3065:   PAYMENT_CAPTURED",
      "3066:   PAYMENT_REFUNDED",
      "3067:   PAYMENT_VOIDED",
      "3068:   PAYMENT_FAILED",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3066:   PAYMENT_GATEWAY_NOTIFICATION",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3388: enum PaymentChargeStatusEnum {",
      "3389:   NOT_CHARGED",
      "3390:   PARTIALLY_CHARGED",
      "3391:   FULLY_CHARGED",
      "3392:   PARTIALLY_REFUNDED",
      "3393:   FULLY_REFUNDED",
      "3394: }",
      "3396: type PaymentCountableConnection {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3391:   PENDING",
      "3396:   REFUSED",
      "3397:   CANCELLED",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3435: input PaymentInput {",
      "3436:   gateway: String!",
      "3437:   token: String",
      "3439:   amount: Decimal",
      "3440:   billingAddress: AddressInput",
      "3441: }",
      "",
      "[Removed Lines]",
      "3438:   paymentData: JSONString",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5024: enum TransactionKind {",
      "5025:   AUTH",
      "5026:   REFUND",
      "5027:   CAPTURE",
      "5028:   VOID",
      "5029:   CONFIRM",
      "5030: }",
      "5032: union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029:   PENDING",
      "5031:   REFUND_ONGOING",
      "5035:   CANCEL",
      "",
      "---------------"
    ],
    "saleor/order/__init__.py||saleor/order/__init__.py": [
      "File: saleor/order/__init__.py -> saleor/order/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:     PAYMENT_REFUNDED = \"payment_refunded\"",
      "52:     PAYMENT_VOIDED = \"payment_voided\"",
      "53:     PAYMENT_FAILED = \"payment_failed\"",
      "55:     INVOICE_REQUESTED = \"invoice_requested\"",
      "56:     INVOICE_GENERATED = \"invoice_generated\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     PAYMENT_GATEWAY_NOTIFICATION = \"payment_gateway_notification\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:         (EMAIL_SENT, \"The email was sent\"),",
      "81:         (PAYMENT_AUTHORIZED, \"The payment was authorized\"),",
      "82:         (PAYMENT_CAPTURED, \"The payment was captured\"),",
      "83:         (PAYMENT_REFUNDED, \"The payment was refunded\"),",
      "84:         (PAYMENT_VOIDED, \"The payment was voided\"),",
      "85:         (PAYMENT_FAILED, \"The payment was failed\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:         (PAYMENT_GATEWAY_NOTIFICATION, \"Notification from payment gateway\"),",
      "",
      "---------------"
    ],
    "saleor/order/events.py||saleor/order/events.py": [
      "File: saleor/order/events.py -> saleor/order/events.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "260:     )",
      "263: def fulfillment_canceled_event(",
      "265: ) -> OrderEvent:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263: def payment_gateway_notification_event(",
      "265: ) -> OrderEvent:",
      "266:     if not _user_is_valid(user):",
      "267:         user = None",
      "268:     parameters = {\"message\": message}",
      "270:     if payment:",
      "271:         parameters.update({\"gateway\": payment.gateway, \"payment_id\": payment.token})",
      "273:     return OrderEvent.objects.create(",
      "274:         order=order,",
      "275:         type=OrderEvents.PAYMENT_GATEWAY_NOTIFICATION,",
      "276:         user=user,",
      "277:         parameters=parameters,",
      "278:     )",
      "",
      "---------------"
    ],
    "saleor/payment/__init__.py||saleor/payment/__init__.py": [
      "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     AUTH = \"auth\"",
      "61:     CAPTURE = \"capture\"",
      "62:     VOID = \"void\"",
      "63:     PENDING = \"pending\"",
      "64:     REFUND = \"refund\"",
      "65:     REFUND_ONGOING = \"refund_ongoing\"",
      "66:     CONFIRM = \"confirm\"",
      "67:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
      "68:     # Which were authorized, but needs to be confirmed manually by staff",
      "69:     # eg. Braintree with \"submit_for_settlement\" enabled",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     CAPTURE_FAILED = \"capture_failed\"",
      "67:     REFUND_FAILED = \"refund_failed\"",
      "68:     REFUND_REVERSED = \"refund_reversed\"",
      "70:     CANCEL = \"cancel\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:         (CAPTURE, \"Capture\"),",
      "76:         (VOID, \"Void\"),",
      "77:         (CONFIRM, \"Confirm\"),",
      "78:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:         (CANCEL, \"Cancel\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:     FULLY_CHARGED = \"fully-charged\"",
      "98:     PARTIALLY_REFUNDED = \"partially-refunded\"",
      "99:     FULLY_REFUNDED = \"fully-refunded\"",
      "101:     CHOICES = [",
      "102:         (NOT_CHARGED, \"Not charged\"),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     REFUSED = \"refused\"",
      "106:     CANCELLED = \"cancelled\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:         (FULLY_CHARGED, \"Fully charged\"),",
      "106:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
      "107:         (FULLY_REFUNDED, \"Fully refunded\"),",
      "108:     ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:         (REFUSED, \"Refused\"),",
      "116:         (CANCELLED, \"Cancelled\"),",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
      "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import json",
      "4: import Adyen",
      "5: from babel.numbers import get_currency_precision",
      "6: from django.core.handlers.wsgi import WSGIRequest",
      "8: from graphql_relay import from_global_id",
      "10: from ....checkout.models import Checkout",
      "",
      "[Removed Lines]",
      "2: from typing import Optional",
      "7: from django.http import HttpResponse, JsonResponse",
      "",
      "[Added Lines]",
      "2: from typing import List, Optional",
      "6: from django.contrib.auth.hashers import make_password",
      "8: from django.http import HttpResponse, HttpResponseNotFound, JsonResponse",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21:     request_data_for_payment,",
      "22:     request_for_payment_refund,",
      "23: )",
      "25: GATEWAY_NAME = \"Adyen\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: from .webhooks import handle_webhook",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:         {\"name\": \"Origin Key\", \"value\": \"\"},",
      "51:         {\"name\": \"Origin Url\", \"value\": \"\"},",
      "52:         {\"name\": \"Live\", \"value\": \"\"},",
      "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
      "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
      "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
      "",
      "[Removed Lines]",
      "53:         {\"name\": \"Enable notifications\", \"value\": True},",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
      "110:             \"help_text\": (",
      "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
      "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
      "115:             ),",
      "116:             \"label\": \"Enable notifications\",",
      "",
      "[Removed Lines]",
      "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
      "113:                 \"webhooks/ \"",
      "",
      "[Added Lines]",
      "113:                 \"webhook url is http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/ \"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "134:             \"help_text\": (",
      "135:                 \"Provide secret key generated on Adyen side.\"",
      "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
      "138:             ),",
      "139:             \"label\": \"HMAC secret key\",",
      "140:         },",
      "",
      "[Removed Lines]",
      "137:                 \"ions-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "137:                 \"ions-in-your-customer-area. The Saleor webhook url is \"",
      "138:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "143:             \"help_text\": (",
      "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
      "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "147:             ),",
      "148:             \"label\": \"Notification user\",",
      "149:         },",
      "",
      "[Removed Lines]",
      "146:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "147:                 \"set-up-notifications-in-your-customer-area \"",
      "148:                 \"The Saleor webhook url is \"",
      "149:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "152:             \"help_text\": (",
      "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
      "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
      "156:             ),",
      "157:             \"label\": \"Notification password\",",
      "158:         },",
      "",
      "[Removed Lines]",
      "155:                 \"set-up-notifications-in-your-customer-area\"",
      "",
      "[Added Lines]",
      "158:                 \"set-up-notifications-in-your-customer-area \"",
      "159:                 \"The Saleor webhook url is \"",
      "160:                 \"http(s)://<your-backend-url>/plugins/mirumee.payments.adyen/webhooks/\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "163:         configuration = {item[\"name\"]: item[\"value\"] for item in self.configuration}",
      "164:         self.config = GatewayConfig(",
      "165:             gateway_name=GATEWAY_NAME,",
      "167:             supported_currencies=configuration[\"Supported currencies\"],",
      "168:             connection_params={",
      "169:                 \"api_key\": configuration[\"API key\"],",
      "",
      "[Removed Lines]",
      "166:             auto_capture=True,  # FIXME check this",
      "",
      "[Added Lines]",
      "171:             auto_capture=configuration[",
      "172:                 \"Automatically mark payment as a capture\"",
      "173:             ],  # FIXME check this",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "171:                 \"return_url\": configuration[\"Return Url\"],",
      "172:                 \"origin_key\": configuration[\"Origin Key\"],",
      "173:                 \"origin_url\": configuration[\"Origin Url\"],",
      "174:             },",
      "175:         )",
      "176:         api_key = self.config.connection_params[\"api_key\"]",
      "177:         self.adyen = Adyen.Adyen(xapikey=api_key)",
      "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
      "184:     def _get_gateway_config(self) -> GatewayConfig:",
      "185:         return self.config",
      "",
      "[Removed Lines]",
      "181:         print(request.body)",
      "182:         return HttpResponse(\"[accepted]\")",
      "",
      "[Added Lines]",
      "181:                 \"live\": configuration[\"Live\"],",
      "182:                 \"webhook_hmac\": configuration[\"HMAC secret key\"],",
      "183:                 \"webhook_user\": configuration[\"Notification user\"],",
      "184:                 \"webhook_user_password\": configuration[\"Notification password\"],",
      "191:         config = self._get_gateway_config()",
      "192:         return handle_webhook(request, config)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "238:             raw_response=result.message,",
      "239:         )",
      "241:     @require_active_plugin",
      "242:     def get_payment_config(self, previous_value):",
      "243:         return []",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "251:     @classmethod",
      "252:     def _update_config_items(",
      "253:         cls, configuration_to_update: List[dict], current_config: List[dict]",
      "254:     ):",
      "255:         super()._update_config_items(configuration_to_update, current_config)",
      "256:         for item in current_config:",
      "257:             if item.get(\"name\") == \"Notification password\":",
      "258:                 item[\"value\"] = make_password(item[\"value\"])",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
      "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "15: logger = logging.getLogger(__name__)",
      "18: def get_price_amount(value: Decimal, currency: str):",
      "19:     \"\"\"Adyen doesn't use values with comma.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: def convert_adyen_price_format(value: str, currency: str):",
      "19:     value = Decimal(value)",
      "20:     precision = get_currency_precision(currency)",
      "21:     number_places = Decimal(10) ** -precision",
      "22:     return value * number_places",
      "",
      "---------------"
    ],
    "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
      "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import base64",
      "2: import binascii",
      "3: import hashlib",
      "4: import hmac",
      "5: import json",
      "6: from typing import Any, Dict, Optional",
      "8: from django.contrib.auth.hashers import check_password",
      "9: from django.core.handlers.wsgi import WSGIRequest",
      "10: from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotFound",
      "11: from django.http.request import HttpHeaders",
      "12: from graphql_relay import from_global_id",
      "14: from ....order.events import payment_gateway_notification_event",
      "15: from ....payment.models import Payment, Transaction",
      "16: from ... import TransactionKind",
      "17: from ...interface import GatewayConfig, GatewayResponse",
      "18: from ...utils import create_transaction, gateway_postprocess",
      "19: from .utils import convert_adyen_price_format",
      "22: def get_payment(payment_id: str) -> Payment:",
      "23:     _type, payment_id = from_global_id(payment_id)",
      "24:     payment = Payment.objects.prefetch_related(\"order\").filter(id=payment_id).first()",
      "25:     return payment",
      "28: def get_transaction(",
      "29:     payment: \"Payment\", transaction_id: str, kind: TransactionKind,",
      "30: ) -> Transaction:",
      "31:     transaction = payment.transactions.filter(kind=kind, token=transaction_id)",
      "32:     return transaction",
      "35: def create_new_transaction(notification, payment, kind):",
      "36:     transaction_id = notification.get(\"pspReference\")",
      "37:     currency = notification.get(\"amount\", {}).get(\"currency\")",
      "38:     amount = convert_adyen_price_format(",
      "39:         notification.get(\"amount\", {}).get(\"value\"), currency",
      "40:     )",
      "41:     is_success = True if notification.get(\"success\") == \"true\" else False",
      "43:     gateway_response = GatewayResponse(",
      "44:         kind=kind,",
      "45:         action_required=False,",
      "46:         transaction_id=transaction_id,",
      "47:         is_success=is_success,",
      "48:         amount=amount,",
      "49:         currency=currency,",
      "50:         error=\"\",",
      "51:         raw_response={},",
      "52:     )",
      "53:     return create_transaction(",
      "54:         payment,",
      "55:         kind=kind,",
      "56:         payment_information=None,",
      "57:         action_required=False,",
      "58:         gateway_response=gateway_response,",
      "59:     )",
      "62: def create_payment_notification_for_order(",
      "63:     payment: Payment, success_msg: str, failed_msg: Optional[str], is_success: bool",
      "64: ):",
      "65:     if not payment.order:",
      "66:         # Order is not assigned",
      "67:         return",
      "68:     msg = success_msg if is_success else failed_msg",
      "70:     payment_gateway_notification_event(",
      "71:         order=payment.order, user=None, message=msg, payment=payment",
      "72:     )",
      "75: def handle_authorization(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "76:     mark_capture = gateway_config.auto_capture",
      "77:     if mark_capture:",
      "78:         # If we mark order as a capture by default we don't need to handle auth actions",
      "79:         return",
      "80:     payment = get_payment(notification.get(\"merchantReference\"))",
      "81:     if not payment:",
      "82:         # We don't know anything about that payment",
      "83:         return",
      "85:     transaction_id = notification.get(\"pspReference\")",
      "86:     transaction = get_transaction(payment, transaction_id, TransactionKind.AUTH)",
      "87:     if transaction:",
      "88:         # We already marked it as Auth",
      "89:         return",
      "91:     transaction = create_new_transaction(notification, payment, TransactionKind.AUTH)",
      "93:     success_msg = \"Adyen: The payment request was successful.\"",
      "94:     failed_msg = \"Adyen: The payment request failed.\"",
      "95:     create_payment_notification_for_order(",
      "96:         payment, success_msg, failed_msg, transaction.is_success",
      "97:     )",
      "100: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "101:     payment = get_payment(notification.get(\"merchantReference\"))",
      "102:     if not payment:",
      "103:         return",
      "104:     transaction_id = notification.get(\"pspReference\")",
      "105:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
      "106:     if transaction:",
      "107:         # it is already cancelled",
      "108:         return",
      "109:     new_transaction = create_new_transaction(",
      "110:         notification, payment, TransactionKind.CANCEL",
      "111:     )",
      "112:     gateway_postprocess(new_transaction, payment)",
      "114:     success_msg = \"Adyen: The cancel request was successful.\"",
      "115:     failed_msg = \"Adyen: The request failed.\"",
      "116:     create_payment_notification_for_order(",
      "117:         payment, success_msg, failed_msg, transaction.is_success",
      "118:     )",
      "121: def handle_cancel_or_refund(",
      "122:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "123: ):",
      "124:     additional_data = notification.get(\"additionalData\")",
      "125:     action = additional_data.get(\"modification.action\")",
      "126:     if action == \"refund\":",
      "127:         handle_refund(notification, gateway_config)",
      "128:     elif action == \"cancel\":",
      "129:         handle_cancellation(notification, gateway_config)",
      "132: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "133:     payment = get_payment(notification.get(\"merchantReference\"))",
      "134:     if not payment:",
      "135:         return",
      "136:     transaction_id = notification.get(\"pspReference\")",
      "137:     transaction = get_transaction(payment, transaction_id, TransactionKind.CAPTURE)",
      "138:     if transaction and transaction.is_success:",
      "139:         # it is already captured",
      "140:         return",
      "142:     new_transaction = create_new_transaction(",
      "143:         notification, payment, TransactionKind.CAPTURE",
      "144:     )",
      "145:     gateway_postprocess(new_transaction, payment)",
      "147:     success_msg = f\"Adyen: The capture {transaction_id} request was successful.\"",
      "148:     failed_msg = f\"Adyen: The capture {transaction_id} request failed.\"",
      "149:     create_payment_notification_for_order(",
      "150:         payment, success_msg, failed_msg, transaction.is_success",
      "151:     )",
      "154: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "155:     payment = get_payment(notification.get(\"merchantReference\"))",
      "156:     if not payment:",
      "157:         return",
      "158:     transaction_id = notification.get(\"pspReference\")",
      "160:     transaction = get_transaction(",
      "161:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
      "162:     )",
      "163:     if transaction and transaction.is_success:",
      "164:         # it is already failed",
      "165:         return",
      "166:     new_transaction = create_new_transaction(",
      "167:         notification, payment, TransactionKind.CAPTURE_FAILED",
      "168:     )",
      "169:     gateway_postprocess(new_transaction, payment)",
      "171:     msg = f\"Adyen: The capture for {transaction_id} failed due to a technical issue.\"",
      "172:     create_payment_notification_for_order(payment, msg, None, True)",
      "175: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
      "176:     mark_capture = gateway_config.auto_capture",
      "177:     if mark_capture:",
      "178:         # If we mark order as a capture by default we don't need to handle this action",
      "179:         return",
      "180:     payment = get_payment(notification.get(\"merchantReference\"))",
      "181:     if not payment:",
      "182:         return",
      "183:     transaction_id = notification.get(\"pspReference\")",
      "184:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
      "185:     if transaction and transaction.is_success:",
      "186:         # it is already pending",
      "187:         return",
      "188:     new_transaction = create_new_transaction(",
      "189:         notification, payment, TransactionKind.PENDING",
      "190:     )",
      "191:     gateway_postprocess(new_transaction, payment)",
      "193:     msg = f\"Adyen: The transaction {transaction_id} is pending.\"",
      "194:     create_payment_notification_for_order(payment, msg, None, transaction.is_success)",
      "197: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "198:     payment = get_payment(notification.get(\"merchantReference\"))",
      "199:     if not payment:",
      "200:         return",
      "201:     transaction_id = notification.get(\"pspReference\")",
      "202:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "203:     if transaction and transaction.is_success:",
      "204:         # it is already refunded",
      "205:         return",
      "206:     new_transaction = create_new_transaction(",
      "207:         notification, payment, TransactionKind.REFUND",
      "208:     )",
      "209:     gateway_postprocess(new_transaction, payment)",
      "211:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "212:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "213:     create_payment_notification_for_order(",
      "214:         payment, success_msg, failed_msg, transaction.is_success",
      "215:     )",
      "218: def handle_failed_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
      "219:     payment = get_payment(notification.get(\"merchantReference\"))",
      "220:     if not payment:",
      "221:         return",
      "222:     transaction_id = notification.get(\"pspReference\")",
      "223:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "224:     if transaction and not transaction.is_success:",
      "225:         # The refund is already saved",
      "226:         return",
      "227:     new_transaction = create_new_transaction(",
      "228:         notification, payment, TransactionKind.REFUND",
      "229:     )",
      "230:     gateway_postprocess(new_transaction, payment)",
      "232:     msg = (",
      "233:         f\"The refund {transaction_id} failed due to a technical issue. If you receive \"",
      "234:         f\"more than two failures on the same refund, contact Adyen Support Team.\"",
      "235:     )",
      "236:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "239: def handle_reversed_refund(",
      "240:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "241: ):",
      "242:     payment = get_payment(notification.get(\"merchantReference\"))",
      "243:     if not payment:",
      "244:         return",
      "245:     transaction_id = notification.get(\"pspReference\")",
      "246:     transaction = get_transaction(",
      "247:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
      "248:     )",
      "250:     if transaction and not transaction.is_success:",
      "251:         # it is already refunded",
      "252:         return",
      "253:     new_transaction = create_new_transaction(",
      "254:         notification, payment, TransactionKind.REFUND_REVERSED",
      "255:     )",
      "256:     gateway_postprocess(new_transaction, payment)",
      "257:     msg = (",
      "258:         f\"Adyen: The refunded amount from {transaction_id} has been returned to Adyen, \"",
      "259:         f\"and is back in your account. This may happen if the shopper's bank account \"",
      "260:         f\"is no longer valid\"",
      "261:     )",
      "262:     create_payment_notification_for_order(payment, msg, msg, transaction.is_success)",
      "265: def handle_refund_with_data(",
      "266:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
      "267: ):",
      "269:     payment = get_payment(notification.get(\"merchantReference\"))",
      "270:     if not payment:",
      "271:         return",
      "272:     transaction_id = notification.get(\"pspReference\")",
      "273:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
      "274:     if transaction:",
      "275:         # it is already refunded",
      "276:         return",
      "277:     new_transaction = create_new_transaction(",
      "278:         notification, payment, TransactionKind.REFUND",
      "279:     )",
      "280:     gateway_postprocess(new_transaction, payment)",
      "281:     success_msg = f\"Adyen: The refund {transaction_id} request was successful.\"",
      "282:     failed_msg = f\"Adyen: The refund {transaction_id} request failed.\"",
      "283:     create_payment_notification_for_order(",
      "284:         payment, success_msg, failed_msg, transaction.is_success",
      "285:     )",
      "288: def webhook_not_implemented(",
      "289:     notification: Dict[str, Any], gateway_config: GatewayConfig",
      "290: ):",
      "291:     adyen_id = notification.get(\"pspReference\")",
      "292:     success = notification.get(\"success\", True)",
      "293:     event = notification.get(\"eventCode\")",
      "294:     payment = get_payment(notification.get(\"merchantReference\"))",
      "295:     if not payment:",
      "296:         return",
      "297:     msg = (",
      "298:         f\"Received not implemented notification from Adyen. Event name: {event}, \"",
      "299:         f\"success: {success}, adyen reference: {adyen_id}.\"",
      "300:     )",
      "301:     create_payment_notification_for_order(payment, msg, None, True)",
      "304: EVENT_MAP = {",
      "305:     \"AUTHORISATION\": handle_authorization,",
      "306:     \"AUTHORISATION_ADJUSTMENT\": webhook_not_implemented,",
      "307:     \"CANCELLATION\": handle_cancellation,",
      "308:     \"CANCEL_OR_REFUND\": handle_cancel_or_refund,",
      "309:     \"CAPTURE\": handle_capture,",
      "310:     \"CAPTURE_FAILED\": handle_failed_capture,",
      "311:     \"HANDLED_EXTERNALLY\": webhook_not_implemented,",
      "312:     \"ORDER_OPENED\": webhook_not_implemented,",
      "313:     \"ORDER_CLOSED\": webhook_not_implemented,",
      "314:     \"PENDING\": handle_pending,",
      "315:     \"PROCESS_RETRY\": webhook_not_implemented,",
      "316:     \"REFUND\": handle_refund,",
      "317:     \"REFUND_FAILED\": handle_failed_refund,",
      "318:     \"REFUNDED_REVERSED\": handle_reversed_refund,",
      "319:     \"REFUND_WITH_DATA\": handle_refund_with_data,",
      "320:     \"REPORT_AVAILABLE\": webhook_not_implemented,",
      "321:     \"VOID_PENDING_REFUND\": webhook_not_implemented,",
      "322: }",
      "325: def validate_hmac_signature(",
      "326:     notification: Dict[str, Any], gateway_config: \"GatewayConfig\"",
      "327: ) -> bool:",
      "329:     \"\"\"",
      "330:     pspReference 7914073381342284",
      "331:     originalReference",
      "332:     merchantAccountCode YOUR_MERCHANT_ACCOUNT",
      "333:     merchantReference TestPayment-1407325143704",
      "334:     value 1130",
      "335:     currency EUR",
      "336:     eventCode AUTHORISATION",
      "337:     success true",
      "338:     \"\"\"",
      "339:     hmac_key = gateway_config.connection_params.get(\"webhook_hmac\")",
      "340:     if not hmac_key:",
      "341:         return True",
      "343:     hmac_signature = notification.get(\"additionalData\", {}).get(\"hmacSignature\")",
      "344:     if not hmac_signature and hmac_key:",
      "345:         return False",
      "347:     success = \"true\" if notification.get(\"success\", \"\") else \"false\"",
      "348:     if notification.get(\"success\", None) is None:",
      "349:         success = \"\"",
      "351:     payload_list = [",
      "352:         notification.get(\"pspReference\", \"\"),",
      "353:         notification.get(\"originalReference\", \"\"),",
      "354:         notification.get(\"merchantAccountCode\", \"\"),",
      "355:         notification.get(\"merchantReference\", \"\"),",
      "356:         notification.get(\"value\", \"\"),",
      "357:         notification.get(\"currency\", \"\"),",
      "358:         notification.get(\"eventCode\", \"\"),",
      "359:         success,",
      "360:     ]",
      "361:     payload = \":\".join(payload_list)",
      "363:     hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)",
      "364:     expected_merchant_sign = base64.b64encode(hm.digest())",
      "365:     return hmac_signature == expected_merchant_sign.decode(\"utf-8\")",
      "368: def validate_auth_user(headers: HttpHeaders, gateway_config: \"GatewayConfig\") -> bool:",
      "369:     username = gateway_config.connection_params[\"webhook_user\"]",
      "370:     password = gateway_config.connection_params[\"webhook_user_password\"]",
      "371:     auth_header = headers.get(\"Authorization\")",
      "372:     if not auth_header and not username:",
      "373:         return True",
      "375:     split_auth = auth_header.split(maxsplit=1)",
      "376:     prefix = \"BASIC\"",
      "378:     if len(split_auth) != 2 or split_auth[0].upper() != prefix:",
      "379:         return False",
      "381:     auth = split_auth[1]",
      "382:     try:",
      "383:         request_username, request_password = base64.b64decode(auth).split(\":\")",
      "384:         user_is_correct = request_username == username",
      "385:         if user_is_correct and check_password(request_password, password):",
      "386:             return True",
      "387:     except binascii.Error:",
      "388:         pass",
      "389:     return False",
      "392: def handle_webhook(request: WSGIRequest, gateway_config: \"GatewayConfig\"):",
      "393:     json_data = json.loads(request.body)",
      "394:     # JSON and HTTP POST notifications always contain a single NotificationRequestItem",
      "395:     # object.",
      "396:     notification = json_data.get(\"notificationItems\")[0].get(",
      "397:         \"NotificationRequestItem\", {}",
      "398:     )",
      "400:     if not validate_hmac_signature(notification, gateway_config):",
      "401:         return HttpResponseBadRequest(\"Invalid or missing hmac signature.\")",
      "402:     if not validate_auth_user(notification, gateway_config):",
      "403:         return HttpResponseBadRequest(\"Invalid or missing basic auth.\")",
      "405:     event_handler = EVENT_MAP.get(notification.get(\"eventCode\", \"\"))",
      "406:     if event_handler:",
      "407:         event_handler(notification, gateway_config)",
      "408:         return HttpResponse(\"[accepted]\")",
      "409:     return HttpResponseNotFound()",
      "",
      "---------------"
    ],
    "saleor/payment/migrations/0019_auto_20200721_1313.py||saleor/payment/migrations/0019_auto_20200721_1313.py": [
      "File: saleor/payment/migrations/0019_auto_20200721_1313.py -> saleor/payment/migrations/0019_auto_20200721_1313.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Generated by Django 3.0.6 on 2020-07-21 13:13",
      "3: from django.db import migrations, models",
      "6: class Migration(migrations.Migration):",
      "8:     dependencies = [",
      "9:         (\"payment\", \"0018_auto_20200720_1118\"),",
      "10:     ]",
      "12:     operations = [",
      "13:         migrations.AlterField(",
      "14:             model_name=\"payment\",",
      "15:             name=\"charge_status\",",
      "16:             field=models.CharField(",
      "17:                 choices=[",
      "18:                     (\"not-charged\", \"Not charged\"),",
      "19:                     (\"pending\", \"Pending\"),",
      "20:                     (\"partially-charged\", \"Partially charged\"),",
      "21:                     (\"fully-charged\", \"Fully charged\"),",
      "22:                     (\"partially-refunded\", \"Partially refunded\"),",
      "23:                     (\"fully-refunded\", \"Fully refunded\"),",
      "24:                     (\"refused\", \"Refused\"),",
      "25:                     (\"cancelled\", \"Cancelled\"),",
      "26:                 ],",
      "27:                 default=\"not-charged\",",
      "28:                 max_length=20,",
      "29:             ),",
      "30:         ),",
      "31:         migrations.AlterField(",
      "32:             model_name=\"transaction\",",
      "33:             name=\"kind\",",
      "34:             field=models.CharField(",
      "35:                 choices=[",
      "36:                     (\"auth\", \"Authorization\"),",
      "37:                     (\"pending\", \"Pending\"),",
      "38:                     (\"refund\", \"Refund\"),",
      "39:                     (\"refund_ongoing\", \"Refund in progress\"),",
      "40:                     (\"capture\", \"Capture\"),",
      "41:                     (\"void\", \"Void\"),",
      "42:                     (\"confirm\", \"Confirm\"),",
      "43:                     (\"cancel\", \"Cancel\"),",
      "44:                 ],",
      "45:                 max_length=25,",
      "46:             ),",
      "47:         ),",
      "48:     ]",
      "",
      "---------------"
    ],
    "saleor/payment/utils.py||saleor/payment/utils.py": [
      "File: saleor/payment/utils.py -> saleor/payment/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "132: def create_transaction(",
      "133:     payment: Payment,",
      "134:     kind: str,",
      "136:     action_required: bool = False,",
      "137:     gateway_response: GatewayResponse = None,",
      "138:     error_msg=None,",
      "",
      "[Removed Lines]",
      "135:     payment_information: PaymentData,",
      "",
      "[Added Lines]",
      "135:     payment_information: Optional[PaymentData],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
      "221:     #     payment.save(update_fields=[\"charge_status\", ])",
      "224:         payment.captured_amount += transaction.amount",
      "226:         # Set payment charge status to fully charged",
      "",
      "[Removed Lines]",
      "223:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
      "",
      "[Added Lines]",
      "223:     if transaction_kind in {",
      "224:         TransactionKind.CAPTURE,",
      "225:         TransactionKind.CONFIRM,",
      "226:         TransactionKind.REFUND_REVERSED,",
      "227:     }:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "249:         payment.save(",
      "250:             update_fields=[\"charge_status\",]",
      "251:         )",
      "254: def fetch_customer_id(user: User, gateway: str):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "256:     elif transaction_kind == TransactionKind.CANCEL:",
      "257:         payment.charge_status = ChargeStatus.CANCELLED",
      "258:         payment.save(",
      "259:             update_fields=[\"charge_status\",]",
      "260:         )",
      "261:     elif transaction_kind == TransactionKind.CAPTURE_FAILED:",
      "262:         if payment.charge_status in {",
      "263:             ChargeStatus.PARTIALLY_CHARGED,",
      "264:             ChargeStatus.FULLY_CHARGED,",
      "265:         }:",
      "266:             payment.captured_amount -= transaction.amount",
      "267:             payment.charge_status = ChargeStatus.PARTIALLY_CHARGED",
      "268:             if payment.get_charge_amount() <= 0:",
      "269:                 payment.charge_status = ChargeStatus.FULLY_CHARGED",
      "271:             payment.save(update_fields=[\"charge_status\", \"captured_amount\", \"modified\"])",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "77c9484c2585a845aa7b675fbebb08949601dd4c",
      "candidate_info": {
        "commit_hash": "77c9484c2585a845aa7b675fbebb08949601dd4c",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/77c9484c2585a845aa7b675fbebb08949601dd4c",
        "files": [
          "saleor/core/payments.py",
          "saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/types.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/payment/__init__.py",
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/interface.py",
          "saleor/payment/migrations/0018_auto_20200720_1118.py",
          "saleor/payment/models.py",
          "saleor/payment/utils.py",
          "saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py"
        ],
        "message": "Add base functionalities for adyen",
        "before_after_code_files": [
          "saleor/core/payments.py||saleor/core/payments.py",
          "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py",
          "saleor/graphql/checkout/types.py||saleor/graphql/checkout/types.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/payment/__init__.py||saleor/payment/__init__.py",
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
          "saleor/payment/interface.py||saleor/payment/interface.py",
          "saleor/payment/migrations/0018_auto_20200720_1118.py||saleor/payment/migrations/0018_auto_20200720_1118.py",
          "saleor/payment/models.py||saleor/payment/models.py",
          "saleor/payment/utils.py||saleor/payment/utils.py",
          "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py",
          "saleor/plugins/manager.py||saleor/plugins/manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/__init__.py||saleor/payment/__init__.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ],
          "candidate": [
            "saleor/payment/__init__.py||saleor/payment/__init__.py",
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
            "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py",
            "saleor/payment/utils.py||saleor/payment/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/core/payments.py||saleor/core/payments.py": [
          "File: saleor/core/payments.py -> saleor/core/payments.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     @abstractmethod",
          "25:     def checkout_available_payment_gateways(",
          "30:     ) -> List[\"PaymentGateway\"]:",
          "31:         pass",
          "",
          "[Removed Lines]",
          "26:         self,",
          "27:         checkout: \"Checkout\",",
          "28:         lines: Iterable[\"CheckoutLine\"],",
          "29:         discounts: Iterable[\"DiscountInfo\"],",
          "",
          "[Added Lines]",
          "26:         self, checkout: \"Checkout\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     ) -> \"GatewayResponse\":",
          "61:         pass",
          "63:     @abstractmethod",
          "64:     def process_payment(",
          "65:         self, gateway: str, payment_information: \"PaymentData\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     @abstractmethod",
          "61:     def token_is_required_as_payment_input(self, gateway) -> bool:",
          "62:         pass",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/mutations.py||saleor/graphql/checkout/mutations.py": [
          "File: saleor/graphql/checkout/mutations.py -> saleor/graphql/checkout/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:                 \"see the order details. URL in RFC 1808 format.\"",
          "755:             ),",
          "756:         )",
          "758:     class Meta:",
          "759:         description = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:         payment_data = graphene.JSONString(",
          "758:             required=False,",
          "759:             description=(",
          "760:                 \"Client-side generated data required to finalize the payment.\"",
          "761:             ),",
          "762:         )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "835:         if shipping_address is not None:",
          "836:             shipping_address = AddressData(**shipping_address.as_data())",
          "839:         try:",
          "847:             if not txn.is_success:",
          "848:                 raise PaymentError(txn.error)",
          "",
          "[Removed Lines]",
          "838:         # payment_confirmation = payment.to_confirm",
          "840:             # if payment_confirmation:",
          "841:             #     txn = gateway.confirm(payment)",
          "842:             # else:",
          "843:             txn = gateway.process_payment(",
          "844:                 payment=payment, token=payment.token, store_source=store_source",
          "845:             )",
          "",
          "[Added Lines]",
          "844:         payment_confirmation = payment.to_confirm",
          "846:             if payment_confirmation:",
          "847:                 txn = gateway.confirm(payment, additional_data=data.get(\"payment_data\"))",
          "848:             else:",
          "849:                 txn = gateway.process_payment(",
          "850:                     payment=payment,",
          "851:                     token=payment.token,",
          "852:                     store_source=store_source,",
          "853:                     additional_data=data.get(\"payment_data\"),",
          "854:                 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "857:         confirmation_needed = False",
          "858:         confirmation_data = {}",
          "871:             # If gateway returns information that additional steps are required we need",
          "872:             # to inform the frontend and pass all required data",
          "873:             confirmation_needed = True",
          "",
          "[Removed Lines]",
          "860:         order = create_order(",
          "861:             checkout=checkout,",
          "862:             order_data=order_data,",
          "863:             user=user,",
          "864:             redirect_url=redirect_url,",
          "865:         )",
          "867:         # remove checkout after order is successfully paid",
          "868:         checkout.delete()",
          "870:         if txn.action_required:",
          "",
          "[Added Lines]",
          "867:         order = None",
          "869:         if not txn.action_required:",
          "870:             order = create_order(",
          "871:                 checkout=checkout,",
          "872:                 order_data=order_data,",
          "873:                 user=user,",
          "874:                 redirect_url=redirect_url,",
          "875:             )",
          "877:             # remove checkout after order is successfully paid",
          "878:             checkout.delete()",
          "880:         else:",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/types.py||saleor/graphql/checkout/types.py": [
          "File: saleor/graphql/checkout/types.py -> saleor/graphql/checkout/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     @staticmethod",
          "247:     def resolve_available_payment_gateways(root: models.Checkout, info):",
          "256:     @staticmethod",
          "257:     def resolve_gift_cards(root: models.Checkout, _info):",
          "",
          "[Removed Lines]",
          "248:         lines = CheckoutLinesByCheckoutTokenLoader(info.context).load(root.token)",
          "249:         discounts = DiscountsByDateTimeLoader(info.context).load(",
          "250:             info.context.request_time",
          "251:         )",
          "252:         return get_plugins_manager().checkout_available_payment_gateways(",
          "253:             checkout=root, lines=lines, discounts=discounts",
          "254:         )",
          "",
          "[Added Lines]",
          "248:         return get_plugins_manager().checkout_available_payment_gateways(checkout=root)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             \"billing data in a secure manner.\"",
          "37:         ),",
          "38:     )",
          "43:     amount = Decimal(",
          "44:         required=False,",
          "45:         description=(",
          "",
          "[Removed Lines]",
          "39:     payment_data = graphene.JSONString(",
          "40:         required=False,",
          "41:         description=(\"Client-side generated data required to finalize the payment.\"),",
          "42:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:             )",
          "127:     @classmethod",
          "129:         token = input_data.get(\"token\")",
          "132:             raise ValidationError(",
          "133:                 {",
          "134:                     \"token\": ValidationError(",
          "140:                         code=PaymentErrorCode.REQUIRED.value,",
          "141:                     ),",
          "142:                 }",
          "",
          "[Removed Lines]",
          "128:     def validate_token_or_data(cls, input_data: dict):",
          "130:         payment_data = input_data.get(\"payment_data\")",
          "131:         if not token and not payment_data:",
          "135:                         \"paymentData or token is required.\",",
          "136:                         code=PaymentErrorCode.REQUIRED.value,",
          "137:                     ),",
          "138:                     \"payment_data\": ValidationError(",
          "139:                         \"paymentData or token is required.\",",
          "",
          "[Added Lines]",
          "124:     def validate_token(cls, manager, gateway: str, input_data: dict):",
          "126:         is_required = manager.token_is_required_as_payment_input(gateway)",
          "127:         if not token and is_required:",
          "131:                         f\"Token is required for {gateway}.\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:         gateway = data[\"gateway\"]",
          "157:         cls.validate_gateway(gateway, checkout.currency)",
          "160:         checkout_total = cls.calculate_total(info, checkout)",
          "161:         amount = data.get(\"amount\", checkout_total.gross.amount)",
          "",
          "[Removed Lines]",
          "158:         cls.validate_token_or_data(data)",
          "",
          "[Added Lines]",
          "150:         cls.validate_token(info.context.plugins, gateway, data)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "168:             \"customer_user_agent\": info.context.META.get(\"HTTP_USER_AGENT\"),",
          "169:         }",
          "177:         cancel_active_payments(checkout)",
          "179:         payment = create_payment(",
          "",
          "[Removed Lines]",
          "171:         # TODO Define if we want to store it in extra data as this field is available",
          "172:         # over API",
          "173:         payment_data = data.get(\"payment_data\")",
          "174:         if payment_data:",
          "175:             extra_data[\"payment_data\"] = payment_data",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/payment/__init__.py||saleor/payment/__init__.py": [
          "File: saleor/payment/__init__.py -> saleor/payment/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     AUTH = \"auth\"",
          "61:     CAPTURE = \"capture\"",
          "62:     VOID = \"void\"",
          "63:     REFUND = \"refund\"",
          "64:     CONFIRM = \"confirm\"",
          "65:     # FIXME we could use another status like WAITING_FOR_AUTH for transactions",
          "66:     # Which were authorized, but needs to be confirmed manually by staff",
          "67:     # eg. Braintree with \"submit_for_settlement\" enabled",
          "68:     CHOICES = [",
          "69:         (AUTH, \"Authorization\"),",
          "70:         (REFUND, \"Refund\"),",
          "71:         (CAPTURE, \"Capture\"),",
          "72:         (VOID, \"Void\"),",
          "73:         (CONFIRM, \"Confirm\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     PENDING = \"pending\"",
          "65:     REFUND_ONGOING = \"refund_ongoing\"",
          "72:         (PENDING, \"Pending\"),",
          "74:         (REFUND_ONGOING, \"Refund in progress\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     \"\"\"",
          "90:     NOT_CHARGED = \"not-charged\"",
          "91:     PARTIALLY_CHARGED = \"partially-charged\"",
          "92:     FULLY_CHARGED = \"fully-charged\"",
          "93:     PARTIALLY_REFUNDED = \"partially-refunded\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:     PENDING = \"pending\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     CHOICES = [",
          "97:         (NOT_CHARGED, \"Not charged\"),",
          "98:         (PARTIALLY_CHARGED, \"Partially charged\"),",
          "99:         (FULLY_CHARGED, \"Fully charged\"),",
          "100:         (PARTIALLY_REFUNDED, \"Partially refunded\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:         (PENDING, \"Pending\"),",
          "",
          "---------------"
        ],
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: from decimal import Decimal",
          "5: from ..payment.interface import TokenConfig",
          "6: from ..plugins.manager import get_plugins_manager",
          "",
          "[Removed Lines]",
          "3: from typing import TYPE_CHECKING, Callable, List",
          "",
          "[Added Lines]",
          "3: from typing import TYPE_CHECKING, Callable, List, Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: @raise_payment_error",
          "59: @require_active_payment",
          "60: def process_payment(",
          "62: ) -> Transaction:",
          "63:     plugin_manager = get_plugins_manager()",
          "64:     payment_data = create_payment_information(",
          "66:     )",
          "67:     response, error = _fetch_gateway_response(",
          "68:         plugin_manager.process_payment, payment.gateway, payment_data",
          "",
          "[Removed Lines]",
          "61:     payment: Payment, token: str, store_source: bool = False",
          "65:         payment=payment, payment_token=token, store_source=store_source",
          "",
          "[Added Lines]",
          "61:     payment: Payment,",
          "62:     token: str,",
          "63:     store_source: bool = False,",
          "64:     additional_data: Optional[dict] = None,",
          "68:         payment=payment,",
          "69:         payment_token=token,",
          "70:         store_source=store_source,",
          "71:         additional_data=additional_data,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175: @payment_postprocess",
          "176: @raise_payment_error",
          "177: @require_active_payment",
          "179:     plugin_manager = get_plugins_manager()",
          "180:     token = _get_past_transaction_token(payment, TransactionKind.CAPTURE)",
          "182:     response, error = _fetch_gateway_response(",
          "183:         plugin_manager.confirm_payment, payment.gateway, payment_data",
          "184:     )",
          "",
          "[Removed Lines]",
          "178: def confirm(payment: Payment) -> Transaction:",
          "181:     payment_data = create_payment_information(payment=payment, payment_token=token)",
          "",
          "[Added Lines]",
          "184: def confirm(payment: Payment, additional_data: Optional[dict] = None) -> Transaction:",
          "187:     payment_data = create_payment_information(",
          "188:         payment=payment, payment_token=token, additional_data=additional_data",
          "189:     )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "4: import Adyen",
          "11: from ....core.prices import quantize_price",
          "13: from ....plugins.base_plugin import BasePlugin, ConfigurationTypeField",
          "14: from ... import PaymentError, TransactionKind",
          "15: from ...interface import GatewayConfig, GatewayResponse, PaymentData, PaymentGateway",
          "16: from ..utils import get_supported_currencies",
          "18: GATEWAY_NAME = \"Adyen\"",
          "",
          "[Removed Lines]",
          "2: from typing import Iterable, Optional",
          "5: from django.conf import settings",
          "6: from django_countries.fields import Country",
          "7: from promise import Promise",
          "9: from ....checkout import calculations",
          "10: from ....checkout.models import Checkout, CheckoutLine",
          "12: from ....discount import DiscountInfo",
          "",
          "[Added Lines]",
          "2: from typing import Optional",
          "5: from babel.numbers import get_currency_precision",
          "6: from django.core.handlers.wsgi import WSGIRequest",
          "7: from django.http import HttpResponse, JsonResponse",
          "8: from graphql_relay import from_global_id",
          "10: from ....checkout.models import Checkout",
          "12: from ....graphql.core.scalars import Decimal",
          "16: from ...models import Transaction",
          "18: from .utils import (",
          "19:     api_call,",
          "20:     request_data_for_gateway_config,",
          "21:     request_data_for_payment,",
          "22:     request_for_payment_refund,",
          "23: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     return wrapped",
          "31: class AdyenGatewayPlugin(BasePlugin):",
          "33:     PLUGIN_ID = \"mirumee.payments.adyen\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:         {\"name\": \"Return Url\", \"value\": \"\"},",
          "40:         {\"name\": \"Origin Key\", \"value\": \"\"},",
          "41:         {\"name\": \"Origin Url\", \"value\": \"\"},",
          "42:     ]",
          "44:     CONFIG_STRUCTURE = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:         {\"name\": \"Live\", \"value\": \"\"},",
          "53:         {\"name\": \"Enable notifications\", \"value\": True},",
          "54:         {\"name\": \"Automatically mark payment as a capture\", \"value\": True},",
          "55:         {\"name\": \"HMAC secret key\", \"value\": \"\"},",
          "56:         {\"name\": \"Notification user\", \"value\": \"\"},",
          "57:         {\"name\": \"Notification password\", \"value\": \"\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64:         },",
          "65:         \"Return Url\": {",
          "66:             \"type\": ConfigurationTypeField.STRING,",
          "68:             \"label\": \"Return Url\",",
          "69:         },",
          "70:         \"Origin Key\": {",
          "71:             \"type\": ConfigurationTypeField.STRING,",
          "73:             \"label\": \"Origin Key\",",
          "74:         },",
          "75:         \"Origin Url\": {",
          "76:             \"type\": ConfigurationTypeField.STRING,",
          "78:             \"label\": \"Origin Url\",",
          "79:         },",
          "80:     }",
          "82:     def __init__(self, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "67:             \"help_text\": \"\",",
          "72:             \"help_text\": \"\",",
          "77:             \"help_text\": \"\",",
          "",
          "[Added Lines]",
          "83:             \"help_text\": \"\",  # FIXME define them as per channel",
          "88:             \"help_text\": \"\",  # FIXME define them as per channel",
          "93:             \"help_text\": \"\",  # FIXME define them as per channel",
          "96:         \"Live\": {",
          "97:             \"type\": ConfigurationTypeField.STRING,",
          "98:             \"help_text\": (",
          "99:                 \"Live it blank when you want to use test env. To communicate with the\"",
          "100:                 \" Adyen API you should submit HTTP POST requests to corresponding \"",
          "101:                 \"endpoints. These endpoints differ for test and live accounts, and also\"",
          "102:                 \" depend on the data format (SOAP, JSON, or FORM) you use to submit \"",
          "103:                 \"data to the Adyen payments platform. \"",
          "104:                 \"https://docs.adyen.com/development-resources/live-endpoints\"",
          "105:             ),",
          "106:             \"label\": \"Live\",",
          "107:         },",
          "108:         \"Enable notifications\": {",
          "109:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "110:             \"help_text\": (",
          "111:                 \"Enable the support for processing the Adyen's webhooks. The Saleor \"",
          "112:                 \"webhook url is <your-backend-url>/plugins/mirumee.payments.adyen/\"",
          "113:                 \"webhooks/ \"",
          "114:                 \"https://docs.adyen.com/development-resources/webhooks\"",
          "115:             ),",
          "116:             \"label\": \"Enable notifications\",",
          "117:         },",
          "118:         \"Automatically mark payment as a capture\": {",
          "119:             \"type\": ConfigurationTypeField.BOOLEAN,",
          "120:             \"help_text\": (",
          "121:                 \"Saleor by default doesn't receive notification which payment has \"",
          "122:                 \"status capture, all sucess payment can be marked as a capture by \"",
          "123:                 \"default.\"",
          "124:                 \"A payment that is automatically captured does not trigger a \"",
          "125:                 \"separate CAPTURE notification. If you are using delayed automatic \"",
          "126:                 \"capture (by having a Capture Delay of a fixed number of days), you \"",
          "127:                 \"can optionally receive CAPTURE notifications. To enable this \"",
          "128:                 \"functionality, contact with Adyen Support Team.\"",
          "129:             ),",
          "130:             \"label\": \"Automatically mark payment as a capture\",",
          "131:         },",
          "132:         \"HMAC secret key\": {",
          "133:             \"type\": ConfigurationTypeField.SECRET,",
          "134:             \"help_text\": (",
          "135:                 \"Provide secret key generated on Adyen side.\"",
          "136:                 \"https://docs.adyen.com/development-resources/webhooks#set-up-notificat\"",
          "137:                 \"ions-in-your-customer-area\"",
          "138:             ),",
          "139:             \"label\": \"HMAC secret key\",",
          "140:         },",
          "141:         \"Notification user\": {",
          "142:             \"type\": ConfigurationTypeField.STRING,",
          "143:             \"help_text\": (",
          "144:                 \"Base User provided on the Adyen side for authenticate incoming \"",
          "145:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "146:                 \"set-up-notifications-in-your-customer-area\"",
          "147:             ),",
          "148:             \"label\": \"Notification user\",",
          "149:         },",
          "150:         \"Notification password\": {",
          "151:             \"type\": ConfigurationTypeField.SECRET,",
          "152:             \"help_text\": (",
          "153:                 \"User password provided on the Adyen side for authenticate incoming \"",
          "154:                 \"notifications. https://docs.adyen.com/development-resources/webhooks#\"",
          "155:                 \"set-up-notifications-in-your-customer-area\"",
          "156:             ),",
          "157:             \"label\": \"Notification password\",",
          "158:         },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:         api_key = self.config.connection_params[\"api_key\"]",
          "98:         self.adyen = Adyen.Adyen(xapikey=api_key)",
          "100:     def _get_gateway_config(self) -> GatewayConfig:",
          "101:         return self.config",
          "103:     @require_active_plugin",
          "104:     def get_payment_gateway_for_checkout(",
          "110:     ) -> Optional[\"PaymentGateway\"]:",
          "119:         config = self._get_gateway_config()",
          "146:         return PaymentGateway(",
          "147:             id=self.PLUGIN_ID,",
          "148:             name=self.PLUGIN_NAME,",
          "",
          "[Removed Lines]",
          "105:         self,",
          "106:         checkout: \"Checkout\",",
          "107:         lines: Iterable[\"CheckoutLine\"],",
          "108:         discounts: Iterable[\"DiscountInfo\"],",
          "109:         previous_value,",
          "111:         def checkout_total(data):",
          "112:             lines, discounts = data",
          "113:             return calculations.checkout_total(",
          "114:                 checkout=checkout, lines=lines, discounts=discounts",
          "115:             )",
          "117:         total = Promise.all([lines, discounts]).then(checkout_total)",
          "120:         merchant_account = config.connection_params[\"merchant_account\"]",
          "121:         address = checkout.billing_address or checkout.shipping_address",
          "123:         # FIXME check how it works if we have None here",
          "124:         country = address.country if address else None",
          "125:         if country:",
          "126:             country_code = country.code",
          "127:         else:",
          "128:             country_code = Country(settings.DEFAULT_COUNTRY).code",
          "129:         channel = checkout.get_value_from_metadata(\"channel\", \"web\")",
          "130:         checkout.get_total_gift_cards_balance()",
          "131:         request = {",
          "132:             \"merchantAccount\": merchant_account,",
          "133:             \"countryCode\": country_code,",
          "134:             # \"shopperLocale\":",
          "135:             # \"amount\": {",
          "136:             #     \"value\": float(",
          "137:             #         quantize_price(total.get().gross.amount, checkout.currency)",
          "138:             #     ),",
          "139:             #     \"currency\": checkout.currency,",
          "140:             # },",
          "141:             \"channel\": channel,",
          "142:         }",
          "143:         response = self.adyen.checkout.payment_methods(request)",
          "144:         # self.adyen.checkout.origin_keys()",
          "145:         print(response.message)",
          "",
          "[Added Lines]",
          "179:     def webhook(self, request: WSGIRequest, path: str, previous_value) -> HttpResponse:",
          "181:         print(request.body)",
          "182:         return HttpResponse(\"[accepted]\")",
          "187:     @require_active_plugin",
          "188:     def token_is_required_as_payment_input(self, previous_value):",
          "189:         return False",
          "193:         self, checkout: \"Checkout\", previous_value,",
          "197:         request = request_data_for_gateway_config(",
          "198:             checkout, config.connection_params[\"merchant_account\"]",
          "199:         )",
          "200:         response = api_call(request, self.adyen.checkout.payment_methods)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "153:                 },",
          "154:                 {",
          "155:                     \"field\": \"config\",",
          "157:                 },",
          "158:             ],",
          "159:             currencies=self.get_supported_currencies([]),",
          "",
          "[Removed Lines]",
          "156:                     \"value\": json.dumps(response.message[\"paymentMethods\"]),",
          "",
          "[Added Lines]",
          "211:                     \"value\": json.dumps(response.message.get(\"paymentMethods\", {})),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "163:     def process_payment(",
          "164:         self, payment_information: \"PaymentData\", previous_value",
          "165:     ) -> \"GatewayResponse\":",
          "205:         )",
          "215:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "216:         return GatewayResponse(",
          "217:             is_success=is_success,",
          "218:             action_required=\"action\" in result.message,",
          "220:             amount=payment_information.amount,",
          "221:             currency=payment_information.currency,",
          "224:             raw_response=result.message,",
          "225:         )",
          "",
          "[Removed Lines]",
          "166:         extra_data = json.loads(payment_information.extra_data)  # try catch here",
          "167:         print(extra_data)",
          "168:         payment_data = extra_data.get(\"payment_data\")",
          "169:         # this is additional parameter which comes from",
          "170:         if not payment_data.pop(\"is_valid\", True):",
          "171:             raise PaymentError(\"Payment data are not valid\")",
          "173:         extra_request_params = {}",
          "174:         if \"browserInfo\" in payment_data:",
          "175:             extra_request_params[\"browserInfo\"] = payment_data[\"browserInfo\"]",
          "176:         if \"billingAddress\" in payment_data:",
          "177:             extra_request_params[\"billingAddress\"] = payment_data[\"billingAddress\"]",
          "178:         if \"shopperIP\" in payment_data:",
          "179:             extra_request_params[\"shopperIP\"] = payment_data[\"shopperIP\"]",
          "180:         if (",
          "181:             \"browserInfo\" in extra_request_params",
          "182:             and \"billingAddress\" in extra_request_params",
          "183:         ):",
          "184:             # Replace this assigment. Add note that customer_ip_address has incorrect name",
          "185:             # Add to dashboard config the flow to combine channel with url like:",
          "186:             # web1:https://shop.com, web2:https://shop1.com",
          "187:             extra_request_params[\"origin\"] = self.config.connection_params[\"origin_url\"]",
          "189:         result = self.adyen.checkout.payments(",
          "190:             {",
          "191:                 \"amount\": {",
          "192:                     \"value\": float(",
          "193:                         quantize_price(",
          "194:                             payment_information.amount, payment_information.currency",
          "195:                         )",
          "196:                     ),",
          "197:                     \"currency\": payment_information.currency,",
          "198:                 },",
          "199:                 \"reference\": payment_information.payment_id,",
          "200:                 \"paymentMethod\": payment_data[\"paymentMethod\"],",
          "201:                 \"returnUrl\": self.config.connection_params[\"return_url\"],",
          "202:                 \"merchantAccount\": self.config.connection_params[\"merchant_account\"],",
          "204:             }",
          "206:         FAILED_STATUSES = [\"refused\", \"error\", \"cancelled\"]",
          "207:         # Check if further action is needed",
          "208:         # if 'action' in result.message:",
          "209:         # Pass the action object to your front end",
          "210:         # result.message['action']",
          "211:         # else:",
          "212:         # No further action needed, pass the resultCode to your front end",
          "213:         # result.message['resultCode']",
          "214:         # FIXME Assign token",
          "219:             kind=TransactionKind.CAPTURE,",
          "222:             transaction_id=payment_data.get(\"pspReference\", \"\"),",
          "223:             error=None,  # FIXME",
          "",
          "[Added Lines]",
          "221:         request_data = request_data_for_payment(",
          "222:             payment_information,",
          "223:             return_url=self.config.connection_params[\"return_url\"],",
          "224:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "225:             origin_url=self.config.connection_params[\"origin_url\"],",
          "228:         result = api_call(request_data, self.adyen.checkout.payments)",
          "233:             kind=TransactionKind.AUTH,",
          "236:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "237:             error=result.message.get(\"refusalReason\"),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "232:     def get_supported_currencies(self, previous_value):",
          "233:         config = self._get_gateway_config()",
          "234:         return get_supported_currencies(config, GATEWAY_NAME)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     @require_active_plugin",
          "251:     def confirm_payment(",
          "252:         self, payment_information: \"PaymentData\", previous_value",
          "253:     ) -> \"GatewayResponse\":",
          "254:         additional_data = payment_information.data",
          "255:         result = api_call(additional_data, self.adyen.checkout.payments)",
          "256:         is_success = result.message[\"resultCode\"].strip().lower() not in FAILED_STATUSES",
          "258:         return GatewayResponse(",
          "259:             is_success=is_success,",
          "260:             action_required=\"action\" in result.message,",
          "261:             kind=TransactionKind.CONFIRM,",
          "262:             amount=payment_information.amount,",
          "263:             currency=payment_information.currency,",
          "264:             transaction_id=result.get(\"pspReference\", \"\"),",
          "265:             error=result.message.get(\"refusalReason\"),",
          "266:             raw_response=result.message,",
          "267:         )",
          "269:     @require_active_plugin",
          "270:     def refund_payment(",
          "271:         self, payment_information: \"PaymentData\", previous_value",
          "272:     ) -> \"GatewayResponse\":",
          "274:         _type, payment_id = from_global_id(payment_information.payment_id)",
          "275:         transaction = (",
          "276:             Transaction.objects.filter(",
          "277:                 payment__id=payment_id, kind=TransactionKind.CAPTURE",
          "278:             )",
          "279:             .exclude(token__isnull=True, token__exact=\"\")",
          "280:             .last()",
          "281:         )",
          "283:         if not transaction:",
          "284:             raise PaymentError(\"Cannot find a payment reference to refund.\")",
          "286:         request = request_for_payment_refund(",
          "287:             payment_information=payment_information,",
          "288:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "289:             token=transaction.token,",
          "290:         )",
          "291:         result = api_call(request, self.adyen.payment.refund)",
          "293:         return GatewayResponse(",
          "294:             is_success=True,",
          "295:             action_required=False,",
          "296:             kind=TransactionKind.REFUND_ONGOING,",
          "297:             amount=payment_information.amount,",
          "298:             currency=payment_information.currency,",
          "299:             transaction_id=result.message.get(\"pspReference\", \"\"),",
          "300:             error=\"\",",
          "301:             raw_response=result.message,",
          "302:         )",
          "304:     def capture_payment(",
          "305:         self, payment_information: \"PaymentData\", previous_value",
          "306:     ) -> \"GatewayResponse\":",
          "307:         pass",
          "309:     def void_payment(",
          "310:         self, payment_information: \"PaymentData\", previous_value",
          "311:     ) -> \"GatewayResponse\":",
          "312:         pass",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils.py||saleor/payment/gateways/adyen/utils.py": [
          "File: saleor/payment/gateways/adyen/utils.py -> saleor/payment/gateways/adyen/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: from decimal import Decimal",
          "3: from typing import Any, Callable, Dict",
          "5: import Adyen",
          "6: from babel.numbers import get_currency_precision",
          "7: from django.conf import settings",
          "8: from django_countries.fields import Country",
          "10: from ....checkout.models import Checkout",
          "11: from ....core.prices import quantize_price",
          "12: from ... import PaymentError",
          "13: from ...interface import PaymentData",
          "15: logger = logging.getLogger(__name__)",
          "18: def get_price_amount(value: Decimal, currency: str):",
          "19:     \"\"\"Adyen doesn't use values with comma.",
          "21:     Take the value, discover the precision of currency and multiply value by",
          "22:     Decimal('10.0'), then change quantization to remove the comma.",
          "23:     \"\"\"",
          "24:     value = quantize_price(value, currency=currency)",
          "25:     precision = get_currency_precision(currency)",
          "26:     number_places = Decimal(\"10.0\") ** precision",
          "27:     value_without_comma = value * number_places",
          "28:     return str(value_without_comma.quantize(Decimal(\"1\")))",
          "31: def api_call(requst_data: Dict[str, Any], method: Callable) -> Adyen.Adyen:",
          "32:     try:",
          "33:         return method(requst_data)",
          "34:     except (Adyen.AdyenError, ValueError, TypeError) as e:",
          "35:         logger.error(f\"Unable to process the payment: {e}\")",
          "36:         raise PaymentError(\"Unable to process the payment request.\")",
          "39: def request_data_for_payment(",
          "40:     payment_information: \"PaymentData\", return_url, merchant_account, origin_url",
          "41: ) -> Dict[str, Any]:",
          "42:     payment_data = payment_information.data or {}",
          "44:     if not payment_data.pop(\"is_valid\", True):",
          "45:         raise PaymentError(\"Payment data are not valid\")",
          "47:     extra_request_params = {}",
          "48:     if \"browserInfo\" in payment_data:",
          "49:         extra_request_params[\"browserInfo\"] = payment_data[\"browserInfo\"]",
          "50:     if \"billingAddress\" in payment_data:",
          "51:         extra_request_params[\"billingAddress\"] = payment_data[\"billingAddress\"]",
          "52:     if \"shopperIP\" in payment_data:",
          "53:         extra_request_params[\"shopperIP\"] = payment_data[\"shopperIP\"]",
          "54:     if (",
          "55:         \"browserInfo\" in extra_request_params",
          "56:         and \"billingAddress\" in extra_request_params",
          "57:     ):",
          "58:         # Replace this assigment. Add note that customer_ip_address has incorrect name",
          "59:         # Add to dashboard config the flow to combine channel with url like:",
          "60:         # web1:https://shop.com, web2:https://shop1.com",
          "61:         extra_request_params[\"origin\"] = origin_url",
          "62:     print(",
          "63:         float(quantize_price(payment_information.amount, payment_information.currency))",
          "64:     )",
          "65:     request = {",
          "66:         \"amount\": {",
          "67:             \"value\": get_price_amount(",
          "68:                 payment_information.amount, payment_information.currency",
          "69:             ),",
          "70:             \"currency\": payment_information.currency,",
          "71:         },",
          "72:         \"reference\": payment_information.payment_id,",
          "73:         \"paymentMethod\": payment_data[\"paymentMethod\"],",
          "74:         \"returnUrl\": return_url,",
          "75:         \"merchantAccount\": merchant_account,",
          "77:     }",
          "78:     return request",
          "81: def request_data_for_gateway_config(",
          "82:     checkout: \"Checkout\", merchant_account",
          "83: ) -> Dict[str, str]:",
          "84:     address = checkout.billing_address or checkout.shipping_address",
          "86:     # FIXME check how it works if we have None here",
          "87:     country = address.country if address else None",
          "88:     if country:",
          "89:         country_code = country.code",
          "90:     else:",
          "91:         country_code = Country(settings.DEFAULT_COUNTRY).code",
          "92:     channel = checkout.get_value_from_metadata(\"channel\", \"web\")",
          "93:     return {",
          "94:         \"merchantAccount\": merchant_account,",
          "95:         \"countryCode\": country_code,",
          "96:         \"channel\": channel,",
          "97:     }",
          "100: def request_for_payment_refund(",
          "101:     payment_information: \"PaymentData\", merchant_account, token",
          "102: ) -> Dict[str, Any]:",
          "103:     return {",
          "104:         \"merchantAccount\": merchant_account,",
          "105:         \"modificationAmount\": {",
          "106:             \"value\": get_price_amount(",
          "107:                 payment_information.amount, payment_information.currency",
          "108:             ),",
          "109:             \"currency\": payment_information.currency,",
          "110:         },",
          "111:         \"originalReference\": token,",
          "112:         \"reference\": payment_information.payment_id,",
          "113:     }",
          "",
          "---------------"
        ],
        "saleor/payment/interface.py||saleor/payment/interface.py": [
          "File: saleor/payment/interface.py -> saleor/payment/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     token: Optional[str] = None",
          "73:     customer_id: Optional[str] = None",
          "74:     reuse_source: bool = False",
          "78: @dataclass",
          "",
          "[Removed Lines]",
          "75:     extra_data: str = None",
          "",
          "[Added Lines]",
          "75:     data: Optional[JSONType] = None",
          "",
          "---------------"
        ],
        "saleor/payment/migrations/0018_auto_20200720_1118.py||saleor/payment/migrations/0018_auto_20200720_1118.py": [
          "File: saleor/payment/migrations/0018_auto_20200720_1118.py -> saleor/payment/migrations/0018_auto_20200720_1118.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated by Django 3.0.6 on 2020-07-20 11:18",
          "3: from django.db import migrations, models",
          "6: class Migration(migrations.Migration):",
          "8:     dependencies = [",
          "9:         (\"payment\", \"0017_transaction_action_required_data\"),",
          "10:     ]",
          "12:     operations = [",
          "13:         migrations.AlterField(",
          "14:             model_name=\"payment\",",
          "15:             name=\"charge_status\",",
          "16:             field=models.CharField(",
          "17:                 choices=[",
          "18:                     (\"action-required\", \"Action required\"),",
          "19:                     (\"not-charged\", \"Not charged\"),",
          "20:                     (\"partially-charged\", \"Partially charged\"),",
          "21:                     (\"fully-charged\", \"Fully charged\"),",
          "22:                     (\"partially-refunded\", \"Partially refunded\"),",
          "23:                     (\"fully-refunded\", \"Fully refunded\"),",
          "24:                 ],",
          "25:                 default=\"not-charged\",",
          "26:                 max_length=20,",
          "27:             ),",
          "28:         ),",
          "29:         migrations.AlterField(",
          "30:             model_name=\"transaction\",",
          "31:             name=\"kind\",",
          "32:             field=models.CharField(",
          "33:                 choices=[",
          "34:                     (\"action\", \"Action required\"),",
          "35:                     (\"auth\", \"Authorization\"),",
          "36:                     (\"refund\", \"Refund\"),",
          "37:                     (\"refund_ongoing\", \"Refund in progress\"),",
          "38:                     (\"capture\", \"Capture\"),",
          "39:                     (\"void\", \"Void\"),",
          "40:                     (\"confirm\", \"Confirm\"),",
          "41:                 ],",
          "42:                 max_length=25,",
          "43:             ),",
          "44:         ),",
          "45:     ]",
          "",
          "---------------"
        ],
        "saleor/payment/models.py||saleor/payment/models.py": [
          "File: saleor/payment/models.py -> saleor/payment/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:         Payment, related_name=\"transactions\", on_delete=models.PROTECT",
          "193:     )",
          "194:     token = models.CharField(max_length=128, blank=True, default=\"\")",
          "196:     is_success = models.BooleanField(default=False)",
          "197:     action_required = models.BooleanField(default=False)",
          "198:     action_required_data = JSONField(",
          "",
          "[Removed Lines]",
          "195:     kind = models.CharField(max_length=10, choices=TransactionKind.CHOICES)",
          "",
          "[Added Lines]",
          "195:     kind = models.CharField(max_length=25, choices=TransactionKind.CHOICES)",
          "",
          "---------------"
        ],
        "saleor/payment/utils.py||saleor/payment/utils.py": [
          "File: saleor/payment/utils.py -> saleor/payment/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     amount: Decimal = None,",
          "30:     customer_id: str = None,",
          "31:     store_source: bool = False,",
          "32: ) -> PaymentData:",
          "33:     \"\"\"Extract order information along with payment details.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     additional_data: Optional[dict] = None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         customer_id=customer_id,",
          "63:         customer_email=payment.billing_email,",
          "64:         reuse_source=store_source,",
          "66:     )",
          "",
          "[Removed Lines]",
          "65:         extra_data=payment.extra_data,",
          "",
          "[Added Lines]",
          "66:         data=additional_data or {},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:         return",
          "217:     transaction_kind = transaction.kind",
          "219:     if transaction_kind in {TransactionKind.CAPTURE, TransactionKind.CONFIRM}:",
          "220:         payment.captured_amount += transaction.amount",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:     # if transaction.action_required:",
          "220:     #     payment.charge_status = ChargeStatus.ACTION_REQUIRED",
          "221:     #     payment.save(update_fields=[\"charge_status\", ])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:             payment.is_active = False",
          "241:         changed_fields += [\"charge_status\", \"is_active\"]",
          "242:         payment.save(update_fields=changed_fields)",
          "245: def fetch_customer_id(user: User, gateway: str):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     elif transaction_kind == TransactionKind.PENDING:",
          "248:         payment.charge_status = ChargeStatus.PENDING",
          "249:         payment.save(",
          "250:             update_fields=[\"charge_status\",]",
          "251:         )",
          "",
          "---------------"
        ],
        "saleor/plugins/base_plugin.py||saleor/plugins/base_plugin.py": [
          "File: saleor/plugins/base_plugin.py -> saleor/plugins/base_plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:     ) -> \"GatewayResponse\":",
          "368:         return NotImplemented",
          "370:     def refund_payment(",
          "371:         self, payment_information: \"PaymentData\", previous_value",
          "372:     ) -> \"GatewayResponse\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:     def void_payment(",
          "371:         self, payment_information: \"PaymentData\", previous_value",
          "372:     ) -> \"GatewayResponse\":",
          "373:         return NotImplemented",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:     def get_supported_currencies(self, previous_value):",
          "397:         return NotImplemented",
          "399:     def get_payment_gateway(",
          "400:         self, currency: Optional[str], previous_value",
          "401:     ) -> Optional[\"PaymentGateway\"]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:     def token_is_required_as_payment_input(self, previous_value):",
          "405:         return previous_value",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:         )",
          "415:     def get_payment_gateway_for_checkout(",
          "421:     ) -> Optional[\"PaymentGateway\"]:",
          "422:         return self.get_payment_gateway(checkout.currency, previous_value)",
          "",
          "[Removed Lines]",
          "416:         self,",
          "417:         checkout: \"Checkout\",",
          "418:         lines: Iterable[\"CheckoutLine\"],",
          "419:         discounts: Iterable[\"DiscountInfo\"],",
          "420:         previous_value,",
          "",
          "[Added Lines]",
          "424:         self, checkout: \"Checkout\", previous_value,",
          "",
          "---------------"
        ],
        "saleor/plugins/manager.py||saleor/plugins/manager.py": [
          "File: saleor/plugins/manager.py -> saleor/plugins/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:         method_name = \"process_payment\"",
          "320:         return self.__run_payment_method(gateway, method_name, payment_information)",
          "322:     def get_client_token(self, gateway, token_config: \"TokenConfig\") -> str:",
          "323:         method_name = \"get_client_token\"",
          "324:         default_value = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     def token_is_required_as_payment_input(self, gateway) -> bool:",
          "323:         method_name = \"token_is_required_as_payment_input\"",
          "324:         default_value = True",
          "325:         gtw = self.get_plugin(gateway)",
          "326:         if gtw is not None:",
          "327:             return self.__run_method_on_single_plugin(",
          "328:                 gtw, method_name, previous_value=default_value,",
          "329:             )",
          "330:         return default_value",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:         return gateways",
          "369:     def checkout_available_payment_gateways(",
          "374:     ) -> List[\"PaymentGateway\"]:",
          "375:         payment_plugins = self.list_payment_plugin(active_only=True)",
          "376:         gateways = []",
          "377:         for plugin in payment_plugins.values():",
          "378:             gateway = plugin.get_payment_gateway_for_checkout(",
          "380:             )",
          "381:             if gateway:",
          "382:                 gateways.append(gateway)",
          "",
          "[Removed Lines]",
          "370:         self,",
          "371:         checkout: \"Checkout\",",
          "372:         lines: Iterable[\"CheckoutLine\"],",
          "373:         discounts: Iterable[DiscountInfo],",
          "379:                 checkout, lines, discounts, previous_value=None",
          "",
          "[Added Lines]",
          "380:         self, checkout: \"Checkout\",",
          "386:                 checkout, previous_value=None",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9abf7176cfdce140fcb0302dea339ce00bb90f82",
      "candidate_info": {
        "commit_hash": "9abf7176cfdce140fcb0302dea339ce00bb90f82",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/9abf7176cfdce140fcb0302dea339ce00bb90f82",
        "files": [
          "saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/braintree/__init__.py",
          "saleor/payment/gateways/razorpay/__init__.py",
          "saleor/payment/gateways/stripe/__init__.py",
          "saleor/plugins/avatax/__init__.py",
          "saleor/plugins/avatax/plugin.py",
          "saleor/plugins/avatax/tasks.py"
        ],
        "message": "Use separate services for external integrations",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py",
          "saleor/payment/gateways/adyen/utils/common.py||saleor/payment/gateways/adyen/utils/common.py",
          "saleor/payment/gateways/braintree/__init__.py||saleor/payment/gateways/braintree/__init__.py",
          "saleor/payment/gateways/razorpay/__init__.py||saleor/payment/gateways/razorpay/__init__.py",
          "saleor/payment/gateways/stripe/__init__.py||saleor/payment/gateways/stripe/__init__.py",
          "saleor/plugins/avatax/__init__.py||saleor/plugins/avatax/__init__.py",
          "saleor/plugins/avatax/plugin.py||saleor/plugins/avatax/plugin.py",
          "saleor/plugins/avatax/tasks.py||saleor/plugins/avatax/tasks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/plugin.py||saleor/payment/gateways/adyen/plugin.py": [
          "File: saleor/payment/gateways/adyen/plugin.py -> saleor/payment/gateways/adyen/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from urllib.parse import urlencode",
          "5: import Adyen",
          "6: from django.contrib.auth.hashers import make_password",
          "7: from django.contrib.sites.models import Site",
          "8: from django.core.exceptions import ObjectDoesNotExist, ValidationError",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import opentracing",
          "7: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:         if path.startswith(WEBHOOK_PATH):",
          "227:             return handle_webhook(request, config)",
          "228:         elif path.startswith(ADDITIONAL_ACTION_PATH):",
          "233:         return HttpResponseNotFound()",
          "235:     def _get_gateway_config(self) -> GatewayConfig:",
          "",
          "[Removed Lines]",
          "229:             return handle_additional_actions(",
          "230:                 request,",
          "231:                 self.adyen.checkout.payments_details,",
          "232:             )",
          "",
          "[Added Lines]",
          "231:             with opentracing.global_tracer().start_active_span(",
          "232:                 \"adyen.checkout.payment_details\"",
          "233:             ) as scope:",
          "234:                 span = scope.span",
          "235:                 span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "236:                 span.set_tag(\"service.name\", \"adyen\")",
          "237:                 return handle_additional_actions(",
          "238:                     request,",
          "239:                     self.adyen.checkout.payments_details,",
          "240:                 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:         request = request_data_for_gateway_config(",
          "266:             checkout, config.connection_params[\"merchant_account\"]",
          "267:         )",
          "269:         return PaymentGateway(",
          "270:             id=self.PLUGIN_ID,",
          "271:             name=self.PLUGIN_NAME,",
          "",
          "[Removed Lines]",
          "268:         response = api_call(request, self.adyen.checkout.payment_methods)",
          "",
          "[Added Lines]",
          "276:         with opentracing.global_tracer().start_active_span(",
          "277:             \"adyen.checkout.payment_methods\"",
          "278:         ) as scope:",
          "279:             span = scope.span",
          "280:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "281:             span.set_tag(\"service.name\", \"adyen\")",
          "282:             response = api_call(request, self.adyen.checkout.payment_methods)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "314:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "315:             native_3d_secure=self.config.connection_params[\"enable_native_3d_secure\"],",
          "316:         )",
          "318:         result_code = result.message[\"resultCode\"].strip().lower()",
          "319:         is_success = result_code not in FAILED_STATUSES",
          "320:         adyen_auto_capture = self.config.connection_params[\"adyen_auto_capture\"]",
          "",
          "[Removed Lines]",
          "317:         result = api_call(request_data, self.adyen.checkout.payments)",
          "",
          "[Added Lines]",
          "331:         with opentracing.global_tracer().start_active_span(",
          "332:             \"adyen.checkout.payments\"",
          "333:         ) as scope:",
          "334:             span = scope.span",
          "335:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "336:             span.set_tag(\"service.name\", \"adyen\")",
          "337:             result = api_call(request_data, self.adyen.checkout.payments)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "384:         if not additional_data:",
          "385:             raise PaymentError(\"Unable to finish the payment.\")",
          "388:         result_code = result.message[\"resultCode\"].strip().lower()",
          "389:         is_success = result_code not in FAILED_STATUSES",
          "390:         action_required = \"action\" in result.message",
          "",
          "[Removed Lines]",
          "387:         result = api_call(additional_data, self.adyen.checkout.payments_details)",
          "",
          "[Added Lines]",
          "407:         with opentracing.global_tracer().start_active_span(",
          "408:             \"adyen.checkout.payment_details\"",
          "409:         ) as scope:",
          "410:             span = scope.span",
          "411:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "412:             span.set_tag(\"service.name\", \"adyen\")",
          "413:             result = api_call(additional_data, self.adyen.checkout.payments_details)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "530:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "531:             token=transaction.token,",
          "532:         )",
          "535:         amount = payment_information.amount",
          "536:         currency = payment_information.currency",
          "",
          "[Removed Lines]",
          "533:         result = api_call(request, self.adyen.payment.refund)",
          "",
          "[Added Lines]",
          "559:         with opentracing.global_tracer().start_active_span(",
          "560:             \"adyen.payment.refund\"",
          "561:         ) as scope:",
          "562:             span = scope.span",
          "563:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "564:             span.set_tag(\"service.name\", \"adyen\")",
          "565:             result = api_call(request, self.adyen.payment.refund)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "596:             merchant_account=self.config.connection_params[\"merchant_account\"],",
          "597:             token=payment_information.token,  # type: ignore",
          "598:         )",
          "601:         return GatewayResponse(",
          "602:             is_success=True,",
          "",
          "[Removed Lines]",
          "599:         result = api_call(request, self.adyen.payment.cancel)",
          "",
          "[Added Lines]",
          "631:         with opentracing.global_tracer().start_active_span(",
          "632:             \"adyen.payment.cancel\"",
          "633:         ) as scope:",
          "634:             span = scope.span",
          "635:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "636:             span.set_tag(\"service.name\", \"adyen\")",
          "637:             result = api_call(request, self.adyen.payment.cancel)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/utils/common.py||saleor/payment/gateways/adyen/utils/common.py": [
          "File: saleor/payment/gateways/adyen/utils/common.py -> saleor/payment/gateways/adyen/utils/common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from typing import TYPE_CHECKING, Any, Callable, Dict, Optional",
          "6: import Adyen",
          "7: from babel.numbers import get_currency_precision",
          "8: from django.conf import settings",
          "9: from django_countries.fields import Country",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import opentracing",
          "8: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:         merchant_account=merchant_account,",
          "361:         token=token,",
          "362:     )",
          "366: def request_for_payment_cancel(",
          "",
          "[Removed Lines]",
          "363:     return api_call(request, adyen_client.payment.capture)",
          "",
          "[Added Lines]",
          "365:     with opentracing.global_tracer().start_active_span(",
          "366:         \"adyen.payment.capture\"",
          "367:     ) as scope:",
          "368:         span = scope.span",
          "369:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "370:         span.set_tag(\"service.name\", \"adyen\")",
          "371:         return api_call(request, adyen_client.payment.capture)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/braintree/__init__.py||saleor/payment/gateways/braintree/__init__.py": [
          "File: saleor/payment/gateways/braintree/__init__.py -> saleor/payment/gateways/braintree/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import Dict, List, Optional",
          "3: import braintree as braintree_sdk",
          "4: from django.core.exceptions import ImproperlyConfigured",
          "6: from ... import TransactionKind",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import opentracing",
          "5: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     config: GatewayConfig, token_config: Optional[TokenConfig] = None",
          "108: ) -> str:",
          "109:     gateway = get_braintree_gateway(**config.connection_params)",
          "116: def create_token_params(config: GatewayConfig, token_config: TokenConfig) -> dict:",
          "",
          "[Removed Lines]",
          "110:     if not token_config:",
          "111:         return gateway.client_token.generate()",
          "112:     parameters = create_token_params(config, token_config)",
          "113:     return gateway.client_token.generate(parameters)",
          "",
          "[Added Lines]",
          "112:     with opentracing.global_tracer().start_active_span(",
          "113:         \"braintree.client_token.generate\"",
          "114:     ) as scope:",
          "115:         span = scope.span",
          "116:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "117:         span.set_tag(\"service.name\", \"braintree\")",
          "118:         if not token_config:",
          "119:             return gateway.client_token.generate()",
          "120:         parameters = create_token_params(config, token_config)",
          "121:         return gateway.client_token.generate(parameters)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:     payment_information: PaymentData, config: GatewayConfig",
          "164: ):",
          "165:     gateway = get_braintree_gateway(**config.connection_params)",
          "180: def transaction_for_existing_customer(",
          "181:     payment_information: PaymentData, config: GatewayConfig",
          "182: ):",
          "183:     gateway = get_braintree_gateway(**config.connection_params)",
          "194: def capture(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "195:     gateway = get_braintree_gateway(**config.connection_params)",
          "197:     try:",
          "202:     except braintree_sdk.exceptions.NotFoundError:",
          "203:         raise BraintreeException(DEFAULT_ERROR_MESSAGE)",
          "",
          "[Removed Lines]",
          "166:     return gateway.transaction.sale(",
          "167:         {",
          "168:             \"amount\": str(payment_information.amount),",
          "169:             \"payment_method_nonce\": payment_information.token,",
          "170:             \"options\": {",
          "171:                 \"submit_for_settlement\": config.auto_capture,",
          "172:                 \"store_in_vault_on_success\": payment_information.reuse_source,",
          "173:                 \"three_d_secure\": {\"required\": config.require_3d_secure},",
          "174:             },",
          "176:         }",
          "177:     )",
          "184:     return gateway.transaction.sale(",
          "185:         {",
          "186:             \"amount\": str(payment_information.amount),",
          "187:             \"customer_id\": payment_information.customer_id,",
          "188:             \"options\": {\"submit_for_settlement\": config.auto_capture},",
          "190:         }",
          "191:     )",
          "198:         result = gateway.transaction.submit_for_settlement(",
          "199:             transaction_id=payment_information.token,",
          "200:             amount=str(payment_information.amount),",
          "201:         )",
          "",
          "[Added Lines]",
          "175:     with opentracing.global_tracer().start_active_span(",
          "176:         \"braintree.transaction.sale\"",
          "177:     ) as scope:",
          "178:         span = scope.span",
          "179:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "180:         span.set_tag(\"service.name\", \"braintree\")",
          "181:         return gateway.transaction.sale(",
          "182:             {",
          "183:                 \"amount\": str(payment_information.amount),",
          "184:                 \"payment_method_nonce\": payment_information.token,",
          "185:                 \"options\": {",
          "186:                     \"submit_for_settlement\": config.auto_capture,",
          "187:                     \"store_in_vault_on_success\": payment_information.reuse_source,",
          "188:                     \"three_d_secure\": {\"required\": config.require_3d_secure},",
          "189:                 },",
          "191:             }",
          "192:         )",
          "199:     with opentracing.global_tracer().start_active_span(",
          "200:         \"braintree.transaction.sale\"",
          "201:     ) as scope:",
          "202:         span = scope.span",
          "203:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "204:         span.set_tag(\"service.name\", \"braintree\")",
          "205:         return gateway.transaction.sale(",
          "206:             {",
          "207:                 \"amount\": str(payment_information.amount),",
          "208:                 \"customer_id\": payment_information.customer_id,",
          "209:                 \"options\": {\"submit_for_settlement\": config.auto_capture},",
          "211:             }",
          "212:         )",
          "219:         with opentracing.global_tracer().start_active_span(",
          "220:             \"braintree.transaction.submit_for_settlement\"",
          "221:         ) as scope:",
          "222:             span = scope.span",
          "223:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "224:             span.set_tag(\"service.name\", \"braintree\")",
          "225:             result = gateway.transaction.submit_for_settlement(",
          "226:                 transaction_id=payment_information.token,",
          "227:                 amount=str(payment_information.amount),",
          "228:             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "223:     gateway = get_braintree_gateway(**config.connection_params)",
          "225:     try:",
          "227:     except braintree_sdk.exceptions.NotFoundError:",
          "228:         raise BraintreeException(DEFAULT_ERROR_MESSAGE)",
          "",
          "[Removed Lines]",
          "226:         result = gateway.transaction.void(transaction_id=payment_information.token)",
          "",
          "[Added Lines]",
          "253:         with opentracing.global_tracer().start_active_span(",
          "254:             \"braintree.transaction.void\"",
          "255:         ) as scope:",
          "256:             span = scope.span",
          "257:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "258:             span.set_tag(\"service.name\", \"braintree\")",
          "259:             result = gateway.transaction.void(transaction_id=payment_information.token)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "248:     gateway = get_braintree_gateway(**config.connection_params)",
          "250:     try:",
          "255:     except braintree_sdk.exceptions.NotFoundError:",
          "256:         raise BraintreeException(DEFAULT_ERROR_MESSAGE)",
          "",
          "[Removed Lines]",
          "251:         result = gateway.transaction.refund(",
          "252:             transaction_id=payment_information.token,",
          "253:             amount_or_options=str(payment_information.amount),",
          "254:         )",
          "",
          "[Added Lines]",
          "284:         with opentracing.global_tracer().start_active_span(",
          "285:             \"braintree.transaction.refund\"",
          "286:         ) as scope:",
          "287:             span = scope.span",
          "288:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "289:             span.set_tag(\"service.name\", \"braintree\")",
          "290:             result = gateway.transaction.refund(",
          "291:                 transaction_id=payment_information.token,",
          "292:                 amount_or_options=str(payment_information.amount),",
          "293:             )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:     config: GatewayConfig, customer_id: str",
          "284: ) -> List[CustomerSource]:",
          "285:     gateway = get_braintree_gateway(**config.connection_params)",
          "287:     if not customer:",
          "288:         return []",
          "289:     return [",
          "",
          "[Removed Lines]",
          "286:     customer = gateway.customer.find(customer_id)",
          "",
          "[Added Lines]",
          "325:     with opentracing.global_tracer().start_active_span(",
          "326:         \"braintree.customer.find\"",
          "327:     ) as scope:",
          "328:         span = scope.span",
          "329:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "330:         span.set_tag(\"service.name\", \"braintree\")",
          "331:         customer = gateway.customer.find(customer_id)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/razorpay/__init__.py||saleor/payment/gateways/razorpay/__init__.py": [
          "File: saleor/payment/gateways/razorpay/__init__.py -> saleor/payment/gateways/razorpay/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from decimal import Decimal",
          "4: from typing import Dict",
          "6: import razorpay",
          "7: import razorpay.errors",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import opentracing",
          "7: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     if not error:",
          "98:         try:",
          "102:             clean_razorpay_response(response)",
          "103:         except RAZORPAY_EXCEPTIONS as exc:",
          "104:             error = get_error_message_from_razorpay_error(exc)",
          "",
          "[Removed Lines]",
          "99:             response = razorpay_client.payment.capture(",
          "100:                 payment_information.token, razorpay_amount",
          "101:             )",
          "",
          "[Added Lines]",
          "101:             with opentracing.global_tracer().start_active_span(",
          "102:                 \"razorpay.payment.capture\"",
          "103:             ) as scope:",
          "104:                 span = scope.span",
          "105:                 span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "106:                 span.set_tag(\"service.name\", \"razorpay\")",
          "107:                 response = razorpay_client.payment.capture(",
          "108:                     payment_information.token, razorpay_amount",
          "109:                 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:         razorpay_client = get_client(**config.connection_params)",
          "137:         razorpay_amount = get_amount_for_razorpay(payment_information.amount)",
          "138:         try:",
          "142:             clean_razorpay_response(response)",
          "143:         except RAZORPAY_EXCEPTIONS as exc:",
          "144:             error = get_error_message_from_razorpay_error(exc)",
          "",
          "[Removed Lines]",
          "139:             response = razorpay_client.payment.refund(",
          "140:                 payment_information.token, razorpay_amount",
          "141:             )",
          "",
          "[Added Lines]",
          "147:             with opentracing.global_tracer().start_active_span(",
          "148:                 \"razorpay.payment.refund\"",
          "149:             ) as scope:",
          "150:                 span = scope.span",
          "151:                 span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "152:                 span.set_tag(\"service.name\", \"razorpay\")",
          "153:                 response = razorpay_client.payment.refund(",
          "154:                     payment_information.token, razorpay_amount",
          "155:                 )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/stripe/__init__.py||saleor/payment/gateways/stripe/__init__.py": [
          "File: saleor/payment/gateways/stripe/__init__.py -> saleor/payment/gateways/stripe/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import List",
          "3: import stripe",
          "5: from ... import TransactionKind",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import opentracing",
          "4: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     )",
          "46:     try:",
          "58:         if config.store_customer and not customer_id:",
          "60:             customer_id = customer.id",
          "62:     except stripe.error.StripeError as exc:",
          "",
          "[Removed Lines]",
          "47:         intent = client.PaymentIntent.create(",
          "48:             payment_method=payment_information.token,",
          "49:             amount=stripe_amount,",
          "50:             currency=currency,",
          "51:             confirmation_method=\"manual\",",
          "52:             confirm=True,",
          "53:             capture_method=capture_method,",
          "54:             setup_future_usage=future_use,",
          "55:             customer=customer_id,",
          "56:             shipping=shipping,",
          "57:         )",
          "59:             customer = client.Customer.create(payment_method=intent.payment_method)",
          "",
          "[Added Lines]",
          "49:         with opentracing.global_tracer().start_active_span(",
          "50:             \"stripe.PaymentIntent.create\"",
          "51:         ) as scope:",
          "52:             span = scope.span",
          "53:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "54:             span.set_tag(\"service.name\", \"stripe\")",
          "55:             intent = client.PaymentIntent.create(",
          "56:                 payment_method=payment_information.token,",
          "57:                 amount=stripe_amount,",
          "58:                 currency=currency,",
          "59:                 confirmation_method=\"manual\",",
          "60:                 confirm=True,",
          "61:                 capture_method=capture_method,",
          "62:                 setup_future_usage=future_use,",
          "63:                 customer=customer_id,",
          "64:                 shipping=shipping,",
          "65:             )",
          "67:             with opentracing.global_tracer().start_active_span(",
          "68:                 \"stripe.Customer.create\"",
          "69:             ) as scope:",
          "70:                 span = scope.span",
          "71:                 span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "72:                 span.set_tag(\"service.name\", \"stripe\")",
          "73:                 customer = client.Customer.create(payment_method=intent.payment_method)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:     client = _get_client(**config.connection_params)",
          "75:     intent = None",
          "76:     try:",
          "78:         capture = intent.capture()",
          "79:     except stripe.error.StripeError as exc:",
          "80:         action_required = intent.status == \"requires_action\" if intent else False",
          "",
          "[Removed Lines]",
          "77:         intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "[Added Lines]",
          "91:         with opentracing.global_tracer().start_active_span(",
          "92:             \"stripe.PaymentIntent.retrieve\"",
          "93:         ) as scope:",
          "94:             span = scope.span",
          "95:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "96:             span.set_tag(\"service.name\", \"stripe\")",
          "97:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:     client = _get_client(**config.connection_params)",
          "99:     try:",
          "100:         intent = client.PaymentIntent(id=payment_information.token)",
          "102:     except stripe.error.StripeError as exc:",
          "103:         response = _error_response(",
          "104:             kind=TransactionKind.CONFIRM, exc=exc, payment_info=payment_information",
          "",
          "[Removed Lines]",
          "101:         intent.confirm()",
          "",
          "[Added Lines]",
          "121:         with opentracing.global_tracer().start_active_span(",
          "122:             \"stripe.PaymentIntent.confirm\"",
          "123:         ) as scope:",
          "124:             span = scope.span",
          "125:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "126:             span.set_tag(\"service.name\", \"stripe\")",
          "127:             intent.confirm()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:     currency = get_currency_for_stripe(payment_information.currency)",
          "119:     stripe_amount = get_amount_for_stripe(payment_information.amount, currency)",
          "120:     try:",
          "122:         refund = intent[\"charges\"][\"data\"][0].refund(amount=stripe_amount)",
          "123:     except stripe.error.StripeError as exc:",
          "124:         response = _error_response(",
          "",
          "[Removed Lines]",
          "121:         intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "[Added Lines]",
          "147:         with opentracing.global_tracer().start_active_span(",
          "148:             \"stripe.PaymentIntent.retrieve\"",
          "149:         ) as scope:",
          "150:             span = scope.span",
          "151:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "152:             span.set_tag(\"service.name\", \"stripe\")",
          "153:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "138: def void(payment_information: PaymentData, config: GatewayConfig) -> GatewayResponse:",
          "139:     client = _get_client(**config.connection_params)",
          "140:     try:",
          "142:         refund = intent[\"charges\"][\"data\"][0].refund()",
          "143:     except stripe.error.StripeError as exc:",
          "144:         response = _error_response(",
          "",
          "[Removed Lines]",
          "141:         intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "[Added Lines]",
          "173:         with opentracing.global_tracer().start_active_span(",
          "174:             \"stripe.PaymentIntent.retrieve\"",
          "175:         ) as scope:",
          "176:             span = scope.span",
          "177:             span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "178:             span.set_tag(\"service.name\", \"stripe\")",
          "179:             intent = client.PaymentIntent.retrieve(id=payment_information.token)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "158:     config: GatewayConfig, customer_id: str",
          "159: ) -> List[CustomerSource]:",
          "160:     client = _get_client(**config.connection_params)",
          "162:     return [",
          "163:         CustomerSource(",
          "164:             id=c.id,",
          "",
          "[Removed Lines]",
          "161:     cards = client.PaymentMethod.list(customer=customer_id, type=\"card\")[\"data\"]",
          "",
          "[Added Lines]",
          "199:     with opentracing.global_tracer().start_active_span(",
          "200:         \"stripe.PaymentMethod.list\"",
          "201:     ) as scope:",
          "202:         span = scope.span",
          "203:         span.set_tag(opentracing.tags.COMPONENT, \"payment\")",
          "204:         span.set_tag(\"service.name\", \"stripe\")",
          "205:         cards = client.PaymentMethod.list(customer=customer_id, type=\"card\")[\"data\"]",
          "",
          "---------------"
        ],
        "saleor/plugins/avatax/__init__.py||saleor/plugins/avatax/__init__.py": [
          "File: saleor/plugins/avatax/__init__.py -> saleor/plugins/avatax/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Union",
          "7: from urllib.parse import urljoin",
          "9: import requests",
          "10: from django.conf import settings",
          "11: from django.contrib.sites.models import Site",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import opentracing",
          "10: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     transaction_url = urljoin(",
          "395:         get_api_url(config.use_sandbox), \"transactions/createoradjust\"",
          "396:     )",
          "398:     if response and \"error\" not in response:",
          "399:         cache.set(data_cache_key, (data, response), CACHE_TIME)",
          "400:     else:",
          "",
          "[Removed Lines]",
          "397:     response = api_post_request(transaction_url, data, config)",
          "",
          "[Added Lines]",
          "399:     with opentracing.global_tracer().start_active_span(",
          "400:         \"avatax.transactions.crateoradjust\"",
          "401:     ) as scope:",
          "402:         span = scope.span",
          "403:         span.set_tag(opentracing.tags.COMPONENT, \"tax\")",
          "404:         span.set_tag(\"service.name\", \"avatax\")",
          "405:         response = api_post_request(transaction_url, data, config)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "478:     tax_codes = cache.get(TAX_CODES_CACHE_KEY, {})",
          "479:     if not tax_codes:",
          "480:         tax_codes_url = urljoin(get_api_url(config.use_sandbox), \"definitions/taxcodes\")",
          "484:         if response and \"error\" not in response:",
          "485:             tax_codes = generate_tax_codes_dict(response)",
          "486:             cache.set(TAX_CODES_CACHE_KEY, tax_codes, cache_time)",
          "",
          "[Removed Lines]",
          "481:         response = api_get_request(",
          "482:             tax_codes_url, config.username_or_account, config.password_or_license",
          "483:         )",
          "",
          "[Added Lines]",
          "489:         with opentracing.global_tracer().start_active_span(",
          "490:             \"avatax.definitions.taxcodes\"",
          "491:         ) as scope:",
          "492:             span = scope.span",
          "493:             span.set_tag(opentracing.tags.COMPONENT, \"tax\")",
          "494:             span.set_tag(\"service.name\", \"avatax\")",
          "495:             response = api_get_request(",
          "496:                 tax_codes_url, config.username_or_account, config.password_or_license",
          "497:             )",
          "",
          "---------------"
        ],
        "saleor/plugins/avatax/plugin.py||saleor/plugins/avatax/plugin.py": [
          "File: saleor/plugins/avatax/plugin.py -> saleor/plugins/avatax/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Union",
          "5: from urllib.parse import urljoin",
          "7: from django.core.exceptions import ValidationError",
          "8: from prices import Money, TaxedMoney, TaxedMoneyRange",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import opentracing",
          "8: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:         transaction_url = urljoin(",
          "300:             get_api_url(self.config.use_sandbox), \"transactions/createoradjust\"",
          "301:         )",
          "303:         if not response or \"error\" in response:",
          "304:             msg = response.get(\"error\", {}).get(\"message\", \"\")",
          "305:             error_code = response.get(\"error\", {}).get(\"code\", \"\")",
          "",
          "[Removed Lines]",
          "302:         response = api_post_request(transaction_url, data, self.config)",
          "",
          "[Added Lines]",
          "304:         with opentracing.global_tracer().start_active_span(",
          "305:             \"avatax.transactions.crateoradjust\"",
          "306:         ) as scope:",
          "307:             span = scope.span",
          "308:             span.set_tag(opentracing.tags.COMPONENT, \"tax\")",
          "309:             span.set_tag(\"service.name\", \"avatax\")",
          "310:             response = api_post_request(transaction_url, data, self.config)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:             data[\"name\"]: data[\"value\"] for data in plugin_configuration.configuration",
          "597:         }",
          "598:         url = urljoin(get_api_url(conf[\"Use sandbox\"]), \"utilities/ping\")",
          "605:         if not response.get(\"authenticated\"):",
          "606:             raise ValidationError(",
          "",
          "[Removed Lines]",
          "599:         response = api_get_request(",
          "600:             url,",
          "601:             username_or_account=conf[\"Username or account\"],",
          "602:             password_or_license=conf[\"Password or license\"],",
          "603:         )",
          "",
          "[Added Lines]",
          "607:         with opentracing.global_tracer().start_active_span(",
          "608:             \"avatax.utilities.ping\"",
          "609:         ) as scope:",
          "610:             span = scope.span",
          "611:             span.set_tag(opentracing.tags.COMPONENT, \"tax\")",
          "612:             span.set_tag(\"service.name\", \"avatax\")",
          "613:             response = api_get_request(",
          "614:                 url,",
          "615:                 username_or_account=conf[\"Username or account\"],",
          "616:                 password_or_license=conf[\"Password or license\"],",
          "617:             )",
          "",
          "---------------"
        ],
        "saleor/plugins/avatax/tasks.py||saleor/plugins/avatax/tasks.py": [
          "File: saleor/plugins/avatax/tasks.py -> saleor/plugins/avatax/tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "3: from ...celeryconf import app",
          "4: from ...core.taxes import TaxError",
          "5: from ...order.events import external_notification_event",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import opentracing",
          "4: import opentracing.tags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         )",
          "30:         return",
          "33:     msg = f\"Order sent to Avatax. Order ID: {order.token}\"",
          "34:     if not response or \"error\" in response:",
          "35:         avatax_msg = response.get(\"error\", {}).get(\"message\", \"\")",
          "",
          "[Removed Lines]",
          "32:     response = api_post_request(transaction_url, data, config)",
          "",
          "[Added Lines]",
          "35:     with opentracing.global_tracer().start_active_span(",
          "36:         \"avatax.transactions.crateoradjust\"",
          "37:     ) as scope:",
          "38:         span = scope.span",
          "39:         span.set_tag(opentracing.tags.COMPONENT, \"tax\")",
          "40:         span.set_tag(\"service.name\", \"avatax\")",
          "41:         response = api_post_request(transaction_url, data, config)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aab329449810ce514c73f39eb43cbbb9d401ec5",
      "candidate_info": {
        "commit_hash": "0aab329449810ce514c73f39eb43cbbb9d401ec5",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/0aab329449810ce514c73f39eb43cbbb9d401ec5",
        "files": [
          "saleor/checkout/checkout_cleaner.py",
          "saleor/checkout/complete_checkout.py",
          "saleor/core/utils/random_data.py",
          "saleor/graphql/account/resolvers.py",
          "saleor/graphql/account/types.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_fulfillment_refund_products.py",
          "saleor/graphql/order/tests/test_fulfillment_return_products.py",
          "saleor/graphql/order/tests/test_order.py",
          "saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/resolvers.py",
          "saleor/graphql/payment/tests/test_payment.py",
          "saleor/order/actions.py",
          "saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py",
          "saleor/order/tests/test_order_actions_refund_products.py",
          "saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/dummy/tests/test_dummy.py",
          "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "saleor/payment/tests/test_gateway.py",
          "saleor/payment/tests/test_payment.py"
        ],
        "message": "Add plugin_manager parameter to payment gateways methods",
        "before_after_code_files": [
          "saleor/checkout/checkout_cleaner.py||saleor/checkout/checkout_cleaner.py",
          "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py",
          "saleor/core/utils/random_data.py||saleor/core/utils/random_data.py",
          "saleor/graphql/account/resolvers.py||saleor/graphql/account/resolvers.py",
          "saleor/graphql/account/types.py||saleor/graphql/account/types.py",
          "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py",
          "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py",
          "saleor/graphql/order/tests/test_fulfillment_refund_products.py||saleor/graphql/order/tests/test_fulfillment_refund_products.py",
          "saleor/graphql/order/tests/test_fulfillment_return_products.py||saleor/graphql/order/tests/test_fulfillment_return_products.py",
          "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py",
          "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py",
          "saleor/graphql/payment/resolvers.py||saleor/graphql/payment/resolvers.py",
          "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py",
          "saleor/order/actions.py||saleor/order/actions.py",
          "saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py||saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py",
          "saleor/order/tests/test_order_actions_refund_products.py||saleor/order/tests/test_order_actions_refund_products.py",
          "saleor/payment/gateway.py||saleor/payment/gateway.py",
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py",
          "saleor/payment/gateways/dummy/tests/test_dummy.py||saleor/payment/gateways/dummy/tests/test_dummy.py",
          "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py||saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "saleor/payment/tests/test_gateway.py||saleor/payment/tests/test_gateway.py",
          "saleor/payment/tests/test_payment.py||saleor/payment/tests/test_payment.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/checkout/checkout_cleaner.py||saleor/checkout/checkout_cleaner.py": [
          "File: saleor/checkout/checkout_cleaner.py -> saleor/checkout/checkout_cleaner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: ):",
          "75:     clean_billing_address(checkout_info, error_code)",
          "76:     if not is_fully_paid(manager, checkout_info, lines, discounts):",
          "78:         raise ValidationError(",
          "79:             \"Provided payment methods can not cover the checkout's total amount\",",
          "80:             code=error_code.CHECKOUT_NOT_FULLY_PAID.value,",
          "",
          "[Removed Lines]",
          "77:         gateway.payment_refund_or_void(last_payment)",
          "",
          "[Added Lines]",
          "77:         gateway.payment_refund_or_void(last_payment, manager)",
          "",
          "---------------"
        ],
        "saleor/checkout/complete_checkout.py||saleor/checkout/complete_checkout.py": [
          "File: saleor/checkout/complete_checkout.py -> saleor/checkout/complete_checkout.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     \"\"\"Process the payment assigned to checkout.\"\"\"",
          "520:     try:",
          "521:         if payment.to_confirm:",
          "523:         else:",
          "524:             txn = gateway.process_payment(",
          "525:                 payment=payment,",
          "526:                 token=payment.token,",
          "527:                 store_source=store_source,",
          "528:                 additional_data=payment_data,",
          "530:             )",
          "531:         payment.refresh_from_db()",
          "532:         if not txn.is_success:",
          "",
          "[Removed Lines]",
          "522:             txn = gateway.confirm(payment, additional_data=payment_data)",
          "529:                 plugin_manager=plugin_manager,",
          "",
          "[Added Lines]",
          "522:             txn = gateway.confirm(payment, plugin_manager, additional_data=payment_data)",
          "527:                 plugin_manager=plugin_manager,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "570:     try:",
          "571:         order_data = _get_order_data(manager, checkout_info, lines, discounts)",
          "572:     except ValidationError as exc:",
          "574:         raise exc",
          "576:     txn = _process_payment(",
          "",
          "[Removed Lines]",
          "573:         gateway.payment_refund_or_void(payment)",
          "",
          "[Added Lines]",
          "573:         gateway.payment_refund_or_void(payment, manager)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "601:             checkout.delete()",
          "602:         except InsufficientStock as e:",
          "603:             release_voucher_usage(order_data)",
          "605:             error = prepare_insufficient_stock_checkout_validation_error(e)",
          "606:             raise error",
          "607:     return order, action_required, action_data",
          "",
          "[Removed Lines]",
          "604:             gateway.payment_refund_or_void(payment)",
          "",
          "[Added Lines]",
          "604:             gateway.payment_refund_or_void(payment, manager)",
          "",
          "---------------"
        ],
        "saleor/core/utils/random_data.py||saleor/core/utils/random_data.py": [
          "File: saleor/core/utils/random_data.py -> saleor/core/utils/random_data.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:         total=order.total.gross.amount,",
          "545:         currency=order.total.gross.currency,",
          "546:     )",
          "548:     # Create authorization transaction",
          "550:     # 20% chance to void the transaction at this stage",
          "551:     if random.choice([0, 0, 0, 0, 1]):",
          "553:         return payment",
          "554:     # 25% to end the payment at the authorization stage",
          "555:     if not random.choice([1, 1, 1, 0]):",
          "556:         return payment",
          "557:     # Create capture transaction",
          "559:     # 25% to refund the payment",
          "560:     if random.choice([0, 0, 0, 1]):",
          "562:     return payment",
          "",
          "[Removed Lines]",
          "549:     gateway.authorize(payment, payment.token)",
          "552:         gateway.void(payment)",
          "558:     gateway.capture(payment)",
          "561:         gateway.refund(payment)",
          "",
          "[Added Lines]",
          "547:     manager = get_plugins_manager()",
          "550:     gateway.authorize(payment, payment.token, manager)",
          "553:         gateway.void(payment, manager)",
          "559:     gateway.capture(payment, manager)",
          "562:         gateway.refund(payment, manager)",
          "",
          "---------------"
        ],
        "saleor/graphql/account/resolvers.py||saleor/graphql/account/resolvers.py": [
          "File: saleor/graphql/account/resolvers.py -> saleor/graphql/account/resolvers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     )",
          "115:     stored_customer_accounts = (",
          "117:     )",
          "118:     return list(",
          "119:         chain(",
          "121:                 prepare_graphql_payment_sources_type(",
          "123:                 )",
          "124:                 for gtw, customer_id in stored_customer_accounts",
          "125:                 if customer_id is not None",
          "",
          "[Removed Lines]",
          "114: def resolve_payment_sources(user: models.User):",
          "116:         (gtw.id, fetch_customer_id(user, gtw.id)) for gtw in gateway.list_gateways()",
          "122:                     gateway.list_payment_sources(gtw, customer_id)",
          "",
          "[Added Lines]",
          "114: def resolve_payment_sources(info, user: models.User):",
          "115:     manager = info.context.plugins",
          "117:         (gtw.id, fetch_customer_id(user, gtw.id))",
          "118:         for gtw in gateway.list_gateways(manager)",
          "124:                     gateway.list_payment_sources(gtw, customer_id, manager)",
          "",
          "---------------"
        ],
        "saleor/graphql/account/types.py||saleor/graphql/account/types.py": [
          "File: saleor/graphql/account/types.py -> saleor/graphql/account/types.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         from .resolvers import resolve_payment_sources",
          "354:         if root == info.context.user:",
          "356:         raise PermissionDenied()",
          "358:     @staticmethod",
          "",
          "[Removed Lines]",
          "355:             return resolve_payment_sources(root)",
          "",
          "[Added Lines]",
          "355:             return resolve_payment_sources(info, root)",
          "",
          "---------------"
        ],
        "saleor/graphql/checkout/tests/test_checkout_complete.py||saleor/graphql/checkout/tests/test_checkout_complete.py": [
          "File: saleor/graphql/checkout/tests/test_checkout_complete.py -> saleor/graphql/checkout/tests/test_checkout_complete.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: import graphene",
          "5: import pytest",
          "",
          "[Removed Lines]",
          "2: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "2: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "780:     assert orders_count == Order.objects.count()",
          "785: @patch(\"saleor.checkout.complete_checkout.gateway.void\")",
          "",
          "[Removed Lines]",
          "782:     gateway_refund_mock.assert_called_once_with(payment)",
          "",
          "[Added Lines]",
          "782:     gateway_refund_mock.assert_called_once_with(payment, ANY)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "834:     assert data[\"checkoutErrors\"][0][\"message\"] == \"Insufficient product stock: 123\"",
          "835:     assert orders_count == Order.objects.count()",
          "840: def test_checkout_complete_without_redirect_url(",
          "",
          "[Removed Lines]",
          "837:     gateway_void_mock.assert_called_once_with(payment)",
          "",
          "[Added Lines]",
          "837:     gateway_void_mock.assert_called_once_with(payment, ANY)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "956:     )",
          "957:     assert orders_count == Order.objects.count()",
          "962: def test_order_already_exists(",
          "",
          "[Removed Lines]",
          "959:     gateway_refund_or_void_mock.assert_called_with(payment)",
          "",
          "[Added Lines]",
          "959:     gateway_refund_or_void_mock.assert_called_with(payment, ANY)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/mutations/orders.py||saleor/graphql/order/mutations/orders.py": [
          "File: saleor/graphql/order/mutations/orders.py -> saleor/graphql/order/mutations/orders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:         clean_order_capture(payment)",
          "435:         transaction = try_payment_action(",
          "437:         )",
          "438:         # Confirm that we changed the status to capture. Some payment can receive",
          "439:         # asynchronous webhook with update status",
          "",
          "[Removed Lines]",
          "436:             order, info.context.user, payment, gateway.capture, payment, amount",
          "",
          "[Added Lines]",
          "436:             order,",
          "437:             info.context.user,",
          "438:             payment,",
          "439:             gateway.capture,",
          "440:             payment,",
          "441:             info.context.plugins,",
          "442:             amount,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:         clean_void_payment(payment)",
          "465:         transaction = try_payment_action(",
          "467:         )",
          "468:         # Confirm that we changed the status to void. Some payment can receive",
          "469:         # asynchronous webhook with update status",
          "",
          "[Removed Lines]",
          "466:             order, info.context.user, payment, gateway.void, payment",
          "",
          "[Added Lines]",
          "472:             order,",
          "473:             info.context.user,",
          "474:             payment,",
          "475:             gateway.void,",
          "476:             payment,",
          "477:             info.context.plugins,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "504:         clean_refund_payment(payment)",
          "506:         transaction = try_payment_action(",
          "508:         )",
          "510:         # Confirm that we changed the status to refund. Some payment can receive",
          "",
          "[Removed Lines]",
          "507:             order, info.context.user, payment, gateway.refund, payment, amount",
          "",
          "[Added Lines]",
          "518:             order,",
          "519:             info.context.user,",
          "520:             payment,",
          "521:             gateway.refund,",
          "522:             payment,",
          "523:             info.context.plugins,",
          "524:             amount,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "553:         payment = order.get_last_payment()",
          "554:         manager = info.context.plugins",
          "555:         if payment and payment.is_authorized and payment.can_capture():",
          "557:             order_captured(order, info.context.user, payment.total, payment, manager)",
          "558:         order_confirmed(order, info.context.user, manager, send_confirmation_email=True)",
          "559:         return OrderConfirm(order=order)",
          "",
          "[Removed Lines]",
          "556:             gateway.capture(payment)",
          "",
          "[Added Lines]",
          "573:             gateway.capture(payment, info.context.plugins)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_fulfillment_refund_products.py||saleor/graphql/order/tests/test_fulfillment_refund_products.py": [
          "File: saleor/graphql/order/tests/test_fulfillment_refund_products.py -> saleor/graphql/order/tests/test_fulfillment_refund_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: import graphene",
          "5: from prices import Money, TaxedMoney",
          "",
          "[Removed Lines]",
          "2: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "2: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)",
          "83:     mocked_refund.assert_called_with(",
          "85:     )",
          "",
          "[Removed Lines]",
          "84:         payment_dummy, quantize_price(amount_to_refund, fulfilled_order.currency)",
          "",
          "[Added Lines]",
          "84:         payment_dummy, ANY, quantize_price(amount_to_refund, fulfilled_order.currency)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:     assert refund_fulfillment[\"lines\"][0][\"orderLine\"][\"id\"] == line_id",
          "118:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "119:     mocked_refund.assert_called_with(",
          "121:     )",
          "",
          "[Removed Lines]",
          "120:         payment_dummy, line_to_refund.unit_price_gross_amount * 2",
          "",
          "[Added Lines]",
          "120:         payment_dummy, ANY, line_to_refund.unit_price_gross_amount * 2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "222:     assert refund_fulfillment[\"lines\"][0][\"orderLine\"][\"id\"] == order_line_id",
          "223:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "224:     mocked_refund.assert_called_with(",
          "226:     )",
          "",
          "[Removed Lines]",
          "225:         payment_dummy, fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2",
          "",
          "[Added Lines]",
          "225:         payment_dummy,",
          "226:         ANY,",
          "227:         fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "340:     amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2",
          "341:     amount += fulfilled_order.shipping_price_gross_amount",
          "345: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "342:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "344:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "378:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "379:     amount = line_to_refund.unit_price_gross_amount * 2",
          "380:     amount += order_with_lines.shipping_price_gross_amount",
          "384: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "381:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "383:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "424:     assert len(refund_fulfillment[\"lines\"]) == 1",
          "425:     assert refund_fulfillment[\"lines\"][0][\"orderLine\"][\"id\"] == order_line_id",
          "426:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "430: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "427:     mocked_refund.assert_called_with(payment_dummy, amount_to_refund)",
          "",
          "[Added Lines]",
          "429:     mocked_refund.assert_called_with(payment_dummy, ANY, amount_to_refund)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "462:     assert len(refund_fulfillment[\"lines\"]) == 1",
          "463:     assert refund_fulfillment[\"lines\"][0][\"orderLine\"][\"id\"] == line_id",
          "464:     assert refund_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "468: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "465:     mocked_refund.assert_called_with(payment_dummy, amount_to_refund)",
          "",
          "[Added Lines]",
          "467:     mocked_refund.assert_called_with(payment_dummy, ANY, amount_to_refund)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "549:     amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2",
          "550:     amount += order_line.unit_price_gross_amount * 2",
          "551:     amount = quantize_price(amount, fulfilled_order.currency)",
          "",
          "[Removed Lines]",
          "552:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "554:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_fulfillment_return_products.py||saleor/graphql/order/tests/test_fulfillment_return_products.py": [
          "File: saleor/graphql/order/tests/test_fulfillment_return_products.py -> saleor/graphql/order/tests/test_fulfillment_return_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: import graphene",
          "5: from prices import Money, TaxedMoney",
          "",
          "[Removed Lines]",
          "2: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "2: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     staff_api_client.post_graphql(ORDER_FULFILL_RETURN_MUTATION, variables)",
          "110:     mocked_refund.assert_called_with(",
          "112:     )",
          "",
          "[Removed Lines]",
          "111:         payment_dummy, quantize_price(amount_to_refund, fulfilled_order.currency)",
          "",
          "[Added Lines]",
          "111:         payment_dummy, ANY, quantize_price(amount_to_refund, fulfilled_order.currency)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     amount = line_to_return.unit_price_gross_amount * line_quantity_to_return",
          "217:     amount += order_with_lines.shipping_price_gross_amount",
          "221: def test_fulfillment_return_products_order_lines_quantity_bigger_than_total(",
          "",
          "[Removed Lines]",
          "218:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "218:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "317:     assert len(return_fulfillment[\"lines\"]) == 1",
          "318:     assert return_fulfillment[\"lines\"][0][\"orderLine\"][\"id\"] == line_id",
          "319:     assert return_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "323: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "320:     mocked_refund.assert_called_with(payment_dummy, amount_to_refund)",
          "",
          "[Added Lines]",
          "320:     mocked_refund.assert_called_with(payment_dummy, ANY, amount_to_refund)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "435:     )",
          "436:     amount += fulfilled_order.shipping_price_gross_amount",
          "440: def test_fulfillment_return_products_fulfillment_lines_quantity_bigger_than_total(",
          "",
          "[Removed Lines]",
          "437:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "437:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "594:     assert return_fulfillment[\"lines\"][0][\"quantity\"] == 2",
          "595:     amount = fulfillment_line_to_return.order_line.unit_price_gross_amount * 2",
          "596:     amount += fulfilled_order.shipping_price_gross_amount",
          "600: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "597:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "597:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "696:     amount = order_line.unit_price_gross_amount * 2",
          "697:     amount = quantize_price(amount, fulfilled_order.currency)",
          "",
          "[Removed Lines]",
          "698:     mocked_refund.assert_called_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "698:     mocked_refund.assert_called_with(payment_dummy, ANY, amount)",
          "",
          "---------------"
        ],
        "saleor/graphql/order/tests/test_order.py||saleor/graphql/order/tests/test_order.py": [
          "File: saleor/graphql/order/tests/test_order.py -> saleor/graphql/order/tests/test_order.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "817:         type=order_events.OrderEvents.PAYMENT_CAPTURED,",
          "818:         parameters__amount=payment_txn_preauth.get_total().amount,",
          "819:     ).exists()",
          "823: def test_order_confirm_unfulfilled(staff_api_client, order, permission_manage_orders):",
          "",
          "[Removed Lines]",
          "820:     capture_mock.assert_called_once_with(payment_txn_preauth)",
          "",
          "[Added Lines]",
          "820:     capture_mock.assert_called_once_with(payment_txn_preauth, ANY)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/mutations.py||saleor/graphql/payment/mutations.py": [
          "File: saleor/graphql/payment/mutations.py -> saleor/graphql/payment/mutations.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:             info, payment_id, field=\"payment_id\", only_type=Payment",
          "188:         )",
          "189:         try:",
          "191:             payment.refresh_from_db()",
          "192:         except PaymentError as e:",
          "193:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "",
          "[Removed Lines]",
          "190:             gateway.capture(payment, amount)",
          "",
          "[Added Lines]",
          "190:             gateway.capture(payment, info.context.plugins, amount)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:             info, payment_id, field=\"payment_id\", only_type=Payment",
          "208:         )",
          "209:         try:",
          "211:             payment.refresh_from_db()",
          "212:         except PaymentError as e:",
          "213:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "",
          "[Removed Lines]",
          "210:             gateway.refund(payment, amount=amount)",
          "",
          "[Added Lines]",
          "210:             gateway.refund(payment, info.context.plugins, amount=amount)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:             info, payment_id, field=\"payment_id\", only_type=Payment",
          "233:         )",
          "234:         try:",
          "236:             payment.refresh_from_db()",
          "237:         except PaymentError as e:",
          "238:             raise ValidationError(str(e), code=PaymentErrorCode.PAYMENT_ERROR)",
          "",
          "[Removed Lines]",
          "235:             gateway.void(payment)",
          "",
          "[Added Lines]",
          "235:             gateway.void(payment, info.context.plugins)",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/resolvers.py||saleor/graphql/payment/resolvers.py": [
          "File: saleor/graphql/payment/resolvers.py -> saleor/graphql/payment/resolvers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from ...payment import models",
          "4: from ..utils.filters import filter_by_query_param",
          "6: PAYMENT_SEARCH_FIELDS = [\"id\"]",
          "14: def resolve_payments(info, query):",
          "15:     queryset = models.Payment.objects.all().distinct()",
          "16:     return filter_by_query_param(queryset, query, PAYMENT_SEARCH_FIELDS)",
          "",
          "[Removed Lines]",
          "1: from ...payment import gateway as payment_gateway",
          "3: from ...payment.utils import fetch_customer_id",
          "9: def resolve_client_token(user, gateway: str):",
          "10:     customer_id = fetch_customer_id(user, gateway)",
          "11:     return payment_gateway.get_client_token(gateway, customer_id)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "saleor/graphql/payment/tests/test_payment.py||saleor/graphql/payment/tests/test_payment.py": [
          "File: saleor/graphql/payment/tests/test_payment.py -> saleor/graphql/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import json",
          "2: from decimal import Decimal",
          "5: import graphene",
          "6: import pytest",
          "",
          "[Removed Lines]",
          "3: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "3: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "832:     )",
          "833:     response = user_api_client.post_graphql(query)",
          "836:     content = get_graphql_content(response)[\"data\"][\"me\"][\"storedPaymentSources\"]",
          "837:     assert content is not None and len(content) == 1",
          "838:     assert content[0] == {\"gateway\": gateway, \"creditCardInfo\": {\"lastDigits\": \"5678\"}}",
          "",
          "[Removed Lines]",
          "835:     mock_get_source_list.assert_called_once_with(gateway, dummy_customer_id)",
          "",
          "[Added Lines]",
          "835:     mock_get_source_list.assert_called_once_with(gateway, dummy_customer_id, ANY)",
          "",
          "---------------"
        ],
        "saleor/order/actions.py||saleor/order/actions.py": [
          "File: saleor/order/actions.py -> saleor/order/actions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1126:             amount += order.shipping_price_gross_amount",
          "1127:     if amount:",
          "1128:         amount = min(payment.captured_amount, amount)",
          "1130:         order_refunded(order, requester, amount, payment, manager=manager)",
          "1132:     fulfillment_refunded_event(",
          "",
          "[Removed Lines]",
          "1129:         gateway.refund(payment, amount)",
          "",
          "[Added Lines]",
          "1129:         gateway.refund(payment, manager, amount)",
          "",
          "---------------"
        ],
        "saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py||saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py": [
          "File: saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py -> saleor/order/tests/test_order_actions_create_fulfillments_for_returned_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: from prices import Money, TaxedMoney",
          "",
          "[Removed Lines]",
          "2: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "2: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:         )",
          "130:     amount = sum([line.unit_price_gross_amount * 2 for line in order_lines_to_return])",
          "132:     assert not replace_order",
          "",
          "[Removed Lines]",
          "131:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, amount)",
          "",
          "[Added Lines]",
          "131:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "186:     amount = sum([line.unit_price_gross_amount * 2 for line in order_lines_to_return])",
          "187:     amount += order_with_lines.shipping_price_gross_amount",
          "189:     assert not replace_order",
          "",
          "[Removed Lines]",
          "188:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, amount)",
          "",
          "[Added Lines]",
          "188:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "339:     for line in order_lines_to_return:",
          "340:         assert line.quantity_unfulfilled == original_quantity.get(line.pk) - 2",
          "345: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "342:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "342:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516:     for line in fulfillment_lines:",
          "517:         assert line.quantity == original_quantity.get(line.pk) - 2",
          "522: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "519:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "519:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "589:     for line in fulfillment_lines:",
          "590:         assert line.quantity == original_quantity.get(line.pk) - 2",
          "595: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "592:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "592:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "767:             for line in fulfillment_lines_to_return",
          "768:         ]",
          "769:     )",
          "",
          "[Removed Lines]",
          "770:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, amount)",
          "",
          "[Added Lines]",
          "770:     mocked_refund.assert_called_once_with(payment_dummy_fully_charged, ANY, amount)",
          "",
          "---------------"
        ],
        "saleor/order/tests/test_order_actions_refund_products.py||saleor/order/tests/test_order_actions_refund_products.py": [
          "File: saleor/order/tests/test_order_actions_refund_products.py -> saleor/order/tests/test_order_actions_refund_products.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "4: from prices import Money, TaxedMoney",
          "",
          "[Removed Lines]",
          "2: from unittest.mock import patch",
          "",
          "[Added Lines]",
          "2: from unittest.mock import ANY, patch",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:             == current_allocation.quantity_allocated",
          "62:         )",
          "63:     amount = sum([line.unit_price_gross_amount * 2 for line in order_lines_to_refund])",
          "67: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "64:     mocked_refund.assert_called_once_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "64:     mocked_refund.assert_called_once_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     for line in order_lines_to_refund:",
          "106:         assert line.quantity_unfulfilled == original_quantity.get(line.pk) - 2",
          "111: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "108:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "108:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:         assert line.quantity_unfulfilled == original_quantity.get(line.pk) - 2",
          "146:     amount = sum([line.unit_price_gross_amount * 2 for line in order_lines_to_refund])",
          "147:     amount += order_with_lines.shipping_price_gross_amount",
          "151: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "148:     mocked_refund.assert_called_once_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "148:     mocked_refund.assert_called_once_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:     amount = sum(",
          "186:         [line.order_line.unit_price_gross_amount * 2 for line in fulfillment_lines]",
          "187:     )",
          "191: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "188:     mocked_refund.assert_called_once_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "188:     mocked_refund.assert_called_once_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:     for line in fulfillment_lines:",
          "229:         assert line.quantity == original_quantity.get(line.pk) - 2",
          "234: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "231:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "231:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "269:     for line in fulfillment_lines:",
          "270:         assert line.quantity == original_quantity.get(line.pk) - 2",
          "274: @patch(\"saleor.order.actions.gateway.refund\")",
          "",
          "[Removed Lines]",
          "271:     mocked_refund.assert_called_once_with(payment_dummy, amount)",
          "",
          "[Added Lines]",
          "271:     mocked_refund.assert_called_once_with(payment_dummy, ANY, amount)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "343:     order_line.refresh_from_db()",
          "344:     assert order_line.quantity_fulfilled == 4",
          "345:     assert order_line.quantity_unfulfilled == 1",
          "",
          "[Removed Lines]",
          "346:     assert mocked_refund.call_count == 2",
          "",
          "[Added Lines]",
          "346:     assert mocked_refund.call_count == ANY, 2",
          "",
          "---------------"
        ],
        "saleor/payment/gateway.py||saleor/payment/gateway.py": [
          "File: saleor/payment/gateway.py -> saleor/payment/gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from django.db import transaction",
          "9: from . import GatewayError, PaymentError, TransactionKind",
          "10: from .models import Payment, Transaction",
          "11: from .utils import (",
          "",
          "[Removed Lines]",
          "7: from ..payment.interface import TokenConfig",
          "8: from ..plugins.manager import get_plugins_manager",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: def process_payment(",
          "77:     payment: Payment,",
          "78:     token: str,",
          "79:     store_source: bool = False,",
          "80:     additional_data: Optional[dict] = None,",
          "82: ) -> Transaction:",
          "85:     payment_data = create_payment_information(",
          "86:         payment=payment,",
          "87:         payment_token=token,",
          "",
          "[Removed Lines]",
          "81:     plugin_manager: Optional[\"PluginsManager\"] = None,",
          "83:     if not plugin_manager:",
          "84:         plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "77:     plugin_manager: \"PluginsManager\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: @require_active_payment",
          "110: @with_locked_payment",
          "111: @payment_postprocess",
          "114:     clean_authorize(payment)",
          "115:     payment_data = create_payment_information(",
          "116:         payment=payment, payment_token=token, store_source=store_source",
          "",
          "[Removed Lines]",
          "112: def authorize(payment: Payment, token: str, store_source: bool = False) -> Transaction:",
          "113:     plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "108: def authorize(",
          "109:     payment: Payment,",
          "110:     token: str,",
          "111:     plugin_manager: \"PluginsManager\",",
          "112:     store_source: bool = False,",
          "113: ) -> Transaction:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135: @with_locked_payment",
          "136: @payment_postprocess",
          "137: def capture(",
          "139: ) -> Transaction:",
          "141:     if amount is None:",
          "142:         amount = payment.get_charge_amount()",
          "143:     clean_capture(payment, Decimal(amount))",
          "",
          "[Removed Lines]",
          "138:     payment: Payment, amount: Decimal = None, store_source: bool = False",
          "140:     plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "138:     payment: Payment,",
          "139:     plugin_manager: \"PluginsManager\",",
          "140:     amount: Decimal = None,",
          "141:     store_source: bool = False,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "163: @require_active_payment",
          "164: @with_locked_payment",
          "165: @payment_postprocess",
          "168:     if amount is None:",
          "169:         amount = payment.captured_amount",
          "170:     _validate_refund_amount(payment, amount)",
          "",
          "[Removed Lines]",
          "166: def refund(payment: Payment, amount: Decimal = None) -> Transaction:",
          "167:     plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "168: def refund(",
          "169:     payment: Payment, plugin_manager: \"PluginsManager\", amount: Decimal = None",
          "170: ) -> Transaction:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202: @require_active_payment",
          "203: @with_locked_payment",
          "204: @payment_postprocess",
          "207:     token = _get_past_transaction_token(payment, TransactionKind.AUTH)",
          "208:     payment_data = create_payment_information(payment=payment, payment_token=token)",
          "209:     response, error = _fetch_gateway_response(",
          "",
          "[Removed Lines]",
          "205: def void(payment: Payment) -> Transaction:",
          "206:     plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "208: def void(payment: Payment, plugin_manager: \"PluginsManager\") -> Transaction:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "222: @require_active_payment",
          "223: @with_locked_payment",
          "224: @payment_postprocess",
          "227:     txn = payment.transactions.filter(",
          "228:         kind=TransactionKind.ACTION_TO_CONFIRM, is_success=True",
          "229:     ).last()",
          "",
          "[Removed Lines]",
          "225: def confirm(payment: Payment, additional_data: Optional[dict] = None) -> Transaction:",
          "226:     plugin_manager = get_plugins_manager()",
          "",
          "[Added Lines]",
          "227: def confirm(",
          "228:     payment: Payment,",
          "229:     plugin_manager: \"PluginsManager\",",
          "230:     additional_data: Optional[dict] = None,",
          "231: ) -> Transaction:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "247:     )",
          "252:     return plugin_manager.list_payment_sources(gateway, customer_id)",
          "265: def _fetch_gateway_response(fn, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "250: def list_payment_sources(gateway: str, customer_id: str) -> List[\"CustomerSource\"]:",
          "251:     plugin_manager = get_plugins_manager()",
          "255: def get_client_token(gateway: str, customer_id: str = None) -> str:",
          "256:     plugin_manager = get_plugins_manager()",
          "257:     token_config = TokenConfig(customer_id=customer_id)",
          "258:     return plugin_manager.get_client_token(gateway, token_config)",
          "261: def list_gateways() -> List[\"PaymentGateway\"]:",
          "262:     return get_plugins_manager().list_payment_gateways()",
          "",
          "[Added Lines]",
          "255: def list_payment_sources(",
          "256:     gateway: str, customer_id: str, plugin_manager: \"PluginsManager\"",
          "257: ) -> List[\"CustomerSource\"]:",
          "261: def list_gateways(plugin_manager: \"PluginsManager\") -> List[\"PaymentGateway\"]:",
          "262:     return plugin_manager.list_payment_gateways()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "294:         raise PaymentError(\"Cannot refund more than captured.\")",
          "298:     if payment is None:",
          "299:         return",
          "300:     if payment.can_refund():",
          "302:     elif payment.can_void():",
          "",
          "[Removed Lines]",
          "297: def payment_refund_or_void(payment: Optional[Payment]):",
          "301:         refund(payment)",
          "303:         void(payment)",
          "",
          "[Added Lines]",
          "297: def payment_refund_or_void(",
          "298:     payment: Optional[Payment], plugin_manager: \"PluginsManager\"",
          "299: ):",
          "303:         refund(payment, plugin_manager)",
          "305:         void(payment, plugin_manager)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:             user=checkout.user or AnonymousUser(),",
          "170:         )",
          "171:     except ValidationError:",
          "173:         return None",
          "174:     # Refresh the payment to assign the newly created order",
          "175:     payment.refresh_from_db()",
          "",
          "[Removed Lines]",
          "172:         payment_refund_or_void(payment)",
          "",
          "[Added Lines]",
          "172:         payment_refund_or_void(payment, manager)",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/dummy/tests/test_dummy.py||saleor/payment/gateways/dummy/tests/test_dummy.py": [
          "File: saleor/payment/gateways/dummy/tests/test_dummy.py -> saleor/payment/gateways/dummy/tests/test_dummy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "5: from .... import ChargeStatus, PaymentError, TransactionKind, gateway",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from .....plugins.manager import get_plugins_manager",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: def test_authorize_success(payment_dummy):",
          "16:     assert txn.is_success",
          "17:     assert txn.kind == TransactionKind.AUTH",
          "18:     assert txn.payment == payment_dummy",
          "",
          "[Removed Lines]",
          "15:     txn = gateway.authorize(payment=payment_dummy, token=\"Fake\")",
          "",
          "[Added Lines]",
          "16:     txn = gateway.authorize(",
          "17:         payment=payment_dummy, token=\"Fake\", plugin_manager=get_plugins_manager()",
          "18:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     payment.charge_status = charge_status",
          "41:     payment.save()",
          "42:     with pytest.raises(PaymentError):",
          "44:         assert txn is None",
          "47: def test_authorize_gateway_error(payment_dummy, monkeypatch):",
          "48:     monkeypatch.setattr(\"saleor.payment.gateways.dummy.dummy_success\", lambda: False)",
          "49:     with pytest.raises(PaymentError):",
          "51:         assert txn.kind == TransactionKind.AUTH",
          "52:         assert not txn.is_success",
          "53:         assert txn.payment == payment_dummy",
          "",
          "[Removed Lines]",
          "43:         txn = gateway.authorize(payment=payment, token=\"Fake\")",
          "50:         txn = gateway.authorize(payment=payment_dummy, token=\"Fake\")",
          "",
          "[Added Lines]",
          "46:         txn = gateway.authorize(",
          "47:             payment=payment, token=\"Fake\", plugin_manager=get_plugins_manager()",
          "48:         )",
          "55:         txn = gateway.authorize(",
          "56:             payment=payment_dummy, token=\"Fake\", plugin_manager=get_plugins_manager()",
          "57:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: def test_void_success(payment_txn_preauth):",
          "57:     assert payment_txn_preauth.is_active",
          "58:     assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED",
          "60:     assert txn.is_success",
          "61:     assert txn.kind == TransactionKind.VOID",
          "62:     assert txn.payment == payment_txn_preauth",
          "",
          "[Removed Lines]",
          "59:     txn = gateway.void(payment=payment_txn_preauth)",
          "",
          "[Added Lines]",
          "66:     txn = gateway.void(",
          "67:         payment=payment_txn_preauth, plugin_manager=get_plugins_manager()",
          "68:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85:     payment.charge_status = charge_status",
          "86:     payment.save()",
          "87:     with pytest.raises(PaymentError):",
          "89:         assert txn is None",
          "92: def test_void_gateway_error(payment_txn_preauth, monkeypatch):",
          "93:     monkeypatch.setattr(\"saleor.payment.gateways.dummy.dummy_success\", lambda: False)",
          "94:     with pytest.raises(PaymentError):",
          "96:         assert txn.kind == TransactionKind.VOID",
          "97:         assert not txn.is_success",
          "98:         assert txn.payment == payment_txn_preauth",
          "",
          "[Removed Lines]",
          "88:         txn = gateway.void(payment=payment)",
          "95:         txn = gateway.void(payment=payment_txn_preauth)",
          "",
          "[Added Lines]",
          "97:         txn = gateway.void(payment=payment, plugin_manager=get_plugins_manager())",
          "104:         txn = gateway.void(",
          "105:             payment=payment_txn_preauth, plugin_manager=get_plugins_manager()",
          "106:         )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "103:     [(\"98.40\", ChargeStatus.FULLY_CHARGED), (70, ChargeStatus.PARTIALLY_CHARGED)],",
          "104: )",
          "105: def test_capture_success(amount, charge_status, payment_txn_preauth):",
          "107:     assert txn.is_success",
          "108:     assert txn.payment == payment_txn_preauth",
          "109:     payment_txn_preauth.refresh_from_db()",
          "",
          "[Removed Lines]",
          "106:     txn = gateway.capture(payment=payment_txn_preauth, amount=Decimal(amount))",
          "",
          "[Added Lines]",
          "117:     txn = gateway.capture(",
          "118:         payment=payment_txn_preauth,",
          "119:         plugin_manager=get_plugins_manager(),",
          "120:         amount=Decimal(amount),",
          "121:     )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "130:     payment.charge_status = charge_status",
          "131:     payment.save()",
          "132:     with pytest.raises(PaymentError):",
          "134:         assert txn is None",
          "137: def test_capture_gateway_error(payment_txn_preauth, monkeypatch):",
          "138:     monkeypatch.setattr(\"saleor.payment.gateways.dummy.dummy_success\", lambda: False)",
          "139:     with pytest.raises(PaymentError):",
          "141:         assert txn.kind == TransactionKind.CAPTURE",
          "142:         assert not txn.is_success",
          "143:         assert txn.payment == payment_txn_preauth",
          "",
          "[Removed Lines]",
          "133:         txn = gateway.capture(payment=payment, amount=amount)",
          "140:         txn = gateway.capture(payment=payment_txn_preauth, amount=80)",
          "",
          "[Added Lines]",
          "148:         txn = gateway.capture(",
          "149:             payment=payment, plugin_manager=get_plugins_manager(), amount=amount",
          "150:         )",
          "157:         txn = gateway.capture(",
          "158:             payment=payment_txn_preauth, plugin_manager=get_plugins_manager(), amount=80",
          "159:         )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "166:     payment.captured_amount = initial_captured_amount",
          "167:     payment.save()",
          "170:     payment.refresh_from_db()",
          "171:     assert txn.kind == TransactionKind.REFUND",
          "",
          "[Removed Lines]",
          "168:     txn = gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "",
          "[Added Lines]",
          "187:     txn = gateway.refund(",
          "188:         payment=payment,",
          "189:         plugin_manager=get_plugins_manager(),",
          "190:         amount=Decimal(refund_amount),",
          "191:     )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "194:     payment.captured_amount = Decimal(initial_captured_amount)",
          "195:     payment.save()",
          "196:     with pytest.raises(PaymentError):",
          "198:         assert txn is None",
          "",
          "[Removed Lines]",
          "197:         txn = gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "",
          "[Added Lines]",
          "220:         txn = gateway.refund(",
          "221:             payment=payment,",
          "222:             plugin_manager=get_plugins_manager(),",
          "223:             amount=Decimal(refund_amount),",
          "224:         )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "205:     payment.captured_amount = Decimal(\"80.00\")",
          "206:     payment.save()",
          "207:     with pytest.raises(PaymentError):",
          "210:     payment.refresh_from_db()",
          "211:     txn = payment.transactions.last()",
          "",
          "[Removed Lines]",
          "208:         gateway.refund(payment=payment, amount=Decimal(\"80.00\"))",
          "",
          "[Added Lines]",
          "235:         gateway.refund(",
          "236:             payment=payment,",
          "237:             plugin_manager=get_plugins_manager(),",
          "238:             amount=Decimal(\"80.00\"),",
          "239:         )",
          "",
          "---------------"
        ],
        "saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py||saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py": [
          "File: saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py -> saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import pytest",
          "5: from .... import ChargeStatus, PaymentError, TransactionKind, gateway",
          "6: from .. import (",
          "7:     PREAUTHORIZED_TOKENS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: from .....plugins.manager import get_plugins_manager",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: def test_authorize_success(payment_dummy_credit_card):",
          "38:     assert txn.is_success",
          "39:     assert txn.kind == TransactionKind.AUTH",
          "40:     assert txn.payment == payment_dummy_credit_card",
          "",
          "[Removed Lines]",
          "37:     txn = gateway.authorize(payment=payment_dummy_credit_card, token=\"Fake\")",
          "",
          "[Added Lines]",
          "38:     txn = gateway.authorize(",
          "39:         payment=payment_dummy_credit_card,",
          "40:         token=\"Fake\",",
          "41:         plugin_manager=get_plugins_manager(),",
          "42:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     payment.charge_status = charge_status",
          "63:     payment.save()",
          "64:     with pytest.raises(PaymentError) as e:",
          "67:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "65:         gateway.authorize(payment=payment, token=\"Fake\")",
          "",
          "[Added Lines]",
          "70:         gateway.authorize(",
          "71:             payment=payment, token=\"Fake\", plugin_manager=get_plugins_manager()",
          "72:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "72:         \"saleor.payment.gateways.dummy_credit_card.dummy_success\", lambda: False",
          "73:     )",
          "74:     with pytest.raises(PaymentError) as e:",
          "77:     assert e._excinfo[1].message == \"Unable to authorize transaction\"",
          "",
          "[Removed Lines]",
          "75:         gateway.authorize(payment=payment_dummy_credit_card, token=\"Fake\")",
          "",
          "[Added Lines]",
          "82:         gateway.authorize(",
          "83:             payment=payment_dummy_credit_card,",
          "84:             token=\"Fake\",",
          "85:             plugin_manager=get_plugins_manager(),",
          "86:         )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "99:     assert payment_txn_preauth.is_active",
          "100:     assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED",
          "102:     assert txn.is_success",
          "103:     assert txn.kind == TransactionKind.VOID",
          "104:     assert txn.payment == payment_txn_preauth",
          "",
          "[Removed Lines]",
          "101:     txn = gateway.void(payment=payment_txn_preauth)",
          "",
          "[Added Lines]",
          "112:     txn = gateway.void(",
          "113:         payment=payment_txn_preauth, plugin_manager=get_plugins_manager()",
          "114:     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:     payment.charge_status = charge_status",
          "128:     payment.save()",
          "129:     with pytest.raises(PaymentError) as e:",
          "132:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "130:         gateway.void(payment=payment)",
          "",
          "[Added Lines]",
          "143:         gateway.void(payment=payment, plugin_manager=get_plugins_manager())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "140:         \"saleor.payment.gateways.dummy_credit_card.dummy_success\", lambda: False",
          "141:     )",
          "142:     with pytest.raises(PaymentError) as e:",
          "145:     assert e._excinfo[1].message == \"Unable to void the transaction.\"",
          "",
          "[Removed Lines]",
          "143:         gateway.void(payment=payment_txn_preauth)",
          "",
          "[Added Lines]",
          "156:         gateway.void(payment=payment_txn_preauth, plugin_manager=get_plugins_manager())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "175:     transaction.token = token",
          "176:     transaction.save()",
          "179:     assert txn.is_success",
          "180:     assert txn.payment == payment_txn_preauth",
          "181:     assert not txn.error",
          "",
          "[Removed Lines]",
          "178:     txn = gateway.capture(payment=payment_txn_preauth, amount=Decimal(amount))",
          "",
          "[Added Lines]",
          "191:     txn = gateway.capture(",
          "192:         payment=payment_txn_preauth,",
          "193:         plugin_manager=get_plugins_manager(),",
          "194:         amount=Decimal(amount),",
          "195:     )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "203:     payment.charge_status = charge_status",
          "204:     payment.save()",
          "205:     with pytest.raises(PaymentError) as e:",
          "208:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "206:         gateway.capture(payment=payment, amount=amount)",
          "",
          "[Added Lines]",
          "223:         gateway.capture(",
          "224:             payment=payment, plugin_manager=get_plugins_manager(), amount=amount",
          "225:         )",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "221:     # when",
          "222:     with pytest.raises(PaymentError) as e:",
          "225:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "223:         gateway.capture(payment=payment_txn_preauth)",
          "",
          "[Added Lines]",
          "242:         gateway.capture(",
          "243:             payment=payment_txn_preauth, plugin_manager=get_plugins_manager()",
          "244:         )",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "264:     payment.charge_status = ChargeStatus.FULLY_CHARGED",
          "265:     payment.captured_amount = initial_captured_amount",
          "266:     payment.save()",
          "269:     payment.refresh_from_db()",
          "270:     assert txn.kind == TransactionKind.REFUND",
          "",
          "[Removed Lines]",
          "267:     txn = gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "",
          "[Added Lines]",
          "288:     txn = gateway.refund(",
          "289:         payment=payment,",
          "290:         plugin_manager=get_plugins_manager(),",
          "291:         amount=Decimal(refund_amount),",
          "292:     )",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297:     payment.captured_amount = Decimal(initial_captured_amount)",
          "298:     payment.save()",
          "299:     with pytest.raises(PaymentError) as e:",
          "302:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "300:         gateway.refund(payment=payment, amount=Decimal(refund_amount))",
          "",
          "[Added Lines]",
          "325:         gateway.refund(",
          "326:             payment=payment,",
          "327:             plugin_manager=get_plugins_manager(),",
          "328:             amount=Decimal(refund_amount),",
          "329:         )",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "312:     payment.captured_amount = Decimal(\"80.00\")",
          "313:     payment.save()",
          "314:     with pytest.raises(PaymentError):",
          "317:     payment.refresh_from_db()",
          "318:     txn = payment.transactions.last()",
          "",
          "[Removed Lines]",
          "315:         gateway.refund(payment=payment, amount=Decimal(\"80.00\"))",
          "",
          "[Added Lines]",
          "344:         gateway.refund(",
          "345:             payment=payment,",
          "346:             plugin_manager=get_plugins_manager(),",
          "347:             amount=Decimal(\"80.00\"),",
          "348:         )",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "326: @pytest.mark.parametrize(\"token\", [\"111\", PREAUTHORIZED_TOKENS[1]])",
          "327: def test_process_payment_success(token, payment_dummy_credit_card):",
          "328:     # when",
          "331:     # then",
          "332:     assert txn.is_success",
          "",
          "[Removed Lines]",
          "329:     txn = gateway.process_payment(payment=payment_dummy_credit_card, token=token)",
          "",
          "[Added Lines]",
          "362:     txn = gateway.process_payment(",
          "363:         payment=payment_dummy_credit_card,",
          "364:         token=token,",
          "365:         plugin_manager=get_plugins_manager(),",
          "366:     )",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "341: def test_process_payment_failed(token, error, payment_dummy_credit_card):",
          "342:     # when",
          "343:     with pytest.raises(PaymentError) as e:",
          "346:     assert e._excinfo[1].message == error",
          "",
          "[Removed Lines]",
          "344:         gateway.process_payment(payment=payment_dummy_credit_card, token=token)",
          "",
          "[Added Lines]",
          "381:         gateway.process_payment(",
          "382:             payment=payment_dummy_credit_card,",
          "383:             token=token,",
          "384:             plugin_manager=get_plugins_manager(),",
          "385:         )",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "374:     )",
          "376:     # when",
          "379:     # then",
          "380:     assert txn.is_success",
          "",
          "[Removed Lines]",
          "377:     txn = gateway.process_payment(payment=payment_dummy_credit_card, token=token)",
          "",
          "[Added Lines]",
          "418:     txn = gateway.process_payment(",
          "419:         payment=payment_dummy_credit_card,",
          "420:         token=token,",
          "421:         plugin_manager=get_plugins_manager(),",
          "422:     )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "398:     )",
          "400:     # when",
          "403:     # then",
          "404:     assert txn.is_success",
          "",
          "[Removed Lines]",
          "401:     txn = gateway.process_payment(payment=payment_dummy_credit_card, token=token)",
          "",
          "[Added Lines]",
          "446:     txn = gateway.process_payment(",
          "447:         payment=payment_dummy_credit_card,",
          "448:         token=token,",
          "449:         plugin_manager=get_plugins_manager(),",
          "450:     )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "424:     # when",
          "425:     with pytest.raises(PaymentError) as e:",
          "428:     assert e._excinfo[1].message == TOKEN_VALIDATION_MAPPING[token]",
          "",
          "[Removed Lines]",
          "426:         gateway.process_payment(payment=payment_dummy_credit_card, token=token)",
          "",
          "[Added Lines]",
          "475:         gateway.process_payment(",
          "476:             payment=payment_dummy_credit_card,",
          "477:             token=token,",
          "478:             plugin_manager=get_plugins_manager(),",
          "479:         )",
          "",
          "---------------"
        ],
        "saleor/payment/tests/test_gateway.py||saleor/payment/tests/test_gateway.py": [
          "File: saleor/payment/tests/test_gateway.py -> saleor/payment/tests/test_gateway.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from decimal import Decimal",
          "8: from ..interface import GatewayResponse",
          "9: from ..utils import create_payment_information",
          "",
          "[Removed Lines]",
          "3: import pytest",
          "5: import saleor.payment.gateway as gateway",
          "7: from .. import ChargeStatus, CustomPaymentChoices, TransactionKind",
          "",
          "[Added Lines]",
          "3: from ...plugins.manager import get_plugins_manager",
          "4: from .. import ChargeStatus, CustomPaymentChoices, TransactionKind, gateway",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: USED_GATEWAY = \"mirumee.payments.dummy\"",
          "98:     PAYMENT_DATA = create_payment_information(",
          "99:         payment=payment_txn_preauth, payment_token=TOKEN",
          "100:     )",
          "106:         USED_GATEWAY, PAYMENT_DATA",
          "107:     )",
          "108:     assert transaction.amount == PROCESS_PAYMENT_RESPONSE.amount",
          "",
          "[Removed Lines]",
          "86: @pytest.fixture",
          "87: def mock_payment_interface(mocker, fake_payment_interface):",
          "88:     mgr = mocker.patch(",
          "89:         \"saleor.payment.gateway.get_plugins_manager\",",
          "90:         autospec=True,",
          "91:         return_value=fake_payment_interface,",
          "92:     )",
          "93:     yield fake_payment_interface",
          "94:     mgr.assert_called_once()",
          "97: def test_process_payment(mock_payment_interface, payment_txn_preauth):",
          "101:     mock_payment_interface.process_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "103:     transaction = gateway.process_payment(payment=payment_txn_preauth, token=TOKEN)",
          "105:     mock_payment_interface.process_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "83: def test_process_payment(fake_payment_interface, payment_txn_preauth):",
          "87:     fake_payment_interface.process_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "89:     transaction = gateway.process_payment(",
          "90:         payment=payment_txn_preauth, token=TOKEN, plugin_manager=fake_payment_interface",
          "91:     )",
          "93:     fake_payment_interface.process_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: def test_store_source_when_processing_payment(",
          "116: ):",
          "117:     PAYMENT_DATA = create_payment_information(",
          "118:         payment=payment_txn_preauth, payment_token=TOKEN, store_source=True",
          "119:     )",
          "122:     transaction = gateway.process_payment(",
          "124:     )",
          "127:         USED_GATEWAY, PAYMENT_DATA",
          "128:     )",
          "129:     assert transaction.customer_id == PROCESS_PAYMENT_RESPONSE.customer_id",
          "133:     PAYMENT_DATA = create_payment_information(",
          "134:         payment=payment_dummy, payment_token=TOKEN",
          "135:     )",
          "141:         USED_GATEWAY, PAYMENT_DATA",
          "142:     )",
          "143:     assert transaction.amount == AUTHORIZE_RESPONSE.amount",
          "",
          "[Removed Lines]",
          "115:     mock_payment_interface, payment_txn_preauth",
          "120:     mock_payment_interface.process_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "123:         payment=payment_txn_preauth, token=TOKEN, store_source=True",
          "126:     mock_payment_interface.process_payment.assert_called_once_with(",
          "132: def test_authorize_payment(mock_payment_interface, payment_dummy):",
          "136:     mock_payment_interface.authorize_payment.return_value = AUTHORIZE_RESPONSE",
          "138:     transaction = gateway.authorize(payment=payment_dummy, token=TOKEN)",
          "140:     mock_payment_interface.authorize_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "103:     fake_payment_interface, payment_txn_preauth",
          "108:     fake_payment_interface.process_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "111:         payment=payment_txn_preauth,",
          "112:         token=TOKEN,",
          "113:         plugin_manager=fake_payment_interface,",
          "114:         store_source=True,",
          "117:     fake_payment_interface.process_payment.assert_called_once_with(",
          "123: def test_authorize_payment(fake_payment_interface, payment_dummy):",
          "127:     fake_payment_interface.authorize_payment.return_value = AUTHORIZE_RESPONSE",
          "129:     transaction = gateway.authorize(",
          "130:         payment=payment_dummy, token=TOKEN, plugin_manager=fake_payment_interface",
          "131:     )",
          "133:     fake_payment_interface.authorize_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     assert transaction.gateway_response == RAW_RESPONSE",
          "150:     auth_transaction = payment_txn_preauth.transactions.get()",
          "151:     PAYMENT_DATA = create_payment_information(",
          "152:         payment=payment_txn_preauth, payment_token=auth_transaction.token",
          "153:     )",
          "159:         USED_GATEWAY, PAYMENT_DATA",
          "160:     )",
          "161:     assert transaction.amount == PROCESS_PAYMENT_RESPONSE.amount",
          "",
          "[Removed Lines]",
          "149: def test_capture_payment(mock_payment_interface, payment_txn_preauth):",
          "154:     mock_payment_interface.capture_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "156:     transaction = gateway.capture(payment=payment_txn_preauth)",
          "158:     mock_payment_interface.capture_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "142: def test_capture_payment(fake_payment_interface, payment_txn_preauth):",
          "147:     fake_payment_interface.capture_payment.return_value = PROCESS_PAYMENT_RESPONSE",
          "149:     transaction = gateway.capture(",
          "150:         payment=payment_txn_preauth, plugin_manager=fake_payment_interface",
          "151:     )",
          "153:     fake_payment_interface.capture_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "167: def test_refund_for_manual_payment(payment_txn_captured):",
          "168:     payment_txn_captured.gateway = CustomPaymentChoices.MANUAL",
          "169:     transaction = gateway.refund(",
          "171:     )",
          "172:     payment_txn_captured.refresh_from_db()",
          "173:     assert payment_txn_captured.charge_status == ChargeStatus.PARTIALLY_REFUNDED",
          "",
          "[Removed Lines]",
          "170:         payment=payment_txn_captured, amount=PARTIAL_REFUND_AMOUNT",
          "",
          "[Added Lines]",
          "165:         payment=payment_txn_captured,",
          "166:         plugin_manager=get_plugins_manager(),",
          "167:         amount=PARTIAL_REFUND_AMOUNT,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:     assert transaction.currency == \"USD\"",
          "180:     capture_transaction = payment_txn_captured.transactions.get()",
          "181:     PAYMENT_DATA = create_payment_information(",
          "182:         payment=payment_txn_captured,",
          "183:         amount=PARTIAL_REFUND_AMOUNT,",
          "184:         payment_token=capture_transaction.token,",
          "185:     )",
          "187:     transaction = gateway.refund(",
          "189:     )",
          "191:         USED_GATEWAY, PAYMENT_DATA",
          "192:     )",
          "",
          "[Removed Lines]",
          "179: def test_partial_refund_payment(mock_payment_interface, payment_txn_captured):",
          "186:     mock_payment_interface.refund_payment.return_value = PARTIAL_REFUND_RESPONSE",
          "188:         payment=payment_txn_captured, amount=PARTIAL_REFUND_AMOUNT",
          "190:     mock_payment_interface.refund_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "176: def test_partial_refund_payment(fake_payment_interface, payment_txn_captured):",
          "183:     fake_payment_interface.refund_payment.return_value = PARTIAL_REFUND_RESPONSE",
          "185:         payment=payment_txn_captured,",
          "186:         plugin_manager=fake_payment_interface,",
          "187:         amount=PARTIAL_REFUND_AMOUNT,",
          "189:     fake_payment_interface.refund_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199:     assert transaction.gateway_response == RAW_RESPONSE",
          "203:     capture_transaction = payment_txn_captured.transactions.get()",
          "204:     PAYMENT_DATA = create_payment_information(",
          "205:         payment=payment_txn_captured,",
          "206:         amount=FULL_REFUND_AMOUNT,",
          "207:         payment_token=capture_transaction.token,",
          "208:     )",
          "212:         USED_GATEWAY, PAYMENT_DATA",
          "213:     )",
          "",
          "[Removed Lines]",
          "202: def test_full_refund_payment(mock_payment_interface, payment_txn_captured):",
          "209:     mock_payment_interface.refund_payment.return_value = FULL_REFUND_RESPONSE",
          "210:     transaction = gateway.refund(payment=payment_txn_captured)",
          "211:     mock_payment_interface.refund_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "201: def test_full_refund_payment(fake_payment_interface, payment_txn_captured):",
          "208:     fake_payment_interface.refund_payment.return_value = FULL_REFUND_RESPONSE",
          "209:     transaction = gateway.refund(",
          "210:         payment=payment_txn_captured, plugin_manager=fake_payment_interface",
          "211:     )",
          "212:     fake_payment_interface.refund_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "220:     assert transaction.gateway_response == RAW_RESPONSE",
          "224:     auth_transaction = payment_txn_preauth.transactions.get()",
          "225:     PAYMENT_DATA = create_payment_information(",
          "226:         payment=payment_txn_preauth,",
          "227:         payment_token=auth_transaction.token,",
          "228:         amount=VOID_AMOUNT,",
          "229:     )",
          "235:         USED_GATEWAY, PAYMENT_DATA",
          "236:     )",
          "237:     payment_txn_preauth.refresh_from_db()",
          "",
          "[Removed Lines]",
          "223: def test_void_payment(mock_payment_interface, payment_txn_preauth):",
          "230:     mock_payment_interface.void_payment.return_value = VOID_RESPONSE",
          "232:     transaction = gateway.void(payment=payment_txn_preauth)",
          "234:     mock_payment_interface.void_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "224: def test_void_payment(fake_payment_interface, payment_txn_preauth):",
          "231:     fake_payment_interface.void_payment.return_value = VOID_RESPONSE",
          "233:     transaction = gateway.void(",
          "234:         payment=payment_txn_preauth, plugin_manager=fake_payment_interface",
          "235:     )",
          "237:     fake_payment_interface.void_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "242:     assert transaction.gateway_response == RAW_RESPONSE",
          "246:     auth_transaction = payment_txn_to_confirm.transactions.get()",
          "247:     PAYMENT_DATA = create_payment_information(",
          "248:         payment=payment_txn_to_confirm,",
          "249:         payment_token=auth_transaction.token,",
          "250:         amount=CONFIRM_AMOUNT,",
          "251:     )",
          "257:         USED_GATEWAY, PAYMENT_DATA",
          "258:     )",
          "259:     assert transaction.amount == CONFIRM_RESPONSE.amount",
          "",
          "[Removed Lines]",
          "245: def test_confirm_payment(mock_payment_interface, payment_txn_to_confirm):",
          "252:     mock_payment_interface.confirm_payment.return_value = CONFIRM_RESPONSE",
          "254:     transaction = gateway.confirm(payment=payment_txn_to_confirm)",
          "256:     mock_payment_interface.confirm_payment.assert_called_once_with(",
          "",
          "[Added Lines]",
          "248: def test_confirm_payment(fake_payment_interface, payment_txn_to_confirm):",
          "255:     fake_payment_interface.confirm_payment.return_value = CONFIRM_RESPONSE",
          "257:     transaction = gateway.confirm(",
          "258:         payment=payment_txn_to_confirm, plugin_manager=fake_payment_interface",
          "259:     )",
          "261:     fake_payment_interface.confirm_payment.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "262:     assert transaction.gateway_response == RAW_RESPONSE",
          "266:     gateways = [{\"name\": \"Stripe\"}, {\"name\": \"Braintree\"}]",
          "270:     assert lst == gateways",
          "",
          "[Removed Lines]",
          "265: def test_list_gateways(mock_payment_interface):",
          "267:     mock_payment_interface.list_payment_gateways.return_value = gateways",
          "268:     lst = gateway.list_gateways()",
          "269:     mock_payment_interface.list_payment_gateways.assert_called_once()",
          "",
          "[Added Lines]",
          "270: def test_list_gateways(fake_payment_interface):",
          "272:     fake_payment_interface.list_payment_gateways.return_value = gateways",
          "273:     lst = gateway.list_gateways(fake_payment_interface)",
          "274:     fake_payment_interface.list_payment_gateways.assert_called_once()",
          "",
          "---------------"
        ],
        "saleor/payment/tests/test_payment.py||saleor/payment/tests/test_payment.py": [
          "File: saleor/payment/tests/test_payment.py -> saleor/payment/tests/test_payment.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:     dummy_response.kind = TransactionKind.CAPTURE",
          "271:     mock_capture_payment.return_value = dummy_response",
          "272:     with pytest.raises(PaymentError):",
          "274:     mock_capture_payment.assert_called_once()",
          "275:     payment.refresh_from_db()",
          "276:     assert payment.charge_status == ChargeStatus.NOT_CHARGED",
          "",
          "[Removed Lines]",
          "273:         gateway.capture(payment, amount)",
          "",
          "[Added Lines]",
          "273:         gateway.capture(payment, get_plugins_manager(), amount)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281: def test_gateway_charge_errors(payment_dummy, transaction_token, settings):",
          "282:     payment = payment_dummy",
          "284:     with pytest.raises(PaymentError) as exc:",
          "286:     assert exc.value.message == \"Amount should be a positive number.\"",
          "288:     payment.charge_status = ChargeStatus.FULLY_REFUNDED",
          "289:     payment.save()",
          "290:     with pytest.raises(PaymentError) as exc:",
          "292:     assert exc.value.message == \"This payment cannot be captured.\"",
          "294:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "295:     payment.save()",
          "296:     with pytest.raises(PaymentError) as exc:",
          "298:     assert exc.value.message == (\"Unable to charge more than un-captured amount.\")",
          "301: def test_gateway_refund_errors(payment_txn_captured):",
          "302:     payment = payment_txn_captured",
          "303:     with pytest.raises(PaymentError) as exc:",
          "305:     assert exc.value.message == \"Cannot refund more than captured.\"",
          "307:     with pytest.raises(PaymentError) as exc:",
          "309:     assert exc.value.message == \"Amount should be a positive number.\"",
          "311:     payment.charge_status = ChargeStatus.NOT_CHARGED",
          "312:     payment.save()",
          "313:     with pytest.raises(PaymentError) as exc:",
          "315:     assert exc.value.message == \"This payment cannot be refunded.\"",
          "",
          "[Removed Lines]",
          "283:     gateway.authorize(payment, transaction_token)",
          "285:         gateway.capture(payment, Decimal(\"0\"))",
          "291:         gateway.capture(payment, Decimal(\"10\"))",
          "297:         gateway.capture(payment, Decimal(\"1000000\"))",
          "304:         gateway.refund(payment, Decimal(\"1000000\"))",
          "308:         gateway.refund(payment, Decimal(\"0\"))",
          "314:         gateway.refund(payment, Decimal(\"1\"))",
          "",
          "[Added Lines]",
          "283:     gateway.authorize(payment, transaction_token, get_plugins_manager())",
          "285:         gateway.capture(payment, get_plugins_manager(), Decimal(\"0\"))",
          "291:         gateway.capture(payment, get_plugins_manager(), Decimal(\"10\"))",
          "297:         gateway.capture(payment, get_plugins_manager(), Decimal(\"1000000\"))",
          "304:         gateway.refund(payment, get_plugins_manager(), Decimal(\"1000000\"))",
          "308:         gateway.refund(payment, get_plugins_manager(), Decimal(\"0\"))",
          "314:         gateway.refund(payment, get_plugins_manager(), Decimal(\"1\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e5c8a768e0eb187b8f8c04385cd761aaefcd3fe",
      "candidate_info": {
        "commit_hash": "9e5c8a768e0eb187b8f8c04385cd761aaefcd3fe",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/9e5c8a768e0eb187b8f8c04385cd761aaefcd3fe",
        "files": [
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Add warning logger to notification",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import hashlib",
          "4: import hmac",
          "5: import json",
          "6: from typing import Any, Callable, Dict, Optional",
          "7: from urllib.parse import urlencode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import logging",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: from ...utils import create_payment_information, create_transaction, gateway_postprocess",
          "37: from .utils import FAILED_STATUSES, api_call, from_adyen_price",
          "41:     if not payment_id:",
          "42:         return None",
          "43:     try:",
          "44:         _type, db_payment_id = from_global_id(payment_id)",
          "45:     except UnicodeDecodeError:",
          "46:         return None",
          "47:     payment = (",
          "48:         Payment.objects.prefetch_related(\"order\", \"checkout\")",
          "",
          "[Removed Lines]",
          "40: def get_payment(payment_id: Optional[str]) -> Optional[Payment]:",
          "",
          "[Added Lines]",
          "40: logger = logging.getLogger(__name__)",
          "43: def get_payment(",
          "44:     payment_id: Optional[str], transaction_id: Optional[str]",
          "45: ) -> Optional[Payment]:",
          "46:     transaction_id = transaction_id or \"\"",
          "48:         logger.warning(\"Missing payment ID. Reference %s\", transaction_id)",
          "53:         logger.warning(",
          "54:             \"Unable to decode the payment ID %s. Reference %s\",",
          "55:             payment_id,",
          "56:             transaction_id,",
          "57:         )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         .filter(id=db_payment_id)",
          "51:         .first()",
          "52:     )",
          "53:     return payment",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:     if not payment:",
          "66:         logger.warning(",
          "67:             \"Payment for %s was not found. Reference %s\", payment_id, transaction_id",
          "68:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117: @transaction_with_commit_on_errors()",
          "118: def handle_authorization(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "120:     if not payment:",
          "121:         # We don't know anything about that payment",
          "122:         return",
          "123:     checkout = get_checkout(payment)",
          "125:         ChargeStatus.FULLY_CHARGED,",
          "126:         ChargeStatus.PARTIALLY_CHARGED,",
          "127:     }:",
          "128:         return",
          "131:     transaction = payment.transactions.filter(",
          "132:         token=transaction_id,",
          "133:         action_required=False,",
          "",
          "[Removed Lines]",
          "119:     payment = get_payment(notification.get(\"merchantReference\"))",
          "124:     if payment.charge_status in {",
          "130:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "135:     transaction_id = notification.get(\"pspReference\")",
          "136:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "141:     if payment.order and payment.charge_status in {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:         kind__in=[TransactionKind.AUTH, TransactionKind.CAPTURE],",
          "136:     ).last()",
          "140:         return",
          "142:     action_transaction = payment.transactions.filter(",
          "",
          "[Removed Lines]",
          "138:     if transaction:",
          "139:         # We already have this transaction",
          "",
          "[Added Lines]",
          "154:     if transaction and payment.order:",
          "155:         # We already have this transaction and order is created",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178: @transaction_with_commit_on_errors()",
          "179: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "180:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "182:     if not payment:",
          "183:         return",
          "185:     transaction = get_transaction(payment, transaction_id, TransactionKind.CANCEL)",
          "186:     if transaction and transaction.is_success:",
          "187:         # it is already cancelled",
          "",
          "[Removed Lines]",
          "181:     payment = get_payment(notification.get(\"merchantReference\"))",
          "184:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "197:     transaction_id = notification.get(\"pspReference\")",
          "198:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218: @transaction_with_commit_on_errors()",
          "219: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "220:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "222:     if not payment:",
          "223:         return",
          "224:     checkout = get_checkout(payment)",
          "",
          "[Removed Lines]",
          "221:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Added Lines]",
          "237:     transaction_id = notification.get(\"pspReference\")",
          "238:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "227:         # the payment has already status captured.",
          "228:         return",
          "231:     capture_transaction = payment.transactions.filter(",
          "232:         token=transaction_id,",
          "233:         action_required=False,",
          "",
          "[Removed Lines]",
          "230:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283: @transaction_with_commit_on_errors()",
          "284: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "285:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "287:     if not payment:",
          "288:         return",
          "291:     transaction = get_transaction(",
          "292:         payment, transaction_id, TransactionKind.CAPTURE_FAILED",
          "",
          "[Removed Lines]",
          "286:     payment = get_payment(notification.get(\"merchantReference\"))",
          "289:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "302:     transaction_id = notification.get(\"pspReference\")",
          "303:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "311: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "312:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "313:     # event-codes\"",
          "315:     if not payment:",
          "316:         return",
          "318:     transaction = get_transaction(payment, transaction_id, TransactionKind.PENDING)",
          "319:     if transaction and transaction.is_success:",
          "320:         # it is already pending",
          "",
          "[Removed Lines]",
          "314:     payment = get_payment(notification.get(\"merchantReference\"))",
          "317:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "330:     transaction_id = notification.get(\"pspReference\")",
          "331:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "334: @transaction_with_commit_on_errors()",
          "335: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "336:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "338:     if not payment:",
          "339:         return",
          "341:     transaction = get_transaction(payment, transaction_id, TransactionKind.REFUND)",
          "342:     if transaction and transaction.is_success:",
          "343:         # it is already refunded",
          "",
          "[Removed Lines]",
          "337:     payment = get_payment(notification.get(\"merchantReference\"))",
          "340:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "353:     transaction_id = notification.get(\"pspReference\")",
          "354:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "367: @transaction_with_commit_on_errors()",
          "368: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "369:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "371:     if not payment:",
          "372:         return",
          "375:     # take the last status of payment before we tried to perform the refund",
          "376:     last_transaction = payment.transactions.filter(",
          "",
          "[Removed Lines]",
          "370:     payment = get_payment(notification.get(\"merchantReference\"))",
          "373:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "386:     transaction_id = notification.get(\"pspReference\")",
          "387:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "433:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "434: ):",
          "435:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "437:     if not payment:",
          "438:         return",
          "440:     transaction = get_transaction(",
          "441:         payment, transaction_id, TransactionKind.REFUND_REVERSED",
          "442:     )",
          "",
          "[Removed Lines]",
          "436:     payment = get_payment(notification.get(\"merchantReference\"))",
          "439:     transaction_id = notification.get(\"pspReference\")",
          "",
          "[Added Lines]",
          "452:     transaction_id = notification.get(\"pspReference\")",
          "453:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "472:     adyen_id = notification.get(\"pspReference\")",
          "473:     success = notification.get(\"success\", True)",
          "474:     event = notification.get(\"eventCode\")",
          "476:     if not payment:",
          "477:         return",
          "478:     msg = (",
          "",
          "[Removed Lines]",
          "475:     payment = get_payment(notification.get(\"merchantReference\"))",
          "",
          "[Added Lines]",
          "491:     transaction_id = notification.get(\"pspReference\")",
          "492:     payment = get_payment(notification.get(\"merchantReference\"), transaction_id)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd5cf79428fc1430b52a294041a2ed4cd1f2b975",
      "candidate_info": {
        "commit_hash": "cd5cf79428fc1430b52a294041a2ed4cd1f2b975",
        "repo": "saleor/saleor",
        "commit_url": "https://github.com/saleor/saleor/commit/cd5cf79428fc1430b52a294041a2ed4cd1f2b975",
        "files": [
          "saleor/payment/gateways/adyen/webhooks.py"
        ],
        "message": "Fix pydocstyle errors",
        "before_after_code_files": [
          "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ],
          "candidate": [
            "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py"
          ]
        }
      },
      "candidate_diff": {
        "saleor/payment/gateways/adyen/webhooks.py||saleor/payment/gateways/adyen/webhooks.py": [
          "File: saleor/payment/gateways/adyen/webhooks.py -> saleor/payment/gateways/adyen/webhooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: def handle_cancellation(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "116:     payment = get_payment(notification.get(\"merchantReference\"))",
          "117:     if not payment:",
          "118:         return",
          "",
          "[Removed Lines]",
          "115:     \"https://docs.adyen.com/checkout/cancel#cancellation-notifciation\"",
          "",
          "[Added Lines]",
          "115:     # https://docs.adyen.com/checkout/cancel#cancellation-notifciation",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139: def handle_cancel_or_refund(",
          "140:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "141: ):",
          "143:     additional_data = notification.get(\"additionalData\")",
          "144:     action = additional_data.get(\"modification.action\")",
          "145:     if action == \"refund\":",
          "",
          "[Removed Lines]",
          "142:     \"https://docs.adyen.com/checkout/cancel-or-refund#cancel-or-refund-notification\"",
          "",
          "[Added Lines]",
          "142:     # https://docs.adyen.com/checkout/cancel-or-refund#cancel-or-refund-notification",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151: def handle_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "153:     payment = get_payment(notification.get(\"merchantReference\"))",
          "154:     if not payment:",
          "155:         return",
          "",
          "[Removed Lines]",
          "152:     \"https://docs.adyen.com/checkout/capture#capture-notification\"",
          "",
          "[Added Lines]",
          "152:     # https://docs.adyen.com/checkout/capture#capture-notification",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177: def handle_failed_capture(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "179:     payment = get_payment(notification.get(\"merchantReference\"))",
          "180:     if not payment:",
          "181:         return",
          "",
          "[Removed Lines]",
          "178:     \"https://docs.adyen.com/checkout/capture#failed-capture\"",
          "",
          "[Added Lines]",
          "178:     # https://docs.adyen.com/checkout/capture#failed-capture",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203: def handle_pending(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "206:     mark_capture = gateway_config.auto_capture",
          "207:     if mark_capture:",
          "208:         # If we mark order as a capture by default we don't need to handle this action",
          "",
          "[Removed Lines]",
          "204:     \"https://docs.adyen.com/development-resources/webhooks/understand-notifications#\"",
          "205:     \"event-codes\"",
          "",
          "[Added Lines]",
          "204:     # https://docs.adyen.com/development-resources/webhooks/understand-notifications#",
          "205:     # event-codes\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "230: def handle_refund(notification: Dict[str, Any], _gateway_config: GatewayConfig):",
          "232:     payment = get_payment(notification.get(\"merchantReference\"))",
          "233:     if not payment:",
          "234:         return",
          "",
          "[Removed Lines]",
          "231:     \"https://docs.adyen.com/checkout/refund#refund-notification\"",
          "",
          "[Added Lines]",
          "231:     # https://docs.adyen.com/checkout/refund#refund-notification",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "262: def handle_failed_refund(notification: Dict[str, Any], gateway_config: GatewayConfig):",
          "264:     payment = get_payment(notification.get(\"merchantReference\"))",
          "265:     if not payment:",
          "266:         return",
          "",
          "[Removed Lines]",
          "263:     \"https://docs.adyen.com/checkout/refund#failed-refund\"",
          "",
          "[Added Lines]",
          "263:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "325: def handle_reversed_refund(",
          "326:     notification: Dict[str, Any], _gateway_config: GatewayConfig",
          "327: ):",
          "329:     payment = get_payment(notification.get(\"merchantReference\"))",
          "330:     if not payment:",
          "331:         return",
          "",
          "[Removed Lines]",
          "328:     \"https://docs.adyen.com/checkout/refund#failed-refund\"",
          "",
          "[Added Lines]",
          "328:     # https://docs.adyen.com/checkout/refund#failed-refund",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "354: def handle_refund_with_data(",
          "355:     notification: Dict[str, Any], gateway_config: GatewayConfig",
          "356: ):",
          "358:     handle_refund(notification, gateway_config)",
          "",
          "[Removed Lines]",
          "357:     \"https://docs.adyen.com/checkout/refund#refund-with-data\"",
          "",
          "[Added Lines]",
          "357:     # https://docs.adyen.com/checkout/refund#refund-with-data",
          "",
          "---------------"
        ]
      }
    }
  ]
}