{
  "cve_id": "CVE-2022-46146",
  "cve_desc": "Prometheus Exporter Toolkit is a utility package to build exporters. Prior to versions 0.7.2 and 0.8.2, if someone has access to a Prometheus web.yml file and users' bcrypted passwords, they can bypass security by poisoning the built-in authentication cache. Versions 0.7.2 and 0.8.2 contain a fix for the issue. There is no workaround, but attacker must have access to the hashed password to use this functionality.",
  "repo": "prometheus/exporter-toolkit",
  "patch_hash": "5b1eab34484ddd353986bce736cd119d863e4ff5",
  "patch_info": {
    "commit_hash": "5b1eab34484ddd353986bce736cd119d863e4ff5",
    "repo": "prometheus/exporter-toolkit",
    "commit_url": "https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5",
    "files": [
      "web/handler.go",
      "web/handler_test.go"
    ],
    "message": "Merge pull request from GHSA-7rg2-cxvp-9p7p\n\n* Fix authentication bypass if stored password hash is known\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>\n\n* Add test for CVE-2022-46146\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>",
    "before_after_code_files": [
      "web/handler.go||web/handler.go",
      "web/handler_test.go||web/handler_test.go"
    ]
  },
  "patch_diff": {
    "web/handler.go||web/handler.go": [
      "File: web/handler.go -> web/handler.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:  \"encoding/hex\"",
      "20:  \"fmt\"",
      "21:  \"net/http\"",
      "22:  \"sync\"",
      "24:  \"github.com/go-kit/log\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:    hashedPassword = \"$2y$10$QOauhQNbBCuQDKes6eFzPeMqBSjb7Mr5DUmpZ/VcEd00UAV/LDeSi\"",
      "114:   }",
      "117:   authOk, ok := u.cache.get(cacheKey)",
      "119:   if !ok {",
      "",
      "[Removed Lines]",
      "116:   cacheKey := hex.EncodeToString(append(append([]byte(user), []byte(hashedPassword)...), []byte(pass)...))",
      "",
      "[Added Lines]",
      "117:   cacheKey := strings.Join(",
      "118:    []string{",
      "119:     hex.EncodeToString([]byte(user)),",
      "120:     hex.EncodeToString([]byte(hashedPassword)),",
      "121:     hex.EncodeToString([]byte(pass)),",
      "122:    }, \":\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "122:    err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(pass))",
      "123:    u.bcryptMtx.Unlock()",
      "126:    u.cache.set(cacheKey, authOk)",
      "127:   }",
      "",
      "[Removed Lines]",
      "125:    authOk = err == nil",
      "",
      "[Added Lines]",
      "131:    authOk = validUser && err == nil",
      "",
      "---------------"
    ],
    "web/handler_test.go||web/handler_test.go": [
      "File: web/handler_test.go -> web/handler_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "137:  login()",
      "138: }",
      "141: func TestHTTPHeaders(t *testing.T) {",
      "142:  server := &http.Server{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "141: func TestByPassBasicAuthVuln(t *testing.T) {",
      "142:  server := &http.Server{",
      "143:   Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
      "144:    w.Write([]byte(\"Hello World!\"))",
      "145:   }),",
      "146:  }",
      "148:  done := make(chan struct{})",
      "149:  t.Cleanup(func() {",
      "150:   if err := server.Shutdown(context.Background()); err != nil {",
      "151:    t.Fatal(err)",
      "152:   }",
      "153:   <-done",
      "154:  })",
      "156:  go func() {",
      "157:   flags := FlagConfig{",
      "158:    WebListenAddresses: &([]string{port}),",
      "159:    WebSystemdSocket:   OfBool(false),",
      "160:    WebConfigFile:      OfString(\"testdata/web_config_users_noTLS.good.yml\"),",
      "161:   }",
      "162:   ListenAndServe(server, &flags, testlogger)",
      "163:   close(done)",
      "164:  }()",
      "166:  login := func(username, password string) {",
      "167:   client := &http.Client{}",
      "168:   req, err := http.NewRequest(\"GET\", \"http://localhost\"+port, nil)",
      "169:   if err != nil {",
      "170:    t.Fatal(err)",
      "171:   }",
      "172:   req.SetBasicAuth(username, password)",
      "173:   r, err := client.Do(req)",
      "174:   if err != nil {",
      "175:    t.Fatal(err)",
      "176:   }",
      "177:   if r.StatusCode != 401 {",
      "178:    t.Fatalf(\"bad return code, expected %d, got %d\", 401, r.StatusCode)",
      "179:   }",
      "180:  }",
      "183:  login(\"alice$2y$12$1DpfPeqF9HzHJt.EWswy1exHluGfbhnn3yXhR7Xes6m3WJqFg0Wby\", \"fakepassword\")",
      "185:  login(\"alice\", \"$2y$10$QOauhQNbBCuQDKes6eFzPeMqBSjb7Mr5DUmpZ/VcEd00UAV/LDeSifakepassword\")",
      "186: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25288779bc59d00c41b4a1706c6b87f0561ef2d7",
      "candidate_info": {
        "commit_hash": "25288779bc59d00c41b4a1706c6b87f0561ef2d7",
        "repo": "prometheus/exporter-toolkit",
        "commit_url": "https://github.com/prometheus/exporter-toolkit/commit/25288779bc59d00c41b4a1706c6b87f0561ef2d7",
        "files": [
          "web/handler.go",
          "web/handler_test.go"
        ],
        "message": "Merge pull request from GHSA-7rg2-cxvp-9p7p\n\n* Fix authentication bypass if stored password hash is known\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>\n\n* Add test for CVE-2022-46146\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>\n\nSigned-off-by: Julien Pivotto <roidelapluie@o11y.eu>",
        "before_after_code_files": [
          "web/handler.go||web/handler.go",
          "web/handler_test.go||web/handler_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "web/handler.go||web/handler.go",
            "web/handler_test.go||web/handler_test.go"
          ],
          "candidate": [
            "web/handler.go||web/handler.go",
            "web/handler_test.go||web/handler_test.go"
          ]
        }
      },
      "candidate_diff": {
        "web/handler.go||web/handler.go": [
          "File: web/handler.go -> web/handler.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"encoding/hex\"",
          "20:  \"fmt\"",
          "21:  \"net/http\"",
          "22:  \"sync\"",
          "24:  \"github.com/go-kit/log\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:    hashedPassword = \"$2y$10$QOauhQNbBCuQDKes6eFzPeMqBSjb7Mr5DUmpZ/VcEd00UAV/LDeSi\"",
          "114:   }",
          "117:   authOk, ok := u.cache.get(cacheKey)",
          "119:   if !ok {",
          "",
          "[Removed Lines]",
          "116:   cacheKey := hex.EncodeToString(append(append([]byte(user), []byte(hashedPassword)...), []byte(pass)...))",
          "",
          "[Added Lines]",
          "117:   cacheKey := strings.Join(",
          "118:    []string{",
          "119:     hex.EncodeToString([]byte(user)),",
          "120:     hex.EncodeToString([]byte(hashedPassword)),",
          "121:     hex.EncodeToString([]byte(pass)),",
          "122:    }, \":\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:    err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(pass))",
          "123:    u.bcryptMtx.Unlock()",
          "126:    u.cache.set(cacheKey, authOk)",
          "127:   }",
          "",
          "[Removed Lines]",
          "125:    authOk = err == nil",
          "",
          "[Added Lines]",
          "131:    authOk = validUser && err == nil",
          "",
          "---------------"
        ],
        "web/handler_test.go||web/handler_test.go": [
          "File: web/handler_test.go -> web/handler_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:  login()",
          "130: }",
          "133: func TestHTTPHeaders(t *testing.T) {",
          "134:  server := &http.Server{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: func TestByPassBasicAuthVuln(t *testing.T) {",
          "134:  server := &http.Server{",
          "135:   Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "136:    w.Write([]byte(\"Hello World!\"))",
          "137:   }),",
          "138:  }",
          "140:  done := make(chan struct{})",
          "141:  t.Cleanup(func() {",
          "142:   if err := server.Shutdown(context.Background()); err != nil {",
          "143:    t.Fatal(err)",
          "144:   }",
          "145:   <-done",
          "146:  })",
          "148:  go func() {",
          "149:   flags := FlagConfig{",
          "150:    WebListenAddresses: &([]string{port}),",
          "151:    WebSystemdSocket:   OfBool(false),",
          "152:    WebConfigFile:      OfString(\"testdata/web_config_users_noTLS.good.yml\"),",
          "153:   }",
          "154:   ListenAndServe(server, &flags, testlogger)",
          "155:   close(done)",
          "156:  }()",
          "158:  login := func(username, password string) {",
          "159:   client := &http.Client{}",
          "160:   req, err := http.NewRequest(\"GET\", \"http://localhost\"+port, nil)",
          "161:   if err != nil {",
          "162:    t.Fatal(err)",
          "163:   }",
          "164:   req.SetBasicAuth(username, password)",
          "165:   r, err := client.Do(req)",
          "166:   if err != nil {",
          "167:    t.Fatal(err)",
          "168:   }",
          "169:   if r.StatusCode != 401 {",
          "170:    t.Fatalf(\"bad return code, expected %d, got %d\", 401, r.StatusCode)",
          "171:   }",
          "172:  }",
          "175:  login(\"alice$2y$12$1DpfPeqF9HzHJt.EWswy1exHluGfbhnn3yXhR7Xes6m3WJqFg0Wby\", \"fakepassword\")",
          "177:  login(\"alice\", \"$2y$10$QOauhQNbBCuQDKes6eFzPeMqBSjb7Mr5DUmpZ/VcEd00UAV/LDeSifakepassword\")",
          "178: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}