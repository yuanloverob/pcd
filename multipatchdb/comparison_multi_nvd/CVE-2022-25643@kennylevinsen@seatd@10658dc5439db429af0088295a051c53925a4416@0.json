{
  "cve_id": "CVE-2022-25643",
  "cve_desc": "seatd-launch in seatd 0.6.x before 0.6.4 allows removing files with escalated privileges when installed setuid root. The attack vector is a user-supplied socket pathname.",
  "repo": "kennylevinsen/seatd",
  "patch_hash": "10658dc5439db429af0088295a051c53925a4416",
  "patch_info": {
    "commit_hash": "10658dc5439db429af0088295a051c53925a4416",
    "repo": "kennylevinsen/seatd",
    "commit_url": "https://github.com/kennylevinsen/seatd/commit/10658dc5439db429af0088295a051c53925a4416",
    "files": [
      "seatd-launch/seatd-launch.c"
    ],
    "message": "seatd-launch: Remove socket path command line arg\n\nThis should not need to be configured, so remove the argument. If\ndownstream prefers a different folder, the location can be made\ncompile-time configurable like for seatd itself.",
    "before_after_code_files": [
      "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
    ]
  },
  "patch_diff": {
    "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
      "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
      "17:        \"\\n\"",
      "21:        \"\\n\";",
      "23:  int c;",
      "26:   switch (c) {",
      "30:   case 'v':",
      "31:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
      "32:    return 0;",
      "",
      "[Removed Lines]",
      "18:        \"  -h  Show this help message\\n\"",
      "19:        \"  -s <path> Where to create the seatd socket\\n\"",
      "20:        \"  -v  Show the version number\\n\"",
      "24:  char *sockpath = NULL;",
      "25:  while ((c = getopt(argc, argv, \"vhs:\")) != -1) {",
      "27:   case 's':",
      "28:    sockpath = optarg;",
      "29:    break;",
      "",
      "[Added Lines]",
      "18:        \"  -h Show this help message\\n\"",
      "19:        \"  -v Show the version number\\n\"",
      "23:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:  }",
      "48:  char **command = &argv[optind];",
      "56:  int fds[2];",
      "57:  if (pipe(fds) == -1) {",
      "",
      "[Removed Lines]",
      "50:  char sockbuf[256];",
      "51:  if (sockpath == NULL) {",
      "52:   sprintf(sockbuf, \"/tmp/seatd.%d.sock\", getpid());",
      "53:   sockpath = sockbuf;",
      "54:  }",
      "",
      "[Added Lines]",
      "45:  char sockpath[256];",
      "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed90ed62cdf1c4e7d59e4d279a5bf946b93057dd",
      "candidate_info": {
        "commit_hash": "ed90ed62cdf1c4e7d59e4d279a5bf946b93057dd",
        "repo": "kennylevinsen/seatd",
        "commit_url": "https://github.com/kennylevinsen/seatd/commit/ed90ed62cdf1c4e7d59e4d279a5bf946b93057dd",
        "files": [
          "seatd-launch/seatd-launch.c"
        ],
        "message": "seatd-launch: Use snprintf for socket path\n\nWe also reduce the size of the buffer from 256 bytes to a much more\nreasonable 32 bytes.",
        "before_after_code_files": [
          "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ],
          "candidate": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ]
        }
      },
      "candidate_diff": {
        "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
          "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  }",
          "43:  char **command = &argv[optind];",
          "48:  int fds[2];",
          "49:  if (pipe(fds) == -1) {",
          "",
          "[Removed Lines]",
          "45:  char sockpath[256];",
          "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
          "",
          "[Added Lines]",
          "45:  char sockpath[32];",
          "46:  snprintf(sockpath, sizeof sockpath, \"/tmp/seatd.%d.sock\", getpid());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bbdf0f0b8d383edd1d621507c04db0a5382a5af",
      "candidate_info": {
        "commit_hash": "9bbdf0f0b8d383edd1d621507c04db0a5382a5af",
        "repo": "kennylevinsen/seatd",
        "commit_url": "https://github.com/kennylevinsen/seatd/commit/9bbdf0f0b8d383edd1d621507c04db0a5382a5af",
        "files": [
          "man/seatd-launch.1.scd",
          "man/seatd.1.scd",
          "seatd-launch/seatd-launch.c",
          "seatd/seatd.c"
        ],
        "message": "seatd: Command-line argument for loglevel\n\nSEATD_LOGLEVEL was used to set the loglevel despite already having\ngetopt in place. Remove the environment variable and make a command-line\nargument for it instead.",
        "before_after_code_files": [
          "man/seatd-launch.1.scd||man/seatd-launch.1.scd",
          "man/seatd.1.scd||man/seatd.1.scd",
          "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c",
          "seatd/seatd.c||seatd/seatd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ],
          "candidate": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ]
        }
      },
      "candidate_diff": {
        "man/seatd-launch.1.scd||man/seatd-launch.1.scd": [
          "File: man/seatd-launch.1.scd -> man/seatd-launch.1.scd",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # OPTIONS",
          "14:  Show help message and quit.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  Log-level to pass to seatd. See *seatd*(1) for information about",
          "15:  available log-levels.",
          "",
          "---------------"
        ],
        "man/seatd.1.scd||man/seatd.1.scd": [
          "File: man/seatd.1.scd -> man/seatd.1.scd",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  Where to create the seatd socket. Defaults to `/run/seatd.sock`.",
          "31:  Show the version number and quit.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  Log-level to use. Must be one of debug, info, error or silent. Defaults",
          "32:  to error.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: seatd operates over a UNIX domain socket, with *libseat* providing the",
          "39: client-side of the protocol.",
          "53: # SEE ALSO",
          "55: The libseat library, *<libseat.h>*, *seatd-launch*(1)",
          "",
          "[Removed Lines]",
          "41: # ENVIRONMENT",
          "43: [[ *VARIABLE*",
          "44: :[ *VALUES*",
          "45: :< *DESCRIPTION*",
          "46: |  SEATD_SOCK",
          "47: :  File path",
          "48: :  Informs libseat of the socket location, needed if it differs from `/run/seatd.sock`",
          "49: |  SEATD_LOGLEVEL",
          "50: :  silent, error, info, debug",
          "51: :  Sets the seatd log level. Defaults to \"error\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
          "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: int main(int argc, char *argv[]) {",
          "14:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
          "15:        \"\\n\"",
          "18:        \"\\n\";",
          "20:  int c;",
          "22:   switch (c) {",
          "23:   case 'v':",
          "24:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
          "25:    return 0;",
          "",
          "[Removed Lines]",
          "16:        \"  -h Show this help message\\n\"",
          "17:        \"  -v Show the version number\\n\"",
          "21:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
          "",
          "[Added Lines]",
          "16:        \"  -l <loglevel> Log-level to pass to seatd\\n\"",
          "17:        \"  -h  Show this help message\\n\"",
          "18:        \"  -v  Show the version number\\n\"",
          "22:  char loglevel[16] = \"info\";",
          "23:  while ((c = getopt(argc, argv, \"vhl:\")) != -1) {",
          "25:   case 'l':",
          "26:    strncpy(loglevel, optarg, sizeof loglevel);",
          "27:    loglevel[sizeof loglevel - 1] = '\\0';",
          "28:    break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:   char pipebuf[16] = {0};",
          "61:   snprintf(pipebuf, sizeof pipebuf, \"%d\", readiness_pipe[1]);",
          "72:   execve(SEATD_INSTALLPATH, command, env);",
          "73:   perror(\"Could not start seatd\");",
          "74:   _exit(1);",
          "",
          "[Removed Lines]",
          "63:   char *env[2] = {NULL, NULL};",
          "64:   char loglevelbuf[32] = {0};",
          "65:   char *cur_loglevel = getenv(\"SEATD_LOGLEVEL\");",
          "66:   if (cur_loglevel != NULL) {",
          "67:    snprintf(loglevelbuf, sizeof loglevelbuf, \"SEATD_LOGLEVEL=%s\", cur_loglevel);",
          "68:    env[0] = loglevelbuf;",
          "69:   }",
          "71:   char *command[] = {\"seatd\", \"-n\", pipebuf, \"-s\", sockpath, NULL};",
          "",
          "[Added Lines]",
          "69:   char *env[1] = {NULL};",
          "70:   char *command[] = {\"seatd\", \"-n\", pipebuf, \"-s\", sockpath, \"-l\", loglevel, NULL};",
          "",
          "---------------"
        ],
        "seatd/seatd.c||seatd/seatd.c": [
          "File: seatd/seatd.c -> seatd/seatd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: }",
          "59: int main(int argc, char *argv[]) {",
          "74:  const char *usage = \"Usage: seatd [options]\\n\"",
          "75:        \"\\n\"",
          "76:        \"  -h  Show this help message\\n\"",
          "",
          "[Removed Lines]",
          "60:  char *loglevel = getenv(\"SEATD_LOGLEVEL\");",
          "61:  enum libseat_log_level level = LIBSEAT_LOG_LEVEL_ERROR;",
          "62:  if (loglevel != NULL) {",
          "63:   if (strcmp(loglevel, \"silent\") == 0) {",
          "64:    level = LIBSEAT_LOG_LEVEL_SILENT;",
          "65:   } else if (strcmp(loglevel, \"info\") == 0) {",
          "66:    level = LIBSEAT_LOG_LEVEL_INFO;",
          "67:   } else if (strcmp(loglevel, \"debug\") == 0) {",
          "68:    level = LIBSEAT_LOG_LEVEL_DEBUG;",
          "69:   }",
          "70:  }",
          "71:  log_init();",
          "72:  libseat_set_log_level(level);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:        \"  -u <user> User to own the seatd socket\\n\"",
          "79:        \"  -g <group> Group to own the seatd socket\\n\"",
          "80:        \"  -s <path> Where to create the seatd socket\\n\"",
          "81:        \"  -v  Show the version number\\n\"",
          "82:        \"\\n\";",
          "84:  int c;",
          "85:  int uid = -1, gid = -1;",
          "86:  int readiness = -1;",
          "87:  const char *socket_path = SEATD_DEFAULTPATH;",
          "89:   switch (c) {",
          "90:   case 'n':",
          "91:    readiness = atoi(optarg);",
          "",
          "[Removed Lines]",
          "88:  while ((c = getopt(argc, argv, \"vhn:s:g:u:\")) != -1) {",
          "",
          "[Added Lines]",
          "67:        \"  -l <loglevel> Log-level, one of debug, info, error or silent\\n\"",
          "74:  enum libseat_log_level level = LIBSEAT_LOG_LEVEL_ERROR;",
          "76:  while ((c = getopt(argc, argv, \"vhn:s:g:u:l:\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:    }",
          "118:    break;",
          "119:   }",
          "120:   case 'v':",
          "121:    printf(\"seatd version %s\\n\", SEATD_VERSION);",
          "122:    return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   case 'l':",
          "109:    if (strcmp(optarg, \"debug\") == 0) {",
          "110:     level = LIBSEAT_LOG_LEVEL_DEBUG;",
          "111:    } else if (strcmp(optarg, \"info\") == 0) {",
          "112:     level = LIBSEAT_LOG_LEVEL_INFO;",
          "113:    } else if (strcmp(optarg, \"error\") == 0) {",
          "114:     level = LIBSEAT_LOG_LEVEL_ERROR;",
          "115:    } else if (strcmp(optarg, \"silent\") == 0) {",
          "116:     level = LIBSEAT_LOG_LEVEL_SILENT;",
          "117:    } else {",
          "118:     fprintf(stderr, \"Invalid loglevel: %s\\n\", optarg);",
          "119:     return 1;",
          "120:    }",
          "121:    break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:   }",
          "132:  }",
          "134:  struct stat st;",
          "135:  if (stat(socket_path, &st) == 0) {",
          "136:   if (!S_ISSOCK(st.st_mode)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:  log_init();",
          "137:  libseat_set_log_level(level);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
      "candidate_info": {
        "commit_hash": "7cffe0797fdb17a9c08922339465b1b187394335",
        "repo": "kennylevinsen/seatd",
        "commit_url": "https://github.com/kennylevinsen/seatd/commit/7cffe0797fdb17a9c08922339465b1b187394335",
        "files": [
          "seatd-launch/seatd-launch.c"
        ],
        "message": "seatd-launch: Remove socket path command line arg\n\nThis should not need to be configured, so remove the argument. If\ndownstream prefers a different folder, the location can be made\ncompile-time configurable like for seatd itself.",
        "before_after_code_files": [
          "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ],
          "candidate": [
            "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c"
          ]
        }
      },
      "candidate_diff": {
        "seatd-launch/seatd-launch.c||seatd-launch/seatd-launch.c": [
          "File: seatd-launch/seatd-launch.c -> seatd-launch/seatd-launch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  const char *usage = \"Usage: seatd-launch [options] [--] command\\n\"",
          "17:        \"\\n\"",
          "21:        \"\\n\";",
          "23:  int c;",
          "26:   switch (c) {",
          "30:   case 'v':",
          "31:    printf(\"seatd-launch version %s\\n\", SEATD_VERSION);",
          "32:    return 0;",
          "",
          "[Removed Lines]",
          "18:        \"  -h  Show this help message\\n\"",
          "19:        \"  -s <path> Where to create the seatd socket\\n\"",
          "20:        \"  -v  Show the version number\\n\"",
          "24:  char *sockpath = NULL;",
          "25:  while ((c = getopt(argc, argv, \"vhs:\")) != -1) {",
          "27:   case 's':",
          "28:    sockpath = optarg;",
          "29:    break;",
          "",
          "[Added Lines]",
          "18:        \"  -h Show this help message\\n\"",
          "19:        \"  -v Show the version number\\n\"",
          "23:  while ((c = getopt(argc, argv, \"vh\")) != -1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  }",
          "48:  char **command = &argv[optind];",
          "56:  unlink(sockpath);",
          "",
          "[Removed Lines]",
          "50:  char sockbuf[256];",
          "51:  if (sockpath == NULL) {",
          "52:   sprintf(sockbuf, \"/tmp/seatd.%d.sock\", getpid());",
          "53:   sockpath = sockbuf;",
          "54:  }",
          "",
          "[Added Lines]",
          "45:  char sockpath[256];",
          "46:  sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());",
          "",
          "---------------"
        ]
      }
    }
  ]
}