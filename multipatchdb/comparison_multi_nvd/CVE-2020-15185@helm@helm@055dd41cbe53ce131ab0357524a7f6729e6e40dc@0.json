{
  "cve_id": "CVE-2020-15185",
  "cve_desc": "In Helm before versions 2.16.11 and 3.3.2, a Helm repository can contain duplicates of the same chart, with the last one always used. If a repository is compromised, this lowers the level of access that an attacker needs to inject a bad chart into a repository. To perform this attack, an attacker must have write access to the index file (which can occur during a MITM attack on a non-SSL connection). This issue has been patched in Helm 3.3.2 and 2.16.11. A possible workaround is to manually review the index file in the Helm repository cache before installing software.",
  "repo": "helm/helm",
  "patch_hash": "055dd41cbe53ce131ab0357524a7f6729e6e40dc",
  "patch_info": {
    "commit_hash": "055dd41cbe53ce131ab0357524a7f6729e6e40dc",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/055dd41cbe53ce131ab0357524a7f6729e6e40dc",
    "files": [
      "pkg/downloader/chart_downloader_test.go",
      "pkg/repo/index.go",
      "pkg/repo/index_test.go"
    ],
    "message": "Merge pull request from GHSA-jm56-5h66-w453\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>",
    "before_after_code_files": [
      "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go",
      "pkg/repo/index.go||pkg/repo/index.go",
      "pkg/repo/index_test.go||pkg/repo/index_test.go"
    ]
  },
  "patch_diff": {
    "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go": [
      "File: pkg/downloader/chart_downloader_test.go -> pkg/downloader/chart_downloader_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:    if tt.fail {",
      "72:     continue",
      "73:    }",
      "75:    continue",
      "76:   }",
      "77:   if got := u.String(); got != tt.expect {",
      "",
      "[Removed Lines]",
      "74:    t.Errorf(\"%s: failed with error %s\", tt.name, err)",
      "",
      "[Added Lines]",
      "74:    t.Errorf(\"%s: failed with error %q\", tt.name, err)",
      "",
      "---------------"
    ],
    "pkg/repo/index.go||pkg/repo/index.go": [
      "File: pkg/repo/index.go -> pkg/repo/index.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "228:  Created time.Time `json:\"created,omitempty\"`",
      "229:  Removed bool      `json:\"removed,omitempty\"`",
      "230:  Digest  string    `json:\"digest,omitempty\"`",
      "231: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235:  ChecksumDeprecated string `json:\"checksum,omitempty\"`",
      "239:  EngineDeprecated string `json:\"engine,omitempty\"`",
      "243:  TillerVersionDeprecated string `json:\"tillerVersion,omitempty\"`",
      "247:  URLDeprecated string `json:\"url,omitempty\"`",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "282: func loadIndex(data []byte) (*IndexFile, error) {",
      "283:  i := &IndexFile{}",
      "285:   return i, err",
      "286:  }",
      "287:  i.SortEntries()",
      "",
      "[Removed Lines]",
      "284:  if err := yaml.Unmarshal(data, i); err != nil {",
      "",
      "[Added Lines]",
      "301:  if err := yaml.UnmarshalStrict(data, i); err != nil {",
      "",
      "---------------"
    ],
    "pkg/repo/index_test.go||pkg/repo/index_test.go": [
      "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:  verifyLocalIndex(t, i)",
      "96: }",
      "98: func TestLoadIndexFile(t *testing.T) {",
      "99:  i, err := LoadIndexFile(testfile)",
      "100:  if err != nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98: const indexWithDuplicates = `",
      "99: apiVersion: v1",
      "100: entries:",
      "101:   nginx:",
      "102:     - urls:",
      "103:         - https://kubernetes-charts.storage.googleapis.com/nginx-0.2.0.tgz",
      "104:       name: nginx",
      "105:       description: string",
      "106:       version: 0.2.0",
      "107:       home: https://github.com/something/else",
      "108:       digest: \"sha256:1234567890abcdef\"",
      "109:   nginx:",
      "110:     - urls:",
      "111:         - https://kubernetes-charts.storage.googleapis.com/alpine-1.0.0.tgz",
      "112:         - http://storage2.googleapis.com/kubernetes-charts/alpine-1.0.0.tgz",
      "113:       name: alpine",
      "114:       description: string",
      "115:       version: 1.0.0",
      "116:       home: https://github.com/something",
      "117:       digest: \"sha256:1234567890abcdef\"",
      "118: `",
      "121: func TestLoadIndex_Duplicates(t *testing.T) {",
      "122:  if _, err := loadIndex([]byte(indexWithDuplicates)); err == nil {",
      "123:   t.Errorf(\"Expected an error when duplicate entries are present\")",
      "124:  }",
      "125: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6874a13ad94da0acba1c8e66b2aeb23c3274fccf",
      "candidate_info": {
        "commit_hash": "6874a13ad94da0acba1c8e66b2aeb23c3274fccf",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/6874a13ad94da0acba1c8e66b2aeb23c3274fccf",
        "files": [
          "pkg/downloader/chart_downloader_test.go",
          "pkg/repo/index.go",
          "pkg/repo/index_test.go"
        ],
        "message": "Merge pull request from GHSA-jm56-5h66-w453\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>\n(cherry picked from commit 055dd41cbe53ce131ab0357524a7f6729e6e40dc)",
        "before_after_code_files": [
          "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go",
          "pkg/repo/index.go||pkg/repo/index.go",
          "pkg/repo/index_test.go||pkg/repo/index_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go",
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ],
          "candidate": [
            "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go",
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/downloader/chart_downloader_test.go||pkg/downloader/chart_downloader_test.go": [
          "File: pkg/downloader/chart_downloader_test.go -> pkg/downloader/chart_downloader_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:    if tt.fail {",
          "72:     continue",
          "73:    }",
          "75:    continue",
          "76:   }",
          "77:   if got := u.String(); got != tt.expect {",
          "",
          "[Removed Lines]",
          "74:    t.Errorf(\"%s: failed with error %s\", tt.name, err)",
          "",
          "[Added Lines]",
          "74:    t.Errorf(\"%s: failed with error %q\", tt.name, err)",
          "",
          "---------------"
        ],
        "pkg/repo/index.go||pkg/repo/index.go": [
          "File: pkg/repo/index.go -> pkg/repo/index.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:  Created time.Time `json:\"created,omitempty\"`",
          "229:  Removed bool      `json:\"removed,omitempty\"`",
          "230:  Digest  string    `json:\"digest,omitempty\"`",
          "231: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:  ChecksumDeprecated string `json:\"checksum,omitempty\"`",
          "239:  EngineDeprecated string `json:\"engine,omitempty\"`",
          "243:  TillerVersionDeprecated string `json:\"tillerVersion,omitempty\"`",
          "247:  URLDeprecated string `json:\"url,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282: func loadIndex(data []byte) (*IndexFile, error) {",
          "283:  i := &IndexFile{}",
          "285:   return i, err",
          "286:  }",
          "287:  i.SortEntries()",
          "",
          "[Removed Lines]",
          "284:  if err := yaml.Unmarshal(data, i); err != nil {",
          "",
          "[Added Lines]",
          "301:  if err := yaml.UnmarshalStrict(data, i); err != nil {",
          "",
          "---------------"
        ],
        "pkg/repo/index_test.go||pkg/repo/index_test.go": [
          "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  verifyLocalIndex(t, i)",
          "96: }",
          "98: func TestLoadIndexFile(t *testing.T) {",
          "99:  i, err := LoadIndexFile(testfile)",
          "100:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: const indexWithDuplicates = `",
          "99: apiVersion: v1",
          "100: entries:",
          "101:   nginx:",
          "102:     - urls:",
          "103:         - https://kubernetes-charts.storage.googleapis.com/nginx-0.2.0.tgz",
          "104:       name: nginx",
          "105:       description: string",
          "106:       version: 0.2.0",
          "107:       home: https://github.com/something/else",
          "108:       digest: \"sha256:1234567890abcdef\"",
          "109:   nginx:",
          "110:     - urls:",
          "111:         - https://kubernetes-charts.storage.googleapis.com/alpine-1.0.0.tgz",
          "112:         - http://storage2.googleapis.com/kubernetes-charts/alpine-1.0.0.tgz",
          "113:       name: alpine",
          "114:       description: string",
          "115:       version: 1.0.0",
          "116:       home: https://github.com/something",
          "117:       digest: \"sha256:1234567890abcdef\"",
          "118: `",
          "121: func TestLoadIndex_Duplicates(t *testing.T) {",
          "122:  if _, err := loadIndex([]byte(indexWithDuplicates)); err == nil {",
          "123:   t.Errorf(\"Expected an error when duplicate entries are present\")",
          "124:  }",
          "125: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "657ce552cb6e582976c08cccc9605e42c242084e",
      "candidate_info": {
        "commit_hash": "657ce552cb6e582976c08cccc9605e42c242084e",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/657ce552cb6e582976c08cccc9605e42c242084e",
        "files": [
          "cmd/helm/repo_update.go",
          "cmd/helm/repo_update_test.go",
          "cmd/helm/search_repo.go",
          "cmd/helm/search_repo_test.go",
          "cmd/helm/testdata/helmhome/helm/repository/testing-index.yaml",
          "cmd/helm/testdata/output/search-semver-pre-invalid-release.txt",
          "cmd/helm/testdata/output/search-semver-pre-zero-devel-release.txt",
          "internal/resolver/testdata/repository/kubernetes-charts-index.yaml",
          "pkg/chart/dependency.go",
          "pkg/chart/dependency_test.go",
          "pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go",
          "pkg/chartutil/save_test.go",
          "pkg/downloader/testdata/repository/kubernetes-charts-index.yaml",
          "pkg/downloader/testdata/repository/malformed-index.yaml",
          "pkg/downloader/testdata/repository/testing-basicauth-index.yaml",
          "pkg/downloader/testdata/repository/testing-ca-file-index.yaml",
          "pkg/downloader/testdata/repository/testing-https-index.yaml",
          "pkg/downloader/testdata/repository/testing-index.yaml",
          "pkg/downloader/testdata/repository/testing-querystring-index.yaml",
          "pkg/downloader/testdata/repository/testing-relative-index.yaml",
          "pkg/downloader/testdata/repository/testing-relative-trailing-slash-index.yaml",
          "pkg/plugin/plugin.go",
          "pkg/repo/chartrepo.go",
          "pkg/repo/index.go",
          "pkg/repo/index_test.go",
          "pkg/repo/testdata/chartmuseum-index.yaml",
          "pkg/repo/testdata/local-index-annotations.yaml",
          "pkg/repo/testdata/local-index-unordered.yaml",
          "pkg/repo/testdata/local-index.yaml"
        ],
        "message": "fix(*): Validate metadata semver and printable characters\n\nref: https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx\n\n* Skip invalid chart versions when reading the repository index file or\n  when programmatically adding a chart version.\n* Adds semver validation and strips non-printable characters and\n  normalizes spaces for string fields in Metadata.Validate()\n* Fixes a unit test that was pulling a remote repo.  Now uses a local\n  repo.\n* Fixes ignored error in repo update command\n\nSigned-off-by: Adam Reese <adam@reese.io>",
        "before_after_code_files": [
          "cmd/helm/repo_update.go||cmd/helm/repo_update.go",
          "cmd/helm/repo_update_test.go||cmd/helm/repo_update_test.go",
          "cmd/helm/search_repo.go||cmd/helm/search_repo.go",
          "cmd/helm/search_repo_test.go||cmd/helm/search_repo_test.go",
          "pkg/chart/dependency.go||pkg/chart/dependency.go",
          "pkg/chart/dependency_test.go||pkg/chart/dependency_test.go",
          "pkg/chart/metadata.go||pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go",
          "pkg/chartutil/save_test.go||pkg/chartutil/save_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/repo/chartrepo.go||pkg/repo/chartrepo.go",
          "pkg/repo/index.go||pkg/repo/index.go",
          "pkg/repo/index_test.go||pkg/repo/index_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ],
          "candidate": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/helm/repo_update.go||cmd/helm/repo_update.go": [
          "File: cmd/helm/repo_update.go -> cmd/helm/repo_update.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: func (o *repoUpdateOptions) run(out io.Writer) error {",
          "65:  f, err := repo.LoadFile(o.repoFile)",
          "67:   return errNoRepositories",
          "68:  }",
          "69:  var repos []*repo.ChartRepository",
          "70:  for _, cfg := range f.Repositories {",
          "71:   r, err := repo.NewChartRepository(cfg, getter.All(settings))",
          "",
          "[Removed Lines]",
          "66:  if isNotExist(err) || len(f.Repositories) == 0 {",
          "",
          "[Added Lines]",
          "66:  switch {",
          "67:  case isNotExist(err):",
          "68:   return errNoRepositories",
          "69:  case err != nil:",
          "70:   return errors.Wrapf(err, \"failed loading file: %s\", o.repoFile)",
          "71:  case len(f.Repositories) == 0:",
          "",
          "---------------"
        ],
        "cmd/helm/repo_update_test.go||cmd/helm/repo_update_test.go": [
          "File: cmd/helm/repo_update_test.go -> cmd/helm/repo_update_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"bytes\"",
          "20:  \"fmt\"",
          "21:  \"io\"",
          "22:  \"os\"",
          "23:  \"path/filepath\"",
          "24:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"io/ioutil\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: }",
          "55: func TestUpdateCustomCacheCmd(t *testing.T) {",
          "57:  rootDir := ensure.TempDir(t)",
          "58:  cachePath := filepath.Join(rootDir, \"updcustomcache\")",
          "60:  defer os.RemoveAll(cachePath)",
          "61:  o := &repoUpdateOptions{",
          "62:   update:    updateCharts,",
          "64:   repoCache: cachePath,",
          "65:  }",
          "67:   t.Fatal(err)",
          "68:  }",
          "70:   t.Fatalf(\"error finding created index file in custom cache: %v\", err)",
          "71:  }",
          "72: }",
          "",
          "[Removed Lines]",
          "56:  var out bytes.Buffer",
          "59:  _ = os.Mkdir(cachePath, os.ModePerm)",
          "63:   repoFile:  \"testdata/repositories.yaml\",",
          "66:  if err := o.run(&out); err != nil {",
          "69:  if _, err := os.Stat(filepath.Join(cachePath, \"charts-index.yaml\")); err != nil {",
          "",
          "[Added Lines]",
          "59:  os.Mkdir(cachePath, os.ModePerm)",
          "62:  ts, err := repotest.NewTempServerWithCleanup(t, \"testdata/testserver/*.*\")",
          "63:  if err != nil {",
          "64:   t.Fatal(err)",
          "65:  }",
          "66:  defer ts.Stop()",
          "70:   repoFile:  filepath.Join(ts.Root(), \"repositories.yaml\"),",
          "73:  b := ioutil.Discard",
          "74:  if err := o.run(b); err != nil {",
          "77:  if _, err := os.Stat(filepath.Join(cachePath, \"test-index.yaml\")); err != nil {",
          "",
          "---------------"
        ],
        "cmd/helm/search_repo.go||cmd/helm/search_repo.go": [
          "File: cmd/helm/search_repo.go -> cmd/helm/search_repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: }",
          "145: func (o *searchRepoOptions) applyConstraint(res []*search.Result) ([]*search.Result, error) {",
          "147:   return res, nil",
          "148:  }",
          "",
          "[Removed Lines]",
          "146:  if len(o.version) == 0 {",
          "",
          "[Added Lines]",
          "146:  if o.version == \"\" {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  data := res[:0]",
          "156:  foundNames := map[string]bool{}",
          "163:  for _, r := range res {",
          "165:    continue",
          "166:   }",
          "167:   v, err := semver.NewVersion(r.Chart.Version)",
          "169:   if err != nil {",
          "177:   }",
          "178:  }",
          "",
          "[Removed Lines]",
          "157:  appendSearchResults := func(res *search.Result) {",
          "158:   data = append(data, res)",
          "159:   if !o.versions {",
          "160:    foundNames[res.Name] = true // If user hasn't requested all versions, only show the latest that matches",
          "161:   }",
          "162:  }",
          "164:   if _, found := foundNames[r.Name]; found {",
          "171:    if (err == semver.ErrSegmentStartsZero || err == semver.ErrInvalidPrerelease) && !o.devel {",
          "172:     continue",
          "173:    }",
          "174:    appendSearchResults(r)",
          "175:   } else if constraint.Check(v) {",
          "176:    appendSearchResults(r)",
          "",
          "[Added Lines]",
          "160:   if !o.versions && foundNames[r.Name] {",
          "165:    continue",
          "166:   }",
          "167:   if constraint.Check(v) {",
          "168:    data = append(data, r)",
          "169:    foundNames[r.Name] = true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:   ind, err := repo.LoadIndexFile(f)",
          "195:   if err != nil {",
          "196:    warning(\"Repo %q is corrupt or missing. Try 'helm repo update'.\", n)",
          "197:    continue",
          "198:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:    warning(\"%s\", err)",
          "",
          "---------------"
        ],
        "cmd/helm/search_repo_test.go||cmd/helm/search_repo_test.go": [
          "File: cmd/helm/search_repo_test.go -> cmd/helm/search_repo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   name:   \"search for 'maria', expect valid json output\",",
          "69:   cmd:    \"search repo maria --output json\",",
          "70:   golden: \"output/search-output-json.txt\",",
          "79:  }, {",
          "80:   name:   \"search for 'alpine', expect valid yaml output\",",
          "81:   cmd:    \"search repo alpine --output yaml\",",
          "",
          "[Removed Lines]",
          "71:  }, {",
          "72:   name:   \"search for 'maria', expect one match with semver begin with zero development version\",",
          "73:   cmd:    \"search repo maria --devel\",",
          "74:   golden: \"output/search-semver-pre-zero-devel-release.txt\",",
          "75:  }, {",
          "76:   name:   \"search for 'nginx-ingress', expect one match with invalid development pre version\",",
          "77:   cmd:    \"search repo nginx-ingress --devel\",",
          "78:   golden: \"output/search-semver-pre-invalid-release.txt\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/chart/dependency.go||pkg/chart/dependency.go": [
          "File: pkg/chart/dependency.go -> pkg/chart/dependency.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  Alias string `json:\"alias,omitempty\"`",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: func (d *Dependency) Validate() error {",
          "56:  d.Name = sanitizeString(d.Name)",
          "57:  d.Version = sanitizeString(d.Version)",
          "58:  d.Repository = sanitizeString(d.Repository)",
          "59:  d.Condition = sanitizeString(d.Condition)",
          "60:  for i := range d.Tags {",
          "61:   d.Tags[i] = sanitizeString(d.Tags[i])",
          "62:  }",
          "63:  if d.Alias != \"\" && !aliasNameFormat.MatchString(d.Alias) {",
          "64:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", d.Name)",
          "65:  }",
          "66:  return nil",
          "67: }",
          "",
          "---------------"
        ],
        "pkg/chart/dependency_test.go||pkg/chart/dependency_test.go": [
          "File: pkg/chart/dependency_test.go -> pkg/chart/dependency_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright The Helm Authors.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "16: package chart",
          "18: import (",
          "19:  \"testing\"",
          "20: )",
          "22: func TestValidateDependency(t *testing.T) {",
          "23:  dep := &Dependency{",
          "24:   Name: \"example\",",
          "25:  }",
          "26:  for value, shouldFail := range map[string]bool{",
          "27:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
          "28:   \"-okay\":      false,",
          "29:   \"_okay\":      false,",
          "30:   \"- bad\":      true,",
          "31:   \" bad\":       true,",
          "32:   \"bad\\nvalue\": true,",
          "33:   \"bad \":       true,",
          "34:   \"bad$\":       true,",
          "35:  } {",
          "36:   dep.Alias = value",
          "37:   res := dep.Validate()",
          "38:   if res != nil && !shouldFail {",
          "39:    t.Errorf(\"Failed on case %q\", dep.Alias)",
          "40:   } else if res == nil && shouldFail {",
          "41:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
          "42:   }",
          "43:  }",
          "44: }",
          "",
          "---------------"
        ],
        "pkg/chart/metadata.go||pkg/chart/metadata.go": [
          "File: pkg/chart/metadata.go -> pkg/chart/metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package chart",
          "19: type Maintainer struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import (",
          "19:  \"strings\"",
          "20:  \"unicode\"",
          "22:  \"github.com/Masterminds/semver/v3\"",
          "23: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  URL string `json:\"url,omitempty\"`",
          "26: }",
          "29: type Metadata struct {",
          "31:  Name string `json:\"name,omitempty\"`",
          "33:  Home string `json:\"home,omitempty\"`",
          "35:  Sources []string `json:\"sources,omitempty\"`",
          "37:  Version string `json:\"version,omitempty\"`",
          "39:  Description string `json:\"description,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: func (m *Maintainer) Validate() error {",
          "37:  m.Name = sanitizeString(m.Name)",
          "38:  m.Email = sanitizeString(m.Email)",
          "39:  m.URL = sanitizeString(m.URL)",
          "40:  return nil",
          "41: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:  Type string `json:\"type,omitempty\"`",
          "65: }",
          "68: func (md *Metadata) Validate() error {",
          "69:  if md == nil {",
          "70:   return ValidationError(\"chart.metadata is required\")",
          "71:  }",
          "72:  if md.APIVersion == \"\" {",
          "73:   return ValidationError(\"chart.metadata.apiVersion is required\")",
          "74:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  md.Name = sanitizeString(md.Name)",
          "90:  md.Description = sanitizeString(md.Description)",
          "91:  md.Home = sanitizeString(md.Home)",
          "92:  md.Icon = sanitizeString(md.Icon)",
          "93:  md.Condition = sanitizeString(md.Condition)",
          "94:  md.Tags = sanitizeString(md.Tags)",
          "95:  md.AppVersion = sanitizeString(md.AppVersion)",
          "96:  md.KubeVersion = sanitizeString(md.KubeVersion)",
          "97:  for i := range md.Sources {",
          "98:   md.Sources[i] = sanitizeString(md.Sources[i])",
          "99:  }",
          "100:  for i := range md.Keywords {",
          "101:   md.Keywords[i] = sanitizeString(md.Keywords[i])",
          "102:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:  if md.Version == \"\" {",
          "79:   return ValidationError(\"chart.metadata.version is required\")",
          "80:  }",
          "81:  if !isValidChartType(md.Type) {",
          "82:   return ValidationError(\"chart.metadata.type must be application or library\")",
          "83:  }",
          "87:  for _, dependency := range md.Dependencies {",
          "89:    return err",
          "90:   }",
          "91:  }",
          "94:  return nil",
          "95: }",
          "",
          "[Removed Lines]",
          "88:   if err := validateDependency(dependency); err != nil {",
          "",
          "[Added Lines]",
          "113:  if !isValidSemver(md.Version) {",
          "114:   return ValidationErrorf(\"chart.metadata.version %q is invalid\", md.Version)",
          "115:  }",
          "120:  for _, m := range md.Maintainers {",
          "121:   if err := m.Validate(); err != nil {",
          "122:    return err",
          "123:   }",
          "124:  }",
          "129:   if err := dependency.Validate(); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:  return false",
          "103: }",
          "113: }",
          "",
          "[Removed Lines]",
          "108: func validateDependency(dep *Dependency) error {",
          "109:  if len(dep.Alias) > 0 && !aliasNameFormat.MatchString(dep.Alias) {",
          "110:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", dep.Name)",
          "111:  }",
          "112:  return nil",
          "",
          "[Added Lines]",
          "144: func isValidSemver(v string) bool {",
          "145:  _, err := semver.NewVersion(v)",
          "146:  return err == nil",
          "147: }",
          "150: func sanitizeString(str string) string {",
          "151:  return strings.Map(func(r rune) rune {",
          "152:   if unicode.IsSpace(r) {",
          "153:    return ' '",
          "154:   }",
          "155:   if unicode.IsPrint(r) {",
          "156:    return r",
          "157:   }",
          "158:   return -1",
          "159:  }, str)",
          "",
          "---------------"
        ],
        "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go": [
          "File: pkg/chart/metadata_test.go -> pkg/chart/metadata_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    },",
          "73:    ValidationError(\"dependency \\\"bad\\\" has disallowed characters in the alias\"),",
          "74:   },",
          "75:  }",
          "77:  for _, tt := range tests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   {",
          "76:    &Metadata{APIVersion: \"v2\", Name: \"test\", Version: \"1.2.3.4\"},",
          "77:    ValidationError(\"chart.metadata.version \\\"1.2.3.4\\\" is invalid\"),",
          "78:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  }",
          "83: }",
          "88:  }",
          "106:  }",
          "107: }",
          "",
          "[Removed Lines]",
          "85: func TestValidateDependency(t *testing.T) {",
          "86:  dep := &Dependency{",
          "87:   Name: \"example\",",
          "89:  for value, shouldFail := range map[string]bool{",
          "90:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
          "91:   \"-okay\":      false,",
          "92:   \"_okay\":      false,",
          "93:   \"- bad\":      true,",
          "94:   \" bad\":       true,",
          "95:   \"bad\\nvalue\": true,",
          "96:   \"bad \":       true,",
          "97:   \"bad$\":       true,",
          "98:  } {",
          "99:   dep.Alias = value",
          "100:   res := validateDependency(dep)",
          "101:   if res != nil && !shouldFail {",
          "102:    t.Errorf(\"Failed on case %q\", dep.Alias)",
          "103:   } else if res == nil && shouldFail {",
          "104:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
          "105:   }",
          "",
          "[Added Lines]",
          "89: func TestValidate_sanitize(t *testing.T) {",
          "90:  md := &Metadata{APIVersion: \"v2\", Name: \"test\", Version: \"1.0\", Description: \"\\adescr\\u0081iption\\rtest\", Maintainers: []*Maintainer{{Name: \"\\r\"}}}",
          "91:  if err := md.Validate(); err != nil {",
          "92:   t.Fatalf(\"unexpected error: %s\", err)",
          "94:  if md.Description != \"description test\" {",
          "95:   t.Fatalf(\"description was not sanitized: %q\", md.Description)",
          "96:  }",
          "97:  if md.Maintainers[0].Name != \" \" {",
          "98:   t.Fatal(\"maintainer name was not sanitized\")",
          "",
          "---------------"
        ],
        "pkg/chartutil/save_test.go||pkg/chartutil/save_test.go": [
          "File: pkg/chartutil/save_test.go -> pkg/chartutil/save_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:   Metadata: &chart.Metadata{",
          "140:    APIVersion: chart.APIVersionV1,",
          "141:    Name:       \"ahab\",",
          "143:   },",
          "144:   Values: map[string]interface{}{",
          "145:    \"imageName\": \"testimage\",",
          "",
          "[Removed Lines]",
          "142:    Version:    \"1.2.3.4\",",
          "",
          "[Added Lines]",
          "142:    Version:    \"1.2.3\",",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"regexp\"",
          "24:  \"runtime\"",
          "25:  \"strings\"",
          "27:  \"github.com/pkg/errors\"",
          "28:  \"sigs.k8s.io/yaml\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  \"unicode\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:  if !validPluginName.MatchString(plug.Metadata.Name) {",
          "176:   return fmt.Errorf(\"invalid plugin name at %q\", filepath)",
          "177:  }",
          "179:  return nil",
          "180: }",
          "182: func detectDuplicates(plugs []*Plugin) error {",
          "183:  names := map[string]string{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:  plug.Metadata.Usage = sanitizeString(plug.Metadata.Usage)",
          "186: func sanitizeString(str string) string {",
          "187:  return strings.Map(func(r rune) rune {",
          "188:   if unicode.IsSpace(r) {",
          "189:    return ' '",
          "190:   }",
          "191:   if unicode.IsPrint(r) {",
          "192:    return r",
          "193:   }",
          "194:   return -1",
          "195:  }, str)",
          "196: }",
          "",
          "---------------"
        ],
        "pkg/repo/chartrepo.go||pkg/repo/chartrepo.go": [
          "File: pkg/repo/chartrepo.go -> pkg/repo/chartrepo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:    if strings.Contains(f.Name(), \"-index.yaml\") {",
          "100:     i, err := LoadIndexFile(path)",
          "101:     if err != nil {",
          "103:     }",
          "104:     r.IndexFile = i",
          "105:    } else if strings.HasSuffix(f.Name(), \".tgz\") {",
          "",
          "[Removed Lines]",
          "102:      return nil",
          "",
          "[Added Lines]",
          "104:      return err",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   return \"\", err",
          "138:  }",
          "141:  if err != nil {",
          "142:   return \"\", err",
          "143:  }",
          "",
          "[Removed Lines]",
          "140:  indexFile, err := loadIndex(index)",
          "",
          "[Added Lines]",
          "142:  indexFile, err := loadIndex(index, r.Config.URL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:   }",
          "189:   if !r.IndexFile.Has(ch.Name(), ch.Metadata.Version) {",
          "191:   }",
          "193:  }",
          "",
          "[Removed Lines]",
          "190:    r.IndexFile.Add(ch.Metadata, path, r.Config.URL, digest)",
          "",
          "[Added Lines]",
          "192:    if err := r.IndexFile.MustAdd(ch.Metadata, path, r.Config.URL, digest); err != nil {",
          "193:     return errors.Wrapf(err, \"failed adding to %s to index\", path)",
          "194:    }",
          "",
          "---------------"
        ],
        "pkg/repo/index.go||pkg/repo/index.go": [
          "File: pkg/repo/index.go -> pkg/repo/index.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"io/ioutil\"",
          "22:  \"os\"",
          "23:  \"path\"",
          "24:  \"path/filepath\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"log\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  if err != nil {",
          "106:   return nil, err",
          "107:  }",
          "109: }",
          "114:  u := filename",
          "115:  if baseURL != \"\" {",
          "117:   _, file := filepath.Split(filename)",
          "118:   u, err = urlutil.URLJoin(baseURL, file)",
          "119:   if err != nil {",
          "120:    u = path.Join(baseURL, file)",
          "",
          "[Removed Lines]",
          "108:  return loadIndex(b)",
          "113: func (i IndexFile) Add(md *chart.Metadata, filename, baseURL, digest string) {",
          "116:   var err error",
          "",
          "[Added Lines]",
          "109:  i, err := loadIndex(b, path)",
          "110:  if err != nil {",
          "111:   return nil, errors.Wrapf(err, \"error loading %s\", path)",
          "112:  }",
          "113:  return i, nil",
          "118: func (i IndexFile) MustAdd(md *chart.Metadata, filename, baseURL, digest string) error {",
          "119:  if md.APIVersion == \"\" {",
          "120:   md.APIVersion = chart.APIVersionV1",
          "121:  }",
          "122:  if err := md.Validate(); err != nil {",
          "123:   return errors.Wrapf(err, \"validate failed for %s\", filename)",
          "124:  }",
          "129:   var err error",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   Digest:   digest,",
          "127:   Created:  time.Now(),",
          "128:  }",
          "133:  }",
          "134: }",
          "",
          "[Removed Lines]",
          "129:  if ee, ok := i.Entries[md.Name]; !ok {",
          "130:   i.Entries[md.Name] = ChartVersions{cr}",
          "131:  } else {",
          "132:   i.Entries[md.Name] = append(ee, cr)",
          "",
          "[Added Lines]",
          "141:  ee := i.Entries[md.Name]",
          "142:  i.Entries[md.Name] = append(ee, cr)",
          "143:  return nil",
          "144: }",
          "149: func (i IndexFile) Add(md *chart.Metadata, filename, baseURL, digest string) {",
          "150:  if err := i.MustAdd(md, filename, baseURL, digest); err != nil {",
          "151:   log.Printf(\"skipping loading invalid entry for chart %q %q from %s: %s\", md.Name, md.Version, filename, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:   if err != nil {",
          "295:    return index, err",
          "296:   }",
          "298:  }",
          "299:  return index, nil",
          "300: }",
          "306:  i := &IndexFile{}",
          "307:  if err := yaml.UnmarshalStrict(data, i); err != nil {",
          "308:   return i, err",
          "309:  }",
          "310:  i.SortEntries()",
          "311:  if i.APIVersion == \"\" {",
          "312:   return i, ErrNoAPIVersion",
          "",
          "[Removed Lines]",
          "297:   index.Add(c.Metadata, fname, parentURL, hash)",
          "305: func loadIndex(data []byte) (*IndexFile, error) {",
          "",
          "[Added Lines]",
          "316:   if err := index.MustAdd(c.Metadata, fname, parentURL, hash); err != nil {",
          "317:    return index, errors.Wrapf(err, \"failed adding to %s to index\", fname)",
          "318:   }",
          "327: func loadIndex(data []byte, source string) (*IndexFile, error) {",
          "333:  for name, cvs := range i.Entries {",
          "334:   for idx := len(cvs) - 1; idx >= 0; idx-- {",
          "335:    if cvs[idx].APIVersion == \"\" {",
          "336:     cvs[idx].APIVersion = chart.APIVersionV1",
          "337:    }",
          "338:    if err := cvs[idx].Validate(); err != nil {",
          "339:     log.Printf(\"skipping loading invalid entry for chart %q %q from %s: %s\", name, cvs[idx].Version, source, err)",
          "340:     cvs = append(cvs[:idx], cvs[idx+1:]...)",
          "341:    }",
          "342:   }",
          "343:  }",
          "",
          "---------------"
        ],
        "pkg/repo/index_test.go||pkg/repo/index_test.go": [
          "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  \"strings\"",
          "28:  \"testing\"",
          "30:  \"helm.sh/helm/v3/pkg/cli\"",
          "31:  \"helm.sh/helm/v3/pkg/getter\"",
          "32:  \"helm.sh/helm/v3/pkg/helmpath\"",
          "35: )",
          "37: const (",
          "",
          "[Removed Lines]",
          "34:  \"helm.sh/helm/v3/pkg/chart\"",
          "",
          "[Added Lines]",
          "30:  \"helm.sh/helm/v3/pkg/chart\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: func TestIndexFile(t *testing.T) {",
          "67:  i := NewIndexFile()",
          "75:  i.SortEntries()",
          "",
          "[Removed Lines]",
          "68:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "69:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.1.1\"}, \"cutter-0.1.1.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "70:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.1.0\"}, \"cutter-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "71:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.2.0\"}, \"cutter-0.2.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "72:  i.Add(&chart.Metadata{Name: \"setter\", Version: \"0.1.9+alpha\"}, \"setter-0.1.9+alpha.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "73:  i.Add(&chart.Metadata{Name: \"setter\", Version: \"0.1.9+beta\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "",
          "[Added Lines]",
          "67:  for _, x := range []struct {",
          "68:   md       *chart.Metadata",
          "69:   filename string",
          "70:   baseURL  string",
          "71:   digest   string",
          "72:  }{",
          "73:   {&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "74:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.1.1\"}, \"cutter-0.1.1.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "75:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.1.0\"}, \"cutter-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "76:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.2.0\"}, \"cutter-0.2.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "77:   {&chart.Metadata{APIVersion: \"v2\", Name: \"setter\", Version: \"0.1.9+alpha\"}, \"setter-0.1.9+alpha.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "78:   {&chart.Metadata{APIVersion: \"v2\", Name: \"setter\", Version: \"0.1.9+beta\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "79:  } {",
          "80:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "81:    t.Errorf(\"unexpected error adding to index: %s\", err)",
          "82:   }",
          "83:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   tc := tc",
          "127:   t.Run(tc.Name, func(t *testing.T) {",
          "128:    t.Parallel()",
          "134:    if err != nil {",
          "135:     t.Fatal(err)",
          "136:    }",
          "",
          "[Removed Lines]",
          "129:    b, err := ioutil.ReadFile(tc.Filename)",
          "130:    if err != nil {",
          "131:     t.Fatal(err)",
          "132:    }",
          "133:    i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "139:    i, err := LoadIndexFile(tc.Filename)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: func TestLoadIndex_Duplicates(t *testing.T) {",
          "145:   t.Errorf(\"Expected an error when duplicate entries are present\")",
          "146:  }",
          "147: }",
          "157: func TestLoadIndexFileAnnotations(t *testing.T) {",
          "158:  i, err := LoadIndexFile(annotationstestfile)",
          "159:  if err != nil {",
          "",
          "[Removed Lines]",
          "144:  if _, err := loadIndex([]byte(indexWithDuplicates)); err == nil {",
          "149: func TestLoadIndexFile(t *testing.T) {",
          "150:  i, err := LoadIndexFile(testfile)",
          "151:  if err != nil {",
          "152:   t.Fatal(err)",
          "153:  }",
          "154:  verifyLocalIndex(t, i)",
          "155: }",
          "",
          "[Added Lines]",
          "150:  if _, err := loadIndex([]byte(indexWithDuplicates), \"indexWithDuplicates\"); err == nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170: }",
          "172: func TestLoadUnorderedIndex(t *testing.T) {",
          "178:  if err != nil {",
          "179:   t.Fatal(err)",
          "180:  }",
          "",
          "[Removed Lines]",
          "173:  b, err := ioutil.ReadFile(unorderedTestfile)",
          "174:  if err != nil {",
          "175:   t.Fatal(err)",
          "176:  }",
          "177:  i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "171:  i, err := LoadIndexFile(unorderedTestfile)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184: func TestMerge(t *testing.T) {",
          "185:  ind1 := NewIndexFile()",
          "191:  ind2 := NewIndexFile()",
          "201:  ind1.Merge(ind2)",
          "",
          "[Removed Lines]",
          "186:  ind1.Add(&chart.Metadata{",
          "187:   Name:    \"dreadnought\",",
          "188:   Version: \"0.1.0\",",
          "189:  }, \"dreadnought-0.1.0.tgz\", \"http://example.com\", \"aaaa\")",
          "192:  ind2.Add(&chart.Metadata{",
          "193:   Name:    \"dreadnought\",",
          "194:   Version: \"0.2.0\",",
          "195:  }, \"dreadnought-0.2.0.tgz\", \"http://example.com\", \"aaaabbbb\")",
          "196:  ind2.Add(&chart.Metadata{",
          "197:   Name:    \"doughnut\",",
          "198:   Version: \"0.2.0\",",
          "199:  }, \"doughnut-0.2.0.tgz\", \"http://example.com\", \"ccccbbbb\")",
          "",
          "[Added Lines]",
          "181:  if err := ind1.MustAdd(&chart.Metadata{APIVersion: \"v2\", Name: \"dreadnought\", Version: \"0.1.0\"}, \"dreadnought-0.1.0.tgz\", \"http://example.com\", \"aaaa\"); err != nil {",
          "182:   t.Fatalf(\"unexpected error: %s\", err)",
          "183:  }",
          "187:  for _, x := range []struct {",
          "188:   md       *chart.Metadata",
          "189:   filename string",
          "190:   baseURL  string",
          "191:   digest   string",
          "192:  }{",
          "193:   {&chart.Metadata{APIVersion: \"v2\", Name: \"dreadnought\", Version: \"0.2.0\"}, \"dreadnought-0.2.0.tgz\", \"http://example.com\", \"aaaabbbb\"},",
          "194:   {&chart.Metadata{APIVersion: \"v2\", Name: \"doughnut\", Version: \"0.2.0\"}, \"doughnut-0.2.0.tgz\", \"http://example.com\", \"ccccbbbb\"},",
          "195:  } {",
          "196:   if err := ind2.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "197:    t.Errorf(\"unexpected error: %s\", err)",
          "198:   }",
          "199:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239:    t.Fatalf(\"error finding created index file: %#v\", err)",
          "240:   }",
          "248:   if err != nil {",
          "249:    t.Fatalf(\"Index %q failed to parse: %s\", testfile, err)",
          "250:   }",
          "",
          "[Removed Lines]",
          "242:   b, err := ioutil.ReadFile(idx)",
          "243:   if err != nil {",
          "244:    t.Fatalf(\"error reading index file: %#v\", err)",
          "245:   }",
          "247:   i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "242:   i, err := LoadIndexFile(idx)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:    t.Fatalf(\"error finding created charts file: %#v\", err)",
          "257:   }",
          "260:   if err != nil {",
          "261:    t.Fatalf(\"error reading charts file: %#v\", err)",
          "262:   }",
          "",
          "[Removed Lines]",
          "259:   b, err = ioutil.ReadFile(idx)",
          "",
          "[Added Lines]",
          "254:   b, err := ioutil.ReadFile(idx)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "297:    t.Fatalf(\"error finding created index file: %#v\", err)",
          "298:   }",
          "306:   if err != nil {",
          "307:    t.Fatalf(\"Index %q failed to parse: %s\", testfile, err)",
          "308:   }",
          "",
          "[Removed Lines]",
          "300:   b, err := ioutil.ReadFile(idx)",
          "301:   if err != nil {",
          "302:    t.Fatalf(\"error reading index file: %#v\", err)",
          "303:   }",
          "305:   i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "295:   i, err := LoadIndexFile(idx)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "314:    t.Fatalf(\"error finding created charts file: %#v\", err)",
          "315:   }",
          "318:   if err != nil {",
          "319:    t.Fatalf(\"error reading charts file: %#v\", err)",
          "320:   }",
          "",
          "[Removed Lines]",
          "317:   b, err = ioutil.ReadFile(idx)",
          "",
          "[Added Lines]",
          "307:   b, err := ioutil.ReadFile(idx)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "345:  expects := []*ChartVersion{",
          "346:   {",
          "347:    Metadata: &chart.Metadata{",
          "348:     Name:        \"alpine\",",
          "349:     Description: \"string\",",
          "350:     Version:     \"1.0.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:   },",
          "360:   {",
          "361:    Metadata: &chart.Metadata{",
          "362:     Name:        \"nginx\",",
          "363:     Description: \"string\",",
          "364:     Version:     \"0.2.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "372:   },",
          "373:   {",
          "374:    Metadata: &chart.Metadata{",
          "375:     Name:        \"nginx\",",
          "376:     Description: \"string\",",
          "377:     Version:     \"0.1.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "477: func TestIndexAdd(t *testing.T) {",
          "478:  i := NewIndexFile()",
          "481:  if i.Entries[\"clipper\"][0].URLs[0] != \"http://example.com/charts/clipper-0.1.0.tgz\" {",
          "482:   t.Errorf(\"Expected http://example.com/charts/clipper-0.1.0.tgz, got %s\", i.Entries[\"clipper\"][0].URLs[0])",
          "483:  }",
          "487:  if i.Entries[\"alpine\"][0].URLs[0] != \"http://example.com/charts/alpine-0.1.0.tgz\" {",
          "488:   t.Errorf(\"Expected http://example.com/charts/alpine-0.1.0.tgz, got %s\", i.Entries[\"alpine\"][0].URLs[0])",
          "489:  }",
          "493:  if i.Entries[\"deis\"][0].URLs[0] != \"http://example.com/charts/deis-0.1.0.tgz\" {",
          "494:   t.Errorf(\"Expected http://example.com/charts/deis-0.1.0.tgz, got %s\", i.Entries[\"deis\"][0].URLs[0])",
          "495:  }",
          "496: }",
          "498: func TestIndexWrite(t *testing.T) {",
          "499:  i := NewIndexFile()",
          "501:  dir, err := ioutil.TempDir(\"\", \"helm-tmp\")",
          "502:  if err != nil {",
          "503:   t.Fatal(err)",
          "",
          "[Removed Lines]",
          "479:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "485:  i.Add(&chart.Metadata{Name: \"alpine\", Version: \"0.1.0\"}, \"/home/charts/alpine-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "491:  i.Add(&chart.Metadata{Name: \"deis\", Version: \"0.1.0\"}, \"/home/charts/deis-0.1.0.tgz\", \"http://example.com/charts/\", \"sha256:1234567890\")",
          "500:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "",
          "[Added Lines]",
          "473:  for _, x := range []struct {",
          "474:   md       *chart.Metadata",
          "475:   filename string",
          "476:   baseURL  string",
          "477:   digest   string",
          "478:  }{",
          "480:   {&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "481:   {&chart.Metadata{APIVersion: \"v2\", Name: \"alpine\", Version: \"0.1.0\"}, \"/home/charts/alpine-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "482:   {&chart.Metadata{APIVersion: \"v2\", Name: \"deis\", Version: \"0.1.0\"}, \"/home/charts/deis-0.1.0.tgz\", \"http://example.com/charts/\", \"sha256:1234567890\"},",
          "483:  } {",
          "484:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "485:    t.Errorf(\"unexpected error adding to index: %s\", err)",
          "486:   }",
          "487:  }",
          "500:  if err := i.MustAdd(&chart.Metadata{}, \"error-0.1.0.tgz\", \"\", \"\"); err == nil {",
          "501:   t.Fatal(\"expected error adding to index\")",
          "502:  }",
          "507:  if err := i.MustAdd(&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"); err != nil {",
          "508:   t.Fatalf(\"unexpected error: %s\", err)",
          "509:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bf5c280d56e0043bf1870f84d63e82d5c5d4230",
      "candidate_info": {
        "commit_hash": "2bf5c280d56e0043bf1870f84d63e82d5c5d4230",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/2bf5c280d56e0043bf1870f84d63e82d5c5d4230",
        "files": [
          "cmd/helm/repo_update.go",
          "cmd/helm/repo_update_test.go",
          "cmd/helm/search_repo.go",
          "cmd/helm/search_repo_test.go",
          "cmd/helm/testdata/helmhome/helm/repository/testing-index.yaml",
          "cmd/helm/testdata/output/search-semver-pre-invalid-release.txt",
          "cmd/helm/testdata/output/search-semver-pre-zero-devel-release.txt",
          "internal/resolver/testdata/repository/kubernetes-charts-index.yaml",
          "pkg/chart/dependency.go",
          "pkg/chart/dependency_test.go",
          "pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go",
          "pkg/chartutil/save_test.go",
          "pkg/downloader/testdata/repository/kubernetes-charts-index.yaml",
          "pkg/downloader/testdata/repository/malformed-index.yaml",
          "pkg/downloader/testdata/repository/testing-basicauth-index.yaml",
          "pkg/downloader/testdata/repository/testing-ca-file-index.yaml",
          "pkg/downloader/testdata/repository/testing-https-index.yaml",
          "pkg/downloader/testdata/repository/testing-index.yaml",
          "pkg/downloader/testdata/repository/testing-querystring-index.yaml",
          "pkg/downloader/testdata/repository/testing-relative-index.yaml",
          "pkg/downloader/testdata/repository/testing-relative-trailing-slash-index.yaml",
          "pkg/plugin/plugin.go",
          "pkg/repo/chartrepo.go",
          "pkg/repo/index.go",
          "pkg/repo/index_test.go",
          "pkg/repo/testdata/chartmuseum-index.yaml",
          "pkg/repo/testdata/local-index-annotations.yaml",
          "pkg/repo/testdata/local-index-unordered.yaml",
          "pkg/repo/testdata/local-index.yaml"
        ],
        "message": "fix(*): Validate metadata semver and printable characters\n\nref: https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx\n\n* Skip invalid chart versions when reading the repository index file or\n  when programmatically adding a chart version.\n* Adds semver validation and strips non-printable characters and\n  normalizes spaces for string fields in Metadata.Validate()\n* Fixes a unit test that was pulling a remote repo.  Now uses a local\n  repo.\n* Fixes ignored error in repo update command\n\nSigned-off-by: Adam Reese <adam@reese.io>\n(cherry picked from commit 657ce552cb6e582976c08cccc9605e42c242084e)",
        "before_after_code_files": [
          "cmd/helm/repo_update.go||cmd/helm/repo_update.go",
          "cmd/helm/repo_update_test.go||cmd/helm/repo_update_test.go",
          "cmd/helm/search_repo.go||cmd/helm/search_repo.go",
          "cmd/helm/search_repo_test.go||cmd/helm/search_repo_test.go",
          "pkg/chart/dependency.go||pkg/chart/dependency.go",
          "pkg/chart/dependency_test.go||pkg/chart/dependency_test.go",
          "pkg/chart/metadata.go||pkg/chart/metadata.go",
          "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go",
          "pkg/chartutil/save_test.go||pkg/chartutil/save_test.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/repo/chartrepo.go||pkg/repo/chartrepo.go",
          "pkg/repo/index.go||pkg/repo/index.go",
          "pkg/repo/index_test.go||pkg/repo/index_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ],
          "candidate": [
            "pkg/repo/index.go||pkg/repo/index.go",
            "pkg/repo/index_test.go||pkg/repo/index_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/helm/repo_update.go||cmd/helm/repo_update.go": [
          "File: cmd/helm/repo_update.go -> cmd/helm/repo_update.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: func (o *repoUpdateOptions) run(out io.Writer) error {",
          "65:  f, err := repo.LoadFile(o.repoFile)",
          "67:   return errNoRepositories",
          "68:  }",
          "69:  var repos []*repo.ChartRepository",
          "70:  for _, cfg := range f.Repositories {",
          "71:   r, err := repo.NewChartRepository(cfg, getter.All(settings))",
          "",
          "[Removed Lines]",
          "66:  if isNotExist(err) || len(f.Repositories) == 0 {",
          "",
          "[Added Lines]",
          "66:  switch {",
          "67:  case isNotExist(err):",
          "68:   return errNoRepositories",
          "69:  case err != nil:",
          "70:   return errors.Wrapf(err, \"failed loading file: %s\", o.repoFile)",
          "71:  case len(f.Repositories) == 0:",
          "",
          "---------------"
        ],
        "cmd/helm/repo_update_test.go||cmd/helm/repo_update_test.go": [
          "File: cmd/helm/repo_update_test.go -> cmd/helm/repo_update_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"bytes\"",
          "20:  \"fmt\"",
          "21:  \"io\"",
          "22:  \"os\"",
          "23:  \"path/filepath\"",
          "24:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"io/ioutil\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: }",
          "55: func TestUpdateCustomCacheCmd(t *testing.T) {",
          "57:  rootDir := ensure.TempDir(t)",
          "58:  cachePath := filepath.Join(rootDir, \"updcustomcache\")",
          "60:  defer os.RemoveAll(cachePath)",
          "61:  o := &repoUpdateOptions{",
          "62:   update:    updateCharts,",
          "64:   repoCache: cachePath,",
          "65:  }",
          "67:   t.Fatal(err)",
          "68:  }",
          "70:   t.Fatalf(\"error finding created index file in custom cache: %v\", err)",
          "71:  }",
          "72: }",
          "",
          "[Removed Lines]",
          "56:  var out bytes.Buffer",
          "59:  _ = os.Mkdir(cachePath, os.ModePerm)",
          "63:   repoFile:  \"testdata/repositories.yaml\",",
          "66:  if err := o.run(&out); err != nil {",
          "69:  if _, err := os.Stat(filepath.Join(cachePath, \"charts-index.yaml\")); err != nil {",
          "",
          "[Added Lines]",
          "59:  os.Mkdir(cachePath, os.ModePerm)",
          "62:  ts, err := repotest.NewTempServerWithCleanup(t, \"testdata/testserver/*.*\")",
          "63:  if err != nil {",
          "64:   t.Fatal(err)",
          "65:  }",
          "66:  defer ts.Stop()",
          "70:   repoFile:  filepath.Join(ts.Root(), \"repositories.yaml\"),",
          "73:  b := ioutil.Discard",
          "74:  if err := o.run(b); err != nil {",
          "77:  if _, err := os.Stat(filepath.Join(cachePath, \"test-index.yaml\")); err != nil {",
          "",
          "---------------"
        ],
        "cmd/helm/search_repo.go||cmd/helm/search_repo.go": [
          "File: cmd/helm/search_repo.go -> cmd/helm/search_repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: }",
          "145: func (o *searchRepoOptions) applyConstraint(res []*search.Result) ([]*search.Result, error) {",
          "147:   return res, nil",
          "148:  }",
          "",
          "[Removed Lines]",
          "146:  if len(o.version) == 0 {",
          "",
          "[Added Lines]",
          "146:  if o.version == \"\" {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  data := res[:0]",
          "156:  foundNames := map[string]bool{}",
          "163:  for _, r := range res {",
          "165:    continue",
          "166:   }",
          "167:   v, err := semver.NewVersion(r.Chart.Version)",
          "169:   if err != nil {",
          "177:   }",
          "178:  }",
          "",
          "[Removed Lines]",
          "157:  appendSearchResults := func(res *search.Result) {",
          "158:   data = append(data, res)",
          "159:   if !o.versions {",
          "160:    foundNames[res.Name] = true // If user hasn't requested all versions, only show the latest that matches",
          "161:   }",
          "162:  }",
          "164:   if _, found := foundNames[r.Name]; found {",
          "171:    if (err == semver.ErrSegmentStartsZero || err == semver.ErrInvalidPrerelease) && !o.devel {",
          "172:     continue",
          "173:    }",
          "174:    appendSearchResults(r)",
          "175:   } else if constraint.Check(v) {",
          "176:    appendSearchResults(r)",
          "",
          "[Added Lines]",
          "160:   if !o.versions && foundNames[r.Name] {",
          "165:    continue",
          "166:   }",
          "167:   if constraint.Check(v) {",
          "168:    data = append(data, r)",
          "169:    foundNames[r.Name] = true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:   ind, err := repo.LoadIndexFile(f)",
          "195:   if err != nil {",
          "196:    warning(\"Repo %q is corrupt or missing. Try 'helm repo update'.\", n)",
          "197:    continue",
          "198:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:    warning(\"%s\", err)",
          "",
          "---------------"
        ],
        "cmd/helm/search_repo_test.go||cmd/helm/search_repo_test.go": [
          "File: cmd/helm/search_repo_test.go -> cmd/helm/search_repo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   name:   \"search for 'maria', expect valid json output\",",
          "69:   cmd:    \"search repo maria --output json\",",
          "70:   golden: \"output/search-output-json.txt\",",
          "79:  }, {",
          "80:   name:   \"search for 'alpine', expect valid yaml output\",",
          "81:   cmd:    \"search repo alpine --output yaml\",",
          "",
          "[Removed Lines]",
          "71:  }, {",
          "72:   name:   \"search for 'maria', expect one match with semver begin with zero development version\",",
          "73:   cmd:    \"search repo maria --devel\",",
          "74:   golden: \"output/search-semver-pre-zero-devel-release.txt\",",
          "75:  }, {",
          "76:   name:   \"search for 'nginx-ingress', expect one match with invalid development pre version\",",
          "77:   cmd:    \"search repo nginx-ingress --devel\",",
          "78:   golden: \"output/search-semver-pre-invalid-release.txt\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/chart/dependency.go||pkg/chart/dependency.go": [
          "File: pkg/chart/dependency.go -> pkg/chart/dependency.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  Alias string `json:\"alias,omitempty\"`",
          "50: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: func (d *Dependency) Validate() error {",
          "56:  d.Name = sanitizeString(d.Name)",
          "57:  d.Version = sanitizeString(d.Version)",
          "58:  d.Repository = sanitizeString(d.Repository)",
          "59:  d.Condition = sanitizeString(d.Condition)",
          "60:  for i := range d.Tags {",
          "61:   d.Tags[i] = sanitizeString(d.Tags[i])",
          "62:  }",
          "63:  if d.Alias != \"\" && !aliasNameFormat.MatchString(d.Alias) {",
          "64:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", d.Name)",
          "65:  }",
          "66:  return nil",
          "67: }",
          "",
          "---------------"
        ],
        "pkg/chart/dependency_test.go||pkg/chart/dependency_test.go": [
          "File: pkg/chart/dependency_test.go -> pkg/chart/dependency_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright The Helm Authors.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "16: package chart",
          "18: import (",
          "19:  \"testing\"",
          "20: )",
          "22: func TestValidateDependency(t *testing.T) {",
          "23:  dep := &Dependency{",
          "24:   Name: \"example\",",
          "25:  }",
          "26:  for value, shouldFail := range map[string]bool{",
          "27:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
          "28:   \"-okay\":      false,",
          "29:   \"_okay\":      false,",
          "30:   \"- bad\":      true,",
          "31:   \" bad\":       true,",
          "32:   \"bad\\nvalue\": true,",
          "33:   \"bad \":       true,",
          "34:   \"bad$\":       true,",
          "35:  } {",
          "36:   dep.Alias = value",
          "37:   res := dep.Validate()",
          "38:   if res != nil && !shouldFail {",
          "39:    t.Errorf(\"Failed on case %q\", dep.Alias)",
          "40:   } else if res == nil && shouldFail {",
          "41:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
          "42:   }",
          "43:  }",
          "44: }",
          "",
          "---------------"
        ],
        "pkg/chart/metadata.go||pkg/chart/metadata.go": [
          "File: pkg/chart/metadata.go -> pkg/chart/metadata.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package chart",
          "19: type Maintainer struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import (",
          "19:  \"strings\"",
          "20:  \"unicode\"",
          "22:  \"github.com/Masterminds/semver/v3\"",
          "23: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  URL string `json:\"url,omitempty\"`",
          "26: }",
          "29: type Metadata struct {",
          "31:  Name string `json:\"name,omitempty\"`",
          "33:  Home string `json:\"home,omitempty\"`",
          "35:  Sources []string `json:\"sources,omitempty\"`",
          "37:  Version string `json:\"version,omitempty\"`",
          "39:  Description string `json:\"description,omitempty\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: func (m *Maintainer) Validate() error {",
          "37:  m.Name = sanitizeString(m.Name)",
          "38:  m.Email = sanitizeString(m.Email)",
          "39:  m.URL = sanitizeString(m.URL)",
          "40:  return nil",
          "41: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:  Type string `json:\"type,omitempty\"`",
          "65: }",
          "68: func (md *Metadata) Validate() error {",
          "69:  if md == nil {",
          "70:   return ValidationError(\"chart.metadata is required\")",
          "71:  }",
          "72:  if md.APIVersion == \"\" {",
          "73:   return ValidationError(\"chart.metadata.apiVersion is required\")",
          "74:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  md.Name = sanitizeString(md.Name)",
          "90:  md.Description = sanitizeString(md.Description)",
          "91:  md.Home = sanitizeString(md.Home)",
          "92:  md.Icon = sanitizeString(md.Icon)",
          "93:  md.Condition = sanitizeString(md.Condition)",
          "94:  md.Tags = sanitizeString(md.Tags)",
          "95:  md.AppVersion = sanitizeString(md.AppVersion)",
          "96:  md.KubeVersion = sanitizeString(md.KubeVersion)",
          "97:  for i := range md.Sources {",
          "98:   md.Sources[i] = sanitizeString(md.Sources[i])",
          "99:  }",
          "100:  for i := range md.Keywords {",
          "101:   md.Keywords[i] = sanitizeString(md.Keywords[i])",
          "102:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:  if md.Version == \"\" {",
          "79:   return ValidationError(\"chart.metadata.version is required\")",
          "80:  }",
          "81:  if !isValidChartType(md.Type) {",
          "82:   return ValidationError(\"chart.metadata.type must be application or library\")",
          "83:  }",
          "87:  for _, dependency := range md.Dependencies {",
          "89:    return err",
          "90:   }",
          "91:  }",
          "94:  return nil",
          "95: }",
          "",
          "[Removed Lines]",
          "88:   if err := validateDependency(dependency); err != nil {",
          "",
          "[Added Lines]",
          "113:  if !isValidSemver(md.Version) {",
          "114:   return ValidationErrorf(\"chart.metadata.version %q is invalid\", md.Version)",
          "115:  }",
          "120:  for _, m := range md.Maintainers {",
          "121:   if err := m.Validate(); err != nil {",
          "122:    return err",
          "123:   }",
          "124:  }",
          "129:   if err := dependency.Validate(); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:  return false",
          "103: }",
          "113: }",
          "",
          "[Removed Lines]",
          "108: func validateDependency(dep *Dependency) error {",
          "109:  if len(dep.Alias) > 0 && !aliasNameFormat.MatchString(dep.Alias) {",
          "110:   return ValidationErrorf(\"dependency %q has disallowed characters in the alias\", dep.Name)",
          "111:  }",
          "112:  return nil",
          "",
          "[Added Lines]",
          "144: func isValidSemver(v string) bool {",
          "145:  _, err := semver.NewVersion(v)",
          "146:  return err == nil",
          "147: }",
          "150: func sanitizeString(str string) string {",
          "151:  return strings.Map(func(r rune) rune {",
          "152:   if unicode.IsSpace(r) {",
          "153:    return ' '",
          "154:   }",
          "155:   if unicode.IsPrint(r) {",
          "156:    return r",
          "157:   }",
          "158:   return -1",
          "159:  }, str)",
          "",
          "---------------"
        ],
        "pkg/chart/metadata_test.go||pkg/chart/metadata_test.go": [
          "File: pkg/chart/metadata_test.go -> pkg/chart/metadata_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    },",
          "73:    ValidationError(\"dependency \\\"bad\\\" has disallowed characters in the alias\"),",
          "74:   },",
          "75:  }",
          "77:  for _, tt := range tests {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:   {",
          "76:    &Metadata{APIVersion: \"v2\", Name: \"test\", Version: \"1.2.3.4\"},",
          "77:    ValidationError(\"chart.metadata.version \\\"1.2.3.4\\\" is invalid\"),",
          "78:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  }",
          "83: }",
          "88:  }",
          "106:  }",
          "107: }",
          "",
          "[Removed Lines]",
          "85: func TestValidateDependency(t *testing.T) {",
          "86:  dep := &Dependency{",
          "87:   Name: \"example\",",
          "89:  for value, shouldFail := range map[string]bool{",
          "90:   \"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,",
          "91:   \"-okay\":      false,",
          "92:   \"_okay\":      false,",
          "93:   \"- bad\":      true,",
          "94:   \" bad\":       true,",
          "95:   \"bad\\nvalue\": true,",
          "96:   \"bad \":       true,",
          "97:   \"bad$\":       true,",
          "98:  } {",
          "99:   dep.Alias = value",
          "100:   res := validateDependency(dep)",
          "101:   if res != nil && !shouldFail {",
          "102:    t.Errorf(\"Failed on case %q\", dep.Alias)",
          "103:   } else if res == nil && shouldFail {",
          "104:    t.Errorf(\"Expected failure for %q\", dep.Alias)",
          "105:   }",
          "",
          "[Added Lines]",
          "89: func TestValidate_sanitize(t *testing.T) {",
          "90:  md := &Metadata{APIVersion: \"v2\", Name: \"test\", Version: \"1.0\", Description: \"\\adescr\\u0081iption\\rtest\", Maintainers: []*Maintainer{{Name: \"\\r\"}}}",
          "91:  if err := md.Validate(); err != nil {",
          "92:   t.Fatalf(\"unexpected error: %s\", err)",
          "94:  if md.Description != \"description test\" {",
          "95:   t.Fatalf(\"description was not sanitized: %q\", md.Description)",
          "96:  }",
          "97:  if md.Maintainers[0].Name != \" \" {",
          "98:   t.Fatal(\"maintainer name was not sanitized\")",
          "",
          "---------------"
        ],
        "pkg/chartutil/save_test.go||pkg/chartutil/save_test.go": [
          "File: pkg/chartutil/save_test.go -> pkg/chartutil/save_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:   Metadata: &chart.Metadata{",
          "140:    APIVersion: chart.APIVersionV1,",
          "141:    Name:       \"ahab\",",
          "143:   },",
          "144:   Values: map[string]interface{}{",
          "145:    \"imageName\": \"testimage\",",
          "",
          "[Removed Lines]",
          "142:    Version:    \"1.2.3.4\",",
          "",
          "[Added Lines]",
          "142:    Version:    \"1.2.3\",",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"regexp\"",
          "24:  \"runtime\"",
          "25:  \"strings\"",
          "27:  \"github.com/pkg/errors\"",
          "28:  \"sigs.k8s.io/yaml\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  \"unicode\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:  if !validPluginName.MatchString(plug.Metadata.Name) {",
          "176:   return fmt.Errorf(\"invalid plugin name at %q\", filepath)",
          "177:  }",
          "179:  return nil",
          "180: }",
          "182: func detectDuplicates(plugs []*Plugin) error {",
          "183:  names := map[string]string{}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:  plug.Metadata.Usage = sanitizeString(plug.Metadata.Usage)",
          "186: func sanitizeString(str string) string {",
          "187:  return strings.Map(func(r rune) rune {",
          "188:   if unicode.IsSpace(r) {",
          "189:    return ' '",
          "190:   }",
          "191:   if unicode.IsPrint(r) {",
          "192:    return r",
          "193:   }",
          "194:   return -1",
          "195:  }, str)",
          "196: }",
          "",
          "---------------"
        ],
        "pkg/repo/chartrepo.go||pkg/repo/chartrepo.go": [
          "File: pkg/repo/chartrepo.go -> pkg/repo/chartrepo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:    if strings.Contains(f.Name(), \"-index.yaml\") {",
          "100:     i, err := LoadIndexFile(path)",
          "101:     if err != nil {",
          "103:     }",
          "104:     r.IndexFile = i",
          "105:    } else if strings.HasSuffix(f.Name(), \".tgz\") {",
          "",
          "[Removed Lines]",
          "102:      return nil",
          "",
          "[Added Lines]",
          "104:      return err",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   return \"\", err",
          "138:  }",
          "141:  if err != nil {",
          "142:   return \"\", err",
          "143:  }",
          "",
          "[Removed Lines]",
          "140:  indexFile, err := loadIndex(index)",
          "",
          "[Added Lines]",
          "142:  indexFile, err := loadIndex(index, r.Config.URL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:   }",
          "189:   if !r.IndexFile.Has(ch.Name(), ch.Metadata.Version) {",
          "191:   }",
          "193:  }",
          "",
          "[Removed Lines]",
          "190:    r.IndexFile.Add(ch.Metadata, path, r.Config.URL, digest)",
          "",
          "[Added Lines]",
          "192:    if err := r.IndexFile.MustAdd(ch.Metadata, path, r.Config.URL, digest); err != nil {",
          "193:     return errors.Wrapf(err, \"failed adding to %s to index\", path)",
          "194:    }",
          "",
          "---------------"
        ],
        "pkg/repo/index.go||pkg/repo/index.go": [
          "File: pkg/repo/index.go -> pkg/repo/index.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"bytes\"",
          "21:  \"io/ioutil\"",
          "22:  \"os\"",
          "23:  \"path\"",
          "24:  \"path/filepath\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"log\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  if err != nil {",
          "106:   return nil, err",
          "107:  }",
          "109: }",
          "114:  u := filename",
          "115:  if baseURL != \"\" {",
          "117:   _, file := filepath.Split(filename)",
          "118:   u, err = urlutil.URLJoin(baseURL, file)",
          "119:   if err != nil {",
          "120:    u = path.Join(baseURL, file)",
          "",
          "[Removed Lines]",
          "108:  return loadIndex(b)",
          "113: func (i IndexFile) Add(md *chart.Metadata, filename, baseURL, digest string) {",
          "116:   var err error",
          "",
          "[Added Lines]",
          "109:  i, err := loadIndex(b, path)",
          "110:  if err != nil {",
          "111:   return nil, errors.Wrapf(err, \"error loading %s\", path)",
          "112:  }",
          "113:  return i, nil",
          "118: func (i IndexFile) MustAdd(md *chart.Metadata, filename, baseURL, digest string) error {",
          "119:  if md.APIVersion == \"\" {",
          "120:   md.APIVersion = chart.APIVersionV1",
          "121:  }",
          "122:  if err := md.Validate(); err != nil {",
          "123:   return errors.Wrapf(err, \"validate failed for %s\", filename)",
          "124:  }",
          "129:   var err error",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   Digest:   digest,",
          "127:   Created:  time.Now(),",
          "128:  }",
          "133:  }",
          "134: }",
          "",
          "[Removed Lines]",
          "129:  if ee, ok := i.Entries[md.Name]; !ok {",
          "130:   i.Entries[md.Name] = ChartVersions{cr}",
          "131:  } else {",
          "132:   i.Entries[md.Name] = append(ee, cr)",
          "",
          "[Added Lines]",
          "141:  ee := i.Entries[md.Name]",
          "142:  i.Entries[md.Name] = append(ee, cr)",
          "143:  return nil",
          "144: }",
          "149: func (i IndexFile) Add(md *chart.Metadata, filename, baseURL, digest string) {",
          "150:  if err := i.MustAdd(md, filename, baseURL, digest); err != nil {",
          "151:   log.Printf(\"skipping loading invalid entry for chart %q %q from %s: %s\", md.Name, md.Version, filename, err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "294:   if err != nil {",
          "295:    return index, err",
          "296:   }",
          "298:  }",
          "299:  return index, nil",
          "300: }",
          "306:  i := &IndexFile{}",
          "307:  if err := yaml.UnmarshalStrict(data, i); err != nil {",
          "308:   return i, err",
          "309:  }",
          "310:  i.SortEntries()",
          "311:  if i.APIVersion == \"\" {",
          "312:   return i, ErrNoAPIVersion",
          "",
          "[Removed Lines]",
          "297:   index.Add(c.Metadata, fname, parentURL, hash)",
          "305: func loadIndex(data []byte) (*IndexFile, error) {",
          "",
          "[Added Lines]",
          "316:   if err := index.MustAdd(c.Metadata, fname, parentURL, hash); err != nil {",
          "317:    return index, errors.Wrapf(err, \"failed adding to %s to index\", fname)",
          "318:   }",
          "327: func loadIndex(data []byte, source string) (*IndexFile, error) {",
          "333:  for name, cvs := range i.Entries {",
          "334:   for idx := len(cvs) - 1; idx >= 0; idx-- {",
          "335:    if cvs[idx].APIVersion == \"\" {",
          "336:     cvs[idx].APIVersion = chart.APIVersionV1",
          "337:    }",
          "338:    if err := cvs[idx].Validate(); err != nil {",
          "339:     log.Printf(\"skipping loading invalid entry for chart %q %q from %s: %s\", name, cvs[idx].Version, source, err)",
          "340:     cvs = append(cvs[:idx], cvs[idx+1:]...)",
          "341:    }",
          "342:   }",
          "343:  }",
          "",
          "---------------"
        ],
        "pkg/repo/index_test.go||pkg/repo/index_test.go": [
          "File: pkg/repo/index_test.go -> pkg/repo/index_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  \"strings\"",
          "28:  \"testing\"",
          "30:  \"helm.sh/helm/v3/pkg/cli\"",
          "31:  \"helm.sh/helm/v3/pkg/getter\"",
          "32:  \"helm.sh/helm/v3/pkg/helmpath\"",
          "35: )",
          "37: const (",
          "",
          "[Removed Lines]",
          "34:  \"helm.sh/helm/v3/pkg/chart\"",
          "",
          "[Added Lines]",
          "30:  \"helm.sh/helm/v3/pkg/chart\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: func TestIndexFile(t *testing.T) {",
          "67:  i := NewIndexFile()",
          "75:  i.SortEntries()",
          "",
          "[Removed Lines]",
          "68:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "69:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.1.1\"}, \"cutter-0.1.1.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "70:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.1.0\"}, \"cutter-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "71:  i.Add(&chart.Metadata{Name: \"cutter\", Version: \"0.2.0\"}, \"cutter-0.2.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "72:  i.Add(&chart.Metadata{Name: \"setter\", Version: \"0.1.9+alpha\"}, \"setter-0.1.9+alpha.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "73:  i.Add(&chart.Metadata{Name: \"setter\", Version: \"0.1.9+beta\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\")",
          "",
          "[Added Lines]",
          "67:  for _, x := range []struct {",
          "68:   md       *chart.Metadata",
          "69:   filename string",
          "70:   baseURL  string",
          "71:   digest   string",
          "72:  }{",
          "73:   {&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "74:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.1.1\"}, \"cutter-0.1.1.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "75:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.1.0\"}, \"cutter-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "76:   {&chart.Metadata{APIVersion: \"v2\", Name: \"cutter\", Version: \"0.2.0\"}, \"cutter-0.2.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "77:   {&chart.Metadata{APIVersion: \"v2\", Name: \"setter\", Version: \"0.1.9+alpha\"}, \"setter-0.1.9+alpha.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "78:   {&chart.Metadata{APIVersion: \"v2\", Name: \"setter\", Version: \"0.1.9+beta\"}, \"setter-0.1.9+beta.tgz\", \"http://example.com/charts\", \"sha256:1234567890abc\"},",
          "79:  } {",
          "80:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "81:    t.Errorf(\"unexpected error adding to index: %s\", err)",
          "82:   }",
          "83:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   tc := tc",
          "127:   t.Run(tc.Name, func(t *testing.T) {",
          "128:    t.Parallel()",
          "134:    if err != nil {",
          "135:     t.Fatal(err)",
          "136:    }",
          "",
          "[Removed Lines]",
          "129:    b, err := ioutil.ReadFile(tc.Filename)",
          "130:    if err != nil {",
          "131:     t.Fatal(err)",
          "132:    }",
          "133:    i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "139:    i, err := LoadIndexFile(tc.Filename)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143: func TestLoadIndex_Duplicates(t *testing.T) {",
          "145:   t.Errorf(\"Expected an error when duplicate entries are present\")",
          "146:  }",
          "147: }",
          "157: func TestLoadIndexFileAnnotations(t *testing.T) {",
          "158:  i, err := LoadIndexFile(annotationstestfile)",
          "159:  if err != nil {",
          "",
          "[Removed Lines]",
          "144:  if _, err := loadIndex([]byte(indexWithDuplicates)); err == nil {",
          "149: func TestLoadIndexFile(t *testing.T) {",
          "150:  i, err := LoadIndexFile(testfile)",
          "151:  if err != nil {",
          "152:   t.Fatal(err)",
          "153:  }",
          "154:  verifyLocalIndex(t, i)",
          "155: }",
          "",
          "[Added Lines]",
          "150:  if _, err := loadIndex([]byte(indexWithDuplicates), \"indexWithDuplicates\"); err == nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170: }",
          "172: func TestLoadUnorderedIndex(t *testing.T) {",
          "178:  if err != nil {",
          "179:   t.Fatal(err)",
          "180:  }",
          "",
          "[Removed Lines]",
          "173:  b, err := ioutil.ReadFile(unorderedTestfile)",
          "174:  if err != nil {",
          "175:   t.Fatal(err)",
          "176:  }",
          "177:  i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "171:  i, err := LoadIndexFile(unorderedTestfile)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184: func TestMerge(t *testing.T) {",
          "185:  ind1 := NewIndexFile()",
          "191:  ind2 := NewIndexFile()",
          "201:  ind1.Merge(ind2)",
          "",
          "[Removed Lines]",
          "186:  ind1.Add(&chart.Metadata{",
          "187:   Name:    \"dreadnought\",",
          "188:   Version: \"0.1.0\",",
          "189:  }, \"dreadnought-0.1.0.tgz\", \"http://example.com\", \"aaaa\")",
          "192:  ind2.Add(&chart.Metadata{",
          "193:   Name:    \"dreadnought\",",
          "194:   Version: \"0.2.0\",",
          "195:  }, \"dreadnought-0.2.0.tgz\", \"http://example.com\", \"aaaabbbb\")",
          "196:  ind2.Add(&chart.Metadata{",
          "197:   Name:    \"doughnut\",",
          "198:   Version: \"0.2.0\",",
          "199:  }, \"doughnut-0.2.0.tgz\", \"http://example.com\", \"ccccbbbb\")",
          "",
          "[Added Lines]",
          "181:  if err := ind1.MustAdd(&chart.Metadata{APIVersion: \"v2\", Name: \"dreadnought\", Version: \"0.1.0\"}, \"dreadnought-0.1.0.tgz\", \"http://example.com\", \"aaaa\"); err != nil {",
          "182:   t.Fatalf(\"unexpected error: %s\", err)",
          "183:  }",
          "187:  for _, x := range []struct {",
          "188:   md       *chart.Metadata",
          "189:   filename string",
          "190:   baseURL  string",
          "191:   digest   string",
          "192:  }{",
          "193:   {&chart.Metadata{APIVersion: \"v2\", Name: \"dreadnought\", Version: \"0.2.0\"}, \"dreadnought-0.2.0.tgz\", \"http://example.com\", \"aaaabbbb\"},",
          "194:   {&chart.Metadata{APIVersion: \"v2\", Name: \"doughnut\", Version: \"0.2.0\"}, \"doughnut-0.2.0.tgz\", \"http://example.com\", \"ccccbbbb\"},",
          "195:  } {",
          "196:   if err := ind2.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "197:    t.Errorf(\"unexpected error: %s\", err)",
          "198:   }",
          "199:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239:    t.Fatalf(\"error finding created index file: %#v\", err)",
          "240:   }",
          "248:   if err != nil {",
          "249:    t.Fatalf(\"Index %q failed to parse: %s\", testfile, err)",
          "250:   }",
          "",
          "[Removed Lines]",
          "242:   b, err := ioutil.ReadFile(idx)",
          "243:   if err != nil {",
          "244:    t.Fatalf(\"error reading index file: %#v\", err)",
          "245:   }",
          "247:   i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "242:   i, err := LoadIndexFile(idx)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:    t.Fatalf(\"error finding created charts file: %#v\", err)",
          "257:   }",
          "260:   if err != nil {",
          "261:    t.Fatalf(\"error reading charts file: %#v\", err)",
          "262:   }",
          "",
          "[Removed Lines]",
          "259:   b, err = ioutil.ReadFile(idx)",
          "",
          "[Added Lines]",
          "254:   b, err := ioutil.ReadFile(idx)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "297:    t.Fatalf(\"error finding created index file: %#v\", err)",
          "298:   }",
          "306:   if err != nil {",
          "307:    t.Fatalf(\"Index %q failed to parse: %s\", testfile, err)",
          "308:   }",
          "",
          "[Removed Lines]",
          "300:   b, err := ioutil.ReadFile(idx)",
          "301:   if err != nil {",
          "302:    t.Fatalf(\"error reading index file: %#v\", err)",
          "303:   }",
          "305:   i, err := loadIndex(b)",
          "",
          "[Added Lines]",
          "295:   i, err := LoadIndexFile(idx)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "314:    t.Fatalf(\"error finding created charts file: %#v\", err)",
          "315:   }",
          "318:   if err != nil {",
          "319:    t.Fatalf(\"error reading charts file: %#v\", err)",
          "320:   }",
          "",
          "[Removed Lines]",
          "317:   b, err = ioutil.ReadFile(idx)",
          "",
          "[Added Lines]",
          "307:   b, err := ioutil.ReadFile(idx)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "345:  expects := []*ChartVersion{",
          "346:   {",
          "347:    Metadata: &chart.Metadata{",
          "348:     Name:        \"alpine\",",
          "349:     Description: \"string\",",
          "350:     Version:     \"1.0.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "359:   },",
          "360:   {",
          "361:    Metadata: &chart.Metadata{",
          "362:     Name:        \"nginx\",",
          "363:     Description: \"string\",",
          "364:     Version:     \"0.2.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "372:   },",
          "373:   {",
          "374:    Metadata: &chart.Metadata{",
          "375:     Name:        \"nginx\",",
          "376:     Description: \"string\",",
          "377:     Version:     \"0.1.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     APIVersion:  \"v2\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "477: func TestIndexAdd(t *testing.T) {",
          "478:  i := NewIndexFile()",
          "481:  if i.Entries[\"clipper\"][0].URLs[0] != \"http://example.com/charts/clipper-0.1.0.tgz\" {",
          "482:   t.Errorf(\"Expected http://example.com/charts/clipper-0.1.0.tgz, got %s\", i.Entries[\"clipper\"][0].URLs[0])",
          "483:  }",
          "487:  if i.Entries[\"alpine\"][0].URLs[0] != \"http://example.com/charts/alpine-0.1.0.tgz\" {",
          "488:   t.Errorf(\"Expected http://example.com/charts/alpine-0.1.0.tgz, got %s\", i.Entries[\"alpine\"][0].URLs[0])",
          "489:  }",
          "493:  if i.Entries[\"deis\"][0].URLs[0] != \"http://example.com/charts/deis-0.1.0.tgz\" {",
          "494:   t.Errorf(\"Expected http://example.com/charts/deis-0.1.0.tgz, got %s\", i.Entries[\"deis\"][0].URLs[0])",
          "495:  }",
          "496: }",
          "498: func TestIndexWrite(t *testing.T) {",
          "499:  i := NewIndexFile()",
          "501:  dir, err := ioutil.TempDir(\"\", \"helm-tmp\")",
          "502:  if err != nil {",
          "503:   t.Fatal(err)",
          "",
          "[Removed Lines]",
          "479:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "485:  i.Add(&chart.Metadata{Name: \"alpine\", Version: \"0.1.0\"}, \"/home/charts/alpine-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "491:  i.Add(&chart.Metadata{Name: \"deis\", Version: \"0.1.0\"}, \"/home/charts/deis-0.1.0.tgz\", \"http://example.com/charts/\", \"sha256:1234567890\")",
          "500:  i.Add(&chart.Metadata{Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\")",
          "",
          "[Added Lines]",
          "473:  for _, x := range []struct {",
          "474:   md       *chart.Metadata",
          "475:   filename string",
          "476:   baseURL  string",
          "477:   digest   string",
          "478:  }{",
          "480:   {&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "481:   {&chart.Metadata{APIVersion: \"v2\", Name: \"alpine\", Version: \"0.1.0\"}, \"/home/charts/alpine-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"},",
          "482:   {&chart.Metadata{APIVersion: \"v2\", Name: \"deis\", Version: \"0.1.0\"}, \"/home/charts/deis-0.1.0.tgz\", \"http://example.com/charts/\", \"sha256:1234567890\"},",
          "483:  } {",
          "484:   if err := i.MustAdd(x.md, x.filename, x.baseURL, x.digest); err != nil {",
          "485:    t.Errorf(\"unexpected error adding to index: %s\", err)",
          "486:   }",
          "487:  }",
          "500:  if err := i.MustAdd(&chart.Metadata{}, \"error-0.1.0.tgz\", \"\", \"\"); err == nil {",
          "501:   t.Fatal(\"expected error adding to index\")",
          "502:  }",
          "507:  if err := i.MustAdd(&chart.Metadata{APIVersion: \"v2\", Name: \"clipper\", Version: \"0.1.0\"}, \"clipper-0.1.0.tgz\", \"http://example.com/charts\", \"sha256:1234567890\"); err != nil {",
          "508:   t.Fatalf(\"unexpected error: %s\", err)",
          "509:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}