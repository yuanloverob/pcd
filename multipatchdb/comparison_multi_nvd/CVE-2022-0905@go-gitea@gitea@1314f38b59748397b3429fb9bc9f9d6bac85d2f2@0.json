{
  "cve_id": "CVE-2022-0905",
  "cve_desc": "Missing Authorization in GitHub repository go-gitea/gitea prior to 1.16.4.",
  "repo": "go-gitea/gitea",
  "patch_hash": "1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
  "patch_info": {
    "commit_hash": "1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
    "repo": "go-gitea/gitea",
    "commit_url": "https://github.com/go-gitea/gitea/commit/1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
    "files": [
      "modules/auth/pam/pam.go"
    ],
    "message": "fix pam authorization (#19040)\n\nhttps://huntr.dev/bounties/8d221f92-b2b1-4878-bc31-66ff272e5ceb/\n\nCo-authored-by: ysf <34326+ysf@users.noreply.github.com>",
    "before_after_code_files": [
      "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
    ]
  },
  "patch_diff": {
    "modules/auth/pam/pam.go||modules/auth/pam/pam.go": [
      "File: modules/auth/pam/pam.go -> modules/auth/pam/pam.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "34:  if err = t.Authenticate(0); err != nil {",
      "35:   return \"\", err",
      "36:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:  if err = t.AcctMgmt(0); err != nil {",
      "39:    return \"\", err",
      "40:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc0d2c8ada14eae81542f30a81552ed5cef8bd5d",
      "candidate_info": {
        "commit_hash": "bc0d2c8ada14eae81542f30a81552ed5cef8bd5d",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/bc0d2c8ada14eae81542f30a81552ed5cef8bd5d",
        "files": [
          "models/action.go",
          "models/action_list.go",
          "models/action_test.go",
          "models/fixtures/action.yml",
          "models/user_heatmap_test.go",
          "modules/auth/pam/pam.go",
          "modules/context/repo.go",
          "routers/web/feed/convert.go",
          "routers/web/feed/profile.go",
          "routers/web/feed/repo.go",
          "routers/web/repo/view.go",
          "routers/web/user/home.go",
          "routers/web/user/profile.go",
          "templates/base/head.tmpl"
        ],
        "message": "RSS/Atom support for Repos (#19055)\n\n* support for repos\n* refactor\n* advertise the feeds via meta tags\n* allow feed suffix and feed header\n* optimize performance",
        "before_after_code_files": [
          "models/action.go||models/action.go",
          "models/action_list.go||models/action_list.go",
          "models/action_test.go||models/action_test.go",
          "models/user_heatmap_test.go||models/user_heatmap_test.go",
          "modules/auth/pam/pam.go||modules/auth/pam/pam.go",
          "modules/context/repo.go||modules/context/repo.go",
          "routers/web/feed/convert.go||routers/web/feed/convert.go",
          "routers/web/feed/profile.go||routers/web/feed/profile.go",
          "routers/web/feed/repo.go||routers/web/feed/repo.go",
          "routers/web/repo/view.go||routers/web/repo/view.go",
          "routers/web/user/home.go||routers/web/user/home.go",
          "routers/web/user/profile.go||routers/web/user/profile.go",
          "templates/base/head.tmpl||templates/base/head.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
          ],
          "candidate": [
            "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
          ]
        }
      },
      "candidate_diff": {
        "models/action.go||models/action.go": [
          "File: models/action.go -> models/action.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "328: }",
          "332:  if opts.RequestedUser == nil && opts.RequestedTeam == nil && opts.RequestedRepo == nil {",
          "333:   return nil, fmt.Errorf(\"need at least one of these filters: RequestedUser, RequestedTeam, RequestedRepo\")",
          "334:  }",
          "",
          "[Removed Lines]",
          "331: func GetFeeds(opts GetFeedsOptions) ([]*Action, error) {",
          "",
          "[Added Lines]",
          "331: func GetFeeds(ctx context.Context, opts GetFeedsOptions) (ActionList, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:   return nil, err",
          "339:  }",
          "343:  opts.SetDefaultValues()",
          "344:  sess = db.SetSessionPagination(sess, &opts)",
          "",
          "[Removed Lines]",
          "341:  sess := db.GetEngine(db.DefaultContext).Where(cond)",
          "",
          "[Added Lines]",
          "341:  e := db.GetEngine(ctx)",
          "342:  sess := e.Where(cond)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:   return nil, fmt.Errorf(\"Find: %v\", err)",
          "350:  }",
          "353:   return nil, fmt.Errorf(\"LoadAttributes: %v\", err)",
          "354:  }",
          "",
          "[Removed Lines]",
          "352:  if err := ActionList(actions).LoadAttributes(); err != nil {",
          "",
          "[Added Lines]",
          "353:  if err := ActionList(actions).loadAttributes(e); err != nil {",
          "",
          "---------------"
        ],
        "models/action_list.go||models/action_list.go": [
          "File: models/action_list.go -> models/action_list.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  return keysInt64(userIDs)",
          "26: }",
          "29:  if len(actions) == 0 {",
          "30:   return nil, nil",
          "31:  }",
          "",
          "[Removed Lines]",
          "28: func (actions ActionList) loadUsers(e db.Engine) ([]*user_model.User, error) {",
          "",
          "[Added Lines]",
          "28: func (actions ActionList) loadUsers(e db.Engine) (map[int64]*user_model.User, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  for _, action := range actions {",
          "43:   action.ActUser = userMaps[action.ActUserID]",
          "44:  }",
          "51: }",
          "53: func (actions ActionList) getRepoIDs() []int64 {",
          "",
          "[Removed Lines]",
          "45:  return valuesUser(userMaps), nil",
          "46: }",
          "49: func (actions ActionList) LoadUsers() ([]*user_model.User, error) {",
          "50:  return actions.loadUsers(db.GetEngine(db.DefaultContext))",
          "",
          "[Added Lines]",
          "45:  return userMaps, nil",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  return keysInt64(repoIDs)",
          "61: }",
          "64:  if len(actions) == 0 {",
          "66:  }",
          "68:  repoIDs := actions.getRepoIDs()",
          "69:  repoMaps := make(map[int64]*repo_model.Repository, len(repoIDs))",
          "73:  if err != nil {",
          "75:  }",
          "77:  for _, action := range actions {",
          "78:   action.Repo = repoMaps[action.RepoID]",
          "79:  }",
          "86: }",
          "92:  }",
          "96:  }",
          "98:  return nil",
          "99: }",
          "104: }",
          "",
          "[Removed Lines]",
          "63: func (actions ActionList) loadRepositories(e db.Engine) ([]*repo_model.Repository, error) {",
          "65:   return nil, nil",
          "70:  err := e.",
          "71:   In(\"id\", repoIDs).",
          "72:   Find(&repoMaps)",
          "74:   return nil, fmt.Errorf(\"find repository: %v\", err)",
          "80:  return valuesRepository(repoMaps), nil",
          "81: }",
          "84: func (actions ActionList) LoadRepositories() ([]*repo_model.Repository, error) {",
          "85:  return actions.loadRepositories(db.GetEngine(db.DefaultContext))",
          "89: func (actions ActionList) loadAttributes(e db.Engine) (err error) {",
          "90:  if _, err = actions.loadUsers(e); err != nil {",
          "91:   return",
          "94:  if _, err = actions.loadRepositories(e); err != nil {",
          "95:   return",
          "102: func (actions ActionList) LoadAttributes() error {",
          "103:  return actions.loadAttributes(db.GetEngine(db.DefaultContext))",
          "",
          "[Added Lines]",
          "58: func (actions ActionList) loadRepositories(e db.Engine) error {",
          "60:   return nil",
          "65:  err := e.In(\"id\", repoIDs).Find(&repoMaps)",
          "67:   return fmt.Errorf(\"find repository: %v\", err)",
          "73:  return nil",
          "76: func (actions ActionList) loadRepoOwner(e db.Engine, userMap map[int64]*user_model.User) (err error) {",
          "77:  if userMap == nil {",
          "78:   userMap = make(map[int64]*user_model.User)",
          "81:  for _, action := range actions {",
          "82:   repoOwner, ok := userMap[action.Repo.OwnerID]",
          "83:   if !ok {",
          "84:    repoOwner, err = user_model.GetUserByID(action.Repo.OwnerID)",
          "85:    if err != nil {",
          "86:     if user_model.IsErrUserNotExist(err) {",
          "87:      continue",
          "88:     }",
          "89:     return err",
          "90:    }",
          "91:    userMap[repoOwner.ID] = repoOwner",
          "92:   }",
          "93:   action.Repo.Owner = repoOwner",
          "100: func (actions ActionList) loadAttributes(e db.Engine) error {",
          "101:  userMap, err := actions.loadUsers(e)",
          "102:  if err != nil {",
          "103:   return err",
          "104:  }",
          "106:  if err := actions.loadRepositories(e); err != nil {",
          "107:   return err",
          "108:  }",
          "110:  return actions.loadRepoOwner(e, userMap)",
          "",
          "---------------"
        ],
        "models/action_test.go||models/action_test.go": [
          "File: models/action_test.go -> models/action_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"path\"",
          "9:  \"testing\"",
          "11:  repo_model \"code.gitea.io/gitea/models/repo\"",
          "12:  \"code.gitea.io/gitea/models/unittest\"",
          "13:  user_model \"code.gitea.io/gitea/models/user\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"code.gitea.io/gitea/models/db\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  assert.NoError(t, unittest.PrepareTestDatabase())",
          "40:  user := unittest.AssertExistsAndLoadBean(t, &user_model.User{ID: 2}).(*user_model.User)",
          "43:   RequestedUser:   user,",
          "44:   Actor:           user,",
          "45:   IncludePrivate:  true,",
          "",
          "[Removed Lines]",
          "42:  actions, err := GetFeeds(GetFeedsOptions{",
          "",
          "[Added Lines]",
          "43:  actions, err := GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   assert.EqualValues(t, user.ID, actions[0].UserID)",
          "53:  }",
          "56:   RequestedUser:   user,",
          "57:   Actor:           user,",
          "58:   IncludePrivate:  false,",
          "",
          "[Removed Lines]",
          "55:  actions, err = GetFeeds(GetFeedsOptions{",
          "",
          "[Added Lines]",
          "56:  actions, err = GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:  assert.Len(t, actions, 0)",
          "63: }",
          "65: func TestGetFeeds2(t *testing.T) {",
          "67:  assert.NoError(t, unittest.PrepareTestDatabase())",
          "68:  org := unittest.AssertExistsAndLoadBean(t, &user_model.User{ID: 3}).(*user_model.User)",
          "69:  user := unittest.AssertExistsAndLoadBean(t, &user_model.User{ID: 2}).(*user_model.User)",
          "72:   RequestedUser:   org,",
          "73:   Actor:           user,",
          "74:   IncludePrivate:  true,",
          "",
          "[Removed Lines]",
          "71:  actions, err := GetFeeds(GetFeedsOptions{",
          "",
          "[Added Lines]",
          "66: func TestGetFeedsForRepos(t *testing.T) {",
          "67:  assert.NoError(t, unittest.PrepareTestDatabase())",
          "68:  user := unittest.AssertExistsAndLoadBean(t, &user_model.User{ID: 2}).(*user_model.User)",
          "69:  privRepo := unittest.AssertExistsAndLoadBean(t, &repo_model.Repository{ID: 2}).(*repo_model.Repository)",
          "70:  pubRepo := unittest.AssertExistsAndLoadBean(t, &repo_model.Repository{ID: 8}).(*repo_model.Repository)",
          "73:  actions, err := GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "74:   RequestedRepo:  privRepo,",
          "75:   IncludePrivate: true,",
          "76:  })",
          "77:  assert.NoError(t, err)",
          "78:  assert.Len(t, actions, 0)",
          "81:  actions, err = GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "82:   RequestedRepo:  pubRepo,",
          "83:   IncludePrivate: true,",
          "84:  })",
          "85:  assert.NoError(t, err)",
          "86:  assert.Len(t, actions, 1)",
          "89:  actions, err = GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "90:   RequestedRepo:  privRepo,",
          "91:   IncludePrivate: true,",
          "92:   Actor:          user,",
          "93:  })",
          "94:  assert.NoError(t, err)",
          "95:  assert.Len(t, actions, 1)",
          "98:  actions, err = GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "99:   RequestedRepo:  pubRepo,",
          "100:   IncludePrivate: true,",
          "101:   Actor:          user,",
          "102:  })",
          "103:  assert.NoError(t, err)",
          "104:  assert.Len(t, actions, 1)",
          "105: }",
          "113:  actions, err := GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "82:   assert.EqualValues(t, org.ID, actions[0].UserID)",
          "83:  }",
          "86:   RequestedUser:   org,",
          "87:   Actor:           user,",
          "88:   IncludePrivate:  false,",
          "",
          "[Removed Lines]",
          "85:  actions, err = GetFeeds(GetFeedsOptions{",
          "",
          "[Added Lines]",
          "127:  actions, err = GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "",
          "---------------"
        ],
        "models/user_heatmap_test.go||models/user_heatmap_test.go": [
          "File: models/user_heatmap_test.go -> models/user_heatmap_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"testing\"",
          "10:  \"time\"",
          "12:  \"code.gitea.io/gitea/models/unittest\"",
          "13:  user_model \"code.gitea.io/gitea/models/user\"",
          "14:  \"code.gitea.io/gitea/modules/json\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"code.gitea.io/gitea/models/db\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   }",
          "76:    RequestedUser:   user,",
          "77:    Actor:           doer,",
          "78:    IncludePrivate:  true,",
          "",
          "[Removed Lines]",
          "75:   actions, err := GetFeeds(GetFeedsOptions{",
          "",
          "[Added Lines]",
          "76:   actions, err := GetFeeds(db.DefaultContext, GetFeedsOptions{",
          "",
          "---------------"
        ],
        "modules/auth/pam/pam.go||modules/auth/pam/pam.go": [
          "File: modules/auth/pam/pam.go -> modules/auth/pam/pam.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:  if err = t.Authenticate(0); err != nil {",
          "35:   return \"\", err",
          "36:  }",
          "38:  if err = t.AcctMgmt(0); err != nil {",
          "",
          "[Removed Lines]",
          "39:    return \"\", err",
          "40:   }",
          "",
          "[Added Lines]",
          "39:   return \"\", err",
          "40:  }",
          "",
          "---------------"
        ],
        "modules/context/repo.go||modules/context/repo.go": [
          "File: modules/context/repo.go -> modules/context/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:  userName := ctx.Params(\":username\")",
          "419:  repoName := ctx.Params(\":reponame\")",
          "420:  repoName = strings.TrimSuffix(repoName, \".git\")",
          "423:  if ctx.IsSigned && ctx.User.LowerName == strings.ToLower(userName) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "421:  repoName = strings.TrimSuffix(repoName, \".rss\")",
          "422:  repoName = strings.TrimSuffix(repoName, \".atom\")",
          "",
          "---------------"
        ],
        "routers/web/feed/convert.go||routers/web/feed/convert.go": [
          "File: routers/web/feed/convert.go -> routers/web/feed/convert.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"fmt\"",
          "9:  \"html\"",
          "10:  \"net/url\"",
          "11:  \"strconv\"",
          "12:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"net/http\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: }",
          "70:  for _, act := range actions {",
          "71:   act.LoadActUser()",
          "",
          "[Removed Lines]",
          "69: func feedActionsToFeedItems(ctx *context.Context, actions []*models.Action) (items []*feeds.Item, err error) {",
          "",
          "[Added Lines]",
          "70: func feedActionsToFeedItems(ctx *context.Context, actions models.ActionList) (items []*feeds.Item, err error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:  }",
          "248:  return",
          "249: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: func GetFeedType(name string, req *http.Request) (bool, string, string) {",
          "254:  if strings.HasSuffix(name, \".rss\") ||",
          "255:   strings.Contains(req.Header.Get(\"Accept\"), \"application/rss+xml\") {",
          "256:   return true, strings.TrimSuffix(name, \".rss\"), \"rss\"",
          "257:  }",
          "259:  if strings.HasSuffix(name, \".atom\") ||",
          "260:   strings.Contains(req.Header.Get(\"Accept\"), \"application/atom+xml\") {",
          "261:   return true, strings.TrimSuffix(name, \".atom\"), \"atom\"",
          "262:  }",
          "264:  return false, name, \"\"",
          "265: }",
          "",
          "---------------"
        ],
        "routers/web/feed/profile.go||routers/web/feed/profile.go": [
          "File: routers/web/feed/profile.go -> routers/web/feed/profile.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/gorilla/feeds\"",
          "16: )",
          "58: func ShowUserFeed(ctx *context.Context, ctxUser *user_model.User, formatType string) {",
          "60:   RequestedUser:   ctxUser,",
          "61:   Actor:           ctx.User,",
          "62:   IncludePrivate:  false,",
          "",
          "[Removed Lines]",
          "19: func RetrieveFeeds(ctx *context.Context, options models.GetFeedsOptions) []*models.Action {",
          "20:  actions, err := models.GetFeeds(options)",
          "21:  if err != nil {",
          "22:   ctx.ServerError(\"GetFeeds\", err)",
          "23:   return nil",
          "24:  }",
          "27:  {",
          "28:   userCache := map[int64]*user_model.User{options.RequestedUser.ID: options.RequestedUser}",
          "29:   if ctx.User != nil {",
          "30:    userCache[ctx.User.ID] = ctx.User",
          "31:   }",
          "32:   for _, act := range actions {",
          "33:    if act.ActUser != nil {",
          "34:     userCache[act.ActUserID] = act.ActUser",
          "35:    }",
          "36:   }",
          "37:   for _, act := range actions {",
          "38:    repoOwner, ok := userCache[act.Repo.OwnerID]",
          "39:    if !ok {",
          "40:     repoOwner, err = user_model.GetUserByID(act.Repo.OwnerID)",
          "41:     if err != nil {",
          "42:      if user_model.IsErrUserNotExist(err) {",
          "43:       continue",
          "44:      }",
          "45:      ctx.ServerError(\"GetUserByID\", err)",
          "46:      return nil",
          "47:     }",
          "48:     userCache[repoOwner.ID] = repoOwner",
          "49:    }",
          "50:    act.Repo.Owner = repoOwner",
          "51:   }",
          "52:  }",
          "54:  return actions",
          "55: }",
          "59:  actions := RetrieveFeeds(ctx, models.GetFeedsOptions{",
          "",
          "[Added Lines]",
          "20:  actions, err := models.GetFeeds(ctx, models.GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   IncludeDeleted:  false,",
          "65:   Date:            ctx.FormString(\"date\"),",
          "66:  })",
          "68:   return",
          "69:  }",
          "",
          "[Removed Lines]",
          "67:  if ctx.Written() {",
          "",
          "[Added Lines]",
          "28:  if err != nil {",
          "29:   ctx.ServerError(\"GetFeeds\", err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   Created:     time.Now(),",
          "76:  }",
          "79:  feed.Items, err = feedActionsToFeedItems(ctx, actions)",
          "80:  if err != nil {",
          "81:   ctx.ServerError(\"convert feed\", err)",
          "",
          "[Removed Lines]",
          "78:  var err error",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "routers/web/feed/repo.go||routers/web/feed/repo.go": [
          "File: routers/web/feed/repo.go -> routers/web/feed/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: package feed",
          "7: import (",
          "8:  \"time\"",
          "10:  \"code.gitea.io/gitea/models\"",
          "11:  repo_model \"code.gitea.io/gitea/models/repo\"",
          "12:  \"code.gitea.io/gitea/modules/context\"",
          "14:  \"github.com/gorilla/feeds\"",
          "15: )",
          "18: func ShowRepoFeed(ctx *context.Context, repo *repo_model.Repository, formatType string) {",
          "19:  actions, err := models.GetFeeds(ctx, models.GetFeedsOptions{",
          "20:   RequestedRepo:  repo,",
          "21:   Actor:          ctx.User,",
          "22:   IncludePrivate: true,",
          "23:   Date:           ctx.FormString(\"date\"),",
          "24:  })",
          "25:  if err != nil {",
          "26:   ctx.ServerError(\"GetFeeds\", err)",
          "27:   return",
          "28:  }",
          "30:  feed := &feeds.Feed{",
          "31:   Title:       ctx.Tr(\"home.feed_of\", repo.FullName()),",
          "32:   Link:        &feeds.Link{Href: repo.HTMLURL()},",
          "33:   Description: repo.Description,",
          "34:   Created:     time.Now(),",
          "35:  }",
          "37:  feed.Items, err = feedActionsToFeedItems(ctx, actions)",
          "38:  if err != nil {",
          "39:   ctx.ServerError(\"convert feed\", err)",
          "40:   return",
          "41:  }",
          "43:  writeFeed(ctx, feed, formatType)",
          "44: }",
          "",
          "---------------"
        ],
        "routers/web/repo/view.go||routers/web/repo/view.go": [
          "File: routers/web/repo/view.go -> routers/web/repo/view.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  \"code.gitea.io/gitea/modules/structs\"",
          "39:  \"code.gitea.io/gitea/modules/typesniffer\"",
          "40:  \"code.gitea.io/gitea/modules/util\"",
          "41: )",
          "43: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  \"code.gitea.io/gitea/routers/web/feed\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "693: func Home(ctx *context.Context) {",
          "694:  checkHomeCodeViewable(ctx)",
          "695:  if ctx.Written() {",
          "696:   return",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:  isFeed, _, showFeedType := feed.GetFeedType(ctx.Params(\":reponame\"), ctx.Req)",
          "696:  if isFeed {",
          "697:   feed.ShowRepoFeed(ctx, ctx.Repo.Repository, showFeedType)",
          "698:   return",
          "699:  }",
          "701:  ctx.Data[\"FeedURL\"] = ctx.Repo.Repository.HTMLURL()",
          "",
          "---------------"
        ],
        "routers/web/user/home.go||routers/web/user/home.go": [
          "File: routers/web/user/home.go -> routers/web/user/home.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"code.gitea.io/gitea/modules/markup/markdown\"",
          "30:  \"code.gitea.io/gitea/modules/setting\"",
          "31:  \"code.gitea.io/gitea/modules/util\"",
          "33:  issue_service \"code.gitea.io/gitea/services/issue\"",
          "34:  pull_service \"code.gitea.io/gitea/services/pull\"",
          "",
          "[Removed Lines]",
          "32:  \"code.gitea.io/gitea/routers/web/feed\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:  ctx.Data[\"MirrorCount\"] = len(mirrors)",
          "132:  ctx.Data[\"Mirrors\"] = mirrors",
          "135:   RequestedUser:   ctxUser,",
          "136:   RequestedTeam:   ctx.Org.Team,",
          "137:   Actor:           ctx.User,",
          "",
          "[Removed Lines]",
          "134:  ctx.Data[\"Feeds\"] = feed.RetrieveFeeds(ctx, models.GetFeedsOptions{",
          "",
          "[Added Lines]",
          "133:  ctx.Data[\"Feeds\"], err = models.GetFeeds(ctx, models.GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   IncludeDeleted:  false,",
          "141:   Date:            ctx.FormString(\"date\"),",
          "142:  })",
          "145:   return",
          "146:  }",
          "",
          "[Removed Lines]",
          "144:  if ctx.Written() {",
          "",
          "[Added Lines]",
          "142:  if err != nil {",
          "143:   ctx.ServerError(\"GetFeeds\", err)",
          "",
          "---------------"
        ],
        "routers/web/user/profile.go||routers/web/user/profile.go": [
          "File: routers/web/user/profile.go -> routers/web/user/profile.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   uname = strings.TrimSuffix(uname, \".gpg\")",
          "75:  }",
          "91:  ctxUser := GetUserByName(ctx, uname)",
          "92:  if ctx.Written() {",
          "",
          "[Removed Lines]",
          "77:  showFeedType := \"\"",
          "78:  if strings.HasSuffix(uname, \".rss\") {",
          "79:   showFeedType = \"rss\"",
          "80:   uname = strings.TrimSuffix(uname, \".rss\")",
          "81:  } else if strings.Contains(ctx.Req.Header.Get(\"Accept\"), \"application/rss+xml\") {",
          "82:   showFeedType = \"rss\"",
          "83:  }",
          "84:  if strings.HasSuffix(uname, \".atom\") {",
          "85:   showFeedType = \"atom\"",
          "86:   uname = strings.TrimSuffix(uname, \".atom\")",
          "87:  } else if strings.Contains(ctx.Req.Header.Get(\"Accept\"), \"application/atom+xml\") {",
          "88:   showFeedType = \"atom\"",
          "89:  }",
          "",
          "[Added Lines]",
          "77:  isShowFeed, uname, showFeedType := feed.GetFeedType(uname, ctx.Req)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:  if ctxUser.IsOrganization() {",
          "99:    feed.ShowUserFeed(ctx, ctxUser, showFeedType)",
          "100:    return",
          "101:   }",
          "",
          "[Removed Lines]",
          "98:   if len(showFeedType) != 0 {",
          "",
          "[Added Lines]",
          "86:   if isShowFeed {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  }",
          "127:   feed.ShowUserFeed(ctx, ctxUser, showFeedType)",
          "128:   return",
          "129:  }",
          "132:  openIDs, err := user_model.GetUserOpenIDs(ctxUser.ID)",
          "133:  if err != nil {",
          "",
          "[Removed Lines]",
          "126:  if len(showFeedType) != 0 {",
          "",
          "[Added Lines]",
          "114:  if isShowFeed {",
          "120:  ctx.Data[\"FeedURL\"] = ctxUser.HTMLURL()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:   total = ctxUser.NumFollowing",
          "261:  case \"activity\":",
          "263:    RequestedUser:   ctxUser,",
          "264:    Actor:           ctx.User,",
          "265:    IncludePrivate:  showPrivate,",
          "",
          "[Removed Lines]",
          "262:   ctx.Data[\"Feeds\"] = feed.RetrieveFeeds(ctx, models.GetFeedsOptions{",
          "",
          "[Added Lines]",
          "253:   ctx.Data[\"Feeds\"], err = models.GetFeeds(ctx, models.GetFeedsOptions{",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:    IncludeDeleted:  false,",
          "268:    Date:            ctx.FormString(\"date\"),",
          "269:   })",
          "271:    return",
          "272:   }",
          "273:  case \"stars\":",
          "",
          "[Removed Lines]",
          "270:   if ctx.Written() {",
          "",
          "[Added Lines]",
          "261:   if err != nil {",
          "262:    ctx.ServerError(\"GetFeeds\", err)",
          "",
          "---------------"
        ],
        "templates/base/head.tmpl||templates/base/head.tmpl": [
          "File: templates/base/head.tmpl -> templates/base/head.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: {{if .GoGetImport}}",
          "15:  <meta name=\"go-import\" content=\"{{.GoGetImport}} git {{.CloneLink.HTTPS}}\">",
          "16:  <meta name=\"go-source\" content=\"{{.GoGetImport}} _ {{.GoDocDirectory}} {{.GoDocFile}}\">",
          "17: {{end}}",
          "18:  <script>",
          "19:   <!-- /* eslint-disable */ -->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: {{end}}",
          "18: {{if .FeedURL}}",
          "19:  <link rel=\"alternate\" type=\"application/atom+xml\" title=\"\" href=\"{{.FeedURL}}.atom\">",
          "20:  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"\" href=\"{{.FeedURL}}.rss\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e5c844a7758fa29126d201f4f98bf21bca6d314",
      "candidate_info": {
        "commit_hash": "3e5c844a7758fa29126d201f4f98bf21bca6d314",
        "repo": "go-gitea/gitea",
        "commit_url": "https://github.com/go-gitea/gitea/commit/3e5c844a7758fa29126d201f4f98bf21bca6d314",
        "files": [
          "modules/auth/pam/pam.go"
        ],
        "message": "fix pam authorization (#19040) (#19047)\n\nBackport #19040 \n\nThe PAM module has previously only checked the results of the authentication module.\n\nHowever, in normal PAM practice most users will expect account module authorization to also be checked. Without doing this check in almost every configuration expired accounts and accounts with expired passwords will still be able to login.\n\nThis is likely to represent a significant gotcha in most configurations and cause most users configurations to be potentially insecure. Therefore we should add in the account authorization check.\n\n## :warning: **BREAKING** :warning: \n\nUsers of the PAM module who rely on account modules not being checked will need to change their PAM configuration.\n\nHowever, as it is likely that the vast majority of users of PAM will be expecting account authorization to be checked in addition to authentication we should make this breaking change to make the default behaviour correct for the majority.\n\n---\n\nI suggest we backport this despite the BREAKING nature because of the surprising nature of this.\n\nThanks to @ysf for bringing this to our attention.\n\n\nCo-authored-by: zeripath <art27@cantab.net>\nCo-authored-by: ysf <34326+ysf@users.noreply.github.com>",
        "before_after_code_files": [
          "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
          ],
          "candidate": [
            "modules/auth/pam/pam.go||modules/auth/pam/pam.go"
          ]
        }
      },
      "candidate_diff": {
        "modules/auth/pam/pam.go||modules/auth/pam/pam.go": [
          "File: modules/auth/pam/pam.go -> modules/auth/pam/pam.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  if err = t.Authenticate(0); err != nil {",
          "36:   return \"\", err",
          "37:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  if err = t.AcctMgmt(0); err != nil {",
          "40:    return \"\", err",
          "41:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}