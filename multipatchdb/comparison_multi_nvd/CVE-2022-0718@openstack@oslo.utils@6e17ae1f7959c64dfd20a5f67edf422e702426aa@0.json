{
  "cve_id": "CVE-2022-0718",
  "cve_desc": "A flaw was found in python-oslo-utils. Due to improper parsing, passwords with a double quote ( \" ) in them cause incorrect masking in debug logs, causing any part of the password after the double quote to be plaintext.",
  "repo": "openstack/oslo.utils",
  "patch_hash": "6e17ae1f7959c64dfd20a5f67edf422e702426aa",
  "patch_info": {
    "commit_hash": "6e17ae1f7959c64dfd20a5f67edf422e702426aa",
    "repo": "openstack/oslo.utils",
    "commit_url": "https://github.com/openstack/oslo.utils/commit/6e17ae1f7959c64dfd20a5f67edf422e702426aa",
    "files": [
      "oslo_utils/strutils.py",
      "oslo_utils/tests/test_strutils.py",
      "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
    ],
    "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2",
    "before_after_code_files": [
      "oslo_utils/strutils.py||oslo_utils/strutils.py",
      "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
    ]
  },
  "patch_diff": {
    "oslo_utils/strutils.py||oslo_utils/strutils.py": [
      "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "73: # for XML and JSON automatically.",
      "74: _SANITIZE_PATTERNS_2 = {}",
      "75: _SANITIZE_PATTERNS_1 = {}",
      "77: # NOTE(amrith): Some regular expressions have only one parameter, some",
      "78: # have two parameters. Use different lists of patterns here.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: _SANITIZE_PATTERNS_WILDCARD = {}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
      "89:                       r'\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
      "90:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
      "92: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
      "93: # need to apply the substitutions for keys we find using a quick \"in\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95: for key in _SANITIZE_KEYS:",
      "96:     _SANITIZE_PATTERNS_1[key] = []",
      "97:     _SANITIZE_PATTERNS_2[key] = []",
      "99:     for pattern in _FORMAT_PATTERNS_2:",
      "100:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "104:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
      "105:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
      "108: def int_from_bool_as_string(subject):",
      "109:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
      "111:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
      "112:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "332:     substitute1 = r'\\g<1>' + secret",
      "333:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
      "335:     # NOTE(ldbragst): Check to see if anything in message contains any key",
      "336:     # specified in _SANITIZE_KEYS, if not then just return the message since",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "341:     substitute_wildcard = r'\\g<1>'",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341:                 message = re.sub(pattern, substitute2, message)",
      "342:             for pattern in _SANITIZE_PATTERNS_1[key]:",
      "343:                 message = re.sub(pattern, substitute1, message)",
      "345:     return message",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "352:             # NOTE(hberaud): Those case are poorly handled by previous",
      "353:             # patterns. They are passwords with quotes or double quotes.",
      "354:             # They also needs a different way to substitute group this is why",
      "355:             # they aren't fix in the pattern 1 or 2.",
      "356:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
      "357:                 message = re.sub(pattern, substitute_wildcard, message)",
      "",
      "---------------"
    ],
    "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
      "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "607:         expected = 'test = \"param1\" : \"value\"'",
      "608:         self.assertEqual(expected, strutils.mask_password(payload))",
      "610:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
      "611:         payload = str(payload)",
      "612:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
      "613:         self.assertEqual(expected, strutils.mask_password(payload))",
      "615:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
      "616:         payload = str(payload)",
      "617:         expected = \"\"\"{'token':'***'}\"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "610:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
      "611:         expected = 'test = \"original_password\" : \"***\"'",
      "612:         self.assertEqual(expected, strutils.mask_password(payload))",
      "619:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
      "620:         payload = str(payload)",
      "621:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
      "622:         self.assertEqual(expected, strutils.mask_password(payload))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "687:         self.assertEqual(expected,",
      "688:                          strutils.mask_dict_password(payload))",
      "690:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
      "691:         expected = {'user': 'admin', 'password': '***'}",
      "692:         self.assertEqual(expected,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "699:         payload = {'password': 'TL0Ef\"N33'}",
      "700:         expected = {'password': '***'}",
      "701:         self.assertEqual(expected,",
      "702:                          strutils.mask_dict_password(payload))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e9dfa3408a6fac7e870a9b86ee774b5fd71a595",
      "candidate_info": {
        "commit_hash": "5e9dfa3408a6fac7e870a9b86ee774b5fd71a595",
        "repo": "openstack/oslo.utils",
        "commit_url": "https://github.com/openstack/oslo.utils/commit/5e9dfa3408a6fac7e870a9b86ee774b5fd71a595",
        "files": [
          "oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py",
          "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
        ],
        "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2\n(cherry picked from commit 6e17ae1f7959c64dfd20a5f67edf422e702426aa)\n(cherry picked from commit 5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba)\n(cherry picked from commit 143d3fbfa1e04778884de5acc08fa6f7fdabb265)\n(cherry picked from commit 65aa4226d4bf286468da6df6759e364c1eb3e049)",
        "before_after_code_files": [
          "oslo_utils/strutils.py||oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ],
          "candidate": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ]
        }
      },
      "candidate_diff": {
        "oslo_utils/strutils.py||oslo_utils/strutils.py": [
          "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: # for XML and JSON automatically.",
          "75: _SANITIZE_PATTERNS_2 = {}",
          "76: _SANITIZE_PATTERNS_1 = {}",
          "78: # NOTE(amrith): Some regular expressions have only one parameter, some",
          "79: # have two parameters. Use different lists of patterns here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: _SANITIZE_PATTERNS_WILDCARD = {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
          "90:                       r'\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
          "91:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
          "93: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
          "94: # need to apply the substitutions for keys we find using a quick \"in\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: for key in _SANITIZE_KEYS:",
          "97:     _SANITIZE_PATTERNS_1[key] = []",
          "98:     _SANITIZE_PATTERNS_2[key] = []",
          "100:     for pattern in _FORMAT_PATTERNS_2:",
          "101:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "106:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
          "109: def int_from_bool_as_string(subject):",
          "110:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
          "112:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "113:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:     substitute1 = r'\\g<1>' + secret",
          "334:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
          "336:     # NOTE(ldbragst): Check to see if anything in message contains any key",
          "337:     # specified in _SANITIZE_KEYS, if not then just return the message since",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     substitute_wildcard = r'\\g<1>'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "342:                 message = re.sub(pattern, substitute2, message)",
          "343:             for pattern in _SANITIZE_PATTERNS_1[key]:",
          "344:                 message = re.sub(pattern, substitute1, message)",
          "346:     return message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:             # NOTE(hberaud): Those case are poorly handled by previous",
          "354:             # patterns. They are passwords with quotes or double quotes.",
          "355:             # They also needs a different way to substitute group this is why",
          "356:             # they aren't fix in the pattern 1 or 2.",
          "357:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
          "358:                 message = re.sub(pattern, substitute_wildcard, message)",
          "",
          "---------------"
        ],
        "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
          "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:         expected = 'test = \"param1\" : \"value\"'",
          "619:         self.assertEqual(expected, strutils.mask_password(payload))",
          "621:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
          "622:         payload = six.text_type(payload)",
          "623:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "624:         self.assertEqual(expected, strutils.mask_password(payload))",
          "626:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
          "627:         payload = six.text_type(payload)",
          "628:         expected = \"\"\"{'token':'***'}\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
          "622:         expected = 'test = \"original_password\" : \"***\"'",
          "623:         self.assertEqual(expected, strutils.mask_password(payload))",
          "630:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
          "631:         payload = str(payload)",
          "632:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "633:         self.assertEqual(expected, strutils.mask_password(payload))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:         self.assertEqual(expected,",
          "699:                          strutils.mask_dict_password(payload))",
          "701:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
          "702:         expected = {'user': 'admin', 'password': '***'}",
          "703:         self.assertEqual(expected,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:         payload = {'password': 'TL0Ef\"N33'}",
          "711:         expected = {'password': '***'}",
          "712:         self.assertEqual(expected,",
          "713:                          strutils.mask_dict_password(payload))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65aa4226d4bf286468da6df6759e364c1eb3e049",
      "candidate_info": {
        "commit_hash": "65aa4226d4bf286468da6df6759e364c1eb3e049",
        "repo": "openstack/oslo.utils",
        "commit_url": "https://github.com/openstack/oslo.utils/commit/65aa4226d4bf286468da6df6759e364c1eb3e049",
        "files": [
          "oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py",
          "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
        ],
        "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2\n(cherry picked from commit 6e17ae1f7959c64dfd20a5f67edf422e702426aa)\n(cherry picked from commit 5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba)\n(cherry picked from commit 143d3fbfa1e04778884de5acc08fa6f7fdabb265)",
        "before_after_code_files": [
          "oslo_utils/strutils.py||oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ],
          "candidate": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ]
        }
      },
      "candidate_diff": {
        "oslo_utils/strutils.py||oslo_utils/strutils.py": [
          "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: # for XML and JSON automatically.",
          "75: _SANITIZE_PATTERNS_2 = {}",
          "76: _SANITIZE_PATTERNS_1 = {}",
          "78: # NOTE(amrith): Some regular expressions have only one parameter, some",
          "79: # have two parameters. Use different lists of patterns here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: _SANITIZE_PATTERNS_WILDCARD = {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
          "90:                       r'\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
          "91:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
          "93: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
          "94: # need to apply the substitutions for keys we find using a quick \"in\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: for key in _SANITIZE_KEYS:",
          "97:     _SANITIZE_PATTERNS_1[key] = []",
          "98:     _SANITIZE_PATTERNS_2[key] = []",
          "100:     for pattern in _FORMAT_PATTERNS_2:",
          "101:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "106:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
          "109: def int_from_bool_as_string(subject):",
          "110:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
          "112:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "113:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:     substitute1 = r'\\g<1>' + secret",
          "334:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
          "336:     # NOTE(ldbragst): Check to see if anything in message contains any key",
          "337:     # specified in _SANITIZE_KEYS, if not then just return the message since",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     substitute_wildcard = r'\\g<1>'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "342:                 message = re.sub(pattern, substitute2, message)",
          "343:             for pattern in _SANITIZE_PATTERNS_1[key]:",
          "344:                 message = re.sub(pattern, substitute1, message)",
          "346:     return message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:             # NOTE(hberaud): Those case are poorly handled by previous",
          "354:             # patterns. They are passwords with quotes or double quotes.",
          "355:             # They also needs a different way to substitute group this is why",
          "356:             # they aren't fix in the pattern 1 or 2.",
          "357:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
          "358:                 message = re.sub(pattern, substitute_wildcard, message)",
          "",
          "---------------"
        ],
        "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
          "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:         expected = 'test = \"param1\" : \"value\"'",
          "619:         self.assertEqual(expected, strutils.mask_password(payload))",
          "621:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
          "622:         payload = six.text_type(payload)",
          "623:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "624:         self.assertEqual(expected, strutils.mask_password(payload))",
          "626:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
          "627:         payload = six.text_type(payload)",
          "628:         expected = \"\"\"{'token':'***'}\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
          "622:         expected = 'test = \"original_password\" : \"***\"'",
          "623:         self.assertEqual(expected, strutils.mask_password(payload))",
          "630:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
          "631:         payload = str(payload)",
          "632:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "633:         self.assertEqual(expected, strutils.mask_password(payload))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:         self.assertEqual(expected,",
          "699:                          strutils.mask_dict_password(payload))",
          "701:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
          "702:         expected = {'user': 'admin', 'password': '***'}",
          "703:         self.assertEqual(expected,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710:         payload = {'password': 'TL0Ef\"N33'}",
          "711:         expected = {'password': '***'}",
          "712:         self.assertEqual(expected,",
          "713:                          strutils.mask_dict_password(payload))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "473f300b07641d79d5253208a4058e773857bec5",
      "candidate_info": {
        "commit_hash": "473f300b07641d79d5253208a4058e773857bec5",
        "repo": "openstack/oslo.utils",
        "commit_url": "https://github.com/openstack/oslo.utils/commit/473f300b07641d79d5253208a4058e773857bec5",
        "files": [
          "oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py",
          "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
        ],
        "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2\n(cherry picked from commit 6e17ae1f7959c64dfd20a5f67edf422e702426aa)\n(cherry picked from commit 5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba)\n(cherry picked from commit 143d3fbfa1e04778884de5acc08fa6f7fdabb265)\n(cherry picked from commit 65aa4226d4bf286468da6df6759e364c1eb3e049)\n(cherry picked from commit 5e9dfa3408a6fac7e870a9b86ee774b5fd71a595)",
        "before_after_code_files": [
          "oslo_utils/strutils.py||oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ],
          "candidate": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ]
        }
      },
      "candidate_diff": {
        "oslo_utils/strutils.py||oslo_utils/strutils.py": [
          "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: # for XML and JSON automatically.",
          "75: _SANITIZE_PATTERNS_2 = {}",
          "76: _SANITIZE_PATTERNS_1 = {}",
          "78: # NOTE(amrith): Some regular expressions have only one parameter, some",
          "79: # have two parameters. Use different lists of patterns here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: _SANITIZE_PATTERNS_WILDCARD = {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
          "90:                       '\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
          "91:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
          "93: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
          "94: # need to apply the substitutions for keys we find using a quick \"in\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96: for key in _SANITIZE_KEYS:",
          "97:     _SANITIZE_PATTERNS_1[key] = []",
          "98:     _SANITIZE_PATTERNS_2[key] = []",
          "100:     for pattern in _FORMAT_PATTERNS_2:",
          "101:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "106:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
          "109: def int_from_bool_as_string(subject):",
          "110:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
          "112:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "113:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:     substitute1 = r'\\g<1>' + secret",
          "334:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
          "336:     # NOTE(ldbragst): Check to see if anything in message contains any key",
          "337:     # specified in _SANITIZE_KEYS, if not then just return the message since",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     substitute_wildcard = r'\\g<1>'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "342:                 message = re.sub(pattern, substitute2, message)",
          "343:             for pattern in _SANITIZE_PATTERNS_1[key]:",
          "344:                 message = re.sub(pattern, substitute1, message)",
          "346:     return message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:             # NOTE(hberaud): Those case are poorly handled by previous",
          "354:             # patterns. They are passwords with quotes or double quotes.",
          "355:             # They also needs a different way to substitute group this is why",
          "356:             # they aren't fix in the pattern 1 or 2.",
          "357:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
          "358:                 message = re.sub(pattern, substitute_wildcard, message)",
          "",
          "---------------"
        ],
        "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
          "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:         expected = 'test = \"param1\" : \"value\"'",
          "618:         self.assertEqual(expected, strutils.mask_password(payload))",
          "620:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
          "621:         payload = six.text_type(payload)",
          "622:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "623:         self.assertEqual(expected, strutils.mask_password(payload))",
          "625:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
          "626:         payload = six.text_type(payload)",
          "627:         expected = \"\"\"{'token':'***'}\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
          "621:         expected = 'test = \"original_password\" : \"***\"'",
          "622:         self.assertEqual(expected, strutils.mask_password(payload))",
          "629:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
          "630:         payload = str(payload)",
          "631:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "632:         self.assertEqual(expected, strutils.mask_password(payload))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "697:         self.assertEqual(expected,",
          "698:                          strutils.mask_dict_password(payload))",
          "700:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
          "701:         expected = {'user': 'admin', 'password': '***'}",
          "702:         self.assertEqual(expected,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709:         payload = {'password': 'TL0Ef\"N33'}",
          "710:         expected = {'password': '***'}",
          "711:         self.assertEqual(expected,",
          "712:                          strutils.mask_dict_password(payload))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "143d3fbfa1e04778884de5acc08fa6f7fdabb265",
      "candidate_info": {
        "commit_hash": "143d3fbfa1e04778884de5acc08fa6f7fdabb265",
        "repo": "openstack/oslo.utils",
        "commit_url": "https://github.com/openstack/oslo.utils/commit/143d3fbfa1e04778884de5acc08fa6f7fdabb265",
        "files": [
          "oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py",
          "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
        ],
        "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2\n(cherry picked from commit 6e17ae1f7959c64dfd20a5f67edf422e702426aa)\n(cherry picked from commit 5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba)",
        "before_after_code_files": [
          "oslo_utils/strutils.py||oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ],
          "candidate": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ]
        }
      },
      "candidate_diff": {
        "oslo_utils/strutils.py||oslo_utils/strutils.py": [
          "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: # for XML and JSON automatically.",
          "74: _SANITIZE_PATTERNS_2 = {}",
          "75: _SANITIZE_PATTERNS_1 = {}",
          "77: # NOTE(amrith): Some regular expressions have only one parameter, some",
          "78: # have two parameters. Use different lists of patterns here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: _SANITIZE_PATTERNS_WILDCARD = {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
          "89:                       r'\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
          "90:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
          "92: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
          "93: # need to apply the substitutions for keys we find using a quick \"in\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: for key in _SANITIZE_KEYS:",
          "96:     _SANITIZE_PATTERNS_1[key] = []",
          "97:     _SANITIZE_PATTERNS_2[key] = []",
          "99:     for pattern in _FORMAT_PATTERNS_2:",
          "100:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "105:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
          "108: def int_from_bool_as_string(subject):",
          "109:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
          "111:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "112:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332:     substitute1 = r'\\g<1>' + secret",
          "333:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
          "335:     # NOTE(ldbragst): Check to see if anything in message contains any key",
          "336:     # specified in _SANITIZE_KEYS, if not then just return the message since",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     substitute_wildcard = r'\\g<1>'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "341:                 message = re.sub(pattern, substitute2, message)",
          "342:             for pattern in _SANITIZE_PATTERNS_1[key]:",
          "343:                 message = re.sub(pattern, substitute1, message)",
          "345:     return message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:             # NOTE(hberaud): Those case are poorly handled by previous",
          "353:             # patterns. They are passwords with quotes or double quotes.",
          "354:             # They also needs a different way to substitute group this is why",
          "355:             # they aren't fix in the pattern 1 or 2.",
          "356:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
          "357:                 message = re.sub(pattern, substitute_wildcard, message)",
          "",
          "---------------"
        ],
        "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
          "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "612:         expected = 'test = \"param1\" : \"value\"'",
          "613:         self.assertEqual(expected, strutils.mask_password(payload))",
          "615:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
          "616:         payload = str(payload)",
          "617:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "618:         self.assertEqual(expected, strutils.mask_password(payload))",
          "620:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
          "621:         payload = str(payload)",
          "622:         expected = \"\"\"{'token':'***'}\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
          "616:         expected = 'test = \"original_password\" : \"***\"'",
          "617:         self.assertEqual(expected, strutils.mask_password(payload))",
          "624:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
          "625:         payload = str(payload)",
          "626:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "627:         self.assertEqual(expected, strutils.mask_password(payload))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:         self.assertEqual(expected,",
          "693:                          strutils.mask_dict_password(payload))",
          "695:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
          "696:         expected = {'user': 'admin', 'password': '***'}",
          "697:         self.assertEqual(expected,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:         payload = {'password': 'TL0Ef\"N33'}",
          "705:         expected = {'password': '***'}",
          "706:         self.assertEqual(expected,",
          "707:                          strutils.mask_dict_password(payload))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba",
      "candidate_info": {
        "commit_hash": "5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba",
        "repo": "openstack/oslo.utils",
        "commit_url": "https://github.com/openstack/oslo.utils/commit/5ce8a7f0f8ecec7a85a23ec3d7a7fb1cad14ceba",
        "files": [
          "oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py",
          "releasenotes/notes/fix_mask_password_regex-c0661f95a23369a4.yaml"
        ],
        "message": "Fix regex used to mask password\n\nSome use cases are poorly handled by the regex used\nto mask password. Indeed when the password contains\nquotes or double quotes in the middle such as `pass\"word`,\nthe mask_password method will return `***\"word`.\n\nFor more details please see\nhttps://bugs.launchpad.net/oslo.utils/+bug/1949623\n\nCloses-Bug: #1949623\nChange-Id: I941750b4d49d2d75f0831b24d6dd17f4040f70a2\n(cherry picked from commit 6e17ae1f7959c64dfd20a5f67edf422e702426aa)",
        "before_after_code_files": [
          "oslo_utils/strutils.py||oslo_utils/strutils.py",
          "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ],
          "candidate": [
            "oslo_utils/strutils.py||oslo_utils/strutils.py",
            "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py"
          ]
        }
      },
      "candidate_diff": {
        "oslo_utils/strutils.py||oslo_utils/strutils.py": [
          "File: oslo_utils/strutils.py -> oslo_utils/strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: # for XML and JSON automatically.",
          "74: _SANITIZE_PATTERNS_2 = {}",
          "75: _SANITIZE_PATTERNS_1 = {}",
          "77: # NOTE(amrith): Some regular expressions have only one parameter, some",
          "78: # have two parameters. Use different lists of patterns here.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: _SANITIZE_PATTERNS_WILDCARD = {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:                       r'([\\'\"][^\\'\"]*%(key)s[0-9]*[\\'\"]\\s*,\\s*\\'--?[A-z]+'",
          "89:                       r'\\'\\s*,\\s*u?[\\'\"])[^\\\"\\']*([\\'\"])',",
          "90:                       r'(%(key)s[0-9]*\\s*--?[A-z]+\\s*)\\S+(\\s*)']",
          "92: # NOTE(dhellmann): Keep a separate list of patterns by key so we only",
          "93: # need to apply the substitutions for keys we find using a quick \"in\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: _FORMAT_PATTERNS_WILDCARD = [r'([\\'\\\"][^\\\"\\']*%(key)s[0-9]*[\\'\\\"]\\s*:\\s*u?[\\'\\\"].*[\\'\\\"])[^\\\"\\']*([\\'\\\"])']  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: for key in _SANITIZE_KEYS:",
          "96:     _SANITIZE_PATTERNS_1[key] = []",
          "97:     _SANITIZE_PATTERNS_2[key] = []",
          "99:     for pattern in _FORMAT_PATTERNS_2:",
          "100:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     _SANITIZE_PATTERNS_WILDCARD[key] = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "105:         _SANITIZE_PATTERNS_1[key].append(reg_ex)",
          "108: def int_from_bool_as_string(subject):",
          "109:     \"\"\"Interpret a string as a boolean and return either 1 or 0.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:     for pattern in _FORMAT_PATTERNS_WILDCARD:",
          "111:         reg_ex = re.compile(pattern % {'key': key}, re.DOTALL | re.IGNORECASE)",
          "112:         _SANITIZE_PATTERNS_WILDCARD[key].append(reg_ex)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "332:     substitute1 = r'\\g<1>' + secret",
          "333:     substitute2 = r'\\g<1>' + secret + r'\\g<2>'",
          "335:     # NOTE(ldbragst): Check to see if anything in message contains any key",
          "336:     # specified in _SANITIZE_KEYS, if not then just return the message since",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     substitute_wildcard = r'\\g<1>'",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "341:                 message = re.sub(pattern, substitute2, message)",
          "342:             for pattern in _SANITIZE_PATTERNS_1[key]:",
          "343:                 message = re.sub(pattern, substitute1, message)",
          "345:     return message",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:             # NOTE(hberaud): Those case are poorly handled by previous",
          "353:             # patterns. They are passwords with quotes or double quotes.",
          "354:             # They also needs a different way to substitute group this is why",
          "355:             # they aren't fix in the pattern 1 or 2.",
          "356:             for pattern in _SANITIZE_PATTERNS_WILDCARD[key]:",
          "357:                 message = re.sub(pattern, substitute_wildcard, message)",
          "",
          "---------------"
        ],
        "oslo_utils/tests/test_strutils.py||oslo_utils/tests/test_strutils.py": [
          "File: oslo_utils/tests/test_strutils.py -> oslo_utils/tests/test_strutils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         expected = 'test = \"param1\" : \"value\"'",
          "608:         self.assertEqual(expected, strutils.mask_password(payload))",
          "610:         payload = \"\"\"{'adminPass':'TL0EfN33'}\"\"\"",
          "611:         payload = str(payload)",
          "612:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "613:         self.assertEqual(expected, strutils.mask_password(payload))",
          "615:         payload = \"\"\"{'token':'mytoken'}\"\"\"",
          "616:         payload = str(payload)",
          "617:         expected = \"\"\"{'token':'***'}\"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "610:         payload = 'test = \"original_password\" : \"aaaaa\"aaaa\"'",
          "611:         expected = 'test = \"original_password\" : \"***\"'",
          "612:         self.assertEqual(expected, strutils.mask_password(payload))",
          "619:         payload = \"\"\"{'adminPass':'TL0E'fN33'}\"\"\"",
          "620:         payload = str(payload)",
          "621:         expected = \"\"\"{'adminPass':'***'}\"\"\"",
          "622:         self.assertEqual(expected, strutils.mask_password(payload))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "687:         self.assertEqual(expected,",
          "688:                          strutils.mask_dict_password(payload))",
          "690:         payload = {'user': 'admin', 'password': 'TL0EfN33'}",
          "691:         expected = {'user': 'admin', 'password': '***'}",
          "692:         self.assertEqual(expected,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699:         payload = {'password': 'TL0Ef\"N33'}",
          "700:         expected = {'password': '***'}",
          "701:         self.assertEqual(expected,",
          "702:                          strutils.mask_dict_password(payload))",
          "",
          "---------------"
        ]
      }
    }
  ]
}