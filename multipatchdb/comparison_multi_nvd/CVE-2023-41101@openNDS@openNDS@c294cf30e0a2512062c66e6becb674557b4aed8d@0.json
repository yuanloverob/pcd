{
  "cve_id": "CVE-2023-41101",
  "cve_desc": "An issue was discovered in the captive portal in OpenNDS before version 10.1.3. get_query in http_microhttpd.c does not validate the length of the query string of GET requests. This leads to a stack-based buffer overflow in versions 9.x and earlier, and to a heap-based buffer overflow in versions 10.x and later. Attackers may exploit the issue to crash OpenNDS (Denial-of-Service condition) or to inject and execute arbitrary bytecode (Remote Code Execution). Affected OpenNDS before version 10.1.3 fixed in OpenWrt master and OpenWrt 23.05 on 23. November by updating OpenNDS to version 10.2.0.",
  "repo": "openNDS/openNDS",
  "patch_hash": "c294cf30e0a2512062c66e6becb674557b4aed8d",
  "patch_info": {
    "commit_hash": "c294cf30e0a2512062c66e6becb674557b4aed8d",
    "repo": "openNDS/openNDS",
    "commit_url": "https://github.com/openNDS/openNDS/commit/c294cf30e0a2512062c66e6becb674557b4aed8d",
    "files": [
      "src/http_microhttpd.c"
    ],
    "message": "Fix - Buffer overflow causing segfault - CVE-2023-41101\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
    "before_after_code_files": [
      "src/http_microhttpd.c||src/http_microhttpd.c"
    ]
  },
  "patch_diff": {
    "src/http_microhttpd.c||src/http_microhttpd.c": [
      "File: src/http_microhttpd.c -> src/http_microhttpd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "977:  int ret;",
      "978:  struct MHD_Response *response;",
      "1043:  }",
      "1044: }",
      "",
      "[Removed Lines]",
      "980:  preauthpath = safe_calloc(SMALL_BUF);",
      "981:  safe_asprintf(&preauthpath, \"/%s/\", config->preauthdir);",
      "983:  if (strcmp(preauthpath, config->fas_path) == 0) {",
      "984:   free (preauthpath);",
      "986:   user_agent = safe_calloc(USER_AGENT);",
      "987:   enc_user_agent = safe_calloc(ENC_USER_AGENT);",
      "989:   MHD_get_connection_values(connection, MHD_HEADER_KIND, get_user_agent_callback, &user_agent);",
      "991:   if (user_agent == NULL) {",
      "992:    return send_error(connection, 403);",
      "993:   }",
      "995:   uh_urlencode(enc_user_agent, ENC_USER_AGENT, user_agent, strlen(user_agent));",
      "996:   debug(LOG_DEBUG, \"PreAuth: Encoded User Agent is [ %s ]\", enc_user_agent);",
      "998:   enc_query = safe_calloc(ENC_QUERYSTR);",
      "999:   uh_urlencode(enc_query, ENC_QUERYSTR, query, strlen(query));",
      "1000:   debug(LOG_DEBUG, \"PreAuth: Encoded query: %s\", enc_query);",
      "1002:   msg = safe_calloc(HTMLMAXSIZE);",
      "1004:   if (!msg) {",
      "1005:    ret = send_error(connection, 503);",
      "1006:    free(msg);",
      "1007:    free(enc_user_agent);",
      "1008:    free(enc_query);",
      "1009:    return ret;",
      "1010:   }",
      "1012:   cmd = safe_calloc(QUERYMAXLEN);",
      "1013:   safe_asprintf(&cmd, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
      "1014:   rc = execute_ret_url_encoded(msg, HTMLMAXSIZE - 1, cmd);",
      "1015:   free(cmd);",
      "1017:   if (rc != 0) {",
      "1018:    debug(LOG_WARNING, \"Preauth script - failed to execute: %s, Query[%s]\", config->preauth, query);",
      "1019:    free(msg);",
      "1020:    free(enc_user_agent);",
      "1021:    free(enc_query);",
      "1023:    return send_error(connection, 511);",
      "1024:   }",
      "1027:   response = MHD_create_response_from_buffer(strlen(msg), (char *)msg, MHD_RESPMEM_MUST_FREE);",
      "1029:   if (!response) {",
      "1030:    return send_error(connection, 503);",
      "1031:   }",
      "1033:   MHD_add_response_header(response, \"Content-Type\", \"text/html; charset=utf-8\");",
      "1034:   ret = MHD_queue_response(connection, MHD_HTTP_OK, response);",
      "1035:   MHD_destroy_response(response);",
      "1037:   free(enc_user_agent);",
      "1038:   free(enc_query);",
      "1039:   return ret;",
      "1040:  } else {",
      "1041:   free (preauthpath);",
      "1042:   return send_error(connection, 404);",
      "",
      "[Added Lines]",
      "982:  if ( strlen(query) < 1 ) {",
      "984:   return send_error(connection, 511);",
      "985:  } else {",
      "986:   preauthpath = safe_calloc(SMALL_BUF);",
      "987:   safe_asprintf(&preauthpath, \"/%s/\", config->preauthdir);",
      "989:   if (strcmp(preauthpath, config->fas_path) == 0) {",
      "990:    free (preauthpath);",
      "992:    user_agent = safe_calloc(USER_AGENT);",
      "993:    debug(LOG_DEBUG, \"PreAuth: User Agent ptr is [ %d ]\", &user_agent);",
      "994:    enc_user_agent = safe_calloc(ENC_USER_AGENT);",
      "996:    MHD_get_connection_values(connection, MHD_HEADER_KIND, get_user_agent_callback, &user_agent);",
      "997:    debug(LOG_DEBUG, \"PreAuth: MHD User Agent ptr is [ %d ]\", &user_agent);",
      "999:    if (user_agent == NULL) {",
      "1000:     return send_error(connection, 403);",
      "1001:    }",
      "1003:    uh_urlencode(enc_user_agent, ENC_USER_AGENT, user_agent, strlen(user_agent));",
      "1004:    debug(LOG_DEBUG, \"PreAuth: Encoded User Agent is [ %s ]\", enc_user_agent);",
      "1006:    enc_query = safe_calloc(ENC_QUERYSTR);",
      "1007:    uh_urlencode(enc_query, ENC_QUERYSTR, query, strlen(query));",
      "1008:    debug(LOG_DEBUG, \"PreAuth: Encoded query: %s\", enc_query);",
      "1010:    msg = safe_calloc(HTMLMAXSIZE);",
      "1012:    if (!msg) {",
      "1013:     ret = send_error(connection, 503);",
      "1014:     free(msg);",
      "1015:     free(enc_user_agent);",
      "1016:     free(enc_query);",
      "1017:     return ret;",
      "1018:    }",
      "1020:    cmd = safe_calloc(QUERYMAXLEN);",
      "1021:    safe_asprintf(&cmd, \"%s '%s' '%s' '%d' '%s'\", config->preauth, enc_query, enc_user_agent, config->login_option_enabled, config->themespec_path);",
      "1022:    rc = execute_ret_url_encoded(msg, HTMLMAXSIZE - 1, cmd);",
      "1023:    free(cmd);",
      "1025:    if (rc != 0) {",
      "1026:     debug(LOG_WARNING, \"Preauth script - failed to execute: %s, Query[%s]\", config->preauth, query);",
      "1027:     free(msg);",
      "1028:     free(enc_user_agent);",
      "1029:     free(enc_query);",
      "1031:     return send_error(connection, 511);",
      "1032:    }",
      "1035:    response = MHD_create_response_from_buffer(strlen(msg), (char *)msg, MHD_RESPMEM_MUST_FREE);",
      "1037:    if (!response) {",
      "1038:     return send_error(connection, 503);",
      "1039:    }",
      "1041:    MHD_add_response_header(response, \"Content-Type\", \"text/html; charset=utf-8\");",
      "1042:    ret = MHD_queue_response(connection, MHD_HTTP_OK, response);",
      "1043:    MHD_destroy_response(response);",
      "1045:    free(enc_user_agent);",
      "1046:    free(enc_query);",
      "1047:    return ret;",
      "1048:   } else {",
      "1049:    free (preauthpath);",
      "1050:    return send_error(connection, 404);",
      "1051:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1740:  char *query_str;",
      "1741:  struct collect_query collect_query;",
      "1742:  int i;",
      "1744:  int length = 0;",
      "1746:  debug(LOG_DEBUG, \" Getting query, separator is [%s].\", separator);",
      "",
      "[Removed Lines]",
      "1743:  int j;",
      "",
      "[Added Lines]",
      "1753:  int j = 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1768:   if (i > 0) // q=foo&o=bar the '&' need also some space",
      "1769:    length++;",
      "1770:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1781:   debug(LOG_DEBUG, \" cumulative element length is [%d]\", length);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1788:   debug(LOG_DEBUG, \" element [%d] is [%s]\", i, elements[i]);",
      "1797:    }",
      "1802:    strncat(query_str, *query, QUERYMAXLEN - strlen(query_str));",
      "1803:   } else {",
      "1805:   }",
      "1807:   free(elements[i]);",
      "",
      "[Removed Lines]",
      "1790:   strncpy(*query + j, elements[i], length - j);",
      "1791:   if (i == 0) {",
      "1793:    strcpy(query_str, \"?\");",
      "1794:   } else {",
      "1795:    if (QUERYMAXLEN - strlen(query_str) > length - j + 1) {",
      "1796:     strncat(query_str, separator, QUERYMAXLEN - strlen(query_str));",
      "1798:   }",
      "1801:   if (QUERYMAXLEN - strlen(query_str) > length - j) {",
      "1804:    debug(LOG_WARNING, \" Query string exceeds the maximum of %d bytes so has been truncated.\", QUERYMAXLEN/2);",
      "",
      "[Added Lines]",
      "1802:   if (length + j < QUERYMAXLEN) {",
      "1804:    strncpy(*query + j, elements[i], length - j);",
      "1806:    if (i == 0) {",
      "1808:     strcpy(query_str, \"?\");",
      "1809:    } else {",
      "1810:     if (QUERYMAXLEN - strlen(query_str) > length - j + 1) {",
      "1811:      strncat(query_str, separator, QUERYMAXLEN - strlen(query_str));",
      "1812:     }",
      "1817:    debug(LOG_WARNING, \" Query string is too long, invalid or corrupt so is ignored.\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e04ea1f4a87e560dc840f38a0507847ca502e56",
      "candidate_info": {
        "commit_hash": "5e04ea1f4a87e560dc840f38a0507847ca502e56",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/5e04ea1f4a87e560dc840f38a0507847ca502e56",
        "files": [
          "src/conf.h"
        ],
        "message": "Add - set default fas remote fqdn to disabled\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "src/conf.h||src/conf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/openNDS/openNDS/pull/507"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/conf.h||src/conf.h": [
          "File: src/conf.h -> src/conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: #define DEFAULT_AUTHENTICATION_MARK \"0x00030000\"",
          "100: #define DEFAULT_FW_MARK_TRUSTED \"0x20000\"",
          "101: #define DEFAULT_THEMESPEC_PATH \"\"",
          "103: #define DEFAULT_FAS_REMOTEIP \"\"",
          "",
          "[Removed Lines]",
          "102: #define DEFAULT_FAS_REMOTEFQDN \"\"",
          "",
          "[Added Lines]",
          "102: #define DEFAULT_FAS_REMOTEFQDN \"disabled\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3a87796a5444b6bad7836a724ae676cb5e0b7c0",
      "candidate_info": {
        "commit_hash": "a3a87796a5444b6bad7836a724ae676cb5e0b7c0",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/a3a87796a5444b6bad7836a724ae676cb5e0b7c0",
        "files": [
          "src/http_microhttpd.c"
        ],
        "message": "Fix - missing free in show_preauth_page if MHD does not respond\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "src/http_microhttpd.c||src/http_microhttpd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/openNDS/openNDS/pull/507"
        ],
        "olp_code_files": {
          "patch": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ],
          "candidate": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/http_microhttpd.c||src/http_microhttpd.c": [
          "File: src/http_microhttpd.c -> src/http_microhttpd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1034:    response = MHD_create_response_from_buffer(strlen(msg), (char *)msg, MHD_RESPMEM_MUST_FREE);",
          "1036:    if (!response) {",
          "1037:     return send_error(connection, 503);",
          "1038:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1037:     free(msg);",
          "1038:     free(enc_user_agent);",
          "1039:     free(enc_query);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fff6cf64fc8567de9e4108c6fa50037487607459",
      "candidate_info": {
        "commit_hash": "fff6cf64fc8567de9e4108c6fa50037487607459",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/fff6cf64fc8567de9e4108c6fa50037487607459",
        "files": [
          "docs/source/conf.py",
          "linux_openwrt/opennds/Makefile",
          "src/conf.h"
        ],
        "message": "Bump to v10.1.3 for release\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "src/conf.h||src/conf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/openNDS/openNDS/pull/507"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/conf.h||src/conf.h": [
          "File: src/conf.h -> src/conf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #ifndef _CONF_H_",
          "31: #define _CONF_H_",
          "",
          "[Removed Lines]",
          "33: #define VERSION \"10.1.3beta\"",
          "",
          "[Added Lines]",
          "33: #define VERSION \"10.1.3\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "265:  char *authentication_mark;    //@brief Padded authentication mark",
          "266:  unsigned int fw_mark_trusted;    //@brief nftables mark for trusted packets",
          "267:  int ip6;      //@brief enable IPv6",
          "269:  char *preauth;      //@brief external preauthentication program",
          "270:  int lockfd;      //@brief ndsctl lockfile file descriptor",
          "271: } s_config;",
          "",
          "[Removed Lines]",
          "268:  char *binauth;      //@brief external authentication program",
          "",
          "[Added Lines]",
          "268:  char *binauth;      //@brief external postauthentication program",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6bf3d0a1fc591102371df32d14acdfa299c66442",
      "candidate_info": {
        "commit_hash": "6bf3d0a1fc591102371df32d14acdfa299c66442",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/6bf3d0a1fc591102371df32d14acdfa299c66442",
        "files": [
          "src/http_microhttpd.c"
        ],
        "message": "Fix - more safe_asprintf memory leaks\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "src/http_microhttpd.c||src/http_microhttpd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/openNDS/openNDS/pull/507"
        ],
        "olp_code_files": {
          "patch": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ],
          "candidate": [
            "src/http_microhttpd.c||src/http_microhttpd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/http_microhttpd.c||src/http_microhttpd.c": [
          "File: src/http_microhttpd.c -> src/http_microhttpd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:    return ret;",
          "812:   }",
          "816:   ret = send_redirect_temp(connection, client, redirect_to_us);",
          "817:   free (redirect_to_us);",
          "",
          "[Removed Lines]",
          "814:   safe_asprintf(&redirect_to_us, \"http://%s/\", config->gw_address);",
          "",
          "[Added Lines]",
          "814:   safe_snprintf(redirect_to_us, QUERYMAXLEN, \"http://%s/\", config->gw_address);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "842:    get_query(connection, &query, HTMLQUERYSEPARATOR);",
          "845:     config->fas_url,",
          "846:     query,",
          "847:     HTMLQUERYSEPARATOR",
          "",
          "[Removed Lines]",
          "844:    safe_asprintf(&fasurl, \"%s%s%sstatus=authenticated\",",
          "",
          "[Added Lines]",
          "844:    safe_snprintf(fasurl, QUERYMAXLEN, \"%s%s%sstatus=authenticated\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "889:    get_query(connection, &query, QUERYSEPARATOR);",
          "892:     query,",
          "893:     QUERYSEPARATOR",
          "894:    );",
          "",
          "[Removed Lines]",
          "891:    safe_asprintf(&fasurl, \"%s%sstatus=authenticated\",",
          "",
          "[Added Lines]",
          "891:    safe_snprintf(fasurl, QUERYMAXLEN, \"%s%sstatus=authenticated\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1068:   return ret;",
          "1069:  }",
          "1073:  debug(LOG_DEBUG, \"json string [%s],  buffer [%s]\", json, msg);",
          "",
          "[Removed Lines]",
          "1071:  safe_asprintf(&msg, \"%s\", json);",
          "",
          "[Added Lines]",
          "1071:  safe_snprintf(msg, SMALL_BUF * 2, \"%s\", json);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1084:  MHD_add_response_header(response, \"Content-Type\", \"application/captive+json\");",
          "1085:  ret = MHD_queue_response(connection, MHD_HTTP_OK, response);",
          "1086:  MHD_destroy_response(response);",
          "1087:  return ret;",
          "1089: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1087:  free(msg);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1174:    return ret;",
          "1175:   }",
          "1179:   debug(LOG_DEBUG, \"captive_json [%s]\", captive_json);",
          "1180:   ret = send_json(connection, captive_json);",
          "",
          "[Removed Lines]",
          "1177:   safe_asprintf(&captive_json, \"{ \\\"captive\\\": true, \\\"user-portal-url\\\": \\\"%s%s\\\" }\", config->fas_url, querystr);",
          "",
          "[Added Lines]",
          "1178:   safe_snprintf(captive_json, QUERYMAXLEN, \"{ \\\"captive\\\": true, \\\"user-portal-url\\\": \\\"%s%s\\\" }\", config->fas_url, querystr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a04c11ee774c9ff61223f563fc5bebecf4a45551",
      "candidate_info": {
        "commit_hash": "a04c11ee774c9ff61223f563fc5bebecf4a45551",
        "repo": "openNDS/openNDS",
        "commit_url": "https://github.com/openNDS/openNDS/commit/a04c11ee774c9ff61223f563fc5bebecf4a45551",
        "files": [
          "forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh",
          "forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh",
          "forward_authentication_service/PreAuth/theme_user-email-login-basic.sh",
          "forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh"
        ],
        "message": "Fix - ensure gatewayurl is urldecoded to fix broken css and images in themespec\n\nSigned-off-by: Rob White <rob@blue-wave.net>",
        "before_after_code_files": [
          "forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh||forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh",
          "forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh||forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh",
          "forward_authentication_service/PreAuth/theme_user-email-login-basic.sh||forward_authentication_service/PreAuth/theme_user-email-login-basic.sh",
          "forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh||forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/openNDS/openNDS/pull/507"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh||forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh": [
          "File: forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh -> forward_authentication_service/PreAuth/theme_click-to-continue-basic.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: header() {",
          "20: # Define a common header html for every page served",
          "21:  echo \"<!DOCTYPE html>",
          "22:   <html>",
          "23:   <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  gatewayurl=$(printf \"${gatewayurl//%/\\\\x}\")",
          "",
          "---------------"
        ],
        "forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh||forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh": [
          "File: forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh -> forward_authentication_service/PreAuth/theme_click-to-continue-custom-placeholders.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: header() {",
          "38: # Define a common header html for every page served",
          "39:  echo \"<!DOCTYPE html>",
          "40:   <html>",
          "41:   <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  gatewayurl=$(printf \"${gatewayurl//%/\\\\x}\")",
          "",
          "---------------"
        ],
        "forward_authentication_service/PreAuth/theme_user-email-login-basic.sh||forward_authentication_service/PreAuth/theme_user-email-login-basic.sh": [
          "File: forward_authentication_service/PreAuth/theme_user-email-login-basic.sh -> forward_authentication_service/PreAuth/theme_user-email-login-basic.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: header() {",
          "20: # Define a common header html for every page served",
          "21:  echo \"<!DOCTYPE html>",
          "22:   <html>",
          "23:   <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  gatewayurl=$(printf \"${gatewayurl//%/\\\\x}\")",
          "",
          "---------------"
        ],
        "forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh||forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh": [
          "File: forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh -> forward_authentication_service/PreAuth/theme_user-email-login-custom-placeholders.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: header() {",
          "39: # Define a common header html for every page served",
          "40:  echo \"<!DOCTYPE html>",
          "41:   <html>",
          "42:   <head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  gatewayurl=$(printf \"${gatewayurl//%/\\\\x}\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}