{
  "cve_id": "CVE-2020-28491",
  "cve_desc": "This affects the package com.fasterxml.jackson.dataformat:jackson-dataformat-cbor from 0 and before 2.11.4, from 2.12.0-rc1 and before 2.12.1. Unchecked allocation of byte buffer can cause a java.lang.OutOfMemoryError exception.",
  "repo": "FasterXML/jackson-dataformats-binary",
  "patch_hash": "de072d314af8f5f269c8abec6930652af67bc8e6",
  "patch_info": {
    "commit_hash": "de072d314af8f5f269c8abec6930652af67bc8e6",
    "repo": "FasterXML/jackson-dataformats-binary",
    "commit_url": "https://github.com/FasterXML/jackson-dataformats-binary/commit/de072d314af8f5f269c8abec6930652af67bc8e6",
    "files": [
      "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java",
      "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
      "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java",
      "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java",
      "release-notes/CREDITS-2.x",
      "release-notes/VERSION-2.x"
    ],
    "message": "Fix eager allocation aspect of #186",
    "before_after_code_files": [
      "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java",
      "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
      "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java",
      "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java"
    ]
  },
  "patch_diff": {
    "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java": [
      "File: cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java -> cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java"
    ],
    "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java": [
      "File: cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java -> cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:     private final static double MATH_POW_2_10 = Math.pow(2, 10);",
      "64:     private final static double MATH_POW_2_NEG14 = Math.pow(2, -14);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:     protected final static int LONGEST_NON_CHUNKED_BINARY = 250_000;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1706:         }",
      "1707:     }",
      "1710:     {",
      "1711:         int left = total;",
      "1712:         while (left > 0) {",
      "1713:             int avail = _inputEnd - _inputPtr;",
      "1714:             if (_inputPtr >= _inputEnd) {",
      "1716:                 avail = _inputEnd - _inputPtr;",
      "1717:             }",
      "1718:             int count = Math.min(avail, left);",
      "",
      "[Removed Lines]",
      "1709:     private int _readAndWriteBytes(OutputStream out, int total) throws IOException",
      "1715:                 loadMoreGuaranteed();",
      "",
      "[Added Lines]",
      "1713:     private int _readAndWriteBytes(OutputStream out, final int total) throws IOException",
      "1719:                 if (!loadMore()) {",
      "1720:                     _reportIncompleteBinaryRead(total, total-left);",
      "1721:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2426:         return _inputBuffer[_inputPtr++];",
      "2427:     }",
      "2429:     @SuppressWarnings(\"resource\")",
      "2430:     protected byte[] _finishBytes(int len) throws IOException",
      "2431:     {",
      "2434:             if (len == 0) {",
      "2435:                 return NO_BYTES;",
      "2436:             }",
      "2440:             }",
      "2452:             }",
      "2453:         }",
      "2456:         ByteArrayBuilder bb = _getByteArrayBuilder();",
      "2457:         while (true) {",
      "",
      "[Removed Lines]",
      "2433:         if (len >= 0) {",
      "2437:             byte[] b = new byte[len];",
      "2438:             if (_inputPtr >= _inputEnd) {",
      "2439:                 loadMoreGuaranteed();",
      "2441:             int ptr = 0;",
      "2442:             while (true) {",
      "2443:                 int toAdd = Math.min(len, _inputEnd - _inputPtr);",
      "2444:                 System.arraycopy(_inputBuffer, _inputPtr, b, ptr, toAdd);",
      "2445:                 _inputPtr += toAdd;",
      "2446:                 ptr += toAdd;",
      "2447:                 len -= toAdd;",
      "2448:                 if (len <= 0) {",
      "2449:                     return b;",
      "2450:                 }",
      "2451:                 loadMoreGuaranteed();",
      "",
      "[Added Lines]",
      "2444:         if (len <= 0) {",
      "2448:             return _finishChunkedBytes();",
      "2449:         }",
      "2451:         if (len > LONGEST_NON_CHUNKED_BINARY) {",
      "2453:             return _finishLongContiguousBytes(len);",
      "2454:         }",
      "2456:         final byte[] b = new byte[len];",
      "2457:         final int expLen = len;",
      "2458:         if (_inputPtr >= _inputEnd) {",
      "2459:             if (!loadMore()) {",
      "2460:                 _reportIncompleteBinaryRead(expLen, 0);",
      "2462:         }",
      "2464:         int ptr = 0;",
      "2465:         while (true) {",
      "2466:             int toAdd = Math.min(len, _inputEnd - _inputPtr);",
      "2467:             System.arraycopy(_inputBuffer, _inputPtr, b, ptr, toAdd);",
      "2468:             _inputPtr += toAdd;",
      "2469:             ptr += toAdd;",
      "2470:             len -= toAdd;",
      "2471:             if (len <= 0) {",
      "2472:                 return b;",
      "2473:             }",
      "2474:             if (!loadMore()) {",
      "2475:                 _reportIncompleteBinaryRead(expLen, ptr);",
      "2478:     }",
      "2481:     protected byte[] _finishChunkedBytes() throws IOException",
      "2482:     {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2468:                 throw _constructError(\"Mismatched chunk in chunked content: expected \"+CBORConstants.MAJOR_TYPE_BYTES",
      "2469:                         +\" but encountered \"+type);",
      "2470:             }",
      "2472:             if (len < 0) {",
      "2473:                 throw _constructError(\"Illegal chunked-length indicator within chunked-length value (type \"+CBORConstants.MAJOR_TYPE_BYTES+\")\");",
      "2474:             }",
      "2475:             while (len > 0) {",
      "2476:                 int avail = _inputEnd - _inputPtr;",
      "2477:                 if (_inputPtr >= _inputEnd) {",
      "2479:                     avail = _inputEnd - _inputPtr;",
      "2480:                 }",
      "2481:                 int count = Math.min(avail, len);",
      "",
      "[Removed Lines]",
      "2471:             len = _decodeExplicitLength(ch & 0x1F);",
      "2478:                     loadMoreGuaranteed();",
      "",
      "[Added Lines]",
      "2499:             int len = _decodeExplicitLength(ch & 0x1F);",
      "2503:             final int chunkLen = len;",
      "2507:                     if (!loadMore()) {",
      "2508:                         _reportIncompleteBinaryRead(chunkLen, chunkLen-len);",
      "2509:                     }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2486:         }",
      "2487:         return bb.toByteArray();",
      "2488:     }",
      "2490:     protected final JsonToken _decodeFieldName() throws IOException",
      "2491:     {",
      "2492:         if (_inputPtr >= _inputEnd) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2522:     protected byte[] _finishLongContiguousBytes(final int expLen) throws IOException",
      "2523:     {",
      "2524:         int left = expLen;",
      "2529:         try (final ByteArrayBuilder bb = new ByteArrayBuilder(LONGEST_NON_CHUNKED_BINARY >> 1)) {",
      "2530:             while (left > 0) {",
      "2531:                 int avail = _inputEnd - _inputPtr;",
      "2532:                 if (avail <= 0) {",
      "2533:                     if (!loadMore()) {",
      "2534:                         _reportIncompleteBinaryRead(expLen, expLen-left);",
      "2535:                     }",
      "2536:                     avail = _inputEnd - _inputPtr;",
      "2537:                 }",
      "2538:                 int count = Math.min(avail, left);",
      "2539:                 bb.write(_inputBuffer, _inputPtr, count);",
      "2540:                 _inputPtr += count;",
      "2541:                 left -= count;",
      "2542:             }",
      "2543:             return bb.toByteArray();",
      "2544:         }",
      "2545:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3208:     {",
      "3209:         if (_inputStream != null) {",
      "3210:             _currInputProcessed += _inputEnd;",
      "",
      "[Removed Lines]",
      "3207:     protected final boolean loadMore() throws IOException",
      "",
      "[Added Lines]",
      "3263:     protected boolean loadMore() throws IOException",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3225:         return false;",
      "3226:     }",
      "3229:         if (!loadMore()) { _reportInvalidEOF(); }",
      "3230:     }",
      "",
      "[Removed Lines]",
      "3228:     protected final void loadMoreGuaranteed() throws IOException {",
      "",
      "[Added Lines]",
      "3284:     protected void loadMoreGuaranteed() throws IOException {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3351:         _reportInvalidOther(mask);",
      "3352:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3411:     protected void _reportIncompleteBinaryRead(int expLen, int actLen) throws IOException",
      "3412:     {",
      "3413:         _reportInvalidEOF(String.format(\" for Binary value: expected %d bytes, only found %d\",",
      "3414:                 expLen, actLen), _currToken);",
      "3415:     }",
      "",
      "---------------"
    ],
    "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java": [
      "File: cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java -> cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package com.fasterxml.jackson.dataformat.cbor;",
      "3: import java.io.ByteArrayOutputStream;",
      "5: import com.fasterxml.jackson.core.JsonParser;",
      "6: import com.fasterxml.jackson.core.JsonProcessingException;",
      "7: import com.fasterxml.jackson.core.JsonToken;",
      "9: import com.fasterxml.jackson.databind.ObjectMapper;",
      "12: public class BrokenLongBinary186Test extends CBORTestBase",
      "13: {",
      "14:     private final ObjectMapper MAPPER = cborMapper();",
      "23:     public void testCorruptVeryLongBinary() throws Exception {",
      "25:         _testCorruptLong(1_999_999_999, 95000);",
      "26:     }",
      "29:     public void testCorruptQuiteLongBinary() throws Exception {",
      "31:         _testCorruptLong(CBORParser.LONGEST_NON_CHUNKED_BINARY >> 1, 37);",
      "32:     }",
      "34:     private void _testCorruptLong(int allegedLength, int actualIncluded) throws Exception",
      "35:     {",
      "36:         JsonParser p = MAPPER.createParser(_createBrokenDoc(allegedLength, actualIncluded));",
      "37:         assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, p.nextToken());",
      "38:         try {",
      "39:             p.getBinaryValue();",
      "40:             fail(\"Should fail\");",
      "41:         } catch (JsonProcessingException e) {",
      "42:             verifyException(e, \"Unexpected end-of-input for Binary value\");",
      "43:             verifyException(e, \"expected \"+allegedLength+\" bytes, only found \"+actualIncluded);",
      "44:         }",
      "45:     }",
      "54:     public void testQuiteLongStreaming() throws Exception",
      "55:     {",
      "57:         final int allegedLength = 500_000_000;",
      "59:         JsonParser p = MAPPER.createParser(_createBrokenDoc(allegedLength, 72000));",
      "60:         assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, p.nextToken());",
      "61:         try {",
      "62:             ByteArrayOutputStream bytes = new ByteArrayOutputStream();",
      "63:             p.readBinaryValue(bytes);",
      "64:             fail(\"Should fail\");",
      "65:         } catch (JsonProcessingException e) {",
      "66:             verifyException(e, \"Unexpected end-of-input for Binary value\");",
      "67:             verifyException(e, \"expected \"+allegedLength+\" bytes, only found 72000\");",
      "68:         }",
      "69:     }",
      "71:     private byte[] _createBrokenDoc(int allegedLength, int actualIncluded) throws Exception",
      "72:     {",
      "73:         ByteArrayOutputStream bytes = new ByteArrayOutputStream();",
      "75:         if (allegedLength > 0xFFFF) {",
      "76:             bytes.write((byte) (CBORConstants.PREFIX_TYPE_BYTES | CBORConstants.SUFFIX_UINT32_ELEMENTS));",
      "77:             bytes.write((byte) (allegedLength >> 24));",
      "78:             bytes.write((byte) (allegedLength >> 16));",
      "79:             bytes.write((byte) (allegedLength >> 8));",
      "80:             bytes.write((byte) allegedLength);",
      "81:         } else { // assume shorter",
      "82:             bytes.write((byte) (CBORConstants.PREFIX_TYPE_BYTES | CBORConstants.SUFFIX_UINT16_ELEMENTS));",
      "83:             bytes.write((byte) (allegedLength >> 8));",
      "84:             bytes.write((byte) allegedLength);",
      "85:         }",
      "87:         for (int i = 0; i < actualIncluded; ++i) {",
      "88:             bytes.write((byte) i);",
      "89:         }",
      "90:         return bytes.toByteArray();",
      "91:     }",
      "93: }",
      "",
      "---------------"
    ],
    "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java": [
      "File: cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java -> cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57400266ce8af0105ed79fb576ac0c9cfe89e37b",
      "candidate_info": {
        "commit_hash": "57400266ce8af0105ed79fb576ac0c9cfe89e37b",
        "repo": "FasterXML/jackson-dataformats-binary",
        "commit_url": "https://github.com/FasterXML/jackson-dataformats-binary/commit/57400266ce8af0105ed79fb576ac0c9cfe89e37b",
        "files": [
          "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
          "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java",
          "pom.xml",
          "release-notes/CREDITS-2.x",
          "release-notes/VERSION-2.x",
          "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java",
          "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java",
          "smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java"
        ],
        "message": "Fixed #260 (lazy byte[] allocation for longer binary payloads)",
        "before_after_code_files": [
          "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
          "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java",
          "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java||smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java",
          "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java||smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java",
          "smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java||smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java"
          ],
          "candidate": [
            "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java"
          ]
        }
      },
      "candidate_diff": {
        "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java||cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java": [
          "File: cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java -> cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2558:                 int count = Math.min(avail, left);",
          "2559:                 bb.write(_inputBuffer, _inputPtr, count);",
          "2560:                 _inputPtr += count;",
          "2562:             }",
          "2563:             return bb.toByteArray();",
          "2564:         }",
          "",
          "[Removed Lines]",
          "2561:                 left -= count;",
          "",
          "[Added Lines]",
          "2561:                 left -= count;",
          "",
          "---------------"
        ],
        "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java||cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java": [
          "File: cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java -> cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/fuzz/Fuzz32173LongTextTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: {",
          "11:     private final ObjectMapper MAPPER = cborMapper();",
          "14:     {",
          "15:         final byte[] input = new byte[] {",
          "16:                 0x7A, // Text value",
          "",
          "[Removed Lines]",
          "13:     public void testInvalidShortText() throws Exception",
          "",
          "[Added Lines]",
          "13:     public void testTruncatedLongText() throws Exception",
          "",
          "---------------"
        ],
        "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java||smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java": [
          "File: smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java -> smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import com.fasterxml.jackson.core.*;",
          "9: import com.fasterxml.jackson.core.io.IOContext;",
          "10: import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;",
          "12: import static com.fasterxml.jackson.dataformat.smile.SmileConstants.BYTE_MARKER_END_OF_STRING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import com.fasterxml.jackson.core.util.ByteArrayBuilder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     }",
          "241:     protected final void _loadMoreGuaranteed() throws IOException {",
          "243:     }",
          "245:     protected final boolean _loadMore() throws IOException",
          "246:     {",
          "",
          "[Removed Lines]",
          "242:         if (!_loadMore()) { _reportInvalidEOF(); }",
          "",
          "[Added Lines]",
          "243:         if (!_loadMore()) {",
          "244:             _reportInvalidEOF();",
          "245:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1895:                 _binaryValue = _read7BitBinaryWithLength();",
          "1896:                 return;",
          "1897:             case 7: // binary, raw",
          "1899:                 return;",
          "1900:             }",
          "1901:         }",
          "",
          "[Removed Lines]",
          "1898:                 _finishRawBinary();",
          "",
          "[Added Lines]",
          "1901:                 _binaryValue = _finishRawBinary();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2403:         _textBuffer.setCurrentLength(outPtr);",
          "2404:     }",
          "2407:     {",
          "2408:         int byteLen = _readUnsignedVInt();",
          "2410:         if (_inputPtr >= _inputEnd) {",
          "2411:             _loadMoreGuaranteed();",
          "2412:         }",
          "2413:         int ptr = 0;",
          "2414:         while (true) {",
          "2415:             int toAdd = Math.min(byteLen, _inputEnd - _inputPtr);",
          "2417:             _inputPtr += toAdd;",
          "2418:             ptr += toAdd;",
          "2419:             byteLen -= toAdd;",
          "2420:             if (byteLen <= 0) {",
          "2422:             }",
          "2424:         }",
          "2425:     }",
          "",
          "[Removed Lines]",
          "2406:     private final void _finishRawBinary() throws IOException",
          "2409:         _binaryValue = new byte[byteLen];",
          "2416:             System.arraycopy(_inputBuffer, _inputPtr, _binaryValue, ptr, toAdd);",
          "2421:                 return;",
          "2423:             _loadMoreGuaranteed();",
          "",
          "[Added Lines]",
          "2409:     private final byte[] _finishRawBinary() throws IOException",
          "2415:         if (byteLen > LONGEST_NON_CHUNKED_BINARY) {",
          "2416:             return _finishLongContiguousBytes(byteLen);",
          "2417:         }",
          "2419:         final int expLen = byteLen;",
          "2420:         final byte[] b = new byte[byteLen];",
          "2423:             if (!_loadMore()) {",
          "2424:                 _reportIncompleteBinaryRead(expLen, 0);",
          "2425:             }",
          "2431:             System.arraycopy(_inputBuffer, _inputPtr, b, ptr, toAdd);",
          "2436:                 return b;",
          "2437:             }",
          "2438:             if (!_loadMore()) {",
          "2439:                 _reportIncompleteBinaryRead(expLen, ptr);",
          "2445:     protected byte[] _finishLongContiguousBytes(final int expLen) throws IOException",
          "2446:     {",
          "2447:         int left = expLen;",
          "2452:         try (final ByteArrayBuilder bb = new ByteArrayBuilder(LONGEST_NON_CHUNKED_BINARY >> 1)) {",
          "2453:             while (left > 0) {",
          "2454:                 int avail = _inputEnd - _inputPtr;",
          "2455:                 if (avail <= 0) {",
          "2456:                     if (!_loadMore()) {",
          "2457:                         _reportIncompleteBinaryRead(expLen, expLen-left);",
          "2458:                     }",
          "2459:                     avail = _inputEnd - _inputPtr;",
          "2460:                 }",
          "2461:                 int count = Math.min(avail, left);",
          "2462:                 bb.write(_inputBuffer, _inputPtr, count);",
          "2463:                 _inputPtr += count;",
          "2464:                 left -= count;",
          "2465:             }",
          "2466:             return bb.toByteArray();",
          "2467:         }",
          "2468:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2693:         _reportInvalidOther(mask);",
          "2694:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     protected void _reportIncompleteBinaryRead(int expLen, int actLen) throws IOException",
          "2741:     {",
          "2742:         _reportInvalidEOF(String.format(\" for Binary value: expected %d bytes, only found %d\",",
          "2743:                 expLen, actLen), _currToken);",
          "2744:     }",
          "",
          "---------------"
        ],
        "smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java||smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java": [
          "File: smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java -> smile/src/main/java/com/fasterxml/jackson/dataformat/smile/SmileParserBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: {",
          "24:     protected final static String[] NO_STRINGS = new String[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     protected final static int LONGEST_NON_CHUNKED_BINARY = 250_000;",
          "",
          "---------------"
        ],
        "smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java||smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java": [
          "File: smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java -> smile/src/test/java/com/fasterxml/jackson/dataformat/smile/fuzz/Fuzz32180BinaryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package com.fasterxml.jackson.dataformat.smile.fuzz;",
          "3: import java.io.ByteArrayInputStream;",
          "4: import java.util.Arrays;",
          "6: import com.fasterxml.jackson.core.io.JsonEOFException;",
          "7: import com.fasterxml.jackson.databind.ObjectMapper;",
          "9: import com.fasterxml.jackson.dataformat.smile.BaseTestForSmile;",
          "12: public class Fuzz32180BinaryTest extends BaseTestForSmile",
          "13: {",
          "14:     private final ObjectMapper MAPPER = smileMapper();",
          "17:     public void testInvalidBinary() throws Exception",
          "18:     {",
          "19:         final byte[] input0 = new byte[] {",
          "20:                 0x3A, 0x29, 0x0A, 0x00, // smile signature",
          "21:                 (byte) 0xFD, // raw binary",
          "22:                 0x0F, 0x7E, 0x20,",
          "23:                 0x20, (byte) 0xFF, // 5 byte VInt for 0x7fe4083f (close to Integer.MAX_VALUE)",
          "25:                 0x00",
          "26:         };",
          "29:         final byte[] input = Arrays.copyOf(input0, 65 * 1024);",
          "31:         try (ByteArrayInputStream bytes = new ByteArrayInputStream(input)) {",
          "32:             try {",
          "34:             } catch (JsonEOFException e) {",
          "35:                 verifyException(e, \"Unexpected end-of-input for Binary value: expected 2145650751 bytes, only found 66550\");",
          "36:             } catch (OutOfMemoryError e) {",
          "38:                 e.printStackTrace();",
          "39:                 throw e;",
          "40:             }",
          "41:         }",
          "42:     }",
          "43: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}