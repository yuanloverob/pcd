{
  "cve_id": "CVE-2023-40586",
  "cve_desc": "OWASP Coraza WAF is a golang modsecurity compatible web application firewall library. Due to the misuse of `log.Fatalf`, the application using coraza crashed after receiving crafted requests from attackers. The application will immediately crash after receiving a malicious request that triggers an error in `mime.ParseMediaType`. This issue was patched in version 3.0.1.\n",
  "repo": "corazawaf/coraza",
  "patch_hash": "a5239ba3ce839e14d9b4f9486e1b4a403dcade8c",
  "patch_info": {
    "commit_hash": "a5239ba3ce839e14d9b4f9486e1b4a403dcade8c",
    "repo": "corazawaf/coraza",
    "commit_url": "https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c",
    "files": [
      "internal/bodyprocessors/multipart.go",
      "internal/bodyprocessors/multipart_test.go"
    ],
    "message": "Merge pull request from GHSA-c2pj-v37r-2p6h",
    "before_after_code_files": [
      "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go",
      "internal/bodyprocessors/multipart_test.go||internal/bodyprocessors/multipart_test.go"
    ]
  },
  "patch_diff": {
    "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go": [
      "File: internal/bodyprocessors/multipart.go -> internal/bodyprocessors/multipart.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  \"errors\"",
      "8:  \"fmt\"",
      "9:  \"io\"",
      "11:  \"mime\"",
      "12:  \"mime/multipart\"",
      "13:  \"os\"",
      "",
      "[Removed Lines]",
      "10:  \"log\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  storagePath := options.StoragePath",
      "26:  mediaType, params, err := mime.ParseMediaType(mimeType)",
      "27:  if err != nil {",
      "29:  }",
      "30:  if !strings.HasPrefix(mediaType, \"multipart/\") {",
      "31:   return errors.New(\"not a multipart body\")",
      "",
      "[Removed Lines]",
      "28:   log.Fatalf(\"failed to parse media type: %s\", err.Error())",
      "",
      "[Added Lines]",
      "27:   return err",
      "",
      "---------------"
    ],
    "internal/bodyprocessors/multipart_test.go||internal/bodyprocessors/multipart_test.go": [
      "File: internal/bodyprocessors/multipart_test.go -> internal/bodyprocessors/multipart_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   }",
      "78:  }",
      "79: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: func TestInvalidMultipartCT(t *testing.T) {",
      "82:  payload := strings.TrimSpace(`",
      "83: -----------------------------9051914041544843365972754266",
      "84: Content-Disposition: form-data; name=\"text\"",
      "86: text default",
      "87: -----------------------------9051914041544843365972754266",
      "88: `)",
      "89:  mp := multipartProcessor(t)",
      "90:  v := corazawaf.NewTransactionVariables()",
      "91:  if err := mp.ProcessRequest(strings.NewReader(payload), v, plugintypes.BodyProcessorOptions{",
      "92:   Mime: \"multipart/form-data; boundary=---------------------------9051914041544843365972754266; a=1; a=2\",",
      "93:  }); err == nil {",
      "94:   t.Error(\"multipart processor should fail for invalid content-type\")",
      "95:  }",
      "96: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ac73c3e3f9477d3743a5efa8e28ff864ad03b11",
      "candidate_info": {
        "commit_hash": "9ac73c3e3f9477d3743a5efa8e28ff864ad03b11",
        "repo": "corazawaf/coraza",
        "commit_url": "https://github.com/corazawaf/coraza/commit/9ac73c3e3f9477d3743a5efa8e28ff864ad03b11",
        "files": [
          "examples/http-server/README.md",
          "internal/bodyprocessors/multipart.go"
        ],
        "message": "remove log fatal",
        "before_after_code_files": [
          "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go"
          ],
          "candidate": [
            "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/bodyprocessors/multipart.go||internal/bodyprocessors/multipart.go": [
          "File: internal/bodyprocessors/multipart.go -> internal/bodyprocessors/multipart.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "9:  \"io\"",
          "11:  \"mime\"",
          "12:  \"mime/multipart\"",
          "13:  \"os\"",
          "",
          "[Removed Lines]",
          "10:  \"log\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  storagePath := options.StoragePath",
          "26:  mediaType, params, err := mime.ParseMediaType(mimeType)",
          "27:  if err != nil {",
          "29:  }",
          "30:  if !strings.HasPrefix(mediaType, \"multipart/\") {",
          "31:   return errors.New(\"not a multipart body\")",
          "",
          "[Removed Lines]",
          "28:   log.Fatalf(\"failed to parse media type: %s\", err.Error())",
          "",
          "[Added Lines]",
          "27:   return err",
          "",
          "---------------"
        ]
      }
    }
  ]
}