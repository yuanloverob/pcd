{
  "cve_id": "CVE-2021-23393",
  "cve_desc": "This affects the package Flask-Unchained before 0.9.0. When using the the _validate_redirect_url function, it is possible to bypass URL validation and redirect a user to an arbitrary URL by providing multiple back slashes such as \\\\\\evil.com/path. This vulnerability is only exploitable if an alternative WSGI server other than Werkzeug is used, or the default behaviour of Werkzeug is modified using 'autocorrect_location_header=False.",
  "repo": "briancappello/flask-unchained",
  "patch_hash": "71e36b28166f9ffbe0a991f51127f0984f7e6a40",
  "patch_info": {
    "commit_hash": "71e36b28166f9ffbe0a991f51127f0984f7e6a40",
    "repo": "briancappello/flask-unchained",
    "commit_url": "https://github.com/briancappello/flask-unchained/commit/71e36b28166f9ffbe0a991f51127f0984f7e6a40",
    "files": [
      "flask_unchained/bundles/controller/utils.py",
      "requirements.txt",
      "tests/bundles/controller/test_utils.py"
    ],
    "message": "add tests for validate_redirect_url",
    "before_after_code_files": [
      "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py",
      "tests/bundles/controller/test_utils.py||tests/bundles/controller/test_utils.py"
    ]
  },
  "patch_diff": {
    "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py": [
      "File: flask_unchained/bundles/controller/utils.py -> flask_unchained/bundles/controller/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "186: def encode_non_url_reserved_characters(url):",
      "187:     # safe url reserved characters: https://datatracker.ietf.org/doc/html/rfc3986#section-2.2",
      "191: # modified from flask_security.utils.get_post_action_redirect",
      "",
      "[Removed Lines]",
      "188:     return urlquote(url, safe=\":/?#[]@!$&'()*+,;=\")",
      "",
      "[Added Lines]",
      "188:     return urlquote(url, safe=\":/?#[]@!$&'()*+,;=<>\")",
      "",
      "---------------"
    ],
    "tests/bundles/controller/test_utils.py||tests/bundles/controller/test_utils.py": [
      "File: tests/bundles/controller/test_utils.py -> tests/bundles/controller/test_utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "190:     def test_it_fails_on_garbage(self):",
      "191:         assert _validate_redirect_url(None) is False",
      "192:         assert _validate_redirect_url(' ') is False",
      "194:     def test_it_fails_with_invalid_netloc(self, app, monkeypatch):",
      "195:         with app.test_request_context():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:         assert _validate_redirect_url('///evil.com') is False",
      "194:         assert _validate_redirect_url('\\\\\\\\\\\\evil.com') is False",
      "195:         assert _validate_redirect_url('\\x00evil.com') is False",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "197:             assert _validate_redirect_url('http://fail.com') is False",
      "198:             monkeypatch.undo()",
      "201:     def test_it_works_with_external_server_name(self, app, monkeypatch):",
      "202:         with app.test_request_context():",
      "203:             monkeypatch.setattr('flask.request.host_url', 'http://example.com')",
      "204:             assert _validate_redirect_url('http://works.com') is True",
      "205:             monkeypatch.undo()",
      "207:     def test_it_works_with_explicit_external_host(self, app, monkeypatch):",
      "208:         with app.test_request_context():",
      "209:             monkeypatch.setattr('flask.request.host_url', 'http://example.com')",
      "210:             result = _validate_redirect_url('http://works.com',",
      "212:             assert result is True",
      "213:             monkeypatch.undo()",
      "",
      "[Removed Lines]",
      "200:     @pytest.mark.options(EXTERNAL_SERVER_NAME='works.com')",
      "211:                                             _external_host='works.com')",
      "",
      "[Added Lines]",
      "203:     def test_it_requires_same_scheme(self, app, monkeypatch):",
      "204:         with app.test_request_context():",
      "205:             monkeypatch.setattr('flask.request.host_url', 'https://example.com')",
      "206:             assert _validate_redirect_url('http://example.com/foo') is False",
      "207:             monkeypatch.undo()",
      "209:     @pytest.mark.options(EXTERNAL_SERVER_NAME='http://works.com')",
      "216:     @pytest.mark.options(EXTERNAL_SERVER_NAME='https://works.com')",
      "217:     def test_it_requires_same_external_server_name_scheme(self, app, monkeypatch):",
      "218:         with app.test_request_context():",
      "219:             monkeypatch.setattr('flask.request.host_url', 'http://example.com')",
      "220:             assert _validate_redirect_url('http://works.com') is False",
      "221:             monkeypatch.undo()",
      "227:                                             _external_host='http://works.com')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2bfeedf1bc31df851cab8c66df0c432b10406aad",
      "candidate_info": {
        "commit_hash": "2bfeedf1bc31df851cab8c66df0c432b10406aad",
        "repo": "briancappello/flask-unchained",
        "commit_url": "https://github.com/briancappello/flask-unchained/commit/2bfeedf1bc31df851cab8c66df0c432b10406aad",
        "files": [
          "flask_unchained/bundles/controller/utils.py"
        ],
        "message": "security fixes",
        "before_after_code_files": [
          "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py"
          ],
          "candidate": [
            "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "flask_unchained/bundles/controller/utils.py||flask_unchained/bundles/controller/utils.py": [
          "File: flask_unchained/bundles/controller/utils.py -> flask_unchained/bundles/controller/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from flask_unchained._compat import is_local_proxy",
          "7: from py_meta_utils import _missing",
          "8: from typing import *",
          "10: from werkzeug.routing import BuildError, UnicodeConverter",
          "12: from .attr_constants import CONTROLLER_ROUTES_ATTR, REMOVE_SUFFIXES_ATTR",
          "",
          "[Removed Lines]",
          "9: from urllib.parse import urlsplit",
          "",
          "[Added Lines]",
          "9: from urllib.parse import urlsplit, quote as urlquote",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:     return '/' + kebab_case(method_name).strip('-')",
          "186: # modified from flask_security.utils.get_post_action_redirect",
          "187: def redirect(where: Optional[str] = None,",
          "188:              default: Optional[str] = None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186: def encode_non_url_reserved_characters(url):",
          "187:     # safe url reserved characters: https://datatracker.ietf.org/doc/html/rfc3986#section-2.2",
          "188:     return urlquote(url, safe=\":/?#[]@!$&'()*+,;=\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236:     for url in urls:",
          "237:         if _validate_redirect_url(url, _external_host):",
          "239:     return flask_redirect('/')",
          "",
          "[Removed Lines]",
          "238:             return flask_redirect(url)",
          "",
          "[Added Lines]",
          "243:             return flask_redirect(encode_non_url_reserved_characters(url))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290: # modified from flask_security.utils.validate_redirect_url",
          "291: def _validate_redirect_url(url, _external_host=None):",
          "293:         return False",
          "294:     url_next = urlsplit(url)",
          "295:     url_base = urlsplit(request.host_url)",
          "301:     return True",
          "",
          "[Removed Lines]",
          "292:     if url is None or url.strip() == '':",
          "296:     external_host = _external_host or current_app.config.get('EXTERNAL_SERVER_NAME', '')",
          "297:     if ((url_next.netloc or url_next.scheme)",
          "298:             and url_next.netloc != url_base.netloc",
          "299:             and url_next.netloc not in external_host):",
          "300:         return False",
          "",
          "[Added Lines]",
          "297:     url = (url or '').strip().replace('\\\\', '/')",
          "299:     # reject empty urls and urls starting with 3+ slashes or a control character",
          "300:     if not url or url.startswith('///') or ord(url[0]) <= 32:",
          "305:     if url_next.netloc or url_next.scheme:",
          "306:         # require both netloc and scheme",
          "307:         if not url_next.netloc or not url_next.scheme:",
          "308:             return False",
          "310:         # if external host, require same netloc and scheme",
          "311:         external_host = _external_host or current_app.config.get('EXTERNAL_SERVER_NAME', '')",
          "312:         if external_host:",
          "313:             url_external = urlsplit(external_host)",
          "314:             if url_next.netloc == url_external.netloc and url_next.scheme == url_external.scheme:",
          "315:                 return True",
          "317:         # require same netloc and scheme",
          "318:         if url_next.netloc != url_base.netloc or url_next.scheme != url_base.scheme:",
          "319:             return False",
          "",
          "---------------"
        ]
      }
    }
  ]
}