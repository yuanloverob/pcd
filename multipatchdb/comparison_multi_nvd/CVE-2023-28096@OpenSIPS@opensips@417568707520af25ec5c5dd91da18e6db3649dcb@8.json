{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bab0ab5dc6211636b1481a265959b88735cac778",
      "candidate_info": {
        "commit_hash": "bab0ab5dc6211636b1481a265959b88735cac778",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/bab0ab5dc6211636b1481a265959b88735cac778",
        "files": [
          "parser/parse_to.c",
          "parser/test/test_parser.c"
        ],
        "message": "parse_to_param(): Fix out-of-bounds read edge-case (OSS-Fuzz)\n\nSeverity: Low\nFixes OSS-Fuzz#41073\n\n(cherry picked from commit 90aa25e64f36b22fbcae9aae910257b43f81641f)",
        "before_after_code_files": [
          "parser/parse_to.c||parser/parse_to.c",
          "parser/test/test_parser.c||parser/test/test_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_to.c||parser/parse_to.c": [
          "File: parser/parse_to.c -> parser/parse_to.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480: parse_error:",
          "481:  LM_ERR(\"unexpected char [%c] in status %d: <<%.*s>> .\\n\",",
          "483: error:",
          "484:  if (param) pkg_free(param);",
          "485:  free_to_params(to_b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:      tmp < end? *tmp : *(buffer+strlen(buffer)-1),status,",
          "483:      (int)(tmp-buffer), ZSW(buffer));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "817: parse_error:",
          "818:  LM_ERR(\"unexpected char [%c] in status %d: <<%.*s>> .\\n\",",
          "820: error:",
          "821:  first_b->error=PARSE_ERROR;",
          "822:  free_to_params(first_b);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:      tmp < end? *tmp : *(buffer+strlen(buffer)-1),",
          "821:      status, (int)(tmp-buffer), buffer);",
          "",
          "---------------"
        ],
        "parser/test/test_parser.c||parser/test/test_parser.c": [
          "File: parser/test/test_parser.c -> parser/test/test_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: }",
          "146: static const struct tts {",
          "148:  int tres;",
          "149: } tset[] = {",
          "150:  {",
          "153:   -1,",
          "154:  },",
          "157: };",
          "159: void test_parse_msg(void)",
          "",
          "[Removed Lines]",
          "147:  const unsigned char tmsg[32];",
          "152:   {'e', ' ', 255, 255, 255, 255, ' ', ' ', ' ', ' ', ' ', 255, '\\n', 255, 255, ' ', ' '},",
          "156:  {{0}, 0},",
          "",
          "[Added Lines]",
          "147:  const char *tmsg;",
          "152:   \"e \\xff\\xff\\xff\\xff     \\xff\\n\\xff\\xff  \",",
          "156:  {",
          "158:   \"d  \\x02\\x80\\0\\nt\\0:G;150=\\\"a8\",",
          "159:   -1,",
          "160:  },",
          "162:  {\"\\0\", 0},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
      "candidate_info": {
        "commit_hash": "6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6c6461c202aad5a1b1a40772635dbd3bc864b5a5",
        "files": [
          "net/net_udp.c"
        ],
        "message": "Merge pull request #2790 from Transatel/FIX_TOS_IPV6\n\nAdd TOS in IPV6\n\n(cherry picked from commit f461e38d3c8fd65a479c5a363520410aaed49ea1)",
        "before_after_code_files": [
          "net/net_udp.c||net/net_udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/net_udp.c||net/net_udp.c": [
          "File: net/net_udp.c -> net/net_udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:  }",
          "183:  optval=tos;",
          "188:  }",
          "189: #if defined (__linux__) && defined(UDP_ERRORS)",
          "190:  optval=1;",
          "",
          "[Removed Lines]",
          "184:  if (setsockopt(si->socket, IPPROTO_IP, IP_TOS, (void*)&optval,",
          "185:    sizeof(optval)) ==-1){",
          "186:   LM_WARN(\"setsockopt tos: %s\\n\", strerror(errno));",
          "",
          "[Added Lines]",
          "184:  if (addr->s.sa_family==AF_INET6){",
          "185:   if (setsockopt(si->socket,  IPPROTO_IPV6, IPV6_TCLASS, (void*)&optval, sizeof(optval)) ==-1){",
          "186:    LM_WARN(\"setsockopt tos for IPV6: %s\\n\", strerror(errno));",
          "188:   }",
          "189:  } else {",
          "190:   if (setsockopt(si->socket, IPPROTO_IP, IP_TOS, (void*)&optval, sizeof(optval)) ==-1){",
          "191:    LM_WARN(\"setsockopt tos: %s\\n\", strerror(errno));",
          "193:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ecac89e5418b9a192519d1ed3cde000695079d1",
      "candidate_info": {
        "commit_hash": "6ecac89e5418b9a192519d1ed3cde000695079d1",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6ecac89e5418b9a192519d1ed3cde000695079d1",
        "files": [
          "modules/cachedb_redis/cachedb_redis.c",
          "modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_dbase.h",
          "modules/cachedb_redis/doc/cachedb_redis_admin.xml"
        ],
        "message": "cachedb_redis: Allow quoting strings in raw queries\n\nIn case the Redis raw query string arguments include whitespace (' ',\n\\t, \\r, \\n), script developers can now enclose them in single (') or\ndouble quotes (\"), and OpenSIPS will pass the correct string to Redis.\n\nFor example:\n    cache_raw_query(\"redis\", \"SET foo \\\"bar baz\\\"\", \"$avp(result)\");\n        or:\n    cache_raw_query(\"redis\", \"SET foo 'bar baz'\", \"$avp(result)\");\n\n... are now possible and equivalent.  Both of these will set the\n\"bar baz\" value, without the quotes.\n\nNEW module parameter in order to maintain backwards-compatibility with\nprevious code (default: 0):\n\n    modparam(\"cachedb_redis\", \"enable_query_arg_quoting\", 1)\n\nFixes #2036",
        "before_after_code_files": [
          "modules/cachedb_redis/cachedb_redis.c||modules/cachedb_redis/cachedb_redis.c",
          "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c",
          "modules/cachedb_redis/cachedb_redis_dbase.h||modules/cachedb_redis/cachedb_redis_dbase.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/cachedb_redis/cachedb_redis.c||modules/cachedb_redis/cachedb_redis.c": [
          "File: modules/cachedb_redis/cachedb_redis.c -> modules/cachedb_redis/cachedb_redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:  { \"shutdown_on_error\",           INT_PARAM,                &shutdown_on_error     },",
          "59:  { \"cachedb_url\",                 STR_PARAM|USE_FUNC_PARAM, (void *)&set_connection},",
          "60:  { \"use_tls\",                     INT_PARAM,                &use_tls},",
          "61:  {0,0,0}",
          "62: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  { \"enable_raw_query_quoting\",    INT_PARAM,                &enable_raw_query_quoting},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   return -1;",
          "163:  }",
          "165:  return 0;",
          "166: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:  redis_raw_query_send = enable_raw_query_quoting ?",
          "167:    redis_raw_query_send_new : redis_raw_query_send_old;",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_dbase.c||modules/cachedb_redis/cachedb_redis_dbase.c": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.c -> modules/cachedb_redis/cachedb_redis_dbase.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: int redis_connnection_tout = CACHEDB_REDIS_DEFAULT_TIMEOUT;",
          "41: int shutdown_on_error = 0;",
          "42: int use_tls = 0;",
          "44: struct tls_mgm_binds tls_api;",
          "46: redisContext *redis_get_ctx(char *ip, int port)",
          "47: {",
          "48:  struct timeval tv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: int enable_raw_query_quoting;",
          "51: int (*redis_raw_query_send)(cachedb_con *connection, redisReply **reply,",
          "52:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "716:  return -1;",
          "717: }",
          "747: #define MAP_SET_MAX_FIELDS 128",
          "749:   cdb_raw_entry ***_, int __, int *___, str *attr)",
          "750: {",
          "751:  int i, argc = 0;",
          "",
          "[Removed Lines]",
          "721: int redis_raw_query_extract_key(str *attr,str *query_key)",
          "722: {",
          "723:  int len;",
          "724:  char *p,*q,*r;",
          "726:  if (!attr || attr->s == NULL || query_key == NULL)",
          "727:   return -1;",
          "729:  trim_len(len,p,*attr);",
          "730:  q = memchr(p,' ',len);",
          "731:  if (q == NULL) {",
          "732:   LM_ERR(\"Malformed Redis RAW query \\n\");",
          "733:   return -1;",
          "734:  }",
          "736:  query_key->s = q+1;",
          "737:  r = memchr(query_key->s,' ',len - (query_key->s - p));",
          "738:  if (r == NULL) {",
          "739:   query_key->len = (p+len) - query_key->s;",
          "740:  } else {",
          "741:   query_key->len = r-query_key->s;",
          "742:  }",
          "744:  return 0;",
          "745: }",
          "748: static int redis_raw_query_send(cachedb_con *connection, redisReply **reply,",
          "",
          "[Added Lines]",
          "728: int redis_raw_query_send_old(cachedb_con *connection, redisReply **reply,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:   return -1;",
          "795:  }",
          "799:  key.s = (char *)argv[1];",
          "800:  key.len = argvlen[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779:  key.s = (char *)argv[1];",
          "780:  key.len = argvlen[1];",
          "782: #ifdef EXTRA_DEBUG",
          "783:  LM_DBG(\"raw query key: %.*s\\n\", key.len, key.s);",
          "784:  for (i = 0; i < argc; i++)",
          "785:   LM_DBG(\"raw query arg %d: '%.*s' (%d)\\n\", i, (int)argvlen[i], argv[i],",
          "786:          (int)argvlen[i]);",
          "787: #endif",
          "789:  node = get_redis_connection(con, &key);",
          "790:  if (node == NULL) {",
          "791:   LM_ERR(\"Bad cluster configuration\\n\");",
          "792:   return -10;",
          "793:  }",
          "795:  if (node->context == NULL) {",
          "796:   if (redis_reconnect_node(con,node) < 0) {",
          "797:    return -1;",
          "798:   }",
          "799:  }",
          "801:  for (i = QUERY_ATTEMPTS; i; i--) {",
          "803:   if (*reply == NULL || (*reply)->type == REDIS_REPLY_ERROR) {",
          "804:    LM_INFO(\"Redis query failed: %.*s\\n\",",
          "806:    if (*reply)",
          "807:     freeReplyObject(*reply);",
          "808:    if (node->context->err == REDIS_OK || redis_reconnect_node(con,node) < 0) {",
          "809:     i = 0; break;",
          "810:    }",
          "811:   } else break;",
          "812:  }",
          "814:  if (i==0) {",
          "815:   LM_ERR(\"giving up on query\\n\");",
          "816:   return -1;",
          "817:  }",
          "819:  if (i != QUERY_ATTEMPTS)",
          "820:   LM_INFO(\"successfully ran query after %d failed attempt(s)\\n\",",
          "821:           QUERY_ATTEMPTS - i);",
          "823:  return 0;",
          "824: }",
          "826: int redis_raw_query_send_new(cachedb_con *connection, redisReply **reply,",
          "827:   cdb_raw_entry ***_, int __, int *___, str *attr)",
          "828: {",
          "829:  int i, argc = 0, squoted = 0, dquoted = 0;",
          "830:  const char *argv[MAP_SET_MAX_FIELDS];",
          "831:  size_t argvlen[MAP_SET_MAX_FIELDS];",
          "832:  redis_con *con;",
          "833:  cluster_node *node;",
          "834:  str key, st;",
          "835:  char *p, *lim, *arg = NULL;",
          "837:  con = (redis_con *)connection->data;",
          "839:  if (!(con->flags & REDIS_INIT_NODES) && redis_connect(con) < 0) {",
          "840:   LM_ERR(\"failed to connect to DB\\n\");",
          "841:   return -9;",
          "842:  }",
          "844:  st = *attr;",
          "845:  trim(&st);",
          "850:  for (p = st.s, lim = p + st.len; p < lim; p++) {",
          "851:   if ((dquoted && *p != '\"') || (squoted && *p != '\\''))",
          "852:    continue;",
          "854:   if (argc == MAP_SET_MAX_FIELDS) {",
          "855:    LM_ERR(\"max raw query args exceeded (%d)\\n\", MAP_SET_MAX_FIELDS);",
          "856:    goto bad_query;",
          "857:   }",
          "859:   if (dquoted || squoted) {",
          "860:    if (p+1 < lim && !is_ws(*(p+1)))",
          "861:     goto bad_query;",
          "863:    argv[argc]++;",
          "864:    argvlen[argc] = p - argv[argc];",
          "865:    argc++;",
          "866:    dquoted = squoted = 0;",
          "867:   } else if (*p == '\"') {",
          "868:    dquoted = 1;",
          "869:    argv[argc] = p;",
          "870:   } else if (*p == '\\'') {",
          "871:    squoted = 1;",
          "872:    argv[argc] = p;",
          "873:   } else if (is_ws(*p)) {",
          "874:    if (!arg)",
          "875:     continue;",
          "877:    argv[argc] = arg;",
          "878:    argvlen[argc++] = p - arg;",
          "879:    arg = NULL;",
          "880:   } else if (!arg) {",
          "881:    arg = p;",
          "882:   }",
          "883:  }",
          "885:  if (squoted || dquoted) {",
          "886:   LM_ERR(\"unterminated quoted query argument\\n\");",
          "887:   goto bad_query;",
          "888:  }",
          "890:  if (arg) {",
          "891:   argv[argc] = arg;",
          "892:   argvlen[argc++] = st.s + st.len - arg;",
          "893:  }",
          "895:  if (argc < 2)",
          "896:   goto bad_query;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "841:           QUERY_ATTEMPTS - i);",
          "843:  return 0;",
          "844: }",
          "846: int redis_raw_query(cachedb_con *connection,str *attr,cdb_raw_entry ***rpl,int expected_kv_no,int *reply_no)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "946: bad_query:",
          "947:  LM_ERR(\"malformed Redis RAW query: '%.*s' (%d)\\n\",",
          "948:         attr->len, attr->s, attr->len);",
          "949:  return -1;",
          "",
          "---------------"
        ],
        "modules/cachedb_redis/cachedb_redis_dbase.h||modules/cachedb_redis/cachedb_redis_dbase.h": [
          "File: modules/cachedb_redis/cachedb_redis_dbase.h -> modules/cachedb_redis/cachedb_redis_dbase.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: extern int redis_connnection_tout;",
          "56: extern int shutdown_on_error;",
          "57: extern int use_tls;",
          "59: extern struct tls_mgm_binds tls_api;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: extern int enable_raw_query_quoting;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: int redis_get_counter(cachedb_con *connection,str *attr,int *val);",
          "85: int redis_raw_query(cachedb_con *connection,str *attr,cdb_raw_entry ***reply,int expected_kv_no,int *reply_no);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: extern int redis_raw_query_send_old(cachedb_con *connection, redisReply **reply,",
          "89:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "90: extern int redis_raw_query_send_new(cachedb_con *connection, redisReply **reply,",
          "91:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "92: extern int (*redis_raw_query_send)(cachedb_con *connection, redisReply **reply,",
          "93:   cdb_raw_entry ***_, int __, int *___, str *attr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
      "candidate_info": {
        "commit_hash": "4408617e90456fc1b614f14f09ee1bddce3ac310",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/4408617e90456fc1b614f14f09ee1bddce3ac310",
        "files": [
          "modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c"
        ],
        "message": "rtpproxy+rtpengine: fair election when the first try is disabled\n\nWhen a first attempt to use a rtpproxy/rtpengine node picks a disabled\nnode, the next attempt should not consider the disabled nodes at all.\n\n(cherry picked from commit 9d5dd9539d54b2186f31d2447823cae9108b9c31)",
        "before_after_code_files": [
          "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c",
          "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/rtpengine/rtpengine.c||modules/rtpengine/rtpengine.c": [
          "File: modules/rtpengine/rtpengine.c -> modules/rtpengine/rtpengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2608:     continue;",
          "2609:    }",
          "2610:   }",
          "2612:   node = node->rn_next;",
          "2613:  }",
          "",
          "[Removed Lines]",
          "2611:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2611:   if (!node->rn_disabled || !was_forced)",
          "2612:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ],
        "modules/rtpproxy/rtpproxy.c||modules/rtpproxy/rtpproxy.c": [
          "File: modules/rtpproxy/rtpproxy.c -> modules/rtpproxy/rtpproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2307:     continue;",
          "2308:    }",
          "2309:   }",
          "2311:   node = node->rn_next;",
          "2312:  }",
          "",
          "[Removed Lines]",
          "2310:   sumcut -= node->rn_weight;",
          "",
          "[Added Lines]",
          "2310:   if (!node->rn_disabled || !was_forced)",
          "2311:    sumcut -= node->rn_weight;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9aa1033b9598f85d88a9bdd1b12d0cb15b0ca940",
      "candidate_info": {
        "commit_hash": "9aa1033b9598f85d88a9bdd1b12d0cb15b0ca940",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/9aa1033b9598f85d88a9bdd1b12d0cb15b0ca940",
        "files": [
          "parser/parse_to.c"
        ],
        "message": "parse_to_param(): Rework previous fix (OSS-Fuzz)\n\nInvoking strlen() on a non NULL-terminated buffer is equally bad,\npossibly even worse.  Instead, simply rely on the @end parameter being\ncorrect, which is an assumption already made by the current code of the\nfunction.\n\nFixes OSS-Fuzz#41073\n\n(cherry picked from commit 51b908f8fde0aa2eac8dbcfff319281625d6f3f2)",
        "before_after_code_files": [
          "parser/parse_to.c||parser/parse_to.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_to.c||parser/parse_to.c": [
          "File: parser/parse_to.c -> parser/parse_to.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480: parse_error:",
          "481:  LM_ERR(\"unexpected char [%c] in status %d: <<%.*s>> .\\n\",",
          "484: error:",
          "485:  if (param) pkg_free(param);",
          "486:  free_to_params(to_b);",
          "",
          "[Removed Lines]",
          "482:      tmp < end? *tmp : *(buffer+strlen(buffer)-1),status,",
          "483:      (int)(tmp-buffer), ZSW(buffer));",
          "",
          "[Added Lines]",
          "482:      tmp < end? *tmp : *(end-1),status, (int)(tmp-buffer), ZSW(buffer));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "818: parse_error:",
          "819:  LM_ERR(\"unexpected char [%c] in status %d: <<%.*s>> .\\n\",",
          "822: error:",
          "823:  first_b->error=PARSE_ERROR;",
          "824:  free_to_params(first_b);",
          "",
          "[Removed Lines]",
          "820:      tmp < end? *tmp : *(buffer+strlen(buffer)-1),",
          "821:      status, (int)(tmp-buffer), buffer);",
          "",
          "[Added Lines]",
          "819:      tmp < end? *tmp : *(end-1), status, (int)(tmp-buffer), buffer);",
          "",
          "---------------"
        ]
      }
    }
  ]
}