{
  "cve_id": "CVE-2022-23650",
  "cve_desc": "Netmaker is a platform for creating and managing virtual overlay networks using WireGuard. Prior to versions 0.8.5, 0.9.4, and 010.0, there is a hard-coded cryptographic key in the code base which can be exploited to run admin commands on a remote server if the exploiter know the address and username of the admin. This effects the server (netmaker) component, and not clients. This has been patched in Netmaker v0.8.5, v0.9.4, and v0.10.0. There are currently no known workarounds.",
  "repo": "gravitl/netmaker",
  "patch_hash": "1bec97c662670dfdab804343fc42ae4b1d050a87",
  "patch_info": {
    "commit_hash": "1bec97c662670dfdab804343fc42ae4b1d050a87",
    "repo": "gravitl/netmaker",
    "commit_url": "https://github.com/gravitl/netmaker/pull/781/commits/1bec97c662670dfdab804343fc42ae4b1d050a87",
    "files": [
      "logic/jwts.go",
      "logic/serverconf.go",
      "logic/util.go",
      "main.go"
    ],
    "message": "hotfix v0.8.5",
    "before_after_code_files": [
      "logic/jwts.go||logic/jwts.go",
      "logic/serverconf.go||logic/serverconf.go",
      "logic/util.go||logic/util.go",
      "main.go||main.go"
    ]
  },
  "patch_diff": {
    "logic/jwts.go||logic/jwts.go": [
      "File: logic/jwts.go -> logic/jwts.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import (",
      "4:  \"errors\"",
      "5:  \"time\"",
      "7:  \"github.com/golang-jwt/jwt/v4\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  \"log\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9:  \"github.com/gravitl/netmaker/servercfg\"",
      "10: )",
      "15: func CreateJWT(macaddress string, network string) (response string, err error) {",
      "",
      "[Removed Lines]",
      "12: var jwtSecretKey = []byte(\"(BytesOverTheWire)\")",
      "",
      "[Added Lines]",
      "13: var jwtSecretKey []byte",
      "16: func SetJWTSecret() {",
      "17:  currentSecret, jwtErr := FetchJWTSecret()",
      "18:  if jwtErr != nil {",
      "19:   newValue, err := GenerateRandString(64)",
      "20:   if err != nil {",
      "21:    log.Fatalln(\"something went wrong when generating signature\")",
      "22:   }",
      "23:   jwtSecretKey = []byte(newValue) // 512 bit random password",
      "24:   if err := StoreJWTSecret(string(jwtSecretKey)); err != nil {",
      "25:    log.Fatalln(\"something went wrong when configuring JWT authentication\")",
      "26:   }",
      "27:  } else {",
      "28:   jwtSecretKey = []byte(currentSecret)",
      "29:  }",
      "30: }",
      "",
      "---------------"
    ],
    "logic/serverconf.go||logic/serverconf.go": [
      "File: logic/serverconf.go -> logic/serverconf.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: func RemovePrivKey(serverID string) error {",
      "46:  return database.DeleteRecord(database.SERVERCONF_TABLE_NAME, serverID)",
      "47: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "50: func FetchJWTSecret() (string, error) {",
      "51:  var dbData string",
      "52:  var err error",
      "53:  var fetchedData = serverData{}",
      "54:  dbData, err = database.FetchRecord(database.SERVERCONF_TABLE_NAME, \"nm-jwt-secret\")",
      "55:  if err != nil {",
      "56:   return \"\", err",
      "57:  }",
      "58:  err = json.Unmarshal([]byte(dbData), &fetchedData)",
      "59:  if err != nil {",
      "60:   return \"\", err",
      "61:  }",
      "62:  return fetchedData.PrivateKey, nil",
      "63: }",
      "66: func StoreJWTSecret(privateKey string) error {",
      "67:  var newData = serverData{}",
      "68:  var err error",
      "69:  var data []byte",
      "70:  newData.PrivateKey = privateKey",
      "71:  data, err = json.Marshal(&newData)",
      "72:  if err != nil {",
      "73:   return err",
      "74:  }",
      "75:  return database.Insert(\"nm-jwt-secret\", string(data), database.SERVERCONF_TABLE_NAME)",
      "76: }",
      "",
      "---------------"
    ],
    "logic/util.go||logic/util.go": [
      "File: logic/util.go -> logic/util.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: package logic",
      "4: import (",
      "5:  \"encoding/base64\"",
      "6:  \"encoding/json\"",
      "7:  \"log\"",
      "8:  \"math/rand\"",
      "9:  \"strconv\"",
      "10:  \"strings\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  crand \"crypto/rand\"",
      "9:  \"math/big\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "288:  return string(b)",
      "289: }",
      "291: func setPeerInfo(node models.Node) models.Node {",
      "292:  var peer models.Node",
      "293:  peer.RelayAddrs = node.RelayAddrs",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "294: func GenerateRandString(n int) (string, error) {",
      "295:  const chars = \"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-\"",
      "296:  ret := make([]byte, n)",
      "297:  for i := range ret {",
      "298:   num, err := crand.Int(crand.Reader, big.NewInt(int64(len(chars))))",
      "299:   if err != nil {",
      "300:    return \"\", err",
      "301:   }",
      "302:   ret[i] = chars[num.Int64()]",
      "303:  }",
      "305:  return string(ret), nil",
      "306: }",
      "",
      "---------------"
    ],
    "main.go||main.go": [
      "File: main.go -> main.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:   log.Fatal(err)",
      "43:  }",
      "44:  logic.Log(\"database successfully connected\", 0)",
      "46:  var authProvider = auth.InitializeAuthProvider()",
      "47:  if authProvider != \"\" {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:  logic.SetJWTSecret()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d19e8daaaabb5e760c3c1b1bb9d233a0144953cf",
      "candidate_info": {
        "commit_hash": "d19e8daaaabb5e760c3c1b1bb9d233a0144953cf",
        "repo": "gravitl/netmaker",
        "commit_url": "https://github.com/gravitl/netmaker/commit/d19e8daaaabb5e760c3c1b1bb9d233a0144953cf",
        "files": [
          "logic/jwts.go",
          "logic/serverconf.go",
          "logic/util.go",
          "main.go"
        ],
        "message": "added hotfix",
        "before_after_code_files": [
          "logic/jwts.go||logic/jwts.go",
          "logic/serverconf.go||logic/serverconf.go",
          "logic/util.go||logic/util.go",
          "main.go||main.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "logic/jwts.go||logic/jwts.go",
            "logic/serverconf.go||logic/serverconf.go",
            "logic/util.go||logic/util.go",
            "main.go||main.go"
          ],
          "candidate": [
            "logic/jwts.go||logic/jwts.go",
            "logic/serverconf.go||logic/serverconf.go",
            "logic/util.go||logic/util.go",
            "main.go||main.go"
          ]
        }
      },
      "candidate_diff": {
        "logic/jwts.go||logic/jwts.go": [
          "File: logic/jwts.go -> logic/jwts.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"time\"",
          "7:  \"github.com/golang-jwt/jwt/v4\"",
          "8:  \"github.com/gravitl/netmaker/models\"",
          "9:  \"github.com/gravitl/netmaker/servercfg\"",
          "10: )",
          "15: func CreateJWT(macaddress string, network string) (response string, err error) {",
          "",
          "[Removed Lines]",
          "12: var jwtSecretKey = []byte(\"(BytesOverTheWire)\")",
          "",
          "[Added Lines]",
          "8:  \"github.com/gravitl/netmaker/logger\"",
          "13: var jwtSecretKey []byte",
          "16: func SetJWTSecret() {",
          "17:  currentSecret, jwtErr := FetchJWTSecret()",
          "18:  if jwtErr != nil {",
          "19:   newString, err := GenerateRandomString(64)",
          "20:   if err != nil {",
          "21:    logger.FatalLog(\"something went wrong when generating the auth secret\")",
          "22:   }",
          "23:   jwtSecretKey = []byte(newString) // 512 bit random password",
          "24:   if err := StoreJWTSecret(string(jwtSecretKey)); err != nil {",
          "25:    logger.FatalLog(\"something went wrong when configuring JWT authentication\")",
          "26:   }",
          "27:  } else {",
          "28:   jwtSecretKey = []byte(currentSecret)",
          "29:  }",
          "30: }",
          "",
          "---------------"
        ],
        "logic/serverconf.go||logic/serverconf.go": [
          "File: logic/serverconf.go -> logic/serverconf.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: func RemovePrivKey(serverID string) error {",
          "44:  return database.DeleteRecord(database.SERVERCONF_TABLE_NAME, serverID)",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: func FetchJWTSecret() (string, error) {",
          "49:  var dbData string",
          "50:  var err error",
          "51:  var fetchedData = serverData{}",
          "52:  dbData, err = database.FetchRecord(database.SERVERCONF_TABLE_NAME, \"nm-jwt-secret\")",
          "53:  if err != nil {",
          "54:   return \"\", err",
          "55:  }",
          "56:  err = json.Unmarshal([]byte(dbData), &fetchedData)",
          "57:  if err != nil {",
          "58:   return \"\", err",
          "59:  }",
          "60:  return fetchedData.PrivateKey, nil",
          "61: }",
          "64: func StoreJWTSecret(privateKey string) error {",
          "65:  var newData = serverData{}",
          "66:  var err error",
          "67:  var data []byte",
          "68:  newData.PrivateKey = privateKey",
          "69:  data, err = json.Marshal(&newData)",
          "70:  if err != nil {",
          "71:   return err",
          "72:  }",
          "73:  return database.Insert(\"nm-jwt-secret\", string(data), database.SERVERCONF_TABLE_NAME)",
          "74: }",
          "",
          "---------------"
        ],
        "logic/util.go||logic/util.go": [
          "File: logic/util.go -> logic/util.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: package logic",
          "4: import (",
          "5:  \"encoding/base64\"",
          "6:  \"encoding/json\"",
          "7:  \"math/rand\"",
          "8:  \"strconv\"",
          "9:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  crand \"crypto/rand\"",
          "8:  \"math/big\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "280: func RandomString(length int) string {",
          "283:  var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))",
          "",
          "[Removed Lines]",
          "281:  const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"",
          "",
          "[Added Lines]",
          "283:  const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:  return string(b)",
          "290: }",
          "294: func getNetworkEgressAndNodes(networkName string) ([]models.Node, []models.Node, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: func GenerateRandomString(n int) (string, error) {",
          "296:  const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-\"",
          "297:  ret := make([]byte, n)",
          "298:  for i := range ret {",
          "299:   num, err := crand.Int(crand.Reader, big.NewInt(int64(len(chars))))",
          "300:   if err != nil {",
          "301:    return \"\", err",
          "302:   }",
          "303:   ret[i] = chars[num.Int64()]",
          "304:  }",
          "306:  return string(ret), nil",
          "307: }",
          "",
          "---------------"
        ],
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   logger.FatalLog(\"Error connecting to database\")",
          "42:  }",
          "43:  logger.Log(0, \"database successfully connected\")",
          "45:  var authProvider = auth.InitializeAuthProvider()",
          "46:  if authProvider != \"\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  logic.SetJWTSecret()",
          "",
          "---------------"
        ]
      }
    }
  ]
}