{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
  "patch_info": {
    "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { graphqlSync } from 'graphql/graphql.js';",
      "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
      "4: const schema = buildSchema('type Query { hello: String! }');",
      "5: const source = `{ ${'hello '.repeat(250)}}`;",
      "7: export const benchmark = {",
      "8:   name: 'Many repeated fields',",
      "9:   count: 5,",
      "10:   measure() {",
      "11:     graphqlSync({ schema, source });",
      "12:   },",
      "13: };",
      "",
      "---------------"
    ],
    "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
      "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "179:     ]);",
      "180:   });",
      "182:   it('mix of stream and no stream', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:   it('different stream directive extra argument', () => {",
      "183:     expectErrors(`",
      "184:       fragment conflictingArgs on Dog {",
      "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
      "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
      "187:       }",
      "188:     `).toDeepEqual([",
      "189:       {",
      "190:         message:",
      "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
      "192:         locations: [",
      "193:           { line: 3, column: 9 },",
      "194:           { line: 4, column: 9 },",
      "195:         ],",
      "196:       },",
      "197:     ]);",
      "198:   });",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   DirectiveNode,",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast.js';",
      "13: import { Kind } from '../../language/kinds.js';",
      "14: import { print } from '../../language/printer.js';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "11:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:     }",
      "596:       return [",
      "597:         [responseName, 'they have differing arguments'],",
      "598:         [node1],",
      "",
      "[Removed Lines]",
      "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "595:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "649:   }",
      "650: }",
      "665: }",
      "667: function getStreamDirective(",
      "",
      "[Removed Lines]",
      "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
      "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "656:   const inputObjectWithArgs: ObjectValueNode = {",
      "657:     kind: Kind.OBJECT,",
      "658:     fields: args.map((argNode) => ({",
      "659:       kind: Kind.OBJECT_FIELD,",
      "660:       name: argNode.name,",
      "661:       value: argNode.value,",
      "662:     })),",
      "663:   };",
      "664:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "652: function sameArguments(",
      "653:   node1: FieldNode | DirectiveNode,",
      "654:   node2: FieldNode | DirectiveNode,",
      "655: ): boolean {",
      "656:   const args1 = node1.arguments;",
      "657:   const args2 = node2.arguments;",
      "659:   if (args1 === undefined || args1.length === 0) {",
      "660:     return args2 === undefined || args2.length === 0;",
      "661:   }",
      "662:   if (args2 === undefined || args2.length === 0) {",
      "663:     return false;",
      "664:   }",
      "666:   if (args1.length !== args2.length) {",
      "667:     return false;",
      "668:   }",
      "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "671:   return args1.every((arg1) => {",
      "672:     const value1 = arg1.value;",
      "673:     const value2 = values2.get(arg1.name.value);",
      "674:     if (value2 === undefined) {",
      "675:       return false;",
      "676:     }",
      "678:     return stringifyValue(value1) === stringifyValue(value2);",
      "679:   });",
      "680: }",
      "682: function stringifyValue(value: ValueNode): string | null {",
      "683:   return print(sortValueNode(value));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "681:     return true;",
      "682:   } else if (stream1 && stream2) {",
      "685:   }",
      "687:   return false;",
      "",
      "[Removed Lines]",
      "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
      "",
      "[Added Lines]",
      "703:     return sameArguments(stream1, stream2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "05e7a2983d649dc84f6bc0e671b2349ccc56d6b4",
      "candidate_info": {
        "commit_hash": "05e7a2983d649dc84f6bc0e671b2349ccc56d6b4",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/05e7a2983d649dc84f6bc0e671b2349ccc56d6b4",
        "files": [
          "src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/executor-test.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/execution/buildFieldPlan.ts",
          "src/execution/execute.ts",
          "src/jsutils/promiseForObject.ts"
        ],
        "message": "incremental: introduce GraphQLWrappedResult to avoid filtering (#4026)\n\nfollowing https://github.com/graphql/graphql-spec/pull/1077\n\nnow part of the following PR stack, with the laters PRs extracted from\nthis one\n\n#4026: incremental: introduce GraphQLWrappedResult to avoid filtering\n#4050: perf: allow skipping of field plan generation\n#4051: perf: introduce completePromisedListItemValue\n#4052: refactor: introduce completeIterableValue\n#4053: perf: optimize completion loops\n#4046: perf: use undefined for empty",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/executor-test.ts||src/execution/__tests__/executor-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/jsutils/promiseForObject.ts||src/jsutils/promiseForObject.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "2: import type { Path } from '../jsutils/Path.js';",
          "3: import { pathToArray } from '../jsutils/Path.js';",
          "4: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "6: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { isPromise } from '../jsutils/isPromise.js';",
          "5: import type { PromiseOrValue } from '../jsutils/PromiseOrValue.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:   GraphQLFormattedError,",
          "9: } from '../error/GraphQLError.js';",
          "",
          "[Removed Lines]",
          "11: import type { GroupedFieldSet } from './buildFieldPlan.js';",
          "13: interface IncrementalUpdate<TData = unknown, TExtensions = ObjMap<unknown>> {",
          "14:   pending: ReadonlyArray<PendingResult>;",
          "15:   incremental: ReadonlyArray<IncrementalResult<TData, TExtensions>>;",
          "16:   completed: ReadonlyArray<CompletedResult>;",
          "17: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: export interface SubsequentIncrementalExecutionResult<",
          "79:   TData = unknown,",
          "80:   TExtensions = ObjMap<unknown>,",
          "82:   hasNext: boolean;",
          "83:   extensions?: TExtensions;",
          "84: }",
          "",
          "[Removed Lines]",
          "81: > extends Partial<IncrementalUpdate<TData, TExtensions>> {",
          "",
          "[Added Lines]",
          "75: > {",
          "76:   pending?: ReadonlyArray<PendingResult>;",
          "77:   incremental?: ReadonlyArray<IncrementalResult<TData, TExtensions>>;",
          "78:   completed?: ReadonlyArray<CompletedResult>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:   extensions?: TExtensions;",
          "95: }",
          "97: export interface IncrementalDeferResult<",
          "98:   TData = ObjMap<unknown>,",
          "99:   TExtensions = ObjMap<unknown>,",
          "103:   id: string;",
          "104:   subPath?: ReadonlyArray<string | number>;",
          "105:   extensions?: TExtensions;",
          "",
          "[Removed Lines]",
          "100: > {",
          "101:   errors?: ReadonlyArray<GraphQLError>;",
          "102:   data: TData;",
          "",
          "[Added Lines]",
          "94: interface BareDeferredGroupedFieldSetResult<TData = ObjMap<unknown>> {",
          "95:   errors?: ReadonlyArray<GraphQLError>;",
          "96:   data: TData;",
          "97: }",
          "102: > extends BareDeferredGroupedFieldSetResult<TData> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:   extensions?: TExtensions;",
          "117: }",
          "123:   errors?: ReadonlyArray<GraphQLError>;",
          "124:   items: TData;",
          "125:   id: string;",
          "126:   subPath?: ReadonlyArray<string | number>;",
          "127:   extensions?: TExtensions;",
          "",
          "[Removed Lines]",
          "119: export interface IncrementalStreamResult<",
          "120:   TData = Array<unknown>,",
          "121:   TExtensions = ObjMap<unknown>,",
          "122: > {",
          "",
          "[Added Lines]",
          "119: interface BareStreamItemsResult<TData = ReadonlyArray<unknown>> {",
          "122: }",
          "124: export interface IncrementalStreamResult<",
          "125:   TData = ReadonlyArray<unknown>,",
          "126:   TExtensions = ObjMap<unknown>,",
          "127: > extends BareStreamItemsResult<TData> {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:   errors?: ReadonlyArray<GraphQLError>;",
          "167: }",
          "187:   private _pending: Set<SubsequentResultRecord>;",
          "190:   private _signalled!: Promise<unknown>;",
          "191:   private _resolve!: () => void;",
          "195:     this._pending = new Set();",
          "196:     this._reset();",
          "197:   }",
          "218:   }",
          "223:   ): void {",
          "227:       }",
          "242:       }",
          "253:     }",
          "254:   }",
          "257:     deferredFragmentRecord: DeferredFragmentRecord,",
          "258:   ): void {",
          "298:   }",
          "317:     }",
          "319:   }",
          "328:   }",
          "333:   ): void {",
          "350:       }",
          "351:     }",
          "358:   }",
          "363:     const pendingResults: Array<PendingResult> = [];",
          "367:       pendingSource.id = id;",
          "368:       const pendingResult: PendingResult = {",
          "369:         id,",
          "371:       };",
          "372:       if (pendingSource.label !== undefined) {",
          "373:         pendingResult.label = pendingSource.label;",
          "374:       }",
          "375:       pendingResults.push(pendingResult);",
          "376:     }",
          "377:     return pendingResults;",
          "378:   }",
          "",
          "[Removed Lines]",
          "184: export class IncrementalPublisher {",
          "185:   private _nextId = 0;",
          "186:   private _released: Set<SubsequentResultRecord>;",
          "193:   constructor() {",
          "194:     this._released = new Set();",
          "199:   reportNewDeferFragmentRecord(",
          "200:     deferredFragmentRecord: DeferredFragmentRecord,",
          "201:     parentIncrementalResultRecord:",
          "202:       | InitialResultRecord",
          "203:       | DeferredFragmentRecord",
          "204:       | StreamItemsRecord,",
          "205:   ): void {",
          "206:     parentIncrementalResultRecord.children.add(deferredFragmentRecord);",
          "207:   }",
          "209:   reportNewDeferredGroupedFieldSetRecord(",
          "210:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "211:   ): void {",
          "212:     for (const deferredFragmentRecord of deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "213:       deferredFragmentRecord._pending.add(deferredGroupedFieldSetRecord);",
          "214:       deferredFragmentRecord.deferredGroupedFieldSetRecords.add(",
          "215:         deferredGroupedFieldSetRecord,",
          "216:       );",
          "217:     }",
          "220:   reportNewStreamItemsRecord(",
          "221:     streamItemsRecord: StreamItemsRecord,",
          "222:     parentIncrementalDataRecord: IncrementalDataRecord,",
          "224:     if (isDeferredGroupedFieldSetRecord(parentIncrementalDataRecord)) {",
          "225:       for (const parent of parentIncrementalDataRecord.deferredFragmentRecords) {",
          "226:         parent.children.add(streamItemsRecord);",
          "228:     } else {",
          "229:       parentIncrementalDataRecord.children.add(streamItemsRecord);",
          "230:     }",
          "231:   }",
          "233:   completeDeferredGroupedFieldSet(",
          "234:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "235:     data: ObjMap<unknown>,",
          "236:   ): void {",
          "237:     deferredGroupedFieldSetRecord.data = data;",
          "238:     for (const deferredFragmentRecord of deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "239:       deferredFragmentRecord._pending.delete(deferredGroupedFieldSetRecord);",
          "240:       if (deferredFragmentRecord._pending.size === 0) {",
          "241:         this.completeDeferredFragmentRecord(deferredFragmentRecord);",
          "243:     }",
          "244:   }",
          "246:   markErroredDeferredGroupedFieldSet(",
          "247:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "248:     error: GraphQLError,",
          "249:   ): void {",
          "250:     for (const deferredFragmentRecord of deferredGroupedFieldSetRecord.deferredFragmentRecords) {",
          "251:       deferredFragmentRecord.errors.push(error);",
          "252:       this.completeDeferredFragmentRecord(deferredFragmentRecord);",
          "256:   completeDeferredFragmentRecord(",
          "259:     this._release(deferredFragmentRecord);",
          "260:   }",
          "262:   completeStreamItemsRecord(",
          "263:     streamItemsRecord: StreamItemsRecord,",
          "264:     items: Array<unknown>,",
          "265:   ) {",
          "266:     streamItemsRecord.items = items;",
          "267:     streamItemsRecord.isCompleted = true;",
          "268:     this._release(streamItemsRecord);",
          "269:   }",
          "271:   markErroredStreamItemsRecord(",
          "272:     streamItemsRecord: StreamItemsRecord,",
          "273:     error: GraphQLError,",
          "274:   ) {",
          "275:     streamItemsRecord.streamRecord.errors.push(error);",
          "276:     this.setIsFinalRecord(streamItemsRecord);",
          "277:     streamItemsRecord.isCompleted = true;",
          "278:     streamItemsRecord.streamRecord.earlyReturn?.().catch(() => {",
          "280:     });",
          "281:     this._release(streamItemsRecord);",
          "282:   }",
          "284:   setIsFinalRecord(streamItemsRecord: StreamItemsRecord) {",
          "285:     streamItemsRecord.isFinalRecord = true;",
          "286:   }",
          "288:   setIsCompletedAsyncIterator(streamItemsRecord: StreamItemsRecord) {",
          "289:     streamItemsRecord.isCompletedAsyncIterator = true;",
          "290:     this.setIsFinalRecord(streamItemsRecord);",
          "291:   }",
          "293:   addFieldError(",
          "294:     incrementalDataRecord: IncrementalDataRecord,",
          "295:     error: GraphQLError,",
          "296:   ) {",
          "297:     incrementalDataRecord.errors.push(error);",
          "300:   buildDataResponse(",
          "301:     initialResultRecord: InitialResultRecord,",
          "302:     data: ObjMap<unknown> | null,",
          "303:   ): ExecutionResult | ExperimentalIncrementalExecutionResults {",
          "304:     const pendingSources = this._publish(initialResultRecord.children);",
          "306:     const errors = initialResultRecord.errors;",
          "307:     const initialResult = errors.length === 0 ? { data } : { errors, data };",
          "308:     if (pendingSources.size > 0) {",
          "309:       return {",
          "310:         initialResult: {",
          "311:           ...initialResult,",
          "312:           pending: this._pendingSourcesToResults(pendingSources),",
          "313:           hasNext: true,",
          "314:         },",
          "315:         subsequentResults: this._subscribe(),",
          "316:       };",
          "318:     return initialResult;",
          "321:   buildErrorResponse(",
          "322:     initialResultRecord: InitialResultRecord,",
          "323:     error: GraphQLError,",
          "324:   ): ExecutionResult {",
          "325:     const errors = initialResultRecord.errors;",
          "326:     errors.push(error);",
          "327:     return { data: null, errors };",
          "330:   filter(",
          "331:     nullPath: Path | undefined,",
          "332:     erroringIncrementalDataRecord: IncrementalDataRecord,",
          "334:     const nullPathArray = pathToArray(nullPath);",
          "336:     const streams = new Set<StreamRecord>();",
          "338:     const children = this._getChildren(erroringIncrementalDataRecord);",
          "339:     const descendants = this._getDescendants(children);",
          "341:     for (const child of descendants) {",
          "342:       if (!this._nullsChildSubsequentResultRecord(child, nullPathArray)) {",
          "343:         continue;",
          "344:       }",
          "346:       child.filtered = true;",
          "348:       if (isStreamItemsRecord(child)) {",
          "349:         streams.add(child.streamRecord);",
          "353:     streams.forEach((stream) => {",
          "354:       stream.earlyReturn?.().catch(() => {",
          "356:       });",
          "357:     });",
          "360:   private _pendingSourcesToResults(",
          "361:     pendingSources: ReadonlySet<DeferredFragmentRecord | StreamRecord>,",
          "362:   ): Array<PendingResult> {",
          "364:     for (const pendingSource of pendingSources) {",
          "365:       pendingSource.pendingSent = true;",
          "366:       const id = this._getNextId();",
          "370:         path: pendingSource.path,",
          "",
          "[Added Lines]",
          "172: export function buildIncrementalResponse(",
          "173:   context: IncrementalPublisherContext,",
          "174:   result: ObjMap<unknown>,",
          "175:   errors: ReadonlyArray<GraphQLError>,",
          "176:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "177: ): ExperimentalIncrementalExecutionResults {",
          "178:   const incrementalPublisher = new IncrementalPublisher(context);",
          "179:   return incrementalPublisher.buildResponse(",
          "180:     result,",
          "181:     errors,",
          "182:     incrementalDataRecords,",
          "183:   );",
          "184: }",
          "186: interface IncrementalPublisherContext {",
          "187:   cancellableStreams: Set<CancellableStreamRecord>;",
          "188: }",
          "196: class IncrementalPublisher {",
          "197:   private _context: IncrementalPublisherContext;",
          "198:   private _nextId: number;",
          "200:   private _completedResultQueue: Array<IncrementalDataRecordResult>;",
          "201:   private _newPending: Set<SubsequentResultRecord>;",
          "202:   private _incremental: Array<IncrementalResult>;",
          "203:   private _completed: Array<CompletedResult>;",
          "208:   constructor(context: IncrementalPublisherContext) {",
          "209:     this._context = context;",
          "210:     this._nextId = 0;",
          "212:     this._completedResultQueue = [];",
          "213:     this._newPending = new Set();",
          "214:     this._incremental = [];",
          "215:     this._completed = [];",
          "219:   buildResponse(",
          "220:     data: ObjMap<unknown>,",
          "221:     errors: ReadonlyArray<GraphQLError>,",
          "222:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "223:   ): ExperimentalIncrementalExecutionResults {",
          "224:     this._addIncrementalDataRecords(incrementalDataRecords);",
          "225:     this._pruneEmpty();",
          "227:     const pending = this._pendingSourcesToResults();",
          "229:     const initialResult: InitialIncrementalExecutionResult =",
          "230:       errors.length === 0",
          "231:         ? { data, pending, hasNext: true }",
          "232:         : { errors, data, pending, hasNext: true };",
          "234:     return {",
          "235:       initialResult,",
          "236:       subsequentResults: this._subscribe(),",
          "237:     };",
          "240:   private _addIncrementalDataRecords(",
          "241:     incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "243:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "244:       if (isDeferredGroupedFieldSetRecord(incrementalDataRecord)) {",
          "245:         for (const deferredFragmentRecord of incrementalDataRecord.deferredFragmentRecords) {",
          "246:           deferredFragmentRecord.expectedReconcilableResults++;",
          "248:           this._addDeferredFragmentRecord(deferredFragmentRecord);",
          "249:         }",
          "251:         const result = incrementalDataRecord.result;",
          "252:         if (isPromise(result)) {",
          "254:           result.then((resolved) => {",
          "255:             this._enqueueCompletedDeferredGroupedFieldSet(resolved);",
          "256:           });",
          "257:         } else {",
          "258:           this._enqueueCompletedDeferredGroupedFieldSet(result);",
          "259:         }",
          "261:         continue;",
          "264:       const streamRecord = incrementalDataRecord.streamRecord;",
          "265:       if (streamRecord.id === undefined) {",
          "266:         this._newPending.add(streamRecord);",
          "269:       const result = incrementalDataRecord.result;",
          "270:       if (isPromise(result)) {",
          "272:         result.then((resolved) => {",
          "273:           this._enqueueCompletedStreamItems(resolved);",
          "274:         });",
          "275:       } else {",
          "276:         this._enqueueCompletedStreamItems(result);",
          "277:       }",
          "281:   private _addDeferredFragmentRecord(",
          "284:     const parent = deferredFragmentRecord.parent;",
          "285:     if (parent === undefined) {",
          "289:       if (deferredFragmentRecord.id !== undefined) {",
          "290:         return;",
          "291:       }",
          "293:       this._newPending.add(deferredFragmentRecord);",
          "294:       return;",
          "295:     }",
          "297:     if (parent.children.has(deferredFragmentRecord)) {",
          "298:       return;",
          "299:     }",
          "301:     parent.children.add(deferredFragmentRecord);",
          "303:     this._addDeferredFragmentRecord(parent);",
          "306:   private _pruneEmpty() {",
          "307:     const maybeEmptyNewPending = this._newPending;",
          "308:     this._newPending = new Set();",
          "309:     for (const node of maybeEmptyNewPending) {",
          "310:       if (isDeferredFragmentRecord(node)) {",
          "311:         if (node.expectedReconcilableResults) {",
          "312:           this._newPending.add(node);",
          "313:           continue;",
          "314:         }",
          "315:         for (const child of node.children) {",
          "316:           this._addNonEmptyNewPending(child);",
          "317:         }",
          "318:       } else {",
          "319:         this._newPending.add(node);",
          "320:       }",
          "324:   private _addNonEmptyNewPending(",
          "325:     deferredFragmentRecord: DeferredFragmentRecord,",
          "326:   ): void {",
          "327:     if (deferredFragmentRecord.expectedReconcilableResults) {",
          "328:       this._newPending.add(deferredFragmentRecord);",
          "329:       return;",
          "330:     }",
          "333:     for (const child of deferredFragmentRecord.children) {",
          "334:       this._addNonEmptyNewPending(child);",
          "335:     }",
          "338:   private _enqueueCompletedDeferredGroupedFieldSet(",
          "339:     result: DeferredGroupedFieldSetResult,",
          "341:     let hasPendingParent = false;",
          "342:     for (const deferredFragmentRecord of result.deferredFragmentRecords) {",
          "343:       if (deferredFragmentRecord.id !== undefined) {",
          "344:         hasPendingParent = true;",
          "346:       deferredFragmentRecord.results.push(result);",
          "348:     if (hasPendingParent) {",
          "349:       this._completedResultQueue.push(result);",
          "350:       this._trigger();",
          "351:     }",
          "352:   }",
          "354:   private _enqueueCompletedStreamItems(result: StreamItemsResult): void {",
          "355:     this._completedResultQueue.push(result);",
          "356:     this._trigger();",
          "359:   private _pendingSourcesToResults(): Array<PendingResult> {",
          "361:     for (const pendingSource of this._newPending) {",
          "362:       const id = String(this._getNextId());",
          "363:       this._pending.add(pendingSource);",
          "367:         path: pathToArray(pendingSource.path),",
          "374:     this._newPending.clear();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "391:     const _next = async (): Promise<",
          "392:       IteratorResult<SubsequentIncrementalExecutionResult, void>",
          "393:     > => {",
          "402:         }",
          "414:         }",
          "417:         await this._signalled;",
          "418:       }",
          "419:     };",
          "421:     const returnStreamIterators = async (): Promise<void> => {",
          "429:       const promises: Array<Promise<unknown>> = [];",
          "432:           promises.push(streamRecord.earlyReturn());",
          "433:         }",
          "435:       await Promise.all(promises);",
          "436:     };",
          "",
          "[Removed Lines]",
          "395:       while (true) {",
          "396:         if (isDone) {",
          "397:           return { value: undefined, done: true };",
          "398:         }",
          "400:         for (const item of this._released) {",
          "401:           this._pending.delete(item);",
          "403:         const released = this._released;",
          "404:         this._released = new Set();",
          "406:         const result = this._getIncrementalResult(released);",
          "408:         if (this._pending.size === 0) {",
          "409:           isDone = true;",
          "410:         }",
          "412:         if (result !== undefined) {",
          "413:           return { value: result, done: false };",
          "422:       const streams = new Set<StreamRecord>();",
          "423:       const descendants = this._getDescendants(this._pending);",
          "424:       for (const subsequentResultRecord of descendants) {",
          "425:         if (isStreamItemsRecord(subsequentResultRecord)) {",
          "426:           streams.add(subsequentResultRecord.streamRecord);",
          "427:         }",
          "428:       }",
          "430:       streams.forEach((streamRecord) => {",
          "431:         if (streamRecord.earlyReturn) {",
          "434:       });",
          "",
          "[Added Lines]",
          "392:       while (!isDone) {",
          "393:         let pending: Array<PendingResult> = [];",
          "395:         let completedResult: IncrementalDataRecordResult | undefined;",
          "396:         while (",
          "397:           (completedResult = this._completedResultQueue.shift()) !== undefined",
          "398:         ) {",
          "399:           if (isDeferredGroupedFieldSetResult(completedResult)) {",
          "400:             this._handleCompletedDeferredGroupedFieldSet(completedResult);",
          "401:           } else {",
          "402:             this._handleCompletedStreamItems(completedResult);",
          "403:           }",
          "405:           pending = [...pending, ...this._pendingSourcesToResults()];",
          "408:         if (this._incremental.length > 0 || this._completed.length > 0) {",
          "409:           const hasNext = this._pending.size > 0;",
          "411:           if (!hasNext) {",
          "412:             isDone = true;",
          "413:           }",
          "415:           const subsequentIncrementalExecutionResult: SubsequentIncrementalExecutionResult =",
          "416:             { hasNext };",
          "418:           if (pending.length > 0) {",
          "419:             subsequentIncrementalExecutionResult.pending = pending;",
          "420:           }",
          "421:           if (this._incremental.length > 0) {",
          "422:             subsequentIncrementalExecutionResult.incremental =",
          "423:               this._incremental;",
          "424:           }",
          "425:           if (this._completed.length > 0) {",
          "426:             subsequentIncrementalExecutionResult.completed = this._completed;",
          "427:           }",
          "429:           this._incremental = [];",
          "430:           this._completed = [];",
          "432:           return { value: subsequentIncrementalExecutionResult, done: false };",
          "439:       await returnStreamIterators().catch(() => {",
          "441:       });",
          "443:       return { value: undefined, done: true };",
          "448:       for (const streamRecord of this._context.cancellableStreams) {",
          "449:         if (streamRecord.earlyReturn !== undefined) {",
          "452:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "475:     this._signalled = signalled;",
          "476:   }",
          "572:         }",
          "573:       }",
          "574:     }",
          "590:       const id = deferredFragmentRecord.id;",
          "593:       if (id === undefined) {",
          "594:         continue;",
          "595:       }",
          "643:         continue;",
          "644:       }",
          "650:         }",
          "655:         }",
          "668:       }",
          "672:       }",
          "673:     }",
          "680:   }",
          "691:       }",
          "695:       }",
          "722:       }",
          "723:     }",
          "726:   }",
          "736:       }",
          "737:     }",
          "739:   }",
          "740: }",
          "742: function isDeferredGroupedFieldSetRecord(",
          "744: ): incrementalDataRecord is DeferredGroupedFieldSetRecord {",
          "746: }",
          "752: }",
          "762: }",
          "767:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "787: }",
          "792:   label: string | undefined;",
          "810: }",
          "814:   label: string | undefined;",
          "820:   constructor(opts: {",
          "821:     label: string | undefined;",
          "824:   }) {",
          "825:     this.label = opts.label;",
          "829:   }",
          "830: }",
          "852: }",
          "854: export type IncrementalDataRecord =",
          "856:   | DeferredGroupedFieldSetRecord",
          "857:   | StreamItemsRecord;",
          "",
          "[Removed Lines]",
          "478:   private _introduce(item: SubsequentResultRecord) {",
          "479:     this._pending.add(item);",
          "480:   }",
          "482:   private _release(item: SubsequentResultRecord): void {",
          "483:     if (this._pending.has(item)) {",
          "484:       this._released.add(item);",
          "485:       this._trigger();",
          "486:     }",
          "487:   }",
          "489:   private _push(item: SubsequentResultRecord): void {",
          "490:     this._released.add(item);",
          "491:     this._pending.add(item);",
          "492:     this._trigger();",
          "493:   }",
          "495:   private _getIncrementalResult(",
          "496:     completedRecords: ReadonlySet<SubsequentResultRecord>,",
          "497:   ): SubsequentIncrementalExecutionResult | undefined {",
          "498:     const { pending, incremental, completed } =",
          "499:       this._processPending(completedRecords);",
          "501:     const hasNext = this._pending.size > 0;",
          "502:     if (incremental.length === 0 && completed.length === 0 && hasNext) {",
          "503:       return undefined;",
          "504:     }",
          "506:     const result: SubsequentIncrementalExecutionResult = { hasNext };",
          "507:     if (pending.length) {",
          "508:       result.pending = pending;",
          "509:     }",
          "510:     if (incremental.length) {",
          "511:       result.incremental = incremental;",
          "512:     }",
          "513:     if (completed.length) {",
          "514:       result.completed = completed;",
          "515:     }",
          "517:     return result;",
          "518:   }",
          "520:   private _processPending(",
          "521:     completedRecords: ReadonlySet<SubsequentResultRecord>,",
          "522:   ): IncrementalUpdate {",
          "523:     const newPendingSources = new Set<DeferredFragmentRecord | StreamRecord>();",
          "524:     const incrementalResults: Array<IncrementalResult> = [];",
          "525:     const completedResults: Array<CompletedResult> = [];",
          "526:     for (const subsequentResultRecord of completedRecords) {",
          "527:       this._publish(subsequentResultRecord.children, newPendingSources);",
          "528:       if (isStreamItemsRecord(subsequentResultRecord)) {",
          "529:         if (subsequentResultRecord.isFinalRecord) {",
          "530:           newPendingSources.delete(subsequentResultRecord.streamRecord);",
          "531:           completedResults.push(",
          "532:             this._completedRecordToResult(subsequentResultRecord.streamRecord),",
          "533:           );",
          "534:         }",
          "535:         if (subsequentResultRecord.isCompletedAsyncIterator) {",
          "537:           continue;",
          "538:         }",
          "539:         if (subsequentResultRecord.streamRecord.errors.length > 0) {",
          "540:           continue;",
          "541:         }",
          "542:         const incrementalResult: IncrementalStreamResult = {",
          "545:           items: subsequentResultRecord.items!,",
          "548:           id: subsequentResultRecord.streamRecord.id!,",
          "549:         };",
          "550:         if (subsequentResultRecord.errors.length > 0) {",
          "551:           incrementalResult.errors = subsequentResultRecord.errors;",
          "552:         }",
          "553:         incrementalResults.push(incrementalResult);",
          "554:       } else {",
          "555:         newPendingSources.delete(subsequentResultRecord);",
          "556:         completedResults.push(",
          "557:           this._completedRecordToResult(subsequentResultRecord),",
          "558:         );",
          "559:         if (subsequentResultRecord.errors.length > 0) {",
          "560:           continue;",
          "561:         }",
          "562:         for (const deferredGroupedFieldSetRecord of subsequentResultRecord.deferredGroupedFieldSetRecords) {",
          "563:           if (!deferredGroupedFieldSetRecord.sent) {",
          "564:             deferredGroupedFieldSetRecord.sent = true;",
          "565:             const incrementalResult: IncrementalDeferResult =",
          "566:               this._getIncrementalDeferResult(deferredGroupedFieldSetRecord);",
          "567:             if (deferredGroupedFieldSetRecord.errors.length > 0) {",
          "568:               incrementalResult.errors = deferredGroupedFieldSetRecord.errors;",
          "569:             }",
          "570:             incrementalResults.push(incrementalResult);",
          "571:           }",
          "576:     return {",
          "577:       pending: this._pendingSourcesToResults(newPendingSources),",
          "578:       incremental: incrementalResults,",
          "579:       completed: completedResults,",
          "580:     };",
          "581:   }",
          "583:   private _getIncrementalDeferResult(",
          "584:     deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "585:   ): IncrementalDeferResult {",
          "586:     const { data, deferredFragmentRecords } = deferredGroupedFieldSetRecord;",
          "587:     let maxLength: number | undefined;",
          "588:     let idWithLongestPath: string | undefined;",
          "589:     for (const deferredFragmentRecord of deferredFragmentRecords) {",
          "596:       const length = deferredFragmentRecord.path.length;",
          "597:       if (maxLength === undefined || length > maxLength) {",
          "598:         maxLength = length;",
          "599:         idWithLongestPath = id;",
          "600:       }",
          "601:     }",
          "602:     const subPath = deferredGroupedFieldSetRecord.path.slice(maxLength);",
          "603:     const incrementalDeferResult: IncrementalDeferResult = {",
          "606:       data: data!,",
          "611:       id: idWithLongestPath!,",
          "612:     };",
          "614:     if (subPath.length > 0) {",
          "615:       incrementalDeferResult.subPath = subPath;",
          "616:     }",
          "618:     return incrementalDeferResult;",
          "619:   }",
          "621:   private _completedRecordToResult(",
          "622:     completedRecord: DeferredFragmentRecord | StreamRecord,",
          "623:   ): CompletedResult {",
          "624:     const result: CompletedResult = {",
          "627:       id: completedRecord.id!,",
          "628:     };",
          "629:     if (completedRecord.errors.length > 0) {",
          "630:       result.errors = completedRecord.errors;",
          "631:     }",
          "632:     return result;",
          "633:   }",
          "635:   private _publish(",
          "636:     subsequentResultRecords: ReadonlySet<SubsequentResultRecord>,",
          "637:     pendingSources = new Set<DeferredFragmentRecord | StreamRecord>(),",
          "638:   ): Set<DeferredFragmentRecord | StreamRecord> {",
          "639:     const emptyRecords: Array<SubsequentResultRecord> = [];",
          "641:     for (const subsequentResultRecord of subsequentResultRecords) {",
          "642:       if (subsequentResultRecord.filtered) {",
          "645:       if (isStreamItemsRecord(subsequentResultRecord)) {",
          "646:         if (subsequentResultRecord.isCompleted) {",
          "647:           this._push(subsequentResultRecord);",
          "648:         } else {",
          "649:           this._introduce(subsequentResultRecord);",
          "652:         const stream = subsequentResultRecord.streamRecord;",
          "653:         if (!stream.pendingSent) {",
          "654:           pendingSources.add(stream);",
          "656:         continue;",
          "657:       }",
          "659:       if (subsequentResultRecord._pending.size > 0) {",
          "660:         this._introduce(subsequentResultRecord);",
          "661:       } else if (",
          "662:         subsequentResultRecord.deferredGroupedFieldSetRecords.size === 0",
          "663:       ) {",
          "664:         emptyRecords.push(subsequentResultRecord);",
          "665:         continue;",
          "666:       } else {",
          "667:         this._push(subsequentResultRecord);",
          "670:       if (!subsequentResultRecord.pendingSent) {",
          "671:         pendingSources.add(subsequentResultRecord);",
          "675:     for (const emptyRecord of emptyRecords) {",
          "676:       this._publish(emptyRecord.children, pendingSources);",
          "677:     }",
          "679:     return pendingSources;",
          "682:   private _getChildren(",
          "683:     erroringIncrementalDataRecord: IncrementalDataRecord,",
          "684:   ): ReadonlySet<SubsequentResultRecord> {",
          "685:     const children = new Set<SubsequentResultRecord>();",
          "686:     if (isDeferredGroupedFieldSetRecord(erroringIncrementalDataRecord)) {",
          "687:       for (const erroringIncrementalResultRecord of erroringIncrementalDataRecord.deferredFragmentRecords) {",
          "688:         for (const child of erroringIncrementalResultRecord.children) {",
          "689:           children.add(child);",
          "690:         }",
          "692:     } else {",
          "693:       for (const child of erroringIncrementalDataRecord.children) {",
          "694:         children.add(child);",
          "696:     }",
          "697:     return children;",
          "698:   }",
          "700:   private _getDescendants(",
          "701:     children: ReadonlySet<SubsequentResultRecord>,",
          "702:     descendants = new Set<SubsequentResultRecord>(),",
          "703:   ): ReadonlySet<SubsequentResultRecord> {",
          "704:     for (const child of children) {",
          "705:       descendants.add(child);",
          "706:       this._getDescendants(child.children, descendants);",
          "707:     }",
          "708:     return descendants;",
          "709:   }",
          "711:   private _nullsChildSubsequentResultRecord(",
          "712:     subsequentResultRecord: SubsequentResultRecord,",
          "713:     nullPath: ReadonlyArray<string | number>,",
          "714:   ): boolean {",
          "715:     const incrementalDataRecords = isStreamItemsRecord(subsequentResultRecord)",
          "716:       ? [subsequentResultRecord]",
          "717:       : subsequentResultRecord.deferredGroupedFieldSetRecords;",
          "719:     for (const incrementalDataRecord of incrementalDataRecords) {",
          "720:       if (this._matchesPath(incrementalDataRecord.path, nullPath)) {",
          "721:         return true;",
          "725:     return false;",
          "728:   private _matchesPath(",
          "729:     testPath: ReadonlyArray<string | number>,",
          "730:     basePath: ReadonlyArray<string | number>,",
          "731:   ): boolean {",
          "732:     for (let i = 0; i < basePath.length; i++) {",
          "733:       if (basePath[i] !== testPath[i]) {",
          "735:         return false;",
          "738:     return true;",
          "743:   incrementalDataRecord: unknown,",
          "745:   return incrementalDataRecord instanceof DeferredGroupedFieldSetRecord;",
          "748: function isStreamItemsRecord(",
          "749:   subsequentResultRecord: unknown,",
          "750: ): subsequentResultRecord is StreamItemsRecord {",
          "751:   return subsequentResultRecord instanceof StreamItemsRecord;",
          "755: export class InitialResultRecord {",
          "756:   errors: Array<GraphQLError>;",
          "757:   children: Set<SubsequentResultRecord>;",
          "758:   constructor() {",
          "759:     this.errors = [];",
          "760:     this.children = new Set();",
          "761:   }",
          "765: export class DeferredGroupedFieldSetRecord {",
          "766:   path: ReadonlyArray<string | number>;",
          "768:   groupedFieldSet: GroupedFieldSet;",
          "769:   shouldInitiateDefer: boolean;",
          "770:   errors: Array<GraphQLError>;",
          "771:   data: ObjMap<unknown> | undefined;",
          "772:   sent: boolean;",
          "774:   constructor(opts: {",
          "775:     path: Path | undefined;",
          "776:     deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "777:     groupedFieldSet: GroupedFieldSet;",
          "778:     shouldInitiateDefer: boolean;",
          "779:   }) {",
          "780:     this.path = pathToArray(opts.path);",
          "781:     this.deferredFragmentRecords = opts.deferredFragmentRecords;",
          "782:     this.groupedFieldSet = opts.groupedFieldSet;",
          "783:     this.shouldInitiateDefer = opts.shouldInitiateDefer;",
          "784:     this.errors = [];",
          "785:     this.sent = false;",
          "786:   }",
          "790: export class DeferredFragmentRecord {",
          "791:   path: ReadonlyArray<string | number>;",
          "793:   id: string | undefined;",
          "794:   children: Set<SubsequentResultRecord>;",
          "795:   deferredGroupedFieldSetRecords: Set<DeferredGroupedFieldSetRecord>;",
          "796:   errors: Array<GraphQLError>;",
          "797:   filtered: boolean;",
          "798:   pendingSent?: boolean;",
          "799:   _pending: Set<DeferredGroupedFieldSetRecord>;",
          "801:   constructor(opts: { path: Path | undefined; label: string | undefined }) {",
          "802:     this.path = pathToArray(opts.path);",
          "803:     this.label = opts.label;",
          "804:     this.children = new Set();",
          "805:     this.filtered = false;",
          "806:     this.deferredGroupedFieldSetRecords = new Set();",
          "807:     this.errors = [];",
          "808:     this._pending = new Set();",
          "809:   }",
          "813: export class StreamRecord {",
          "815:   path: ReadonlyArray<string | number>;",
          "816:   id: string | undefined;",
          "817:   errors: Array<GraphQLError>;",
          "818:   earlyReturn?: (() => Promise<unknown>) | undefined;",
          "819:   pendingSent?: boolean;",
          "822:     path: Path;",
          "823:     earlyReturn?: (() => Promise<unknown>) | undefined;",
          "826:     this.path = pathToArray(opts.path);",
          "827:     this.errors = [];",
          "828:     this.earlyReturn = opts.earlyReturn;",
          "833: export class StreamItemsRecord {",
          "834:   errors: Array<GraphQLError>;",
          "835:   streamRecord: StreamRecord;",
          "836:   path: ReadonlyArray<string | number>;",
          "837:   items: Array<unknown> | undefined;",
          "838:   children: Set<SubsequentResultRecord>;",
          "839:   isFinalRecord?: boolean;",
          "840:   isCompletedAsyncIterator?: boolean;",
          "841:   isCompleted: boolean;",
          "842:   filtered: boolean;",
          "844:   constructor(opts: { streamRecord: StreamRecord; path: Path | undefined }) {",
          "845:     this.streamRecord = opts.streamRecord;",
          "846:     this.path = pathToArray(opts.path);",
          "847:     this.children = new Set();",
          "848:     this.errors = [];",
          "849:     this.isCompleted = false;",
          "850:     this.filtered = false;",
          "851:   }",
          "855:   | InitialResultRecord",
          "859: type SubsequentResultRecord = DeferredFragmentRecord | StreamItemsRecord;",
          "",
          "[Added Lines]",
          "496:   private _handleCompletedDeferredGroupedFieldSet(",
          "497:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "498:   ): void {",
          "499:     if (",
          "500:       isNonReconcilableDeferredGroupedFieldSetResult(",
          "501:         deferredGroupedFieldSetResult,",
          "502:       )",
          "503:     ) {",
          "504:       for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "505:         const id = deferredFragmentRecord.id;",
          "506:         if (id !== undefined) {",
          "507:           this._completed.push({",
          "508:             id,",
          "509:             errors: deferredGroupedFieldSetResult.errors,",
          "510:           });",
          "511:           this._pending.delete(deferredFragmentRecord);",
          "514:       return;",
          "515:     }",
          "516:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "517:       deferredFragmentRecord.reconcilableResults.push(",
          "518:         deferredGroupedFieldSetResult,",
          "519:       );",
          "522:     this._addIncrementalDataRecords(",
          "523:       deferredGroupedFieldSetResult.incrementalDataRecords,",
          "524:     );",
          "526:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "535:       const reconcilableResults = deferredFragmentRecord.reconcilableResults;",
          "536:       if (",
          "537:         deferredFragmentRecord.expectedReconcilableResults !==",
          "538:         reconcilableResults.length",
          "539:       ) {",
          "542:       for (const reconcilableResult of reconcilableResults) {",
          "543:         if (reconcilableResult.sent) {",
          "544:           continue;",
          "546:         reconcilableResult.sent = true;",
          "547:         const { bestId, subPath } = this._getBestIdAndSubPath(",
          "548:           id,",
          "549:           deferredFragmentRecord,",
          "550:           reconcilableResult,",
          "551:         );",
          "552:         const incrementalEntry: IncrementalDeferResult = {",
          "553:           ...reconcilableResult.result,",
          "554:           id: bestId,",
          "555:         };",
          "556:         if (subPath !== undefined) {",
          "557:           incrementalEntry.subPath = subPath;",
          "559:         this._incremental.push(incrementalEntry);",
          "561:       this._completed.push({ id });",
          "562:       this._pending.delete(deferredFragmentRecord);",
          "563:       for (const child of deferredFragmentRecord.children) {",
          "564:         this._newPending.add(child);",
          "565:         this._completedResultQueue.push(...child.results);",
          "569:     this._pruneEmpty();",
          "572:   private _handleCompletedStreamItems(",
          "573:     streamItemsResult: StreamItemsResult,",
          "574:   ): void {",
          "575:     const streamRecord = streamItemsResult.streamRecord;",
          "576:     const id = streamRecord.id;",
          "580:     if (id === undefined) {",
          "581:       return;",
          "582:     }",
          "583:     if (streamItemsResult.errors !== undefined) {",
          "584:       this._completed.push({",
          "585:         id,",
          "586:         errors: streamItemsResult.errors,",
          "587:       });",
          "588:       this._pending.delete(streamRecord);",
          "589:       if (isCancellableStreamRecord(streamRecord)) {",
          "590:         this._context.cancellableStreams.delete(streamRecord);",
          "591:         streamRecord.earlyReturn().catch(() => {",
          "594:         });",
          "596:     } else if (streamItemsResult.result === undefined) {",
          "597:       this._completed.push({ id });",
          "598:       this._pending.delete(streamRecord);",
          "599:       if (isCancellableStreamRecord(streamRecord)) {",
          "600:         this._context.cancellableStreams.delete(streamRecord);",
          "602:     } else {",
          "603:       const incrementalEntry: IncrementalStreamResult = {",
          "604:         id,",
          "605:         ...streamItemsResult.result,",
          "606:       };",
          "608:       this._incremental.push(incrementalEntry);",
          "610:       if (streamItemsResult.incrementalDataRecords.length > 0) {",
          "611:         this._addIncrementalDataRecords(",
          "612:           streamItemsResult.incrementalDataRecords,",
          "613:         );",
          "614:         this._pruneEmpty();",
          "619:   private _getBestIdAndSubPath(",
          "620:     initialId: string,",
          "621:     initialDeferredFragmentRecord: DeferredFragmentRecord,",
          "622:     deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "623:   ): { bestId: string; subPath: ReadonlyArray<string | number> | undefined } {",
          "624:     let maxLength = pathToArray(initialDeferredFragmentRecord.path).length;",
          "625:     let bestId = initialId;",
          "627:     for (const deferredFragmentRecord of deferredGroupedFieldSetResult.deferredFragmentRecords) {",
          "628:       if (deferredFragmentRecord === initialDeferredFragmentRecord) {",
          "629:         continue;",
          "630:       }",
          "631:       const id = deferredFragmentRecord.id;",
          "634:       if (id === undefined) {",
          "635:         continue;",
          "636:       }",
          "637:       const fragmentPath = pathToArray(deferredFragmentRecord.path);",
          "638:       const length = fragmentPath.length;",
          "639:       if (length > maxLength) {",
          "640:         maxLength = length;",
          "641:         bestId = id;",
          "644:     const subPath = deferredGroupedFieldSetResult.path.slice(maxLength);",
          "645:     return {",
          "646:       bestId,",
          "647:       subPath: subPath.length > 0 ? subPath : undefined,",
          "648:     };",
          "652: function isDeferredFragmentRecord(",
          "653:   subsequentResultRecord: SubsequentResultRecord,",
          "654: ): subsequentResultRecord is DeferredFragmentRecord {",
          "655:   return 'parent' in subsequentResultRecord;",
          "656: }",
          "659:   incrementalDataRecord: IncrementalDataRecord,",
          "661:   return 'deferredFragmentRecords' in incrementalDataRecord;",
          "664: export type DeferredGroupedFieldSetResult =",
          "665:   | ReconcilableDeferredGroupedFieldSetResult",
          "666:   | NonReconcilableDeferredGroupedFieldSetResult;",
          "668: function isDeferredGroupedFieldSetResult(",
          "669:   subsequentResult: DeferredGroupedFieldSetResult | StreamItemsResult,",
          "670: ): subsequentResult is DeferredGroupedFieldSetResult {",
          "671:   return 'deferredFragmentRecords' in subsequentResult;",
          "674: interface ReconcilableDeferredGroupedFieldSetResult {",
          "675:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "676:   path: Array<string | number>;",
          "677:   result: BareDeferredGroupedFieldSetResult;",
          "678:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>;",
          "679:   sent?: true | undefined;",
          "680:   errors?: never;",
          "683: interface NonReconcilableDeferredGroupedFieldSetResult {",
          "684:   errors: ReadonlyArray<GraphQLError>;",
          "686:   path: Array<string | number>;",
          "687:   result?: never;",
          "688: }",
          "690: function isNonReconcilableDeferredGroupedFieldSetResult(",
          "691:   deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "692: ): deferredGroupedFieldSetResult is NonReconcilableDeferredGroupedFieldSetResult {",
          "693:   return deferredGroupedFieldSetResult.errors !== undefined;",
          "696: export interface DeferredGroupedFieldSetRecord {",
          "697:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "698:   result: PromiseOrValue<DeferredGroupedFieldSetResult>;",
          "699: }",
          "701: export interface SubsequentResultRecord {",
          "702:   path: Path | undefined;",
          "704:   id?: string | undefined;",
          "708: export class DeferredFragmentRecord implements SubsequentResultRecord {",
          "709:   path: Path | undefined;",
          "711:   id?: string | undefined;",
          "712:   parent: DeferredFragmentRecord | undefined;",
          "713:   expectedReconcilableResults: number;",
          "714:   results: Array<DeferredGroupedFieldSetResult>;",
          "715:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "716:   children: Set<DeferredFragmentRecord>;",
          "719:     path: Path | undefined;",
          "721:     parent: DeferredFragmentRecord | undefined;",
          "723:     this.path = opts.path;",
          "725:     this.parent = opts.parent;",
          "726:     this.expectedReconcilableResults = 0;",
          "727:     this.results = [];",
          "728:     this.reconcilableResults = [];",
          "729:     this.children = new Set();",
          "733: export interface CancellableStreamRecord extends SubsequentResultRecord {",
          "734:   earlyReturn: () => Promise<unknown>;",
          "735: }",
          "737: function isCancellableStreamRecord(",
          "738:   subsequentResultRecord: SubsequentResultRecord,",
          "739: ): subsequentResultRecord is CancellableStreamRecord {",
          "740:   return 'earlyReturn' in subsequentResultRecord;",
          "741: }",
          "743: interface ReconcilableStreamItemsResult {",
          "744:   streamRecord: SubsequentResultRecord;",
          "745:   result: BareStreamItemsResult;",
          "746:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>;",
          "747:   errors?: never;",
          "748: }",
          "750: export function isReconcilableStreamItemsResult(",
          "751:   streamItemsResult: StreamItemsResult,",
          "752: ): streamItemsResult is ReconcilableStreamItemsResult {",
          "753:   return streamItemsResult.result !== undefined;",
          "754: }",
          "756: interface TerminatingStreamItemsResult {",
          "757:   streamRecord: SubsequentResultRecord;",
          "758:   result?: never;",
          "759:   incrementalDataRecords?: never;",
          "760:   errors?: never;",
          "761: }",
          "763: interface NonReconcilableStreamItemsResult {",
          "764:   streamRecord: SubsequentResultRecord;",
          "765:   errors: ReadonlyArray<GraphQLError>;",
          "766:   result?: never;",
          "767: }",
          "769: export type StreamItemsResult =",
          "770:   | ReconcilableStreamItemsResult",
          "771:   | TerminatingStreamItemsResult",
          "772:   | NonReconcilableStreamItemsResult;",
          "774: export interface StreamItemsRecord {",
          "775:   streamRecord: SubsequentResultRecord;",
          "776:   result: PromiseOrValue<StreamItemsResult>;",
          "783: export type IncrementalDataRecordResult =",
          "784:   | DeferredGroupedFieldSetResult",
          "785:   | StreamItemsResult;",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:             },",
          "368:             id: '0',",
          "369:           },",
          "376:           {",
          "377:             data: {",
          "378:               friends: [{ name: 'Han' }, { name: 'Leia' }, { name: 'C-3PO' }],",
          "",
          "[Removed Lines]",
          "370:         ],",
          "371:         completed: [{ id: '0' }],",
          "372:         hasNext: true,",
          "373:       },",
          "374:       {",
          "375:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:             id: '1',",
          "381:           },",
          "382:         ],",
          "384:         hasNext: false,",
          "385:       },",
          "386:     ]);",
          "",
          "[Removed Lines]",
          "383:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "377:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "674:           hero: {},",
          "675:         },",
          "676:         pending: [",
          "679:         ],",
          "680:         hasNext: true,",
          "681:       },",
          "",
          "[Removed Lines]",
          "677:           { id: '0', path: [], label: 'DeferName' },",
          "678:           { id: '1', path: ['hero'], label: 'DeferID' },",
          "",
          "[Added Lines]",
          "671:           { id: '0', path: ['hero'], label: 'DeferID' },",
          "672:           { id: '1', path: [], label: 'DeferName' },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "685:             data: {",
          "686:               id: '1',",
          "687:             },",
          "689:           },",
          "690:           {",
          "691:             data: {",
          "692:               name: 'Luke',",
          "693:             },",
          "695:             subPath: ['hero'],",
          "696:           },",
          "697:         ],",
          "699:         hasNext: false,",
          "700:       },",
          "701:     ]);",
          "",
          "[Removed Lines]",
          "688:             id: '1',",
          "694:             id: '0',",
          "698:         completed: [{ id: '1' }, { id: '0' }],",
          "",
          "[Added Lines]",
          "682:             id: '0',",
          "688:             id: '1',",
          "692:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "983:         hasNext: true,",
          "984:       },",
          "985:       {",
          "987:         incremental: [",
          "988:           {",
          "989:             data: { bar: 'bar' },",
          "990:             id: '0',",
          "991:             subPath: ['nestedObject', 'deeperObject'],",
          "992:           },",
          "1000:           {",
          "1001:             data: { baz: 'baz' },",
          "1002:             id: '1',",
          "1003:             subPath: ['deeperObject'],",
          "1004:           },",
          "1011:           {",
          "1012:             data: { bak: 'bak' },",
          "1013:             id: '2',",
          "1014:           },",
          "1015:         ],",
          "1017:         hasNext: false,",
          "1018:       },",
          "1019:     ]);",
          "",
          "[Removed Lines]",
          "986:         pending: [{ id: '1', path: ['hero', 'nestedObject'] }],",
          "993:         ],",
          "994:         completed: [{ id: '0' }],",
          "995:         hasNext: true,",
          "996:       },",
          "997:       {",
          "998:         pending: [{ id: '2', path: ['hero', 'nestedObject', 'deeperObject'] }],",
          "999:         incremental: [",
          "1005:         ],",
          "1006:         hasNext: true,",
          "1007:         completed: [{ id: '1' }],",
          "1008:       },",
          "1009:       {",
          "1010:         incremental: [",
          "1016:         completed: [{ id: '2' }],",
          "",
          "[Added Lines]",
          "980:         pending: [",
          "981:           { id: '1', path: ['hero', 'nestedObject'] },",
          "982:           { id: '2', path: ['hero', 'nestedObject', 'deeperObject'] },",
          "983:         ],",
          "1000:         completed: [{ id: '0' }, { id: '1' }, { id: '2' }],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1132:           },",
          "1133:         },",
          "1134:         pending: [",
          "1137:         ],",
          "1138:         hasNext: true,",
          "1139:       },",
          "",
          "[Removed Lines]",
          "1135:           { id: '0', path: [] },",
          "1136:           { id: '1', path: ['a', 'b'] },",
          "",
          "[Added Lines]",
          "1119:           { id: '0', path: ['a', 'b'] },",
          "1120:           { id: '1', path: [] },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1141:         incremental: [",
          "1142:           {",
          "1143:             data: { e: { f: 'f' } },",
          "1145:           },",
          "1146:           {",
          "1147:             data: { g: { h: 'h' } },",
          "1149:           },",
          "1150:         ],",
          "1152:         hasNext: false,",
          "1153:       },",
          "1154:     ]);",
          "",
          "[Removed Lines]",
          "1144:             id: '1',",
          "1148:             id: '0',",
          "1151:         completed: [{ id: '1' }, { id: '0' }],",
          "",
          "[Added Lines]",
          "1128:             id: '0',",
          "1132:             id: '1',",
          "1135:         completed: [{ id: '0' }, { id: '1' }],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1277:           },",
          "1278:         ],",
          "1279:         completed: [",
          "1280:           {",
          "1281:             id: '1',",
          "1282:             errors: [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1264:           { id: '0' },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1288:               },",
          "1289:             ],",
          "1290:           },",
          "1292:         ],",
          "1293:         hasNext: false,",
          "1294:       },",
          "",
          "[Removed Lines]",
          "1291:           { id: '0' },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/execution/__tests__/executor-test.ts||src/execution/__tests__/executor-test.ts": [
          "File: src/execution/__tests__/executor-test.ts -> src/execution/__tests__/executor-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:     expect(isAsyncResolverFinished).to.equal(true);",
          "636:   });",
          "638:   it('Full response path is included for non-nullable fields', () => {",
          "639:     const A: GraphQLObjectType = new GraphQLObjectType({",
          "640:       name: 'A',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   it('handles async bubbling errors combined with non-bubbling errors', async () => {",
          "639:     const schema = new GraphQLSchema({",
          "640:       query: new GraphQLObjectType({",
          "641:         name: 'Query',",
          "642:         fields: {",
          "643:           asyncNonNullError: {",
          "644:             type: new GraphQLNonNull(GraphQLString),",
          "645:             async resolve() {",
          "646:               await resolveOnNextTick();",
          "647:               return null;",
          "648:             },",
          "649:           },",
          "650:           asyncError: {",
          "651:             type: GraphQLString,",
          "652:             async resolve() {",
          "653:               await resolveOnNextTick();",
          "654:               throw new Error('Oops');",
          "655:             },",
          "656:           },",
          "657:         },",
          "658:       }),",
          "659:     });",
          "662:     const document = parse(`",
          "663:       {",
          "664:         asyncError",
          "665:         asyncNonNullError",
          "666:       }",
          "667:     `);",
          "669:     const result = execute({ schema, document });",
          "671:     expectJSON(await result).toDeepEqual({",
          "672:       data: null,",
          "673:       errors: [",
          "674:         {",
          "675:           message: 'Oops',",
          "676:           locations: [{ line: 3, column: 9 }],",
          "677:           path: ['asyncError'],",
          "678:         },",
          "679:         {",
          "680:           message:",
          "681:             'Cannot return null for non-nullable field Query.asyncNonNullError.',",
          "682:           locations: [{ line: 4, column: 9 }],",
          "683:           path: ['asyncNonNullError'],",
          "684:         },",
          "685:       ],",
          "686:     });",
          "687:   });",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:         hasNext: true,",
          "147:       },",
          "148:       {",
          "154:         completed: [{ id: '0' }],",
          "155:         hasNext: false,",
          "156:       },",
          "",
          "[Removed Lines]",
          "149:         incremental: [{ items: ['banana'], id: '0' }],",
          "150:         hasNext: true,",
          "151:       },",
          "152:       {",
          "153:         incremental: [{ items: ['coconut'], id: '0' }],",
          "",
          "[Added Lines]",
          "149:         incremental: [",
          "150:           { items: ['banana'], id: '0' },",
          "151:           { items: ['coconut'], id: '0' },",
          "152:         ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:         hasNext: true,",
          "171:       },",
          "172:       {",
          "182:         completed: [{ id: '0' }],",
          "183:         hasNext: false,",
          "184:       },",
          "",
          "[Removed Lines]",
          "173:         incremental: [{ items: ['apple'], id: '0' }],",
          "174:         hasNext: true,",
          "175:       },",
          "176:       {",
          "177:         incremental: [{ items: ['banana'], id: '0' }],",
          "178:         hasNext: true,",
          "179:       },",
          "180:       {",
          "181:         incremental: [{ items: ['coconut'], id: '0' }],",
          "",
          "[Added Lines]",
          "172:         incremental: [",
          "173:           { items: ['apple'], id: '0' },",
          "174:           { items: ['banana'], id: '0' },",
          "175:           { items: ['coconut'], id: '0' },",
          "176:         ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:             items: ['banana'],",
          "229:             id: '0',",
          "230:           },",
          "236:           {",
          "237:             items: ['coconut'],",
          "238:             id: '0',",
          "",
          "[Removed Lines]",
          "231:         ],",
          "232:         hasNext: true,",
          "233:       },",
          "234:       {",
          "235:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "297:             items: [['banana', 'banana', 'banana']],",
          "298:             id: '0',",
          "299:           },",
          "305:           {",
          "306:             items: [['coconut', 'coconut', 'coconut']],",
          "307:             id: '0',",
          "",
          "[Removed Lines]",
          "300:         ],",
          "301:         hasNext: true,",
          "302:       },",
          "303:       {",
          "304:         incremental: [",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "811:       }",
          "812:     `);",
          "813:     const result = await complete(document, {",
          "815:     });",
          "817:     expectJSON(result).toDeepEqual([",
          "",
          "[Removed Lines]",
          "814:       nonNullFriendList: () => [friends[0], null],",
          "",
          "[Added Lines]",
          "799:       nonNullFriendList: () => [friends[0], null, friends[1]],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1954:       hasNext: true,",
          "1955:     });",
          "1960:     expectJSON(result2).toDeepEqual({",
          "1961:       value: {",
          "1962:         pending: [{ id: '2', path: ['friendList', 1], label: 'DeferName' }],",
          "",
          "[Removed Lines]",
          "1957:     const result2Promise = iterator.next();",
          "1958:     resolveIterableCompletion(null);",
          "1959:     const result2 = await result2Promise;",
          "",
          "[Added Lines]",
          "1942:     const result2 = await iterator.next();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1977:     });",
          "1979:     const result3Promise = iterator.next();",
          "1981:     const result3 = await result3Promise;",
          "1982:     expectJSON(result3).toDeepEqual({",
          "1983:       value: {",
          "",
          "[Removed Lines]",
          "1980:     resolveSlowField('Han');",
          "",
          "[Added Lines]",
          "1963:     resolveIterableCompletion(null);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1986:       },",
          "1987:       done: false,",
          "1988:     });",
          "1990:     expectJSON(result4).toDeepEqual({",
          "1991:       value: {",
          "1992:         incremental: [",
          "",
          "[Removed Lines]",
          "1989:     const result4 = await iterator.next();",
          "",
          "[Added Lines]",
          "1972:     const result4Promise = iterator.next();",
          "1973:     resolveSlowField('Han');",
          "1974:     const result4 = await result4Promise;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2077:       done: false,",
          "2078:     });",
          "2081:     expectJSON(result3).toDeepEqual({",
          "2082:       value: {",
          "2083:         incremental: [",
          "2084:           {",
          "",
          "[Removed Lines]",
          "2080:     const result3 = await iterator.next();",
          "",
          "[Added Lines]",
          "2065:     const result3Promise = iterator.next();",
          "2066:     resolveIterableCompletion(null);",
          "2067:     const result3 = await result3Promise;",
          "2069:       value: {",
          "2070:         completed: [{ id: '1' }],",
          "2071:         hasNext: true,",
          "2072:       },",
          "2073:       done: false,",
          "2074:     });",
          "2076:     const result4 = await iterator.next();",
          "2077:     expectJSON(result4).toDeepEqual({",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2087:           },",
          "2088:         ],",
          "2089:         completed: [{ id: '2' }],",
          "2100:         hasNext: false,",
          "2101:       },",
          "2102:       done: false,",
          "",
          "[Removed Lines]",
          "2090:         hasNext: true,",
          "2091:       },",
          "2092:       done: false,",
          "2093:     });",
          "2094:     const result4Promise = iterator.next();",
          "2095:     resolveIterableCompletion(null);",
          "2096:     const result4 = await result4Promise;",
          "2097:     expectJSON(result4).toDeepEqual({",
          "2098:       value: {",
          "2099:         completed: [{ id: '1' }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/execution/buildFieldPlan.ts||src/execution/buildFieldPlan.ts": [
          "File: src/execution/buildFieldPlan.ts -> src/execution/buildFieldPlan.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: export type GroupedFieldSet = Map<string, FieldGroup>;",
          "20: export function buildFieldPlan(",
          "21:   fields: Map<string, ReadonlyArray<FieldDetails>>,",
          "22:   parentDeferUsages: DeferUsageSet = new Set<DeferUsage>(),",
          "23: ): {",
          "24:   groupedFieldSet: GroupedFieldSet;",
          "26: } {",
          "27:   const groupedFieldSet = new Map<",
          "28:     string,",
          "",
          "[Removed Lines]",
          "15: export interface NewGroupedFieldSetDetails {",
          "16:   groupedFieldSet: GroupedFieldSet;",
          "17:   shouldInitiateDefer: boolean;",
          "18: }",
          "25:   newGroupedFieldSetDetailsMap: Map<DeferUsageSet, NewGroupedFieldSetDetails>;",
          "",
          "[Added Lines]",
          "20:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     }",
          "33:   >();",
          "36:     DeferUsageSet,",
          "47:   >();",
          "49:   const map = new Map<",
          "",
          "[Removed Lines]",
          "35:   const newGroupedFieldSetDetailsMap = new Map<",
          "37:     {",
          "38:       groupedFieldSet: Map<",
          "39:         string,",
          "40:         {",
          "41:           fields: Array<FieldDetails>;",
          "42:           deferUsages: DeferUsageSet;",
          "43:         }",
          "44:       >;",
          "45:       shouldInitiateDefer: boolean;",
          "46:     }",
          "",
          "[Added Lines]",
          "30:   const newGroupedFieldSets = new Map<",
          "32:     Map<",
          "33:       string,",
          "34:       {",
          "35:         fields: Array<FieldDetails>;",
          "36:         deferUsages: DeferUsageSet;",
          "37:       }",
          "38:     >",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:       continue;",
          "95:     }",
          "103:       newGroupedFieldSet = new Map<",
          "104:         string,",
          "105:         {",
          "",
          "[Removed Lines]",
          "97:     let newGroupedFieldSetDetails = getBySet(",
          "98:       newGroupedFieldSetDetailsMap,",
          "99:       deferUsageSet,",
          "100:     );",
          "101:     let newGroupedFieldSet;",
          "102:     if (newGroupedFieldSetDetails === undefined) {",
          "",
          "[Added Lines]",
          "89:     let newGroupedFieldSet = getBySet(newGroupedFieldSets, deferUsageSet);",
          "90:     if (newGroupedFieldSet === undefined) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:           knownDeferUsages: DeferUsageSet;",
          "109:         }",
          "110:       >();",
          "124:     }",
          "125:     let fieldGroup = newGroupedFieldSet.get(responseKey);",
          "126:     if (fieldGroup === undefined) {",
          "",
          "[Removed Lines]",
          "112:       newGroupedFieldSetDetails = {",
          "113:         groupedFieldSet: newGroupedFieldSet,",
          "114:         shouldInitiateDefer: Array.from(deferUsageSet).some(",
          "115:           (deferUsage) => !parentDeferUsages.has(deferUsage),",
          "116:         ),",
          "117:       };",
          "118:       newGroupedFieldSetDetailsMap.set(",
          "119:         deferUsageSet,",
          "120:         newGroupedFieldSetDetails,",
          "121:       );",
          "122:     } else {",
          "123:       newGroupedFieldSet = newGroupedFieldSetDetails.groupedFieldSet;",
          "",
          "[Added Lines]",
          "99:       newGroupedFieldSets.set(deferUsageSet, newGroupedFieldSet);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:   return {",
          "137:     groupedFieldSet,",
          "139:   };",
          "140: }",
          "",
          "[Removed Lines]",
          "138:     newGroupedFieldSetDetailsMap,",
          "",
          "[Added Lines]",
          "114:     newGroupedFieldSets,",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   DeferUsageSet,",
          "52:   FieldGroup,",
          "53:   GroupedFieldSet,",
          "55: } from './buildFieldPlan.js';",
          "56: import { buildFieldPlan } from './buildFieldPlan.js';",
          "57: import type { DeferUsage, FieldDetails } from './collectFields.js';",
          "58: import { collectFields, collectSubfields } from './collectFields.js';",
          "59: import type {",
          "60:   ExecutionResult,",
          "61:   ExperimentalIncrementalExecutionResults,",
          "62:   IncrementalDataRecord,",
          "63: } from './IncrementalPublisher.js';",
          "64: import {",
          "65:   DeferredFragmentRecord,",
          "71: } from './IncrementalPublisher.js';",
          "72: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "73: import {",
          "",
          "[Removed Lines]",
          "54:   NewGroupedFieldSetDetails,",
          "66:   DeferredGroupedFieldSetRecord,",
          "67:   IncrementalPublisher,",
          "68:   InitialResultRecord,",
          "69:   StreamItemsRecord,",
          "70:   StreamRecord,",
          "",
          "[Added Lines]",
          "59:   CancellableStreamRecord,",
          "60:   DeferredGroupedFieldSetRecord,",
          "61:   DeferredGroupedFieldSetResult,",
          "65:   StreamItemsRecord,",
          "66:   StreamItemsResult,",
          "67:   SubsequentResultRecord,",
          "70:   buildIncrementalResponse,",
          "72:   isReconcilableStreamItemsResult,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   fieldResolver: GraphQLFieldResolver<any, any>;",
          "143:   typeResolver: GraphQLTypeResolver<any, any>;",
          "144:   subscribeFieldResolver: GraphQLFieldResolver<any, any>;",
          "146: }",
          "148: export interface ExecutionArgs {",
          "",
          "[Removed Lines]",
          "145:   incrementalPublisher: IncrementalPublisher;",
          "",
          "[Added Lines]",
          "147:   cancellableStreams: Set<CancellableStreamRecord>;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:   fieldGroup: FieldGroup;",
          "164: }",
          "166: const UNEXPECTED_EXPERIMENTAL_DIRECTIVES =",
          "167:   'The provided schema unexpectedly contains experimental directives (@defer or @stream). These directives may only be utilized if experimental execution features are explicitly enabled.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: type GraphQLWrappedResult<T> = [T, Array<IncrementalDataRecord>];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "255: function executeOperation(",
          "256:   exeContext: ExecutionContext,",
          "257: ): PromiseOrValue<ExecutionResult | ExperimentalIncrementalExecutionResults> {",
          "259:   try {",
          "268:     const rootType = schema.getRootType(operation.operation);",
          "269:     if (rootType == null) {",
          "270:       throw new GraphQLError(",
          "",
          "[Removed Lines]",
          "258:   const initialResultRecord = new InitialResultRecord();",
          "260:     const {",
          "261:       operation,",
          "262:       schema,",
          "263:       fragments,",
          "264:       variableValues,",
          "265:       rootValue,",
          "266:       incrementalPublisher,",
          "267:     } = exeContext;",
          "",
          "[Added Lines]",
          "262:   const errors: Array<GraphQLError> = [];",
          "264:     const { operation, schema, fragments, variableValues, rootValue } =",
          "265:       exeContext;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:       rootType,",
          "281:       operation,",
          "282:     );",
          "302:       exeContext,",
          "303:       operation.operation,",
          "304:       rootType,",
          "305:       rootValue,",
          "306:       groupedFieldSet,",
          "308:       newDeferMap,",
          "309:     );",
          "312:       exeContext,",
          "313:       rootType,",
          "314:       rootValue,",
          "317:       newDeferMap,",
          "318:     );",
          "322:         (resolved) =>",
          "326:       );",
          "327:     }",
          "333:     );",
          "334:   }",
          "335: }",
          "",
          "[Removed Lines]",
          "283:     const { groupedFieldSet, newGroupedFieldSetDetailsMap } =",
          "284:       buildFieldPlan(fields);",
          "286:     const newDeferMap = addNewDeferredFragments(",
          "287:       incrementalPublisher,",
          "288:       newDeferUsages,",
          "289:       initialResultRecord,",
          "290:     );",
          "292:     const path = undefined;",
          "294:     const newDeferredGroupedFieldSetRecords = addNewDeferredGroupedFieldSets(",
          "295:       incrementalPublisher,",
          "296:       newGroupedFieldSetDetailsMap,",
          "297:       newDeferMap,",
          "298:       path,",
          "299:     );",
          "301:     const result = executeRootGroupedFieldSet(",
          "307:       initialResultRecord,",
          "311:     executeDeferredGroupedFieldSets(",
          "315:       path,",
          "316:       newDeferredGroupedFieldSetRecords,",
          "320:     if (isPromise(result)) {",
          "321:       return result.then(",
          "323:           incrementalPublisher.buildDataResponse(initialResultRecord, resolved),",
          "324:         (error) =>",
          "325:           incrementalPublisher.buildErrorResponse(initialResultRecord, error),",
          "328:     return incrementalPublisher.buildDataResponse(initialResultRecord, result);",
          "329:   } catch (error) {",
          "330:     return exeContext.incrementalPublisher.buildErrorResponse(",
          "331:       initialResultRecord,",
          "332:       error,",
          "",
          "[Added Lines]",
          "281:     const { groupedFieldSet, newGroupedFieldSets } = buildFieldPlan(fields);",
          "283:     const newDeferMap = addNewDeferredFragments(newDeferUsages, new Map());",
          "285:     let graphqlWrappedResult = executeRootGroupedFieldSet(",
          "291:       errors,",
          "295:     const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "299:       undefined,",
          "300:       undefined,",
          "301:       newGroupedFieldSets,",
          "305:     graphqlWrappedResult = withNewDeferredGroupedFieldSets(",
          "306:       graphqlWrappedResult,",
          "307:       newDeferredGroupedFieldSetRecords,",
          "308:     );",
          "309:     if (isPromise(graphqlWrappedResult)) {",
          "310:       return graphqlWrappedResult.then(",
          "312:           buildDataResponse(exeContext, resolved[0], errors, resolved[1]),",
          "313:         (error) => ({",
          "314:           data: null,",
          "315:           errors: withError(errors, error),",
          "316:         }),",
          "319:     return buildDataResponse(",
          "320:       exeContext,",
          "321:       graphqlWrappedResult[0],",
          "322:       errors,",
          "323:       graphqlWrappedResult[1],",
          "325:   } catch (error) {",
          "326:     return { data: null, errors: withError(errors, error) };",
          "327:   }",
          "328: }",
          "330: function withNewDeferredGroupedFieldSets(",
          "331:   result: PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>>,",
          "332:   newDeferredGroupedFieldSetRecords: ReadonlyArray<DeferredGroupedFieldSetRecord>,",
          "333: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "334:   if (isPromise(result)) {",
          "335:     return result.then((resolved) => {",
          "336:       resolved[1].push(...newDeferredGroupedFieldSetRecords);",
          "337:       return resolved;",
          "338:     });",
          "341:   result[1].push(...newDeferredGroupedFieldSetRecords);",
          "342:   return result;",
          "343: }",
          "345: function withError(",
          "346:   errors: Array<GraphQLError>,",
          "347:   error: GraphQLError,",
          "348: ): ReadonlyArray<GraphQLError> {",
          "349:   return errors.length === 0 ? [error] : [...errors, error];",
          "350: }",
          "352: function buildDataResponse(",
          "353:   exeContext: ExecutionContext,",
          "354:   data: ObjMap<unknown>,",
          "355:   errors: ReadonlyArray<GraphQLError>,",
          "356:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord>,",
          "357: ): ExecutionResult | ExperimentalIncrementalExecutionResults {",
          "358:   if (incrementalDataRecords.length === 0) {",
          "359:     return errors.length > 0 ? { errors, data } : { data };",
          "360:   }",
          "362:   return buildIncrementalResponse(",
          "363:     exeContext,",
          "364:     data,",
          "365:     errors,",
          "366:     incrementalDataRecords,",
          "367:   );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "435:     fieldResolver: fieldResolver ?? defaultFieldResolver,",
          "436:     typeResolver: typeResolver ?? defaultTypeResolver,",
          "437:     subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,",
          "439:   };",
          "440: }",
          "",
          "[Removed Lines]",
          "438:     incrementalPublisher: new IncrementalPublisher(),",
          "",
          "[Added Lines]",
          "471:     cancellableStreams: new Set(),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "455:   rootType: GraphQLObjectType,",
          "456:   rootValue: unknown,",
          "457:   groupedFieldSet: GroupedFieldSet,",
          "461:   switch (operation) {",
          "462:     case OperationTypeNode.QUERY:",
          "463:       return executeFields(",
          "",
          "[Removed Lines]",
          "458:   initialResultRecord: InitialResultRecord,",
          "459:   newDeferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "460: ): PromiseOrValue<ObjMap<unknown>> {",
          "",
          "[Added Lines]",
          "491:   errors: Array<GraphQLError>,",
          "492:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "493: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "466:         rootValue,",
          "467:         undefined,",
          "468:         groupedFieldSet,",
          "471:       );",
          "472:     case OperationTypeNode.MUTATION:",
          "473:       return executeFieldsSerially(",
          "",
          "[Removed Lines]",
          "469:         initialResultRecord,",
          "470:         newDeferMap,",
          "",
          "[Added Lines]",
          "502:         errors,",
          "503:         deferMap,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "476:         rootValue,",
          "477:         undefined,",
          "478:         groupedFieldSet,",
          "481:       );",
          "482:     case OperationTypeNode.SUBSCRIPTION:",
          "",
          "[Removed Lines]",
          "479:         initialResultRecord,",
          "480:         newDeferMap,",
          "",
          "[Added Lines]",
          "512:         errors,",
          "513:         deferMap,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "488:         rootValue,",
          "489:         undefined,",
          "490:         groupedFieldSet,",
          "493:       );",
          "494:   }",
          "495: }",
          "",
          "[Removed Lines]",
          "491:         initialResultRecord,",
          "492:         newDeferMap,",
          "",
          "[Added Lines]",
          "524:         errors,",
          "525:         deferMap,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "504:   sourceValue: unknown,",
          "505:   path: Path | undefined,",
          "506:   groupedFieldSet: GroupedFieldSet,",
          "510:   return promiseReduce(",
          "511:     groupedFieldSet,",
          "513:       const fieldPath = addPath(path, responseName, parentType.name);",
          "514:       const result = executeField(",
          "515:         exeContext,",
          "",
          "[Removed Lines]",
          "507:   incrementalDataRecord: InitialResultRecord,",
          "508:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "509: ): PromiseOrValue<ObjMap<unknown>> {",
          "512:     (results, [responseName, fieldGroup]) => {",
          "",
          "[Added Lines]",
          "540:   errors: Array<GraphQLError>,",
          "541:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "542: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "545:     (graphqlWrappedResult, [responseName, fieldGroup]) => {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "517:         sourceValue,",
          "518:         fieldGroup,",
          "519:         fieldPath,",
          "521:         deferMap,",
          "522:       );",
          "523:       if (result === undefined) {",
          "525:       }",
          "526:       if (isPromise(result)) {",
          "530:         });",
          "531:       }",
          "534:     },",
          "536:   );",
          "537: }",
          "",
          "[Removed Lines]",
          "520:         incrementalDataRecord,",
          "524:         return results;",
          "527:         return result.then((resolvedResult) => {",
          "528:           results[responseName] = resolvedResult;",
          "529:           return results;",
          "532:       results[responseName] = result;",
          "533:       return results;",
          "535:     Object.create(null),",
          "",
          "[Added Lines]",
          "553:         errors,",
          "557:         return graphqlWrappedResult;",
          "560:         return result.then((resolved) => {",
          "561:           graphqlWrappedResult[0][responseName] = resolved[0];",
          "562:           graphqlWrappedResult[1].push(...resolved[1]);",
          "563:           return graphqlWrappedResult;",
          "566:       graphqlWrappedResult[0][responseName] = result[0];",
          "567:       graphqlWrappedResult[1].push(...result[1]);",
          "568:       return graphqlWrappedResult;",
          "570:     [Object.create(null), []] as GraphQLWrappedResult<ObjMap<unknown>>,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "546:   sourceValue: unknown,",
          "547:   path: Path | undefined,",
          "548:   groupedFieldSet: GroupedFieldSet,",
          "552:   const results = Object.create(null);",
          "553:   let containsPromise = false;",
          "555:   try {",
          "",
          "[Removed Lines]",
          "549:   incrementalDataRecord: IncrementalDataRecord,",
          "550:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "551: ): PromiseOrValue<ObjMap<unknown>> {",
          "",
          "[Added Lines]",
          "584:   errors: Array<GraphQLError>,",
          "585:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "586: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "588:   const graphqlWrappedResult: GraphQLWrappedResult<ObjMap<unknown>> = [",
          "589:     results,",
          "590:     [],",
          "591:   ];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "561:         sourceValue,",
          "562:         fieldGroup,",
          "563:         fieldPath,",
          "565:         deferMap,",
          "566:       );",
          "568:       if (result !== undefined) {",
          "570:         if (isPromise(result)) {",
          "571:           containsPromise = true;",
          "572:         }",
          "573:       }",
          "574:     }",
          "575:   } catch (error) {",
          "576:     if (containsPromise) {",
          "579:         throw error;",
          "581:     }",
          "582:     throw error;",
          "583:   }",
          "586:   if (!containsPromise) {",
          "588:   }",
          "594: }",
          "596: function toNodes(fieldGroup: FieldGroup): ReadonlyArray<FieldNode> {",
          "",
          "[Removed Lines]",
          "564:         incrementalDataRecord,",
          "569:         results[responseName] = result;",
          "578:       return promiseForObject(results).finally(() => {",
          "580:       });",
          "587:     return results;",
          "593:   return promiseForObject(results);",
          "",
          "[Added Lines]",
          "603:         errors,",
          "609:           results[responseName] = result.then((resolved) => {",
          "610:             graphqlWrappedResult[1].push(...resolved[1]);",
          "611:             return resolved[0];",
          "612:           });",
          "614:         } else {",
          "615:           results[responseName] = result[0];",
          "616:           graphqlWrappedResult[1].push(...result[1]);",
          "623:       return promiseForObject(results, () => {",
          "625:       }).finally(() => {",
          "627:       }) as never;",
          "634:     return graphqlWrappedResult;",
          "640:   return promiseForObject(results, (resolved) => [",
          "641:     resolved,",
          "642:     graphqlWrappedResult[1],",
          "643:   ]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "609:   source: unknown,",
          "610:   fieldGroup: FieldGroup,",
          "611:   path: Path,",
          "615:   const fieldName = fieldGroup.fields[0].node.name.value;",
          "616:   const fieldDef = exeContext.schema.getField(parentType, fieldName);",
          "617:   if (!fieldDef) {",
          "",
          "[Removed Lines]",
          "612:   incrementalDataRecord: IncrementalDataRecord,",
          "613:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "614: ): PromiseOrValue<unknown> {",
          "",
          "[Added Lines]",
          "662:   errors: Array<GraphQLError>,",
          "663:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "664: ): PromiseOrValue<GraphQLWrappedResult<unknown>> | undefined {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "655:         info,",
          "656:         path,",
          "657:         result,",
          "659:         deferMap,",
          "660:       );",
          "661:     }",
          "",
          "[Removed Lines]",
          "658:         incrementalDataRecord,",
          "",
          "[Added Lines]",
          "708:         errors,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "667:       info,",
          "668:       path,",
          "669:       result,",
          "671:       deferMap,",
          "672:     );",
          "",
          "[Removed Lines]",
          "670:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "720:       errors,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "677:       return completed.then(undefined, (rawError) => {",
          "688:       });",
          "689:     }",
          "690:     return completed;",
          "691:   } catch (rawError) {",
          "702:   }",
          "703: }",
          "",
          "[Removed Lines]",
          "678:         handleFieldError(",
          "679:           rawError,",
          "680:           exeContext,",
          "681:           returnType,",
          "682:           fieldGroup,",
          "683:           path,",
          "684:           incrementalDataRecord,",
          "685:         );",
          "686:         exeContext.incrementalPublisher.filter(path, incrementalDataRecord);",
          "687:         return null;",
          "692:     handleFieldError(",
          "693:       rawError,",
          "694:       exeContext,",
          "695:       returnType,",
          "696:       fieldGroup,",
          "697:       path,",
          "698:       incrementalDataRecord,",
          "699:     );",
          "700:     exeContext.incrementalPublisher.filter(path, incrementalDataRecord);",
          "701:     return null;",
          "",
          "[Added Lines]",
          "728:         handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "729:         return [null, []];",
          "734:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "735:     return [null, []];",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "732: function handleFieldError(",
          "733:   rawError: unknown,",
          "735:   returnType: GraphQLOutputType,",
          "736:   fieldGroup: FieldGroup,",
          "737:   path: Path,",
          "739: ): void {",
          "740:   const error = locatedError(rawError, toNodes(fieldGroup), pathToArray(path));",
          "",
          "[Removed Lines]",
          "734:   exeContext: ExecutionContext,",
          "738:   incrementalDataRecord: IncrementalDataRecord,",
          "",
          "[Added Lines]",
          "771:   errors: Array<GraphQLError>,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "751: }",
          "",
          "[Removed Lines]",
          "750:   exeContext.incrementalPublisher.addFieldError(incrementalDataRecord, error);",
          "",
          "[Added Lines]",
          "783:   errors.push(error);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "778:   info: GraphQLResolveInfo,",
          "779:   path: Path,",
          "780:   result: unknown,",
          "785:   if (result instanceof Error) {",
          "786:     throw result;",
          "",
          "[Removed Lines]",
          "781:   incrementalDataRecord: IncrementalDataRecord,",
          "782:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "783: ): PromiseOrValue<unknown> {",
          "",
          "[Added Lines]",
          "814:   errors: Array<GraphQLError>,",
          "815:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "816: ): PromiseOrValue<GraphQLWrappedResult<unknown>> {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "796:       info,",
          "797:       path,",
          "798:       result,",
          "800:       deferMap,",
          "801:     );",
          "803:       throw new Error(",
          "804:         `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,",
          "805:       );",
          "",
          "[Removed Lines]",
          "799:       incrementalDataRecord,",
          "802:     if (completed === null) {",
          "",
          "[Added Lines]",
          "832:       errors,",
          "835:     if ((completed as GraphQLWrappedResult<unknown>)[0] === null) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "811:   if (result == null) {",
          "813:   }",
          "",
          "[Removed Lines]",
          "812:     return null;",
          "",
          "[Added Lines]",
          "845:     return [null, []];",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "821:       info,",
          "822:       path,",
          "823:       result,",
          "825:       deferMap,",
          "826:     );",
          "827:   }",
          "",
          "[Removed Lines]",
          "824:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "857:       errors,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "831:   if (isLeafType(returnType)) {",
          "833:   }",
          "",
          "[Removed Lines]",
          "832:     return completeLeafValue(returnType, result);",
          "",
          "[Added Lines]",
          "865:     return [completeLeafValue(returnType, result), []];",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "842:       info,",
          "843:       path,",
          "844:       result,",
          "846:       deferMap,",
          "847:     );",
          "848:   }",
          "",
          "[Removed Lines]",
          "845:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "878:       errors,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "856:       info,",
          "857:       path,",
          "858:       result,",
          "860:       deferMap,",
          "861:     );",
          "862:   }",
          "",
          "[Removed Lines]",
          "859:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "892:       errors,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "875:   info: GraphQLResolveInfo,",
          "876:   path: Path,",
          "877:   result: Promise<unknown>,",
          "881:   try {",
          "882:     const resolved = await result;",
          "883:     let completed = completeValue(",
          "",
          "[Removed Lines]",
          "878:   incrementalDataRecord: IncrementalDataRecord,",
          "879:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "880: ): Promise<unknown> {",
          "",
          "[Added Lines]",
          "911:   errors: Array<GraphQLError>,",
          "912:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "913: ): Promise<GraphQLWrappedResult<unknown>> {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "887:       info,",
          "888:       path,",
          "889:       resolved,",
          "891:       deferMap,",
          "892:     );",
          "893:     if (isPromise(completed)) {",
          "894:       completed = await completed;",
          "895:     }",
          "896:     return completed;",
          "897:   } catch (rawError) {",
          "908:   }",
          "909: }",
          "",
          "[Removed Lines]",
          "890:       incrementalDataRecord,",
          "898:     handleFieldError(",
          "899:       rawError,",
          "900:       exeContext,",
          "901:       returnType,",
          "902:       fieldGroup,",
          "903:       path,",
          "904:       incrementalDataRecord,",
          "905:     );",
          "906:     exeContext.incrementalPublisher.filter(path, incrementalDataRecord);",
          "907:     return null;",
          "",
          "[Added Lines]",
          "923:       errors,",
          "932:     handleFieldError(rawError, returnType, fieldGroup, path, errors);",
          "933:     return [null, []];",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "993:   info: GraphQLResolveInfo,",
          "994:   path: Path,",
          "995:   asyncIterator: AsyncIterator<unknown>,",
          "1000:   let containsPromise = false;",
          "1001:   const completedResults: Array<unknown> = [];",
          "1002:   let index = 0;",
          "1004:   while (true) {",
          "1005:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1009:         path,",
          "1017:         index,",
          "1018:         asyncIterator,",
          "1019:         exeContext,",
          "1020:         streamUsage.fieldGroup,",
          "1021:         info,",
          "1022:         itemType,",
          "1026:       );",
          "1027:       break;",
          "1028:     }",
          "",
          "[Removed Lines]",
          "996:   incrementalDataRecord: IncrementalDataRecord,",
          "997:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "998: ): Promise<ReadonlyArray<unknown>> {",
          "999:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1006:       const earlyReturn = asyncIterator.return;",
          "1007:       const streamRecord = new StreamRecord({",
          "1008:         label: streamUsage.label,",
          "1010:         earlyReturn:",
          "1011:           earlyReturn === undefined",
          "1012:             ? undefined",
          "1013:             : earlyReturn.bind(asyncIterator),",
          "1014:       });",
          "1016:       executeStreamAsyncIterator(",
          "1023:         path,",
          "1024:         incrementalDataRecord,",
          "1025:         streamRecord,",
          "",
          "[Added Lines]",
          "1023:   errors: Array<GraphQLError>,",
          "1024:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1025: ): Promise<GraphQLWrappedResult<ReadonlyArray<unknown>>> {",
          "1028:   const graphqlWrappedResult: GraphQLWrappedResult<Array<unknown>> = [",
          "1029:     completedResults,",
          "1030:     [],",
          "1031:   ];",
          "1033:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1037:       const returnFn = asyncIterator.return;",
          "1038:       let streamRecord: SubsequentResultRecord | CancellableStreamRecord;",
          "1039:       if (returnFn === undefined) {",
          "1040:         streamRecord = {",
          "1041:           label: streamUsage.label,",
          "1042:           path,",
          "1043:         } as SubsequentResultRecord;",
          "1044:       } else {",
          "1045:         streamRecord = {",
          "1046:           label: streamUsage.label,",
          "1047:           path,",
          "1048:           earlyReturn: returnFn.bind(asyncIterator),",
          "1049:         };",
          "1050:         exeContext.cancellableStreams.add(streamRecord);",
          "1051:       }",
          "1053:       const firstStreamItems = firstAsyncStreamItems(",
          "1054:         streamRecord,",
          "1064:       graphqlWrappedResult[1].push(firstStreamItems);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1032:     try {",
          "1034:       iteration = await asyncIterator.next();",
          "1038:     } catch (rawError) {",
          "1039:       throw locatedError(rawError, toNodes(fieldGroup), pathToArray(path));",
          "1040:     }",
          "1043:       completeListItemValue(",
          "1045:         completedResults,",
          "1046:         exeContext,",
          "1047:         itemType,",
          "1048:         fieldGroup,",
          "1049:         info,",
          "1050:         itemPath,",
          "1052:         deferMap,",
          "1053:       )",
          "1054:     ) {",
          "1055:       containsPromise = true;",
          "1056:     }",
          "1058:   }",
          "1060: }",
          "",
          "[Removed Lines]",
          "1035:       if (iteration.done) {",
          "1036:         break;",
          "1037:       }",
          "1042:     if (",
          "1044:         iteration.value,",
          "1051:         incrementalDataRecord,",
          "1057:     index += 1;",
          "1059:   return containsPromise ? Promise.all(completedResults) : completedResults;",
          "",
          "[Added Lines]",
          "1079:     if (iteration.done) {",
          "1080:       break;",
          "1081:     }",
          "1083:     const item = iteration.value;",
          "1086:     if (isPromise(item)) {",
          "1087:       completedResults.push(",
          "1088:         completePromisedValue(",
          "1089:           exeContext,",
          "1090:           itemType,",
          "1091:           fieldGroup,",
          "1092:           info,",
          "1093:           itemPath,",
          "1094:           item,",
          "1095:           errors,",
          "1096:           deferMap,",
          "1097:         ).then((resolved) => {",
          "1098:           graphqlWrappedResult[1].push(...resolved[1]);",
          "1099:           return resolved[0];",
          "1100:         }),",
          "1101:       );",
          "1102:       containsPromise = true;",
          "1103:     } else if (",
          "1106:         item,",
          "1108:         graphqlWrappedResult,",
          "1114:         errors,",
          "1123:     index++;",
          "1126:   return containsPromise",
          "1127:     ? /* c8 ignore start */ Promise.all(completedResults).then((resolved) => [",
          "1128:         resolved,",
          "1129:         graphqlWrappedResult[1],",
          "1130:       ])",
          "1131:     : /* c8 ignore stop */ graphqlWrappedResult;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1070:   info: GraphQLResolveInfo,",
          "1071:   path: Path,",
          "1072:   result: unknown,",
          "1076:   const itemType = returnType.ofType;",
          "1078:   if (isAsyncIterable(result)) {",
          "",
          "[Removed Lines]",
          "1073:   incrementalDataRecord: IncrementalDataRecord,",
          "1074:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1075: ): PromiseOrValue<ReadonlyArray<unknown>> {",
          "",
          "[Added Lines]",
          "1145:   errors: Array<GraphQLError>,",
          "1146:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1147: ): PromiseOrValue<GraphQLWrappedResult<ReadonlyArray<unknown>>> {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1085:       info,",
          "1086:       path,",
          "1087:       asyncIterator,",
          "1089:       deferMap,",
          "1090:     );",
          "1091:   }",
          "",
          "[Removed Lines]",
          "1088:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1160:       errors,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1096:     );",
          "1097:   }",
          "1103:   let containsPromise = false;",
          "1105:   const completedResults: Array<unknown> = [];",
          "1106:   let index = 0;",
          "1113:     if (streamUsage && index >= streamUsage.initialCount) {",
          "1118:         path,",
          "1120:         item,",
          "1121:         exeContext,",
          "1122:         streamUsage.fieldGroup,",
          "1123:         info,",
          "1124:         itemType,",
          "1127:       );",
          "1130:     }",
          "1133:       completeListItemValue(",
          "1134:         item,",
          "1135:         completedResults,",
          "1136:         exeContext,",
          "1137:         itemType,",
          "1138:         fieldGroup,",
          "1139:         info,",
          "1140:         itemPath,",
          "1142:         deferMap,",
          "1143:       )",
          "1144:     ) {",
          "1145:       containsPromise = true;",
          "1146:     }",
          "1148:     index++;",
          "1155:   }",
          "1158: }",
          "",
          "[Removed Lines]",
          "1099:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1104:   let currentParents = incrementalDataRecord;",
          "1107:   let streamRecord: StreamRecord | undefined;",
          "1108:   for (const item of result) {",
          "1111:     const itemPath = addPath(path, index, undefined);",
          "1114:       if (streamRecord === undefined) {",
          "1115:         streamRecord = new StreamRecord({ label: streamUsage.label, path });",
          "1116:       }",
          "1117:       currentParents = executeStreamField(",
          "1119:         itemPath,",
          "1125:         currentParents,",
          "1126:         streamRecord,",
          "1128:       index++;",
          "1129:       continue;",
          "1132:     if (",
          "1141:         incrementalDataRecord,",
          "1149:   }",
          "1151:   if (streamRecord !== undefined) {",
          "1152:     exeContext.incrementalPublisher.setIsFinalRecord(",
          "1153:       currentParents as StreamItemsRecord,",
          "1154:     );",
          "1157:   return containsPromise ? Promise.all(completedResults) : completedResults;",
          "",
          "[Added Lines]",
          "1175:   const graphqlWrappedResult: GraphQLWrappedResult<Array<unknown>> = [",
          "1176:     completedResults,",
          "1177:     [],",
          "1178:   ];",
          "1180:   const streamUsage = getStreamUsage(exeContext, fieldGroup, path);",
          "1181:   const iterator = result[Symbol.iterator]();",
          "1182:   let iteration = iterator.next();",
          "1183:   while (!iteration.done) {",
          "1184:     const item = iteration.value;",
          "1187:       const streamRecord: SubsequentResultRecord = {",
          "1188:         label: streamUsage.label,",
          "1190:       };",
          "1192:       const firstStreamItems = firstSyncStreamItems(",
          "1193:         streamRecord,",
          "1195:         index,",
          "1196:         iterator,",
          "1203:       graphqlWrappedResult[1].push(firstStreamItems);",
          "1204:       break;",
          "1209:     const itemPath = addPath(path, index, undefined);",
          "1211:     if (isPromise(item)) {",
          "1212:       completedResults.push(",
          "1213:         completePromisedValue(",
          "1214:           exeContext,",
          "1215:           itemType,",
          "1216:           fieldGroup,",
          "1217:           info,",
          "1218:           itemPath,",
          "1219:           item,",
          "1220:           errors,",
          "1221:           deferMap,",
          "1222:         ).then((resolved) => {",
          "1223:           graphqlWrappedResult[1].push(...resolved[1]);",
          "1224:           return resolved[0];",
          "1225:         }),",
          "1226:       );",
          "1227:       containsPromise = true;",
          "1228:     } else if (",
          "1232:         graphqlWrappedResult,",
          "1238:         errors,",
          "1246:     iteration = iterator.next();",
          "1249:   return containsPromise",
          "1250:     ? Promise.all(completedResults).then((resolved) => [",
          "1251:         resolved,",
          "1252:         graphqlWrappedResult[1],",
          "1253:       ])",
          "1254:     : graphqlWrappedResult;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1165: function completeListItemValue(",
          "1166:   item: unknown,",
          "1167:   completedResults: Array<unknown>,",
          "1168:   exeContext: ExecutionContext,",
          "1169:   itemType: GraphQLOutputType,",
          "1170:   fieldGroup: FieldGroup,",
          "1171:   info: GraphQLResolveInfo,",
          "1172:   itemPath: Path,",
          "1175: ): boolean {",
          "1193:   try {",
          "1194:     const completedItem = completeValue(",
          "1195:       exeContext,",
          "",
          "[Removed Lines]",
          "1173:   incrementalDataRecord: IncrementalDataRecord,",
          "1174:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1176:   if (isPromise(item)) {",
          "1177:     completedResults.push(",
          "1178:       completePromisedValue(",
          "1179:         exeContext,",
          "1180:         itemType,",
          "1181:         fieldGroup,",
          "1182:         info,",
          "1183:         itemPath,",
          "1184:         item,",
          "1185:         incrementalDataRecord,",
          "1186:         deferMap,",
          "1187:       ),",
          "1188:     );",
          "1190:     return true;",
          "1191:   }",
          "",
          "[Added Lines]",
          "1265:   parent: GraphQLWrappedResult<Array<unknown>>,",
          "1271:   errors: Array<GraphQLError>,",
          "1272:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1198:       info,",
          "1199:       itemPath,",
          "1200:       item,",
          "1202:       deferMap,",
          "1203:     );",
          "",
          "[Removed Lines]",
          "1201:       incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1282:       errors,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1208:       completedResults.push(",
          "1224:       );",
          "1226:       return true;",
          "1227:     }",
          "1230:   } catch (rawError) {",
          "1240:     completedResults.push(null);",
          "1241:   }",
          "1243:   return false;",
          "1244: }",
          "",
          "[Removed Lines]",
          "1209:         completedItem.then(undefined, (rawError) => {",
          "1210:           handleFieldError(",
          "1211:             rawError,",
          "1212:             exeContext,",
          "1213:             itemType,",
          "1214:             fieldGroup,",
          "1215:             itemPath,",
          "1216:             incrementalDataRecord,",
          "1217:           );",
          "1218:           exeContext.incrementalPublisher.filter(",
          "1219:             itemPath,",
          "1220:             incrementalDataRecord,",
          "1221:           );",
          "1222:           return null;",
          "1223:         }),",
          "1229:     completedResults.push(completedItem);",
          "1231:     handleFieldError(",
          "1232:       rawError,",
          "1233:       exeContext,",
          "1234:       itemType,",
          "1235:       fieldGroup,",
          "1236:       itemPath,",
          "1237:       incrementalDataRecord,",
          "1238:     );",
          "1239:     exeContext.incrementalPublisher.filter(itemPath, incrementalDataRecord);",
          "",
          "[Added Lines]",
          "1290:         completedItem.then(",
          "1291:           (resolved) => {",
          "1292:             parent[1].push(...resolved[1]);",
          "1293:             return resolved[0];",
          "1294:           },",
          "1295:           (rawError) => {",
          "1296:             handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "1297:             return null;",
          "1298:           },",
          "1299:         ),",
          "1304:     completedResults.push(completedItem[0]);",
          "1305:     parent[1].push(...completedItem[1]);",
          "1307:     handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1272:   info: GraphQLResolveInfo,",
          "1273:   path: Path,",
          "1274:   result: unknown,",
          "1278:   const resolveTypeFn = returnType.resolveType ?? exeContext.typeResolver;",
          "1279:   const contextValue = exeContext.contextValue;",
          "1280:   const runtimeType = resolveTypeFn(result, contextValue, info, returnType);",
          "",
          "[Removed Lines]",
          "1275:   incrementalDataRecord: IncrementalDataRecord,",
          "1276:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1277: ): PromiseOrValue<ObjMap<unknown>> {",
          "",
          "[Added Lines]",
          "1342:   errors: Array<GraphQLError>,",
          "1343:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1344: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1295:         info,",
          "1296:         path,",
          "1297:         result,",
          "1299:         deferMap,",
          "1300:       ),",
          "1301:     );",
          "",
          "[Removed Lines]",
          "1298:         incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1365:         errors,",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1315:     info,",
          "1316:     path,",
          "1317:     result,",
          "1319:     deferMap,",
          "1320:   );",
          "1321: }",
          "",
          "[Removed Lines]",
          "1318:     incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1385:     errors,",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1385:   info: GraphQLResolveInfo,",
          "1386:   path: Path,",
          "1387:   result: unknown,",
          "",
          "[Removed Lines]",
          "1388:   incrementalDataRecord: IncrementalDataRecord,",
          "1389:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1390: ): PromiseOrValue<ObjMap<unknown>> {",
          "",
          "[Added Lines]",
          "1455:   errors: Array<GraphQLError>,",
          "1456:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1457: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1405:           fieldGroup,",
          "1406:           path,",
          "1407:           result,",
          "1409:           deferMap,",
          "1410:         );",
          "1411:       });",
          "",
          "[Removed Lines]",
          "1408:           incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1475:           errors,",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1422:     fieldGroup,",
          "1423:     path,",
          "1424:     result,",
          "1426:     deferMap,",
          "1427:   );",
          "1428: }",
          "",
          "[Removed Lines]",
          "1425:     incrementalDataRecord,",
          "",
          "[Added Lines]",
          "1492:     errors,",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1458: function addNewDeferredFragments(",
          "1460:   newDeferUsages: ReadonlyArray<DeferUsage>,",
          "1463:   path?: Path | undefined,",
          "1464: ): ReadonlyMap<DeferUsage, DeferredFragmentRecord> {",
          "1477:   for (const newDeferUsage of newDeferUsages) {",
          "1478:     const parentDeferUsage = newDeferUsage.parentDeferUsage;",
          "1483:     const parent =",
          "1484:       parentDeferUsage === undefined",
          "1486:         : deferredFragmentRecordFromDeferUsage(parentDeferUsage, newDeferMap);",
          "1489:     const deferredFragmentRecord = new DeferredFragmentRecord({",
          "1490:       path,",
          "1491:       label: newDeferUsage.label,",
          "1497:       parent,",
          "1501:     newDeferMap.set(newDeferUsage, deferredFragmentRecord);",
          "",
          "[Removed Lines]",
          "1459:   incrementalPublisher: IncrementalPublisher,",
          "1461:   incrementalDataRecord: IncrementalDataRecord,",
          "1462:   deferMap?: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1465:   if (newDeferUsages.length === 0) {",
          "1467:     return deferMap ?? new Map<DeferUsage, DeferredFragmentRecord>();",
          "1468:   }",
          "1471:   const newDeferMap =",
          "1472:     deferMap === undefined",
          "1473:       ? new Map<DeferUsage, DeferredFragmentRecord>()",
          "1474:       : new Map<DeferUsage, DeferredFragmentRecord>(deferMap);",
          "1485:         ? (incrementalDataRecord as InitialResultRecord | StreamItemsRecord)",
          "1492:     });",
          "1495:     incrementalPublisher.reportNewDeferFragmentRecord(",
          "1496:       deferredFragmentRecord,",
          "1498:     );",
          "",
          "[Added Lines]",
          "1527:   newDeferMap: Map<DeferUsage, DeferredFragmentRecord>,",
          "1536:         ? undefined",
          "1544:     });",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1512:   return deferMap.get(deferUsage)!;",
          "1513: }",
          "1556: function collectAndExecuteSubfields(",
          "1557:   exeContext: ExecutionContext,",
          "1558:   returnType: GraphQLObjectType,",
          "1559:   fieldGroup: FieldGroup,",
          "1560:   path: Path,",
          "1561:   result: unknown,",
          "1567:     buildSubFieldPlan(exeContext, returnType, fieldGroup);",
          "1571:   const newDeferMap = addNewDeferredFragments(",
          "1573:     newDeferUsages,",
          "1583:     path,",
          "1584:   );",
          "",
          "[Removed Lines]",
          "1515: function addNewDeferredGroupedFieldSets(",
          "1516:   incrementalPublisher: IncrementalPublisher,",
          "1517:   newGroupedFieldSetDetailsMap: Map<DeferUsageSet, NewGroupedFieldSetDetails>,",
          "1518:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1519:   path?: Path | undefined,",
          "1520: ): ReadonlyArray<DeferredGroupedFieldSetRecord> {",
          "1521:   const newDeferredGroupedFieldSetRecords: Array<DeferredGroupedFieldSetRecord> =",
          "1522:     [];",
          "1524:   for (const [",
          "1525:     deferUsageSet,",
          "1526:     { groupedFieldSet, shouldInitiateDefer },",
          "1527:   ] of newGroupedFieldSetDetailsMap) {",
          "1528:     const deferredFragmentRecords = getDeferredFragmentRecords(",
          "1529:       deferUsageSet,",
          "1530:       deferMap,",
          "1531:     );",
          "1532:     const deferredGroupedFieldSetRecord = new DeferredGroupedFieldSetRecord({",
          "1533:       path,",
          "1534:       deferredFragmentRecords,",
          "1535:       groupedFieldSet,",
          "1536:       shouldInitiateDefer,",
          "1537:     });",
          "1538:     incrementalPublisher.reportNewDeferredGroupedFieldSetRecord(",
          "1539:       deferredGroupedFieldSetRecord,",
          "1540:     );",
          "1541:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "1542:   }",
          "1544:   return newDeferredGroupedFieldSetRecords;",
          "1545: }",
          "1547: function getDeferredFragmentRecords(",
          "1548:   deferUsages: DeferUsageSet,",
          "1549:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1550: ): ReadonlyArray<DeferredFragmentRecord> {",
          "1551:   return Array.from(deferUsages).map((deferUsage) =>",
          "1552:     deferredFragmentRecordFromDeferUsage(deferUsage, deferMap),",
          "1553:   );",
          "1554: }",
          "1562:   incrementalDataRecord: IncrementalDataRecord,",
          "1563:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1564: ): PromiseOrValue<ObjMap<unknown>> {",
          "1566:   const { groupedFieldSet, newGroupedFieldSetDetailsMap, newDeferUsages } =",
          "1569:   const incrementalPublisher = exeContext.incrementalPublisher;",
          "1572:     incrementalPublisher,",
          "1574:     incrementalDataRecord,",
          "1575:     deferMap,",
          "1576:     path,",
          "1577:   );",
          "1579:   const newDeferredGroupedFieldSetRecords = addNewDeferredGroupedFieldSets(",
          "1580:     incrementalPublisher,",
          "1581:     newGroupedFieldSetDetailsMap,",
          "1582:     newDeferMap,",
          "",
          "[Added Lines]",
          "1567:   errors: Array<GraphQLError>,",
          "1568:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1569: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "1571:   const { groupedFieldSet, newGroupedFieldSets, newDeferUsages } =",
          "1576:     new Map(deferMap),",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1589:     result,",
          "1590:     path,",
          "1591:     groupedFieldSet,",
          "1593:     newDeferMap,",
          "1594:   );",
          "1597:     exeContext,",
          "1598:     returnType,",
          "1599:     result,",
          "1600:     path,",
          "1602:     newDeferMap,",
          "1603:   );",
          "1606: }",
          "",
          "[Removed Lines]",
          "1592:     incrementalDataRecord,",
          "1596:   executeDeferredGroupedFieldSets(",
          "1601:     newDeferredGroupedFieldSetRecords,",
          "1605:   return subFields;",
          "",
          "[Added Lines]",
          "1586:     errors,",
          "1590:   const newDeferredGroupedFieldSetRecords = executeDeferredGroupedFieldSets(",
          "1595:     fieldGroup.deferUsages,",
          "1596:     newGroupedFieldSets,",
          "1600:   return withNewDeferredGroupedFieldSets(",
          "1601:     subFields,",
          "1602:     newDeferredGroupedFieldSetRecords,",
          "1603:   );",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1902:   parentType: GraphQLObjectType,",
          "1903:   sourceValue: unknown,",
          "1904:   path: Path | undefined,",
          "1906:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1930:       deferMap,",
          "1931:     );",
          "1932:   }",
          "1933: }",
          "1935: function executeDeferredGroupedFieldSet(",
          "1936:   exeContext: ExecutionContext,",
          "1937:   parentType: GraphQLObjectType,",
          "1938:   sourceValue: unknown,",
          "1939:   path: Path | undefined,",
          "1941:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "1943:   try {",
          "1945:       exeContext,",
          "1946:       parentType,",
          "1947:       sourceValue,",
          "1948:       path,",
          "1951:       deferMap,",
          "1952:     );",
          "1974:   } catch (error) {",
          "1978:     );",
          "1979:   }",
          "1980: }",
          "1986:   exeContext: ExecutionContext,",
          "1987:   fieldGroup: FieldGroup,",
          "1988:   info: GraphQLResolveInfo,",
          "1989:   itemType: GraphQLOutputType,",
          "1992: ): StreamItemsRecord {",
          "2034:         exeContext,",
          "2036:         fieldGroup,",
          "2037:         info,",
          "2047:         itemType,",
          "2051:       );",
          "2066:           exeContext,",
          "2068:           fieldGroup,",
          "2071:         );",
          "2090:   }",
          "2096: }",
          "2099:   asyncIterator: AsyncIterator<unknown>,",
          "2100:   exeContext: ExecutionContext,",
          "2101:   fieldGroup: FieldGroup,",
          "2102:   info: GraphQLResolveInfo,",
          "2103:   itemType: GraphQLOutputType,",
          "2130:       exeContext,",
          "2132:       fieldGroup,",
          "2133:       info,",
          "2159:       itemType,",
          "2167: }",
          "2171:   asyncIterator: AsyncIterator<unknown>,",
          "2172:   exeContext: ExecutionContext,",
          "2173:   fieldGroup: FieldGroup,",
          "2174:   info: GraphQLResolveInfo,",
          "2175:   itemType: GraphQLOutputType,",
          "2187:       streamRecord,",
          "2193:     );",
          "2196:     try {",
          "2200:         exeContext,",
          "2201:         fieldGroup,",
          "2202:         info,",
          "2205:         itemPath,",
          "2206:       );",
          "2214:     }",
          "2231:       );",
          "2243:   }",
          "2244: }",
          "",
          "[Removed Lines]",
          "1905:   newDeferredGroupedFieldSetRecords: ReadonlyArray<DeferredGroupedFieldSetRecord>,",
          "1907: ): void {",
          "1908:   for (const deferredGroupedFieldSetRecord of newDeferredGroupedFieldSetRecords) {",
          "1909:     if (deferredGroupedFieldSetRecord.shouldInitiateDefer) {",
          "1911:       Promise.resolve().then(() =>",
          "1912:         executeDeferredGroupedFieldSet(",
          "1913:           exeContext,",
          "1914:           parentType,",
          "1915:           sourceValue,",
          "1916:           path,",
          "1917:           deferredGroupedFieldSetRecord,",
          "1918:           deferMap,",
          "1919:         ),",
          "1920:       );",
          "1921:       continue;",
          "1922:     }",
          "1924:     executeDeferredGroupedFieldSet(",
          "1925:       exeContext,",
          "1926:       parentType,",
          "1927:       sourceValue,",
          "1928:       path,",
          "1929:       deferredGroupedFieldSetRecord,",
          "1940:   deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord,",
          "1942: ): void {",
          "1944:     const incrementalResult = executeFields(",
          "1949:       deferredGroupedFieldSetRecord.groupedFieldSet,",
          "1950:       deferredGroupedFieldSetRecord,",
          "1954:     if (isPromise(incrementalResult)) {",
          "1955:       incrementalResult.then(",
          "1956:         (resolved) =>",
          "1957:           exeContext.incrementalPublisher.completeDeferredGroupedFieldSet(",
          "1958:             deferredGroupedFieldSetRecord,",
          "1959:             resolved,",
          "1960:           ),",
          "1961:         (error) =>",
          "1962:           exeContext.incrementalPublisher.markErroredDeferredGroupedFieldSet(",
          "1963:             deferredGroupedFieldSetRecord,",
          "1964:             error,",
          "1965:           ),",
          "1966:       );",
          "1967:       return;",
          "1968:     }",
          "1970:     exeContext.incrementalPublisher.completeDeferredGroupedFieldSet(",
          "1971:       deferredGroupedFieldSetRecord,",
          "1972:       incrementalResult,",
          "1973:     );",
          "1975:     exeContext.incrementalPublisher.markErroredDeferredGroupedFieldSet(",
          "1976:       deferredGroupedFieldSetRecord,",
          "1977:       error,",
          "1982: function executeStreamField(",
          "1983:   path: Path,",
          "1984:   itemPath: Path,",
          "1985:   item: PromiseOrValue<unknown>,",
          "1990:   incrementalDataRecord: IncrementalDataRecord,",
          "1991:   streamRecord: StreamRecord,",
          "1993:   const incrementalPublisher = exeContext.incrementalPublisher;",
          "1994:   const streamItemsRecord = new StreamItemsRecord({",
          "1995:     streamRecord,",
          "1996:     path: itemPath,",
          "1997:   });",
          "1998:   incrementalPublisher.reportNewStreamItemsRecord(",
          "1999:     streamItemsRecord,",
          "2000:     incrementalDataRecord,",
          "2001:   );",
          "2003:   if (isPromise(item)) {",
          "2004:     completePromisedValue(",
          "2005:       exeContext,",
          "2006:       itemType,",
          "2007:       fieldGroup,",
          "2008:       info,",
          "2009:       itemPath,",
          "2010:       item,",
          "2011:       streamItemsRecord,",
          "2012:       new Map(),",
          "2013:     ).then(",
          "2014:       (value) =>",
          "2015:         incrementalPublisher.completeStreamItemsRecord(streamItemsRecord, [",
          "2016:           value,",
          "2017:         ]),",
          "2018:       (error) => {",
          "2019:         incrementalPublisher.filter(path, streamItemsRecord);",
          "2020:         incrementalPublisher.markErroredStreamItemsRecord(",
          "2021:           streamItemsRecord,",
          "2022:           error,",
          "2023:         );",
          "2024:       },",
          "2025:     );",
          "2027:     return streamItemsRecord;",
          "2028:   }",
          "2030:   let completedItem: PromiseOrValue<unknown>;",
          "2031:   try {",
          "2032:     try {",
          "2033:       completedItem = completeValue(",
          "2035:         itemType,",
          "2038:         itemPath,",
          "2039:         item,",
          "2040:         streamItemsRecord,",
          "2041:         new Map(),",
          "2042:       );",
          "2043:     } catch (rawError) {",
          "2044:       handleFieldError(",
          "2045:         rawError,",
          "2046:         exeContext,",
          "2048:         fieldGroup,",
          "2049:         itemPath,",
          "2050:         streamItemsRecord,",
          "2052:       completedItem = null;",
          "2053:       incrementalPublisher.filter(itemPath, streamItemsRecord);",
          "2054:     }",
          "2055:   } catch (error) {",
          "2056:     incrementalPublisher.filter(path, streamItemsRecord);",
          "2057:     incrementalPublisher.markErroredStreamItemsRecord(streamItemsRecord, error);",
          "2058:     return streamItemsRecord;",
          "2059:   }",
          "2061:   if (isPromise(completedItem)) {",
          "2062:     completedItem",
          "2063:       .then(undefined, (rawError) => {",
          "2064:         handleFieldError(",
          "2065:           rawError,",
          "2067:           itemType,",
          "2069:           itemPath,",
          "2070:           streamItemsRecord,",
          "2072:         incrementalPublisher.filter(itemPath, streamItemsRecord);",
          "2073:         return null;",
          "2074:       })",
          "2075:       .then(",
          "2076:         (value) =>",
          "2077:           incrementalPublisher.completeStreamItemsRecord(streamItemsRecord, [",
          "2078:             value,",
          "2079:           ]),",
          "2080:         (error) => {",
          "2081:           incrementalPublisher.filter(path, streamItemsRecord);",
          "2082:           incrementalPublisher.markErroredStreamItemsRecord(",
          "2083:             streamItemsRecord,",
          "2084:             error,",
          "2085:           );",
          "2086:         },",
          "2087:       );",
          "2089:     return streamItemsRecord;",
          "2092:   incrementalPublisher.completeStreamItemsRecord(streamItemsRecord, [",
          "2093:     completedItem,",
          "2094:   ]);",
          "2095:   return streamItemsRecord;",
          "2098: async function executeStreamAsyncIteratorItem(",
          "2104:   streamItemsRecord: StreamItemsRecord,",
          "2105:   itemPath: Path,",
          "2106: ): Promise<IteratorResult<unknown>> {",
          "2107:   let item;",
          "2108:   try {",
          "2109:     const iteration = await asyncIterator.next();",
          "2110:     if (streamItemsRecord.streamRecord.errors.length > 0) {",
          "2111:       return { done: true, value: undefined };",
          "2112:     }",
          "2113:     if (iteration.done) {",
          "2114:       exeContext.incrementalPublisher.setIsCompletedAsyncIterator(",
          "2115:         streamItemsRecord,",
          "2116:       );",
          "2117:       return { done: true, value: undefined };",
          "2118:     }",
          "2119:     item = iteration.value;",
          "2120:   } catch (rawError) {",
          "2121:     throw locatedError(",
          "2122:       rawError,",
          "2123:       toNodes(fieldGroup),",
          "2124:       streamItemsRecord.streamRecord.path,",
          "2125:     );",
          "2126:   }",
          "2127:   let completedItem;",
          "2128:   try {",
          "2129:     completedItem = completeValue(",
          "2131:       itemType,",
          "2134:       itemPath,",
          "2135:       item,",
          "2136:       streamItemsRecord,",
          "2137:       new Map(),",
          "2138:     );",
          "2140:     if (isPromise(completedItem)) {",
          "2141:       completedItem = completedItem.then(undefined, (rawError) => {",
          "2142:         handleFieldError(",
          "2143:           rawError,",
          "2144:           exeContext,",
          "2145:           itemType,",
          "2146:           fieldGroup,",
          "2147:           itemPath,",
          "2148:           streamItemsRecord,",
          "2149:         );",
          "2150:         exeContext.incrementalPublisher.filter(itemPath, streamItemsRecord);",
          "2151:         return null;",
          "2152:       });",
          "2153:     }",
          "2154:     return { done: false, value: completedItem };",
          "2155:   } catch (rawError) {",
          "2156:     handleFieldError(",
          "2157:       rawError,",
          "2158:       exeContext,",
          "2160:       fieldGroup,",
          "2161:       itemPath,",
          "2162:       streamItemsRecord,",
          "2163:     );",
          "2164:     exeContext.incrementalPublisher.filter(itemPath, streamItemsRecord);",
          "2165:     return { done: false, value: null };",
          "2166:   }",
          "2169: async function executeStreamAsyncIterator(",
          "2170:   initialIndex: number,",
          "2176:   path: Path,",
          "2177:   incrementalDataRecord: IncrementalDataRecord,",
          "2178:   streamRecord: StreamRecord,",
          "2179: ): Promise<void> {",
          "2180:   const incrementalPublisher = exeContext.incrementalPublisher;",
          "2181:   let index = initialIndex;",
          "2182:   let currentIncrementalDataRecord = incrementalDataRecord;",
          "2184:   while (true) {",
          "2185:     const itemPath = addPath(path, index, undefined);",
          "2186:     const streamItemsRecord = new StreamItemsRecord({",
          "2188:       path: itemPath,",
          "2189:     });",
          "2190:     incrementalPublisher.reportNewStreamItemsRecord(",
          "2191:       streamItemsRecord,",
          "2192:       currentIncrementalDataRecord,",
          "2195:     let iteration;",
          "2198:       iteration = await executeStreamAsyncIteratorItem(",
          "2199:         asyncIterator,",
          "2203:         itemType,",
          "2204:         streamItemsRecord,",
          "2207:     } catch (error) {",
          "2208:       incrementalPublisher.filter(path, streamItemsRecord);",
          "2209:       incrementalPublisher.markErroredStreamItemsRecord(",
          "2210:         streamItemsRecord,",
          "2211:         error,",
          "2212:       );",
          "2213:       return;",
          "2216:     const { done, value: completedItem } = iteration;",
          "2218:     if (isPromise(completedItem)) {",
          "2219:       completedItem.then(",
          "2220:         (value) =>",
          "2221:           incrementalPublisher.completeStreamItemsRecord(streamItemsRecord, [",
          "2222:             value,",
          "2223:           ]),",
          "2224:         (error) => {",
          "2225:           incrementalPublisher.filter(path, streamItemsRecord);",
          "2226:           incrementalPublisher.markErroredStreamItemsRecord(",
          "2227:             streamItemsRecord,",
          "2228:             error,",
          "2229:           );",
          "2230:         },",
          "2232:     } else {",
          "2233:       incrementalPublisher.completeStreamItemsRecord(streamItemsRecord, [",
          "2234:         completedItem,",
          "2235:       ]);",
          "2236:     }",
          "2238:     if (done) {",
          "2239:       break;",
          "2240:     }",
          "2241:     currentIncrementalDataRecord = streamItemsRecord;",
          "2242:     index++;",
          "",
          "[Added Lines]",
          "1903:   parentDeferUsages: DeferUsageSet | undefined,",
          "1904:   newGroupedFieldSets: Map<DeferUsageSet, GroupedFieldSet>,",
          "1906: ): ReadonlyArray<DeferredGroupedFieldSetRecord> {",
          "1907:   const newDeferredGroupedFieldSetRecords: Array<DeferredGroupedFieldSetRecord> =",
          "1908:     [];",
          "1910:   for (const [deferUsageSet, groupedFieldSet] of newGroupedFieldSets) {",
          "1911:     const deferredFragmentRecords = getDeferredFragmentRecords(",
          "1912:       deferUsageSet,",
          "1916:     const executor = () =>",
          "1917:       executeDeferredGroupedFieldSet(",
          "1918:         deferredFragmentRecords,",
          "1919:         exeContext,",
          "1920:         parentType,",
          "1921:         sourceValue,",
          "1922:         path,",
          "1923:         groupedFieldSet,",
          "1924:         [],",
          "1925:         deferMap,",
          "1926:       );",
          "1928:     const deferredGroupedFieldSetRecord: DeferredGroupedFieldSetRecord = {",
          "1929:       deferredFragmentRecords,",
          "1930:       result: shouldDefer(parentDeferUsages, deferUsageSet)",
          "1931:         ? Promise.resolve().then(executor)",
          "1932:         : executor(),",
          "1933:     };",
          "1935:     newDeferredGroupedFieldSetRecords.push(deferredGroupedFieldSetRecord);",
          "1938:   return newDeferredGroupedFieldSetRecords;",
          "1939: }",
          "1941: function shouldDefer(",
          "1942:   parentDeferUsages: undefined | DeferUsageSet,",
          "1943:   deferUsages: DeferUsageSet,",
          "1944: ): boolean {",
          "1949:   return (",
          "1950:     parentDeferUsages === undefined ||",
          "1951:     !Array.from(deferUsages).every((deferUsage) =>",
          "1952:       parentDeferUsages.has(deferUsage),",
          "1953:     )",
          "1954:   );",
          "1958:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "1963:   groupedFieldSet: GroupedFieldSet,",
          "1964:   errors: Array<GraphQLError>,",
          "1966: ): PromiseOrValue<DeferredGroupedFieldSetResult> {",
          "1967:   let result;",
          "1969:     result = executeFields(",
          "1974:       groupedFieldSet,",
          "1975:       errors,",
          "1979:     return {",
          "1980:       deferredFragmentRecords,",
          "1981:       path: pathToArray(path),",
          "1982:       errors: withError(errors, error),",
          "1983:     };",
          "1984:   }",
          "1986:   if (isPromise(result)) {",
          "1987:     return result.then(",
          "1988:       (resolved) =>",
          "1989:         buildDeferredGroupedFieldSetResult(",
          "1990:           errors,",
          "1991:           deferredFragmentRecords,",
          "1992:           path,",
          "1993:           resolved,",
          "1994:         ),",
          "1995:       (error) => ({",
          "1996:         deferredFragmentRecords,",
          "1997:         path: pathToArray(path),",
          "1998:         errors: withError(errors, error),",
          "1999:       }),",
          "2003:   return buildDeferredGroupedFieldSetResult(",
          "2004:     errors,",
          "2005:     deferredFragmentRecords,",
          "2006:     path,",
          "2007:     result,",
          "2008:   );",
          "2011: function buildDeferredGroupedFieldSetResult(",
          "2012:   errors: ReadonlyArray<GraphQLError>,",
          "2013:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>,",
          "2014:   path: Path | undefined,",
          "2015:   result: GraphQLWrappedResult<ObjMap<unknown>>,",
          "2016: ): DeferredGroupedFieldSetResult {",
          "2017:   return {",
          "2018:     deferredFragmentRecords,",
          "2019:     path: pathToArray(path),",
          "2020:     result:",
          "2021:       errors.length === 0 ? { data: result[0] } : { data: result[0], errors },",
          "2022:     incrementalDataRecords: result[1],",
          "2023:   };",
          "2024: }",
          "2026: function getDeferredFragmentRecords(",
          "2027:   deferUsages: DeferUsageSet,",
          "2028:   deferMap: ReadonlyMap<DeferUsage, DeferredFragmentRecord>,",
          "2029: ): ReadonlyArray<DeferredFragmentRecord> {",
          "2030:   return Array.from(deferUsages).map((deferUsage) =>",
          "2031:     deferredFragmentRecordFromDeferUsage(deferUsage, deferMap),",
          "2032:   );",
          "2033: }",
          "2035: function firstSyncStreamItems(",
          "2036:   streamRecord: SubsequentResultRecord,",
          "2037:   initialItem: PromiseOrValue<unknown>,",
          "2038:   initialIndex: number,",
          "2039:   iterator: Iterator<unknown>,",
          "2045:   const path = streamRecord.path;",
          "2046:   const initialPath = addPath(path, initialIndex, undefined);",
          "2048:   const firstStreamItems: StreamItemsRecord = {",
          "2049:     streamRecord,",
          "2050:     result: Promise.resolve().then(() => {",
          "2051:       let result = completeStreamItems(",
          "2052:         streamRecord,",
          "2053:         initialPath,",
          "2054:         initialItem,",
          "2056:         [],",
          "2061:       const results = [result];",
          "2062:       let currentIndex = initialIndex;",
          "2063:       let iteration = iterator.next();",
          "2064:       let erroredSynchronously = false;",
          "2065:       while (!iteration.done) {",
          "2066:         if (!isPromise(result) && !isReconcilableStreamItemsResult(result)) {",
          "2067:           erroredSynchronously = true;",
          "2068:           break;",
          "2069:         }",
          "2070:         const item = iteration.value;",
          "2071:         currentIndex++;",
          "2072:         const currentPath = addPath(path, currentIndex, undefined);",
          "2073:         result = completeStreamItems(",
          "2074:           streamRecord,",
          "2075:           currentPath,",
          "2076:           item,",
          "2078:           [],",
          "2080:           info,",
          "2081:           itemType,",
          "2083:         results.push(result);",
          "2084:         iteration = iterator.next();",
          "2085:       }",
          "2087:       currentIndex = results.length - 1;",
          "2090:       let currentResult = erroredSynchronously",
          "2091:         ? results[currentIndex]",
          "2092:         : prependNextStreamItems(results[currentIndex], {",
          "2093:             streamRecord,",
          "2094:             result: { streamRecord },",
          "2095:           });",
          "2097:       while (currentIndex-- > 0) {",
          "2098:         currentResult = prependNextStreamItems(results[currentIndex], {",
          "2099:           streamRecord,",
          "2100:           result: currentResult,",
          "2101:         });",
          "2102:       }",
          "2104:       return currentResult;",
          "2105:     }),",
          "2106:   };",
          "2107:   return firstStreamItems;",
          "2108: }",
          "2110: function prependNextStreamItems(",
          "2111:   result: PromiseOrValue<StreamItemsResult>,",
          "2112:   nextStreamItems: StreamItemsRecord,",
          "2113: ): PromiseOrValue<StreamItemsResult> {",
          "2114:   if (isPromise(result)) {",
          "2115:     return result.then((resolved) =>",
          "2116:       prependNextResolvedStreamItems(resolved, nextStreamItems),",
          "2117:     );",
          "2119:   return prependNextResolvedStreamItems(result, nextStreamItems);",
          "2120: }",
          "2122: function prependNextResolvedStreamItems(",
          "2123:   result: StreamItemsResult,",
          "2124:   nextStreamItems: StreamItemsRecord,",
          "2125: ): StreamItemsResult {",
          "2126:   return isReconcilableStreamItemsResult(result)",
          "2127:     ? {",
          "2128:         ...result,",
          "2129:         incrementalDataRecords: [",
          "2130:           nextStreamItems,",
          "2131:           ...result.incrementalDataRecords,",
          "2132:         ],",
          "2133:       }",
          "2134:     : result;",
          "2137: function firstAsyncStreamItems(",
          "2138:   streamRecord: SubsequentResultRecord,",
          "2139:   path: Path,",
          "2140:   initialIndex: number,",
          "2146: ): StreamItemsRecord {",
          "2147:   const firstStreamItems: StreamItemsRecord = {",
          "2148:     streamRecord,",
          "2149:     result: getNextAsyncStreamItemsResult(",
          "2150:       streamRecord,",
          "2151:       path,",
          "2152:       initialIndex,",
          "2153:       asyncIterator,",
          "2158:     ),",
          "2159:   };",
          "2160:   return firstStreamItems;",
          "2163: async function getNextAsyncStreamItemsResult(",
          "2164:   streamRecord: SubsequentResultRecord,",
          "2165:   path: Path,",
          "2166:   index: number,",
          "2172: ): Promise<StreamItemsResult> {",
          "2173:   let iteration;",
          "2174:   try {",
          "2175:     iteration = await asyncIterator.next();",
          "2176:   } catch (error) {",
          "2177:     return {",
          "2179:       errors: [locatedError(error, toNodes(fieldGroup), pathToArray(path))],",
          "2180:     };",
          "2181:   }",
          "2183:   if (iteration.done) {",
          "2184:     return { streamRecord };",
          "2185:   }",
          "2187:   const itemPath = addPath(path, index, undefined);",
          "2189:   const result = completeStreamItems(",
          "2190:     streamRecord,",
          "2191:     itemPath,",
          "2192:     iteration.value,",
          "2193:     exeContext,",
          "2194:     [],",
          "2195:     fieldGroup,",
          "2196:     info,",
          "2197:     itemType,",
          "2198:   );",
          "2200:   const nextStreamItems: StreamItemsRecord = {",
          "2201:     streamRecord,",
          "2202:     result: getNextAsyncStreamItemsResult(",
          "2203:       streamRecord,",
          "2204:       path,",
          "2205:       index,",
          "2206:       asyncIterator,",
          "2207:       exeContext,",
          "2208:       fieldGroup,",
          "2209:       info,",
          "2210:       itemType,",
          "2211:     ),",
          "2212:   };",
          "2214:   return prependNextStreamItems(result, nextStreamItems);",
          "2215: }",
          "2217: function completeStreamItems(",
          "2218:   streamRecord: SubsequentResultRecord,",
          "2219:   itemPath: Path,",
          "2220:   item: unknown,",
          "2221:   exeContext: ExecutionContext,",
          "2222:   errors: Array<GraphQLError>,",
          "2223:   fieldGroup: FieldGroup,",
          "2224:   info: GraphQLResolveInfo,",
          "2225:   itemType: GraphQLOutputType,",
          "2226: ): PromiseOrValue<StreamItemsResult> {",
          "2227:   if (isPromise(item)) {",
          "2228:     return completePromisedValue(",
          "2229:       exeContext,",
          "2230:       itemType,",
          "2231:       fieldGroup,",
          "2232:       info,",
          "2233:       itemPath,",
          "2234:       item,",
          "2235:       errors,",
          "2236:       new Map(),",
          "2237:     ).then(",
          "2238:       (resolvedItem) =>",
          "2239:         buildStreamItemsResult(errors, streamRecord, resolvedItem),",
          "2240:       (error) => ({",
          "2241:         streamRecord,",
          "2242:         errors: withError(errors, error),",
          "2243:       }),",
          "2245:   }",
          "2247:   let result: PromiseOrValue<GraphQLWrappedResult<unknown>>;",
          "2248:   try {",
          "2250:       result = completeValue(",
          "2252:         itemType,",
          "2256:         item,",
          "2257:         errors,",
          "2258:         new Map(),",
          "2260:     } catch (rawError) {",
          "2261:       handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "2262:       result = [null, []];",
          "2264:   } catch (error) {",
          "2265:     return {",
          "2266:       streamRecord,",
          "2267:       errors: withError(errors, error),",
          "2268:     };",
          "2269:   }",
          "2271:   if (isPromise(result)) {",
          "2272:     return result",
          "2273:       .then(undefined, (rawError) => {",
          "2274:         handleFieldError(rawError, itemType, fieldGroup, itemPath, errors);",
          "2275:         return [null, []] as GraphQLWrappedResult<unknown>;",
          "2276:       })",
          "2277:       .then(",
          "2278:         (resolvedItem) =>",
          "2279:           buildStreamItemsResult(errors, streamRecord, resolvedItem),",
          "2280:         (error) => ({",
          "2281:           streamRecord,",
          "2282:           errors: withError(errors, error),",
          "2283:         }),",
          "2287:   return buildStreamItemsResult(errors, streamRecord, result);",
          "2288: }",
          "2290: function buildStreamItemsResult(",
          "2291:   errors: ReadonlyArray<GraphQLError>,",
          "2292:   streamRecord: SubsequentResultRecord,",
          "2293:   result: GraphQLWrappedResult<unknown>,",
          "2294: ): StreamItemsResult {",
          "2295:   return {",
          "2296:     streamRecord,",
          "2297:     result:",
          "2298:       errors.length === 0",
          "2299:         ? { items: [result[0]] }",
          "2300:         : {",
          "2301:             items: [result[0]],",
          "2302:             errors: [...errors],",
          "2303:           },",
          "2304:     incrementalDataRecords: result[1],",
          "2305:   };",
          "",
          "---------------"
        ],
        "src/jsutils/promiseForObject.ts||src/jsutils/promiseForObject.ts": [
          "File: src/jsutils/promiseForObject.ts -> src/jsutils/promiseForObject.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   object: ObjMap<Promise<T>>,",
          "13:   const keys = Object.keys(object);",
          "14:   const values = Object.values(object);",
          "",
          "[Removed Lines]",
          "10: export async function promiseForObject<T>(",
          "12: ): Promise<ObjMap<T>> {",
          "",
          "[Added Lines]",
          "10: export async function promiseForObject<T, U>(",
          "12:   callback: (object: ObjMap<T>) => U,",
          "13: ): Promise<U> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:   for (let i = 0; i < keys.length; ++i) {",
          "19:     resolvedObject[keys[i]] = resolvedValues[i];",
          "20:   }",
          "22: }",
          "",
          "[Removed Lines]",
          "21:   return resolvedObject;",
          "",
          "[Added Lines]",
          "22:   return callback(resolvedObject);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6731c76ae9c7deb19762d92f652b96d67190745d",
      "candidate_info": {
        "commit_hash": "6731c76ae9c7deb19762d92f652b96d67190745d",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/6731c76ae9c7deb19762d92f652b96d67190745d",
        "files": [
          "src/execution/execute.ts"
        ],
        "message": "polish: introduce executeExecutionPlan to conform to spec algo (#4178)\n\nPreviously, this was inlined into both executeOperation and\ncollectAndExecuteSubfields, now it is a separate function.\n\nexecuteExecutionPlan calls \"getNewDeferMap\" instead of\n\"addNewDeferredFragments\" to also conform to the spec\nfunctional/immutable style.\n\n\n![image](https://github.com/user-attachments/assets/95918a1d-e024-411a-87a7-f3835e26a810)",
        "before_after_code_files": [
          "src/execution/execute.ts||src/execution/execute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:       rootType,",
          "282:       operation,",
          "283:     );",
          "330:     if (isPromise(graphqlWrappedResult)) {",
          "331:       return graphqlWrappedResult.then(",
          "332:         (resolved) => buildDataResponse(exeContext, resolved[0], resolved[1]),",
          "",
          "[Removed Lines]",
          "284:     let groupedFieldSet = collectedFields.groupedFieldSet;",
          "285:     const newDeferUsages = collectedFields.newDeferUsages;",
          "286:     let graphqlWrappedResult: PromiseOrValue<",
          "287:       GraphQLWrappedResult<ObjMap<unknown>>",
          "288:     >;",
          "289:     if (newDeferUsages.length === 0) {",
          "290:       graphqlWrappedResult = executeRootGroupedFieldSet(",
          "291:         exeContext,",
          "292:         operation.operation,",
          "293:         rootType,",
          "294:         rootValue,",
          "295:         groupedFieldSet,",
          "296:         undefined,",
          "297:       );",
          "298:     } else {",
          "299:       const executionPlan = buildExecutionPlan(groupedFieldSet);",
          "300:       groupedFieldSet = executionPlan.groupedFieldSet;",
          "301:       const newGroupedFieldSets = executionPlan.newGroupedFieldSets;",
          "302:       const newDeferMap = addNewDeferredFragments(newDeferUsages, new Map());",
          "304:       graphqlWrappedResult = executeRootGroupedFieldSet(",
          "305:         exeContext,",
          "306:         operation.operation,",
          "307:         rootType,",
          "308:         rootValue,",
          "309:         groupedFieldSet,",
          "310:         newDeferMap,",
          "311:       );",
          "313:       if (newGroupedFieldSets.size > 0) {",
          "314:         const newPendingExecutionGroups = collectExecutionGroups(",
          "315:           exeContext,",
          "316:           rootType,",
          "317:           rootValue,",
          "318:           undefined,",
          "319:           undefined,",
          "320:           newGroupedFieldSets,",
          "321:           newDeferMap,",
          "322:         );",
          "324:         graphqlWrappedResult = withNewExecutionGroups(",
          "325:           graphqlWrappedResult,",
          "326:           newPendingExecutionGroups,",
          "327:         );",
          "328:       }",
          "329:     }",
          "",
          "[Added Lines]",
          "285:     const { groupedFieldSet, newDeferUsages } = collectedFields;",
          "286:     const graphqlWrappedResult =",
          "287:       newDeferUsages.length === 0",
          "288:         ? executeRootGroupedFieldSet(",
          "289:             exeContext,",
          "290:             operation.operation,",
          "291:             rootType,",
          "292:             rootValue,",
          "293:             groupedFieldSet,",
          "294:             undefined,",
          "295:           )",
          "296:         : executeExecutionPlan(",
          "297:             exeContext,",
          "298:             rootType,",
          "299:             rootValue,",
          "300:             newDeferUsages,",
          "301:             buildExecutionPlan(groupedFieldSet),",
          "302:           );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "346:   }",
          "347: }",
          "349: function withNewExecutionGroups(",
          "350:   result: PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>>,",
          "351:   newPendingExecutionGroups: ReadonlyArray<PendingExecutionGroup>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: function executeExecutionPlan(",
          "324:   exeContext: ExecutionContext,",
          "325:   returnType: GraphQLObjectType,",
          "326:   sourceValue: unknown,",
          "327:   newDeferUsages: ReadonlyArray<DeferUsage>,",
          "328:   executionPlan: ExecutionPlan,",
          "329:   path?: Path | undefined,",
          "330:   incrementalContext?: IncrementalContext | undefined,",
          "331:   deferMap?: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "332: ): PromiseOrValue<GraphQLWrappedResult<ObjMap<unknown>>> {",
          "333:   const newDeferMap = getNewDeferMap(newDeferUsages, deferMap, path);",
          "335:   const { groupedFieldSet, newGroupedFieldSets } = executionPlan;",
          "337:   const graphqlWrappedResult = executeFields(",
          "338:     exeContext,",
          "339:     returnType,",
          "340:     sourceValue,",
          "341:     path,",
          "342:     groupedFieldSet,",
          "343:     incrementalContext,",
          "344:     newDeferMap,",
          "345:   );",
          "347:   if (newGroupedFieldSets.size > 0) {",
          "348:     const newPendingExecutionGroups = collectExecutionGroups(",
          "349:       exeContext,",
          "350:       returnType,",
          "351:       sourceValue,",
          "352:       path,",
          "353:       incrementalContext?.deferUsageSet,",
          "354:       newGroupedFieldSets,",
          "355:       newDeferMap,",
          "356:     );",
          "358:     return withNewExecutionGroups(",
          "359:       graphqlWrappedResult,",
          "360:       newPendingExecutionGroups,",
          "361:     );",
          "362:   }",
          "363:   return graphqlWrappedResult;",
          "364: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1677:   newDeferUsages: ReadonlyArray<DeferUsage>,",
          "1679:   path?: Path | undefined,",
          "1680: ): ReadonlyMap<DeferUsage, DeferredFragmentRecord> {",
          "1682:   for (const newDeferUsage of newDeferUsages) {",
          "1683:     const parentDeferUsage = newDeferUsage.parentDeferUsage;",
          "",
          "[Removed Lines]",
          "1676: function addNewDeferredFragments(",
          "1678:   newDeferMap: Map<DeferUsage, DeferredFragmentRecord>,",
          "",
          "[Added Lines]",
          "1684: function getNewDeferMap(",
          "1686:   deferMap?: ReadonlyMap<DeferUsage, DeferredFragmentRecord> | undefined,",
          "1689:   const newDeferMap = new Map(deferMap);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1724:     returnType,",
          "1725:     fieldGroup,",
          "1726:   );",
          "1777: }",
          "1779: function buildSubExecutionPlan(",
          "",
          "[Removed Lines]",
          "1727:   let groupedFieldSet = collectedSubfields.groupedFieldSet;",
          "1728:   const newDeferUsages = collectedSubfields.newDeferUsages;",
          "1729:   if (deferMap === undefined && newDeferUsages.length === 0) {",
          "1730:     return executeFields(",
          "1731:       exeContext,",
          "1732:       returnType,",
          "1733:       result,",
          "1734:       path,",
          "1735:       groupedFieldSet,",
          "1736:       incrementalContext,",
          "1737:       undefined,",
          "1738:     );",
          "1739:   }",
          "1740:   const subExecutionPlan = buildSubExecutionPlan(",
          "1741:     groupedFieldSet,",
          "1742:     incrementalContext?.deferUsageSet,",
          "1743:   );",
          "1745:   groupedFieldSet = subExecutionPlan.groupedFieldSet;",
          "1746:   const newGroupedFieldSets = subExecutionPlan.newGroupedFieldSets;",
          "1747:   const newDeferMap = addNewDeferredFragments(",
          "1748:     newDeferUsages,",
          "1749:     new Map(deferMap),",
          "1750:     path,",
          "1751:   );",
          "1753:   const subFields = executeFields(",
          "1754:     exeContext,",
          "1755:     returnType,",
          "1756:     result,",
          "1757:     path,",
          "1758:     groupedFieldSet,",
          "1759:     incrementalContext,",
          "1760:     newDeferMap,",
          "1761:   );",
          "1763:   if (newGroupedFieldSets.size > 0) {",
          "1764:     const newPendingExecutionGroups = collectExecutionGroups(",
          "1765:       exeContext,",
          "1766:       returnType,",
          "1767:       result,",
          "1768:       path,",
          "1769:       incrementalContext?.deferUsageSet,",
          "1770:       newGroupedFieldSets,",
          "1771:       newDeferMap,",
          "1772:     );",
          "1774:     return withNewExecutionGroups(subFields, newPendingExecutionGroups);",
          "1775:   }",
          "1776:   return subFields;",
          "",
          "[Added Lines]",
          "1737:   const { groupedFieldSet, newDeferUsages } = collectedSubfields;",
          "1738:   return deferMap === undefined && newDeferUsages.length === 0",
          "1739:     ? executeFields(",
          "1740:         exeContext,",
          "1741:         returnType,",
          "1742:         result,",
          "1743:         path,",
          "1744:         groupedFieldSet,",
          "1745:         incrementalContext,",
          "1746:         undefined,",
          "1747:       )",
          "1748:     : executeExecutionPlan(",
          "1749:         exeContext,",
          "1750:         returnType,",
          "1751:         result,",
          "1752:         newDeferUsages,",
          "1753:         buildSubExecutionPlan(",
          "1754:           groupedFieldSet,",
          "1755:           incrementalContext?.deferUsageSet,",
          "1756:         ),",
          "1757:         path,",
          "1758:         incrementalContext,",
          "1759:         deferMap,",
          "1760:       );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b093768132f5e2a098baf65f8f51837090fc262e",
      "candidate_info": {
        "commit_hash": "b093768132f5e2a098baf65f8f51837090fc262e",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/b093768132f5e2a098baf65f8f51837090fc262e",
        "files": [
          "package-lock.json",
          "package.json",
          "src/version.ts"
        ],
        "message": "17.0.0-alpha.7",
        "before_after_code_files": [
          "src/version.ts||src/version.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.ts||src/version.ts": [
          "File: src/version.ts -> src/version.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "7: export const version = '17.0.0-alpha.5' as string;",
          "",
          "[Added Lines]",
          "7: export const version = '17.0.0-alpha.7' as string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   major: 17 as number,",
          "14:   minor: 0 as number,",
          "15:   patch: 0 as number,",
          "17: });",
          "",
          "[Removed Lines]",
          "16:   preReleaseTag: 'alpha.5' as string | null,",
          "",
          "[Added Lines]",
          "16:   preReleaseTag: 'alpha.7' as string | null,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06bb157fc14f13677cd2696b2aa67e4956c2bf10",
      "candidate_info": {
        "commit_hash": "06bb157fc14f13677cd2696b2aa67e4956c2bf10",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/06bb157fc14f13677cd2696b2aa67e4956c2bf10",
        "files": [
          "src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/lists-test.ts",
          "src/execution/__tests__/nonnull-test.ts",
          "src/execution/__tests__/oneof-test.ts",
          "src/execution/__tests__/stream-test.ts",
          "src/execution/__tests__/subscribe-test.ts",
          "src/execution/execute.ts",
          "src/execution/index.ts",
          "src/execution/types.ts",
          "src/graphql.ts"
        ],
        "message": "refactor: extract execution types to separate file (#4099)",
        "before_after_code_files": [
          "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts",
          "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts",
          "src/execution/__tests__/lists-test.ts||src/execution/__tests__/lists-test.ts",
          "src/execution/__tests__/nonnull-test.ts||src/execution/__tests__/nonnull-test.ts",
          "src/execution/__tests__/oneof-test.ts||src/execution/__tests__/oneof-test.ts",
          "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts",
          "src/execution/__tests__/subscribe-test.ts||src/execution/__tests__/subscribe-test.ts",
          "src/execution/execute.ts||src/execution/execute.ts",
          "src/execution/index.ts||src/execution/index.ts",
          "src/execution/types.ts||src/execution/types.ts",
          "src/graphql.ts||src/graphql.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/execution/IncrementalPublisher.ts||src/execution/IncrementalPublisher.ts": [
          "File: src/execution/IncrementalPublisher.ts -> src/execution/IncrementalPublisher.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { invariant } from '../jsutils/invariant.js';",
          "2: import { isPromise } from '../jsutils/isPromise.js';",
          "3: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "5: import { pathToArray } from '../jsutils/Path.js';",
          "7: import { promiseWithResolvers } from '../jsutils/promiseWithResolvers.js';",
          "173: export function buildIncrementalResponse(",
          "174:   context: IncrementalPublisherContext,",
          "",
          "[Removed Lines]",
          "4: import type { Path } from '../jsutils/Path.js';",
          "6: import type { PromiseOrValue } from '../jsutils/PromiseOrValue.js';",
          "9: import type {",
          "10:   GraphQLError,",
          "11:   GraphQLFormattedError,",
          "12: } from '../error/GraphQLError.js';",
          "23: export interface ExecutionResult<",
          "24:   TData = ObjMap<unknown>,",
          "25:   TExtensions = ObjMap<unknown>,",
          "26: > {",
          "27:   errors?: ReadonlyArray<GraphQLError>;",
          "28:   data?: TData | null;",
          "29:   extensions?: TExtensions;",
          "30: }",
          "32: export interface FormattedExecutionResult<",
          "33:   TData = ObjMap<unknown>,",
          "34:   TExtensions = ObjMap<unknown>,",
          "35: > {",
          "36:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "37:   data?: TData | null;",
          "38:   extensions?: TExtensions;",
          "39: }",
          "41: export interface ExperimentalIncrementalExecutionResults<",
          "42:   TData = unknown,",
          "43:   TExtensions = ObjMap<unknown>,",
          "44: > {",
          "45:   initialResult: InitialIncrementalExecutionResult<TData, TExtensions>;",
          "46:   subsequentResults: AsyncGenerator<",
          "47:     SubsequentIncrementalExecutionResult<TData, TExtensions>,",
          "48:     void,",
          "49:     void",
          "50:   >;",
          "51: }",
          "53: export interface InitialIncrementalExecutionResult<",
          "54:   TData = ObjMap<unknown>,",
          "55:   TExtensions = ObjMap<unknown>,",
          "56: > extends ExecutionResult<TData, TExtensions> {",
          "57:   data: TData;",
          "58:   pending: ReadonlyArray<PendingResult>;",
          "59:   hasNext: true;",
          "60:   extensions?: TExtensions;",
          "61: }",
          "63: export interface FormattedInitialIncrementalExecutionResult<",
          "64:   TData = ObjMap<unknown>,",
          "65:   TExtensions = ObjMap<unknown>,",
          "66: > extends FormattedExecutionResult<TData, TExtensions> {",
          "67:   data: TData;",
          "68:   pending: ReadonlyArray<PendingResult>;",
          "69:   hasNext: boolean;",
          "70:   extensions?: TExtensions;",
          "71: }",
          "73: export interface SubsequentIncrementalExecutionResult<",
          "74:   TData = unknown,",
          "75:   TExtensions = ObjMap<unknown>,",
          "76: > {",
          "77:   pending?: ReadonlyArray<PendingResult>;",
          "78:   incremental?: ReadonlyArray<IncrementalResult<TData, TExtensions>>;",
          "79:   completed?: ReadonlyArray<CompletedResult>;",
          "80:   hasNext: boolean;",
          "81:   extensions?: TExtensions;",
          "82: }",
          "84: export interface FormattedSubsequentIncrementalExecutionResult<",
          "85:   TData = unknown,",
          "86:   TExtensions = ObjMap<unknown>,",
          "87: > {",
          "88:   hasNext: boolean;",
          "89:   pending?: ReadonlyArray<PendingResult>;",
          "90:   incremental?: ReadonlyArray<FormattedIncrementalResult<TData, TExtensions>>;",
          "91:   completed?: ReadonlyArray<FormattedCompletedResult>;",
          "92:   extensions?: TExtensions;",
          "93: }",
          "95: interface BareDeferredGroupedFieldSetResult<TData = ObjMap<unknown>> {",
          "96:   errors?: ReadonlyArray<GraphQLError>;",
          "97:   data: TData;",
          "98: }",
          "100: export interface IncrementalDeferResult<",
          "101:   TData = ObjMap<unknown>,",
          "102:   TExtensions = ObjMap<unknown>,",
          "103: > extends BareDeferredGroupedFieldSetResult<TData> {",
          "104:   id: string;",
          "105:   subPath?: ReadonlyArray<string | number>;",
          "106:   extensions?: TExtensions;",
          "107: }",
          "109: export interface FormattedIncrementalDeferResult<",
          "110:   TData = ObjMap<unknown>,",
          "111:   TExtensions = ObjMap<unknown>,",
          "112: > {",
          "113:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "114:   data: TData;",
          "115:   id: string;",
          "116:   subPath?: ReadonlyArray<string | number>;",
          "117:   extensions?: TExtensions;",
          "118: }",
          "120: interface BareStreamItemsResult<TData = ReadonlyArray<unknown>> {",
          "121:   errors?: ReadonlyArray<GraphQLError>;",
          "122:   items: TData;",
          "123: }",
          "125: export interface IncrementalStreamResult<",
          "126:   TData = ReadonlyArray<unknown>,",
          "127:   TExtensions = ObjMap<unknown>,",
          "128: > extends BareStreamItemsResult<TData> {",
          "129:   id: string;",
          "130:   subPath?: ReadonlyArray<string | number>;",
          "131:   extensions?: TExtensions;",
          "132: }",
          "134: export interface FormattedIncrementalStreamResult<",
          "135:   TData = Array<unknown>,",
          "136:   TExtensions = ObjMap<unknown>,",
          "137: > {",
          "138:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "139:   items: TData;",
          "140:   id: string;",
          "141:   subPath?: ReadonlyArray<string | number>;",
          "142:   extensions?: TExtensions;",
          "143: }",
          "145: export type IncrementalResult<TData = unknown, TExtensions = ObjMap<unknown>> =",
          "146:   | IncrementalDeferResult<TData, TExtensions>",
          "147:   | IncrementalStreamResult<TData, TExtensions>;",
          "149: export type FormattedIncrementalResult<",
          "150:   TData = unknown,",
          "151:   TExtensions = ObjMap<unknown>,",
          "152: > =",
          "153:   | FormattedIncrementalDeferResult<TData, TExtensions>",
          "154:   | FormattedIncrementalStreamResult<TData, TExtensions>;",
          "156: export interface PendingResult {",
          "157:   id: string;",
          "158:   path: ReadonlyArray<string | number>;",
          "159:   label?: string;",
          "160: }",
          "162: export interface CompletedResult {",
          "163:   id: string;",
          "164:   errors?: ReadonlyArray<GraphQLError>;",
          "165: }",
          "167: export interface FormattedCompletedResult {",
          "168:   path: ReadonlyArray<string | number>;",
          "169:   label?: string;",
          "170:   errors?: ReadonlyArray<GraphQLError>;",
          "171: }",
          "",
          "[Added Lines]",
          "7: import type { GraphQLError } from '../error/GraphQLError.js';",
          "9: import type {",
          "10:   CancellableStreamRecord,",
          "11:   CompletedResult,",
          "12:   DeferredFragmentRecord,",
          "13:   DeferredGroupedFieldSetResult,",
          "14:   ExperimentalIncrementalExecutionResults,",
          "15:   IncrementalDataRecord,",
          "16:   IncrementalDataRecordResult,",
          "17:   IncrementalDeferResult,",
          "18:   IncrementalResult,",
          "19:   IncrementalStreamResult,",
          "20:   InitialIncrementalExecutionResult,",
          "21:   PendingResult,",
          "22:   StreamItemsResult,",
          "23:   SubsequentIncrementalExecutionResult,",
          "24:   SubsequentResultRecord,",
          "25: } from './types.js';",
          "26: import {",
          "27:   isCancellableStreamRecord,",
          "28:   isDeferredFragmentRecord,",
          "29:   isDeferredGroupedFieldSetRecord,",
          "30:   isDeferredGroupedFieldSetResult,",
          "31:   isNonReconcilableDeferredGroupedFieldSetResult,",
          "32: } from './types.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:     };",
          "658:   }",
          "659: }",
          "",
          "[Removed Lines]",
          "661: function isDeferredFragmentRecord(",
          "662:   subsequentResultRecord: SubsequentResultRecord,",
          "663: ): subsequentResultRecord is DeferredFragmentRecord {",
          "664:   return 'parent' in subsequentResultRecord;",
          "665: }",
          "667: function isDeferredGroupedFieldSetRecord(",
          "668:   incrementalDataRecord: IncrementalDataRecord,",
          "669: ): incrementalDataRecord is DeferredGroupedFieldSetRecord {",
          "670:   return 'deferredFragmentRecords' in incrementalDataRecord;",
          "671: }",
          "673: export type DeferredGroupedFieldSetResult =",
          "674:   | ReconcilableDeferredGroupedFieldSetResult",
          "675:   | NonReconcilableDeferredGroupedFieldSetResult;",
          "677: function isDeferredGroupedFieldSetResult(",
          "678:   subsequentResult: DeferredGroupedFieldSetResult | StreamItemsResult,",
          "679: ): subsequentResult is DeferredGroupedFieldSetResult {",
          "680:   return 'deferredFragmentRecords' in subsequentResult;",
          "681: }",
          "683: interface ReconcilableDeferredGroupedFieldSetResult {",
          "684:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "685:   path: Array<string | number>;",
          "686:   result: BareDeferredGroupedFieldSetResult;",
          "687:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "688:   sent?: true | undefined;",
          "689:   errors?: never;",
          "690: }",
          "692: interface NonReconcilableDeferredGroupedFieldSetResult {",
          "693:   errors: ReadonlyArray<GraphQLError>;",
          "694:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "695:   path: Array<string | number>;",
          "696:   result?: never;",
          "697: }",
          "699: function isNonReconcilableDeferredGroupedFieldSetResult(",
          "700:   deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "701: ): deferredGroupedFieldSetResult is NonReconcilableDeferredGroupedFieldSetResult {",
          "702:   return deferredGroupedFieldSetResult.errors !== undefined;",
          "703: }",
          "705: export interface DeferredGroupedFieldSetRecord {",
          "706:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "707:   result: PromiseOrValue<DeferredGroupedFieldSetResult>;",
          "708: }",
          "710: export interface SubsequentResultRecord {",
          "711:   path: Path | undefined;",
          "712:   label: string | undefined;",
          "713:   id?: string | undefined;",
          "714: }",
          "717: export class DeferredFragmentRecord implements SubsequentResultRecord {",
          "718:   path: Path | undefined;",
          "719:   label: string | undefined;",
          "720:   id?: string | undefined;",
          "721:   parent: DeferredFragmentRecord | undefined;",
          "722:   expectedReconcilableResults: number;",
          "723:   results: Array<DeferredGroupedFieldSetResult>;",
          "724:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "725:   children: Set<DeferredFragmentRecord>;",
          "727:   constructor(opts: {",
          "728:     path: Path | undefined;",
          "729:     label: string | undefined;",
          "730:     parent: DeferredFragmentRecord | undefined;",
          "731:   }) {",
          "732:     this.path = opts.path;",
          "733:     this.label = opts.label;",
          "734:     this.parent = opts.parent;",
          "735:     this.expectedReconcilableResults = 0;",
          "736:     this.results = [];",
          "737:     this.reconcilableResults = [];",
          "738:     this.children = new Set();",
          "739:   }",
          "740: }",
          "742: export interface CancellableStreamRecord extends SubsequentResultRecord {",
          "743:   earlyReturn: () => Promise<unknown>;",
          "744: }",
          "746: function isCancellableStreamRecord(",
          "747:   subsequentResultRecord: SubsequentResultRecord,",
          "748: ): subsequentResultRecord is CancellableStreamRecord {",
          "749:   return 'earlyReturn' in subsequentResultRecord;",
          "750: }",
          "752: interface ReconcilableStreamItemsResult {",
          "753:   streamRecord: SubsequentResultRecord;",
          "754:   result: BareStreamItemsResult;",
          "755:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "756:   errors?: never;",
          "757: }",
          "759: export function isReconcilableStreamItemsResult(",
          "760:   streamItemsResult: StreamItemsResult,",
          "761: ): streamItemsResult is ReconcilableStreamItemsResult {",
          "762:   return streamItemsResult.result !== undefined;",
          "763: }",
          "765: interface TerminatingStreamItemsResult {",
          "766:   streamRecord: SubsequentResultRecord;",
          "767:   result?: never;",
          "768:   incrementalDataRecords?: never;",
          "769:   errors?: never;",
          "770: }",
          "772: interface NonReconcilableStreamItemsResult {",
          "773:   streamRecord: SubsequentResultRecord;",
          "774:   errors: ReadonlyArray<GraphQLError>;",
          "775:   result?: never;",
          "776: }",
          "778: export type StreamItemsResult =",
          "779:   | ReconcilableStreamItemsResult",
          "780:   | TerminatingStreamItemsResult",
          "781:   | NonReconcilableStreamItemsResult;",
          "783: export interface StreamItemsRecord {",
          "784:   streamRecord: SubsequentResultRecord;",
          "785:   result: PromiseOrValue<StreamItemsResult>;",
          "786: }",
          "788: export type IncrementalDataRecord =",
          "789:   | DeferredGroupedFieldSetRecord",
          "790:   | StreamItemsRecord;",
          "792: export type IncrementalDataRecordResult =",
          "793:   | DeferredGroupedFieldSetResult",
          "794:   | StreamItemsResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/execution/__tests__/defer-test.ts||src/execution/__tests__/defer-test.ts": [
          "File: src/execution/__tests__/defer-test.ts -> src/execution/__tests__/defer-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import type {",
          "21:   InitialIncrementalExecutionResult,",
          "22:   SubsequentIncrementalExecutionResult,",
          "25: const friendType = new GraphQLObjectType({",
          "26:   fields: {",
          "",
          "[Removed Lines]",
          "23: } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "23: } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/__tests__/lists-test.ts||src/execution/__tests__/lists-test.ts": [
          "File: src/execution/__tests__/lists-test.ts -> src/execution/__tests__/lists-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { buildSchema } from '../../utilities/buildASTSchema.js';",
          "21: import { execute, executeSync } from '../execute.js';",
          "24: describe('Execute: Accepts any iterable as list value', () => {",
          "25:   function complete(rootValue: unknown) {",
          "",
          "[Removed Lines]",
          "22: import type { ExecutionResult } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "22: import type { ExecutionResult } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/__tests__/nonnull-test.ts||src/execution/__tests__/nonnull-test.ts": [
          "File: src/execution/__tests__/nonnull-test.ts -> src/execution/__tests__/nonnull-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import { buildSchema } from '../../utilities/buildASTSchema.js';",
          "16: import { execute, executeSync } from '../execute.js';",
          "19: const syncError = new Error('sync');",
          "20: const syncNonNullError = new Error('syncNonNull');",
          "",
          "[Removed Lines]",
          "17: import type { ExecutionResult } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "17: import type { ExecutionResult } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/__tests__/oneof-test.ts||src/execution/__tests__/oneof-test.ts": [
          "File: src/execution/__tests__/oneof-test.ts -> src/execution/__tests__/oneof-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { buildSchema } from '../../utilities/buildASTSchema.js';",
          "9: import { execute } from '../execute.js';",
          "12: const schema = buildSchema(`",
          "13:   type Query {",
          "",
          "[Removed Lines]",
          "10: import type { ExecutionResult } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "10: import type { ExecutionResult } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/__tests__/stream-test.ts||src/execution/__tests__/stream-test.ts": [
          "File: src/execution/__tests__/stream-test.ts -> src/execution/__tests__/stream-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import type {",
          "23:   InitialIncrementalExecutionResult,",
          "24:   SubsequentIncrementalExecutionResult,",
          "27: const friendType = new GraphQLObjectType({",
          "28:   fields: {",
          "",
          "[Removed Lines]",
          "25: } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "25: } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/__tests__/subscribe-test.ts||src/execution/__tests__/subscribe-test.ts": [
          "File: src/execution/__tests__/subscribe-test.ts -> src/execution/__tests__/subscribe-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import type { ExecutionArgs } from '../execute.js';",
          "24: import { createSourceEventStream, subscribe } from '../execute.js';",
          "27: import { SimplePubSub } from './simplePubSub.js';",
          "",
          "[Removed Lines]",
          "25: import type { ExecutionResult } from '../IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "25: import type { ExecutionResult } from '../types.js';",
          "",
          "---------------"
        ],
        "src/execution/execute.ts||src/execution/execute.ts": [
          "File: src/execution/execute.ts -> src/execution/execute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   collectFields,",
          "59:   collectSubfields as _collectSubfields,",
          "60: } from './collectFields.js';",
          "61: import type {",
          "62:   CancellableStreamRecord,",
          "63:   DeferredGroupedFieldSetRecord,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import { buildIncrementalResponse } from './IncrementalPublisher.js';",
          "62: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   StreamItemsRecord,",
          "69:   StreamItemsResult,",
          "70:   SubsequentResultRecord,",
          "72: import {",
          "74:   DeferredFragmentRecord,",
          "75:   isReconcilableStreamItemsResult,",
          "78: import {",
          "79:   getArgumentValues,",
          "80:   getDirectiveValues,",
          "",
          "[Removed Lines]",
          "71: } from './IncrementalPublisher.js';",
          "73:   buildIncrementalResponse,",
          "76: } from './IncrementalPublisher.js';",
          "77: import { mapAsyncIterable } from './mapAsyncIterable.js';",
          "",
          "[Added Lines]",
          "73: } from './types.js';",
          "77: } from './types.js';",
          "",
          "---------------"
        ],
        "src/execution/index.ts||src/execution/index.ts": [
          "File: src/execution/index.ts -> src/execution/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   FormattedIncrementalDeferResult,",
          "27:   FormattedIncrementalStreamResult,",
          "28:   FormattedIncrementalResult,",
          "31: export {",
          "32:   getArgumentValues,",
          "",
          "[Removed Lines]",
          "29: } from './IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "29: } from './types.js';",
          "",
          "---------------"
        ],
        "src/execution/types.ts||src/execution/types.ts": [
          "File: src/execution/types.ts -> src/execution/types.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import type { ObjMap } from '../jsutils/ObjMap.js';",
          "2: import type { Path } from '../jsutils/Path.js';",
          "3: import type { PromiseOrValue } from '../jsutils/PromiseOrValue.js';",
          "5: import type {",
          "6:   GraphQLError,",
          "7:   GraphQLFormattedError,",
          "8: } from '../error/GraphQLError.js';",
          "19: export interface ExecutionResult<",
          "20:   TData = ObjMap<unknown>,",
          "21:   TExtensions = ObjMap<unknown>,",
          "22: > {",
          "23:   errors?: ReadonlyArray<GraphQLError>;",
          "24:   data?: TData | null;",
          "25:   extensions?: TExtensions;",
          "26: }",
          "28: export interface FormattedExecutionResult<",
          "29:   TData = ObjMap<unknown>,",
          "30:   TExtensions = ObjMap<unknown>,",
          "31: > {",
          "32:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "33:   data?: TData | null;",
          "34:   extensions?: TExtensions;",
          "35: }",
          "37: export interface ExperimentalIncrementalExecutionResults<",
          "38:   TData = unknown,",
          "39:   TExtensions = ObjMap<unknown>,",
          "40: > {",
          "41:   initialResult: InitialIncrementalExecutionResult<TData, TExtensions>;",
          "42:   subsequentResults: AsyncGenerator<",
          "43:     SubsequentIncrementalExecutionResult<TData, TExtensions>,",
          "44:     void,",
          "45:     void",
          "46:   >;",
          "47: }",
          "49: export interface InitialIncrementalExecutionResult<",
          "50:   TData = ObjMap<unknown>,",
          "51:   TExtensions = ObjMap<unknown>,",
          "52: > extends ExecutionResult<TData, TExtensions> {",
          "53:   data: TData;",
          "54:   pending: ReadonlyArray<PendingResult>;",
          "55:   hasNext: true;",
          "56:   extensions?: TExtensions;",
          "57: }",
          "59: export interface FormattedInitialIncrementalExecutionResult<",
          "60:   TData = ObjMap<unknown>,",
          "61:   TExtensions = ObjMap<unknown>,",
          "62: > extends FormattedExecutionResult<TData, TExtensions> {",
          "63:   data: TData;",
          "64:   pending: ReadonlyArray<PendingResult>;",
          "65:   hasNext: boolean;",
          "66:   extensions?: TExtensions;",
          "67: }",
          "69: export interface SubsequentIncrementalExecutionResult<",
          "70:   TData = unknown,",
          "71:   TExtensions = ObjMap<unknown>,",
          "72: > {",
          "73:   pending?: ReadonlyArray<PendingResult>;",
          "74:   incremental?: ReadonlyArray<IncrementalResult<TData, TExtensions>>;",
          "75:   completed?: ReadonlyArray<CompletedResult>;",
          "76:   hasNext: boolean;",
          "77:   extensions?: TExtensions;",
          "78: }",
          "80: export interface FormattedSubsequentIncrementalExecutionResult<",
          "81:   TData = unknown,",
          "82:   TExtensions = ObjMap<unknown>,",
          "83: > {",
          "84:   hasNext: boolean;",
          "85:   pending?: ReadonlyArray<PendingResult>;",
          "86:   incremental?: ReadonlyArray<FormattedIncrementalResult<TData, TExtensions>>;",
          "87:   completed?: ReadonlyArray<FormattedCompletedResult>;",
          "88:   extensions?: TExtensions;",
          "89: }",
          "91: interface BareDeferredGroupedFieldSetResult<TData = ObjMap<unknown>> {",
          "92:   errors?: ReadonlyArray<GraphQLError>;",
          "93:   data: TData;",
          "94: }",
          "96: export interface IncrementalDeferResult<",
          "97:   TData = ObjMap<unknown>,",
          "98:   TExtensions = ObjMap<unknown>,",
          "99: > extends BareDeferredGroupedFieldSetResult<TData> {",
          "100:   id: string;",
          "101:   subPath?: ReadonlyArray<string | number>;",
          "102:   extensions?: TExtensions;",
          "103: }",
          "105: export interface FormattedIncrementalDeferResult<",
          "106:   TData = ObjMap<unknown>,",
          "107:   TExtensions = ObjMap<unknown>,",
          "108: > {",
          "109:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "110:   data: TData;",
          "111:   id: string;",
          "112:   subPath?: ReadonlyArray<string | number>;",
          "113:   extensions?: TExtensions;",
          "114: }",
          "116: interface BareStreamItemsResult<TData = ReadonlyArray<unknown>> {",
          "117:   errors?: ReadonlyArray<GraphQLError>;",
          "118:   items: TData;",
          "119: }",
          "121: export interface IncrementalStreamResult<",
          "122:   TData = ReadonlyArray<unknown>,",
          "123:   TExtensions = ObjMap<unknown>,",
          "124: > extends BareStreamItemsResult<TData> {",
          "125:   id: string;",
          "126:   subPath?: ReadonlyArray<string | number>;",
          "127:   extensions?: TExtensions;",
          "128: }",
          "130: export interface FormattedIncrementalStreamResult<",
          "131:   TData = Array<unknown>,",
          "132:   TExtensions = ObjMap<unknown>,",
          "133: > {",
          "134:   errors?: ReadonlyArray<GraphQLFormattedError>;",
          "135:   items: TData;",
          "136:   id: string;",
          "137:   subPath?: ReadonlyArray<string | number>;",
          "138:   extensions?: TExtensions;",
          "139: }",
          "141: export type IncrementalResult<TData = unknown, TExtensions = ObjMap<unknown>> =",
          "142:   | IncrementalDeferResult<TData, TExtensions>",
          "143:   | IncrementalStreamResult<TData, TExtensions>;",
          "145: export type FormattedIncrementalResult<",
          "146:   TData = unknown,",
          "147:   TExtensions = ObjMap<unknown>,",
          "148: > =",
          "149:   | FormattedIncrementalDeferResult<TData, TExtensions>",
          "150:   | FormattedIncrementalStreamResult<TData, TExtensions>;",
          "152: export interface PendingResult {",
          "153:   id: string;",
          "154:   path: ReadonlyArray<string | number>;",
          "155:   label?: string;",
          "156: }",
          "158: export interface CompletedResult {",
          "159:   id: string;",
          "160:   errors?: ReadonlyArray<GraphQLError>;",
          "161: }",
          "163: export interface FormattedCompletedResult {",
          "164:   path: ReadonlyArray<string | number>;",
          "165:   label?: string;",
          "166:   errors?: ReadonlyArray<GraphQLError>;",
          "167: }",
          "169: export function isDeferredFragmentRecord(",
          "170:   subsequentResultRecord: SubsequentResultRecord,",
          "171: ): subsequentResultRecord is DeferredFragmentRecord {",
          "172:   return 'parent' in subsequentResultRecord;",
          "173: }",
          "175: export function isDeferredGroupedFieldSetRecord(",
          "176:   incrementalDataRecord: IncrementalDataRecord,",
          "177: ): incrementalDataRecord is DeferredGroupedFieldSetRecord {",
          "178:   return 'deferredFragmentRecords' in incrementalDataRecord;",
          "179: }",
          "181: export type DeferredGroupedFieldSetResult =",
          "182:   | ReconcilableDeferredGroupedFieldSetResult",
          "183:   | NonReconcilableDeferredGroupedFieldSetResult;",
          "185: export function isDeferredGroupedFieldSetResult(",
          "186:   subsequentResult: DeferredGroupedFieldSetResult | StreamItemsResult,",
          "187: ): subsequentResult is DeferredGroupedFieldSetResult {",
          "188:   return 'deferredFragmentRecords' in subsequentResult;",
          "189: }",
          "191: interface ReconcilableDeferredGroupedFieldSetResult {",
          "192:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "193:   path: Array<string | number>;",
          "194:   result: BareDeferredGroupedFieldSetResult;",
          "195:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "196:   sent?: true | undefined;",
          "197:   errors?: never;",
          "198: }",
          "200: interface NonReconcilableDeferredGroupedFieldSetResult {",
          "201:   errors: ReadonlyArray<GraphQLError>;",
          "202:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "203:   path: Array<string | number>;",
          "204:   result?: never;",
          "205: }",
          "207: export function isNonReconcilableDeferredGroupedFieldSetResult(",
          "208:   deferredGroupedFieldSetResult: DeferredGroupedFieldSetResult,",
          "209: ): deferredGroupedFieldSetResult is NonReconcilableDeferredGroupedFieldSetResult {",
          "210:   return deferredGroupedFieldSetResult.errors !== undefined;",
          "211: }",
          "213: export interface DeferredGroupedFieldSetRecord {",
          "214:   deferredFragmentRecords: ReadonlyArray<DeferredFragmentRecord>;",
          "215:   result: PromiseOrValue<DeferredGroupedFieldSetResult>;",
          "216: }",
          "218: export interface SubsequentResultRecord {",
          "219:   path: Path | undefined;",
          "220:   label: string | undefined;",
          "221:   id?: string | undefined;",
          "222: }",
          "225: export class DeferredFragmentRecord implements SubsequentResultRecord {",
          "226:   path: Path | undefined;",
          "227:   label: string | undefined;",
          "228:   id?: string | undefined;",
          "229:   parent: DeferredFragmentRecord | undefined;",
          "230:   expectedReconcilableResults: number;",
          "231:   results: Array<DeferredGroupedFieldSetResult>;",
          "232:   reconcilableResults: Array<ReconcilableDeferredGroupedFieldSetResult>;",
          "233:   children: Set<DeferredFragmentRecord>;",
          "235:   constructor(opts: {",
          "236:     path: Path | undefined;",
          "237:     label: string | undefined;",
          "238:     parent: DeferredFragmentRecord | undefined;",
          "239:   }) {",
          "240:     this.path = opts.path;",
          "241:     this.label = opts.label;",
          "242:     this.parent = opts.parent;",
          "243:     this.expectedReconcilableResults = 0;",
          "244:     this.results = [];",
          "245:     this.reconcilableResults = [];",
          "246:     this.children = new Set();",
          "247:   }",
          "248: }",
          "250: export interface CancellableStreamRecord extends SubsequentResultRecord {",
          "251:   earlyReturn: () => Promise<unknown>;",
          "252: }",
          "254: export function isCancellableStreamRecord(",
          "255:   subsequentResultRecord: SubsequentResultRecord,",
          "256: ): subsequentResultRecord is CancellableStreamRecord {",
          "257:   return 'earlyReturn' in subsequentResultRecord;",
          "258: }",
          "260: interface ReconcilableStreamItemsResult {",
          "261:   streamRecord: SubsequentResultRecord;",
          "262:   result: BareStreamItemsResult;",
          "263:   incrementalDataRecords: ReadonlyArray<IncrementalDataRecord> | undefined;",
          "264:   errors?: never;",
          "265: }",
          "267: export function isReconcilableStreamItemsResult(",
          "268:   streamItemsResult: StreamItemsResult,",
          "269: ): streamItemsResult is ReconcilableStreamItemsResult {",
          "270:   return streamItemsResult.result !== undefined;",
          "271: }",
          "273: interface TerminatingStreamItemsResult {",
          "274:   streamRecord: SubsequentResultRecord;",
          "275:   result?: never;",
          "276:   incrementalDataRecords?: never;",
          "277:   errors?: never;",
          "278: }",
          "280: interface NonReconcilableStreamItemsResult {",
          "281:   streamRecord: SubsequentResultRecord;",
          "282:   errors: ReadonlyArray<GraphQLError>;",
          "283:   result?: never;",
          "284: }",
          "286: export type StreamItemsResult =",
          "287:   | ReconcilableStreamItemsResult",
          "288:   | TerminatingStreamItemsResult",
          "289:   | NonReconcilableStreamItemsResult;",
          "291: export interface StreamItemsRecord {",
          "292:   streamRecord: SubsequentResultRecord;",
          "293:   result: PromiseOrValue<StreamItemsResult>;",
          "294: }",
          "296: export type IncrementalDataRecord =",
          "297:   | DeferredGroupedFieldSetRecord",
          "298:   | StreamItemsRecord;",
          "300: export type IncrementalDataRecordResult =",
          "301:   | DeferredGroupedFieldSetResult",
          "302:   | StreamItemsResult;",
          "",
          "---------------"
        ],
        "src/graphql.ts||src/graphql.ts": [
          "File: src/graphql.ts -> src/graphql.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import { validate } from './validation/validate.js';",
          "17: import { execute } from './execution/execute.js';",
          "",
          "[Removed Lines]",
          "18: import type { ExecutionResult } from './execution/IncrementalPublisher.js';",
          "",
          "[Added Lines]",
          "18: import type { ExecutionResult } from './execution/types.js';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e9813f8c283d94da66fad6fd9562432846c17d4",
      "candidate_info": {
        "commit_hash": "8e9813f8c283d94da66fad6fd9562432846c17d4",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/8e9813f8c283d94da66fad6fd9562432846c17d4",
        "files": [
          "src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts",
          "src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts"
        ],
        "message": "Fix stream directive validation error message (#4044)\n\nFixes the error message created by the\nDeferStreamDirectiveOnValidOperationsRule for the stream directive.",
        "before_after_code_files": [
          "src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts||src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts",
          "src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts||src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql/graphql-js/pull/4388",
          "https://github.com/graphql/graphql-js/pull/4385",
          "https://github.com/graphql/graphql-js/pull/4386"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts||src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts": [
          "File: src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts -> src/validation/__tests__/DeferStreamDirectiveOnValidOperationsRule-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     `).toDeepEqual([",
          "242:       {",
          "243:         message:",
          "245:         locations: [{ line: 4, column: 20 }],",
          "246:       },",
          "247:     ]);",
          "",
          "[Removed Lines]",
          "244:           'Stream directive not supported on subscription operations. Disable `@defer` by setting the `if` argument to `false`.',",
          "",
          "[Added Lines]",
          "244:           'Stream directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:     `).toDeepEqual([",
          "260:       {",
          "261:         message:",
          "263:         locations: [{ line: 8, column: 18 }],",
          "264:       },",
          "265:     ]);",
          "",
          "[Removed Lines]",
          "262:           'Stream directive not supported on subscription operations. Disable `@defer` by setting the `if` argument to `false`.',",
          "",
          "[Added Lines]",
          "262:           'Stream directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     `).toDeepEqual([",
          "302:       {",
          "303:         message:",
          "305:         locations: [{ line: 15, column: 18 }],",
          "306:       },",
          "307:     ]);",
          "",
          "[Removed Lines]",
          "304:           'Stream directive not supported on subscription operations. Disable `@defer` by setting the `if` argument to `false`.',",
          "",
          "[Added Lines]",
          "304:           'Stream directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',",
          "",
          "---------------"
        ],
        "src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts||src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts": [
          "File: src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts -> src/validation/rules/DeferStreamDirectiveOnValidOperationsRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:           if (!ifArgumentCanBeFalse(node)) {",
          "71:             context.reportError(",
          "72:               new GraphQLError(",
          "74:                 { nodes: node },",
          "75:               ),",
          "76:             );",
          "",
          "[Removed Lines]",
          "73:                 'Stream directive not supported on subscription operations. Disable `@defer` by setting the `if` argument to `false`.',",
          "",
          "[Added Lines]",
          "73:                 'Stream directive not supported on subscription operations. Disable `@stream` by setting the `if` argument to `false`.',",
          "",
          "---------------"
        ]
      }
    }
  ]
}