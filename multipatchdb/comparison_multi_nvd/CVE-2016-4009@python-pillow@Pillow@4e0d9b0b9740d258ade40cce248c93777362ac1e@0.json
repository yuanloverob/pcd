{
  "cve_id": "CVE-2016-4009",
  "cve_desc": "Integer overflow in the ImagingResampleHorizontal function in libImaging/Resample.c in Pillow before 3.1.1 allows remote attackers to have unspecified impact via negative values of the new size, which triggers a heap-based buffer overflow.",
  "repo": "python-pillow/Pillow",
  "patch_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
  "patch_info": {
    "commit_hash": "4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "repo": "python-pillow/Pillow",
    "commit_url": "https://github.com/python-pillow/Pillow/commit/4e0d9b0b9740d258ade40cce248c93777362ac1e",
    "files": [
      "libImaging/Resample.c"
    ],
    "message": "fix integer overflow in Resample.c",
    "before_after_code_files": [
      "libImaging/Resample.c||libImaging/Resample.c"
    ]
  },
  "patch_diff": {
    "libImaging/Resample.c||libImaging/Resample.c": [
      "File: libImaging/Resample.c -> libImaging/Resample.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:     kmax = (int) ceil(support) * 2 + 1;",
      "142:     kk = malloc(xsize * kmax * sizeof(float));",
      "143:     if ( ! kk)",
      "144:         return (Imaging) ImagingError_MemoryError();",
      "146:     xbounds = malloc(xsize * 2 * sizeof(int));",
      "147:     if ( ! xbounds) {",
      "148:         free(kk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     if (kmax > 0 && xsize > SIZE_MAX / kmax)",
      "143:         return (Imaging) ImagingError_MemoryError();",
      "146:     if (xsize * kmax > SIZE_MAX / sizeof(float))",
      "147:         return (Imaging) ImagingError_MemoryError();",
      "155:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
      "156:         return (Imaging) ImagingError_MemoryError();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95a25a0d82f414a52e174eb5389d485d4b3ddf34",
      "candidate_info": {
        "commit_hash": "95a25a0d82f414a52e174eb5389d485d4b3ddf34",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/95a25a0d82f414a52e174eb5389d485d4b3ddf34",
        "files": [
          "Tests/test_image_resample.py",
          "_imaging.c"
        ],
        "message": "input parameter filtering",
        "before_after_code_files": [
          "Tests/test_image_resample.py||Tests/test_image_resample.py",
          "_imaging.c||_imaging.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/python-pillow/Pillow/pull/1714"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tests/test_image_resample.py||Tests/test_image_resample.py": [
          "File: Tests/test_image_resample.py -> Tests/test_image_resample.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:         xsize = 0x100000008 // 4",
          "9:         ysize = 1000 # unimportant",
          "10:         try:",
          "12:             self.fail(\"Resize should raise MemoryError on invalid xsize\")",
          "13:         except MemoryError:",
          "14:             self.assertTrue(True, \"Should raise MemoryError\")",
          "17: if __name__ == '__main__':",
          "18:     unittest.main()",
          "",
          "[Removed Lines]",
          "11:             im.im.resize((xsize, ysize), Image.LINEAR) # any resampling filter will do here",
          "",
          "[Added Lines]",
          "11:             # any resampling filter will do here",
          "12:             im.im.resize((xsize, ysize), Image.LINEAR)",
          "17:     def test_invalid_size(self):",
          "18:         im = hopper()",
          "20:         im.resize((100,100))",
          "21:         self.assertTrue(True, \"Should not Crash\")",
          "23:         try:",
          "24:             im.resize((-100,100))",
          "25:             self.fail(\"Resize should raise a value error on x negative size\")",
          "26:         except ValueError:",
          "27:             self.assertTrue(True, \"Should raise ValueError\")",
          "29:         try:",
          "30:             im.resize((100,-100))",
          "31:             self.fail(\"Resize should raise a value error on y negative size\")",
          "32:         except ValueError:",
          "33:             self.assertTrue(True, \"Should raise ValueError\")",
          "",
          "---------------"
        ],
        "_imaging.c||_imaging.c": [
          "File: _imaging.c -> _imaging.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1533:     imIn = self->image;",
          "1535:     if (imIn->xsize == xsize && imIn->ysize == ysize) {",
          "1536:         imOut = ImagingCopy(imIn);",
          "1537:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1535:     if (xsize < 1 || ysize < 1) {",
          "1536:         return ImagingError_ValueError(\"height and width must be > 0\");",
          "1537:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff7962c3be5eac5103978fde8f8e14dc6542b8dc",
      "candidate_info": {
        "commit_hash": "ff7962c3be5eac5103978fde8f8e14dc6542b8dc",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/ff7962c3be5eac5103978fde8f8e14dc6542b8dc",
        "files": [
          "Tests/test_image_resample.py"
        ],
        "message": "test for #1711",
        "before_after_code_files": [
          "Tests/test_image_resample.py||Tests/test_image_resample.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/python-pillow/Pillow/pull/1714"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Tests/test_image_resample.py||Tests/test_image_resample.py": [
          "File: Tests/test_image_resample.py -> Tests/test_image_resample.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from helper import unittest, PillowTestCase, hopper",
          "2: from PIL import Image",
          "4: class TestImagingCoreResize(PillowTestCase):",
          "5:     #see https://github.com/python-pillow/Pillow/issues/1710",
          "6:     def test_overflow(self):",
          "7:         im = hopper('L')",
          "8:         xsize = 0x100000008 // 4",
          "9:         ysize = 1000 # unimportant",
          "10:         try:",
          "11:             im.im.resize((xsize, ysize), Image.LINEAR) # any resampling filter will do here",
          "12:             self.fail(\"Resize should raise MemoryError on invalid xsize\")",
          "13:         except MemoryError:",
          "14:             self.assertTrue(True, \"Should raise MemoryError\")",
          "17: if __name__ == '__main__':",
          "18:     unittest.main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e13297b396adc24a383862bef14e6fe0023251d8",
      "candidate_info": {
        "commit_hash": "e13297b396adc24a383862bef14e6fe0023251d8",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/e13297b396adc24a383862bef14e6fe0023251d8",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "make coefficients ints",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     return 0.0;",
          "39: }",
          "43: static inline float bilinear_filter(float x)",
          "44: {",
          "45:     if (x < 0.0)",
          "",
          "[Removed Lines]",
          "41: static struct filter LANCZOS = { lanczos_filter, 3.0 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     return 0.0;",
          "50: }",
          "54: static inline float bicubic_filter(float x)",
          "55: {",
          "",
          "[Removed Lines]",
          "52: static struct filter BILINEAR = { bilinear_filter, 1.0 };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65: #undef a",
          "66: }",
          "68: static struct filter BICUBIC = { bicubic_filter, 2.0 };",
          "72: {",
          "75:        return 255;",
          "77:         return 0;",
          "91: }",
          "97: Imaging",
          "",
          "[Removed Lines]",
          "71: static inline UINT8 clip8(float in)",
          "73:     int out = (int) in;",
          "74:     if (out >= 255)",
          "76:     if (out <= 0)",
          "78:     return (UINT8) out;",
          "79: }",
          "83:    GCC generates code with partial dependency which 3 times slower.",
          "85: #if defined(__x86_64__) && defined(__SSE__) &&  ! defined(__NO_INLINE__) && \\",
          "86:     ! defined(__clang__) && defined(GCC_VERSION) && (GCC_VERSION < 40900)",
          "87: static float __attribute__((always_inline)) i2f(int v) {",
          "88:     float x;",
          "89:     __asm__(\"xorps %0, %0; cvtsi2ss %1, %0\" : \"=X\"(x) : \"r\"(v) );",
          "90:     return x;",
          "92: #else",
          "93: static float inline i2f(int v) { return (float) v; }",
          "94: #endif",
          "",
          "[Added Lines]",
          "64: static struct filter LANCZOS = { lanczos_filter, 3.0 };",
          "65: static struct filter BILINEAR = { bilinear_filter, 1.0 };",
          "71:    In one cases the sum of the coefficients will be negative,",
          "72:    in the other it will be more than 1.0. That is why we need",
          "74: #define PRECISION_BITS (32 - 8 - 2)",
          "77: static inline UINT8 clip8(int in)",
          "79:     if (in >= (1 << PRECISION_BITS << 8))",
          "81:     if (in <= 0)",
          "83:     return (UINT8) (in >> PRECISION_BITS);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     ImagingSectionCookie cookie;",
          "101:     Imaging imOut;",
          "102:     float support, scale, filterscale;",
          "104:     int xx, yy, x, kmax, xmin, xmax;",
          "105:     int *xbounds;",
          "109:     filterscale = scale = (float) imIn->xsize / xsize;",
          "",
          "[Removed Lines]",
          "103:     float center, ww, ss, ss0, ss1, ss2, ss3;",
          "106:     float *k, *kk, *kw;",
          "",
          "[Added Lines]",
          "93:     float center, ww, ss;",
          "94:     int ss0, ss1, ss2, ss3;",
          "97:     int *k, *kk;",
          "98:     float *kw;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:     kmax = (int) ceil(support) * 2 + 1;",
          "122:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "121:     if (xsize > SIZE_MAX / (kmax * sizeof(float)))",
          "",
          "[Added Lines]",
          "113:     if (xsize > SIZE_MAX / (kmax * sizeof(int)))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:         return (Imaging) ImagingError_MemoryError();",
          "130:     if ( ! kk)",
          "131:         return (Imaging) ImagingError_MemoryError();",
          "",
          "[Removed Lines]",
          "129:     kk = malloc(xsize * kmax * sizeof(float));",
          "",
          "[Added Lines]",
          "121:     kk = malloc(xsize * kmax * sizeof(int));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:         k = &kk[xx * kmax];",
          "163:         for (x = 0; x < xmax - xmin; x++) {",
          "164:             if (ww != 0.0)",
          "166:         }",
          "167:         xbounds[xx * 2 + 0] = xmin;",
          "168:         xbounds[xx * 2 + 1] = xmax;",
          "",
          "[Removed Lines]",
          "165:                 k[x] = kw[x] / ww;",
          "",
          "[Added Lines]",
          "157:                 k[x] = (int) floor(0.5 + kw[x] / ww * (1 << PRECISION_BITS));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:                 xmin = xbounds[xx * 2 + 0];",
          "187:                 xmax = xbounds[xx * 2 + 1];",
          "188:                 k = &kk[xx * kmax];",
          "190:                 for (x = xmin; x < xmax; x++)",
          "193:             }",
          "194:         } else {",
          "195:             switch(imIn->type) {",
          "",
          "[Removed Lines]",
          "189:                 ss = 0.5;",
          "191:                     ss += i2f(imIn->image8[yy][x]) * k[x - xmin];",
          "192:                 imOut->image8[yy][xx] = clip8(ss);",
          "",
          "[Added Lines]",
          "181:                 ss0 = 0;",
          "183:                     ss0 += ((UINT8) imIn->image8[yy][x]) * k[x - xmin];",
          "184:                 imOut->image8[yy][xx] = clip8(ss0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200:                         xmin = xbounds[xx * 2 + 0];",
          "201:                         xmax = xbounds[xx * 2 + 1];",
          "202:                         k = &kk[xx * kmax];",
          "204:                         for (x = xmin; x < xmax; x++) {",
          "207:                         }",
          "208:                         imOut->image[yy][xx*4 + 0] = clip8(ss0);",
          "209:                         imOut->image[yy][xx*4 + 3] = clip8(ss1);",
          "",
          "[Removed Lines]",
          "203:                         ss0 = ss1 = 0.5;",
          "205:                             ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "206:                             ss1 += i2f((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];",
          "",
          "[Added Lines]",
          "195:                         ss0 = ss1 = 0;",
          "197:                             ss0 += ((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "198:                             ss1 += ((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "213:                         xmin = xbounds[xx * 2 + 0];",
          "214:                         xmax = xbounds[xx * 2 + 1];",
          "215:                         k = &kk[xx * kmax];",
          "217:                         for (x = xmin; x < xmax; x++) {",
          "221:                         }",
          "222:                         imOut->image[yy][xx*4 + 0] = clip8(ss0);",
          "223:                         imOut->image[yy][xx*4 + 1] = clip8(ss1);",
          "",
          "[Removed Lines]",
          "216:                         ss0 = ss1 = ss2 = 0.5;",
          "218:                             ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "219:                             ss1 += i2f((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];",
          "220:                             ss2 += i2f((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];",
          "",
          "[Added Lines]",
          "208:                         ss0 = ss1 = ss2 = 0;",
          "210:                             ss0 += ((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "211:                             ss1 += ((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];",
          "212:                             ss2 += ((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "228:                         xmin = xbounds[xx * 2 + 0];",
          "229:                         xmax = xbounds[xx * 2 + 1];",
          "230:                         k = &kk[xx * kmax];",
          "232:                         for (x = xmin; x < xmax; x++) {",
          "237:                         }",
          "238:                         imOut->image[yy][xx*4 + 0] = clip8(ss0);",
          "239:                         imOut->image[yy][xx*4 + 1] = clip8(ss1);",
          "",
          "[Removed Lines]",
          "231:                         ss0 = ss1 = ss2 = ss3 = 0.5;",
          "233:                             ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "234:                             ss1 += i2f((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];",
          "235:                             ss2 += i2f((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];",
          "236:                             ss3 += i2f((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];",
          "",
          "[Added Lines]",
          "223:                         ss0 = ss1 = ss2 = ss3 = 0;",
          "225:                             ss0 += ((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];",
          "226:                             ss1 += ((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];",
          "227:                             ss2 += ((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];",
          "228:                             ss3 += ((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "250:                     k = &kk[xx * kmax];",
          "251:                     ss = 0.0;",
          "252:                     for (x = xmin; x < xmax; x++)",
          "254:                     IMAGING_PIXEL_I(imOut, xx, yy) = (int) ss;",
          "255:                 }",
          "256:                 break;",
          "",
          "[Removed Lines]",
          "253:                         ss += i2f(IMAGING_PIXEL_I(imIn, x, yy)) * k[x - xmin];",
          "",
          "[Added Lines]",
          "245:                         ss += (IMAGING_PIXEL_I(imIn, x, yy)) * k[x - xmin];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "126c3151b5fb6534a04792762366d92b7a1efa29",
      "candidate_info": {
        "commit_hash": "126c3151b5fb6534a04792762366d92b7a1efa29",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/126c3151b5fb6534a04792762366d92b7a1efa29",
        "files": [
          "libImaging/Resample.c"
        ],
        "message": "use ImagingPrecompute in ImagingResampleHorizontal_8bpc",
        "before_after_code_files": [
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: {",
          "144:     ImagingSectionCookie cookie;",
          "145:     Imaging imOut;",
          "148:     int ss0, ss1, ss2, ss3;",
          "149:     int xx, yy, x, kmax, xmin, xmax;",
          "150:     int *xbounds;",
          "151:     int *k, *kk;",
          "183:         return (Imaging) ImagingError_MemoryError();",
          "184:     }",
          "190:         return (Imaging) ImagingError_MemoryError();",
          "191:     }",
          "193:     for (xx = 0; xx < xsize; xx++) {",
          "208:         k = &kk[xx * kmax];",
          "209:         for (x = 0; x < xmax - xmin; x++) {",
          "212:         }",
          "215:     }",
          "219:     imOut = ImagingNew(imIn->mode, xsize, imIn->ysize);",
          "220:     if ( ! imOut) {",
          "",
          "[Removed Lines]",
          "146:     float support, scale, filterscale;",
          "147:     float center, ww, ss;",
          "152:     float *kw;",
          "155:     filterscale = scale = (float) imIn->xsize / xsize;",
          "156:     if (filterscale < 1.0) {",
          "157:         filterscale = 1.0;",
          "158:     }",
          "161:     support = filterp->support * filterscale;",
          "164:     kmax = (int) ceil(support) * 2 + 1;",
          "167:     if (xsize > SIZE_MAX / (kmax * sizeof(int)))",
          "168:         return (Imaging) ImagingError_MemoryError();",
          "171:     if (xsize > SIZE_MAX / (2 * sizeof(int)))",
          "172:         return (Imaging) ImagingError_MemoryError();",
          "175:     kk = malloc(xsize * kmax * sizeof(int));",
          "176:     if ( ! kk)",
          "177:         return (Imaging) ImagingError_MemoryError();",
          "180:     kw = malloc(kmax * sizeof(float));",
          "181:     if ( ! kw) {",
          "182:         free(kk);",
          "186:     xbounds = malloc(xsize * 2 * sizeof(int));",
          "187:     if ( ! xbounds) {",
          "188:         free(kk);",
          "189:         free(kw);",
          "194:         center = (xx + 0.5) * scale;",
          "195:         ww = 0.0;",
          "196:         ss = 1.0 / filterscale;",
          "197:         xmin = (int) floor(center - support);",
          "198:         if (xmin < 0)",
          "199:             xmin = 0;",
          "200:         xmax = (int) ceil(center + support);",
          "201:         if (xmax > imIn->xsize)",
          "202:             xmax = imIn->xsize;",
          "203:         for (x = xmin; x < xmax; x++) {",
          "204:             float w = filterp->filter((x - center + 0.5) * ss);",
          "205:             kw[x - xmin] = w;",
          "206:             ww += w;",
          "207:         }",
          "210:             if (ww != 0.0)",
          "211:                 k[x] = (int) floor(0.5 + kw[x] / ww * (1 << PRECISION_BITS));",
          "213:         xbounds[xx * 2 + 0] = xmin;",
          "214:         xbounds[xx * 2 + 1] = xmax;",
          "217:     free(kw);",
          "",
          "[Added Lines]",
          "150:     double *prekk;",
          "153:     kmax = ImagingPrecompute(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "154:     if ( ! kmax) {",
          "158:     kk = malloc(xsize * kmax * sizeof(int));",
          "159:     if ( ! kk) {",
          "160:         free(xbounds);",
          "161:         free(prekk);",
          "166:         xmin = xbounds[xx * 2 + 0];",
          "167:         xmax = xbounds[xx * 2 + 1];",
          "170:             k[x] = (int) floor(0.5 + prekk[xx * kmax + x] * (1 << PRECISION_BITS));",
          "174:     free(prekk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         return NULL;",
          "317:     }",
          "322:     switch(imIn->type) {",
          "323:         case IMAGING_TYPE_INT32:",
          "324:             for (yy = 0; yy < imOut->ysize; yy++) {",
          "",
          "[Removed Lines]",
          "319:     ImagingSectionEnter(&cookie);",
          "",
          "[Added Lines]",
          "274:     ImagingSectionEnter(&cookie);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
      "candidate_info": {
        "commit_hash": "a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
        "repo": "python-pillow/Pillow",
        "commit_url": "https://github.com/python-pillow/Pillow/commit/a1fedc0f8ac13e23f4b1f35cd917556b1747c33e",
        "files": [
          "Tests/test_image_resample.py",
          "_imaging.c",
          "libImaging/Imaging.h",
          "libImaging/Resample.c"
        ],
        "message": "expose roi to precompute_coeffs (still noop)",
        "before_after_code_files": [
          "Tests/test_image_resample.py||Tests/test_image_resample.py",
          "_imaging.c||_imaging.c",
          "libImaging/Imaging.h||libImaging/Imaging.h",
          "libImaging/Resample.c||libImaging/Resample.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ],
          "candidate": [
            "libImaging/Resample.c||libImaging/Resample.c"
          ]
        }
      },
      "candidate_diff": {
        "Tests/test_image_resample.py||Tests/test_image_resample.py": [
          "File: Tests/test_image_resample.py -> Tests/test_image_resample.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: class CoreResampleRoiTest(PillowTestCase):",
          "352:     def test_wrong_arguments(self):",
          "353:         im = hopper()",
          "355:                 Image.BICUBIC, Image.LANCZOS):",
          "356:             im.resize((32, 32), resample, (0, 0, im.width, im.height))",
          "357:             im.resize((32, 32), resample, (20, 20, im.width, im.height))",
          "",
          "[Removed Lines]",
          "354:         for resample in (Image.LINEAR, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "[Added Lines]",
          "354:         for resample in (Image.NEAREST, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:         im = im.resize((im.width // sc[0] * sc[0],",
          "389:                         im.height // sc[1] * sc[1]))",
          "392:                 Image.BICUBIC, Image.LANCZOS):",
          "393:             roi = (o[0] * sc[0], o[1] * sc[1],",
          "394:                    (o[0] + size[0]) * sc[0], (o[1] + size[1]) * sc[1])",
          "",
          "[Removed Lines]",
          "391:         for resample in (Image.LINEAR, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "[Added Lines]",
          "391:         for resample in (Image.NEAREST, Image.BOX, Image.BILINEAR, Image.HAMMING,",
          "",
          "---------------"
        ],
        "_imaging.c||_imaging.c": [
          "File: _imaging.c -> _imaging.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:             a, filter, 1);",
          "1581:     }",
          "1582:     else {",
          "1584:     }",
          "1586:     return PyImagingNew(imOut);",
          "",
          "[Removed Lines]",
          "1583:         imOut = ImagingResample(imIn, xsize, ysize, filter);",
          "",
          "[Added Lines]",
          "1583:         imOut = ImagingResample(imIn, xsize, ysize, filter, roi);",
          "",
          "---------------"
        ],
        "libImaging/Imaging.h||libImaging/Imaging.h": [
          "File: libImaging/Imaging.h -> libImaging/Imaging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: extern Imaging ImagingRotate90(Imaging imOut, Imaging imIn);",
          "291: extern Imaging ImagingRotate180(Imaging imOut, Imaging imIn);",
          "292: extern Imaging ImagingRotate270(Imaging imOut, Imaging imIn);",
          "294: extern Imaging ImagingTranspose(Imaging imOut, Imaging imIn);",
          "295: extern Imaging ImagingTransform(",
          "296:     Imaging imOut, Imaging imIn, int method, int x0, int y0, int x1, int y1,",
          "",
          "[Removed Lines]",
          "293: extern Imaging ImagingResample(Imaging imIn, int xsize, int ysize, int filter);",
          "",
          "[Added Lines]",
          "293: extern Imaging ImagingResample(Imaging imIn, int xsize, int ysize, int filter, float roi[4]);",
          "",
          "---------------"
        ],
        "libImaging/Resample.c||libImaging/Resample.c": [
          "File: libImaging/Resample.c -> libImaging/Resample.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: int",
          "130:     double support, scale, filterscale;",
          "131:     double center, ww, ss;",
          "132:     int xx, x, kmax, xmin, xmax;",
          "",
          "[Removed Lines]",
          "128: precompute_coeffs(int inSize, int outSize, struct filter *filterp,",
          "129:                   int **xboundsp, double **kkp) {",
          "",
          "[Added Lines]",
          "128: precompute_coeffs(int inSize, int in0, int in1, int outSize,",
          "129:                   struct filter *filterp, int **xboundsp, double **kkp) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240: Imaging",
          "242: {",
          "243:     ImagingSectionCookie cookie;",
          "244:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "241: ImagingResampleHorizontal_8bpc(Imaging imIn, int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "241: ImagingResampleHorizontal_8bpc(Imaging imIn, int x0, int x1, int xsize,",
          "242:                                struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "248:     INT32 *k, *kk;",
          "249:     double *prekk;",
          "252:     if ( ! kmax) {",
          "253:         return (Imaging) ImagingError_MemoryError();",
          "254:     }",
          "",
          "[Removed Lines]",
          "251:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "252:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "253:                              &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "345: Imaging",
          "347: {",
          "348:     ImagingSectionCookie cookie;",
          "349:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "346: ImagingResampleVertical_8bpc(Imaging imIn, int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "348: ImagingResampleVertical_8bpc(Imaging imIn, int y0, int y1, int ysize,",
          "349:                              struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:     INT32 *k, *kk;",
          "354:     double *prekk;",
          "357:     if ( ! kmax) {",
          "358:         return (Imaging) ImagingError_MemoryError();",
          "359:     }",
          "",
          "[Removed Lines]",
          "356:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &prekk);",
          "",
          "[Added Lines]",
          "359:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "360:                              &xbounds, &prekk);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "450: Imaging",
          "452: {",
          "453:     ImagingSectionCookie cookie;",
          "454:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "451: ImagingResampleHorizontal_32bpc(Imaging imIn, int xsize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "455: ImagingResampleHorizontal_32bpc(Imaging imIn, int x0, int x1, int xsize,",
          "456:                                 struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "457:     int *xbounds;",
          "458:     double *k, *kk;",
          "461:     if ( ! kmax) {",
          "462:         return (Imaging) ImagingError_MemoryError();",
          "463:     }",
          "",
          "[Removed Lines]",
          "460:     kmax = precompute_coeffs(imIn->xsize, xsize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "465:     kmax = precompute_coeffs(imIn->xsize, x0, x1, xsize, filterp,",
          "466:                              &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "510: Imaging",
          "512: {",
          "513:     ImagingSectionCookie cookie;",
          "514:     Imaging imOut;",
          "",
          "[Removed Lines]",
          "511: ImagingResampleVertical_32bpc(Imaging imIn, int ysize, struct filter *filterp)",
          "",
          "[Added Lines]",
          "517: ImagingResampleVertical_32bpc(Imaging imIn, int y0, int y1, int ysize,",
          "518:                               struct filter *filterp)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "517:     int *xbounds;",
          "518:     double *k, *kk;",
          "521:     if ( ! kmax) {",
          "522:         return (Imaging) ImagingError_MemoryError();",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:     kmax = precompute_coeffs(imIn->ysize, ysize, filterp, &xbounds, &kk);",
          "",
          "[Added Lines]",
          "527:     kmax = precompute_coeffs(imIn->ysize, y0, y1, ysize, filterp,",
          "528:                              &xbounds, &kk);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "567: }",
          "570: Imaging",
          "572: {",
          "573:     Imaging imTemp = NULL;",
          "574:     Imaging imOut = NULL;",
          "575:     struct filter *filterp;",
          "579:     if (strcmp(imIn->mode, \"P\") == 0 || strcmp(imIn->mode, \"1\") == 0)",
          "580:         return (Imaging) ImagingError_ModeError();",
          "",
          "[Removed Lines]",
          "571: ImagingResample(Imaging imIn, int xsize, int ysize, int filter)",
          "576:     Imaging (*ResampleHorizontal)(Imaging imIn, int xsize, struct filter *filterp);",
          "577:     Imaging (*ResampleVertical)(Imaging imIn, int xsize, struct filter *filterp);",
          "",
          "[Added Lines]",
          "578: typedef Imaging (*ResampleFunction)(Imaging imIn, int x0, int x1, int xsize,",
          "579:                                     struct filter *filterp);",
          "583: ImagingResample(Imaging imIn, int xsize, int ysize, int filter, float roi[4])",
          "588:     ResampleFunction ResampleHorizontal;",
          "589:     ResampleFunction ResampleVertical;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "624:     }",
          "629:         if ( ! imTemp)",
          "630:             return NULL;",
          "631:         imOut = imIn = imTemp;",
          "632:     }",
          "640:         ImagingDelete(imTemp);",
          "",
          "[Removed Lines]",
          "627:     if (imIn->xsize != xsize) {",
          "628:         imTemp = ResampleHorizontal(imIn, xsize, filterp);",
          "635:     if (imIn->ysize != ysize) {",
          "637:         imOut = ResampleVertical(imIn, ysize, filterp);",
          "",
          "[Added Lines]",
          "639:     if (roi[0] || roi[2] != xsize) {",
          "640:         imTemp = ResampleHorizontal(imIn, roi[0], roi[2], xsize, filterp);",
          "647:     if (roi[1] || roi[3] != ysize) {",
          "649:         imOut = ResampleVertical(imIn, roi[1], roi[3], ysize, filterp);",
          "",
          "---------------"
        ]
      }
    }
  ]
}