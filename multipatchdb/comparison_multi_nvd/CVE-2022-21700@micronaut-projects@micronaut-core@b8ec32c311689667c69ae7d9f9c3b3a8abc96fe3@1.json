{
  "cve_id": "CVE-2022-21700",
  "cve_desc": "Micronaut is a JVM-based, full stack Java framework designed for building JVM web applications with support for Java, Kotlin and the Groovy language. In affected versions sending an invalid Content Type header leads to memory leak in DefaultArgumentConversionContext as this type is erroneously used in static state. ### Impact Sending an invalid Content Type header leads to memory leak in `DefaultArgumentConversionContext` as this type is erroneously used in static state. ### Patches The problem is patched in Micronaut 3.2.7 and above. ### Workarounds The default content type binder can be replaced in an existing Micronaut application to mitigate the issue: ```java package example; import java.util.List; import io.micronaut.context.annotation.Replaces; import io.micronaut.core.convert.ConversionService; import io.micronaut.http.MediaType; import io.micronaut.http.bind.DefaultRequestBinderRegistry; import io.micronaut.http.bind.binders.RequestArgumentBinder; import jakarta.inject.Singleton; @Singleton @Replaces(DefaultRequestBinderRegistry.class) class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry { public FixedRequestBinderRegistry(ConversionService conversionService, List<RequestArgumentBinder> binders) { super(conversionService, binders); } @Override protected void registerDefaultConverters(ConversionService<?> conversionService) { super.registerDefaultConverters(conversionService); conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -> { try { return MediaType.of(charSequence); } catch (IllegalArgumentException e) { return null; } }); } } ``` ### References Commit that introduced the vulnerability https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3 ### For more information If you have any questions or comments about this advisory: * Open an issue in [Micronaut Core](https://github.com/micronaut-projects/micronaut-core/issues) * Email us at [info@micronaut.io](mailto:info@micronaut.io)",
  "repo": "micronaut-projects/micronaut-core",
  "patch_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "patch_info": {
    "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "repo": "micronaut-projects/micronaut-core",
    "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ],
    "message": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\n-------\n * Added ArgumentConversionContext constants in ConversionContext\n * Replaced Argument.of and use of argument classes with\nConversionContext constants where possible\n * Added getFirst method in ConvertibleMultiValues that accepts\nArgumentConversionContent parameter\n\nPartially addresses issue #2355",
    "before_after_code_files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java -> core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     ConversionContext DEFAULT = new ConversionContext() {",
      "42:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     ArgumentConversionContext<Boolean> BOOLEAN = ConversionContext.of(Argument.BOOLEAN);",
      "52:     ArgumentConversionContext<Integer> INT = ConversionContext.of(Argument.INT);",
      "57:     ArgumentConversionContext<Long> LONG = ConversionContext.of(Argument.LONG);",
      "62:     ArgumentConversionContext<String> STRING = ConversionContext.of(Argument.STRING);",
      "67:     ArgumentConversionContext<List<String>> LIST_OF_STRING = ConversionContext.of(Argument.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java -> core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import io.micronaut.core.type.Argument;",
      "21: import java.nio.charset.Charset;",
      "",
      "[Removed Lines]",
      "22: import java.util.ArrayList;",
      "23: import java.util.Collections;",
      "24: import java.util.Iterator;",
      "25: import java.util.List;",
      "26: import java.util.Locale;",
      "27: import java.util.Map;",
      "28: import java.util.Optional;",
      "",
      "[Added Lines]",
      "22: import java.util.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:         return argument;",
      "115:     }",
      "117:     @Override",
      "118:     public String toString() {",
      "119:         return argument.toString();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     @Override",
      "112:     public boolean equals(Object o) {",
      "113:         if (this == o) {",
      "114:             return true;",
      "115:         }",
      "116:         if (o == null || getClass() != o.getClass()) {",
      "117:             return false;",
      "118:         }",
      "119:         DefaultArgumentConversionContext<?> that = (DefaultArgumentConversionContext<?>) o;",
      "120:         return Objects.equals(getArgument(), that.getArgument()) &&",
      "121:             Objects.equals(finalLocale, that.finalLocale) &&",
      "122:             Objects.equals(finalCharset, that.finalCharset);",
      "123:     }",
      "125:     @Override",
      "126:     public int hashCode() {",
      "127:         return Objects.hash(argument, finalLocale, finalCharset);",
      "128:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.core.convert.value;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.reflect.GenericTypeUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         return Optional.empty();",
      "171:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     default <T> Optional<T> getFirst(CharSequence name, ArgumentConversionContext<T> conversionContext) {",
      "183:         V v = get(name);",
      "184:         if (v != null) {",
      "185:             return ConversionService.SHARED.convert(v, conversionContext);",
      "186:         }",
      "187:         return Optional.empty();",
      "188:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:     default boolean contains(String name) {",
      "74:     }",
      "",
      "[Removed Lines]",
      "73:         return get(name, Object.class).isPresent();",
      "",
      "[Added Lines]",
      "73:         return get(name, Argument.OBJECT_ARGUMENT).isPresent();",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java": [
      "File: core/src/main/java/io/micronaut/core/type/Argument.java -> core/src/main/java/io/micronaut/core/type/Argument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: public interface Argument<T> extends TypeVariableResolver, AnnotatedElement, Type {",
      "46:     @SuppressWarnings(\"unused\")",
      "52:     @SuppressWarnings(\"unused\")",
      "58:     @SuppressWarnings(\"unused\")",
      "64:     @SuppressWarnings(\"unused\")",
      "70:     @SuppressWarnings(\"unused\")",
      "76:     @SuppressWarnings(\"unused\")",
      "82:     @SuppressWarnings(\"unused\")",
      "88:     @SuppressWarnings(\"unused\")",
      "94:     @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "47:     Argument INT = Argument.of(int.class);",
      "53:     Argument LONG = Argument.of(long.class);",
      "59:     Argument FLOAT = Argument.of(float.class);",
      "65:     Argument DOUBLE = Argument.of(double.class);",
      "71:     Argument VOID = Argument.of(void.class);",
      "77:     Argument BYTE = Argument.of(byte.class);",
      "83:     Argument BOOLEAN = Argument.of(boolean.class);",
      "89:     Argument CHAR = Argument.of(char.class);",
      "95:     Argument SHORT = Argument.of(short.class);",
      "",
      "[Added Lines]",
      "46:     Argument<String> STRING = Argument.of(String.class);",
      "52:     Argument<Integer> INT = Argument.of(int.class);",
      "58:     Argument<Long> LONG = Argument.of(long.class);",
      "64:     Argument<Float> FLOAT = Argument.of(float.class);",
      "70:     Argument<Double> DOUBLE = Argument.of(double.class);",
      "76:     Argument<Void> VOID = Argument.of(void.class);",
      "82:     Argument<Byte> BYTE = Argument.of(byte.class);",
      "88:     Argument<Boolean> BOOLEAN = Argument.of(boolean.class);",
      "94:     Argument<Character> CHAR = Argument.of(char.class);",
      "100:     Argument<Short> SHORT = Argument.of(short.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     @SuppressWarnings(\"unused\")",
      "108:     Argument<Object> OBJECT_ARGUMENT = of(Object.class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:     Argument<List<String>> LIST_OF_STRING = Argument.listOf(String.class);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
      "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:     public DefaultArgument(Class<T> type, String name, AnnotationMetadata annotationMetadata, Argument... genericTypes) {",
      "55:     }",
      "",
      "[Removed Lines]",
      "50:         this.type = type;",
      "51:         this.name = name;",
      "52:         this.annotationMetadata = annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA;",
      "53:         this.typeParameters = initializeTypeParameters(genericTypes);",
      "54:         this.typeParameterArray = genericTypes;",
      "",
      "[Added Lines]",
      "50:         this(type, name, annotationMetadata, initializeTypeParameters(genericTypes), genericTypes);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184:         return Objects.hash(type, name, typeParameters);",
      "185:     }",
      "188:         Map<String, Argument<?>> typeParameters;",
      "189:         if (genericTypes != null && genericTypes.length > 0) {",
      "190:             typeParameters = new LinkedHashMap<>(genericTypes.length);",
      "",
      "[Removed Lines]",
      "187:     private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "[Added Lines]",
      "183:     private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "---------------"
    ],
    "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java": [
      "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {",
      "72:             return Argument.of(VndError.class);",
      "73:         } else {",
      "75:         }",
      "76:     }",
      "77: }",
      "",
      "[Removed Lines]",
      "74:             return Argument.of(String.class);",
      "",
      "[Added Lines]",
      "74:             return Argument.STRING;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);",
      "142:     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(",
      "143:             \"^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$\", Pattern.CASE_INSENSITIVE);",
      "145:     private final Router router;",
      "146:     private final ExecutorSelector executorSelector;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "769:                                 Argument typeVariable;",
      "771:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
      "773:                                 } else {",
      "774:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "775:                                 }",
      "",
      "[Removed Lines]",
      "772:                                     typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "773:                                     typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "784:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
      "785:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
      "786:                                     if (streamingFileUpload) {",
      "788:                                     } else {",
      "789:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "790:                                     }",
      "",
      "[Removed Lines]",
      "787:                                         typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "788:                                         typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: public class CompletableFutureBodyBinder extends DefaultBodyAnnotationBinder<CompletableFuture>",
      "50:     implements NonBlockingBodyArgumentBinder<CompletableFuture> {",
      "52:     private final BeanLocator beanLocator;",
      "53:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     private static final Argument<CompletableFuture> TYPE = Argument.of(CompletableFuture.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:     @Override",
      "67:     public Argument<CompletableFuture> argumentType() {",
      "69:     }",
      "71:     @Override",
      "",
      "[Removed Lines]",
      "68:         return Argument.of(CompletableFuture.class);",
      "",
      "[Added Lines]",
      "70:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {",
      "56:     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);",
      "58:     private final BeanLocator beanLocator;",
      "59:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:     @Override",
      "73:     public Argument<Publisher> argumentType() {",
      "75:     }",
      "77:     @Override",
      "",
      "[Removed Lines]",
      "74:         return Argument.of(Publisher.class);",
      "",
      "[Added Lines]",
      "75:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy": [
      "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.netty.cors",
      "18: import io.micronaut.core.type.Argument",
      "19: import io.micronaut.http.HttpHeaders",
      "20: import io.micronaut.http.HttpMethod",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "147:         1 * request.getMethod() >> HttpMethod.GET",
      "148:         !result.isPresent()",
      "150:     }",
      "152:     void \"test preflight handleRequest with disallowed header\"() {",
      "",
      "[Removed Lines]",
      "149:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String))",
      "",
      "[Added Lines]",
      "150:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:         then: \"the request is rejected because bar is not allowed\"",
      "172:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "175:         result.get().status == HttpStatus.FORBIDDEN",
      "176:     }",
      "",
      "[Removed Lines]",
      "173:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "174:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> ['foo', 'bar']",
      "",
      "[Added Lines]",
      "174:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "175:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> ['foo', 'bar']",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:         then: \"the request is successful\"",
      "198:         4 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "201:         result.get().status == HttpStatus.OK",
      "202:     }",
      "",
      "[Removed Lines]",
      "199:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "200:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['foo'])",
      "",
      "[Added Lines]",
      "200:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "201:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['foo'])",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "274:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "276:         then: \"the response is not modified\"",
      "279:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "280:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "281:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "277:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "278:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "278:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "279:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "305:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "307:         then: \"the response is not modified\"",
      "310:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "311:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "312:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "308:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "309:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "309:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "310:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import static io.micronaut.http.HttpHeaders.VARY;",
      "29: import io.micronaut.core.async.publisher.Publishers;",
      "30: import io.micronaut.core.order.Ordered;",
      "32: import io.micronaut.core.util.StringUtils;",
      "33: import io.micronaut.http.HttpHeaders;",
      "34: import io.micronaut.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "31: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "30: import io.micronaut.core.convert.ArgumentConversionContext;",
      "31: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: @Filter(\"/**\")",
      "60: public class CorsFilter implements HttpServerFilter {",
      "62:     protected final HttpServerConfiguration.CorsConfiguration corsConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     private static final ArgumentConversionContext<HttpMethod> CONVERSION_CONTEXT_HTTP_METHOD = ConversionContext.of(HttpMethod.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:                 CorsOriginConfiguration config = optionalConfig.get();",
      "110:                 if (CorsUtil.isPreflightRequest(request)) {",
      "112:                     setAllowMethods(result.get(), response);",
      "114:                     allowedHeaders.ifPresent(val ->",
      "115:                         setAllowHeaders(val, response)",
      "116:                     );",
      "",
      "[Removed Lines]",
      "111:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
      "113:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
      "",
      "[Added Lines]",
      "114:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);",
      "116:                     Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:                 List<HttpMethod> allowedMethods = config.getAllowedMethods();",
      "152:                 if (!isAnyMethod(allowedMethods)) {",
      "154:                     if (allowedMethods.stream().noneMatch(method -> method.equals(methodToMatch))) {",
      "155:                         return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));",
      "156:                     }",
      "157:                 }",
      "159:                 if (preflight) {",
      "162:                     List<String> allowedHeaders = config.getAllowedHeaders();",
      "",
      "[Removed Lines]",
      "153:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class).orElse(requestMethod) : requestMethod;",
      "160:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.listOf(String.class));",
      "",
      "[Added Lines]",
      "156:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD).orElse(requestMethod) : requestMethod;",
      "163:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.cors;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.TypeConverter;",
      "20: import io.micronaut.core.convert.value.ConvertibleValues;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: import io.micronaut.http.HttpMethod;",
      "25: import javax.inject.Singleton;",
      "26: import java.util.Map;",
      "27: import java.util.Optional;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
      "44:     private static final String MAX_AGE = \"maxAge\";",
      "46:     @Override",
      "47:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
      "48:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "51:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
      "53:             convertibleValues",
      "55:                 .ifPresent(configuration::setAllowedOrigins);",
      "57:             convertibleValues",
      "59:                 .ifPresent(configuration::setAllowedMethods);",
      "61:             convertibleValues",
      "63:                 .ifPresent(configuration::setAllowedHeaders);",
      "65:             convertibleValues",
      "67:                 .ifPresent(configuration::setExposedHeaders);",
      "69:             convertibleValues",
      "71:                 .ifPresent(configuration::setAllowCredentials);",
      "73:             convertibleValues",
      "75:                 .ifPresent(configuration::setMaxAge);",
      "76:         }",
      "77:         return Optional.of(configuration);",
      "",
      "[Removed Lines]",
      "54:                 .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
      "58:                 .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
      "62:                 .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
      "66:                 .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
      "70:                 .get(ALLOW_CREDENTIALS, Boolean.class)",
      "74:                 .get(MAX_AGE, Long.class)",
      "",
      "[Added Lines]",
      "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
      "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
      "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
      "78:                 .get(MAX_AGE, ConversionContext.LONG)",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
      "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.convert.ConversionService;",
      "19: import io.micronaut.core.type.Headers;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472:     default Optional<Integer> findInt(CharSequence name) {",
      "474:     }",
      "",
      "[Removed Lines]",
      "473:         return get(name, Integer.class);",
      "",
      "[Added Lines]",
      "474:         return get(name, ConversionContext.INT);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "482:     default Optional<String> findFirst(CharSequence name) {",
      "484:     }",
      "",
      "[Removed Lines]",
      "483:         return getFirst(name, String.class);",
      "",
      "[Added Lines]",
      "484:         return getFirst(name, ConversionContext.STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "491:     default Optional<MediaType> contentType() {",
      "493:     }",
      "",
      "[Removed Lines]",
      "492:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.class);",
      "",
      "[Added Lines]",
      "493:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.CONVERSION_CONTEXT);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "500:     default OptionalLong contentLength() {",
      "502:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
      "503:     }",
      "",
      "[Removed Lines]",
      "501:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, Long.class);",
      "",
      "[Added Lines]",
      "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "511:         return getAll(HttpHeaders.ACCEPT)",
      "512:             .stream()",
      "513:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
      "515:             .distinct()",
      "516:             .collect(Collectors.toList());",
      "517:     }",
      "",
      "[Removed Lines]",
      "514:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.class).map(Stream::of).orElse(Stream.empty()))",
      "",
      "[Added Lines]",
      "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "522:     default boolean isKeepAlive() {",
      "524:     }",
      "",
      "[Removed Lines]",
      "523:         return getFirst(CONNECTION, String.class).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "[Added Lines]",
      "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
      "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.annotation.TypeHint;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.naming.NameUtils;",
      "21: import io.micronaut.core.util.StringUtils;",
      "22: import io.micronaut.core.value.OptionalValues;",
      "23: import io.micronaut.http.annotation.Produces;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.annotation.Internal;",
      "20: import io.micronaut.core.convert.ArgumentConversionContext;",
      "21: import io.micronaut.core.convert.ConversionContext;",
      "24: import io.micronaut.core.type.Argument;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:     public static final String V_PARAMETER = \"v\";",
      "321:     private static final BigDecimal QUALITY_RATING_NUMBER = new BigDecimal(\"1.0\");",
      "322:     private static final String QUALITY_RATING = \"1.0\";",
      "323:     private static final String SEMICOLON = \";\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     @Internal",
      "326:     static final Argument<MediaType> ARGUMENT = Argument.of(MediaType.class);",
      "328:     @Internal",
      "329:     static final ArgumentConversionContext<MediaType> CONVERSION_CONTEXT = ConversionContext.of(ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java": [
      "File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java -> runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "260:             Object key = keyGenerator.generateKey(context, params);",
      "261:             CompletableFuture<Object> thisFuture = new CompletableFuture<>();",
      "263:             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
      "264:                 if (throwable == null && o.isPresent()) {",
      "",
      "[Removed Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "503:         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
      "504:         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "505:         Object key = keyGenerator.generateKey(context, params);",
      "508:         Maybe<Object> maybe = Maybe.create(emitter -> {",
      "509:             asyncCache.get(key, firstTypeVariable).whenComplete((opt, throwable) -> {",
      "",
      "[Removed Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
      "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import io.micronaut.context.condition.Condition;",
      "21: import io.micronaut.context.condition.ConditionContext;",
      "22: import io.micronaut.core.annotation.Introspected;",
      "24: import io.micronaut.core.util.CollectionUtils;",
      "26: import java.io.File;",
      "",
      "[Removed Lines]",
      "23: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "23: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         if (beanContext instanceof ApplicationContext) {",
      "41:             List<String> paths = ((ApplicationContext) beanContext)",
      "42:                     .getEnvironment()",
      "44:                     .orElse(null);",
      "46:             if (CollectionUtils.isNotEmpty(paths)) {",
      "",
      "[Removed Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))",
      "",
      "[Added Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
      "",
      "---------------"
    ],
    "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java": [
      "File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java -> session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: @Requires(classes = HttpServerConfiguration.class)",
      "43: public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {",
      "45:     private final SessionStore<Session> sessionStore;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     private static final Argument<Session> TYPE = Argument.of(Session.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     @Override",
      "57:     public Argument<Session> argumentType() {",
      "59:     }",
      "61:     @Override",
      "",
      "[Removed Lines]",
      "58:         return Argument.of(Session.class);",
      "",
      "[Added Lines]",
      "60:         return TYPE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1355c90f9b88c461bc218e3172ec2f9a7632ef9c",
      "candidate_info": {
        "commit_hash": "1355c90f9b88c461bc218e3172ec2f9a7632ef9c",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/1355c90f9b88c461bc218e3172ec2f9a7632ef9c",
        "files": [
          "http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java",
          "http-server-netty/build.gradle",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java",
          "test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy"
        ],
        "message": "Fix handling of HTTP content chunks. Fixes #3618 (#3623)\n\nHttp content chunks were being released occasionally prior to the response being written.\nIn this case the the ref count was set to zero and then downstream the http codec was releasing again\nresults in an illegal reference count. This changes retains the messages and then releases them\nas part of the cleanup up the request making the behaviour consistent with how form data is processed.",
        "before_after_code_files": [
          "http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java||http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java",
          "http-server-netty/build.gradle||http-server-netty/build.gradle",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java",
          "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java",
          "test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy||test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ],
          "candidate": [
            "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java"
          ]
        }
      },
      "candidate_diff": {
        "http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java||http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java": [
          "File: http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java -> http-client/src/main/java/io/micronaut/http/client/netty/RxNettyHttpClientRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     private ClientKey getClientKey(AnnotationMetadata metadata) {",
          "401:         final HttpVersion httpVersion =",
          "403:         String clientId = metadata.stringValue(Client.class).orElse(null);",
          "404:         String path = metadata.stringValue(Client.class, \"path\").orElse(null);",
          "405:         String filterAnnotation = metadata",
          "",
          "[Removed Lines]",
          "402:                 metadata.enumValue(Client.class, \"version\", HttpVersion.class).orElse(null);",
          "",
          "[Added Lines]",
          "402:                 metadata.enumValue(Client.class, \"httpVersion\", HttpVersion.class).orElse(null);",
          "",
          "---------------"
        ],
        "http-server-netty/build.gradle||http-server-netty/build.gradle": [
          "File: http-server-netty/build.gradle -> http-server-netty/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:         exclude module:'micronaut-inject'",
          "27:         exclude module:'micronaut-http'",
          "28:     }",
          "29:     testImplementation dependencyModuleVersion(\"groovy\", \"groovy-json\")",
          "30:     testImplementation dependencyModuleVersion(\"groovy\", \"groovy-templates\")",
          "31:     testImplementation dependencyVersion(\"rxjava2\")",
          "32:     testImplementation(dependencyModuleVersion(\"netty\", \"netty-transport-native-epoll\") + \":linux-x86_64\")",
          "33:     testImplementation(dependencyModuleVersion(\"netty\", \"netty-transport-native-kqueue\") + \":osx-x86_64\")",
          "34:     testImplementation \"ch.qos.logback:logback-classic:1.2.3\"",
          "35: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     testImplementation 'io.vertx:vertx-core:3.9.1'",
          "32:     testImplementation 'io.vertx:vertx-web-client:3.9.1'",
          "33:     testImplementation group: 'org.eclipse.jetty', name: 'jetty-alpn-openjdk8-client', version: '9.4.30.v20200611'",
          "41:     testImplementation dependencyModuleVersion(\"micronaut.test\", \"micronaut-test-junit5\"), {",
          "42:         exclude module:'micronaut-runtime'",
          "43:         exclude module:'micronaut-inject'",
          "44:     }",
          "46:     testImplementation(\"org.junit.jupiter:junit-jupiter-api:$junit5Version\")",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/NettyHttpRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:                 return (AbstractHttpData) httpContent;",
          "343:             });",
          "344:         } else {",
          "346:         }",
          "347:     }",
          "",
          "[Removed Lines]",
          "345:             receivedContent.add(httpContent);",
          "",
          "[Added Lines]",
          "345:             receivedContent.add(httpContent.retain());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:         return characterEncoding == null ? serverConfiguration.getDefaultCharset() : characterEncoding;",
          "376:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     @Internal",
          "382:     final boolean isFormOrMultipartData() {",
          "383:         MediaType ct = headers.contentType().orElse(null);",
          "384:         return ct != null && (ct.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE) || ct.equals(MediaType.MULTIPART_FORM_DATA_TYPE));",
          "385:     }",
          "390:     @Internal",
          "391:     final boolean isFormData() {",
          "392:         MediaType ct = headers.contentType().orElse(null);",
          "393:         return ct != null && (ct.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE));",
          "394:     }",
          "",
          "---------------"
        ],
        "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
          "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     private Subscriber<Object> buildSubscriber(NettyHttpRequest<?> request,",
          "701:                                                ChannelHandlerContext context,",
          "702:                                                RouteMatch<?> finalRoute) {",
          "727:                 }",
          "784:                                         typeVariable = ARGUMENT_PART_DATA;",
          "785:                                     } else {",
          "787:                                     }",
          "828:                                     }",
          "841:                                         }",
          "860:                                     }",
          "869:                                     value = () -> {",
          "872:                                         } else {",
          "874:                                         }",
          "875:                                     };",
          "876:                                 }",
          "883:                                 }",
          "887:                                 }",
          "891:                                 }",
          "895:                                 request.addContent(data);",
          "899:                                 s.request(1);",
          "900:                             }",
          "902:                         } else {",
          "904:                             s.request(1);",
          "905:                         }",
          "906:                     } else {",
          "908:                         s.request(1);",
          "909:                     }",
          "913:                 }",
          "924:                 }",
          "932:                     }",
          "933:                 }",
          "939:                     try {",
          "942:                     } catch (Exception e) {",
          "944:                     }",
          "945:                 }",
          "948:     }",
          "950:     private ExecutorService getIoExecutor() {",
          "",
          "[Removed Lines]",
          "703:         return new CompletionAwareSubscriber<Object>() {",
          "704:             Boolean alwaysAddContent = request.getContentType()",
          "705:                     .map(type -> type.equals(MediaType.APPLICATION_FORM_URLENCODED_TYPE))",
          "706:                     .orElse(false);",
          "707:             RouteMatch<?> routeMatch = finalRoute;",
          "708:             AtomicBoolean executed = new AtomicBoolean(false);",
          "709:             AtomicLong pressureRequested = new AtomicLong(0);",
          "710:             ConcurrentHashMap<String, UnicastProcessor> subjects = new ConcurrentHashMap<>();",
          "711:             ConcurrentHashMap<Integer, HttpDataReference> dataReferences = new ConcurrentHashMap<>();",
          "712:             ConversionService conversionService = ConversionService.SHARED;",
          "713:             Subscription s;",
          "714:             LongConsumer onRequest = num -> pressureRequested.updateAndGet(p -> {",
          "715:                 long newVal = p - num;",
          "716:                 if (newVal < 0) {",
          "717:                     s.request(num - p);",
          "718:                     return 0;",
          "719:                 } else {",
          "720:                     return newVal;",
          "721:                 }",
          "722:             });",
          "724:             Flowable processFlowable(Flowable flowable, Integer dataKey, boolean controlsFlow) {",
          "725:                 if (controlsFlow) {",
          "726:                     flowable = flowable.doOnRequest(onRequest);",
          "728:                 return flowable",
          "729:                         .doAfterTerminate(() -> {",
          "730:                             if (controlsFlow) {",
          "731:                                 HttpDataReference dataReference = dataReferences.get(dataKey);",
          "732:                                 dataReference.destroy();",
          "733:                             }",
          "734:                         });",
          "735:             }",
          "737:             @Override",
          "738:             protected void doOnSubscribe(Subscription subscription) {",
          "739:                 this.s = subscription;",
          "740:                 subscription.request(1);",
          "741:             }",
          "743:             @Override",
          "744:             protected void doOnNext(Object message) {",
          "745:                 boolean executed = this.executed.get();",
          "746:                 if (message instanceof ByteBufHolder) {",
          "747:                     if (message instanceof HttpData) {",
          "748:                         HttpData data = (HttpData) message;",
          "750:                         if (LOG.isTraceEnabled()) {",
          "751:                             LOG.trace(\"Received HTTP Data for request [{}]: {}\", request, message);",
          "752:                         }",
          "754:                         String name = data.getName();",
          "755:                         Optional<Argument<?>> requiredInput = routeMatch.getRequiredInput(name);",
          "757:                         if (requiredInput.isPresent()) {",
          "758:                             Argument<?> argument = requiredInput.get();",
          "759:                             Supplier<Object> value;",
          "760:                             boolean isPublisher = Publishers.isConvertibleToPublisher(argument.getType());",
          "761:                             boolean chunkedProcessing = false;",
          "763:                             if (isPublisher) {",
          "764:                                 Integer dataKey = System.identityHashCode(data);",
          "765:                                 HttpDataReference dataReference = dataReferences.computeIfAbsent(dataKey, key -> new HttpDataReference(data));",
          "766:                                 Argument typeVariable;",
          "768:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "769:                                     typeVariable = ARGUMENT_PART_DATA;",
          "770:                                 } else {",
          "771:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "772:                                 }",
          "773:                                 Class typeVariableType = typeVariable.getType();",
          "775:                                 UnicastProcessor namedSubject = subjects.computeIfAbsent(name, key -> UnicastProcessor.create());",
          "777:                                 chunkedProcessing = PartData.class.equals(typeVariableType) ||",
          "778:                                         Publishers.isConvertibleToPublisher(typeVariableType) ||",
          "779:                                         ClassUtils.isJavaLangType(typeVariableType);",
          "781:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
          "782:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
          "783:                                     if (streamingFileUpload) {",
          "786:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "788:                                     dataReference.subject.getAndUpdate(subject -> {",
          "789:                                         if (subject == null) {",
          "790:                                             UnicastProcessor childSubject = UnicastProcessor.create();",
          "791:                                             Flowable flowable = processFlowable(childSubject, dataKey, true);",
          "792:                                             if (streamingFileUpload && data instanceof FileUpload) {",
          "793:                                                 namedSubject.onNext(new NettyStreamingFileUpload(",
          "794:                                                         (FileUpload) data,",
          "795:                                                         serverConfiguration.getMultipart(),",
          "796:                                                         getIoExecutor(),",
          "797:                                                         flowable));",
          "798:                                             } else {",
          "799:                                                 namedSubject.onNext(flowable);",
          "800:                                             }",
          "802:                                             return childSubject;",
          "803:                                         }",
          "804:                                         return subject;",
          "805:                                     });",
          "807:                                 }",
          "810:                                 UnicastProcessor subject;",
          "812:                                 final UnicastProcessor ds = dataReference.subject.get();",
          "813:                                 if (ds != null) {",
          "814:                                     subject = ds;",
          "815:                                 } else {",
          "816:                                     subject = namedSubject;",
          "817:                                 }",
          "819:                                 Object part = data;",
          "821:                                 if (chunkedProcessing) {",
          "822:                                     HttpDataReference.Component component = dataReference.addComponent(e -> {",
          "823:                                         subject.onError(e);",
          "824:                                         s.cancel();",
          "825:                                     });",
          "826:                                     if (component == null) {",
          "827:                                         return;",
          "829:                                     part = new NettyPartData(dataReference, component);",
          "830:                                 }",
          "832:                                 if (data instanceof FileUpload &&",
          "833:                                         StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "834:                                     dataReference.upload.getAndUpdate(upload -> {",
          "835:                                         if (upload == null) {",
          "836:                                             return new NettyStreamingFileUpload(",
          "837:                                                     (FileUpload) data,",
          "838:                                                     serverConfiguration.getMultipart(),",
          "839:                                                     getIoExecutor(),",
          "840:                                                     processFlowable(subject, dataKey, true));",
          "842:                                         return upload;",
          "843:                                     });",
          "844:                                 }",
          "846:                                 Optional<?> converted = conversionService.convert(part, typeVariable);",
          "848:                                 converted.ifPresent(subject::onNext);",
          "850:                                 if (data.isCompleted() && chunkedProcessing) {",
          "851:                                     subject.onComplete();",
          "852:                                 }",
          "854:                                 value = () -> {",
          "855:                                     StreamingFileUpload upload = dataReference.upload.get();",
          "856:                                     if (upload != null) {",
          "857:                                         return upload;",
          "858:                                     } else {",
          "859:                                         return processFlowable(namedSubject, dataKey, dataReference.subject.get() == null);",
          "861:                                 };",
          "863:                             } else {",
          "864:                                 if (data instanceof Attribute && !data.isCompleted()) {",
          "865:                                     request.addContent(data);",
          "866:                                     s.request(1);",
          "867:                                     return;",
          "868:                                 } else {",
          "870:                                         if (data.refCnt() > 0) {",
          "871:                                             return data;",
          "873:                                             return null;",
          "877:                             }",
          "879:                             if (!executed) {",
          "880:                                 String argumentName = argument.getName();",
          "881:                                 if (!routeMatch.isSatisfied(argumentName)) {",
          "882:                                     routeMatch = routeMatch.fulfill(Collections.singletonMap(argumentName, value.get()));",
          "884:                                 if (isPublisher && chunkedProcessing) {",
          "886:                                     pressureRequested.incrementAndGet();",
          "888:                                 if (routeMatch.isExecutable() || message instanceof LastHttpContent) {",
          "889:                                     executeRoute();",
          "890:                                     executed = true;",
          "892:                             }",
          "894:                             if (alwaysAddContent) {",
          "896:                             }",
          "898:                             if (!executed || !chunkedProcessing) {",
          "903:                             request.addContent(data);",
          "907:                         request.addContent((ByteBufHolder) message);",
          "910:                 } else {",
          "911:                     ((NettyHttpRequest) request).setBody(message);",
          "912:                     s.request(1);",
          "914:             }",
          "916:             @Override",
          "917:             protected void doOnError(Throwable t) {",
          "918:                 try {",
          "919:                     s.cancel();",
          "920:                     exceptionCaught(context, t);",
          "921:                 } catch (Exception e) {",
          "923:                     writeDefaultErrorResponse(context, request, e, false);",
          "925:             }",
          "927:             @Override",
          "928:             protected void doOnComplete() {",
          "929:                 for (UnicastProcessor subject : subjects.values()) {",
          "930:                     if (!subject.hasComplete()) {",
          "931:                         subject.onComplete();",
          "934:                 executeRoute();",
          "935:             }",
          "937:             private void executeRoute() {",
          "938:                 if (executed.compareAndSet(false, true)) {",
          "940:                         routeMatch = prepareRouteForExecution(routeMatch, request, false);",
          "941:                         routeMatch.execute();",
          "943:                         context.pipeline().fireExceptionCaught(e);",
          "946:             }",
          "947:         };",
          "",
          "[Added Lines]",
          "703:         boolean isFormData = request.isFormOrMultipartData();",
          "704:         if (isFormData) {",
          "705:             return new CompletionAwareSubscriber<Object>() {",
          "706:                 final boolean alwaysAddContent = request.isFormData();",
          "707:                 RouteMatch<?> routeMatch = finalRoute;",
          "708:                 final AtomicBoolean executed = new AtomicBoolean(false);",
          "709:                 final AtomicLong pressureRequested = new AtomicLong(0);",
          "710:                 final ConcurrentHashMap<String, UnicastProcessor> subjects = new ConcurrentHashMap<>();",
          "711:                 final ConcurrentHashMap<Integer, HttpDataReference> dataReferences = new ConcurrentHashMap<>();",
          "712:                 final ConversionService conversionService = ConversionService.SHARED;",
          "713:                 Subscription s;",
          "714:                 final LongConsumer onRequest = num -> pressureRequested.updateAndGet(p -> {",
          "715:                     long newVal = p - num;",
          "716:                     if (newVal < 0) {",
          "717:                         s.request(num - p);",
          "718:                         return 0;",
          "719:                     } else {",
          "720:                         return newVal;",
          "721:                     }",
          "722:                 });",
          "724:                 Flowable processFlowable(Flowable flowable, Integer dataKey, boolean controlsFlow) {",
          "725:                     if (controlsFlow) {",
          "726:                         flowable = flowable.doOnRequest(onRequest);",
          "727:                     }",
          "728:                     return flowable",
          "729:                             .doAfterTerminate(() -> {",
          "730:                                 if (controlsFlow) {",
          "731:                                     HttpDataReference dataReference = dataReferences.get(dataKey);",
          "732:                                     dataReference.destroy();",
          "733:                                 }",
          "734:                             });",
          "737:                 @Override",
          "738:                 protected void doOnSubscribe(Subscription subscription) {",
          "739:                     this.s = subscription;",
          "740:                     subscription.request(1);",
          "741:                 }",
          "743:                 @Override",
          "744:                 protected void doOnNext(Object message) {",
          "745:                     boolean executed = this.executed.get();",
          "746:                     if (message instanceof ByteBufHolder) {",
          "747:                         if (message instanceof HttpData) {",
          "748:                             HttpData data = (HttpData) message;",
          "750:                             if (LOG.isTraceEnabled()) {",
          "751:                                 LOG.trace(\"Received HTTP Data for request [{}]: {}\", request, message);",
          "752:                             }",
          "754:                             String name = data.getName();",
          "755:                             Optional<Argument<?>> requiredInput = routeMatch.getRequiredInput(name);",
          "757:                             if (requiredInput.isPresent()) {",
          "758:                                 Argument<?> argument = requiredInput.get();",
          "759:                                 Supplier<Object> value;",
          "760:                                 boolean isPublisher = Publishers.isConvertibleToPublisher(argument.getType());",
          "761:                                 boolean chunkedProcessing = false;",
          "763:                                 if (isPublisher) {",
          "764:                                     Integer dataKey = System.identityHashCode(data);",
          "765:                                     HttpDataReference dataReference = dataReferences.computeIfAbsent(dataKey, key -> new HttpDataReference(data));",
          "766:                                     Argument typeVariable;",
          "768:                                     if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "771:                                         typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "773:                                     Class typeVariableType = typeVariable.getType();",
          "775:                                     UnicastProcessor namedSubject = subjects.computeIfAbsent(name, key -> UnicastProcessor.create());",
          "777:                                     chunkedProcessing = PartData.class.equals(typeVariableType) ||",
          "778:                                             Publishers.isConvertibleToPublisher(typeVariableType) ||",
          "779:                                             ClassUtils.isJavaLangType(typeVariableType);",
          "781:                                     if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
          "782:                                         boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
          "783:                                         if (streamingFileUpload) {",
          "784:                                             typeVariable = ARGUMENT_PART_DATA;",
          "785:                                         } else {",
          "786:                                             typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
          "787:                                         }",
          "788:                                         dataReference.subject.getAndUpdate(subject -> {",
          "789:                                             if (subject == null) {",
          "790:                                                 UnicastProcessor childSubject = UnicastProcessor.create();",
          "791:                                                 Flowable flowable = processFlowable(childSubject, dataKey, true);",
          "792:                                                 if (streamingFileUpload && data instanceof FileUpload) {",
          "793:                                                     namedSubject.onNext(new NettyStreamingFileUpload(",
          "794:                                                             (FileUpload) data,",
          "795:                                                             serverConfiguration.getMultipart(),",
          "796:                                                             getIoExecutor(),",
          "797:                                                             flowable));",
          "798:                                                 } else {",
          "799:                                                     namedSubject.onNext(flowable);",
          "800:                                                 }",
          "802:                                                 return childSubject;",
          "803:                                             }",
          "804:                                             return subject;",
          "805:                                         });",
          "807:                                     }",
          "810:                                     UnicastProcessor subject;",
          "812:                                     final UnicastProcessor ds = dataReference.subject.get();",
          "813:                                     if (ds != null) {",
          "814:                                         subject = ds;",
          "815:                                     } else {",
          "816:                                         subject = namedSubject;",
          "819:                                     Object part = data;",
          "821:                                     if (chunkedProcessing) {",
          "822:                                         HttpDataReference.Component component = dataReference.addComponent(e -> {",
          "823:                                             subject.onError(e);",
          "824:                                             s.cancel();",
          "825:                                         });",
          "826:                                         if (component == null) {",
          "827:                                             return;",
          "829:                                         part = new NettyPartData(dataReference, component);",
          "830:                                     }",
          "832:                                     if (data instanceof FileUpload &&",
          "833:                                             StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
          "834:                                         dataReference.upload.getAndUpdate(upload -> {",
          "835:                                             if (upload == null) {",
          "836:                                                 return new NettyStreamingFileUpload(",
          "837:                                                         (FileUpload) data,",
          "838:                                                         serverConfiguration.getMultipart(),",
          "839:                                                         getIoExecutor(),",
          "840:                                                         processFlowable(subject, dataKey, true));",
          "841:                                             }",
          "842:                                             return upload;",
          "843:                                         });",
          "844:                                     }",
          "846:                                     Optional<?> converted = conversionService.convert(part, typeVariable);",
          "848:                                     converted.ifPresent(subject::onNext);",
          "850:                                     if (data.isCompleted() && chunkedProcessing) {",
          "851:                                         subject.onComplete();",
          "855:                                         StreamingFileUpload upload = dataReference.upload.get();",
          "856:                                         if (upload != null) {",
          "857:                                             return upload;",
          "859:                                             return processFlowable(namedSubject, dataKey, dataReference.subject.get() == null);",
          "863:                                 } else {",
          "864:                                     if (data instanceof Attribute && !data.isCompleted()) {",
          "865:                                         request.addContent(data);",
          "866:                                         s.request(1);",
          "867:                                         return;",
          "868:                                     } else {",
          "869:                                         value = () -> {",
          "870:                                             if (data.refCnt() > 0) {",
          "871:                                                 return data;",
          "872:                                             } else {",
          "873:                                                 return null;",
          "874:                                             }",
          "875:                                         };",
          "876:                                     }",
          "879:                                 if (!executed) {",
          "880:                                     String argumentName = argument.getName();",
          "881:                                     if (!routeMatch.isSatisfied(argumentName)) {",
          "882:                                         routeMatch = routeMatch.fulfill(Collections.singletonMap(argumentName, value.get()));",
          "883:                                     }",
          "884:                                     if (isPublisher && chunkedProcessing) {",
          "886:                                         pressureRequested.incrementAndGet();",
          "887:                                     }",
          "888:                                     if (routeMatch.isExecutable() || message instanceof LastHttpContent) {",
          "889:                                         executeRoute();",
          "890:                                         executed = true;",
          "891:                                     }",
          "894:                                 if (alwaysAddContent) {",
          "895:                                     request.addContent(data);",
          "898:                                 if (!executed || !chunkedProcessing) {",
          "899:                                     s.request(1);",
          "902:                             } else {",
          "907:                             request.addContent((ByteBufHolder) message);",
          "911:                         ((NettyHttpRequest) request).setBody(message);",
          "916:                 @Override",
          "917:                 protected void doOnError(Throwable t) {",
          "918:                     try {",
          "919:                         s.cancel();",
          "920:                         exceptionCaught(context, t);",
          "921:                     } catch (Exception e) {",
          "923:                         writeDefaultErrorResponse(context, request, e, false);",
          "924:                     }",
          "927:                 @Override",
          "928:                 protected void doOnComplete() {",
          "929:                     for (UnicastProcessor subject : subjects.values()) {",
          "930:                         if (!subject.hasComplete()) {",
          "931:                             subject.onComplete();",
          "932:                         }",
          "934:                     executeRoute();",
          "937:                 private void executeRoute() {",
          "938:                     if (executed.compareAndSet(false, true)) {",
          "939:                         try {",
          "940:                             routeMatch = prepareRouteForExecution(routeMatch, request, false);",
          "941:                             routeMatch.execute();",
          "942:                         } catch (Exception e) {",
          "943:                             context.pipeline().fireExceptionCaught(e);",
          "944:                         }",
          "945:                     }",
          "946:                 }",
          "947:             };",
          "948:         } else {",
          "949:             return new CompletionAwareSubscriber<Object>() {",
          "950:                 private Subscription s;",
          "951:                 private RouteMatch<?> routeMatch = finalRoute;",
          "952:                 private AtomicBoolean executed = new AtomicBoolean(false);",
          "954:                 @Override",
          "955:                 protected void doOnSubscribe(Subscription subscription) {",
          "956:                     this.s = subscription;",
          "957:                     subscription.request(1);",
          "958:                 }",
          "960:                 @Override",
          "961:                 protected void doOnNext(Object message) {",
          "962:                     if (message instanceof ByteBufHolder) {",
          "963:                         request.addContent((ByteBufHolder) message);",
          "964:                         s.request(1);",
          "965:                     } else {",
          "966:                         ((NettyHttpRequest) request).setBody(message);",
          "967:                         s.request(1);",
          "968:                     }",
          "969:                 }",
          "971:                 @Override",
          "972:                 protected void doOnError(Throwable t) {",
          "974:                         s.cancel();",
          "975:                         exceptionCaught(context, t);",
          "978:                         writeDefaultErrorResponse(context, request, e, false);",
          "982:                 @Override",
          "983:                 protected void doOnComplete() {",
          "984:                     if (executed.compareAndSet(false, true)) {",
          "985:                         try {",
          "986:                             routeMatch = prepareRouteForExecution(routeMatch, request, false);",
          "987:                             routeMatch.execute();",
          "988:                         } catch (Exception e) {",
          "989:                             context.pipeline().fireExceptionCaught(e);",
          "990:                         }",
          "991:                     }",
          "992:                 }",
          "993:             };",
          "994:         }",
          "",
          "---------------"
        ],
        "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java": [
          "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/http2/Http2PostTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.micronaut.http.server.netty.http2;",
          "3: import io.micronaut.context.annotation.Property;",
          "4: import io.micronaut.context.annotation.Requires;",
          "5: import io.micronaut.core.util.CollectionUtils;",
          "6: import io.micronaut.http.HttpRequest;",
          "7: import io.micronaut.http.HttpResponse;",
          "8: import io.micronaut.http.HttpVersion;",
          "9: import io.micronaut.http.MediaType;",
          "10: import io.micronaut.http.annotation.Body;",
          "11: import io.micronaut.http.annotation.Controller;",
          "12: import io.micronaut.http.annotation.Get;",
          "13: import io.micronaut.http.annotation.Post;",
          "14: import io.micronaut.http.client.RxHttpClient;",
          "15: import io.micronaut.http.client.annotation.Client;",
          "16: import io.micronaut.http.server.netty.ssl.ServerSslBuilder;",
          "17: import io.micronaut.runtime.server.EmbeddedServer;",
          "18: import io.micronaut.test.annotation.MicronautTest;",
          "19: import io.micronaut.test.support.TestPropertyProvider;",
          "20: import io.vertx.core.Vertx;",
          "21: import io.vertx.core.http.HttpClient;",
          "22: import io.vertx.core.http.HttpClientOptions;",
          "23: import io.vertx.core.http.HttpMethod;",
          "24: import org.junit.jupiter.api.Assertions;",
          "25: import org.junit.jupiter.api.Test;",
          "26: import org.junit.jupiter.api.TestInstance;",
          "28: import javax.annotation.Nonnull;",
          "29: import javax.inject.Inject;",
          "30: import java.util.Map;",
          "31: import java.util.concurrent.CompletableFuture;",
          "32: import java.util.concurrent.ExecutionException;",
          "33: import java.util.concurrent.TimeUnit;",
          "34: import java.util.concurrent.TimeoutException;",
          "36: @MicronautTest",
          "37: @Property(name = \"micronaut.server.http-version\", value = \"2.0\")",
          "38: @Property(name = \"micronaut.server.netty.log-level\", value = \"TRACE\")",
          "39: @Property(name = \"micronaut.http.client.log-level\", value = \"TRACE\")",
          "40: @Requires(sdk = Requires.Sdk.JAVA, version = \"11\")",
          "41: @TestInstance(TestInstance.Lifecycle.PER_CLASS)",
          "42: public class Http2PostTest implements TestPropertyProvider {",
          "44:     @Inject",
          "45:     EmbeddedServer embeddedServer;",
          "47:     @Inject",
          "48:     @Client(value = \"/\", httpVersion = HttpVersion.HTTP_2_0)",
          "49:     RxHttpClient client;",
          "51:     @Inject",
          "52:     ServerSslBuilder serverSslBuilder;",
          "54:     @Test",
          "55:     void testPost() {",
          "56:         HttpResponse<String> result = client.exchange(HttpRequest.POST(\"/vertx/demo/testPost\", \"Request-1\")",
          "57:                 .contentType(MediaType.TEXT_PLAIN), String.class)",
          "58:                 .blockingFirst();",
          "60:         Assertions.assertEquals(",
          "61:                 \"Test succeeded on POST. Received : Request-1\",",
          "62:                 result.body()",
          "63:         );",
          "65:         result = client.exchange(HttpRequest.POST(\"/vertx/demo/testPost\", \"Request-2\")",
          "66:                 .contentType(MediaType.TEXT_PLAIN), String.class)",
          "67:                 .blockingFirst();",
          "69:         Assertions.assertEquals(",
          "70:                 \"Test succeeded on POST. Received : Request-2\",",
          "71:                 result.body()",
          "72:         );",
          "73:     }",
          "76:     @Test",
          "77:     void testPostVertx() throws ExecutionException, InterruptedException, TimeoutException {",
          "78:         Vertx vertx = Vertx.vertx();",
          "79:         HttpClientOptions options = new HttpClientOptions()",
          "80:                 .setProtocolVersion(io.vertx.core.http.HttpVersion.HTTP_2)",
          "81:                 .setSsl(true)",
          "83:                 .setTrustAll(true).setVerifyHost(false)",
          "84:                 .setUseAlpn(true)",
          "85:                 .setDefaultHost(\"localhost\")",
          "86:                 .setDefaultPort(embeddedServer.getPort());",
          "87:         HttpClient client = vertx.createHttpClient(options);",
          "88:         CompletableFuture<String> result = new CompletableFuture<>();",
          "90:         client.request(HttpMethod.POST, \"/vertx/demo/testPost\", response -> {",
          "91:             System.out.println(\"Received response with status code \" + response.statusCode() + \" \" + response.version());",
          "92:             response.bodyHandler(buffer -> result.complete(new String(buffer.getBytes())));",
          "93:         })",
          "94:                 .putHeader(\"content-length\", \"1000\")",
          "95:                 .write(\"Request-1\")",
          "96:                 .end();",
          "98:         Assertions.assertEquals(",
          "99:                 \"Test succeeded on POST. Received : Request-1\",",
          "100:                 result.get()",
          "101:         );",
          "103:         CompletableFuture<String> result2 = new CompletableFuture<>();",
          "104:         client.request(HttpMethod.POST, \"/vertx/demo/testPost\", response -> {",
          "105:             System.out.println(\"Received response with status code \" + response.statusCode() + \" \" + response.version());",
          "106:             response.bodyHandler(buffer -> result2.complete(new String(buffer.getBytes())));",
          "107:         })",
          "108:         .putHeader(\"content-length\", \"1000\")",
          "109:         .write(\"Request-2\")",
          "110:         .end();",
          "112:         Assertions.assertEquals(",
          "113:                 \"Test succeeded on POST. Received : Request-2\",",
          "114:                 result2.get(2, TimeUnit.SECONDS)",
          "115:         );",
          "116:     }",
          "118:     @Nonnull",
          "119:     @Override",
          "120:     public Map<String, String> getProperties() {",
          "121:         return CollectionUtils.mapOf(",
          "122:                 \"micronaut.ssl.enabled\", true,",
          "123:                 \"micronaut.ssl.buildSelfSigned\", true",
          "124:         );",
          "125:     }",
          "127:     @Controller(\"/vertx/demo\")",
          "128:     public static class DemoController {",
          "129:         @Get(\"/testGet\")",
          "130:         public HttpResponse<String> testGet() {",
          "131:             return HttpResponse.ok(\"Test succeeded on GET\");",
          "132:         }",
          "134:         @Post(value = \"/testPost\", produces = MediaType.TEXT_PLAIN, consumes = MediaType.TEXT_PLAIN)",
          "135:         public HttpResponse<String> testPost(@Body String body) {",
          "136:             return HttpResponse",
          "137:                     .ok(\"Test succeeded on POST. Received : \" + body)",
          "138:                     .contentType(MediaType.TEXT_PLAIN);",
          "139:         }",
          "141:     }",
          "143: }",
          "",
          "---------------"
        ],
        "test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy||test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy": [
          "File: test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy -> test-suite/src/test/groovy/io/micronaut/http/client/http2/Http2RequestSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         then:\"The response is correct\"",
          "56:         response.body() == Http2Controller.people",
          "58:     }",
          "60:     void \"test make HTTP/2 sse stream request\"() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         when:\"posting a data again\"",
          "59:         response = client.exchange(HttpRequest.POST(\"${server.URL}/http2/personStream\", Http2Controller.people), Argument.listOf(Person))",
          "60:                 .blockingFirst()",
          "62:         then:\"The response is correct\"",
          "63:         response.body() == Http2Controller.people",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         response.status() == HttpStatus.OK",
          "123:         response.body() == 'Version: HTTP_2_0 test'",
          "125:         cleanup:",
          "126:         server.close()",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         response.body() == 'Version: HTTP_2_0 test'",
          "131:         when:\"A post request is performed again\"",
          "132:         response = client.exchange(HttpRequest.POST(\"${server.URL}/http2\", \"test\").contentType(MediaType.TEXT_PLAIN), String.class)",
          "133:                 .blockingFirst()",
          "135:         then:",
          "136:         response.status() == HttpStatus.OK",
          "",
          "---------------"
        ]
      }
    }
  ]
}