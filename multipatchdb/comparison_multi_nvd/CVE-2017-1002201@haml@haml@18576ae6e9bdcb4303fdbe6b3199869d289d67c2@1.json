{
  "cve_id": "CVE-2017-1002201",
  "cve_desc": "In haml versions prior to version 5.0.0.beta.2, when using user input to perform tasks on the server, characters like < > \" ' must be escaped properly. In this case, the ' character was missed. An attacker can manipulate the input to introduce additional attributes, potentially executing code.",
  "repo": "haml/haml",
  "patch_hash": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
  "patch_info": {
    "commit_hash": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
    "repo": "haml/haml",
    "commit_url": "https://github.com/haml/haml/commit/18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
    "files": [
      "lib/haml/helpers.rb",
      "test/engine_test.rb",
      "test/pretty_engine_test.rb",
      "test/pretty_results/just_stuff.xhtml",
      "test/results/just_stuff.xhtml"
    ],
    "message": "Always escape `'` in Haml::Helpers.#html_escape.\n\nIn some tests, `attr_wrapper` is changed to be ignored.\n\nI'll split its fix to other commis because not Haml::Helpers but\nHaml::AttributeBuilder is responsible for that.",
    "before_after_code_files": [
      "lib/haml/helpers.rb||lib/haml/helpers.rb",
      "test/engine_test.rb||test/engine_test.rb",
      "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
      "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
      "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
    ]
  },
  "patch_diff": {
    "lib/haml/helpers.rb||lib/haml/helpers.rb": [
      "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "596:     # Characters that need to be escaped to HTML entities from user input",
      "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#039;' }",
      "601:     # Returns a copy of `text` with ampersands, angle brackets and quotes",
      "602:     # escaped into HTML entities.",
      "",
      "[Removed Lines]",
      "599:     HTML_ESCAPE_REGEX = /[\\\"><&]/",
      "",
      "[Added Lines]",
      "599:     HTML_ESCAPE_REGEX = /['\"><&]/",
      "",
      "---------------"
    ],
    "test/engine_test.rb||test/engine_test.rb": [
      "File: test/engine_test.rb -> test/engine_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1127:   def test_attr_wrapper",
      "1128:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
      "1129:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
      "1132:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
      "1133:   end",
      "",
      "[Removed Lines]",
      "1130:     assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1131:     assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "[Added Lines]",
      "1130:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1131:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1534:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
      "1535:         :hyphenate_data_attrs => false))",
      "1538:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
      "1539:         :hyphenate_data_attrs => false)) #'",
      "1540:   end",
      "",
      "[Removed Lines]",
      "1537:     assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "[Added Lines]",
      "1537:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1698:   def test_new_attribute_parsing",
      "1699:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
      "1700:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
      "1702:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
      "1704:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
      "1705:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
      "1706:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
      "",
      "[Removed Lines]",
      "1701:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1703:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "[Added Lines]",
      "1701:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1703:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1713:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
      "1714:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
      "1719:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
      "1720:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
      "",
      "[Removed Lines]",
      "1716:     assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1717:     assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "[Added Lines]",
      "1716:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1717:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "---------------"
    ],
    "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
      "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1129:   def test_attr_wrapper",
      "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
      "1131:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
      "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
      "1135:   end",
      "",
      "[Removed Lines]",
      "1132:     assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1133:     assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "[Added Lines]",
      "1132:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
      "1133:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
      "1528:         :hyphenate_data_attrs => false))",
      "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
      "1532:         :hyphenate_data_attrs => false)) #'",
      "1533:   end",
      "",
      "[Removed Lines]",
      "1530:     assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "[Added Lines]",
      "1530:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1691:   def test_new_attribute_parsing",
      "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
      "1693:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
      "1695:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
      "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
      "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
      "1699:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
      "",
      "[Removed Lines]",
      "1694:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1696:     assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "[Added Lines]",
      "1694:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
      "1696:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1706:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
      "1707:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
      "1712:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
      "1713:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
      "",
      "[Removed Lines]",
      "1709:     assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1710:     assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "[Added Lines]",
      "1709:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
      "1710:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
      "",
      "---------------"
    ],
    "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml": [
      "File: test/pretty_results/just_stuff.xhtml -> test/pretty_results/just_stuff.xhtml",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
      "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "10: Embedded? false!",
      "11: Embedded? true!",
      "12: Embedded? true!",
      "",
      "[Removed Lines]",
      "9: <strong apos=\"Foo's bar!\">Boo!</strong>",
      "",
      "[Added Lines]",
      "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: <p class='article quux qux' id='article_1'>Blump</p>",
      "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
      "63: Woah inner quotes",
      "65: <p class='dynamic_self_closing' dyn='3' />",
      "66: <body>",
      "67:   hello",
      "",
      "[Removed Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>",
      "",
      "[Added Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
      "",
      "---------------"
    ],
    "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml": [
      "File: test/results/just_stuff.xhtml -> test/results/just_stuff.xhtml",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
      "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "10: Embedded? false!",
      "11: Embedded? true!",
      "12: Embedded? true!",
      "",
      "[Removed Lines]",
      "9: <strong apos=\"Foo's bar!\">Boo!</strong>",
      "",
      "[Added Lines]",
      "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61: <p class='article quux qux' id='article_1'>Blump</p>",
      "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
      "63: Woah inner quotes",
      "65: <p class='dynamic_self_closing' dyn='3' />",
      "66: <body>",
      "67: hello",
      "",
      "[Removed Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>",
      "",
      "[Added Lines]",
      "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
      "candidate_info": {
        "commit_hash": "d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/d0086ec86df3b26012a7b38b532b56b7eb60cbfc",
        "files": [
          "lib/haml/helpers.rb",
          "test/engine_test.rb",
          "test/pretty_engine_test.rb",
          "test/pretty_results/just_stuff.xhtml",
          "test/results/just_stuff.xhtml"
        ],
        "message": "Escape `'` to `&#39;` instead of `&#039;`\n\nto unify specification with CGI.escapeHTML.",
        "before_after_code_files": [
          "lib/haml/helpers.rb||lib/haml/helpers.rb",
          "test/engine_test.rb||test/engine_test.rb",
          "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
          "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
          "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb",
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
            "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
            "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
          ],
          "candidate": [
            "lib/haml/helpers.rb||lib/haml/helpers.rb",
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb",
            "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml",
            "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml"
          ]
        }
      },
      "candidate_diff": {
        "lib/haml/helpers.rb||lib/haml/helpers.rb": [
          "File: lib/haml/helpers.rb -> lib/haml/helpers.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:     end",
          "596:     # Characters that need to be escaped to HTML entities from user input",
          "599:     HTML_ESCAPE_REGEX = /['\"><&]/",
          "",
          "[Removed Lines]",
          "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#039;' }",
          "",
          "[Added Lines]",
          "597:     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#39;' }",
          "",
          "---------------"
        ],
        "test/engine_test.rb||test/engine_test.rb": [
          "File: test/engine_test.rb -> test/engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1127:   def test_attr_wrapper",
          "1128:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1129:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1132:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1133:   end",
          "",
          "[Removed Lines]",
          "1130:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1130:     assert_equal(\"<p escaped=\\\"quo&#39;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped=\\\"q&#39;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1534:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1535:         :hyphenate_data_attrs => false))",
          "1538:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1539:         :hyphenate_data_attrs => false)) #'",
          "1540:   end",
          "",
          "[Removed Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#39;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1698:   def test_new_attribute_parsing",
          "1699:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1700:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1702:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "1704:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1705:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "1706:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
          "",
          "[Removed Lines]",
          "1701:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1703:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "[Added Lines]",
          "1701:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1703:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1713:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1714:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "1719:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
          "1720:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
          "",
          "[Removed Lines]",
          "1716:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1717:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Added Lines]",
          "1716:     assert_equal(%Q{<a a='foo &#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1717:     assert_equal(%Q{<a a='foo \\\\&#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "---------------"
        ],
        "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
          "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1129:   def test_attr_wrapper",
          "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1131:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1135:   end",
          "",
          "[Removed Lines]",
          "1132:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1132:     assert_equal(\"<p escaped=\\\"quo&#39;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q&#39;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1528:         :hyphenate_data_attrs => false))",
          "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1532:         :hyphenate_data_attrs => false)) #'",
          "1533:   end",
          "",
          "[Removed Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#39;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1691:   def test_new_attribute_parsing",
          "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1693:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1695:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "1699:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))",
          "",
          "[Removed Lines]",
          "1694:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1696:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "[Added Lines]",
          "1694:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1696:     assert_equal(%Q{<a a='foo&#39;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1706:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1707:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "1712:     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))",
          "1713:     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))",
          "",
          "[Removed Lines]",
          "1709:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Added Lines]",
          "1709:     assert_equal(%Q{<a a='foo &#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a='foo \\\\&#39; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "---------------"
        ],
        "test/pretty_results/just_stuff.xhtml||test/pretty_results/just_stuff.xhtml": [
          "File: test/pretty_results/just_stuff.xhtml -> test/pretty_results/just_stuff.xhtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
          "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
          "10: Embedded? false!",
          "11: Embedded? true!",
          "12: Embedded? true!",
          "",
          "[Removed Lines]",
          "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
          "",
          "[Added Lines]",
          "9: <strong apos='Foo&#39;s bar!'>Boo!</strong>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: <p class='article quux qux' id='article_1'>Blump</p>",
          "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
          "63: Woah inner quotes",
          "65: <p class='dynamic_self_closing' dyn='3' />",
          "66: <body>",
          "67:   hello",
          "",
          "[Removed Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
          "",
          "[Added Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#39;'></p>",
          "",
          "---------------"
        ],
        "test/results/just_stuff.xhtml||test/results/just_stuff.xhtml": [
          "File: test/results/just_stuff.xhtml -> test/results/just_stuff.xhtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
          "7: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "8: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
          "10: Embedded? false!",
          "11: Embedded? true!",
          "12: Embedded? true!",
          "",
          "[Removed Lines]",
          "9: <strong apos='Foo&#039;s bar!'>Boo!</strong>",
          "",
          "[Added Lines]",
          "9: <strong apos='Foo&#39;s bar!'>Boo!</strong>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: <p class='article quux qux' id='article_1'>Blump</p>",
          "62: <p class='article' id='foo_bar_baz_article_1'>Whee</p>",
          "63: Woah inner quotes",
          "65: <p class='dynamic_self_closing' dyn='3' />",
          "66: <body>",
          "67: hello",
          "",
          "[Removed Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>",
          "",
          "[Added Lines]",
          "64: <p class='dynamic_quote' dyn='3' quotes='single &#39;'></p>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af8257c7dbfa3108413d59331ea8be130a2a98be",
      "candidate_info": {
        "commit_hash": "af8257c7dbfa3108413d59331ea8be130a2a98be",
        "repo": "haml/haml",
        "commit_url": "https://github.com/haml/haml/commit/af8257c7dbfa3108413d59331ea8be130a2a98be",
        "files": [
          "lib/haml/attribute_builder.rb",
          "test/engine_test.rb",
          "test/pretty_engine_test.rb"
        ],
        "message": "Always use the same quotes for attributes",
        "before_after_code_files": [
          "lib/haml/attribute_builder.rb||lib/haml/attribute_builder.rb",
          "test/engine_test.rb||test/engine_test.rb",
          "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ],
          "candidate": [
            "test/engine_test.rb||test/engine_test.rb",
            "test/pretty_engine_test.rb||test/pretty_engine_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/haml/attribute_builder.rb||lib/haml/attribute_builder.rb": [
          "File: lib/haml/attribute_builder.rb -> lib/haml/attribute_builder.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:       def build_attributes(is_html, attr_wrapper, escape_attrs, hyphenate_data_attrs, attributes = {})",
          "6:           # @TODO this is an absolutely ridiculous amount of arguments. At least",
          "7:         # some of this needs to be moved into an instance method.",
          "10:         join_char        = hyphenate_data_attrs ? '-' : '_'",
          "12:         attributes.each do |key, value|",
          "",
          "[Removed Lines]",
          "8:         quote_escape     = attr_wrapper == '\"' ? \"&#x0022;\" : \"&#x0027;\"",
          "9:         other_quote_char = attr_wrapper == '\"' ? \"'\" : '\"'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:               value.to_s",
          "41:             end",
          "42:           value = Haml::Helpers.preserve(escaped)",
          "58:         end",
          "59:         result.compact!",
          "60:         result.sort!",
          "",
          "[Removed Lines]",
          "43:           if escape_attrs",
          "44:             # We want to decide whether or not to escape quotes",
          "45:             value.gsub!(/&quot;|&#x0022;/, '\"')",
          "46:             this_attr_wrapper = attr_wrapper",
          "47:             if value.include? attr_wrapper",
          "48:               if value.include? other_quote_char",
          "49:                 value.gsub!(attr_wrapper, quote_escape)",
          "50:               else",
          "51:                 this_attr_wrapper = other_quote_char",
          "52:               end",
          "53:             end",
          "54:           else",
          "55:             this_attr_wrapper = attr_wrapper",
          "56:           end",
          "57:           \" #{attr}=#{this_attr_wrapper}#{value}#{this_attr_wrapper}\"",
          "",
          "[Added Lines]",
          "41:           \" #{attr}=#{attr_wrapper}#{value}#{attr_wrapper}\"",
          "",
          "---------------"
        ],
        "test/engine_test.rb||test/engine_test.rb": [
          "File: test/engine_test.rb -> test/engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:   def test_escape_attrs_always",
          "696:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => :always))",
          "698: bar",
          "699: </div>",
          "700: HTML",
          "",
          "[Removed Lines]",
          "697: <div class='\"&amp;lt;&amp;gt;&amp;amp;\"' id='foo'>",
          "",
          "[Added Lines]",
          "697: <div class='&quot;&amp;lt;&amp;gt;&amp;amp;&quot;' id='foo'>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:     assert_equal(\"<a href='#'>Foo</a>\\n\",",
          "816:       render('%a(href=\"#\") #{\"Foo\"}'))",
          "819:   end",
          "821:   def test_case_assigned_to_var",
          "",
          "[Removed Lines]",
          "818:     assert_equal(\"<a href='#\\\"'></a>\\n\", render('%a(href=\"#\\\\\"\")'))",
          "",
          "[Added Lines]",
          "818:     assert_equal(\"<a href='#&quot;'></a>\\n\", render('%a(href=\"#\\\\\"\")'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:   def test_attr_wrapper",
          "1128:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1130:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1132:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1133:   end",
          "",
          "[Removed Lines]",
          "1129:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1129:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1131:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1534:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1535:         :hyphenate_data_attrs => false))",
          "1538:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1539:         :hyphenate_data_attrs => false)) #'",
          "1540:   end",
          "",
          "[Removed Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1537:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1698:   def test_new_attribute_parsing",
          "1699:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1701:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1703:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "1704:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1705:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "",
          "[Removed Lines]",
          "1700:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1702:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "",
          "[Added Lines]",
          "1700:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1702:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1710:   end",
          "1712:   def test_new_attribute_escaping",
          "1716:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1717:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Removed Lines]",
          "1713:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1714:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "",
          "[Added Lines]",
          "1713:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1714:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "",
          "---------------"
        ],
        "test/pretty_engine_test.rb||test/pretty_engine_test.rb": [
          "File: test/pretty_engine_test.rb -> test/pretty_engine_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "697:   def test_escape_attrs_always",
          "698:     assert_equal(<<HTML, render(<<HAML, :escape_attrs => :always))",
          "700:   bar",
          "701: </div>",
          "702: HTML",
          "",
          "[Removed Lines]",
          "699: <div class='\"&amp;lt;&amp;gt;&amp;amp;\"' id='foo'>",
          "",
          "[Added Lines]",
          "699: <div class='&quot;&amp;lt;&amp;gt;&amp;amp;&quot;' id='foo'>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "817:     assert_equal(\"<a href='#'>Foo</a>\\n\",",
          "818:       render('%a(href=\"#\") #{\"Foo\"}'))",
          "821:   end",
          "823:   def test_case_assigned_to_var",
          "",
          "[Removed Lines]",
          "820:     assert_equal(\"<a href='#\\\"'></a>\\n\", render('%a(href=\"#\\\\\"\")'))",
          "",
          "[Added Lines]",
          "820:     assert_equal(\"<a href='#&quot;'></a>\\n\", render('%a(href=\"#\\\\\"\")'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1129:   def test_attr_wrapper",
          "1130:     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))",
          "1132:     assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))",
          "1134:     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))",
          "1135:   end",
          "",
          "[Removed Lines]",
          "1131:     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "[Added Lines]",
          "1131:     assert_equal(\"<p escaped=\\\"quo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))",
          "1133:     assert_equal(\"<p escaped=\\\"q&#039;uo&quot;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1527:       render(\"%div{:data => {:one_plus_one => 1+1}}\",",
          "1528:         :hyphenate_data_attrs => false))",
          "1531:       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},",
          "1532:         :hyphenate_data_attrs => false)) #'",
          "1533:   end",
          "",
          "[Removed Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",",
          "",
          "[Added Lines]",
          "1530:     assert_equal(\"<div data-foo='Here&#039;s a &quot;quoteful&quot; string.'></div>\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1691:   def test_new_attribute_parsing",
          "1692:     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))",
          "1694:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'",
          "1696:     assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))",
          "1697:     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))",
          "1698:     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))",
          "",
          "[Removed Lines]",
          "1693:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1695:     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "",
          "[Added Lines]",
          "1693:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'",
          "1695:     assert_equal(%Q{<a a='foo&quot;bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1703:   end",
          "1705:   def test_new_attribute_escaping",
          "1709:     assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))",
          "1710:     assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))",
          "",
          "[Removed Lines]",
          "1706:     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1707:     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "",
          "[Added Lines]",
          "1706:     assert_equal(%Q{<a a='foo &quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))",
          "1707:     assert_equal(%Q{<a a='foo \\\\&quot; bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))",
          "",
          "---------------"
        ]
      }
    }
  ]
}