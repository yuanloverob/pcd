{
  "cve_id": "CVE-2016-9122",
  "cve_desc": "go-jose before 1.0.4 suffers from multiple signatures exploitation. The go-jose library supports messages with multiple signatures. However, when validating a signed message the API did not indicate which signature was valid, which could potentially lead to confusion. For example, users of the library might mistakenly read protected header values from an attached signature that was different from the one originally validated.",
  "repo": "square/go-jose",
  "patch_hash": "2c5656adca9909843c4ff50acf1d2cf8f32da7e6",
  "patch_info": {
    "commit_hash": "2c5656adca9909843c4ff50acf1d2cf8f32da7e6",
    "repo": "square/go-jose",
    "commit_url": "https://github.com/square/go-jose/commit/2c5656adca9909843c4ff50acf1d2cf8f32da7e6",
    "files": [
      "crypter.go",
      "crypter_test.go",
      "jws.go",
      "signing.go",
      "signing_test.go"
    ],
    "message": "Merge pull request #111 from square/cs/better-multi\n\nImprove multi-recipient/multi-sig handling",
    "before_after_code_files": [
      "crypter.go||crypter.go",
      "crypter_test.go||crypter_test.go",
      "jws.go||jws.go",
      "signing.go||signing.go",
      "signing_test.go||signing_test.go"
    ]
  },
  "patch_diff": {
    "crypter.go||crypter.go": [
      "File: crypter.go -> crypter.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import (",
      "20:  \"crypto/ecdsa\"",
      "21:  \"crypto/rsa\"",
      "22:  \"fmt\"",
      "23:  \"reflect\"",
      "24: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:  \"errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "292:  return obj, nil",
      "293: }",
      "296: func (obj JsonWebEncryption) Decrypt(decryptionKey interface{}) ([]byte, error) {",
      "297:  headers := obj.mergedHeaders(nil)",
      "299:  if len(headers.Crit) > 0 {",
      "300:   return nil, fmt.Errorf(\"square/go-jose: unsupported crit header\")",
      "301:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "302:  if len(obj.recipients) > 1 {",
      "303:   return nil, errors.New(\"square/go-jose: too many recipients in payload; expecting only one\")",
      "304:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "323:  authData := obj.computeAuthData()",
      "325:  var plaintext []byte",
      "327:   recipientHeaders := obj.mergedHeaders(&recipient)",
      "329:   cek, err := decrypter.decryptKey(recipientHeaders, &recipient, generator)",
      "",
      "[Removed Lines]",
      "326:  for _, recipient := range obj.recipients {",
      "",
      "[Added Lines]",
      "333:  recipient := obj.recipients[0]",
      "334:  recipientHeaders := obj.mergedHeaders(&recipient)",
      "336:  cek, err := decrypter.decryptKey(recipientHeaders, &recipient, generator)",
      "337:  if err == nil {",
      "339:   plaintext, err = cipher.decrypt(cek, authData, parts)",
      "340:  }",
      "342:  if plaintext == nil {",
      "343:   return nil, ErrCryptoFailure",
      "344:  }",
      "347:  if obj.protected.Zip != \"\" {",
      "348:   plaintext, err = decompress(obj.protected.Zip, plaintext)",
      "349:  }",
      "351:  return plaintext, err",
      "352: }",
      "358: func (obj JsonWebEncryption) DecryptMulti(decryptionKey interface{}) (int, JoseHeader, []byte, error) {",
      "359:  globalHeaders := obj.mergedHeaders(nil)",
      "361:  if len(globalHeaders.Crit) > 0 {",
      "362:   return -1, JoseHeader{}, nil, fmt.Errorf(\"square/go-jose: unsupported crit header\")",
      "363:  }",
      "365:  decrypter, err := newDecrypter(decryptionKey)",
      "366:  if err != nil {",
      "367:   return -1, JoseHeader{}, nil, err",
      "368:  }",
      "370:  cipher := getContentCipher(globalHeaders.Enc)",
      "371:  if cipher == nil {",
      "372:   return -1, JoseHeader{}, nil, fmt.Errorf(\"square/go-jose: unsupported enc value '%s'\", string(globalHeaders.Enc))",
      "373:  }",
      "375:  generator := randomKeyGenerator{",
      "376:   size: cipher.keySize(),",
      "377:  }",
      "379:  parts := &aeadParts{",
      "380:   iv:         obj.iv,",
      "381:   ciphertext: obj.ciphertext,",
      "382:   tag:        obj.tag,",
      "383:  }",
      "385:  authData := obj.computeAuthData()",
      "387:  index := -1",
      "388:  var plaintext []byte",
      "389:  var headers rawHeader",
      "391:  for i, recipient := range obj.recipients {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "332:    plaintext, err = cipher.decrypt(cek, authData, parts)",
      "333:    if err == nil {",
      "334:     break",
      "335:    }",
      "336:   }",
      "337:  }",
      "341:  }",
      "",
      "[Removed Lines]",
      "339:  if plaintext == nil {",
      "340:   return nil, ErrCryptoFailure",
      "",
      "[Added Lines]",
      "399:     index = i",
      "400:     headers = recipientHeaders",
      "406:  if plaintext == nil || err != nil {",
      "407:   return -1, JoseHeader{}, nil, ErrCryptoFailure",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "345:   plaintext, err = decompress(obj.protected.Zip, plaintext)",
      "346:  }",
      "349: }",
      "",
      "[Removed Lines]",
      "348:  return plaintext, err",
      "",
      "[Added Lines]",
      "415:  return index, headers.sanitized(), plaintext, err",
      "",
      "---------------"
    ],
    "crypter_test.go||crypter_test.go": [
      "File: crypter_test.go -> crypter_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "273:  err = enc.AddRecipient(RSA_OAEP, &rsaTestKey.PublicKey)",
      "274:  if err != nil {",
      "276:  }",
      "278:  sharedKey := []byte{",
      "",
      "[Removed Lines]",
      "275:   t.Error(\"error when adding RSA recipient\", err)",
      "",
      "[Added Lines]",
      "275:   t.Fatal(\"error when adding RSA recipient\", err)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "283:  err = enc.AddRecipient(A256GCMKW, sharedKey)",
      "284:  if err != nil {",
      "287:  }",
      "289:  input := []byte(\"Lorem ipsum dolor sit amet\")",
      "290:  obj, err := enc.Encrypt(input)",
      "291:  if err != nil {",
      "294:  }",
      "296:  msg := obj.FullSerialize()",
      "298:  parsed, err := ParseEncrypted(msg)",
      "299:  if err != nil {",
      "302:  }",
      "305:  if err != nil {",
      "308:  }",
      "310:  if bytes.Compare(input, output) != 0 {",
      "313:  }",
      "316:  if err != nil {",
      "319:  }",
      "321:  if bytes.Compare(input, output) != 0 {",
      "324:  }",
      "325: }",
      "",
      "[Removed Lines]",
      "285:   t.Error(\"error when adding AES recipient: \", err)",
      "286:   return",
      "292:   t.Error(\"error in encrypt: \", err)",
      "293:   return",
      "300:   t.Error(\"error in parse: \", err)",
      "301:   return",
      "304:  output, err := parsed.Decrypt(rsaTestKey)",
      "306:   t.Error(\"error on decrypt with RSA: \", err)",
      "307:   return",
      "311:   t.Error(\"Decrypted output does not match input: \", output, input)",
      "312:   return",
      "315:  output, err = parsed.Decrypt(sharedKey)",
      "317:   t.Error(\"error on decrypt with AES: \", err)",
      "318:   return",
      "322:   t.Error(\"Decrypted output does not match input\", output, input)",
      "323:   return",
      "",
      "[Added Lines]",
      "285:   t.Fatal(\"error when adding AES recipient: \", err)",
      "291:   t.Fatal(\"error in encrypt: \", err)",
      "298:   t.Fatal(\"error in parse: \", err)",
      "301:  i, _, output, err := parsed.DecryptMulti(rsaTestKey)",
      "303:   t.Fatal(\"error on decrypt with RSA: \", err)",
      "304:  }",
      "306:  if i != 0 {",
      "307:   t.Fatal(\"recipient index should be 0 for RSA key\")",
      "311:   t.Fatal(\"Decrypted output does not match input: \", output, input)",
      "314:  i, _, output, err = parsed.DecryptMulti(sharedKey)",
      "316:   t.Fatal(\"error on decrypt with AES: \", err)",
      "317:  }",
      "319:  if i != 1 {",
      "320:   t.Fatal(\"recipient index should be 1 for shared key\")",
      "324:   t.Fatal(\"Decrypted output does not match input\", output, input)",
      "",
      "---------------"
    ],
    "jws.go||jws.go": [
      "File: jws.go -> jws.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "43: type JsonWebSignature struct {",
      "45:  Signatures []Signature",
      "46: }",
      "",
      "[Removed Lines]",
      "44:  payload    []byte",
      "",
      "[Added Lines]",
      "44:  payload []byte",
      "",
      "---------------"
    ],
    "signing.go||signing.go": [
      "File: signing.go -> signing.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import (",
      "20:  \"crypto/ecdsa\"",
      "21:  \"crypto/rsa\"",
      "22:  \"fmt\"",
      "23: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:  \"errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "193: }",
      "196: func (obj JsonWebSignature) Verify(verificationKey interface{}) ([]byte, error) {",
      "197:  verifier, err := newVerifier(verificationKey)",
      "198:  if err != nil {",
      "199:   return nil, err",
      "200:  }",
      "203:   headers := signature.mergedHeaders()",
      "204:   if len(headers.Crit) > 0 {",
      "",
      "[Removed Lines]",
      "202:  for _, signature := range obj.Signatures {",
      "",
      "[Added Lines]",
      "205:  if len(obj.Signatures) > 1 {",
      "206:   return nil, errors.New(\"square/go-jose: too many signatures in payload; expecting only one\")",
      "207:  }",
      "209:  signature := obj.Signatures[0]",
      "210:  headers := signature.mergedHeaders()",
      "211:  if len(headers.Crit) > 0 {",
      "213:   return nil, ErrCryptoFailure",
      "214:  }",
      "216:  input := obj.computeAuthData(&signature)",
      "217:  alg := SignatureAlgorithm(headers.Alg)",
      "218:  err = verifier.verifyPayload(input, signature.Signature, alg)",
      "219:  if err == nil {",
      "220:   return obj.payload, nil",
      "221:  }",
      "223:  return nil, ErrCryptoFailure",
      "224: }",
      "230: func (obj JsonWebSignature) VerifyMulti(verificationKey interface{}) (int, Signature, []byte, error) {",
      "231:  verifier, err := newVerifier(verificationKey)",
      "232:  if err != nil {",
      "233:   return -1, Signature{}, nil, err",
      "234:  }",
      "236:  for i, signature := range obj.Signatures {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "210:   alg := SignatureAlgorithm(headers.Alg)",
      "211:   err := verifier.verifyPayload(input, signature.Signature, alg)",
      "212:   if err == nil {",
      "214:   }",
      "215:  }",
      "218: }",
      "",
      "[Removed Lines]",
      "213:    return obj.payload, nil",
      "217:  return nil, ErrCryptoFailure",
      "",
      "[Added Lines]",
      "247:    return i, signature, obj.payload, nil",
      "251:  return -1, Signature{}, nil, ErrCryptoFailure",
      "",
      "---------------"
    ],
    "signing_test.go||signing_test.go": [
      "File: signing_test.go -> signing_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:  input := []byte(\"Lorem ipsum dolor sit amet\")",
      "225:  obj, err := signer.Sign(input)",
      "226:  if err != nil {",
      "229:  }",
      "231:  _, err = obj.CompactSerialize()",
      "232:  if err == nil {",
      "234:  }",
      "236:  msg := obj.FullSerialize()",
      "238:  obj, err = ParseSigned(msg)",
      "239:  if err != nil {",
      "242:  }",
      "245:  if err != nil {",
      "248:  }",
      "250:  if bytes.Compare(output, input) != 0 {",
      "253:  }",
      "256:  if err != nil {",
      "259:  }",
      "261:  if bytes.Compare(output, input) != 0 {",
      "264:  }",
      "265: }",
      "",
      "[Removed Lines]",
      "227:   t.Error(\"error on sign: \", err)",
      "228:   return",
      "233:   t.Error(\"message with multiple recipient was compact serialized\")",
      "240:   t.Error(\"error on parse: \", err)",
      "241:   return",
      "244:  output, err := obj.Verify(&rsaTestKey.PublicKey)",
      "246:   t.Error(\"error on verify: \", err)",
      "247:   return",
      "251:   t.Error(\"input/output do not match\", output, input)",
      "252:   return",
      "255:  output, err = obj.Verify(sharedKey)",
      "257:   t.Error(\"error on verify: \", err)",
      "258:   return",
      "262:   t.Error(\"input/output do not match\", output, input)",
      "263:   return",
      "",
      "[Added Lines]",
      "227:   t.Fatal(\"error on sign: \", err)",
      "232:   t.Fatal(\"message with multiple recipient was compact serialized\")",
      "239:   t.Fatal(\"error on parse: \", err)",
      "242:  i, _, output, err := obj.VerifyMulti(&rsaTestKey.PublicKey)",
      "244:   t.Fatal(\"error on verify: \", err)",
      "245:  }",
      "247:  if i != 0 {",
      "248:   t.Fatal(\"signature index should be 0 for RSA key\")",
      "252:   t.Fatal(\"input/output do not match\", output, input)",
      "255:  i, _, output, err = obj.VerifyMulti(sharedKey)",
      "257:   t.Fatal(\"error on verify: \", err)",
      "258:  }",
      "260:  if i != 1 {",
      "261:   t.Fatal(\"signature index should be 1 for EC key\")",
      "265:   t.Fatal(\"input/output do not match\", output, input)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "350b3415970b0dd6d2ffe4574d5fc0a71a900562",
      "candidate_info": {
        "commit_hash": "350b3415970b0dd6d2ffe4574d5fc0a71a900562",
        "repo": "square/go-jose",
        "commit_url": "https://github.com/square/go-jose/commit/350b3415970b0dd6d2ffe4574d5fc0a71a900562",
        "files": [
          "crypter.go",
          "crypter_test.go",
          "jws.go",
          "signing.go",
          "signing_test.go"
        ],
        "message": "Improve multi-recipient/multi-sig handling",
        "before_after_code_files": [
          "crypter.go||crypter.go",
          "crypter_test.go||crypter_test.go",
          "jws.go||jws.go",
          "signing.go||signing.go",
          "signing_test.go||signing_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/square/go-jose/pull/111"
        ],
        "olp_code_files": {
          "patch": [
            "crypter.go||crypter.go",
            "crypter_test.go||crypter_test.go",
            "jws.go||jws.go",
            "signing.go||signing.go",
            "signing_test.go||signing_test.go"
          ],
          "candidate": [
            "crypter.go||crypter.go",
            "crypter_test.go||crypter_test.go",
            "jws.go||jws.go",
            "signing.go||signing.go",
            "signing_test.go||signing_test.go"
          ]
        }
      },
      "candidate_diff": {
        "crypter.go||crypter.go": [
          "File: crypter.go -> crypter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"crypto/ecdsa\"",
          "21:  \"crypto/rsa\"",
          "22:  \"fmt\"",
          "23:  \"reflect\"",
          "24: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:  return obj, nil",
          "293: }",
          "296: func (obj JsonWebEncryption) Decrypt(decryptionKey interface{}) ([]byte, error) {",
          "297:  headers := obj.mergedHeaders(nil)",
          "299:  if len(headers.Crit) > 0 {",
          "300:   return nil, fmt.Errorf(\"square/go-jose: unsupported crit header\")",
          "301:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:  if len(obj.recipients) > 1 {",
          "303:   return nil, errors.New(\"square/go-jose: too many recipients in payload; expecting only one\")",
          "304:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:  authData := obj.computeAuthData()",
          "325:  var plaintext []byte",
          "327:   recipientHeaders := obj.mergedHeaders(&recipient)",
          "329:   cek, err := decrypter.decryptKey(recipientHeaders, &recipient, generator)",
          "",
          "[Removed Lines]",
          "326:  for _, recipient := range obj.recipients {",
          "",
          "[Added Lines]",
          "333:  recipient := obj.recipients[0]",
          "334:  recipientHeaders := obj.mergedHeaders(&recipient)",
          "336:  cek, err := decrypter.decryptKey(recipientHeaders, &recipient, generator)",
          "337:  if err == nil {",
          "339:   plaintext, err = cipher.decrypt(cek, authData, parts)",
          "340:  }",
          "342:  if plaintext == nil {",
          "343:   return nil, ErrCryptoFailure",
          "344:  }",
          "347:  if obj.protected.Zip != \"\" {",
          "348:   plaintext, err = decompress(obj.protected.Zip, plaintext)",
          "349:  }",
          "351:  return plaintext, err",
          "352: }",
          "358: func (obj JsonWebEncryption) DecryptMulti(decryptionKey interface{}) (int, JoseHeader, []byte, error) {",
          "359:  globalHeaders := obj.mergedHeaders(nil)",
          "361:  if len(globalHeaders.Crit) > 0 {",
          "362:   return -1, JoseHeader{}, nil, fmt.Errorf(\"square/go-jose: unsupported crit header\")",
          "363:  }",
          "365:  decrypter, err := newDecrypter(decryptionKey)",
          "366:  if err != nil {",
          "367:   return -1, JoseHeader{}, nil, err",
          "368:  }",
          "370:  cipher := getContentCipher(globalHeaders.Enc)",
          "371:  if cipher == nil {",
          "372:   return -1, JoseHeader{}, nil, fmt.Errorf(\"square/go-jose: unsupported enc value '%s'\", string(globalHeaders.Enc))",
          "373:  }",
          "375:  generator := randomKeyGenerator{",
          "376:   size: cipher.keySize(),",
          "377:  }",
          "379:  parts := &aeadParts{",
          "380:   iv:         obj.iv,",
          "381:   ciphertext: obj.ciphertext,",
          "382:   tag:        obj.tag,",
          "383:  }",
          "385:  authData := obj.computeAuthData()",
          "387:  index := -1",
          "388:  var plaintext []byte",
          "389:  var headers rawHeader",
          "391:  for i, recipient := range obj.recipients {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "332:    plaintext, err = cipher.decrypt(cek, authData, parts)",
          "333:    if err == nil {",
          "334:     break",
          "335:    }",
          "336:   }",
          "337:  }",
          "341:  }",
          "",
          "[Removed Lines]",
          "339:  if plaintext == nil {",
          "340:   return nil, ErrCryptoFailure",
          "",
          "[Added Lines]",
          "399:     index = i",
          "400:     headers = recipientHeaders",
          "406:  if plaintext == nil || err != nil {",
          "407:   return -1, JoseHeader{}, nil, ErrCryptoFailure",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:   plaintext, err = decompress(obj.protected.Zip, plaintext)",
          "346:  }",
          "349: }",
          "",
          "[Removed Lines]",
          "348:  return plaintext, err",
          "",
          "[Added Lines]",
          "415:  return index, headers.sanitized(), plaintext, err",
          "",
          "---------------"
        ],
        "crypter_test.go||crypter_test.go": [
          "File: crypter_test.go -> crypter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:  err = enc.AddRecipient(RSA_OAEP, &rsaTestKey.PublicKey)",
          "274:  if err != nil {",
          "276:  }",
          "278:  sharedKey := []byte{",
          "",
          "[Removed Lines]",
          "275:   t.Error(\"error when adding RSA recipient\", err)",
          "",
          "[Added Lines]",
          "275:   t.Fatal(\"error when adding RSA recipient\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:  err = enc.AddRecipient(A256GCMKW, sharedKey)",
          "284:  if err != nil {",
          "287:  }",
          "289:  input := []byte(\"Lorem ipsum dolor sit amet\")",
          "290:  obj, err := enc.Encrypt(input)",
          "291:  if err != nil {",
          "294:  }",
          "296:  msg := obj.FullSerialize()",
          "298:  parsed, err := ParseEncrypted(msg)",
          "299:  if err != nil {",
          "302:  }",
          "305:  if err != nil {",
          "308:  }",
          "310:  if bytes.Compare(input, output) != 0 {",
          "313:  }",
          "316:  if err != nil {",
          "319:  }",
          "321:  if bytes.Compare(input, output) != 0 {",
          "324:  }",
          "325: }",
          "",
          "[Removed Lines]",
          "285:   t.Error(\"error when adding AES recipient: \", err)",
          "286:   return",
          "292:   t.Error(\"error in encrypt: \", err)",
          "293:   return",
          "300:   t.Error(\"error in parse: \", err)",
          "301:   return",
          "304:  output, err := parsed.Decrypt(rsaTestKey)",
          "306:   t.Error(\"error on decrypt with RSA: \", err)",
          "307:   return",
          "311:   t.Error(\"Decrypted output does not match input: \", output, input)",
          "312:   return",
          "315:  output, err = parsed.Decrypt(sharedKey)",
          "317:   t.Error(\"error on decrypt with AES: \", err)",
          "318:   return",
          "322:   t.Error(\"Decrypted output does not match input\", output, input)",
          "323:   return",
          "",
          "[Added Lines]",
          "285:   t.Fatal(\"error when adding AES recipient: \", err)",
          "291:   t.Fatal(\"error in encrypt: \", err)",
          "298:   t.Fatal(\"error in parse: \", err)",
          "301:  i, _, output, err := parsed.DecryptMulti(rsaTestKey)",
          "303:   t.Fatal(\"error on decrypt with RSA: \", err)",
          "304:  }",
          "306:  if i != 0 {",
          "307:   t.Fatal(\"recipient index should be 0 for RSA key\")",
          "311:   t.Fatal(\"Decrypted output does not match input: \", output, input)",
          "314:  i, _, output, err = parsed.DecryptMulti(sharedKey)",
          "316:   t.Fatal(\"error on decrypt with AES: \", err)",
          "317:  }",
          "319:  if i != 1 {",
          "320:   t.Fatal(\"recipient index should be 1 for shared key\")",
          "324:   t.Fatal(\"Decrypted output does not match input\", output, input)",
          "",
          "---------------"
        ],
        "jws.go||jws.go": [
          "File: jws.go -> jws.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: type JsonWebSignature struct {",
          "45:  Signatures []Signature",
          "46: }",
          "",
          "[Removed Lines]",
          "44:  payload    []byte",
          "",
          "[Added Lines]",
          "44:  payload []byte",
          "",
          "---------------"
        ],
        "signing.go||signing.go": [
          "File: signing.go -> signing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"crypto/ecdsa\"",
          "21:  \"crypto/rsa\"",
          "22:  \"fmt\"",
          "23: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: }",
          "196: func (obj JsonWebSignature) Verify(verificationKey interface{}) ([]byte, error) {",
          "197:  verifier, err := newVerifier(verificationKey)",
          "198:  if err != nil {",
          "199:   return nil, err",
          "200:  }",
          "203:   headers := signature.mergedHeaders()",
          "204:   if len(headers.Crit) > 0 {",
          "",
          "[Removed Lines]",
          "202:  for _, signature := range obj.Signatures {",
          "",
          "[Added Lines]",
          "205:  if len(obj.Signatures) > 1 {",
          "206:   return nil, errors.New(\"square/go-jose: too many signatures in payload; expecting only one\")",
          "207:  }",
          "209:  signature := obj.Signatures[0]",
          "210:  headers := signature.mergedHeaders()",
          "211:  if len(headers.Crit) > 0 {",
          "213:   return nil, ErrCryptoFailure",
          "214:  }",
          "216:  input := obj.computeAuthData(&signature)",
          "217:  alg := SignatureAlgorithm(headers.Alg)",
          "218:  err = verifier.verifyPayload(input, signature.Signature, alg)",
          "219:  if err == nil {",
          "220:   return obj.payload, nil",
          "221:  }",
          "223:  return nil, ErrCryptoFailure",
          "224: }",
          "230: func (obj JsonWebSignature) VerifyMulti(verificationKey interface{}) (int, Signature, []byte, error) {",
          "231:  verifier, err := newVerifier(verificationKey)",
          "232:  if err != nil {",
          "233:   return -1, Signature{}, nil, err",
          "234:  }",
          "236:  for i, signature := range obj.Signatures {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210:   alg := SignatureAlgorithm(headers.Alg)",
          "211:   err := verifier.verifyPayload(input, signature.Signature, alg)",
          "212:   if err == nil {",
          "214:   }",
          "215:  }",
          "218: }",
          "",
          "[Removed Lines]",
          "213:    return obj.payload, nil",
          "217:  return nil, ErrCryptoFailure",
          "",
          "[Added Lines]",
          "247:    return i, signature, obj.payload, nil",
          "251:  return -1, Signature{}, nil, ErrCryptoFailure",
          "",
          "---------------"
        ],
        "signing_test.go||signing_test.go": [
          "File: signing_test.go -> signing_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:  input := []byte(\"Lorem ipsum dolor sit amet\")",
          "225:  obj, err := signer.Sign(input)",
          "226:  if err != nil {",
          "229:  }",
          "231:  _, err = obj.CompactSerialize()",
          "232:  if err == nil {",
          "234:  }",
          "236:  msg := obj.FullSerialize()",
          "238:  obj, err = ParseSigned(msg)",
          "239:  if err != nil {",
          "242:  }",
          "245:  if err != nil {",
          "248:  }",
          "250:  if bytes.Compare(output, input) != 0 {",
          "253:  }",
          "256:  if err != nil {",
          "259:  }",
          "261:  if bytes.Compare(output, input) != 0 {",
          "264:  }",
          "265: }",
          "",
          "[Removed Lines]",
          "227:   t.Error(\"error on sign: \", err)",
          "228:   return",
          "233:   t.Error(\"message with multiple recipient was compact serialized\")",
          "240:   t.Error(\"error on parse: \", err)",
          "241:   return",
          "244:  output, err := obj.Verify(&rsaTestKey.PublicKey)",
          "246:   t.Error(\"error on verify: \", err)",
          "247:   return",
          "251:   t.Error(\"input/output do not match\", output, input)",
          "252:   return",
          "255:  output, err = obj.Verify(sharedKey)",
          "257:   t.Error(\"error on verify: \", err)",
          "258:   return",
          "262:   t.Error(\"input/output do not match\", output, input)",
          "263:   return",
          "",
          "[Added Lines]",
          "227:   t.Fatal(\"error on sign: \", err)",
          "232:   t.Fatal(\"message with multiple recipient was compact serialized\")",
          "239:   t.Fatal(\"error on parse: \", err)",
          "242:  i, _, output, err := obj.VerifyMulti(&rsaTestKey.PublicKey)",
          "244:   t.Fatal(\"error on verify: \", err)",
          "245:  }",
          "247:  if i != 0 {",
          "248:   t.Fatal(\"signature index should be 0 for RSA key\")",
          "252:   t.Fatal(\"input/output do not match\", output, input)",
          "255:  i, _, output, err = obj.VerifyMulti(sharedKey)",
          "257:   t.Fatal(\"error on verify: \", err)",
          "258:  }",
          "260:  if i != 1 {",
          "261:   t.Fatal(\"signature index should be 1 for EC key\")",
          "265:   t.Fatal(\"input/output do not match\", output, input)",
          "",
          "---------------"
        ]
      }
    }
  ]
}