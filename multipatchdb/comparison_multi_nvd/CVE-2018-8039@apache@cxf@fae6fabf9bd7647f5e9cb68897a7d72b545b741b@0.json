{
  "cve_id": "CVE-2018-8039",
  "cve_desc": "It is possible to configure Apache CXF to use the com.sun.net.ssl implementation via 'System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");'. When this system property is set, CXF uses some reflection to try to make the HostnameVerifier work with the old com.sun.net.ssl.HostnameVerifier interface. However, the default HostnameVerifier implementation in CXF does not implement the method in this interface, and an exception is thrown. However, in Apache CXF prior to 3.2.5 and 3.1.16 the exception is caught in the reflection code and not properly propagated. What this means is that if you are using the com.sun.net.ssl stack with CXF, an error with TLS hostname verification will not be thrown, leaving a CXF client subject to man-in-the-middle attacks.",
  "repo": "apache/cxf",
  "patch_hash": "fae6fabf9bd7647f5e9cb68897a7d72b545b741b",
  "patch_info": {
    "commit_hash": "fae6fabf9bd7647f5e9cb68897a7d72b545b741b",
    "repo": "apache/cxf",
    "commit_url": "https://github.com/apache/cxf/commit/fae6fabf9bd7647f5e9cb68897a7d72b545b741b",
    "files": [
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
      "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
      "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
      "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-client-bethal.xml",
      "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-server-bethal.xml"
    ],
    "message": "Fix hostname verification using the deprecated SSL stack",
    "before_after_code_files": [
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
      "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
      "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
      "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
    ]
  },
  "patch_diff": {
    "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java": [
      "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:             return false;",
      "40:         }",
      "41:     }",
      "42: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     public boolean verify(final String host, final String certHostname) {",
      "44:         return certHostname != null && !certHostname.isEmpty();",
      "45:     }",
      "",
      "---------------"
    ],
    "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java": [
      "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "182:                         try {",
      "183:                             return super.invoke(proxy, method, args);",
      "184:                         } catch (Exception ex) {",
      "186:                         }",
      "187:                     }",
      "188:                 };",
      "",
      "[Removed Lines]",
      "185:                             return true;",
      "",
      "[Added Lines]",
      "185:                             return false;",
      "",
      "---------------"
    ],
    "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java": [
      "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:         }",
      "131:     }",
      "133:     static void matchIPAddress(final String host, final List<String> subjectAlts) throws SSLException {",
      "134:         for (int i = 0; i < subjectAlts.size(); i++) {",
      "135:             final String subjectAlt = subjectAlts.get(i);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:     public boolean verify(final String host, final String certHostname) {",
      "134:         try {",
      "135:             matchCN(host, certHostname, this.publicSuffixMatcher);",
      "136:             return true;",
      "137:         } catch (SSLException ex) {",
      "138:             if (LOG.isLoggable(Level.FINE)) {",
      "139:                 LOG.log(Level.FINE, ex.getMessage(), ex);",
      "140:             }",
      "141:             return false;",
      "142:         }",
      "143:     }",
      "",
      "---------------"
    ],
    "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java": [
      "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: package org.apache.cxf.systest.https.hostname;",
      "22: import java.net.URL;",
      "24: import org.apache.cxf.Bus;",
      "25: import org.apache.cxf.BusFactory;",
      "26: import org.apache.cxf.bus.spring.SpringBusFactory;",
      "27: import org.apache.cxf.testutil.common.AbstractBusTestServerBase;",
      "29: public class HostnameVerificationDeprecatedServer extends AbstractBusTestServerBase {",
      "31:     public HostnameVerificationDeprecatedServer() {",
      "33:     }",
      "35:     protected void run()  {",
      "36:         URL busFile = HostnameVerificationDeprecatedServer.class.getResource(\"hostname-server-bethal.xml\");",
      "37:         Bus busLocal = new SpringBusFactory().createBus(busFile);",
      "38:         BusFactory.setDefaultBus(busLocal);",
      "39:         setBus(busLocal);",
      "41:         try {",
      "42:             new HostnameVerificationDeprecatedServer();",
      "43:         } catch (Exception e) {",
      "44:             e.printStackTrace();",
      "45:         }",
      "46:     }",
      "47: }",
      "",
      "---------------"
    ],
    "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java": [
      "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: package org.apache.cxf.systest.https.hostname;",
      "22: import java.net.URL;",
      "24: import javax.xml.ws.BindingProvider;",
      "26: import org.apache.cxf.Bus;",
      "27: import org.apache.cxf.BusFactory;",
      "28: import org.apache.cxf.bus.spring.SpringBusFactory;",
      "29: import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;",
      "30: import org.apache.hello_world.Greeter;",
      "31: import org.apache.hello_world.services.SOAPService;",
      "33: import org.junit.AfterClass;",
      "34: import org.junit.BeforeClass;",
      "41: public class HostnameVerificationDeprecatedTest extends AbstractBusClientServerTestBase {",
      "42:     static final String PORT = allocatePort(HostnameVerificationDeprecatedServer.class);",
      "43:     static final String PORT2 = allocatePort(HostnameVerificationDeprecatedServer.class, 2);",
      "45:     @BeforeClass",
      "46:     public static void startServers() throws Exception {",
      "47:         System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");",
      "48:         assertTrue(",
      "49:             \"Server failed to launch\",",
      "52:             launchServer(HostnameVerificationDeprecatedServer.class, true)",
      "53:         );",
      "54:     }",
      "56:     @AfterClass",
      "57:     public static void cleanup() throws Exception {",
      "58:         System.clearProperty(\"java.protocol.handler.pkgs\");",
      "59:         stopAllServers();",
      "60:     }",
      "64:     @org.junit.Test",
      "65:     public void testLocalhostNotMatching() throws Exception {",
      "66:         SpringBusFactory bf = new SpringBusFactory();",
      "67:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client-bethal.xml\");",
      "69:         Bus bus = bf.createBus(busFile.toString());",
      "70:         BusFactory.setDefaultBus(bus);",
      "71:         BusFactory.setThreadDefaultBus(bus);",
      "73:         URL url = SOAPService.WSDL_LOCATION;",
      "74:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
      "75:         assertNotNull(\"Service is null\", service);",
      "76:         final Greeter port = service.getHttpsPort();",
      "77:         assertNotNull(\"Port is null\", port);",
      "79:         updateAddressPort(port, PORT);",
      "81:         try {",
      "82:             port.greetMe(\"Kitty\");",
      "83:             fail(\"Failure expected on the hostname verification\");",
      "84:         } catch (Exception ex) {",
      "86:         }",
      "88:         ((java.io.Closeable)port).close();",
      "89:         bus.shutdown(true);",
      "90:     }",
      "94:     @org.junit.Test",
      "95:     public void testNoSubjectAlternativeNameCNMatch() throws Exception {",
      "96:         SpringBusFactory bf = new SpringBusFactory();",
      "97:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client.xml\");",
      "99:         Bus bus = bf.createBus(busFile.toString());",
      "100:         BusFactory.setDefaultBus(bus);",
      "101:         BusFactory.setThreadDefaultBus(bus);",
      "103:         URL url = SOAPService.WSDL_LOCATION;",
      "104:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
      "105:         assertNotNull(\"Service is null\", service);",
      "106:         final Greeter port = service.getHttpsPort();",
      "107:         assertNotNull(\"Port is null\", port);",
      "109:         updateAddressPort(port, PORT2);",
      "111:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
      "114:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
      "116:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
      "118:         ((java.io.Closeable)port).close();",
      "119:         bus.shutdown(true);",
      "120:     }",
      "121: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ed6208f987ff72e4c4d2cf8a6b1ec9b27575d4b",
      "candidate_info": {
        "commit_hash": "8ed6208f987ff72e4c4d2cf8a6b1ec9b27575d4b",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/8ed6208f987ff72e4c4d2cf8a6b1ec9b27575d4b",
        "files": [
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-client-bethal.xml",
          "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-server-bethal.xml"
        ],
        "message": "Fix hostname verification using the deprecated SSL stack\n\n(cherry picked from commit fae6fabf9bd7647f5e9cb68897a7d72b545b741b)",
        "before_after_code_files": [
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ],
          "candidate": [
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ]
        }
      },
      "candidate_diff": {
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/AllowAllHostnameVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:             return false;",
          "40:         }",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     public boolean verify(final String host, final String certHostname) {",
          "44:         return certHostname != null && !certHostname.isEmpty();",
          "45:     }",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                         try {",
          "194:                             return super.invoke(proxy, method, args);",
          "195:                         } catch (Exception ex) {",
          "197:                         }",
          "198:                     }",
          "199:                 };",
          "",
          "[Removed Lines]",
          "196:                             return true;",
          "",
          "[Added Lines]",
          "196:                             return false;",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:         }",
          "131:     }",
          "133:     static void matchIPAddress(final String host, final List<String> subjectAlts) throws SSLException {",
          "134:         for (int i = 0; i < subjectAlts.size(); i++) {",
          "135:             final String subjectAlt = subjectAlts.get(i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     public boolean verify(final String host, final String certHostname) {",
          "134:         try {",
          "135:             matchCN(host, certHostname, this.publicSuffixMatcher);",
          "136:             return true;",
          "137:         } catch (SSLException ex) {",
          "138:             if (LOG.isLoggable(Level.FINE)) {",
          "139:                 LOG.log(Level.FINE, ex.getMessage(), ex);",
          "140:             }",
          "141:             return false;",
          "142:         }",
          "143:     }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import org.apache.cxf.Bus;",
          "25: import org.apache.cxf.BusFactory;",
          "26: import org.apache.cxf.bus.spring.SpringBusFactory;",
          "27: import org.apache.cxf.testutil.common.AbstractBusTestServerBase;",
          "29: public class HostnameVerificationDeprecatedServer extends AbstractBusTestServerBase {",
          "31:     public HostnameVerificationDeprecatedServer() {",
          "33:     }",
          "35:     protected void run()  {",
          "36:         URL busFile = HostnameVerificationDeprecatedServer.class.getResource(\"hostname-server-bethal.xml\");",
          "37:         Bus busLocal = new SpringBusFactory().createBus(busFile);",
          "38:         BusFactory.setDefaultBus(busLocal);",
          "39:         setBus(busLocal);",
          "41:         try {",
          "42:             new HostnameVerificationDeprecatedServer();",
          "43:         } catch (Exception e) {",
          "44:             e.printStackTrace();",
          "45:         }",
          "46:     }",
          "47: }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import javax.xml.ws.BindingProvider;",
          "26: import org.apache.cxf.Bus;",
          "27: import org.apache.cxf.BusFactory;",
          "28: import org.apache.cxf.bus.spring.SpringBusFactory;",
          "29: import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;",
          "30: import org.apache.hello_world.Greeter;",
          "31: import org.apache.hello_world.services.SOAPService;",
          "33: import org.junit.AfterClass;",
          "34: import org.junit.BeforeClass;",
          "41: public class HostnameVerificationDeprecatedTest extends AbstractBusClientServerTestBase {",
          "42:     static final String PORT = allocatePort(HostnameVerificationDeprecatedServer.class);",
          "43:     static final String PORT2 = allocatePort(HostnameVerificationDeprecatedServer.class, 2);",
          "45:     @BeforeClass",
          "46:     public static void startServers() throws Exception {",
          "47:         System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");",
          "48:         assertTrue(",
          "49:             \"Server failed to launch\",",
          "52:             launchServer(HostnameVerificationDeprecatedServer.class, true)",
          "53:         );",
          "54:     }",
          "56:     @AfterClass",
          "57:     public static void cleanup() throws Exception {",
          "58:         System.clearProperty(\"java.protocol.handler.pkgs\");",
          "59:         stopAllServers();",
          "60:     }",
          "64:     @org.junit.Test",
          "65:     public void testLocalhostNotMatching() throws Exception {",
          "66:         SpringBusFactory bf = new SpringBusFactory();",
          "67:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client-bethal.xml\");",
          "69:         Bus bus = bf.createBus(busFile.toString());",
          "70:         BusFactory.setDefaultBus(bus);",
          "71:         BusFactory.setThreadDefaultBus(bus);",
          "73:         URL url = SOAPService.WSDL_LOCATION;",
          "74:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "75:         assertNotNull(\"Service is null\", service);",
          "76:         final Greeter port = service.getHttpsPort();",
          "77:         assertNotNull(\"Port is null\", port);",
          "79:         updateAddressPort(port, PORT);",
          "81:         try {",
          "82:             port.greetMe(\"Kitty\");",
          "83:             fail(\"Failure expected on the hostname verification\");",
          "84:         } catch (Exception ex) {",
          "86:         }",
          "88:         ((java.io.Closeable)port).close();",
          "89:         bus.shutdown(true);",
          "90:     }",
          "94:     @org.junit.Test",
          "95:     public void testNoSubjectAlternativeNameCNMatch() throws Exception {",
          "96:         SpringBusFactory bf = new SpringBusFactory();",
          "97:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client.xml\");",
          "99:         Bus bus = bf.createBus(busFile.toString());",
          "100:         BusFactory.setDefaultBus(bus);",
          "101:         BusFactory.setThreadDefaultBus(bus);",
          "103:         URL url = SOAPService.WSDL_LOCATION;",
          "104:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "105:         assertNotNull(\"Service is null\", service);",
          "106:         final Greeter port = service.getHttpsPort();",
          "107:         assertNotNull(\"Port is null\", port);",
          "109:         updateAddressPort(port, PORT2);",
          "111:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "114:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "116:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "118:         ((java.io.Closeable)port).close();",
          "119:         bus.shutdown(true);",
          "120:     }",
          "121: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7808ae48865df413346f523ca6e8df7bcedb2091",
      "candidate_info": {
        "commit_hash": "7808ae48865df413346f523ca6e8df7bcedb2091",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/7808ae48865df413346f523ca6e8df7bcedb2091",
        "files": [
          "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java"
        ],
        "message": "CXF-8037 - Apache CXF (AsyncHTTPConduit) ignores system keyStore property",
        "before_after_code_files": [
          "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java||rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ],
          "candidate": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ]
        }
      },
      "candidate_diff": {
        "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java||rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java": [
          "File: rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java -> rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:             ctx = provider == null ? SSLContext.getInstance(protocol) : SSLContext",
          "893:                 .getInstance(protocol, provider);",
          "896:             KeyManager[] keyManagers = tlsClientParameters.getKeyManagers();",
          "897:             KeyManager[] configuredKeyManagers =",
          "898:                 org.apache.cxf.transport.https.SSLUtils.configureKeyManagersWithCertAlias(",
          "899:                     tlsClientParameters, keyManagers);",
          "",
          "[Removed Lines]",
          "894:             ctx.getClientSessionContext().setSessionTimeout(tlsClientParameters.getSslCacheTimeout());",
          "",
          "[Added Lines]",
          "896:             if (keyManagers == null) {",
          "897:                 keyManagers = org.apache.cxf.configuration.jsse.SSLUtils.getDefaultKeyStoreManagers(LOG);",
          "898:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:             }",
          "906:             ctx.init(configuredKeyManagers, trustManagers, tlsClientParameters.getSecureRandom());",
          "907:         }",
          "909:         sslContext = ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:             if (ctx.getClientSessionContext() != null) {",
          "911:                 ctx.getClientSessionContext().setSessionTimeout(tlsClientParameters.getSslCacheTimeout());",
          "912:             }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.net.URL;",
          "23: import java.security.cert.CertificateException;",
          "24: import java.security.cert.X509Certificate;",
          "25: import java.util.Collections;",
          "27: import javax.crypto.Cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Arrays;",
          "26: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.junit.AfterClass;",
          "47: import org.junit.Assume;",
          "48: import org.junit.BeforeClass;",
          "50: import static org.junit.Assert.assertEquals;",
          "51: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.junit.runner.RunWith;",
          "52: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: public class CipherSuitesTest extends AbstractBusClientServerTestBase {",
          "59:     static final boolean UNRESTRICTED_POLICIES_INSTALLED;",
          "60:     static {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: @RunWith(value = org.junit.runners.Parameterized.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:     static final String PORT4 = allocatePort(CipherSuitesServer.class, 4);",
          "84:     static final String PORT5 = allocatePort(CipherSuitesServer.class, 5);",
          "86:     @BeforeClass",
          "87:     public static void startServers() throws Exception {",
          "88:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     final Boolean async;",
          "93:     public CipherSuitesTest(Boolean async) {",
          "94:         this.async = async;",
          "95:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93:         );",
          "94:     }",
          "96:     @AfterClass",
          "97:     public static void cleanup() throws Exception {",
          "98:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     @Parameters(name = \"{0}\")",
          "108:     public static Collection<Boolean> data() {",
          "110:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "111:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "102:     @org.junit.Test",
          "103:     public void testAESIncluded() throws Exception {",
          "128:         SpringBusFactory bf = new SpringBusFactory();",
          "129:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "",
          "[Removed Lines]",
          "104:         SpringBusFactory bf = new SpringBusFactory();",
          "105:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "107:         Bus bus = bf.createBus(busFile.toString());",
          "108:         BusFactory.setDefaultBus(bus);",
          "109:         BusFactory.setThreadDefaultBus(bus);",
          "111:         URL url = SOAPService.WSDL_LOCATION;",
          "112:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "113:         assertNotNull(\"Service is null\", service);",
          "114:         final Greeter port = service.getHttpsPort();",
          "115:         assertNotNull(\"Port is null\", port);",
          "117:         updateAddressPort(port, PORT);",
          "119:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "121:         ((java.io.Closeable)port).close();",
          "122:         bus.shutdown(true);",
          "123:     }",
          "126:     @org.junit.Test",
          "127:     public void testAESIncludedAsync() throws Exception {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "139:         assertNotNull(\"Port is null\", port);",
          "144:         updateAddressPort(port, PORT);",
          "",
          "[Removed Lines]",
          "142:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "136:         if (async) {",
          "137:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "138:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "174:         final Greeter port = service.getHttpsPort();",
          "175:         assertNotNull(\"Port is null\", port);",
          "177:         updateAddressPort(port, PORT4);",
          "179:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:         if (async) {",
          "175:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "176:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201:         updateAddressPort(port, PORT);",
          "235:         try {",
          "236:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "203:         try {",
          "204:             port.greetMe(\"Kitty\");",
          "205:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "206:         } catch (Exception ex) {",
          "208:         }",
          "210:         ((java.io.Closeable)port).close();",
          "211:         bus.shutdown(true);",
          "212:     }",
          "215:     @org.junit.Test",
          "216:     public void testClientDHEServerExcludesIncludedAsync() throws Exception {",
          "217:         SpringBusFactory bf = new SpringBusFactory();",
          "218:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-dhe-client.xml\");",
          "220:         Bus bus = bf.createBus(busFile.toString());",
          "221:         BusFactory.setDefaultBus(bus);",
          "222:         BusFactory.setThreadDefaultBus(bus);",
          "224:         URL url = SOAPService.WSDL_LOCATION;",
          "225:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "226:         assertNotNull(\"Service is null\", service);",
          "227:         final Greeter port = service.getHttpsPort();",
          "228:         assertNotNull(\"Port is null\", port);",
          "231:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "233:         updateAddressPort(port, PORT);",
          "",
          "[Added Lines]",
          "205:         if (async) {",
          "206:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "207:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "262:         updateAddressPort(port, PORT2);",
          "291:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "264:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "266:         ((java.io.Closeable)port).close();",
          "267:         bus.shutdown(true);",
          "268:     }",
          "271:     @org.junit.Test",
          "272:     public void testDHEIncludedAsync() throws Exception {",
          "273:         SpringBusFactory bf = new SpringBusFactory();",
          "274:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-dhe-client.xml\");",
          "276:         Bus bus = bf.createBus(busFile.toString());",
          "277:         BusFactory.setDefaultBus(bus);",
          "278:         BusFactory.setThreadDefaultBus(bus);",
          "280:         URL url = SOAPService.WSDL_LOCATION;",
          "281:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "282:         assertNotNull(\"Service is null\", service);",
          "283:         final Greeter port = service.getHttpsPort();",
          "284:         assertNotNull(\"Port is null\", port);",
          "287:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "289:         updateAddressPort(port, PORT2);",
          "",
          "[Added Lines]",
          "239:         if (async) {",
          "240:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "241:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "313:         updateAddressPort(port, PORT2);",
          "347:         try {",
          "348:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "315:         try {",
          "316:             port.greetMe(\"Kitty\");",
          "317:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "318:         } catch (Exception ex) {",
          "320:         }",
          "322:         ((java.io.Closeable)port).close();",
          "323:         bus.shutdown(true);",
          "324:     }",
          "327:     @org.junit.Test",
          "328:     public void testClientECDHEServerDHEIncludedAsync() throws Exception {",
          "329:         SpringBusFactory bf = new SpringBusFactory();",
          "330:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "332:         Bus bus = bf.createBus(busFile.toString());",
          "333:         BusFactory.setDefaultBus(bus);",
          "334:         BusFactory.setThreadDefaultBus(bus);",
          "336:         URL url = SOAPService.WSDL_LOCATION;",
          "337:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "338:         assertNotNull(\"Service is null\", service);",
          "339:         final Greeter port = service.getHttpsPort();",
          "340:         assertNotNull(\"Port is null\", port);",
          "343:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "345:         updateAddressPort(port, PORT2);",
          "",
          "[Added Lines]",
          "268:         if (async) {",
          "269:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "270:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "379:         updateAddressPort(port, PORT);",
          "381:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "383:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:         if (async) {",
          "308:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "309:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "408:         updateAddressPort(port, PORT);",
          "410:         Client client = ClientProxy.getClient(port);",
          "411:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:         if (async) {",
          "342:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "343:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "453:         updateAddressPort(port, PORT);",
          "455:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "457:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391:         if (async) {",
          "392:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "393:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "483:         updateAddressPort(port, PORT);",
          "485:         Client client = ClientProxy.getClient(port);",
          "486:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:         if (async) {",
          "427:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "428:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "527:         updateAddressPort(port, PORT);",
          "529:         Client client = ClientProxy.getClient(port);",
          "530:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:         if (async) {",
          "476:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "477:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "565:         updateAddressPort(port, PORT);",
          "567:         Client client = ClientProxy.getClient(port);",
          "568:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "518:         if (async) {",
          "519:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "520:         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "604:         updateAddressPort(port, PORT5);",
          "606:         try {",
          "607:             port.greetMe(\"Kitty\");",
          "608:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "562:         if (async) {",
          "563:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "564:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.security.Security;",
          "26: import java.security.cert.CertificateException;",
          "27: import java.security.cert.X509Certificate;",
          "29: import javax.net.ssl.HostnameVerifier;",
          "30: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.util.Arrays;",
          "29: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import org.junit.AfterClass;",
          "56: import org.junit.Assume;",
          "57: import org.junit.BeforeClass;",
          "59: import static org.junit.Assert.assertEquals;",
          "60: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: import org.junit.runner.RunWith;",
          "61: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: public class ClientAuthTest extends AbstractBusClientServerTestBase {",
          "68:     static final String PORT = allocatePort(ClientAuthServer.class);",
          "69:     static final String PORT2 = allocatePort(ClientAuthServer.class, 2);",
          "71:     @BeforeClass",
          "72:     public static void startServers() throws Exception {",
          "73:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: @RunWith(value = org.junit.runners.Parameterized.class)",
          "76:     final Boolean async;",
          "78:     public ClientAuthTest(Boolean async) {",
          "79:         this.async = async;",
          "80:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:         );",
          "79:     }",
          "81:     @AfterClass",
          "82:     public static void cleanup() throws Exception {",
          "83:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     @Parameters(name = \"{0}\")",
          "93:     public static Collection<Boolean> data() {",
          "95:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:         updateAddressPort(port, PORT);",
          "104:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "106:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         if (async) {",
          "123:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "124:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:         updateAddressPort(port, PORT);",
          "128:         try {",
          "129:             port.greetMe(\"Kitty\");",
          "130:             fail(\"Failure expected on an untrusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:         if (async) {",
          "152:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "153:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:         updateAddressPort(port, PORT);",
          "157:         try {",
          "158:             port.greetMe(\"Kitty\");",
          "159:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:         if (async) {",
          "186:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "187:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:         bus.shutdown(true);",
          "166:     }",
          "169:     @org.junit.Test",
          "170:     public void testChainTrust() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:     @org.junit.Test",
          "203:     @org.junit.Ignore",
          "204:     public void testSystemPropertiesWithEmptyKeystoreConfig() throws Exception {",
          "205:         try {",
          "206:             System.setProperty(\"javax.net.ssl.keyStore\", \"keys/Morpit.jks\");",
          "207:             System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "208:             System.setProperty(\"javax.net.ssl.keyPassword\", \"password\");",
          "209:             System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");",
          "210:             SpringBusFactory bf = new SpringBusFactory();",
          "211:             URL busFile = ClientAuthTest.class.getResource(\"client-no-auth.xml\");",
          "213:             Bus bus = bf.createBus(busFile.toString());",
          "214:             BusFactory.setDefaultBus(bus);",
          "215:             BusFactory.setThreadDefaultBus(bus);",
          "217:             URL url = SOAPService.WSDL_LOCATION;",
          "218:             SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "219:             assertNotNull(\"Service is null\", service);",
          "220:             final Greeter port = service.getHttpsPort();",
          "221:             assertNotNull(\"Port is null\", port);",
          "223:             updateAddressPort(port, PORT);",
          "226:             if (async) {",
          "227:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "228:             }",
          "230:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "232:             ((java.io.Closeable)port).close();",
          "233:             bus.shutdown(true);",
          "234:         }  finally {",
          "235:             System.clearProperty(\"javax.net.ssl.keyStore\");",
          "236:             System.clearProperty(\"javax.net.ssl.keyStorePassword\");",
          "237:             System.clearProperty(\"javax.net.ssl.keyPassword\");",
          "238:             System.clearProperty(\"javax.net.ssl.keyStoreType\");",
          "239:         }",
          "240:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "184:         updateAddressPort(port, PORT2);",
          "186:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "188:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:         if (async) {",
          "262:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "263:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "208:         updateAddressPort(port, PORT2);",
          "210:         try {",
          "211:             port.greetMe(\"Kitty\");",
          "212:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:         if (async) {",
          "291:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "292:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "237:         updateAddressPort(port, PORT);",
          "239:         try {",
          "240:             port.greetMe(\"Kitty\");",
          "241:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:         if (async) {",
          "325:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "326:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "266:         updateAddressPort(port, PORT2);",
          "268:         try {",
          "269:             port.greetMe(\"Kitty\");",
          "270:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:         if (async) {",
          "359:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "360:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "345:         assertNotNull(\"Port is null\", port);",
          "347:         updateAddressPort(port, PORT);",
          "348:         Client client = ClientProxy.getClient(port);",
          "349:         HTTPConduit http = (HTTPConduit) client.getConduit();",
          "350:         http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:         if (async) {",
          "445:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "446:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "363:         assertNotNull(\"Port is null\", port);",
          "365:         updateAddressPort(port, PORT2);",
          "366:         client = ClientProxy.getClient(port);",
          "367:         http = (HTTPConduit) client.getConduit();",
          "368:         http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:         if (async) {",
          "469:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "470:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "410:             assertNotNull(\"Port is null\", port);",
          "412:             updateAddressPort(port, PORT);",
          "413:             Client client = ClientProxy.getClient(port);",
          "414:             HTTPConduit http = (HTTPConduit) client.getConduit();",
          "415:             http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:             if (async) {",
          "522:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "523:             }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "435:         updateAddressPort(port, PORT);",
          "438:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "439:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "550:         if (async) {",
          "551:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "552:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "480:         updateAddressPort(port, PORT);",
          "483:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "484:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:         if (async) {",
          "601:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "602:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import javax.net.ssl.HostnameVerifier;",
          "25: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Arrays;",
          "24: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.junit.AfterClass;",
          "40: import org.junit.BeforeClass;",
          "42: import static org.junit.Assert.assertEquals;",
          "43: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.junit.runner.RunWith;",
          "44: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: public class HostnameVerificationDeprecatedTest extends AbstractBusClientServerTestBase {",
          "53:     static final String PORT = allocatePort(HostnameVerificationDeprecatedServer.class);",
          "54:     static final String PORT2 = allocatePort(HostnameVerificationDeprecatedServer.class, 2);",
          "55:     static final String PORT3 = allocatePort(HostnameVerificationDeprecatedServer.class, 3);",
          "57:     @BeforeClass",
          "58:     public static void startServers() throws Exception {",
          "59:         System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: @RunWith(value = org.junit.runners.Parameterized.class)",
          "62:     final Boolean async;",
          "64:     public HostnameVerificationDeprecatedTest(Boolean async) {",
          "65:         this.async = async;",
          "66:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:         );",
          "66:     }",
          "68:     @AfterClass",
          "69:     public static void cleanup() throws Exception {",
          "70:         System.clearProperty(\"java.protocol.handler.pkgs\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     @Parameters(name = \"{0}\")",
          "80:     public static Collection<Boolean> data() {",
          "82:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "83:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:         updateAddressPort(port, PORT);",
          "93:         try {",
          "94:             port.greetMe(\"Kitty\");",
          "95:             fail(\"Failure expected on the hostname verification\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:         if (async) {",
          "112:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "113:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:         updateAddressPort(port, PORT);",
          "122:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "124:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:         if (async) {",
          "146:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "147:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "161:             updateAddressPort(port, PORT);",
          "168:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "163:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "166:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "191:             if (async) {",
          "192:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "193:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "209:             updateAddressPort(port, PORT);",
          "211:             TLSClientParameters clientParameters = new TLSClientParameters();",
          "212:             clientParameters.setUseHttpsURLConnectionDefaultHostnameVerifier(true);",
          "213:             Client client = ClientProxy.getClient(port);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:             if (async) {",
          "240:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "241:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "216:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "223:             ((java.io.Closeable)port).close();",
          "224:         } finally {",
          "225:             if (hostnameVerifier != null) {",
          "",
          "[Removed Lines]",
          "219:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "221:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "251:         updateAddressPort(port, PORT2);",
          "258:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "253:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "256:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "281:         if (async) {",
          "282:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "283:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "280:         updateAddressPort(port, PORT3);",
          "287:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "282:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "285:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "310:         if (async) {",
          "311:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "312:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import javax.net.ssl.HostnameVerifier;",
          "25: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Arrays;",
          "24: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.junit.AfterClass;",
          "40: import org.junit.BeforeClass;",
          "42: import static org.junit.Assert.assertEquals;",
          "43: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.junit.runner.RunWith;",
          "44: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: public class HostnameVerificationTest extends AbstractBusClientServerTestBase {",
          "55:     static final String PORT = allocatePort(HostnameVerificationServer.class);",
          "56:     static final String PORT2 = allocatePort(HostnameVerificationServer.class, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: @RunWith(value = org.junit.runners.Parameterized.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58:     static final String PORT4 = allocatePort(HostnameVerificationServer.class, 4);",
          "59:     static final String PORT5 = allocatePort(HostnameVerificationServer.class, 5);",
          "61:     @BeforeClass",
          "62:     public static void startServers() throws Exception {",
          "63:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     final Boolean async;",
          "68:     public HostnameVerificationTest(Boolean async) {",
          "69:         this.async = async;",
          "70:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68:         );",
          "69:     }",
          "71:     @AfterClass",
          "72:     public static void cleanup() throws Exception {",
          "73:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     @Parameters(name = \"{0}\")",
          "83:     public static Collection<Boolean> data() {",
          "85:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "86:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "92:         updateAddressPort(port, PORT);",
          "99:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "94:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "97:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "112:         if (async) {",
          "113:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "114:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "121:         updateAddressPort(port, PORT2);",
          "133:         try {",
          "134:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "123:         try {",
          "124:             port.greetMe(\"Kitty\");",
          "125:             fail(\"Failure expected on a non-matching subject alternative name\");",
          "126:         } catch (Exception ex) {",
          "128:         }",
          "131:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "141:         if (async) {",
          "142:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "143:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160:         updateAddressPort(port, PORT3);",
          "167:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "162:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "165:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "175:         if (async) {",
          "176:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "177:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "189:         updateAddressPort(port, PORT4);",
          "201:         try {",
          "202:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "191:         try {",
          "192:             port.greetMe(\"Kitty\");",
          "193:             fail(\"Failure expected with no matching Subject Alt Name or CN\");",
          "194:         } catch (Exception ex) {",
          "196:         }",
          "199:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "204:         if (async) {",
          "205:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "206:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "228:         updateAddressPort(port, PORT4);",
          "230:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "232:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:         if (async) {",
          "239:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "240:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "262:             updateAddressPort(port, PORT4);",
          "264:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "266:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:             if (async) {",
          "278:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "279:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "298:             updateAddressPort(port, PORT4);",
          "300:             TLSClientParameters clientParameters = new TLSClientParameters();",
          "301:             clientParameters.setUseHttpsURLConnectionDefaultHostnameVerifier(true);",
          "302:             Client client = ClientProxy.getClient(port);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:             if (async) {",
          "319:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "320:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "305:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "312:             ((java.io.Closeable)port).close();",
          "313:         } finally {",
          "314:             if (hostnameVerifier != null) {",
          "",
          "[Removed Lines]",
          "308:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "310:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "339:         updateAddressPort(port, PORT5);",
          "346:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "341:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "344:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "359:         if (async) {",
          "360:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "361:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.security.cert.PKIXBuilderParameters;",
          "28: import java.security.cert.X509CertSelector;",
          "29: import java.security.cert.X509Certificate;",
          "31: import javax.net.ssl.CertPathTrustManagerParameters;",
          "32: import javax.net.ssl.TrustManager;",
          "33: import javax.net.ssl.TrustManagerFactory;",
          "34: import javax.net.ssl.X509TrustManager;",
          "36: import org.apache.cxf.Bus;",
          "37: import org.apache.cxf.BusFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.util.Arrays;",
          "31: import java.util.Collection;",
          "37: import javax.xml.ws.BindingProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.junit.AfterClass;",
          "49: import org.junit.BeforeClass;",
          "51: import static org.junit.Assert.assertEquals;",
          "52: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import org.junit.runner.RunWith;",
          "54: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: public class TrustManagerTest extends AbstractBusClientServerTestBase {",
          "60:     static final String PORT = allocatePort(TrustServer.class);",
          "61:     static final String PORT2 = allocatePort(TrustServer.class, 2);",
          "62:     static final String PORT3 = allocatePort(TrustServer.class, 3);",
          "64:     @BeforeClass",
          "65:     public static void startServers() throws Exception {",
          "66:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: @RunWith(value = org.junit.runners.Parameterized.class)",
          "70:     final Boolean async;",
          "72:     public TrustManagerTest(Boolean async) {",
          "73:         this.async = async;",
          "74:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:         );",
          "78:     }",
          "80:     @AfterClass",
          "81:     public static void cleanup() throws Exception {",
          "82:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:     @Parameters(name = \"{0}\")",
          "93:     public static Collection<Boolean> data() {",
          "95:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:         updateAddressPort(port, PORT);",
          "103:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "104:         X509TrustManager trustManager = new NoOpX509TrustManager();",
          "105:         TrustManager[] trustManagers = new TrustManager[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:         if (async) {",
          "123:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "124:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:         updateAddressPort(port, PORT);",
          "138:         String validPrincipalName = \"CN=Bethal,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "140:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         if (async) {",
          "163:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "164:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "178:             updateAddressPort(port, PORT);",
          "180:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "182:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:             if (async) {",
          "210:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "211:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:             updateAddressPort(port, PORT);",
          "213:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "215:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:             if (async) {",
          "248:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "249:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "241:         updateAddressPort(port, PORT3);",
          "243:         String validPrincipalName = \"CN=Bethal,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "245:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:         if (async) {",
          "283:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "284:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "278:         updateAddressPort(port, PORT);",
          "280:         String invalidPrincipalName = \"CN=Bethal2,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "282:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:         if (async) {",
          "325:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "326:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "320:         updateAddressPort(port, PORT2);",
          "323:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "324:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:         if (async) {",
          "372:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "373:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2b6199885a87f244feda4dc1ba084a097b4be3f",
      "candidate_info": {
        "commit_hash": "b2b6199885a87f244feda4dc1ba084a097b4be3f",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/b2b6199885a87f244feda4dc1ba084a097b4be3f",
        "files": [
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-client-bethal.xml",
          "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-server-deprecated.xml",
          "systests/transports/src/test/resources/org/apache/cxf/systest/https/hostname/hostname-server.xml"
        ],
        "message": "Refactor of deprecated hostname verification tests",
        "before_after_code_files": [
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ],
          "candidate": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ]
        }
      },
      "candidate_diff": {
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     }",
          "35:     protected void run()  {",
          "37:         Bus busLocal = new SpringBusFactory().createBus(busFile);",
          "38:         BusFactory.setDefaultBus(busLocal);",
          "39:         setBus(busLocal);",
          "",
          "[Removed Lines]",
          "36:         URL busFile = HostnameVerificationDeprecatedServer.class.getResource(\"hostname-server-bethal.xml\");",
          "",
          "[Added Lines]",
          "36:         URL busFile = HostnameVerificationDeprecatedServer.class.getResource(\"hostname-server-deprecated.xml\");",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     @org.junit.Test",
          "65:     public void testLocalhostNotMatching() throws Exception {",
          "66:         SpringBusFactory bf = new SpringBusFactory();",
          "69:         Bus bus = bf.createBus(busFile.toString());",
          "70:         BusFactory.setDefaultBus(bus);",
          "",
          "[Removed Lines]",
          "67:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client-bethal.xml\");",
          "",
          "[Added Lines]",
          "67:         URL busFile = HostnameVerificationDeprecatedTest.class.getResource(\"hostname-client.xml\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f0b7e84c1c57bdfc54c32a5c8396fa6b9324df0",
      "candidate_info": {
        "commit_hash": "4f0b7e84c1c57bdfc54c32a5c8396fa6b9324df0",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/4f0b7e84c1c57bdfc54c32a5c8396fa6b9324df0",
        "files": [
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java",
          "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java",
          "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java"
        ],
        "message": "Updating hostname verification code based on the latest Apache HttpComponent Client code",
        "before_after_code_files": [
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java",
          "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java",
          "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java||rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java",
          "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java||rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java"
          ],
          "candidate": [
            "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java"
          ]
        }
      },
      "candidate_diff": {
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.security.cert.X509Certificate;",
          "34: import java.util.ArrayList;",
          "35: import java.util.Collection;",
          "36: import java.util.List;",
          "37: import java.util.Locale;",
          "38: import java.util.NoSuchElementException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import javax.naming.ldap.Rdn;",
          "48: import javax.net.ssl.HostnameVerifier;",
          "49: import javax.net.ssl.SSLException;",
          "50: import javax.net.ssl.SSLSession;",
          "51: import javax.security.auth.x500.X500Principal;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import javax.net.ssl.SSLPeerUnverifiedException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59: public final class DefaultHostnameVerifier implements HostnameVerifier {",
          "66:     private static final Logger LOG = LogUtils.getL7dLogger(DefaultHostnameVerifier.class);",
          "",
          "[Removed Lines]",
          "61:     enum TYPE { IPv4, IPv6, DNS };",
          "63:     static final int DNS_NAME_TYPE = 2;",
          "64:     static final int IP_ADDRESS_TYPE = 7;",
          "",
          "[Added Lines]",
          "63:     enum HostNameType {",
          "65:         IPv4(7), IPv6(7), DNS(2);",
          "67:         final int subjectType;",
          "69:         HostNameType(final int subjectType) {",
          "70:             this.subjectType = subjectType;",
          "71:         }",
          "73:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     public void verify(",
          "94:             final String host, final X509Certificate cert) throws SSLException {",
          "109:         if (subjectAlts != null && !subjectAlts.isEmpty()) {",
          "111:             case IPv4:",
          "112:                 matchIPAddress(host, subjectAlts);",
          "113:                 break;",
          "",
          "[Removed Lines]",
          "95:         TYPE hostFormat = TYPE.DNS;",
          "96:         if (InetAddressUtils.isIPv4Address(host)) {",
          "97:             hostFormat = TYPE.IPv4;",
          "98:         } else {",
          "99:             String s = host;",
          "100:             if (s.startsWith(\"[\") && s.endsWith(\"]\")) {",
          "101:                 s = host.substring(1, host.length() - 1);",
          "102:             }",
          "103:             if (InetAddressUtils.isIPv6Address(s)) {",
          "104:                 hostFormat = TYPE.IPv6;",
          "105:             }",
          "106:         }",
          "107:         final int subjectType = hostFormat == TYPE.IPv4 || hostFormat == TYPE.IPv6 ? IP_ADDRESS_TYPE : DNS_NAME_TYPE;",
          "108:         final List<String> subjectAlts = extractSubjectAlts(cert, subjectType);",
          "110:             switch (hostFormat) {",
          "",
          "[Added Lines]",
          "104:         final HostNameType hostType = determineHostFormat(host);",
          "105:         final List<SubjectName> subjectAlts = getSubjectAltNames(cert);",
          "107:             switch (hostType) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:         }",
          "131:     }",
          "146:         for (int i = 0; i < subjectAlts.size(); i++) {",
          "149:                 return;",
          "150:             }",
          "151:         }",
          "154:     }",
          "157:         final String normalisedHost = normaliseAddress(host);",
          "158:         for (int i = 0; i < subjectAlts.size(); i++) {",
          "163:             }",
          "164:         }",
          "167:     }",
          "170:                              final PublicSuffixMatcher publicSuffixMatcher) throws SSLException {",
          "171:         final String normalizedHost = host.toLowerCase(Locale.ROOT);",
          "172:         for (int i = 0; i < subjectAlts.size(); i++) {",
          "177:             }",
          "178:         }",
          "181:     }",
          "183:     static void matchCN(final String host, final String cn,",
          "187:                 + \"common name of the certificate subject: \" + cn);",
          "188:         }",
          "189:     }",
          "",
          "[Removed Lines]",
          "133:     public boolean verify(final String host, final String certHostname) {",
          "134:         try {",
          "135:             matchCN(host, certHostname, this.publicSuffixMatcher);",
          "136:             return true;",
          "137:         } catch (SSLException ex) {",
          "138:             if (LOG.isLoggable(Level.FINE)) {",
          "139:                 LOG.log(Level.FINE, ex.getMessage(), ex);",
          "140:             }",
          "141:             return false;",
          "142:         }",
          "143:     }",
          "145:     static void matchIPAddress(final String host, final List<String> subjectAlts) throws SSLException {",
          "147:             final String subjectAlt = subjectAlts.get(i);",
          "148:             if (host.equals(subjectAlt)) {",
          "152:         throw new SSLException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "153:             + \"of the subject alternative names: \" + subjectAlts);",
          "156:     static void matchIPv6Address(final String host, final List<String> subjectAlts) throws SSLException {",
          "159:             final String subjectAlt = subjectAlts.get(i);",
          "160:             final String normalizedSubjectAlt = normaliseAddress(subjectAlt);",
          "161:             if (normalisedHost.equals(normalizedSubjectAlt)) {",
          "162:                 return;",
          "165:         throw new SSLException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "166:             + \"of the subject alternative names: \" + subjectAlts);",
          "169:     static void matchDNSName(final String host, final List<String> subjectAlts,",
          "173:             final String subjectAlt = subjectAlts.get(i);",
          "174:             final String normalizedSubjectAlt = subjectAlt.toLowerCase(Locale.ROOT);",
          "175:             if (matchIdentityStrict(normalizedHost, normalizedSubjectAlt, publicSuffixMatcher)) {",
          "176:                 return;",
          "179:         throw new SSLException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "180:             + \"of the subject alternative names: \" + subjectAlts);",
          "184:                  final PublicSuffixMatcher publicSuffixMatcher) throws SSLException {",
          "185:         if (!matchIdentityStrict(host, cn, publicSuffixMatcher)) {",
          "186:             throw new SSLException(\"Certificate for <\" + host + \"> doesn't match \"",
          "",
          "[Added Lines]",
          "130:     static void matchIPAddress(final String host, final List<SubjectName> subjectAlts) throws SSLException {",
          "132:             final SubjectName subjectAlt = subjectAlts.get(i);",
          "133:             if (subjectAlt.getType() == SubjectName.IP && host.equals(subjectAlt.getValue())) {",
          "137:         throw new SSLPeerUnverifiedException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "138:                 + \"of the subject alternative names: \" + subjectAlts);",
          "141:     static void matchIPv6Address(final String host, final List<SubjectName> subjectAlts) throws SSLException {",
          "144:             final SubjectName subjectAlt = subjectAlts.get(i);",
          "145:             if (subjectAlt.getType() == SubjectName.IP) {",
          "146:                 final String normalizedSubjectAlt = normaliseAddress(subjectAlt.getValue());",
          "147:                 if (normalisedHost.equals(normalizedSubjectAlt)) {",
          "148:                     return;",
          "149:                 }",
          "152:         throw new SSLPeerUnverifiedException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "153:                 + \"of the subject alternative names: \" + subjectAlts);",
          "156:     static void matchDNSName(final String host, final List<SubjectName> subjectAlts,",
          "160:             final SubjectName subjectAlt = subjectAlts.get(i);",
          "161:             if (subjectAlt.getType() == SubjectName.DNS) {",
          "162:                 final String normalizedSubjectAlt = subjectAlt.getValue().toLowerCase(Locale.ROOT);",
          "163:                 if (matchIdentityStrict(normalizedHost, normalizedSubjectAlt, publicSuffixMatcher)) {",
          "164:                     return;",
          "165:                 }",
          "168:         throw new SSLPeerUnverifiedException(\"Certificate for <\" + host + \"> doesn't match any \"",
          "169:                 + \"of the subject alternative names: \" + subjectAlts);",
          "173:                         final PublicSuffixMatcher publicSuffixMatcher) throws SSLException {",
          "174:         final String normalizedHost = host.toLowerCase(Locale.ROOT);",
          "175:         final String normalizedCn = cn.toLowerCase(Locale.ROOT);",
          "176:         if (!matchIdentityStrict(normalizedHost, normalizedCn, publicSuffixMatcher)) {",
          "177:             throw new SSLPeerUnverifiedException(\"Certificate for <\" + host + \"> doesn't match \"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "278:         }",
          "279:     }",
          "287:         }",
          "297:                     }",
          "299:                 }",
          "300:             }",
          "301:         }",
          "303:     }",
          "",
          "[Removed Lines]",
          "281:     static List<String> extractSubjectAlts(final X509Certificate cert, final int subjectType) {",
          "282:         Collection<List<?>> c = null;",
          "283:         try {",
          "284:             c = cert.getSubjectAlternativeNames();",
          "285:         } catch (final CertificateParsingException ignore) {",
          "288:         List<String> subjectAltList = null;",
          "289:         if (c != null) {",
          "290:             for (final List<?> aC : c) {",
          "291:                 final List<?> list = aC;",
          "292:                 final int type = ((Integer) list.get(0)).intValue();",
          "293:                 if (type == subjectType) {",
          "294:                     final String s = (String) list.get(1);",
          "295:                     if (subjectAltList == null) {",
          "296:                         subjectAltList = new ArrayList<>();",
          "298:                     subjectAltList.add(s);",
          "302:         return subjectAltList;",
          "",
          "[Added Lines]",
          "272:     static HostNameType determineHostFormat(final String host) {",
          "273:         if (InetAddressUtils.isIPv4Address(host)) {",
          "274:             return HostNameType.IPv4;",
          "275:         }",
          "276:         String s = host;",
          "277:         if (s.startsWith(\"[\") && s.endsWith(\"]\")) {",
          "278:             s = host.substring(1, host.length() - 1);",
          "280:         if (InetAddressUtils.isIPv6Address(s)) {",
          "281:             return HostNameType.IPv6;",
          "282:         }",
          "283:         return HostNameType.DNS;",
          "284:     }",
          "286:     static List<SubjectName> getSubjectAltNames(final X509Certificate cert) {",
          "287:         try {",
          "288:             final Collection<List<?>> entries = cert.getSubjectAlternativeNames();",
          "289:             if (entries == null) {",
          "290:                 return Collections.emptyList();",
          "291:             }",
          "292:             final List<SubjectName> result = new ArrayList<>();",
          "293:             for (final List<?> entry : entries) {",
          "294:                 final Integer type = entry.size() >= 2 ? (Integer) entry.get(0) : null;",
          "295:                 if (type == SubjectName.DNS || type == SubjectName.IP) {",
          "296:                     final Object o = entry.get(1);",
          "297:                     if (o instanceof String) {",
          "298:                         result.add(new SubjectName((String) o, type));",
          "299:                     } else if (o instanceof byte[]) {",
          "304:             return result;",
          "305:         } catch (final CertificateParsingException ignore) {",
          "306:             return Collections.emptyList();",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/InetAddressUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: public final class InetAddressUtils {",
          "38:     private static final String IPV4_BASIC_PATTERN_STRING =",
          "42:     private static final Pattern IPV4_PATTERN =",
          "43:         Pattern.compile(\"^\" + IPV4_BASIC_PATTERN_STRING + \"$\");",
          "",
          "[Removed Lines]",
          "39:             \"(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" // initial 3 fields, 0-255 followed by .",
          "40:             + \"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\"; // final field, 0-255",
          "",
          "[Added Lines]",
          "39:         \"(([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){1}\" // initial first field, 1-255",
          "40:         + \"(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){2}\" // following 2 fields, 0-255 followed by .",
          "41:         + \"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\"; // final field, 0-255",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixList.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         if (rules == null) {",
          "51:             throw new IllegalArgumentException(\"Domain suffix rules are null\");",
          "52:         }",
          "56:         this.type = type;",
          "57:         this.rules = Collections.unmodifiableList(rules);",
          "59:     }",
          "61:     public DomainType getType() {",
          "",
          "[Removed Lines]",
          "53:         if (exceptions == null) {",
          "54:             throw new IllegalArgumentException(\"Domain suffix exceptions are null\");",
          "55:         }",
          "58:         this.exceptions = Collections.unmodifiableList(exceptions);",
          "",
          "[Added Lines]",
          "55:         this.exceptions = Collections.unmodifiableList(exceptions != null ? exceptions",
          "56:             : Collections.<String>emptyList());",
          "57:     }",
          "59:     public PublicSuffixList(final List<String> rules, final List<String> exceptions) {",
          "60:         this(DomainType.UNKNOWN, rules, exceptions);",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import java.net.IDN;",
          "29: import java.util.Collection;",
          "31: import java.util.Locale;",
          "32: import java.util.Map;",
          "33: import java.util.concurrent.ConcurrentHashMap;",
          "",
          "[Removed Lines]",
          "30: import java.util.List;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:             throw new IllegalArgumentException(\"Domain suffix rules are null\");",
          "59:         }",
          "60:         this.rules = new ConcurrentHashMap<>(rules.size());",
          "62:             this.rules.put(rule, domainType);",
          "63:         }",
          "64:         this.exceptions = new ConcurrentHashMap<>();",
          "65:         if (exceptions != null) {",
          "67:                 this.exceptions.put(exception, domainType);",
          "68:             }",
          "69:         }",
          "",
          "[Removed Lines]",
          "61:         for (String rule: rules) {",
          "66:             for (String exception: exceptions) {",
          "",
          "[Added Lines]",
          "60:         for (final String rule : rules) {",
          "65:             for (final String exception: exceptions) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:         }",
          "76:         this.rules = new ConcurrentHashMap<>();",
          "77:         this.exceptions = new ConcurrentHashMap<>();",
          "79:             final DomainType domainType = list.getType();",
          "81:                 this.rules.put(rule, domainType);",
          "82:             }",
          "86:                     this.exceptions.put(exception, domainType);",
          "87:                 }",
          "88:             }",
          "",
          "[Removed Lines]",
          "78:         for (PublicSuffixList list: lists) {",
          "80:             for (String rule: list.getRules()) {",
          "83:             final List<String> listExceptions = list.getExceptions();",
          "84:             if (listExceptions != null) {",
          "85:                 for (String exception: listExceptions) {",
          "",
          "[Added Lines]",
          "77:         for (final PublicSuffixList list : lists) {",
          "79:             for (final String rule: list.getRules()) {",
          "82:             if (list.getExceptions() != null) {",
          "83:                 for (final String exception : list.getExceptions()) {",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.nio.charset.StandardCharsets;",
          "34: import java.nio.file.Files;",
          "35: import java.util.Arrays;",
          "36: import java.util.logging.Level;",
          "37: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     }",
          "55:     private static PublicSuffixMatcher load(final InputStream in) throws IOException {",
          "57:                 new InputStreamReader(in, StandardCharsets.UTF_8));",
          "59:     }",
          "61:     public static PublicSuffixMatcher load(final URL url) throws IOException {",
          "",
          "[Removed Lines]",
          "56:         final PublicSuffixList list = new PublicSuffixListParser().parse(",
          "58:         return new PublicSuffixMatcher(list.getRules(), list.getExceptions());",
          "",
          "[Added Lines]",
          "57:         final List<PublicSuffixList> lists = new PublicSuffixListParser().parseByType(",
          "59:         return new PublicSuffixMatcher(lists);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:                     if (url != null) {",
          "86:                         try {",
          "87:                             defaultInstance = load(url);",
          "90:                             if (LOG.isLoggable(Level.WARNING)) {",
          "91:                                 LOG.log(Level.WARNING,",
          "",
          "[Removed Lines]",
          "88:                         } catch (IOException ex) {",
          "",
          "[Added Lines]",
          "89:                         } catch (final IOException ex) {",
          "",
          "---------------"
        ],
        "rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java||rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java": [
          "File: rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java -> rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/SubjectName.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: package org.apache.cxf.transport.https.httpclient;",
          "28: final class SubjectName {",
          "30:     static final int DNS = 2;",
          "31:     static final int IP = 7;",
          "33:     private final String value;",
          "34:     private final int type;",
          "36:     SubjectName(final String value, final int type) {",
          "37:         if (value == null) {",
          "38:             throw new IllegalArgumentException(\"Value is null\");",
          "39:         }",
          "40:         this.value = value;",
          "42:         if (type <= 0) {",
          "43:             throw new IllegalArgumentException(\"Type must not be negative or zero: \" + type);",
          "44:         }",
          "45:         this.type = type;",
          "46:     }",
          "49:     static SubjectName IP(final String value) {",
          "50:         return new SubjectName(value, IP);",
          "51:     }",
          "53:     static SubjectName DNS(final String value) {",
          "54:         return new SubjectName(value, DNS);",
          "55:     }",
          "58:     public int getType() {",
          "59:         return type;",
          "60:     }",
          "62:     public String getValue() {",
          "63:         return value;",
          "64:     }",
          "66:     @Override",
          "67:     public String toString() {",
          "68:         return value;",
          "69:     }",
          "71: }",
          "",
          "---------------"
        ],
        "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java||rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java": [
          "File: rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java -> rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/CertificatesToPlayWith.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "509:         + \"Za2Snopi52eUxDEhJ0MNqFi3Jfj/ZSmJ+XHra5lU4R8lijCAq8SVLZCmIQ==\\n\"",
          "510:         + \"-----END CERTIFICATE-----\").getBytes();",
          "512:     private CertificatesToPlayWith() {",
          "514:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:     public static final byte[] S_GOOGLE_COM = (",
          "513:         \"-----BEGIN CERTIFICATE-----\\n\"",
          "514:         + \"MIICpzCCAY+gAwIBAgIBATANBgkqhkiG9w0BAQUFADAXMRUwEwYDVQQDDAwqLmdv\\n\"",
          "515:         + \"b2dsZS5jb20wHhcNMTcwMTEzMjI0OTAzWhcNMTgwMTEzMjI0OTAzWjAXMRUwEwYD\\n\"",
          "516:         + \"VQQDDAwqLmdvb2dsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\\n\"",
          "517:         + \"AQDHuzznuHdJ5PH344xCyGYnUnIRhyLGBKN3WDLLrXWtr/5Sf3Q1qkiMiJ4BINsh\\n\"",
          "518:         + \"3Xy0z7VvHmMFlntgHXtkofBUPvTihxsVIypRkCZb5hpsWLotR10AW2JpVl/oxLP2\\n\"",
          "519:         + \"227/36X1zKh33fjImLJl9KzGWHLsbCBleQQJOn7YRsNR/QBZO0XGGkN/R2rRfLF3\\n\"",
          "520:         + \"rseRfI5gJjZkO0WDxocnf/iieOe0XNR0NAZaY1aozzPmZ/pRrOKYB8OFH7F73WOC\\n\"",
          "521:         + \"lPIUGai/byJ9SpbXdLUcMlGhml/4XzcnV/WVRD2P/mlY+xEFG3UEy3ufhNnKFJul\\n\"",
          "522:         + \"yjZrOaKbagamqtOyktzkjnerAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBADaMcwVs\\n\"",
          "523:         + \"w5kbnoDJzMBJ01H16T4u8k78i/ybwz7u7krgkU0tABXCRj7S/4Dt3jqQ/rV6evj4\\n\"",
          "524:         + \"gIJ/2kZUp/PHKkV7CxWI48XBTAQUu9LEpxj0Hut3AtNMD9y/J6cFn2978tWsHFHI\\n\"",
          "525:         + \"mYgvclKUDE4WFMvuxfQVuX3RcGQ5i8khEMczY/KVhZYDcLU1PU0GTTJqqrQm59Z4\\n\"",
          "526:         + \"T4UyI3OPBR7Nb/kaU1fcgQ083uxRXcNYRMMZnU6c2oFnR+c6pO6aGoXo0C6rgC4R\\n\"",
          "527:         + \"pOj4hPvHCfZO2xg6HAdQ7UPALLX8pu5KGot7GRc8yiJ/Q1nBEuiPKKu0MIwQoFgP\\n\"",
          "528:         + \"WUux/APTsgLR7Vc=\\n\"",
          "529:         + \"-----END CERTIFICATE-----\"",
          "530:         ).getBytes();",
          "532:     public static final byte[] IP_1_1_1_1 = (",
          "533:         \"-----BEGIN CERTIFICATE-----\\n\"",
          "534:         + \"MIICwjCCAaqgAwIBAgIBATANBgkqhkiG9w0BAQUFADAaMRgwFgYDVQQDEw9kdW1t\\n\"",
          "535:         + \"eS12YWx1ZS5jb20wHhcNMTcwMTEzMjI1MTQ2WhcNMTgwMTEzMjI1MTQ2WjAaMRgw\\n\"",
          "536:         + \"FgYDVQQDEw9kdW1teS12YWx1ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\\n\"",
          "537:         + \"ggEKAoIBAQDfrapp3jHLp1RlElzpR/4sF9AcTYwMF1N+adkHRoVtmTlJV2lTIAjn\\n\"",
          "538:         + \"QLauy0Kkzv8uxmbID3uROgrFNDQ5RxTTCe+kW/vE6Pyzr5Z5ayjSTKeycTE7mAC4\\n\"",
          "539:         + \"6ntoCeEWiD593zlfqVo5PuRSp9Kusd+kexNVjC/BETDPa3yXctcH1ouW9GyGItgQ\\n\"",
          "540:         + \"u4GhCE8cipKMuTltgfK+Gh/5e9lFG9/F2fD+wHUVBULLR3JOQoqwgk2zAwKDwLuS\\n\"",
          "541:         + \"sEd1CBi35+W3apCKN0SEdTKIAxc/R+O/1j2hpOl9yXCCYyveGwJdFXVZtDcx+9/H\\n\"",
          "542:         + \"7NXhOdmw/mTXC5fOQGKciEo2SXt8Wp89AgMBAAGjEzARMA8GA1UdEQQIMAaHBAEB\\n\"",
          "543:         + \"AQEwDQYJKoZIhvcNAQEFBQADggEBAEAO6CE8twpcfdjk9oMjI5nX9GdC5Wt6+ujd\\n\"",
          "544:         + \"tLj0SbXvMKzCLLkveT0xTEzXfyEo8KW2qYYvPP1h83BIxsbR/J3Swt35UQVofv+4\\n\"",
          "545:         + \"JgO0FIdgB+iLEcjUh5+60xslylqWE+9bSWm4f06OXuv78tq5NYPZKku/3i4tqLRp\\n\"",
          "546:         + \"gH2rTtjX7Q4olSS7GdAgfiA2AnDZAbMtxtsnTt/QFpYQqhlkqHVDwgkGP7C8aMBD\\n\"",
          "547:         + \"RH0UIQCPxUkhwhtNmVyHO42r6oHXselZoVU6XRHuhogrGxPf/pzDUvrKBiJhsZQQ\\n\"",
          "548:         + \"oEu+pZCwkFLiNwUoq1G2oDpkkdBWB0JcBXB2Txa536ezFFWZYc0=\\n\"",
          "549:         + \"-----END CERTIFICATE-----\"",
          "550:         ).getBytes();",
          "553:     public static final byte[] EMAIL_ALT_SUBJECT_NAME = (",
          "554:         \"-----BEGIN CERTIFICATE-----\\n\"",
          "555:         + \"MIIDpTCCAo2gAwIBAgIJANqkMEtlkelbMA0GCSqGSIb3DQEBCwUAMHAxCzAJBgNV\\n\"",
          "556:         + \"BAYTAlVTMQswCQYDVQQIDAJWQTERMA8GA1UEBwwIU29tZUNpdHkxEjAQBgNVBAoM\\n\"",
          "557:         + \"CU15Q29tcGFueTETMBEGA1UECwwKTXlEaXZpc2lvbjEYMBYGA1UEAwwPd3d3LmNv\\n\"",
          "558:         + \"bXBhbnkuY29tMB4XDTE4MDIxNTA3MjkzMFoXDTIwMDIxNTA3MjkzMFowcDELMAkG\\n\"",
          "559:         + \"A1UEBhMCVVMxCzAJBgNVBAgMAlZBMREwDwYDVQQHDAhTb21lQ2l0eTESMBAGA1UE\\n\"",
          "560:         + \"CgwJTXlDb21wYW55MRMwEQYDVQQLDApNeURpdmlzaW9uMRgwFgYDVQQDDA93d3cu\\n\"",
          "561:         + \"Y29tcGFueS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4v6Oq\\n\"",
          "562:         + \"Ua0goRVn1cmT7MOpJhXFm3A70bTpvJIRpEjtGIz99hb34/9r5AYyf1VhKyWmBq24\\n\"",
          "563:         + \"XNcOJ59XOlyjjbm2Tl811ufTOdcNbPadoVBmMt4039OSUFpVb4wAw2XPWLTCG2h1\\n\"",
          "564:         + \"HNj9GuFHmwcDsg5EiIRrhDGQm2LLLAGoe5PdReoMZCeeWzNWvKTCV14pyRzwQhJL\\n\"",
          "565:         + \"F1OmzLYzovbPfB8LZVhQgDbLsh034FScivf2oKDB+NEzAEagNpnrFR0MFLWGYsu1\\n\"",
          "566:         + \"nWD5RiZi78HFGiibmhH7QrEPfGlo2eofuUga6naoBUROqkmMCIL8n1HZ/Ur0oGny\\n\"",
          "567:         + \"vQCj1AyrfOhuVC53AgMBAAGjQjBAMAsGA1UdDwQEAwIEMDATBgNVHSUEDDAKBggr\\n\"",
          "568:         + \"BgEFBQcDATAcBgNVHREEFTATgRFlbWFpbEBleGFtcGxlLmNvbTANBgkqhkiG9w0B\\n\"",
          "569:         + \"AQsFAAOCAQEAZ0IsqRrsEmJ6Fa9Yo6PQtrKJrejN2TTDddVgyLQdokzWh/25JFad\\n\"",
          "570:         + \"NCMYPH5KjTUyKf96hJDlDayjbKk1PMMhSZMU5OG9NOuGMH/dQttruG1ojse7KIKg\\n\"",
          "571:         + \"yHDQrfq5Exxgfa7CMHRKAoTCY7JZhSLyVbTMVhmGfuUDad/RA86ZisXycp0ZmS97\\n\"",
          "572:         + \"qDkAmzFL0sL0ZUWNNUh4ZUWvCUZwiuN08z70NjGqXMTDCf68p3SYxbII0xTfScgf\\n\"",
          "573:         + \"aQ/A/hD7IbGGTexeoTwpEj01DNvefbQV6//neo32/R5XD0D5jn3TCgZcMThA6H3a\\n\"",
          "574:         + \"VkEghVg+s7uMfL/UEebOBQWXQJ/uVoknMA==\\n\"",
          "575:         + \"-----END CERTIFICATE-----\"",
          "576:         ).getBytes();",
          "",
          "---------------"
        ],
        "rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java||rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java": [
          "File: rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java -> rt/transports/http/src/test/java/org/apache/cxf/transport/https/httpclient/DefaultHostnameVerifierTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         exceptionPlease(impl, \"a.bar.com\", x509);",
          "96:         exceptionPlease(impl, \"a.\\u82b1\\u5b50.co.jp\", x509);",
          "",
          "[Removed Lines]",
          "91:            Java isn't extracting international subjectAlts properly.  (Or",
          "92:            OpenSSL isn't storing them properly).",
          "",
          "[Added Lines]",
          "92:                Java isn't extracting international subjectAlts properly.  (Or",
          "93:                OpenSSL isn't storing them properly).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         in = new ByteArrayInputStream(CertificatesToPlayWith.X509_MULTIPLE_VALUE_AVA);",
          "149:         x509 = (X509Certificate) cf.generateCertificate(in);",
          "150:         impl.verify(\"repository.infonotary.com\", x509);",
          "151:     }",
          "153:     @Test",
          "154:     public void testSubjectAlt() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:         in = new ByteArrayInputStream(CertificatesToPlayWith.S_GOOGLE_COM);",
          "154:         x509 = (X509Certificate) cf.generateCertificate(in);",
          "155:         impl.verify(\"*.google.com\", x509);",
          "157:         in = new ByteArrayInputStream(CertificatesToPlayWith.S_GOOGLE_COM);",
          "158:         x509 = (X509Certificate) cf.generateCertificate(in);",
          "159:         impl.verify(\"*.Google.com\", x509);",
          "161:         in = new ByteArrayInputStream(CertificatesToPlayWith.IP_1_1_1_1);",
          "162:         x509 = (X509Certificate) cf.generateCertificate(in);",
          "163:         impl.verify(\"1.1.1.1\", x509);",
          "165:         exceptionPlease(impl, \"1.1.1.2\", x509);",
          "166:         exceptionPlease(impl, \"dummy-value.com\", x509);",
          "168:         in = new ByteArrayInputStream(CertificatesToPlayWith.EMAIL_ALT_SUBJECT_NAME);",
          "169:         x509 = (X509Certificate) cf.generateCertificate(in);",
          "170:         impl.verify(\"www.company.com\", x509);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:         final X509Certificate x509 = (X509Certificate) cf.generateCertificate(in);",
          "159:         Assert.assertEquals(\"CN=localhost, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=CH\",",
          "162:         impl.verify(\"localhost.localdomain\", x509);",
          "163:         impl.verify(\"127.0.0.1\", x509);",
          "",
          "[Removed Lines]",
          "160:                 x509.getSubjectDN().getName());",
          "",
          "[Added Lines]",
          "181:                             x509.getSubjectDN().getName());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.b.c\", \"*.b.c\")); // subdomain not OK",
          "214:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(\"a.gov.uk\", \"*.gov.uk\", publicSuffixMatcher));",
          "218:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(\"s.a.gov.uk\", \"*.a.gov.uk\", publicSuffixMatcher));",
          "226:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(\"a.gov.com\", \"*.gov.com\", publicSuffixMatcher));",
          "229:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentity(\"s.a.gov.com\", \"*.gov.com\", publicSuffixMatcher));",
          "233:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(\"a.gov.uk\", \"a*.gov.uk\", publicSuffixMatcher));",
          "242:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(\"a.b.c\", \"*.b.*\"));",
          "243:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"a.b.c\", \"*.b.*\"));",
          "",
          "[Removed Lines]",
          "215:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(",
          "216:             \"a.gov.uk\", \"*.gov.uk\", publicSuffixMatcher));  // Bad 2TLD",
          "219:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.gov.uk\", \"*.a.gov.uk\", publicSuffixMatcher));",
          "221:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(",
          "222:             \"s.a.gov.uk\", \"*.gov.uk\", publicSuffixMatcher));",
          "223:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(",
          "224:             \"s.a.gov.uk\", \"*.gov.uk\", publicSuffixMatcher));  // BBad 2TLD/no subdomain allowed",
          "227:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentityStrict(\"a.gov.com\", \"*.gov.com\", publicSuffixMatcher));",
          "230:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(",
          "231:             \"s.a.gov.com\", \"*.gov.com\", publicSuffixMatcher)); // no subdomain allowed",
          "234:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(",
          "235:             \"a.gov.uk\", \"a*.gov.uk\", publicSuffixMatcher)); // Bad 2TLD",
          "237:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(",
          "238:             \"s.a.gov.uk\", \"a*.gov.uk\", publicSuffixMatcher)); // Bad 2TLD",
          "239:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(",
          "240:             \"s.a.gov.uk\", \"a*.gov.uk\", publicSuffixMatcher)); // Bad 2TLD/no subdomain allowed",
          "",
          "[Added Lines]",
          "236:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"a.gov.uk\",",
          "237:                                                                        \"*.gov.uk\", publicSuffixMatcher));  // Bad 2TLD",
          "240:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.gov.uk\",",
          "241:                                                                       \"*.a.gov.uk\", publicSuffixMatcher));",
          "243:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(\"s.a.gov.uk\", \"*.gov.uk\", publicSuffixMatcher));",
          "245:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.gov.uk\",",
          "246:                                                                        \"*.gov.uk\",",
          "247:                                                                        publicSuffixMatcher));",
          "250:         Assert.assertTrue(DefaultHostnameVerifier.matchIdentityStrict(\"a.gov.com\",",
          "251:                                                                       \"*.gov.com\", publicSuffixMatcher));",
          "255:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.gov.com\",",
          "256:                                                                        \"*.gov.com\", publicSuffixMatcher));",
          "259:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"a.gov.uk\",",
          "260:                                                                        \"a*.gov.uk\", publicSuffixMatcher)); // Bad 2TLD",
          "263:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentity(\"s.a.gov.uk\", \"a*.gov.uk\", publicSuffixMatcher));",
          "265:         Assert.assertFalse(DefaultHostnameVerifier.matchIdentityStrict(\"s.a.gov.uk\",",
          "266:                                                                        \"a*.gov.uk\", publicSuffixMatcher));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:     @Test // Check compressed IPv6 hostname matching",
          "265:     public void testHttpClient1316() throws Exception {",
          "266:         final String host1 = \"2001:0db8:aaaa:bbbb:cccc:0:0:0001\";",
          "269:         try {",
          "271:             Assert.fail(\"SSLException expected\");",
          "274:         }",
          "275:         final String host2 = \"2001:0db8:aaaa:bbbb:cccc::1\";",
          "278:         try {",
          "280:             Assert.fail(\"SSLException expected\");",
          "283:         }",
          "284:     }",
          "",
          "[Removed Lines]",
          "267:         DefaultHostnameVerifier.matchIPv6Address(host1, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc:0:0:0001\"));",
          "268:         DefaultHostnameVerifier.matchIPv6Address(host1, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc::1\"));",
          "270:             DefaultHostnameVerifier.matchIPv6Address(host1, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc::10\"));",
          "272:         } catch (SSLException expected) {",
          "276:         DefaultHostnameVerifier.matchIPv6Address(host2, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc:0:0:0001\"));",
          "277:         DefaultHostnameVerifier.matchIPv6Address(host2, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc::1\"));",
          "279:             DefaultHostnameVerifier.matchIPv6Address(host2, Arrays.asList(\"2001:0db8:aaaa:bbbb:cccc::10\"));",
          "281:         } catch (SSLException expected) {",
          "",
          "[Added Lines]",
          "293:         DefaultHostnameVerifier.matchIPv6Address(host1,",
          "294:                                                  Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc:0:0:0001\")));",
          "295:         DefaultHostnameVerifier.matchIPv6Address(host1,",
          "296:                                                  Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc::1\")));",
          "298:             DefaultHostnameVerifier.matchIPv6Address(host1,",
          "299:                                                      Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc::10\")));",
          "301:         } catch (final SSLException expected) {",
          "304:         DefaultHostnameVerifier.matchIPv6Address(host2,",
          "305:                                                  Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc:0:0:0001\")));",
          "306:         DefaultHostnameVerifier.matchIPv6Address(host2,",
          "307:                                                  Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc::1\")));",
          "309:             DefaultHostnameVerifier.matchIPv6Address(host2,",
          "310:                                                      Arrays.asList(SubjectName.IP(\"2001:0db8:aaaa:bbbb:cccc::10\")));",
          "312:         } catch (final SSLException expected) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "287:     public void testExtractCN() throws Exception {",
          "288:         Assert.assertEquals(\"blah\", DefaultHostnameVerifier.extractCN(\"cn=blah, ou=blah, o=blah\"));",
          "289:         Assert.assertEquals(\"blah\", DefaultHostnameVerifier.extractCN(\"cn=blah, cn=yada, cn=booh\"));",
          "292:         Assert.assertEquals(\"blah\", DefaultHostnameVerifier.extractCN(\"cn=\\\"blah\\\", ou=blah, o=blah\"));",
          "293:         Assert.assertEquals(\"blah  blah\", DefaultHostnameVerifier.extractCN(\"cn=\\\"blah  blah\\\", ou=blah, o=blah\"));",
          "294:         Assert.assertEquals(\"blah, blah\", DefaultHostnameVerifier.extractCN(\"cn=\\\"blah, blah\\\", ou=blah, o=blah\"));",
          "",
          "[Removed Lines]",
          "290:         Assert.assertEquals(\"blah\", DefaultHostnameVerifier.extractCN(",
          "291:             \"c = pampa ,  cn  =    blah    , ou = blah , o = blah\"));",
          "",
          "[Added Lines]",
          "320:         Assert.assertEquals(\"blah\",",
          "321:                             DefaultHostnameVerifier.extractCN(\"c = pampa ,  cn  =    blah    , ou = blah , o = blah\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "297:         try {",
          "298:             DefaultHostnameVerifier.extractCN(\"blah,blah\");",
          "299:             Assert.fail(\"SSLException expected\");",
          "302:         }",
          "303:         try {",
          "304:             DefaultHostnameVerifier.extractCN(\"cn,o=blah\");",
          "305:             Assert.fail(\"SSLException expected\");",
          "308:         }",
          "309:     }",
          "",
          "[Removed Lines]",
          "300:         } catch (SSLException expected) {",
          "306:         } catch (SSLException expected) {",
          "311: }",
          "",
          "[Added Lines]",
          "330:         } catch (final SSLException expected) {",
          "335:         } catch (final SSLException expected) {",
          "339: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbfedaa38a5f02c18b3fefbbbf8ece011be6d230",
      "candidate_info": {
        "commit_hash": "cbfedaa38a5f02c18b3fefbbbf8ece011be6d230",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/cbfedaa38a5f02c18b3fefbbbf8ece011be6d230",
        "files": [
          "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java"
        ],
        "message": "CXF-8037 - Apache CXF (AsyncHTTPConduit) ignores system keyStore property\n\n(cherry picked from commit 7808ae48865df413346f523ca6e8df7bcedb2091)\n\n# Conflicts:\n#\tsystests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
        "before_after_code_files": [
          "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java||rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ],
          "candidate": [
            "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java"
          ]
        }
      },
      "candidate_diff": {
        "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java||rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java": [
          "File: rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java -> rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:             ctx = provider == null ? SSLContext.getInstance(protocol) : SSLContext",
          "893:                 .getInstance(protocol, provider);",
          "896:             KeyManager[] keyManagers = tlsClientParameters.getKeyManagers();",
          "897:             KeyManager[] configuredKeyManagers =",
          "898:                 org.apache.cxf.transport.https.SSLUtils.configureKeyManagersWithCertAlias(",
          "899:                     tlsClientParameters, keyManagers);",
          "",
          "[Removed Lines]",
          "894:             ctx.getClientSessionContext().setSessionTimeout(tlsClientParameters.getSslCacheTimeout());",
          "",
          "[Added Lines]",
          "896:             if (keyManagers == null) {",
          "897:                 keyManagers = org.apache.cxf.configuration.jsse.SSLUtils.getDefaultKeyStoreManagers(LOG);",
          "898:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:             }",
          "906:             ctx.init(configuredKeyManagers, trustManagers, tlsClientParameters.getSecureRandom());",
          "907:         }",
          "909:         sslContext = ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "910:             if (ctx.getClientSessionContext() != null) {",
          "911:                 ctx.getClientSessionContext().setSessionTimeout(tlsClientParameters.getSslCacheTimeout());",
          "912:             }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/ciphersuites/CipherSuitesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.net.URL;",
          "23: import java.security.cert.CertificateException;",
          "24: import java.security.cert.X509Certificate;",
          "25: import java.util.Collections;",
          "27: import javax.crypto.Cipher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Arrays;",
          "26: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.junit.AfterClass;",
          "46: import org.junit.BeforeClass;",
          "51: public class CipherSuitesTest extends AbstractBusClientServerTestBase {",
          "52:     static final boolean UNRESTRICTED_POLICIES_INSTALLED;",
          "53:     static {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.junit.runner.RunWith;",
          "50: import org.junit.runners.Parameterized.Parameters;",
          "55: @RunWith(value = org.junit.runners.Parameterized.class)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     static final String PORT4 = allocatePort(CipherSuitesServer.class, 4);",
          "77:     static final String PORT5 = allocatePort(CipherSuitesServer.class, 5);",
          "79:     @BeforeClass",
          "80:     public static void startServers() throws Exception {",
          "81:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:     final Boolean async;",
          "86:     public CipherSuitesTest(Boolean async) {",
          "87:         this.async = async;",
          "88:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:         );",
          "87:     }",
          "89:     @AfterClass",
          "90:     public static void cleanup() throws Exception {",
          "91:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:     @Parameters(name = \"{0}\")",
          "101:     public static Collection<Boolean> data() {",
          "103:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "104:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:     @org.junit.Test",
          "96:     public void testAESIncluded() throws Exception {",
          "121:         SpringBusFactory bf = new SpringBusFactory();",
          "122:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "",
          "[Removed Lines]",
          "97:         SpringBusFactory bf = new SpringBusFactory();",
          "98:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "100:         Bus bus = bf.createBus(busFile.toString());",
          "101:         BusFactory.setDefaultBus(bus);",
          "102:         BusFactory.setThreadDefaultBus(bus);",
          "104:         URL url = SOAPService.WSDL_LOCATION;",
          "105:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "106:         assertNotNull(\"Service is null\", service);",
          "107:         final Greeter port = service.getHttpsPort();",
          "108:         assertNotNull(\"Port is null\", port);",
          "110:         updateAddressPort(port, PORT);",
          "112:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "114:         ((java.io.Closeable)port).close();",
          "115:         bus.shutdown(true);",
          "116:     }",
          "119:     @org.junit.Test",
          "120:     public void testAESIncludedAsync() throws Exception {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:         assertNotNull(\"Port is null\", port);",
          "137:         updateAddressPort(port, PORT);",
          "",
          "[Removed Lines]",
          "135:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "129:         if (async) {",
          "130:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "131:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:         final Greeter port = service.getHttpsPort();",
          "168:         assertNotNull(\"Port is null\", port);",
          "170:         updateAddressPort(port, PORT4);",
          "172:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         if (async) {",
          "168:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "169:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "194:         updateAddressPort(port, PORT);",
          "228:         try {",
          "229:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "196:         try {",
          "197:             port.greetMe(\"Kitty\");",
          "198:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "199:         } catch (Exception ex) {",
          "201:         }",
          "203:         ((java.io.Closeable)port).close();",
          "204:         bus.shutdown(true);",
          "205:     }",
          "208:     @org.junit.Test",
          "209:     public void testClientDHEServerExcludesIncludedAsync() throws Exception {",
          "210:         SpringBusFactory bf = new SpringBusFactory();",
          "211:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-dhe-client.xml\");",
          "213:         Bus bus = bf.createBus(busFile.toString());",
          "214:         BusFactory.setDefaultBus(bus);",
          "215:         BusFactory.setThreadDefaultBus(bus);",
          "217:         URL url = SOAPService.WSDL_LOCATION;",
          "218:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "219:         assertNotNull(\"Service is null\", service);",
          "220:         final Greeter port = service.getHttpsPort();",
          "221:         assertNotNull(\"Port is null\", port);",
          "224:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "226:         updateAddressPort(port, PORT);",
          "",
          "[Added Lines]",
          "198:         if (async) {",
          "199:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "200:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "255:         updateAddressPort(port, PORT2);",
          "284:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "257:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "259:         ((java.io.Closeable)port).close();",
          "260:         bus.shutdown(true);",
          "261:     }",
          "264:     @org.junit.Test",
          "265:     public void testDHEIncludedAsync() throws Exception {",
          "266:         SpringBusFactory bf = new SpringBusFactory();",
          "267:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-dhe-client.xml\");",
          "269:         Bus bus = bf.createBus(busFile.toString());",
          "270:         BusFactory.setDefaultBus(bus);",
          "271:         BusFactory.setThreadDefaultBus(bus);",
          "273:         URL url = SOAPService.WSDL_LOCATION;",
          "274:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "275:         assertNotNull(\"Service is null\", service);",
          "276:         final Greeter port = service.getHttpsPort();",
          "277:         assertNotNull(\"Port is null\", port);",
          "280:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "282:         updateAddressPort(port, PORT2);",
          "",
          "[Added Lines]",
          "232:         if (async) {",
          "233:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "234:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "306:         updateAddressPort(port, PORT2);",
          "340:         try {",
          "341:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "308:         try {",
          "309:             port.greetMe(\"Kitty\");",
          "310:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "311:         } catch (Exception ex) {",
          "313:         }",
          "315:         ((java.io.Closeable)port).close();",
          "316:         bus.shutdown(true);",
          "317:     }",
          "320:     @org.junit.Test",
          "321:     public void testClientECDHEServerDHEIncludedAsync() throws Exception {",
          "322:         SpringBusFactory bf = new SpringBusFactory();",
          "323:         URL busFile = CipherSuitesTest.class.getResource(\"ciphersuites-client.xml\");",
          "325:         Bus bus = bf.createBus(busFile.toString());",
          "326:         BusFactory.setDefaultBus(bus);",
          "327:         BusFactory.setThreadDefaultBus(bus);",
          "329:         URL url = SOAPService.WSDL_LOCATION;",
          "330:         SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "331:         assertNotNull(\"Service is null\", service);",
          "332:         final Greeter port = service.getHttpsPort();",
          "333:         assertNotNull(\"Port is null\", port);",
          "336:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "338:         updateAddressPort(port, PORT2);",
          "",
          "[Added Lines]",
          "261:         if (async) {",
          "262:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "263:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "372:         updateAddressPort(port, PORT);",
          "374:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "376:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:         if (async) {",
          "301:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "302:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "401:         updateAddressPort(port, PORT);",
          "403:         Client client = ClientProxy.getClient(port);",
          "404:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:         if (async) {",
          "335:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "336:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "445:         updateAddressPort(port, PORT);",
          "447:         Client client = ClientProxy.getClient(port);",
          "448:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "383:         if (async) {",
          "384:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "385:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "483:         updateAddressPort(port, PORT);",
          "485:         Client client = ClientProxy.getClient(port);",
          "486:         HTTPConduit conduit = (HTTPConduit) client.getConduit();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:         if (async) {",
          "427:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "428:         }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "522:         updateAddressPort(port, PORT5);",
          "524:         try {",
          "525:             port.greetMe(\"Kitty\");",
          "526:             fail(\"Failure expected on not being able to negotiate a cipher suite\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470:         if (async) {",
          "471:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "472:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/clientauth/ClientAuthTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.security.Security;",
          "26: import java.security.cert.CertificateException;",
          "27: import java.security.cert.X509Certificate;",
          "29: import javax.net.ssl.HostnameVerifier;",
          "30: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import java.util.Arrays;",
          "29: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import org.junit.AfterClass;",
          "55: import org.junit.BeforeClass;",
          "60: public class ClientAuthTest extends AbstractBusClientServerTestBase {",
          "61:     static final String PORT = allocatePort(ClientAuthServer.class);",
          "62:     static final String PORT2 = allocatePort(ClientAuthServer.class, 2);",
          "64:     @BeforeClass",
          "65:     public static void startServers() throws Exception {",
          "66:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import org.junit.runner.RunWith;",
          "59: import org.junit.runners.Parameterized.Parameters;",
          "64: @RunWith(value = org.junit.runners.Parameterized.class)",
          "69:     final Boolean async;",
          "71:     public ClientAuthTest(Boolean async) {",
          "72:         this.async = async;",
          "73:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:         );",
          "72:     }",
          "74:     @AfterClass",
          "75:     public static void cleanup() throws Exception {",
          "76:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:     @Parameters(name = \"{0}\")",
          "86:     public static Collection<Boolean> data() {",
          "88:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "89:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:         updateAddressPort(port, PORT);",
          "97:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "99:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:         if (async) {",
          "116:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "117:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "119:         updateAddressPort(port, PORT);",
          "121:         try {",
          "122:             port.greetMe(\"Kitty\");",
          "123:             fail(\"Failure expected on an untrusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:         if (async) {",
          "145:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "146:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:         updateAddressPort(port, PORT);",
          "150:         try {",
          "151:             port.greetMe(\"Kitty\");",
          "152:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:         if (async) {",
          "179:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "180:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "158:         bus.shutdown(true);",
          "159:     }",
          "162:     @org.junit.Test",
          "163:     public void testChainTrust() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     @org.junit.Test",
          "196:     @org.junit.Ignore",
          "197:     public void testSystemPropertiesWithEmptyKeystoreConfig() throws Exception {",
          "198:         try {",
          "199:             System.setProperty(\"javax.net.ssl.keyStore\", \"keys/Morpit.jks\");",
          "200:             System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");",
          "201:             System.setProperty(\"javax.net.ssl.keyPassword\", \"password\");",
          "202:             System.setProperty(\"javax.net.ssl.keyStoreType\", \"JKS\");",
          "203:             SpringBusFactory bf = new SpringBusFactory();",
          "204:             URL busFile = ClientAuthTest.class.getResource(\"client-no-auth.xml\");",
          "206:             Bus bus = bf.createBus(busFile.toString());",
          "207:             BusFactory.setDefaultBus(bus);",
          "208:             BusFactory.setThreadDefaultBus(bus);",
          "210:             URL url = SOAPService.WSDL_LOCATION;",
          "211:             SOAPService service = new SOAPService(url, SOAPService.SERVICE);",
          "212:             assertNotNull(\"Service is null\", service);",
          "213:             final Greeter port = service.getHttpsPort();",
          "214:             assertNotNull(\"Port is null\", port);",
          "216:             updateAddressPort(port, PORT);",
          "219:             if (async) {",
          "220:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "221:             }",
          "223:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "225:             ((java.io.Closeable)port).close();",
          "226:             bus.shutdown(true);",
          "227:         }  finally {",
          "228:             System.clearProperty(\"javax.net.ssl.keyStore\");",
          "229:             System.clearProperty(\"javax.net.ssl.keyStorePassword\");",
          "230:             System.clearProperty(\"javax.net.ssl.keyPassword\");",
          "231:             System.clearProperty(\"javax.net.ssl.keyStoreType\");",
          "232:         }",
          "233:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "177:         updateAddressPort(port, PORT2);",
          "179:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "181:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:         if (async) {",
          "255:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "256:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "201:         updateAddressPort(port, PORT2);",
          "203:         try {",
          "204:             port.greetMe(\"Kitty\");",
          "205:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:         if (async) {",
          "284:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "285:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "230:         updateAddressPort(port, PORT);",
          "232:         try {",
          "233:             port.greetMe(\"Kitty\");",
          "234:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:         if (async) {",
          "318:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "319:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "259:         updateAddressPort(port, PORT2);",
          "261:         try {",
          "262:             port.greetMe(\"Kitty\");",
          "263:             fail(\"Failure expected on no trusted cert\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:         if (async) {",
          "352:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "353:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "338:         assertNotNull(\"Port is null\", port);",
          "340:         updateAddressPort(port, PORT);",
          "341:         Client client = ClientProxy.getClient(port);",
          "342:         HTTPConduit http = (HTTPConduit) client.getConduit();",
          "343:         http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:         if (async) {",
          "438:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "439:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "356:         assertNotNull(\"Port is null\", port);",
          "358:         updateAddressPort(port, PORT2);",
          "359:         client = ClientProxy.getClient(port);",
          "360:         http = (HTTPConduit) client.getConduit();",
          "361:         http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461:         if (async) {",
          "462:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "463:         }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "401:             assertNotNull(\"Port is null\", port);",
          "403:             updateAddressPort(port, PORT);",
          "404:             Client client = ClientProxy.getClient(port);",
          "405:             HTTPConduit http = (HTTPConduit) client.getConduit();",
          "406:             http.setTlsClientParameters(tlsParams);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:             if (async) {",
          "513:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "514:             }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "426:         updateAddressPort(port, PORT);",
          "429:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "430:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541:         if (async) {",
          "542:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "543:         }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "471:         updateAddressPort(port, PORT);",
          "474:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "475:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591:         if (async) {",
          "592:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "593:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationDeprecatedTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import javax.net.ssl.HostnameVerifier;",
          "25: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Arrays;",
          "24: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.junit.AfterClass;",
          "40: import org.junit.BeforeClass;",
          "47: public class HostnameVerificationDeprecatedTest extends AbstractBusClientServerTestBase {",
          "48:     static final String PORT = allocatePort(HostnameVerificationDeprecatedServer.class);",
          "49:     static final String PORT2 = allocatePort(HostnameVerificationDeprecatedServer.class, 2);",
          "50:     static final String PORT3 = allocatePort(HostnameVerificationDeprecatedServer.class, 3);",
          "52:     @BeforeClass",
          "53:     public static void startServers() throws Exception {",
          "54:         System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.junit.runner.RunWith;",
          "44: import org.junit.runners.Parameterized.Parameters;",
          "51: @RunWith(value = org.junit.runners.Parameterized.class)",
          "57:     final Boolean async;",
          "59:     public HostnameVerificationDeprecatedTest(Boolean async) {",
          "60:         this.async = async;",
          "61:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         );",
          "61:     }",
          "63:     @AfterClass",
          "64:     public static void cleanup() throws Exception {",
          "65:         System.clearProperty(\"java.protocol.handler.pkgs\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     @Parameters(name = \"{0}\")",
          "75:     public static Collection<Boolean> data() {",
          "77:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "78:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:         updateAddressPort(port, PORT);",
          "88:         try {",
          "89:             port.greetMe(\"Kitty\");",
          "90:             fail(\"Failure expected on the hostname verification\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:         if (async) {",
          "107:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "108:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:         updateAddressPort(port, PORT);",
          "117:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "119:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:         if (async) {",
          "141:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "142:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:             updateAddressPort(port, PORT);",
          "163:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "158:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "161:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "186:             if (async) {",
          "187:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "188:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204:             updateAddressPort(port, PORT);",
          "206:             TLSClientParameters clientParameters = new TLSClientParameters();",
          "207:             clientParameters.setUseHttpsURLConnectionDefaultHostnameVerifier(true);",
          "208:             Client client = ClientProxy.getClient(port);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:             if (async) {",
          "235:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "236:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "211:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "218:             ((java.io.Closeable)port).close();",
          "219:         } finally {",
          "220:             if (hostnameVerifier != null) {",
          "",
          "[Removed Lines]",
          "214:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "216:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "246:         updateAddressPort(port, PORT2);",
          "253:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "248:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "251:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "276:         if (async) {",
          "277:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "278:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "275:         updateAddressPort(port, PORT3);",
          "282:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "277:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "280:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "305:         if (async) {",
          "306:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "307:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/hostname/HostnameVerificationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.cxf.systest.https.hostname;",
          "22: import java.net.URL;",
          "24: import javax.net.ssl.HostnameVerifier;",
          "25: import javax.net.ssl.HttpsURLConnection;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Arrays;",
          "24: import java.util.Collection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.junit.AfterClass;",
          "40: import org.junit.BeforeClass;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.junit.runner.RunWith;",
          "44: import org.junit.runners.Parameterized.Parameters;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: public class HostnameVerificationTest extends AbstractBusClientServerTestBase {",
          "50:     static final String PORT = allocatePort(HostnameVerificationServer.class);",
          "51:     static final String PORT2 = allocatePort(HostnameVerificationServer.class, 2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: @RunWith(value = org.junit.runners.Parameterized.class)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "53:     static final String PORT4 = allocatePort(HostnameVerificationServer.class, 4);",
          "54:     static final String PORT5 = allocatePort(HostnameVerificationServer.class, 5);",
          "56:     @BeforeClass",
          "57:     public static void startServers() throws Exception {",
          "58:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     final Boolean async;",
          "63:     public HostnameVerificationTest(Boolean async) {",
          "64:         this.async = async;",
          "65:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "63:         );",
          "64:     }",
          "66:     @AfterClass",
          "67:     public static void cleanup() throws Exception {",
          "68:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     @Parameters(name = \"{0}\")",
          "78:     public static Collection<Boolean> data() {",
          "80:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "81:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "87:         updateAddressPort(port, PORT);",
          "94:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "89:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "92:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "107:         if (async) {",
          "108:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "109:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "116:         updateAddressPort(port, PORT2);",
          "128:         try {",
          "129:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "118:         try {",
          "119:             port.greetMe(\"Kitty\");",
          "120:             fail(\"Failure expected on a non-matching subject alternative name\");",
          "121:         } catch (Exception ex) {",
          "123:         }",
          "126:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "136:         if (async) {",
          "137:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "138:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "155:         updateAddressPort(port, PORT3);",
          "162:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "157:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "160:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "170:         if (async) {",
          "171:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "172:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "184:         updateAddressPort(port, PORT4);",
          "196:         try {",
          "197:             port.greetMe(\"Kitty\");",
          "",
          "[Removed Lines]",
          "186:         try {",
          "187:             port.greetMe(\"Kitty\");",
          "188:             fail(\"Failure expected with no matching Subject Alt Name or CN\");",
          "189:         } catch (Exception ex) {",
          "191:         }",
          "194:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "199:         if (async) {",
          "200:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "201:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "223:         updateAddressPort(port, PORT4);",
          "225:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "227:         ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:         if (async) {",
          "234:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "235:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "257:             updateAddressPort(port, PORT4);",
          "259:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "261:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:             if (async) {",
          "273:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "274:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "293:             updateAddressPort(port, PORT4);",
          "295:             TLSClientParameters clientParameters = new TLSClientParameters();",
          "296:             clientParameters.setUseHttpsURLConnectionDefaultHostnameVerifier(true);",
          "297:             Client client = ClientProxy.getClient(port);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:             if (async) {",
          "314:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "315:             }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "300:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "307:             ((java.io.Closeable)port).close();",
          "308:         } finally {",
          "309:             if (hostnameVerifier != null) {",
          "",
          "[Removed Lines]",
          "303:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "305:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "334:         updateAddressPort(port, PORT5);",
          "341:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "",
          "[Removed Lines]",
          "336:         assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "339:         ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "",
          "[Added Lines]",
          "354:         if (async) {",
          "355:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "356:         }",
          "",
          "---------------"
        ],
        "systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java||systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java": [
          "File: systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java -> systests/transports/src/test/java/org/apache/cxf/systest/https/trust/TrustManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.security.cert.PKIXBuilderParameters;",
          "28: import java.security.cert.X509CertSelector;",
          "29: import java.security.cert.X509Certificate;",
          "31: import javax.net.ssl.CertPathTrustManagerParameters;",
          "32: import javax.net.ssl.TrustManager;",
          "33: import javax.net.ssl.TrustManagerFactory;",
          "34: import javax.net.ssl.X509TrustManager;",
          "36: import org.apache.cxf.Bus;",
          "37: import org.apache.cxf.BusFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.util.Arrays;",
          "31: import java.util.Collection;",
          "37: import javax.xml.ws.BindingProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.junit.AfterClass;",
          "49: import org.junit.BeforeClass;",
          "54: public class TrustManagerTest extends AbstractBusClientServerTestBase {",
          "55:     static final String PORT = allocatePort(TrustServer.class);",
          "56:     static final String PORT2 = allocatePort(TrustServer.class, 2);",
          "57:     static final String PORT3 = allocatePort(TrustServer.class, 3);",
          "59:     @BeforeClass",
          "60:     public static void startServers() throws Exception {",
          "61:         assertTrue(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import org.junit.runner.RunWith;",
          "54: import org.junit.runners.Parameterized.Parameters;",
          "59: @RunWith(value = org.junit.runners.Parameterized.class)",
          "65:     final Boolean async;",
          "67:     public TrustManagerTest(Boolean async) {",
          "68:         this.async = async;",
          "69:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         );",
          "73:     }",
          "75:     @AfterClass",
          "76:     public static void cleanup() throws Exception {",
          "77:         stopAllServers();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     @Parameters(name = \"{0}\")",
          "88:     public static Collection<Boolean> data() {",
          "90:         return Arrays.asList(new Boolean[] {Boolean.FALSE, Boolean.TRUE});",
          "91:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:         updateAddressPort(port, PORT);",
          "98:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "99:         X509TrustManager trustManager = new NoOpX509TrustManager();",
          "100:         TrustManager[] trustManagers = new TrustManager[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:         if (async) {",
          "118:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "119:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:         updateAddressPort(port, PORT);",
          "133:         String validPrincipalName = \"CN=Bethal,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "135:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         if (async) {",
          "158:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "159:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "173:             updateAddressPort(port, PORT);",
          "175:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "177:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:             if (async) {",
          "205:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "206:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "206:             updateAddressPort(port, PORT);",
          "208:             assertEquals(port.greetMe(\"Kitty\"), \"Hello Kitty\");",
          "210:             ((java.io.Closeable)port).close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:             if (async) {",
          "243:                 ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "244:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "236:         updateAddressPort(port, PORT3);",
          "238:         String validPrincipalName = \"CN=Bethal,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "240:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277:         if (async) {",
          "278:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "279:         }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "273:         updateAddressPort(port, PORT);",
          "275:         String invalidPrincipalName = \"CN=Bethal2,OU=Bethal,O=ApacheTest,L=Syracuse,C=US\";",
          "277:         TLSClientParameters tlsParams = new TLSClientParameters();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:         if (async) {",
          "320:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "321:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "315:         updateAddressPort(port, PORT2);",
          "318:         KeyStore ts = KeyStore.getInstance(\"JKS\");",
          "319:         try (InputStream trustStore =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:         if (async) {",
          "367:             ((BindingProvider)port).getRequestContext().put(\"use.async.http.conduit\", true);",
          "368:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}