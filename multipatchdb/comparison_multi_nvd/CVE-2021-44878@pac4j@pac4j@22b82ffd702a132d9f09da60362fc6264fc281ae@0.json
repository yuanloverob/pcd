{
  "cve_id": "CVE-2021-44878",
  "cve_desc": "If an OpenID Connect provider supports the \"none\" algorithm (i.e., tokens with no signature), pac4j v5.3.0 (and prior) does not refuse it without an explicit configuration on its side or for the \"idtoken\" response type which is not secure and violates the OpenID Core Specification. The \"none\" algorithm does not require any signature verification when validating the ID tokens, which allows the attacker to bypass the token validation by injecting a malformed ID token using \"none\" as the value of \"alg\" key in the header with an empty signature value.",
  "repo": "pac4j/pac4j",
  "patch_hash": "22b82ffd702a132d9f09da60362fc6264fc281ae",
  "patch_info": {
    "commit_hash": "22b82ffd702a132d9f09da60362fc6264fc281ae",
    "repo": "pac4j/pac4j",
    "commit_url": "https://github.com/pac4j/pac4j/commit/22b82ffd702a132d9f09da60362fc6264fc281ae",
    "files": [
      "documentation/docs/clients/openid-connect.md",
      "documentation/docs/release-notes.md",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
    ],
    "message": "reinforce security on OIDC",
    "before_after_code_files": [
      "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
    ]
  },
  "patch_diff": {
    "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private TokenValidator tokenValidator;",
      "143:     @Override",
      "144:     protected void internalInit() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:     private boolean allowUnsignedIdTokens;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "486:         this.mappedClaims = mappedClaims;",
      "487:     }",
      "489:     @Override",
      "490:     public String toString() {",
      "491:         return toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:     public boolean isAllowUnsignedIdTokens() {",
      "492:         return allowUnsignedIdTokens;",
      "493:     }",
      "495:     public void setAllowUnsignedIdTokens(final boolean allowUnsignedIdTokens) {",
      "496:         this.allowUnsignedIdTokens = allowUnsignedIdTokens;",
      "497:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "495:             \"connectTimeout\", connectTimeout, \"readTimeout\", readTimeout, \"resourceRetriever\", resourceRetriever,",
      "496:             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,",
      "497:             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,",
      "499:     }",
      "500: }",
      "",
      "[Removed Lines]",
      "498:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims);",
      "",
      "[Added Lines]",
      "508:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens);",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: import java.io.IOException;",
      "7: import java.util.Map;",
      "11: import org.pac4j.core.context.WebContext;",
      "12: import org.pac4j.core.context.session.SessionStore;",
      "13: import org.pac4j.core.credentials.Credentials;",
      "",
      "[Removed Lines]",
      "9: import javax.naming.AuthenticationException;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:                 httpResponse.getContent());",
      "100:             final var userInfoResponse = UserInfoResponse.parse(httpResponse);",
      "101:             if (userInfoResponse instanceof UserInfoErrorResponse) {",
      "105:             } else {",
      "106:                 final var userInfoSuccessResponse = (UserInfoSuccessResponse) userInfoResponse;",
      "107:                 final JWTClaimsSet userInfoClaimsSet;",
      "",
      "[Removed Lines]",
      "102:                 logger.error(\"Bad User Info response, error={}\",",
      "103:                     ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());",
      "104:                 throw new AuthenticationException();",
      "",
      "[Added Lines]",
      "100:                 throw new TechnicalException(\"Bad User Info response, error=\"",
      "101:                     + ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:                 }",
      "113:                 return userInfoClaimsSet;",
      "114:             }",
      "116:             throw new TechnicalException(e);",
      "117:         }",
      "118:     }",
      "",
      "[Removed Lines]",
      "115:         } catch (IOException | ParseException | java.text.ParseException | AuthenticationException e) {",
      "",
      "[Added Lines]",
      "112:         } catch (IOException | ParseException | java.text.ParseException e) {",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java": [
      "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:         final var _clientID = new ClientID(configuration.getClientId());",
      "53:         for (var jwsAlgorithm : jwsAlgorithms) {",
      "59:             final IDTokenValidator idTokenValidator;",
      "61:                 idTokenValidator = new IDTokenValidator(configuration.findProviderMetadata().getIssuer(), _clientID);",
      "62:             } else if (CommonHelper.isNotBlank(configuration.getSecret()) && (JWSAlgorithm.HS256.equals(jwsAlgorithm) ||",
      "63:                 JWSAlgorithm.HS384.equals(jwsAlgorithm) || JWSAlgorithm.HS512.equals(jwsAlgorithm))) {",
      "",
      "[Removed Lines]",
      "54:             if (\"none\".equals(jwsAlgorithm.getName())) {",
      "55:                 jwsAlgorithm = null;",
      "56:             }",
      "60:             if (jwsAlgorithm == null) {",
      "",
      "[Added Lines]",
      "56:             if (\"none\".equals(jwsAlgorithm.getName())) {",
      "57:                 if (!configuration.isAllowUnsignedIdTokens()) {",
      "58:                     throw new TechnicalException(\"Unsigned ID tokens are not allowed\");",
      "59:                 }",
      "60:                 logger.warn(\"Allowing unsigned ID tokens\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:             throw new TechnicalException(\"Unable to validate the ID token\");",
      "113:         }",
      "114:     }",
      "115: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "117:     List<IDTokenValidator> getIdTokenValidators() {",
      "118:         return idTokenValidators;",
      "119:     }",
      "",
      "---------------"
    ],
    "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java": [
      "File: pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java -> pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package org.pac4j.oidc.profile.creator;",
      "3: import com.nimbusds.jose.JWSAlgorithm;",
      "4: import com.nimbusds.oauth2.sdk.id.Issuer;",
      "5: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
      "6: import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;",
      "7: import org.junit.Before;",
      "8: import org.junit.Test;",
      "9: import org.pac4j.core.exception.TechnicalException;",
      "10: import org.pac4j.core.util.TestsConstants;",
      "11: import org.pac4j.core.util.TestsHelper;",
      "12: import org.pac4j.oidc.config.OidcConfiguration;",
      "14: import java.net.URI;",
      "15: import java.net.URISyntaxException;",
      "16: import java.util.ArrayList;",
      "17: import java.util.List;",
      "19: import static org.mockito.Mockito.*;",
      "20: import static org.junit.Assert.*;",
      "28: public final class TokenValidatorTests implements TestsConstants {",
      "30:     private OidcConfiguration configuration;",
      "32:     private List<JWSAlgorithm> algorithms;",
      "34:     @Before",
      "35:     public void setUp() throws URISyntaxException {",
      "36:         configuration = mock(OidcConfiguration.class);",
      "37:         final OIDCProviderMetadata metadata = mock(OIDCProviderMetadata.class);",
      "38:         when(metadata.getIssuer()).thenReturn(new Issuer(PAC4J_URL));",
      "39:         when(metadata.getJWKSetURI()).thenReturn(new URI(PAC4J_BASE_URL));",
      "40:         when(configuration.findProviderMetadata()).thenReturn(metadata);",
      "41:         when(configuration.getClientId()).thenReturn(ID);",
      "42:         when(configuration.getSecret()).thenReturn(SECRET);",
      "43:         algorithms = new ArrayList<>();",
      "44:         when(metadata.getIDTokenJWSAlgs()).thenReturn(algorithms);",
      "45:     }",
      "47:     @Test",
      "48:     public void testNoAlgoDefinedAtProvider() {",
      "49:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
      "50:             \"There must at least one JWS algorithm supported on the OpenID Connect provider side\");",
      "51:     }",
      "53:     @Test",
      "54:     public void testNoneAlgoNotAllowed() {",
      "55:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
      "56:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
      "57:             \"Unsigned ID tokens are not allowed\");",
      "58:     }",
      "60:     @Test",
      "61:     public void testNoneAlgoAllowed() {",
      "62:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
      "63:         when(configuration.isAllowUnsignedIdTokens()).thenReturn(true);",
      "64:         final TokenValidator validator = new TokenValidator(configuration);",
      "65:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "66:         assertEquals(1, validators.size());",
      "67:         assertTrue(validators.get(0) instanceof IDTokenValidator);",
      "68:     }",
      "70:     @Test",
      "71:     public void testTwoAlgorithms() {",
      "72:         algorithms.add(JWSAlgorithm.HS256);",
      "73:         algorithms.add(JWSAlgorithm.RS256);",
      "74:         final TokenValidator validator = new TokenValidator(configuration);",
      "75:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "76:         assertEquals(2, validators.size());",
      "77:     }",
      "79:     @Test",
      "80:     public void testTwoAlgorithmsOnePreferred() {",
      "81:         algorithms.add(JWSAlgorithm.HS256);",
      "82:         algorithms.add(JWSAlgorithm.RS256);",
      "83:         when(configuration.getPreferredJwsAlgorithm()).thenReturn(JWSAlgorithm.HS256);",
      "84:         final TokenValidator validator = new TokenValidator(configuration);",
      "85:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
      "86:         assertEquals(1, validators.size());",
      "87:     }",
      "88: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c87bbc536ed5d05f940ae015403120df2935589",
      "candidate_info": {
        "commit_hash": "9c87bbc536ed5d05f940ae015403120df2935589",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/9c87bbc536ed5d05f940ae015403120df2935589",
        "files": [
          "documentation/docs/release-notes.md",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
        ],
        "message": "check OIDC spec",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
            "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
            "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     private final List<IDTokenValidator> idTokenValidators;",
          "35:     public TokenValidator(final OidcConfiguration configuration) {",
          "38:         final var metadataAlgorithms = configuration.findProviderMetadata().getIDTokenJWSAlgs();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     protected final OidcConfiguration configuration;",
          "38:         CommonHelper.assertNotNull(\"configuration\", configuration);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:             idTokenValidators.add(idTokenValidator);",
          "78:         }",
          "79:     }",
          "81:     protected IDTokenValidator createRSATokenValidator(final OidcConfiguration configuration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:         this.configuration = configuration;",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java": [
          "File: pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java -> pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.pac4j.oidc.profile.creator;",
          "3: import com.nimbusds.jose.JWSAlgorithm;",
          "4: import com.nimbusds.oauth2.sdk.id.Issuer;",
          "5: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
          "6: import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;",
          "7: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import com.nimbusds.jwt.SignedJWT;",
          "6: import com.nimbusds.openid.connect.sdk.Nonce;",
          "7: import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9: import org.pac4j.core.exception.TechnicalException;",
          "10: import org.pac4j.core.util.TestsConstants;",
          "11: import org.pac4j.core.util.TestsHelper;",
          "12: import org.pac4j.oidc.config.OidcConfiguration;",
          "14: import java.net.URI;",
          "15: import java.net.URISyntaxException;",
          "19: import static org.mockito.Mockito.*;",
          "20: import static org.junit.Assert.*;",
          "",
          "[Removed Lines]",
          "16: import java.util.ArrayList;",
          "17: import java.util.List;",
          "",
          "[Added Lines]",
          "15: import org.pac4j.jwt.config.signature.SecretSignatureConfiguration;",
          "16: import org.pac4j.jwt.profile.JwtGenerator;",
          "21: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28: public final class TokenValidatorTests implements TestsConstants {",
          "30:     private OidcConfiguration configuration;",
          "32:     private List<JWSAlgorithm> algorithms;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     private static final String CLIENT_SECRET = \"123456789012345678901234567890ab\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:         when(metadata.getJWKSetURI()).thenReturn(new URI(PAC4J_BASE_URL));",
          "40:         when(configuration.findProviderMetadata()).thenReturn(metadata);",
          "41:         when(configuration.getClientId()).thenReturn(ID);",
          "43:         algorithms = new ArrayList<>();",
          "44:         when(metadata.getIDTokenJWSAlgs()).thenReturn(algorithms);",
          "45:     }",
          "",
          "[Removed Lines]",
          "42:         when(configuration.getSecret()).thenReturn(SECRET);",
          "",
          "[Added Lines]",
          "48:         when(configuration.getSecret()).thenReturn(CLIENT_SECRET);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68:         assertTrue(validators.get(0) instanceof IDTokenValidator);",
          "69:     }",
          "71:     @Test",
          "72:     public void testTwoAlgorithms() {",
          "73:         algorithms.add(JWSAlgorithm.HS256);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     @Test",
          "78:     public void testNoneAlgoAllowedButIdTokenRequested() {",
          "79:         when(configuration.getResponseType()).thenReturn(\"code id_token\");",
          "80:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
          "81:         when(configuration.isAllowUnsignedIdTokens()).thenReturn(true);",
          "82:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
          "83:             \"Unsigned ID tokens are not allowed: they must be explicitly enabled on client side and \" +",
          "84:                 \"the response_type used must return no ID Token from the authorization endpoint\");",
          "85:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "86:         final List<IDTokenValidator> validators = validator.getIdTokenValidators();",
          "87:         assertEquals(1, validators.size());",
          "88:     }",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     @Test",
          "107:     public void testValidateIdToken() throws Exception {",
          "108:         algorithms.add(JWSAlgorithm.HS256);",
          "109:         final TokenValidator validator = new TokenValidator(configuration);",
          "111:         final JwtGenerator generator = new JwtGenerator(new SecretSignatureConfiguration(CLIENT_SECRET, JWSAlgorithm.HS256));",
          "112:         final Map<String, Object> claims = new HashMap<>();",
          "113:         claims.put(\"iss\", PAC4J_URL);",
          "114:         claims.put(\"sub\", KEY);",
          "115:         claims.put(\"aud\", ID);",
          "116:         final long now = new Date().getTime() / 1000;",
          "117:         claims.put(\"exp\", now + 1000);",
          "118:         claims.put(\"iat\", now);",
          "119:         final Nonce nonce = new Nonce();",
          "120:         claims.put(\"nonce\", nonce.toString());",
          "121:         final String idToken = generator.generate(claims);",
          "123:         final IDTokenClaimsSet claimsSet = validator.validate(SignedJWT.parse(idToken), nonce);",
          "124:         assertEquals(KEY, claimsSet.getSubject().toString());",
          "125:         assertEquals(PAC4J_URL, claimsSet.getIssuer().toString());",
          "126:         assertEquals(ID, claimsSet.getAudience().get(0).toString());",
          "127:         assertNotNull(claimsSet.getExpirationTime());",
          "128:         assertNotNull(claimsSet.getIssueTime());",
          "129:         assertEquals(nonce, claimsSet.getNonce());",
          "130:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fe7a20c9fd64987c50bb88990ca776a09b6c40f",
      "candidate_info": {
        "commit_hash": "6fe7a20c9fd64987c50bb88990ca776a09b6c40f",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/6fe7a20c9fd64987c50bb88990ca776a09b6c40f",
        "files": [
          "documentation/docs/clients/openid-connect.md",
          "documentation/docs/release-notes.md",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java"
        ],
        "message": "Add OIDC PRIVATE_KEY_JWT authn method",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.pac4j.oidc.config;",
          "21: import com.nimbusds.jose.JWSAlgorithm;",
          "22: import com.nimbusds.jose.util.DefaultResourceRetriever;",
          "23: import com.nimbusds.jose.util.ResourceRetriever;",
          "",
          "[Removed Lines]",
          "3: import java.io.IOException;",
          "4: import java.lang.reflect.InvocationTargetException;",
          "5: import java.net.URL;",
          "6: import java.util.Arrays;",
          "7: import java.util.Collections;",
          "8: import java.util.HashMap;",
          "9: import java.util.LinkedHashMap;",
          "10: import java.util.List;",
          "11: import java.util.Map;",
          "13: import org.pac4j.core.client.config.BaseClientConfiguration;",
          "14: import org.pac4j.core.context.HttpConstants;",
          "15: import org.pac4j.core.exception.TechnicalException;",
          "16: import org.pac4j.core.logout.handler.DefaultLogoutHandler;",
          "17: import org.pac4j.core.logout.handler.LogoutHandler;",
          "18: import org.pac4j.core.util.generator.ValueGenerator;",
          "19: import org.pac4j.core.util.generator.RandomValueGenerator;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import com.nimbusds.oauth2.sdk.pkce.CodeChallengeMethod;",
          "29: import com.nimbusds.openid.connect.sdk.OIDCResponseTypeValue;",
          "30: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
          "31: import org.pac4j.oidc.util.SessionStoreValueRetriever;",
          "32: import org.pac4j.oidc.util.ValueRetriever;",
          "35: import javax.net.ssl.SSLSocketFactory;",
          "37: import static org.pac4j.core.util.CommonHelper.*;",
          "",
          "[Removed Lines]",
          "33: import org.pac4j.oidc.profile.creator.TokenValidator;",
          "",
          "[Added Lines]",
          "13: import org.pac4j.core.client.config.BaseClientConfiguration;",
          "14: import org.pac4j.core.context.HttpConstants;",
          "15: import org.pac4j.core.exception.TechnicalException;",
          "16: import org.pac4j.core.logout.handler.DefaultLogoutHandler;",
          "17: import org.pac4j.core.logout.handler.LogoutHandler;",
          "18: import org.pac4j.core.util.generator.RandomValueGenerator;",
          "19: import org.pac4j.core.util.generator.ValueGenerator;",
          "20: import org.pac4j.oidc.profile.creator.TokenValidator;",
          "25: import java.io.IOException;",
          "26: import java.lang.reflect.InvocationTargetException;",
          "27: import java.net.URL;",
          "28: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     private ClientAuthenticationMethod clientAuthenticationMethod;",
          "95:     private boolean useNonce;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     private PrivateKeyJWTClientAuthnMethodConfig privateKeyJWTClientAuthnMethodConfig;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:         this.SSLFactory = SSLFactory;",
          "535:     }",
          "537:     @Override",
          "538:     public String toString() {",
          "539:         return toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:     public PrivateKeyJWTClientAuthnMethodConfig getPrivateKeyJWTClientAuthnMethodConfig() {",
          "534:         return privateKeyJWTClientAuthnMethodConfig;",
          "535:     }",
          "537:     public void setPrivateKeyJWTClientAuthnMethodConfig(final PrivateKeyJWTClientAuthnMethodConfig privateKeyJWTClientAuthnMethodConfig) {",
          "538:         this.privateKeyJWTClientAuthnMethodConfig = privateKeyJWTClientAuthnMethodConfig;",
          "539:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "544:             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,",
          "545:             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,",
          "546:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens,",
          "548:     }",
          "549: }",
          "",
          "[Removed Lines]",
          "547:             \"SSLFactory\", SSLFactory);",
          "",
          "[Added Lines]",
          "551:             \"SSLFactory\", SSLFactory, \"privateKeyJWTClientAuthnMethodConfig\", privateKeyJWTClientAuthnMethodConfig);",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/PrivateKeyJWTClientAuthnMethodConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.pac4j.oidc.config;",
          "3: import com.nimbusds.jose.JWSAlgorithm;",
          "4: import org.pac4j.core.util.CommonHelper;",
          "6: import java.security.PrivateKey;",
          "14: public class PrivateKeyJWTClientAuthnMethodConfig {",
          "16:     private JWSAlgorithm jwsAlgorithm;",
          "18:     private PrivateKey privateKey;",
          "20:     private String keyID;",
          "22:     public PrivateKeyJWTClientAuthnMethodConfig() {}",
          "24:     public PrivateKeyJWTClientAuthnMethodConfig(final JWSAlgorithm jwsAlgorithm, final PrivateKey privateKey) {",
          "25:         this.jwsAlgorithm = jwsAlgorithm;",
          "26:         this.privateKey = privateKey;",
          "27:     }",
          "29:     public PrivateKeyJWTClientAuthnMethodConfig(final JWSAlgorithm jwsAlgorithm, final PrivateKey privateKey, final String keyID) {",
          "30:         this(jwsAlgorithm, privateKey);",
          "31:         this.keyID = keyID;",
          "32:     }",
          "34:     public JWSAlgorithm getJwsAlgorithm() {",
          "35:         return jwsAlgorithm;",
          "36:     }",
          "38:     public void setJwsAlgorithm(final JWSAlgorithm jwsAlgorithm) {",
          "39:         this.jwsAlgorithm = jwsAlgorithm;",
          "40:     }",
          "42:     public PrivateKey getPrivateKey() {",
          "43:         return privateKey;",
          "44:     }",
          "46:     public void setPrivateKey(final PrivateKey privateKey) {",
          "47:         this.privateKey = privateKey;",
          "48:     }",
          "50:     public String getKeyID() {",
          "51:         return keyID;",
          "52:     }",
          "54:     public void setKeyID(final String keyID) {",
          "55:         this.keyID = keyID;",
          "56:     }",
          "58:     @Override",
          "59:     public String toString() {",
          "60:         return CommonHelper.toNiceString(getClass(), \"jwsAlgorithm\", jwsAlgorithm, \"keyID\", keyID);",
          "61:     }",
          "62: }",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/OidcAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.pac4j.oidc.credentials.authenticator;",
          "3: import com.nimbusds.oauth2.sdk.*;",
          "4: import com.nimbusds.oauth2.sdk.auth.*;",
          "5: import com.nimbusds.oauth2.sdk.id.ClientID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import com.nimbusds.jose.JOSEException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: import org.pac4j.core.credentials.Credentials;",
          "12: import org.pac4j.core.credentials.authenticator.Authenticator;",
          "13: import org.pac4j.core.exception.TechnicalException;",
          "15: import org.pac4j.oidc.client.OidcClient;",
          "16: import org.pac4j.oidc.config.OidcConfiguration;",
          "17: import org.pac4j.oidc.credentials.OidcCredentials;",
          "",
          "[Removed Lines]",
          "14: import org.pac4j.core.util.CommonHelper;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25: import java.util.Collection;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import static org.pac4j.core.util.CommonHelper.assertNotNull;",
          "29: import static org.pac4j.core.util.CommonHelper.isNotEmpty;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "39:         Arrays.asList(",
          "40:             ClientAuthenticationMethod.CLIENT_SECRET_POST,",
          "41:             ClientAuthenticationMethod.CLIENT_SECRET_BASIC,",
          "42:             ClientAuthenticationMethod.NONE);",
          "44:     protected OidcConfiguration configuration;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:             ClientAuthenticationMethod.PRIVATE_KEY_JWT,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "48:     private ClientAuthentication clientAuthentication;",
          "50:     public OidcAuthenticator(final OidcConfiguration configuration, final OidcClient client) {",
          "53:         this.configuration = configuration;",
          "54:         this.client = client;",
          "",
          "[Removed Lines]",
          "51:         CommonHelper.assertNotNull(\"configuration\", configuration);",
          "52:         CommonHelper.assertNotNull(\"client\", client);",
          "",
          "[Added Lines]",
          "55:         assertNotNull(\"configuration\", configuration);",
          "56:         assertNotNull(\"client\", client);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "63:             final var preferredMethod = getPreferredAuthenticationMethod(configuration);",
          "65:             final ClientAuthenticationMethod chosenMethod;",
          "67:                 if (preferredMethod != null) {",
          "68:                     if (metadataMethods.contains(preferredMethod)) {",
          "69:                         chosenMethod = preferredMethod;",
          "",
          "[Removed Lines]",
          "66:             if (CommonHelper.isNotEmpty(metadataMethods)) {",
          "",
          "[Added Lines]",
          "70:             if (isNotEmpty(metadataMethods)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "87:             } else if (ClientAuthenticationMethod.CLIENT_SECRET_BASIC.equals(chosenMethod)) {",
          "88:                 final var _secret = new Secret(configuration.getSecret());",
          "89:                 clientAuthentication = new ClientSecretBasic(_clientID, _secret);",
          "90:             } else {",
          "91:                 throw new TechnicalException(\"Unsupported client authentication method: \" + chosenMethod);",
          "92:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:             } else if (ClientAuthenticationMethod.PRIVATE_KEY_JWT.equals(chosenMethod)) {",
          "95:                 final var privateKetJwtConfig = configuration.getPrivateKeyJWTClientAuthnMethodConfig();",
          "96:                 assertNotNull(\"privateKetJwtConfig\", privateKetJwtConfig);",
          "97:                 final var jwsAlgo = privateKetJwtConfig.getJwsAlgorithm();",
          "98:                 assertNotNull(\"privateKetJwtConfig.getJwsAlgorithm()\", jwsAlgo);",
          "99:                 final var privateKey = privateKetJwtConfig.getPrivateKey();",
          "100:                 assertNotNull(\"privateKetJwtConfig.getPrivateKey()\", privateKey);",
          "101:                 final var keyID = privateKetJwtConfig.getKeyID();",
          "102:                 try {",
          "103:                     clientAuthentication = new PrivateKeyJWT(_clientID, configuration.findProviderMetadata().getTokenEndpointURI(),",
          "104:                         jwsAlgo, privateKey, keyID, null);",
          "105:                 } catch (final JOSEException e) {",
          "106:                     throw new TechnicalException(\"Cannot instantiate private key JWT client authentication method\", e);",
          "107:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97cecbb421bf0cb575f00e17c46243d208414ab8",
      "candidate_info": {
        "commit_hash": "97cecbb421bf0cb575f00e17c46243d208414ab8",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/97cecbb421bf0cb575f00e17c46243d208414ab8",
        "files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
        ],
        "message": "add support for Windows ADFS Openid Connect using self-signed cert (#2174)\n\n* add support for Microsoft Windows ADFS Openid Connect using self-signed certificate in development or testing environment by using custom SSLFactory\n\n* Checkstyle modified\n\n* Checkstyle reviewed\n\n* Style optimization for Maven-Checkstyle",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.pac4j.oidc.config;",
          "3: import java.io.IOException;",
          "4: import java.net.URL;",
          "5: import java.util.Arrays;",
          "6: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import java.lang.reflect.InvocationTargetException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.pac4j.oidc.util.ValueRetriever;",
          "32: import org.pac4j.oidc.profile.creator.TokenValidator;",
          "34: import static org.pac4j.core.util.CommonHelper.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import javax.net.ssl.SSLSocketFactory;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:     private boolean allowUnsignedIdTokens;",
          "145:     @Override",
          "146:     protected void internalInit(final boolean forceReinit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     private String SSLFactory;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:         if (getResourceRetriever() == null) {",
          "164:         }",
          "165:         if (this.getProviderMetadata() == null) {",
          "166:             assertNotBlank(\"discoveryURI\", getDiscoveryURI());",
          "",
          "[Removed Lines]",
          "163:             setResourceRetriever(new DefaultResourceRetriever(getConnectTimeout(),getReadTimeout()));",
          "",
          "[Added Lines]",
          "168:             try {",
          "169:                 setResourceRetriever(SSLFactory == null ?",
          "170:                     new DefaultResourceRetriever(getConnectTimeout(),getReadTimeout()) :",
          "171:                     new DefaultResourceRetriever(getConnectTimeout(),getReadTimeout(), 0, false,",
          "172:                         (SSLSocketFactory) Class.forName(SSLFactory).getDeclaredConstructor().newInstance()));",
          "173:             } catch (ClassNotFoundException | InvocationTargetException | InstantiationException",
          "174:                 | IllegalAccessException | NoSuchMethodException e) {",
          "175:                 throw new TechnicalException(\"SSLFactory loaded fail, please check your configuration\");",
          "176:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "496:         this.allowUnsignedIdTokens = allowUnsignedIdTokens;",
          "497:     }",
          "499:     @Override",
          "500:     public String toString() {",
          "501:         return toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:     public String getSSLFactory() {",
          "513:         return SSLFactory;",
          "514:     }",
          "516:     public void setSSLFactory(final String SSLFactory) {",
          "517:         this.SSLFactory = SSLFactory;",
          "518:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "505:             \"connectTimeout\", connectTimeout, \"readTimeout\", readTimeout, \"resourceRetriever\", resourceRetriever,",
          "506:             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,",
          "507:             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,",
          "509:     }",
          "510: }",
          "",
          "[Removed Lines]",
          "508:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens);",
          "",
          "[Added Lines]",
          "529:             \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens,",
          "530:             \"SSLFactory\", SSLFactory);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "454bb62f52aa79b2f07cbff498b9b4a3f63424e0",
      "candidate_info": {
        "commit_hash": "454bb62f52aa79b2f07cbff498b9b4a3f63424e0",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/454bb62f52aa79b2f07cbff498b9b4a3f63424e0",
        "files": [
          "documentation/docs/release-notes.md",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java"
        ],
        "message": "Disable JWT access token parsing by default (#2306)\n\nClients should normally not make any assumptions on the format of access\ntokens. When required, this can be re-enabled via\nOidcConfiguration.setIncludeAccessTokenClaimsInProfile.",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java||pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:     private TokenValidator tokenValidator;",
          "146:     private boolean allowUnsignedIdTokens;",
          "148:     private String SSLFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:     private boolean includeAccessTokenClaimsInProfile = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "508:     public void setAllowUnsignedIdTokens(final boolean allowUnsignedIdTokens) {",
          "509:         this.allowUnsignedIdTokens = allowUnsignedIdTokens;",
          "510:     }",
          "512:     public String getSSLFactory() {",
          "513:         return SSLFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:     public boolean isIncludeAccessTokenClaimsInProfile() {",
          "522:         return includeAccessTokenClaimsInProfile;",
          "523:     }",
          "525:     public void setIncludeAccessTokenClaimsInProfile(boolean includeAccessTokenClaimsInProfile) {",
          "526:         this.includeAccessTokenClaimsInProfile = includeAccessTokenClaimsInProfile;",
          "527:     }",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/OidcProfileCreator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                 }",
          "135:             }",
          "140:             profile.setTokenExpirationAdvance(configuration.getTokenExpirationAdvance());",
          "",
          "[Removed Lines]",
          "137:             collectClaimsFromAccessTokenIfAny(credentials, nonce, profile);",
          "",
          "[Added Lines]",
          "137:             if (configuration.isIncludeAccessTokenClaimsInProfile()) {",
          "138:                 collectClaimsFromAccessTokenIfAny(credentials, nonce, profile);",
          "139:             }",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java": [
          "File: pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java -> pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/OidcProfileCreatorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.pac4j.oidc.profile.creator;",
          "10: import org.junit.Before;",
          "11: import org.junit.Test;",
          "12: import org.pac4j.core.context.MockWebContext;",
          "13: import org.pac4j.core.context.session.MockSessionStore;",
          "14: import org.pac4j.core.util.TestsConstants;",
          "15: import org.pac4j.oidc.client.OidcClient;",
          "16: import org.pac4j.oidc.config.OidcConfiguration;",
          "17: import org.pac4j.oidc.credentials.OidcCredentials;",
          "",
          "[Removed Lines]",
          "3: import com.nimbusds.jose.JWSAlgorithm;",
          "4: import com.nimbusds.jwt.JWTClaimsSet;",
          "5: import com.nimbusds.jwt.PlainJWT;",
          "6: import com.nimbusds.oauth2.sdk.id.Issuer;",
          "7: import com.nimbusds.oauth2.sdk.token.BearerAccessToken;",
          "8: import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;",
          "9: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
          "19: import java.net.URI;",
          "20: import java.util.ArrayList;",
          "21: import java.util.Date;",
          "22: import java.util.List;",
          "23: import java.util.UUID;",
          "25: import static org.junit.Assert.assertNotNull;",
          "26: import static org.mockito.Mockito.any;",
          "27: import static org.mockito.Mockito.mock;",
          "28: import static org.mockito.Mockito.when;",
          "",
          "[Added Lines]",
          "3: import static org.junit.Assert.*;",
          "4: import static org.mockito.ArgumentMatchers.any;",
          "5: import static org.mockito.Mockito.mock;",
          "6: import static org.mockito.Mockito.when;",
          "8: import java.net.URI;",
          "9: import java.util.ArrayList;",
          "10: import java.util.Date;",
          "11: import java.util.List;",
          "12: import java.util.Optional;",
          "13: import java.util.UUID;",
          "19: import org.pac4j.core.profile.UserProfile;",
          "25: import com.nimbusds.jose.JWSAlgorithm;",
          "26: import com.nimbusds.jwt.JWT;",
          "27: import com.nimbusds.jwt.JWTClaimsSet;",
          "28: import com.nimbusds.jwt.PlainJWT;",
          "29: import com.nimbusds.oauth2.sdk.id.Issuer;",
          "30: import com.nimbusds.oauth2.sdk.token.BearerAccessToken;",
          "31: import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;",
          "32: import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         when(configuration.findProviderMetadata()).thenReturn(metadata);",
          "59:         var tokenValidator = mock(TokenValidator.class);",
          "62:         when(configuration.findTokenValidator()).thenReturn(tokenValidator);",
          "63:         when(configuration.getClientId()).thenReturn(ID);",
          "",
          "[Removed Lines]",
          "60:         when(tokenValidator.validate(any(), any())).thenReturn(idTokenClaims);",
          "",
          "[Added Lines]",
          "64:         when(tokenValidator.validate(any(), any())).thenAnswer(",
          "65:                 a -> IDTokenClaimsSet.parse(((JWT) a.getArgument(0)).getJWTClaimsSet().toString()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     @Test",
          "70:     public void testCreateOidcProfile() throws Exception {",
          "71:         var creator = new OidcProfileCreator(configuration, new OidcClient(configuration));",
          "72:         var webContext = MockWebContext.create();",
          "73:         var credentials = new OidcCredentials();",
          "74:         credentials.setAccessToken(new BearerAccessToken(UUID.randomUUID().toString()));",
          "75:         var idToken = new PlainJWT(idTokenClaims.toJWTClaimsSet());",
          "76:         credentials.setIdToken(idToken);",
          "78:     }",
          "80:     @Test",
          "81:     public void testCreateOidcProfileJwtAccessToken() throws Exception {",
          "82:         var creator = new OidcProfileCreator(configuration, new OidcClient(configuration));",
          "83:         var webContext = MockWebContext.create();",
          "84:         var credentials = new OidcCredentials();",
          "",
          "[Removed Lines]",
          "77:         assertNotNull(creator.create(credentials, webContext, new MockSessionStore()));",
          "",
          "[Added Lines]",
          "76:         when(configuration.isIncludeAccessTokenClaimsInProfile()).thenReturn(true);",
          "83:         assertTrue(creator.create(credentials, webContext, new MockSessionStore()).isPresent());",
          "84:     }",
          "86:     @Test",
          "87:     public void testCreateOidcProfileWithoutAccessToken() throws Exception {",
          "88:         when(configuration.isIncludeAccessTokenClaimsInProfile()).thenReturn(true);",
          "89:         var creator = new OidcProfileCreator(configuration, new OidcClient(configuration));",
          "90:         var webContext = MockWebContext.create();",
          "91:         var credentials = new OidcCredentials();",
          "92:         credentials.setAccessToken(null);",
          "93:         var idToken = new PlainJWT(idTokenClaims.toJWTClaimsSet());",
          "94:         credentials.setIdToken(idToken);",
          "95:         assertTrue(creator.create(credentials, webContext, new MockSessionStore()).isPresent());",
          "100:         when(configuration.isIncludeAccessTokenClaimsInProfile()).thenReturn(false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:         var idToken = new PlainJWT(idTokenClaims.toJWTClaimsSet());",
          "91:         credentials.setIdToken(idToken);",
          "93:     }",
          "94: }",
          "",
          "[Removed Lines]",
          "92:         assertNotNull(creator.create(credentials, webContext, new MockSessionStore()));",
          "",
          "[Added Lines]",
          "111:         Optional<UserProfile> profile = creator.create(credentials, webContext, new MockSessionStore());",
          "112:         assertTrue(profile.isPresent());",
          "113:         assertNull(profile.get().getAttribute(\"client\"));",
          "115:         when(configuration.isIncludeAccessTokenClaimsInProfile()).thenReturn(true);",
          "116:         profile = creator.create(credentials, webContext, new MockSessionStore());",
          "117:         assertTrue(profile.isPresent());",
          "118:         assertEquals(\"pac4j\", profile.get().getAttribute(\"client\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc766f89fabb0a8ea54dbb20dfa0d76f4cfc62e5",
      "candidate_info": {
        "commit_hash": "cc766f89fabb0a8ea54dbb20dfa0d76f4cfc62e5",
        "repo": "pac4j/pac4j",
        "commit_url": "https://github.com/pac4j/pac4j/commit/cc766f89fabb0a8ea54dbb20dfa0d76f4cfc62e5",
        "files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
        ],
        "message": "OIDC: reinforce security",
        "before_after_code_files": [
          "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
            "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
          ],
          "candidate": [
            "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
            "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java"
          ]
        }
      },
      "candidate_diff": {
        "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java||pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java": [
          "File: pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java -> pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import com.nimbusds.oauth2.sdk.auth.Secret;",
          "8: import com.nimbusds.oauth2.sdk.id.ClientID;",
          "9: import com.nimbusds.openid.connect.sdk.Nonce;",
          "10: import com.nimbusds.openid.connect.sdk.claims.IDTokenClaimsSet;",
          "11: import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;",
          "12: import org.pac4j.core.exception.TechnicalException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import com.nimbusds.openid.connect.sdk.OIDCResponseTypeValue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             final IDTokenValidator idTokenValidator;",
          "56:             if (\"none\".equals(jwsAlgorithm.getName())) {",
          "59:                 }",
          "60:                 logger.warn(\"Allowing unsigned ID tokens\");",
          "61:                 idTokenValidator = new IDTokenValidator(configuration.findProviderMetadata().getIssuer(), _clientID);",
          "",
          "[Removed Lines]",
          "57:                 if (!configuration.isAllowUnsignedIdTokens()) {",
          "58:                     throw new TechnicalException(\"Unsigned ID tokens are not allowed\");",
          "",
          "[Added Lines]",
          "58:                 final String responseType = configuration.getResponseType();",
          "59:                 final boolean responseTypeContainsIdToken = responseType != null",
          "60:                     && responseType.contains(OIDCResponseTypeValue.ID_TOKEN.toString());",
          "61:                 if (!configuration.isAllowUnsignedIdTokens() || responseTypeContainsIdToken) {",
          "62:                     throw new TechnicalException(\"Unsigned ID tokens are not allowed: \" +",
          "63:                         \"they must be explicitly enabled on client side and \" +",
          "64:                         \"the response_type used must return no ID Token from the authorization endpoint\");",
          "",
          "---------------"
        ],
        "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java||pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java": [
          "File: pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java -> pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     public void testNoneAlgoNotAllowed() {",
          "55:         algorithms.add(JWSAlgorithm.parse(\"none\"));",
          "56:         TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,",
          "58:     }",
          "60:     @Test",
          "",
          "[Removed Lines]",
          "57:             \"Unsigned ID tokens are not allowed\");",
          "",
          "[Added Lines]",
          "57:             \"Unsigned ID tokens are not allowed: they must be explicitly enabled on client side and \" +",
          "58:                 \"the response_type used must return no ID Token from the authorization endpoint\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}