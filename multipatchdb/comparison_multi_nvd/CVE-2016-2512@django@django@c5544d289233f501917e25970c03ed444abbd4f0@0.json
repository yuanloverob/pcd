{
  "cve_id": "CVE-2016-2512",
  "cve_desc": "The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\\@attacker.com.",
  "repo": "django/django",
  "patch_hash": "c5544d289233f501917e25970c03ed444abbd4f0",
  "patch_info": {
    "commit_hash": "c5544d289233f501917e25970c03ed444abbd4f0",
    "repo": "django/django",
    "commit_url": "https://github.com/django/django/commit/c5544d289233f501917e25970c03ed444abbd4f0",
    "files": [
      "django/utils/http.py",
      "docs/releases/1.8.10.txt",
      "docs/releases/1.9.3.txt",
      "tests/utils_tests/test_http.py"
    ],
    "message": "Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\n\nThis is a security fix.",
    "before_after_code_files": [
      "django/utils/http.py||django/utils/http.py",
      "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
    ]
  },
  "patch_diff": {
    "django/utils/http.py||django/utils/http.py": [
      "File: django/utils/http.py -> django/utils/http.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:         url = url.strip()",
      "291:     if not url:",
      "292:         return False",
      "295:     # Chrome considers any URL with more than two slashes to be absolute, but",
      "296:     # urlparse is not so flexible. Treat any url with three slashes as unsafe.",
      "297:     if url.startswith('///'):",
      "",
      "[Removed Lines]",
      "293:     # Chrome treats \\ completely as /",
      "294:     url = url.replace('\\\\', '/')",
      "",
      "[Added Lines]",
      "293:     # Chrome treats \\ completely as / in paths but it could be part of some",
      "294:     # basic auth credentials so we need to check both URLs.",
      "295:     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)",
      "298: def _is_safe_url(url, host):",
      "",
      "---------------"
    ],
    "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py": [
      "File: tests/utils_tests/test_http.py -> tests/utils_tests/test_http.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:                         'javascript:alert(\"XSS\")',",
      "98:                         '\\njavascript:alert(x)',",
      "99:                         '\\x08//example.com',",
      "100:                         '\\n'):",
      "101:             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)",
      "102:         for good_url in ('/view/?param=http://example.com',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100:                         r'http://otherserver\\@example.com',",
      "101:                         r'http:\\\\testserver\\@example.com',",
      "102:                         r'http://testserver\\me:pass@example.com',",
      "103:                         r'http://testserver\\@example.com',",
      "104:                         r'http:\\\\testserver\\confirm\\me@example.com',",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:                      'https://testserver/',",
      "107:                      'HTTPS://testserver/',",
      "108:                      '//testserver/',",
      "109:                      '/url%20with%20spaces/'):",
      "110:             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)",
      "112:     def test_urlsafe_base64_roundtrip(self):",
      "113:         bytestring = b'foo'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114:                      'http://testserver/confirm?email=me@example.com',",
      "117:         # Valid basic auth credentials are allowed.",
      "118:         self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))",
      "119:         # A path without host is allowed.",
      "120:         self.assertTrue(http.is_safe_url('/confirm/me@example.com'))",
      "121:         # Basic auth without host is not allowed.",
      "122:         self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f227b8d15d9d0e0c50eb6459cf4556bccc3fae53",
      "candidate_info": {
        "commit_hash": "f227b8d15d9d0e0c50eb6459cf4556bccc3fae53",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/f227b8d15d9d0e0c50eb6459cf4556bccc3fae53",
        "files": [
          "django/contrib/auth/views.py",
          "django/utils/http.py",
          "django/views/i18n.py",
          "docs/internals/deprecation.txt",
          "docs/releases/1.11.txt",
          "tests/utils_tests/test_http.py"
        ],
        "message": "Refs #26956 -- Allowed is_safe_url() to validate against multiple hosts",
        "before_after_code_files": [
          "django/contrib/auth/views.py||django/contrib/auth/views.py",
          "django/utils/http.py||django/utils/http.py",
          "django/views/i18n.py||django/views/i18n.py",
          "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ],
          "candidate": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ]
        }
      },
      "candidate_diff": {
        "django/contrib/auth/views.py||django/contrib/auth/views.py": [
          "File: django/contrib/auth/views.py -> django/contrib/auth/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         )",
          "87:         url_is_safe = is_safe_url(",
          "88:             url=redirect_to,",
          "90:             require_https=self.request.is_secure(),",
          "91:         )",
          "92:         if not url_is_safe:",
          "",
          "[Removed Lines]",
          "89:             host=self.request.get_host(),",
          "",
          "[Added Lines]",
          "89:             allowed_hosts={self.request.get_host()},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:             )",
          "158:             url_is_safe = is_safe_url(",
          "159:                 url=next_page,",
          "161:                 require_https=self.request.is_secure(),",
          "162:             )",
          "163:             # Security check -- don't allow redirection to a different host.",
          "",
          "[Removed Lines]",
          "160:                 host=self.request.get_host(),",
          "",
          "[Added Lines]",
          "160:                 allowed_hosts={self.request.get_host()},",
          "",
          "---------------"
        ],
        "django/utils/http.py||django/utils/http.py": [
          "File: django/utils/http.py -> django/utils/http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import re",
          "7: import sys",
          "8: import unicodedata",
          "9: from binascii import Error as BinasciiError",
          "10: from email.utils import formatdate",
          "12: from django.core.exceptions import TooManyFieldsSent",
          "13: from django.utils import six",
          "14: from django.utils.datastructures import MultiValueDict",
          "15: from django.utils.encoding import force_bytes, force_str, force_text",
          "16: from django.utils.functional import keep_lazy_text",
          "17: from django.utils.six.moves.urllib.parse import (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import warnings",
          "16: from django.utils.deprecation import RemovedInDjango21Warning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     )",
          "281:     \"\"\"",
          "282:     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to",
          "283:     a different host and uses a safe scheme).",
          "",
          "[Removed Lines]",
          "280: def is_safe_url(url, host=None, require_https=False):",
          "",
          "[Added Lines]",
          "282: def is_safe_url(url, host=None, allowed_hosts=None, require_https=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "296:             url = force_text(url)",
          "297:         except UnicodeDecodeError:",
          "298:             return False",
          "299:     # Chrome treats \\ completely as / in paths but it could be part of some",
          "300:     # basic auth credentials so we need to check both URLs.",
          "306:     # Chrome considers any URL with more than two slashes to be absolute, but",
          "307:     # urlparse is not so flexible. Treat any url with three slashes as unsafe.",
          "308:     if url.startswith('///'):",
          "",
          "[Removed Lines]",
          "301:     return (_is_safe_url(url, host, require_https=require_https) and",
          "302:             _is_safe_url(url.replace('\\\\', '/'), host, require_https=require_https))",
          "305: def _is_safe_url(url, host, require_https=False):",
          "",
          "[Added Lines]",
          "301:     if allowed_hosts is None:",
          "302:         allowed_hosts = set()",
          "303:     if host:",
          "304:         warnings.warn(",
          "305:             \"The host argument is deprecated, use allowed_hosts instead.\",",
          "306:             RemovedInDjango21Warning,",
          "307:             stacklevel=2,",
          "308:         )",
          "309:         # Avoid mutating the passed in allowed_hosts.",
          "310:         allowed_hosts = allowed_hosts | {host}",
          "313:     return (_is_safe_url(url, allowed_hosts, require_https=require_https) and",
          "314:             _is_safe_url(url.replace('\\\\', '/'), allowed_hosts, require_https=require_https))",
          "317: def _is_safe_url(url, allowed_hosts, require_https=False):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     if not url_info.scheme and url_info.netloc:",
          "325:         scheme = 'http'",
          "326:     valid_schemes = ['https'] if require_https else ['http', 'https']",
          "328:             (not scheme or scheme in valid_schemes))",
          "",
          "[Removed Lines]",
          "327:     return ((not url_info.netloc or url_info.netloc == host) and",
          "",
          "[Added Lines]",
          "339:     return ((not url_info.netloc or url_info.netloc in allowed_hosts) and",
          "",
          "---------------"
        ],
        "django/views/i18n.py||django/views/i18n.py": [
          "File: django/views/i18n.py -> django/views/i18n.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     \"\"\"",
          "39:     next = request.POST.get('next', request.GET.get('next'))",
          "40:     if ((next or not request.is_ajax()) and",
          "42:         next = request.META.get('HTTP_REFERER')",
          "43:         if next:",
          "44:             next = urlunquote(next)  # HTTP_REFERER may be encoded.",
          "46:             next = '/'",
          "47:     response = http.HttpResponseRedirect(next) if next else http.HttpResponse(status=204)",
          "48:     if request.method == 'POST':",
          "",
          "[Removed Lines]",
          "41:             not is_safe_url(url=next, host=request.get_host(), require_https=request.is_secure())):",
          "45:         if not is_safe_url(url=next, host=request.get_host(), require_https=request.is_secure()):",
          "",
          "[Added Lines]",
          "41:             not is_safe_url(url=next, allowed_hosts={request.get_host()}, require_https=request.is_secure())):",
          "45:         if not is_safe_url(url=next, allowed_hosts={request.get_host()}, require_https=request.is_secure()):",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py": [
          "File: tests/utils_tests/test_http.py -> tests/utils_tests/test_http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import unittest",
          "6: from datetime import datetime",
          "8: from django.utils import http, six",
          "9: from django.utils.datastructures import MultiValueDict",
          "12: class TestUtilsHttp(unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from django.test import ignore_warnings",
          "11: from django.utils.deprecation import RemovedInDjango21Warning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:             '\\n',",
          "108:         )",
          "109:         for bad_url in bad_urls:",
          "112:         good_urls = (",
          "113:             '/view/?param=http://example.com',",
          "",
          "[Removed Lines]",
          "110:             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)",
          "",
          "[Added Lines]",
          "112:             with ignore_warnings(category=RemovedInDjango21Warning):",
          "113:                 self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)",
          "114:             self.assertFalse(",
          "115:                 http.is_safe_url(bad_url, allowed_hosts={'testserver', 'testserver2'}),",
          "116:                 \"%s should be blocked\" % bad_url,",
          "117:             )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:             '/url%20with%20spaces/',",
          "122:         )",
          "123:         for good_url in good_urls:",
          "126:         if six.PY2:",
          "127:             # Check binary URLs, regression tests for #26308",
          "128:             self.assertTrue(",
          "130:                 \"binary URLs should be allowed on Python 2\"",
          "131:             )",
          "136:         # Valid basic auth credentials are allowed.",
          "138:         # A path without host is allowed.",
          "139:         self.assertTrue(http.is_safe_url('/confirm/me@example.com'))",
          "140:         # Basic auth without host is not allowed.",
          "",
          "[Removed Lines]",
          "124:             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)",
          "129:                 http.is_safe_url(b'https://testserver/', host='testserver'),",
          "132:             self.assertFalse(http.is_safe_url(b'\\x08//example.com', host='testserver'))",
          "133:             self.assertTrue(http.is_safe_url('\u00e0view/'.encode('utf-8'), host='testserver'))",
          "134:             self.assertFalse(http.is_safe_url('\u00e0view'.encode('latin-1'), host='testserver'))",
          "137:         self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))",
          "",
          "[Added Lines]",
          "131:             with ignore_warnings(category=RemovedInDjango21Warning):",
          "132:                 self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)",
          "133:             self.assertTrue(",
          "134:                 http.is_safe_url(good_url, allowed_hosts={'otherserver', 'testserver'}),",
          "135:                 \"%s should be allowed\" % good_url,",
          "136:             )",
          "141:                 http.is_safe_url(b'https://testserver/', allowed_hosts={'testserver'}),",
          "144:             self.assertFalse(http.is_safe_url(b'\\x08//example.com', allowed_hosts={'testserver'}))",
          "145:             self.assertTrue(http.is_safe_url('\u00e0view/'.encode('utf-8'), allowed_hosts={'testserver'}))",
          "146:             self.assertFalse(http.is_safe_url('\u00e0view'.encode('latin-1'), allowed_hosts={'testserver'}))",
          "149:         self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', allowed_hosts={'user:pass@testserver'}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:             '/view/?param=http://example.com',",
          "148:         )",
          "149:         for url in secure_urls:",
          "152:     def test_is_safe_url_secure_param_non_https_urls(self):",
          "153:         not_secure_urls = (",
          "",
          "[Removed Lines]",
          "150:             self.assertTrue(http.is_safe_url(url, 'example.com', require_https=True))",
          "",
          "[Added Lines]",
          "162:             self.assertTrue(http.is_safe_url(url, allowed_hosts={'example.com'}, require_https=True))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:             '//example.com/p',",
          "157:         )",
          "158:         for url in not_secure_urls:",
          "161:     def test_urlsafe_base64_roundtrip(self):",
          "162:         bytestring = b'foo'",
          "",
          "[Removed Lines]",
          "159:             self.assertFalse(http.is_safe_url(url, 'example.com', require_https=True))",
          "",
          "[Added Lines]",
          "171:             self.assertFalse(http.is_safe_url(url, allowed_hosts={'example.com'}, require_https=True))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e5a17028f4b9cfb5ff777d8c259e079bca0c988",
      "candidate_info": {
        "commit_hash": "5e5a17028f4b9cfb5ff777d8c259e079bca0c988",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/5e5a17028f4b9cfb5ff777d8c259e079bca0c988",
        "files": [
          "django/utils/http.py",
          "tests/utils_tests/test_http.py"
        ],
        "message": "Fixed #26902 -- Allowed is_safe_url() to require an https URL.\n\nThanks Andrew Nester, Berker Peksag, and Tim Graham for reviews.",
        "before_after_code_files": [
          "django/utils/http.py||django/utils/http.py",
          "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ],
          "candidate": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ]
        }
      },
      "candidate_diff": {
        "django/utils/http.py||django/utils/http.py": [
          "File: django/utils/http.py -> django/utils/http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:     )",
          "281:     \"\"\"",
          "282:     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to",
          "283:     a different host and uses a safe scheme).",
          "285:     Always returns ``False`` on an empty url.",
          "286:     \"\"\"",
          "287:     if url is not None:",
          "288:         url = url.strip()",
          "",
          "[Removed Lines]",
          "280: def is_safe_url(url, host=None):",
          "",
          "[Added Lines]",
          "280: def is_safe_url(url, host=None, require_https=False):",
          "287:     If ``require_https`` is ``True``, only 'https' will be considered a valid",
          "288:     scheme, as opposed to 'http' and 'https' with the default, ``False``.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "295:             return False",
          "296:     # Chrome treats \\ completely as / in paths but it could be part of some",
          "297:     # basic auth credentials so we need to check both URLs.",
          "302:     # Chrome considers any URL with more than two slashes to be absolute, but",
          "303:     # urlparse is not so flexible. Treat any url with three slashes as unsafe.",
          "304:     if url.startswith('///'):",
          "",
          "[Removed Lines]",
          "298:     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)",
          "301: def _is_safe_url(url, host):",
          "",
          "[Added Lines]",
          "301:     return (_is_safe_url(url, host, require_https=require_https) and",
          "302:             _is_safe_url(url.replace('\\\\', '/'), host, require_https=require_https))",
          "305: def _is_safe_url(url, host, require_https=False):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:     # URL and might consider the URL as scheme relative.",
          "316:     if unicodedata.category(url[0])[0] == 'C':",
          "317:         return False",
          "318:     return ((not url_info.netloc or url_info.netloc == host) and",
          "322: def limited_parse_qsl(qs, keep_blank_values=False, encoding='utf-8',",
          "",
          "[Removed Lines]",
          "319:             (not url_info.scheme or url_info.scheme in ['http', 'https']))",
          "",
          "[Added Lines]",
          "322:     scheme = url_info.scheme",
          "323:     # Consider URLs without a scheme (e.g. //example.com/p) to be http.",
          "324:     if not url_info.scheme and url_info.netloc:",
          "325:         scheme = 'http'",
          "326:     valid_schemes = ['https'] if require_https else ['http', 'https']",
          "328:             (not scheme or scheme in valid_schemes))",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py": [
          "File: tests/utils_tests/test_http.py -> tests/utils_tests/test_http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:         # Basic auth without host is not allowed.",
          "141:         self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))",
          "143:     def test_urlsafe_base64_roundtrip(self):",
          "144:         bytestring = b'foo'",
          "145:         encoded = http.urlsafe_base64_encode(bytestring)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     def test_is_safe_url_secure_param_https_urls(self):",
          "144:         secure_urls = (",
          "145:             'https://example.com/p',",
          "146:             'HTTPS://example.com/p',",
          "147:             '/view/?param=http://example.com',",
          "148:         )",
          "149:         for url in secure_urls:",
          "150:             self.assertTrue(http.is_safe_url(url, 'example.com', require_https=True))",
          "152:     def test_is_safe_url_secure_param_non_https_urls(self):",
          "153:         not_secure_urls = (",
          "154:             'http://example.com/p',",
          "155:             'ftp://example.com/p',",
          "156:             '//example.com/p',",
          "157:         )",
          "158:         for url in not_secure_urls:",
          "159:             self.assertFalse(http.is_safe_url(url, 'example.com', require_https=True))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc6d147a63f89795dbcdecb0559256470fff4380",
      "candidate_info": {
        "commit_hash": "fc6d147a63f89795dbcdecb0559256470fff4380",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/fc6d147a63f89795dbcdecb0559256470fff4380",
        "files": [
          "django/utils/http.py",
          "docs/releases/1.8.10.txt",
          "docs/releases/1.9.3.txt",
          "tests/utils_tests/test_http.py"
        ],
        "message": "[1.9.x] Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\n\nThis is a security fix.",
        "before_after_code_files": [
          "django/utils/http.py||django/utils/http.py",
          "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ],
          "candidate": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ]
        }
      },
      "candidate_diff": {
        "django/utils/http.py||django/utils/http.py": [
          "File: django/utils/http.py -> django/utils/http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:         url = url.strip()",
          "291:     if not url:",
          "292:         return False",
          "295:     # Chrome considers any URL with more than two slashes to be absolute, but",
          "296:     # urlparse is not so flexible. Treat any url with three slashes as unsafe.",
          "297:     if url.startswith('///'):",
          "",
          "[Removed Lines]",
          "293:     # Chrome treats \\ completely as /",
          "294:     url = url.replace('\\\\', '/')",
          "",
          "[Added Lines]",
          "293:     # Chrome treats \\ completely as / in paths but it could be part of some",
          "294:     # basic auth credentials so we need to check both URLs.",
          "295:     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)",
          "298: def _is_safe_url(url, host):",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py": [
          "File: tests/utils_tests/test_http.py -> tests/utils_tests/test_http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:                         'javascript:alert(\"XSS\")',",
          "93:                         '\\njavascript:alert(x)',",
          "94:                         '\\x08//example.com',",
          "95:                         '\\n'):",
          "96:             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)",
          "97:         for good_url in ('/view/?param=http://example.com',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:                         r'http://otherserver\\@example.com',",
          "96:                         r'http:\\\\testserver\\@example.com',",
          "97:                         r'http://testserver\\me:pass@example.com',",
          "98:                         r'http://testserver\\@example.com',",
          "99:                         r'http:\\\\testserver\\confirm\\me@example.com',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:                      'https://testserver/',",
          "102:                      'HTTPS://testserver/',",
          "103:                      '//testserver/',",
          "104:                      '/url%20with%20spaces/'):",
          "105:             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)",
          "107:     def test_urlsafe_base64_roundtrip(self):",
          "108:         bytestring = b'foo'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:                      'http://testserver/confirm?email=me@example.com',",
          "112:         # Valid basic auth credentials are allowed.",
          "113:         self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))",
          "114:         # A path without host is allowed.",
          "115:         self.assertTrue(http.is_safe_url('/confirm/me@example.com'))",
          "116:         # Basic auth without host is not allowed.",
          "117:         self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "382ab137312961ad62feb8109d70a5a581fe8350",
      "candidate_info": {
        "commit_hash": "382ab137312961ad62feb8109d70a5a581fe8350",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/382ab137312961ad62feb8109d70a5a581fe8350",
        "files": [
          "django/utils/http.py",
          "docs/releases/1.8.10.txt",
          "tests/utils_tests/test_http.py"
        ],
        "message": "[1.8.x] Fixed CVE-2016-2512 -- Prevented spoofing is_safe_url() with basic auth.\n\nThis is a security fix.",
        "before_after_code_files": [
          "django/utils/http.py||django/utils/http.py",
          "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ],
          "candidate": [
            "django/utils/http.py||django/utils/http.py",
            "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py"
          ]
        }
      },
      "candidate_diff": {
        "django/utils/http.py||django/utils/http.py": [
          "File: django/utils/http.py -> django/utils/http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:         url = url.strip()",
          "278:     if not url:",
          "279:         return False",
          "282:     # Chrome considers any URL with more than two slashes to be absolute, but",
          "283:     # urlparse is not so flexible. Treat any url with three slashes as unsafe.",
          "284:     if url.startswith('///'):",
          "",
          "[Removed Lines]",
          "280:     # Chrome treats \\ completely as /",
          "281:     url = url.replace('\\\\', '/')",
          "",
          "[Added Lines]",
          "280:     # Chrome treats \\ completely as / in paths but it could be part of some",
          "281:     # basic auth credentials so we need to check both URLs.",
          "282:     return _is_safe_url(url, host) and _is_safe_url(url.replace('\\\\', '/'), host)",
          "285: def _is_safe_url(url, host):",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_http.py||tests/utils_tests/test_http.py": [
          "File: tests/utils_tests/test_http.py -> tests/utils_tests/test_http.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:                         'javascript:alert(\"XSS\")',",
          "118:                         '\\njavascript:alert(x)',",
          "119:                         '\\x08//example.com',",
          "120:                         '\\n'):",
          "121:             self.assertFalse(http.is_safe_url(bad_url, host='testserver'), \"%s should be blocked\" % bad_url)",
          "122:         for good_url in ('/view/?param=http://example.com',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:                         r'http://otherserver\\@example.com',",
          "121:                         r'http:\\\\testserver\\@example.com',",
          "122:                         r'http://testserver\\me:pass@example.com',",
          "123:                         r'http://testserver\\@example.com',",
          "124:                         r'http:\\\\testserver\\confirm\\me@example.com',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                      'https://testserver/',",
          "127:                      'HTTPS://testserver/',",
          "128:                      '//testserver/',",
          "129:                      '/url%20with%20spaces/'):",
          "130:             self.assertTrue(http.is_safe_url(good_url, host='testserver'), \"%s should be allowed\" % good_url)",
          "132:     def test_urlsafe_base64_roundtrip(self):",
          "133:         bytestring = b'foo'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:                      'http://testserver/confirm?email=me@example.com',",
          "137:         # Valid basic auth credentials are allowed.",
          "138:         self.assertTrue(http.is_safe_url(r'http://user:pass@testserver/', host='user:pass@testserver'))",
          "139:         # A path without host is allowed.",
          "140:         self.assertTrue(http.is_safe_url('/confirm/me@example.com'))",
          "141:         # Basic auth without host is not allowed.",
          "142:         self.assertFalse(http.is_safe_url(r'http://testserver\\@example.com'))",
          "",
          "---------------"
        ]
      }
    }
  ]
}