{
  "cve_id": "CVE-2021-41248",
  "cve_desc": "GraphiQL is the reference implementation of this monorepo, GraphQL IDE, an official project under the GraphQL Foundation. All versions of graphiql older than graphiql@1.4.7 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in graphiql. There are a number of ways that can occur. By default, the schema URL is not attacker-controllable in graphiql or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of graphiql's fetcher allows the schema URL to be set dynamically, such as a URL query parameter like ?endpoint= in graphql-playground, or a database provided value, then this custom graphiql implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privelege level xss attacks. The URLs could look like any generic looking graphql schema URL. It should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in onHasCompletion.ts in graphiql. It does impact all forks of graphiql, and every released version of graphiql.",
  "repo": "graphql/graphiql",
  "patch_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
  "patch_info": {
    "commit_hash": "cb237eeeaf7333c4954c752122261db7520f7bf4",
    "repo": "graphql/graphiql",
    "commit_url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4",
    "files": [
      "README.md",
      "SECURITY.md",
      "docs/security/2021-introspection-schema-xss.md",
      "packages/graphiql/README.md",
      "packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/package.json",
      "packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js",
      "yarn.lock"
    ],
    "message": "Merge pull request from GHSA-x4r7-m2q9-69c8\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphiQL when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a contexts\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand updating markdown-it to the latest version.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.\n\nCo-authored-by: Rikki <rikki.schulte@gmail.com>",
    "before_after_code_files": [
      "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts",
      "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts",
      "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js",
      "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
      "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
      "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts",
      "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js",
      "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js",
      "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js",
      "yarn.lock||yarn.lock"
    ]
  },
  "patch_diff": {
    "packages/graphiql/cypress/integration/init.spec.ts||packages/graphiql/cypress/integration/init.spec.ts": [
      "File: packages/graphiql/cypress/integration/init.spec.ts -> packages/graphiql/cypress/integration/init.spec.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:   it('Executes a GraphQL query over HTTP that has the expected result', () => {",
      "45:     cy.assertQueryResult({ query: testQuery }, mockSuccess);",
      "46:   });",
      "47: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:   it('Shows the expected error when the schema is invalid', () => {",
      "48:     cy.visit(`/?bad=true`);",
      "49:     cy.assertResult({",
      "50:       errors: [",
      "51:         {",
      "52:           message:",
      "53:             'Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"<img src=x onerror=alert(document.domain)>\" does not.',",
      "54:         },",
      "55:       ],",
      "56:     });",
      "57:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/cypress/support/commands.ts||packages/graphiql/cypress/support/commands.ts": [
      "File: packages/graphiql/cypress/support/commands.ts -> packages/graphiql/cypress/support/commands.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:   type MockResult =",
      "20:     | { data: any }",
      "21:     | { data: any; hasNext?: boolean }",
      "23:   interface Chainable<Subject = any> {",
      "",
      "[Removed Lines]",
      "22:     | { error: any[] };",
      "",
      "[Added Lines]",
      "22:     | { error: any[] }",
      "23:     | { errors: any[] };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     visitWithOp(op: Op): Chainable<Element>;",
      "32:     clickPrettify(): Chainable<Element>;",
      "33:     assertHasValues(op: Op): Chainable<Element>;",
      "34:     assertQueryResult(",
      "35:       op: Op,",
      "36:       expectedResult: MockResult,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:     assertResult(result: MockResult): Chainable<Element>;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "91:     expect(value).to.deep.equal(JSON.stringify(mockSuccess, null, 2));",
      "92:   });",
      "93: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "97: Cypress.Commands.add('assertResult', (expectedResult, timeout = 200) => {",
      "98:   cy.wait(timeout);",
      "99:   cy.window().then(w => {",
      "101:     const value = w.g.resultComponent.viewer.getValue();",
      "102:     expect(value).to.deep.equal(JSON.stringify(expectedResult, null, 2));",
      "103:   });",
      "104: });",
      "",
      "---------------"
    ],
    "packages/graphiql/resources/renderExample.js||packages/graphiql/resources/renderExample.js": [
      "File: packages/graphiql/resources/renderExample.js -> packages/graphiql/resources/renderExample.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   history.replaceState(null, null, newSearch);",
      "92: }",
      "",
      "[Removed Lines]",
      "94: const isDev = window.location.hostname.match(/localhost$/);",
      "95: const api = isDev ? '/graphql' : '/.netlify/functions/schema-demo';",
      "",
      "[Added Lines]",
      "94: function getSchemaUrl() {",
      "95:   const isDev = window.location.hostname.match(/localhost$/);",
      "97:   if (isDev) {",
      "99:     if (parameters.bad && parameters.bad === 'true') {",
      "100:       return '/bad/graphql';",
      "101:     } else {",
      "102:       return '/graphql';",
      "103:     }",
      "104:   }",
      "105:   return '/.netlify/functions/schema-demo';",
      "106: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101: ReactDOM.render(",
      "102:   React.createElement(GraphiQL, {",
      "104:     query: parameters.query,",
      "105:     variables: parameters.variables,",
      "106:     headers: parameters.headers,",
      "",
      "[Removed Lines]",
      "103:     fetcher: GraphiQL.createFetcher({ url: api }),",
      "",
      "[Added Lines]",
      "114:     fetcher: GraphiQL.createFetcher({ url: getSchemaUrl() }),",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
      "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import React from 'react';",
      "10: import { FieldType } from './DocExplorer/types';",
      "12: import FieldDoc from './DocExplorer/FieldDoc';",
      "",
      "[Removed Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType } from 'graphql';",
      "",
      "[Added Lines]",
      "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: type DocExplorerProps = {",
      "31:   schema?: GraphQLSchema | null;",
      "32: };",
      "34: type DocExplorerState = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "68:   ) {",
      "69:     return (",
      "70:       this.props.schema !== nextProps.schema ||",
      "72:     );",
      "73:   }",
      "75:   render() {",
      "77:     const navStack = this.state.navStack;",
      "78:     const navItem = navStack[navStack.length - 1];",
      "80:     let content;",
      "83:       content = (",
      "84:         <div className=\"spinner-container\">",
      "",
      "[Removed Lines]",
      "71:       this.state.navStack !== nextState.navStack",
      "76:     const { schema } = this.props;",
      "81:     if (schema === undefined) {",
      "",
      "[Added Lines]",
      "72:       this.state.navStack !== nextState.navStack ||",
      "73:       this.props.schemaErrors !== nextProps.schemaErrors",
      "78:     const { schema, schemaErrors } = this.props;",
      "83:     if (schemaErrors) {",
      "84:       content = (",
      "85:         <div className=\"error-container\">{'Error fetching schema'}</div>",
      "86:       );",
      "87:     } else if (schema === undefined) {",
      "",
      "---------------"
    ],
    "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
      "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:   ValidationRule,",
      "24:   FragmentDefinitionNode,",
      "25:   DocumentNode,",
      "26: } from 'graphql';",
      "27: import copyToClipboard from 'copy-to-clipboard';",
      "28: import { getFragmentDependenciesForAST } from 'graphql-language-service-utils';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26:   GraphQLError,",
      "27:   formatError as formatGraphQLError,",
      "28:   GraphQLFormattedError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: } from '@graphiql/toolkit';",
      "67: import HistoryStore from '../utility/HistoryStore';",
      "69: const DEFAULT_DOC_EXPLORER_WIDTH = 350;",
      "71: const majorVersion = parseInt(React.version.slice(0, 2), 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: import { validateSchema } from 'graphql';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "95:   additionalContent?: React.ReactNode;",
      "96: };",
      "98: export type GraphiQLProps = {",
      "99:   fetcher: Fetcher;",
      "100:   schema?: GraphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103: export type GenericError =",
      "104:   | Error",
      "105:   | string",
      "106:   | readonly Error[]",
      "107:   | readonly string[]",
      "108:   | GraphQLError",
      "109:   | readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "121:   editorTheme?: string;",
      "122:   onToggleHistory?: (historyPaneOpen: boolean) => void;",
      "123:   ResultsTooltip?: typeof Component | FunctionComponent;",
      "124:   readOnly?: boolean;",
      "125:   docExplorerOpen?: boolean;",
      "126:   toolbar?: GraphiQLToolbarConfig;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:   dangerouslyAssumeSchemaIsValid?: boolean;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:   headerEditorEnabled: boolean;",
      "144:   shouldPersistHeaders: boolean;",
      "145:   historyPaneOpen: boolean;",
      "146:   docExplorerWidth: number;",
      "147:   isWaitingForResponse: boolean;",
      "148:   subscription?: Unsubscribable | null;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:   schemaErrors?: readonly GraphQLError[];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   maxHistoryLength: number;",
      "153: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173: const stringify = (obj: unknown): string => JSON.stringify(obj, null, 2);",
      "175: const formatSingleError = (error: Error): Error => ({",
      "176:   ...error,",
      "178:   message: error.message,",
      "179:   stack: error.stack,",
      "180: });",
      "182: type InputError = Error | GraphQLError | string;",
      "184: const handleSingleError = (",
      "185:   error: InputError,",
      "186: ): GraphQLFormattedError | Error | string => {",
      "187:   if (error instanceof GraphQLError) {",
      "188:     return formatGraphQLError(error);",
      "189:   }",
      "190:   if (error instanceof Error) {",
      "191:     return formatSingleError(error);",
      "192:   }",
      "193:   return error;",
      "194: };",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "166:     return JSON.stringify(result, null, 2);",
      "167:   }",
      "177:   _editorQueryID = 0;",
      "",
      "[Removed Lines]",
      "169:   static formatError(rawError: Error) {",
      "170:     const result = Array.isArray(rawError)",
      "171:       ? rawError.map(formatSingleError)",
      "172:       : formatSingleError(rawError);",
      "173:     return JSON.stringify(result, null, 2);",
      "174:   }",
      "",
      "[Added Lines]",
      "210:   static formatError = (error: GenericError): string => {",
      "211:     if (Array.isArray(error)) {",
      "212:       return stringify({",
      "213:         errors: error.map((e: InputError) => handleSingleError(e)),",
      "214:       });",
      "215:     }",
      "217:     return stringify({ errors: handleSingleError(error) });",
      "218:   };",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "266:     const headerEditorEnabled = props.headerEditorEnabled ?? false;",
      "267:     const shouldPersistHeaders = props.shouldPersistHeaders ?? false;",
      "270:     this.state = {",
      "272:       query,",
      "273:       variables: variables as string,",
      "274:       headers: headers as string,",
      "275:       operationName,",
      "276:       docExplorerOpen,",
      "278:       editorFlex: Number(this._storage.get('editorFlex')) || 1,",
      "279:       secondaryEditorOpen,",
      "280:       secondaryEditorHeight:",
      "",
      "[Removed Lines]",
      "271:       schema: props.schema,",
      "277:       response: props.response,",
      "",
      "[Added Lines]",
      "313:     let schema = props.schema;",
      "314:     let response = props.response;",
      "315:     let schemaErrors: readonly GraphQLError[] | undefined = undefined;",
      "316:     if (schema && !this.props.dangerouslyAssumeSchemaIsValid) {",
      "317:       const validationErrors = validateSchema(schema);",
      "318:       if (validationErrors && validationErrors.length > 0) {",
      "321:         response = GraphiQL.formatError(validationErrors);",
      "322:         schema = undefined;",
      "323:         schemaErrors = validationErrors;",
      "324:       }",
      "325:     }",
      "329:       schema,",
      "335:       schemaErrors,",
      "336:       response,",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "357:         nextQuery !== this.state.query ||",
      "358:         nextOperationName !== this.state.operationName)",
      "359:     ) {",
      "360:       const updatedQueryAttributes = this._updateQueryFacts(",
      "361:         nextQuery,",
      "362:         nextOperationName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:       if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "420:         const validationErrors = validateSchema(nextSchema);",
      "421:         if (validationErrors && validationErrors.length > 0) {",
      "422:           this.handleSchemaErrors(validationErrors);",
      "423:           nextSchema = undefined;",
      "424:         }",
      "425:       }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "665:               ref={c => {",
      "666:                 this.docExplorerComponent = c;",
      "667:               }}",
      "668:               schema={this.state.schema}>",
      "669:               <button",
      "670:                 className=\"docExplorerHide\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "735:               schemaErrors={this.state.schemaErrors}",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "871:         }",
      "873:         if (typeof result !== 'string' && 'data' in result) {",
      "877:         } else {",
      "878:           const responseString =",
      "879:             typeof result === 'string' ? result : GraphiQL.formatResult(result);",
      "885:         }",
      "886:       })",
      "887:       .catch(error => {",
      "892:       });",
      "893:   }",
      "895:   private async _fetchQuery(",
      "896:     query: string,",
      "897:     variables: string,",
      "",
      "[Removed Lines]",
      "874:           const schema = buildClientSchema(result.data);",
      "875:           const queryFacts = getOperationFacts(schema, this.state.query);",
      "876:           this.safeSetState({ schema, ...queryFacts });",
      "880:           this.safeSetState({",
      "882:             schema: undefined,",
      "883:             response: responseString,",
      "884:           });",
      "888:         this.safeSetState({",
      "889:           schema: undefined,",
      "890:           response: error ? GraphiQL.formatError(error) : undefined,",
      "891:         });",
      "",
      "[Added Lines]",
      "942:           let schema: GraphQLSchema | undefined = buildClientSchema(",
      "943:             result.data,",
      "944:           );",
      "945:           if (!this.props.dangerouslyAssumeSchemaIsValid) {",
      "946:             const errors = validateSchema(schema);",
      "948:             if (errors && errors.length > 0) {",
      "949:               schema = undefined;",
      "950:               this.handleSchemaErrors(errors);",
      "951:             }",
      "952:           }",
      "953:           if (schema) {",
      "954:             const queryFacts = getOperationFacts(schema, this.state.query);",
      "955:             this.safeSetState({",
      "956:               schema,",
      "957:               ...queryFacts,",
      "958:               schemaErrors: undefined,",
      "959:             });",
      "960:           }",
      "965:           this.handleSchemaErrors([responseString]);",
      "969:         this.handleSchemaErrors([error]);",
      "973:   private handleSchemaErrors(",
      "974:     schemaErrors: readonly GraphQLError[] | readonly string[],",
      "975:   ) {",
      "976:     this.safeSetState({",
      "977:       response: schemaErrors ? GraphiQL.formatError(schemaErrors) : undefined,",
      "978:       schema: undefined,",
      "979:       schemaErrors,",
      "980:     });",
      "981:   }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "908:       jsonVariables =",
      "909:         variables && variables.trim() !== '' ? JSON.parse(variables) : null;",
      "910:     } catch (error) {",
      "912:     }",
      "914:     if (typeof jsonVariables !== 'object') {",
      "",
      "[Removed Lines]",
      "911:       throw new Error(`Variables are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "999:       throw new Error(",
      "1000:         `Variables are invalid JSON: ${(error as Error).message}.`,",
      "1001:       );",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "919:       jsonHeaders =",
      "920:         headers && headers.trim() !== '' ? JSON.parse(headers) : null;",
      "921:     } catch (error) {",
      "923:     }",
      "925:     if (typeof jsonHeaders !== 'object') {",
      "",
      "[Removed Lines]",
      "922:       throw new Error(`Headers are invalid JSON: ${error.message}.`);",
      "",
      "[Added Lines]",
      "1012:       throw new Error(`Headers are invalid JSON: ${(error as Error).message}.`);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1008:             } catch (error) {",
      "1009:               this.safeSetState({",
      "1010:                 isWaitingForResponse: false,",
      "1012:                 subscription: null,",
      "1013:               });",
      "1014:             }",
      "",
      "[Removed Lines]",
      "1011:                 response: error ? GraphiQL.formatError(error) : undefined,",
      "",
      "[Added Lines]",
      "1101:                 response: error",
      "1102:                   ? GraphiQL.formatError(error as Error)",
      "1103:                   : undefined,",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1167:     } catch (error) {",
      "1168:       this.setState({",
      "1169:         isWaitingForResponse: false,",
      "1171:       });",
      "1172:     }",
      "1173:   };",
      "",
      "[Removed Lines]",
      "1170:         response: error.message,",
      "",
      "[Added Lines]",
      "1262:         response: (error as Error).message,",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1699: }",
      "1700: GraphiQLFooter.displayName = 'GraphiQLFooter';",
      "1709: const defaultQuery = `# Welcome to GraphiQL",
      "1710: #",
      "1711: # GraphiQL is an in-browser tool for writing, validating, and",
      "",
      "[Removed Lines]",
      "1702: const formatSingleError = (error: Error) => ({",
      "1703:   ...error,",
      "1705:   message: error.message,",
      "1706:   stack: error.stack,",
      "1707: });",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "packages/graphiql/src/utility/onHasCompletion.ts||packages/graphiql/src/utility/onHasCompletion.ts": [
      "File: packages/graphiql/src/utility/onHasCompletion.ts -> packages/graphiql/src/utility/onHasCompletion.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:   GraphQLType,",
      "13:   GraphQLField,",
      "14: } from 'graphql';",
      "15: import MD from 'markdown-it';",
      "17: const md = new MD();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import escapeHTML from 'escape-html';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:   if (type instanceof GraphQLList) {",
      "109:     return `[${renderType(type.ofType)}]`;",
      "110:   }",
      "112: }",
      "",
      "[Removed Lines]",
      "111:   return `<a class=\"typeName\">${type.name}</a>`;",
      "",
      "[Added Lines]",
      "112:   return `<a class=\"typeName\">${escapeHTML(type.name)}</a>`;",
      "",
      "---------------"
    ],
    "packages/graphiql/test/bad-schema.js||packages/graphiql/test/bad-schema.js": [
      "File: packages/graphiql/test/bad-schema.js -> packages/graphiql/test/bad-schema.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: const { buildClientSchema } = require('graphql');",
      "3: module.exports.schema = {",
      "4:   __schema: {",
      "5:     queryType: {",
      "6:       name: 'Query',",
      "7:     },",
      "8:     mutationType: null,",
      "9:     subscriptionType: null,",
      "10:     types: [",
      "11:       {",
      "12:         kind: 'OBJECT',",
      "13:         name: 'Query',",
      "14:         description: null,",
      "15:         fields: [",
      "16:           {",
      "17:             name: 'user',",
      "18:             description: null,",
      "19:             args: [",
      "20:               {",
      "21:                 name: 'id',",
      "22:                 description: null,",
      "23:                 type: {",
      "24:                   kind: 'NON_NULL',",
      "25:                   name: null,",
      "26:                   ofType: {",
      "27:                     kind: 'SCALAR',",
      "28:                     name: 'ID',",
      "29:                     ofType: null,",
      "30:                   },",
      "31:                 },",
      "32:                 defaultValue: null,",
      "33:               },",
      "34:             ],",
      "35:             type: {",
      "36:               kind: 'OBJECT',",
      "37:               name: '<img src=x onerror=alert(document.domain)>',",
      "38:               ofType: null,",
      "39:             },",
      "40:             isDeprecated: false,",
      "41:             deprecationReason: null,",
      "42:           },",
      "43:         ],",
      "44:         inputFields: null,",
      "45:         interfaces: [],",
      "46:         enumValues: null,",
      "47:         possibleTypes: null,",
      "48:       },",
      "49:       {",
      "50:         kind: 'SCALAR',",
      "51:         name: 'ID',",
      "52:         description: '',",
      "53:         fields: null,",
      "54:         inputFields: null,",
      "55:         interfaces: null,",
      "56:         enumValues: null,",
      "57:         possibleTypes: null,",
      "58:       },",
      "59:       {",
      "60:         kind: 'OBJECT',",
      "61:         name: '<img src=x onerror=alert(document.domain)>',",
      "62:         description: null,",
      "63:         fields: [",
      "64:           {",
      "65:             name: 'name',",
      "66:             description: null,",
      "67:             args: [],",
      "68:             type: {",
      "69:               kind: 'NON_NULL',",
      "70:               name: null,",
      "71:               ofType: {",
      "72:                 kind: 'SCALAR',",
      "73:                 name: 'String',",
      "74:                 ofType: null,",
      "75:               },",
      "76:             },",
      "77:             isDeprecated: false,",
      "78:             deprecationReason: null,",
      "79:           },",
      "80:         ],",
      "81:         inputFields: null,",
      "82:         interfaces: [],",
      "83:         enumValues: null,",
      "84:         possibleTypes: null,",
      "85:       },",
      "86:       {",
      "87:         kind: 'SCALAR',",
      "88:         name: 'String',",
      "89:         description: '',",
      "90:         fields: null,",
      "91:         inputFields: null,",
      "92:         interfaces: null,",
      "93:         enumValues: null,",
      "94:         possibleTypes: null,",
      "95:       },",
      "96:     ],",
      "97:     directives: [],",
      "98:   },",
      "99: };",
      "",
      "---------------"
    ],
    "packages/graphiql/test/beforeDevServer.js||packages/graphiql/test/beforeDevServer.js": [
      "File: packages/graphiql/test/beforeDevServer.js -> packages/graphiql/test/beforeDevServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: const path = require('path');",
      "10: const { graphqlHTTP } = require('express-graphql');",
      "11: const schema = require('./schema');",
      "13: module.exports = function beforeDevServer(app, _server, _compiler) {",
      "15:   app.post('/graphql', graphqlHTTP({ schema }));",
      "17:   app.get(",
      "18:     '/graphql',",
      "19:     graphqlHTTP({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: const { schema: badSchema } = require('./bad-schema');",
      "18:   app.post('/bad/graphql', (_req, res, next) => {",
      "19:     res.json({ data: badSchema });",
      "20:     next();",
      "21:   });",
      "",
      "---------------"
    ],
    "packages/graphiql/test/e2e-server.js||packages/graphiql/test/e2e-server.js": [
      "File: packages/graphiql/test/e2e-server.js -> packages/graphiql/test/e2e-server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: const path = require('path');",
      "11: const { graphqlHTTP } = require('express-graphql');",
      "12: const schema = require('./schema');",
      "14: const app = express();",
      "17: app.post('/graphql', graphqlHTTP({ schema }));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: const { schema: badSchema } = require('./bad-schema');",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23:   }),",
      "24: );",
      "26: app.use(express.static(path.resolve(__dirname, '../')));",
      "28: app.listen(process.env.PORT || 0, function () {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: app.post('/bad/graphql', (_req, res, next) => {",
      "27:   res.json({ data: badSchema });",
      "28:   next();",
      "29: });",
      "",
      "---------------"
    ],
    "yarn.lock||yarn.lock": [
      "File: yarn.lock -> yarn.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "3288:   integrity sha512-6U71C2Wp7r5XtFtQzYrW5iKFT67OixrSxjI4MptCHzdSVlgabczzqLe0ZSgnub/5Kp4hSbpDB1tMytZY9pwxxA==",
      "3290: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
      "3292:   dependencies:",
      "3293:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.0.0\"",
      "3294:     graphql-ws \"^4.9.0\"",
      "",
      "[Removed Lines]",
      "3291:   version \"0.3.0\"",
      "",
      "[Added Lines]",
      "3291:   version \"0.3.2\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4881:   dependencies:",
      "4882:     \"@types/node\" \"*\"",
      "4884: \"@types/eslint-visitor-keys@^1.0.0\":",
      "4885:   version \"1.0.0\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4884: \"@types/escape-html@^1.0.1\":",
      "4885:   version \"1.0.1\"",
      "4886:   resolved \"https://registry.yarnpkg.com/@types/escape-html/-/escape-html-1.0.1.tgz#b19b4646915f0ae2c306bf984dc0a59c5cfc97ba\"",
      "4887:   integrity sha512-4mI1FuUUZiuT95fSVqvZxp/ssQK9zsa86S43h9x3zPOSU9BBJ+BfDkXwuaU7BfsD+e7U0/cUUfJFk3iW2M4okA==",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5021:   dependencies:",
      "5022:     \"@types/linkify-it\" \"*\"",
      "5024: \"@types/mime@^1\":",
      "5025:   version \"1.3.2\"",
      "5026:   resolved \"https://registry.yarnpkg.com/@types/mime/-/mime-1.3.2.tgz#93e25bf9ee75fe0fd80b594bc4feb0e862111b5a\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5029: \"@types/markdown-it@^12.2.3\":",
      "5030:   version \"12.2.3\"",
      "5031:   resolved \"https://registry.yarnpkg.com/@types/markdown-it/-/markdown-it-12.2.3.tgz#0d6f6e5e413f8daaa26522904597be3d6cd93b51\"",
      "5032:   integrity sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "5033:   dependencies:",
      "5034:     \"@types/linkify-it\" \"*\"",
      "5035:     \"@types/mdurl\" \"*\"",
      "5037: \"@types/mdurl@*\":",
      "5038:   version \"1.0.2\"",
      "5039:   resolved \"https://registry.yarnpkg.com/@types/mdurl/-/mdurl-1.0.2.tgz#e2ce9d83a613bacf284c7be7d491945e39e1f8e9\"",
      "5040:   integrity sha512-eC4U9MlIcu2q0KQmXszyn5Akca/0jrQmwDRgpAMJai7qBWq4amIQhZyNau4VYGtCeALvW1/NtjzJJ567aZxfKA==",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6121:   dependencies:",
      "6122:     sprintf-js \"~1.0.2\"",
      "6124: aria-query@^3.0.0:",
      "6125:   version \"3.0.0\"",
      "6126:   resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-3.0.0.tgz#65b3fcc1ca1155a8c9ae64d6eee297f15d5133cc\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6142: argparse@^2.0.1:",
      "6143:   version \"2.0.1\"",
      "6144:   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"",
      "6145:   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "9586:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.0.3.tgz#5c487e5742ab93c15abb5da22759b8590ec03b7f\"",
      "9587:   integrity sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
      "9589: envinfo@^7.3.1:",
      "9590:   version \"7.8.1\"",
      "9591:   resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.8.1.tgz#06377e3e5f4d379fea7ac592d5ad8927e0c4d475\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9612: entities@~2.1.0:",
      "9613:   version \"2.1.0\"",
      "9614:   resolved \"https://registry.yarnpkg.com/entities/-/entities-2.1.0.tgz#992d3129cf7df6870b96c57858c249a120f8b8b5\"",
      "9615:   integrity sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9751:   resolved \"https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40\"",
      "9752:   integrity sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "9755:   version \"1.0.3\"",
      "9756:   resolved \"https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988\"",
      "9757:   integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
      "",
      "[Removed Lines]",
      "9754: escape-html@~1.0.3:",
      "",
      "[Added Lines]",
      "9782: escape-html@^1.0.3, escape-html@~1.0.3:",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "11512:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
      "11514: \"graphiql@file:packages/graphiql\":",
      "11516:   dependencies:",
      "11518:     codemirror \"^5.58.2\"",
      "11520:     copy-to-clipboard \"^3.2.0\"",
      "11521:     dset \"^3.1.0\"",
      "11522:     entities \"^2.0.0\"",
      "11526: graphql-config@^3.0.2:",
      "11527:   version \"3.0.3\"",
      "",
      "[Removed Lines]",
      "11515:   version \"1.4.3\"",
      "11517:     \"@graphiql/toolkit\" \"^0.3.0\"",
      "11519:     codemirror-graphql \"^1.0.0\"",
      "11523:     graphql-language-service \"^3.1.5\"",
      "11524:     markdown-it \"^10.0.0\"",
      "",
      "[Added Lines]",
      "11543:   version \"1.4.6\"",
      "11545:     \"@graphiql/toolkit\" \"^0.3.2\"",
      "11547:     codemirror-graphql \"^1.0.3\"",
      "11551:     escape-html \"^1.0.3\"",
      "11552:     graphql-language-service \"^3.1.6\"",
      "11553:     markdown-it \"^12.2.0\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "14280:   dependencies:",
      "14281:     uc.micro \"^1.0.1\"",
      "14283: lint-staged@^10.1.2:",
      "14284:   version \"10.1.3\"",
      "14285:   resolved \"https://registry.yarnpkg.com/lint-staged/-/lint-staged-10.1.3.tgz#da27713d3ac519da305381b4de87d5f866b1d2f1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14312: linkify-it@^3.0.1:",
      "14313:   version \"3.0.3\"",
      "14314:   resolved \"https://registry.yarnpkg.com/linkify-it/-/linkify-it-3.0.3.tgz#a98baf44ce45a550efb4d49c769d07524cc2fa2e\"",
      "14315:   integrity sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "14316:   dependencies:",
      "14317:     uc.micro \"^1.0.1\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "14711:     mdurl \"^1.0.1\"",
      "14712:     uc.micro \"^1.0.5\"",
      "14714: markdown-to-jsx@^6.11.4:",
      "14715:   version \"6.11.4\"",
      "14716:   resolved \"https://registry.yarnpkg.com/markdown-to-jsx/-/markdown-to-jsx-6.11.4.tgz#b4528b1ab668aef7fe61c1535c27e837819392c5\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14750: markdown-it@^12.2.0:",
      "14751:   version \"12.2.0\"",
      "14752:   resolved \"https://registry.yarnpkg.com/markdown-it/-/markdown-it-12.2.0.tgz#091f720fd5db206f80de7a8d1f1a7035fd0d38db\"",
      "14753:   integrity sha512-Wjws+uCrVQRqOoJvze4HCqkKl1AsSh95iFAeQDwnyfxM09divCBSXlDR1uTvyUP3Grzpn4Ru8GeCxYPM8vkCQg==",
      "14754:   dependencies:",
      "14755:     argparse \"^2.0.1\"",
      "14756:     entities \"~2.1.0\"",
      "14757:     linkify-it \"^3.0.1\"",
      "14758:     mdurl \"^1.0.1\"",
      "14759:     uc.micro \"^1.0.5\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fdcd9054483404bcae4a464ac7212e0d35f49abd",
      "candidate_info": {
        "commit_hash": "fdcd9054483404bcae4a464ac7212e0d35f49abd",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/fdcd9054483404bcae4a464ac7212e0d35f49abd",
        "files": [
          ".changeset/green-mayflies-notice.md",
          "packages/graphiql-react/src/style/root.css",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css"
        ],
        "message": "add a dialog that shows all available shortkeys (#2601)\n\n* add a dialog that shows all available shortkeys\n\n* use table in short key dialog\n\n* add shortkey for introspection\n\n* add link to codemirror keymaps",
        "before_after_code_files": [
          "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/style.css||packages/graphiql/src/style.css"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/style/root.css||packages/graphiql-react/src/style/root.css": [
          "File: packages/graphiql-react/src/style/root.css -> packages/graphiql-react/src/style/root.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: .graphiql-container,",
          "112: .CodeMirror-info,",
          "113: .CodeMirror-lint-tooltip,",
          "131: }",
          "",
          "[Removed Lines]",
          "114: reach-portal,",
          "115: .graphiql-container:is(button) {",
          "116:   color: var(--color-neutral-100);",
          "117:   font-family: var(--font-family);",
          "118:   font-size: var(--font-size-body);",
          "119:   font-weight: var(----font-weight-regular);",
          "120:   line-height: var(--line-height);",
          "121: }",
          "123: .graphiql-container input {",
          "124:   color: var(--color-neutral-100);",
          "125:   font-family: var(--font-family);",
          "126:   font-size: var(--font-size-caption);",
          "127: }",
          "129: .graphiql-container input::placeholder {",
          "130:   color: var(--color-neutral-60);",
          "",
          "[Added Lines]",
          "114: reach-portal {",
          "115:   &,",
          "116:   &:is(button) {",
          "117:     color: var(--color-neutral-100);",
          "118:     font-family: var(--font-family);",
          "119:     font-size: var(--font-size-body);",
          "120:     font-weight: var(----font-weight-regular);",
          "121:     line-height: var(--line-height);",
          "122:   }",
          "124:   & input {",
          "125:     color: var(--color-neutral-100);",
          "126:     font-family: var(--font-family);",
          "127:     font-size: var(--font-size-caption);",
          "129:     &::placeholder {",
          "130:       color: var(--color-neutral-60);",
          "131:     }",
          "132:   }",
          "134:   & a {",
          "135:     color: var(--color-pink);",
          "137:     &:visited {",
          "138:       color: var(--color-pink-dark);",
          "139:     }",
          "140:   }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   );",
          "97: }",
          "103: export type GraphiQLToolbarConfig = {",
          "104:   additionalContent?: React.ReactNode;",
          "105: };",
          "",
          "[Removed Lines]",
          "99: declare namespace window {",
          "100:   export let g: GraphiQL;",
          "101: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     super(props);",
          "319:   }",
          "327:   render() {",
          "328:     return (",
          "329:       <GraphiQLProviders",
          "",
          "[Removed Lines]",
          "321:   componentDidMount() {",
          "322:     if (typeof window !== 'undefined') {",
          "323:       window.g = this;",
          "324:     }",
          "325:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "646: export type GraphiQLState = {",
          "647:   activeSecondaryEditor: 'variable' | 'header';",
          "648:   showSettings: boolean;",
          "649:   clearStorageStatus: 'success' | 'error' | null;",
          "650: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:   showShortKeys: boolean;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:     this.state = {",
          "661:       activeSecondaryEditor: 'variable',",
          "662:       showSettings: false,",
          "663:       clearStorageStatus: null,",
          "664:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653:       showShortKeys: false,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "720:       }",
          "721:     };",
          "723:     return (",
          "724:       <div data-testid=\"graphiql-container\" className=\"graphiql-container\">",
          "725:         <div className=\"graphiql-sidebar\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715:     const modifier =",
          "716:       window.navigator.platform.toLowerCase().indexOf('mac') === 0 ? (",
          "717:         <code className=\"graphiql-key\">Cmd</code>",
          "718:       ) : (",
          "719:         <code className=\"graphiql-key\">Ctrl</code>",
          "720:       );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "789:                 }",
          "790:               />",
          "791:             </UnStyledButton>",
          "793:               <KeyboardShortcutIcon />",
          "794:             </UnStyledButton>",
          "795:             <UnStyledButton",
          "",
          "[Removed Lines]",
          "792:             <UnStyledButton type=\"button\">",
          "",
          "[Added Lines]",
          "791:             <UnStyledButton",
          "792:               type=\"button\"",
          "793:               onClick={() => {",
          "794:                 this.setState({ showShortKeys: true });",
          "795:               }}",
          "796:             >",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1051:             </div>",
          "1052:           </div>",
          "1053:         </div>",
          "1054:         <Dialog",
          "1055:           isOpen={this.state.showSettings}",
          "1056:           onDismiss={() => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:         <Dialog",
          "1059:           isOpen={this.state.showShortKeys}",
          "1060:           onDismiss={() => {",
          "1061:             this.setState({ showShortKeys: false });",
          "1062:           }}",
          "1063:         >",
          "1064:           <div className=\"graphiql-dialog-header\">",
          "1065:             <div className=\"graphiql-dialog-title\">Short Keys</div>",
          "1066:             <Dialog.Close",
          "1067:               onClick={() => {",
          "1068:                 this.setState({ showShortKeys: false });",
          "1069:               }}",
          "1070:             />",
          "1071:           </div>",
          "1072:           <div className=\"graphiql-dialog-section\">",
          "1073:             <div>",
          "1074:               <table className=\"graphiql-table\">",
          "1075:                 <thead>",
          "1076:                   <tr>",
          "1077:                     <th>Short key</th>",
          "1078:                     <th>Function</th>",
          "1079:                   </tr>",
          "1080:                 </thead>",
          "1081:                 <tbody>",
          "1082:                   <tr>",
          "1083:                     <td>",
          "1084:                       {modifier}",
          "1085:                       {' + '}",
          "1086:                       <code className=\"graphiql-key\">F</code>",
          "1087:                     </td>",
          "1088:                     <td>Search in editor</td>",
          "1089:                   </tr>",
          "1090:                   <tr>",
          "1091:                     <td>",
          "1092:                       {modifier}",
          "1093:                       {' + '}",
          "1094:                       <code className=\"graphiql-key\">K</code>",
          "1095:                     </td>",
          "1096:                     <td>Search in documentation</td>",
          "1097:                   </tr>",
          "1098:                   <tr>",
          "1099:                     <td>",
          "1100:                       {modifier}",
          "1101:                       {' + '}",
          "1102:                       <code className=\"graphiql-key\">Enter</code>",
          "1103:                     </td>",
          "1104:                     <td>Execute query</td>",
          "1105:                   </tr>",
          "1106:                   <tr>",
          "1107:                     <td>",
          "1108:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1109:                       {' + '}",
          "1110:                       <code className=\"graphiql-key\">Shift</code>",
          "1111:                       {' + '}",
          "1112:                       <code className=\"graphiql-key\">P</code>",
          "1113:                     </td>",
          "1114:                     <td>Prettify editors</td>",
          "1115:                   </tr>",
          "1116:                   <tr>",
          "1117:                     <td>",
          "1118:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1119:                       {' + '}",
          "1120:                       <code className=\"graphiql-key\">Shift</code>",
          "1121:                       {' + '}",
          "1122:                       <code className=\"graphiql-key\">M</code>",
          "1123:                     </td>",
          "1124:                     <td>",
          "1125:                       Merge fragments definitions into operation definition",
          "1126:                     </td>",
          "1127:                   </tr>",
          "1128:                   <tr>",
          "1129:                     <td>",
          "1130:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1131:                       {' + '}",
          "1132:                       <code className=\"graphiql-key\">Shift</code>",
          "1133:                       {' + '}",
          "1134:                       <code className=\"graphiql-key\">C</code>",
          "1135:                     </td>",
          "1136:                     <td>Copy query</td>",
          "1137:                   </tr>",
          "1138:                   <tr>",
          "1139:                     <td>",
          "1140:                       <code className=\"graphiql-key\">Ctrl</code>",
          "1141:                       {' + '}",
          "1142:                       <code className=\"graphiql-key\">Shift</code>",
          "1143:                       {' + '}",
          "1144:                       <code className=\"graphiql-key\">R</code>",
          "1145:                     </td>",
          "1146:                     <td>Re-fetch schema using introspection</td>",
          "1147:                   </tr>",
          "1148:                 </tbody>",
          "1149:               </table>",
          "1150:               <p>",
          "1151:                 The editors use{' '}",
          "1152:                 <a",
          "1153:                   href=\"https://codemirror.net/5/doc/manual.html#keymaps\"",
          "1154:                   target=\"_blank\"",
          "1155:                   rel=\"noopener noreferrer\"",
          "1156:                 >",
          "1157:                   CodeMirror Key Maps",
          "1158:                 </a>{' '}",
          "1159:                 that add more short keys. This instance of Graph<em>i</em>QL",
          "1160:                 uses <code>{this.props.keyMap || 'sublime'}</code>.",
          "1161:               </p>",
          "1162:             </div>",
          "1163:           </div>",
          "1164:         </Dialog>",
          "",
          "---------------"
        ],
        "packages/graphiql/src/style.css||packages/graphiql/src/style.css": [
          "File: packages/graphiql/src/style.css -> packages/graphiql/src/style.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "269: reach-portal .graphiql-dialog-section-caption {",
          "270:   color: var(--color-neutral-60);",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: reach-portal .graphiql-table {",
          "274:   border-collapse: collapse;",
          "275:   width: 100%;",
          "276: }",
          "277: reach-portal .graphiql-table :is(th, td) {",
          "278:   border: 1px solid var(--color-neutral-15);",
          "279:   padding: var(--px-8) var(--px-12);",
          "280: }",
          "283: reach-portal .graphiql-key {",
          "284:   background-color: var(--color-neutral-10);",
          "285:   border-radius: var(--border-radius-4);",
          "286:   padding: var(--px-4);",
          "287: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89f0244f7b7cdf01c168638a09f5137788401995",
      "candidate_info": {
        "commit_hash": "89f0244f7b7cdf01c168638a09f5137788401995",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/89f0244f7b7cdf01c168638a09f5137788401995",
        "files": [
          ".changeset/brave-ways-enjoy.md",
          ".changeset/hungry-lions-rescue.md",
          "packages/graphiql-react/package.json",
          "packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/utility/debounce.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/package.json",
          "packages/graphiql/src/components/ExecuteButton.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/components/__tests__/helpers/codeMirror.js",
          "packages/graphiql/src/components/__tests__/helpers/storage.js"
        ],
        "message": "move logic for deriving operation facts to `@graphiql/react` (#2435)\n\n* refactor execute button to functional component\n\n* derive default editor values from storage\n\n* derive operation facts as part of `useQueryEditor` hook\n\n* use operation facts from editor in `ExecuteButton`\n\n* stop deriving query facts in `GraphiQL` component\n\n* fix mocks for tests\n\n* remove unused dependencies and mocks\n\n* add changeset",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx",
          "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx",
          "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts",
          "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx",
          "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx",
          "packages/graphiql-react/src/utility/debounce.ts||packages/graphiql-react/src/utility/debounce.ts",
          "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts",
          "packages/graphiql/src/components/ExecuteButton.tsx||packages/graphiql/src/components/ExecuteButton.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "packages/graphiql/src/components/__tests__/helpers/codeMirror.js||packages/graphiql/src/components/__tests__/helpers/codeMirror.js",
          "packages/graphiql/src/components/__tests__/helpers/storage.js||packages/graphiql/src/components/__tests__/helpers/storage.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/context.tsx||packages/graphiql-react/src/editor/context.tsx": [
          "File: packages/graphiql-react/src/editor/context.tsx -> packages/graphiql-react/src/editor/context.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { fillLeafs, GetDefaultFieldNamesFn } from '@graphiql/toolkit';",
          "2: import {",
          "3:   createContext,",
          "4:   ReactNode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { DocumentNode, OperationDefinitionNode } from 'graphql';",
          "3: import { VariableToType } from 'graphql-language-service';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6:   useMemo,",
          "7:   useState,",
          "8: } from 'react';",
          "11: import { CodeMirrorEditor } from './types';",
          "13: export type EditorContextType = {",
          "14:   autoCompleteLeafs(): string | undefined;",
          "15:   headerEditor: CodeMirrorEditor | null;",
          "17:   responseEditor: CodeMirrorEditor | null;",
          "18:   variableEditor: CodeMirrorEditor | null;",
          "19:   setHeaderEditor(newEditor: CodeMirrorEditor): void;",
          "21:   setResponseEditor(newEditor: CodeMirrorEditor): void;",
          "22:   setVariableEditor(newEditor: CodeMirrorEditor): void;",
          "23: };",
          "",
          "[Removed Lines]",
          "9: import { useSchemaWithError } from '../schema';",
          "16:   queryEditor: CodeMirrorEditor | null;",
          "20:   setQueryEditor(newEditor: CodeMirrorEditor): void;",
          "",
          "[Added Lines]",
          "12: import { useSchemaWithError } from '../schema';",
          "15: export type CodeMirrorEditorWithOperationFacts = CodeMirrorEditor & {",
          "16:   documentAST: DocumentNode | null;",
          "17:   operationName: string | null;",
          "18:   operations: OperationDefinitionNode[] | null;",
          "19:   variableToType: VariableToType | null;",
          "20: };",
          "25:   queryEditor: CodeMirrorEditorWithOperationFacts | null;",
          "29:   setQueryEditor(newEditor: CodeMirrorEditorWithOperationFacts): void;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:   const [headerEditor, setHeaderEditor] = useState<CodeMirrorEditor | null>(",
          "47:     null,",
          "48:   );",
          "50:   const [responseEditor, setResponseEditor] = useState<CodeMirrorEditor | null>(",
          "51:     null,",
          "52:   );",
          "",
          "[Removed Lines]",
          "49:   const [queryEditor, setQueryEditor] = useState<CodeMirrorEditor | null>(null);",
          "",
          "[Added Lines]",
          "58:   const [",
          "59:     queryEditor,",
          "60:     setQueryEditor,",
          "61:   ] = useState<CodeMirrorEditorWithOperationFacts | null>(null);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/header-editor.tsx||packages/graphiql-react/src/editor/header-editor.tsx": [
          "File: packages/graphiql-react/src/editor/header-editor.tsx -> packages/graphiql-react/src/editor/header-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { useContext, useEffect, useRef } from 'react';",
          "3: import { commonKeys, importCodeMirror } from './common';",
          "4: import { EditorContext } from './context';",
          "5: import {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { StorageContext } from '../storage';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:   onMergeQuery?: EmptyCallback;",
          "22:   onRunQuery?: EmptyCallback;",
          "23:   readOnly?: boolean;",
          "24:   value?: string;",
          "25: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:   shouldPersistHeaders?: boolean;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:   onPrettifyQuery,",
          "33:   onRunQuery,",
          "34:   readOnly = false,",
          "35:   value,",
          "36: }: UseHeaderEditorArgs = {}) {",
          "37:   const context = useContext(EditorContext);",
          "38:   const ref = useRef<HTMLDivElement>(null);",
          "40:   if (!context) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   shouldPersistHeaders = false,",
          "41:   const storage = useContext(StorageContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "46:   const { headerEditor, setHeaderEditor } = context;",
          "50:   useEffect(() => {",
          "51:     let isActive = true;",
          "",
          "[Removed Lines]",
          "48:   const initialValue = useRef(value);",
          "",
          "[Added Lines]",
          "52:   const initialValue = useRef(value ?? storage?.get(STORAGE_KEY) ?? '');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   useSynchronizeValue(headerEditor, value);",
          "122:   useCompletion(headerEditor, onHintInformationRender);",
          "",
          "[Removed Lines]",
          "120:   useChangeHandler(headerEditor, onEdit);",
          "",
          "[Added Lines]",
          "124:   useChangeHandler(",
          "125:     headerEditor,",
          "126:     onEdit,",
          "127:     shouldPersistHeaders ? STORAGE_KEY : null,",
          "128:   );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:   return ref;",
          "131: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: const STORAGE_KEY = 'headers';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/hooks.ts||packages/graphiql-react/src/editor/hooks.ts": [
          "File: packages/graphiql-react/src/editor/hooks.ts -> packages/graphiql-react/src/editor/hooks.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { EditorChange } from 'codemirror';",
          "4: import { onHasCompletion } from './completion';",
          "5: import { CodeMirrorEditor } from './types';",
          "",
          "[Removed Lines]",
          "2: import { RefObject, useEffect, useRef } from 'react';",
          "",
          "[Added Lines]",
          "2: import { RefObject, useContext, useEffect, useRef } from 'react';",
          "4: import { StorageContext } from '../storage';",
          "5: import debounce from '../utility/debounce';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: export function useChangeHandler(",
          "21:   editor: CodeMirrorEditor | null,",
          "22:   callback: EditCallback | undefined,",
          "23: ) {",
          "24:   useEffect(() => {",
          "25:     if (!editor) {",
          "26:       return;",
          "27:     }",
          "29:     const handleChange = (editorInstance: CodeMirrorEditor) => {",
          "30:       const newValue = editorInstance.getValue();",
          "31:       callback?.(newValue);",
          "32:     };",
          "33:     editor.on('change', handleChange);",
          "34:     return () => editor.off('change', handleChange);",
          "36: }",
          "38: export type CompletionCallback = (value: HTMLDivElement) => void;",
          "",
          "[Removed Lines]",
          "35:   }, [editor, callback]);",
          "",
          "[Added Lines]",
          "26:   storageKey: string | null,",
          "28:   const storage = useContext(StorageContext);",
          "34:     const store = debounce(500, (value: string) => {",
          "35:       if (!storage || storageKey === null) {",
          "36:         return;",
          "37:       }",
          "38:       storage.set(storageKey, value);",
          "39:     });",
          "44:       store(newValue);",
          "48:   }, [callback, editor, storage, storageKey]);",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/query-editor.tsx||packages/graphiql-react/src/editor/query-editor.tsx": [
          "File: packages/graphiql-react/src/editor/query-editor.tsx -> packages/graphiql-react/src/editor/query-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { SchemaReference } from 'codemirror-graphql/utils/SchemaReference';",
          "2: import type {",
          "3:   FragmentDefinitionNode,",
          "4:   GraphQLSchema,",
          "5:   ValidationRule,",
          "6: } from 'graphql';",
          "7: import { MutableRefObject, useContext, useEffect, useRef } from 'react';",
          "9: import { commonKeys, importCodeMirror } from './common';",
          "11: import {",
          "12:   CompletionCallback,",
          "13:   EditCallback,",
          "14:   EmptyCallback,",
          "16:   useCompletion,",
          "17:   useKeyMap,",
          "18:   useResizeEditor,",
          "19:   useSynchronizeValue,",
          "20: } from './hooks';",
          "22: import { normalizeWhitespace } from './whitespace';",
          "26: type OnClickReference = (reference: SchemaReference) => void;",
          "28: export type UseQueryEditorArgs = {",
          "29:   editorTheme?: string;",
          "30:   externalFragments?: string | FragmentDefinitionNode[];",
          "31:   onClickReference?: OnClickReference;",
          "32:   onCopyQuery?: EmptyCallback;",
          "33:   onEdit?: EditCallback;",
          "34:   onHintInformationRender?: CompletionCallback;",
          "35:   onPrettifyQuery?: EmptyCallback;",
          "36:   onMergeQuery?: EmptyCallback;",
          "",
          "[Removed Lines]",
          "10: import { EditorContext } from './context';",
          "15:   useChangeHandler,",
          "21: import { markdown } from '../markdown';",
          "23: import { CodeMirrorType, CodeMirrorEditor } from './types';",
          "24: import { useSchemaWithError } from '../schema';",
          "",
          "[Added Lines]",
          "1: import { getSelectedOperationName } from '@graphiql/toolkit';",
          "8: import { getOperationFacts } from 'graphql-language-service';",
          "11: import { markdown } from '../markdown';",
          "12: import { useSchemaWithError } from '../schema';",
          "13: import { StorageContext } from '../storage';",
          "14: import debounce from '../utility/debounce';",
          "16: import { CodeMirrorEditorWithOperationFacts, EditorContext } from './context';",
          "26: import { CodeMirrorEditor, CodeMirrorType } from './types';",
          "32:   defaultValue?: string;",
          "38:   onEditOperationName?: EditCallback;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: };",
          "43: export function useQueryEditor({",
          "44:   editorTheme = 'graphiql',",
          "45:   externalFragments,",
          "46:   onClickReference,",
          "47:   onCopyQuery,",
          "48:   onEdit,",
          "49:   onHintInformationRender,",
          "50:   onMergeQuery,",
          "51:   onPrettifyQuery,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:   defaultValue = DEFAULT_VALUE,",
          "55:   onEditOperationName,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: }: UseQueryEditorArgs = {}) {",
          "57:   const { schema } = useSchemaWithError('hook', 'useQueryEditor');",
          "58:   const editorContext = useContext(EditorContext);",
          "59:   const ref = useRef<HTMLDivElement>(null);",
          "60:   const codeMirrorRef = useRef<CodeMirrorType>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   const storage = useContext(StorageContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     );",
          "66:   }",
          "70:   const onClickReferenceRef = useRef<OnClickReference>();",
          "71:   useEffect(() => {",
          "72:     onClickReferenceRef.current = onClickReference;",
          "73:   }, [onClickReference]);",
          "77:   useEffect(() => {",
          "78:     let isActive = true;",
          "",
          "[Removed Lines]",
          "68:   const { queryEditor, setQueryEditor } = editorContext;",
          "75:   const initialValue = useRef(value);",
          "",
          "[Added Lines]",
          "76:   const { queryEditor, setQueryEditor, variableEditor } = editorContext;",
          "83:   const initialValue = useRef(",
          "84:     value ?? storage?.get(STORAGE_KEY_QUERY) ?? defaultValue,",
          "85:   );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:           },",
          "150:         },",
          "153:       newEditor.addKeyMap({",
          "154:         'Cmd-Space'() {",
          "",
          "[Removed Lines]",
          "151:       });",
          "",
          "[Added Lines]",
          "161:       }) as CodeMirrorEditorWithOperationFacts;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "182:         }",
          "183:       });",
          "185:       setQueryEditor(newEditor);",
          "186:     });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:       newEditor.documentAST = null;",
          "196:       newEditor.operationName = null;",
          "197:       newEditor.operations = null;",
          "198:       newEditor.variableToType = null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "190:     };",
          "191:   }, [editorTheme, readOnly, setQueryEditor]);",
          "194:   useSynchronizeValidationRules(",
          "195:     queryEditor,",
          "196:     validationRules ?? null,",
          "",
          "[Removed Lines]",
          "193:   useSynchronizeSchema(queryEditor, schema, codeMirrorRef);",
          "",
          "[Added Lines]",
          "213:   useEffect(() => {",
          "214:     if (!queryEditor) {",
          "215:       return;",
          "216:     }",
          "218:     function getAndUpdateOperationFacts(",
          "219:       editorInstance: CodeMirrorEditorWithOperationFacts,",
          "220:     ) {",
          "221:       const operationFacts = getOperationFacts(",
          "222:         schema,",
          "223:         editorInstance.getValue(),",
          "224:       );",
          "225:       if (!operationFacts) {",
          "226:         return;",
          "227:       }",
          "230:       const operationName = getSelectedOperationName(",
          "231:         editorInstance.operations ?? undefined,",
          "232:         editorInstance.operationName ?? undefined,",
          "233:         operationFacts.operations,",
          "234:       );",
          "237:       editorInstance.documentAST = operationFacts.documentAST;",
          "238:       editorInstance.operationName = operationName ?? null;",
          "239:       editorInstance.operations = operationFacts.operations;",
          "240:       editorInstance.variableToType = operationFacts.variableToType ?? null;",
          "243:       if (variableEditor) {",
          "244:         variableEditor.state.lint.linterOptions.variableToType =",
          "245:           operationFacts.variableToType;",
          "246:         variableEditor.options.lint.variableToType =",
          "247:           operationFacts.variableToType;",
          "248:         variableEditor.options.hintOptions.variableToType =",
          "249:           operationFacts.variableToType;",
          "250:         codeMirrorRef.current?.signal(variableEditor, 'change', variableEditor);",
          "251:       }",
          "253:       return { ...operationFacts, operationName };",
          "254:     }",
          "256:     const handleChange = debounce(",
          "257:       100,",
          "258:       (editorInstance: CodeMirrorEditorWithOperationFacts, change: any) => {",
          "259:         const query = editorInstance.getValue();",
          "260:         storage?.set(STORAGE_KEY_QUERY, query);",
          "262:         const operationFacts = getAndUpdateOperationFacts(editorInstance);",
          "263:         if (operationFacts?.operationName !== undefined) {",
          "264:           storage?.set(",
          "265:             STORAGE_KEY_OPERATION_NAME,",
          "266:             operationFacts.operationName,",
          "267:           );",
          "268:         }",
          "271:         onEdit?.(query);",
          "272:         if (",
          "273:           onEditOperationName &&",
          "274:           operationFacts?.operationName !== undefined &&",
          "275:           editorInstance.operationName !== operationFacts.operationName",
          "276:         ) {",
          "277:           onEditOperationName(operationFacts.operationName);",
          "278:         }",
          "279:       },",
          "280:     ) as (editorInstance: CodeMirrorEditor) => void;",
          "283:     getAndUpdateOperationFacts(queryEditor);",
          "285:     queryEditor.on('change', handleChange);",
          "286:     return () => queryEditor.off('change', handleChange);",
          "287:   }, [",
          "288:     onEdit,",
          "289:     onEditOperationName,",
          "290:     queryEditor,",
          "291:     schema,",
          "292:     storage,",
          "293:     variableEditor,",
          "294:   ]);",
          "296:   useSynchronizeSchema(queryEditor, schema ?? null, codeMirrorRef);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "205:   useSynchronizeValue(queryEditor, value);",
          "209:   useCompletion(queryEditor, onHintInformationRender);",
          "211:   useKeyMap(queryEditor, ['Cmd-Enter', 'Ctrl-Enter'], onRunQuery);",
          "",
          "[Removed Lines]",
          "207:   useChangeHandler(queryEditor, onEdit);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "229: function useSynchronizeSchema(",
          "230:   editor: CodeMirrorEditor | null,",
          "232:   codeMirrorRef: MutableRefObject<CodeMirrorType | undefined>,",
          "233: ) {",
          "234:   useEffect(() => {",
          "",
          "[Removed Lines]",
          "231:   schema: GraphQLSchema | null | undefined,",
          "",
          "[Added Lines]",
          "332:   schema: GraphQLSchema | null,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "295: }",
          "297: const AUTO_COMPLETE_AFTER_KEY = /^[a-zA-Z0-9_@(]$/;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: const DEFAULT_VALUE = `# Welcome to GraphiQL",
          "401: #",
          "402: # GraphiQL is an in-browser tool for writing, validating, and",
          "403: # testing GraphQL queries.",
          "404: #",
          "405: # Type queries into this side of the screen, and you will see intelligent",
          "406: # typeaheads aware of the current GraphQL type schema and live syntax and",
          "407: # validation errors highlighted within the text.",
          "408: #",
          "409: # GraphQL queries typically start with a \"{\" character. Lines that start",
          "410: # with a # are ignored.",
          "411: #",
          "412: # An example GraphQL query might look like:",
          "413: #",
          "414: #     {",
          "415: #       field(arg: \"value\") {",
          "416: #         subField",
          "417: #       }",
          "418: #     }",
          "419: #",
          "420: # Keyboard shortcuts:",
          "421: #",
          "422: #  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)",
          "423: #",
          "424: #     Merge Query:  Shift-Ctrl-M (or press the merge button above)",
          "425: #",
          "426: #       Run Query:  Ctrl-Enter (or press the play button above)",
          "427: #",
          "428: #   Auto Complete:  Ctrl-Space (or just start typing)",
          "429: #",
          "431: `;",
          "433: const STORAGE_KEY_QUERY = 'query';",
          "435: const STORAGE_KEY_OPERATION_NAME = 'operationName';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/editor/variable-editor.tsx||packages/graphiql-react/src/editor/variable-editor.tsx": [
          "File: packages/graphiql-react/src/editor/variable-editor.tsx -> packages/graphiql-react/src/editor/variable-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { commonKeys, importCodeMirror } from './common';",
          "5: import { EditorContext } from './context';",
          "6: import {",
          "",
          "[Removed Lines]",
          "1: import type { VariableToType } from 'graphql-language-service';",
          "2: import { MutableRefObject, useContext, useEffect, useRef } from 'react';",
          "",
          "[Added Lines]",
          "1: import { useContext, useEffect, useRef } from 'react';",
          "3: import { StorageContext } from '../storage';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13:   useResizeEditor,",
          "14:   useSynchronizeValue,",
          "15: } from './hooks';",
          "18: export type UseVariableEditorArgs = {",
          "19:   editorTheme?: string;",
          "",
          "[Removed Lines]",
          "16: import { CodeMirrorEditor, CodeMirrorType } from './types';",
          "",
          "[Added Lines]",
          "16: import { CodeMirrorType } from './types';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:   onRunQuery?: EmptyCallback;",
          "25:   readOnly?: boolean;",
          "26:   value?: string;",
          "28: };",
          "30: export function useVariableEditor({",
          "",
          "[Removed Lines]",
          "27:   variableToType?: VariableToType;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "36:   onRunQuery,",
          "37:   readOnly = false,",
          "38:   value,",
          "40: }: UseVariableEditorArgs = {}) {",
          "41:   const context = useContext(EditorContext);",
          "42:   const ref = useRef<HTMLDivElement>(null);",
          "43:   const codeMirrorRef = useRef<CodeMirrorType>();",
          "",
          "[Removed Lines]",
          "39:   variableToType,",
          "",
          "[Added Lines]",
          "40:   const storage = useContext(StorageContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "51:   const { variableEditor, setVariableEditor } = context;",
          "55:   useEffect(() => {",
          "56:     let isActive = true;",
          "",
          "[Removed Lines]",
          "53:   const initialValue = useRef(value);",
          "",
          "[Added Lines]",
          "52:   const initialValue = useRef(value ?? storage?.get(STORAGE_KEY) ?? '');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:     };",
          "135:   }, [editorTheme, readOnly, setVariableEditor]);",
          "139:   useSynchronizeValue(variableEditor, value);",
          "143:   useCompletion(variableEditor, onHintInformationRender);",
          "",
          "[Removed Lines]",
          "137:   useSynchronizeVariableTypes(variableEditor, variableToType, codeMirrorRef);",
          "141:   useChangeHandler(variableEditor, onEdit);",
          "",
          "[Added Lines]",
          "138:   useChangeHandler(variableEditor, onEdit, STORAGE_KEY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151:   return ref;",
          "152: }",
          "",
          "[Removed Lines]",
          "154: function useSynchronizeVariableTypes(",
          "155:   editor: CodeMirrorEditor | null,",
          "156:   variableToType: VariableToType | undefined,",
          "157:   codeMirrorRef: MutableRefObject<CodeMirrorType | undefined>,",
          "158: ) {",
          "159:   useEffect(() => {",
          "160:     if (!editor) {",
          "161:       return;",
          "162:     }",
          "164:     const didChange = editor.options.lint.variableToType !== variableToType;",
          "166:     editor.state.lint.linterOptions.variableToType = variableToType;",
          "167:     editor.options.lint.variableToType = variableToType;",
          "168:     editor.options.hintOptions.variableToType = variableToType;",
          "170:     if (didChange && codeMirrorRef.current) {",
          "171:       codeMirrorRef.current.signal(editor, 'change', editor);",
          "172:     }",
          "173:   }, [editor, variableToType, codeMirrorRef]);",
          "174: }",
          "",
          "[Added Lines]",
          "151: const STORAGE_KEY = 'variables';",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/utility/debounce.ts||packages/graphiql-react/src/utility/debounce.ts": [
          "File: packages/graphiql-react/src/utility/debounce.ts -> packages/graphiql-react/src/utility/debounce.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: export default function debounce<F extends (...args: any[]) => any>(",
          "6:   duration: number,",
          "7:   fn: F,",
          "8: ) {",
          "9:   let timeout: number | null;",
          "10:   return function (...args) {",
          "11:     if (timeout) {",
          "12:       window.clearTimeout(timeout);",
          "13:     }",
          "14:     timeout = window.setTimeout(() => {",
          "15:       timeout = null;",
          "16:       fn(...args);",
          "17:     }, duration);",
          "18:   } as F;",
          "19: }",
          "",
          "---------------"
        ],
        "packages/graphiql/__mocks__/@graphiql/react.ts||packages/graphiql/__mocks__/@graphiql/react.ts": [
          "File: packages/graphiql/__mocks__/@graphiql/react.ts -> packages/graphiql/__mocks__/@graphiql/react.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   name: string,",
          "73:   value?: string,",
          "74:   onEdit?: (newValue: string) => void,",
          "75: ) {",
          "77:   const ref = useRef<HTMLDivElement>(null);",
          "79:   const context = useContext(EditorContext);",
          "",
          "[Removed Lines]",
          "76:   const [code, setCode] = useState(value);",
          "",
          "[Added Lines]",
          "75:   defaultValue?: string,",
          "77:   const [code, setCode] = useState(value ?? defaultValue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   }, [onEdit]);",
          "139:   useEffect(() => {",
          "141:   }, [value]);",
          "143:   useEffect(() => {",
          "",
          "[Removed Lines]",
          "140:     setCode(value);",
          "",
          "[Added Lines]",
          "141:     if (value) {",
          "142:       setCode(value);",
          "143:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164: };",
          "166: export const useQueryEditor: typeof _useQueryEditor = function useQueryEditor({",
          "167:   onEdit,",
          "168:   value,",
          "169: }) {",
          "171: };",
          "173: export const useResponseEditor: typeof _useResponseEditor = function useResponseEditor({",
          "174:   value,",
          "175: }) {",
          "177: };",
          "179: export const useVariableEditor: typeof _useVariableEditor = function useVariableEditor({",
          "",
          "[Removed Lines]",
          "170:   return useMockedEditor('query', value, onEdit);",
          "176:   return useMockedEditor('query', value);",
          "",
          "[Added Lines]",
          "170:   defaultValue = '# Welcome to GraphiQL',",
          "174:   return useMockedEditor('query', value, onEdit, defaultValue);",
          "180:   return useMockedEditor('response', value);",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ExecuteButton.tsx||packages/graphiql/src/components/ExecuteButton.tsx": [
          "File: packages/graphiql/src/components/ExecuteButton.tsx -> packages/graphiql/src/components/ExecuteButton.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { OperationDefinitionNode } from 'graphql';",
          "17: type ExecuteButtonProps = {",
          "19:   isRunning: boolean;",
          "20:   onStop: () => void;",
          "21:   onRun: (value?: string) => void;",
          "22: };",
          "40:   }",
          "51:         <ul className=\"execute-options\">",
          "52:           {operations.map((operation, i) => {",
          "53:             const opName = operation.name",
          "",
          "[Removed Lines]",
          "7: import React, { MouseEventHandler } from 'react';",
          "18:   operations?: OperationDefinitionNode[];",
          "24: type ExecuteButtonState = {",
          "25:   optionsOpen: boolean;",
          "26:   highlight: OperationDefinitionNode | null;",
          "27: };",
          "29: export class ExecuteButton extends React.Component<",
          "30:   ExecuteButtonProps,",
          "31:   ExecuteButtonState",
          "32: > {",
          "33:   constructor(props: ExecuteButtonProps) {",
          "34:     super(props);",
          "36:     this.state = {",
          "37:       optionsOpen: false,",
          "38:       highlight: null,",
          "39:     };",
          "42:   render() {",
          "43:     const operations = this.props.operations || [];",
          "44:     const optionsOpen = this.state.optionsOpen;",
          "45:     const hasOptions = operations && operations.length > 1;",
          "47:     let options = null;",
          "48:     if (hasOptions && optionsOpen) {",
          "49:       const highlight = this.state.highlight;",
          "50:       options = (",
          "",
          "[Added Lines]",
          "7: import React, { useContext, useState } from 'react';",
          "9: import { EditorContext } from '@graphiql/react';",
          "17: export function ExecuteButton({",
          "18:   isRunning,",
          "19:   onStop,",
          "20:   onRun,",
          "21: }: ExecuteButtonProps) {",
          "22:   const editorContext = useContext(EditorContext);",
          "23:   if (!editorContext) {",
          "24:     throw new Error(",
          "25:       'Tried to render the `ExecuteButton` component without the necessary context. Make sure that the `EditorContextProvider` from `@graphiql/react` is rendered higher in the tree.',",
          "26:     );",
          "29:   const [optionsOpen, setOptionsOpen] = useState(false);",
          "30:   const [highlight, setHighlight] = useState<OperationDefinitionNode | null>(",
          "31:     null,",
          "32:   );",
          "34:   const operations = editorContext.queryEditor?.operations || [];",
          "35:   const hasOptions = operations.length > 1;",
          "37:   return (",
          "38:     <div className=\"execute-button-wrap\">",
          "39:       <button",
          "40:         type=\"button\"",
          "41:         className=\"execute-button\"",
          "42:         onMouseDown={",
          "45:           !isRunning && hasOptions && !optionsOpen",
          "46:             ? downEvent => {",
          "47:                 let initialPress = true;",
          "48:                 const downTarget = downEvent.currentTarget;",
          "49:                 setHighlight(null);",
          "50:                 setOptionsOpen(true);",
          "52:                 type MouseUpEventHandler = (upEvent: MouseEvent) => void;",
          "53:                 let onMouseUp: MouseUpEventHandler | null = upEvent => {",
          "54:                   if (initialPress && upEvent.target === downTarget) {",
          "55:                     initialPress = false;",
          "56:                   } else {",
          "57:                     document.removeEventListener('mouseup', onMouseUp!);",
          "58:                     onMouseUp = null;",
          "59:                     const isOptionsMenuClicked =",
          "60:                       upEvent.currentTarget &&",
          "61:                       downTarget.parentNode?.compareDocumentPosition(",
          "62:                         upEvent.currentTarget as Node,",
          "63:                       ) &&",
          "64:                       Node.DOCUMENT_POSITION_CONTAINED_BY;",
          "65:                     if (!isOptionsMenuClicked) {",
          "67:                       setOptionsOpen(false);",
          "68:                     }",
          "69:                   }",
          "70:                 };",
          "72:                 document.addEventListener('mouseup', onMouseUp);",
          "73:               }",
          "74:             : undefined",
          "75:         }",
          "76:         onClick={",
          "79:           isRunning || !hasOptions",
          "80:             ? () => {",
          "81:                 if (isRunning) {",
          "82:                   onStop();",
          "83:                 } else {",
          "84:                   onRun();",
          "85:                 }",
          "86:               }",
          "87:             : undefined",
          "88:         }",
          "89:         title=\"Execute Query (Ctrl-Enter)\">",
          "90:         <svg width=\"34\" height=\"34\">",
          "91:           {isRunning ? (",
          "92:             <path d=\"M 10 10 L 23 10 L 23 23 L 10 23 z\" />",
          "93:           ) : (",
          "94:             <path d=\"M 11 9 L 24 16 L 11 23 z\" />",
          "95:           )}",
          "96:         </svg>",
          "97:       </button>",
          "98:       {hasOptions && optionsOpen ? (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:               <li",
          "58:                 key={`${opName}-${i}`}",
          "59:                 className={operation === highlight ? 'selected' : undefined}",
          "63:                 {opName}",
          "64:               </li>",
          "65:             );",
          "66:           })}",
          "67:         </ul>",
          "148: }",
          "",
          "[Removed Lines]",
          "60:                 onMouseOver={() => this.setState({ highlight: operation })}",
          "61:                 onMouseOut={() => this.setState({ highlight: null })}",
          "62:                 onMouseUp={() => this._onOptionSelected(operation)}>",
          "68:       );",
          "69:     }",
          "73:     let onClick;",
          "74:     if (this.props.isRunning || !hasOptions) {",
          "75:       onClick = this._onClick;",
          "76:     }",
          "80:     let onMouseDown: MouseEventHandler<HTMLButtonElement> = () => {};",
          "81:     if (!this.props.isRunning && hasOptions && !optionsOpen) {",
          "82:       onMouseDown = this._onOptionsOpen;",
          "83:     }",
          "85:     const pathJSX = this.props.isRunning ? (",
          "86:       <path d=\"M 10 10 L 23 10 L 23 23 L 10 23 z\" />",
          "87:     ) : (",
          "88:       <path d=\"M 11 9 L 24 16 L 11 23 z\" />",
          "89:     );",
          "91:     return (",
          "92:       <div className=\"execute-button-wrap\">",
          "93:         <button",
          "94:           type=\"button\"",
          "95:           className=\"execute-button\"",
          "96:           onMouseDown={onMouseDown}",
          "97:           onClick={onClick}",
          "98:           title=\"Execute Query (Ctrl-Enter)\">",
          "99:           <svg width=\"34\" height=\"34\">",
          "100:             {pathJSX}",
          "101:           </svg>",
          "102:         </button>",
          "103:         {options}",
          "104:       </div>",
          "105:     );",
          "106:   }",
          "108:   _onClick = () => {",
          "109:     if (this.props.isRunning) {",
          "110:       this.props.onStop();",
          "111:     } else {",
          "112:       this.props.onRun();",
          "113:     }",
          "114:   };",
          "116:   _onOptionSelected = (operation: OperationDefinitionNode) => {",
          "117:     this.setState({ optionsOpen: false });",
          "118:     this.props.onRun(operation.name && operation.name.value);",
          "119:   };",
          "121:   _onOptionsOpen: MouseEventHandler<HTMLButtonElement> = downEvent => {",
          "122:     let initialPress = true;",
          "123:     const downTarget = downEvent.currentTarget;",
          "124:     this.setState({ highlight: null, optionsOpen: true });",
          "126:     type MouseUpEventHandler = (upEvent: MouseEvent) => void;",
          "127:     let onMouseUp: MouseUpEventHandler | null = upEvent => {",
          "128:       if (initialPress && upEvent.target === downTarget) {",
          "129:         initialPress = false;",
          "130:       } else {",
          "131:         document.removeEventListener('mouseup', onMouseUp!);",
          "132:         onMouseUp = null;",
          "133:         const isOptionsMenuClicked =",
          "134:           upEvent.currentTarget &&",
          "135:           downTarget.parentNode?.compareDocumentPosition(",
          "136:             upEvent.currentTarget as Node,",
          "137:           ) &&",
          "138:           Node.DOCUMENT_POSITION_CONTAINED_BY;",
          "139:         if (!isOptionsMenuClicked) {",
          "141:           this.setState({ optionsOpen: false });",
          "142:         }",
          "143:       }",
          "144:     };",
          "146:     document.addEventListener('mouseup', onMouseUp);",
          "147:   };",
          "",
          "[Added Lines]",
          "108:                 onMouseOver={() => setHighlight(operation)}",
          "109:                 onMouseOut={() => setHighlight(null)}",
          "110:                 onMouseUp={() => {",
          "111:                   setOptionsOpen(false);",
          "112:                   onRun(operation.name && operation.name.value);",
          "113:                 }}>",
          "119:       ) : null}",
          "120:     </div>",
          "121:   );",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   parse,",
          "17:   print,",
          "18:   visit,",
          "20:   ValidationRule,",
          "21:   FragmentDefinitionNode,",
          "22:   DocumentNode,",
          "23:   GraphQLNamedType,",
          "24: } from 'graphql';",
          "25: import copyToClipboard from 'copy-to-clipboard';",
          "31: import { SchemaReference } from 'codemirror-graphql/src/utils/SchemaReference';",
          "33: import {",
          "",
          "[Removed Lines]",
          "19:   OperationDefinitionNode,",
          "26: import {",
          "27:   getFragmentDependenciesForAST,",
          "28:   getOperationFacts,",
          "29:   VariableToType,",
          "30: } from 'graphql-language-service';",
          "",
          "[Added Lines]",
          "25: import { getFragmentDependenciesForAST } from 'graphql-language-service';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: import {",
          "71:   formatError,",
          "72:   formatResult,",
          "74:   isAsyncIterable,",
          "75:   isObservable,",
          "76:   mergeAst,",
          "",
          "[Removed Lines]",
          "73:   getSelectedOperationName,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321: };",
          "323: export type GraphiQLState = {",
          "327:   docExplorerOpen: boolean;",
          "328:   response?: string;",
          "329:   editorFlex: number;",
          "",
          "[Removed Lines]",
          "324:   schema?: GraphQLSchema | null;",
          "325:   query?: string;",
          "326:   operationName?: string;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "336:   docExplorerWidth: number;",
          "337:   isWaitingForResponse: boolean;",
          "338:   subscription?: Unsubscribable | null;",
          "342:   tabs: TabsState;",
          "343: };",
          "",
          "[Removed Lines]",
          "339:   variableToType?: VariableToType;",
          "340:   operations?: OperationDefinitionNode[];",
          "341:   documentAST?: DocumentNode;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "368:   return (",
          "369:     <StorageContextProvider storage={props.storage}>",
          "370:       <StorageContext.Consumer>",
          "371:         {storageContext => (",
          "372:           <SchemaContextProvider",
          "376:             fetcher={props.fetcher}",
          "377:             initialHeaders={",
          "378:               props.headers !== undefined",
          "379:                 ? props.headers",
          "380:                 : storageContext?.get('headers') ?? undefined",
          "381:             }",
          "386:             <EditorContextProvider>",
          "387:               <HistoryContextProvider",
          "388:                 maxHistoryLength={props.maxHistoryLength}",
          "",
          "[Removed Lines]",
          "367: export function GraphiQL(props: GraphiQLProps) {",
          "373:             dangerouslyAssumeSchemaIsValid={",
          "374:               props.dangerouslyAssumeSchemaIsValid",
          "375:             }",
          "382:             inputValueDeprecation={props.inputValueDeprecation}",
          "383:             introspectionQueryName={props.introspectionQueryName}",
          "384:             schema={props.schema}",
          "385:             schemaDescription={props.schemaDescription}>",
          "",
          "[Added Lines]",
          "355: export function GraphiQL({",
          "356:   dangerouslyAssumeSchemaIsValid,",
          "357:   inputValueDeprecation,",
          "358:   introspectionQueryName,",
          "359:   schema,",
          "360:   schemaDescription,",
          "361:   ...props",
          "362: }: GraphiQLProps) {",
          "368:             dangerouslyAssumeSchemaIsValid={dangerouslyAssumeSchemaIsValid}",
          "375:             inputValueDeprecation={inputValueDeprecation}",
          "376:             introspectionQueryName={introspectionQueryName}",
          "377:             schema={schema}",
          "378:             schemaDescription={schemaDescription}>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "463: type GraphiQLWithContextProps = Omit<",
          "464:   GraphiQLProps,",
          "466: > & {",
          "467:   editorContext: EditorContextType;",
          "468:   explorerContext: ExplorerContextType | null;",
          "",
          "[Removed Lines]",
          "465:   'maxHistoryLength' | 'onToggleHistory' | 'storage'",
          "",
          "[Added Lines]",
          "458:   | 'dangerouslyAssumeSchemaIsValid'",
          "459:   | 'inputValueDeprecation'",
          "460:   | 'introspectionQueryName'",
          "461:   | 'maxHistoryLength'",
          "462:   | 'onToggleHistory'",
          "463:   | 'schema'",
          "464:   | 'schemaDescription'",
          "465:   | 'storage'",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "497:     this.componentIsMounted = false;",
          "500:     const query =",
          "501:       props.query ??",
          "503:       props.defaultQuery ??",
          "504:       defaultQuery;",
          "509:     const variables =",
          "516:     const operationName =",
          "517:       props.operationName ??",
          "525:     let docExplorerOpen = props.docExplorerOpen || false;",
          "",
          "[Removed Lines]",
          "502:       this.props.storageContext?.get('query') ??",
          "507:     const queryFacts = getOperationFacts(props.schema, query);",
          "510:       props.variables ?? this.props.storageContext?.get('variables');",
          "513:     const headers = props.headers ?? this.props.storageContext?.get('headers');",
          "518:       getSelectedOperationName(",
          "519:         undefined,",
          "520:         this.props.storageContext?.get('operationName') ?? undefined,",
          "521:         queryFacts && queryFacts.operations,",
          "522:       );",
          "",
          "[Added Lines]",
          "501:       props.storageContext?.get('query') ??",
          "506:       props.variables ?? props.storageContext?.get('variables') ?? undefined;",
          "508:     const headers =",
          "509:       props.headers ?? props.storageContext?.get('headers') ?? undefined;",
          "513:       props.storageContext?.get('operationName') ??",
          "514:       undefined;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "548:     const initialTabHash = idFromTabContents({",
          "549:       query,",
          "552:     });",
          "554:     const initialTab: TabState = {",
          "555:       id: guid(),",
          "556:       hash: initialTabHash,",
          "558:       query,",
          "561:       operationName,",
          "562:       response: undefined,",
          "563:     };",
          "",
          "[Removed Lines]",
          "550:       variables: variables ?? undefined,",
          "551:       headers: headers ?? undefined,",
          "557:       title: operationName ?? '<untitled>',",
          "559:       variables: variables ?? undefined,",
          "560:       headers: headers ?? undefined,",
          "",
          "[Added Lines]",
          "542:       variables,",
          "543:       headers,",
          "549:       title: '<untitled>',",
          "551:       variables,",
          "552:       headers,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "615:     this.state = {",
          "616:       tabs: tabsState,",
          "620:       response: activeTab?.response,",
          "621:       docExplorerOpen,",
          "622:       editorFlex: Number(this.props.storageContext?.get('editorFlex')) || 1,",
          "",
          "[Removed Lines]",
          "617:       schema: props.schema,",
          "618:       query: activeTab?.query,",
          "619:       operationName: activeTab?.operationName,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "637:         DEFAULT_DOC_EXPLORER_WIDTH,",
          "638:       isWaitingForResponse: false,",
          "639:       subscription: null,",
          "641:     };",
          "645:   }",
          "647:   componentDidMount() {",
          "",
          "[Removed Lines]",
          "640:       ...queryFacts,",
          "642:     if (this.state.query) {",
          "643:       this.handleEditQuery(this.state.query);",
          "644:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "662:   UNSAFE_componentWillReceiveProps(nextProps: GraphiQLWithContextProps) {",
          "666:     let nextResponse = this.state.response;",
          "677:     if (nextProps.response !== undefined) {",
          "678:       nextResponse = nextProps.response;",
          "679:     }",
          "712:     this.setState({",
          "716:       response: nextResponse,",
          "717:     });",
          "718:   }",
          "",
          "[Removed Lines]",
          "663:     let nextSchema = this.state.schema;",
          "664:     let nextQuery = this.state.query;",
          "665:     let nextOperationName = this.state.operationName;",
          "668:     if (nextProps.schema !== undefined) {",
          "669:       nextSchema = nextProps.schema;",
          "670:     }",
          "671:     if (nextProps.query !== undefined && this.props.query !== nextProps.query) {",
          "672:       nextQuery = nextProps.query;",
          "673:     }",
          "674:     if (nextProps.operationName !== undefined) {",
          "675:       nextOperationName = nextProps.operationName;",
          "676:     }",
          "680:     if (",
          "681:       nextQuery &&",
          "682:       nextSchema &&",
          "683:       (nextSchema !== this.state.schema ||",
          "684:         nextQuery !== this.state.query ||",
          "685:         nextOperationName !== this.state.operationName)",
          "686:     ) {",
          "687:       const updatedQueryAttributes = this._updateQueryFacts(",
          "688:         nextQuery,",
          "689:         nextOperationName,",
          "690:         this.state.operations,",
          "691:         nextSchema,",
          "692:       );",
          "694:       if (updatedQueryAttributes !== undefined) {",
          "695:         nextOperationName = updatedQueryAttributes.operationName;",
          "697:         this.setState(updatedQueryAttributes);",
          "698:       }",
          "699:     }",
          "703:     if (",
          "704:       nextProps.schema === undefined &&",
          "705:       nextProps.fetcher !== this.props.fetcher",
          "706:     ) {",
          "707:       nextSchema = undefined;",
          "708:     }",
          "709:     if (nextOperationName !== undefined) {",
          "710:       this.props.storageContext?.set('operationName', nextOperationName);",
          "711:     }",
          "713:       schema: nextSchema,",
          "714:       query: nextQuery,",
          "715:       operationName: nextOperationName,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "744:     this.handleStopQuery();",
          "745:     this.setState(",
          "746:       state => stateOnSelectTabReducer(index, state, this.props),",
          "753:     );",
          "754:   };",
          "",
          "[Removed Lines]",
          "747:       () => {",
          "748:         this.persistTabsState();",
          "749:         if (this.state.query) {",
          "750:           this.handleEditQuery(this.state.query);",
          "751:         }",
          "752:       },",
          "",
          "[Added Lines]",
          "686:       this.persistTabsState,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "859:                 isRunning={Boolean(this.state.subscription)}",
          "860:                 onRun={this.handleRunQuery}",
          "861:                 onStop={this.handleStopQuery}",
          "863:               />",
          "864:               {toolbar}",
          "865:             </div>",
          "",
          "[Removed Lines]",
          "862:                 operations={this.state.operations}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "906:             onMouseDown={this.handleResizeStart}>",
          "907:             <div className=\"queryWrap\" style={queryWrapStyle}>",
          "908:               <QueryEditor",
          "913:                 onClickReference={this.handleClickReference}",
          "914:                 onCopyQuery={this.handleCopyQuery}",
          "916:                 onMergeQuery={this.handleMergeQuery}",
          "917:                 onRunQuery={this.handleEditorRunQuery}",
          "919:                 readOnly={this.props.readOnly}",
          "921:               />",
          "922:               <section",
          "923:                 className=\"variable-editor secondary-editor\"",
          "",
          "[Removed Lines]",
          "909:                 validationRules={this.props.validationRules}",
          "910:                 value={this.state.query}",
          "911:                 onEdit={this.handleEditQuery}",
          "912:                 onHintInformationRender={this.handleHintInformationRender}",
          "915:                 onPrettifyQuery={this.handlePrettifyQuery}",
          "918:                 editorTheme={this.props.editorTheme}",
          "920:                 externalFragments={this.props.externalFragments}",
          "",
          "[Added Lines]",
          "842:                 defaultValue={this.props.defaultQuery}",
          "843:                 editorTheme={this.props.editorTheme}",
          "844:                 externalFragments={this.props.externalFragments}",
          "847:                 onEdit={this.handleEditQuery}",
          "848:                 onEditOperationName={this.props.onEditOperationName}",
          "849:                 onHintInformationRender={this.handleHintInformationRender}",
          "851:                 onPrettifyQuery={this.handlePrettifyQuery}",
          "854:                 validationRules={this.props.validationRules}",
          "855:                 value={this.props.query}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "958:                 </div>",
          "959:                 <VariableEditor",
          "960:                   value={this.props.variables}",
          "962:                   onEdit={this.handleEditVariables}",
          "963:                   onHintInformationRender={this.handleHintInformationRender}",
          "964:                   onPrettifyQuery={this.handlePrettifyQuery}",
          "",
          "[Removed Lines]",
          "961:                   variableToType={this.state.variableToType}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "970:                 />",
          "971:                 {this.state.headerEditorEnabled && (",
          "972:                   <HeaderEditor",
          "974:                     onEdit={this.handleEditHeaders}",
          "975:                     onHintInformationRender={this.handleHintInformationRender}",
          "977:                     onMergeQuery={this.handleMergeQuery}",
          "978:                     onRunQuery={this.handleEditorRunQuery}",
          "980:                     readOnly={this.props.readOnly}",
          "982:                   />",
          "983:                 )}",
          "984:               </section>",
          "",
          "[Removed Lines]",
          "973:                     value={this.props.headers}",
          "976:                     onPrettifyQuery={this.handlePrettifyQuery}",
          "979:                     editorTheme={this.props.editorTheme}",
          "981:                     active={this.state.headerEditorActive}",
          "",
          "[Added Lines]",
          "907:                     active={this.state.headerEditorActive}",
          "908:                     editorTheme={this.props.editorTheme}",
          "912:                     onPrettifyQuery={this.handlePrettifyQuery}",
          "915:                     shouldPersistHeaders={this.props.shouldPersistHeaders}",
          "916:                     value={this.props.headers}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1108:     if (typeof jsonHeaders !== 'object') {",
          "1109:       throw new Error('Headers are not a JSON object.');",
          "1110:     }",
          "1112:     if (this.props.externalFragments) {",
          "1113:       const externalFragments = new Map<string, FragmentDefinitionNode>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1047:     const documentAST =",
          "1048:       this.props.editorContext.queryEditor?.documentAST ?? undefined;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1123:           },",
          "1124:         });",
          "1125:       }",
          "1130:       if (fragmentDependencies.length > 0) {",
          "1131:         query +=",
          "1132:           '\\n' +",
          "",
          "[Removed Lines]",
          "1126:       const fragmentDependencies = getFragmentDependenciesForAST(",
          "1127:         this.state.documentAST!,",
          "1128:         externalFragments,",
          "1129:       );",
          "",
          "[Added Lines]",
          "1065:       const fragmentDependencies = documentAST",
          "1066:         ? getFragmentDependenciesForAST(documentAST, externalFragments)",
          "1067:         : [];",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1137:     }",
          "1139:     const fetch = fetcher(",
          "1150:     );",
          "1152:     return Promise.resolve<SyncFetcherResult>(fetch)",
          "",
          "[Removed Lines]",
          "1140:       {",
          "1141:         query,",
          "1142:         variables: jsonVariables,",
          "1143:         operationName,",
          "1144:       },",
          "1145:       {",
          "1146:         headers: jsonHeaders,",
          "1147:         shouldPersistHeaders,",
          "1148:         documentAST: this.state.documentAST,",
          "1149:       },",
          "",
          "[Added Lines]",
          "1078:       { query, variables: jsonVariables, operationName },",
          "1079:       { headers: jsonHeaders, shouldPersistHeaders, documentAST },",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1237:     const editedQuery =",
          "1239:     const variables = getVariables(this.props);",
          "1240:     const headers = getHeaders(this.props);",
          "1241:     const shouldPersistHeaders = this.state.shouldPersistHeaders;",
          "1246:     if (selectedOperationName && selectedOperationName !== operationName) {",
          "1247:       operationName = selectedOperationName;",
          "1249:     }",
          "1251:     try {",
          "1261:       this.props.historyContext?.addToHistory({",
          "1262:         query: editedQuery,",
          "",
          "[Removed Lines]",
          "1238:       this.props.editorContext.autoCompleteLeafs() || this.state.query || '';",
          "1242:     let operationName = this.state.operationName;",
          "1248:       this.handleEditOperationName(operationName);",
          "1252:       this.setState({",
          "1253:         isWaitingForResponse: true,",
          "1254:         response: undefined,",
          "1255:         operationName,",
          "1256:       });",
          "1257:       if (operationName !== undefined) {",
          "1258:         this.props.storageContext?.set('operationName', operationName);",
          "1259:       }",
          "",
          "[Added Lines]",
          "1168:       this.props.editorContext.autoCompleteLeafs() ||",
          "1169:       getQuery(this.props) ||",
          "1170:       '';",
          "1174:     let operationName =",
          "1175:       this.props.editorContext.queryEditor?.operationName ?? undefined;",
          "1181:       if (this.props.editorContext.queryEditor) {",
          "1182:         this.props.editorContext.queryEditor.operationName = selectedOperationName;",
          "1183:       }",
          "1184:       this.props.onEditOperationName?.(operationName);",
          "1188:       this.setState({ isWaitingForResponse: true, response: undefined });",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1383:     }",
          "1385:     let operationName;",
          "1387:     if (operations) {",
          "1388:       const editor = this.getQueryEditor();",
          "1389:       if (editor && editor.hasFocus()) {",
          "",
          "[Removed Lines]",
          "1386:     const operations = this.state.operations;",
          "",
          "[Added Lines]",
          "1315:     const operations = this.props.editorContext.queryEditor?.operations;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1451:   };",
          "1453:   handleMergeQuery = () => {",
          "1455:       return;",
          "1456:     }",
          "",
          "[Removed Lines]",
          "1454:     if (!this.state.documentAST) {",
          "",
          "[Added Lines]",
          "1383:     const documentAST = this.props.editorContext.queryEditor?.documentAST;",
          "1384:     if (!documentAST) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1466:     }",
          "1468:     editor.setValue(",
          "1470:     );",
          "1471:   };",
          "1481:     this.setState(",
          "1482:       state => ({",
          "1483:         ...state,",
          "1486:         tabs: tabsStateEditQueryReducer(",
          "1487:           value,",
          "1488:           state.tabs,",
          "1490:         ),",
          "1491:       }),",
          "1492:       this.persistTabsState,",
          "1493:     );",
          "1500:   handleCopyQuery = () => {",
          "1501:     const editor = this.getQueryEditor();",
          "",
          "[Removed Lines]",
          "1469:       print(mergeAst(this.state.documentAST, this.props.schemaContext.schema)),",
          "1473:   handleEditQuery = debounce(100, (value: string) => {",
          "1474:     const queryFacts = this._updateQueryFacts(",
          "1475:       value,",
          "1476:       this.state.operationName,",
          "1477:       this.state.operations,",
          "1478:       this.props.schemaContext.schema,",
          "1479:     );",
          "1484:         query: value,",
          "1485:         ...queryFacts,",
          "1489:           queryFacts?.operationName,",
          "1494:     this.props.storageContext?.set('query', value);",
          "1495:     if (this.props.onEditQuery) {",
          "1496:       return this.props.onEditQuery(value, queryFacts?.documentAST);",
          "1497:     }",
          "1498:   });",
          "",
          "[Added Lines]",
          "1399:       print(mergeAst(documentAST, this.props.schemaContext.schema)),",
          "1403:   handleEditQuery = (value: string) => {",
          "1410:           this.props.editorContext.queryEditor?.operationName ?? undefined,",
          "1415:     this.props.onEditQuery?.(",
          "1416:       value,",
          "1417:       this.props.editorContext.queryEditor?.documentAST ?? undefined,",
          "1418:     );",
          "1419:   };",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1512:     }",
          "1513:   };",
          "1547:   handleEditVariables = (value: string) => {",
          "1548:     this.setState(",
          "1549:       state => ({",
          "",
          "[Removed Lines]",
          "1515:   private _updateQueryFacts = (",
          "1516:     query: string,",
          "1517:     operationName?: string,",
          "1518:     prevOperations?: OperationDefinitionNode[],",
          "1519:     schema?: GraphQLSchema | null,",
          "1520:   ) => {",
          "1521:     const queryFacts = getOperationFacts(schema, query);",
          "1522:     if (queryFacts) {",
          "1524:       const updatedOperationName = getSelectedOperationName(",
          "1525:         prevOperations,",
          "1526:         operationName,",
          "1527:         queryFacts.operations,",
          "1528:       );",
          "1531:       const onEditOperationName = this.props.onEditOperationName;",
          "1532:       if (",
          "1533:         onEditOperationName &&",
          "1534:         updatedOperationName &&",
          "1535:         operationName !== updatedOperationName",
          "1536:       ) {",
          "1537:         onEditOperationName(updatedOperationName);",
          "1538:       }",
          "1540:       return {",
          "1541:         operationName: updatedOperationName,",
          "1542:         ...queryFacts,",
          "1543:       };",
          "1544:     }",
          "1545:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1552:       }),",
          "1553:       this.persistTabsState,",
          "1554:     );",
          "1556:     if (this.props.onEditVariables) {",
          "1557:       this.props.onEditVariables(value);",
          "1558:     }",
          "",
          "[Removed Lines]",
          "1555:     debounce(500, () => this.props.storageContext?.set('variables', value))();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1566:       }),",
          "1567:       this.persistTabsState,",
          "1568:     );",
          "1571:     if (this.props.onEditHeaders) {",
          "1572:       this.props.onEditHeaders(value);",
          "1573:     }",
          "1574:   };",
          "1583:   handleHintInformationRender = (elem: HTMLDivElement) => {",
          "1584:     elem.addEventListener('click', this._onClickHintInformation);",
          "",
          "[Removed Lines]",
          "1569:     this.props.shouldPersistHeaders &&",
          "1570:       debounce(500, () => this.props.storageContext?.set('headers', value))();",
          "1576:   handleEditOperationName = (operationName: string) => {",
          "1577:     const onEditOperationName = this.props.onEditOperationName;",
          "1578:     if (onEditOperationName) {",
          "1579:       onEditOperationName(operationName);",
          "1580:     }",
          "1581:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1642:     operationName,",
          "1643:   }: QueryStoreItem) => {",
          "1644:     if (query) {",
          "1646:     }",
          "1647:     if (variables) {",
          "1648:       setVariables(this.props, variables);",
          "",
          "[Removed Lines]",
          "1645:       this.handleEditQuery(query);",
          "",
          "[Added Lines]",
          "1524:       setQuery(this.props, query);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1651:       setHeaders(this.props, headers);",
          "1652:     }",
          "1653:     if (operationName) {",
          "1655:     }",
          "1656:   };",
          "",
          "[Removed Lines]",
          "1654:       this.handleEditOperationName(operationName);",
          "",
          "[Added Lines]",
          "1533:       this.props.onEditOperationName?.(operationName);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2046:   state: GraphiQLState,",
          "2047:   props: GraphiQLWithContextProps,",
          "2048: ): GraphiQLState {",
          "2049:   const variables = getVariables(props);",
          "2050:   const headers = getHeaders(props);",
          "2052:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "2053:   const tabs = state.tabs.tabs.map((currentTab, tabIndex) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928:   const query = getQuery(props);",
          "1931:   const operationName = getOperationName(props);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2058:     return {",
          "2059:       ...currentTab,",
          "2061:       variables,",
          "2063:       headers,",
          "2064:       response: state.response,",
          "2065:       hash: idFromTabContents({",
          "2067:         variables,",
          "2068:         headers,",
          "2069:       }),",
          "",
          "[Removed Lines]",
          "2060:       query: state.query,",
          "2062:       operationName: state.operationName,",
          "2066:         query: state.query,",
          "",
          "[Added Lines]",
          "1941:       query,",
          "1943:       operationName,",
          "1947:         query,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2073:   const newActiveTab = state.tabs.tabs[index];",
          "2082:   return {",
          "2083:     ...state,",
          "2086:     response: newActiveTab.response,",
          "2087:     tabs: { ...state.tabs, tabs, activeTabIndex: index },",
          "2088:   };",
          "",
          "[Removed Lines]",
          "2075:   if (typeof newActiveTab.variables !== 'undefined') {",
          "2076:     setVariables(props, newActiveTab.variables);",
          "2077:   }",
          "2078:   if (typeof newActiveTab.headers !== 'undefined') {",
          "2079:     setHeaders(props, newActiveTab.headers);",
          "2080:   }",
          "2084:     query: newActiveTab.query,",
          "2085:     operationName: newActiveTab.operationName,",
          "",
          "[Added Lines]",
          "1956:   setQuery(props, newActiveTab.query || '');",
          "1957:   setVariables(props, newActiveTab.variables || '');",
          "1958:   setHeaders(props, newActiveTab.headers || '');",
          "1959:   setOperationName(props, newActiveTab.operationName);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2101:     tabs: state.tabs.tabs.filter((_tab, i) => index !== i),",
          "2102:   };",
          "2103:   const activeTab = newTabsState.tabs[newActiveTabIndex];",
          "2110:   return {",
          "2111:     ...state,",
          "2114:     response: activeTab.response,",
          "2115:     tabs: newTabsState,",
          "2116:   };",
          "",
          "[Removed Lines]",
          "2104:   if (typeof activeTab.variables !== 'undefined') {",
          "2105:     setVariables(props, activeTab.variables);",
          "2106:   }",
          "2107:   if (typeof activeTab.headers !== 'undefined') {",
          "2108:     setHeaders(props, activeTab.headers);",
          "2109:   }",
          "2112:     query: activeTab.query,",
          "2113:     operationName: activeTab.operationName,",
          "",
          "[Added Lines]",
          "1981:   setQuery(props, activeTab.query || '');",
          "1982:   setVariables(props, activeTab.variables || '');",
          "1983:   setHeaders(props, activeTab.headers || '');",
          "1984:   setOperationName(props, activeTab.operationName);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2120:   state: GraphiQLState,",
          "2121:   props: GraphiQLWithContextProps,",
          "2122: ): GraphiQLState {",
          "2123:   const variables = getVariables(props);",
          "2124:   const headers = getHeaders(props);",
          "2126:   const oldActiveTabIndex = state.tabs.activeTabIndex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1996:   const query = getQuery(props);",
          "1999:   const operationName = getOperationName(props);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2148:     return {",
          "2149:       ...tab,",
          "2150:       headers,",
          "2151:       variables,",
          "2154:       response: state.response,",
          "2155:     };",
          "2156:   });",
          "2165:   return {",
          "2166:     ...state,",
          "2169:     response: newTab.response,",
          "2170:     tabs: {",
          "2171:       ...state.tabs,",
          "",
          "[Removed Lines]",
          "2152:       query: state.query,",
          "2153:       operationName: state.operationName,",
          "2158:   if (typeof newTab.variables !== 'undefined') {",
          "2159:     setVariables(props, newTab.variables);",
          "2160:   }",
          "2161:   if (typeof newTab.headers !== 'undefined') {",
          "2162:     setHeaders(props, newTab.headers);",
          "2163:   }",
          "2167:     query: newTab.query,",
          "2168:     operationName: newTab.operationName,",
          "",
          "[Added Lines]",
          "2025:       query,",
          "2028:       operationName,",
          "2033:   setQuery(props, newTab.query || '');",
          "2034:   setVariables(props, newTab.variables || '');",
          "2035:   setHeaders(props, newTab.headers || '');",
          "2036:   setOperationName(props, newTab.operationName);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2175:   };",
          "2176: }",
          "2178: function getVariables(props: GraphiQLWithContextProps) {",
          "2179:   return props.editorContext.variableEditor?.getValue();",
          "2180: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2049: function getQuery(props: GraphiQLWithContextProps) {",
          "2050:   return props.editorContext.queryEditor?.getValue();",
          "2051: }",
          "2053: function setQuery(props: GraphiQLWithContextProps, value: string) {",
          "2054:   props.editorContext.queryEditor?.setValue(value);",
          "2055: }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2190: function setHeaders(props: GraphiQLWithContextProps, value: string) {",
          "2191:   props.editorContext.headerEditor?.setValue(value);",
          "2192: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2073: function getOperationName(props: GraphiQLWithContextProps) {",
          "2074:   return props.editorContext.queryEditor?.operationName ?? undefined;",
          "2075: }",
          "2077: function setOperationName(",
          "2078:   props: GraphiQLWithContextProps,",
          "2079:   value: string | null | undefined,",
          "2080: ) {",
          "2081:   if (props.editorContext.queryEditor) {",
          "2082:     props.editorContext.queryEditor.operationName = value ?? null;",
          "2083:   }",
          "2084: }",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx||packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx -> packages/graphiql/src/components/__tests__/GraphiQL.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import React from 'react';",
          "10: import { render, fireEvent } from '@testing-library/react';",
          "11: import { GraphiQL, Fetcher } from '../GraphiQL';",
          "14: import {",
          "15:   mockQuery1,",
          "16:   mockVariables1,",
          "",
          "[Removed Lines]",
          "12: import { getMockStorage } from './helpers/storage';",
          "13: import { codeMirrorModules } from './helpers/codeMirror';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   mockHeaders2,",
          "23: } from './fixtures';",
          "28: const simpleIntrospection = {",
          "29:   data: {",
          "",
          "[Removed Lines]",
          "25: codeMirrorModules.forEach(m => jest.mock(m, () => {}));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: const sleep = (delay: number = 600) =>",
          "52:   new Promise(res => setTimeout(res, delay));",
          "58: beforeEach(() => {",
          "59:   window.localStorage.clear();",
          "60: });",
          "",
          "[Removed Lines]",
          "54: Object.defineProperty(window, 'localStorage', {",
          "55:   value: getMockStorage(),",
          "56: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/helpers/codeMirror.js||packages/graphiql/src/components/__tests__/helpers/codeMirror.js": [
          "File: packages/graphiql/src/components/__tests__/helpers/codeMirror.js -> packages/graphiql/src/components/__tests__/helpers/codeMirror.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/helpers/storage.js||packages/graphiql/src/components/__tests__/helpers/storage.js": [
          "File: packages/graphiql/src/components/__tests__/helpers/storage.js -> packages/graphiql/src/components/__tests__/helpers/storage.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
      "candidate_info": {
        "commit_hash": "6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/6ff0bab978d63778b8ab4ba6e79fceb36c2db87f",
        "files": [
          ".changeset/famous-dragons-confess.md",
          ".changeset/quick-pumas-fly.md",
          "packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx"
        ],
        "message": "remove methods from `SchemaContext` meant for internal use (#2652)\n\n* remove methods from `SchemaContext` meant for internal use\n\n* make validation errors non-nullable",
        "before_after_code_files": [
          "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx",
          "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-react/src/editor/response-editor.tsx||packages/graphiql-react/src/editor/response-editor.tsx": [
          "File: packages/graphiql-react/src/editor/response-editor.tsx -> packages/graphiql-react/src/editor/response-editor.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     if (fetchError) {",
          "129:       responseEditor?.setValue(fetchError);",
          "130:     }",
          "132:       responseEditor?.setValue(formatError(validationErrors));",
          "133:     }",
          "134:   }, [responseEditor, fetchError, validationErrors]);",
          "",
          "[Removed Lines]",
          "131:     if (validationErrors) {",
          "",
          "[Added Lines]",
          "131:     if (validationErrors.length > 0) {",
          "",
          "---------------"
        ],
        "packages/graphiql-react/src/schema.tsx||packages/graphiql-react/src/schema.tsx": [
          "File: packages/graphiql-react/src/schema.tsx -> packages/graphiql-react/src/schema.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   validateSchema,",
          "17: } from 'graphql';",
          "18: import {",
          "20:   ReactNode,",
          "22:   useCallback,",
          "23:   useEffect,",
          "24:   useMemo,",
          "",
          "[Removed Lines]",
          "19:   Dispatch,",
          "21:   SetStateAction,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   introspect(): void;",
          "45:   isFetching: boolean;",
          "46:   schema: MaybeGraphQLSchema;",
          "50: };",
          "52: export const SchemaContext =",
          "",
          "[Removed Lines]",
          "47:   setFetchError: Dispatch<SetStateAction<string | null>>;",
          "48:   setSchema: Dispatch<SetStateAction<MaybeGraphQLSchema>>;",
          "49:   validationErrors: readonly GraphQLError[] | null;",
          "",
          "[Added Lines]",
          "45:   validationErrors: readonly GraphQLError[];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:   const validationErrors = useMemo(() => {",
          "273:     if (!schema || props.dangerouslyAssumeSchemaIsValid) {",
          "275:     }",
          "278:   }, [schema, props.dangerouslyAssumeSchemaIsValid]);",
          "",
          "[Removed Lines]",
          "274:       return null;",
          "276:     const errors = validateSchema(schema);",
          "277:     return errors.length > 0 ? errors : null;",
          "",
          "[Added Lines]",
          "270:       return [];",
          "272:     return validateSchema(schema);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:       introspect,",
          "287:       isFetching,",
          "288:       schema,",
          "291:       validationErrors,",
          "292:     }),",
          "293:     [fetchError, introspect, isFetching, schema, validationErrors],",
          "",
          "[Removed Lines]",
          "289:       setFetchError,",
          "290:       setSchema,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   let content: ReactNode = null;",
          "53:   if (fetchError) {",
          "54:     content = <div className=\"error-container\">Error fetching schema</div>;",
          "56:     content = (",
          "57:       <div className=\"error-container\">",
          "58:         Schema is invalid: {validationErrors[0].message}",
          "",
          "[Removed Lines]",
          "55:   } else if (validationErrors) {",
          "",
          "[Added Lines]",
          "55:   } else if (validationErrors.length > 0) {",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx||packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx": [
          "File: packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx -> packages/graphiql/src/components/DocExplorer/__tests__/TypeDoc.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         introspect() {},",
          "32:         isFetching: false,",
          "33:         schema: ExampleSchema,",
          "37:       }}",
          "38:     >",
          "39:       <ExplorerContext.Provider",
          "",
          "[Removed Lines]",
          "34:         setFetchError() {},",
          "35:         setSchema() {},",
          "36:         validationErrors: null,",
          "",
          "[Added Lines]",
          "34:         validationErrors: [],",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx||packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx": [
          "File: packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx -> packages/graphiql/src/components/__tests__/DocExplorer.spec.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   introspect() {},",
          "21:   isFetching: false,",
          "22:   schema: ExampleSchema,",
          "26: };",
          "28: function DocExplorerWithContext(",
          "",
          "[Removed Lines]",
          "23:   setFetchError() {},",
          "24:   setSchema() {},",
          "25:   validationErrors: null,",
          "",
          "[Added Lines]",
          "23:   validationErrors: [],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f82bd7a931eb5fa9a33e59d417303706844c9063",
      "candidate_info": {
        "commit_hash": "f82bd7a931eb5fa9a33e59d417303706844c9063",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/f82bd7a931eb5fa9a33e59d417303706844c9063",
        "files": [
          ".changeset/cuddly-games-protect.md",
          "packages/graphql-language-service-server/README.md",
          "packages/graphql-language-service-server/package.json",
          "packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/Logger.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/.graphqlrc.yml",
          "packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "yarn.lock"
        ],
        "message": "fix: a few major bugs with SDL and remote schema in the language server (#2055)",
        "before_after_code_files": [
          "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts",
          "packages/graphql-language-service-server/src/Logger.ts||packages/graphql-language-service-server/src/Logger.ts",
          "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts",
          "packages/graphql-language-service-server/src/__tests__/Logger-test.ts||packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "yarn.lock||yarn.lock"
          ],
          "candidate": [
            "yarn.lock||yarn.lock"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphql-language-service-server/src/GraphQLCache.ts||packages/graphql-language-service-server/src/GraphQLCache.ts": [
          "File: packages/graphql-language-service-server/src/GraphQLCache.ts -> packages/graphql-language-service-server/src/GraphQLCache.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   getGraphQLConfig = (): GraphQLConfig => this._graphQLConfig;",
          "108:   getProjectForFile = (uri: string): GraphQLProjectConfig => {",
          "110:   };",
          "112:   getFragmentDependencies = async (",
          "",
          "[Removed Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(fileURLToPath(uri));",
          "",
          "[Added Lines]",
          "109:     return this._graphQLConfig.getProjectForFile(new URL(uri).pathname);",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/Logger.ts||packages/graphql-language-service-server/src/Logger.ts": [
          "File: packages/graphql-language-service-server/src/Logger.ts -> packages/graphql-language-service-server/src/Logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     const logMessage = `${timestamp} [${severity}] (pid: ${pid}) graphql-language-service-usage-logs: ${stringMessage}\\n`;",
          "73:     fs.appendFile(this._logFilePath, logMessage, _error => {});",
          "77:   }",
          "79:   _getOutputStream(severity: DiagnosticSeverity): Socket {",
          "",
          "[Removed Lines]",
          "74:     this._getOutputStream(severity).write(logMessage, err => {",
          "75:       err && console.error(err);",
          "76:     });",
          "",
          "[Added Lines]",
          "75:     if (severityKey !== SEVERITY.Hint) {",
          "76:       this._getOutputStream(severity).write(logMessage, err => {",
          "77:         err && console.error(err);",
          "78:       });",
          "79:     }",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/MessageProcessor.ts||packages/graphql-language-service-server/src/MessageProcessor.ts": [
          "File: packages/graphql-language-service-server/src/MessageProcessor.ts -> packages/graphql-language-service-server/src/MessageProcessor.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import mkdirp from 'mkdirp';",
          "11: import { readFileSync, existsSync, writeFileSync, writeFile } from 'fs';",
          "13: import * as path from 'path';",
          "14: import {",
          "15:   CachedContent,",
          "16:   Uri,",
          "",
          "[Removed Lines]",
          "12: import { fileURLToPath, pathToFileURL } from 'url';",
          "",
          "[Added Lines]",
          "12: import { pathToFileURL } from 'url';",
          "14: import glob from 'fast-glob';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:       throw new Error('GraphQL Language Server is not initialized.');",
          "192:     }",
          "195:       JSON.stringify({",
          "196:         type: 'usage',",
          "197:         messageType: 'initialize',",
          "",
          "[Removed Lines]",
          "194:     this._logger.log(",
          "",
          "[Added Lines]",
          "195:     this._logger.info(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:         ) {",
          "585:           const uri = change.uri;",
          "588:           const contents = this._parser(text, uri);",
          "590:           await this._updateFragmentDefinition(uri, contents);",
          "",
          "[Removed Lines]",
          "587:           const text = readFileSync(fileURLToPath(uri), { encoding: 'utf8' });",
          "",
          "[Added Lines]",
          "588:           const text = readFileSync(new URL(uri).pathname).toString();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:       return path.resolve(projectTmpPath);",
          "864:     }",
          "865:   }",
          "867:   async _cacheSchemaFilesForProject(project: GraphQLProjectConfig) {",
          "868:     const schema = project?.schema;",
          "869:     const config = project?.extensions?.languageService;",
          "883:       false;",
          "885:       await this._cacheConfigSchema(project);",
          "897:     }",
          "898:   }",
          "",
          "[Removed Lines]",
          "880:     const useSchemaFileDefinitions =",
          "881:       (config?.useSchemaFileDefinitions ??",
          "882:         this?._settings?.useSchemaFileDefinitions) ||",
          "884:     if (!useSchemaFileDefinitions) {",
          "886:     } else {",
          "887:       if (Array.isArray(schema)) {",
          "888:         Promise.all(",
          "889:           schema.map(async (uri: UnnormalizedTypeDefPointer) => {",
          "890:             await this._cacheSchemaFile(uri, project);",
          "891:           }),",
          "892:         );",
          "893:       } else {",
          "894:         const uri = schema.toString();",
          "895:         await this._cacheSchemaFile(uri, project);",
          "896:       }",
          "",
          "[Added Lines]",
          "874:   async _cacheSchemaPath(uri: string, project: GraphQLProjectConfig) {",
          "875:     try {",
          "876:       const files = await glob(uri);",
          "877:       if (files && files.length > 0) {",
          "878:         await Promise.all(",
          "879:           files.map(uriPath => this._cacheSchemaFile(uriPath, project)),",
          "880:         );",
          "881:       } else {",
          "882:         try {",
          "883:           this._cacheSchemaFile(uri, project);",
          "884:         } catch (err) {",
          "886:         }",
          "887:       }",
          "888:     } catch (err) {}",
          "889:   }",
          "890:   async _cacheObjectSchema(",
          "891:     pointer: { [key: string]: any },",
          "892:     project: GraphQLProjectConfig,",
          "893:   ) {",
          "894:     await Promise.all(",
          "895:       Object.keys(pointer).map(async schemaUri =>",
          "896:         this._cacheSchemaPath(schemaUri, project),",
          "897:       ),",
          "898:     );",
          "899:   }",
          "900:   async _cacheArraySchema(",
          "901:     pointers: UnnormalizedTypeDefPointer[],",
          "902:     project: GraphQLProjectConfig,",
          "903:   ) {",
          "904:     await Promise.all(",
          "905:       pointers.map(async schemaEntry => {",
          "906:         if (typeof schemaEntry === 'string') {",
          "907:           await this._cacheSchemaPath(schemaEntry, project);",
          "908:         } else if (schemaEntry) {",
          "909:           await this._cacheObjectSchema(schemaEntry, project);",
          "910:         }",
          "911:       }),",
          "912:     );",
          "913:   }",
          "932:     const cacheSchemaFileForLookup =",
          "933:       config?.cacheSchemaFileForLookup ??",
          "934:       this?._settings?.cacheSchemaFileForLookup ??",
          "936:     if (cacheSchemaFileForLookup) {",
          "938:     } else if (typeof schema === 'string') {",
          "939:       await this._cacheSchemaPath(schema, project);",
          "940:     } else if (Array.isArray(schema)) {",
          "941:       await this._cacheArraySchema(schema, project);",
          "942:     } else if (schema) {",
          "943:       await this._cacheObjectSchema(schema, project);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "995:     if (config?.projects) {",
          "996:       return Promise.all(",
          "997:         Object.keys(config.projects).map(async projectName => {",
          "999:           await this._cacheSchemaFilesForProject(project);",
          "1000:           await this._cacheDocumentFilesforProject(project);",
          "1001:         }),",
          "",
          "[Removed Lines]",
          "998:           const project = await config.getProject(projectName);",
          "",
          "[Added Lines]",
          "1045:           const project = config.getProject(projectName);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057:           contents,",
          "1058:         });",
          "1059:       }",
          "1065:     }",
          "1067:   }",
          "1068: }",
          "",
          "[Removed Lines]",
          "1060:     } else if (textDocument?.version) {",
          "1061:       return this._textDocumentCache.set(uri, {",
          "1062:         version: textDocument.version,",
          "1063:         contents,",
          "1064:       });",
          "1066:     return null;",
          "",
          "[Added Lines]",
          "1108:     return this._textDocumentCache.set(uri, {",
          "1109:       version: textDocument.version ?? 0,",
          "1110:       contents,",
          "1111:     });",
          "",
          "---------------"
        ],
        "packages/graphql-language-service-server/src/__tests__/Logger-test.ts||packages/graphql-language-service-server/src/__tests__/Logger-test.ts": [
          "File: packages/graphql-language-service-server/src/__tests__/Logger-test.ts -> packages/graphql-language-service-server/src/__tests__/Logger-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   it('logs to stdout', () => {",
          "32:     const logger = new Logger(tmpdir());",
          "35:     expect(mockedStdoutWrite.mock.calls.length).toBe(1);",
          "36:     expect(mockedStdoutWrite.mock.calls[0][0]).toContain('log test');",
          "",
          "[Removed Lines]",
          "33:     logger.log('log test');",
          "",
          "[Added Lines]",
          "33:     logger.info('log test');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     const logger = new Logger(tmpdir(), stderrOnly);",
          "52:     logger.info('info test');",
          "53:     logger.warn('warn test');",
          "54:     logger.log('log test');",
          "55:     logger.error('error test');",
          "57:     expect(mockedStdoutWrite.mock.calls.length).toBe(0);",
          "59:     expect(mockedStderrWrite.mock.calls[0][0]).toContain('info test');",
          "60:     expect(mockedStderrWrite.mock.calls[1][0]).toContain('warn test');",
          "63:   });",
          "64: });",
          "",
          "[Removed Lines]",
          "58:     expect(mockedStderrWrite.mock.calls.length).toBe(4);",
          "61:     expect(mockedStderrWrite.mock.calls[2][0]).toContain('log test');",
          "62:     expect(mockedStderrWrite.mock.calls[3][0]).toContain('error test');",
          "",
          "[Added Lines]",
          "59:     expect(mockedStderrWrite.mock.calls.length).toBe(3);",
          "62:     expect(mockedStderrWrite.mock.calls[2][0]).toContain('error test');",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3270:     tslib \"^2\"",
          "3272: \"@graphiql/toolkit@file:packages/graphiql-toolkit\":",
          "3274:   dependencies:",
          "3275:     \"@n1ru4l/push-pull-async-iterable-iterator\" \"^3.1.0\"",
          "3276:     meros \"^1.1.4\"",
          "",
          "[Removed Lines]",
          "3273:   version \"0.4.1\"",
          "",
          "[Added Lines]",
          "3273:   version \"0.4.2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10014:     micromatch \"^4.0.2\"",
          "10015:     picomatch \"^2.2.1\"",
          "10017: fast-json-stable-stringify@2.x, fast-json-stable-stringify@^2.0.0:",
          "10018:   version \"2.1.0\"",
          "10019:   resolved \"https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10017: fast-glob@^3.2.7:",
          "10018:   version \"3.2.7\"",
          "10019:   resolved \"https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.2.7.tgz#fd6cb7a2d7e9aa7a7846111e85a196d6b2f766a1\"",
          "10020:   integrity sha512-rYGMRwip6lUMvYD3BTScMwT1HtAs2d71SMv66Vrxs0IekGZEjhM0pcMfjQPnknBt2zeCwQMEupiN02ZP4DiT1Q==",
          "10021:   dependencies:",
          "10022:     \"@nodelib/fs.stat\" \"^2.0.2\"",
          "10023:     \"@nodelib/fs.walk\" \"^1.2.3\"",
          "10024:     glob-parent \"^5.1.2\"",
          "10025:     merge2 \"^1.3.0\"",
          "10026:     micromatch \"^4.0.4\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10744:   dependencies:",
          "10745:     is-glob \"^4.0.1\"",
          "10748:   version \"5.1.2\"",
          "10749:   resolved \"https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4\"",
          "10750:   integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
          "",
          "[Removed Lines]",
          "10747: glob-parent@^5.1.0:",
          "",
          "[Added Lines]",
          "10758: glob-parent@^5.1.0, glob-parent@^5.1.2:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10992:   integrity sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
          "10994: \"graphiql@file:packages/graphiql\":",
          "10996:   dependencies:",
          "10998:     codemirror \"^5.58.2\"",
          "11000:     copy-to-clipboard \"^3.2.0\"",
          "11001:     dset \"^3.1.0\"",
          "11002:     entities \"^2.0.0\"",
          "11003:     escape-html \"^1.0.3\"",
          "11005:     markdown-it \"^12.2.0\"",
          "11007: graphql-config@^4.1.0:",
          "",
          "[Removed Lines]",
          "10995:   version \"1.5.2\"",
          "10997:     \"@graphiql/toolkit\" \"^0.4.1\"",
          "10999:     codemirror-graphql \"^1.2.0\"",
          "11004:     graphql-language-service \"^3.2.1\"",
          "",
          "[Added Lines]",
          "11006:   version \"1.5.5\"",
          "11008:     \"@graphiql/toolkit\" \"^0.4.2\"",
          "11010:     codemirror-graphql \"^1.2.3\"",
          "11015:     graphql-language-service \"^3.2.3\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e823697b5d47565671d5919be84f69919e70977f",
      "candidate_info": {
        "commit_hash": "e823697b5d47565671d5919be84f69919e70977f",
        "repo": "graphql/graphiql",
        "commit_url": "https://github.com/graphql/graphiql/commit/e823697b5d47565671d5919be84f69919e70977f",
        "files": [
          ".changeset/brave-dots-guess.md",
          "packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/ToolbarMenu.tsx",
          "packages/graphiql/src/components/ToolbarSelect.tsx"
        ],
        "message": "fix(types): components that accept children should declare this (#2387)",
        "before_after_code_files": [
          "packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx||packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
          "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx",
          "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx",
          "packages/graphiql/src/components/ToolbarMenu.tsx||packages/graphiql/src/components/ToolbarMenu.tsx",
          "packages/graphiql/src/components/ToolbarSelect.tsx||packages/graphiql/src/components/ToolbarSelect.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ],
          "candidate": [
            "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx",
            "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx"
          ]
        }
      },
      "candidate_diff": {
        "packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx||packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx": [
          "File: packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx -> packages/graphiql-2-rfc-context/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, OperationDefinitionNode, GraphQLType } from 'graphql';",
          "11: import type { SchemaConfig } from 'graphql-language-service';",
          "",
          "[Removed Lines]",
          "8: import React, { ComponentType, PropsWithChildren } from 'react';",
          "",
          "[Added Lines]",
          "8: import React, { ComponentType, PropsWithChildren, ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   variablesEditorOptions?: monaco.editor.IStandaloneEditorConstructionOptions;",
          "95:   operationEditorOptions?: monaco.editor.IStandaloneEditorConstructionOptions;",
          "96:   resultsEditorOptions?: monaco.editor.IStandaloneEditorConstructionOptions;",
          "97: } & Partial<Formatters>;",
          "99: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   children?: ReactNode;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/DocExplorer.tsx||packages/graphiql/src/components/DocExplorer.tsx": [
          "File: packages/graphiql/src/components/DocExplorer.tsx -> packages/graphiql/src/components/DocExplorer.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { GraphQLSchema, isType, GraphQLNamedType, GraphQLError } from 'graphql';",
          "10: import { FieldType } from './DocExplorer/types';",
          "",
          "[Removed Lines]",
          "8: import React from 'react';",
          "",
          "[Added Lines]",
          "8: import React, { ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: type DocExplorerProps = {",
          "31:   schema?: GraphQLSchema | null;",
          "32:   schemaErrors?: readonly GraphQLError[];",
          "33: };",
          "35: type DocExplorerState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   children?: ReactNode;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/GraphiQL.tsx||packages/graphiql/src/components/GraphiQL.tsx": [
          "File: packages/graphiql/src/components/GraphiQL.tsx -> packages/graphiql/src/components/GraphiQL.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   MouseEventHandler,",
          "12:   Component,",
          "13:   FunctionComponent,",
          "14: } from 'react';",
          "15: import {",
          "16:   buildClientSchema,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   ReactNode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:         onTabChange?: (tab: TabsState) => void;",
          "311:       };",
          "312: };",
          "314: export type GraphiQLState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:   children?: ReactNode;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/QueryHistory.tsx||packages/graphiql/src/components/QueryHistory.tsx": [
          "File: packages/graphiql/src/components/QueryHistory.tsx -> packages/graphiql/src/components/QueryHistory.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { QueryStoreItem } from '../utility/QueryStore';",
          "10: import HistoryQuery, {",
          "11:   HandleEditLabelFn,",
          "",
          "[Removed Lines]",
          "8: import React from 'react';",
          "",
          "[Added Lines]",
          "8: import React, { ReactNode } from 'react';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:   onSelectQuery: HandleSelectQueryFn;",
          "25:   storage: StorageAPI;",
          "26:   maxHistoryLength: number;",
          "27: };",
          "29: type QueryHistoryState = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:   children?: ReactNode;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ToolbarMenu.tsx||packages/graphiql/src/components/ToolbarMenu.tsx": [
          "File: packages/graphiql/src/components/ToolbarMenu.tsx -> packages/graphiql/src/components/ToolbarMenu.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: type ToolbarMenuProps = {",
          "11:   title: string;",
          "12:   label: string;",
          "13: };",
          "15: type ToolbarMenuState = {",
          "",
          "[Removed Lines]",
          "8: import React, { FC, MouseEventHandler } from 'react';",
          "",
          "[Added Lines]",
          "8: import React, { FC, MouseEventHandler, ReactNode } from 'react';",
          "13:   children?: ReactNode;",
          "",
          "---------------"
        ],
        "packages/graphiql/src/components/ToolbarSelect.tsx||packages/graphiql/src/components/ToolbarSelect.tsx": [
          "File: packages/graphiql/src/components/ToolbarSelect.tsx -> packages/graphiql/src/components/ToolbarSelect.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: type ToolbarSelectProps = {",
          "11:   title?: string;",
          "12:   label?: string;",
          "13:   onSelect?: (selection: string) => void;",
          "14: };",
          "16: type ToolbarSelectState = {",
          "",
          "[Removed Lines]",
          "8: import React, { MouseEventHandler } from 'react';",
          "",
          "[Added Lines]",
          "8: import React, { MouseEventHandler, ReactNode } from 'react';",
          "14:   children?: ReactNode;",
          "",
          "---------------"
        ]
      }
    }
  ]
}