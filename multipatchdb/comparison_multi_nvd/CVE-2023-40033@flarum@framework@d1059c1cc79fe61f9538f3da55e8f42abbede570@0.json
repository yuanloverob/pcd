{
  "cve_id": "CVE-2023-40033",
  "cve_desc": "Flarum is an open source forum software. Flarum is affected by a vulnerability that allows an attacker to conduct a Blind Server-Side Request Forgery (SSRF) attack or disclose any file on the server, even with a basic user account on any Flarum forum. By uploading a file containing a URL and spoofing the MIME type, an attacker can manipulate the application to execute unintended actions. The vulnerability is due to the behavior of the `intervention/image` package, which attempts to interpret the supplied file contents as a URL, which then fetches its contents. This allows an attacker to exploit the vulnerability to perform SSRF attacks, disclose local file contents, or conduct a blind oracle attack. This has been patched in Flarum version 1.8.0. Users are advised to upgrade. Users unable to upgrade may disable PHP's `allow_url_fopen` which will prevent the fetching of external files via URLs as a temporary workaround for the SSRF aspect of the vulnerability.",
  "repo": "flarum/framework",
  "patch_hash": "d1059c1cc79fe61f9538f3da55e8f42abbede570",
  "patch_info": {
    "commit_hash": "d1059c1cc79fe61f9538f3da55e8f42abbede570",
    "repo": "flarum/framework",
    "commit_url": "https://github.com/flarum/framework/commit/d1059c1cc79fe61f9538f3da55e8f42abbede570",
    "files": [
      "framework/core/js/src/forum/components/AvatarEditor.js",
      "framework/core/src/Api/Controller/UploadFaviconController.php",
      "framework/core/src/Api/Controller/UploadLogoController.php",
      "framework/core/src/User/AvatarValidator.php",
      "framework/core/src/User/Command/UploadAvatarHandler.php"
    ],
    "message": "fix: improve avatar upload functionality\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>",
    "before_after_code_files": [
      "framework/core/js/src/forum/components/AvatarEditor.js||framework/core/js/src/forum/components/AvatarEditor.js",
      "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php",
      "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php",
      "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php",
      "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php"
    ]
  },
  "patch_diff": {
    "framework/core/js/src/forum/components/AvatarEditor.js||framework/core/js/src/forum/components/AvatarEditor.js": [
      "File: framework/core/js/src/forum/components/AvatarEditor.js -> framework/core/js/src/forum/components/AvatarEditor.js"
    ],
    "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php": [
      "File: framework/core/src/Api/Controller/UploadFaviconController.php -> framework/core/src/Api/Controller/UploadFaviconController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:             ]);",
      "63:         }",
      "66:             $constraint->aspectRatio();",
      "67:             $constraint->upsize();",
      "68:         })->encode('png');",
      "",
      "[Removed Lines]",
      "65:         $encodedImage = $this->imageManager->make($file->getStream())->resize(64, 64, function ($constraint) {",
      "",
      "[Added Lines]",
      "65:         $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->resize(64, 64, function ($constraint) {",
      "",
      "---------------"
    ],
    "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php": [
      "File: framework/core/src/Api/Controller/UploadLogoController.php -> framework/core/src/Api/Controller/UploadLogoController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     protected function makeImage(UploadedFileInterface $file): Image",
      "40:     {",
      "42:             $constraint->upsize();",
      "43:         })->encode('png');",
      "",
      "[Removed Lines]",
      "41:         $encodedImage = $this->imageManager->make($file->getStream())->heighten(60, function ($constraint) {",
      "",
      "[Added Lines]",
      "41:         $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->heighten(60, function ($constraint) {",
      "",
      "---------------"
    ],
    "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php": [
      "File: framework/core/src/User/AvatarValidator.php -> framework/core/src/User/AvatarValidator.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:         }",
      "89:         try {",
      "91:         } catch (NotReadableException $_e) {",
      "92:             $this->raise('image');",
      "93:         }",
      "",
      "[Removed Lines]",
      "90:             $this->imageManager->make($file->getStream());",
      "",
      "[Added Lines]",
      "90:             $this->imageManager->make($file->getStream()->getMetadata('uri'));",
      "",
      "---------------"
    ],
    "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php": [
      "File: framework/core/src/User/Command/UploadAvatarHandler.php -> framework/core/src/User/Command/UploadAvatarHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:         $this->validator->assertValid(['avatar' => $command->file]);",
      "79:         $this->events->dispatch(",
      "80:             new AvatarSaving($user, $actor, $image)",
      "",
      "[Removed Lines]",
      "77:         $image = $this->imageManager->make($command->file->getStream());",
      "",
      "[Added Lines]",
      "77:         $image = $this->imageManager->make($command->file->getStream()->getMetadata('uri'));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3350543af11666973651d0eb70176ddcfb8283d",
      "candidate_info": {
        "commit_hash": "e3350543af11666973651d0eb70176ddcfb8283d",
        "repo": "flarum/framework",
        "commit_url": "https://github.com/flarum/framework/commit/e3350543af11666973651d0eb70176ddcfb8283d",
        "files": [
          "composer.json",
          "framework/core/composer.json",
          "framework/core/src/Api/Controller/UploadFaviconController.php",
          "framework/core/src/Api/Controller/UploadImageController.php",
          "framework/core/src/Api/Controller/UploadLogoController.php",
          "framework/core/src/Filesystem/FilesystemServiceProvider.php",
          "framework/core/src/Foundation/InstalledSite.php",
          "framework/core/src/Image/ImageServiceProvider.php",
          "framework/core/src/User/AvatarUploader.php",
          "framework/core/src/User/AvatarValidator.php",
          "framework/core/src/User/Command/RegisterUserHandler.php",
          "framework/core/src/User/Command/UploadAvatarHandler.php",
          "framework/core/src/User/Event/AvatarSaving.php",
          "framework/core/tests/unit/User/AvatarUploaderTest.php"
        ],
        "message": "feat: upgrade `intervention/image` to 3.2 (#3947)\n\n* chore: create standalone imageprovider\n\n* chore: upgrade intervention to v3\n\n* Apply fixes from StyleCI\n\n* use new static instatiation\n\n* Revert \"Apply fixes from StyleCI\"\n\nThis reverts commit 096b4d9a79fa41c948a7572cf65316ebc6b07d36.\n\n* get avatar from remote\n\n* Apply fixes from StyleCI\n\n* fix: incorrect gid exception namespace\n\n* fix test\n\n* remove debug code\n\n---------\n\nCo-authored-by: StyleCI Bot <bot@styleci.io>",
        "before_after_code_files": [
          "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php",
          "framework/core/src/Api/Controller/UploadImageController.php||framework/core/src/Api/Controller/UploadImageController.php",
          "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php",
          "framework/core/src/Filesystem/FilesystemServiceProvider.php||framework/core/src/Filesystem/FilesystemServiceProvider.php",
          "framework/core/src/Foundation/InstalledSite.php||framework/core/src/Foundation/InstalledSite.php",
          "framework/core/src/Image/ImageServiceProvider.php||framework/core/src/Image/ImageServiceProvider.php",
          "framework/core/src/User/AvatarUploader.php||framework/core/src/User/AvatarUploader.php",
          "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php",
          "framework/core/src/User/Command/RegisterUserHandler.php||framework/core/src/User/Command/RegisterUserHandler.php",
          "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php",
          "framework/core/src/User/Event/AvatarSaving.php||framework/core/src/User/Event/AvatarSaving.php",
          "framework/core/tests/unit/User/AvatarUploaderTest.php||framework/core/tests/unit/User/AvatarUploaderTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php",
            "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php",
            "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php",
            "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php"
          ],
          "candidate": [
            "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php",
            "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php",
            "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php",
            "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php"
          ]
        }
      },
      "candidate_diff": {
        "framework/core/src/Api/Controller/UploadFaviconController.php||framework/core/src/Api/Controller/UploadFaviconController.php": [
          "File: framework/core/src/Api/Controller/UploadFaviconController.php -> framework/core/src/Api/Controller/UploadFaviconController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use Flarum\\Locale\\TranslatorInterface;",
          "14: use Flarum\\Settings\\SettingsRepositoryInterface;",
          "15: use Illuminate\\Contracts\\Filesystem\\Factory;",
          "17: use Intervention\\Image\\ImageManager;",
          "18: use Psr\\Http\\Message\\UploadedFileInterface;",
          "20: class UploadFaviconController extends UploadImageController",
          "",
          "[Removed Lines]",
          "16: use Intervention\\Image\\Image;",
          "",
          "[Added Lines]",
          "17: use Intervention\\Image\\Interfaces\\EncodedImageInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:         parent::__construct($settings, $filesystemFactory);",
          "32:     }",
          "35:     {",
          "36:         $this->fileExtension = pathinfo($file->getClientFilename(), PATHINFO_EXTENSION);",
          "",
          "[Removed Lines]",
          "34:     protected function makeImage(UploadedFileInterface $file): Image",
          "",
          "[Added Lines]",
          "34:     protected function makeImage(UploadedFileInterface $file): EncodedImageInterface",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:             ]);",
          "46:         }",
          "53:         $this->fileExtension = 'png';",
          "",
          "[Removed Lines]",
          "48:         $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->resize(64, 64, function ($constraint) {",
          "49:             $constraint->aspectRatio();",
          "50:             $constraint->upsize();",
          "51:         })->encode('png');",
          "",
          "[Added Lines]",
          "48:         $encodedImage = $this->imageManager->read($file->getStream()->getMetadata('uri'))",
          "49:             ->scale(64, 64)",
          "50:             ->toPng();",
          "",
          "---------------"
        ],
        "framework/core/src/Api/Controller/UploadImageController.php||framework/core/src/Api/Controller/UploadImageController.php": [
          "File: framework/core/src/Api/Controller/UploadImageController.php -> framework/core/src/Api/Controller/UploadImageController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: use Illuminate\\Contracts\\Filesystem\\Filesystem;",
          "16: use Illuminate\\Support\\Arr;",
          "17: use Illuminate\\Support\\Str;",
          "19: use Psr\\Http\\Message\\ServerRequestInterface;",
          "20: use Psr\\Http\\Message\\UploadedFileInterface;",
          "21: use Tobscure\\JsonApi\\Document;",
          "",
          "[Removed Lines]",
          "18: use Intervention\\Image\\Image;",
          "",
          "[Added Lines]",
          "18: use Intervention\\Image\\Interfaces\\EncodedImageInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         return parent::data($request, $document);",
          "56:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "58:     abstract protected function makeImage(UploadedFileInterface $file): Image;",
          "",
          "[Added Lines]",
          "58:     abstract protected function makeImage(UploadedFileInterface $file): EncodedImageInterface;",
          "",
          "---------------"
        ],
        "framework/core/src/Api/Controller/UploadLogoController.php||framework/core/src/Api/Controller/UploadLogoController.php": [
          "File: framework/core/src/Api/Controller/UploadLogoController.php -> framework/core/src/Api/Controller/UploadLogoController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use Flarum\\Settings\\SettingsRepositoryInterface;",
          "13: use Illuminate\\Contracts\\Filesystem\\Factory;",
          "15: use Intervention\\Image\\ImageManager;",
          "16: use Psr\\Http\\Message\\UploadedFileInterface;",
          "18: class UploadLogoController extends UploadImageController",
          "",
          "[Removed Lines]",
          "14: use Intervention\\Image\\Image;",
          "",
          "[Added Lines]",
          "15: use Intervention\\Image\\Interfaces\\EncodedImageInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         parent::__construct($settings, $filesystemFactory);",
          "29:     }",
          "32:     {",
          "37:         return $encodedImage;",
          "38:     }",
          "",
          "[Removed Lines]",
          "31:     protected function makeImage(UploadedFileInterface $file): Image",
          "33:         $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->heighten(60, function ($constraint) {",
          "34:             $constraint->upsize();",
          "35:         })->encode('png');",
          "",
          "[Added Lines]",
          "31:     protected function makeImage(UploadedFileInterface $file): EncodedImageInterface",
          "33:         $encodedImage = $this->imageManager->read($file->getStream()->getMetadata('uri'))",
          "34:             ->scale(height: 60)",
          "35:             ->toPng();",
          "",
          "---------------"
        ],
        "framework/core/src/Filesystem/FilesystemServiceProvider.php||framework/core/src/Filesystem/FilesystemServiceProvider.php": [
          "File: framework/core/src/Filesystem/FilesystemServiceProvider.php -> framework/core/src/Filesystem/FilesystemServiceProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: namespace Flarum\\Filesystem;",
          "12: use Flarum\\Foundation\\AbstractServiceProvider;",
          "14: use Flarum\\Foundation\\Paths;",
          "15: use Flarum\\Http\\UrlGenerator;",
          "16: use Illuminate\\Contracts\\Container\\Container;",
          "17: use Illuminate\\Filesystem\\Filesystem;",
          "20: use League\\Flysystem\\Visibility;",
          "23: class FilesystemServiceProvider extends AbstractServiceProvider",
          "24: {",
          "27:     public function register(): void",
          "28:     {",
          "29:         $this->container->singleton('files', function () {",
          "",
          "[Removed Lines]",
          "13: use Flarum\\Foundation\\Config;",
          "18: use Illuminate\\Support\\Arr;",
          "19: use Intervention\\Image\\ImageManager;",
          "21: use RuntimeException;",
          "25:     protected const INTERVENTION_DRIVERS = ['gd' => 'gd', 'imagick' => 'imagick'];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:                 $container->make('flarum.filesystem.resolved_drivers')",
          "66:             );",
          "67:         });",
          "89:     }",
          "90: }",
          "",
          "[Removed Lines]",
          "69:         $this->container->singleton(ImageManager::class, function (Container $container) {",
          "71:             $config = $this->container->make(Config::class);",
          "73:             $intervention = $config->offsetGet('intervention');",
          "74:             $driver = Arr::get($intervention, 'driver', self::INTERVENTION_DRIVERS['gd']);",
          "77:             if ($driver === self::INTERVENTION_DRIVERS['imagick'] && ! extension_loaded(self::INTERVENTION_DRIVERS['imagick'])) {",
          "78:                 $driver = self::INTERVENTION_DRIVERS['gd'];",
          "79:             }",
          "81:             if (! Arr::has(self::INTERVENTION_DRIVERS, $driver)) {",
          "82:                 throw new RuntimeException(\"intervention/image: $driver is not valid\");",
          "83:             }",
          "85:             return new ImageManager([",
          "86:                 'driver' => $driver",
          "87:             ]);",
          "88:         });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "framework/core/src/Foundation/InstalledSite.php||framework/core/src/Foundation/InstalledSite.php": [
          "File: framework/core/src/Foundation/InstalledSite.php -> framework/core/src/Foundation/InstalledSite.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: use Flarum\\Frontend\\FrontendServiceProvider;",
          "24: use Flarum\\Group\\GroupServiceProvider;",
          "25: use Flarum\\Http\\HttpServiceProvider;",
          "26: use Flarum\\Locale\\LocaleServiceProvider;",
          "27: use Flarum\\Mail\\MailServiceProvider;",
          "28: use Flarum\\Notification\\NotificationServiceProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: use Flarum\\Image\\ImageServiceProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:         $app->register(GroupServiceProvider::class);",
          "116:         $app->register(HashServiceProvider::class);",
          "117:         $app->register(HttpServiceProvider::class);",
          "118:         $app->register(LocaleServiceProvider::class);",
          "119:         $app->register(MailServiceProvider::class);",
          "120:         $app->register(NotificationServiceProvider::class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:         $app->register(ImageServiceProvider::class);",
          "",
          "---------------"
        ],
        "framework/core/src/Image/ImageServiceProvider.php||framework/core/src/Image/ImageServiceProvider.php": [
          "File: framework/core/src/Image/ImageServiceProvider.php -> framework/core/src/Image/ImageServiceProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "10: namespace Flarum\\Image;",
          "12: use Flarum\\Foundation\\AbstractServiceProvider;",
          "13: use Flarum\\Foundation\\Config;",
          "14: use Illuminate\\Contracts\\Container\\Container;",
          "15: use Illuminate\\Support\\Arr;",
          "16: use Intervention\\Image\\Drivers;",
          "17: use Intervention\\Image\\ImageManager;",
          "18: use RuntimeException;",
          "20: class ImageServiceProvider extends AbstractServiceProvider",
          "21: {",
          "22:     public function register(): void",
          "23:     {",
          "24:         $this->container->bind('image.drivers', function (): array {",
          "25:             return [",
          "26:                 'gd' => Drivers\\Gd\\Driver::class,",
          "27:                 'imagick' => Drivers\\Imagick\\Driver::class",
          "28:             ];",
          "29:         });",
          "31:         $this->container->singleton('image', function (Container $container): ImageManager {",
          "32:             $interventionDrivers = $container->make('image.drivers');",
          "34:             $configDriver = $container->make(Config::class)->offsetGet('intervention.driver');",
          "37:             $driver = $configDriver ?? 'gd';",
          "40:             if ($driver === 'imagick' && ! extension_loaded('imagick')) {",
          "41:                 $driver = 'gd';",
          "42:             }",
          "44:             if (! Arr::has($interventionDrivers, $driver)) {",
          "45:                 throw new RuntimeException(\"intervention/image: $driver is not valid\");",
          "46:             }",
          "48:             return new ImageManager($interventionDrivers[$driver]);",
          "49:         });",
          "51:         $this->container->alias('image', ImageManager::class);",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ],
        "framework/core/src/User/AvatarUploader.php||framework/core/src/User/AvatarUploader.php": [
          "File: framework/core/src/User/AvatarUploader.php -> framework/core/src/User/AvatarUploader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use Illuminate\\Contracts\\Filesystem\\Factory;",
          "13: use Illuminate\\Contracts\\Filesystem\\Filesystem;",
          "14: use Illuminate\\Support\\Str;",
          "17: class AvatarUploader",
          "18: {",
          "",
          "[Removed Lines]",
          "15: use Intervention\\Image\\Image;",
          "",
          "[Added Lines]",
          "15: use Intervention\\Image\\Interfaces\\ImageInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         $this->uploadDir = $filesystemFactory->disk('flarum-avatars');",
          "24:     }",
          "27:     {",
          "36:         $this->removeFileAfterSave($user);",
          "37:         $user->changeAvatarPath($avatarPath);",
          "",
          "[Removed Lines]",
          "26:     public function upload(User $user, Image $image): void",
          "28:         if (extension_loaded('exif')) {",
          "29:             $image->orientate();",
          "30:         }",
          "32:         $encodedImage = $image->fit(100, 100)->encode('png');",
          "34:         $avatarPath = Str::random().'.png';",
          "",
          "[Added Lines]",
          "26:     public function upload(User $user, ImageInterface $image): void",
          "28:         $image = $image->cover(100, 100);",
          "29:         $avatarPath = Str::random();",
          "31:         if ($image->isAnimated()) {",
          "32:             $encodedImage = $image->toGif();",
          "33:             $avatarPath .= '.gif';",
          "34:         } else {",
          "35:             $encodedImage = $image->toPng();",
          "36:             $avatarPath .= '.png';",
          "37:         }",
          "",
          "---------------"
        ],
        "framework/core/src/User/AvatarValidator.php||framework/core/src/User/AvatarValidator.php": [
          "File: framework/core/src/User/AvatarValidator.php -> framework/core/src/User/AvatarValidator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use Flarum\\Locale\\TranslatorInterface;",
          "15: use Illuminate\\Validation\\Factory;",
          "16: use Illuminate\\Validation\\Validator;",
          "18: use Intervention\\Image\\ImageManager;",
          "19: use Psr\\Http\\Message\\UploadedFileInterface;",
          "20: use Symfony\\Component\\Mime\\MimeTypes;",
          "",
          "[Removed Lines]",
          "17: use Intervention\\Image\\Exception\\NotReadableException;",
          "",
          "[Added Lines]",
          "17: use Intervention\\Gif\\Exceptions\\DecoderException as GifDecoderException;",
          "18: use Intervention\\Image\\Exceptions\\DecoderException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         }",
          "78:         try {",
          "81:             $this->raise('image');",
          "82:         }",
          "83:     }",
          "",
          "[Removed Lines]",
          "79:             $this->imageManager->make($file->getStream()->getMetadata('uri'));",
          "80:         } catch (NotReadableException) {",
          "",
          "[Added Lines]",
          "80:             $this->imageManager->read($file->getStream()->getMetadata('uri'));",
          "81:         } catch (DecoderException|GifDecoderException) {",
          "",
          "---------------"
        ],
        "framework/core/src/User/Command/RegisterUserHandler.php||framework/core/src/User/Command/RegisterUserHandler.php": [
          "File: framework/core/src/User/Command/RegisterUserHandler.php -> framework/core/src/User/Command/RegisterUserHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: use Flarum\\User\\RegistrationToken;",
          "19: use Flarum\\User\\User;",
          "20: use Flarum\\User\\UserValidator;",
          "21: use Illuminate\\Contracts\\Events\\Dispatcher;",
          "22: use Illuminate\\Support\\Arr;",
          "23: use Illuminate\\Support\\Str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: use GuzzleHttp\\Client;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:             throw new InvalidArgumentException(\"Provided avatar URL must have scheme http or https. Scheme provided was $scheme.\", 503);",
          "136:         }",
          "141:     }",
          "143:     private function fulfillToken(User $user, RegistrationToken $token): void",
          "",
          "[Removed Lines]",
          "138:         $image = $this->imageManager->make($url);",
          "140:         $this->avatarUploader->upload($user, $image);",
          "",
          "[Added Lines]",
          "139:         $urlContents = $this->retrieveAvatarFromUrl($url);",
          "141:         if ($urlContents !== null) {",
          "142:             $image = $this->imageManager->read($urlContents);",
          "144:             $this->avatarUploader->upload($user, $image);",
          "145:         }",
          "146:     }",
          "148:     private function retrieveAvatarFromUrl(string $url): ?string",
          "149:     {",
          "150:         $client = new Client();",
          "152:         try {",
          "153:             $response = $client->get($url);",
          "154:         } catch (\\Exception $e) {",
          "155:             return null;",
          "156:         }",
          "158:         if ($response->getStatusCode() !== 200) {",
          "159:             return null;",
          "160:         }",
          "162:         return $response->getBody()->getContents();",
          "",
          "---------------"
        ],
        "framework/core/src/User/Command/UploadAvatarHandler.php||framework/core/src/User/Command/UploadAvatarHandler.php": [
          "File: framework/core/src/User/Command/UploadAvatarHandler.php -> framework/core/src/User/Command/UploadAvatarHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         $this->validator->assertValid(['avatar' => $command->file]);",
          "48:         $this->events->dispatch(",
          "49:             new AvatarSaving($user, $actor, $image)",
          "",
          "[Removed Lines]",
          "46:         $image = $this->imageManager->make($command->file->getStream()->getMetadata('uri'));",
          "",
          "[Added Lines]",
          "46:         $image = $this->imageManager->read($command->file->getStream()->getMetadata('uri'));",
          "",
          "---------------"
        ],
        "framework/core/src/User/Event/AvatarSaving.php||framework/core/src/User/Event/AvatarSaving.php": [
          "File: framework/core/src/User/Event/AvatarSaving.php -> framework/core/src/User/Event/AvatarSaving.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: namespace Flarum\\User\\Event;",
          "12: use Flarum\\User\\User;",
          "15: class AvatarSaving",
          "16: {",
          "17:     public function __construct(",
          "18:         public User $user,",
          "19:         public User $actor,",
          "21:     ) {",
          "22:     }",
          "23: }",
          "",
          "[Removed Lines]",
          "13: use Intervention\\Image\\Image;",
          "20:         public Image $image",
          "",
          "[Added Lines]",
          "13: use Intervention\\Image\\Interfaces\\ImageInterface;",
          "20:         public ImageInterface $image",
          "",
          "---------------"
        ],
        "framework/core/tests/unit/User/AvatarUploaderTest.php||framework/core/tests/unit/User/AvatarUploaderTest.php": [
          "File: framework/core/tests/unit/User/AvatarUploaderTest.php -> framework/core/tests/unit/User/AvatarUploaderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: use Illuminate\\Contracts\\Filesystem\\Factory;",
          "17: use Illuminate\\Contracts\\Filesystem\\Filesystem;",
          "18: use Illuminate\\Database\\Eloquent\\Model;",
          "20: use Mockery as m;",
          "22: class AvatarUploaderTest extends TestCase",
          "",
          "[Removed Lines]",
          "19: use Intervention\\Image\\ImageManagerStatic;",
          "",
          "[Added Lines]",
          "19: use Intervention\\Image\\ImageManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         $user->changeAvatarPath('ABCDEFGHabcdefgh.png');",
          "94:         $user->syncOriginal();",
          "99:         foreach ($user->releaseAfterSaveCallbacks() as $callback) {",
          "",
          "[Removed Lines]",
          "96:         $this->uploader->upload($user, ImageManagerStatic::canvas(50, 50));",
          "",
          "[Added Lines]",
          "96:         $this->uploader->upload($user, ImageManager::gd()->create(50, 50));",
          "",
          "---------------"
        ]
      }
    }
  ]
}