{
  "cve_id": "CVE-2018-10903",
  "cve_desc": "A flaw was found in python-cryptography versions between >=1.9.0 and <2.3. The finalize_with_tag API did not enforce a minimum tag length. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.",
  "repo": "pyca/cryptography",
  "patch_hash": "688e0f673bfbf43fa898994326c6877f00ab19ef",
  "patch_info": {
    "commit_hash": "688e0f673bfbf43fa898994326c6877f00ab19ef",
    "repo": "pyca/cryptography",
    "commit_url": "https://github.com/pyca/cryptography/pull/4342/commits/688e0f673bfbf43fa898994326c6877f00ab19ef",
    "files": [
      "CHANGELOG.rst",
      "docs/hazmat/primitives/symmetric-encryption.rst",
      "src/cryptography/hazmat/backends/openssl/ciphers.py",
      "src/cryptography/hazmat/primitives/ciphers/modes.py",
      "tests/hazmat/primitives/test_aes.py"
    ],
    "message": "disallow implicit tag truncation with finalize_with_tag",
    "before_after_code_files": [
      "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py",
      "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py",
      "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py"
    ]
  },
  "patch_diff": {
    "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py": [
      "File: src/cryptography/hazmat/backends/openssl/ciphers.py -> src/cryptography/hazmat/backends/openssl/ciphers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "199:                 \"finalize_with_tag requires OpenSSL >= 1.0.2. To use this \"",
      "200:                 \"method please update OpenSSL\"",
      "201:             )",
      "202:         res = self._backend._lib.EVP_CIPHER_CTX_ctrl(",
      "203:             self._ctx, self._backend._lib.EVP_CTRL_AEAD_SET_TAG,",
      "204:             len(tag), tag",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "202:         if len(tag) < self._mode._min_tag_length:",
      "203:             raise ValueError(",
      "204:                 \"Authentication tag must be {0} bytes or longer.\".format(",
      "205:                     self._mode._min_tag_length)",
      "206:             )",
      "",
      "---------------"
    ],
    "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py": [
      "File: src/cryptography/hazmat/primitives/ciphers/modes.py -> src/cryptography/hazmat/primitives/ciphers/modes.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "220:                         min_tag_length)",
      "221:                 )",
      "222:         self._tag = tag",
      "224:     tag = utils.read_only_property(\"_tag\")",
      "225:     initialization_vector = utils.read_only_property(\"_initialization_vector\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:         self._min_tag_length = min_tag_length",
      "",
      "---------------"
    ],
    "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py": [
      "File: tests/hazmat/primitives/test_aes.py -> tests/hazmat/primitives/test_aes.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "439:             decryptor.finalize()",
      "440:         else:",
      "441:             decryptor.finalize_with_tag(tag)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "443:     @pytest.mark.supported(",
      "444:         only_if=lambda backend: (",
      "445:             not backend._lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_102 or",
      "446:             backend._lib.CRYPTOGRAPHY_IS_LIBRESSL",
      "447:         ),",
      "448:         skip_message=\"Not supported on OpenSSL 1.0.1\",",
      "449:     )",
      "450:     def test_gcm_tag_decrypt_finalize_tag_length(self, backend):",
      "451:         decryptor = base.Cipher(",
      "452:             algorithms.AES(b\"0\" * 16),",
      "453:             modes.GCM(b\"0\" * 12),",
      "454:             backend=backend",
      "455:         ).decryptor()",
      "456:         with pytest.raises(ValueError):",
      "457:             decryptor.finalize_with_tag(b\"tagtooshort\")",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d4378e42937b56f473ddade2667f919ce32208cb",
      "candidate_info": {
        "commit_hash": "d4378e42937b56f473ddade2667f919ce32208cb",
        "repo": "pyca/cryptography",
        "commit_url": "https://github.com/pyca/cryptography/commit/d4378e42937b56f473ddade2667f919ce32208cb",
        "files": [
          "CHANGELOG.rst",
          "docs/hazmat/primitives/symmetric-encryption.rst",
          "src/cryptography/hazmat/backends/openssl/ciphers.py",
          "src/cryptography/hazmat/primitives/ciphers/modes.py",
          "tests/hazmat/primitives/test_aes.py"
        ],
        "message": "disallow implicit tag truncation with finalize_with_tag (#4342)",
        "before_after_code_files": [
          "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py",
          "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py",
          "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/pyca/cryptography/pull/4342"
        ],
        "olp_code_files": {
          "patch": [
            "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py",
            "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py",
            "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py"
          ],
          "candidate": [
            "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py",
            "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py",
            "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py"
          ]
        }
      },
      "candidate_diff": {
        "src/cryptography/hazmat/backends/openssl/ciphers.py||src/cryptography/hazmat/backends/openssl/ciphers.py": [
          "File: src/cryptography/hazmat/backends/openssl/ciphers.py -> src/cryptography/hazmat/backends/openssl/ciphers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:                 \"finalize_with_tag requires OpenSSL >= 1.0.2. To use this \"",
          "200:                 \"method please update OpenSSL\"",
          "201:             )",
          "202:         res = self._backend._lib.EVP_CIPHER_CTX_ctrl(",
          "203:             self._ctx, self._backend._lib.EVP_CTRL_AEAD_SET_TAG,",
          "204:             len(tag), tag",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:         if len(tag) < self._mode._min_tag_length:",
          "203:             raise ValueError(",
          "204:                 \"Authentication tag must be {0} bytes or longer.\".format(",
          "205:                     self._mode._min_tag_length)",
          "206:             )",
          "",
          "---------------"
        ],
        "src/cryptography/hazmat/primitives/ciphers/modes.py||src/cryptography/hazmat/primitives/ciphers/modes.py": [
          "File: src/cryptography/hazmat/primitives/ciphers/modes.py -> src/cryptography/hazmat/primitives/ciphers/modes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:                         min_tag_length)",
          "221:                 )",
          "222:         self._tag = tag",
          "224:     tag = utils.read_only_property(\"_tag\")",
          "225:     initialization_vector = utils.read_only_property(\"_initialization_vector\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:         self._min_tag_length = min_tag_length",
          "",
          "---------------"
        ],
        "tests/hazmat/primitives/test_aes.py||tests/hazmat/primitives/test_aes.py": [
          "File: tests/hazmat/primitives/test_aes.py -> tests/hazmat/primitives/test_aes.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:             decryptor.finalize()",
          "440:         else:",
          "441:             decryptor.finalize_with_tag(tag)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:     @pytest.mark.supported(",
          "444:         only_if=lambda backend: (",
          "445:             not backend._lib.CRYPTOGRAPHY_OPENSSL_LESS_THAN_102 or",
          "446:             backend._lib.CRYPTOGRAPHY_IS_LIBRESSL",
          "447:         ),",
          "448:         skip_message=\"Not supported on OpenSSL 1.0.1\",",
          "449:     )",
          "450:     def test_gcm_tag_decrypt_finalize_tag_length(self, backend):",
          "451:         decryptor = base.Cipher(",
          "452:             algorithms.AES(b\"0\" * 16),",
          "453:             modes.GCM(b\"0\" * 12),",
          "454:             backend=backend",
          "455:         ).decryptor()",
          "456:         with pytest.raises(ValueError):",
          "457:             decryptor.finalize_with_tag(b\"tagtooshort\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}