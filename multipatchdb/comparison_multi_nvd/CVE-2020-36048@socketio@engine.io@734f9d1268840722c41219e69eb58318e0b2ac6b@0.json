{
  "cve_id": "CVE-2020-36048",
  "cve_desc": "Engine.IO before 4.0.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.",
  "repo": "socketio/engine.io",
  "patch_hash": "734f9d1268840722c41219e69eb58318e0b2ac6b",
  "patch_info": {
    "commit_hash": "734f9d1268840722c41219e69eb58318e0b2ac6b",
    "repo": "socketio/engine.io",
    "commit_url": "https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b",
    "files": [
      "lib/server.js"
    ],
    "message": "feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
    "before_after_code_files": [
      "lib/server.js||lib/server.js"
    ]
  },
  "patch_diff": {
    "lib/server.js||lib/server.js": [
      "File: lib/server.js -> lib/server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:         pingTimeout: 5000,",
      "27:         pingInterval: 25000,",
      "28:         upgradeTimeout: 10000,",
      "30:         transports: Object.keys(transports),",
      "31:         allowUpgrades: true,",
      "32:         perMessageDeflate: {",
      "",
      "[Removed Lines]",
      "29:         maxHttpBufferSize: 10e7,",
      "",
      "[Added Lines]",
      "29:         maxHttpBufferSize: 1e6,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58e274c437e9cbcf69fd913c813aad8fbd253703",
      "candidate_info": {
        "commit_hash": "58e274c437e9cbcf69fd913c813aad8fbd253703",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/58e274c437e9cbcf69fd913c813aad8fbd253703",
        "files": [
          "README.md",
          "lib/server.js"
        ],
        "message": "feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.\n\nBackported from https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b",
        "before_after_code_files": [
          "lib/server.js||lib/server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   this.pingTimeout = opts.pingTimeout || 5000;",
          "41:   this.pingInterval = opts.pingInterval || 25000;",
          "42:   this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "44:   this.transports = opts.transports || Object.keys(transports);",
          "45:   this.allowUpgrades = false !== opts.allowUpgrades;",
          "46:   this.allowRequest = opts.allowRequest;",
          "",
          "[Removed Lines]",
          "43:   this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;",
          "",
          "[Added Lines]",
          "43:   this.maxHttpBufferSize = opts.maxHttpBufferSize || 1e6;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bafe684a193e7ad9e2af9aff82bb8b555f627f11",
      "candidate_info": {
        "commit_hash": "bafe684a193e7ad9e2af9aff82bb8b555f627f11",
        "repo": "socketio/engine.io",
        "commit_url": "https://github.com/socketio/engine.io/commit/bafe684a193e7ad9e2af9aff82bb8b555f627f11",
        "files": [
          "lib/server.js",
          "lib/socket.js"
        ],
        "message": "refactor: refactor the handling of the options",
        "before_after_code_files": [
          "lib/server.js||lib/server.js",
          "lib/socket.js||lib/socket.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/server.js||lib/server.js"
          ],
          "candidate": [
            "lib/server.js||lib/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/server.js||lib/server.js": [
          "File: lib/server.js -> lib/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     super();",
          "20:     this.clients = {};",
          "21:     this.clientsCount = 0;",
          "41:     if (opts.cookie) {",
          "42:       this.opts.cookie = Object.assign(",
          "",
          "[Removed Lines]",
          "17:   constructor(opts) {",
          "23:     opts = opts || {};",
          "25:     this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || \"ws\";",
          "26:     this.pingTimeout = opts.pingTimeout || 5000;",
          "27:     this.pingInterval = opts.pingInterval || 25000;",
          "28:     this.upgradeTimeout = opts.upgradeTimeout || 10000;",
          "29:     this.maxHttpBufferSize = opts.maxHttpBufferSize || 10e7;",
          "30:     this.transports = opts.transports || Object.keys(transports);",
          "31:     this.allowUpgrades = false !== opts.allowUpgrades;",
          "32:     this.allowRequest = opts.allowRequest;",
          "33:     this.perMessageDeflate =",
          "34:       false !== opts.perMessageDeflate ? opts.perMessageDeflate || true : false;",
          "35:     this.httpCompression =",
          "36:       false !== opts.httpCompression ? opts.httpCompression || {} : false;",
          "37:     this.initialPacket = opts.initialPacket;",
          "39:     this.opts = Object.assign({}, opts);",
          "",
          "[Added Lines]",
          "17:   constructor(opts = {}) {",
          "23:     this.opts = Object.assign(",
          "24:       {",
          "25:         wsEngine: process.env.EIO_WS_ENGINE || \"ws\",",
          "26:         pingTimeout: 5000,",
          "27:         pingInterval: 25000,",
          "28:         upgradeTimeout: 10000,",
          "29:         maxHttpBufferSize: 10e7,",
          "30:         transports: Object.keys(transports),",
          "31:         allowUpgrades: true,",
          "32:         perMessageDeflate: {",
          "33:           threshold: 1024",
          "34:         },",
          "35:         httpCompression: {",
          "36:           threshold: 1024",
          "37:         }",
          "38:       },",
          "39:       opts",
          "40:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:       );",
          "51:     }",
          "62:     this.init();",
          "63:   }",
          "",
          "[Removed Lines]",
          "54:     [\"perMessageDeflate\", \"httpCompression\"].forEach(type => {",
          "55:       let compression = this[type];",
          "56:       if (true === compression) this[type] = compression = {};",
          "57:       if (compression && null == compression.threshold) {",
          "58:         compression.threshold = 1024;",
          "59:       }",
          "60:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   init() {",
          "73:     if (this.ws) this.ws.close();",
          "75:     let wsModule;",
          "77:       case \"uws\":",
          "78:         wsModule = require(\"uws\");",
          "79:         break;",
          "",
          "[Removed Lines]",
          "71:     if (!~this.transports.indexOf(\"websocket\")) return;",
          "76:     switch (this.wsEngine) {",
          "",
          "[Added Lines]",
          "63:     if (!~this.opts.transports.indexOf(\"websocket\")) return;",
          "68:     switch (this.opts.wsEngine) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "86:     this.ws = new wsModule.Server({",
          "87:       noServer: true,",
          "88:       clientTracking: false,",
          "91:     });",
          "92:   }",
          "",
          "[Removed Lines]",
          "89:       perMessageDeflate: this.perMessageDeflate,",
          "90:       maxPayload: this.maxHttpBufferSize",
          "",
          "[Added Lines]",
          "81:       perMessageDeflate: this.opts.perMessageDeflate,",
          "82:       maxPayload: this.opts.maxHttpBufferSize",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:   upgrades(transport) {",
          "102:     return transports[transport].upgradesTo || [];",
          "103:   }",
          "",
          "[Removed Lines]",
          "101:     if (!this.allowUpgrades) return [];",
          "",
          "[Added Lines]",
          "93:     if (!this.opts.allowUpgrades) return [];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112:   verify(req, upgrade, fn) {",
          "114:     const transport = req._query.transport;",
          "116:       debug('unknown transport \"%s\"', transport);",
          "117:       return fn(Server.errors.UNKNOWN_TRANSPORT, false);",
          "118:     }",
          "",
          "[Removed Lines]",
          "115:     if (!~this.transports.indexOf(transport)) {",
          "",
          "[Added Lines]",
          "107:     if (!~this.opts.transports.indexOf(transport)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:       if (\"GET\" !== req.method)",
          "142:         return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);",
          "145:     }",
          "147:     fn(null, true);",
          "",
          "[Removed Lines]",
          "143:       if (!this.allowRequest) return fn(null, true);",
          "144:       return this.allowRequest(req, fn);",
          "",
          "[Added Lines]",
          "135:       if (!this.opts.allowRequest) return fn(null, true);",
          "136:       return this.opts.allowRequest(req, fn);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:     try {",
          "241:       var transport = new transports[transportName](req);",
          "242:       if (\"polling\" === transportName) {",
          "245:       } else if (\"websocket\" === transportName) {",
          "247:       }",
          "249:       if (req._query && req._query.b64) {",
          "",
          "[Removed Lines]",
          "243:         transport.maxHttpBufferSize = this.maxHttpBufferSize;",
          "244:         transport.httpCompression = this.httpCompression;",
          "246:         transport.perMessageDeflate = this.perMessageDeflate;",
          "",
          "[Added Lines]",
          "235:         transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;",
          "236:         transport.httpCompression = this.opts.httpCompression;",
          "238:         transport.perMessageDeflate = this.opts.perMessageDeflate;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "424:       }",
          "425:     });",
          "428:       server.on(\"upgrade\", function(req, socket, head) {",
          "429:         if (check(req)) {",
          "430:           self.handleUpgrade(req, socket, head);",
          "",
          "[Removed Lines]",
          "427:     if (~self.transports.indexOf(\"websocket\")) {",
          "",
          "[Added Lines]",
          "419:     if (~self.opts.transports.indexOf(\"websocket\")) {",
          "",
          "---------------"
        ],
        "lib/socket.js||lib/socket.js": [
          "File: lib/socket.js -> lib/socket.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:       JSON.stringify({",
          "52:         sid: this.id,",
          "53:         upgrades: this.getAvailableUpgrades(),",
          "56:       })",
          "57:     );",
          "61:     }",
          "63:     this.emit(\"open\");",
          "",
          "[Removed Lines]",
          "54:         pingInterval: this.server.pingInterval,",
          "55:         pingTimeout: this.server.pingTimeout",
          "59:     if (this.server.initialPacket) {",
          "60:       this.sendPacket(\"message\", this.server.initialPacket);",
          "",
          "[Added Lines]",
          "54:         pingInterval: this.server.opts.pingInterval,",
          "55:         pingTimeout: this.server.opts.pingTimeout",
          "59:     if (this.server.opts.initialPacket) {",
          "60:       this.sendPacket(\"message\", this.server.opts.initialPacket);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:       switch (packet.type) {",
          "84:         case \"pong\":",
          "",
          "[Removed Lines]",
          "81:       this.resetPingTimeout(this.server.pingInterval + this.server.pingTimeout);",
          "",
          "[Added Lines]",
          "81:       this.resetPingTimeout(",
          "82:         this.server.opts.pingInterval + this.server.opts.pingTimeout",
          "83:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     this.pingIntervalTimer = setTimeout(() => {",
          "124:       debug(",
          "125:         \"writing ping packet - expecting pong within %sms\",",
          "127:       );",
          "128:       this.sendPacket(\"ping\");",
          "131:   }",
          "",
          "[Removed Lines]",
          "126:         this.server.pingTimeout",
          "129:       this.resetPingTimeout(this.server.pingTimeout);",
          "130:     }, this.server.pingInterval);",
          "",
          "[Added Lines]",
          "128:         this.server.opts.pingTimeout",
          "131:       this.resetPingTimeout(this.server.opts.pingTimeout);",
          "132:     }, this.server.opts.pingInterval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:       if (\"open\" === transport.readyState) {",
          "196:         transport.close();",
          "197:       }",
          "200:     function onPacket(packet) {",
          "201:       if (\"ping\" === packet.type && \"probe\" === packet.data) {",
          "",
          "[Removed Lines]",
          "198:     }, this.server.upgradeTimeout);",
          "",
          "[Added Lines]",
          "200:     }, this.server.opts.upgradeTimeout);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "455:     const l = allUpgrades.length;",
          "456:     for (; i < l; ++i) {",
          "457:       const upg = allUpgrades[i];",
          "459:         availableUpgrades.push(upg);",
          "460:       }",
          "461:     }",
          "",
          "[Removed Lines]",
          "458:       if (this.server.transports.indexOf(upg) !== -1) {",
          "",
          "[Added Lines]",
          "460:       if (this.server.opts.transports.indexOf(upg) !== -1) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}