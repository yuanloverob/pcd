{
  "cve_id": "CVE-2023-51699",
  "cve_desc": "Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications. An OS command injection vulnerability within the Fluid project's JuicefsRuntime can potentially allow an authenticated user, who has the authority to create or update the K8s CRD Dataset/JuicefsRuntime, to execute arbitrary OS commands within the juicefs related containers. This could lead to unauthorized access, modification or deletion of data. Users who're using versions < 0.9.3 with JuicefsRuntime should upgrade to v0.9.3.",
  "repo": "fluid-cloudnative/fluid",
  "patch_hash": "e0184cff8790ad000c3e8943392c7f544fad7d66",
  "patch_info": {
    "commit_hash": "e0184cff8790ad000c3e8943392c7f544fad7d66",
    "repo": "fluid-cloudnative/fluid",
    "commit_url": "https://github.com/fluid-cloudnative/fluid/commit/e0184cff8790ad000c3e8943392c7f544fad7d66",
    "files": [
      "charts/juicefs/Chart.yaml",
      "pkg/ddc/juicefs/operations/base.go",
      "pkg/ddc/juicefs/operations/base_test.go",
      "pkg/ddc/juicefs/transform_fuse.go",
      "pkg/ddc/juicefs/ufs_test.go",
      "pkg/utils/security/escape.go",
      "pkg/utils/security/escape_test.go"
    ],
    "message": "Merge pull request from GHSA-wx8q-4gm9-rj2g\n\n* Fix JuicefsRuntime: escape customized string before constructing commands\n\nadd escapeBashStr\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\navoid bash -c in operations\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nfix GetUsedSpace and GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nmove EscapeBashStr to pkg/utils/security\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nadd left\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nresume GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\nEscape value.Configs.Name\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\nFix unit tests\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\nUpgrade juicefs helm chart version to 0.2.16\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Fix JuicefsRuntime: escape customized string before constructing commands\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n---------\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\nCo-authored-by: xixi <hexilee@juicedata.io>",
    "before_after_code_files": [
      "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
      "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
      "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
      "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
      "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
      "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
    ]
  },
  "patch_diff": {
    "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go": [
      "File: pkg/ddc/juicefs/operations/base.go -> pkg/ddc/juicefs/operations/base.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "27:  \"github.com/go-logr/logr\"",
      "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
      "30: )",
      "32: type JuiceFileUtils struct {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130: func (j JuiceFileUtils) GetFileCount(juiceSubPath string) (fileCount int64, err error) {",
      "131:  var (",
      "134:   command = []string{\"bash\", \"-c\", strs}",
      "135:   stdout  string",
      "136:   stderr  string",
      "137:  )",
      "139:  stdout, stderr, err = j.exec(command)",
      "140:  if err != nil {",
      "141:   err = fmt.Errorf(\"execute command %v with expectedErr: %v stdout %s and stderr %s\", command, err, stdout, stderr)",
      "",
      "[Removed Lines]",
      "133:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", juiceSubPath)",
      "",
      "[Added Lines]",
      "134:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", security.EscapeBashStr(juiceSubPath))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "266: }",
      "270: func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err error) {",
      "271:  var (",
      "274:   stdout  string",
      "275:   stderr  string",
      "276:  )",
      "",
      "[Removed Lines]",
      "272:   strs    = fmt.Sprintf(`df --block-size=1 |grep %s`, juicefsPath)",
      "273:   command = []string{\"bash\", \"-c\", strs}",
      "",
      "[Added Lines]",
      "272:   command = []string{\"df\", \"--block-size=1\"}",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "281:   return",
      "282:  }",
      "287:  data := strings.Fields(str)",
      "288:  if len(data) != 6 {",
      "289:   err = fmt.Errorf(\"failed to parse %s in GetUsedSpace method\", data)",
      "",
      "[Removed Lines]",
      "285:  str := strings.TrimSuffix(stdout, \"\\n\")",
      "",
      "[Added Lines]",
      "283:  var str string",
      "284:  lines := strings.Split(stdout, \"\\n\")",
      "285:  for _, line := range lines {",
      "286:   if strings.Contains(line, juicefsPath) {",
      "287:    str = line",
      "288:    break",
      "289:   }",
      "290:  }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "365:   j.log.Error(errors.New(\"the key not in  metadatafile\"), \"key\", key)",
      "366:  }",
      "367:  var (",
      "370:   stdout  string",
      "371:   stderr  string",
      "372:  )",
      "",
      "[Removed Lines]",
      "368:   str     = \"sed -n '\" + line + \"' \" + filename",
      "369:   command = []string{\"bash\", \"-c\", str}",
      "",
      "[Added Lines]",
      "373:   str     = \"'\" + line + \"' \" + filename",
      "374:   command = []string{\"sed\", \"-n\", str}",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go": [
      "File: pkg/ddc/juicefs/operations/base_test.go -> pkg/ddc/juicefs/operations/base_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "479:   t.Fatal(err.Error())",
      "480:  }",
      "481:  a := &JuiceFileUtils{log: fake.NullLogger()}",
      "483:  if err == nil {",
      "484:   t.Error(\"check failure, want err, got nil\")",
      "485:  }",
      "",
      "[Removed Lines]",
      "482:  _, err = a.GetUsedSpace(\"/tmp\")",
      "",
      "[Added Lines]",
      "482:  _, err = a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "489:  if err != nil {",
      "490:   t.Fatal(err.Error())",
      "491:  }",
      "493:  if err != nil {",
      "494:   t.Errorf(\"check failure, want nil, got err: %v\", err)",
      "495:  }",
      "",
      "[Removed Lines]",
      "492:  usedSpace, err := a.GetUsedSpace(\"/tmp\")",
      "",
      "[Added Lines]",
      "492:  usedSpace, err := a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go": [
      "File: pkg/ddc/juicefs/transform_fuse.go -> pkg/ddc/juicefs/transform_fuse.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
      "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
      "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
      "32: )",
      "34: func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, dataset *datav1alpha1.Dataset, value *JuiceFS) (err error) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:  }",
      "38:  mount := dataset.Spec.Mounts[0]",
      "43:  image := runtime.Spec.Fuse.Image",
      "",
      "[Removed Lines]",
      "40:  value.Configs.Name = mount.Name",
      "",
      "[Added Lines]",
      "41:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:  }",
      "218:  if source == \"\" {",
      "220:  }",
      "",
      "[Removed Lines]",
      "219:   source = mount.Name",
      "",
      "[Added Lines]",
      "220:   source = security.EscapeBashStr(mount.Name)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "326:    }",
      "327:    workerOptionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
      "328:   }",
      "331:  } else {",
      "332:   if readonly {",
      "333:    optionMap[\"attrcacheto\"] = \"7200\"",
      "",
      "[Removed Lines]",
      "329:   mountArgs = []string{common.JuiceFSCeMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}",
      "330:   mountArgsWorker = []string{common.JuiceFSCeMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}",
      "",
      "[Added Lines]",
      "330:   mountArgs = []string{",
      "331:    common.JuiceFSCeMountPath,",
      "332:    value.Source,",
      "333:    security.EscapeBashStr(value.Fuse.MountPath),",
      "334:    \"-o\",",
      "335:    security.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),",
      "336:   }",
      "337:   mountArgsWorker = []string{",
      "338:    common.JuiceFSCeMountPath,",
      "339:    value.Source,",
      "340:    security.EscapeBashStr(value.Worker.MountPath),",
      "341:    \"-o\",",
      "342:    security.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),",
      "343:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "347:   optionMap[\"no-sharing\"] = \"\"",
      "348:   delete(workerOptionMap, \"no-sharing\")",
      "352:  }",
      "354:  value.Worker.Command = strings.Join(mountArgsWorker, \" \")",
      "355:  value.Fuse.Command = strings.Join(mountArgs, \" \")",
      "358:  return nil",
      "359: }",
      "",
      "[Removed Lines]",
      "350:   mountArgs = []string{common.JuiceFSMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}",
      "351:   mountArgsWorker = []string{common.JuiceFSMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}",
      "356:  value.Fuse.StatCmd = \"stat -c %i \" + value.Fuse.MountPath",
      "357:  value.Worker.StatCmd = \"stat -c %i \" + value.Worker.MountPath",
      "",
      "[Added Lines]",
      "363:   mountArgs = []string{",
      "364:    common.JuiceFSMountPath,",
      "365:    value.Source,",
      "366:    security.EscapeBashStr(value.Fuse.MountPath),",
      "367:    \"-o\",",
      "368:    security.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),",
      "369:   }",
      "370:   mountArgsWorker = []string{",
      "371:    common.JuiceFSMountPath,",
      "372:    value.Source,",
      "373:    security.EscapeBashStr(value.Worker.MountPath),",
      "374:    \"-o\",",
      "375:    security.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),",
      "376:   }",
      "381:  value.Fuse.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Fuse.MountPath)",
      "382:  value.Worker.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Worker.MountPath)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "379:   for _, option := range *config {",
      "380:    o := strings.TrimSpace(option)",
      "381:    if o != \"\" {",
      "383:    }",
      "384:   }",
      "385:  }",
      "",
      "[Removed Lines]",
      "382:     args = append(args, fmt.Sprintf(\"--%s\", o))",
      "",
      "[Added Lines]",
      "407:     args = append(args, fmt.Sprintf(\"--%s\", security.EscapeBashStr(o)))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "395:    args = append(args, \"--no-update\")",
      "396:   }",
      "397:   if value.Configs.Storage != \"\" {",
      "399:   }",
      "400:   if value.Configs.Bucket != \"\" {",
      "402:   }",
      "404:   cmd := append([]string{common.JuiceCeCliPath, \"format\"}, args...)",
      "405:   value.Configs.FormatCmd = strings.Join(cmd, \" \")",
      "406:   return",
      "",
      "[Removed Lines]",
      "398:    args = append(args, fmt.Sprintf(\"--storage=%s\", value.Configs.Storage))",
      "401:    args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
      "403:   args = append(args, value.Source, value.Configs.Name)",
      "",
      "[Added Lines]",
      "423:    args = append(args, fmt.Sprintf(\"--storage=%s\", security.EscapeBashStr(value.Configs.Storage)))",
      "426:    args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
      "428:   args = append(args, value.Source, security.EscapeBashStr(value.Configs.Name))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "418:   args = append(args, \"--secretkey=${SECRET_KEY}\")",
      "419:  }",
      "420:  if value.Configs.Bucket != \"\" {",
      "422:  }",
      "423:  args = append(args, value.Source)",
      "424:  cmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)",
      "",
      "[Removed Lines]",
      "421:   args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
      "",
      "[Added Lines]",
      "446:   args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "461:      return fmt.Errorf(\"quota is not supported in juicefs-ce version %s\", value.Fuse.ImageTag)",
      "462:     }",
      "465:     return nil",
      "466:    }",
      "",
      "[Removed Lines]",
      "464:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)",
      "",
      "[Added Lines]",
      "489:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "470:    }",
      "472:    cli := common.JuiceCliPath",
      "474:    return nil",
      "475:   }",
      "476:  }",
      "",
      "[Removed Lines]",
      "473:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)",
      "",
      "[Added Lines]",
      "498:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
      "",
      "---------------"
    ],
    "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go": [
      "File: pkg/ddc/juicefs/ufs_test.go -> pkg/ddc/juicefs/ufs_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: }",
      "40: func mockExecCommandInContainerForUsedStorageBytes() (stdout string, stderr string, err error) {",
      "42:  return r, \"\", nil",
      "43: }",
      "",
      "[Removed Lines]",
      "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /data`",
      "",
      "[Added Lines]",
      "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /juicefs/juicefs/test/juicefs-fuse`",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:  statefulSet := &appsv1.StatefulSet{",
      "47:   ObjectMeta: metav1.ObjectMeta{",
      "48:    Name:      \"test-worker\",",
      "50:   },",
      "51:   Spec: appsv1.StatefulSetSpec{",
      "52:    Selector: &metav1.LabelSelector{",
      "",
      "[Removed Lines]",
      "49:    Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "49:    Namespace: \"juicefs\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:  var pod = &corev1.Pod{",
      "58:   ObjectMeta: metav1.ObjectMeta{",
      "59:    Name:      \"test-work-0\",",
      "61:    Labels:    map[string]string{\"a\": \"b\"},",
      "62:   },",
      "63:   Status: corev1.PodStatus{",
      "",
      "[Removed Lines]",
      "60:    Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "60:    Namespace: \"juicefs\",",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:    name: \"test\",",
      "94:    fields: fields{",
      "95:     name:      \"test\",",
      "97:     runtime: &datav1alpha1.JuiceFSRuntime{",
      "98:      ObjectMeta: metav1.ObjectMeta{",
      "99:       Name:      \"test\",",
      "101:      },",
      "102:     },",
      "103:    },",
      "",
      "[Removed Lines]",
      "96:     namespace: \"fluid\",",
      "100:       Namespace: \"fluid\",",
      "",
      "[Added Lines]",
      "96:     namespace: \"juicefs\",",
      "100:       Namespace: \"juicefs\",",
      "",
      "---------------"
    ],
    "pkg/utils/security/escape.go||pkg/utils/security/escape.go": [
      "File: pkg/utils/security/escape.go -> pkg/utils/security/escape.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Copyright 2023 The Fluid Authors.",
      "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "5: you may not use this file except in compliance with the License.",
      "6: You may obtain a copy of the License at",
      "8:     http://www.apache.org/licenses/LICENSE-2.0",
      "10: Unless required by applicable law or agreed to in writing, software",
      "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "13: See the License for the specific language governing permissions and",
      "14: limitations under the License.",
      "17: package security",
      "19: import (",
      "20:  \"fmt\"",
      "21:  \"strings\"",
      "22: )",
      "29: func EscapeBashStr(s string) string {",
      "30:  if !containsOne(s, []rune{'$', '`', '&', ';', '>', '|', '(', ')'}) {",
      "31:   return s",
      "32:  }",
      "33:  s = strings.ReplaceAll(s, `\\`, `\\\\`)",
      "34:  s = strings.ReplaceAll(s, `'`, `\\'`)",
      "35:  if strings.Contains(s, `\\\\`) {",
      "36:   s = strings.ReplaceAll(s, `\\\\\\\\`, `\\\\`)",
      "37:   s = strings.ReplaceAll(s, `\\\\\\'`, `\\'`)",
      "38:   s = strings.ReplaceAll(s, `\\\\\"`, `\\\"`)",
      "39:   s = strings.ReplaceAll(s, `\\\\a`, `\\a`)",
      "40:   s = strings.ReplaceAll(s, `\\\\b`, `\\b`)",
      "41:   s = strings.ReplaceAll(s, `\\\\e`, `\\e`)",
      "42:   s = strings.ReplaceAll(s, `\\\\E`, `\\E`)",
      "43:   s = strings.ReplaceAll(s, `\\\\n`, `\\n`)",
      "44:   s = strings.ReplaceAll(s, `\\\\r`, `\\r`)",
      "45:   s = strings.ReplaceAll(s, `\\\\t`, `\\t`)",
      "46:   s = strings.ReplaceAll(s, `\\\\v`, `\\v`)",
      "47:   s = strings.ReplaceAll(s, `\\\\?`, `\\?`)",
      "48:  }",
      "49:  return fmt.Sprintf(`$'%s'`, s)",
      "50: }",
      "52: func containsOne(target string, chars []rune) bool {",
      "53:  charMap := make(map[rune]bool, len(chars))",
      "54:  for _, c := range chars {",
      "55:   charMap[c] = true",
      "56:  }",
      "57:  for _, s := range target {",
      "58:   if charMap[s] {",
      "59:    return true",
      "60:   }",
      "61:  }",
      "62:  return false",
      "63: }",
      "",
      "---------------"
    ],
    "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go": [
      "File: pkg/utils/security/escape_test.go -> pkg/utils/security/escape_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Copyright 2023 The Fluid Author.",
      "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "5: you may not use this file except in compliance with the License.",
      "6: You may obtain a copy of the License at",
      "8:     http://www.apache.org/licenses/LICENSE-2.0",
      "10: Unless required by applicable law or agreed to in writing, software",
      "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "13: See the License for the specific language governing permissions and",
      "14: limitations under the License.",
      "17: package security",
      "19: import \"testing\"",
      "21: func TestEscapeBashStr(t *testing.T) {",
      "22:  cases := [][]string{",
      "23:   {\"abc\", \"abc\"},",
      "24:   {\"test-volume\", \"test-volume\"},",
      "25:   {\"http://minio.kube-system:9000/minio/dynamic-ce\", \"http://minio.kube-system:9000/minio/dynamic-ce\"},",
      "26:   {\"$(cat /proc/self/status | grep CapEff > /test.txt)\", \"$'$(cat /proc/self/status | grep CapEff > /test.txt)'\"},",
      "27:   {\"hel`cat /proc/self/status`lo\", \"$'hel`cat /proc/self/status`lo'\"},",
      "28:   {\"'h'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "29:   {\"\\\\'h\\\\'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "30:   {\"$'h'el`cat /proc/self/status`lo\", \"$'$\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
      "31:   {\"hel\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
      "32:   {\"hel\\\\\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
      "33:   {\"hel\\\\'`cat /proc/self/status`lo\", \"$'hel\\\\'`cat /proc/self/status`lo'\"},",
      "34:  }",
      "35:  for _, c := range cases {",
      "36:   escaped := EscapeBashStr(c[0])",
      "37:   if escaped != c[1] {",
      "38:    t.Errorf(\"escapeBashVar(%s) = %s, want %s\", c[0], escaped, c[1])",
      "39:   }",
      "40:  }",
      "41: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02b7cd8b79a26092df95d625664994bda485c722",
      "candidate_info": {
        "commit_hash": "02b7cd8b79a26092df95d625664994bda485c722",
        "repo": "fluid-cloudnative/fluid",
        "commit_url": "https://github.com/fluid-cloudnative/fluid/commit/02b7cd8b79a26092df95d625664994bda485c722",
        "files": [
          "charts/juicefs/Chart.yaml",
          "pkg/ddc/juicefs/operations/base.go",
          "pkg/ddc/juicefs/operations/base_test.go",
          "pkg/ddc/juicefs/transform.go",
          "pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/ufs_test.go",
          "pkg/utils/security/escape.go",
          "pkg/utils/security/escape_test.go"
        ],
        "message": "Fix JuicefsRuntime: escape customized string before constructing commands (#3761)\n\n* add escapeBashStr\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* avoid bash -c in operations\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* fix GetUsedSpace and GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* move EscapeBashStr to pkg/utils/security\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* add left\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* resume GetFileCount\n\nSigned-off-by: xixi <hexilee@juicedata.io>\n\n* Escape value.Configs.Name\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Fix unit tests\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n* Upgrade juicefs helm chart version to 0.2.16\n\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\n\n---------\n\nSigned-off-by: xixi <hexilee@juicedata.io>\nSigned-off-by: trafalgarzzz <trafalgarz@outlook.com>\nCo-authored-by: xixi <hexilee@juicedata.io>\nCo-authored-by: trafalgarzzz <trafalgarz@outlook.com>",
        "before_after_code_files": [
          "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
          "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
          "pkg/ddc/juicefs/transform.go||pkg/ddc/juicefs/transform.go",
          "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
          "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
          "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
          "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
            "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
            "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
            "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
            "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
          ],
          "candidate": [
            "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go",
            "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go",
            "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go",
            "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go",
            "pkg/utils/security/escape.go||pkg/utils/security/escape.go",
            "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go"
          ]
        }
      },
      "candidate_diff": {
        "pkg/ddc/juicefs/operations/base.go||pkg/ddc/juicefs/operations/base.go": [
          "File: pkg/ddc/juicefs/operations/base.go -> pkg/ddc/juicefs/operations/base.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils/cmdguard\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"",
          "31: )",
          "33: type JuiceFileUtils struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: func (j JuiceFileUtils) GetFileCount(juiceSubPath string) (fileCount int64, err error) {",
          "114:  var (",
          "117:   command = []string{\"bash\", \"-c\", strs}",
          "118:   stdout  string",
          "119:   stderr  string",
          "120:  )",
          "122:  stdout, stderr, err = j.exec(command)",
          "123:  if err != nil {",
          "124:   err = fmt.Errorf(\"execute command %v with expectedErr: %v stdout %s and stderr %s\", command, err, stdout, stderr)",
          "",
          "[Removed Lines]",
          "116:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", juiceSubPath)",
          "",
          "[Added Lines]",
          "117:   strs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", security.EscapeBashStr(juiceSubPath))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249: }",
          "253: func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err error) {",
          "254:  var (",
          "257:   stdout  string",
          "258:   stderr  string",
          "259:  )",
          "",
          "[Removed Lines]",
          "255:   strs    = fmt.Sprintf(`df --block-size=1 |grep %s`, juicefsPath)",
          "256:   command = []string{\"bash\", \"-c\", strs}",
          "",
          "[Added Lines]",
          "255:   command = []string{\"df\", \"--block-size=1\"}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:   return",
          "265:  }",
          "270:  data := strings.Fields(str)",
          "271:  if len(data) != 6 {",
          "272:   err = fmt.Errorf(\"failed to parse %s in GetUsedSpace method\", data)",
          "",
          "[Removed Lines]",
          "268:  str := strings.TrimSuffix(stdout, \"\\n\")",
          "",
          "[Added Lines]",
          "266:  var str string",
          "267:  lines := strings.Split(stdout, \"\\n\")",
          "268:  for _, line := range lines {",
          "269:   if strings.Contains(line, juicefsPath) {",
          "270:    str = line",
          "271:    break",
          "272:   }",
          "273:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:   j.log.Error(errors.New(\"the key not in  metadatafile\"), \"key\", key)",
          "355:  }",
          "356:  var (",
          "359:   stdout  string",
          "360:   stderr  string",
          "361:  )",
          "",
          "[Removed Lines]",
          "357:   str     = \"sed -n '\" + line + \"' \" + filename",
          "358:   command = []string{\"bash\", \"-c\", str}",
          "",
          "[Added Lines]",
          "362:   str     = \"'\" + line + \"' \" + filename",
          "363:   command = []string{\"sed\", \"-n\", str}",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/operations/base_test.go||pkg/ddc/juicefs/operations/base_test.go": [
          "File: pkg/ddc/juicefs/operations/base_test.go -> pkg/ddc/juicefs/operations/base_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:   t.Fatal(err.Error())",
          "448:  }",
          "449:  a := &JuiceFileUtils{log: fake.NullLogger()}",
          "451:  if err == nil {",
          "452:   t.Error(\"check failure, want err, got nil\")",
          "453:  }",
          "",
          "[Removed Lines]",
          "450:  _, err = a.GetUsedSpace(\"/tmp\")",
          "",
          "[Added Lines]",
          "450:  _, err = a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:  if err != nil {",
          "458:   t.Fatal(err.Error())",
          "459:  }",
          "461:  if err != nil {",
          "462:   t.Errorf(\"check failure, want nil, got err: %v\", err)",
          "463:  }",
          "",
          "[Removed Lines]",
          "460:  usedSpace, err := a.GetUsedSpace(\"/tmp\")",
          "",
          "[Added Lines]",
          "460:  usedSpace, err := a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform.go||pkg/ddc/juicefs/transform.go": [
          "File: pkg/ddc/juicefs/transform.go -> pkg/ddc/juicefs/transform.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"github.com/fluid-cloudnative/fluid/pkg/ddc/base/portallocator\"",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils/docker\"",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/transfromer\"",
          "32: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:    }",
          "203:    workerOptionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
          "204:   }",
          "206:  } else {",
          "207:   workerOptionMap[\"foreground\"] = \"\"",
          "",
          "[Removed Lines]",
          "205:   mountArgsWorker = []string{common.JuiceFSCeMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genArgs(workerOptionMap), \",\")}",
          "",
          "[Added Lines]",
          "206:   mountArgsWorker = []string{",
          "207:    common.JuiceFSCeMountPath,",
          "208:    value.Source,",
          "209:    security.EscapeBashStr(value.Worker.MountPath),",
          "210:    \"-o\",",
          "211:    security.EscapeBashStr(strings.Join(genArgs(workerOptionMap), \",\")),",
          "212:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:   if _, ok := workerOptionMap[\"cache-group\"]; ok {",
          "215:    cacheGroup = workerOptionMap[\"cache-group\"]",
          "216:   }",
          "217:   workerOptionMap[\"cache-group\"] = cacheGroup",
          "218:   delete(workerOptionMap, \"no-sharing\")",
          "221:  }",
          "223:  value.Worker.Command = strings.Join(mountArgsWorker, \" \")",
          "225: }",
          "227: func (j *JuiceFSEngine) transformPlacementMode(dataset *datav1alpha1.Dataset, value *JuiceFS) {",
          "",
          "[Removed Lines]",
          "213:   cacheGroup := fmt.Sprintf(\"%s-%s\", j.namespace, value.FullnameOverride)",
          "220:   mountArgsWorker = []string{common.JuiceFSMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genArgs(workerOptionMap), \",\")}",
          "224:  value.Worker.StatCmd = \"stat -c %i \" + value.Worker.MountPath",
          "",
          "[Added Lines]",
          "220:   cacheGroup := fmt.Sprintf(\"%s-%s\", j.namespace, security.EscapeBashStr(value.FullnameOverride))",
          "227:   mountArgsWorker = []string{",
          "228:    common.JuiceFSMountPath,",
          "229:    value.Source,",
          "230:    security.EscapeBashStr(value.Worker.MountPath),",
          "231:    \"-o\",",
          "232:    security.EscapeBashStr(strings.Join(genArgs(workerOptionMap), \",\")),",
          "233:   }",
          "237:  value.Worker.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Worker.MountPath)",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/transform_fuse.go||pkg/ddc/juicefs/transform_fuse.go": [
          "File: pkg/ddc/juicefs/transform_fuse.go -> pkg/ddc/juicefs/transform_fuse.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  datav1alpha1 \"github.com/fluid-cloudnative/fluid/api/v1alpha1\"",
          "29:  \"github.com/fluid-cloudnative/fluid/pkg/common\"",
          "30:  \"github.com/fluid-cloudnative/fluid/pkg/utils\"",
          "31: )",
          "33: func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, dataset *datav1alpha1.Dataset, value *JuiceFS) (err error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/fluid-cloudnative/fluid/pkg/utils/security\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  }",
          "37:  mount := dataset.Spec.Mounts[0]",
          "42:  image := runtime.Spec.Fuse.Image",
          "",
          "[Removed Lines]",
          "39:  value.Configs.Name = mount.Name",
          "",
          "[Added Lines]",
          "40:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129: func (j *JuiceFSEngine) genValue(mount datav1alpha1.Mount, tiredStoreLevel *datav1alpha1.Level, value *JuiceFS,",
          "130:  sharedOptions map[string]string, sharedEncryptOptions []datav1alpha1.EncryptOption) (map[string]string, error) {",
          "131:  options := make(map[string]string)",
          "133:  value.Configs.EncryptEnvOptions = make([]EncryptEnvOption, 0)",
          "134:  source := \"\"",
          "",
          "[Removed Lines]",
          "132:  value.Configs.Name = mount.Name",
          "",
          "[Added Lines]",
          "133:  value.Configs.Name = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:  }",
          "240:  if source == \"\" {",
          "242:  }",
          "",
          "[Removed Lines]",
          "241:   source = mount.Name",
          "",
          "[Added Lines]",
          "242:   source = security.EscapeBashStr(mount.Name)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:    }",
          "356:    optionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)",
          "357:   }",
          "359:  } else {",
          "360:   if readonly {",
          "361:    optionMap[\"attrcacheto\"] = \"7200\"",
          "",
          "[Removed Lines]",
          "358:   mountArgs = []string{common.JuiceFSCeMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genArgs(optionMap), \",\")}",
          "",
          "[Added Lines]",
          "359:   mountArgs = []string{",
          "360:    common.JuiceFSCeMountPath,",
          "361:    value.Source,",
          "362:    security.EscapeBashStr(value.Fuse.MountPath),",
          "363:    \"-o\",",
          "364:    security.EscapeBashStr(strings.Join(genArgs(optionMap), \",\")),",
          "365:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:   optionMap[\"cache-group\"] = cacheGroup",
          "375:   optionMap[\"no-sharing\"] = \"\"",
          "378:  }",
          "380:  value.Fuse.Command = strings.Join(mountArgs, \" \")",
          "382:  return nil",
          "383: }",
          "",
          "[Removed Lines]",
          "377:   mountArgs = []string{common.JuiceFSMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genArgs(optionMap), \",\")}",
          "381:  value.Fuse.StatCmd = \"stat -c %i \" + value.Fuse.MountPath",
          "",
          "[Added Lines]",
          "384:   mountArgs = []string{",
          "385:    common.JuiceFSMountPath,",
          "386:    value.Source,",
          "387:    security.EscapeBashStr(value.Fuse.MountPath),",
          "388:    \"-o\",",
          "389:    security.EscapeBashStr(strings.Join(genArgs(optionMap), \",\")),",
          "390:   }",
          "394:  value.Fuse.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Fuse.MountPath)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "408:   for _, option := range *config {",
          "409:    o := strings.TrimSpace(option)",
          "410:    if o != \"\" {",
          "412:    }",
          "413:   }",
          "414:  }",
          "",
          "[Removed Lines]",
          "411:     args = append(args, fmt.Sprintf(\"--%s\", o))",
          "",
          "[Added Lines]",
          "424:     args = append(args, fmt.Sprintf(\"--%s\", security.EscapeBashStr(o)))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:    args = append(args, \"--no-update\")",
          "425:   }",
          "426:   if value.Configs.Storage != \"\" {",
          "428:   }",
          "429:   if value.Configs.Bucket != \"\" {",
          "431:   }",
          "432:   formatOpts := ceFilter.filterOption(options)",
          "433:   for k, v := range formatOpts {",
          "435:   }",
          "436:   encryptOptions := ceFilter.filterEncryptEnvOptions(value.Configs.EncryptEnvOptions)",
          "437:   for _, v := range encryptOptions {",
          "439:   }",
          "441:   cmd := append([]string{common.JuiceCeCliPath, \"format\"}, args...)",
          "442:   value.Configs.FormatCmd = strings.Join(cmd, \" \")",
          "443:   return",
          "",
          "[Removed Lines]",
          "427:    args = append(args, fmt.Sprintf(\"--storage=%s\", value.Configs.Storage))",
          "430:    args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
          "434:    args = append(args, fmt.Sprintf(\"--%s=%s\", k, v))",
          "438:    args = append(args, fmt.Sprintf(\"--%s=${%s}\", v.Name, v.EnvName))",
          "440:   args = append(args, value.Source, value.Configs.Name)",
          "",
          "[Added Lines]",
          "440:    args = append(args, fmt.Sprintf(\"--storage=%s\", security.EscapeBashStr(value.Configs.Storage)))",
          "443:    args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
          "447:    args = append(args, fmt.Sprintf(\"--%s=%s\", security.EscapeBashStr(k), security.EscapeBashStr(v)))",
          "451:    args = append(args, fmt.Sprintf(\"--%s=${%s}\", security.EscapeBashStr(v.Name), v.EnvName))",
          "453:   args = append(args, value.Source, security.EscapeBashStr(value.Configs.Name))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "455:   args = append(args, \"--secretkey=${SECRET_KEY}\")",
          "456:  }",
          "457:  if value.Configs.Bucket != \"\" {",
          "459:  }",
          "460:  formatOpts := eeFilter.filterOption(options)",
          "461:  for k, v := range formatOpts {",
          "463:  }",
          "464:  encryptOptions := eeFilter.filterEncryptEnvOptions(value.Configs.EncryptEnvOptions)",
          "465:  for _, v := range encryptOptions {",
          "467:  }",
          "468:  args = append(args, value.Source)",
          "469:  cmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)",
          "",
          "[Removed Lines]",
          "458:   args = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))",
          "462:   args = append(args, fmt.Sprintf(\"--%s=%s\", k, v))",
          "466:   args = append(args, fmt.Sprintf(\"--%s=${%s}\", v.Name, v.EnvName))",
          "",
          "[Added Lines]",
          "471:   args = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))",
          "475:   args = append(args, fmt.Sprintf(\"--%s=%s\", security.EscapeBashStr(k), security.EscapeBashStr(v)))",
          "479:   args = append(args, fmt.Sprintf(\"--%s=${%s}\", security.EscapeBashStr(v.Name), v.EnvName))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "499:    if value.Edition == CommunityEdition {",
          "503:     return nil",
          "504:    }",
          "507:    cli := common.JuiceCliPath",
          "509:    return nil",
          "510:   }",
          "511:  }",
          "",
          "[Removed Lines]",
          "502:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)",
          "508:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)",
          "",
          "[Added Lines]",
          "515:     value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
          "521:    value.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)",
          "",
          "---------------"
        ],
        "pkg/ddc/juicefs/ufs_test.go||pkg/ddc/juicefs/ufs_test.go": [
          "File: pkg/ddc/juicefs/ufs_test.go -> pkg/ddc/juicefs/ufs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: }",
          "40: func mockExecCommandInContainerForUsedStorageBytes() (stdout string, stderr string, err error) {",
          "42:  return r, \"\", nil",
          "43: }",
          "",
          "[Removed Lines]",
          "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /data`",
          "",
          "[Added Lines]",
          "41:  r := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /juicefs/juicefs/test/juicefs-fuse`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  statefulSet := &appsv1.StatefulSet{",
          "47:   ObjectMeta: metav1.ObjectMeta{",
          "48:    Name:      \"test-worker\",",
          "50:   },",
          "51:   Spec: appsv1.StatefulSetSpec{",
          "52:    Selector: &metav1.LabelSelector{",
          "",
          "[Removed Lines]",
          "49:    Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "49:    Namespace: \"juicefs\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:  var pod = &corev1.Pod{",
          "58:   ObjectMeta: metav1.ObjectMeta{",
          "59:    Name:      \"test-work-0\",",
          "61:    Labels:    map[string]string{\"a\": \"b\"},",
          "62:   },",
          "63:   Status: corev1.PodStatus{",
          "",
          "[Removed Lines]",
          "60:    Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "60:    Namespace: \"juicefs\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:    name: \"test\",",
          "94:    fields: fields{",
          "95:     name:      \"test\",",
          "97:     runtime: &datav1alpha1.JuiceFSRuntime{",
          "98:      ObjectMeta: metav1.ObjectMeta{",
          "99:       Name:      \"test\",",
          "101:      },",
          "102:     },",
          "103:    },",
          "",
          "[Removed Lines]",
          "96:     namespace: \"fluid\",",
          "100:       Namespace: \"fluid\",",
          "",
          "[Added Lines]",
          "96:     namespace: \"juicefs\",",
          "100:       Namespace: \"juicefs\",",
          "",
          "---------------"
        ],
        "pkg/utils/security/escape.go||pkg/utils/security/escape.go": [
          "File: pkg/utils/security/escape.go -> pkg/utils/security/escape.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2023 The Fluid Authors.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: package security",
          "19: import (",
          "20:  \"fmt\"",
          "21:  \"strings\"",
          "22: )",
          "29: func EscapeBashStr(s string) string {",
          "30:  if !containsOne(s, []rune{'$', '`', '&', ';', '>', '|', '(', ')'}) {",
          "31:   return s",
          "32:  }",
          "33:  s = strings.ReplaceAll(s, `\\`, `\\\\`)",
          "34:  s = strings.ReplaceAll(s, `'`, `\\'`)",
          "35:  if strings.Contains(s, `\\\\`) {",
          "36:   s = strings.ReplaceAll(s, `\\\\\\\\`, `\\\\`)",
          "37:   s = strings.ReplaceAll(s, `\\\\\\'`, `\\'`)",
          "38:   s = strings.ReplaceAll(s, `\\\\\"`, `\\\"`)",
          "39:   s = strings.ReplaceAll(s, `\\\\a`, `\\a`)",
          "40:   s = strings.ReplaceAll(s, `\\\\b`, `\\b`)",
          "41:   s = strings.ReplaceAll(s, `\\\\e`, `\\e`)",
          "42:   s = strings.ReplaceAll(s, `\\\\E`, `\\E`)",
          "43:   s = strings.ReplaceAll(s, `\\\\n`, `\\n`)",
          "44:   s = strings.ReplaceAll(s, `\\\\r`, `\\r`)",
          "45:   s = strings.ReplaceAll(s, `\\\\t`, `\\t`)",
          "46:   s = strings.ReplaceAll(s, `\\\\v`, `\\v`)",
          "47:   s = strings.ReplaceAll(s, `\\\\?`, `\\?`)",
          "48:  }",
          "49:  return fmt.Sprintf(`$'%s'`, s)",
          "50: }",
          "52: func containsOne(target string, chars []rune) bool {",
          "53:  charMap := make(map[rune]bool, len(chars))",
          "54:  for _, c := range chars {",
          "55:   charMap[c] = true",
          "56:  }",
          "57:  for _, s := range target {",
          "58:   if charMap[s] {",
          "59:    return true",
          "60:   }",
          "61:  }",
          "62:  return false",
          "63: }",
          "",
          "---------------"
        ],
        "pkg/utils/security/escape_test.go||pkg/utils/security/escape_test.go": [
          "File: pkg/utils/security/escape_test.go -> pkg/utils/security/escape_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2023 The Fluid Author.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: package security",
          "19: import \"testing\"",
          "21: func TestEscapeBashStr(t *testing.T) {",
          "22:  cases := [][]string{",
          "23:   {\"abc\", \"abc\"},",
          "24:   {\"test-volume\", \"test-volume\"},",
          "25:   {\"http://minio.kube-system:9000/minio/dynamic-ce\", \"http://minio.kube-system:9000/minio/dynamic-ce\"},",
          "26:   {\"$(cat /proc/self/status | grep CapEff > /test.txt)\", \"$'$(cat /proc/self/status | grep CapEff > /test.txt)'\"},",
          "27:   {\"hel`cat /proc/self/status`lo\", \"$'hel`cat /proc/self/status`lo'\"},",
          "28:   {\"'h'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "29:   {\"\\\\'h\\\\'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "30:   {\"$'h'el`cat /proc/self/status`lo\", \"$'$\\\\'h\\\\'el`cat /proc/self/status`lo'\"},",
          "31:   {\"hel\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
          "32:   {\"hel\\\\\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},",
          "33:   {\"hel\\\\'`cat /proc/self/status`lo\", \"$'hel\\\\'`cat /proc/self/status`lo'\"},",
          "34:  }",
          "35:  for _, c := range cases {",
          "36:   escaped := EscapeBashStr(c[0])",
          "37:   if escaped != c[1] {",
          "38:    t.Errorf(\"escapeBashVar(%s) = %s, want %s\", c[0], escaped, c[1])",
          "39:   }",
          "40:  }",
          "41: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}