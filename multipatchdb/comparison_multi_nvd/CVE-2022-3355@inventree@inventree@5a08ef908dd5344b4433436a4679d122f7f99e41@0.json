{
  "cve_id": "CVE-2022-3355",
  "cve_desc": "Cross-site Scripting (XSS) - Stored in GitHub repository inventree/inventree prior to 0.8.3.",
  "repo": "inventree/inventree",
  "patch_hash": "5a08ef908dd5344b4433436a4679d122f7f99e41",
  "patch_info": {
    "commit_hash": "5a08ef908dd5344b4433436a4679d122f7f99e41",
    "repo": "inventree/inventree",
    "commit_url": "https://github.com/inventree/inventree/commit/5a08ef908dd5344b4433436a4679d122f7f99e41",
    "files": [
      "InvenTree/InvenTree/models.py",
      "InvenTree/InvenTree/sanitizer.py",
      "InvenTree/InvenTree/tests.py"
    ],
    "message": "Add sanitation for SVG attachments (#3701)\n\n* add svg parser\n\n* move svg sanitation out into own file\n\n* move allowed elements out\n\n* add test for svg sanitation\n\n* make allowed elements configureable",
    "before_after_code_files": [
      "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py",
      "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py",
      "InvenTree/InvenTree/tests.py||InvenTree/InvenTree/tests.py"
    ]
  },
  "patch_diff": {
    "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py": [
      "File: InvenTree/InvenTree/models.py -> InvenTree/InvenTree/models.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import os",
      "5: import re",
      "6: from datetime import datetime",
      "8: from django.conf import settings",
      "9: from django.contrib.auth import get_user_model",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: from io import BytesIO",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24: import InvenTree.helpers",
      "25: from common.models import InvenTreeSetting",
      "26: from InvenTree.fields import InvenTreeURLField",
      "28: logger = logging.getLogger('inventree')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: from InvenTree.sanitizer import sanitize_svg",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "383:                 'link': _('Missing external link'),",
      "384:             })",
      "386:         super().save(*args, **kwargs)",
      "388:     def __str__(self):",
      "389:         \"\"\"Human name for attachment.\"\"\"",
      "390:         if self.attachment is not None:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "388:         if self.attachment.name.lower().endswith('.svg'):",
      "389:             self.attachment.file.file = self.clean_svg(self.attachment)",
      "393:     def clean_svg(self, field):",
      "394:         \"\"\"Sanitize SVG file before saving.\"\"\"",
      "395:         cleaned = sanitize_svg(field.file.read())",
      "396:         return BytesIO(bytes(cleaned, 'utf8'))",
      "",
      "---------------"
    ],
    "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py": [
      "File: InvenTree/InvenTree/sanitizer.py -> InvenTree/InvenTree/sanitizer.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"Functions to sanitize user input files.\"\"\"",
      "2: from bleach import clean",
      "3: from bleach.css_sanitizer import CSSSanitizer",
      "5: ALLOWED_ELEMENTS_SVG = [",
      "6:     'a', 'animate', 'animateColor', 'animateMotion',",
      "7:     'animateTransform', 'circle', 'defs', 'desc', 'ellipse', 'font-face',",
      "8:     'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',",
      "9:     'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph',",
      "10:     'mpath', 'path', 'polygon', 'polyline', 'radialGradient', 'rect',",
      "11:     'set', 'stop', 'svg', 'switch', 'text', 'title', 'tspan', 'use'",
      "12: ]",
      "14: ALLOWED_ATTRIBUTES_SVG = [",
      "15:     'accent-height', 'accumulate', 'additive', 'alphabetic',",
      "16:     'arabic-form', 'ascent', 'attributeName', 'attributeType',",
      "17:     'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',",
      "18:     'class', 'color', 'color-rendering', 'content', 'cx', 'cy', 'd', 'dx',",
      "19:     'dy', 'descent', 'display', 'dur', 'end', 'fill', 'fill-opacity',",
      "20:     'fill-rule', 'font-family', 'font-size', 'font-stretch', 'font-style',",
      "21:     'font-variant', 'font-weight', 'from', 'fx', 'fy', 'g1', 'g2',",
      "22:     'glyph-name', 'gradientUnits', 'hanging', 'height', 'horiz-adv-x',",
      "23:     'horiz-origin-x', 'id', 'ideographic', 'k', 'keyPoints',",
      "24:     'keySplines', 'keyTimes', 'lang', 'marker-end', 'marker-mid',",
      "25:     'marker-start', 'markerHeight', 'markerUnits', 'markerWidth',",
      "26:     'mathematical', 'max', 'min', 'name', 'offset', 'opacity', 'orient',",
      "27:     'origin', 'overline-position', 'overline-thickness', 'panose-1',",
      "28:     'path', 'pathLength', 'points', 'preserveAspectRatio', 'r', 'refX',",
      "29:     'refY', 'repeatCount', 'repeatDur', 'requiredExtensions',",
      "30:     'requiredFeatures', 'restart', 'rotate', 'rx', 'ry', 'slope',",
      "31:     'stemh', 'stemv', 'stop-color', 'stop-opacity',",
      "32:     'strikethrough-position', 'strikethrough-thickness', 'stroke',",
      "33:     'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',",
      "34:     'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity',",
      "35:     'stroke-width', 'systemLanguage', 'target', 'text-anchor', 'to',",
      "36:     'transform', 'type', 'u1', 'u2', 'underline-position',",
      "37:     'underline-thickness', 'unicode', 'unicode-range', 'units-per-em',",
      "38:     'values', 'version', 'viewBox', 'visibility', 'width', 'widths', 'x',",
      "39:     'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',",
      "40:     'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title',",
      "41:     'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'xmlns',",
      "42:     'xmlns:xlink', 'y', 'y1', 'y2', 'zoomAndPan', 'style'",
      "43: ]",
      "46: def sanitize_svg(file_data: str, strip: bool = True, elements: str = ALLOWED_ELEMENTS_SVG, attributes: str = ALLOWED_ATTRIBUTES_SVG) -> str:",
      "47:     \"\"\"Sanatize a SVG file.",
      "49:     Args:",
      "50:         file_data (str): SVG as string.",
      "51:         strip (bool, optional): Should invalid elements get removed. Defaults to True.",
      "52:         elements (str, optional): Allowed elements. Defaults to ALLOWED_ELEMENTS_SVG.",
      "53:         attributes (str, optional): Allowed attributes. Defaults to ALLOWED_ATTRIBUTES_SVG.",
      "55:     Returns:",
      "56:         str: Sanitzied SVG file.",
      "57:     \"\"\"",
      "59:     cleaned = clean(",
      "60:         file_data,",
      "61:         tags=elements,",
      "62:         attributes=attributes,",
      "63:         strip=strip,",
      "64:         strip_comments=strip,",
      "65:         css_sanitizer=CSSSanitizer()",
      "66:     )",
      "67:     return cleaned",
      "",
      "---------------"
    ],
    "InvenTree/InvenTree/tests.py||InvenTree/InvenTree/tests.py": [
      "File: InvenTree/InvenTree/tests.py -> InvenTree/InvenTree/tests.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: import InvenTree.tasks",
      "24: from common.models import InvenTreeSetting",
      "25: from common.settings import currency_codes",
      "26: from part.models import Part, PartCategory",
      "27: from stock.models import StockItem, StockLocation",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: from InvenTree.sanitizer import sanitize_svg",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "879:         for barcode, hash in hashing_tests.items():",
      "880:             self.assertEqual(InvenTree.helpers.hash_barcode(barcode), hash)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "884: class SanitizerTest(TestCase):",
      "885:     \"\"\"Simple tests for sanitizer functions.\"\"\"",
      "887:     def test_svg_sanitizer(self):",
      "888:         \"\"\"Test that SVGs are sanitized acordingly.\"\"\"",
      "889:         valid_string = \"\"\"<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"svg2\" height=\"400\" width=\"400\">{0}",
      "890:         <path id=\"path1\" d=\"m -151.78571,359.62883 v 112.76373 l 97.068507,-56.04253 V 303.14815 Z\" style=\"fill:#ddbc91;\"></path>",
      "891:         </svg>\"\"\"",
      "892:         dangerous_string = valid_string.format('<script>alert();</script>')",
      "894:         # Test that valid string",
      "895:         self.assertEqual(valid_string, sanitize_svg(valid_string))",
      "897:         # Test that invalid string is cleanded",
      "898:         self.assertNotEqual(dangerous_string, sanitize_svg(dangerous_string))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18d9ecd0f4d98f9230b3747217cdc35ea69d60c2",
      "candidate_info": {
        "commit_hash": "18d9ecd0f4d98f9230b3747217cdc35ea69d60c2",
        "repo": "inventree/inventree",
        "commit_url": "https://github.com/inventree/inventree/commit/18d9ecd0f4d98f9230b3747217cdc35ea69d60c2",
        "files": [
          "InvenTree/InvenTree/sanitizer.py"
        ],
        "message": "Tweak svg data cleaning: (#4941)\n\n- Decode data if passed as bytes",
        "before_after_code_files": [
          "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
          ],
          "candidate": [
            "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
          ]
        }
      },
      "candidate_diff": {
        "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py": [
          "File: InvenTree/InvenTree/sanitizer.py -> InvenTree/InvenTree/sanitizer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: ]",
          "47:     \"\"\"Sanatize a SVG file.",
          "49:     Args:",
          "",
          "[Removed Lines]",
          "46: def sanitize_svg(file_data: str, strip: bool = True, elements: str = ALLOWED_ELEMENTS_SVG, attributes: str = ALLOWED_ATTRIBUTES_SVG) -> str:",
          "",
          "[Added Lines]",
          "46: def sanitize_svg(file_data, strip: bool = True, elements: str = ALLOWED_ELEMENTS_SVG, attributes: str = ALLOWED_ATTRIBUTES_SVG) -> str:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:         str: Sanitzied SVG file.",
          "57:     \"\"\"",
          "59:     cleaned = clean(",
          "60:         file_data,",
          "61:         tags=elements,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     # Handle byte-encoded data",
          "60:     if type(file_data) == bytes:",
          "61:         file_data = file_data.decode('utf-8')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3f6b75b302cedf99694acaf5dc3e7489b35e180",
      "candidate_info": {
        "commit_hash": "c3f6b75b302cedf99694acaf5dc3e7489b35e180",
        "repo": "inventree/inventree",
        "commit_url": "https://github.com/inventree/inventree/commit/c3f6b75b302cedf99694acaf5dc3e7489b35e180",
        "files": [
          "InvenTree/InvenTree/models.py",
          "InvenTree/part/test_api.py"
        ],
        "message": "Attachment bug fix (#3818)\n\n* Prevent name check on null attachment file\n\n(cherry picked from commit c4ed1e23a01f278d696c2853337bdde0a682c6c5)\n\n* Unit testing for uploading attachments via API\n\n(cherry picked from commit 592548065f7b69f58b8aaaaea506e3ec653a63df)",
        "before_after_code_files": [
          "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py",
          "InvenTree/part/test_api.py||InvenTree/part/test_api.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py"
          ],
          "candidate": [
            "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py"
          ]
        }
      },
      "candidate_diff": {
        "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py": [
          "File: InvenTree/InvenTree/models.py -> InvenTree/InvenTree/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:                 'link': _('Missing external link'),",
          "386:             })",
          "389:             self.attachment.file.file = self.clean_svg(self.attachment)",
          "391:         super().save(*args, **kwargs)",
          "",
          "[Removed Lines]",
          "388:         if self.attachment.name.lower().endswith('.svg'):",
          "",
          "[Added Lines]",
          "388:         if self.attachment and self.attachment.name.lower().endswith('.svg'):",
          "",
          "---------------"
        ],
        "InvenTree/part/test_api.py||InvenTree/part/test_api.py": [
          "File: InvenTree/part/test_api.py -> InvenTree/part/test_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2350:         data = response.data",
          "2352:         self.assertEqual(data['data'], '15')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355: class PartAttachmentTest(InvenTreeAPITestCase):",
          "2356:     \"\"\"Unit tests for the PartAttachment API endpoint\"\"\"",
          "2358:     fixtures = [",
          "2359:         'category',",
          "2360:         'part',",
          "2361:         'location',",
          "2362:     ]",
          "2364:     def test_add_attachment(self):",
          "2365:         \"\"\"Test that we can create a new PartAttachment via the API\"\"\"",
          "2367:         url = reverse('api-part-attachment-list')",
          "2369:         # Upload without permission",
          "2370:         response = self.post(",
          "2371:             url,",
          "2372:             {},",
          "2373:             expected_code=403,",
          "2374:         )",
          "2376:         # Add required permission",
          "2377:         self.assignRole('part.add')",
          "2379:         # Upload without specifying part (will fail)",
          "2380:         response = self.post(",
          "2381:             url,",
          "2382:             {",
          "2383:                 'comment': 'Hello world',",
          "2384:             },",
          "2385:             expected_code=400",
          "2386:         )",
          "2388:         self.assertIn('This field is required', str(response.data['part']))",
          "2390:         # Upload without file OR link (will fail)",
          "2391:         response = self.post(",
          "2392:             url,",
          "2393:             {",
          "2394:                 'part': 1,",
          "2395:                 'comment': 'Hello world',",
          "2396:             },",
          "2397:             expected_code=400",
          "2398:         )",
          "2400:         self.assertIn('Missing file', str(response.data['attachment']))",
          "2401:         self.assertIn('Missing external link', str(response.data['link']))",
          "2403:         # Upload an invalid link (will fail)",
          "2404:         response = self.post(",
          "2405:             url,",
          "2406:             {",
          "2407:                 'part': 1,",
          "2408:                 'link': 'not-a-link.py',",
          "2409:             },",
          "2410:             expected_code=400",
          "2411:         )",
          "2413:         self.assertIn('Enter a valid URL', str(response.data['link']))",
          "2415:         link = 'https://www.google.com/test'",
          "2417:         # Upload a valid link (will pass)",
          "2418:         response = self.post(",
          "2419:             url,",
          "2420:             {",
          "2421:                 'part': 1,",
          "2422:                 'link': link,",
          "2423:                 'comment': 'Hello world',",
          "2424:             },",
          "2425:             expected_code=201",
          "2426:         )",
          "2428:         data = response.data",
          "2430:         self.assertEqual(data['part'], 1)",
          "2431:         self.assertEqual(data['link'], link)",
          "2432:         self.assertEqual(data['comment'], 'Hello world')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9d2b149c699574c54c171f85fd06d9b2f8268ed",
      "candidate_info": {
        "commit_hash": "f9d2b149c699574c54c171f85fd06d9b2f8268ed",
        "repo": "inventree/inventree",
        "commit_url": "https://github.com/inventree/inventree/commit/f9d2b149c699574c54c171f85fd06d9b2f8268ed",
        "files": [
          "InvenTree/InvenTree/models.py",
          "InvenTree/InvenTree/sanitizer.py"
        ],
        "message": "Add sanitation for SVG file uploads",
        "before_after_code_files": [
          "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py",
          "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py",
            "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
          ],
          "candidate": [
            "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py",
            "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py"
          ]
        }
      },
      "candidate_diff": {
        "InvenTree/InvenTree/models.py||InvenTree/InvenTree/models.py": [
          "File: InvenTree/InvenTree/models.py -> InvenTree/InvenTree/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import os",
          "5: import re",
          "6: from datetime import datetime",
          "8: from django.conf import settings",
          "9: from django.contrib.auth import get_user_model",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: from io import BytesIO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: import InvenTree.helpers",
          "25: from common.models import InvenTreeSetting",
          "26: from InvenTree.fields import InvenTreeURLField",
          "28: logger = logging.getLogger('inventree')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: from InvenTree.sanitizer import sanitize_svg",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:                 'link': _('Missing external link'),",
          "384:             })",
          "386:         super().save(*args, **kwargs)",
          "388:     def __str__(self):",
          "389:         \"\"\"Human name for attachment.\"\"\"",
          "390:         if self.attachment is not None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388:         if self.attachment.name.lower().endswith('.svg'):",
          "389:             self.attachment.file.file = self.clean_svg(self.attachment)",
          "393:     def clean_svg(self, field):",
          "394:         \"\"\"Sanitize SVG file before saving.\"\"\"",
          "395:         cleaned = sanitize_svg(field.file.read())",
          "396:         return BytesIO(bytes(cleaned, 'utf8'))",
          "",
          "---------------"
        ],
        "InvenTree/InvenTree/sanitizer.py||InvenTree/InvenTree/sanitizer.py": [
          "File: InvenTree/InvenTree/sanitizer.py -> InvenTree/InvenTree/sanitizer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Functions to sanitize user input files.\"\"\"",
          "2: from bleach import clean",
          "3: from bleach.css_sanitizer import CSSSanitizer",
          "5: ALLOWED_ELEMENTS_SVG = [",
          "6:     'a', 'animate', 'animateColor', 'animateMotion',",
          "7:     'animateTransform', 'circle', 'defs', 'desc', 'ellipse', 'font-face',",
          "8:     'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',",
          "9:     'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph',",
          "10:     'mpath', 'path', 'polygon', 'polyline', 'radialGradient', 'rect',",
          "11:     'set', 'stop', 'svg', 'switch', 'text', 'title', 'tspan', 'use'",
          "12: ]",
          "14: ALLOWED_ATTRIBUTES_SVG = [",
          "15:     'accent-height', 'accumulate', 'additive', 'alphabetic',",
          "16:     'arabic-form', 'ascent', 'attributeName', 'attributeType',",
          "17:     'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',",
          "18:     'class', 'color', 'color-rendering', 'content', 'cx', 'cy', 'd', 'dx',",
          "19:     'dy', 'descent', 'display', 'dur', 'end', 'fill', 'fill-opacity',",
          "20:     'fill-rule', 'font-family', 'font-size', 'font-stretch', 'font-style',",
          "21:     'font-variant', 'font-weight', 'from', 'fx', 'fy', 'g1', 'g2',",
          "22:     'glyph-name', 'gradientUnits', 'hanging', 'height', 'horiz-adv-x',",
          "23:     'horiz-origin-x', 'id', 'ideographic', 'k', 'keyPoints',",
          "24:     'keySplines', 'keyTimes', 'lang', 'marker-end', 'marker-mid',",
          "25:     'marker-start', 'markerHeight', 'markerUnits', 'markerWidth',",
          "26:     'mathematical', 'max', 'min', 'name', 'offset', 'opacity', 'orient',",
          "27:     'origin', 'overline-position', 'overline-thickness', 'panose-1',",
          "28:     'path', 'pathLength', 'points', 'preserveAspectRatio', 'r', 'refX',",
          "29:     'refY', 'repeatCount', 'repeatDur', 'requiredExtensions',",
          "30:     'requiredFeatures', 'restart', 'rotate', 'rx', 'ry', 'slope',",
          "31:     'stemh', 'stemv', 'stop-color', 'stop-opacity',",
          "32:     'strikethrough-position', 'strikethrough-thickness', 'stroke',",
          "33:     'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',",
          "34:     'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity',",
          "35:     'stroke-width', 'systemLanguage', 'target', 'text-anchor', 'to',",
          "36:     'transform', 'type', 'u1', 'u2', 'underline-position',",
          "37:     'underline-thickness', 'unicode', 'unicode-range', 'units-per-em',",
          "38:     'values', 'version', 'viewBox', 'visibility', 'width', 'widths', 'x',",
          "39:     'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',",
          "40:     'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title',",
          "41:     'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'xmlns',",
          "42:     'xmlns:xlink', 'y', 'y1', 'y2', 'zoomAndPan', 'style'",
          "43: ]",
          "46: def sanitize_svg(file_data: str, strip: bool = True, elements: str = ALLOWED_ELEMENTS_SVG, attributes: str = ALLOWED_ATTRIBUTES_SVG) -> str:",
          "47:     \"\"\"Sanatize a SVG file.",
          "49:     Args:",
          "50:         file_data (str): SVG as string.",
          "51:         strip (bool, optional): Should invalid elements get removed. Defaults to True.",
          "52:         elements (str, optional): Allowed elements. Defaults to ALLOWED_ELEMENTS_SVG.",
          "53:         attributes (str, optional): Allowed attributes. Defaults to ALLOWED_ATTRIBUTES_SVG.",
          "55:     Returns:",
          "56:         str: Sanitzied SVG file.",
          "57:     \"\"\"",
          "59:     cleaned = clean(",
          "60:         file_data,",
          "61:         tags=elements,",
          "62:         attributes=attributes,",
          "63:         strip=strip,",
          "64:         strip_comments=strip,",
          "65:         css_sanitizer=CSSSanitizer()",
          "66:     )",
          "67:     return cleaned",
          "",
          "---------------"
        ]
      }
    }
  ]
}