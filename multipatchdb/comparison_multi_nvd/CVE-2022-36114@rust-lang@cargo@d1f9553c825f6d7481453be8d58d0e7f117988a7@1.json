{
  "cve_id": "CVE-2022-36114",
  "cve_desc": "Cargo is a package manager for the rust programming language. It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a \"zip bomb\"), exhausting the disk space on the machine using Cargo to download the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain. We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here.",
  "repo": "rust-lang/cargo",
  "patch_hash": "d1f9553c825f6d7481453be8d58d0e7f117988a7",
  "patch_info": {
    "commit_hash": "d1f9553c825f6d7481453be8d58d0e7f117988a7",
    "repo": "rust-lang/cargo",
    "commit_url": "https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7",
    "files": [
      "src/cargo/sources/registry/mod.rs",
      "src/cargo/util/io.rs",
      "src/cargo/util/mod.rs"
    ],
    "message": "CVE-2022-36114: limit the maximum unpacked size of a crate to 512MB\n\nThis gives users of custom registries the same protections, using the\nsame size limit that crates.io uses.\n\n`LimitErrorReader` code copied from crates.io.",
    "before_after_code_files": [
      "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
      "src/cargo/util/io.rs||src/cargo/util/io.rs",
      "src/cargo/util/mod.rs||src/cargo/util/mod.rs"
    ]
  },
  "patch_diff": {
    "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
      "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "182: use crate::util::interning::InternedString;",
      "183: use crate::util::into_url::IntoUrl;",
      "184: use crate::util::network::PollExt;",
      "187: const PACKAGE_SOURCE_LOCK: &str = \".cargo-ok\";",
      "188: pub const CRATES_IO_INDEX: &str = \"https://github.com/rust-lang/crates.io-index\";",
      "",
      "[Removed Lines]",
      "185: use crate::util::{restricted_names, CargoResult, Config, Filesystem, OptVersionReq};",
      "",
      "[Added Lines]",
      "185: use crate::util::{",
      "186:     restricted_names, CargoResult, Config, Filesystem, LimitErrorReader, OptVersionReq,",
      "187: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "194: const PREFIX_TEMPLATE: &str = \"{prefix}\";",
      "195: const LOWER_PREFIX_TEMPLATE: &str = \"{lowerprefix}\";",
      "196: const CHECKSUM_TEMPLATE: &str = \"{sha256-checksum}\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199: const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "615:             }",
      "616:         }",
      "617:         let gz = GzDecoder::new(tarball);",
      "618:         let mut tar = Archive::new(gz);",
      "619:         let prefix = unpack_dir.file_name().unwrap();",
      "620:         let parent = unpack_dir.parent().unwrap();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "621:         let gz = LimitErrorReader::new(gz, MAX_UNPACK_SIZE);",
      "",
      "---------------"
    ],
    "src/cargo/util/io.rs||src/cargo/util/io.rs": [
      "File: src/cargo/util/io.rs -> src/cargo/util/io.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: use std::io::{self, Read, Take};",
      "3: #[derive(Debug)]",
      "4: pub struct LimitErrorReader<R> {",
      "5:     inner: Take<R>,",
      "6: }",
      "8: impl<R: Read> LimitErrorReader<R> {",
      "9:     pub fn new(r: R, limit: u64) -> LimitErrorReader<R> {",
      "10:         LimitErrorReader {",
      "11:             inner: r.take(limit),",
      "12:         }",
      "13:     }",
      "14: }",
      "16: impl<R: Read> Read for LimitErrorReader<R> {",
      "17:     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
      "18:         match self.inner.read(buf) {",
      "19:             Ok(0) if self.inner.limit() == 0 => Err(io::Error::new(",
      "20:                 io::ErrorKind::Other,",
      "21:                 \"maximum limit reached when reading\",",
      "22:             )),",
      "23:             e => e,",
      "24:         }",
      "25:     }",
      "26: }",
      "",
      "---------------"
    ],
    "src/cargo/util/mod.rs||src/cargo/util/mod.rs": [
      "File: src/cargo/util/mod.rs -> src/cargo/util/mod.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: pub use self::hex::{hash_u64, short_hash, to_hex};",
      "15: pub use self::into_url::IntoUrl;",
      "16: pub use self::into_url_with_base::IntoUrlWithBase;",
      "17: pub use self::lev_distance::{closest, closest_msg, lev_distance};",
      "18: pub use self::lockserver::{LockServer, LockServerClient, LockServerStarted};",
      "19: pub use self::progress::{Progress, ProgressStyle};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: pub(crate) use self::io::LimitErrorReader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44: pub mod interning;",
      "45: pub mod into_url;",
      "46: mod into_url_with_base;",
      "47: pub mod job;",
      "48: pub mod lev_distance;",
      "49: mod lockserver;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: mod io;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a40a0aa9221d6127940af7291f6f9768893f8222",
      "candidate_info": {
        "commit_hash": "a40a0aa9221d6127940af7291f6f9768893f8222",
        "repo": "rust-lang/cargo",
        "commit_url": "https://github.com/rust-lang/cargo/commit/a40a0aa9221d6127940af7291f6f9768893f8222",
        "files": [
          "Cargo.lock",
          "Cargo.toml",
          "src/cargo/sources/registry/mod.rs",
          "src/cargo/util/mod.rs",
          "tests/testsuite/registry.rs",
          "tests/testsuite/vendor.rs"
        ],
        "message": "fix: respect `umask` when unpacking `.crate` files\n\nWithout this, an attacker can leverage globally writable files buried\nin the `.crate` file. After a user downloaded and unpacked the file,\nthe attacker can then write malicous code to the downloaded sources.",
        "before_after_code_files": [
          "Cargo.lock||Cargo.lock",
          "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
          "src/cargo/util/mod.rs||src/cargo/util/mod.rs",
          "tests/testsuite/registry.rs||tests/testsuite/registry.rs",
          "tests/testsuite/vendor.rs||tests/testsuite/vendor.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
            "src/cargo/util/mod.rs||src/cargo/util/mod.rs"
          ],
          "candidate": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
            "src/cargo/util/mod.rs||src/cargo/util/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "Cargo.lock||Cargo.lock": [
          "File: Cargo.lock -> Cargo.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3124: [[package]]",
          "3125: name = \"tar\"",
          "3127: source = \"registry+https://github.com/rust-lang/crates.io-index\"",
          "3129: dependencies = [",
          "3130:  \"filetime\",",
          "3131:  \"libc\",",
          "",
          "[Removed Lines]",
          "3126: version = \"0.4.38\"",
          "3128: checksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"",
          "",
          "[Added Lines]",
          "3126: version = \"0.4.39\"",
          "3128: checksum = \"ec96d2ffad078296368d46ff1cb309be1c23c513b4ab0e22a45de0185275ac96\"",
          "",
          "---------------"
        ],
        "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
          "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: use std::collections::HashSet;",
          "187: use std::fs::{File, OpenOptions};",
          "189: use std::path::{Path, PathBuf};",
          "190: use std::task::{ready, Poll};",
          "",
          "[Removed Lines]",
          "188: use std::io::{self, Write};",
          "",
          "[Added Lines]",
          "188: use std::io;",
          "189: use std::io::Read;",
          "190: use std::io::Write;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "580:             let size_limit = max_unpack_size(self.config, tarball.metadata()?.len());",
          "581:             let gz = GzDecoder::new(tarball);",
          "582:             let gz = LimitErrorReader::new(gz, size_limit);",
          "584:         };",
          "585:         let prefix = unpack_dir.file_name().unwrap();",
          "586:         let parent = unpack_dir.parent().unwrap();",
          "",
          "[Removed Lines]",
          "583:             Archive::new(gz)",
          "",
          "[Added Lines]",
          "585:             let mut tar = Archive::new(gz);",
          "586:             set_mask(&mut tar);",
          "587:             tar",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:     u64::max(max_unpack_size, size * max_compression_ratio as u64)",
          "910: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923: #[allow(unused_variables)]",
          "924: fn set_mask<R: Read>(tar: &mut Archive<R>) {",
          "925:     #[cfg(unix)]",
          "926:     tar.set_mask(crate::util::get_umask());",
          "927: }",
          "",
          "---------------"
        ],
        "src/cargo/util/mod.rs||src/cargo/util/mod.rs": [
          "File: src/cargo/util/mod.rs -> src/cargo/util/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     })",
          "208: }",
          "210: #[cfg(test)]",
          "211: mod test {",
          "212:     use super::*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213: #[cfg(unix)]",
          "214: pub fn get_umask() -> u32 {",
          "215:     use std::sync::OnceLock;",
          "216:     static UMASK: OnceLock<libc::mode_t> = OnceLock::new();",
          "222:         let umask = libc::umask(0o022);",
          "223:         libc::umask(umask);",
          "224:         umask",
          "225:     }) as u32 // it is u16 on macos",
          "226: }",
          "",
          "---------------"
        ],
        "tests/testsuite/registry.rs||tests/testsuite/registry.rs": [
          "File: tests/testsuite/registry.rs -> tests/testsuite/registry.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:         .unwrap()",
          "3453:     };",
          "3456:     let metadata = fs::metadata(src_file_path(\"src/lib.rs\")).unwrap();",
          "3458:     let metadata = fs::metadata(src_file_path(\"example.sh\")).unwrap();",
          "3460: }",
          "",
          "[Removed Lines]",
          "3457:     assert_eq!(metadata.mode() & 0o777, 0o666);",
          "3459:     assert_eq!(metadata.mode() & 0o777, 0o777);",
          "",
          "[Added Lines]",
          "3455:     let umask = cargo::util::get_umask();",
          "3457:     assert_eq!(metadata.mode() & 0o777, 0o666 & !umask);",
          "3459:     assert_eq!(metadata.mode() & 0o777, 0o777 & !umask);",
          "",
          "---------------"
        ],
        "tests/testsuite/vendor.rs||tests/testsuite/vendor.rs": [
          "File: tests/testsuite/vendor.rs -> tests/testsuite/vendor.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:     p.cargo(\"vendor --respect-source-config\").run();",
          "1054:     let metadata = fs::metadata(p.root().join(\"vendor/bar/src/lib.rs\")).unwrap();",
          "1056:     let metadata = fs::metadata(p.root().join(\"vendor/bar/example.sh\")).unwrap();",
          "1058: }",
          "1060: #[cargo_test]",
          "",
          "[Removed Lines]",
          "1055:     assert_eq!(metadata.mode() & 0o777, 0o644);",
          "1057:     assert_eq!(metadata.mode() & 0o777, 0o755);",
          "",
          "[Added Lines]",
          "1054:     let umask = cargo::util::get_umask();",
          "1056:     assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);",
          "1058:     assert_eq!(metadata.mode() & 0o777, 0o755 & !umask);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "747cb6f3eafe19f3e32f32e93327be0b27587c19",
      "candidate_info": {
        "commit_hash": "747cb6f3eafe19f3e32f32e93327be0b27587c19",
        "repo": "rust-lang/cargo",
        "commit_url": "https://github.com/rust-lang/cargo/commit/747cb6f3eafe19f3e32f32e93327be0b27587c19",
        "files": [
          "src/cargo/core/compiler/build_context/target_info.rs",
          "src/cargo/core/compiler/compilation.rs",
          "src/cargo/core/compiler/context/compilation_files.rs",
          "src/cargo/core/compiler/standard_lib.rs",
          "src/cargo/core/profiles.rs",
          "src/cargo/ops/cargo_compile/mod.rs",
          "src/cargo/ops/cargo_doc.rs",
          "src/cargo/ops/cargo_install.rs",
          "src/cargo/ops/cargo_new.rs",
          "src/cargo/ops/common_for_install_and_uninstall.rs",
          "src/cargo/ops/fix.rs",
          "src/cargo/ops/registry.rs",
          "src/cargo/sources/config.rs",
          "src/cargo/sources/git/known_hosts.rs",
          "src/cargo/sources/git/utils.rs",
          "src/cargo/sources/registry/mod.rs",
          "src/cargo/util/config/mod.rs",
          "src/cargo/util/diagnostic_server.rs",
          "src/cargo/util/progress.rs"
        ],
        "message": "change from std::env::var(_os) to Config::get_env(_os) in places where config is available",
        "before_after_code_files": [
          "src/cargo/core/compiler/build_context/target_info.rs||src/cargo/core/compiler/build_context/target_info.rs",
          "src/cargo/core/compiler/compilation.rs||src/cargo/core/compiler/compilation.rs",
          "src/cargo/core/compiler/context/compilation_files.rs||src/cargo/core/compiler/context/compilation_files.rs",
          "src/cargo/core/compiler/standard_lib.rs||src/cargo/core/compiler/standard_lib.rs",
          "src/cargo/core/profiles.rs||src/cargo/core/profiles.rs",
          "src/cargo/ops/cargo_compile/mod.rs||src/cargo/ops/cargo_compile/mod.rs",
          "src/cargo/ops/cargo_doc.rs||src/cargo/ops/cargo_doc.rs",
          "src/cargo/ops/cargo_install.rs||src/cargo/ops/cargo_install.rs",
          "src/cargo/ops/cargo_new.rs||src/cargo/ops/cargo_new.rs",
          "src/cargo/ops/common_for_install_and_uninstall.rs||src/cargo/ops/common_for_install_and_uninstall.rs",
          "src/cargo/ops/fix.rs||src/cargo/ops/fix.rs",
          "src/cargo/ops/registry.rs||src/cargo/ops/registry.rs",
          "src/cargo/sources/config.rs||src/cargo/sources/config.rs",
          "src/cargo/sources/git/known_hosts.rs||src/cargo/sources/git/known_hosts.rs",
          "src/cargo/sources/git/utils.rs||src/cargo/sources/git/utils.rs",
          "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
          "src/cargo/util/config/mod.rs||src/cargo/util/config/mod.rs",
          "src/cargo/util/diagnostic_server.rs||src/cargo/util/diagnostic_server.rs",
          "src/cargo/util/progress.rs||src/cargo/util/progress.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ],
          "candidate": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/cargo/core/compiler/build_context/target_info.rs||src/cargo/core/compiler/build_context/target_info.rs": [
          "File: src/cargo/core/compiler/build_context/target_info.rs -> src/cargo/core/compiler/build_context/target_info.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use serde::{Deserialize, Serialize};",
          "21: use std::cell::RefCell;",
          "22: use std::collections::hash_map::{Entry, HashMap};",
          "24: use std::path::{Path, PathBuf};",
          "25: use std::str::{self, FromStr};",
          "",
          "[Removed Lines]",
          "23: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:         Ok(rustflags)",
          "736:     } else if let Some(rustflags) =",
          "737:         rustflags_from_target(config, host_triple, target_cfg, kind, flags)?",
          "",
          "[Removed Lines]",
          "734:     if let Some(rustflags) = rustflags_from_env(flags) {",
          "",
          "[Added Lines]",
          "733:     if let Some(rustflags) = rustflags_from_env(config, flags) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:         if a.is_empty() {",
          "754:             return Some(Vec::new());",
          "755:         }",
          "",
          "[Removed Lines]",
          "749: fn rustflags_from_env(flags: Flags) -> Option<Vec<String>> {",
          "752:     if let Ok(a) = env::var(format!(\"CARGO_ENCODED_{}\", flags.as_env())) {",
          "",
          "[Added Lines]",
          "748: fn rustflags_from_env(config: &Config, flags: Flags) -> Option<Vec<String>> {",
          "751:     if let Ok(a) = config.get_env(format!(\"CARGO_ENCODED_{}\", flags.as_env())) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "757:     }",
          "761:         let args = a",
          "762:             .split(' ')",
          "763:             .map(str::trim)",
          "",
          "[Removed Lines]",
          "760:     if let Ok(a) = env::var(flags.as_env()) {",
          "",
          "[Added Lines]",
          "759:     if let Ok(a) = config.get_env(flags.as_env()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "855:     pub rustc: Rustc,",
          "859:     requested_kinds: Vec<CompileKind>,",
          "",
          "[Removed Lines]",
          "858:     config: &'cfg Config,",
          "",
          "[Added Lines]",
          "857:     pub config: &'cfg Config,",
          "",
          "---------------"
        ],
        "src/cargo/core/compiler/compilation.rs||src/cargo/core/compiler/compilation.rs": [
          "File: src/cargo/core/compiler/compilation.rs -> src/cargo/core/compiler/compilation.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use std::collections::{BTreeSet, HashMap};",
          "5: use std::ffi::{OsStr, OsString};",
          "6: use std::path::PathBuf;",
          "",
          "[Removed Lines]",
          "4: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:                 search_path.push(PathBuf::from(home).join(\"lib\"));",
          "300:             }",
          "301:             search_path.push(PathBuf::from(\"/usr/local/lib\"));",
          "",
          "[Removed Lines]",
          "298:             if let Some(home) = env::var_os(\"HOME\") {",
          "",
          "[Added Lines]",
          "297:             if let Some(home) = self.config.get_env_os(\"HOME\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:                 continue;",
          "363:             }",
          "366:                 cmd.env(key, value.resolve(self.config));",
          "367:             }",
          "368:         }",
          "",
          "[Removed Lines]",
          "365:             if value.is_force() || env::var_os(key).is_none() {",
          "",
          "[Added Lines]",
          "364:             if value.is_force() || self.config.get_env_os(key).is_none() {",
          "",
          "---------------"
        ],
        "src/cargo/core/compiler/context/compilation_files.rs||src/cargo/core/compiler/context/compilation_files.rs": [
          "File: src/cargo/core/compiler/context/compilation_files.rs -> src/cargo/core/compiler/context/compilation_files.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use std::collections::HashMap;",
          "5: use std::fmt;",
          "6: use std::hash::{Hash, Hasher};",
          "7: use std::path::{Path, PathBuf};",
          "",
          "[Removed Lines]",
          "4: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "632:         channel.hash(&mut hasher);",
          "633:     }",
          "",
          "[Removed Lines]",
          "631:     if let Ok(ref channel) = env::var(\"__CARGO_DEFAULT_LIB_METADATA\") {",
          "",
          "[Added Lines]",
          "630:     if let Ok(ref channel) = cx.bcx.config.get_env(\"__CARGO_DEFAULT_LIB_METADATA\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "717:         || (unit.target.is_executable() && short_name == \"wasm32-unknown-emscripten\")",
          "718:         || (unit.target.is_executable() && short_name.contains(\"msvc\")))",
          "719:         && unit.pkg.package_id().source_id().is_path()",
          "721:     {",
          "722:         return false;",
          "723:     }",
          "",
          "[Removed Lines]",
          "720:         && env::var(\"__CARGO_DEFAULT_LIB_METADATA\").is_err()",
          "",
          "[Added Lines]",
          "719:         && bcx.config.get_env(\"__CARGO_DEFAULT_LIB_METADATA\").is_err()",
          "",
          "---------------"
        ],
        "src/cargo/core/compiler/standard_lib.rs||src/cargo/core/compiler/standard_lib.rs": [
          "File: src/cargo/core/compiler/standard_lib.rs -> src/cargo/core/compiler/standard_lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: use crate::util::errors::CargoResult;",
          "12: use crate::Config;",
          "13: use std::collections::{HashMap, HashSet};",
          "15: use std::path::PathBuf;",
          "17: use super::BuildConfig;",
          "",
          "[Removed Lines]",
          "14: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222: }",
          "224: fn detect_sysroot_src_path(target_data: &RustcTargetData<'_>) -> CargoResult<PathBuf> {",
          "226:         return Ok(s.into());",
          "227:     }",
          "",
          "[Removed Lines]",
          "225:     if let Some(s) = env::var_os(\"__CARGO_TESTS_ONLY_SRC_ROOT\") {",
          "",
          "[Added Lines]",
          "224:     if let Some(s) = target_data.config.get_env_os(\"__CARGO_TESTS_ONLY_SRC_ROOT\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:              library, try:\\n        rustup component add rust-src\",",
          "242:             lock",
          "243:         );",
          "245:             Ok(rustup_toolchain) => {",
          "246:                 anyhow::bail!(\"{} --toolchain {}\", msg, rustup_toolchain);",
          "247:             }",
          "",
          "[Removed Lines]",
          "244:         match env::var(\"RUSTUP_TOOLCHAIN\") {",
          "",
          "[Added Lines]",
          "243:         match target_data.config.get_env(\"RUSTUP_TOOLCHAIN\") {",
          "",
          "---------------"
        ],
        "src/cargo/core/profiles.rs||src/cargo/core/profiles.rs": [
          "File: src/cargo/core/profiles.rs -> src/cargo/core/profiles.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: use anyhow::{bail, Context as _};",
          "32: use std::collections::{BTreeMap, HashMap, HashSet};",
          "33: use std::hash::Hash;",
          "",
          "[Removed Lines]",
          "34: use std::{cmp, env, fmt, hash};",
          "",
          "[Added Lines]",
          "34: use std::{cmp, fmt, hash};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: impl Profiles {",
          "63:     pub fn new(ws: &Workspace<'_>, requested_profile: InternedString) -> CargoResult<Profiles> {",
          "64:         let config = ws.config();",
          "66:             Some(v) => Some(v == \"1\"),",
          "67:             None => config.build_config()?.incremental,",
          "68:         };",
          "",
          "[Removed Lines]",
          "65:         let incremental = match env::var_os(\"CARGO_INCREMENTAL\") {",
          "",
          "[Added Lines]",
          "65:         let incremental = match config.get_env_os(\"CARGO_INCREMENTAL\") {",
          "",
          "---------------"
        ],
        "src/cargo/ops/cargo_compile/mod.rs||src/cargo/ops/cargo_compile/mod.rs": [
          "File: src/cargo/ops/cargo_compile/mod.rs -> src/cargo/ops/cargo_compile/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:         | CompileMode::Check { .. }",
          "216:         | CompileMode::Bench",
          "217:         | CompileMode::RunCustomBuild => {",
          "219:                 config.shell().warn(",
          "220:                     \"Cargo does not read `RUST_FLAGS` environment variable. Did you mean `RUSTFLAGS`?\",",
          "221:                 )?;",
          "222:             }",
          "223:         }",
          "224:         CompileMode::Doc { .. } | CompileMode::Doctest | CompileMode::Docscrape => {",
          "226:                 config.shell().warn(",
          "227:                     \"Cargo does not read `RUSTDOC_FLAGS` environment variable. Did you mean `RUSTDOCFLAGS`?\"",
          "228:                 )?;",
          "",
          "[Removed Lines]",
          "218:             if std::env::var(\"RUST_FLAGS\").is_ok() {",
          "225:             if std::env::var(\"RUSTDOC_FLAGS\").is_ok() {",
          "",
          "[Added Lines]",
          "218:             if ws.config().get_env(\"RUST_FLAGS\").is_ok() {",
          "225:             if ws.config().get_env(\"RUSTDOC_FLAGS\").is_ok() {",
          "",
          "---------------"
        ],
        "src/cargo/ops/cargo_doc.rs||src/cargo/ops/cargo_doc.rs": [
          "File: src/cargo/ops/cargo_doc.rs -> src/cargo/ops/cargo_doc.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::core::{Shell, Workspace};",
          "2: use crate::ops;",
          "4: use crate::util::CargoResult;",
          "5: use std::path::Path;",
          "6: use std::path::PathBuf;",
          "",
          "[Removed Lines]",
          "3: use crate::util::config::PathAndArgs;",
          "",
          "[Added Lines]",
          "3: use crate::util::config::{Config, PathAndArgs};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:             let mut shell = ws.config().shell();",
          "39:             shell.status(\"Opening\", path.display())?;",
          "41:         }",
          "42:     }",
          "",
          "[Removed Lines]",
          "40:             open_docs(&path, &mut shell, config_browser)?;",
          "",
          "[Added Lines]",
          "40:             open_docs(&path, &mut shell, config_browser, ws.config())?;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:     path: &Path,",
          "49:     shell: &mut Shell,",
          "50:     config_browser: Option<(PathBuf, Vec<String>)>,",
          "51: ) -> CargoResult<()> {",
          "52:     let browser =",
          "55:     match browser {",
          "56:         Some((browser, initial_args)) => {",
          "",
          "[Removed Lines]",
          "53:         config_browser.or_else(|| Some((PathBuf::from(std::env::var_os(\"BROWSER\")?), Vec::new())));",
          "",
          "[Added Lines]",
          "51:     config: &Config,",
          "54:         config_browser.or_else(|| Some((PathBuf::from(config.get_env_os(\"BROWSER\")?), Vec::new())));",
          "",
          "---------------"
        ],
        "src/cargo/ops/cargo_install.rs||src/cargo/ops/cargo_install.rs": [
          "File: src/cargo/ops/cargo_install.rs -> src/cargo/ops/cargo_install.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:     if installed_anything {",
          "708:         let dst_in_path = env::split_paths(&path).any(|path| path == dst);",
          "710:         if !dst_in_path {",
          "",
          "[Removed Lines]",
          "707:         let path = env::var_os(\"PATH\").unwrap_or_default();",
          "",
          "[Added Lines]",
          "707:         let path = config.get_env_os(\"PATH\").unwrap_or_default();",
          "",
          "---------------"
        ],
        "src/cargo/ops/cargo_new.rs||src/cargo/ops/cargo_new.rs": [
          "File: src/cargo/ops/cargo_new.rs -> src/cargo/ops/cargo_new.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: pub fn init(opts: &NewOptions, config: &Config) -> CargoResult<NewProjectKind> {",
          "467:         return Err(crate::util::internal(\"internal error test\"));",
          "468:     }",
          "",
          "[Removed Lines]",
          "466:     if std::env::var_os(\"__CARGO_TEST_INTERNAL_ERROR\").is_some() {",
          "",
          "[Added Lines]",
          "466:     if config.get_env_os(\"__CARGO_TEST_INTERNAL_ERROR\").is_some() {",
          "",
          "---------------"
        ],
        "src/cargo/ops/common_for_install_and_uninstall.rs||src/cargo/ops/common_for_install_and_uninstall.rs": [
          "File: src/cargo/ops/common_for_install_and_uninstall.rs -> src/cargo/ops/common_for_install_and_uninstall.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:     let config_root = config.get_path(\"install.root\")?;",
          "507:     Ok(flag",
          "508:         .map(PathBuf::from)",
          "510:         .or_else(move || config_root.map(|v| v.val))",
          "511:         .map(Filesystem::new)",
          "512:         .unwrap_or_else(|| config.home().clone()))",
          "",
          "[Removed Lines]",
          "509:         .or_else(|| env::var_os(\"CARGO_INSTALL_ROOT\").map(PathBuf::from))",
          "",
          "[Added Lines]",
          "509:         .or_else(|| config.get_env_os(\"CARGO_INSTALL_ROOT\").map(PathBuf::from))",
          "",
          "---------------"
        ],
        "src/cargo/ops/fix.rs||src/cargo/ops/fix.rs": [
          "File: src/cargo/ops/fix.rs -> src/cargo/ops/fix.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:     let args = FixArgs::get()?;",
          "355:     trace!(\"cargo-fix as rustc got file {:?}\", args.file);",
          "358:         .map(PathBuf::from)",
          "359:         .ok();",
          "360:     let mut rustc = ProcessBuilder::new(&args.rustc).wrapped(workspace_rustc.as_ref());",
          "",
          "[Removed Lines]",
          "357:     let workspace_rustc = std::env::var(\"RUSTC_WORKSPACE_WRAPPER\")",
          "",
          "[Added Lines]",
          "357:     let workspace_rustc = config",
          "358:         .get_env(\"RUSTC_WORKSPACE_WRAPPER\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:                     file: path.clone(),",
          "389:                     fixes: file.fixes_applied,",
          "390:                 }",
          "392:             }",
          "393:         }",
          "",
          "[Removed Lines]",
          "391:                 .post()?;",
          "",
          "[Added Lines]",
          "392:                 .post(config)?;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "405:         if !output.status.success() {",
          "407:                 for (path, file) in fixes.files.iter() {",
          "408:                     debug!(\"reverting {:?} due to errors\", path);",
          "409:                     paths::write(path, &file.original_code)?;",
          "",
          "[Removed Lines]",
          "406:             if env::var_os(BROKEN_CODE_ENV).is_none() {",
          "",
          "[Added Lines]",
          "407:             if config.get_env_os(BROKEN_CODE_ENV).is_none() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "420:                 }",
          "421:                 krate",
          "422:             };",
          "424:         }",
          "425:     }",
          "",
          "[Removed Lines]",
          "423:             log_failed_fix(krate, &output.stderr, output.status)?;",
          "",
          "[Added Lines]",
          "424:             log_failed_fix(config, krate, &output.stderr, output.status)?;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "511:     let mut fixes = FixedCrate::default();",
          "512:     let mut last_fix_counts = HashMap::new();",
          "514:         .ok()",
          "515:         .and_then(|n| n.parse().ok())",
          "516:         .unwrap_or(4);",
          "",
          "[Removed Lines]",
          "513:     let iterations = env::var(\"CARGO_FIX_MAX_RETRIES\")",
          "",
          "[Added Lines]",
          "514:     let iterations = config",
          "515:         .get_env(\"CARGO_FIX_MAX_RETRIES\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "547:                 file: path.clone(),",
          "548:                 message: error,",
          "549:             }",
          "551:         }",
          "552:     }",
          "",
          "[Removed Lines]",
          "550:             .post()?;",
          "",
          "[Added Lines]",
          "552:             .post(config)?;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "580:         debug!(",
          "581:             \"rustfixing `{:?}` failed, rustc exited with {:?}\",",
          "582:             filename,",
          "",
          "[Removed Lines]",
          "579:     if !output.status.success() && env::var_os(BROKEN_CODE_ENV).is_none() {",
          "",
          "[Added Lines]",
          "581:     if !output.status.success() && config.get_env_os(BROKEN_CODE_ENV).is_none() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "585:         return Ok(());",
          "586:     }",
          "589:         .map(|_| rustfix::Filter::Everything)",
          "590:         .unwrap_or(rustfix::Filter::MachineApplicableOnly);",
          "",
          "[Removed Lines]",
          "588:     let fix_mode = env::var_os(\"__CARGO_FIX_YOLO\")",
          "",
          "[Added Lines]",
          "590:     let fix_mode = config",
          "591:         .get_env_os(\"__CARGO_FIX_YOLO\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "710:     process::exit(status.code().unwrap_or(3));",
          "711: }",
          "714:     let stderr = str::from_utf8(stderr).context(\"failed to parse rustc stderr as utf-8\")?;",
          "716:     let diagnostics = stderr",
          "",
          "[Removed Lines]",
          "713: fn log_failed_fix(krate: Option<String>, stderr: &[u8], status: ExitStatus) -> CargoResult<()> {",
          "",
          "[Added Lines]",
          "716: fn log_failed_fix(",
          "717:     config: &Config,",
          "718:     krate: Option<String>,",
          "719:     stderr: &[u8],",
          "720:     status: ExitStatus,",
          "721: ) -> CargoResult<()> {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "745:         errors,",
          "746:         abnormal_exit,",
          "747:     }",
          "750:     Ok(())",
          "751: }",
          "",
          "[Removed Lines]",
          "748:     .post()?;",
          "",
          "[Added Lines]",
          "756:     .post(config)?;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "895:                 return Message::Fixing {",
          "896:                     file: self.file.display().to_string(),",
          "897:                 }",
          "899:                 .and(Ok(true));",
          "900:             }",
          "901:         };",
          "",
          "[Removed Lines]",
          "898:                 .post()",
          "",
          "[Added Lines]",
          "906:                 .post(config)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "922:                 message,",
          "923:                 edition: to_edition.previous().unwrap(),",
          "924:             }",
          "926:             .and(Ok(false)); // Do not run rustfix for this the edition.",
          "927:         }",
          "928:         let from_edition = self.enabled_edition.unwrap_or(Edition::Edition2015);",
          "",
          "[Removed Lines]",
          "925:             .post()",
          "",
          "[Added Lines]",
          "933:             .post(config)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "937:                 message,",
          "938:                 edition: to_edition,",
          "939:             }",
          "941:         } else {",
          "942:             Message::Migrating {",
          "943:                 file: self.file.display().to_string(),",
          "944:                 from_edition,",
          "945:                 to_edition,",
          "946:             }",
          "948:         }",
          "949:         .and(Ok(true))",
          "950:     }",
          "",
          "[Removed Lines]",
          "940:             .post()",
          "947:             .post()",
          "",
          "[Added Lines]",
          "948:             .post(config)",
          "955:             .post(config)",
          "",
          "---------------"
        ],
        "src/cargo/ops/registry.rs||src/cargo/ops/registry.rs": [
          "File: src/cargo/ops/registry.rs -> src/cargo/ops/registry.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::collections::{BTreeMap, HashSet};",
          "2: use std::fs::File;",
          "3: use std::io::{self, BufRead};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: use std::cmp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6: use std::str;",
          "7: use std::task::Poll;",
          "8: use std::time::Duration;",
          "11: use anyhow::{anyhow, bail, format_err, Context as _};",
          "12: use cargo_util::paths;",
          "",
          "[Removed Lines]",
          "9: use std::{cmp, env};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596: pub fn needs_custom_http_transport(config: &Config) -> CargoResult<bool> {",
          "597:     Ok(http_proxy_exists(config)?",
          "598:         || *config.http_config()? != Default::default()",
          "600: }",
          "",
          "[Removed Lines]",
          "599:         || env::var_os(\"HTTP_TIMEOUT\").is_some())",
          "",
          "[Added Lines]",
          "599:         || config.get_env_os(\"HTTP_TIMEOUT\").is_some())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "722: impl HttpTimeout {",
          "723:     pub fn new(config: &Config) -> CargoResult<HttpTimeout> {",
          "727:             .timeout",
          "729:             .unwrap_or(30);",
          "730:         Ok(HttpTimeout {",
          "731:             dur: Duration::new(seconds, 0),",
          "",
          "[Removed Lines]",
          "724:         let config = config.http_config()?;",
          "725:         let low_speed_limit = config.low_speed_limit.unwrap_or(10);",
          "726:         let seconds = config",
          "728:             .or_else(|| env::var(\"HTTP_TIMEOUT\").ok().and_then(|s| s.parse().ok()))",
          "",
          "[Added Lines]",
          "724:         let http_config = config.http_config()?;",
          "725:         let low_speed_limit = http_config.low_speed_limit.unwrap_or(10);",
          "726:         let seconds = http_config",
          "728:             .or_else(|| {",
          "729:                 config",
          "730:                     .get_env(\"HTTP_TIMEOUT\")",
          "731:                     .ok()",
          "732:                     .and_then(|s| s.parse().ok())",
          "733:             })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "779:     } else {",
          "780:         Ok([\"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\"]",
          "781:             .iter()",
          "783:     }",
          "784: }",
          "",
          "[Removed Lines]",
          "782:             .any(|v| env::var(v).is_ok()))",
          "",
          "[Added Lines]",
          "787:             .any(|v| config.get_env(v).is_ok()))",
          "",
          "---------------"
        ],
        "src/cargo/sources/config.rs||src/cargo/sources/config.rs": [
          "File: src/cargo/sources/config.rs -> src/cargo/sources/config.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:                 },",
          "101:             )?;",
          "102:         }",
          "104:             base.add(",
          "105:                 CRATES_IO_REGISTRY,",
          "106:                 SourceConfig {",
          "",
          "[Removed Lines]",
          "103:         if let Ok(url) = std::env::var(\"__CARGO_TEST_CRATES_IO_URL_DO_NOT_USE_THIS\") {",
          "",
          "[Added Lines]",
          "103:         if let Ok(url) = config.get_env(\"__CARGO_TEST_CRATES_IO_URL_DO_NOT_USE_THIS\") {",
          "",
          "---------------"
        ],
        "src/cargo/sources/git/known_hosts.rs||src/cargo/sources/git/known_hosts.rs": [
          "File: src/cargo/sources/git/known_hosts.rs -> src/cargo/sources/git/known_hosts.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: use git2::cert::{Cert, SshHostKeyType};",
          "24: use git2::CertificateCheckStatus;",
          "25: use hmac::Mac;",
          "",
          "[Removed Lines]",
          "22: use crate::util::config::{Definition, Value};",
          "",
          "[Added Lines]",
          "22: use crate::util::config::{Config, Definition, Value};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: pub fn certificate_check(",
          "114:     cert: &Cert<'_>,",
          "115:     host: &str,",
          "116:     port: Option<u16>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     config: &Config,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         _ => host.to_string(),",
          "130:     };",
          "133:         Ok(()) => {",
          "134:             return Ok(CertificateCheckStatus::CertificateOk);",
          "135:         }",
          "",
          "[Removed Lines]",
          "132:     let err_msg = match check_ssh_known_hosts(host_key, &host_maybe_port, config_known_hosts) {",
          "",
          "[Added Lines]",
          "133:     let err_msg = match check_ssh_known_hosts(",
          "134:         config,",
          "135:         host_key,",
          "136:         &host_maybe_port,",
          "137:         config_known_hosts,",
          "138:     ) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "147:             if port.is_some()",
          "148:                 && !matches!(port, Some(22))",
          "150:             {",
          "151:                 return Ok(CertificateCheckStatus::CertificateOk);",
          "152:             }",
          "",
          "[Removed Lines]",
          "149:                 && check_ssh_known_hosts(host_key, host, config_known_hosts).is_ok()",
          "",
          "[Added Lines]",
          "155:                 && check_ssh_known_hosts(config, host_key, host, config_known_hosts).is_ok()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290: fn check_ssh_known_hosts(",
          "291:     cert_host_key: &git2::cert::CertHostkey<'_>,",
          "292:     host: &str,",
          "293:     config_known_hosts: Option<&Vec<Value<String>>>,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:     config: &Config,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:     let mut known_hosts = Vec::new();",
          "303:         if !path.exists() {",
          "304:             continue;",
          "305:         }",
          "",
          "[Removed Lines]",
          "302:     for path in known_host_files() {",
          "",
          "[Added Lines]",
          "309:     for path in known_host_files(config) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "464: }",
          "468:     let mut result = Vec::new();",
          "470:     } else if cfg!(unix) {",
          "471:         result.push(PathBuf::from(\"/etc/ssh/ssh_known_hosts\"));",
          "472:     } else if cfg!(windows) {",
          "",
          "[Removed Lines]",
          "467: fn known_host_files() -> Vec<PathBuf> {",
          "469:     if std::env::var_os(\"__CARGO_TEST_DISABLE_GLOBAL_KNOWN_HOST\").is_some() {",
          "",
          "[Added Lines]",
          "474: fn known_host_files(config: &Config) -> Vec<PathBuf> {",
          "476:     if config",
          "477:         .get_env_os(\"__CARGO_TEST_DISABLE_GLOBAL_KNOWN_HOST\")",
          "478:         .is_some()",
          "479:     {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "479:             let mut progdata = PathBuf::from(progdata);",
          "480:             progdata.push(\"ssh\");",
          "481:             progdata.push(\"ssh_known_hosts\");",
          "",
          "[Removed Lines]",
          "478:         if let Some(progdata) = std::env::var_os(\"ProgramData\") {",
          "",
          "[Added Lines]",
          "488:         if let Some(progdata) = config.get_env_os(\"ProgramData\") {",
          "",
          "---------------"
        ],
        "src/cargo/sources/git/utils.rs||src/cargo/sources/git/utils.rs": [
          "File: src/cargo/sources/git/utils.rs -> src/cargo/sources/git/utils.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use serde::ser;",
          "13: use serde::Serialize;",
          "14: use std::borrow::Cow;",
          "16: use std::fmt;",
          "17: use std::path::{Path, PathBuf};",
          "18: use std::process::Command;",
          "",
          "[Removed Lines]",
          "15: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "476: where",
          "477:     F: FnMut(&mut git2::Credentials<'_>) -> CargoResult<T>,",
          "478: {",
          "",
          "[Removed Lines]",
          "475: fn with_authentication<T, F>(url: &str, cfg: &git2::Config, mut f: F) -> CargoResult<T>",
          "",
          "[Added Lines]",
          "474: fn with_authentication<T, F>(",
          "475:     cargo_config: &Config,",
          "476:     url: &str,",
          "477:     cfg: &git2::Config,",
          "478:     mut f: F,",
          "479: ) -> CargoResult<T>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "577:     if ssh_username_requested {",
          "578:         debug_assert!(res.is_err());",
          "579:         let mut attempts = vec![String::from(\"git\")];",
          "581:             attempts.push(s);",
          "582:         }",
          "583:         if let Some(ref s) = cred_helper.username {",
          "",
          "[Removed Lines]",
          "580:         if let Ok(s) = env::var(\"USER\").or_else(|_| env::var(\"USERNAME\")) {",
          "",
          "[Added Lines]",
          "584:         if let Ok(s) = cargo_config",
          "585:             .get_env(\"USER\")",
          "586:             .or_else(|_| cargo_config.get_env(\"USERNAME\"))",
          "587:         {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "730:     let config_known_hosts = ssh_config.and_then(|ssh| ssh.known_hosts.as_ref());",
          "731:     let diagnostic_home_config = config.diagnostic_home_config();",
          "732:     network::with_retry(config, || {",
          "734:             let port = Url::parse(url).ok().and_then(|url| url.port());",
          "735:             let mut last_update = Instant::now();",
          "736:             let mut rcb = git2::RemoteCallbacks::new();",
          "",
          "[Removed Lines]",
          "733:         with_authentication(url, git_config, |f| {",
          "",
          "[Added Lines]",
          "740:         with_authentication(config, url, git_config, |f| {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:             rcb.credentials(f);",
          "741:             rcb.certificate_check(|cert, host| {",
          "742:                 super::known_hosts::certificate_check(",
          "743:                     cert,",
          "744:                     host,",
          "745:                     port,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:                     config,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "829:     clean_repo_temp_files(repo);",
          "",
          "[Removed Lines]",
          "827:     maybe_gc_repo(repo)?;",
          "",
          "[Added Lines]",
          "835:     maybe_gc_repo(repo, config)?;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "984:     let entries = match repo.path().join(\"objects/pack\").read_dir() {",
          "",
          "[Removed Lines]",
          "981: fn maybe_gc_repo(repo: &mut git2::Repository) -> CargoResult<()> {",
          "",
          "[Added Lines]",
          "989: fn maybe_gc_repo(repo: &mut git2::Repository, config: &Config) -> CargoResult<()> {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "988:             return Ok(());",
          "989:         }",
          "990:     };",
          "992:         .ok()",
          "993:         .and_then(|s| s.parse::<usize>().ok())",
          "994:         .unwrap_or(100);",
          "",
          "[Removed Lines]",
          "991:     let max = env::var(\"__CARGO_PACKFILE_LIMIT\")",
          "",
          "[Added Lines]",
          "999:     let max = config",
          "1000:         .get_env(\"__CARGO_PACKFILE_LIMIT\")",
          "",
          "---------------"
        ],
        "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
          "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "636:         }",
          "637:         dst.create_dir()?;",
          "638:         let mut tar = {",
          "640:             let gz = GzDecoder::new(tarball);",
          "641:             let gz = LimitErrorReader::new(gz, size_limit);",
          "642:             Archive::new(gz)",
          "",
          "[Removed Lines]",
          "639:             let size_limit = max_unpack_size(tarball.metadata()?.len());",
          "",
          "[Added Lines]",
          "639:             let size_limit = max_unpack_size(self.config, tarball.metadata()?.len());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "884:     const SIZE_VAR: &str = \"__CARGO_TEST_MAX_UNPACK_SIZE\";",
          "885:     const RATIO_VAR: &str = \"__CARGO_TEST_MAX_UNPACK_RATIO\";",
          "889:             .unwrap()",
          "890:             .parse()",
          "891:             .expect(\"a max unpack size in bytes\")",
          "892:     } else {",
          "893:         MAX_UNPACK_SIZE",
          "894:     };",
          "898:             .unwrap()",
          "899:             .parse()",
          "900:             .expect(\"a max compression ratio in bytes\")",
          "",
          "[Removed Lines]",
          "883: fn max_unpack_size(size: u64) -> u64 {",
          "886:     let max_unpack_size = if cfg!(debug_assertions) && std::env::var(SIZE_VAR).is_ok() {",
          "888:         std::env::var(SIZE_VAR)",
          "895:     let max_compression_ratio = if cfg!(debug_assertions) && std::env::var(RATIO_VAR).is_ok() {",
          "897:         std::env::var(RATIO_VAR)",
          "",
          "[Added Lines]",
          "883: fn max_unpack_size(config: &Config, size: u64) -> u64 {",
          "886:     let max_unpack_size = if cfg!(debug_assertions) && config.get_env(SIZE_VAR).is_ok() {",
          "888:         config",
          "889:             .get_env(SIZE_VAR)",
          "896:     let max_compression_ratio = if cfg!(debug_assertions) && config.get_env(RATIO_VAR).is_ok() {",
          "898:         config",
          "899:             .get_env(RATIO_VAR)",
          "",
          "---------------"
        ],
        "src/cargo/util/config/mod.rs||src/cargo/util/config/mod.rs": [
          "File: src/cargo/util/config/mod.rs -> src/cargo/util/config/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     pub fn cargo_exe(&self) -> CargoResult<&Path> {",
          "441:         self.cargo_exe",
          "442:             .try_borrow_with(|| {",
          "449:                         .map(PathBuf::from)",
          "450:                         .ok_or_else(|| anyhow!(\"$CARGO not set\"))?",
          "451:                         .canonicalize()?;",
          "452:                     Ok(exe)",
          "455:                 fn from_current_exe() -> CargoResult<PathBuf> {",
          "",
          "[Removed Lines]",
          "443:                 fn from_env() -> CargoResult<PathBuf> {",
          "448:                     let exe = env::var_os(crate::CARGO_ENV)",
          "453:                 }",
          "",
          "[Added Lines]",
          "443:                 let from_env = || -> CargoResult<PathBuf> {",
          "448:                     let exe = self",
          "449:                         .get_env_os(crate::CARGO_ENV)",
          "454:                 };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1626:     ) -> Option<PathBuf> {",
          "1627:         let var = tool.to_uppercase();",
          "1630:             Some(tool_path) => {",
          "1631:                 let maybe_relative = match tool_path.to_str() {",
          "1632:                     Some(s) => s.contains('/') || s.contains('\\\\'),",
          "",
          "[Removed Lines]",
          "1629:         match env::var_os(&var) {",
          "",
          "[Added Lines]",
          "1630:         match self.get_env_os(&var) {",
          "",
          "---------------"
        ],
        "src/cargo/util/diagnostic_server.rs||src/cargo/util/diagnostic_server.rs": [
          "File: src/cargo/util/diagnostic_server.rs -> src/cargo/util/diagnostic_server.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: use std::collections::HashSet;",
          "6: use std::io::{BufReader, Read, Write};",
          "7: use std::net::{Shutdown, SocketAddr, TcpListener, TcpStream};",
          "8: use std::sync::atomic::{AtomicBool, Ordering};",
          "",
          "[Removed Lines]",
          "5: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: }",
          "63: impl Message {",
          "67:         let mut client =",
          "68:             TcpStream::connect(&addr).context(\"failed to connect to parent diagnostics target\")?;",
          "",
          "[Removed Lines]",
          "64:     pub fn post(&self) -> Result<(), Error> {",
          "65:         let addr =",
          "66:             env::var(DIAGNOSTICS_SERVER_VAR).context(\"diagnostics collector misconfigured\")?;",
          "",
          "[Added Lines]",
          "63:     pub fn post(&self, config: &Config) -> Result<(), Error> {",
          "64:         let addr = config",
          "65:             .get_env(DIAGNOSTICS_SERVER_VAR)",
          "66:             .context(\"diagnostics collector misconfigured\")?;",
          "",
          "---------------"
        ],
        "src/cargo/util/progress.rs||src/cargo/util/progress.rs": [
          "File: src/cargo/util/progress.rs -> src/cargo/util/progress.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use std::cmp;",
          "3: use std::time::{Duration, Instant};",
          "5: use crate::core::shell::Verbosity;",
          "",
          "[Removed Lines]",
          "2: use std::env;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:             Ok(term) => term == \"dumb\",",
          "49:             Err(_) => false,",
          "50:         };",
          "",
          "[Removed Lines]",
          "47:         let dumb = match env::var(\"TERM\") {",
          "",
          "[Added Lines]",
          "46:         let dumb = match cfg.get_env(\"TERM\") {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de7cd31eac21b98506c6b7f5c8731d4ac7303f8d",
      "candidate_info": {
        "commit_hash": "de7cd31eac21b98506c6b7f5c8731d4ac7303f8d",
        "repo": "rust-lang/cargo",
        "commit_url": "https://github.com/rust-lang/cargo/commit/de7cd31eac21b98506c6b7f5c8731d4ac7303f8d",
        "files": [
          "src/cargo/sources/registry/mod.rs",
          "tests/testsuite/registry.rs"
        ],
        "message": "aware of compression ratio for unpack size limit",
        "before_after_code_files": [
          "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
          "tests/testsuite/registry.rs||tests/testsuite/registry.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ],
          "candidate": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
          "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: const LOWER_PREFIX_TEMPLATE: &str = \"{lowerprefix}\";",
          "198: const CHECKSUM_TEMPLATE: &str = \"{sha256-checksum}\";",
          "199: const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: const MAX_COMPRESSION_RATIO: usize = 20; // 20:1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:                 return Ok(unpack_dir.to_path_buf());",
          "618:             }",
          "619:         }",
          "623:         let prefix = unpack_dir.file_name().unwrap();",
          "624:         let parent = unpack_dir.parent().unwrap();",
          "625:         for entry in tar.entries()? {",
          "",
          "[Removed Lines]",
          "620:         let gz = GzDecoder::new(tarball);",
          "621:         let gz = LimitErrorReader::new(gz, max_unpack_size());",
          "622:         let mut tar = Archive::new(gz);",
          "",
          "[Added Lines]",
          "621:         let mut tar = {",
          "622:             let size_limit = max_unpack_size(tarball.metadata()?.len());",
          "623:             let gz = GzDecoder::new(tarball);",
          "624:             let gz = LimitErrorReader::new(gz, size_limit);",
          "625:             Archive::new(gz)",
          "626:         };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "835:     }",
          "836: }",
          "844:             .unwrap()",
          "845:             .parse()",
          "846:             .expect(\"a max unpack size in bytes\")",
          "847:     } else {",
          "848:         MAX_UNPACK_SIZE",
          "850: }",
          "852: fn make_dep_prefix(name: &str) -> String {",
          "",
          "[Removed Lines]",
          "839: #[inline]",
          "840: fn max_unpack_size() -> u64 {",
          "841:     const VAR: &str = \"__CARGO_TEST_MAX_UNPACK_SIZE\";",
          "842:     if cfg!(debug_assertions) && std::env::var(VAR).is_ok() {",
          "843:         std::env::var(VAR)",
          "849:     }",
          "",
          "[Added Lines]",
          "860: fn max_unpack_size(size: u64) -> u64 {",
          "861:     const SIZE_VAR: &str = \"__CARGO_TEST_MAX_UNPACK_SIZE\";",
          "862:     const RATIO_VAR: &str = \"__CARGO_TEST_MAX_UNPACK_RATIO\";",
          "863:     let max_unpack_size = if cfg!(debug_assertions) && std::env::var(SIZE_VAR).is_ok() {",
          "865:         std::env::var(SIZE_VAR)",
          "871:     };",
          "872:     let max_compression_ratio = if cfg!(debug_assertions) && std::env::var(RATIO_VAR).is_ok() {",
          "874:         std::env::var(RATIO_VAR)",
          "875:             .unwrap()",
          "876:             .parse()",
          "877:             .expect(\"a max compresssion ratio in bytes\")",
          "878:     } else {",
          "879:         MAX_COMPRESSION_RATIO",
          "880:     };",
          "882:     u64::max(max_unpack_size, size * max_compression_ratio as u64)",
          "",
          "---------------"
        ],
        "tests/testsuite/registry.rs||tests/testsuite/registry.rs": [
          "File: tests/testsuite/registry.rs -> tests/testsuite/registry.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2750:         .file(\"src/main.rs\", \"fn main() {}\")",
          "2751:         .build();",
          "2753:     Package::new(\"bar\", \"0.0.1\").publish();",
          "2755:     p.cargo(\"build\")",
          "2756:         .env(\"__CARGO_TEST_MAX_UNPACK_SIZE\", \"8\") // hit 8 bytes limit and boom!",
          "2757:         .with_status(101)",
          "2758:         .with_stderr(",
          "2759:             \"\\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2758:         .env(\"__CARGO_TEST_MAX_UNPACK_RATIO\", \"0\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2771: Caused by:",
          "2772:   maximum limit reached when reading",
          "2773: \",",
          "2774:         )",
          "2775:         .run();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2775: \",",
          "2776:         )",
          "2777:         .run();",
          "2780:     p.cargo(\"build\")",
          "2781:         .env(\"__CARGO_TEST_MAX_UNPACK_SIZE\", \"8\")",
          "2782:         .with_stderr(",
          "2783:             \"\\",
          "2784: [COMPILING] bar v0.0.1",
          "2785: [COMPILING] foo v0.0.1 ([..])",
          "2786: [FINISHED] dev [..]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "366e871778a5efdbf74e4b0a5413558b0cac13da",
      "candidate_info": {
        "commit_hash": "366e871778a5efdbf74e4b0a5413558b0cac13da",
        "repo": "rust-lang/cargo",
        "commit_url": "https://github.com/rust-lang/cargo/commit/366e871778a5efdbf74e4b0a5413558b0cac13da",
        "files": [
          "src/cargo/sources/registry/index.rs",
          "src/cargo/sources/registry/mod.rs"
        ],
        "message": "use the `hash` method not a copy paste of its code",
        "before_after_code_files": [
          "src/cargo/sources/registry/index.rs||src/cargo/sources/registry/index.rs",
          "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ],
          "candidate": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/cargo/sources/registry/index.rs||src/cargo/sources/registry/index.rs": [
          "File: src/cargo/sources/registry/index.rs -> src/cargo/sources/registry/index.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:         &'a mut self,",
          "435:         name: &str,",
          "436:         req: &'b OptVersionReq,",
          "",
          "[Removed Lines]",
          "433:     pub fn summaries<'a, 'b>(",
          "",
          "[Added Lines]",
          "433:     fn summaries<'a, 'b>(",
          "",
          "---------------"
        ],
        "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
          "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "208: use crate::sources::PathSource;",
          "209: use crate::util::hex;",
          "210: use crate::util::network::PollExt;",
          "",
          "[Removed Lines]",
          "211: use crate::util::{",
          "212:     restricted_names, CargoResult, Config, Filesystem, LimitErrorReader, OptVersionReq,",
          "213: };",
          "",
          "[Added Lines]",
          "211: use crate::util::{restricted_names, CargoResult, Config, Filesystem, LimitErrorReader};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:             .index",
          "697:             .expect(\"a downloaded dep now pending!?\")",
          "700:             .expect(\"summary not found\");",
          "707:         Ok(pkg)",
          "708:     }",
          "",
          "[Removed Lines]",
          "693:         let req = OptVersionReq::exact(package.version());",
          "694:         let summary_with_cksum = self",
          "696:             .summaries(&package.name(), &req, &mut *self.ops)?",
          "698:             .filter(|s| s.package_id().version() == package.version())",
          "699:             .next()",
          "701:         if let Some(cksum) = summary_with_cksum.as_summary().checksum() {",
          "702:             pkg.manifest_mut()",
          "703:                 .summary_mut()",
          "704:                 .set_checksum(cksum.to_string());",
          "705:         }",
          "",
          "[Added Lines]",
          "691:         let cksum = self",
          "693:             .hash(package, &mut *self.ops)",
          "696:         pkg.manifest_mut()",
          "697:             .summary_mut()",
          "698:             .set_checksum(cksum.to_string());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fafa69a4d291d37b4f1d409cb262d0b38340278",
      "candidate_info": {
        "commit_hash": "4fafa69a4d291d37b4f1d409cb262d0b38340278",
        "repo": "rust-lang/cargo",
        "commit_url": "https://github.com/rust-lang/cargo/commit/4fafa69a4d291d37b4f1d409cb262d0b38340278",
        "files": [
          "src/cargo/sources/registry/mod.rs",
          "src/cargo/util/mod.rs",
          "tests/testsuite/registry.rs",
          "tests/testsuite/vendor.rs"
        ],
        "message": "fix: respect `umask` when unpacking `.crate` files\n\nWithout this, an attacker can leverage globally writable files buried\nin the `.crate` file. After a user downloaded and unpacked the file,\nthe attacker can then write malicous code to the downloaded sources.",
        "before_after_code_files": [
          "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
          "src/cargo/util/mod.rs||src/cargo/util/mod.rs",
          "tests/testsuite/registry.rs||tests/testsuite/registry.rs",
          "tests/testsuite/vendor.rs||tests/testsuite/vendor.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
            "src/cargo/util/mod.rs||src/cargo/util/mod.rs"
          ],
          "candidate": [
            "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs",
            "src/cargo/util/mod.rs||src/cargo/util/mod.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/cargo/sources/registry/mod.rs||src/cargo/sources/registry/mod.rs": [
          "File: src/cargo/sources/registry/mod.rs -> src/cargo/sources/registry/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: use std::collections::HashSet;",
          "187: use std::fs::{File, OpenOptions};",
          "189: use std::path::{Path, PathBuf};",
          "190: use std::task::{ready, Poll};",
          "",
          "[Removed Lines]",
          "188: use std::io::{self, Write};",
          "",
          "[Added Lines]",
          "188: use std::io;",
          "189: use std::io::Read;",
          "190: use std::io::Write;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "580:             let size_limit = max_unpack_size(self.config, tarball.metadata()?.len());",
          "581:             let gz = GzDecoder::new(tarball);",
          "582:             let gz = LimitErrorReader::new(gz, size_limit);",
          "584:         };",
          "585:         let prefix = unpack_dir.file_name().unwrap();",
          "586:         let parent = unpack_dir.parent().unwrap();",
          "",
          "[Removed Lines]",
          "583:             Archive::new(gz)",
          "",
          "[Added Lines]",
          "585:             let mut tar = Archive::new(gz);",
          "586:             set_mask(&mut tar);",
          "587:             tar",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "909:     u64::max(max_unpack_size, size * max_compression_ratio as u64)",
          "910: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923: #[allow(unused_variables)]",
          "924: fn set_mask<R: Read>(tar: &mut Archive<R>) {",
          "925:     #[cfg(unix)]",
          "926:     tar.set_mask(crate::util::get_umask());",
          "927: }",
          "",
          "---------------"
        ],
        "src/cargo/util/mod.rs||src/cargo/util/mod.rs": [
          "File: src/cargo/util/mod.rs -> src/cargo/util/mod.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     })",
          "209: }",
          "211: #[cfg(test)]",
          "212: mod test {",
          "213:     use super::*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: #[cfg(unix)]",
          "215: pub fn get_umask() -> u32 {",
          "216:     use std::sync::OnceLock;",
          "217:     static UMASK: OnceLock<libc::mode_t> = OnceLock::new();",
          "223:         let umask = libc::umask(0o022);",
          "224:         libc::umask(umask);",
          "225:         umask",
          "226:     }) as u32 // it is u16 on macos",
          "227: }",
          "",
          "---------------"
        ],
        "tests/testsuite/registry.rs||tests/testsuite/registry.rs": [
          "File: tests/testsuite/registry.rs -> tests/testsuite/registry.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3452:         .unwrap()",
          "3453:     };",
          "3456:     let metadata = fs::metadata(src_file_path(\"src/lib.rs\")).unwrap();",
          "3458:     let metadata = fs::metadata(src_file_path(\"example.sh\")).unwrap();",
          "3460: }",
          "",
          "[Removed Lines]",
          "3457:     assert_eq!(metadata.mode() & 0o777, 0o666);",
          "3459:     assert_eq!(metadata.mode() & 0o777, 0o777);",
          "",
          "[Added Lines]",
          "3455:     let umask = cargo::util::get_umask();",
          "3457:     assert_eq!(metadata.mode() & 0o777, 0o666 & !umask);",
          "3459:     assert_eq!(metadata.mode() & 0o777, 0o777 & !umask);",
          "",
          "---------------"
        ],
        "tests/testsuite/vendor.rs||tests/testsuite/vendor.rs": [
          "File: tests/testsuite/vendor.rs -> tests/testsuite/vendor.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1052:     p.cargo(\"vendor --respect-source-config\").run();",
          "1054:     let metadata = fs::metadata(p.root().join(\"vendor/bar/src/lib.rs\")).unwrap();",
          "1056:     let metadata = fs::metadata(p.root().join(\"vendor/bar/example.sh\")).unwrap();",
          "1058: }",
          "1060: #[cargo_test]",
          "",
          "[Removed Lines]",
          "1055:     assert_eq!(metadata.mode() & 0o777, 0o644);",
          "1057:     assert_eq!(metadata.mode() & 0o777, 0o755);",
          "",
          "[Added Lines]",
          "1054:     let umask = cargo::util::get_umask();",
          "1056:     assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);",
          "1058:     assert_eq!(metadata.mode() & 0o777, 0o755 & !umask);",
          "",
          "---------------"
        ]
      }
    }
  ]
}