{
  "cve_id": "CVE-2021-44528",
  "cve_desc": "A open redirect vulnerability exists in Action Pack >= 6.0.0 that could allow an attacker to craft a \"X-Forwarded-Host\" headers in combination with certain \"allowed host\" formats can cause the Host Authorization middleware in Action Pack to redirect users to a malicious website.",
  "repo": "rails/rails",
  "patch_hash": "0fccfb9a3097a9c4260c791f1a40b128517e7815",
  "patch_info": {
    "commit_hash": "0fccfb9a3097a9c4260c791f1a40b128517e7815",
    "repo": "rails/rails",
    "commit_url": "https://github.com/rails/rails/commit/0fccfb9a3097a9c4260c791f1a40b128517e7815",
    "files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb"
    ],
    "message": "Fix invalid forwarded host vulnerability\n\nPrior to this commit, it was possible to pass an unvalidated host\nthrough the `X-Forwarded-Host` header. If the value of the header\nwas prefixed with a invalid domain character (for example a `/`),\nit was always accepted as the actual host of that request.\n\nSince this host is used for all url helpers, an attacker could change\ngenerated links and redirects. If the header is set to\n`X-Forwarded-Host: //evil.hacker`, a redirect will be send to\n`https:////evil.hacker/`. Browsers will ignore these four slashes\nand redirect the user.\n\n[CVE-2021-44528]",
    "before_after_code_files": [
      "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
    ]
  },
  "patch_diff": {
    "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
      "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:         def sanitize_string(host)",
      "54:           if host.start_with?(\".\")",
      "56:           else",
      "57:             /\\A#{Regexp.escape host}\\z/i",
      "58:           end",
      "",
      "[Removed Lines]",
      "55:             /\\A(.+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
      "",
      "[Added Lines]",
      "55:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:     end",
      "122:     private",
      "127:       def authorized?(request)",
      "131:         @permissions.allows?(origin_host) && (forwarded_host.blank? || @permissions.allows?(forwarded_host))",
      "132:       end",
      "",
      "[Removed Lines]",
      "123:       HOSTNAME = /[a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9.:]+\\]/i",
      "124:       VALID_ORIGIN_HOST = /\\A(#{HOSTNAME})(?::\\d+)?\\z/",
      "125:       VALID_FORWARDED_HOST = /(?:\\A|,[ ]?)(#{HOSTNAME})(?::\\d+)?\\z/",
      "128:         origin_host = request.get_header(\"HTTP_HOST\")&.slice(VALID_ORIGIN_HOST, 1) || \"\"",
      "129:         forwarded_host = request.x_forwarded_host&.slice(VALID_FORWARDED_HOST, 1) || \"\"",
      "",
      "[Added Lines]",
      "124:         origin_host = request.get_header(\"HTTP_HOST\")",
      "125:         forwarded_host = request.x_forwarded_host&.split(/,\\s?/)&.last",
      "",
      "---------------"
    ],
    "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
      "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "167:     assert_match \"Blocked host: 127.0.0.1\", response.body",
      "168:   end",
      "170:   test \"does not consider IP addresses in X-FORWARDED-HOST spoofed when disabled\" do",
      "171:     @app = ActionDispatch::HostAuthorization.new(App, nil)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "170:   test \"blocks requests with spoofed relative X-FORWARDED-HOST\" do",
      "171:     @app = ActionDispatch::HostAuthorization.new(App, [\"www.example.com\"])",
      "173:     get \"/\", env: {",
      "174:       \"HTTP_X_FORWARDED_HOST\" => \"//randomhost.com\",",
      "175:       \"HOST\" => \"www.example.com\",",
      "176:       \"action_dispatch.show_detailed_exceptions\" => true",
      "177:     }",
      "179:     assert_response :forbidden",
      "180:     assert_match \"Blocked host: //randomhost.com\", response.body",
      "181:   end",
      "183:   test \"forwarded secondary hosts are allowed when permitted\" do",
      "184:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "186:     get \"/\", env: {",
      "187:       \"HTTP_X_FORWARDED_HOST\" => \"example.com, my-sub.domain.com\",",
      "188:       \"HOST\" => \"domain.com\",",
      "189:     }",
      "191:     assert_response :ok",
      "192:     assert_equal \"Success\", body",
      "193:   end",
      "195:   test \"forwarded secondary hosts are blocked when mismatch\" do",
      "196:     @app = ActionDispatch::HostAuthorization.new(App, \"domain.com\")",
      "198:     get \"/\", env: {",
      "199:       \"HTTP_X_FORWARDED_HOST\" => \"domain.com, evil.com\",",
      "200:       \"HOST\" => \"domain.com\",",
      "201:       \"action_dispatch.show_detailed_exceptions\" => true",
      "202:     }",
      "204:     assert_response :forbidden",
      "205:     assert_match \"Blocked host: evil.com\", response.body",
      "206:   end",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:     assert_match \"Blocked host: sub.domain.com\", response.body",
      "206:   end",
      "208:   test \"forwarded hosts are allowed when permitted\" do",
      "209:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "211:     get \"/\", env: {",
      "213:       \"HOST\" => \"domain.com\",",
      "214:     }",
      "",
      "[Removed Lines]",
      "212:       \"HTTP_X_FORWARDED_HOST\" => \"sub.domain.com\",",
      "",
      "[Added Lines]",
      "246:   test \"sub-sub domains should not be permitted\" do",
      "247:     @app = ActionDispatch::HostAuthorization.new(App, \".domain.com\")",
      "249:     get \"/\", env: {",
      "250:       \"HOST\" => \"secondary.sub.domain.com\",",
      "251:       \"action_dispatch.show_detailed_exceptions\" => true",
      "252:     }",
      "254:     assert_response :forbidden",
      "255:     assert_match \"Blocked host: secondary.sub.domain.com\", response.body",
      "256:   end",
      "262:       \"HTTP_X_FORWARDED_HOST\" => \"my-sub.domain.com\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "217:     assert_equal \"Success\", body",
      "218:   end",
      "220:   test \"exclude matches allow any host\" do",
      "221:     @app = ActionDispatch::HostAuthorization.new(App, \"only.com\", exclude: ->(req) { req.path == \"/foo\" })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "270:   test \"lots of NG hosts\" do",
      "271:     ng_hosts = [",
      "272:       \"hacker%E3%80%82com\",",
      "273:       \"hacker%00.com\",",
      "274:       \"www.theirsite.com@yoursite.com\",",
      "275:       \"hacker.com/test/\",",
      "276:       \"hacker%252ecom\",",
      "277:       \".hacker.com\",",
      "278:       \"/\\/\\/hacker.com/\",",
      "279:       \"/hacker.com\",",
      "280:       \"../hacker.com\",",
      "281:       \".hacker.com\",",
      "282:       \"@hacker.com\",",
      "283:       \"hacker.com\",",
      "284:       \"hacker.com%23@example.com\",",
      "285:       \"hacker.com/.jpg\",",
      "286:       \"hacker.com\\texample.com/\",",
      "287:       \"hacker.com/example.com\",",
      "288:       \"hacker.com\\@example.com\",",
      "289:       \"hacker.com/example.com\",",
      "290:       \"hacker.com/\"",
      "291:     ]",
      "293:     @app = ActionDispatch::HostAuthorization.new(App, \"example.com\")",
      "295:     ng_hosts.each do |host|",
      "296:       get \"/\", env: {",
      "297:         \"HTTP_X_FORWARDED_HOST\" => host,",
      "298:         \"HOST\" => \"example.com\",",
      "299:         \"action_dispatch.show_detailed_exceptions\" => true",
      "300:       }",
      "302:       assert_response :forbidden",
      "303:       assert_match \"Blocked host: #{host}\", response.body",
      "304:     end",
      "305:   end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c681aaba811f968e48fb8f81a807d0259dbf8c76",
      "candidate_info": {
        "commit_hash": "c681aaba811f968e48fb8f81a807d0259dbf8c76",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/c681aaba811f968e48fb8f81a807d0259dbf8c76",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb",
          "railties/lib/rails/application/configuration.rb"
        ],
        "message": "Allow any allowed host with port\n\nAll allowed host should be allowed if they are being accessed using a\nport.\n\nFixes #43870.",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb",
          "railties/lib/rails/application/configuration.rb||railties/lib/rails/application/configuration.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   # responds with <tt>403 Forbidden</tt>. The body of the response contains debug info",
          "17:   # if +config.consider_all_requests_local+ is set to true, otherwise the body is empty.",
          "18:   class HostAuthorization",
          "21:     class Permissions # :nodoc:",
          "22:       def initialize(hosts)",
          "",
          "[Removed Lines]",
          "19:     ALLOWED_HOSTS_IN_DEVELOPMENT = [\".localhost\", /\\A([a-z0-9-]+\\.)?localhost:\\d+\\z/, IPAddr.new(\"0.0.0.0/0\"), IPAddr.new(\"::/0\")]",
          "",
          "[Added Lines]",
          "19:     ALLOWED_HOSTS_IN_DEVELOPMENT = [\".localhost\", IPAddr.new(\"0.0.0.0/0\"), IPAddr.new(\"::/0\")]",
          "20:     PORT_REGEX = /(?::\\d+)?/.freeze",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         end",
          "51:         def sanitize_regexp(host)",
          "53:         end",
          "55:         def sanitize_string(host)",
          "56:           if host.start_with?(\".\")",
          "58:           else",
          "60:           end",
          "61:         end",
          "62:     end",
          "",
          "[Removed Lines]",
          "52:           /\\A#{host}\\z/",
          "57:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}\\z/i",
          "59:             /\\A#{Regexp.escape host}\\z/i",
          "",
          "[Added Lines]",
          "53:           /\\A#{host}#{PORT_REGEX}\\z/",
          "58:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}#{PORT_REGEX}\\z/i",
          "60:             /\\A#{Regexp.escape host}#{PORT_REGEX}\\z/i",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     assert_match \"Success\", response.body",
          "167:   end",
          "169:   test \"blocks requests with spoofed X-FORWARDED-HOST\" do",
          "170:     @app = ActionDispatch::HostAuthorization.new(App, [IPAddr.new(\"127.0.0.1\")])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   test \"hosts with port works\" do",
          "170:     @app = ActionDispatch::HostAuthorization.new(App, [\"host.test\"])",
          "172:     get \"/\", env: {",
          "173:       \"HOST\" => \"host.test:3000\",",
          "174:       \"action_dispatch.show_detailed_exceptions\" => true",
          "175:     }",
          "177:     assert_response :ok",
          "178:     assert_match \"Success\", response.body",
          "179:   end",
          "",
          "---------------"
        ],
        "railties/lib/rails/application/configuration.rb||railties/lib/rails/application/configuration.rb": [
          "File: railties/lib/rails/application/configuration.rb -> railties/lib/rails/application/configuration.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:         @filter_parameters                       = []",
          "34:         @filter_redirect                         = []",
          "35:         @helpers_paths                           = []",
          "38:         @host_authorization                      = {}",
          "39:         @public_file_server                      = ActiveSupport::OrderedOptions.new",
          "40:         @public_file_server.enabled              = true",
          "",
          "[Removed Lines]",
          "36:         @hosts                                   = Rails.env.development? ? ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT : []",
          "37:         @hosts.concat(ENV[\"RAILS_DEVELOPMENT_HOSTS\"].to_s.split(\",\").map(&:strip)) if Rails.env.development?",
          "",
          "[Added Lines]",
          "36:         if Rails.env.development?",
          "37:           @hosts = ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT +",
          "38:             ENV[\"RAILS_DEVELOPMENT_HOSTS\"].to_s.split(\",\").map(&:strip)",
          "39:         else",
          "40:           @hosts = []",
          "41:         end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a4275fa31ccec018f4ef5bb1fcb87655b048b07",
      "candidate_info": {
        "commit_hash": "3a4275fa31ccec018f4ef5bb1fcb87655b048b07",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/3a4275fa31ccec018f4ef5bb1fcb87655b048b07",
        "files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb"
        ],
        "message": "Allow IPs with port in the HostAuthorization middleware\n\nWhen a host was an IP with a port, the IPAddr object comparisson was\nraising an exception which was making the middleware reject the request.\n\nNow we extract the hostname out of the host when comparing with IPAddr\nobjects.",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb",
            "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   # if +config.consider_all_requests_local+ is set to true, otherwise the body is empty.",
          "18:   class HostAuthorization",
          "19:     ALLOWED_HOSTS_IN_DEVELOPMENT = [\".localhost\", IPAddr.new(\"0.0.0.0/0\"), IPAddr.new(\"::/0\")]",
          "22:     class Permissions # :nodoc:",
          "23:       def initialize(hosts)",
          "",
          "[Removed Lines]",
          "20:     PORT_REGEX = /(?::\\d+)?/.freeze",
          "",
          "[Added Lines]",
          "20:     PORT_REGEX = /(?::\\d+)/ # :nodoc:",
          "21:     IPV4_HOSTNAME = /(?<host>\\d+\\.\\d+\\.\\d+\\.\\d+)#{PORT_REGEX}?/ # :nodoc:",
          "22:     IPV6_HOSTNAME = /(?<host>[a-f0-9]*:[a-f0-9.:]+)/i # :nodoc:",
          "23:     IPV6_HOSTNAME_WITH_PORT = /\\[#{IPV6_HOSTNAME}\\]#{PORT_REGEX}/i # :nodoc:",
          "24:     VALID_IP_HOSTNAME = Regexp.union( # :nodoc:",
          "25:       /\\A#{IPV4_HOSTNAME}\\z/,",
          "26:       /\\A#{IPV6_HOSTNAME}\\z/,",
          "27:       /\\A#{IPV6_HOSTNAME_WITH_PORT}\\z/,",
          "28:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:       def allows?(host)",
          "32:         @hosts.any? do |allowed|",
          "38:         end",
          "39:       end",
          "",
          "[Removed Lines]",
          "33:           allowed === host",
          "34:         rescue",
          "35:           # IPAddr#=== raises an error if you give it a hostname instead of",
          "36:           # IP. Treat similar errors as blocked access.",
          "37:           false",
          "",
          "[Added Lines]",
          "41:           if allowed.is_a?(IPAddr)",
          "42:             begin",
          "43:               allowed === extract_hostname(host)",
          "44:             rescue",
          "45:               # IPAddr#=== raises an error if you give it a hostname instead of",
          "46:               # IP. Treat similar errors as blocked access.",
          "47:               false",
          "48:             end",
          "49:           else",
          "50:             allowed === host",
          "51:           end",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         end",
          "52:         def sanitize_regexp(host)",
          "54:         end",
          "56:         def sanitize_string(host)",
          "57:           if host.start_with?(\".\")",
          "59:           else",
          "61:           end",
          "62:         end",
          "63:     end",
          "65:     class DefaultResponseApp # :nodoc:",
          "",
          "[Removed Lines]",
          "53:           /\\A#{host}#{PORT_REGEX}\\z/",
          "58:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}#{PORT_REGEX}\\z/i",
          "60:             /\\A#{Regexp.escape host}#{PORT_REGEX}\\z/i",
          "",
          "[Added Lines]",
          "67:           /\\A#{host}#{PORT_REGEX}?\\z/",
          "72:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}#{PORT_REGEX}?\\z/i",
          "74:             /\\A#{Regexp.escape host}#{PORT_REGEX}?\\z/i",
          "78:         def extract_hostname(host)",
          "79:           host.slice(VALID_IP_HOSTNAME, \"host\") || host",
          "80:         end",
          "",
          "---------------"
        ],
        "actionpack/test/dispatch/host_authorization_test.rb||actionpack/test/dispatch/host_authorization_test.rb": [
          "File: actionpack/test/dispatch/host_authorization_test.rb -> actionpack/test/dispatch/host_authorization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     assert_match \"Success\", response.body",
          "167:   end",
          "169:   test \"hosts with port works\" do",
          "170:     @app = ActionDispatch::HostAuthorization.new(App, [\"host.test\"])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:   test \"localhost using IPV4 works in dev\" do",
          "170:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "172:     get \"/\", env: {",
          "173:       \"HOST\" => \"127.0.0.1\",",
          "174:       \"action_dispatch.show_detailed_exceptions\" => true",
          "175:     }",
          "177:     assert_response :ok",
          "178:     assert_match \"Success\", response.body",
          "179:   end",
          "181:   test \"localhost using IPV4 with port works in dev\" do",
          "182:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "184:     get \"/\", env: {",
          "185:       \"HOST\" => \"127.0.0.1:3000\",",
          "186:       \"action_dispatch.show_detailed_exceptions\" => true",
          "187:     }",
          "189:     assert_response :ok",
          "190:     assert_match \"Success\", response.body",
          "191:   end",
          "193:   test \"localhost using IPV4 binding in all addresses works in dev\" do",
          "194:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "196:     get \"/\", env: {",
          "197:       \"HOST\" => \"0.0.0.0\",",
          "198:       \"action_dispatch.show_detailed_exceptions\" => true",
          "199:     }",
          "201:     assert_response :ok",
          "202:     assert_match \"Success\", response.body",
          "203:   end",
          "205:   test \"localhost using IPV4 with port binding in all addresses works in dev\" do",
          "206:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "208:     get \"/\", env: {",
          "209:       \"HOST\" => \"0.0.0.0:3000\",",
          "210:       \"action_dispatch.show_detailed_exceptions\" => true",
          "211:     }",
          "213:     assert_response :ok",
          "214:     assert_match \"Success\", response.body",
          "215:   end",
          "217:   test \"localhost using IPV6 works in dev\" do",
          "218:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "220:     get \"/\", env: {",
          "221:       \"HOST\" => \"::1\",",
          "222:       \"action_dispatch.show_detailed_exceptions\" => true",
          "223:     }",
          "225:     assert_response :ok",
          "226:     assert_match \"Success\", response.body",
          "227:   end",
          "229:   test \"localhost using IPV6 with port works in dev\" do",
          "230:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "232:     get \"/\", env: {",
          "233:       \"HOST\" => \"[::1]:3000\",",
          "234:       \"action_dispatch.show_detailed_exceptions\" => true",
          "235:     }",
          "237:     assert_response :ok",
          "238:     assert_match \"Success\", response.body",
          "239:   end",
          "241:   test \"localhost using IPV6 binding in all addresses works in dev\" do",
          "242:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "244:     get \"/\", env: {",
          "245:       \"HOST\" => \"::\",",
          "246:       \"action_dispatch.show_detailed_exceptions\" => true",
          "247:     }",
          "249:     assert_response :ok",
          "250:     assert_match \"Success\", response.body",
          "251:   end",
          "253:   test \"localhost using IPV6 with port binding in all addresses works in dev\" do",
          "254:     @app = ActionDispatch::HostAuthorization.new(App, ActionDispatch::HostAuthorization::ALLOWED_HOSTS_IN_DEVELOPMENT)",
          "256:     get \"/\", env: {",
          "257:       \"HOST\" => \"[::]:3000\",",
          "258:       \"action_dispatch.show_detailed_exceptions\" => true",
          "259:     }",
          "261:     assert_response :ok",
          "262:     assert_match \"Success\", response.body",
          "263:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c56abcd6a9f4b2e06274e293a3f5a5e69123f5d6",
      "candidate_info": {
        "commit_hash": "c56abcd6a9f4b2e06274e293a3f5a5e69123f5d6",
        "repo": "rails/rails",
        "commit_url": "https://github.com/rails/rails/commit/c56abcd6a9f4b2e06274e293a3f5a5e69123f5d6",
        "files": [
          "actionpack/CHANGELOG.md",
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb"
        ],
        "message": "Stop capturing subdomain in HostAuthorization\n\nThis also extracts a constant, giving a name to a \"magic regex\".",
        "before_after_code_files": [
          "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb"
          ],
          "candidate": [
            "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb"
          ]
        }
      },
      "candidate_diff": {
        "actionpack/lib/action_dispatch/middleware/host_authorization.rb||actionpack/lib/action_dispatch/middleware/host_authorization.rb": [
          "File: actionpack/lib/action_dispatch/middleware/host_authorization.rb -> actionpack/lib/action_dispatch/middleware/host_authorization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   class HostAuthorization",
          "19:     ALLOWED_HOSTS_IN_DEVELOPMENT = [\".localhost\", IPAddr.new(\"0.0.0.0/0\"), IPAddr.new(\"::/0\")]",
          "20:     PORT_REGEX = /(?::\\d+)/ # :nodoc:",
          "21:     IPV4_HOSTNAME = /(?<host>\\d+\\.\\d+\\.\\d+\\.\\d+)#{PORT_REGEX}?/ # :nodoc:",
          "22:     IPV6_HOSTNAME = /(?<host>[a-f0-9]*:[a-f0-9.:]+)/i # :nodoc:",
          "23:     IPV6_HOSTNAME_WITH_PORT = /\\[#{IPV6_HOSTNAME}\\]#{PORT_REGEX}/i # :nodoc:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     SUBDOMAIN_REGEX = /(?:[a-z0-9-]+\\.)/i # :nodoc:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         def sanitize_string(host)",
          "71:           if host.start_with?(\".\")",
          "73:           else",
          "74:             /\\A#{Regexp.escape host}#{PORT_REGEX}?\\z/i",
          "75:           end",
          "",
          "[Removed Lines]",
          "72:             /\\A([a-z0-9-]+\\.)?#{Regexp.escape(host[1..-1])}#{PORT_REGEX}?\\z/i",
          "",
          "[Added Lines]",
          "73:             /\\A#{SUBDOMAIN_REGEX}?#{Regexp.escape(host[1..-1])}#{PORT_REGEX}?\\z/i",
          "",
          "---------------"
        ]
      }
    }
  ]
}