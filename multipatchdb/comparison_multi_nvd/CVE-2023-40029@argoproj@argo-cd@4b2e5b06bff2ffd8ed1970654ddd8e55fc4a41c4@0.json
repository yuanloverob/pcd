{
  "cve_id": "CVE-2023-40029",
  "cve_desc": "Argo CD is a declarative continuous deployment for Kubernetes. Argo CD Cluster secrets might be managed declaratively using Argo CD / kubectl apply. As a result, the full secret body is stored in`kubectl.kubernetes.io/last-applied-configuration` annotation. pull request #7139 introduced the ability to manage cluster labels and annotations. Since clusters are stored as secrets it also exposes the `kubectl.kubernetes.io/last-applied-configuration` annotation which includes full secret body. In order to view the cluster annotations via the Argo CD API, the user must have `clusters, get` RBAC access. **Note:** In many cases, cluster secrets do not contain any actually-secret information. But sometimes, as in bearer-token auth, the contents might be very sensitive. The bug has been patched in versions 2.8.3, 2.7.14, and 2.6.15. Users are advised to upgrade. Users unable to upgrade should update/deploy cluster secret with `server-side-apply` flag which does not use or rely on `kubectl.kubernetes.io/last-applied-configuration` annotation. Note: annotation for existing secrets will require manual removal.\n\n",
  "repo": "argoproj/argo-cd",
  "patch_hash": "4b2e5b06bff2ffd8ed1970654ddd8e55fc4a41c4",
  "patch_info": {
    "commit_hash": "4b2e5b06bff2ffd8ed1970654ddd8e55fc4a41c4",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/4b2e5b06bff2ffd8ed1970654ddd8e55fc4a41c4",
    "files": [
      "util/db/cluster.go",
      "util/db/cluster_test.go"
    ],
    "message": "Merge pull request from GHSA-fwr2-64vr-xv9m\n\n* fix: prevent seeing/editing 'kubectl.kubernetes.io/last-applied-configuration' cluster annotation\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\n\n* fix: failing unit test\n\nSigned-off-by: iam-veeramalla <abhishek.veeramalla@gmail.com>\n\n---------\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\nSigned-off-by: iam-veeramalla <abhishek.veeramalla@gmail.com>\nCo-authored-by: iam-veeramalla <abhishek.veeramalla@gmail.com>",
    "before_after_code_files": [
      "util/db/cluster.go||util/db/cluster.go",
      "util/db/cluster_test.go||util/db/cluster_test.go"
    ]
  },
  "patch_diff": {
    "util/db/cluster.go||util/db/cluster.go": [
      "File: util/db/cluster.go -> util/db/cluster.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "345:  secret.Data = data",
      "347:  secret.Labels = c.Labels",
      "348:  secret.Annotations = c.Annotations",
      "350:  if secret.Annotations == nil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:  if c.Annotations != nil && c.Annotations[apiv1.LastAppliedConfigAnnotation] != \"\" {",
      "349:   return status.Errorf(codes.InvalidArgument, \"annotation %s cannot be set\", apiv1.LastAppliedConfigAnnotation)",
      "350:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:  annotations := map[string]string{}",
      "404:  if s.Annotations != nil {",
      "405:   annotations = collections.CopyStringMap(s.Annotations)",
      "406:   delete(annotations, common.AnnotationKeyManagedBy)",
      "407:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:   delete(annotations, apiv1.LastAppliedConfigAnnotation)",
      "",
      "---------------"
    ],
    "util/db/cluster_test.go||util/db/cluster_test.go": [
      "File: util/db/cluster_test.go -> util/db/cluster_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"github.com/stretchr/testify/assert\"",
      "9:  \"github.com/stretchr/testify/require\"",
      "10:  v1 \"k8s.io/api/core/v1\"",
      "11:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
      "12:  \"k8s.io/client-go/kubernetes/fake\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:  \"google.golang.org/grpc/codes\"",
      "11:  \"google.golang.org/grpc/status\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:  })",
      "57: }",
      "59: func TestClusterToSecret(t *testing.T) {",
      "60:  cluster := &appv1.Cluster{",
      "61:   Server:      \"server\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61: func Test_secretToCluster_LastAppliedConfigurationDropped(t *testing.T) {",
      "62:  secret := &v1.Secret{",
      "63:   ObjectMeta: metav1.ObjectMeta{",
      "64:    Name:        \"mycluster\",",
      "65:    Namespace:   fakeNamespace,",
      "66:    Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
      "67:   },",
      "68:   Data: map[string][]byte{",
      "69:    \"name\":   []byte(\"test\"),",
      "70:    \"server\": []byte(\"http://mycluster\"),",
      "71:    \"config\": []byte(\"{\\\"username\\\":\\\"foo\\\"}\"),",
      "72:   },",
      "73:  }",
      "74:  cluster, err := SecretToCluster(secret)",
      "75:  require.NoError(t, err)",
      "76:  assert.Len(t, cluster.Annotations, 0)",
      "77: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:  assert.Equal(t, cluster.Labels, s.Labels)",
      "79: }",
      "81: func Test_secretToCluster_NoConfig(t *testing.T) {",
      "82:  secret := &v1.Secret{",
      "83:   ObjectMeta: metav1.ObjectMeta{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "101: func TestClusterToSecret_LastAppliedConfigurationRejected(t *testing.T) {",
      "102:  cluster := &appv1.Cluster{",
      "103:   Server:      \"server\",",
      "104:   Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
      "105:   Name:        \"test\",",
      "106:   Config:      v1alpha1.ClusterConfig{},",
      "107:   Project:     \"project\",",
      "108:   Namespaces:  []string{\"default\"},",
      "109:  }",
      "110:  s := &v1.Secret{}",
      "111:  err := clusterToSecret(cluster, s)",
      "112:  require.Error(t, err)",
      "113:  require.Equal(t, codes.InvalidArgument, status.Code(err))",
      "114: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1391ba72149655e4884d357586d3201f15bc92dc",
      "candidate_info": {
        "commit_hash": "1391ba72149655e4884d357586d3201f15bc92dc",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/1391ba72149655e4884d357586d3201f15bc92dc",
        "files": [
          "util/db/cluster.go",
          "util/db/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-fwr2-64vr-xv9m\n\n* fix: prevent seeing/editing 'kubectl.kubernetes.io/last-applied-configuration' cluster annotation\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\n\n* Update util/db/cluster_test.go\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\n\n---------\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\nCo-authored-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "util/db/cluster.go||util/db/cluster.go",
          "util/db/cluster_test.go||util/db/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ],
          "candidate": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "util/db/cluster.go||util/db/cluster.go": [
          "File: util/db/cluster.go -> util/db/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:  secret.Data = data",
          "347:  secret.Labels = c.Labels",
          "348:  secret.Annotations = c.Annotations",
          "350:  if secret.Annotations == nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  if c.Annotations != nil && c.Annotations[apiv1.LastAppliedConfigAnnotation] != \"\" {",
          "349:   return status.Errorf(codes.InvalidArgument, \"annotation %s cannot be set\", apiv1.LastAppliedConfigAnnotation)",
          "350:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:  annotations := map[string]string{}",
          "404:  if s.Annotations != nil {",
          "405:   annotations = collections.CopyStringMap(s.Annotations)",
          "406:   delete(annotations, common.AnnotationKeyManagedBy)",
          "407:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:   delete(annotations, apiv1.LastAppliedConfigAnnotation)",
          "",
          "---------------"
        ],
        "util/db/cluster_test.go||util/db/cluster_test.go": [
          "File: util/db/cluster_test.go -> util/db/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10:  v1 \"k8s.io/api/core/v1\"",
          "11:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "12:  \"k8s.io/client-go/kubernetes/fake\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"google.golang.org/grpc/codes\"",
          "11:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  })",
          "57: }",
          "59: func TestClusterToSecret(t *testing.T) {",
          "60:  cluster := &appv1.Cluster{",
          "61:   Server:      \"server\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: func Test_secretToCluster_LastAppliedConfigurationDropped(t *testing.T) {",
          "62:  secret := &v1.Secret{",
          "63:   ObjectMeta: metav1.ObjectMeta{",
          "64:    Name:        \"mycluster\",",
          "65:    Namespace:   fakeNamespace,",
          "66:    Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "67:   },",
          "68:   Data: map[string][]byte{",
          "69:    \"name\":   []byte(\"test\"),",
          "70:    \"server\": []byte(\"http://mycluster\"),",
          "71:    \"config\": []byte(\"{\\\"username\\\":\\\"foo\\\"}\"),",
          "72:   },",
          "73:  }",
          "74:  cluster, err := SecretToCluster(secret)",
          "75:  require.NoError(t, err)",
          "76:  assert.Len(t, cluster.Annotations, 0)",
          "77: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  assert.Equal(t, cluster.Labels, s.Labels)",
          "79: }",
          "81: func Test_secretToCluster_NoConfig(t *testing.T) {",
          "82:  secret := &v1.Secret{",
          "83:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: func TestClusterToSecret_LastAppliedConfigurationRejected(t *testing.T) {",
          "102:  cluster := &appv1.Cluster{",
          "103:   Server:      \"server\",",
          "104:   Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "105:   Name:        \"test\",",
          "106:   Config:      v1alpha1.ClusterConfig{},",
          "107:   Project:     \"project\",",
          "108:   Namespaces:  []string{\"default\"},",
          "109:  }",
          "110:  s := &v1.Secret{}",
          "111:  err := clusterToSecret(cluster, s)",
          "112:  require.Error(t, err)",
          "113:  require.Equal(t, codes.InvalidArgument, status.Code(err))",
          "114: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b50226e762b5e54a85131ee835faac838a4bdc6",
      "candidate_info": {
        "commit_hash": "3b50226e762b5e54a85131ee835faac838a4bdc6",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/3b50226e762b5e54a85131ee835faac838a4bdc6",
        "files": [
          "docs/operator-manual/notifications/services/github.md",
          "util/db/cluster.go",
          "util/db/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-fwr2-64vr-xv9m\n\n* fix: prevent seeing/editing 'kubectl.kubernetes.io/last-applied-configuration' cluster annotation\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\n\n* fix: failing unit test\n\nSigned-off-by: iam-veeramalla <abhishek.veeramalla@gmail.com>\n\n* fix: issues with codegen\n\nSigned-off-by: iam-veeramalla <abhishek.veeramalla@gmail.com>\n\n---------\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\nSigned-off-by: iam-veeramalla <abhishek.veeramalla@gmail.com>\nCo-authored-by: iam-veeramalla <abhishek.veeramalla@gmail.com>",
        "before_after_code_files": [
          "util/db/cluster.go||util/db/cluster.go",
          "util/db/cluster_test.go||util/db/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ],
          "candidate": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "util/db/cluster.go||util/db/cluster.go": [
          "File: util/db/cluster.go -> util/db/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:  secret.Data = data",
          "347:  secret.Labels = c.Labels",
          "348:  secret.Annotations = c.Annotations",
          "350:  if secret.Annotations == nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  if c.Annotations != nil && c.Annotations[apiv1.LastAppliedConfigAnnotation] != \"\" {",
          "349:   return status.Errorf(codes.InvalidArgument, \"annotation %s cannot be set\", apiv1.LastAppliedConfigAnnotation)",
          "350:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:  annotations := map[string]string{}",
          "404:  if s.Annotations != nil {",
          "405:   annotations = collections.CopyStringMap(s.Annotations)",
          "406:   delete(annotations, common.AnnotationKeyManagedBy)",
          "407:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:   delete(annotations, apiv1.LastAppliedConfigAnnotation)",
          "",
          "---------------"
        ],
        "util/db/cluster_test.go||util/db/cluster_test.go": [
          "File: util/db/cluster_test.go -> util/db/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10:  v1 \"k8s.io/api/core/v1\"",
          "11:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "12:  \"k8s.io/client-go/kubernetes/fake\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"google.golang.org/grpc/codes\"",
          "11:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  })",
          "57: }",
          "59: func TestClusterToSecret(t *testing.T) {",
          "60:  cluster := &appv1.Cluster{",
          "61:   Server:      \"server\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: func Test_secretToCluster_LastAppliedConfigurationDropped(t *testing.T) {",
          "62:  secret := &v1.Secret{",
          "63:   ObjectMeta: metav1.ObjectMeta{",
          "64:    Name:        \"mycluster\",",
          "65:    Namespace:   fakeNamespace,",
          "66:    Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "67:   },",
          "68:   Data: map[string][]byte{",
          "69:    \"name\":   []byte(\"test\"),",
          "70:    \"server\": []byte(\"http://mycluster\"),",
          "71:    \"config\": []byte(\"{\\\"username\\\":\\\"foo\\\"}\"),",
          "72:   },",
          "73:  }",
          "74:  cluster, err := SecretToCluster(secret)",
          "75:  require.NoError(t, err)",
          "76:  assert.Len(t, cluster.Annotations, 0)",
          "77: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  assert.Equal(t, cluster.Labels, s.Labels)",
          "79: }",
          "81: func Test_secretToCluster_NoConfig(t *testing.T) {",
          "82:  secret := &v1.Secret{",
          "83:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: func TestClusterToSecret_LastAppliedConfigurationRejected(t *testing.T) {",
          "102:  cluster := &appv1.Cluster{",
          "103:   Server:      \"server\",",
          "104:   Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "105:   Name:        \"test\",",
          "106:   Config:      v1alpha1.ClusterConfig{},",
          "107:   Project:     \"project\",",
          "108:   Namespaces:  []string{\"default\"},",
          "109:  }",
          "110:  s := &v1.Secret{}",
          "111:  err := clusterToSecret(cluster, s)",
          "112:  require.Error(t, err)",
          "113:  require.Equal(t, codes.InvalidArgument, status.Code(err))",
          "114: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "582a3f4816c82dfa147f70ddef85599c4a873adc",
      "candidate_info": {
        "commit_hash": "582a3f4816c82dfa147f70ddef85599c4a873adc",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/582a3f4816c82dfa147f70ddef85599c4a873adc",
        "files": [
          "util/db/cluster.go",
          "util/db/cluster_test.go"
        ],
        "message": "Merge pull request from GHSA-fwr2-64vr-xv9m\n\n* fix: prevent seeing/editing 'kubectl.kubernetes.io/last-applied-configuration' cluster annotation\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\n\n* Update util/db/cluster_test.go\n\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\n\n---------\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>\nSigned-off-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>\nCo-authored-by: Michael Crenshaw <350466+crenshaw-dev@users.noreply.github.com>",
        "before_after_code_files": [
          "util/db/cluster.go||util/db/cluster.go",
          "util/db/cluster_test.go||util/db/cluster_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ],
          "candidate": [
            "util/db/cluster.go||util/db/cluster.go",
            "util/db/cluster_test.go||util/db/cluster_test.go"
          ]
        }
      },
      "candidate_diff": {
        "util/db/cluster.go||util/db/cluster.go": [
          "File: util/db/cluster.go -> util/db/cluster.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:  secret.Data = data",
          "347:  secret.Labels = c.Labels",
          "348:  secret.Annotations = c.Annotations",
          "350:  if secret.Annotations == nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:  if c.Annotations != nil && c.Annotations[apiv1.LastAppliedConfigAnnotation] != \"\" {",
          "349:   return status.Errorf(codes.InvalidArgument, \"annotation %s cannot be set\", apiv1.LastAppliedConfigAnnotation)",
          "350:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:  annotations := map[string]string{}",
          "404:  if s.Annotations != nil {",
          "405:   annotations = collections.CopyStringMap(s.Annotations)",
          "406:   delete(annotations, common.AnnotationKeyManagedBy)",
          "407:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:   delete(annotations, apiv1.LastAppliedConfigAnnotation)",
          "",
          "---------------"
        ],
        "util/db/cluster_test.go||util/db/cluster_test.go": [
          "File: util/db/cluster_test.go -> util/db/cluster_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10:  v1 \"k8s.io/api/core/v1\"",
          "11:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "12:  \"k8s.io/client-go/kubernetes/fake\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  \"google.golang.org/grpc/codes\"",
          "11:  \"google.golang.org/grpc/status\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:  })",
          "57: }",
          "59: func TestClusterToSecret(t *testing.T) {",
          "60:  cluster := &appv1.Cluster{",
          "61:   Server:      \"server\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: func Test_secretToCluster_LastAppliedConfigurationDropped(t *testing.T) {",
          "62:  secret := &v1.Secret{",
          "63:   ObjectMeta: metav1.ObjectMeta{",
          "64:    Name:        \"mycluster\",",
          "65:    Namespace:   fakeNamespace,",
          "66:    Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "67:   },",
          "68:   Data: map[string][]byte{",
          "69:    \"name\":   []byte(\"test\"),",
          "70:    \"server\": []byte(\"http://mycluster\"),",
          "71:    \"config\": []byte(\"{\\\"username\\\":\\\"foo\\\"}\"),",
          "72:   },",
          "73:  }",
          "74:  cluster, err := SecretToCluster(secret)",
          "75:  require.NoError(t, err)",
          "76:  assert.Len(t, cluster.Annotations, 0)",
          "77: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  assert.Equal(t, cluster.Labels, s.Labels)",
          "79: }",
          "81: func Test_secretToCluster_NoConfig(t *testing.T) {",
          "82:  secret := &v1.Secret{",
          "83:   ObjectMeta: metav1.ObjectMeta{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: func TestClusterToSecret_LastAppliedConfigurationRejected(t *testing.T) {",
          "102:  cluster := &appv1.Cluster{",
          "103:   Server:      \"server\",",
          "104:   Annotations: map[string]string{v1.LastAppliedConfigAnnotation: \"val2\"},",
          "105:   Name:        \"test\",",
          "106:   Config:      v1alpha1.ClusterConfig{},",
          "107:   Project:     \"project\",",
          "108:   Namespaces:  []string{\"default\"},",
          "109:  }",
          "110:  s := &v1.Secret{}",
          "111:  err := clusterToSecret(cluster, s)",
          "112:  require.Error(t, err)",
          "113:  require.Equal(t, codes.InvalidArgument, status.Code(err))",
          "114: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}