{
  "cve_id": "CVE-2013-0158",
  "cve_desc": "Unspecified vulnerability in Jenkins before 1.498, Jenkins LTS before 1.480.2, and Jenkins Enterprise 1.447.x before 1.447.6.1 and 1.466.x before 1.466.12.1, when a slave is attached and anonymous read access is enabled, allows remote attackers to obtain the master cryptographic key via unknown vectors.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "a9aff088f327278a8873aef47fa8f80d3c5932fd",
  "patch_info": {
    "commit_hash": "a9aff088f327278a8873aef47fa8f80d3c5932fd",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/a9aff088f327278a8873aef47fa8f80d3c5932fd",
    "files": [
      "core/pom.xml",
      "core/src/main/java/hudson/DNSMultiCast.java",
      "core/src/main/java/hudson/UDPBroadcastThread.java",
      "core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "core/src/main/java/hudson/model/Job.java",
      "core/src/main/java/hudson/model/UsageStatistics.java",
      "core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "core/src/main/java/hudson/slaves/SlaveComputer.java",
      "core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/java/jenkins/security/ConfidentialKey.java",
      "core/src/main/java/jenkins/security/ConfidentialStore.java",
      "core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "core/src/test/java/hudson/util/SecretTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.java",
      "core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "pom.xml",
      "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
    ],
    "message": "[SECURITY-49] Deprecating Jenkins.getSecretKey()\n\nWe are replacing it by the ConfidentialStore class and the\nConfidentialKey class, which provides purpose-specific confidential\ninformation that are separated from each other.\n\nIn this way, not all eggs are in one basket, and in case of a\ncompromise, the impact will contained.\n\nAlso replaced several insecure use of digest(secret|messsage) or\ndigest(message|secret) by HMAC.",
    "before_after_code_files": [
      "core/src/main/java/hudson/DNSMultiCast.java||core/src/main/java/hudson/DNSMultiCast.java",
      "core/src/main/java/hudson/UDPBroadcastThread.java||core/src/main/java/hudson/UDPBroadcastThread.java",
      "core/src/main/java/hudson/console/AnnotatedLargeText.java||core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "core/src/main/java/hudson/model/Job.java||core/src/main/java/hudson/model/Job.java",
      "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java",
      "core/src/main/java/hudson/security/RememberMeServicesProxy.java||core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
      "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java",
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/java/jenkins/security/ConfidentialKey.java||core/src/main/java/jenkins/security/ConfidentialKey.java",
      "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java",
      "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "core/src/main/java/jenkins/security/HMACConfidentialKey.java||core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "core/src/main/java/jenkins/security/HexStringConfidentialKey.java||core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy",
      "core/src/test/java/hudson/util/SecretTest.java||core/src/test/java/hudson/util/SecretTest.java",
      "core/src/test/java/jenkins/security/ConfidentialStoreRule.java||core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy||core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/DNSMultiCast.java||core/src/main/java/hudson/DNSMultiCast.java": [
      "File: core/src/main/java/hudson/DNSMultiCast.java -> core/src/main/java/hudson/DNSMultiCast.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:                     if (tal!=null)",
      "47:                         props.put(\"slave-port\",String.valueOf(tal.getPort()));",
      "51:                     URL jenkins_url = new URL(rootURL);",
      "52:                     int jenkins_port = jenkins_url.getPort();",
      "",
      "[Removed Lines]",
      "49:                     props.put(\"server-id\", Util.getDigestOf(jenkins.getSecretKey()));",
      "",
      "[Added Lines]",
      "49:                     props.put(\"server-id\", jenkins.getLegacyInstanceId());",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/UDPBroadcastThread.java||core/src/main/java/hudson/UDPBroadcastThread.java": [
      "File: core/src/main/java/hudson/UDPBroadcastThread.java -> core/src/main/java/hudson/UDPBroadcastThread.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:                 StringBuilder rsp = new StringBuilder(\"<hudson>\");",
      "87:                 tag(rsp,\"version\", Jenkins.VERSION);",
      "88:                 tag(rsp,\"url\", jenkins.getRootUrl());",
      "90:                 tag(rsp,\"slave-port\",tal==null?null:tal.getPort());",
      "92:                 for (UDPBroadcastFragment f : UDPBroadcastFragment.all())",
      "",
      "[Removed Lines]",
      "89:                 tag(rsp,\"server-id\", Util.getDigestOf(jenkins.getSecretKey()));",
      "",
      "[Added Lines]",
      "89:                 tag(rsp,\"server-id\", jenkins.getLegacyInstanceId());",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/console/AnnotatedLargeText.java||core/src/main/java/hudson/console/AnnotatedLargeText.java": [
      "File: core/src/main/java/hudson/console/AnnotatedLargeText.java -> core/src/main/java/hudson/console/AnnotatedLargeText.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import hudson.util.IOException2;",
      "30: import hudson.util.Secret;",
      "31: import hudson.util.TimeUnit2;",
      "32: import org.apache.commons.io.output.ByteArrayOutputStream;",
      "33: import org.kohsuke.stapler.Stapler;",
      "34: import org.kohsuke.stapler.StaplerRequest;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import jenkins.security.CryptoConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "116:         try {",
      "117:             String base64 = req!=null ? req.getHeader(\"X-ConsoleAnnotator\") : null;",
      "118:             if (base64!=null) {",
      "122:                 ObjectInputStream ois = new ObjectInputStreamEx(new GZIPInputStream(",
      "123:                         new CipherInputStream(new ByteArrayInputStream(Base64.decode(base64.toCharArray())),sym)),",
      "",
      "[Removed Lines]",
      "119:                 Cipher sym = Secret.getCipher(\"AES\");",
      "120:                 sym.init(Cipher.DECRYPT_MODE, Jenkins.getInstance().getSecretKeyAsAES128());",
      "",
      "[Added Lines]",
      "120:                 Cipher sym = PASSING_ANNOTATOR.decrypt();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "131:                     ois.close();",
      "132:                 }",
      "133:             }",
      "136:         } catch (ClassNotFoundException e) {",
      "137:             throw new IOException2(e);",
      "138:         }",
      "",
      "[Removed Lines]",
      "134:         } catch (GeneralSecurityException e) {",
      "135:             throw new IOException2(e);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158:                 w, createAnnotator(Stapler.getCurrentRequest()), context, charset);",
      "159:         long r = super.writeLogTo(start,caw);",
      "175:         return r;",
      "176:     }",
      "178: }",
      "",
      "[Removed Lines]",
      "161:         try {",
      "162:             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "163:             Cipher sym = Secret.getCipher(\"AES\");",
      "164:             sym.init(Cipher.ENCRYPT_MODE, Jenkins.getInstance().getSecretKeyAsAES128());",
      "165:             ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(new CipherOutputStream(baos,sym)));",
      "166:             oos.writeLong(System.currentTimeMillis()); // send timestamp to prevent a replay attack",
      "167:             oos.writeObject(caw.getConsoleAnnotator());",
      "168:             oos.close();",
      "169:             StaplerResponse rsp = Stapler.getCurrentResponse();",
      "170:             if (rsp!=null)",
      "171:                 rsp.setHeader(\"X-ConsoleAnnotator\", new String(Base64.encode(baos.toByteArray())));",
      "172:         } catch (GeneralSecurityException e) {",
      "173:             throw new IOException2(e);",
      "174:         }",
      "",
      "[Added Lines]",
      "159:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "160:         Cipher sym = PASSING_ANNOTATOR.encrypt();",
      "161:         ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(new CipherOutputStream(baos,sym)));",
      "162:         oos.writeLong(System.currentTimeMillis()); // send timestamp to prevent a replay attack",
      "163:         oos.writeObject(caw.getConsoleAnnotator());",
      "164:         oos.close();",
      "165:         StaplerResponse rsp = Stapler.getCurrentResponse();",
      "166:         if (rsp!=null)",
      "167:             rsp.setHeader(\"X-ConsoleAnnotator\", new String(Base64.encode(baos.toByteArray())));",
      "174:     private static final CryptoConfidentialKey PASSING_ANNOTATOR = new CryptoConfidentialKey(AnnotatedLargeText.class,\"consoleAnnotator\");",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/Job.java||core/src/main/java/hudson/model/Job.java": [
      "File: core/src/main/java/hudson/model/Job.java -> core/src/main/java/hudson/model/Job.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: import hudson.widgets.Widget;",
      "63: import jenkins.model.Jenkins;",
      "64: import jenkins.model.ProjectNamingStrategy;",
      "65: import jenkins.util.io.OnMaster;",
      "66: import net.sf.json.JSONException;",
      "67: import net.sf.json.JSONObject;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65: import jenkins.security.HexStringConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "309:     public EnvVars getCharacteristicEnvVars() {",
      "310:         EnvVars env = new EnvVars();",
      "313:         env.put(\"JOB_NAME\",getFullName());",
      "314:         return env;",
      "315:     }",
      "",
      "[Removed Lines]",
      "311:         env.put(\"JENKINS_SERVER_COOKIE\",Util.getDigestOf(\"ServerID:\"+ Jenkins.getInstance().getSecretKey()));",
      "312:         env.put(\"HUDSON_SERVER_COOKIE\",Util.getDigestOf(\"ServerID:\"+ Jenkins.getInstance().getSecretKey())); // Legacy compatibility",
      "",
      "[Added Lines]",
      "312:         env.put(\"JENKINS_SERVER_COOKIE\",SERVER_COOKIE.get());",
      "313:         env.put(\"HUDSON_SERVER_COOKIE\",SERVER_COOKIE.get()); // Legacy compatibility",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1313:     public BuildTimelineWidget getTimeline() {",
      "1314:         return new BuildTimelineWidget(getBuilds());",
      "1315:     }",
      "1316: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1318:     private final static HexStringConfidentialKey SERVER_COOKIE = new HexStringConfidentialKey(Job.class,\"serverCookie\",16);",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/UsageStatistics.java||core/src/main/java/hudson/model/UsageStatistics.java": [
      "File: core/src/main/java/hudson/model/UsageStatistics.java -> core/src/main/java/hudson/model/UsageStatistics.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:     public String getStatData() throws IOException {",
      "126:         JSONObject o = new JSONObject();",
      "127:         o.put(\"stat\",1);",
      "130:         o.put(\"version\", Jenkins.VERSION);",
      "132:         List<JSONObject> nodes = new ArrayList<JSONObject>();",
      "134:             JSONObject  n = new JSONObject();",
      "136:                 n.put(\"master\",true);",
      "137:                 n.put(\"jvm-vendor\", System.getProperty(\"java.vm.vendor\"));",
      "138:                 n.put(\"jvm-version\", System.getProperty(\"java.version\"));",
      "139:             }",
      "140:             n.put(\"executors\",c.getNumExecutors());",
      "142:             n.put(\"os\", descriptor.get(c));",
      "143:             nodes.add(n);",
      "144:         }",
      "145:         o.put(\"nodes\",nodes);",
      "147:         List<JSONObject> plugins = new ArrayList<JSONObject>();",
      "149:             if(!pw.isActive())  continue;   // treat disabled plugins as if they are uninstalled",
      "150:             JSONObject p = new JSONObject();",
      "151:             p.put(\"name\",pw.getShortName());",
      "",
      "[Removed Lines]",
      "124:         Jenkins h = Jenkins.getInstance();",
      "128:         o.put(\"install\", Util.getDigestOf(h.getSecretKey()));",
      "129:         o.put(\"servletContainer\",h.servletContext.getServerInfo());",
      "133:         for( Computer c : h.getComputers() ) {",
      "135:             if(c.getNode()==h) {",
      "141:             DescriptorImpl descriptor = h.getDescriptorByType(DescriptorImpl.class);",
      "148:         for( PluginWrapper pw : h.getPluginManager().getPlugins() ) {",
      "",
      "[Added Lines]",
      "124:         Jenkins j = Jenkins.getInstance();",
      "128:         o.put(\"install\", j.getLegacyInstanceId());",
      "129:         o.put(\"servletContainer\", j.servletContext.getServerInfo());",
      "133:         for( Computer c : j.getComputers() ) {",
      "135:             if(c.getNode()==j) {",
      "141:             DescriptorImpl descriptor = j.getDescriptorByType(DescriptorImpl.class);",
      "148:         for( PluginWrapper pw : j.getPluginManager().getPlugins() ) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:         o.put(\"plugins\",plugins);",
      "157:         JSONObject jobs = new JSONObject();",
      "159:         for (TopLevelItemDescriptor d : Items.all()) {",
      "160:             int cnt=0;",
      "161:             for (TopLevelItem item : items) {",
      "",
      "[Removed Lines]",
      "158:         List<TopLevelItem> items = h.getItems();",
      "",
      "[Added Lines]",
      "158:         List<TopLevelItem> items = j.getItems();",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/RememberMeServicesProxy.java||core/src/main/java/hudson/security/RememberMeServicesProxy.java": [
      "File: core/src/main/java/hudson/security/RememberMeServicesProxy.java -> core/src/main/java/hudson/security/RememberMeServicesProxy.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.security;",
      "26: import org.acegisecurity.ui.rememberme.RememberMeServices;",
      "27: import org.acegisecurity.Authentication;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import jenkins.model.Jenkins;",
      "27: import jenkins.security.ConfidentialStore;",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java": [
      "File: core/src/main/java/hudson/security/SecurityRealm.java -> core/src/main/java/hudson/security/SecurityRealm.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "516:             this.rememberMe = rememberMe;",
      "517:         }",
      "519:         private static RememberMeServices createRememberMeService(UserDetailsService uds) {",
      "521:             TokenBasedRememberMeServices2 rms = new TokenBasedRememberMeServices2();",
      "522:             rms.setUserDetailsService(uds);",
      "523:             rms.setKey(Jenkins.getInstance().getSecretKey());",
      "524:             rms.setParameter(\"remember_me\"); // this is the form field name in login.jelly",
      "525:             return rms;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "519:         @SuppressWarnings(\"deprecation\")",
      "525:                 TokenBasedRememberMeServices needs to be used in conjunction with RememberMeAuthenticationProvider,",
      "526:                 and both needs to use the same key (this is a reflection of a poor design in AcgeiSecurity, if you ask me)",
      "527:                 and various security plugins have its own groovy script that configures them.",
      "529:                 So if we change this, it creates a painful situation for those plugins by forcing them to choose",
      "530:                 to work with earlier version of Jenkins or newer version of Jenkins, and not both.",
      "532:                 So we keep this here.",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java": [
      "File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java -> core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.security;",
      "26: import org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices;",
      "27: import org.acegisecurity.userdetails.UserDetails;",
      "28: import org.acegisecurity.Authentication;",
      "",
      "[Removed Lines]",
      "29: import org.apache.commons.codec.digest.DigestUtils;",
      "",
      "[Added Lines]",
      "26: import jenkins.security.HMACConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41: public class TokenBasedRememberMeServices2 extends TokenBasedRememberMeServices {",
      "42:     @Override",
      "43:     protected String makeTokenSignature(long tokenExpiryTime, UserDetails userDetails) {",
      "45:                 + \"N/A\" + \":\" + getKey());",
      "46:         return expectedTokenSignature;",
      "47:     }",
      "",
      "[Removed Lines]",
      "44:         String expectedTokenSignature = DigestUtils.md5Hex(userDetails.getUsername() + \":\" + tokenExpiryTime + \":\"",
      "",
      "[Added Lines]",
      "44:         String expectedTokenSignature = MAC.mac(userDetails.getUsername() + \":\" + tokenExpiryTime + \":\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     protected String retrievePassword(Authentication successfulAuthentication) {",
      "51:         return \"N/A\";",
      "52:     }",
      "53: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final HMACConfidentialKey MAC = new HMACConfidentialKey(TokenBasedRememberMeServices.class,\"mac\");",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
      "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:     public static final class DescriptorImpl extends CrumbIssuerDescriptor<DefaultCrumbIssuer> implements ModelObject {",
      "120:         public DescriptorImpl() {",
      "122:             load();",
      "123:         }",
      "",
      "[Removed Lines]",
      "121:             super(Jenkins.getInstance().getSecretKey(), System.getProperty(\"hudson.security.csrf.requestfield\", \".crumb\"));",
      "",
      "[Added Lines]",
      "122:             super(Jenkins.getInstance().getLegacyInstanceId(), System.getProperty(\"hudson.security.csrf.requestfield\", \".crumb\"));",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
      "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: import hudson.util.io.ReopenableFileOutputStream;",
      "61: import jenkins.model.Jenkins;",
      "62: import org.kohsuke.stapler.StaplerRequest;",
      "63: import org.kohsuke.stapler.StaplerResponse;",
      "64: import org.kohsuke.stapler.QueryParameter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62: import jenkins.slaves.JnlpSlaveAgentProtocol;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "128:         return acceptingTasks;",
      "129:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:     public String getJnlpMac() {",
      "133:         return JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName());",
      "134:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/util/Secret.java||core/src/main/java/hudson/util/Secret.java": [
      "File: core/src/main/java/hudson/util/Secret.java -> core/src/main/java/hudson/util/Secret.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import com.trilead.ssh2.crypto.Base64;",
      "32: import jenkins.model.Jenkins;",
      "33: import hudson.Util;",
      "34: import org.kohsuke.stapler.Stapler;",
      "36: import javax.crypto.SecretKey;",
      "37: import javax.crypto.Cipher;",
      "38: import java.io.Serializable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34: import jenkins.security.CryptoConfidentialKey;",
      "37: import javax.crypto.BadPaddingException;",
      "38: import javax.crypto.IllegalBlockSizeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:     }",
      "102:         String secret = SECRET;",
      "103:         if(secret==null)    return Jenkins.getInstance().getSecretKeyAsAES128();",
      "104:         return Util.toAes128Key(secret);",
      "",
      "[Removed Lines]",
      "101:     private static SecretKey getKey() throws UnsupportedEncodingException, GeneralSecurityException {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "112:     public String getEncryptedValue() {",
      "113:         try {",
      "117:             return new String(Base64.encode(cipher.doFinal((value+MAGIC).getBytes(\"UTF-8\"))));",
      "118:         } catch (GeneralSecurityException e) {",
      "",
      "[Removed Lines]",
      "114:             Cipher cipher = getCipher(\"AES\");",
      "115:             cipher.init(Cipher.ENCRYPT_MODE, getKey());",
      "",
      "[Added Lines]",
      "121:             Cipher cipher = KEY.encrypt();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "129:     public static Secret decrypt(String data) {",
      "130:         if(data==null)      return null;",
      "131:         try {",
      "132:             Cipher cipher = getCipher(\"AES\");",
      "138:         } catch (GeneralSecurityException e) {",
      "139:             return null;",
      "140:         } catch (UnsupportedEncodingException e) {",
      "",
      "[Removed Lines]",
      "133:             cipher.init(Cipher.DECRYPT_MODE, getKey());",
      "134:             String plainText = new String(cipher.doFinal(Base64.decode(data.toCharArray())), \"UTF-8\");",
      "135:             if(plainText.endsWith(MAGIC))",
      "136:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "137:             return null;",
      "",
      "[Added Lines]",
      "138:             byte[] in = Base64.decode(data.toCharArray());",
      "139:             Secret s = tryDecrypt(KEY.decrypt(), in);",
      "140:             if (s!=null)    return s;",
      "144:             cipher.init(Cipher.DECRYPT_MODE, getLegacyKey());",
      "145:             return tryDecrypt(cipher, in);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "144:         }",
      "145:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155:     private static Secret tryDecrypt(Cipher cipher, byte[] in) throws UnsupportedEncodingException {",
      "156:         try {",
      "157:             String plainText = new String(cipher.doFinal(in), \"UTF-8\");",
      "158:             if(plainText.endsWith(MAGIC))",
      "159:                 return new Secret(plainText.substring(0,plainText.length()-MAGIC.length()));",
      "160:             return null;",
      "161:         } catch (GeneralSecurityException e) {",
      "162:             return null;",
      "163:         }",
      "164:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "207:     private static final String PROVIDER = System.getProperty(Secret.class.getName()+\".provider\");",
      "214:     private static final long serialVersionUID = 1L;",
      "216:     static {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "236:     private static final CryptoConfidentialKey KEY = new CryptoConfidentialKey(Secret.class.getName());",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "196: import jenkins.ExtensionRefreshException;",
      "197: import jenkins.InitReactorRunner;",
      "198: import jenkins.model.ProjectNamingStrategy.DefaultProjectNamingStrategy;",
      "199: import net.sf.json.JSONObject;",
      "200: import org.acegisecurity.AccessDeniedException;",
      "201: import org.acegisecurity.AcegiSecurityException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199: import jenkins.security.ConfidentialKey;",
      "200: import jenkins.security.ConfidentialStore;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1006:     public SecretKey getSecretKeyAsAES128() {",
      "1007:         return Util.toAes128Key(secretKey);",
      "1008:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1029:     @SuppressWarnings(\"deprecation\")",
      "1030:     public String getLegacyInstanceId() {",
      "1031:         return Util.getDigestOf(getSecretKey());",
      "1032:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: import hudson.model.UserPropertyDescriptor;",
      "32: import hudson.util.HttpResponses;",
      "33: import hudson.util.Secret;",
      "35: import net.sf.json.JSONObject;",
      "36: import org.kohsuke.stapler.AncestorInPath;",
      "37: import org.kohsuke.stapler.DataBoundConstructor;",
      "",
      "[Removed Lines]",
      "34: import jenkins.model.Jenkins;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "108:         public ApiTokenProperty newInstance(User user) {",
      "110:         }",
      "112:         public HttpResponse doChangeToken(@AncestorInPath User u, StaplerResponse rsp) throws IOException {",
      "",
      "[Removed Lines]",
      "109:             return new ApiTokenProperty(Util.getDigestOf(Jenkins.getInstance().getSecretKey() + \":\" + user.getId()));",
      "",
      "[Added Lines]",
      "108:             return new ApiTokenProperty(API_KEY_SEED.mac(user.getId()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:     }",
      "125:     private static final SecureRandom RANDOM = new SecureRandom();",
      "126: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     private static final HMACConfidentialKey API_KEY_SEED = new HMACConfidentialKey(ApiTokenProperty.class,\"seed\",16);",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ConfidentialKey.java||core/src/main/java/jenkins/security/ConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/ConfidentialKey.java -> core/src/main/java/jenkins/security/ConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.scm.SCM;",
      "4: import hudson.tasks.Builder;",
      "5: import hudson.util.Secret;",
      "6: import jenkins.slaves.JnlpSlaveAgentProtocol;",
      "8: import javax.annotation.CheckForNull;",
      "9: import java.io.IOException;",
      "36: public abstract class ConfidentialKey {",
      "40:     private final String id;",
      "42:     protected ConfidentialKey(String id) {",
      "43:         this.id = id;",
      "44:     }",
      "46:     protected @CheckForNull byte[] load() throws IOException {",
      "47:         return ConfidentialStore.get().load(this);",
      "48:     }",
      "50:     protected void store(byte[] payload) throws IOException {",
      "51:         ConfidentialStore.get().store(this,payload);",
      "52:     }",
      "54:     public String getId() {",
      "55:         return id;",
      "56:     }",
      "57: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java": [
      "File: core/src/main/java/jenkins/security/ConfidentialStore.java -> core/src/main/java/jenkins/security/ConfidentialStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import jenkins.model.Jenkins;",
      "6: import javax.annotation.CheckForNull;",
      "7: import javax.annotation.Nonnull;",
      "8: import java.io.IOException;",
      "9: import java.security.SecureRandom;",
      "27: public abstract class ConfidentialStore {",
      "32:     protected abstract void store(ConfidentialKey key, byte[] payload) throws IOException;",
      "40:     protected abstract @CheckForNull byte[] load(ConfidentialKey key) throws IOException;",
      "47:     public abstract byte[] randomBytes(int size);",
      "52:     public static @Nonnull ConfidentialStore get() {",
      "53:         if (TEST!=null) return TEST.get();",
      "54:         return Jenkins.getInstance().getExtensionList(ConfidentialStore.class).get(0);",
      "55:     }",
      "61: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/CryptoConfidentialKey.java||core/src/main/java/jenkins/security/CryptoConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/CryptoConfidentialKey.java -> core/src/main/java/jenkins/security/CryptoConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.util.Secret;",
      "5: import javax.crypto.Cipher;",
      "6: import javax.crypto.SecretKey;",
      "7: import javax.crypto.spec.SecretKeySpec;",
      "8: import java.io.IOException;",
      "9: import java.security.GeneralSecurityException;",
      "17: public class CryptoConfidentialKey extends ConfidentialKey {",
      "18:     private volatile SecretKey secret;",
      "19:     public CryptoConfidentialKey(String id) {",
      "20:         super(id);",
      "21:     }",
      "23:     public CryptoConfidentialKey(Class owner, String shortName) {",
      "24:         this(owner.getName()+'.'+shortName);",
      "25:     }",
      "27:     private SecretKey getKey() {",
      "28:         try {",
      "29:             if (secret==null) {",
      "30:                 synchronized (this) {",
      "31:                     if (secret==null) {",
      "32:                         byte[] payload = load();",
      "33:                         if (payload==null) {",
      "34:                             payload = ConfidentialStore.get().randomBytes(256);",
      "35:                             store(payload);",
      "36:                         }",
      "38:                         secret = new SecretKeySpec(payload,0,128/8, ALGORITHM);",
      "39:                     }",
      "40:                 }",
      "41:             }",
      "42:             return secret;",
      "43:         } catch (IOException e) {",
      "44:             throw new Error(\"Failed to load the key: \"+getId(),e);",
      "45:         }",
      "46:     }",
      "51:     public Cipher encrypt() {",
      "52:         try {",
      "53:             Cipher cipher = Secret.getCipher(ALGORITHM);",
      "54:             cipher.init(Cipher.ENCRYPT_MODE, getKey());",
      "55:             return cipher;",
      "56:         } catch (GeneralSecurityException e) {",
      "57:             throw new AssertionError(e);",
      "58:         }",
      "59:     }",
      "64:     public Cipher decrypt() {",
      "65:         try {",
      "66:             Cipher cipher = Secret.getCipher(ALGORITHM);",
      "67:             cipher.init(Cipher.DECRYPT_MODE, getKey());",
      "68:             return cipher;",
      "69:         } catch (GeneralSecurityException e) {",
      "70:             throw new AssertionError(e);",
      "71:         }",
      "72:     }",
      "75:     private static final String ALGORITHM = \"AES\";",
      "76: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java": [
      "File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java -> core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Extension;",
      "4: import hudson.FilePath;",
      "5: import hudson.Util;",
      "6: import hudson.util.IOException2;",
      "7: import hudson.util.IOUtils;",
      "8: import hudson.util.Secret;",
      "9: import hudson.util.TextFile;",
      "10: import jenkins.model.Jenkins;",
      "12: import javax.crypto.Cipher;",
      "13: import javax.crypto.CipherInputStream;",
      "14: import javax.crypto.CipherOutputStream;",
      "15: import javax.crypto.SecretKey;",
      "16: import java.io.File;",
      "17: import java.io.FileInputStream;",
      "18: import java.io.FileOutputStream;",
      "19: import java.io.IOException;",
      "20: import java.security.GeneralSecurityException;",
      "21: import java.security.SecureRandom;",
      "31: @Extension(ordinal=-99999) // small ordinal value to allow other higher ones to take over",
      "32: public class DefaultConfidentialStore extends ConfidentialStore {",
      "33:     private final SecureRandom sr = new SecureRandom();",
      "38:     private final File rootDir;",
      "47:     private final SecretKey masterKey;",
      "49:     public DefaultConfidentialStore() throws IOException, InterruptedException {",
      "50:         this(new File(Jenkins.getInstance().getRootDir(),\"secrets\"));",
      "51:     }",
      "53:     public DefaultConfidentialStore(File rootDir) throws IOException, InterruptedException {",
      "54:         this.rootDir = rootDir;",
      "55:         if (rootDir.mkdirs()) {",
      "58:             new FilePath(rootDir).chmod(0700);",
      "59:         }",
      "61:         TextFile masterSecret = new TextFile(new File(rootDir,\"master.key\"));",
      "62:         if (!masterSecret.exists()) {",
      "65:             masterSecret.write(Util.toHexString(randomBytes(128)));",
      "66:         }",
      "67:         this.masterKey = Util.toAes128Key(masterSecret.readTrim());",
      "68:     }",
      "73:     @Override",
      "74:     protected void store(ConfidentialKey key, byte[] payload) throws IOException {",
      "75:         CipherOutputStream cos=null;",
      "76:         FileOutputStream fos=null;",
      "77:         try {",
      "78:             Cipher sym = Secret.getCipher(\"AES\");",
      "79:             sym.init(Cipher.ENCRYPT_MODE, masterKey);",
      "80:             cos = new CipherOutputStream(fos=new FileOutputStream(getFileFor(key)), sym);",
      "81:             cos.write(payload);",
      "82:             cos.write(MAGIC);",
      "83:         } catch (GeneralSecurityException e) {",
      "84:             throw new IOException2(\"Failed to persist the key: \"+key.getId(),e);",
      "85:         } finally {",
      "86:             IOUtils.closeQuietly(cos);",
      "87:             IOUtils.closeQuietly(fos);",
      "88:         }",
      "89:     }",
      "97:     @Override",
      "98:     protected byte[] load(ConfidentialKey key) throws IOException {",
      "99:         CipherInputStream cis=null;",
      "100:         FileInputStream fis=null;",
      "101:         try {",
      "102:             File f = getFileFor(key);",
      "103:             if (!f.exists())    return null;",
      "105:             Cipher sym = Secret.getCipher(\"AES\");",
      "106:             sym.init(Cipher.DECRYPT_MODE, masterKey);",
      "107:             cis = new CipherInputStream(fis=new FileInputStream(f), sym);",
      "108:             byte[] bytes = IOUtils.toByteArray(cis);",
      "109:             return verifyMagic(bytes);",
      "110:         } catch (GeneralSecurityException e) {",
      "111:             throw new IOException2(\"Failed to persist the key: \"+key.getId(),e);",
      "112:         } finally {",
      "113:             IOUtils.closeQuietly(cis);",
      "114:             IOUtils.closeQuietly(fis);",
      "115:         }",
      "116:     }",
      "121:     private byte[] verifyMagic(byte[] payload) {",
      "122:         int payloadLen = payload.length-MAGIC.length;",
      "123:         if (payloadLen<0)   return null;    // obviously broken",
      "125:         for (int i=0; i<MAGIC.length; i++) {",
      "126:             if (payload[payloadLen+i]!=MAGIC[i])",
      "127:                 return null;    // broken",
      "128:         }",
      "129:         byte[] truncated = new byte[payloadLen];",
      "130:         System.arraycopy(payload,0,truncated,0,truncated.length);",
      "131:         return truncated;",
      "132:     }",
      "134:     private File getFileFor(ConfidentialKey key) {",
      "135:         return new File(rootDir, key.getId());",
      "136:     }",
      "138:     public byte[] randomBytes(int size) {",
      "139:         byte[] random = new byte[size];",
      "140:         sr.nextBytes(random);",
      "141:         return random;",
      "142:     }",
      "144:     private static final byte[] MAGIC = \"::::MAGIC::::\".getBytes();",
      "145: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/HMACConfidentialKey.java||core/src/main/java/jenkins/security/HMACConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/HMACConfidentialKey.java -> core/src/main/java/jenkins/security/HMACConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "5: import javax.crypto.KeyGenerator;",
      "6: import javax.crypto.Mac;",
      "7: import javax.crypto.SecretKey;",
      "8: import javax.crypto.spec.SecretKeySpec;",
      "9: import java.io.IOException;",
      "10: import java.io.UnsupportedEncodingException;",
      "11: import java.security.GeneralSecurityException;",
      "12: import java.security.NoSuchAlgorithmException;",
      "13: import java.util.Arrays;",
      "28: public class HMACConfidentialKey extends ConfidentialKey {",
      "29:     private volatile SecretKey key;",
      "30:     private final int length;",
      "40:     public HMACConfidentialKey(String id, int length) {",
      "41:         super(id);",
      "42:         this.length = length;",
      "43:     }",
      "48:     public HMACConfidentialKey(String id) {",
      "49:         this(id,Integer.MAX_VALUE);",
      "50:     }",
      "56:     public HMACConfidentialKey(Class owner, String shortName, int length) {",
      "57:         this(owner.getName()+'.'+shortName,length);",
      "58:     }",
      "60:     public HMACConfidentialKey(Class owner, String shortName) {",
      "61:         this(owner,shortName,Integer.MAX_VALUE);",
      "62:     }",
      "68:     public byte[] mac(byte[] message) {",
      "69:         return chop(createMac().doFinal(message));",
      "70:     }",
      "75:     public boolean checkMac(byte[] message, byte[] mac) {",
      "76:         return Arrays.equals(mac(message),mac);",
      "77:     }",
      "83:     public String mac(String message) {",
      "84:         try {",
      "85:             return Util.toHexString(mac(message.getBytes(\"UTF-8\")));",
      "86:         } catch (UnsupportedEncodingException e) {",
      "87:             throw new AssertionError(e);",
      "88:         }",
      "89:     }",
      "94:     public boolean checkMac(String message, String mac) {",
      "95:         return mac(message).equals(mac);",
      "96:     }",
      "98:     private byte[] chop(byte[] mac) {",
      "99:         if (mac.length<=length)  return mac; // already too short",
      "101:         byte[] b = new byte[length];",
      "102:         System.arraycopy(mac,0,b,0,b.length);",
      "103:         return b;",
      "104:     }",
      "109:     public Mac createMac() {",
      "110:         try {",
      "111:             Mac mac = Mac.getInstance(ALGORITHM);",
      "112:             mac.init(getKey());",
      "113:             return mac;",
      "114:         } catch (GeneralSecurityException e) {",
      "116:             throw new Error(ALGORITHM+\" not supported?\",e);",
      "117:         }",
      "118:     }",
      "120:     private SecretKey getKey() {",
      "121:         if (key==null) {",
      "122:             synchronized (this) {",
      "123:                 if (key==null) {",
      "124:                     try {",
      "125:                         byte[] encoded = load();",
      "126:                         if (encoded==null) {",
      "127:                             KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM);",
      "128:                             SecretKey key = kg.generateKey();",
      "129:                             store(encoded=key.getEncoded());",
      "130:                         }",
      "131:                         key = new SecretKeySpec(encoded,ALGORITHM);",
      "132:                     } catch (IOException e) {",
      "133:                         throw new Error(\"Failed to load the key: \"+getId(),e);",
      "134:                     } catch (NoSuchAlgorithmException e) {",
      "135:                         throw new Error(\"Failed to load the key: \"+getId(),e);",
      "136:                     }",
      "137:                 }",
      "138:             }",
      "139:         }",
      "140:         return key;",
      "141:     }",
      "143:     private static final String ALGORITHM = \"HmacSHA256\";",
      "144: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/HexStringConfidentialKey.java||core/src/main/java/jenkins/security/HexStringConfidentialKey.java": [
      "File: core/src/main/java/jenkins/security/HexStringConfidentialKey.java -> core/src/main/java/jenkins/security/HexStringConfidentialKey.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "5: import java.io.IOException;",
      "17: public class HexStringConfidentialKey extends ConfidentialKey {",
      "18:     private final int length;",
      "20:     private volatile String secret;",
      "26:     public HexStringConfidentialKey(String id, int length) {",
      "27:         super(id);",
      "28:         if (length%2!=0)",
      "29:             throw new IllegalArgumentException(\"length must be even: \"+length);",
      "30:         this.length = length;",
      "31:     }",
      "33:     public HexStringConfidentialKey(Class owner, String shortName, int length) {",
      "34:         this(owner.getName()+'.'+shortName,length);",
      "35:     }",
      "46:     public String get() {",
      "47:         try {",
      "48:             if (secret==null) {",
      "49:                 synchronized (this) {",
      "50:                     if (secret==null) {",
      "51:                         byte[] payload = load();",
      "52:                         if (payload==null) {",
      "53:                             payload = ConfidentialStore.get().randomBytes(length/2);",
      "54:                             store(payload);",
      "55:                         }",
      "56:                         secret = Util.toHexString(payload).substring(0,length);",
      "57:                     }",
      "58:                 }",
      "59:             }",
      "60:             return secret;",
      "61:         } catch (IOException e) {",
      "62:             throw new Error(\"Failed to load the key: \"+getId(),e);",
      "63:         }",
      "64:     }",
      "65: }",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java": [
      "File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java -> core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import hudson.slaves.SlaveComputer;",
      "9: import jenkins.AgentProtocol;",
      "10: import jenkins.model.Jenkins;",
      "12: import java.io.BufferedInputStream;",
      "13: import java.io.BufferedOutputStream;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: import jenkins.security.HMACConfidentialKey;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:         }",
      "86:         protected void run() throws IOException, InterruptedException {",
      "88:                 error(out, \"Unauthorized access\");",
      "89:                 return;",
      "90:             }",
      "93:             SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);",
      "94:             if(computer==null) {",
      "95:                 error(out, \"No such slave: \"+nodeName);",
      "",
      "[Removed Lines]",
      "87:             if(!getSecretKey().equals(in.readUTF())) {",
      "92:             final String nodeName = in.readUTF();",
      "",
      "[Added Lines]",
      "88:             final String secret = in.readUTF();",
      "89:             final String nodeName = in.readUTF();",
      "91:             if(!SLAVE_SECRET.mac(nodeName).equals(secret)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "138:             }",
      "139:         }",
      "145:         protected void error(PrintWriter out, String msg) throws IOException {",
      "146:             out.println(msg);",
      "147:             LOGGER.log(Level.WARNING,Thread.currentThread().getName()+\" is aborted: \"+msg);",
      "",
      "[Removed Lines]",
      "141:         protected String getSecretKey() {",
      "142:             return Jenkins.getInstance().getSecretKey();",
      "143:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:     }",
      "152:     private static final Logger LOGGER = Logger.getLogger(JnlpSlaveAgentProtocol.class.getName());",
      "153: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:     public static final HMACConfidentialKey SLAVE_SECRET = new HMACConfidentialKey(JnlpSlaveAgentProtocol.class,\"secret\");",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java||core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java": [
      "File: core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java -> core/src/main/java/jenkins/slaves/JnlpSlaveAgentProtocol2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:             Properties request = new Properties();",
      "58:             request.load(new ByteArrayInputStream(in.readUTF().getBytes(\"UTF-8\")));",
      "61:                 error(out, \"Unauthorized access\");",
      "62:                 return;",
      "63:             }",
      "66:             SlaveComputer computer = (SlaveComputer) Jenkins.getInstance().getComputer(nodeName);",
      "67:             if(computer==null) {",
      "68:                 error(out, \"No such slave: \"+nodeName);",
      "",
      "[Removed Lines]",
      "60:             if(!getSecretKey().equals(request.getProperty(\"Secret-Key\"))) {",
      "65:             final String nodeName = request.getProperty(\"Node-Name\");",
      "",
      "[Added Lines]",
      "60:             final String nodeName = request.getProperty(\"Node-Name\");",
      "62:             if(!SLAVE_SECRET.mac(nodeName).equals(request.getProperty(\"Secret-Key\"))) {",
      "",
      "---------------"
    ],
    "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
      "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:   <!--",
      "32:     See http://www.dallaway.com/acad/webstart/ for obtaining the certificate.",
      "33:   -->",
      "35:     <!-- See http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html for the syntax -->",
      "36:     <jnlp spec=\"1.0+\"",
      "37:         codebase=\"${rootURL}computer/${h.encode(it.node.nodeName)}/\">",
      "",
      "[Removed Lines]",
      "34:   <l:isAdminOrTest test=\"true\">",
      "",
      "[Added Lines]",
      "34:   <j:getStatic var=\"connect\" className=\"hudson.model.Computer\" field=\"CONNECT\"/>",
      "35:   ${it.checkPermission(connect)}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:       </resources>",
      "63:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
      "65:         <argument>${it.node.nodeName}</argument>",
      "66:         <j:if test=\"${it.launcher.tunnel!=null}\">",
      "67:           <argument>-tunnel</argument>",
      "",
      "[Removed Lines]",
      "64:         <argument>${app.secretKey}</argument>",
      "",
      "[Added Lines]",
      "66:         <argument>${it.jnlpMac}</argument>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:         </j:if>",
      "88:       </application-desc>",
      "89:     </jnlp>",
      "91: </j:jelly>",
      "",
      "[Removed Lines]",
      "90:   </l:isAdminOrTest>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.groovy||core/src/test/java/hudson/util/SecretTest.groovy": [
      "File: core/src/test/java/hudson/util/SecretTest.groovy -> core/src/test/java/hudson/util/SecretTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.util",
      "26: import com.trilead.ssh2.crypto.Base64;",
      "27: import jenkins.model.Jenkins",
      "28: import jenkins.security.ConfidentialStoreRule;",
      "29: import org.junit.After",
      "30: import org.junit.Before",
      "31: import org.junit.Rule",
      "32: import org.junit.Test",
      "34: import javax.crypto.Cipher;",
      "35: import java.security.SecureRandom;",
      "37: import hudson.Util;",
      "42: public class SecretTest {",
      "43:     @Rule",
      "44:     public ConfidentialStoreRule confidentialStore = new ConfidentialStoreRule()",
      "46:     @Test @Before",
      "47:     void setUp() {",
      "48:         def sr = new SecureRandom();",
      "49:         byte[] random = new byte[32];",
      "50:         sr.nextBytes(random);",
      "51:         Secret.SECRET = Util.toHexString(random);",
      "52:     }",
      "54:     @Test @After",
      "55:     void tearDown() {",
      "56:         Secret.SECRET = null;",
      "57:     }",
      "59:     @Test",
      "60:     void testEncrypt() {",
      "61:         def secret = Secret.fromString(\"abc\");",
      "62:         assert \"abc\"==secret.plainText;",
      "65:         println secret.encryptedValue;",
      "66:         assert !\"abc\".equals(secret.encryptedValue);",
      "69:         assert secret==Secret.fromString(secret.encryptedValue);",
      "70:     }",
      "72:     @Test",
      "73:     void testDecrypt() {",
      "74:         assert \"abc\"==Secret.toString(Secret.fromString(\"abc\"))",
      "75:     }",
      "77:     @Test",
      "78:     void testSerialization() {",
      "79:         def s = Secret.fromString(\"Mr.Jenkins\");",
      "80:         def xml = Jenkins.XSTREAM.toXML(s);",
      "81:         assert !xml.contains(s.plainText)",
      "82:         assert xml.contains(s.encryptedValue)",
      "84:         def o = Jenkins.XSTREAM.fromXML(xml);",
      "85:         assert o==s : xml;",
      "86:     }",
      "88:     public static class Foo {",
      "89:         Secret password;",
      "90:     }",
      "95:     @Test",
      "96:     void testCompatibilityFromString() {",
      "97:         def tagName = Foo.class.name.replace(\"\\$\",\"_-\");",
      "98:         def xml = \"<$tagName><password>secret</password></$tagName>\";",
      "99:         def foo = new Foo();",
      "100:         Jenkins.XSTREAM.fromXML(xml, foo);",
      "101:         assert \"secret\"==Secret.toString(foo.password)",
      "102:     }",
      "107:     @Test",
      "108:     void migrationFromLegacyKeyToConfidentialStore() {",
      "109:         def legacy = Secret.legacyKey",
      "110:         [\"Hello world\",\"\",\"\\u0000unprintable\"].each { str ->",
      "111:             def cipher = Secret.getCipher(\"AES\");",
      "112:             cipher.init(Cipher.ENCRYPT_MODE, legacy);",
      "113:             def old = new String(Base64.encode(cipher.doFinal((str + Secret.MAGIC).getBytes(\"UTF-8\"))))",
      "114:             def s = Secret.fromString(old)",
      "115:             assert s.plainText==str : \"secret by the old key should decrypt\"",
      "116:             assert s.encryptedValue!=old : \"but when encrypting, ConfidentialKey should be in use\"",
      "117:         }",
      "118:     }",
      "119: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/util/SecretTest.java||core/src/test/java/hudson/util/SecretTest.java": [
      "File: core/src/test/java/hudson/util/SecretTest.java -> core/src/test/java/hudson/util/SecretTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/ConfidentialStoreRule.java||core/src/test/java/jenkins/security/ConfidentialStoreRule.java": [
      "File: core/src/test/java/jenkins/security/ConfidentialStoreRule.java -> core/src/test/java/jenkins/security/ConfidentialStoreRule.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.Util;",
      "4: import org.junit.rules.ExternalResource;",
      "6: import java.io.File;",
      "7: import java.io.IOException;",
      "13: public class ConfidentialStoreRule extends ExternalResource {",
      "14:     public ConfidentialStore store;",
      "15:     public File tmp;",
      "17:     @Override",
      "18:     protected void before() throws Throwable {",
      "19:         tmp = Util.createTempDir();",
      "20:         store = new DefaultConfidentialStore(tmp);",
      "21:         ConfidentialStore.TEST.set(store);",
      "22:     }",
      "24:     @Override",
      "25:     protected void after() {",
      "26:         ConfidentialStore.TEST.set(null);",
      "27:         try {",
      "28:             Util.deleteRecursive(tmp);",
      "29:         } catch (IOException e) {",
      "30:             throw new Error(e);",
      "31:         }",
      "32:     }",
      "34:     static {",
      "35:         ConfidentialStore.TEST = new ThreadLocal<ConfidentialStore>();",
      "36:     }",
      "37: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/CryptoConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class CryptoConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     def key = new CryptoConfidentialKey(\"test\")",
      "17:     @Test",
      "18:     void decryptGetsPlainTextBack() {",
      "19:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "20:             assert key.decrypt().doFinal(key.encrypt().doFinal(str.bytes))==str.bytes",
      "21:         }",
      "22:     }",
      "24:     @Test",
      "25:     void multipleEncryptsAreIdempotent() {",
      "26:         def str = \"Hello world\".bytes",
      "27:         assert key.encrypt().doFinal(str)==key.encrypt().doFinal(str)",
      "28:     }",
      "30:     @Test",
      "31:     void loadingExistingKey() {",
      "32:         def key2 = new CryptoConfidentialKey(\"test\") // this will cause the key to be loaded from the disk",
      "33:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "34:             assert key2.decrypt().doFinal(key.encrypt().doFinal(str.bytes))==str.bytes",
      "35:         }",
      "36:     }",
      "37: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy||core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy": [
      "File: core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy -> core/src/test/java/jenkins/security/DefaultConfidentialStoreTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import hudson.FilePath",
      "4: import hudson.Functions",
      "5: import hudson.Util",
      "6: import org.junit.After",
      "7: import org.junit.Before",
      "8: import org.junit.Test",
      "13: public class DefaultConfidentialStoreTest {",
      "15:     def tmp;",
      "17:     @Before",
      "18:     void setup() {",
      "19:         tmp = Util.createTempDir()",
      "20:     }",
      "22:     @After",
      "23:     void tearDown() {",
      "24:         Util.deleteRecursive(tmp)",
      "25:     }",
      "27:     @Test",
      "28:     void roundtrip() {",
      "29:         tmp.deleteDir()   // let ConfidentialStore create a directory",
      "31:         def store = new DefaultConfidentialStore(tmp);",
      "32:         def key = new ConfidentialKey(\"test\") {};",
      "35:         def str = \"Hello world!\"",
      "36:         store.store(key, str.bytes)",
      "37:         assert new String(store.load(key))==str",
      "40:         assert new File(tmp,\"test\").exists()",
      "41:         assert new File(tmp,\"master.key\").exists()",
      "43:         assert !new File(tmp,\"test\").text.contains(\"Hello\") // the data shouldn't be a plain text, obviously",
      "45:         if (!Functions.isWindows())",
      "46:             assert (new FilePath(tmp).mode()&0777) == 0700 // should be read only",
      "49:         new File(tmp,\"master.key\").delete()",
      "50:         def store2 = new DefaultConfidentialStore(tmp)",
      "51:         assert new File(tmp,\"master.key\").exists()  // we should have a new key now",
      "52:         assert store2.load(key)==null;",
      "53:     }",
      "54: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/HMACConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class HMACConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     def key = new HMACConfidentialKey(\"test\",16)",
      "17:     @Test",
      "18:     void basics() {",
      "19:         def unique = [] as TreeSet",
      "20:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "21:             def mac = key.mac(str)",
      "22:             unique.add(mac)",
      "23:             assert mac =~ /[0-9A-Fa-f]{32}/",
      "24:             assert key.checkMac(str,mac)",
      "25:             assert !key.checkMac(\"garbage\",mac)",
      "26:         }",
      "28:         assert unique.size()==3 // make sure all 3 MAC are different",
      "29:     }",
      "31:     @Test",
      "32:     void loadingExistingKey() {",
      "34:         def key2 = new HMACConfidentialKey(\"test\",16)",
      "35:         [\"Hello world\",\"\",\"\\u0000\"].each { str ->",
      "36:             assert key.mac(str)==key2.mac(str)",
      "37:         }",
      "38:     }",
      "39: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy||core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy": [
      "File: core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy -> core/src/test/java/jenkins/security/HexStringConfidentialKeyTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security",
      "3: import org.junit.Rule",
      "4: import org.junit.Test",
      "11: class HexStringConfidentialKeyTest {",
      "12:     @Rule",
      "13:     public ConfidentialStoreRule store = new ConfidentialStoreRule()",
      "15:     @Test",
      "16:     void hexStringShouldProduceHexString() {",
      "17:         def key = new HexStringConfidentialKey(\"test\",8)",
      "18:         assert key.get() =~ /[A-Fa-f0-9]{8}/",
      "19:     }",
      "21:     @Test",
      "22:     void multipleGetsAreIdempotent() {",
      "23:         def key = new HexStringConfidentialKey(\"test\",8)",
      "24:         assert key.get()==key.get()",
      "25:     }",
      "27:     @Test",
      "28:     void specifyLengthAndMakeSureItTakesEffect() {",
      "29:         [8,16,32,256].each { n ->",
      "30:             new HexStringConfidentialKey(\"test\"+n,n).get().length()==n",
      "31:         }",
      "32:     }",
      "34:     @Test",
      "35:     void loadingExistingKey() {",
      "36:         def key1 = new HexStringConfidentialKey(\"test\",8)",
      "37:         key1.get() // this causes the ke to be generated",
      "40:         def key2 = new HexStringConfidentialKey(\"test\",8)",
      "41:         assert key1.get()==key2.get()",
      "42:     }",
      "43: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
      "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.bugs;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "28: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39: import org.jvnet.hudson.test.recipes.PresetData;",
      "40: import org.jvnet.hudson.test.recipes.PresetData.DataSet;",
      "42: import java.net.URL;",
      "43: import java.util.Collections;",
      "44: import java.util.List;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: import java.net.HttpURLConnection;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58:         return new DumbSlave(name,\"\",System.getProperty(\"java.io.tmpdir\")+'/'+name,\"2\", Mode.NORMAL, \"\", new JNLPLauncher(), RetentionStrategy.INSTANCE, Collections.EMPTY_LIST);",
      "59:     }",
      "62:     @Email(\"http://www.nabble.com/Launching-slave-by-JNLP-with-Active-Directory-plugin-and-matrix-security-problem-td18980323.html\")",
      "63:     public void test() throws Exception {",
      "64:         jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
      "",
      "[Removed Lines]",
      "61:     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)",
      "",
      "[Added Lines]",
      "63:     @PresetData(DataSet.ANONYMOUS_READONLY)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "80:             Page jarResource = jnlpAgent.getPage(url);",
      "81:             assertTrue(jarResource.getWebResponse().getContentType().toLowerCase(Locale.ENGLISH).startsWith(\"application/\"));",
      "82:         }",
      "83:     }",
      "84: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:         try {",
      "88:             jnlp = (XmlPage) jnlpAgent.goTo(\"computer/test/slave-agent.jnlp\", \"application/x-java-jnlp-file\");",
      "89:             fail(\"anonymous users must not be able to get secrets\");",
      "90:         } catch (FailingHttpStatusCodeException x) {",
      "91:             assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());",
      "92:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ad08359f53fbb589d7830031317d0d184c6dd330",
      "candidate_info": {
        "commit_hash": "ad08359f53fbb589d7830031317d0d184c6dd330",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/ad08359f53fbb589d7830031317d0d184c6dd330",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "war/pom.xml"
        ],
        "message": "[SECURITY-54] Massaging the original fix.\n\n- Use the proper block cipher mode.\n  Or else the information about the plain text still ends up revealing as a pattern without the attacker knowing the key.\n- No need to hide SLAVE_SECRET from the encrypted payload.\n  jnlpMac is needed to decrypt this payload to begin with, so there's no point in hiding it. This simplifies the code a little bit.\n- Using a newer slave installer that uses the -secret option\n(cherry picked from commit f4496df19e36465ae8d7cfebc6cde75f2888585b)",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
          ],
          "candidate": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.slaves;",
          "26: import hudson.model.*;",
          "27: import hudson.util.IOUtils;",
          "28: import hudson.util.io.ReopenableRotatingFileOutputStream;",
          "29: import jenkins.model.Jenkins.MasterComputer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.util.IOException2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import java.io.InputStream;",
          "48: import java.io.IOException;",
          "49: import java.io.PrintStream;",
          "50: import java.util.logging.Level;",
          "51: import java.util.logging.LogRecord;",
          "52: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import java.security.SecureRandom;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: import java.security.GeneralSecurityException;",
          "65: import javax.crypto.Cipher;",
          "66: import javax.crypto.SecretKey;",
          "67: import javax.crypto.spec.SecretKeySpec;",
          "68: import javax.servlet.RequestDispatcher;",
          "69: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: import javax.crypto.spec.IvParameterSpec;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:     public void doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) throws IOException, ServletException {",
          "555:         RequestDispatcher view = req.getView(this, \"slave-agent.jnlp.jelly\");",
          "556:         if (\"true\".equals(req.getParameter(\"encrypt\"))) {",
          "558:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "559:             StaplerResponse temp = new ResponseImpl(req.getStapler(), new HttpServletResponseWrapper(res) {",
          "560:                 @Override public ServletOutputStream getOutputStream() throws IOException {",
          "",
          "[Removed Lines]",
          "557:             req.setAttribute(\"jnlpMac\", \"SLAVE_SECRET\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "565:                 }",
          "566:             });",
          "567:             view.forward(req, temp);",
          "568:             byte[] jnlpMac = JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName().getBytes(\"UTF-8\"));",
          "569:             SecretKey key = new SecretKeySpec(jnlpMac, 0, /* export restrictions */ 128 / 8, \"AES\");",
          "570:             byte[] encrypted;",
          "571:             try {",
          "574:                 encrypted = c.doFinal(baos.toByteArray());",
          "575:             } catch (GeneralSecurityException x) {",
          "577:             }",
          "578:             res.setContentType(\"application/octet-stream\");",
          "579:             res.getOutputStream().write(encrypted);",
          "580:         } else {",
          "581:             checkPermission(CONNECT);",
          "583:             view.forward(req, res);",
          "584:         }",
          "585:     }",
          "",
          "[Removed Lines]",
          "572:                 Cipher c = Secret.getCipher(\"AES\");",
          "573:                 c.init(Cipher.ENCRYPT_MODE, key);",
          "576:                 throw new IOException(x);",
          "582:             req.setAttribute(\"jnlpMac\", getJnlpMac());",
          "",
          "[Added Lines]",
          "571:             byte[] iv = new byte[128/8];",
          "572:             new SecureRandom().nextBytes(iv);",
          "578:                 Cipher c = Secret.getCipher(\"AES/CFB8/NoPadding\");",
          "579:                 c.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));",
          "582:                 throw new IOException2(x);",
          "585:             res.getOutputStream().write(iv);",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
          "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:       </resources>",
          "63:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
          "65:         <argument>${it.node.nodeName}</argument>",
          "66:         <j:if test=\"${it.launcher.tunnel!=null}\">",
          "67:           <argument>-tunnel</argument>",
          "",
          "[Removed Lines]",
          "64:         <argument>${jnlpMac}</argument>",
          "",
          "[Added Lines]",
          "64:         <argument>${it.jnlpMac}</argument>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3d8e05a1b3d58b6c4dcff97394cb3a79608b4b2",
      "candidate_info": {
        "commit_hash": "c3d8e05a1b3d58b6c4dcff97394cb3a79608b4b2",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c3d8e05a1b3d58b6c4dcff97394cb3a79608b4b2",
        "files": [
          "core/src/main/java/jenkins/security/ConfidentialStore.java",
          "core/src/main/java/jenkins/security/DefaultConfidentialStore.java"
        ],
        "message": "[SECURITY-49] Backing off from @Extension-based discovery.\n\nThis is because we discovered some plugins that use Secret early on in\nthe initialization.",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java",
          "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java",
            "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java",
            "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ConfidentialStore.java||core/src/main/java/jenkins/security/ConfidentialStore.java": [
          "File: core/src/main/java/jenkins/security/ConfidentialStore.java -> core/src/main/java/jenkins/security/ConfidentialStore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.security;",
          "3: import hudson.Extension;",
          "4: import jenkins.model.Jenkins;",
          "6: import javax.annotation.CheckForNull;",
          "7: import javax.annotation.Nonnull;",
          "8: import java.io.IOException;",
          "9: import java.security.SecureRandom;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import hudson.Lookup;",
          "5: import hudson.init.InitMilestone;",
          "6: import hudson.util.Secret;",
          "7: import hudson.util.Service;",
          "9: import org.kohsuke.MetaInfServices;",
          "15: import java.util.List;",
          "16: import java.util.logging.Level;",
          "17: import java.util.logging.Logger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:     public static @Nonnull ConfidentialStore get() {",
          "53:         if (TEST!=null) return TEST.get();",
          "55:     }",
          "61: }",
          "",
          "[Removed Lines]",
          "54:         return Jenkins.getInstance().getExtensionList(ConfidentialStore.class).get(0);",
          "",
          "[Added Lines]",
          "66:         Lookup lookup = Jenkins.getInstance().lookup;",
          "67:         ConfidentialStore cs = lookup.get(ConfidentialStore.class);",
          "68:         if (cs==null) {",
          "69:             try {",
          "70:                 List<ConfidentialStore> r = (List) Service.loadInstances(ConfidentialStore.class.getClassLoader(), ConfidentialStore.class);",
          "71:                 if (!r.isEmpty())",
          "72:                     cs = r.get(0);",
          "73:             } catch (IOException e) {",
          "74:                 LOGGER.log(Level.WARNING, \"Failed to list up ConfidentialStore implementations\",e);",
          "76:             }",
          "78:             if (cs==null)",
          "79:                 try {",
          "80:                     cs = new DefaultConfidentialStore();",
          "81:                 } catch (Exception e) {",
          "83:                     throw new Error(e);",
          "84:                 }",
          "86:             cs = lookup.setIfNull(ConfidentialStore.class,cs);",
          "87:         }",
          "88:         return cs;",
          "96:     private static final Logger LOGGER = Logger.getLogger(ConfidentialStore.class.getName());",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/DefaultConfidentialStore.java||core/src/main/java/jenkins/security/DefaultConfidentialStore.java": [
          "File: core/src/main/java/jenkins/security/DefaultConfidentialStore.java -> core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package jenkins.security;",
          "4: import hudson.FilePath;",
          "5: import hudson.Util;",
          "6: import hudson.util.IOException2;",
          "",
          "[Removed Lines]",
          "3: import hudson.Extension;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: public class DefaultConfidentialStore extends ConfidentialStore {",
          "33:     private final SecureRandom sr = new SecureRandom();",
          "",
          "[Removed Lines]",
          "31: @Extension(ordinal=-99999) // small ordinal value to allow other higher ones to take over",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01a24e2cb1e885895c35fdf409c4305dcd877cd8",
      "candidate_info": {
        "commit_hash": "01a24e2cb1e885895c35fdf409c4305dcd877cd8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/01a24e2cb1e885895c35fdf409c4305dcd877cd8",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "pom.xml",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ],
        "message": "[SECURITY-54]\n\nJesse's original patch",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly||core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import hudson.remoting.Launcher;",
          "41: import static hudson.slaves.SlaveComputer.LogHolder.SLAVE_LOG_HANDLER;",
          "42: import hudson.slaves.OfflineCause.ChannelTermination;",
          "44: import java.io.File;",
          "45: import java.io.OutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import hudson.util.Secret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import java.security.Security;",
          "60: import hudson.util.io.ReopenableFileOutputStream;",
          "61: import jenkins.model.Jenkins;",
          "62: import jenkins.slaves.JnlpSlaveAgentProtocol;",
          "63: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: import java.io.ByteArrayOutputStream;",
          "63: import java.io.PrintWriter;",
          "64: import java.security.GeneralSecurityException;",
          "65: import javax.crypto.Cipher;",
          "66: import javax.crypto.SecretKey;",
          "67: import javax.crypto.spec.SecretKeySpec;",
          "68: import javax.servlet.RequestDispatcher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: import org.kohsuke.stapler.HttpRedirect;",
          "69: import javax.servlet.ServletException;",
          "",
          "[Removed Lines]",
          "70: import javax.servlet.http.HttpServletResponse;",
          "",
          "[Added Lines]",
          "78: import javax.servlet.ServletOutputStream;",
          "79: import javax.servlet.http.HttpServletResponseWrapper;",
          "80: import org.kohsuke.stapler.ResponseImpl;",
          "81: import org.kohsuke.stapler.WebMethod;",
          "82: import org.kohsuke.stapler.compression.FilterServletOutputStream;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:         return new Slave.JnlpJar(fileName);",
          "536:     }",
          "538:     @Override",
          "539:     protected void kill() {",
          "540:         super.kill();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:     @WebMethod(name=\"slave-agent.jnlp\")",
          "554:     public void doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) throws IOException, ServletException {",
          "555:         RequestDispatcher view = req.getView(this, \"slave-agent.jnlp.jelly\");",
          "556:         if (\"true\".equals(req.getParameter(\"encrypt\"))) {",
          "557:             req.setAttribute(\"jnlpMac\", \"SLAVE_SECRET\");",
          "558:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "559:             StaplerResponse temp = new ResponseImpl(req.getStapler(), new HttpServletResponseWrapper(res) {",
          "560:                 @Override public ServletOutputStream getOutputStream() throws IOException {",
          "561:                     return new FilterServletOutputStream(baos);",
          "562:                 }",
          "563:                 @Override public PrintWriter getWriter() throws IOException {",
          "564:                     throw new IllegalStateException();",
          "565:                 }",
          "566:             });",
          "567:             view.forward(req, temp);",
          "568:             byte[] jnlpMac = JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName().getBytes(\"UTF-8\"));",
          "569:             SecretKey key = new SecretKeySpec(jnlpMac, 0, /* export restrictions */ 128 / 8, \"AES\");",
          "570:             byte[] encrypted;",
          "571:             try {",
          "572:                 Cipher c = Secret.getCipher(\"AES\");",
          "573:                 c.init(Cipher.ENCRYPT_MODE, key);",
          "574:                 encrypted = c.doFinal(baos.toByteArray());",
          "575:             } catch (GeneralSecurityException x) {",
          "576:                 throw new IOException(x);",
          "577:             }",
          "578:             res.setContentType(\"application/octet-stream\");",
          "579:             res.getOutputStream().write(encrypted);",
          "580:         } else {",
          "581:             checkPermission(CONNECT);",
          "582:             req.setAttribute(\"jnlpMac\", getJnlpMac());",
          "583:             view.forward(req, res);",
          "584:         }",
          "585:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3567:             || rest.startsWith(\"/adjuncts/\")",
          "3568:             || rest.startsWith(\"/signup\")",
          "3569:             || rest.startsWith(\"/tcpSlaveAgentListener\")",
          "3570:             || rest.startsWith(\"/cli\")",
          "3571:             || rest.startsWith(\"/federatedLoginService/\")",
          "3572:             || rest.startsWith(\"/securityRealm\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3571:             || rest.matches(\"/computer/.+/slave-agent[.]jnlp\") && \"true\".equals(Stapler.getCurrentRequest().getParameter(\"encrypt\"))",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly||core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly": [
          "File: core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly -> core/src/main/resources/hudson/slaves/JNLPLauncher/main.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:                 <p>",
          "66:                   ${%Run from slave command line:}",
          "67:                 </p>",
          "69:               </li>",
          "70:             </j:otherwise>",
          "71:           </j:choose>",
          "",
          "[Removed Lines]",
          "68:                 <pre>java -jar <a href=\"${rootURL}/jnlpJars/slave.jar\">slave.jar</a> -jnlpUrl ${h.inferHudsonURL(request)}${it.url}slave-agent.jnlp -jnlpCredentials ${app.authentication.name}:<a href=\"${rootURL}/user/${app.authentication.name}/configure\" target=\"_blank\">your-API-token</a></pre>",
          "",
          "[Added Lines]",
          "68:                 <!-- XXX conceal secret w/ JS if possible -->",
          "69:                 <pre>java -jar <a href=\"${rootURL}/jnlpJars/slave.jar\">slave.jar</a> -jnlpUrl ${h.inferHudsonURL(request)}${it.url}slave-agent.jnlp -secret ${it.jnlpMac}</pre>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:       </p>",
          "86:     </j:otherwise>",
          "87:   </j:choose>",
          "",
          "[Removed Lines]",
          "88: </j:jelly>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
          "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   <!--",
          "32:     See http://www.dallaway.com/acad/webstart/ for obtaining the certificate.",
          "33:   -->",
          "37:     <!-- See http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html for the syntax -->",
          "38:     <jnlp spec=\"1.0+\"",
          "",
          "[Removed Lines]",
          "34:   <j:getStatic var=\"connect\" className=\"hudson.model.Computer\" field=\"CONNECT\"/>",
          "35:   ${it.checkPermission(connect)}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       </resources>",
          "65:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
          "67:         <argument>${it.node.nodeName}</argument>",
          "68:         <j:if test=\"${it.launcher.tunnel!=null}\">",
          "69:           <argument>-tunnel</argument>",
          "",
          "[Removed Lines]",
          "66:         <argument>${it.jnlpMac}</argument>",
          "",
          "[Added Lines]",
          "64:         <argument>${jnlpMac}</argument>",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
          "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
        ]
      }
    },
    {
      "candidate_hash": "5d68a20700a6acbcb75be8984383d5844638f79e",
      "candidate_info": {
        "commit_hash": "5d68a20700a6acbcb75be8984383d5844638f79e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/5d68a20700a6acbcb75be8984383d5844638f79e",
        "files": [
          "test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "test/src/test/java/hudson/bugs/LoginRedirectTest.java",
          "test/src/test/java/hudson/maven/MavenProjectTest.java",
          "test/src/test/java/hudson/model/AbstractProjectTest.java",
          "test/src/test/java/hudson/model/ApiTest.java",
          "test/src/test/java/hudson/model/JobTest.java",
          "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "test/src/test/java/hudson/security/LoginTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java",
          "test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java"
        ],
        "message": "Using new assertFails method wherever possible to simplify tests.",
        "before_after_code_files": [
          "test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java||test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java",
          "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "test/src/test/java/hudson/bugs/LoginRedirectTest.java||test/src/test/java/hudson/bugs/LoginRedirectTest.java",
          "test/src/test/java/hudson/maven/MavenProjectTest.java||test/src/test/java/hudson/maven/MavenProjectTest.java",
          "test/src/test/java/hudson/model/AbstractProjectTest.java||test/src/test/java/hudson/model/AbstractProjectTest.java",
          "test/src/test/java/hudson/model/ApiTest.java||test/src/test/java/hudson/model/ApiTest.java",
          "test/src/test/java/hudson/model/JobTest.java||test/src/test/java/hudson/model/JobTest.java",
          "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java||test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "test/src/test/java/hudson/security/LoginTest.java||test/src/test/java/hudson/security/LoginTest.java",
          "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java",
          "test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java||test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java||test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java": [
          "File: test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java -> test/src/main/java/org/jvnet/hudson/test/JenkinsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: import static org.hamcrest.Matchers.is;",
          "211: import static org.hamcrest.Matchers.not;",
          "212: import static org.hamcrest.Matchers.notNullValue;",
          "215: import static org.junit.matchers.JUnitMatchers.containsString;",
          "",
          "[Removed Lines]",
          "213: import static org.junit.Assert.assertThat;",
          "214: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "213: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1924:                 return null;",
          "1925:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1932:         public void assertFails(String url, int statusCode) throws Exception {",
          "1933:             try {",
          "1934:                 fail(url + \" should have been rejected but produced: \" + super.getPage(getContextPath() + url).getWebResponse().getContentAsString());",
          "1935:             } catch (FailingHttpStatusCodeException x) {",
          "1936:                 assertEquals(statusCode, x.getStatusCode());",
          "1937:             }",
          "1938:         }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java||test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java": [
          "File: test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java -> test/src/test/java/hudson/bugs/JnlpAccessWithSecuredHudsonTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.bugs;",
          "27: import com.gargoylesoftware.htmlunit.Page;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
          "",
          "[Removed Lines]",
          "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     @PresetData(DataSet.ANONYMOUS_READONLY)",
          "91:     public void testAnonymousCannotGetSecrets() throws Exception {",
          "92:         jenkins.setNodes(Collections.singletonList(createNewJnlpSlave(\"test\")));",
          "99:     }",
          "101:     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)",
          "",
          "[Removed Lines]",
          "93:         try {",
          "94:             new WebClient().goTo(\"computer/test/slave-agent.jnlp\", \"application/x-java-jnlp-file\");",
          "95:             fail(\"anonymous users must not be able to get secrets\");",
          "96:         } catch (FailingHttpStatusCodeException x) {",
          "97:             assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());",
          "98:         }",
          "",
          "[Added Lines]",
          "92:         new WebClient().assertFails(\"computer/test/slave-agent.jnlp\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/bugs/LoginRedirectTest.java||test/src/test/java/hudson/bugs/LoginRedirectTest.java": [
          "File: test/src/test/java/hudson/bugs/LoginRedirectTest.java -> test/src/test/java/hudson/bugs/LoginRedirectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.bugs;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import org.jvnet.hudson.test.Bug;",
          "30: import org.jvnet.hudson.test.HudsonTestCase;",
          "31: import org.jvnet.hudson.test.recipes.PresetData;",
          "",
          "[Removed Lines]",
          "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "28: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     @PresetData(DataSet.NO_ANONYMOUS_READACCESS)",
          "67:     public void testRedirect2() throws Exception {",
          "74:     }",
          "75: }",
          "",
          "[Removed Lines]",
          "68:         try {",
          "69:             new WebClient().goTo(\"/\");",
          "70:             fail();",
          "71:         } catch (FailingHttpStatusCodeException e) {",
          "72:             assertEquals(403,e.getStatusCode());",
          "73:         }",
          "",
          "[Added Lines]",
          "68:         new WebClient().assertFails(\"/\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/maven/MavenProjectTest.java||test/src/test/java/hudson/maven/MavenProjectTest.java": [
          "File: test/src/test/java/hudson/maven/MavenProjectTest.java -> test/src/test/java/hudson/maven/MavenProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.jvnet.hudson.test.ExtractResourceSCM;",
          "39: import org.jvnet.hudson.test.HudsonTestCase;",
          "",
          "[Removed Lines]",
          "41: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "41: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:         HudsonTestCase.WebClient wc = new WebClient();",
          "100:         wc.getPage(project,\"site\");",
          "107:     }",
          "",
          "[Removed Lines]",
          "101:         try {",
          "102:             wc.getPage(project,\"site/no-such-file\");",
          "103:             fail(\"should have resulted in 404\");",
          "104:         } catch (FailingHttpStatusCodeException e) {",
          "105:             assertEquals(404,e.getStatusCode());",
          "106:         }",
          "",
          "[Added Lines]",
          "101:         wc.assertFails(project.getUrl() + \"site/no-such-file\", HttpURLConnection.HTTP_NOT_FOUND);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/AbstractProjectTest.java||test/src/test/java/hudson/model/AbstractProjectTest.java": [
          "File: test/src/test/java/hudson/model/AbstractProjectTest.java -> test/src/test/java/hudson/model/AbstractProjectTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.model;",
          "26: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "29: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "",
          "[Removed Lines]",
          "27: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import java.util.concurrent.Future;",
          "50: import org.apache.commons.io.FileUtils;",
          "51: import java.lang.ref.WeakReference;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         assertTrue(\"Workspace should exist by now\",b.getWorkspace().exists());",
          "109:     }",
          "",
          "[Removed Lines]",
          "103:         try {",
          "104:             new WebClient().getPage(project,\"doWipeOutWorkspace\");",
          "105:             fail(\"Should have failed\");",
          "106:         } catch (FailingHttpStatusCodeException e) {",
          "107:             assertEquals(e.getStatusCode(),403);",
          "108:         }",
          "",
          "[Added Lines]",
          "103:         new WebClient().assertFails(project.getUrl() + \"doWipeOutWorkspace\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/ApiTest.java||test/src/test/java/hudson/model/ApiTest.java": [
          "File: test/src/test/java/hudson/model/ApiTest.java -> test/src/test/java/hudson/model/ApiTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.model;",
          "27: import com.gargoylesoftware.htmlunit.Page;",
          "28: import org.jvnet.hudson.test.HudsonTestCase;",
          "29: import org.jvnet.hudson.test.Bug;",
          "",
          "[Removed Lines]",
          "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "27: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     }",
          "60:     public void testUnwrappedZeroItems() throws Exception {",
          "66:     }",
          "68:     public void testUnwrappedOneItem() throws Exception {",
          "",
          "[Removed Lines]",
          "61:         try {",
          "62:             new WebClient().goTo(\"api/xml?xpath=/hudson/nonexistent\", \"application/xml\");",
          "63:         } catch (FailingHttpStatusCodeException x) {",
          "64:             assertEquals(404, x.getStatusCode());",
          "65:         }",
          "",
          "[Added Lines]",
          "61:         new WebClient().assertFails(\"api/xml?xpath=/hudson/nonexistent\", HttpURLConnection.HTTP_NOT_FOUND);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:     public void testUnwrappedMultipleItems() throws Exception {",
          "82:         createFreeStyleProject();",
          "83:         createFreeStyleProject();",
          "89:     }",
          "90: }",
          "",
          "[Removed Lines]",
          "84:         try {",
          "85:             new WebClient().goTo(\"api/xml?xpath=/hudson/job/name\", \"application/xml\");",
          "86:         } catch (FailingHttpStatusCodeException x) {",
          "87:             assertEquals(500, x.getStatusCode());",
          "88:         }",
          "",
          "[Added Lines]",
          "80:         new WebClient().assertFails(\"api/xml?xpath=/hudson/job/name\", HttpURLConnection.HTTP_INTERNAL_ERROR);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/JobTest.java||test/src/test/java/hudson/model/JobTest.java": [
          "File: test/src/test/java/hudson/model/JobTest.java -> test/src/test/java/hudson/model/JobTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import hudson.util.TextFile;",
          "32: import java.io.IOException;",
          "33: import java.util.concurrent.CountDownLatch;",
          "35: import jenkins.model.ProjectNamingStrategy;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:     @LocalData",
          "169:     public void testReadPermission() throws Exception {",
          "170:         WebClient wc = new WebClient();",
          "179:         wc.login(\"joe\");  // Has Item.READ permission",
          "181:         wc.goTo(\"job/testJob/\");",
          "",
          "[Removed Lines]",
          "171:         try {",
          "172:             HtmlPage page = wc.goTo(\"job/testJob/\");",
          "173:             fail(\"getJob bypassed Item.READ permission: \" + page.getTitleText());",
          "174:         } catch (FailingHttpStatusCodeException expected) { }",
          "175:         try {",
          "176:             HtmlPage page = wc.goTo(\"jobCaseInsensitive/testJob/\");",
          "177:             fail(\"getJobCaseInsensitive bypassed Item.READ permission: \" + page.getTitleText());",
          "178:         } catch (FailingHttpStatusCodeException expected) { }",
          "",
          "[Added Lines]",
          "172:         wc.assertFails(\"job/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);",
          "173:         wc.assertFails(\"jobCaseInsensitive/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:         boolean saveEnabled = Item.EXTENDED_READ.getEnabled();",
          "190:         Item.EXTENDED_READ.setEnabled(true);",
          "191:         try {",
          "198:             wc.login(\"alice\");  // Has CONFIGURE and EXTENDED_READ permission",
          "199:             tryConfigDotXml(wc, 500, \"Both perms; should get 500\");",
          "200:             wc.login(\"bob\");  // Has only CONFIGURE permission (this should imply EXTENDED_READ)",
          "",
          "[Removed Lines]",
          "192:             try {",
          "193:                 wc.goTo(\"job/testJob/config.xml\", \"text/plain\");",
          "194:                 fail(\"doConfigDotXml bypassed EXTENDED_READ permission\");",
          "195:             } catch (FailingHttpStatusCodeException expected) {",
          "196:                 assertEquals(\"403 for no permission\", 403, expected.getStatusCode());",
          "197:             }",
          "",
          "[Added Lines]",
          "187:             wc.assertFails(\"job/testJob/config.xml\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/ExtendedReadPermissionTest.java||test/src/test/java/hudson/security/ExtendedReadPermissionTest.java": [
          "File: test/src/test/java/hudson/security/ExtendedReadPermissionTest.java -> test/src/test/java/hudson/security/ExtendedReadPermissionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.security;",
          "4: import com.gargoylesoftware.htmlunit.html.HtmlButton;",
          "5: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "7: import hudson.model.Item;",
          "8: import org.jvnet.hudson.test.HudsonTestCase;",
          "9: import org.jvnet.hudson.test.recipes.LocalData;",
          "",
          "[Removed Lines]",
          "3: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "7: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         assertFalse(\"Charlie should not have extended read for this test\", gas.hasExplicitPermission(\"charlie\",Item.EXTENDED_READ));",
          "66:         WebClient wc = new WebClient().login(\"charlie\",\"charlie\");",
          "76:     }",
          "78:     @LocalData",
          "",
          "[Removed Lines]",
          "67:         try {",
          "68:             HtmlPage page = wc.goTo(\"job/a/configure\");",
          "69:         }",
          "70:         catch (FailingHttpStatusCodeException e) {",
          "71:             assertEquals(403,e.getStatusCode());",
          "72:             return;",
          "73:         }",
          "75:         fail(\"Charlie should not have been able to access the configuration page\");",
          "",
          "[Added Lines]",
          "67:         wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:         assertFalse(\"Bob should not have extended read for this test\", gas.hasExplicitPermission(\"bob\",Item.EXTENDED_READ));",
          "87:         WebClient wc = new WebClient().login(\"bob\",\"bob\");",
          "97:     }",
          "",
          "[Removed Lines]",
          "88:         try {",
          "89:             HtmlPage page = wc.goTo(\"job/a/configure\");",
          "90:         }",
          "91:         catch (FailingHttpStatusCodeException e) {",
          "92:             assertEquals(403,e.getStatusCode());",
          "93:             return;",
          "94:         }",
          "96:         fail(\"Bob should not have been able to access the configuration page\");",
          "",
          "[Added Lines]",
          "80:         wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/LoginTest.java||test/src/test/java/hudson/security/LoginTest.java": [
          "File: test/src/test/java/hudson/security/LoginTest.java -> test/src/test/java/hudson/security/LoginTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.security;",
          "4: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "5: import org.jvnet.hudson.test.HudsonTestCase;",
          "6: import org.jvnet.hudson.test.recipes.PresetData;",
          "",
          "[Removed Lines]",
          "3: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     public void testLoginErrorRedirect2() throws Exception {",
          "40:         WebClient wc = createWebClient();",
          "50:         verifyNotError(wc.login(\"alice\"));",
          "51:     }",
          "",
          "[Removed Lines]",
          "41:         try {",
          "42:             wc.goTo(\"loginError\");",
          "43:             fail(\"Expecting a 401 error\");",
          "44:         } catch (FailingHttpStatusCodeException e) {",
          "45:             e.printStackTrace();",
          "46:             assertEquals(SC_UNAUTHORIZED,e.getStatusCode());",
          "47:         }",
          "",
          "[Added Lines]",
          "40:         wc.assertFails(\"loginError\", SC_UNAUTHORIZED);",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/model/JenkinsTest.java||test/src/test/java/jenkins/model/JenkinsTest.java": [
          "File: test/src/test/java/jenkins/model/JenkinsTest.java -> test/src/test/java/jenkins/model/JenkinsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package jenkins.model;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "28: import hudson.maven.MavenModuleSet;",
          "29: import hudson.maven.MavenModuleSetBuild;",
          "31: import hudson.model.RootAction;",
          "32: import hudson.model.UnprotectedRootAction;",
          "33: import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;",
          "",
          "[Removed Lines]",
          "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "30: import hudson.model.InvisibleAction;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.jvnet.hudson.test.HudsonTestCase;",
          "43: import org.jvnet.hudson.test.TestExtension;",
          "44: import org.kohsuke.stapler.HttpResponse;",
          "",
          "[Removed Lines]",
          "45: import org.xml.sax.SAXException;",
          "47: import java.io.IOException;",
          "",
          "[Added Lines]",
          "43: import java.net.HttpURLConnection;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:         wc.goTo(\"/foobar/zot\");",
          "218:         assertEquals(3,jenkins.getExtensionList(RootAction.class).get(RootActionImpl.class).count);",
          "219:     }",
          "",
          "[Removed Lines]",
          "211:         try {",
          "212:             wc.goTo(\"/foobar-zot/\");",
          "213:             fail();",
          "214:         } catch (FailingHttpStatusCodeException e) {",
          "215:             assertEquals(500,e.getStatusCode());",
          "216:         }",
          "",
          "[Added Lines]",
          "207:         wc.assertFails(\"/foobar-zot/\", HttpURLConnection.HTTP_INTERNAL_ERROR);",
          "",
          "---------------"
        ],
        "test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java||test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java": [
          "File: test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java -> test/src/test/junit4/org/jvnet/hudson/main/UseRecipesWithJenkinsRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import static org.junit.Assert.assertEquals;",
          "5: import static org.junit.Assert.assertFalse;",
          "6: import static org.junit.Assert.assertNotNull;",
          "8: import hudson.LocalPluginManager;",
          "10: import java.io.File;",
          "",
          "[Removed Lines]",
          "7: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: import org.jvnet.hudson.test.recipes.WithPluginManager;",
          "23: import org.xml.sax.SAXException;",
          "26: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "28: public class UseRecipesWithJenkinsRuleTest {",
          "",
          "[Removed Lines]",
          "25: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     @PresetData(DataSet.ANONYMOUS_READONLY)",
          "47:     public void testPresetData() throws Exception {",
          "48:         WebClient wc = rule.createWebClient();",
          "57:         verifyNotError(wc.login(\"alice\"));",
          "58:     }",
          "",
          "[Removed Lines]",
          "49:         try {",
          "50:             wc.goTo(\"loginError\");",
          "51:             fail(\"Expecting a 401 error\");",
          "52:         } catch (FailingHttpStatusCodeException e) {",
          "53:             assertEquals(SC_UNAUTHORIZED,e.getStatusCode());",
          "54:         }",
          "",
          "[Added Lines]",
          "47:         wc.assertFails(\"loginError\", SC_UNAUTHORIZED);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4496df19e36465ae8d7cfebc6cde75f2888585b",
      "candidate_info": {
        "commit_hash": "f4496df19e36465ae8d7cfebc6cde75f2888585b",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f4496df19e36465ae8d7cfebc6cde75f2888585b",
        "files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "war/pom.xml"
        ],
        "message": "[SECURITY-54] Massaging the original fix.\n\n- Use the proper block cipher mode.\n  Or else the information about the plain text still ends up revealing as a pattern without the attacker knowing the key.\n- No need to hide SLAVE_SECRET from the encrypted payload.\n  jnlpMac is needed to decrypt this payload to begin with, so there's no point in hiding it. This simplifies the code a little bit.\n- Using a newer slave installer that uses the -secret option",
        "before_after_code_files": [
          "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
          "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
          ],
          "candidate": [
            "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java",
            "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/slaves/SlaveComputer.java||core/src/main/java/hudson/slaves/SlaveComputer.java": [
          "File: core/src/main/java/hudson/slaves/SlaveComputer.java -> core/src/main/java/hudson/slaves/SlaveComputer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.slaves;",
          "26: import hudson.model.*;",
          "27: import hudson.util.IOUtils;",
          "28: import hudson.util.io.ReopenableRotatingFileOutputStream;",
          "29: import jenkins.model.Jenkins.MasterComputer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.util.IOException2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import java.io.InputStream;",
          "48: import java.io.IOException;",
          "49: import java.io.PrintStream;",
          "50: import java.util.logging.Level;",
          "51: import java.util.logging.LogRecord;",
          "52: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import java.security.SecureRandom;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64: import java.security.GeneralSecurityException;",
          "65: import javax.crypto.Cipher;",
          "66: import javax.crypto.SecretKey;",
          "67: import javax.crypto.spec.SecretKeySpec;",
          "68: import javax.servlet.RequestDispatcher;",
          "69: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: import javax.crypto.spec.IvParameterSpec;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "554:     public void doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) throws IOException, ServletException {",
          "555:         RequestDispatcher view = req.getView(this, \"slave-agent.jnlp.jelly\");",
          "556:         if (\"true\".equals(req.getParameter(\"encrypt\"))) {",
          "558:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "559:             StaplerResponse temp = new ResponseImpl(req.getStapler(), new HttpServletResponseWrapper(res) {",
          "560:                 @Override public ServletOutputStream getOutputStream() throws IOException {",
          "",
          "[Removed Lines]",
          "557:             req.setAttribute(\"jnlpMac\", \"SLAVE_SECRET\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "565:                 }",
          "566:             });",
          "567:             view.forward(req, temp);",
          "568:             byte[] jnlpMac = JnlpSlaveAgentProtocol.SLAVE_SECRET.mac(getName().getBytes(\"UTF-8\"));",
          "569:             SecretKey key = new SecretKeySpec(jnlpMac, 0, /* export restrictions */ 128 / 8, \"AES\");",
          "570:             byte[] encrypted;",
          "571:             try {",
          "574:                 encrypted = c.doFinal(baos.toByteArray());",
          "575:             } catch (GeneralSecurityException x) {",
          "577:             }",
          "578:             res.setContentType(\"application/octet-stream\");",
          "579:             res.getOutputStream().write(encrypted);",
          "580:         } else {",
          "581:             checkPermission(CONNECT);",
          "583:             view.forward(req, res);",
          "584:         }",
          "585:     }",
          "",
          "[Removed Lines]",
          "572:                 Cipher c = Secret.getCipher(\"AES\");",
          "573:                 c.init(Cipher.ENCRYPT_MODE, key);",
          "576:                 throw new IOException(x);",
          "582:             req.setAttribute(\"jnlpMac\", getJnlpMac());",
          "",
          "[Added Lines]",
          "571:             byte[] iv = new byte[128/8];",
          "572:             new SecureRandom().nextBytes(iv);",
          "578:                 Cipher c = Secret.getCipher(\"AES/CFB8/NoPadding\");",
          "579:                 c.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));",
          "582:                 throw new IOException2(x);",
          "585:             res.getOutputStream().write(iv);",
          "",
          "---------------"
        ],
        "core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly||core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly": [
          "File: core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly -> core/src/main/resources/hudson/slaves/SlaveComputer/slave-agent.jnlp.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:       </resources>",
          "63:       <application-desc main-class=\"hudson.remoting.jnlp.Main\">",
          "65:         <argument>${it.node.nodeName}</argument>",
          "66:         <j:if test=\"${it.launcher.tunnel!=null}\">",
          "67:           <argument>-tunnel</argument>",
          "",
          "[Removed Lines]",
          "64:         <argument>${jnlpMac}</argument>",
          "",
          "[Added Lines]",
          "64:         <argument>${it.jnlpMac}</argument>",
          "",
          "---------------"
        ]
      }
    }
  ]
}