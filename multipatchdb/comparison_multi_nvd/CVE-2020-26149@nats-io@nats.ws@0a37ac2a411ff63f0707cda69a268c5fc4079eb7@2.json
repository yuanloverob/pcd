{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b435609f6f5933ffee099e45e0d818dd5c2983b0",
      "candidate_info": {
        "commit_hash": "b435609f6f5933ffee099e45e0d818dd5c2983b0",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/b435609f6f5933ffee099e45e0d818dd5c2983b0",
        "files": [
          ".github/workflows/natsws.yml",
          "package.json",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/basics.js"
        ],
        "message": "[update] updated nats-base-client (#54)",
        "before_after_code_files": [
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/basics.js||test/basics.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-11/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-12/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   render,",
          "27: } from \"./nats-base-client.ts\";",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "29: const VERSION = \"1.0.0-113\";",
          "",
          "[Added Lines]",
          "29: const VERSION = \"1.0.0-114\";",
          "",
          "---------------"
        ],
        "test/basics.js||test/basics.js": [
          "File: test/basics.js -> test/basics.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:   await ns.stop();",
          "669:   t.pass();",
          "670: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "672: test(\"basics - drain connection publisher\", async (t) => {",
          "673:   const ns = await NatsServer.start(wsConfig());",
          "675:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "676:   const nc2 = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "678:   const subj = createInbox();",
          "680:   const lock = new Lock(5);",
          "681:   nc2.subscribe(subj, {",
          "682:     callback: (err, m) => {",
          "683:       lock.unlock();",
          "684:     },",
          "685:   });",
          "686:   await nc2.flush();",
          "688:   for (let i = 0; i < 5; i++) {",
          "689:     nc.publish(subj);",
          "690:   }",
          "691:   await nc.drain();",
          "692:   await lock;",
          "693:   await nc.close();",
          "694:   t.pass();",
          "695: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f521fa276f98b0b7aa1b61648e438b4bc5b1dde2",
      "candidate_info": {
        "commit_hash": "f521fa276f98b0b7aa1b61648e438b4bc5b1dde2",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/f521fa276f98b0b7aa1b61648e438b4bc5b1dde2",
        "files": [
          ".github/workflows/natsws.yml",
          "bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts",
          "bin/consistent-deps.ts",
          "examples/bench.html",
          "examples/wss.html",
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/auth.js",
          "test/helpers/launcher.d.ts",
          "test/helpers/launcher.js",
          "test/index.d.ts",
          "test/reconnect.js",
          "test/urlparse.js"
        ],
        "message": "update nats-base-client dependencies to v1.0.0-13 (#64)\n\n- [update] changes upstream enable current deno bundling to emit safari compatible code (no initializers on class definitions or static instances).\n- [change] referenced nats-base-client code directly as the current bundler is still not able to properly emit an ES bundle when locally re-exporting dependencies from a different library.\n-  [add] added a test assertion that imports for nats-base-client are from the same version, as now references from the library appear more than once.",
        "before_after_code_files": [
          "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts||bin/clone-nd.ts",
          "bin/consistent-deps.ts||bin/consistent-deps.ts",
          "examples/bench.html||examples/bench.html",
          "examples/wss.html||examples/wss.html",
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/auth.js||test/auth.js",
          "test/helpers/launcher.d.ts||test/helpers/launcher.d.ts",
          "test/helpers/launcher.js||test/helpers/launcher.js",
          "test/index.d.ts||test/index.d.ts",
          "test/reconnect.js||test/reconnect.js",
          "test/urlparse.js||test/urlparse.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts": [
          "File: bin/cjs-fix-imports.ts -> bin/cjs-fix-imports.ts"
        ],
        "bin/clone-nd.ts||bin/clone-nd.ts": [
          "File: bin/clone-nd.ts -> bin/clone-nd.ts"
        ],
        "bin/consistent-deps.ts||bin/consistent-deps.ts": [
          "File: bin/consistent-deps.ts -> bin/consistent-deps.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import {",
          "16:   extname,",
          "17:   join,",
          "18:   resolve,",
          "19: } from \"https://deno.land/std@0.74.0/path/mod.ts\";",
          "21: const importers = new Map<string, string[]>();",
          "23: async function getInternalReferences(fn: string): Promise<string[]> {",
          "24:   const found: string[] = [];",
          "26:   const data = await Deno.readFile(fn);",
          "27:   const txt = new TextDecoder().decode(data);",
          "28:   const matches = txt.matchAll(",
          "29:     /(\"https:\\/\\/raw.githubusercontent.com\\/nats-io\\/nats.deno\\/(\\S+)\\/nats-base-client\\/internal_mod.ts\")/g,",
          "30:   );",
          "31:   for (const m of matches) {",
          "32:     found.push(m[0]);",
          "33:   }",
          "34:   return found;",
          "35: }",
          "37: async function check(dir: string) {",
          "38:   const r = resolve(dir);",
          "39:   await Deno.lstat(r)",
          "40:     .catch((err) => {",
          "41:       console.error(`${r} was not found`);",
          "42:       Deno.exit(1);",
          "43:     });",
          "46:   const files: string[] = [];",
          "47:   for await (const fn of Deno.readDir(r)) {",
          "48:     const ext = extname(fn.name);",
          "49:     if (ext === \".ts\" || ext === \".js\") {",
          "50:       files.push(join(r, fn.name));",
          "51:     }",
          "52:   }",
          "55:   for (const fn of files) {",
          "56:     const data = await Deno.readFile(fn);",
          "57:     const txt = new TextDecoder().decode(data);",
          "58:     const matches = txt.matchAll(",
          "59:       /(\"https:\\/\\/raw.githubusercontent.com\\/nats-io\\/nats.deno\\/(\\S+)\\/nats-base-client\\/internal_mod.ts\")/g,",
          "60:     );",
          "61:     const lines = await getInternalReferences(fn);",
          "62:     if (lines.length > 0) {",
          "63:       importers.set(fn, lines);",
          "64:     }",
          "65:   }",
          "66: }",
          "68: await check(\"./src\");",
          "69: await check(\"./test\");",
          "72: if (importers.size === 0) {",
          "73:   console.error(`nats-base-client imports not found`);",
          "74:   Deno.exit(1);",
          "75: }",
          "78: const expected = await getInternalReferences(",
          "79:   resolve(\"./src/nats-base-client.ts\"),",
          "80: );",
          "81: if (expected.length === 0) {",
          "82:   console.error(`nats-base-client imports not found`);",
          "83:   Deno.exit(1);",
          "84: }",
          "86: const errs: string[] = [];",
          "87: let first = \"\";",
          "88: importers.forEach((v, k) => {",
          "89:   v.forEach((vv) => {",
          "90:     if (vv !== expected[0]) {",
          "91:       errs.push(`${k}: ${vv}`);",
          "92:     }",
          "93:   });",
          "94: });",
          "96: if (errs.length > 0) {",
          "97:   console.error(`[ERROR] expected all nbc imports to be ${expected[0]}:`);",
          "98:   console.error(errs.join(\"\\n\"));",
          "99:   Deno.exit(1);",
          "100: } else {",
          "101:   console.info(`[OK] all nbc imports match ${expected[0]}:`);",
          "102: }",
          "",
          "---------------"
        ],
        "examples/bench.html||examples/bench.html": [
          "File: examples/bench.html -> examples/bench.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:           crossorigin=\"anonymous\">",
          "8: </head>",
          "9: <body>",
          "11: <div class=\"container\">",
          "12:     <h1 id=\"title\">WS NATS Browser Performance</h1>",
          "13:     <label for=\"server\">NATS Websocket Server</label>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: <script type=\"module\" src=\"./bench.js\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     <pre id=\"results\"></pre>",
          "51: </div>",
          "55: </body>",
          "56: </html>",
          "",
          "[Removed Lines]",
          "53: <script type=\"module\" src=\"./bench.js\"></script>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/wss.html||examples/wss.html": [
          "File: examples/wss.html -> examples/wss.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   }",
          "23:   const init = async function () {",
          "27:       addEntry('connected!');",
          "28:       await nc.flush();",
          "29:       addEntry('did a round-trip to the server');",
          "",
          "[Removed Lines]",
          "25:     const nc = await connect({ servers: 'localhost:9222', ws: false })",
          "26:     .then(async () => {",
          "",
          "[Added Lines]",
          "24:     try {",
          "26:       const nc = await connect({ servers: 'wss://localhost:9222' });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:       await nc.close();",
          "33:       addEntry('closed the connection');",
          "38:   }",
          "39:   init();",
          "40: </script>",
          "",
          "[Removed Lines]",
          "34:     })",
          "35:     .catch(() => {",
          "36:       addEntry(`error connecting - did you setup a wss server?`);",
          "37:     });",
          "",
          "[Added Lines]",
          "34:     } catch(err) {",
          "35:       addEntry(`error connecting - did you setup a wss server? ${err}`);",
          "36:       console.error(err)",
          "37:     }",
          "",
          "---------------"
        ],
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: export declare function StringCodec(): Codec<string>;",
          "",
          "[Removed Lines]",
          "256: export declare function JSONCodec(): Codec<any>;",
          "",
          "[Added Lines]",
          "275: export declare function JSONCodec(): Codec<unknown>;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   setUrlParseFn,",
          "21:   Transport,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "27:   const ut = /^(.*:\\/\\/)(.*)/;",
          "28:   if (!ut.test(u)) {",
          "29:     u = `https://${u}`;",
          "",
          "[Removed Lines]",
          "22: } from \"./nats-base-client.ts\";",
          "26: export function urlParseFn(u: string): string {",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "26: export function wsUrlParseFn(u: string): string {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   let protocol;",
          "39:   let port;",
          "44:   switch (srcProto) {",
          "45:     case \"http:\":",
          "",
          "[Removed Lines]",
          "40:   let host = url.hostname;",
          "41:   let path = url.pathname;",
          "42:   let search = url.search || \"\";",
          "",
          "[Added Lines]",
          "40:   const host = url.hostname;",
          "41:   const path = url.pathname;",
          "42:   const search = url.search || \"\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: }",
          "59: export function connect(opts: ConnectionOptions = {}): Promise<NatsConnection> {",
          "62:   setTransportFactory((): Transport => {",
          "63:     return new WsTransport();",
          "",
          "[Removed Lines]",
          "60:   setUrlParseFn(urlParseFn);",
          "",
          "[Added Lines]",
          "60:   setUrlParseFn(wsUrlParseFn);",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"./nats-base-client.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-12/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   Deferred,",
          "18:   Server,",
          "19:   Transport,",
          "21: import {",
          "22:   deferred,",
          "23:   delay,",
          "24:   ErrorCode,",
          "25:   NatsError,",
          "26:   render,",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "35:   closeError?: Error;",
          "39:   private socket: WebSocket;",
          "40:   private options!: ConnectionOptions;",
          "44:   yields: Uint8Array[] = [];",
          "45:   signal: Deferred<void> = deferred<void>();",
          "46:   private closedNotification: Deferred<void | Error> = deferred();",
          "48:   constructor() {",
          "49:   }",
          "51:   async connect(",
          "",
          "[Removed Lines]",
          "20: } from \"./nats-base-client.ts\";",
          "27: } from \"./nats-base-client.ts\";",
          "29: const VERSION = \"1.0.0-114\";",
          "33:   version: string = VERSION;",
          "34:   lang: string = LANG;",
          "36:   connected = false;",
          "37:   private done = false;",
          "41:   socketClosed = false;",
          "42:   encrypted = false;",
          "",
          "[Added Lines]",
          "20: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "27: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-13/nats-base-client/internal_mod.ts\";",
          "29: const VERSION = \"1.0.0-116\";",
          "33:   version: string;",
          "34:   lang: string;",
          "36:   connected: boolean;",
          "37:   private done: boolean;",
          "41:   socketClosed: boolean;",
          "42:   encrypted: boolean;",
          "49:     this.version = VERSION;",
          "50:     this.lang = LANG;",
          "51:     this.connected = false;",
          "52:     this.done = false;",
          "53:     this.socketClosed = false;",
          "54:     this.encrypted = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:       this._closed(reason);",
          "83:     };",
          "86:       const evt = e as ErrorEvent;",
          "87:       const err = new NatsError(evt.message, ErrorCode.UNKNOWN);",
          "88:       if (!connected) {",
          "",
          "[Removed Lines]",
          "85:     this.socket.onerror = (e: ErrorEvent | Event): any => {",
          "",
          "[Added Lines]",
          "92:     this.socket.onerror = (e: ErrorEvent | Event): void => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     this._closed(undefined, true);",
          "99:   }",
          "102:     if (!this.connected) return;",
          "103:     if (this.done) return;",
          "104:     this.closeError = err;",
          "",
          "[Removed Lines]",
          "101:   private async _closed(err?: Error, internal: boolean = true): Promise<void> {",
          "",
          "[Added Lines]",
          "108:   private async _closed(err?: Error, internal = true): Promise<void> {",
          "",
          "---------------"
        ],
        "test/auth.js||test/auth.js": [
          "File: test/auth.js -> test/auth.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   });",
          "104:   const sub = nc.subscribe(\"foo\");",
          "107:   })().catch((err) => {",
          "108:     lock.unlock();",
          "109:     t.is(err.code, ErrorCode.PERMISSIONS_VIOLATION);",
          "",
          "[Removed Lines]",
          "105:   (async (t) => {",
          "106:     for await (const m of sub) {}",
          "",
          "[Added Lines]",
          "105:   (async () => {",
          "106:     for await (const m of sub) {",
          "108:     }",
          "",
          "---------------"
        ],
        "test/helpers/launcher.d.ts||test/helpers/launcher.d.ts": [
          "File: test/helpers/launcher.d.ts -> test/helpers/launcher.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   restart(): Promise<NatsServer>;",
          "33:   getLog(): string;",
          "34:   stop(): Promise<void>;",
          "36:   varz(): Promise<any>;",
          "37: }",
          "",
          "[Removed Lines]",
          "35:   signal(s: (\"KILL\" | \"QUIT\" | \"STOP\" | \"REOPEN\" | \"RELOAD\" | \"LDM\"));",
          "",
          "[Added Lines]",
          "35:   signal(s: (\"KILL\" | \"QUIT\" | \"STOP\" | \"REOPEN\" | \"RELOAD\" | \"LDM\")): void;",
          "",
          "---------------"
        ],
        "test/helpers/launcher.js||test/helpers/launcher.js": [
          "File: test/helpers/launcher.js -> test/helpers/launcher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:   signal(signal) {",
          "191:     const sn = ServerSignals.get(signal);",
          "192:     this.process.kill(sn ? sn : signal);",
          "194:   }",
          "196:   async varz() {",
          "",
          "[Removed Lines]",
          "193:     return Promise.resolve();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/index.d.ts||test/index.d.ts": [
          "File: test/index.d.ts -> test/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export interface NatsConnection {",
          "17:   closed(): Promise<void | Error>;",
          "18:   close(): Promise<void>;",
          "19:   publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "20:   subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "26:   flush(): Promise<void>;",
          "27:   drain(): Promise<void>;",
          "28:   isClosed(): boolean;",
          "29:   isDraining(): boolean;",
          "30:   getServer(): string;",
          "31:   status(): AsyncIterable<Status>;",
          "32: }",
          "56: export interface ConnectionOptions {",
          "57:   authenticator?: Authenticator;",
          "",
          "[Removed Lines]",
          "21:   request(",
          "22:     subject: string,",
          "23:     data?: Uint8Array,",
          "24:     opts?: RequestOptions,",
          "25:   ): Promise<Msg>;",
          "34: export declare enum Events {",
          "35:   DISCONNECT = \"disconnect\",",
          "36:   RECONNECT = \"reconnect\",",
          "37:   UPDATE = \"update\",",
          "38:   LDM = \"ldm\",",
          "39: }",
          "41: export interface Status {",
          "42:   type: string;",
          "43:   data: string | ServersChanged;",
          "44: }",
          "46: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "47:   get(k: string): string;",
          "48:   set(k: string, v: string): void;",
          "49:   append(k: string, v: string): void;",
          "50:   has(k: string): boolean;",
          "51:   values(k: string): string[];",
          "52:   delete(k: string): void;",
          "53: }",
          "54: export declare function headers(): MsgHdrs;",
          "",
          "[Added Lines]",
          "15: export declare function connect(opts?: ConnectionOptions): Promise<NatsConnection>;",
          "18:   info?: ServerInfo;",
          "23:   request(subject: string, data?: Uint8Array, opts?: RequestOptions): Promise<Msg>;",
          "30:   stats(): Stats;",
          "33: export declare const Empty: Uint8Array;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   user?: string;",
          "80:   verbose?: boolean;",
          "81:   waitOnFirstConnect?: boolean;",
          "82: }",
          "83: export interface TlsOptions {",
          "84:   certFile?: string;",
          "85:   caFile?: string;",
          "86:   keyFile?: string;",
          "87: }",
          "105: }",
          "106: export interface Subscription extends AsyncIterable<Msg> {",
          "107:   unsubscribe(max?: number): void;",
          "108:   drain(): Promise<void>;",
          "",
          "[Removed Lines]",
          "88: export interface Msg {",
          "89:   subject: string;",
          "90:   sid: number;",
          "91:   reply?: string;",
          "92:   data: Uint8Array;",
          "93:   headers?: MsgHdrs;",
          "94:   respond(data?: Uint8Array, headers?: MsgHdrs): boolean;",
          "95: }",
          "96: export interface SubscriptionOptions {",
          "97:   queue?: string;",
          "98:   max?: number;",
          "99:   timeout?: number;",
          "100:   callback?: (err: NatsError | null, msg: Msg) => void;",
          "101: }",
          "102: export interface ServersChanged {",
          "103:   readonly added: string[];",
          "104:   readonly deleted: string[];",
          "",
          "[Added Lines]",
          "61:   ignoreClusterUpdates?: boolean;",
          "70: export declare const Events: Readonly<{",
          "71:   DISCONNECT: string;",
          "72:   RECONNECT: string;",
          "73:   UPDATE: string;",
          "74:   LDM: string;",
          "75: }>;",
          "77: export declare const DebugEvents: Readonly<{",
          "78:   RECONNECTING: string;",
          "79:   PING_TIMER: string;",
          "80:   STALE_CONNECTION: string;",
          "81: }>;",
          "83: export interface Status {",
          "84:   type: string;",
          "85:   data: string | ServersChanged;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:   getSubject(): string;",
          "113:   getReceived(): number;",
          "114:   getProcessed(): number;",
          "115:   getID(): number;",
          "116:   getMax(): number | undefined;",
          "117: }",
          "118: export interface RequestOptions {",
          "119:   timeout: number;",
          "120:   headers?: MsgHdrs;",
          "121: }",
          "123: export interface PublishOptions {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   getPending(): number;",
          "102: export interface SubscriptionOptions {",
          "103:   queue?: string;",
          "104:   max?: number;",
          "105:   timeout?: number;",
          "106:   callback?: (err: NatsError | null, msg: Msg) => void;",
          "107: }",
          "112:   noMux?: boolean;",
          "113:   reply?: string;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:   headers?: MsgHdrs;",
          "126: }",
          "128: export declare type NoAuth = void;",
          "129: export interface TokenAuth {",
          "130:   auth_token: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: export interface Msg {",
          "122:   subject: string;",
          "123:   sid: number;",
          "124:   reply?: string;",
          "125:   data: Uint8Array;",
          "126:   headers?: MsgHdrs;",
          "127:   respond(data?: Uint8Array, opts?: PublishOptions): boolean;",
          "128: }",
          "130: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "131:   hasError: boolean;",
          "132:   status: string;",
          "133:   code?: number;",
          "134:   get(k: string): string;",
          "135:   set(k: string, v: string): void;",
          "136:   append(k: string, v: string): void;",
          "137:   has(k: string): boolean;",
          "138:   values(k: string): string[];",
          "139:   delete(k: string): void;",
          "140: }",
          "141: export declare function headers(): MsgHdrs;",
          "143: export interface ServersChanged {",
          "144:   readonly added: string[];",
          "145:   readonly deleted: string[];",
          "146: }",
          "148: export interface Authenticator {",
          "149:   (nonce?: string): Auth;",
          "150: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   sig?: string;",
          "144: }",
          "145: declare type Auth = NoAuth | TokenAuth | UserPass | NKeyAuth | JwtAuth;",
          "152: export declare function noAuthFn(): Authenticator;",
          "158: export declare function nkeyAuthenticator(",
          "159:   seed?: Uint8Array | (() => Uint8Array),",
          "160: ): Authenticator;",
          "170: export declare function jwtAuthenticator(",
          "171:   ajwt: string | (() => string),",
          "172:   seed?: Uint8Array | (() => Uint8Array),",
          "173: ): Authenticator;",
          "179: export declare function credsAuthenticator(creds: Uint8Array): Authenticator;",
          "209: export declare interface NatsError extends Error {",
          "210:   name: string;",
          "",
          "[Removed Lines]",
          "149: export interface Authenticator {",
          "150:   (nonce?: string): Auth;",
          "151: }",
          "181: export declare enum ErrorCode {",
          "182:   BAD_AUTHENTICATION = \"BAD_AUTHENTICATION\",",
          "183:   BAD_CREDS = \"BAD_CREDS\",",
          "184:   BAD_HEADER = \"BAD_HEADER\",",
          "185:   BAD_JSON = \"BAD_JSON\",",
          "186:   BAD_SUBJECT = \"BAD_SUBJECT\",",
          "187:   BAD_PAYLOAD = \"BAD_PAYLOAD\",",
          "188:   CANCELLED = \"CANCELLED\",",
          "189:   CONNECTION_CLOSED = \"CONNECTION_CLOSED\",",
          "190:   CONNECTION_DRAINING = \"CONNECTION_DRAINING\",",
          "191:   CONNECTION_REFUSED = \"CONNECTION_REFUSED\",",
          "192:   CONNECTION_TIMEOUT = \"CONNECTION_TIMEOUT\",",
          "193:   DISCONNECT = \"DISCONNECT\",",
          "194:   INVALID_OPTION = \"INVALID_OPTION\",",
          "195:   INVALID_PAYLOAD_TYPE = \"INVALID_PAYLOAD\",",
          "196:   NOT_FUNC = \"NOT_FUNC\",",
          "197:   REQUEST_ERROR = \"REQUEST_ERROR\",",
          "198:   SERVER_OPTION_NA = \"SERVER_OPT_NA\",",
          "199:   SUB_CLOSED = \"SUB_CLOSED\",",
          "200:   SUB_DRAINING = \"SUB_DRAINING\",",
          "201:   TIMEOUT = \"TIMEOUT\",",
          "202:   UNKNOWN = \"UNKNOWN_ERROR\",",
          "203:   WSS_REQUIRED = \"WSS_REQUIRED\",",
          "204:   AUTHORIZATION_VIOLATION = \"AUTHORIZATION_VIOLATION\",",
          "205:   NATS_PROTOCOL_ERR = \"NATS_PROTOCOL_ERR\",",
          "206:   PERMISSIONS_VIOLATION = \"PERMISSIONS_VIOLATION\",",
          "207: }",
          "",
          "[Added Lines]",
          "184: export declare const ErrorCode: Readonly<{",
          "185:   API_ERROR: string;",
          "186:   BAD_AUTHENTICATION: string;",
          "187:   BAD_CREDS: string;",
          "188:   BAD_HEADER: string;",
          "189:   BAD_JSON: string;",
          "190:   BAD_PAYLOAD: string;",
          "191:   BAD_SUBJECT: string;",
          "192:   CANCELLED: string;",
          "193:   CONNECTION_CLOSED: string;",
          "194:   CONNECTION_DRAINING: string;",
          "195:   CONNECTION_REFUSED: string;",
          "196:   CONNECTION_TIMEOUT: string;",
          "197:   DISCONNECT: string;",
          "198:   INVALID_OPTION: string;",
          "199:   INVALID_PAYLOAD_TYPE: string;",
          "200:   MAX_PAYLOAD_EXCEEDED: string;",
          "201:   NOT_FUNC: string;",
          "202:   REQUEST_ERROR: string;",
          "203:   SERVER_OPTION_NA: string;",
          "204:   SUB_CLOSED: string;",
          "205:   SUB_DRAINING: string;",
          "206:   TIMEOUT: string;",
          "207:   TLS: string;",
          "208:   UNKNOWN: string;",
          "209:   WSS_REQUIRED: string;",
          "210:   AUTHORIZATION_VIOLATION: string;",
          "211:   NATS_PROTOCOL_ERR: string;",
          "212:   PERMISSIONS_VIOLATION: string;",
          "213: }>;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "212:   code: string;",
          "213:   chainedError?: Error;",
          "214: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: export interface ServerInfo {",
          "223:   auth_required?: boolean;",
          "224:   client_id: number;",
          "225:   client_ip?: string;",
          "226:   connect_urls?: string[];",
          "227:   git_commit?: string;",
          "228:   go: string;",
          "229:   headers?: boolean;",
          "230:   host: string;",
          "231:   jetstream?: boolean;",
          "232:   ldm?: boolean;",
          "233:   max_payload: number;",
          "234:   nonce?: string;",
          "235:   port: number;",
          "236:   proto: number;",
          "237:   server_id: string;",
          "238:   server_name: string;",
          "239:   tls_available?: boolean;",
          "240:   tls_required?: boolean;",
          "241:   tls_verify?: boolean;",
          "242:   version: string;",
          "243: }",
          "245: export interface Stats {",
          "246:   inBytes: number;",
          "247:   outBytes: number;",
          "248:   inMsgs: number;",
          "249:   outMsgs: number;",
          "250: }",
          "252: export interface Codec<T> {",
          "253:   encode(d: T): Uint8Array;",
          "254:   decode(a: Uint8Array): T;",
          "255: }",
          "256: export declare function StringCodec(): Codec<string>;",
          "257: export declare function JSONCodec(): Codec<unknown>;",
          "",
          "---------------"
        ],
        "test/reconnect.js||test/reconnect.js": [
          "File: test/reconnect.js -> test/reconnect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   let disconnects = 0;",
          "154:   let reconnects = 0;",
          "155:   let reconnect = false;",
          "157:     for await (const e of nc.status()) {",
          "158:       switch (e.type) {",
          "159:         case Events.DISCONNECT:",
          "",
          "[Removed Lines]",
          "156:   (async (t) => {",
          "",
          "[Added Lines]",
          "156:   (async () => {",
          "",
          "---------------"
        ],
        "test/urlparse.js||test/urlparse.js": [
          "File: test/urlparse.js -> test/urlparse.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: const test = require(\"ava\");",
          "18: test(\"url - parse\", (t) => {",
          "19:   const u = [",
          "",
          "[Removed Lines]",
          "16: const { urlParseFn } = require(\"../build/wst/connect.js\");",
          "",
          "[Added Lines]",
          "16: const { wsUrlParseFn } = require(\"../build/wst/connect.js\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   t.plan(u.length);",
          "43:   u.forEach((tc) => {",
          "45:     t.is(out, tc.expect, `test ${tc.in}`);",
          "46:   });",
          "47: });",
          "",
          "[Removed Lines]",
          "44:     const out = urlParseFn(tc.in);",
          "",
          "[Added Lines]",
          "44:     const out = wsUrlParseFn(tc.in);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffccf2a8a79b21bedab852f322947db912270c7c",
      "candidate_info": {
        "commit_hash": "ffccf2a8a79b21bedab852f322947db912270c7c",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/ffccf2a8a79b21bedab852f322947db912270c7c",
        "files": [
          ".github/workflows/natsws.yml",
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "[update] nbc to v1.0.4 - for more information see release notes for https://github.com/nats-io/nats.deno/releases/tag/v1.0.4 (#98)",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: export declare const Empty: Uint8Array;",
          "20: export declare enum Events {",
          "26: }",
          "27: export interface Status {",
          "30: }",
          "31: export declare enum DebugEvents {",
          "35: }",
          "37: export interface NatsConnection {",
          "57: }",
          "58: export interface ConnectionOptions {",
          "84: }",
          "85: export interface TlsOptions {",
          "86: }",
          "87: export interface Msg {",
          "94: }",
          "95: export interface SubOpts<T> {",
          "100: }",
          "101: export declare type SubscriptionOptions = SubOpts<Msg>;",
          "103: export interface ServerInfo {",
          "124: }",
          "126: export interface ServersChanged {",
          "129: }",
          "130: export interface Sub<T> extends AsyncIterable<T> {",
          "142: }",
          "143: export declare type Subscription = Sub<Msg>;",
          "144: export interface RequestOptions {",
          "149: }",
          "150: export interface PublishOptions {",
          "153: }",
          "155: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "165: }",
          "166: export declare function headers(): MsgHdrs;",
          "",
          "[Removed Lines]",
          "21:   Disconnect = \"disconnect\",",
          "22:   Reconnect = \"reconnect\",",
          "23:   Update = \"update\",",
          "24:   LDM = \"ldm\",",
          "25:   Error = \"error\",",
          "28:   type: Events | DebugEvents;",
          "29:   data: string | ServersChanged | number;",
          "32:   Reconnecting = \"reconnecting\",",
          "33:   PingTimer = \"pingTimer\",",
          "34:   StaleConnection = \"staleConnection\",",
          "38:   info?: ServerInfo;",
          "39:   closed(): Promise<void | Error>;",
          "40:   close(): Promise<void>;",
          "41:   publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "42:   subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "43:   request(",
          "44:     subject: string,",
          "45:     data?: Uint8Array,",
          "46:     opts?: RequestOptions,",
          "47:   ): Promise<Msg>;",
          "48:   flush(): Promise<void>;",
          "49:   drain(): Promise<void>;",
          "50:   isClosed(): boolean;",
          "51:   isDraining(): boolean;",
          "52:   getServer(): string;",
          "53:   status(): AsyncIterable<Status>;",
          "54:   stats(): Stats;",
          "55:   jetstreamManager(opts?: JetStreamOptions): Promise<JetStreamManager>;",
          "56:   jetstream(opts?: JetStreamOptions): JetStreamClient;",
          "59:   authenticator?: Authenticator;",
          "60:   debug?: boolean;",
          "61:   ignoreClusterUpdates?: boolean;",
          "62:   inboxPrefix?: string;",
          "63:   maxPingOut?: number;",
          "64:   maxReconnectAttempts?: number;",
          "65:   name?: string;",
          "66:   noEcho?: boolean;",
          "67:   noRandomize?: boolean;",
          "68:   pass?: string;",
          "69:   pedantic?: boolean;",
          "70:   pingInterval?: number;",
          "71:   port?: number;",
          "72:   reconnect?: boolean;",
          "73:   reconnectDelayHandler?: () => number;",
          "74:   reconnectJitter?: number;",
          "75:   reconnectJitterTLS?: number;",
          "76:   reconnectTimeWait?: number;",
          "77:   servers?: Array<string> | string;",
          "78:   timeout?: number;",
          "79:   tls?: TlsOptions;",
          "80:   token?: string;",
          "81:   user?: string;",
          "82:   verbose?: boolean;",
          "83:   waitOnFirstConnect?: boolean;",
          "88:   subject: string;",
          "89:   sid: number;",
          "90:   reply?: string;",
          "91:   data: Uint8Array;",
          "92:   headers?: MsgHdrs;",
          "93:   respond(data?: Uint8Array, opts?: PublishOptions): boolean;",
          "96:   queue?: string;",
          "97:   max?: number;",
          "98:   timeout?: number;",
          "99:   callback?: (err: NatsError | null, msg: T) => void;",
          "104:   \"auth_required\"?: boolean;",
          "105:   \"client_id\": number;",
          "106:   \"client_ip\"?: string;",
          "107:   \"connect_urls\"?: string[];",
          "108:   \"git_commit\"?: string;",
          "109:   go: string;",
          "110:   headers?: boolean;",
          "111:   host: string;",
          "112:   jetstream?: boolean;",
          "113:   ldm?: boolean;",
          "114:   \"max_payload\": number;",
          "115:   nonce?: string;",
          "116:   port: number;",
          "117:   proto: number;",
          "118:   \"server_id\": string;",
          "119:   \"server_name\": string;",
          "120:   \"tls_available\"?: boolean;",
          "121:   \"tls_required\"?: boolean;",
          "122:   \"tls_verify\"?: boolean;",
          "123:   version: string;",
          "127:   readonly added: string[];",
          "128:   readonly deleted: string[];",
          "131:   unsubscribe(max?: number): void;",
          "132:   drain(): Promise<void>;",
          "133:   isDraining(): boolean;",
          "134:   isClosed(): boolean;",
          "135:   callback(err: NatsError | null, msg: Msg): void;",
          "136:   getSubject(): string;",
          "137:   getReceived(): number;",
          "138:   getProcessed(): number;",
          "139:   getPending(): number;",
          "140:   getID(): number;",
          "141:   getMax(): number | undefined;",
          "145:   timeout: number;",
          "146:   headers?: MsgHdrs;",
          "147:   noMux?: boolean;",
          "148:   reply?: string;",
          "151:   reply?: string;",
          "152:   headers?: MsgHdrs;",
          "156:   hasError: boolean;",
          "157:   status: string;",
          "158:   code: number;",
          "159:   get(k: string): string;",
          "160:   set(k: string, v: string): void;",
          "161:   append(k: string, v: string): void;",
          "162:   has(k: string): boolean;",
          "163:   values(k: string): string[];",
          "164:   delete(k: string): void;",
          "",
          "[Added Lines]",
          "21:     Disconnect = \"disconnect\",",
          "22:     Reconnect = \"reconnect\",",
          "23:     Update = \"update\",",
          "24:     LDM = \"ldm\",",
          "25:     Error = \"error\"",
          "28:     type: Events | DebugEvents;",
          "29:     data: string | ServersChanged | number;",
          "32:     Reconnecting = \"reconnecting\",",
          "33:     PingTimer = \"pingTimer\",",
          "34:     StaleConnection = \"staleConnection\"",
          "38:     info?: ServerInfo;",
          "39:     closed(): Promise<void | Error>;",
          "40:     close(): Promise<void>;",
          "41:     publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "42:     subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "43:     request(subject: string, data?: Uint8Array, opts?: RequestOptions): Promise<Msg>;",
          "44:     flush(): Promise<void>;",
          "45:     drain(): Promise<void>;",
          "46:     isClosed(): boolean;",
          "47:     isDraining(): boolean;",
          "48:     getServer(): string;",
          "49:     status(): AsyncIterable<Status>;",
          "50:     stats(): Stats;",
          "51:     jetstreamManager(opts?: JetStreamOptions): Promise<JetStreamManager>;",
          "52:     jetstream(opts?: JetStreamOptions): JetStreamClient;",
          "55:     authenticator?: Authenticator;",
          "56:     debug?: boolean;",
          "57:     maxPingOut?: number;",
          "58:     maxReconnectAttempts?: number;",
          "59:     name?: string;",
          "60:     noEcho?: boolean;",
          "61:     noRandomize?: boolean;",
          "62:     pass?: string;",
          "63:     pedantic?: boolean;",
          "64:     pingInterval?: number;",
          "65:     port?: number;",
          "66:     reconnect?: boolean;",
          "67:     reconnectDelayHandler?: () => number;",
          "68:     reconnectJitter?: number;",
          "69:     reconnectJitterTLS?: number;",
          "70:     reconnectTimeWait?: number;",
          "71:     servers?: Array<string> | string;",
          "72:     timeout?: number;",
          "73:     tls?: TlsOptions;",
          "74:     token?: string;",
          "75:     user?: string;",
          "76:     verbose?: boolean;",
          "77:     waitOnFirstConnect?: boolean;",
          "78:     ignoreClusterUpdates?: boolean;",
          "79:     inboxPrefix?: string;",
          "84:     subject: string;",
          "85:     sid: number;",
          "86:     reply?: string;",
          "87:     data: Uint8Array;",
          "88:     headers?: MsgHdrs;",
          "89:     respond(data?: Uint8Array, opts?: PublishOptions): boolean;",
          "92:     queue?: string;",
          "93:     max?: number;",
          "94:     timeout?: number;",
          "95:     callback?: (err: NatsError | null, msg: T) => void;",
          "100:     \"auth_required\"?: boolean;",
          "101:     \"client_id\": number;",
          "102:     \"client_ip\"?: string;",
          "103:     cluster?: string;",
          "104:     \"connect_urls\"?: string[];",
          "105:     \"git_commit\"?: string;",
          "106:     go: string;",
          "107:     headers?: boolean;",
          "108:     host: string;",
          "109:     jetstream?: boolean;",
          "110:     ldm?: boolean;",
          "111:     \"max_payload\": number;",
          "112:     nonce?: string;",
          "113:     port: number;",
          "114:     proto: number;",
          "115:     \"server_id\": string;",
          "116:     \"server_name\": string;",
          "117:     \"tls_available\"?: boolean;",
          "118:     \"tls_required\"?: boolean;",
          "119:     \"tls_verify\"?: boolean;",
          "120:     version: string;",
          "124:     readonly added: string[];",
          "125:     readonly deleted: string[];",
          "128:     unsubscribe(max?: number): void;",
          "129:     drain(): Promise<void>;",
          "130:     isDraining(): boolean;",
          "131:     isClosed(): boolean;",
          "132:     callback(err: NatsError | null, msg: Msg): void;",
          "133:     getSubject(): string;",
          "134:     getReceived(): number;",
          "135:     getProcessed(): number;",
          "136:     getPending(): number;",
          "137:     getID(): number;",
          "138:     getMax(): number | undefined;",
          "142:     timeout: number;",
          "143:     headers?: MsgHdrs;",
          "144:     noMux?: boolean;",
          "145:     reply?: string;",
          "148:     reply?: string;",
          "149:     headers?: MsgHdrs;",
          "152: export declare function canonicalMIMEHeaderKey(k: string): string;",
          "153: export declare enum Match {",
          "154:     Exact = 0,",
          "155:     CanonicalMIME = 1,",
          "156:     IgnoreCase = 2",
          "157: }",
          "159:     hasError: boolean;",
          "160:     status: string;",
          "161:     code: number;",
          "162:     description: string;",
          "163:     get(k: string, match?: Match): string;",
          "164:     set(k: string, v: string, match?: Match): void;",
          "165:     append(k: string, v: string, match?: Match): void;",
          "166:     has(k: string, match?: Match): boolean;",
          "167:     values(k: string, match?: Match): string[];",
          "168:     delete(k: string, match?: Match): void;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249: }",
          "251: export interface Stats {",
          "256: }",
          "258: export interface Codec<T> {",
          "",
          "[Removed Lines]",
          "252:   inBytes: number;",
          "253:   outBytes: number;",
          "254:   inMsgs: number;",
          "255:   outMsgs: number;",
          "",
          "[Added Lines]",
          "256:     inBytes: number;",
          "257:     outBytes: number;",
          "258:     inMsgs: number;",
          "259:     outMsgs: number;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263: export declare function JSONCodec<T = unknown>(): Codec<T>;",
          "265: export interface JetStreamOptions {",
          "268: }",
          "269: export interface JetStreamManager {",
          "274: }",
          "275: export interface PullOptions {",
          "279: }",
          "280: export interface PubAck {",
          "285: }",
          "286: export interface JetStreamPublishOptions {",
          "295: }",
          "296: export interface ConsumerInfoable {",
          "298: }",
          "299: export interface Closed {",
          "310: export interface Pullable {",
          "312: }",
          "313: export interface Destroyable {",
          "315: }",
          "317: export interface Dispatcher<T> {",
          "318:   push(v: T): void;",
          "319: }",
          "",
          "[Removed Lines]",
          "266:   apiPrefix?: string;",
          "267:   timeout?: number;",
          "270:   consumers: ConsumerAPI;",
          "271:   streams: StreamAPI;",
          "272:   getAccountInfo(): Promise<JetStreamAccountStats>;",
          "273:   advisories(): AsyncIterable<Advisory>;",
          "276:   batch: number;",
          "277:   \"no_wait\": boolean;",
          "278:   expires: number;",
          "281:   stream: string;",
          "282:   seq: number;",
          "283:   duplicate: boolean;",
          "284:   ack(): void;",
          "287:   msgID: string;",
          "288:   timeout: number;",
          "289:   ackWait: Nanos;",
          "290:   expect: Partial<{",
          "291:     lastMsgID: string;",
          "292:     streamName: string;",
          "293:     lastSequence: number;",
          "294:   }>;",
          "297:   consumerInfo(): Promise<ConsumerInfo>;",
          "300:   closed: Promise<void>;",
          "301: }",
          "302: export declare type JetStreamSubscription =",
          "303:   & Sub<JsMsg>",
          "304:   & Destroyable",
          "305:   & Closed",
          "306:   & ConsumerInfoable;",
          "307: export declare type JetStreamSubscriptionOptions = TypedSubscriptionOptions<",
          "308:   JsMsg",
          "309: >;",
          "311:   pull(opts?: Partial<PullOptions>): void;",
          "314:   destroy(): Promise<void>;",
          "",
          "[Added Lines]",
          "270:     apiPrefix?: string;",
          "271:     timeout?: number;",
          "274:     consumers: ConsumerAPI;",
          "275:     streams: StreamAPI;",
          "276:     getAccountInfo(): Promise<JetStreamAccountStats>;",
          "277:     advisories(): AsyncIterable<Advisory>;",
          "280:     batch: number;",
          "281:     \"no_wait\": boolean;",
          "282:     expires: number;",
          "285:     stream: string;",
          "286:     seq: number;",
          "287:     duplicate: boolean;",
          "288:     ack(): void;",
          "291:     msgID: string;",
          "292:     timeout: number;",
          "293:     ackWait: Nanos;",
          "294:     headers: MsgHdrs;",
          "295:     expect: Partial<{",
          "296:         lastMsgID: string;",
          "297:         streamName: string;",
          "298:         lastSequence: number;",
          "299:     }>;",
          "302:     consumerInfo(): Promise<ConsumerInfo>;",
          "305:     closed: Promise<void>;",
          "306: }",
          "307: export declare type JetStreamSubscription = Sub<JsMsg> & Destroyable & Closed & ConsumerInfoable;",
          "308: export declare type JetStreamSubscriptionOptions = TypedSubscriptionOptions<JsMsg>;",
          "310:     pull(opts?: Partial<PullOptions>): void;",
          "313:     destroy(): Promise<void>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:   getPending(): number;",
          "325:   getReceived(): number;",
          "326: }",
          "335: export interface JetStreamClient {",
          "355: }",
          "356: export interface ConsumerOpts {",
          "365: }",
          "366: export declare function consumerOpts(): ConsumerOptsBuilder;",
          "368: export interface ConsumerOptsBuilder {",
          "385: }",
          "386: export interface Lister<T> {",
          "388: }",
          "389: export interface ConsumerAPI {",
          "395: export interface StreamAPI {",
          "405: }",
          "406: export interface JsMsg {",
          "419: }",
          "420: export interface DeliveryInfo {",
          "429: }",
          "430: export interface StoredMsg {",
          "436: }",
          "437: export interface Advisory {",
          "440: }",
          "441: export declare enum AdvisoryKind {",
          "456: }",
          "457: export declare type Nanos = number;",
          "458: export interface ApiError {",
          "461: }",
          "462: export interface ApiResponse {",
          "465: }",
          "466: export interface ApiPaged {",
          "470: }",
          "471: export interface ApiPagedRequest {",
          "473: }",
          "474: export interface StreamInfo {",
          "481: }",
          "482: export interface StreamConfig {",
          "500: }",
          "501: export interface StreamSource {",
          "506: }",
          "507: export interface Placement {",
          "510: }",
          "511: export declare enum RetentionPolicy {",
          "515: }",
          "516: export declare enum DiscardPolicy {",
          "519: }",
          "520: export declare enum StorageType {",
          "523: }",
          "524: export declare enum DeliverPolicy {",
          "530: }",
          "531: export declare enum AckPolicy {",
          "536: }",
          "537: export declare enum ReplayPolicy {",
          "540: }",
          "541: export interface StreamState {",
          "551: }",
          "552: export interface LostStreamData {",
          "555: }",
          "556: export interface ClusterInfo {",
          "560: }",
          "561: export interface PeerInfo {",
          "567: }",
          "568: export interface StreamSourceInfo {",
          "573: }",
          "574: export interface PurgeResponse extends Success {",
          "576: }",
          "577: export interface CreateConsumerRequest {",
          "580: }",
          "581: export interface StreamMsgResponse extends ApiResponse {",
          "589: }",
          "590: export interface SequencePair {",
          "593: }",
          "594: export interface ConsumerInfo {",
          "606: }",
          "607: export interface ConsumerListResponse extends ApiResponse, ApiPaged {",
          "609: }",
          "610: export interface StreamListResponse extends ApiResponse, ApiPaged {",
          "612: }",
          "613: export interface Success {",
          "615: }",
          "616: export declare type SuccessResponse = ApiResponse & Success;",
          "617: export interface MsgRequest {",
          "619: }",
          "620: export interface MsgDeleteRequest extends MsgRequest {",
          "622: }",
          "623: export interface JetStreamAccountStats {",
          "630: }",
          "631: export interface JetStreamApiStats {",
          "634: }",
          "637: }",
          "638: export interface AccountLimits {",
          "643: }",
          "644: export interface ConsumerConfig {",
          "660: }",
          "661: export interface Consumer {",
          "664: }",
          "665: export interface StreamNames {",
          "667: }",
          "668: export interface StreamNameBySubject {",
          "670: }",
          "671: export interface NextRequest {",
          "675: }",
          "677: export declare type MsgAdapter<T> = (",
          "",
          "[Removed Lines]",
          "328: export declare type JetStreamPullSubscription =",
          "329:   & JetStreamSubscription",
          "330:   & Pullable;",
          "331: export declare type JsMsgCallback = (",
          "332:   err: NatsError | null,",
          "333:   msg: JsMsg | null,",
          "334: ) => void;",
          "336:   publish(",
          "337:     subj: string,",
          "338:     data?: Uint8Array,",
          "339:     options?: Partial<JetStreamPublishOptions>,",
          "340:   ): Promise<PubAck>;",
          "341:   pull(stream: string, durable: string): Promise<JsMsg>;",
          "342:   fetch(",
          "343:     stream: string,",
          "344:     durable: string,",
          "345:     opts?: Partial<PullOptions>,",
          "346:   ): QueuedIterator<JsMsg>;",
          "347:   pullSubscribe(",
          "348:     subject: string,",
          "349:     opts: ConsumerOptsBuilder | Partial<ConsumerOpts>,",
          "350:   ): Promise<JetStreamPullSubscription>;",
          "351:   subscribe(",
          "352:     subject: string,",
          "353:     opts: ConsumerOptsBuilder | Partial<ConsumerOpts>,",
          "354:   ): Promise<JetStreamSubscription>;",
          "357:   config: Partial<ConsumerConfig>;",
          "358:   mack: boolean;",
          "359:   subQueue: string;",
          "360:   stream: string;",
          "361:   callbackFn?: JsMsgCallback;",
          "362:   name?: string;",
          "363:   max?: number;",
          "364:   debug?: boolean;",
          "369:   deliverTo(subject: string): void;",
          "370:   manualAck(): void;",
          "371:   durable(name: string): void;",
          "372:   deliverAll(): void;",
          "373:   deliverLast(): void;",
          "374:   deliverNew(): void;",
          "375:   startSequence(seq: number): void;",
          "376:   startTime(time: Date | Nanos): void;",
          "377:   ackNone(): void;",
          "378:   ackAll(): void;",
          "379:   ackExplicit(): void;",
          "380:   maxDeliver(max: number): void;",
          "381:   maxAckPending(max: number): void;",
          "382:   maxWaiting(max: number): void;",
          "383:   maxMessages(max: number): void;",
          "384:   callback(fn: JsMsgCallback): void;",
          "387:   next(): Promise<T[]>;",
          "390:   info(stream: string, consumer: string): Promise<ConsumerInfo>;",
          "391:   add(stream: string, cfg: Partial<ConsumerConfig>): Promise<ConsumerInfo>;",
          "392:   delete(stream: string, consumer: string): Promise<boolean>;",
          "393:   list(stream: string): Lister<ConsumerInfo>;",
          "394: }",
          "396:   info(stream: string): Promise<StreamInfo>;",
          "397:   add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "398:   update(cfg: StreamConfig): Promise<StreamInfo>;",
          "399:   purge(stream: string): Promise<PurgeResponse>;",
          "400:   delete(stream: string): Promise<boolean>;",
          "401:   list(): Lister<StreamInfo>;",
          "402:   deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "403:   getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "404:   find(subject: string): Promise<string>;",
          "407:   redelivered: boolean;",
          "408:   info: DeliveryInfo;",
          "409:   seq: number;",
          "410:   headers: MsgHdrs | undefined;",
          "411:   data: Uint8Array;",
          "412:   subject: string;",
          "413:   sid: number;",
          "414:   ack(): void;",
          "415:   nak(): void;",
          "416:   working(): void;",
          "417:   term(): void;",
          "418:   ackAck(): Promise<boolean>;",
          "421:   stream: string;",
          "422:   consumer: string;",
          "423:   redeliveryCount: number;",
          "424:   streamSequence: number;",
          "425:   deliverySequence: number;",
          "426:   timestampNanos: number;",
          "427:   pending: number;",
          "428:   redelivered: boolean;",
          "431:   subject: string;",
          "432:   seq: number;",
          "433:   header: MsgHdrs;",
          "434:   data: Uint8Array;",
          "435:   time: Date;",
          "438:   kind: AdvisoryKind;",
          "439:   data: unknown;",
          "442:   API = \"api_audit\",",
          "443:   StreamAction = \"stream_action\",",
          "444:   ConsumerAction = \"consumer_action\",",
          "445:   SnapshotCreate = \"snapshot_create\",",
          "446:   SnapshotComplete = \"snapshot_complete\",",
          "447:   RestoreCreate = \"restore_create\",",
          "448:   RestoreComplete = \"restore_complete\",",
          "449:   MaxDeliver = \"max_deliver\",",
          "450:   Terminated = \"terminated\",",
          "451:   Ack = \"consumer_ack\",",
          "452:   StreamLeaderElected = \"stream_leader_elected\",",
          "453:   StreamQuorumLost = \"stream_quorum_lost\",",
          "454:   ConsumerLeaderElected = \"consumer_leader_elected\",",
          "455:   ConsumerQuorumLost = \"consumer_quorum_lost\",",
          "459:   code: number;",
          "460:   description: string;",
          "463:   type: string;",
          "464:   error?: ApiError;",
          "467:   total: number;",
          "468:   offset: number;",
          "469:   limit: number;",
          "472:   offset: number;",
          "475:   config: StreamConfig;",
          "476:   created: number;",
          "477:   state: StreamState;",
          "478:   cluster?: ClusterInfo;",
          "479:   mirror?: StreamSourceInfo;",
          "480:   sources?: StreamSourceInfo[];",
          "483:   name: string;",
          "484:   subjects?: string[];",
          "485:   retention: RetentionPolicy;",
          "486:   \"max_consumers\": number;",
          "487:   \"max_msgs\": number;",
          "488:   \"max_bytes\": number;",
          "489:   discard?: DiscardPolicy;",
          "490:   \"max_age\": number;",
          "491:   \"max_msg_size\"?: number;",
          "492:   storage: StorageType;",
          "493:   \"num_replicas\": number;",
          "494:   \"no_ack\"?: boolean;",
          "495:   \"template_owner\"?: string;",
          "496:   \"duplicate_window\"?: number;",
          "497:   placement?: Placement;",
          "498:   mirror?: StreamSource;",
          "499:   sources?: StreamSource[];",
          "502:   name: string;",
          "503:   \"opt_start_seq\": number;",
          "504:   \"opt_start_time\": string;",
          "505:   \"filter_subject\": string;",
          "508:   cluster: string;",
          "509:   tags: string[];",
          "512:   Limits = \"limits\",",
          "513:   Interest = \"interest\",",
          "514:   Workqueue = \"workqueue\",",
          "517:   Old = \"old\",",
          "518:   New = \"new\",",
          "521:   File = \"file\",",
          "522:   Memory = \"memory\",",
          "525:   All = \"all\",",
          "526:   Last = \"last\",",
          "527:   New = \"new\",",
          "528:   StartSequence = \"by_start_sequence\",",
          "529:   StartTime = \"by_start_time\",",
          "532:   None = \"none\",",
          "533:   All = \"all\",",
          "534:   Explicit = \"explicit\",",
          "535:   NotSet = \"\",",
          "538:   Instant = \"instant\",",
          "539:   Original = \"original\",",
          "542:   messages: number;",
          "543:   bytes: number;",
          "544:   \"first_seq\": number;",
          "545:   \"first_ts\": number;",
          "546:   \"last_seq\": number;",
          "547:   \"last_ts\": string;",
          "548:   deleted: number[];",
          "549:   lost: LostStreamData;",
          "550:   \"consumer_count\": number;",
          "553:   msgs: number;",
          "554:   bytes: number;",
          "557:   name?: string;",
          "558:   leader?: string;",
          "559:   replicas?: PeerInfo[];",
          "562:   name: string;",
          "563:   current: boolean;",
          "564:   offline: boolean;",
          "565:   active: Nanos;",
          "566:   lag: number;",
          "569:   name: string;",
          "570:   lag: number;",
          "571:   active: Nanos;",
          "572:   error?: ApiError;",
          "575:   purged: number;",
          "578:   \"stream_name\": string;",
          "579:   config: Partial<ConsumerConfig>;",
          "582:   message: {",
          "583:     subject: string;",
          "584:     seq: number;",
          "585:     data: string;",
          "586:     hdrs: string;",
          "587:     time: string;",
          "588:   };",
          "591:   \"consumer_seq\": number;",
          "592:   \"stream_seq\": number;",
          "595:   \"stream_name\": string;",
          "596:   name: string;",
          "597:   created: number;",
          "598:   config: ConsumerConfig;",
          "599:   delivered: SequencePair;",
          "600:   \"ack_floor\": SequencePair;",
          "601:   \"num_ack_pending\": number;",
          "602:   \"num_redelivered\": number;",
          "603:   \"num_waiting\": number;",
          "604:   \"num_pending\": number;",
          "605:   cluster?: ClusterInfo;",
          "608:   consumers: ConsumerInfo[];",
          "611:   streams: StreamInfo[];",
          "614:   success: boolean;",
          "618:   seq: number;",
          "621:   \"no_erase\"?: boolean;",
          "624:   memory: number;",
          "625:   storage: number;",
          "626:   streams: number;",
          "627:   consumers: number;",
          "628:   api: JetStreamApiStats;",
          "629:   limits: AccountLimits;",
          "632:   total: number;",
          "633:   errors: number;",
          "635: export interface AccountInfoResponse",
          "636:   extends ApiResponse, JetStreamAccountStats {",
          "639:   \"max_memory\": number;",
          "640:   \"max_storage\": number;",
          "641:   \"max_streams\": number;",
          "642:   \"max_consumers\": number;",
          "645:   name: string;",
          "646:   \"durable_name\"?: string;",
          "647:   \"deliver_subject\"?: string;",
          "648:   \"deliver_policy\": DeliverPolicy;",
          "649:   \"opt_start_seq\"?: number;",
          "650:   \"opt_start_time\"?: string;",
          "651:   \"ack_policy\": AckPolicy;",
          "652:   \"ack_wait\"?: number;",
          "653:   \"max_deliver\"?: number;",
          "654:   \"filter_subject\"?: string;",
          "655:   \"replay_policy\": ReplayPolicy;",
          "656:   \"rate_limit_bps\"?: number;",
          "657:   \"sample_freq\"?: string;",
          "658:   \"max_waiting\"?: number;",
          "659:   \"max_ack_pending\"?: number;",
          "662:   \"stream_name\": string;",
          "663:   config: ConsumerConfig;",
          "666:   streams: string[];",
          "669:   subject: string;",
          "672:   expires: number;",
          "673:   batch: number;",
          "674:   \"no_wait\": boolean;",
          "",
          "[Added Lines]",
          "325: export declare type JetStreamPullSubscription = JetStreamSubscription & Pullable;",
          "326: export declare type JsMsgCallback = (err: NatsError | null, msg: JsMsg | null) => void;",
          "328:     publish(subj: string, data?: Uint8Array, options?: Partial<JetStreamPublishOptions>): Promise<PubAck>;",
          "329:     pull(stream: string, durable: string): Promise<JsMsg>;",
          "330:     fetch(stream: string, durable: string, opts?: Partial<PullOptions>): QueuedIterator<JsMsg>;",
          "331:     pullSubscribe(subject: string, opts: ConsumerOptsBuilder | Partial<ConsumerOpts>): Promise<JetStreamPullSubscription>;",
          "332:     subscribe(subject: string, opts: ConsumerOptsBuilder | Partial<ConsumerOpts>): Promise<JetStreamSubscription>;",
          "335:     config: Partial<ConsumerConfig>;",
          "336:     mack: boolean;",
          "337:     subQueue: string;",
          "338:     stream: string;",
          "339:     callbackFn?: JsMsgCallback;",
          "340:     name?: string;",
          "341:     max?: number;",
          "342:     debug?: boolean;",
          "347:     deliverTo(subject: string): void;",
          "348:     manualAck(): void;",
          "349:     durable(name: string): void;",
          "350:     deliverAll(): void;",
          "351:     deliverLast(): void;",
          "352:     deliverNew(): void;",
          "353:     startSequence(seq: number): void;",
          "354:     startTime(time: Date | Nanos): void;",
          "355:     ackNone(): void;",
          "356:     ackAll(): void;",
          "357:     ackExplicit(): void;",
          "358:     maxDeliver(max: number): void;",
          "359:     maxAckPending(max: number): void;",
          "360:     maxWaiting(max: number): void;",
          "361:     maxMessages(max: number): void;",
          "362:     callback(fn: JsMsgCallback): void;",
          "365:     next(): Promise<T[]>;",
          "368:     info(stream: string, consumer: string): Promise<ConsumerInfo>;",
          "369:     add(stream: string, cfg: Partial<ConsumerConfig>): Promise<ConsumerInfo>;",
          "370:     delete(stream: string, consumer: string): Promise<boolean>;",
          "371:     list(stream: string): Lister<ConsumerInfo>;",
          "372: }",
          "373: export declare type StreamInfoRequestOptions = {",
          "374:     \"deleted_details\": boolean;",
          "375: };",
          "377:     info(stream: string, opts?: StreamInfoRequestOptions): Promise<StreamInfo>;",
          "378:     add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "379:     update(cfg: StreamConfig): Promise<StreamInfo>;",
          "380:     purge(stream: string): Promise<PurgeResponse>;",
          "381:     delete(stream: string): Promise<boolean>;",
          "382:     list(): Lister<StreamInfo>;",
          "383:     deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "384:     getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "385:     find(subject: string): Promise<string>;",
          "388:     redelivered: boolean;",
          "389:     info: DeliveryInfo;",
          "390:     seq: number;",
          "391:     headers: MsgHdrs | undefined;",
          "392:     data: Uint8Array;",
          "393:     subject: string;",
          "394:     sid: number;",
          "395:     ack(): void;",
          "396:     nak(): void;",
          "397:     working(): void;",
          "398:     term(): void;",
          "399:     ackAck(): Promise<boolean>;",
          "402:     stream: string;",
          "403:     consumer: string;",
          "404:     redeliveryCount: number;",
          "405:     streamSequence: number;",
          "406:     deliverySequence: number;",
          "407:     timestampNanos: number;",
          "408:     pending: number;",
          "409:     redelivered: boolean;",
          "412:     subject: string;",
          "413:     seq: number;",
          "414:     header: MsgHdrs;",
          "415:     data: Uint8Array;",
          "416:     time: Date;",
          "419:     kind: AdvisoryKind;",
          "420:     data: unknown;",
          "423:     API = \"api_audit\",",
          "424:     StreamAction = \"stream_action\",",
          "425:     ConsumerAction = \"consumer_action\",",
          "426:     SnapshotCreate = \"snapshot_create\",",
          "427:     SnapshotComplete = \"snapshot_complete\",",
          "428:     RestoreCreate = \"restore_create\",",
          "429:     RestoreComplete = \"restore_complete\",",
          "430:     MaxDeliver = \"max_deliver\",",
          "431:     Terminated = \"terminated\",",
          "432:     Ack = \"consumer_ack\",",
          "433:     StreamLeaderElected = \"stream_leader_elected\",",
          "434:     StreamQuorumLost = \"stream_quorum_lost\",",
          "435:     ConsumerLeaderElected = \"consumer_leader_elected\",",
          "436:     ConsumerQuorumLost = \"consumer_quorum_lost\"",
          "440:     code: number;",
          "441:     description: string;",
          "444:     type: string;",
          "445:     error?: ApiError;",
          "448:     total: number;",
          "449:     offset: number;",
          "450:     limit: number;",
          "453:     offset: number;",
          "456:     config: StreamConfig;",
          "457:     created: number;",
          "458:     state: StreamState;",
          "459:     cluster?: ClusterInfo;",
          "460:     mirror?: StreamSourceInfo;",
          "461:     sources?: StreamSourceInfo[];",
          "464:     name: string;",
          "465:     subjects?: string[];",
          "466:     retention: RetentionPolicy;",
          "467:     \"max_consumers\": number;",
          "468:     \"max_msgs\": number;",
          "469:     \"max_bytes\": number;",
          "470:     discard?: DiscardPolicy;",
          "471:     \"max_age\": Nanos;",
          "472:     \"max_msg_size\"?: number;",
          "473:     storage: StorageType;",
          "474:     \"num_replicas\": number;",
          "475:     \"no_ack\"?: boolean;",
          "476:     \"template_owner\"?: string;",
          "477:     \"duplicate_window\"?: number;",
          "478:     placement?: Placement;",
          "479:     mirror?: StreamSource;",
          "480:     sources?: StreamSource[];",
          "483:     name: string;",
          "484:     \"opt_start_seq\": number;",
          "485:     \"opt_start_time\": string;",
          "486:     \"filter_subject\": string;",
          "489:     cluster: string;",
          "490:     tags: string[];",
          "493:     Limits = \"limits\",",
          "494:     Interest = \"interest\",",
          "495:     Workqueue = \"workqueue\"",
          "498:     Old = \"old\",",
          "499:     New = \"new\"",
          "502:     File = \"file\",",
          "503:     Memory = \"memory\"",
          "506:     All = \"all\",",
          "507:     Last = \"last\",",
          "508:     New = \"new\",",
          "509:     StartSequence = \"by_start_sequence\",",
          "510:     StartTime = \"by_start_time\"",
          "513:     None = \"none\",",
          "514:     All = \"all\",",
          "515:     Explicit = \"explicit\",",
          "516:     NotSet = \"\"",
          "519:     Instant = \"instant\",",
          "520:     Original = \"original\"",
          "523:     messages: number;",
          "524:     bytes: number;",
          "525:     \"first_seq\": number;",
          "526:     \"first_ts\": number;",
          "527:     \"last_seq\": number;",
          "528:     \"last_ts\": string;",
          "529:     \"num_deleted\": number;",
          "530:     deleted: number[];",
          "531:     lost: LostStreamData;",
          "532:     \"consumer_count\": number;",
          "535:     msgs: number;",
          "536:     bytes: number;",
          "539:     name?: string;",
          "540:     leader?: string;",
          "541:     replicas?: PeerInfo[];",
          "544:     name: string;",
          "545:     current: boolean;",
          "546:     offline: boolean;",
          "547:     active: Nanos;",
          "548:     lag: number;",
          "551:     name: string;",
          "552:     lag: number;",
          "553:     active: Nanos;",
          "554:     error?: ApiError;",
          "557:     purged: number;",
          "560:     \"stream_name\": string;",
          "561:     config: Partial<ConsumerConfig>;",
          "564:     message: {",
          "565:         subject: string;",
          "566:         seq: number;",
          "567:         data: string;",
          "568:         hdrs: string;",
          "569:         time: string;",
          "570:     };",
          "573:     \"consumer_seq\": number;",
          "574:     \"stream_seq\": number;",
          "577:     \"stream_name\": string;",
          "578:     name: string;",
          "579:     created: number;",
          "580:     config: ConsumerConfig;",
          "581:     delivered: SequencePair;",
          "582:     \"ack_floor\": SequencePair;",
          "583:     \"num_ack_pending\": number;",
          "584:     \"num_redelivered\": number;",
          "585:     \"num_waiting\": number;",
          "586:     \"num_pending\": number;",
          "587:     cluster?: ClusterInfo;",
          "590:     consumers: ConsumerInfo[];",
          "593:     streams: StreamInfo[];",
          "596:     success: boolean;",
          "600:     seq: number;",
          "603:     \"no_erase\"?: boolean;",
          "606:     memory: number;",
          "607:     storage: number;",
          "608:     streams: number;",
          "609:     consumers: number;",
          "610:     api: JetStreamApiStats;",
          "611:     limits: AccountLimits;",
          "614:     total: number;",
          "615:     errors: number;",
          "617: export interface AccountInfoResponse extends ApiResponse, JetStreamAccountStats {",
          "620:     \"max_memory\": number;",
          "621:     \"max_storage\": number;",
          "622:     \"max_streams\": number;",
          "623:     \"max_consumers\": number;",
          "626:     name: string;",
          "627:     \"durable_name\"?: string;",
          "628:     \"deliver_subject\"?: string;",
          "629:     \"deliver_policy\": DeliverPolicy;",
          "630:     \"opt_start_seq\"?: number;",
          "631:     \"opt_start_time\"?: string;",
          "632:     \"ack_policy\": AckPolicy;",
          "633:     \"ack_wait\"?: number;",
          "634:     \"max_deliver\"?: number;",
          "635:     \"filter_subject\"?: string;",
          "636:     \"replay_policy\": ReplayPolicy;",
          "637:     \"rate_limit_bps\"?: number;",
          "638:     \"sample_freq\"?: string;",
          "639:     \"max_waiting\"?: number;",
          "640:     \"max_ack_pending\"?: number;",
          "643:     \"stream_name\": string;",
          "644:     config: ConsumerConfig;",
          "647:     streams: string[];",
          "650:     subject: string;",
          "653:     expires: number;",
          "654:     batch: number;",
          "655:     \"no_wait\": boolean;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.4/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.4/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.4/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.4/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.2/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.0\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.4/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.1.2\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee10ff31570836958d8653a9bc485ecbeceb3384",
      "candidate_info": {
        "commit_hash": "ee10ff31570836958d8653a9bc485ecbeceb3384",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/ee10ff31570836958d8653a9bc485ecbeceb3384",
        "files": [
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "prep release",
        "before_after_code_files": [
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   render,",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-rc4/nats-base-client/internal_mod.ts\";",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "35: const VERSION = \"1.0.0-121\";",
          "",
          "[Added Lines]",
          "35: const VERSION = \"1.0.0-122\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
      "candidate_info": {
        "commit_hash": "1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
        "files": [
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "updated nbc to 1.0.1 (#90)",
        "before_after_code_files": [
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.0\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.1\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}