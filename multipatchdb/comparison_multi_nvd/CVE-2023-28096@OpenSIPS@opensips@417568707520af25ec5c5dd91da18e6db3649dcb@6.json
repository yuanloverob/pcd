{
  "cve_id": "CVE-2023-28096",
  "cve_desc": "OpenSIPS, a Session Initiation Protocol (SIP) server implementation, has a memory leak starting in the 2.3 branch and priot to versions 3.1.8 and 3.2.5. The memory leak was detected in the function `parse_mi_request` while performing coverage-guided fuzzing. This issue can be reproduced by sending multiple requests of the form `{\"jsonrpc\": \"2.0\",\"method\": \"log_le`. This malformed message was tested against an instance of OpenSIPS via FIFO transport layer and was found to increase the memory consumption over time.\n\nTo abuse this memory leak, attackers need to reach the management interface (MI) which typically should only be exposed on trusted interfaces. In cases where the MI is exposed to the internet without authentication, abuse of this issue will lead to memory exhaustion which may affect the underlying system\u2019s availability. No authentication is typically required to reproduce this issue. On the other hand, memory leaks may occur in other areas of OpenSIPS where the cJSON library is used for parsing JSON objects.\n\nThe issue has been fixed in versions 3.1.8 and 3.2.5.",
  "repo": "OpenSIPS/opensips",
  "patch_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
  "patch_info": {
    "commit_hash": "417568707520af25ec5c5dd91da18e6db3649dcb",
    "repo": "OpenSIPS/opensips",
    "commit_url": "https://github.com/OpenSIPS/opensips/commit/417568707520af25ec5c5dd91da18e6db3649dcb",
    "files": [
      "lib/cJSON.c"
    ],
    "message": "cJSON: fix memory leak on object parsing error\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-2mg2-g46r-j4qr",
    "before_after_code_files": [
      "lib/cJSON.c||lib/cJSON.c"
    ]
  },
  "patch_diff": {
    "lib/cJSON.c||lib/cJSON.c": [
      "File: lib/cJSON.c -> lib/cJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1483: fail:",
      "1484:     if (item->child != NULL)",
      "1485:     {",
      "1487:         item->child = NULL;",
      "1488:     }",
      "",
      "[Removed Lines]",
      "1486:         cJSON_Delete(child);",
      "",
      "[Added Lines]",
      "1486:         cJSON_Delete(item->child);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "973b04d8805d9e1b73833eba682790fcd7d0e56c",
      "candidate_info": {
        "commit_hash": "973b04d8805d9e1b73833eba682790fcd7d0e56c",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/973b04d8805d9e1b73833eba682790fcd7d0e56c",
        "files": [
          "parser/parse_hname2.c",
          "parser/test/test_parser.c"
        ],
        "message": "parse_msg(): Fix out-of-bounds read edge-case (OSS-Fuzz)\n\nAlso add a unit test suite for parse_msg().\n\nSeverity: low\nFixes OSS-Fuzz#39802\n\n(cherry picked from commit 66898d8208d158d95a27f1a76078a29bd1e08d7e)",
        "before_after_code_files": [
          "parser/parse_hname2.c||parser/parse_hname2.c",
          "parser/test/test_parser.c||parser/test/test_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "parser/parse_hname2.c||parser/parse_hname2.c": [
          "File: parser/parse_hname2.c -> parser/parse_hname2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:  if (p>=end)",
          "217:   goto error;",
          "218:  p = skip_ws(p, end);",
          "220:   goto error;",
          "222:  return (p+1);",
          "",
          "[Removed Lines]",
          "219:  if (*p != ':')",
          "",
          "[Added Lines]",
          "219:  if (p >= end || *p != ':')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:   case '\\t':",
          "238:    p = skip_ws( p+1, end);",
          "240:     goto error;",
          "241:    return (p+1);",
          "",
          "[Removed Lines]",
          "239:    if (*p != ':')",
          "",
          "[Added Lines]",
          "239:    if (p >= end || *p != ':')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:    case '\\t':",
          "258:     hdr->name.len = p - hdr->name.s;",
          "259:     p = skip_ws(p+1, end);",
          "261:      goto error;",
          "262:     return (p+1);",
          "263:   }",
          "",
          "[Removed Lines]",
          "260:     if (*p != ':')",
          "",
          "[Added Lines]",
          "260:     if (p >= end || *p != ':')",
          "",
          "---------------"
        ],
        "parser/test/test_parser.c||parser/test/test_parser.c": [
          "File: parser/test/test_parser.c -> parser/test/test_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  ok(str_match(&u.pn_purr_val, const_str(\"t\")), \"puri-43\");",
          "144: }",
          "146: void test_parser(void)",
          "147: {",
          "148:  test_parse_qop_val();",
          "149:  test_parse_fcaps();",
          "151:  test_parse_authenticate_body();",
          "152: }",
          "",
          "[Removed Lines]",
          "150:  test_parse_uri();",
          "",
          "[Added Lines]",
          "146: static const struct tts {",
          "147:  const unsigned char tmsg[32];",
          "148:  int tres;",
          "149: } tset[] = {",
          "150:  {",
          "152:   {'e', ' ', 255, 255, 255, 255, ' ', ' ', ' ', ' ', ' ', 255, '\\n', 255, 255, ' ', ' '},",
          "153:   -1,",
          "154:  },",
          "156:  {{0}, 0},",
          "157: };",
          "159: void test_parse_msg(void)",
          "160: {",
          "161:  int i;",
          "163:  for (i = 0; tset[i].tmsg[0]; i++) {",
          "164:   struct sip_msg msg;",
          "166:   memset(&msg, 0, sizeof msg);",
          "167:   msg.buf = (char *)tset[i].tmsg;",
          "168:   msg.len = strlen(msg.buf);",
          "170:   ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, \"parse-msg-0\");",
          "171:  }",
          "172: }",
          "177:  test_parse_uri();",
          "178:  test_parse_msg();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f14bae9c5d822db4091236860163fcef0c0a779",
      "candidate_info": {
        "commit_hash": "6f14bae9c5d822db4091236860163fcef0c0a779",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/6f14bae9c5d822db4091236860163fcef0c0a779",
        "files": [
          "pvar.c",
          "usr_avp.c",
          "usr_avp.h"
        ],
        "message": "Allow writing to AVPs with negative index\n\nThis includes both SET and DELETE operations, for example:\n    $(avp(foo)[-1]) = NULL;\n    $(avp(foo)[-1]) = \"42\";\n\n(cherry picked from commit df362fb231fc42735f6aedcbdb8f036a72a98f2e)",
        "before_after_code_files": [
          "pvar.c||pvar.c",
          "usr_avp.c||usr_avp.c",
          "usr_avp.h||usr_avp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pvar.c||pvar.c": [
          "File: pvar.c -> pvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2858:    destroy_avps(name_type, avp_name, 1);",
          "2859:   else",
          "2860:   {",
          "2866:    destroy_index_avp(name_type, avp_name, idx);",
          "2867:   }",
          "2868:   return 0;",
          "",
          "[Removed Lines]",
          "2861:    if(idx < 0)",
          "2862:    {",
          "2863:     LM_ERR(\"Index with negative value\\n\");",
          "2864:     return -1;",
          "2865:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "usr_avp.c||usr_avp.c": [
          "File: usr_avp.c -> usr_avp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:  struct usr_avp* avp_new, *avp_del;",
          "203:  if(index < 0) {",
          "206:  }",
          "208:  avp_del = search_index_avp(flags, name, 0, index);",
          "",
          "[Removed Lines]",
          "204:   LM_ERR(\"Index with negative value\\n\");",
          "205:   return -1;",
          "",
          "[Added Lines]",
          "205:   int pidx = count_avps(flags, name) + index;",
          "206:   if (pidx < 0) {",
          "207:    LM_DBG(\"AVP with the specified index (%d) not found\\n\", index);",
          "208:    return -1;",
          "209:   }",
          "211:   index = pidx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415: {",
          "416:  struct usr_avp *avp = NULL;",
          "418:  avp = search_index_avp(flags, name, 0, index);",
          "419:  if(avp== NULL) {",
          "420:   LM_DBG(\"AVP with the specified index not found\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:  if(index < 0) {",
          "426:   int pidx = count_avps(flags, name) + index;",
          "427:   if (pidx < 0) {",
          "428:    LM_DBG(\"AVP with the specified index (%d) not found\\n\", index);",
          "429:    return;",
          "430:   }",
          "432:   index = pidx;",
          "433:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:  destroy_avp( avp );",
          "425: }",
          "427: void destroy_avp_list_bulk( struct usr_avp **list )",
          "428: {",
          "429:  struct usr_avp *avp, *foo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: int count_avps(unsigned short flags, int name)",
          "445: {",
          "446:  struct usr_avp *avp = NULL;",
          "447:  int n = 0;",
          "449:  while ((avp=search_first_avp(flags, name, 0, avp)))",
          "450:   n++;",
          "452:  return n;",
          "453: }",
          "",
          "---------------"
        ],
        "usr_avp.h||usr_avp.h": [
          "File: usr_avp.h -> usr_avp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: void reset_avps( );",
          "102: void destroy_avp( struct usr_avp *avp);",
          "103: void destroy_index_avp( unsigned short flags, int name, int index);",
          "104: int  destroy_avps( unsigned short flags, int name, int all);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: int  count_avps(unsigned short flags, int name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52a401875e5339b84b1b452f48af764f49b5d068",
      "candidate_info": {
        "commit_hash": "52a401875e5339b84b1b452f48af764f49b5d068",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/52a401875e5339b84b1b452f48af764f49b5d068",
        "files": [
          "pvar.c"
        ],
        "message": "Merge pull request #2885 from john08burke/multipart_crash\n\npvar: fix crash when parsing multi-part body with negative index\n(cherry picked from commit cd853142daa005c20f54cfb93ae99d48ba1e510c)",
        "before_after_code_files": [
          "pvar.c||pvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pvar.c||pvar.c": [
          "File: pvar.c -> pvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:  if (idx<0) {",
          "1702:   first_part_by_mime( &sbody->first, neg_index[1], mime );",
          "1703:   neg_index[0] = neg_index[1];",
          "1705:   distance -= idx+1;",
          "1707:    if (distance == 0) {",
          "1708:     first_part_by_mime( neg_index[0]->next, neg_index[0], mime );",
          "1709:    } else {",
          "",
          "[Removed Lines]",
          "1706:   while (neg_index[1]->next) {",
          "",
          "[Added Lines]",
          "1705:   if (neg_index[0]==NULL) {",
          "1706:    LM_DBG(\"Body part not found for <%d>\\n\", mime);",
          "1707:    return pv_get_null(msg, param, res);",
          "1708:   }",
          "1712:   first_part_by_mime(neg_index[1]->next, neg_index[1], mime);",
          "1713:   while (neg_index[1]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d60e7422aff69ca083fac3f907d7183c2e7f58e",
      "candidate_info": {
        "commit_hash": "1d60e7422aff69ca083fac3f907d7183c2e7f58e",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/1d60e7422aff69ca083fac3f907d7183c2e7f58e",
        "files": [
          "modules/sipmsgops/codecs.c"
        ],
        "message": "[sipmsgops] fix codec_delete_XX() parsing\n\nIssue discovered during OpenSIPS Security Audit 2021/2022,\nby Alfred Farrugia & Sandro Gauci (Enable Security)\n\nhttps://github.com/OpenSIPS/opensips/security/advisories/GHSA-3ghx-j39m-cw4f\n(cherry picked from commit dd051f8ed5ae3347fb1d556ced3c97822c9d8450)",
        "before_after_code_files": [
          "modules/sipmsgops/codecs.c||modules/sipmsgops/codecs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "modules/sipmsgops/codecs.c||modules/sipmsgops/codecs.c": [
          "File: modules/sipmsgops/codecs.c -> modules/sipmsgops/codecs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:      if (cur == lmp->u.value + lmp->len) {",
          "561:       tmp = found.s;",
          "563:        found.s--;",
          "564:        found.len++;",
          "565:       }",
          "",
          "[Removed Lines]",
          "562:       while (*(--tmp) == ' ') {",
          "",
          "[Added Lines]",
          "562:       while (tmp>lmp->u.value && *(--tmp) == ' ') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb415b5e1e66c675ecd58761150ef2021b32963d",
      "candidate_info": {
        "commit_hash": "eb415b5e1e66c675ecd58761150ef2021b32963d",
        "repo": "OpenSIPS/opensips",
        "commit_url": "https://github.com/OpenSIPS/opensips/commit/eb415b5e1e66c675ecd58761150ef2021b32963d",
        "files": [
          "Makefile.defs"
        ],
        "message": "Makefile: Fix detection for gcc 11 and higher\n\nContext: newer OS'es, e.g. Ubuntu 22.04, ship with gcc 11 nowadays.\n(cherry picked from commit 7273a3f13a8bb29a4b4da529c2e8c9bc2cc45492)",
        "before_after_code_files": [
          "Makefile.defs||Makefile.defs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/naveenecosmob/opensips/pull/1",
          "https://github.com/naveenecosmob/opensips/pull/5"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.defs||Makefile.defs": [
          "File: Makefile.defs -> Makefile.defs",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  #XXX: for now treat 4+.x the same as 4.x",
          "184:  CC_CLASS=$(shell echo \"$(CC_SHORTVER)\" | \\",
          "185:      sed -e 's/2\\.9.*/2.9x/' -e 's/3\\.[0-9]/3.x/' \\",
          "187: endif",
          "189: ifneq (, $(findstring Sun, $(CC_LONGVER)))",
          "",
          "[Removed Lines]",
          "186:      -e 's/\\([4-9]\\|10\\)\\(\\.[0-9]\\)\\?/4.x/')",
          "",
          "[Added Lines]",
          "186:      -e 's/\\([4-9]\\|[0-9]\\{2,\\}\\)\\(\\.[0-9]\\+\\)\\?/4.x/')",
          "",
          "---------------"
        ]
      }
    }
  ]
}